
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000184f 	.word	0x0000184f
  10:	00001851 	.word	0x00001851
  14:	00001853 	.word	0x00001853
  18:	00001855 	.word	0x00001855
	...
  2c:	00001857 	.word	0x00001857
  30:	00001859 	.word	0x00001859
  34:	00000000 	.word	0x00000000
  38:	0000185b 	.word	0x0000185b
  3c:	0000185d 	.word	0x0000185d
  40:	0000185f 	.word	0x0000185f
  44:	0000185f 	.word	0x0000185f
  48:	0000185f 	.word	0x0000185f
  4c:	0000185f 	.word	0x0000185f
  50:	0000185f 	.word	0x0000185f
  54:	0000185f 	.word	0x0000185f
  58:	0000185f 	.word	0x0000185f
  5c:	0000185f 	.word	0x0000185f
  60:	0000185f 	.word	0x0000185f
  64:	0000185f 	.word	0x0000185f
  68:	0000185f 	.word	0x0000185f
  6c:	0000185f 	.word	0x0000185f
  70:	0000185f 	.word	0x0000185f
  74:	0000185f 	.word	0x0000185f
  78:	0000185f 	.word	0x0000185f
  7c:	0000185f 	.word	0x0000185f
  80:	0000185f 	.word	0x0000185f
  84:	0000185f 	.word	0x0000185f
  88:	0000185f 	.word	0x0000185f
  8c:	0000185f 	.word	0x0000185f
  90:	0000185f 	.word	0x0000185f
  94:	0000185f 	.word	0x0000185f
  98:	0000185f 	.word	0x0000185f
  9c:	0000185f 	.word	0x0000185f
  a0:	0000185f 	.word	0x0000185f
  a4:	0000185f 	.word	0x0000185f
  a8:	0000185f 	.word	0x0000185f
  ac:	0000185f 	.word	0x0000185f
  b0:	0000185f 	.word	0x0000185f
  b4:	0000185f 	.word	0x0000185f
  b8:	0000185f 	.word	0x0000185f
  bc:	0000185f 	.word	0x0000185f
  c0:	0000185f 	.word	0x0000185f
  c4:	0000185f 	.word	0x0000185f
  c8:	0000185f 	.word	0x0000185f
  cc:	0000185f 	.word	0x0000185f
  d0:	0000185f 	.word	0x0000185f
  d4:	0000185f 	.word	0x0000185f
  d8:	0000185f 	.word	0x0000185f
  dc:	0000185f 	.word	0x0000185f
  e0:	0000185f 	.word	0x0000185f
  e4:	0000185f 	.word	0x0000185f
  e8:	0000185f 	.word	0x0000185f
  ec:	0000185f 	.word	0x0000185f
  f0:	0000185f 	.word	0x0000185f
  f4:	0000185f 	.word	0x0000185f
  f8:	0000185f 	.word	0x0000185f
  fc:	0000185f 	.word	0x0000185f
 100:	0000185f 	.word	0x0000185f
 104:	0000185f 	.word	0x0000185f
 108:	0000185f 	.word	0x0000185f
 10c:	0000185f 	.word	0x0000185f
 110:	0000185f 	.word	0x0000185f
 114:	0000185f 	.word	0x0000185f
 118:	0000185f 	.word	0x0000185f
 11c:	0000185f 	.word	0x0000185f
 120:	0000185f 	.word	0x0000185f
 124:	0000185f 	.word	0x0000185f
 128:	0000185f 	.word	0x0000185f
 12c:	0000185f 	.word	0x0000185f
 130:	0000185f 	.word	0x0000185f
 134:	0000185f 	.word	0x0000185f
 138:	0000185f 	.word	0x0000185f
 13c:	0000185f 	.word	0x0000185f
 140:	0000185f 	.word	0x0000185f
 144:	0000185f 	.word	0x0000185f
 148:	0000185f 	.word	0x0000185f
 14c:	0000185f 	.word	0x0000185f
 150:	0000185f 	.word	0x0000185f
 154:	0000185f 	.word	0x0000185f
 158:	0000185f 	.word	0x0000185f
 15c:	0000185f 	.word	0x0000185f
 160:	0000185f 	.word	0x0000185f
 164:	0000185f 	.word	0x0000185f
 168:	0000185f 	.word	0x0000185f
 16c:	0000185f 	.word	0x0000185f
 170:	0000185f 	.word	0x0000185f
 174:	0000185f 	.word	0x0000185f
 178:	0000185f 	.word	0x0000185f
 17c:	0000185f 	.word	0x0000185f
 180:	0000185f 	.word	0x0000185f
 184:	0000185f 	.word	0x0000185f
 188:	0000185f 	.word	0x0000185f
 18c:	0000185f 	.word	0x0000185f
 190:	0000185f 	.word	0x0000185f
 194:	0000185f 	.word	0x0000185f
 198:	0000185f 	.word	0x0000185f
 19c:	0000185f 	.word	0x0000185f
 1a0:	0000185f 	.word	0x0000185f
 1a4:	0000185f 	.word	0x0000185f
 1a8:	0000185f 	.word	0x0000185f
 1ac:	0000185f 	.word	0x0000185f
 1b0:	0000185f 	.word	0x0000185f
 1b4:	0000185f 	.word	0x0000185f
 1b8:	0000185f 	.word	0x0000185f
 1bc:	0000185f 	.word	0x0000185f
 1c0:	0000185f 	.word	0x0000185f
 1c4:	0000185f 	.word	0x0000185f
 1c8:	0000185f 	.word	0x0000185f
 1cc:	0000185f 	.word	0x0000185f
 1d0:	0000185f 	.word	0x0000185f
 1d4:	0000185f 	.word	0x0000185f
 1d8:	0000185f 	.word	0x0000185f
 1dc:	0000185f 	.word	0x0000185f
 1e0:	0000185f 	.word	0x0000185f
 1e4:	0000185f 	.word	0x0000185f
 1e8:	0000185f 	.word	0x0000185f
 1ec:	0000185f 	.word	0x0000185f
 1f0:	0000185f 	.word	0x0000185f
 1f4:	0000185f 	.word	0x0000185f
 1f8:	0000185f 	.word	0x0000185f
 1fc:	0000185f 	.word	0x0000185f
 200:	0000185f 	.word	0x0000185f
 204:	0000185f 	.word	0x0000185f
 208:	0000185f 	.word	0x0000185f
 20c:	0000185f 	.word	0x0000185f
 210:	0000185f 	.word	0x0000185f
 214:	0000185f 	.word	0x0000185f
 218:	0000185f 	.word	0x0000185f
 21c:	0000185f 	.word	0x0000185f
 220:	0000185f 	.word	0x0000185f
 224:	0000185f 	.word	0x0000185f
 228:	0000185f 	.word	0x0000185f
 22c:	0000185f 	.word	0x0000185f
 230:	0000185f 	.word	0x0000185f
 234:	0000185f 	.word	0x0000185f
 238:	0000185f 	.word	0x0000185f
 23c:	0000185f 	.word	0x0000185f
 240:	0000185f 	.word	0x0000185f
 244:	0000185f 	.word	0x0000185f
 248:	0000185f 	.word	0x0000185f
 24c:	0000185f 	.word	0x0000185f
 250:	0000185f 	.word	0x0000185f
 254:	0000185f 	.word	0x0000185f
 258:	0000185f 	.word	0x0000185f
 25c:	0000185f 	.word	0x0000185f
 260:	0000185f 	.word	0x0000185f
 264:	0000185f 	.word	0x0000185f
 268:	0000185f 	.word	0x0000185f
 26c:	0000185f 	.word	0x0000185f
 270:	0000185f 	.word	0x0000185f
 274:	0000185f 	.word	0x0000185f
 278:	0000185f 	.word	0x0000185f
 27c:	0000185f 	.word	0x0000185f
 280:	0000185f 	.word	0x0000185f
 284:	0000185f 	.word	0x0000185f
 288:	0000185f 	.word	0x0000185f
 28c:	0000185f 	.word	0x0000185f
 290:	0000185f 	.word	0x0000185f
 294:	0000185f 	.word	0x0000185f
 298:	0000185f 	.word	0x0000185f
 29c:	0000185f 	.word	0x0000185f
 2a0:	0000185f 	.word	0x0000185f
 2a4:	0000185f 	.word	0x0000185f
 2a8:	0000185f 	.word	0x0000185f
 2ac:	0000185f 	.word	0x0000185f
 2b0:	0000185f 	.word	0x0000185f
 2b4:	0000185f 	.word	0x0000185f
 2b8:	0000185f 	.word	0x0000185f
 2bc:	0000185f 	.word	0x0000185f
 2c0:	0000185f 	.word	0x0000185f
 2c4:	0000185f 	.word	0x0000185f
 2c8:	0000185f 	.word	0x0000185f
 2cc:	0000185f 	.word	0x0000185f
 2d0:	0000185f 	.word	0x0000185f
 2d4:	0000185f 	.word	0x0000185f
 2d8:	0000185f 	.word	0x0000185f
 2dc:	0000185f 	.word	0x0000185f
 2e0:	0000185f 	.word	0x0000185f
 2e4:	0000185f 	.word	0x0000185f
 2e8:	0000185f 	.word	0x0000185f
 2ec:	0000185f 	.word	0x0000185f
 2f0:	0000185f 	.word	0x0000185f
 2f4:	0000185f 	.word	0x0000185f
 2f8:	0000185f 	.word	0x0000185f
 2fc:	0000185f 	.word	0x0000185f
 300:	0000185f 	.word	0x0000185f
 304:	0000185f 	.word	0x0000185f
 308:	0000185f 	.word	0x0000185f
 30c:	0000185f 	.word	0x0000185f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f91b 	bl	16bc <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f9da 	bl	1844 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97d8 	.word	0x1fff97d8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f925 	bl	17e8 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f80b 	bl	8cc <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b6:	f001 f965 	bl	1b84 <SEGGER_RTT_Init>

    /* Init the scheduler with two tasks */
    Scheduler_Init( &Scheduler_Config );
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <main+0x18>)
     8bc:	f000 fd5a 	bl	1374 <Scheduler_Init>

    while( 1u ) 
    {
        /* Run the scheduler forever */
        Scheduler_MainFunction( );
     8c0:	f000 fe14 	bl	14ec <Scheduler_MainFunction>
     8c4:	e7fc      	b.n	8c0 <main+0x10>
     8c6:	bf00      	nop
     8c8:	000167d4 	.word	0x000167d4

000008cc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8cc:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     8ce:	4813      	ldr	r0, [pc, #76]	; (91c <EcuM_Init+0x50>)
     8d0:	f005 fd06 	bl	62e0 <Mcu_Init>
    Mcu_SetMode( McuModeSettingConf_0 );
     8d4:	2000      	movs	r0, #0
     8d6:	f005 fd7b 	bl	63d0 <Mcu_SetMode>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8da:	2000      	movs	r0, #0
     8dc:	f005 fd54 	bl	6388 <Mcu_InitClock>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     8e0:	2000      	movs	r0, #0
     8e2:	f001 ff68 	bl	27b6 <OsIf_Init>
    /* Enable and setup interrupts */
    Platform_Init( NULL_PTR );
     8e6:	2000      	movs	r0, #0
     8e8:	f001 fe62 	bl	25b0 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     8ec:	480c      	ldr	r0, [pc, #48]	; (920 <EcuM_Init+0x54>)
     8ee:	f006 f8f9 	bl	6ae4 <Port_Init>

    /* Init the ADC with the parameters set in Tresos*/
    Adc_Init( &Adc_Config );
     8f2:	480c      	ldr	r0, [pc, #48]	; (924 <EcuM_Init+0x58>)
     8f4:	f007 ff1c 	bl	8730 <Adc_Init>
    • ADC0_SE5 and ADC1_SE15 channels are interleaved on PTB1 pin 
    • ADC1_SE8 and ADC0_SE8 channels are interleaved on PTB13 pin 
    • ADC1_SE9 and ADC0_SE9 channels are interleaved on PTB14 pin
    */
    /* By default ADC0-CH5 is not connected to B1, but with this function it will */
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
     8f8:	2208      	movs	r2, #8
     8fa:	2101      	movs	r1, #1
     8fc:	480a      	ldr	r0, [pc, #40]	; (928 <EcuM_Init+0x5c>)
     8fe:	f006 fac5 	bl	6e8c <Port_Ci_Port_Ip_SetMuxModeSel>
    /* By default ADC0-CH8 is not connected to B13, but with this function it will */
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     902:	2208      	movs	r2, #8
     904:	210d      	movs	r1, #13
     906:	4808      	ldr	r0, [pc, #32]	; (928 <EcuM_Init+0x5c>)
     908:	f006 fac0 	bl	6e8c <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Init Pwm driver and configuration for FTM1-CH7 */
    Pwm_Init( &Pwm_Config );   
     90c:	4807      	ldr	r0, [pc, #28]	; (92c <EcuM_Init+0x60>)
     90e:	f00e f857 	bl	e9c0 <Pwm_Init>

    /* Initializing IO Hardware Abstractions with the module ID 0 */
    IoHwAb_Init0( NULL_PTR );
     912:	2000      	movs	r0, #0
     914:	f000 fcb8 	bl	1288 <IoHwAb_Init0>
}
     918:	bf00      	nop
     91a:	bd08      	pop	{r3, pc}
     91c:	00016e40 	.word	0x00016e40
     920:	00017390 	.word	0x00017390
     924:	0001695c 	.word	0x0001695c
     928:	4004a000 	.word	0x4004a000
     92c:	00017400 	.word	0x00017400

00000930 <Os_50ms_Task>:
 * @brief This is the function for the 50ms task.
 *
 * This function executes the state machine every 50ms.
 */
void Os_50ms_Task( void )
{
     930:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     932:	f000 f9e7 	bl	d04 <HwIoAb_Buttons_MainFunction>
}
     936:	bf00      	nop
     938:	bd08      	pop	{r3, pc}
	...

0000093c <Os_100ms_Task>:
 *                  (as Pot 2 visual indicator). 
 *  - Hold click:   buzzer shall start to beep and play Tone 3.  
 *  - Release:      buzzer shall stop.
 */
void Os_100ms_Task( void )
{
     93c:	b500      	push	{lr}
     93e:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     940:	2300      	movs	r3, #0
     942:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     946:	2300      	movs	r3, #0
     948:	f88d 3007 	strb.w	r3, [sp, #7]
     94c:	e122      	b.n	b94 <Os_100ms_Task+0x258>
    {  
        RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     94e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     952:	4618      	mov	r0, r3
     954:	f000 f9b8 	bl	cc8 <HwIoAb_Buttons_GetEvent>
     958:	4603      	mov	r3, r0
     95a:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     95e:	f89d 3006 	ldrb.w	r3, [sp, #6]
     962:	2b00      	cmp	r3, #0
     964:	f000 810e 	beq.w	b84 <Os_100ms_Task+0x248>
        {
            switch( CurrentButton )
     968:	f89d 3007 	ldrb.w	r3, [sp, #7]
     96c:	2b02      	cmp	r3, #2
     96e:	f000 80ac 	beq.w	aca <Os_100ms_Task+0x18e>
     972:	2b02      	cmp	r3, #2
     974:	f300 8108 	bgt.w	b88 <Os_100ms_Task+0x24c>
     978:	2b00      	cmp	r3, #0
     97a:	d002      	beq.n	982 <Os_100ms_Task+0x46>
     97c:	2b01      	cmp	r3, #1
     97e:	d052      	beq.n	a26 <Os_100ms_Task+0xea>
                        break;
                    }
                break;
                default :
                  // If jump here is an error
                break;
     980:	e102      	b.n	b88 <Os_100ms_Task+0x24c>
                    switch( RealEvent )
     982:	f89d 3006 	ldrb.w	r3, [sp, #6]
     986:	3b01      	subs	r3, #1
     988:	2b03      	cmp	r3, #3
     98a:	d84a      	bhi.n	a22 <Os_100ms_Task+0xe6>
     98c:	a201      	add	r2, pc, #4	; (adr r2, 994 <Os_100ms_Task+0x58>)
     98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     992:	bf00      	nop
     994:	000009a5 	.word	0x000009a5
     998:	000009c3 	.word	0x000009c3
     99c:	000009f5 	.word	0x000009f5
     9a0:	00000a0d 	.word	0x00000a0d
                            SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     9a4:	4980      	ldr	r1, [pc, #512]	; (ba8 <Os_100ms_Task+0x26c>)
     9a6:	2000      	movs	r0, #0
     9a8:	f001 fc54 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     9ac:	2000      	movs	r0, #0
     9ae:	f000 fb33 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Blue RGB LED Toggle \n" );
     9b2:	497e      	ldr	r1, [pc, #504]	; (bac <Os_100ms_Task+0x270>)
     9b4:	2000      	movs	r0, #0
     9b6:	f001 fc4d 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C10_LED2_ID );    // SINGLE_CLICK visual indicator
     9ba:	2005      	movs	r0, #5
     9bc:	f000 fb2c 	bl	1018 <HwIoAb_Leds_TurnToggle>
                        break;
     9c0:	e030      	b.n	a24 <Os_100ms_Task+0xe8>
                            SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     9c2:	497b      	ldr	r1, [pc, #492]	; (bb0 <Os_100ms_Task+0x274>)
     9c4:	2000      	movs	r0, #0
     9c6:	f001 fc45 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     9ca:	4b7a      	ldr	r3, [pc, #488]	; (bb4 <Os_100ms_Task+0x278>)
     9cc:	681b      	ldr	r3, [r3, #0]
     9ce:	330a      	adds	r3, #10
     9d0:	4618      	mov	r0, r3
     9d2:	f000 fb61 	bl	1098 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     9d6:	4b77      	ldr	r3, [pc, #476]	; (bb4 <Os_100ms_Task+0x278>)
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	895b      	ldrh	r3, [r3, #10]
     9dc:	461a      	mov	r2, r3
     9de:	4976      	ldr	r1, [pc, #472]	; (bb8 <Os_100ms_Task+0x27c>)
     9e0:	2000      	movs	r0, #0
     9e2:	f001 fc37 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C13_LED5_ID );    // DOUBLE_CLICK visual indicator
     9e6:	2008      	movs	r0, #8
     9e8:	f000 fb16 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C14_LED6_ID );    // Pot 1 visual indicator
     9ec:	2009      	movs	r0, #9
     9ee:	f000 fb13 	bl	1018 <HwIoAb_Leds_TurnToggle>
                        break;
     9f2:	e017      	b.n	a24 <Os_100ms_Task+0xe8>
                            SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     9f4:	4971      	ldr	r1, [pc, #452]	; (bbc <Os_100ms_Task+0x280>)
     9f6:	2000      	movs	r0, #0
     9f8:	f001 fc2c 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     9fc:	2000      	movs	r0, #0
     9fe:	f000 fc10 	bl	1222 <HwIoAb_Buzzer_Beep>
                            SEGGER_RTT_printf( 0, "Buzzer playing Tone 1 at 3Khz \n" );
     a02:	496f      	ldr	r1, [pc, #444]	; (bc0 <Os_100ms_Task+0x284>)
     a04:	2000      	movs	r0, #0
     a06:	f001 fc25 	bl	2254 <SEGGER_RTT_printf>
                        break;
     a0a:	e00b      	b.n	a24 <Os_100ms_Task+0xe8>
                            SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     a0c:	496d      	ldr	r1, [pc, #436]	; (bc4 <Os_100ms_Task+0x288>)
     a0e:	2000      	movs	r0, #0
     a10:	f001 fc20 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Buzzer_Stop();
     a14:	f000 fc32 	bl	127c <HwIoAb_Buzzer_Stop>
                            SEGGER_RTT_printf( 0, "Buzzer stopped \n" );
     a18:	496b      	ldr	r1, [pc, #428]	; (bc8 <Os_100ms_Task+0x28c>)
     a1a:	2000      	movs	r0, #0
     a1c:	f001 fc1a 	bl	2254 <SEGGER_RTT_printf>
                        break;
     a20:	e000      	b.n	a24 <Os_100ms_Task+0xe8>
                        break;
     a22:	bf00      	nop
                break;
     a24:	e0b1      	b.n	b8a <Os_100ms_Task+0x24e>
                    switch( RealEvent )
     a26:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a2a:	3b01      	subs	r3, #1
     a2c:	2b03      	cmp	r3, #3
     a2e:	d84a      	bhi.n	ac6 <Os_100ms_Task+0x18a>
     a30:	a201      	add	r2, pc, #4	; (adr r2, a38 <Os_100ms_Task+0xfc>)
     a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a36:	bf00      	nop
     a38:	00000a49 	.word	0x00000a49
     a3c:	00000a67 	.word	0x00000a67
     a40:	00000a99 	.word	0x00000a99
     a44:	00000ab1 	.word	0x00000ab1
                            SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     a48:	4960      	ldr	r1, [pc, #384]	; (bcc <Os_100ms_Task+0x290>)
     a4a:	2000      	movs	r0, #0
     a4c:	f001 fc02 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     a50:	2001      	movs	r0, #1
     a52:	f000 fae1 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Red RGB LED Toggle \n" );
     a56:	495e      	ldr	r1, [pc, #376]	; (bd0 <Os_100ms_Task+0x294>)
     a58:	2000      	movs	r0, #0
     a5a:	f001 fbfb 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C9_LED1_ID );    // SINGLE_CLICK visual indicator
     a5e:	2004      	movs	r0, #4
     a60:	f000 fada 	bl	1018 <HwIoAb_Leds_TurnToggle>
                        break;
     a64:	e030      	b.n	ac8 <Os_100ms_Task+0x18c>
                            SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     a66:	495b      	ldr	r1, [pc, #364]	; (bd4 <Os_100ms_Task+0x298>)
     a68:	2000      	movs	r0, #0
     a6a:	f001 fbf3 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_CONVERTED_RESULTS );
     a6e:	4b51      	ldr	r3, [pc, #324]	; (bb4 <Os_100ms_Task+0x278>)
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	330a      	adds	r3, #10
     a74:	4618      	mov	r0, r3
     a76:	f000 fb0f 	bl	1098 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC0 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     a7a:	4b4e      	ldr	r3, [pc, #312]	; (bb4 <Os_100ms_Task+0x278>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	899b      	ldrh	r3, [r3, #12]
     a80:	461a      	mov	r2, r3
     a82:	4955      	ldr	r1, [pc, #340]	; (bd8 <Os_100ms_Task+0x29c>)
     a84:	2000      	movs	r0, #0
     a86:	f001 fbe5 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C12_LED4_ID );    // DOUBLE_CLICK visual indicator
     a8a:	2007      	movs	r0, #7
     a8c:	f000 fac4 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C15_LED7_ID );    // Pot 2 visual indicator
     a90:	200a      	movs	r0, #10
     a92:	f000 fac1 	bl	1018 <HwIoAb_Leds_TurnToggle>
                        break;
     a96:	e017      	b.n	ac8 <Os_100ms_Task+0x18c>
                            SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     a98:	4950      	ldr	r1, [pc, #320]	; (bdc <Os_100ms_Task+0x2a0>)
     a9a:	2000      	movs	r0, #0
     a9c:	f001 fbda 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     aa0:	2001      	movs	r0, #1
     aa2:	f000 fbbe 	bl	1222 <HwIoAb_Buzzer_Beep>
                            SEGGER_RTT_printf( 0, "Buzzer playing Tone 2 at 5Khz \n" );
     aa6:	494e      	ldr	r1, [pc, #312]	; (be0 <Os_100ms_Task+0x2a4>)
     aa8:	2000      	movs	r0, #0
     aaa:	f001 fbd3 	bl	2254 <SEGGER_RTT_printf>
                        break;
     aae:	e00b      	b.n	ac8 <Os_100ms_Task+0x18c>
                            SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     ab0:	494c      	ldr	r1, [pc, #304]	; (be4 <Os_100ms_Task+0x2a8>)
     ab2:	2000      	movs	r0, #0
     ab4:	f001 fbce 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Buzzer_Stop();
     ab8:	f000 fbe0 	bl	127c <HwIoAb_Buzzer_Stop>
                            SEGGER_RTT_printf( 0, "Buzzer stopped \n" );
     abc:	4942      	ldr	r1, [pc, #264]	; (bc8 <Os_100ms_Task+0x28c>)
     abe:	2000      	movs	r0, #0
     ac0:	f001 fbc8 	bl	2254 <SEGGER_RTT_printf>
                        break;
     ac4:	e000      	b.n	ac8 <Os_100ms_Task+0x18c>
                        break;
     ac6:	bf00      	nop
                break;
     ac8:	e05f      	b.n	b8a <Os_100ms_Task+0x24e>
                    switch( RealEvent )
     aca:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ace:	3b01      	subs	r3, #1
     ad0:	2b03      	cmp	r3, #3
     ad2:	d855      	bhi.n	b80 <Os_100ms_Task+0x244>
     ad4:	a201      	add	r2, pc, #4	; (adr r2, adc <Os_100ms_Task+0x1a0>)
     ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ada:	bf00      	nop
     adc:	00000aed 	.word	0x00000aed
     ae0:	00000b0b 	.word	0x00000b0b
     ae4:	00000b53 	.word	0x00000b53
     ae8:	00000b6b 	.word	0x00000b6b
                            SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     aec:	493e      	ldr	r1, [pc, #248]	; (be8 <Os_100ms_Task+0x2ac>)
     aee:	2000      	movs	r0, #0
     af0:	f001 fbb0 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     af4:	2002      	movs	r0, #2
     af6:	f000 fa8f 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Green RGB LED Toggle \n" );
     afa:	493c      	ldr	r1, [pc, #240]	; (bec <Os_100ms_Task+0x2b0>)
     afc:	2000      	movs	r0, #0
     afe:	f001 fba9 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C8_LED0_ID );    // SINGLE_CLICK visual indicator
     b02:	2003      	movs	r0, #3
     b04:	f000 fa88 	bl	1018 <HwIoAb_Leds_TurnToggle>
                        break;
     b08:	e03b      	b.n	b82 <Os_100ms_Task+0x246>
                            SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     b0a:	4939      	ldr	r1, [pc, #228]	; (bf0 <Os_100ms_Task+0x2b4>)
     b0c:	2000      	movs	r0, #0
     b0e:	f001 fba1 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_CONVERTED_RESULTS );
     b12:	4b28      	ldr	r3, [pc, #160]	; (bb4 <Os_100ms_Task+0x278>)
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	330e      	adds	r3, #14
     b18:	4618      	mov	r0, r3
     b1a:	f000 fb1d 	bl	1158 <HwIoAb_Pots_GetAltValue>
                            SEGGER_RTT_printf( 0, "Pot 1 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[0] );
     b1e:	4b25      	ldr	r3, [pc, #148]	; (bb4 <Os_100ms_Task+0x278>)
     b20:	681b      	ldr	r3, [r3, #0]
     b22:	89db      	ldrh	r3, [r3, #14]
     b24:	461a      	mov	r2, r3
     b26:	4933      	ldr	r1, [pc, #204]	; (bf4 <Os_100ms_Task+0x2b8>)
     b28:	2000      	movs	r0, #0
     b2a:	f001 fb93 	bl	2254 <SEGGER_RTT_printf>
                            SEGGER_RTT_printf( 0, "Pot 2 ADC1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_alter[1] );
     b2e:	4b21      	ldr	r3, [pc, #132]	; (bb4 <Os_100ms_Task+0x278>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	8a1b      	ldrh	r3, [r3, #16]
     b34:	461a      	mov	r2, r3
     b36:	4930      	ldr	r1, [pc, #192]	; (bf8 <Os_100ms_Task+0x2bc>)
     b38:	2000      	movs	r0, #0
     b3a:	f001 fb8b 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C11_LED3_ID );    // DOUBLE_CLICK visual indicator
     b3e:	2006      	movs	r0, #6
     b40:	f000 fa6a 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C14_LED6_ID );    // Pot 1 visual indicator
     b44:	2009      	movs	r0, #9
     b46:	f000 fa67 	bl	1018 <HwIoAb_Leds_TurnToggle>
                            HwIoAb_Leds_TurnToggle( HWIOAB_C15_LED7_ID );    // Pot 2 visual indicator
     b4a:	200a      	movs	r0, #10
     b4c:	f000 fa64 	bl	1018 <HwIoAb_Leds_TurnToggle>
                        break;
     b50:	e017      	b.n	b82 <Os_100ms_Task+0x246>
                            SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     b52:	492a      	ldr	r1, [pc, #168]	; (bfc <Os_100ms_Task+0x2c0>)
     b54:	2000      	movs	r0, #0
     b56:	f001 fb7d 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     b5a:	2002      	movs	r0, #2
     b5c:	f000 fb61 	bl	1222 <HwIoAb_Buzzer_Beep>
                            SEGGER_RTT_printf( 0, "Buzzer playing Tone 3 at 7.5Khz \n" );
     b60:	4927      	ldr	r1, [pc, #156]	; (c00 <Os_100ms_Task+0x2c4>)
     b62:	2000      	movs	r0, #0
     b64:	f001 fb76 	bl	2254 <SEGGER_RTT_printf>
                        break;
     b68:	e00b      	b.n	b82 <Os_100ms_Task+0x246>
                            SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     b6a:	4926      	ldr	r1, [pc, #152]	; (c04 <Os_100ms_Task+0x2c8>)
     b6c:	2000      	movs	r0, #0
     b6e:	f001 fb71 	bl	2254 <SEGGER_RTT_printf>
                            HwIoAb_Buzzer_Stop();
     b72:	f000 fb83 	bl	127c <HwIoAb_Buzzer_Stop>
                            SEGGER_RTT_printf( 0, "Buzzer stopped \n" );
     b76:	4914      	ldr	r1, [pc, #80]	; (bc8 <Os_100ms_Task+0x28c>)
     b78:	2000      	movs	r0, #0
     b7a:	f001 fb6b 	bl	2254 <SEGGER_RTT_printf>
                        break;
     b7e:	e000      	b.n	b82 <Os_100ms_Task+0x246>
                        break;
     b80:	bf00      	nop
                break;
     b82:	e002      	b.n	b8a <Os_100ms_Task+0x24e>
            }  
        }
     b84:	bf00      	nop
     b86:	e000      	b.n	b8a <Os_100ms_Task+0x24e>
                break;
     b88:	bf00      	nop
    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b8e:	3301      	adds	r3, #1
     b90:	f88d 3007 	strb.w	r3, [sp, #7]
     b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b98:	2b02      	cmp	r3, #2
     b9a:	f67f aed8 	bls.w	94e <Os_100ms_Task+0x12>
    }   
}
     b9e:	bf00      	nop
     ba0:	bf00      	nop
     ba2:	b003      	add	sp, #12
     ba4:	f85d fb04 	ldr.w	pc, [sp], #4
     ba8:	00015c68 	.word	0x00015c68
     bac:	00015c88 	.word	0x00015c88
     bb0:	00015ca0 	.word	0x00015ca0
     bb4:	1fff8b54 	.word	0x1fff8b54
     bb8:	00015cc0 	.word	0x00015cc0
     bbc:	00015cec 	.word	0x00015cec
     bc0:	00015d0c 	.word	0x00015d0c
     bc4:	00015d2c 	.word	0x00015d2c
     bc8:	00015d48 	.word	0x00015d48
     bcc:	00015d5c 	.word	0x00015d5c
     bd0:	00015d7c 	.word	0x00015d7c
     bd4:	00015d94 	.word	0x00015d94
     bd8:	00015db4 	.word	0x00015db4
     bdc:	00015de0 	.word	0x00015de0
     be0:	00015e00 	.word	0x00015e00
     be4:	00015e20 	.word	0x00015e20
     be8:	00015e3c 	.word	0x00015e3c
     bec:	00015e5c 	.word	0x00015e5c
     bf0:	00015e74 	.word	0x00015e74
     bf4:	00015e94 	.word	0x00015e94
     bf8:	00015ec0 	.word	0x00015ec0
     bfc:	00015eec 	.word	0x00015eec
     c00:	00015f0c 	.word	0x00015f0c
     c04:	00015f30 	.word	0x00015f30

00000c08 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     c08:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c0a:	f3ef 8310 	mrs	r3, PRIMASK
     c0e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c10:	4623      	mov	r3, r4
}
     c12:	4618      	mov	r0, r3
     c14:	f85d 4b04 	ldr.w	r4, [sp], #4
     c18:	4770      	bx	lr

00000c1a <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     c1a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c1c:	f3ef 8310 	mrs	r3, PRIMASK
     c20:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c22:	4623      	mov	r3, r4
}
     c24:	4618      	mov	r0, r3
     c26:	f85d 4b04 	ldr.w	r4, [sp], #4
     c2a:	4770      	bx	lr

00000c2c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     c2c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c2e:	f3ef 8310 	mrs	r3, PRIMASK
     c32:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c34:	4623      	mov	r3, r4
}
     c36:	4618      	mov	r0, r3
     c38:	f85d 4b04 	ldr.w	r4, [sp], #4
     c3c:	4770      	bx	lr

00000c3e <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     c3e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c40:	f3ef 8310 	mrs	r3, PRIMASK
     c44:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c46:	4623      	mov	r3, r4
}
     c48:	4618      	mov	r0, r3
     c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
     c4e:	4770      	bx	lr

00000c50 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     c50:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c52:	f3ef 8310 	mrs	r3, PRIMASK
     c56:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c58:	4623      	mov	r3, r4
}
     c5a:	4618      	mov	r0, r3
     c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
     c60:	4770      	bx	lr
	...

00000c64 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     c64:	b084      	sub	sp, #16
     c66:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     c68:	4b16      	ldr	r3, [pc, #88]	; (cc4 <HwIoAb_Buttons_Init+0x60>)
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	2203      	movs	r2, #3
     c6e:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     c70:	4b14      	ldr	r3, [pc, #80]	; (cc4 <HwIoAb_Buttons_Init+0x60>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	9a01      	ldr	r2, [sp, #4]
     c76:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     c78:	2300      	movs	r3, #0
     c7a:	f88d 300f 	strb.w	r3, [sp, #15]
     c7e:	e012      	b.n	ca6 <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     c80:	4b10      	ldr	r3, [pc, #64]	; (cc4 <HwIoAb_Buttons_Init+0x60>)
     c82:	681a      	ldr	r2, [r3, #0]
     c84:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c88:	4413      	add	r3, r2
     c8a:	2200      	movs	r2, #0
     c8c:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     c8e:	4b0d      	ldr	r3, [pc, #52]	; (cc4 <HwIoAb_Buttons_Init+0x60>)
     c90:	681a      	ldr	r2, [r3, #0]
     c92:	f89d 300f 	ldrb.w	r3, [sp, #15]
     c96:	4413      	add	r3, r2
     c98:	2200      	movs	r2, #0
     c9a:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     c9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ca0:	3301      	adds	r3, #1
     ca2:	f88d 300f 	strb.w	r3, [sp, #15]
     ca6:	4b07      	ldr	r3, [pc, #28]	; (cc4 <HwIoAb_Buttons_Init+0x60>)
     ca8:	681b      	ldr	r3, [r3, #0]
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	f89d 200f 	ldrb.w	r2, [sp, #15]
     cb0:	429a      	cmp	r2, r3
     cb2:	d3e5      	bcc.n	c80 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     cb4:	4b03      	ldr	r3, [pc, #12]	; (cc4 <HwIoAb_Buttons_Init+0x60>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	2201      	movs	r2, #1
     cba:	739a      	strb	r2, [r3, #14]
}
     cbc:	bf00      	nop
     cbe:	b004      	add	sp, #16
     cc0:	4770      	bx	lr
     cc2:	bf00      	nop
     cc4:	1fff8b4c 	.word	0x1fff8b4c

00000cc8 <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     cc8:	b084      	sub	sp, #16
     cca:	4603      	mov	r3, r0
     ccc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     cd0:	2300      	movs	r3, #0
     cd2:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     cd6:	4b0a      	ldr	r3, [pc, #40]	; (d00 <HwIoAb_Buttons_GetEvent+0x38>)
     cd8:	681a      	ldr	r2, [r3, #0]
     cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cde:	4413      	add	r3, r2
     ce0:	7adb      	ldrb	r3, [r3, #11]
     ce2:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     ce6:	4b06      	ldr	r3, [pc, #24]	; (d00 <HwIoAb_Buttons_GetEvent+0x38>)
     ce8:	681a      	ldr	r2, [r3, #0]
     cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cee:	4413      	add	r3, r2
     cf0:	2200      	movs	r2, #0
     cf2:	72da      	strb	r2, [r3, #11]
    return temp;
     cf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     cf8:	4618      	mov	r0, r3
     cfa:	b004      	add	sp, #16
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop
     d00:	1fff8b4c 	.word	0x1fff8b4c

00000d04 <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     d04:	b500      	push	{lr}
     d06:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     d08:	2300      	movs	r3, #0
     d0a:	f88d 3007 	strb.w	r3, [sp, #7]
     d0e:	e15d      	b.n	fcc <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     d10:	4bb5      	ldr	r3, [pc, #724]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d12:	681a      	ldr	r2, [r3, #0]
     d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d18:	4413      	add	r3, r2
     d1a:	7a1b      	ldrb	r3, [r3, #8]
     d1c:	2b04      	cmp	r3, #4
     d1e:	f200 8145 	bhi.w	fac <HwIoAb_Buttons_MainFunction+0x2a8>
     d22:	a201      	add	r2, pc, #4	; (adr r2, d28 <HwIoAb_Buttons_MainFunction+0x24>)
     d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d28:	00000d3d 	.word	0x00000d3d
     d2c:	00000d89 	.word	0x00000d89
     d30:	00000eb1 	.word	0x00000eb1
     d34:	00000f49 	.word	0x00000f49
     d38:	00000e15 	.word	0x00000e15
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     d3c:	4baa      	ldr	r3, [pc, #680]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	685a      	ldr	r2, [r3, #4]
     d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d46:	00db      	lsls	r3, r3, #3
     d48:	4413      	add	r3, r2
     d4a:	881b      	ldrh	r3, [r3, #0]
     d4c:	4618      	mov	r0, r3
     d4e:	f006 fbdd 	bl	750c <Dio_ReadChannel>
     d52:	4603      	mov	r3, r0
     d54:	4619      	mov	r1, r3
     d56:	4ba4      	ldr	r3, [pc, #656]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	685a      	ldr	r2, [r3, #4]
     d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d60:	00db      	lsls	r3, r3, #3
     d62:	4413      	add	r3, r2
     d64:	789b      	ldrb	r3, [r3, #2]
     d66:	4299      	cmp	r1, r3
     d68:	f040 8122 	bne.w	fb0 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     d6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d70:	4a9e      	ldr	r2, [pc, #632]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     d72:	2100      	movs	r1, #0
     d74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     d78:	4b9b      	ldr	r3, [pc, #620]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d7a:	681a      	ldr	r2, [r3, #0]
     d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d80:	4413      	add	r3, r2
     d82:	2201      	movs	r2, #1
     d84:	721a      	strb	r2, [r3, #8]

                }
            break;
     d86:	e113      	b.n	fb0 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d8c:	4a97      	ldr	r2, [pc, #604]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     d8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d96:	3232      	adds	r2, #50	; 0x32
     d98:	4994      	ldr	r1, [pc, #592]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     da2:	4a92      	ldr	r2, [pc, #584]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     da4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     da8:	4b8f      	ldr	r3, [pc, #572]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	6859      	ldr	r1, [r3, #4]
     dae:	f89d 3007 	ldrb.w	r3, [sp, #7]
     db2:	00db      	lsls	r3, r3, #3
     db4:	440b      	add	r3, r1
     db6:	685b      	ldr	r3, [r3, #4]
     db8:	429a      	cmp	r2, r3
     dba:	d106      	bne.n	dca <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     dbc:	4b8a      	ldr	r3, [pc, #552]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     dbe:	681a      	ldr	r2, [r3, #0]
     dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc4:	4413      	add	r3, r2
     dc6:	2203      	movs	r2, #3
     dc8:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     dca:	4b87      	ldr	r3, [pc, #540]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	685a      	ldr	r2, [r3, #4]
     dd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dd4:	00db      	lsls	r3, r3, #3
     dd6:	4413      	add	r3, r2
     dd8:	881b      	ldrh	r3, [r3, #0]
     dda:	4618      	mov	r0, r3
     ddc:	f006 fb96 	bl	750c <Dio_ReadChannel>
     de0:	4603      	mov	r3, r0
     de2:	4619      	mov	r1, r3
     de4:	4b80      	ldr	r3, [pc, #512]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	685a      	ldr	r2, [r3, #4]
     dea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dee:	00db      	lsls	r3, r3, #3
     df0:	4413      	add	r3, r2
     df2:	789b      	ldrb	r3, [r3, #2]
     df4:	2b00      	cmp	r3, #0
     df6:	bf0c      	ite	eq
     df8:	2301      	moveq	r3, #1
     dfa:	2300      	movne	r3, #0
     dfc:	b2db      	uxtb	r3, r3
     dfe:	4299      	cmp	r1, r3
     e00:	f040 80d8 	bne.w	fb4 <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     e04:	4b78      	ldr	r3, [pc, #480]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e0c:	4413      	add	r3, r2
     e0e:	2204      	movs	r2, #4
     e10:	721a      	strb	r2, [r3, #8]
                }    
            break;
     e12:	e0cf      	b.n	fb4 <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     e14:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e18:	4a74      	ldr	r2, [pc, #464]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     e1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e22:	3232      	adds	r2, #50	; 0x32
     e24:	4971      	ldr	r1, [pc, #452]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e2e:	4a6f      	ldr	r2, [pc, #444]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e34:	4b6c      	ldr	r3, [pc, #432]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	6859      	ldr	r1, [r3, #4]
     e3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e3e:	00db      	lsls	r3, r3, #3
     e40:	440b      	add	r3, r1
     e42:	685b      	ldr	r3, [r3, #4]
     e44:	429a      	cmp	r2, r3
     e46:	d10d      	bne.n	e64 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     e48:	4b67      	ldr	r3, [pc, #412]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e4a:	681a      	ldr	r2, [r3, #0]
     e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e50:	4413      	add	r3, r2
     e52:	2201      	movs	r2, #1
     e54:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e56:	4b64      	ldr	r3, [pc, #400]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e58:	681a      	ldr	r2, [r3, #0]
     e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e5e:	4413      	add	r3, r2
     e60:	2200      	movs	r2, #0
     e62:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     e64:	4b60      	ldr	r3, [pc, #384]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	685a      	ldr	r2, [r3, #4]
     e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e6e:	00db      	lsls	r3, r3, #3
     e70:	4413      	add	r3, r2
     e72:	881b      	ldrh	r3, [r3, #0]
     e74:	4618      	mov	r0, r3
     e76:	f006 fb49 	bl	750c <Dio_ReadChannel>
     e7a:	4603      	mov	r3, r0
     e7c:	4619      	mov	r1, r3
     e7e:	4b5a      	ldr	r3, [pc, #360]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e80:	681b      	ldr	r3, [r3, #0]
     e82:	685a      	ldr	r2, [r3, #4]
     e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e88:	00db      	lsls	r3, r3, #3
     e8a:	4413      	add	r3, r2
     e8c:	789b      	ldrb	r3, [r3, #2]
     e8e:	4299      	cmp	r1, r3
     e90:	f040 8092 	bne.w	fb8 <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     e94:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e98:	4a54      	ldr	r2, [pc, #336]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     e9a:	2100      	movs	r1, #0
     e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     ea0:	4b51      	ldr	r3, [pc, #324]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ea2:	681a      	ldr	r2, [r3, #0]
     ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ea8:	4413      	add	r3, r2
     eaa:	2202      	movs	r2, #2
     eac:	721a      	strb	r2, [r3, #8]
                } 
            break;
     eae:	e083      	b.n	fb8 <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eb4:	4a4d      	ldr	r2, [pc, #308]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     eb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     eba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ebe:	3232      	adds	r2, #50	; 0x32
     ec0:	494a      	ldr	r1, [pc, #296]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eca:	4a48      	ldr	r2, [pc, #288]	; (fec <HwIoAb_Buttons_MainFunction+0x2e8>)
     ecc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     ed0:	4b45      	ldr	r3, [pc, #276]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	6859      	ldr	r1, [r3, #4]
     ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eda:	00db      	lsls	r3, r3, #3
     edc:	440b      	add	r3, r1
     ede:	685b      	ldr	r3, [r3, #4]
     ee0:	429a      	cmp	r2, r3
     ee2:	d106      	bne.n	ef2 <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     ee4:	4b40      	ldr	r3, [pc, #256]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ee6:	681a      	ldr	r2, [r3, #0]
     ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eec:	4413      	add	r3, r2
     eee:	2203      	movs	r2, #3
     ef0:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     ef2:	4b3d      	ldr	r3, [pc, #244]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	685a      	ldr	r2, [r3, #4]
     ef8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     efc:	00db      	lsls	r3, r3, #3
     efe:	4413      	add	r3, r2
     f00:	881b      	ldrh	r3, [r3, #0]
     f02:	4618      	mov	r0, r3
     f04:	f006 fb02 	bl	750c <Dio_ReadChannel>
     f08:	4603      	mov	r3, r0
     f0a:	4619      	mov	r1, r3
     f0c:	4b36      	ldr	r3, [pc, #216]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f0e:	681b      	ldr	r3, [r3, #0]
     f10:	685a      	ldr	r2, [r3, #4]
     f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f16:	00db      	lsls	r3, r3, #3
     f18:	4413      	add	r3, r2
     f1a:	789b      	ldrb	r3, [r3, #2]
     f1c:	2b00      	cmp	r3, #0
     f1e:	bf0c      	ite	eq
     f20:	2301      	moveq	r3, #1
     f22:	2300      	movne	r3, #0
     f24:	b2db      	uxtb	r3, r3
     f26:	4299      	cmp	r1, r3
     f28:	d148      	bne.n	fbc <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     f2a:	4b2f      	ldr	r3, [pc, #188]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f2c:	681a      	ldr	r2, [r3, #0]
     f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f32:	4413      	add	r3, r2
     f34:	2202      	movs	r2, #2
     f36:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     f38:	4b2b      	ldr	r3, [pc, #172]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f3a:	681a      	ldr	r2, [r3, #0]
     f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f40:	4413      	add	r3, r2
     f42:	2200      	movs	r2, #0
     f44:	721a      	strb	r2, [r3, #8]
                } 
            break;
     f46:	e039      	b.n	fbc <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     f48:	4b27      	ldr	r3, [pc, #156]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f4a:	681a      	ldr	r2, [r3, #0]
     f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f50:	4413      	add	r3, r2
     f52:	2203      	movs	r2, #3
     f54:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     f56:	4b24      	ldr	r3, [pc, #144]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	685a      	ldr	r2, [r3, #4]
     f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f60:	00db      	lsls	r3, r3, #3
     f62:	4413      	add	r3, r2
     f64:	881b      	ldrh	r3, [r3, #0]
     f66:	4618      	mov	r0, r3
     f68:	f006 fad0 	bl	750c <Dio_ReadChannel>
     f6c:	4603      	mov	r3, r0
     f6e:	4619      	mov	r1, r3
     f70:	4b1d      	ldr	r3, [pc, #116]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f72:	681b      	ldr	r3, [r3, #0]
     f74:	685a      	ldr	r2, [r3, #4]
     f76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f7a:	00db      	lsls	r3, r3, #3
     f7c:	4413      	add	r3, r2
     f7e:	789b      	ldrb	r3, [r3, #2]
     f80:	2b00      	cmp	r3, #0
     f82:	bf0c      	ite	eq
     f84:	2301      	moveq	r3, #1
     f86:	2300      	movne	r3, #0
     f88:	b2db      	uxtb	r3, r3
     f8a:	4299      	cmp	r1, r3
     f8c:	d118      	bne.n	fc0 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     f8e:	4b16      	ldr	r3, [pc, #88]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f90:	681a      	ldr	r2, [r3, #0]
     f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f96:	4413      	add	r3, r2
     f98:	2204      	movs	r2, #4
     f9a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     f9c:	4b12      	ldr	r3, [pc, #72]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f9e:	681a      	ldr	r2, [r3, #0]
     fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fa4:	4413      	add	r3, r2
     fa6:	2200      	movs	r2, #0
     fa8:	721a      	strb	r2, [r3, #8]
                }
            break;
     faa:	e009      	b.n	fc0 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
     fac:	bf00      	nop
     fae:	e008      	b.n	fc2 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fb0:	bf00      	nop
     fb2:	e006      	b.n	fc2 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fb4:	bf00      	nop
     fb6:	e004      	b.n	fc2 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fb8:	bf00      	nop
     fba:	e002      	b.n	fc2 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fbc:	bf00      	nop
     fbe:	e000      	b.n	fc2 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     fc0:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fc6:	3301      	adds	r3, #1
     fc8:	f88d 3007 	strb.w	r3, [sp, #7]
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     fd6:	429a      	cmp	r2, r3
     fd8:	f4ff ae9a 	bcc.w	d10 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
     fdc:	bf00      	nop
     fde:	bf00      	nop
     fe0:	b003      	add	sp, #12
     fe2:	f85d fb04 	ldr.w	pc, [sp], #4
     fe6:	bf00      	nop
     fe8:	1fff8b4c 	.word	0x1fff8b4c
     fec:	1fff9758 	.word	0x1fff9758

00000ff0 <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
     ff0:	b082      	sub	sp, #8
     ff2:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
     ff4:	4b07      	ldr	r3, [pc, #28]	; (1014 <HwIoAb_Leds_Init+0x24>)
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	220b      	movs	r2, #11
     ffa:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
     ffc:	4b05      	ldr	r3, [pc, #20]	; (1014 <HwIoAb_Leds_Init+0x24>)
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	9a01      	ldr	r2, [sp, #4]
    1002:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
    1004:	4b03      	ldr	r3, [pc, #12]	; (1014 <HwIoAb_Leds_Init+0x24>)
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	2201      	movs	r2, #1
    100a:	721a      	strb	r2, [r3, #8]
}
    100c:	bf00      	nop
    100e:	b002      	add	sp, #8
    1010:	4770      	bx	lr
    1012:	bf00      	nop
    1014:	1fff8b50 	.word	0x1fff8b50

00001018 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
    1018:	b500      	push	{lr}
    101a:	b083      	sub	sp, #12
    101c:	4603      	mov	r3, r0
    101e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <HwIoAb_Leds_TurnToggle+0x28>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	685a      	ldr	r2, [r3, #4]
    1028:	f89d 3007 	ldrb.w	r3, [sp, #7]
    102c:	009b      	lsls	r3, r3, #2
    102e:	4413      	add	r3, r2
    1030:	881b      	ldrh	r3, [r3, #0]
    1032:	4618      	mov	r0, r3
    1034:	f006 fa95 	bl	7562 <Dio_FlipChannel>
}
    1038:	bf00      	nop
    103a:	b003      	add	sp, #12
    103c:	f85d fb04 	ldr.w	pc, [sp], #4
    1040:	1fff8b50 	.word	0x1fff8b50

00001044 <HwIoAb_Pots_Init>:
 * @param Pots_Config Pointer to configuration array.
 * 
 * @note Hardware interleave for pins PTB1 and PTB13 is done in EcuM_Init(). 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config * Pots_Config )
{
    1044:	b500      	push	{lr}
    1046:	b085      	sub	sp, #20
    1048:	9001      	str	r0, [sp, #4]
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    /* Calibrating ADC modules */
    Adc_Calibrate( ADC0HwUnit, &Calib_Status_ADC0 );
    104a:	ab03      	add	r3, sp, #12
    104c:	4619      	mov	r1, r3
    104e:	2000      	movs	r0, #0
    1050:	f007 fe1a 	bl	8c88 <Adc_Calibrate>
    Adc_Calibrate( ADC1HwUnit, &Calib_Status_ADC1 );
    1054:	ab02      	add	r3, sp, #8
    1056:	4619      	mov	r1, r3
    1058:	2001      	movs	r0, #1
    105a:	f007 fe15 	bl	8c88 <Adc_Calibrate>

    /* Initializing raw results array/buffer */
    Adc_SetupResultBuffer( ADC0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    105e:	4b0d      	ldr	r3, [pc, #52]	; (1094 <HwIoAb_Pots_Init+0x50>)
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	3302      	adds	r3, #2
    1064:	4619      	mov	r1, r3
    1066:	2000      	movs	r0, #0
    1068:	f007 fbb0 	bl	87cc <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( ADC1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    106c:	4b09      	ldr	r3, [pc, #36]	; (1094 <HwIoAb_Pots_Init+0x50>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	3306      	adds	r3, #6
    1072:	4619      	mov	r1, r3
    1074:	2001      	movs	r0, #1
    1076:	f007 fba9 	bl	87cc <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS_MAX;
    107a:	4b06      	ldr	r3, [pc, #24]	; (1094 <HwIoAb_Pots_Init+0x50>)
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	2202      	movs	r2, #2
    1080:	701a      	strb	r2, [r3, #0]
    PotsControl_Ptr->Pots_init = TRUE;
    1082:	4b04      	ldr	r3, [pc, #16]	; (1094 <HwIoAb_Pots_Init+0x50>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	2201      	movs	r2, #1
    1088:	749a      	strb	r2, [r3, #18]
}
    108a:	bf00      	nop
    108c:	b005      	add	sp, #20
    108e:	f85d fb04 	ldr.w	pc, [sp], #4
    1092:	bf00      	nop
    1094:	1fff8b54 	.word	0x1fff8b54

00001098 <HwIoAb_Pots_GetValue>:
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) 
{
    1098:	b500      	push	{lr}
    109a:	b085      	sub	sp, #20
    109c:	9001      	str	r0, [sp, #4]
    /* Software trigger conversion */
    Adc_StartGroupConversion( ADC0Group_0 );
    109e:	2000      	movs	r0, #0
    10a0:	f007 fc2e 	bl	8900 <Adc_StartGroupConversion>
    /* Wait until the conversion is done */
    while( Adc_GetGroupStatus( ADC0Group_0 ) == ADC_BUSY );
    10a4:	bf00      	nop
    10a6:	2000      	movs	r0, #0
    10a8:	f007 fd07 	bl	8aba <Adc_GetGroupStatus>
    10ac:	4603      	mov	r3, r0
    10ae:	2b01      	cmp	r3, #1
    10b0:	d0f9      	beq.n	10a6 <HwIoAb_Pots_GetValue+0xe>
    /* Reading group conversion values and storing them to the raw result array */
    Adc_ReadGroup( ADC0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); 
    10b2:	4b26      	ldr	r3, [pc, #152]	; (114c <__BSS_SRAM_SIZE+0xc>)
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	3302      	adds	r3, #2
    10b8:	4619      	mov	r1, r3
    10ba:	2000      	movs	r0, #0
    10bc:	f007 fcb8 	bl	8a30 <Adc_ReadGroup>

    /* Calculating resistance of each Pot */
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    10c0:	2300      	movs	r3, #0
    10c2:	f88d 300f 	strb.w	r3, [sp, #15]
    10c6:	e034      	b.n	1132 <HwIoAb_Pots_GetValue+0x9a>
    {
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12B_RES );
    10c8:	4b20      	ldr	r3, [pc, #128]	; (114c <__BSS_SRAM_SIZE+0xc>)
    10ca:	681a      	ldr	r2, [r3, #0]
    10cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10d0:	005b      	lsls	r3, r3, #1
    10d2:	4413      	add	r3, r2
    10d4:	885b      	ldrh	r3, [r3, #2]
    10d6:	ee07 3a90 	vmov	s15, r3
    10da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    10de:	eddf 6a1c 	vldr	s13, [pc, #112]	; 1150 <__BSS_SRAM_SIZE+0x10>
    10e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    10e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1154 <__BSS_SRAM_SIZE+0x14>
    10ea:	ee67 7a87 	vmul.f32	s15, s15, s14
    10ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10f2:	005b      	lsls	r3, r3, #1
    10f4:	9a01      	ldr	r2, [sp, #4]
    10f6:	4413      	add	r3, r2
    10f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    10fc:	ee17 2a90 	vmov	r2, s15
    1100:	b292      	uxth	r2, r2
    1102:	801a      	strh	r2, [r3, #0]

        /* Locking value if needed*/
        if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) 
    1104:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1108:	005b      	lsls	r3, r3, #1
    110a:	9a01      	ldr	r2, [sp, #4]
    110c:	4413      	add	r3, r2
    110e:	881b      	ldrh	r3, [r3, #0]
    1110:	f242 7210 	movw	r2, #10000	; 0x2710
    1114:	4293      	cmp	r3, r2
    1116:	d907      	bls.n	1128 <HwIoAb_Pots_GetValue+0x90>
        { 
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    1118:	f89d 300f 	ldrb.w	r3, [sp, #15]
    111c:	005b      	lsls	r3, r3, #1
    111e:	9a01      	ldr	r2, [sp, #4]
    1120:	4413      	add	r3, r2
    1122:	f242 7210 	movw	r2, #10000	; 0x2710
    1126:	801a      	strh	r2, [r3, #0]
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    1128:	f89d 300f 	ldrb.w	r3, [sp, #15]
    112c:	3301      	adds	r3, #1
    112e:	f88d 300f 	strb.w	r3, [sp, #15]
    1132:	4b06      	ldr	r3, [pc, #24]	; (114c <__BSS_SRAM_SIZE+0xc>)
    1134:	681b      	ldr	r3, [r3, #0]
    1136:	781b      	ldrb	r3, [r3, #0]
    1138:	f89d 200f 	ldrb.w	r2, [sp, #15]
    113c:	429a      	cmp	r2, r3
    113e:	d3c3      	bcc.n	10c8 <HwIoAb_Pots_GetValue+0x30>
        }
    }
}
    1140:	bf00      	nop
    1142:	bf00      	nop
    1144:	b005      	add	sp, #20
    1146:	f85d fb04 	ldr.w	pc, [sp], #4
    114a:	bf00      	nop
    114c:	1fff8b54 	.word	0x1fff8b54
    1150:	4528f000 	.word	0x4528f000
    1154:	461c4000 	.word	0x461c4000

00001158 <HwIoAb_Pots_GetAltValue>:
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) 
{
    1158:	b500      	push	{lr}
    115a:	b085      	sub	sp, #20
    115c:	9001      	str	r0, [sp, #4]
    /* Software trigger conversion */
    Adc_StartGroupConversion( ADC1Group_0 );
    115e:	2001      	movs	r0, #1
    1160:	f007 fbce 	bl	8900 <Adc_StartGroupConversion>
    /* Wait until the conversion is done */
    while( Adc_GetGroupStatus( ADC1Group_0 ) == ADC_BUSY );
    1164:	bf00      	nop
    1166:	2001      	movs	r0, #1
    1168:	f007 fca7 	bl	8aba <Adc_GetGroupStatus>
    116c:	4603      	mov	r3, r0
    116e:	2b01      	cmp	r3, #1
    1170:	d0f9      	beq.n	1166 <HwIoAb_Pots_GetAltValue+0xe>
    /* Reading group conversion values and storing them to the raw result array */
    Adc_ReadGroup( ADC1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); 
    1172:	4b26      	ldr	r3, [pc, #152]	; (120c <HwIoAb_Pots_GetAltValue+0xb4>)
    1174:	681b      	ldr	r3, [r3, #0]
    1176:	3306      	adds	r3, #6
    1178:	4619      	mov	r1, r3
    117a:	2001      	movs	r0, #1
    117c:	f007 fc58 	bl	8a30 <Adc_ReadGroup>

    /* Calculating resistance of each Pot */
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    1180:	2300      	movs	r3, #0
    1182:	f88d 300f 	strb.w	r3, [sp, #15]
    1186:	e034      	b.n	11f2 <HwIoAb_Pots_GetAltValue+0x9a>
    {
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12B_RES );
    1188:	4b20      	ldr	r3, [pc, #128]	; (120c <HwIoAb_Pots_GetAltValue+0xb4>)
    118a:	681a      	ldr	r2, [r3, #0]
    118c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1190:	005b      	lsls	r3, r3, #1
    1192:	4413      	add	r3, r2
    1194:	88db      	ldrh	r3, [r3, #6]
    1196:	ee07 3a90 	vmov	s15, r3
    119a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    119e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 1210 <HwIoAb_Pots_GetAltValue+0xb8>
    11a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    11a6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1214 <HwIoAb_Pots_GetAltValue+0xbc>
    11aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    11ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11b2:	005b      	lsls	r3, r3, #1
    11b4:	9a01      	ldr	r2, [sp, #4]
    11b6:	4413      	add	r3, r2
    11b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    11bc:	ee17 2a90 	vmov	r2, s15
    11c0:	b292      	uxth	r2, r2
    11c2:	801a      	strh	r2, [r3, #0]

        /* Locking value if needed*/
        if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) 
    11c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11c8:	005b      	lsls	r3, r3, #1
    11ca:	9a01      	ldr	r2, [sp, #4]
    11cc:	4413      	add	r3, r2
    11ce:	881b      	ldrh	r3, [r3, #0]
    11d0:	f242 7210 	movw	r2, #10000	; 0x2710
    11d4:	4293      	cmp	r3, r2
    11d6:	d907      	bls.n	11e8 <HwIoAb_Pots_GetAltValue+0x90>
        { 
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    11d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11dc:	005b      	lsls	r3, r3, #1
    11de:	9a01      	ldr	r2, [sp, #4]
    11e0:	4413      	add	r3, r2
    11e2:	f242 7210 	movw	r2, #10000	; 0x2710
    11e6:	801a      	strh	r2, [r3, #0]
    for ( uint8 i = 0; i < PotsControl_Ptr->Pots; i++ ) 
    11e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    11ec:	3301      	adds	r3, #1
    11ee:	f88d 300f 	strb.w	r3, [sp, #15]
    11f2:	4b06      	ldr	r3, [pc, #24]	; (120c <HwIoAb_Pots_GetAltValue+0xb4>)
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    11fc:	429a      	cmp	r2, r3
    11fe:	d3c3      	bcc.n	1188 <HwIoAb_Pots_GetAltValue+0x30>
        }
    }
}
    1200:	bf00      	nop
    1202:	bf00      	nop
    1204:	b005      	add	sp, #20
    1206:	f85d fb04 	ldr.w	pc, [sp], #4
    120a:	bf00      	nop
    120c:	1fff8b54 	.word	0x1fff8b54
    1210:	4528f000 	.word	0x4528f000
    1214:	461c4000 	.word	0x461c4000

00001218 <HwIoAb_Buzzer_Init>:
 * @param Buzzer_Config Pointer to configuration array, in this case is not used.
 * 
 * @note In this case no configurations are needeed.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config )
{
    1218:	b082      	sub	sp, #8
    121a:	9001      	str	r0, [sp, #4]

}
    121c:	bf00      	nop
    121e:	b002      	add	sp, #8
    1220:	4770      	bx	lr

00001222 <HwIoAb_Buzzer_Beep>:
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) 
{
    1222:	b500      	push	{lr}
    1224:	b083      	sub	sp, #12
    1226:	4603      	mov	r3, r0
    1228:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) 
    122c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1230:	2b02      	cmp	r3, #2
    1232:	d016      	beq.n	1262 <HwIoAb_Buzzer_Beep+0x40>
    1234:	2b02      	cmp	r3, #2
    1236:	dc1c      	bgt.n	1272 <HwIoAb_Buzzer_Beep+0x50>
    1238:	2b00      	cmp	r3, #0
    123a:	d002      	beq.n	1242 <HwIoAb_Buzzer_Beep+0x20>
    123c:	2b01      	cmp	r3, #1
    123e:	d008      	beq.n	1252 <HwIoAb_Buzzer_Beep+0x30>
        case HWIOAB_BUZZER_TONE_3:  /* Setting frequency to 7.5 Khz and 50% duty cycle */
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_50_DUTY_CYCLE );
        break;
        default:    
        /* Invalid tone */
        break;
    1240:	e017      	b.n	1272 <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_50_DUTY_CYCLE );
    1242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1246:	f640 216a 	movw	r1, #2666	; 0xa6a
    124a:	2000      	movs	r0, #0
    124c:	f00d fd0a 	bl	ec64 <Pwm_SetPeriodAndDuty>
        break;
    1250:	e010      	b.n	1274 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_50_DUTY_CYCLE );
    1252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1256:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    125a:	2000      	movs	r0, #0
    125c:	f00d fd02 	bl	ec64 <Pwm_SetPeriodAndDuty>
        break;
    1260:	e008      	b.n	1274 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_50_DUTY_CYCLE );
    1262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1266:	f240 412a 	movw	r1, #1066	; 0x42a
    126a:	2000      	movs	r0, #0
    126c:	f00d fcfa 	bl	ec64 <Pwm_SetPeriodAndDuty>
        break;
    1270:	e000      	b.n	1274 <HwIoAb_Buzzer_Beep+0x52>
        break;
    1272:	bf00      	nop
    }
}
    1274:	bf00      	nop
    1276:	b003      	add	sp, #12
    1278:	f85d fb04 	ldr.w	pc, [sp], #4

0000127c <HwIoAb_Buzzer_Stop>:
/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) 
{
    127c:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    /* Stopping buzzer */
    127e:	2000      	movs	r0, #0
    1280:	f00d fd26 	bl	ecd0 <Pwm_SetOutputToIdle>
}
    1284:	bf00      	nop
    1286:	bd08      	pop	{r3, pc}

00001288 <IoHwAb_Init0>:
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) 
{
    1288:	b500      	push	{lr}
    128a:	b083      	sub	sp, #12
    128c:	9001      	str	r0, [sp, #4]
    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
    128e:	4808      	ldr	r0, [pc, #32]	; (12b0 <IoHwAb_Init0+0x28>)
    1290:	f7ff fce8 	bl	c64 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
    1294:	4807      	ldr	r0, [pc, #28]	; (12b4 <IoHwAb_Init0+0x2c>)
    1296:	f7ff feab 	bl	ff0 <HwIoAb_Leds_Init>
    /* Pots init */
    HwIoAb_Pots_Init( NULL_PTR );
    129a:	2000      	movs	r0, #0
    129c:	f7ff fed2 	bl	1044 <HwIoAb_Pots_Init>
    /* Buzzer init */
    HwIoAb_Buzzer_Init( NULL_PTR );
    12a0:	2000      	movs	r0, #0
    12a2:	f7ff ffb9 	bl	1218 <HwIoAb_Buzzer_Init>
}
    12a6:	bf00      	nop
    12a8:	b003      	add	sp, #12
    12aa:	f85d fb04 	ldr.w	pc, [sp], #4
    12ae:	bf00      	nop
    12b0:	00016730 	.word	0x00016730
    12b4:	00016748 	.word	0x00016748

000012b8 <Bfx_SetBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
 */
void Bfx_SetBit_u32u8( uint32 *Data, uint8 BitPn )
{
    12b8:	b082      	sub	sp, #8
    12ba:	9001      	str	r0, [sp, #4]
    12bc:	460b      	mov	r3, r1
    12be:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1u << BitPn );
    12c2:	9b01      	ldr	r3, [sp, #4]
    12c4:	681a      	ldr	r2, [r3, #0]
    12c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    12ca:	2101      	movs	r1, #1
    12cc:	fa01 f303 	lsl.w	r3, r1, r3
    12d0:	431a      	orrs	r2, r3
    12d2:	9b01      	ldr	r3, [sp, #4]
    12d4:	601a      	str	r2, [r3, #0]
}
    12d6:	bf00      	nop
    12d8:	b002      	add	sp, #8
    12da:	4770      	bx	lr

000012dc <Bfx_ClrBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
 */
void Bfx_ClrBit_u32u8( uint32 *Data, uint8 BitPn )
{
    12dc:	b082      	sub	sp, #8
    12de:	9001      	str	r0, [sp, #4]
    12e0:	460b      	mov	r3, r1
    12e2:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1u << BitPn );
    12e6:	9b01      	ldr	r3, [sp, #4]
    12e8:	681a      	ldr	r2, [r3, #0]
    12ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    12ee:	2101      	movs	r1, #1
    12f0:	fa01 f303 	lsl.w	r3, r1, r3
    12f4:	43db      	mvns	r3, r3
    12f6:	401a      	ands	r2, r3
    12f8:	9b01      	ldr	r3, [sp, #4]
    12fa:	601a      	str	r2, [r3, #0]
}
    12fc:	bf00      	nop
    12fe:	b002      	add	sp, #8
    1300:	4770      	bx	lr

00001302 <Bfx_GetBit_u32u8_u8>:
 * @retval Boolean Bit status
 *
 * @reqs    SWS_Bfx_00016, SWS_Bfx_00017, SWS_Bfx_00020
 */
boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn )
{
    1302:	b082      	sub	sp, #8
    1304:	9001      	str	r0, [sp, #4]
    1306:	460b      	mov	r3, r1
    1308:	f88d 3003 	strb.w	r3, [sp, #3]
    return ( ( Data & ( 1u << BitPn ) ) != 0u );
    130c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1310:	2201      	movs	r2, #1
    1312:	409a      	lsls	r2, r3
    1314:	9b01      	ldr	r3, [sp, #4]
    1316:	4013      	ands	r3, r2
    1318:	2b00      	cmp	r3, #0
    131a:	bf14      	ite	ne
    131c:	2301      	movne	r3, #1
    131e:	2300      	moveq	r3, #0
    1320:	b2db      	uxtb	r3, r3
}
    1322:	4618      	mov	r0, r3
    1324:	b002      	add	sp, #8
    1326:	4770      	bx	lr

00001328 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Source data
 *
 * @reqs    SWS_Bfx_00130, SWS_Bfx_00132
 */
void Bfx_PutBit_u32u8u8( uint32 *Data, uint8 BitPn, boolean Status )
{
    1328:	b082      	sub	sp, #8
    132a:	9001      	str	r0, [sp, #4]
    132c:	460b      	mov	r3, r1
    132e:	f88d 3003 	strb.w	r3, [sp, #3]
    1332:	4613      	mov	r3, r2
    1334:	f88d 3002 	strb.w	r3, [sp, #2]
    if( Status == TRUE )
    1338:	f89d 3002 	ldrb.w	r3, [sp, #2]
    133c:	2b00      	cmp	r3, #0
    133e:	d00a      	beq.n	1356 <Bfx_PutBit_u32u8u8+0x2e>
    {
        *Data |= ( 1u << BitPn );
    1340:	9b01      	ldr	r3, [sp, #4]
    1342:	681a      	ldr	r2, [r3, #0]
    1344:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1348:	2101      	movs	r1, #1
    134a:	fa01 f303 	lsl.w	r3, r1, r3
    134e:	431a      	orrs	r2, r3
    1350:	9b01      	ldr	r3, [sp, #4]
    1352:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *Data &= ~( 1u << BitPn );
    }
}
    1354:	e00a      	b.n	136c <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1u << BitPn );
    1356:	9b01      	ldr	r3, [sp, #4]
    1358:	681a      	ldr	r2, [r3, #0]
    135a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    135e:	2101      	movs	r1, #1
    1360:	fa01 f303 	lsl.w	r3, r1, r3
    1364:	43db      	mvns	r3, r3
    1366:	401a      	ands	r2, r3
    1368:	9b01      	ldr	r3, [sp, #4]
    136a:	601a      	str	r2, [r3, #0]
}
    136c:	bf00      	nop
    136e:	b002      	add	sp, #8
    1370:	4770      	bx	lr
	...

00001374 <Scheduler_Init>:
 * value for the arguments.
 *
 * @param   scheduler  Scheduler control structure
 */
void Scheduler_Init( const Scheduler_ConfigType *SchedulerPtr )
{
    1374:	b500      	push	{lr}
    1376:	b085      	sub	sp, #20
    1378:	9001      	str	r0, [sp, #4]
    SchedulerControl.TaskFlags = 0u;
    137a:	4b56      	ldr	r3, [pc, #344]	; (14d4 <Scheduler_Init+0x160>)
    137c:	2200      	movs	r2, #0
    137e:	641a      	str	r2, [r3, #64]	; 0x40
    SchedulerControl.TimerFlags = 0u;
    1380:	4b54      	ldr	r3, [pc, #336]	; (14d4 <Scheduler_Init+0x160>)
    1382:	2200      	movs	r2, #0
    1384:	645a      	str	r2, [r3, #68]	; 0x44
    
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    1386:	2300      	movs	r3, #0
    1388:	f88d 300f 	strb.w	r3, [sp, #15]
    138c:	e02f      	b.n	13ee <Scheduler_Init+0x7a>
    {
        SchedulerControl.TaskElapsed[ i ] = 0u;
    138e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1392:	4a50      	ldr	r2, [pc, #320]	; (14d4 <Scheduler_Init+0x160>)
    1394:	2100      	movs	r1, #0
    1396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TaskPeriod[ i ] = SchedulerPtr->TaskPtr[ i ].InitPeriod;
    139a:	9b01      	ldr	r3, [sp, #4]
    139c:	6899      	ldr	r1, [r3, #8]
    139e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13a2:	4613      	mov	r3, r2
    13a4:	005b      	lsls	r3, r3, #1
    13a6:	4413      	add	r3, r2
    13a8:	009b      	lsls	r3, r3, #2
    13aa:	18ca      	adds	r2, r1, r3
    13ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13b0:	6812      	ldr	r2, [r2, #0]
    13b2:	4948      	ldr	r1, [pc, #288]	; (14d4 <Scheduler_Init+0x160>)
    13b4:	3306      	adds	r3, #6
    13b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TaskFlags, i, SchedulerPtr->TaskPtr[ i ].InitFlag );
    13ba:	9b01      	ldr	r3, [sp, #4]
    13bc:	6899      	ldr	r1, [r3, #8]
    13be:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13c2:	4613      	mov	r3, r2
    13c4:	005b      	lsls	r3, r3, #1
    13c6:	4413      	add	r3, r2
    13c8:	009b      	lsls	r3, r3, #2
    13ca:	440b      	add	r3, r1
    13cc:	791b      	ldrb	r3, [r3, #4]
    13ce:	2b00      	cmp	r3, #0
    13d0:	bf14      	ite	ne
    13d2:	2301      	movne	r3, #1
    13d4:	2300      	moveq	r3, #0
    13d6:	b2da      	uxtb	r2, r3
    13d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13dc:	4619      	mov	r1, r3
    13de:	483e      	ldr	r0, [pc, #248]	; (14d8 <Scheduler_Init+0x164>)
    13e0:	f7ff ffa2 	bl	1328 <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    13e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13e8:	3301      	adds	r3, #1
    13ea:	f88d 300f 	strb.w	r3, [sp, #15]
    13ee:	9b01      	ldr	r3, [sp, #4]
    13f0:	791b      	ldrb	r3, [r3, #4]
    13f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13f6:	429a      	cmp	r2, r3
    13f8:	d3c9      	bcc.n	138e <Scheduler_Init+0x1a>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    13fa:	2300      	movs	r3, #0
    13fc:	f88d 300e 	strb.w	r3, [sp, #14]
    1400:	e031      	b.n	1466 <Scheduler_Init+0xf2>
    {
        SchedulerControl.TimerCount[ i ] = 0u;
    1402:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1406:	4a33      	ldr	r2, [pc, #204]	; (14d4 <Scheduler_Init+0x160>)
    1408:	330c      	adds	r3, #12
    140a:	2100      	movs	r1, #0
    140c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TimerTimeout[ i ] = SchedulerPtr->TimerPtr[ i ].InitTimeout;
    1410:	9b01      	ldr	r3, [sp, #4]
    1412:	6919      	ldr	r1, [r3, #16]
    1414:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1418:	4613      	mov	r3, r2
    141a:	005b      	lsls	r3, r3, #1
    141c:	4413      	add	r3, r2
    141e:	009b      	lsls	r3, r3, #2
    1420:	18ca      	adds	r2, r1, r3
    1422:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1426:	6812      	ldr	r2, [r2, #0]
    1428:	492a      	ldr	r1, [pc, #168]	; (14d4 <Scheduler_Init+0x160>)
    142a:	330c      	adds	r3, #12
    142c:	009b      	lsls	r3, r3, #2
    142e:	440b      	add	r3, r1
    1430:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TimerFlags, i, SchedulerPtr->TimerPtr[ i ].InitFlag );
    1432:	9b01      	ldr	r3, [sp, #4]
    1434:	6919      	ldr	r1, [r3, #16]
    1436:	f89d 200e 	ldrb.w	r2, [sp, #14]
    143a:	4613      	mov	r3, r2
    143c:	005b      	lsls	r3, r3, #1
    143e:	4413      	add	r3, r2
    1440:	009b      	lsls	r3, r3, #2
    1442:	440b      	add	r3, r1
    1444:	791b      	ldrb	r3, [r3, #4]
    1446:	2b00      	cmp	r3, #0
    1448:	bf14      	ite	ne
    144a:	2301      	movne	r3, #1
    144c:	2300      	moveq	r3, #0
    144e:	b2da      	uxtb	r2, r3
    1450:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1454:	4619      	mov	r1, r3
    1456:	4821      	ldr	r0, [pc, #132]	; (14dc <Scheduler_Init+0x168>)
    1458:	f7ff ff66 	bl	1328 <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    145c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1460:	3301      	adds	r3, #1
    1462:	f88d 300e 	strb.w	r3, [sp, #14]
    1466:	9b01      	ldr	r3, [sp, #4]
    1468:	7b1b      	ldrb	r3, [r3, #12]
    146a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    146e:	429a      	cmp	r2, r3
    1470:	d3c7      	bcc.n	1402 <Scheduler_Init+0x8e>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    1472:	2300      	movs	r3, #0
    1474:	f88d 300d 	strb.w	r3, [sp, #13]
    1478:	e01f      	b.n	14ba <Scheduler_Init+0x146>
    {
        SchedulerControl.QueueHeads[ i ] = 0u;
    147a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    147e:	4a15      	ldr	r2, [pc, #84]	; (14d4 <Scheduler_Init+0x160>)
    1480:	330e      	adds	r3, #14
    1482:	2100      	movs	r1, #0
    1484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.QueueTails[ i ] = 0u;
    1488:	f89d 300d 	ldrb.w	r3, [sp, #13]
    148c:	4a11      	ldr	r2, [pc, #68]	; (14d4 <Scheduler_Init+0x160>)
    148e:	330e      	adds	r3, #14
    1490:	009b      	lsls	r3, r3, #2
    1492:	4413      	add	r3, r2
    1494:	2200      	movs	r2, #0
    1496:	605a      	str	r2, [r3, #4]
        Bfx_SetBit_u32u8( &SchedulerControl.QueueEmpties, i );
    1498:	f89d 300d 	ldrb.w	r3, [sp, #13]
    149c:	4619      	mov	r1, r3
    149e:	4810      	ldr	r0, [pc, #64]	; (14e0 <Scheduler_Init+0x16c>)
    14a0:	f7ff ff0a 	bl	12b8 <Bfx_SetBit_u32u8>
        Bfx_ClrBit_u32u8( &SchedulerControl.QueueFulls, i );
    14a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14a8:	4619      	mov	r1, r3
    14aa:	480e      	ldr	r0, [pc, #56]	; (14e4 <Scheduler_Init+0x170>)
    14ac:	f7ff ff16 	bl	12dc <Bfx_ClrBit_u32u8>
    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    14b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    14b4:	3301      	adds	r3, #1
    14b6:	f88d 300d 	strb.w	r3, [sp, #13]
    14ba:	9b01      	ldr	r3, [sp, #4]
    14bc:	7d1b      	ldrb	r3, [r3, #20]
    14be:	f89d 200d 	ldrb.w	r2, [sp, #13]
    14c2:	429a      	cmp	r2, r3
    14c4:	d3d9      	bcc.n	147a <Scheduler_Init+0x106>
    }
    
    SchedulerLocal = SchedulerPtr;
    14c6:	4a08      	ldr	r2, [pc, #32]	; (14e8 <Scheduler_Init+0x174>)
    14c8:	9b01      	ldr	r3, [sp, #4]
    14ca:	6013      	str	r3, [r2, #0]
}
    14cc:	bf00      	nop
    14ce:	b005      	add	sp, #20
    14d0:	f85d fb04 	ldr.w	pc, [sp], #4
    14d4:	1fff9788 	.word	0x1fff9788
    14d8:	1fff97c8 	.word	0x1fff97c8
    14dc:	1fff97cc 	.word	0x1fff97cc
    14e0:	1fff97d0 	.word	0x1fff97d0
    14e4:	1fff97d4 	.word	0x1fff97d4
    14e8:	1fff9784 	.word	0x1fff9784

000014ec <Scheduler_MainFunction>:
 * if it is time to run accordingly to the period registered on each of them. The function won't return
 * by any means since it is looping inside a __while(1u)__ forever. The algorithm is pretty simple since
 * first task to dispatch will be the first registered in the **Scheduler_ConfigType** array
 */
void Scheduler_MainFunction( void )
{
    14ec:	b500      	push	{lr}
    14ee:	b085      	sub	sp, #20
    uint32 Timeout = OsIf_MicrosToTicks( ( SchedulerLocal->Tick * 1000 ), OSIF_COUNTER_SYSTEM );
    14f0:	4b13      	ldr	r3, [pc, #76]	; (1540 <Scheduler_MainFunction+0x54>)
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    14fa:	fb02 f303 	mul.w	r3, r2, r3
    14fe:	2101      	movs	r1, #1
    1500:	4618      	mov	r0, r3
    1502:	f001 f9ad 	bl	2860 <OsIf_MicrosToTicks>
    1506:	9002      	str	r0, [sp, #8]
    /*get the Systic Timer count for the first time*/
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    1508:	2001      	movs	r0, #1
    150a:	f001 f95d 	bl	27c8 <OsIf_GetCounter>
    150e:	4603      	mov	r3, r0
    1510:	9301      	str	r3, [sp, #4]
    /*We need to count the elapsed time from zero*/
    uint32 ElapsedTime = 0u;
    1512:	2300      	movs	r3, #0
    1514:	9303      	str	r3, [sp, #12]
    
    do /* cppcheck-suppress misra-c2012-14.4 ; this is an infinite loop */
    {
        /* get the elapsed time count from the seed tick value*/
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    1516:	ab01      	add	r3, sp, #4
    1518:	2101      	movs	r1, #1
    151a:	4618      	mov	r0, r3
    151c:	f001 f96d 	bl	27fa <OsIf_GetElapsed>
    1520:	4602      	mov	r2, r0
    1522:	9b03      	ldr	r3, [sp, #12]
    1524:	4413      	add	r3, r2
    1526:	9303      	str	r3, [sp, #12]
        /*query if the elapsed time is already equal or bigger than the timeout*/
        if( ElapsedTime >= Timeout )
    1528:	9a03      	ldr	r2, [sp, #12]
    152a:	9b02      	ldr	r3, [sp, #8]
    152c:	429a      	cmp	r2, r3
    152e:	d3f2      	bcc.n	1516 <Scheduler_MainFunction+0x2a>
        {
            /*reset the elapsed time */
            ElapsedTime = 0u;
    1530:	2300      	movs	r3, #0
    1532:	9303      	str	r3, [sp, #12]
            /*Scan all registered timers*/
            Timers_Dispatch( );
    1534:	f000 f85a 	bl	15ec <Timers_Dispatch>
            /*Scan all registered task*/
            Tasks_Dispatch( );
    1538:	f000 f804 	bl	1544 <Tasks_Dispatch>
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    153c:	e7eb      	b.n	1516 <Scheduler_MainFunction+0x2a>
    153e:	bf00      	nop
    1540:	1fff9784 	.word	0x1fff9784

00001544 <Tasks_Dispatch>:
 * This is the only mechanism to stop a timer. The function only set the flag startFlag to FALSE.
 *
 * @param   scheduler  Scheduler control structure
 */
STATIC void Tasks_Dispatch( void )
{
    1544:	b500      	push	{lr}
    1546:	b083      	sub	sp, #12
    /*Scan all registered task*/
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    1548:	2300      	movs	r3, #0
    154a:	f88d 3007 	strb.w	r3, [sp, #7]
    154e:	e03c      	b.n	15ca <Tasks_Dispatch+0x86>
    {
        /*Only run those tasks that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TaskFlags, i ) == TRUE )
    1550:	4b24      	ldr	r3, [pc, #144]	; (15e4 <Tasks_Dispatch+0xa0>)
    1552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1554:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1558:	4611      	mov	r1, r2
    155a:	4618      	mov	r0, r3
    155c:	f7ff fed1 	bl	1302 <Bfx_GetBit_u32u8_u8>
    1560:	4603      	mov	r3, r0
    1562:	2b00      	cmp	r3, #0
    1564:	d01e      	beq.n	15a4 <Tasks_Dispatch+0x60>
        {
            /*Only run those tasks that already has its elapsed time*/
            if( SchedulerControl.TaskElapsed[ i ] >= SchedulerControl.TaskPeriod[ i ] )
    1566:	f89d 3007 	ldrb.w	r3, [sp, #7]
    156a:	4a1e      	ldr	r2, [pc, #120]	; (15e4 <Tasks_Dispatch+0xa0>)
    156c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1570:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1574:	491b      	ldr	r1, [pc, #108]	; (15e4 <Tasks_Dispatch+0xa0>)
    1576:	3306      	adds	r3, #6
    1578:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    157c:	429a      	cmp	r2, r3
    157e:	d311      	bcc.n	15a4 <Tasks_Dispatch+0x60>
            {
                SchedulerControl.TaskElapsed[ i ] = 0u;
    1580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1584:	4a17      	ldr	r2, [pc, #92]	; (15e4 <Tasks_Dispatch+0xa0>)
    1586:	2100      	movs	r1, #0
    1588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                /*Run task*/
                SchedulerLocal->TaskPtr[ i ].TaskFunc( );
    158c:	4b16      	ldr	r3, [pc, #88]	; (15e8 <Tasks_Dispatch+0xa4>)
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	6899      	ldr	r1, [r3, #8]
    1592:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1596:	4613      	mov	r3, r2
    1598:	005b      	lsls	r3, r3, #1
    159a:	4413      	add	r3, r2
    159c:	009b      	lsls	r3, r3, #2
    159e:	440b      	add	r3, r1
    15a0:	689b      	ldr	r3, [r3, #8]
    15a2:	4798      	blx	r3
            }
        }
        /*Increment the task elapsed time in ticks*/
        SchedulerControl.TaskElapsed[ i ] += SchedulerLocal->Tick;
    15a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15a8:	4a0e      	ldr	r2, [pc, #56]	; (15e4 <Tasks_Dispatch+0xa0>)
    15aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    15ae:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <Tasks_Dispatch+0xa4>)
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	681a      	ldr	r2, [r3, #0]
    15b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15b8:	440a      	add	r2, r1
    15ba:	490a      	ldr	r1, [pc, #40]	; (15e4 <Tasks_Dispatch+0xa0>)
    15bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    15c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15c4:	3301      	adds	r3, #1
    15c6:	f88d 3007 	strb.w	r3, [sp, #7]
    15ca:	4b07      	ldr	r3, [pc, #28]	; (15e8 <Tasks_Dispatch+0xa4>)
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	791b      	ldrb	r3, [r3, #4]
    15d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    15d4:	429a      	cmp	r2, r3
    15d6:	d3bb      	bcc.n	1550 <Tasks_Dispatch+0xc>
    }
}
    15d8:	bf00      	nop
    15da:	bf00      	nop
    15dc:	b003      	add	sp, #12
    15de:	f85d fb04 	ldr.w	pc, [sp], #4
    15e2:	bf00      	nop
    15e4:	1fff9788 	.word	0x1fff9788
    15e8:	1fff9784 	.word	0x1fff9784

000015ec <Timers_Dispatch>:

STATIC void Timers_Dispatch( void )
{
    15ec:	b500      	push	{lr}
    15ee:	b083      	sub	sp, #12
    /*Scan all registered timers*/
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    15f0:	2300      	movs	r3, #0
    15f2:	f88d 3007 	strb.w	r3, [sp, #7]
    15f6:	e046      	b.n	1686 <Timers_Dispatch+0x9a>
    {
        /*Only run those timers that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TimerFlags, i ) == TRUE )
    15f8:	4b29      	ldr	r3, [pc, #164]	; (16a0 <Timers_Dispatch+0xb4>)
    15fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    15fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1600:	4611      	mov	r1, r2
    1602:	4618      	mov	r0, r3
    1604:	f7ff fe7d 	bl	1302 <Bfx_GetBit_u32u8_u8>
    1608:	4603      	mov	r3, r0
    160a:	2b00      	cmp	r3, #0
    160c:	d036      	beq.n	167c <Timers_Dispatch+0x90>
        {
            /*Decrement timer count by one tick*/
            SchedulerControl.TimerCount[ i ] -= SchedulerLocal->Tick;
    160e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1612:	4a23      	ldr	r2, [pc, #140]	; (16a0 <Timers_Dispatch+0xb4>)
    1614:	330c      	adds	r3, #12
    1616:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    161a:	4b22      	ldr	r3, [pc, #136]	; (16a4 <Timers_Dispatch+0xb8>)
    161c:	681b      	ldr	r3, [r3, #0]
    161e:	681a      	ldr	r2, [r3, #0]
    1620:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1624:	1a8a      	subs	r2, r1, r2
    1626:	491e      	ldr	r1, [pc, #120]	; (16a0 <Timers_Dispatch+0xb4>)
    1628:	330c      	adds	r3, #12
    162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            /*Only run those timers that already has its elapsed time*/
            if( SchedulerControl.TimerCount[ i ] == 0u )
    162e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1632:	4a1b      	ldr	r2, [pc, #108]	; (16a0 <Timers_Dispatch+0xb4>)
    1634:	330c      	adds	r3, #12
    1636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    163a:	2b00      	cmp	r3, #0
    163c:	d11e      	bne.n	167c <Timers_Dispatch+0x90>
            {
                /*Prevent timer from running again*/
                Bfx_ClrBit_u32u8( &SchedulerControl.TimerFlags, i );
    163e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1642:	4619      	mov	r1, r3
    1644:	4818      	ldr	r0, [pc, #96]	; (16a8 <Timers_Dispatch+0xbc>)
    1646:	f7ff fe49 	bl	12dc <Bfx_ClrBit_u32u8>
                /*Check if the timer has a callback assosiate*/
                if( SchedulerLocal->TimerPtr[ i ].CallbackFunc != NULL )
    164a:	4b16      	ldr	r3, [pc, #88]	; (16a4 <Timers_Dispatch+0xb8>)
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	6919      	ldr	r1, [r3, #16]
    1650:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1654:	4613      	mov	r3, r2
    1656:	005b      	lsls	r3, r3, #1
    1658:	4413      	add	r3, r2
    165a:	009b      	lsls	r3, r3, #2
    165c:	440b      	add	r3, r1
    165e:	689b      	ldr	r3, [r3, #8]
    1660:	2b00      	cmp	r3, #0
    1662:	d00b      	beq.n	167c <Timers_Dispatch+0x90>
                {
                    /*Run callback*/
                    SchedulerLocal->TimerPtr[ i ].CallbackFunc( );
    1664:	4b0f      	ldr	r3, [pc, #60]	; (16a4 <Timers_Dispatch+0xb8>)
    1666:	681b      	ldr	r3, [r3, #0]
    1668:	6919      	ldr	r1, [r3, #16]
    166a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    166e:	4613      	mov	r3, r2
    1670:	005b      	lsls	r3, r3, #1
    1672:	4413      	add	r3, r2
    1674:	009b      	lsls	r3, r3, #2
    1676:	440b      	add	r3, r1
    1678:	689b      	ldr	r3, [r3, #8]
    167a:	4798      	blx	r3
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    167c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1680:	3301      	adds	r3, #1
    1682:	f88d 3007 	strb.w	r3, [sp, #7]
    1686:	4b07      	ldr	r3, [pc, #28]	; (16a4 <Timers_Dispatch+0xb8>)
    1688:	681b      	ldr	r3, [r3, #0]
    168a:	7b1b      	ldrb	r3, [r3, #12]
    168c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1690:	429a      	cmp	r2, r3
    1692:	d3b1      	bcc.n	15f8 <Timers_Dispatch+0xc>
                }
            }
        }
    }
}
    1694:	bf00      	nop
    1696:	bf00      	nop
    1698:	b003      	add	sp, #12
    169a:	f85d fb04 	ldr.w	pc, [sp], #4
    169e:	bf00      	nop
    16a0:	1fff9788 	.word	0x1fff9788
    16a4:	1fff9784 	.word	0x1fff9784
    16a8:	1fff97cc 	.word	0x1fff97cc

000016ac <Os_PotsTask>:
//void Os_50ms_Task( void );
//void Os_100ms_Task( void );

void Os_LedsTask( void ){}
void Os_ButtonsTask( void ){}
void Os_PotsTask( void ){}
    16ac:	bf00      	nop
    16ae:	4770      	bx	lr

000016b0 <Os_EepromsTask>:
void Os_EepromsTask( void ){}
    16b0:	bf00      	nop
    16b2:	4770      	bx	lr

000016b4 <Os_CanTask>:
void Os_CanTask( void ){}
    16b4:	bf00      	nop
    16b6:	4770      	bx	lr

000016b8 <Os_BuzzerTask>:
void Os_BuzzerTask( void ){}
    16b8:	bf00      	nop
    16ba:	4770      	bx	lr

000016bc <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    16bc:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    16be:	2300      	movs	r3, #0
    16c0:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    16c2:	2300      	movs	r3, #0
    16c4:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    16c6:	2300      	movs	r3, #0
    16c8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    16ca:	2300      	movs	r3, #0
    16cc:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    16ce:	4b44      	ldr	r3, [pc, #272]	; (17e0 <init_data_bss+0x124>)
    16d0:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    16d2:	4b44      	ldr	r3, [pc, #272]	; (17e4 <init_data_bss+0x128>)
    16d4:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    16d6:	9b05      	ldr	r3, [sp, #20]
    16d8:	681b      	ldr	r3, [r3, #0]
    16da:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    16dc:	9b05      	ldr	r3, [sp, #20]
    16de:	3304      	adds	r3, #4
    16e0:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    16e2:	9b05      	ldr	r3, [sp, #20]
    16e4:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    16e6:	2300      	movs	r3, #0
    16e8:	9309      	str	r3, [sp, #36]	; 0x24
    16ea:	e03d      	b.n	1768 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    16ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16ee:	4613      	mov	r3, r2
    16f0:	005b      	lsls	r3, r3, #1
    16f2:	4413      	add	r3, r2
    16f4:	009b      	lsls	r3, r3, #2
    16f6:	461a      	mov	r2, r3
    16f8:	9b03      	ldr	r3, [sp, #12]
    16fa:	4413      	add	r3, r2
    16fc:	685b      	ldr	r3, [r3, #4]
    16fe:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1700:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1702:	4613      	mov	r3, r2
    1704:	005b      	lsls	r3, r3, #1
    1706:	4413      	add	r3, r2
    1708:	009b      	lsls	r3, r3, #2
    170a:	461a      	mov	r2, r3
    170c:	9b03      	ldr	r3, [sp, #12]
    170e:	4413      	add	r3, r2
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1714:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1716:	4613      	mov	r3, r2
    1718:	005b      	lsls	r3, r3, #1
    171a:	4413      	add	r3, r2
    171c:	009b      	lsls	r3, r3, #2
    171e:	461a      	mov	r2, r3
    1720:	9b03      	ldr	r3, [sp, #12]
    1722:	4413      	add	r3, r2
    1724:	689b      	ldr	r3, [r3, #8]
    1726:	4619      	mov	r1, r3
    1728:	9a09      	ldr	r2, [sp, #36]	; 0x24
    172a:	4613      	mov	r3, r2
    172c:	005b      	lsls	r3, r3, #1
    172e:	4413      	add	r3, r2
    1730:	009b      	lsls	r3, r3, #2
    1732:	461a      	mov	r2, r3
    1734:	9b03      	ldr	r3, [sp, #12]
    1736:	4413      	add	r3, r2
    1738:	685b      	ldr	r3, [r3, #4]
    173a:	1acb      	subs	r3, r1, r3
    173c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    173e:	2300      	movs	r3, #0
    1740:	9308      	str	r3, [sp, #32]
    1742:	e00a      	b.n	175a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1744:	9a00      	ldr	r2, [sp, #0]
    1746:	9b08      	ldr	r3, [sp, #32]
    1748:	441a      	add	r2, r3
    174a:	9901      	ldr	r1, [sp, #4]
    174c:	9b08      	ldr	r3, [sp, #32]
    174e:	440b      	add	r3, r1
    1750:	7812      	ldrb	r2, [r2, #0]
    1752:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1754:	9b08      	ldr	r3, [sp, #32]
    1756:	3301      	adds	r3, #1
    1758:	9308      	str	r3, [sp, #32]
    175a:	9a08      	ldr	r2, [sp, #32]
    175c:	9b06      	ldr	r3, [sp, #24]
    175e:	429a      	cmp	r2, r3
    1760:	d3f0      	bcc.n	1744 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1762:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1764:	3301      	adds	r3, #1
    1766:	9309      	str	r3, [sp, #36]	; 0x24
    1768:	9a09      	ldr	r2, [sp, #36]	; 0x24
    176a:	9b07      	ldr	r3, [sp, #28]
    176c:	429a      	cmp	r2, r3
    176e:	d3bd      	bcc.n	16ec <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1770:	9b04      	ldr	r3, [sp, #16]
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    1776:	9b04      	ldr	r3, [sp, #16]
    1778:	3304      	adds	r3, #4
    177a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    177c:	9b04      	ldr	r3, [sp, #16]
    177e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1780:	2300      	movs	r3, #0
    1782:	9309      	str	r3, [sp, #36]	; 0x24
    1784:	e024      	b.n	17d0 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    1786:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1788:	00db      	lsls	r3, r3, #3
    178a:	9a02      	ldr	r2, [sp, #8]
    178c:	4413      	add	r3, r2
    178e:	681b      	ldr	r3, [r3, #0]
    1790:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    1792:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1794:	00db      	lsls	r3, r3, #3
    1796:	9a02      	ldr	r2, [sp, #8]
    1798:	4413      	add	r3, r2
    179a:	685b      	ldr	r3, [r3, #4]
    179c:	4619      	mov	r1, r3
    179e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17a0:	00db      	lsls	r3, r3, #3
    17a2:	9a02      	ldr	r2, [sp, #8]
    17a4:	4413      	add	r3, r2
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	1acb      	subs	r3, r1, r3
    17aa:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    17ac:	2300      	movs	r3, #0
    17ae:	9308      	str	r3, [sp, #32]
    17b0:	e007      	b.n	17c2 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    17b2:	9a01      	ldr	r2, [sp, #4]
    17b4:	9b08      	ldr	r3, [sp, #32]
    17b6:	4413      	add	r3, r2
    17b8:	2200      	movs	r2, #0
    17ba:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    17bc:	9b08      	ldr	r3, [sp, #32]
    17be:	3301      	adds	r3, #1
    17c0:	9308      	str	r3, [sp, #32]
    17c2:	9a08      	ldr	r2, [sp, #32]
    17c4:	9b06      	ldr	r3, [sp, #24]
    17c6:	429a      	cmp	r2, r3
    17c8:	d3f3      	bcc.n	17b2 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    17ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17cc:	3301      	adds	r3, #1
    17ce:	9309      	str	r3, [sp, #36]	; 0x24
    17d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17d2:	9b07      	ldr	r3, [sp, #28]
    17d4:	429a      	cmp	r2, r3
    17d6:	d3d6      	bcc.n	1786 <init_data_bss+0xca>
        }
    }
}
    17d8:	bf00      	nop
    17da:	bf00      	nop
    17dc:	b00a      	add	sp, #40	; 0x28
    17de:	4770      	bx	lr
    17e0:	00017434 	.word	0x00017434
    17e4:	00017450 	.word	0x00017450

000017e8 <sys_m4_cache_init>:
{
    17e8:	b084      	sub	sp, #16
    17ea:	4603      	mov	r3, r0
    17ec:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    17f0:	2300      	movs	r3, #0
    17f2:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    17f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d118      	bne.n	1830 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    17fe:	4b10      	ldr	r3, [pc, #64]	; (1840 <sys_m4_cache_init+0x58>)
    1800:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1804:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1806:	4b0e      	ldr	r3, [pc, #56]	; (1840 <sys_m4_cache_init+0x58>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	4a0d      	ldr	r2, [pc, #52]	; (1840 <sys_m4_cache_init+0x58>)
    180c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1810:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1812:	bf00      	nop
    1814:	4b0a      	ldr	r3, [pc, #40]	; (1840 <sys_m4_cache_init+0x58>)
    1816:	681b      	ldr	r3, [r3, #0]
    1818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    181c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1820:	d0f8      	beq.n	1814 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1822:	4b07      	ldr	r3, [pc, #28]	; (1840 <sys_m4_cache_init+0x58>)
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	4a06      	ldr	r2, [pc, #24]	; (1840 <sys_m4_cache_init+0x58>)
    1828:	f043 0301 	orr.w	r3, r3, #1
    182c:	6013      	str	r3, [r2, #0]
    182e:	e002      	b.n	1836 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1830:	2301      	movs	r3, #1
    1832:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1836:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    183a:	4618      	mov	r0, r3
    183c:	b004      	add	sp, #16
    183e:	4770      	bx	lr
    1840:	e0082000 	.word	0xe0082000

00001844 <startup_go_to_user_mode>:
}
    1844:	bf00      	nop
    1846:	4770      	bx	lr

00001848 <Sys_GetCoreID>:
    return 0U;
    1848:	2300      	movs	r3, #0
}
    184a:	4618      	mov	r0, r3
    184c:	4770      	bx	lr

0000184e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    184e:	e7fe      	b.n	184e <HardFault_Handler>

00001850 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1850:	e7fe      	b.n	1850 <MemManage_Handler>

00001852 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1852:	e7fe      	b.n	1852 <BusFault_Handler>

00001854 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1854:	e7fe      	b.n	1854 <UsageFault_Handler>

00001856 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1856:	e7fe      	b.n	1856 <SVC_Handler>

00001858 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1858:	e7fe      	b.n	1858 <DebugMon_Handler>

0000185a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    185a:	e7fe      	b.n	185a <PendSV_Handler>

0000185c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    185c:	e7fe      	b.n	185c <SysTick_Handler>

0000185e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    185e:	e7fe      	b.n	185e <undefined_handler>

00001860 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1860:	b500      	push	{lr}
    1862:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1864:	4b26      	ldr	r3, [pc, #152]	; (1900 <_DoInit+0xa0>)
    1866:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1868:	22a8      	movs	r2, #168	; 0xa8
    186a:	2100      	movs	r1, #0
    186c:	9800      	ldr	r0, [sp, #0]
    186e:	f000 fd13 	bl	2298 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1872:	9b00      	ldr	r3, [sp, #0]
    1874:	2203      	movs	r2, #3
    1876:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1878:	9b00      	ldr	r3, [sp, #0]
    187a:	2203      	movs	r2, #3
    187c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    187e:	9b00      	ldr	r3, [sp, #0]
    1880:	4a20      	ldr	r2, [pc, #128]	; (1904 <_DoInit+0xa4>)
    1882:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1884:	9b00      	ldr	r3, [sp, #0]
    1886:	4a20      	ldr	r2, [pc, #128]	; (1908 <_DoInit+0xa8>)
    1888:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    188a:	9b00      	ldr	r3, [sp, #0]
    188c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1890:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    1892:	9b00      	ldr	r3, [sp, #0]
    1894:	2200      	movs	r2, #0
    1896:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1898:	9b00      	ldr	r3, [sp, #0]
    189a:	2200      	movs	r2, #0
    189c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    189e:	9b00      	ldr	r3, [sp, #0]
    18a0:	2200      	movs	r2, #0
    18a2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    18a4:	9b00      	ldr	r3, [sp, #0]
    18a6:	4a17      	ldr	r2, [pc, #92]	; (1904 <_DoInit+0xa4>)
    18a8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    18aa:	9b00      	ldr	r3, [sp, #0]
    18ac:	4a17      	ldr	r2, [pc, #92]	; (190c <_DoInit+0xac>)
    18ae:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    18b0:	9b00      	ldr	r3, [sp, #0]
    18b2:	2210      	movs	r2, #16
    18b4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    18b6:	9b00      	ldr	r3, [sp, #0]
    18b8:	2200      	movs	r2, #0
    18ba:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    18bc:	9b00      	ldr	r3, [sp, #0]
    18be:	2200      	movs	r2, #0
    18c0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    18c2:	9b00      	ldr	r3, [sp, #0]
    18c4:	2200      	movs	r2, #0
    18c6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    18c8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    18cc:	2300      	movs	r3, #0
    18ce:	9301      	str	r3, [sp, #4]
    18d0:	e00c      	b.n	18ec <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    18d2:	9b01      	ldr	r3, [sp, #4]
    18d4:	f1c3 030f 	rsb	r3, r3, #15
    18d8:	4a0d      	ldr	r2, [pc, #52]	; (1910 <_DoInit+0xb0>)
    18da:	5cd1      	ldrb	r1, [r2, r3]
    18dc:	9a00      	ldr	r2, [sp, #0]
    18de:	9b01      	ldr	r3, [sp, #4]
    18e0:	4413      	add	r3, r2
    18e2:	460a      	mov	r2, r1
    18e4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    18e6:	9b01      	ldr	r3, [sp, #4]
    18e8:	3301      	adds	r3, #1
    18ea:	9301      	str	r3, [sp, #4]
    18ec:	9b01      	ldr	r3, [sp, #4]
    18ee:	2b0f      	cmp	r3, #15
    18f0:	d9ef      	bls.n	18d2 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    18f2:	f3bf 8f5f 	dmb	sy
}
    18f6:	bf00      	nop
    18f8:	b003      	add	sp, #12
    18fa:	f85d fb04 	ldr.w	pc, [sp], #4
    18fe:	bf00      	nop
    1900:	1fff97dc 	.word	0x1fff97dc
    1904:	00015f4c 	.word	0x00015f4c
    1908:	1fff9884 	.word	0x1fff9884
    190c:	1fff9c84 	.word	0x1fff9c84
    1910:	00017410 	.word	0x00017410

00001914 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1914:	b500      	push	{lr}
    1916:	b08b      	sub	sp, #44	; 0x2c
    1918:	9003      	str	r0, [sp, #12]
    191a:	9102      	str	r1, [sp, #8]
    191c:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    191e:	2300      	movs	r3, #0
    1920:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1922:	9b03      	ldr	r3, [sp, #12]
    1924:	68db      	ldr	r3, [r3, #12]
    1926:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1928:	9b03      	ldr	r3, [sp, #12]
    192a:	691b      	ldr	r3, [r3, #16]
    192c:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    192e:	9a06      	ldr	r2, [sp, #24]
    1930:	9b07      	ldr	r3, [sp, #28]
    1932:	429a      	cmp	r2, r3
    1934:	d905      	bls.n	1942 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1936:	9a06      	ldr	r2, [sp, #24]
    1938:	9b07      	ldr	r3, [sp, #28]
    193a:	1ad3      	subs	r3, r2, r3
    193c:	3b01      	subs	r3, #1
    193e:	9309      	str	r3, [sp, #36]	; 0x24
    1940:	e007      	b.n	1952 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1942:	9b03      	ldr	r3, [sp, #12]
    1944:	689a      	ldr	r2, [r3, #8]
    1946:	9906      	ldr	r1, [sp, #24]
    1948:	9b07      	ldr	r3, [sp, #28]
    194a:	1acb      	subs	r3, r1, r3
    194c:	4413      	add	r3, r2
    194e:	3b01      	subs	r3, #1
    1950:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1952:	9b03      	ldr	r3, [sp, #12]
    1954:	689a      	ldr	r2, [r3, #8]
    1956:	9b07      	ldr	r3, [sp, #28]
    1958:	1ad3      	subs	r3, r2, r3
    195a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    195c:	4293      	cmp	r3, r2
    195e:	bf28      	it	cs
    1960:	4613      	movcs	r3, r2
    1962:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1964:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1966:	9b01      	ldr	r3, [sp, #4]
    1968:	4293      	cmp	r3, r2
    196a:	bf28      	it	cs
    196c:	4613      	movcs	r3, r2
    196e:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1970:	9b03      	ldr	r3, [sp, #12]
    1972:	685a      	ldr	r2, [r3, #4]
    1974:	9b07      	ldr	r3, [sp, #28]
    1976:	4413      	add	r3, r2
    1978:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    197a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    197c:	9902      	ldr	r1, [sp, #8]
    197e:	9805      	ldr	r0, [sp, #20]
    1980:	f000 fc7c 	bl	227c <memcpy>
    NumBytesWritten += NumBytesToWrite;
    1984:	9a08      	ldr	r2, [sp, #32]
    1986:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1988:	4413      	add	r3, r2
    198a:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    198c:	9a02      	ldr	r2, [sp, #8]
    198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1990:	4413      	add	r3, r2
    1992:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    1994:	9a01      	ldr	r2, [sp, #4]
    1996:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1998:	1ad3      	subs	r3, r2, r3
    199a:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    199c:	9a07      	ldr	r2, [sp, #28]
    199e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19a0:	4413      	add	r3, r2
    19a2:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    19a4:	9b03      	ldr	r3, [sp, #12]
    19a6:	689b      	ldr	r3, [r3, #8]
    19a8:	9a07      	ldr	r2, [sp, #28]
    19aa:	429a      	cmp	r2, r3
    19ac:	d101      	bne.n	19b2 <_WriteBlocking+0x9e>
      WrOff = 0u;
    19ae:	2300      	movs	r3, #0
    19b0:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    19b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    19b6:	9b03      	ldr	r3, [sp, #12]
    19b8:	9a07      	ldr	r2, [sp, #28]
    19ba:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    19bc:	9b01      	ldr	r3, [sp, #4]
    19be:	2b00      	cmp	r3, #0
    19c0:	d1b2      	bne.n	1928 <_WriteBlocking+0x14>
  return NumBytesWritten;
    19c2:	9b08      	ldr	r3, [sp, #32]
}
    19c4:	4618      	mov	r0, r3
    19c6:	b00b      	add	sp, #44	; 0x2c
    19c8:	f85d fb04 	ldr.w	pc, [sp], #4

000019cc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    19cc:	b500      	push	{lr}
    19ce:	b089      	sub	sp, #36	; 0x24
    19d0:	9003      	str	r0, [sp, #12]
    19d2:	9102      	str	r1, [sp, #8]
    19d4:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    19d6:	9b03      	ldr	r3, [sp, #12]
    19d8:	68db      	ldr	r3, [r3, #12]
    19da:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    19dc:	9b03      	ldr	r3, [sp, #12]
    19de:	689a      	ldr	r2, [r3, #8]
    19e0:	9b07      	ldr	r3, [sp, #28]
    19e2:	1ad3      	subs	r3, r2, r3
    19e4:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    19e6:	9a06      	ldr	r2, [sp, #24]
    19e8:	9b01      	ldr	r3, [sp, #4]
    19ea:	429a      	cmp	r2, r3
    19ec:	d911      	bls.n	1a12 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    19ee:	9b03      	ldr	r3, [sp, #12]
    19f0:	685a      	ldr	r2, [r3, #4]
    19f2:	9b07      	ldr	r3, [sp, #28]
    19f4:	4413      	add	r3, r2
    19f6:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    19f8:	9a01      	ldr	r2, [sp, #4]
    19fa:	9902      	ldr	r1, [sp, #8]
    19fc:	9804      	ldr	r0, [sp, #16]
    19fe:	f000 fc3d 	bl	227c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1a06:	9a07      	ldr	r2, [sp, #28]
    1a08:	9b01      	ldr	r3, [sp, #4]
    1a0a:	441a      	add	r2, r3
    1a0c:	9b03      	ldr	r3, [sp, #12]
    1a0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1a10:	e01f      	b.n	1a52 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1a12:	9b06      	ldr	r3, [sp, #24]
    1a14:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1a16:	9b03      	ldr	r3, [sp, #12]
    1a18:	685a      	ldr	r2, [r3, #4]
    1a1a:	9b07      	ldr	r3, [sp, #28]
    1a1c:	4413      	add	r3, r2
    1a1e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1a20:	9a05      	ldr	r2, [sp, #20]
    1a22:	9902      	ldr	r1, [sp, #8]
    1a24:	9804      	ldr	r0, [sp, #16]
    1a26:	f000 fc29 	bl	227c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1a2a:	9a01      	ldr	r2, [sp, #4]
    1a2c:	9b06      	ldr	r3, [sp, #24]
    1a2e:	1ad3      	subs	r3, r2, r3
    1a30:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1a32:	9b03      	ldr	r3, [sp, #12]
    1a34:	685b      	ldr	r3, [r3, #4]
    1a36:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1a38:	9a02      	ldr	r2, [sp, #8]
    1a3a:	9b06      	ldr	r3, [sp, #24]
    1a3c:	4413      	add	r3, r2
    1a3e:	9a05      	ldr	r2, [sp, #20]
    1a40:	4619      	mov	r1, r3
    1a42:	9804      	ldr	r0, [sp, #16]
    1a44:	f000 fc1a 	bl	227c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1a4c:	9b03      	ldr	r3, [sp, #12]
    1a4e:	9a05      	ldr	r2, [sp, #20]
    1a50:	60da      	str	r2, [r3, #12]
}
    1a52:	bf00      	nop
    1a54:	b009      	add	sp, #36	; 0x24
    1a56:	f85d fb04 	ldr.w	pc, [sp], #4

00001a5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1a5a:	b086      	sub	sp, #24
    1a5c:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1a5e:	9b01      	ldr	r3, [sp, #4]
    1a60:	691b      	ldr	r3, [r3, #16]
    1a62:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1a64:	9b01      	ldr	r3, [sp, #4]
    1a66:	68db      	ldr	r3, [r3, #12]
    1a68:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1a6a:	9a04      	ldr	r2, [sp, #16]
    1a6c:	9b03      	ldr	r3, [sp, #12]
    1a6e:	429a      	cmp	r2, r3
    1a70:	d808      	bhi.n	1a84 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1a72:	9b01      	ldr	r3, [sp, #4]
    1a74:	689a      	ldr	r2, [r3, #8]
    1a76:	9b03      	ldr	r3, [sp, #12]
    1a78:	1ad2      	subs	r2, r2, r3
    1a7a:	9b04      	ldr	r3, [sp, #16]
    1a7c:	4413      	add	r3, r2
    1a7e:	3b01      	subs	r3, #1
    1a80:	9305      	str	r3, [sp, #20]
    1a82:	e004      	b.n	1a8e <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1a84:	9a04      	ldr	r2, [sp, #16]
    1a86:	9b03      	ldr	r3, [sp, #12]
    1a88:	1ad3      	subs	r3, r2, r3
    1a8a:	3b01      	subs	r3, #1
    1a8c:	9305      	str	r3, [sp, #20]
  }
  return r;
    1a8e:	9b05      	ldr	r3, [sp, #20]
}
    1a90:	4618      	mov	r0, r3
    1a92:	b006      	add	sp, #24
    1a94:	4770      	bx	lr
	...

00001a98 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a98:	b500      	push	{lr}
    1a9a:	b089      	sub	sp, #36	; 0x24
    1a9c:	9003      	str	r0, [sp, #12]
    1a9e:	9102      	str	r1, [sp, #8]
    1aa0:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1aa2:	9b02      	ldr	r3, [sp, #8]
    1aa4:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1aa6:	9b03      	ldr	r3, [sp, #12]
    1aa8:	1c5a      	adds	r2, r3, #1
    1aaa:	4613      	mov	r3, r2
    1aac:	005b      	lsls	r3, r3, #1
    1aae:	4413      	add	r3, r2
    1ab0:	00db      	lsls	r3, r3, #3
    1ab2:	4a20      	ldr	r2, [pc, #128]	; (1b34 <SEGGER_RTT_WriteNoLock+0x9c>)
    1ab4:	4413      	add	r3, r2
    1ab6:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1ab8:	9b05      	ldr	r3, [sp, #20]
    1aba:	695b      	ldr	r3, [r3, #20]
    1abc:	2b02      	cmp	r3, #2
    1abe:	d029      	beq.n	1b14 <SEGGER_RTT_WriteNoLock+0x7c>
    1ac0:	2b02      	cmp	r3, #2
    1ac2:	d82e      	bhi.n	1b22 <SEGGER_RTT_WriteNoLock+0x8a>
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d002      	beq.n	1ace <SEGGER_RTT_WriteNoLock+0x36>
    1ac8:	2b01      	cmp	r3, #1
    1aca:	d013      	beq.n	1af4 <SEGGER_RTT_WriteNoLock+0x5c>
    1acc:	e029      	b.n	1b22 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1ace:	9805      	ldr	r0, [sp, #20]
    1ad0:	f7ff ffc3 	bl	1a5a <_GetAvailWriteSpace>
    1ad4:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1ad6:	9a04      	ldr	r2, [sp, #16]
    1ad8:	9b01      	ldr	r3, [sp, #4]
    1ada:	429a      	cmp	r2, r3
    1adc:	d202      	bcs.n	1ae4 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1ade:	2300      	movs	r3, #0
    1ae0:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1ae2:	e021      	b.n	1b28 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1ae4:	9b01      	ldr	r3, [sp, #4]
    1ae6:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1ae8:	9a01      	ldr	r2, [sp, #4]
    1aea:	9906      	ldr	r1, [sp, #24]
    1aec:	9805      	ldr	r0, [sp, #20]
    1aee:	f7ff ff6d 	bl	19cc <_WriteNoCheck>
    break;
    1af2:	e019      	b.n	1b28 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1af4:	9805      	ldr	r0, [sp, #20]
    1af6:	f7ff ffb0 	bl	1a5a <_GetAvailWriteSpace>
    1afa:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1afc:	9a01      	ldr	r2, [sp, #4]
    1afe:	9b04      	ldr	r3, [sp, #16]
    1b00:	4293      	cmp	r3, r2
    1b02:	bf28      	it	cs
    1b04:	4613      	movcs	r3, r2
    1b06:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1b08:	9a07      	ldr	r2, [sp, #28]
    1b0a:	9906      	ldr	r1, [sp, #24]
    1b0c:	9805      	ldr	r0, [sp, #20]
    1b0e:	f7ff ff5d 	bl	19cc <_WriteNoCheck>
    break;
    1b12:	e009      	b.n	1b28 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1b14:	9a01      	ldr	r2, [sp, #4]
    1b16:	9906      	ldr	r1, [sp, #24]
    1b18:	9805      	ldr	r0, [sp, #20]
    1b1a:	f7ff fefb 	bl	1914 <_WriteBlocking>
    1b1e:	9007      	str	r0, [sp, #28]
    break;
    1b20:	e002      	b.n	1b28 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1b22:	2300      	movs	r3, #0
    1b24:	9307      	str	r3, [sp, #28]
    break;
    1b26:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1b28:	9b07      	ldr	r3, [sp, #28]
}
    1b2a:	4618      	mov	r0, r3
    1b2c:	b009      	add	sp, #36	; 0x24
    1b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    1b32:	bf00      	nop
    1b34:	1fff97dc 	.word	0x1fff97dc

00001b38 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1b38:	b500      	push	{lr}
    1b3a:	b089      	sub	sp, #36	; 0x24
    1b3c:	9003      	str	r0, [sp, #12]
    1b3e:	9102      	str	r1, [sp, #8]
    1b40:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1b42:	4b0f      	ldr	r3, [pc, #60]	; (1b80 <SEGGER_RTT_Write+0x48>)
    1b44:	9307      	str	r3, [sp, #28]
    1b46:	9b07      	ldr	r3, [sp, #28]
    1b48:	781b      	ldrb	r3, [r3, #0]
    1b4a:	b2db      	uxtb	r3, r3
    1b4c:	2b53      	cmp	r3, #83	; 0x53
    1b4e:	d001      	beq.n	1b54 <SEGGER_RTT_Write+0x1c>
    1b50:	f7ff fe86 	bl	1860 <_DoInit>
  SEGGER_RTT_LOCK();
    1b54:	f3ef 8311 	mrs	r3, BASEPRI
    1b58:	f04f 0120 	mov.w	r1, #32
    1b5c:	f381 8811 	msr	BASEPRI, r1
    1b60:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1b62:	9a01      	ldr	r2, [sp, #4]
    1b64:	9902      	ldr	r1, [sp, #8]
    1b66:	9803      	ldr	r0, [sp, #12]
    1b68:	f7ff ff96 	bl	1a98 <SEGGER_RTT_WriteNoLock>
    1b6c:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1b6e:	9b06      	ldr	r3, [sp, #24]
    1b70:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1b74:	9b05      	ldr	r3, [sp, #20]
}
    1b76:	4618      	mov	r0, r3
    1b78:	b009      	add	sp, #36	; 0x24
    1b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b7e:	bf00      	nop
    1b80:	1fff97dc 	.word	0x1fff97dc

00001b84 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1b84:	b508      	push	{r3, lr}
  _DoInit();
    1b86:	f7ff fe6b 	bl	1860 <_DoInit>
}
    1b8a:	bf00      	nop
    1b8c:	bd08      	pop	{r3, pc}

00001b8e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1b8e:	b500      	push	{lr}
    1b90:	b085      	sub	sp, #20
    1b92:	9001      	str	r0, [sp, #4]
    1b94:	460b      	mov	r3, r1
    1b96:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1b9a:	9b01      	ldr	r3, [sp, #4]
    1b9c:	689b      	ldr	r3, [r3, #8]
    1b9e:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1ba0:	9b03      	ldr	r3, [sp, #12]
    1ba2:	1c5a      	adds	r2, r3, #1
    1ba4:	9b01      	ldr	r3, [sp, #4]
    1ba6:	685b      	ldr	r3, [r3, #4]
    1ba8:	429a      	cmp	r2, r3
    1baa:	d80f      	bhi.n	1bcc <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	681a      	ldr	r2, [r3, #0]
    1bb0:	9b03      	ldr	r3, [sp, #12]
    1bb2:	4413      	add	r3, r2
    1bb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1bb8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1bba:	9b03      	ldr	r3, [sp, #12]
    1bbc:	1c5a      	adds	r2, r3, #1
    1bbe:	9b01      	ldr	r3, [sp, #4]
    1bc0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1bc2:	9b01      	ldr	r3, [sp, #4]
    1bc4:	68db      	ldr	r3, [r3, #12]
    1bc6:	1c5a      	adds	r2, r3, #1
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1bcc:	9b01      	ldr	r3, [sp, #4]
    1bce:	689a      	ldr	r2, [r3, #8]
    1bd0:	9b01      	ldr	r3, [sp, #4]
    1bd2:	685b      	ldr	r3, [r3, #4]
    1bd4:	429a      	cmp	r2, r3
    1bd6:	d115      	bne.n	1c04 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1bd8:	9b01      	ldr	r3, [sp, #4]
    1bda:	6918      	ldr	r0, [r3, #16]
    1bdc:	9b01      	ldr	r3, [sp, #4]
    1bde:	6819      	ldr	r1, [r3, #0]
    1be0:	9b01      	ldr	r3, [sp, #4]
    1be2:	689b      	ldr	r3, [r3, #8]
    1be4:	461a      	mov	r2, r3
    1be6:	f7ff ffa7 	bl	1b38 <SEGGER_RTT_Write>
    1bea:	4602      	mov	r2, r0
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	689b      	ldr	r3, [r3, #8]
    1bf0:	429a      	cmp	r2, r3
    1bf2:	d004      	beq.n	1bfe <_StoreChar+0x70>
      p->ReturnValue = -1;
    1bf4:	9b01      	ldr	r3, [sp, #4]
    1bf6:	f04f 32ff 	mov.w	r2, #4294967295
    1bfa:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1bfc:	e002      	b.n	1c04 <_StoreChar+0x76>
      p->Cnt = 0u;
    1bfe:	9b01      	ldr	r3, [sp, #4]
    1c00:	2200      	movs	r2, #0
    1c02:	609a      	str	r2, [r3, #8]
}
    1c04:	bf00      	nop
    1c06:	b005      	add	sp, #20
    1c08:	f85d fb04 	ldr.w	pc, [sp], #4

00001c0c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1c0c:	b500      	push	{lr}
    1c0e:	b08b      	sub	sp, #44	; 0x2c
    1c10:	9003      	str	r0, [sp, #12]
    1c12:	9102      	str	r1, [sp, #8]
    1c14:	9201      	str	r2, [sp, #4]
    1c16:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1c18:	9b02      	ldr	r3, [sp, #8]
    1c1a:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1c1c:	2301      	movs	r3, #1
    1c1e:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1c20:	2301      	movs	r3, #1
    1c22:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c24:	e007      	b.n	1c36 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1c26:	9a08      	ldr	r2, [sp, #32]
    1c28:	9b01      	ldr	r3, [sp, #4]
    1c2a:	fbb2 f3f3 	udiv	r3, r2, r3
    1c2e:	9308      	str	r3, [sp, #32]
    Width++;
    1c30:	9b07      	ldr	r3, [sp, #28]
    1c32:	3301      	adds	r3, #1
    1c34:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c36:	9a08      	ldr	r2, [sp, #32]
    1c38:	9b01      	ldr	r3, [sp, #4]
    1c3a:	429a      	cmp	r2, r3
    1c3c:	d2f3      	bcs.n	1c26 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1c3e:	9a00      	ldr	r2, [sp, #0]
    1c40:	9b07      	ldr	r3, [sp, #28]
    1c42:	429a      	cmp	r2, r3
    1c44:	d901      	bls.n	1c4a <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1c46:	9b00      	ldr	r3, [sp, #0]
    1c48:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c4c:	f003 0301 	and.w	r3, r3, #1
    1c50:	2b00      	cmp	r3, #0
    1c52:	d128      	bne.n	1ca6 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c56:	2b00      	cmp	r3, #0
    1c58:	d025      	beq.n	1ca6 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c5c:	f003 0302 	and.w	r3, r3, #2
    1c60:	2b00      	cmp	r3, #0
    1c62:	d006      	beq.n	1c72 <_PrintUnsigned+0x66>
    1c64:	9b00      	ldr	r3, [sp, #0]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d103      	bne.n	1c72 <_PrintUnsigned+0x66>
        c = '0';
    1c6a:	2330      	movs	r3, #48	; 0x30
    1c6c:	f88d 301b 	strb.w	r3, [sp, #27]
    1c70:	e002      	b.n	1c78 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1c72:	2320      	movs	r3, #32
    1c74:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c78:	e00c      	b.n	1c94 <_PrintUnsigned+0x88>
        FieldWidth--;
    1c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c7c:	3b01      	subs	r3, #1
    1c7e:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1c80:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1c84:	4619      	mov	r1, r3
    1c86:	9803      	ldr	r0, [sp, #12]
    1c88:	f7ff ff81 	bl	1b8e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1c8c:	9b03      	ldr	r3, [sp, #12]
    1c8e:	68db      	ldr	r3, [r3, #12]
    1c90:	2b00      	cmp	r3, #0
    1c92:	db07      	blt.n	1ca4 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c96:	2b00      	cmp	r3, #0
    1c98:	d005      	beq.n	1ca6 <_PrintUnsigned+0x9a>
    1c9a:	9a07      	ldr	r2, [sp, #28]
    1c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c9e:	429a      	cmp	r2, r3
    1ca0:	d3eb      	bcc.n	1c7a <_PrintUnsigned+0x6e>
    1ca2:	e000      	b.n	1ca6 <_PrintUnsigned+0x9a>
          break;
    1ca4:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1ca6:	9b03      	ldr	r3, [sp, #12]
    1ca8:	68db      	ldr	r3, [r3, #12]
    1caa:	2b00      	cmp	r3, #0
    1cac:	db55      	blt.n	1d5a <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1cae:	9b00      	ldr	r3, [sp, #0]
    1cb0:	2b01      	cmp	r3, #1
    1cb2:	d903      	bls.n	1cbc <_PrintUnsigned+0xb0>
        NumDigits--;
    1cb4:	9b00      	ldr	r3, [sp, #0]
    1cb6:	3b01      	subs	r3, #1
    1cb8:	9300      	str	r3, [sp, #0]
    1cba:	e009      	b.n	1cd0 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1cbc:	9a02      	ldr	r2, [sp, #8]
    1cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cc0:	fbb2 f3f3 	udiv	r3, r2, r3
    1cc4:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1cc6:	9a05      	ldr	r2, [sp, #20]
    1cc8:	9b01      	ldr	r3, [sp, #4]
    1cca:	429a      	cmp	r2, r3
    1ccc:	d200      	bcs.n	1cd0 <_PrintUnsigned+0xc4>
          break;
    1cce:	e005      	b.n	1cdc <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cd2:	9a01      	ldr	r2, [sp, #4]
    1cd4:	fb02 f303 	mul.w	r3, r2, r3
    1cd8:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1cda:	e7e8      	b.n	1cae <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1cdc:	9a02      	ldr	r2, [sp, #8]
    1cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ce0:	fbb2 f3f3 	udiv	r3, r2, r3
    1ce4:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1ce6:	9b05      	ldr	r3, [sp, #20]
    1ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1cea:	fb02 f303 	mul.w	r3, r2, r3
    1cee:	9a02      	ldr	r2, [sp, #8]
    1cf0:	1ad3      	subs	r3, r2, r3
    1cf2:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1cf4:	4a1b      	ldr	r2, [pc, #108]	; (1d64 <_PrintUnsigned+0x158>)
    1cf6:	9b05      	ldr	r3, [sp, #20]
    1cf8:	4413      	add	r3, r2
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	4619      	mov	r1, r3
    1cfe:	9803      	ldr	r0, [sp, #12]
    1d00:	f7ff ff45 	bl	1b8e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1d04:	9b03      	ldr	r3, [sp, #12]
    1d06:	68db      	ldr	r3, [r3, #12]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	db08      	blt.n	1d1e <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d0e:	9b01      	ldr	r3, [sp, #4]
    1d10:	fbb2 f3f3 	udiv	r3, r2, r3
    1d14:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d1df      	bne.n	1cdc <_PrintUnsigned+0xd0>
    1d1c:	e000      	b.n	1d20 <_PrintUnsigned+0x114>
        break;
    1d1e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d22:	f003 0301 	and.w	r3, r3, #1
    1d26:	2b00      	cmp	r3, #0
    1d28:	d017      	beq.n	1d5a <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d014      	beq.n	1d5a <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d30:	e00a      	b.n	1d48 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d34:	3b01      	subs	r3, #1
    1d36:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1d38:	2120      	movs	r1, #32
    1d3a:	9803      	ldr	r0, [sp, #12]
    1d3c:	f7ff ff27 	bl	1b8e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1d40:	9b03      	ldr	r3, [sp, #12]
    1d42:	68db      	ldr	r3, [r3, #12]
    1d44:	2b00      	cmp	r3, #0
    1d46:	db07      	blt.n	1d58 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d005      	beq.n	1d5a <_PrintUnsigned+0x14e>
    1d4e:	9a07      	ldr	r2, [sp, #28]
    1d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d52:	429a      	cmp	r2, r3
    1d54:	d3ed      	bcc.n	1d32 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1d56:	e000      	b.n	1d5a <_PrintUnsigned+0x14e>
            break;
    1d58:	bf00      	nop
}
    1d5a:	bf00      	nop
    1d5c:	b00b      	add	sp, #44	; 0x2c
    1d5e:	f85d fb04 	ldr.w	pc, [sp], #4
    1d62:	bf00      	nop
    1d64:	00017424 	.word	0x00017424

00001d68 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1d68:	b500      	push	{lr}
    1d6a:	b089      	sub	sp, #36	; 0x24
    1d6c:	9005      	str	r0, [sp, #20]
    1d6e:	9104      	str	r1, [sp, #16]
    1d70:	9203      	str	r2, [sp, #12]
    1d72:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1d74:	9b04      	ldr	r3, [sp, #16]
    1d76:	2b00      	cmp	r3, #0
    1d78:	bfb8      	it	lt
    1d7a:	425b      	neglt	r3, r3
    1d7c:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1d7e:	2301      	movs	r3, #1
    1d80:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1d82:	e007      	b.n	1d94 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1d84:	9b03      	ldr	r3, [sp, #12]
    1d86:	9a06      	ldr	r2, [sp, #24]
    1d88:	fb92 f3f3 	sdiv	r3, r2, r3
    1d8c:	9306      	str	r3, [sp, #24]
    Width++;
    1d8e:	9b07      	ldr	r3, [sp, #28]
    1d90:	3301      	adds	r3, #1
    1d92:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1d94:	9b03      	ldr	r3, [sp, #12]
    1d96:	9a06      	ldr	r2, [sp, #24]
    1d98:	429a      	cmp	r2, r3
    1d9a:	daf3      	bge.n	1d84 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1d9c:	9a02      	ldr	r2, [sp, #8]
    1d9e:	9b07      	ldr	r3, [sp, #28]
    1da0:	429a      	cmp	r2, r3
    1da2:	d901      	bls.n	1da8 <_PrintInt+0x40>
    Width = NumDigits;
    1da4:	9b02      	ldr	r3, [sp, #8]
    1da6:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1daa:	2b00      	cmp	r3, #0
    1dac:	d00a      	beq.n	1dc4 <_PrintInt+0x5c>
    1dae:	9b04      	ldr	r3, [sp, #16]
    1db0:	2b00      	cmp	r3, #0
    1db2:	db04      	blt.n	1dbe <_PrintInt+0x56>
    1db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1db6:	f003 0304 	and.w	r3, r3, #4
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d002      	beq.n	1dc4 <_PrintInt+0x5c>
    FieldWidth--;
    1dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dc0:	3b01      	subs	r3, #1
    1dc2:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dc6:	f003 0302 	and.w	r3, r3, #2
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d002      	beq.n	1dd4 <_PrintInt+0x6c>
    1dce:	9b02      	ldr	r3, [sp, #8]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d01c      	beq.n	1e0e <_PrintInt+0xa6>
    1dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dd6:	f003 0301 	and.w	r3, r3, #1
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d117      	bne.n	1e0e <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de0:	2b00      	cmp	r3, #0
    1de2:	d014      	beq.n	1e0e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1de4:	e00a      	b.n	1dfc <_PrintInt+0x94>
        FieldWidth--;
    1de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de8:	3b01      	subs	r3, #1
    1dea:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1dec:	2120      	movs	r1, #32
    1dee:	9805      	ldr	r0, [sp, #20]
    1df0:	f7ff fecd 	bl	1b8e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1df4:	9b05      	ldr	r3, [sp, #20]
    1df6:	68db      	ldr	r3, [r3, #12]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	db07      	blt.n	1e0c <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d005      	beq.n	1e0e <_PrintInt+0xa6>
    1e02:	9a07      	ldr	r2, [sp, #28]
    1e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e06:	429a      	cmp	r2, r3
    1e08:	d3ed      	bcc.n	1de6 <_PrintInt+0x7e>
    1e0a:	e000      	b.n	1e0e <_PrintInt+0xa6>
          break;
    1e0c:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1e0e:	9b05      	ldr	r3, [sp, #20]
    1e10:	68db      	ldr	r3, [r3, #12]
    1e12:	2b00      	cmp	r3, #0
    1e14:	db4a      	blt.n	1eac <_PrintInt+0x144>
    if (v < 0) {
    1e16:	9b04      	ldr	r3, [sp, #16]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	da07      	bge.n	1e2c <_PrintInt+0xc4>
      v = -v;
    1e1c:	9b04      	ldr	r3, [sp, #16]
    1e1e:	425b      	negs	r3, r3
    1e20:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1e22:	212d      	movs	r1, #45	; 0x2d
    1e24:	9805      	ldr	r0, [sp, #20]
    1e26:	f7ff feb2 	bl	1b8e <_StoreChar>
    1e2a:	e008      	b.n	1e3e <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e2e:	f003 0304 	and.w	r3, r3, #4
    1e32:	2b00      	cmp	r3, #0
    1e34:	d003      	beq.n	1e3e <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1e36:	212b      	movs	r1, #43	; 0x2b
    1e38:	9805      	ldr	r0, [sp, #20]
    1e3a:	f7ff fea8 	bl	1b8e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1e3e:	9b05      	ldr	r3, [sp, #20]
    1e40:	68db      	ldr	r3, [r3, #12]
    1e42:	2b00      	cmp	r3, #0
    1e44:	db32      	blt.n	1eac <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e48:	f003 0302 	and.w	r3, r3, #2
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d01f      	beq.n	1e90 <_PrintInt+0x128>
    1e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e52:	f003 0301 	and.w	r3, r3, #1
    1e56:	2b00      	cmp	r3, #0
    1e58:	d11a      	bne.n	1e90 <_PrintInt+0x128>
    1e5a:	9b02      	ldr	r3, [sp, #8]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d117      	bne.n	1e90 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e62:	2b00      	cmp	r3, #0
    1e64:	d014      	beq.n	1e90 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e66:	e00a      	b.n	1e7e <_PrintInt+0x116>
            FieldWidth--;
    1e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e6a:	3b01      	subs	r3, #1
    1e6c:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1e6e:	2130      	movs	r1, #48	; 0x30
    1e70:	9805      	ldr	r0, [sp, #20]
    1e72:	f7ff fe8c 	bl	1b8e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1e76:	9b05      	ldr	r3, [sp, #20]
    1e78:	68db      	ldr	r3, [r3, #12]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	db07      	blt.n	1e8e <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e80:	2b00      	cmp	r3, #0
    1e82:	d005      	beq.n	1e90 <_PrintInt+0x128>
    1e84:	9a07      	ldr	r2, [sp, #28]
    1e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e88:	429a      	cmp	r2, r3
    1e8a:	d3ed      	bcc.n	1e68 <_PrintInt+0x100>
    1e8c:	e000      	b.n	1e90 <_PrintInt+0x128>
              break;
    1e8e:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1e90:	9b05      	ldr	r3, [sp, #20]
    1e92:	68db      	ldr	r3, [r3, #12]
    1e94:	2b00      	cmp	r3, #0
    1e96:	db09      	blt.n	1eac <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1e98:	9904      	ldr	r1, [sp, #16]
    1e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e9c:	9301      	str	r3, [sp, #4]
    1e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ea0:	9300      	str	r3, [sp, #0]
    1ea2:	9b02      	ldr	r3, [sp, #8]
    1ea4:	9a03      	ldr	r2, [sp, #12]
    1ea6:	9805      	ldr	r0, [sp, #20]
    1ea8:	f7ff feb0 	bl	1c0c <_PrintUnsigned>
      }
    }
  }
}
    1eac:	bf00      	nop
    1eae:	b009      	add	sp, #36	; 0x24
    1eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001eb4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1eb4:	b500      	push	{lr}
    1eb6:	b0a3      	sub	sp, #140	; 0x8c
    1eb8:	9005      	str	r0, [sp, #20]
    1eba:	9104      	str	r1, [sp, #16]
    1ebc:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1ebe:	ab06      	add	r3, sp, #24
    1ec0:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1ec2:	2340      	movs	r3, #64	; 0x40
    1ec4:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1ec6:	2300      	movs	r3, #0
    1ec8:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1eca:	9b05      	ldr	r3, [sp, #20]
    1ecc:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1ece:	2300      	movs	r3, #0
    1ed0:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1ed2:	9b04      	ldr	r3, [sp, #16]
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1eda:	9b04      	ldr	r3, [sp, #16]
    1edc:	3301      	adds	r3, #1
    1ede:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1ee0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	f000 819c 	beq.w	2222 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1eea:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1eee:	2b25      	cmp	r3, #37	; 0x25
    1ef0:	f040 818b 	bne.w	220a <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1ef4:	2300      	movs	r3, #0
    1ef6:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1ef8:	2301      	movs	r3, #1
    1efa:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1efc:	9b04      	ldr	r3, [sp, #16]
    1efe:	781b      	ldrb	r3, [r3, #0]
    1f00:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1f04:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f08:	3b23      	subs	r3, #35	; 0x23
    1f0a:	2b0d      	cmp	r3, #13
    1f0c:	d83e      	bhi.n	1f8c <SEGGER_RTT_vprintf+0xd8>
    1f0e:	a201      	add	r2, pc, #4	; (adr r2, 1f14 <SEGGER_RTT_vprintf+0x60>)
    1f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f14:	00001f7d 	.word	0x00001f7d
    1f18:	00001f8d 	.word	0x00001f8d
    1f1c:	00001f8d 	.word	0x00001f8d
    1f20:	00001f8d 	.word	0x00001f8d
    1f24:	00001f8d 	.word	0x00001f8d
    1f28:	00001f8d 	.word	0x00001f8d
    1f2c:	00001f8d 	.word	0x00001f8d
    1f30:	00001f8d 	.word	0x00001f8d
    1f34:	00001f6d 	.word	0x00001f6d
    1f38:	00001f8d 	.word	0x00001f8d
    1f3c:	00001f4d 	.word	0x00001f4d
    1f40:	00001f8d 	.word	0x00001f8d
    1f44:	00001f8d 	.word	0x00001f8d
    1f48:	00001f5d 	.word	0x00001f5d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1f4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f4e:	f043 0301 	orr.w	r3, r3, #1
    1f52:	931e      	str	r3, [sp, #120]	; 0x78
    1f54:	9b04      	ldr	r3, [sp, #16]
    1f56:	3301      	adds	r3, #1
    1f58:	9304      	str	r3, [sp, #16]
    1f5a:	e01a      	b.n	1f92 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1f5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f5e:	f043 0302 	orr.w	r3, r3, #2
    1f62:	931e      	str	r3, [sp, #120]	; 0x78
    1f64:	9b04      	ldr	r3, [sp, #16]
    1f66:	3301      	adds	r3, #1
    1f68:	9304      	str	r3, [sp, #16]
    1f6a:	e012      	b.n	1f92 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1f6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f6e:	f043 0304 	orr.w	r3, r3, #4
    1f72:	931e      	str	r3, [sp, #120]	; 0x78
    1f74:	9b04      	ldr	r3, [sp, #16]
    1f76:	3301      	adds	r3, #1
    1f78:	9304      	str	r3, [sp, #16]
    1f7a:	e00a      	b.n	1f92 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1f7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f7e:	f043 0308 	orr.w	r3, r3, #8
    1f82:	931e      	str	r3, [sp, #120]	; 0x78
    1f84:	9b04      	ldr	r3, [sp, #16]
    1f86:	3301      	adds	r3, #1
    1f88:	9304      	str	r3, [sp, #16]
    1f8a:	e002      	b.n	1f92 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1f8c:	2300      	movs	r3, #0
    1f8e:	9320      	str	r3, [sp, #128]	; 0x80
    1f90:	bf00      	nop
        }
      } while (v);
    1f92:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1f94:	2b00      	cmp	r3, #0
    1f96:	d1b1      	bne.n	1efc <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1f98:	2300      	movs	r3, #0
    1f9a:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1f9c:	9b04      	ldr	r3, [sp, #16]
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1fa4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fa8:	2b2f      	cmp	r3, #47	; 0x2f
    1faa:	d912      	bls.n	1fd2 <SEGGER_RTT_vprintf+0x11e>
    1fac:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fb0:	2b39      	cmp	r3, #57	; 0x39
    1fb2:	d80e      	bhi.n	1fd2 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1fb4:	9b04      	ldr	r3, [sp, #16]
    1fb6:	3301      	adds	r3, #1
    1fb8:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1fba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1fbc:	4613      	mov	r3, r2
    1fbe:	009b      	lsls	r3, r3, #2
    1fc0:	4413      	add	r3, r2
    1fc2:	005b      	lsls	r3, r3, #1
    1fc4:	461a      	mov	r2, r3
    1fc6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fca:	4413      	add	r3, r2
    1fcc:	3b30      	subs	r3, #48	; 0x30
    1fce:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1fd0:	e7e4      	b.n	1f9c <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1fd2:	2300      	movs	r3, #0
    1fd4:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1fd6:	9b04      	ldr	r3, [sp, #16]
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1fde:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fe2:	2b2e      	cmp	r3, #46	; 0x2e
    1fe4:	d11d      	bne.n	2022 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1fe6:	9b04      	ldr	r3, [sp, #16]
    1fe8:	3301      	adds	r3, #1
    1fea:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1fec:	9b04      	ldr	r3, [sp, #16]
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1ff4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ff8:	2b2f      	cmp	r3, #47	; 0x2f
    1ffa:	d912      	bls.n	2022 <SEGGER_RTT_vprintf+0x16e>
    1ffc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2000:	2b39      	cmp	r3, #57	; 0x39
    2002:	d80e      	bhi.n	2022 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    2004:	9b04      	ldr	r3, [sp, #16]
    2006:	3301      	adds	r3, #1
    2008:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    200a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    200c:	4613      	mov	r3, r2
    200e:	009b      	lsls	r3, r3, #2
    2010:	4413      	add	r3, r2
    2012:	005b      	lsls	r3, r3, #1
    2014:	461a      	mov	r2, r3
    2016:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    201a:	4413      	add	r3, r2
    201c:	3b30      	subs	r3, #48	; 0x30
    201e:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    2020:	e7e4      	b.n	1fec <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    2022:	9b04      	ldr	r3, [sp, #16]
    2024:	781b      	ldrb	r3, [r3, #0]
    2026:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    202a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    202e:	2b6c      	cmp	r3, #108	; 0x6c
    2030:	d003      	beq.n	203a <SEGGER_RTT_vprintf+0x186>
    2032:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2036:	2b68      	cmp	r3, #104	; 0x68
    2038:	d107      	bne.n	204a <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    203a:	9b04      	ldr	r3, [sp, #16]
    203c:	3301      	adds	r3, #1
    203e:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    2040:	9b04      	ldr	r3, [sp, #16]
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    2048:	e7ef      	b.n	202a <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    204a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    204e:	2b25      	cmp	r3, #37	; 0x25
    2050:	f000 80d0 	beq.w	21f4 <SEGGER_RTT_vprintf+0x340>
    2054:	2b25      	cmp	r3, #37	; 0x25
    2056:	f2c0 80d3 	blt.w	2200 <SEGGER_RTT_vprintf+0x34c>
    205a:	2b78      	cmp	r3, #120	; 0x78
    205c:	f300 80d0 	bgt.w	2200 <SEGGER_RTT_vprintf+0x34c>
    2060:	2b58      	cmp	r3, #88	; 0x58
    2062:	f2c0 80cd 	blt.w	2200 <SEGGER_RTT_vprintf+0x34c>
    2066:	3b58      	subs	r3, #88	; 0x58
    2068:	2b20      	cmp	r3, #32
    206a:	f200 80c9 	bhi.w	2200 <SEGGER_RTT_vprintf+0x34c>
    206e:	a201      	add	r2, pc, #4	; (adr r2, 2074 <SEGGER_RTT_vprintf+0x1c0>)
    2070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2074:	00002165 	.word	0x00002165
    2078:	00002201 	.word	0x00002201
    207c:	00002201 	.word	0x00002201
    2080:	00002201 	.word	0x00002201
    2084:	00002201 	.word	0x00002201
    2088:	00002201 	.word	0x00002201
    208c:	00002201 	.word	0x00002201
    2090:	00002201 	.word	0x00002201
    2094:	00002201 	.word	0x00002201
    2098:	00002201 	.word	0x00002201
    209c:	00002201 	.word	0x00002201
    20a0:	000020f9 	.word	0x000020f9
    20a4:	0000211d 	.word	0x0000211d
    20a8:	00002201 	.word	0x00002201
    20ac:	00002201 	.word	0x00002201
    20b0:	00002201 	.word	0x00002201
    20b4:	00002201 	.word	0x00002201
    20b8:	00002201 	.word	0x00002201
    20bc:	00002201 	.word	0x00002201
    20c0:	00002201 	.word	0x00002201
    20c4:	00002201 	.word	0x00002201
    20c8:	00002201 	.word	0x00002201
    20cc:	00002201 	.word	0x00002201
    20d0:	00002201 	.word	0x00002201
    20d4:	000021d1 	.word	0x000021d1
    20d8:	00002201 	.word	0x00002201
    20dc:	00002201 	.word	0x00002201
    20e0:	00002189 	.word	0x00002189
    20e4:	00002201 	.word	0x00002201
    20e8:	00002141 	.word	0x00002141
    20ec:	00002201 	.word	0x00002201
    20f0:	00002201 	.word	0x00002201
    20f4:	00002165 	.word	0x00002165
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    20f8:	9b03      	ldr	r3, [sp, #12]
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	1d19      	adds	r1, r3, #4
    20fe:	9a03      	ldr	r2, [sp, #12]
    2100:	6011      	str	r1, [r2, #0]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    2106:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2108:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    210c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    2110:	ab16      	add	r3, sp, #88	; 0x58
    2112:	4611      	mov	r1, r2
    2114:	4618      	mov	r0, r3
    2116:	f7ff fd3a 	bl	1b8e <_StoreChar>
        break;
    211a:	e072      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    211c:	9b03      	ldr	r3, [sp, #12]
    211e:	681b      	ldr	r3, [r3, #0]
    2120:	1d19      	adds	r1, r3, #4
    2122:	9a03      	ldr	r2, [sp, #12]
    2124:	6011      	str	r1, [r2, #0]
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    212a:	a816      	add	r0, sp, #88	; 0x58
    212c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    212e:	9301      	str	r3, [sp, #4]
    2130:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2132:	9300      	str	r3, [sp, #0]
    2134:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2136:	220a      	movs	r2, #10
    2138:	9920      	ldr	r1, [sp, #128]	; 0x80
    213a:	f7ff fe15 	bl	1d68 <_PrintInt>
        break;
    213e:	e060      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    2140:	9b03      	ldr	r3, [sp, #12]
    2142:	681b      	ldr	r3, [r3, #0]
    2144:	1d19      	adds	r1, r3, #4
    2146:	9a03      	ldr	r2, [sp, #12]
    2148:	6011      	str	r1, [r2, #0]
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    214e:	9920      	ldr	r1, [sp, #128]	; 0x80
    2150:	a816      	add	r0, sp, #88	; 0x58
    2152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2154:	9301      	str	r3, [sp, #4]
    2156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2158:	9300      	str	r3, [sp, #0]
    215a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    215c:	220a      	movs	r2, #10
    215e:	f7ff fd55 	bl	1c0c <_PrintUnsigned>
        break;
    2162:	e04e      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    2164:	9b03      	ldr	r3, [sp, #12]
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	1d19      	adds	r1, r3, #4
    216a:	9a03      	ldr	r2, [sp, #12]
    216c:	6011      	str	r1, [r2, #0]
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    2172:	9920      	ldr	r1, [sp, #128]	; 0x80
    2174:	a816      	add	r0, sp, #88	; 0x58
    2176:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2178:	9301      	str	r3, [sp, #4]
    217a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    217c:	9300      	str	r3, [sp, #0]
    217e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2180:	2210      	movs	r2, #16
    2182:	f7ff fd43 	bl	1c0c <_PrintUnsigned>
        break;
    2186:	e03c      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    2188:	9b03      	ldr	r3, [sp, #12]
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	1d19      	adds	r1, r3, #4
    218e:	9a03      	ldr	r2, [sp, #12]
    2190:	6011      	str	r1, [r2, #0]
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    2196:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2198:	2b00      	cmp	r3, #0
    219a:	d101      	bne.n	21a0 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    219c:	4b2c      	ldr	r3, [pc, #176]	; (2250 <SEGGER_RTT_vprintf+0x39c>)
    219e:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    21a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    21a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    21aa:	3301      	adds	r3, #1
    21ac:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    21ae:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21b2:	2b00      	cmp	r3, #0
    21b4:	d00a      	beq.n	21cc <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    21b6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    21ba:	ab16      	add	r3, sp, #88	; 0x58
    21bc:	4611      	mov	r1, r2
    21be:	4618      	mov	r0, r3
    21c0:	f7ff fce5 	bl	1b8e <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    21c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21c6:	2b00      	cmp	r3, #0
    21c8:	daea      	bge.n	21a0 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    21ca:	e01a      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
              break;
    21cc:	bf00      	nop
        break;
    21ce:	e018      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    21d0:	9b03      	ldr	r3, [sp, #12]
    21d2:	681b      	ldr	r3, [r3, #0]
    21d4:	1d19      	adds	r1, r3, #4
    21d6:	9a03      	ldr	r2, [sp, #12]
    21d8:	6011      	str	r1, [r2, #0]
    21da:	681b      	ldr	r3, [r3, #0]
    21dc:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    21de:	9920      	ldr	r1, [sp, #128]	; 0x80
    21e0:	a816      	add	r0, sp, #88	; 0x58
    21e2:	2300      	movs	r3, #0
    21e4:	9301      	str	r3, [sp, #4]
    21e6:	2308      	movs	r3, #8
    21e8:	9300      	str	r3, [sp, #0]
    21ea:	2308      	movs	r3, #8
    21ec:	2210      	movs	r2, #16
    21ee:	f7ff fd0d 	bl	1c0c <_PrintUnsigned>
        break;
    21f2:	e006      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    21f4:	ab16      	add	r3, sp, #88	; 0x58
    21f6:	2125      	movs	r1, #37	; 0x25
    21f8:	4618      	mov	r0, r3
    21fa:	f7ff fcc8 	bl	1b8e <_StoreChar>
        break;
    21fe:	e000      	b.n	2202 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    2200:	bf00      	nop
      }
      sFormat++;
    2202:	9b04      	ldr	r3, [sp, #16]
    2204:	3301      	adds	r3, #1
    2206:	9304      	str	r3, [sp, #16]
    2208:	e006      	b.n	2218 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    220a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    220e:	ab16      	add	r3, sp, #88	; 0x58
    2210:	4611      	mov	r1, r2
    2212:	4618      	mov	r0, r3
    2214:	f7ff fcbb 	bl	1b8e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    2218:	9b19      	ldr	r3, [sp, #100]	; 0x64
    221a:	2b00      	cmp	r3, #0
    221c:	f6bf ae59 	bge.w	1ed2 <SEGGER_RTT_vprintf+0x1e>
    2220:	e000      	b.n	2224 <SEGGER_RTT_vprintf+0x370>
      break;
    2222:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    2224:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2226:	2b00      	cmp	r3, #0
    2228:	dd0c      	ble.n	2244 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    222a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    222c:	2b00      	cmp	r3, #0
    222e:	d005      	beq.n	223c <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    2230:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2232:	ab06      	add	r3, sp, #24
    2234:	4619      	mov	r1, r3
    2236:	9805      	ldr	r0, [sp, #20]
    2238:	f7ff fc7e 	bl	1b38 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    223c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    223e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2240:	4413      	add	r3, r2
    2242:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    2244:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    2246:	4618      	mov	r0, r3
    2248:	b023      	add	sp, #140	; 0x8c
    224a:	f85d fb04 	ldr.w	pc, [sp], #4
    224e:	bf00      	nop
    2250:	00015f58 	.word	0x00015f58

00002254 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    2254:	b40e      	push	{r1, r2, r3}
    2256:	b500      	push	{lr}
    2258:	b084      	sub	sp, #16
    225a:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    225c:	ab06      	add	r3, sp, #24
    225e:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    2260:	ab02      	add	r3, sp, #8
    2262:	461a      	mov	r2, r3
    2264:	9905      	ldr	r1, [sp, #20]
    2266:	9801      	ldr	r0, [sp, #4]
    2268:	f7ff fe24 	bl	1eb4 <SEGGER_RTT_vprintf>
    226c:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    226e:	9b03      	ldr	r3, [sp, #12]
}
    2270:	4618      	mov	r0, r3
    2272:	b004      	add	sp, #16
    2274:	f85d eb04 	ldr.w	lr, [sp], #4
    2278:	b003      	add	sp, #12
    227a:	4770      	bx	lr

0000227c <memcpy>:
    227c:	440a      	add	r2, r1
    227e:	4291      	cmp	r1, r2
    2280:	f100 33ff 	add.w	r3, r0, #4294967295
    2284:	d100      	bne.n	2288 <memcpy+0xc>
    2286:	4770      	bx	lr
    2288:	b510      	push	{r4, lr}
    228a:	f811 4b01 	ldrb.w	r4, [r1], #1
    228e:	f803 4f01 	strb.w	r4, [r3, #1]!
    2292:	4291      	cmp	r1, r2
    2294:	d1f9      	bne.n	228a <memcpy+0xe>
    2296:	bd10      	pop	{r4, pc}

00002298 <memset>:
    2298:	4402      	add	r2, r0
    229a:	4603      	mov	r3, r0
    229c:	4293      	cmp	r3, r2
    229e:	d100      	bne.n	22a2 <memset+0xa>
    22a0:	4770      	bx	lr
    22a2:	f803 1b01 	strb.w	r1, [r3], #1
    22a6:	e7f9      	b.n	229c <memset+0x4>

000022a8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    22a8:	b086      	sub	sp, #24
    22aa:	9003      	str	r0, [sp, #12]
    22ac:	9102      	str	r1, [sp, #8]
    22ae:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    22b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    22b4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    22b8:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    22ba:	9b01      	ldr	r3, [sp, #4]
    22bc:	2b00      	cmp	r3, #0
    22be:	d007      	beq.n	22d0 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    22c0:	9b03      	ldr	r3, [sp, #12]
    22c2:	3310      	adds	r3, #16
    22c4:	009b      	lsls	r3, r3, #2
    22c6:	9a05      	ldr	r2, [sp, #20]
    22c8:	4413      	add	r3, r2
    22ca:	681a      	ldr	r2, [r3, #0]
    22cc:	9b01      	ldr	r3, [sp, #4]
    22ce:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    22d0:	9b03      	ldr	r3, [sp, #12]
    22d2:	3310      	adds	r3, #16
    22d4:	009b      	lsls	r3, r3, #2
    22d6:	9a05      	ldr	r2, [sp, #20]
    22d8:	4413      	add	r3, r2
    22da:	9a02      	ldr	r2, [sp, #8]
    22dc:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    22de:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    22e2:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    22e6:	bf00      	nop
    22e8:	b006      	add	sp, #24
    22ea:	4770      	bx	lr

000022ec <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    22ec:	b082      	sub	sp, #8
    22ee:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    22f0:	9b01      	ldr	r3, [sp, #4]
    22f2:	f003 021f 	and.w	r2, r3, #31
    22f6:	4905      	ldr	r1, [pc, #20]	; (230c <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    22f8:	9b01      	ldr	r3, [sp, #4]
    22fa:	095b      	lsrs	r3, r3, #5
    22fc:	2001      	movs	r0, #1
    22fe:	fa00 f202 	lsl.w	r2, r0, r2
    2302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    2306:	bf00      	nop
    2308:	b002      	add	sp, #8
    230a:	4770      	bx	lr
    230c:	e000e100 	.word	0xe000e100

00002310 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2310:	b082      	sub	sp, #8
    2312:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2314:	9b01      	ldr	r3, [sp, #4]
    2316:	f003 021f 	and.w	r2, r3, #31
    231a:	4906      	ldr	r1, [pc, #24]	; (2334 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	095b      	lsrs	r3, r3, #5
    2320:	2001      	movs	r0, #1
    2322:	fa00 f202 	lsl.w	r2, r0, r2
    2326:	3320      	adds	r3, #32
    2328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    232c:	bf00      	nop
    232e:	b002      	add	sp, #8
    2330:	4770      	bx	lr
    2332:	bf00      	nop
    2334:	e000e100 	.word	0xe000e100

00002338 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2338:	b084      	sub	sp, #16
    233a:	9001      	str	r0, [sp, #4]
    233c:	460b      	mov	r3, r1
    233e:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2342:	2304      	movs	r3, #4
    2344:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    2348:	f89d 2003 	ldrb.w	r2, [sp, #3]
    234c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2350:	fa02 f103 	lsl.w	r1, r2, r3
    2354:	4a04      	ldr	r2, [pc, #16]	; (2368 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    2356:	9b01      	ldr	r3, [sp, #4]
    2358:	b2c9      	uxtb	r1, r1
    235a:	4413      	add	r3, r2
    235c:	460a      	mov	r2, r1
    235e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    2362:	bf00      	nop
    2364:	b004      	add	sp, #16
    2366:	4770      	bx	lr
    2368:	e000e100 	.word	0xe000e100

0000236c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    236c:	b084      	sub	sp, #16
    236e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2370:	2304      	movs	r3, #4
    2372:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    2376:	4a09      	ldr	r2, [pc, #36]	; (239c <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    2378:	9b01      	ldr	r3, [sp, #4]
    237a:	4413      	add	r3, r2
    237c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    2380:	b2db      	uxtb	r3, r3
    2382:	461a      	mov	r2, r3
    2384:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2388:	fa42 f303 	asr.w	r3, r2, r3
    238c:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    2390:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    2394:	4618      	mov	r0, r3
    2396:	b004      	add	sp, #16
    2398:	4770      	bx	lr
    239a:	bf00      	nop
    239c:	e000e100 	.word	0xe000e100

000023a0 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    23a0:	b082      	sub	sp, #8
    23a2:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    23a4:	9b01      	ldr	r3, [sp, #4]
    23a6:	f003 021f 	and.w	r2, r3, #31
    23aa:	4906      	ldr	r1, [pc, #24]	; (23c4 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    23ac:	9b01      	ldr	r3, [sp, #4]
    23ae:	095b      	lsrs	r3, r3, #5
    23b0:	2001      	movs	r0, #1
    23b2:	fa00 f202 	lsl.w	r2, r0, r2
    23b6:	3360      	adds	r3, #96	; 0x60
    23b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    23bc:	bf00      	nop
    23be:	b002      	add	sp, #8
    23c0:	4770      	bx	lr
    23c2:	bf00      	nop
    23c4:	e000e100 	.word	0xe000e100

000023c8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    23c8:	b500      	push	{lr}
    23ca:	b085      	sub	sp, #20
    23cc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    23ce:	2300      	movs	r3, #0
    23d0:	9303      	str	r3, [sp, #12]
    23d2:	e05d      	b.n	2490 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	6859      	ldr	r1, [r3, #4]
    23d8:	9a03      	ldr	r2, [sp, #12]
    23da:	4613      	mov	r3, r2
    23dc:	005b      	lsls	r3, r3, #1
    23de:	4413      	add	r3, r2
    23e0:	009b      	lsls	r3, r3, #2
    23e2:	440b      	add	r3, r1
    23e4:	681b      	ldr	r3, [r3, #0]
    23e6:	4618      	mov	r0, r3
    23e8:	f000 f899 	bl	251e <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23ec:	9b01      	ldr	r3, [sp, #4]
    23ee:	6859      	ldr	r1, [r3, #4]
    23f0:	9a03      	ldr	r2, [sp, #12]
    23f2:	4613      	mov	r3, r2
    23f4:	005b      	lsls	r3, r3, #1
    23f6:	4413      	add	r3, r2
    23f8:	009b      	lsls	r3, r3, #2
    23fa:	440b      	add	r3, r1
    23fc:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    23fe:	9b01      	ldr	r3, [sp, #4]
    2400:	6859      	ldr	r1, [r3, #4]
    2402:	9a03      	ldr	r2, [sp, #12]
    2404:	4613      	mov	r3, r2
    2406:	005b      	lsls	r3, r3, #1
    2408:	4413      	add	r3, r2
    240a:	009b      	lsls	r3, r3, #2
    240c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    240e:	795b      	ldrb	r3, [r3, #5]
    2410:	4619      	mov	r1, r3
    2412:	f000 f869 	bl	24e8 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2416:	9b01      	ldr	r3, [sp, #4]
    2418:	6859      	ldr	r1, [r3, #4]
    241a:	9a03      	ldr	r2, [sp, #12]
    241c:	4613      	mov	r3, r2
    241e:	005b      	lsls	r3, r3, #1
    2420:	4413      	add	r3, r2
    2422:	009b      	lsls	r3, r3, #2
    2424:	440b      	add	r3, r1
    2426:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    2428:	9b01      	ldr	r3, [sp, #4]
    242a:	6859      	ldr	r1, [r3, #4]
    242c:	9a03      	ldr	r2, [sp, #12]
    242e:	4613      	mov	r3, r2
    2430:	005b      	lsls	r3, r3, #1
    2432:	4413      	add	r3, r2
    2434:	009b      	lsls	r3, r3, #2
    2436:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2438:	689b      	ldr	r3, [r3, #8]
    243a:	2200      	movs	r2, #0
    243c:	4619      	mov	r1, r3
    243e:	f000 f831 	bl	24a4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2442:	9b01      	ldr	r3, [sp, #4]
    2444:	6859      	ldr	r1, [r3, #4]
    2446:	9a03      	ldr	r2, [sp, #12]
    2448:	4613      	mov	r3, r2
    244a:	005b      	lsls	r3, r3, #1
    244c:	4413      	add	r3, r2
    244e:	009b      	lsls	r3, r3, #2
    2450:	440b      	add	r3, r1
    2452:	791b      	ldrb	r3, [r3, #4]
    2454:	2b00      	cmp	r3, #0
    2456:	d00c      	beq.n	2472 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2458:	9b01      	ldr	r3, [sp, #4]
    245a:	6859      	ldr	r1, [r3, #4]
    245c:	9a03      	ldr	r2, [sp, #12]
    245e:	4613      	mov	r3, r2
    2460:	005b      	lsls	r3, r3, #1
    2462:	4413      	add	r3, r2
    2464:	009b      	lsls	r3, r3, #2
    2466:	440b      	add	r3, r1
    2468:	681b      	ldr	r3, [r3, #0]
    246a:	4618      	mov	r0, r3
    246c:	f000 f828 	bl	24c0 <IntCtrl_Ip_EnableIrq>
    2470:	e00b      	b.n	248a <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2472:	9b01      	ldr	r3, [sp, #4]
    2474:	6859      	ldr	r1, [r3, #4]
    2476:	9a03      	ldr	r2, [sp, #12]
    2478:	4613      	mov	r3, r2
    247a:	005b      	lsls	r3, r3, #1
    247c:	4413      	add	r3, r2
    247e:	009b      	lsls	r3, r3, #2
    2480:	440b      	add	r3, r1
    2482:	681b      	ldr	r3, [r3, #0]
    2484:	4618      	mov	r0, r3
    2486:	f000 f825 	bl	24d4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    248a:	9b03      	ldr	r3, [sp, #12]
    248c:	3301      	adds	r3, #1
    248e:	9303      	str	r3, [sp, #12]
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	681b      	ldr	r3, [r3, #0]
    2494:	9a03      	ldr	r2, [sp, #12]
    2496:	429a      	cmp	r2, r3
    2498:	d39c      	bcc.n	23d4 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    249a:	2300      	movs	r3, #0
}
    249c:	4618      	mov	r0, r3
    249e:	b005      	add	sp, #20
    24a0:	f85d fb04 	ldr.w	pc, [sp], #4

000024a4 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    24a4:	b500      	push	{lr}
    24a6:	b085      	sub	sp, #20
    24a8:	9003      	str	r0, [sp, #12]
    24aa:	9102      	str	r1, [sp, #8]
    24ac:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    24ae:	9a01      	ldr	r2, [sp, #4]
    24b0:	9902      	ldr	r1, [sp, #8]
    24b2:	9803      	ldr	r0, [sp, #12]
    24b4:	f7ff fef8 	bl	22a8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    24b8:	bf00      	nop
    24ba:	b005      	add	sp, #20
    24bc:	f85d fb04 	ldr.w	pc, [sp], #4

000024c0 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    24c0:	b500      	push	{lr}
    24c2:	b083      	sub	sp, #12
    24c4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    24c6:	9801      	ldr	r0, [sp, #4]
    24c8:	f7ff ff10 	bl	22ec <IntCtrl_Ip_EnableIrqPrivileged>
}
    24cc:	bf00      	nop
    24ce:	b003      	add	sp, #12
    24d0:	f85d fb04 	ldr.w	pc, [sp], #4

000024d4 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    24d4:	b500      	push	{lr}
    24d6:	b083      	sub	sp, #12
    24d8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    24da:	9801      	ldr	r0, [sp, #4]
    24dc:	f7ff ff18 	bl	2310 <IntCtrl_Ip_DisableIrqPrivileged>
}
    24e0:	bf00      	nop
    24e2:	b003      	add	sp, #12
    24e4:	f85d fb04 	ldr.w	pc, [sp], #4

000024e8 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    24e8:	b500      	push	{lr}
    24ea:	b083      	sub	sp, #12
    24ec:	9001      	str	r0, [sp, #4]
    24ee:	460b      	mov	r3, r1
    24f0:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    24f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24f8:	4619      	mov	r1, r3
    24fa:	9801      	ldr	r0, [sp, #4]
    24fc:	f7ff ff1c 	bl	2338 <IntCtrl_Ip_SetPriorityPrivileged>
}
    2500:	bf00      	nop
    2502:	b003      	add	sp, #12
    2504:	f85d fb04 	ldr.w	pc, [sp], #4

00002508 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    2508:	b500      	push	{lr}
    250a:	b083      	sub	sp, #12
    250c:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    250e:	9801      	ldr	r0, [sp, #4]
    2510:	f7ff ff2c 	bl	236c <IntCtrl_Ip_GetPriorityPrivileged>
    2514:	4603      	mov	r3, r0
}
    2516:	4618      	mov	r0, r3
    2518:	b003      	add	sp, #12
    251a:	f85d fb04 	ldr.w	pc, [sp], #4

0000251e <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    251e:	b500      	push	{lr}
    2520:	b083      	sub	sp, #12
    2522:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    2524:	9801      	ldr	r0, [sp, #4]
    2526:	f7ff ff3b 	bl	23a0 <IntCtrl_Ip_ClearPendingPrivileged>
}
    252a:	bf00      	nop
    252c:	b003      	add	sp, #12
    252e:	f85d fb04 	ldr.w	pc, [sp], #4
    2532:	bf00      	nop

00002534 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2534:	b500      	push	{lr}
    2536:	b083      	sub	sp, #12
    2538:	9001      	str	r0, [sp, #4]
    253a:	460b      	mov	r3, r1
    253c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    2540:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2544:	2b00      	cmp	r3, #0
    2546:	d003      	beq.n	2550 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    2548:	9801      	ldr	r0, [sp, #4]
    254a:	f7ff ffb9 	bl	24c0 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    254e:	e002      	b.n	2556 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    2550:	9801      	ldr	r0, [sp, #4]
    2552:	f7ff ffbf 	bl	24d4 <IntCtrl_Ip_DisableIrq>
}
    2556:	bf00      	nop
    2558:	b003      	add	sp, #12
    255a:	f85d fb04 	ldr.w	pc, [sp], #4

0000255e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    255e:	b500      	push	{lr}
    2560:	b083      	sub	sp, #12
    2562:	9001      	str	r0, [sp, #4]
    2564:	460b      	mov	r3, r1
    2566:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    256a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    256e:	4619      	mov	r1, r3
    2570:	9801      	ldr	r0, [sp, #4]
    2572:	f7ff ffb9 	bl	24e8 <IntCtrl_Ip_SetPriority>
}
    2576:	bf00      	nop
    2578:	b003      	add	sp, #12
    257a:	f85d fb04 	ldr.w	pc, [sp], #4

0000257e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    257e:	b500      	push	{lr}
    2580:	b083      	sub	sp, #12
    2582:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    2584:	9801      	ldr	r0, [sp, #4]
    2586:	f7ff ffbf 	bl	2508 <IntCtrl_Ip_GetPriority>
    258a:	4603      	mov	r3, r0
}
    258c:	4618      	mov	r0, r3
    258e:	b003      	add	sp, #12
    2590:	f85d fb04 	ldr.w	pc, [sp], #4

00002594 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2594:	b500      	push	{lr}
    2596:	b085      	sub	sp, #20
    2598:	9003      	str	r0, [sp, #12]
    259a:	9102      	str	r1, [sp, #8]
    259c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    259e:	9a01      	ldr	r2, [sp, #4]
    25a0:	9902      	ldr	r1, [sp, #8]
    25a2:	9803      	ldr	r0, [sp, #12]
    25a4:	f7ff ff7e 	bl	24a4 <IntCtrl_Ip_InstallHandler>
}
    25a8:	bf00      	nop
    25aa:	b005      	add	sp, #20
    25ac:	f85d fb04 	ldr.w	pc, [sp], #4

000025b0 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    25b0:	b500      	push	{lr}
    25b2:	b085      	sub	sp, #20
    25b4:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    25b6:	2300      	movs	r3, #0
    25b8:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    25bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    25c0:	4a05      	ldr	r2, [pc, #20]	; (25d8 <Platform_Init+0x28>)
    25c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    25c6:	681b      	ldr	r3, [r3, #0]
    25c8:	4618      	mov	r0, r3
    25ca:	f000 f8c7 	bl	275c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    25ce:	bf00      	nop
    25d0:	b005      	add	sp, #20
    25d2:	f85d fb04 	ldr.w	pc, [sp], #4
    25d6:	bf00      	nop
    25d8:	00016eac 	.word	0x00016eac

000025dc <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    25dc:	b500      	push	{lr}
    25de:	b085      	sub	sp, #20
    25e0:	9001      	str	r0, [sp, #4]
    25e2:	460b      	mov	r3, r1
    25e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    25e8:	2300      	movs	r3, #0
    25ea:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    25ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25f2:	4619      	mov	r1, r3
    25f4:	9801      	ldr	r0, [sp, #4]
    25f6:	f7ff ff9d 	bl	2534 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    25fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    25fe:	4618      	mov	r0, r3
    2600:	b005      	add	sp, #20
    2602:	f85d fb04 	ldr.w	pc, [sp], #4

00002606 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2606:	b500      	push	{lr}
    2608:	b085      	sub	sp, #20
    260a:	9001      	str	r0, [sp, #4]
    260c:	460b      	mov	r3, r1
    260e:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2612:	2300      	movs	r3, #0
    2614:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    2618:	f89d 3003 	ldrb.w	r3, [sp, #3]
    261c:	4619      	mov	r1, r3
    261e:	9801      	ldr	r0, [sp, #4]
    2620:	f7ff ff9d 	bl	255e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2624:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2628:	4618      	mov	r0, r3
    262a:	b005      	add	sp, #20
    262c:	f85d fb04 	ldr.w	pc, [sp], #4

00002630 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    2630:	b500      	push	{lr}
    2632:	b085      	sub	sp, #20
    2634:	9001      	str	r0, [sp, #4]
    2636:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2638:	2300      	movs	r3, #0
    263a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    263e:	9801      	ldr	r0, [sp, #4]
    2640:	f7ff ff9d 	bl	257e <Platform_Ipw_GetIrqPriority>
    2644:	4603      	mov	r3, r0
    2646:	461a      	mov	r2, r3
    2648:	9b00      	ldr	r3, [sp, #0]
    264a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    264c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2650:	4618      	mov	r0, r3
    2652:	b005      	add	sp, #20
    2654:	f85d fb04 	ldr.w	pc, [sp], #4

00002658 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2658:	b500      	push	{lr}
    265a:	b087      	sub	sp, #28
    265c:	9003      	str	r0, [sp, #12]
    265e:	9102      	str	r1, [sp, #8]
    2660:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2662:	2300      	movs	r3, #0
    2664:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2668:	9a01      	ldr	r2, [sp, #4]
    266a:	9902      	ldr	r1, [sp, #8]
    266c:	9803      	ldr	r0, [sp, #12]
    266e:	f7ff ff91 	bl	2594 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    2672:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2676:	4618      	mov	r0, r3
    2678:	b007      	add	sp, #28
    267a:	f85d fb04 	ldr.w	pc, [sp], #4
    267e:	bf00      	nop

00002680 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2680:	b500      	push	{lr}
    2682:	b085      	sub	sp, #20
    2684:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2686:	2300      	movs	r3, #0
    2688:	9303      	str	r3, [sp, #12]
    268a:	e05d      	b.n	2748 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    268c:	9b01      	ldr	r3, [sp, #4]
    268e:	6859      	ldr	r1, [r3, #4]
    2690:	9a03      	ldr	r2, [sp, #12]
    2692:	4613      	mov	r3, r2
    2694:	005b      	lsls	r3, r3, #1
    2696:	4413      	add	r3, r2
    2698:	009b      	lsls	r3, r3, #2
    269a:	440b      	add	r3, r1
    269c:	681b      	ldr	r3, [r3, #0]
    269e:	4618      	mov	r0, r3
    26a0:	f7ff ff3d 	bl	251e <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26a4:	9b01      	ldr	r3, [sp, #4]
    26a6:	6859      	ldr	r1, [r3, #4]
    26a8:	9a03      	ldr	r2, [sp, #12]
    26aa:	4613      	mov	r3, r2
    26ac:	005b      	lsls	r3, r3, #1
    26ae:	4413      	add	r3, r2
    26b0:	009b      	lsls	r3, r3, #2
    26b2:	440b      	add	r3, r1
    26b4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    26b6:	9b01      	ldr	r3, [sp, #4]
    26b8:	6859      	ldr	r1, [r3, #4]
    26ba:	9a03      	ldr	r2, [sp, #12]
    26bc:	4613      	mov	r3, r2
    26be:	005b      	lsls	r3, r3, #1
    26c0:	4413      	add	r3, r2
    26c2:	009b      	lsls	r3, r3, #2
    26c4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26c6:	795b      	ldrb	r3, [r3, #5]
    26c8:	4619      	mov	r1, r3
    26ca:	f7ff ff0d 	bl	24e8 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26ce:	9b01      	ldr	r3, [sp, #4]
    26d0:	6859      	ldr	r1, [r3, #4]
    26d2:	9a03      	ldr	r2, [sp, #12]
    26d4:	4613      	mov	r3, r2
    26d6:	005b      	lsls	r3, r3, #1
    26d8:	4413      	add	r3, r2
    26da:	009b      	lsls	r3, r3, #2
    26dc:	440b      	add	r3, r1
    26de:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    26e0:	9b01      	ldr	r3, [sp, #4]
    26e2:	6859      	ldr	r1, [r3, #4]
    26e4:	9a03      	ldr	r2, [sp, #12]
    26e6:	4613      	mov	r3, r2
    26e8:	005b      	lsls	r3, r3, #1
    26ea:	4413      	add	r3, r2
    26ec:	009b      	lsls	r3, r3, #2
    26ee:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26f0:	689b      	ldr	r3, [r3, #8]
    26f2:	2200      	movs	r2, #0
    26f4:	4619      	mov	r1, r3
    26f6:	f7ff fed5 	bl	24a4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    26fa:	9b01      	ldr	r3, [sp, #4]
    26fc:	6859      	ldr	r1, [r3, #4]
    26fe:	9a03      	ldr	r2, [sp, #12]
    2700:	4613      	mov	r3, r2
    2702:	005b      	lsls	r3, r3, #1
    2704:	4413      	add	r3, r2
    2706:	009b      	lsls	r3, r3, #2
    2708:	440b      	add	r3, r1
    270a:	791b      	ldrb	r3, [r3, #4]
    270c:	2b00      	cmp	r3, #0
    270e:	d00c      	beq.n	272a <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	6859      	ldr	r1, [r3, #4]
    2714:	9a03      	ldr	r2, [sp, #12]
    2716:	4613      	mov	r3, r2
    2718:	005b      	lsls	r3, r3, #1
    271a:	4413      	add	r3, r2
    271c:	009b      	lsls	r3, r3, #2
    271e:	440b      	add	r3, r1
    2720:	681b      	ldr	r3, [r3, #0]
    2722:	4618      	mov	r0, r3
    2724:	f7ff fecc 	bl	24c0 <IntCtrl_Ip_EnableIrq>
    2728:	e00b      	b.n	2742 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	6859      	ldr	r1, [r3, #4]
    272e:	9a03      	ldr	r2, [sp, #12]
    2730:	4613      	mov	r3, r2
    2732:	005b      	lsls	r3, r3, #1
    2734:	4413      	add	r3, r2
    2736:	009b      	lsls	r3, r3, #2
    2738:	440b      	add	r3, r1
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	4618      	mov	r0, r3
    273e:	f7ff fec9 	bl	24d4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	3301      	adds	r3, #1
    2746:	9303      	str	r3, [sp, #12]
    2748:	9b01      	ldr	r3, [sp, #4]
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	9a03      	ldr	r2, [sp, #12]
    274e:	429a      	cmp	r2, r3
    2750:	d39c      	bcc.n	268c <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2752:	2300      	movs	r3, #0
}
    2754:	4618      	mov	r0, r3
    2756:	b005      	add	sp, #20
    2758:	f85d fb04 	ldr.w	pc, [sp], #4

0000275c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    275c:	b500      	push	{lr}
    275e:	b085      	sub	sp, #20
    2760:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2762:	2300      	movs	r3, #0
    2764:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2768:	9b01      	ldr	r3, [sp, #4]
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	2b00      	cmp	r3, #0
    276e:	d007      	beq.n	2780 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2770:	9b01      	ldr	r3, [sp, #4]
    2772:	681b      	ldr	r3, [r3, #0]
    2774:	4618      	mov	r0, r3
    2776:	f7ff ff83 	bl	2680 <Platform_Ipw_InitIntCtrl>
    277a:	4603      	mov	r3, r0
    277c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2780:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2784:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    2786:	bf00      	nop
    2788:	b005      	add	sp, #20
    278a:	f85d fb04 	ldr.w	pc, [sp], #4

0000278e <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    278e:	2300      	movs	r3, #0
}
    2790:	4618      	mov	r0, r3
    2792:	4770      	bx	lr

00002794 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    2794:	b082      	sub	sp, #8
    2796:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2798:	2301      	movs	r3, #1
}
    279a:	4618      	mov	r0, r3
    279c:	b002      	add	sp, #8
    279e:	4770      	bx	lr

000027a0 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    27a0:	b082      	sub	sp, #8
    27a2:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    27a4:	bf00      	nop
    27a6:	b002      	add	sp, #8
    27a8:	4770      	bx	lr

000027aa <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    27aa:	b082      	sub	sp, #8
    27ac:	9001      	str	r0, [sp, #4]
    return Micros;
    27ae:	9b01      	ldr	r3, [sp, #4]
}
    27b0:	4618      	mov	r0, r3
    27b2:	b002      	add	sp, #8
    27b4:	4770      	bx	lr

000027b6 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    27b6:	b500      	push	{lr}
    27b8:	b083      	sub	sp, #12
    27ba:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    27bc:	f000 f86c 	bl	2898 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    27c0:	bf00      	nop
    27c2:	b003      	add	sp, #12
    27c4:	f85d fb04 	ldr.w	pc, [sp], #4

000027c8 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    27c8:	b500      	push	{lr}
    27ca:	b085      	sub	sp, #20
    27cc:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    27ce:	2300      	movs	r3, #0
    27d0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    27d2:	9b01      	ldr	r3, [sp, #4]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d003      	beq.n	27e0 <OsIf_GetCounter+0x18>
    27d8:	9b01      	ldr	r3, [sp, #4]
    27da:	2b01      	cmp	r3, #1
    27dc:	d004      	beq.n	27e8 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    27de:	e007      	b.n	27f0 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    27e0:	f7ff ffd5 	bl	278e <OsIf_Timer_Dummy_GetCounter>
    27e4:	9003      	str	r0, [sp, #12]
            break;
    27e6:	e003      	b.n	27f0 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    27e8:	f000 f872 	bl	28d0 <OsIf_Timer_System_GetCounter>
    27ec:	9003      	str	r0, [sp, #12]
            break;
    27ee:	bf00      	nop
    }

    return Value;
    27f0:	9b03      	ldr	r3, [sp, #12]
}
    27f2:	4618      	mov	r0, r3
    27f4:	b005      	add	sp, #20
    27f6:	f85d fb04 	ldr.w	pc, [sp], #4

000027fa <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    27fa:	b500      	push	{lr}
    27fc:	b085      	sub	sp, #20
    27fe:	9001      	str	r0, [sp, #4]
    2800:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2802:	2300      	movs	r3, #0
    2804:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2806:	9b00      	ldr	r3, [sp, #0]
    2808:	2b00      	cmp	r3, #0
    280a:	d003      	beq.n	2814 <OsIf_GetElapsed+0x1a>
    280c:	9b00      	ldr	r3, [sp, #0]
    280e:	2b01      	cmp	r3, #1
    2810:	d005      	beq.n	281e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2812:	e009      	b.n	2828 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2814:	9801      	ldr	r0, [sp, #4]
    2816:	f7ff ffbd 	bl	2794 <OsIf_Timer_Dummy_GetElapsed>
    281a:	9003      	str	r0, [sp, #12]
            break;
    281c:	e004      	b.n	2828 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    281e:	9801      	ldr	r0, [sp, #4]
    2820:	f000 f864 	bl	28ec <OsIf_Timer_System_GetElapsed>
    2824:	9003      	str	r0, [sp, #12]
            break;
    2826:	bf00      	nop
    }

    return Value;
    2828:	9b03      	ldr	r3, [sp, #12]
}
    282a:	4618      	mov	r0, r3
    282c:	b005      	add	sp, #20
    282e:	f85d fb04 	ldr.w	pc, [sp], #4

00002832 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2832:	b500      	push	{lr}
    2834:	b083      	sub	sp, #12
    2836:	9001      	str	r0, [sp, #4]
    2838:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    283a:	9b00      	ldr	r3, [sp, #0]
    283c:	2b00      	cmp	r3, #0
    283e:	d003      	beq.n	2848 <OsIf_SetTimerFrequency+0x16>
    2840:	9b00      	ldr	r3, [sp, #0]
    2842:	2b01      	cmp	r3, #1
    2844:	d004      	beq.n	2850 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2846:	e007      	b.n	2858 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2848:	9801      	ldr	r0, [sp, #4]
    284a:	f7ff ffa9 	bl	27a0 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    284e:	e003      	b.n	2858 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2850:	9801      	ldr	r0, [sp, #4]
    2852:	f000 f85b 	bl	290c <OsIf_Timer_System_SetTimerFrequency>
            break;
    2856:	bf00      	nop
    }
}
    2858:	bf00      	nop
    285a:	b003      	add	sp, #12
    285c:	f85d fb04 	ldr.w	pc, [sp], #4

00002860 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2860:	b500      	push	{lr}
    2862:	b085      	sub	sp, #20
    2864:	9001      	str	r0, [sp, #4]
    2866:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2868:	2300      	movs	r3, #0
    286a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    286c:	9b00      	ldr	r3, [sp, #0]
    286e:	2b00      	cmp	r3, #0
    2870:	d003      	beq.n	287a <OsIf_MicrosToTicks+0x1a>
    2872:	9b00      	ldr	r3, [sp, #0]
    2874:	2b01      	cmp	r3, #1
    2876:	d005      	beq.n	2884 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2878:	e009      	b.n	288e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    287a:	9801      	ldr	r0, [sp, #4]
    287c:	f7ff ff95 	bl	27aa <OsIf_Timer_Dummy_MicrosToTicks>
    2880:	9003      	str	r0, [sp, #12]
            break;
    2882:	e004      	b.n	288e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2884:	9801      	ldr	r0, [sp, #4]
    2886:	f000 f84f 	bl	2928 <OsIf_Timer_System_MicrosToTicks>
    288a:	9003      	str	r0, [sp, #12]
            break;
    288c:	bf00      	nop
    }

    return Value;
    288e:	9b03      	ldr	r3, [sp, #12]
}
    2890:	4618      	mov	r0, r3
    2892:	b005      	add	sp, #20
    2894:	f85d fb04 	ldr.w	pc, [sp], #4

00002898 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2898:	b500      	push	{lr}
    289a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    289c:	2300      	movs	r3, #0
    289e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    28a0:	4a09      	ldr	r2, [pc, #36]	; (28c8 <OsIf_Timer_System_Init+0x30>)
    28a2:	9b01      	ldr	r3, [sp, #4]
    28a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28a8:	685a      	ldr	r2, [r3, #4]
    28aa:	4908      	ldr	r1, [pc, #32]	; (28cc <OsIf_Timer_System_Init+0x34>)
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    28b2:	4a06      	ldr	r2, [pc, #24]	; (28cc <OsIf_Timer_System_Init+0x34>)
    28b4:	9b01      	ldr	r3, [sp, #4]
    28b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28ba:	4618      	mov	r0, r3
    28bc:	f000 f868 	bl	2990 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    28c0:	bf00      	nop
    28c2:	b003      	add	sp, #12
    28c4:	f85d fb04 	ldr.w	pc, [sp], #4
    28c8:	00016e64 	.word	0x00016e64
    28cc:	1fff8b60 	.word	0x1fff8b60

000028d0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    28d0:	b500      	push	{lr}
    28d2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    28d4:	2300      	movs	r3, #0
    28d6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    28d8:	2300      	movs	r3, #0
    28da:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    28dc:	f000 f86c 	bl	29b8 <OsIf_Timer_System_Internal_GetCounter>
    28e0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    28e2:	9b01      	ldr	r3, [sp, #4]
}
    28e4:	4618      	mov	r0, r3
    28e6:	b003      	add	sp, #12
    28e8:	f85d fb04 	ldr.w	pc, [sp], #4

000028ec <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    28ec:	b500      	push	{lr}
    28ee:	b085      	sub	sp, #20
    28f0:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    28f2:	2300      	movs	r3, #0
    28f4:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    28f6:	2300      	movs	r3, #0
    28f8:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    28fa:	9801      	ldr	r0, [sp, #4]
    28fc:	f000 f864 	bl	29c8 <OsIf_Timer_System_Internal_GetElapsed>
    2900:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2902:	9b03      	ldr	r3, [sp, #12]
}
    2904:	4618      	mov	r0, r3
    2906:	b005      	add	sp, #20
    2908:	f85d fb04 	ldr.w	pc, [sp], #4

0000290c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    290c:	b084      	sub	sp, #16
    290e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2910:	2300      	movs	r3, #0
    2912:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2914:	4903      	ldr	r1, [pc, #12]	; (2924 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2916:	9b03      	ldr	r3, [sp, #12]
    2918:	9a01      	ldr	r2, [sp, #4]
    291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    291e:	bf00      	nop
    2920:	b004      	add	sp, #16
    2922:	4770      	bx	lr
    2924:	1fff8b60 	.word	0x1fff8b60

00002928 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	b087      	sub	sp, #28
    292c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    292e:	2100      	movs	r1, #0
    2930:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2932:	2100      	movs	r1, #0
    2934:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2936:	9901      	ldr	r1, [sp, #4]
    2938:	2000      	movs	r0, #0
    293a:	460e      	mov	r6, r1
    293c:	4607      	mov	r7, r0
    293e:	4812      	ldr	r0, [pc, #72]	; (2988 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2940:	9904      	ldr	r1, [sp, #16]
    2942:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2946:	2000      	movs	r0, #0
    2948:	460c      	mov	r4, r1
    294a:	4605      	mov	r5, r0
    294c:	fb04 f007 	mul.w	r0, r4, r7
    2950:	fb06 f105 	mul.w	r1, r6, r5
    2954:	4401      	add	r1, r0
    2956:	fba6 2304 	umull	r2, r3, r6, r4
    295a:	4419      	add	r1, r3
    295c:	460b      	mov	r3, r1
    295e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2962:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    296a:	4a08      	ldr	r2, [pc, #32]	; (298c <OsIf_Timer_System_MicrosToTicks+0x64>)
    296c:	f04f 0300 	mov.w	r3, #0
    2970:	f7fd fe18 	bl	5a4 <__aeabi_uldivmod>
    2974:	4602      	mov	r2, r0
    2976:	460b      	mov	r3, r1
    2978:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    297c:	9b02      	ldr	r3, [sp, #8]
    297e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2980:	9b05      	ldr	r3, [sp, #20]
}
    2982:	4618      	mov	r0, r3
    2984:	b007      	add	sp, #28
    2986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2988:	1fff8b60 	.word	0x1fff8b60
    298c:	000f4240 	.word	0x000f4240

00002990 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2990:	b082      	sub	sp, #8
    2992:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2994:	4b07      	ldr	r3, [pc, #28]	; (29b4 <OsIf_Timer_System_Internal_Init+0x24>)
    2996:	2200      	movs	r2, #0
    2998:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    299a:	4b06      	ldr	r3, [pc, #24]	; (29b4 <OsIf_Timer_System_Internal_Init+0x24>)
    299c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    29a0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    29a2:	4b04      	ldr	r3, [pc, #16]	; (29b4 <OsIf_Timer_System_Internal_Init+0x24>)
    29a4:	2200      	movs	r2, #0
    29a6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    29a8:	4b02      	ldr	r3, [pc, #8]	; (29b4 <OsIf_Timer_System_Internal_Init+0x24>)
    29aa:	2205      	movs	r2, #5
    29ac:	601a      	str	r2, [r3, #0]
}
    29ae:	bf00      	nop
    29b0:	b002      	add	sp, #8
    29b2:	4770      	bx	lr
    29b4:	e000e010 	.word	0xe000e010

000029b8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    29b8:	4b02      	ldr	r3, [pc, #8]	; (29c4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    29ba:	689b      	ldr	r3, [r3, #8]
    29bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    29c0:	4618      	mov	r0, r3
    29c2:	4770      	bx	lr
    29c4:	e000e010 	.word	0xe000e010

000029c8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    29c8:	b084      	sub	sp, #16
    29ca:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    29cc:	4b10      	ldr	r3, [pc, #64]	; (2a10 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    29ce:	689b      	ldr	r3, [r3, #8]
    29d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    29d4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    29d6:	2300      	movs	r3, #0
    29d8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    29da:	9b01      	ldr	r3, [sp, #4]
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	9a02      	ldr	r2, [sp, #8]
    29e0:	429a      	cmp	r2, r3
    29e2:	d909      	bls.n	29f8 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    29e4:	9b01      	ldr	r3, [sp, #4]
    29e6:	681a      	ldr	r2, [r3, #0]
    29e8:	9b02      	ldr	r3, [sp, #8]
    29ea:	1ad3      	subs	r3, r2, r3
    29ec:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    29f0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    29f4:	9303      	str	r3, [sp, #12]
    29f6:	e004      	b.n	2a02 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    29f8:	9b01      	ldr	r3, [sp, #4]
    29fa:	681a      	ldr	r2, [r3, #0]
    29fc:	9b02      	ldr	r3, [sp, #8]
    29fe:	1ad3      	subs	r3, r2, r3
    2a00:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2a02:	9b01      	ldr	r3, [sp, #4]
    2a04:	9a02      	ldr	r2, [sp, #8]
    2a06:	601a      	str	r2, [r3, #0]

    return dif;
    2a08:	9b03      	ldr	r3, [sp, #12]
}
    2a0a:	4618      	mov	r0, r3
    2a0c:	b004      	add	sp, #16
    2a0e:	4770      	bx	lr
    2a10:	e000e010 	.word	0xe000e010

00002a14 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2a14:	b082      	sub	sp, #8
    2a16:	9001      	str	r0, [sp, #4]
    2a18:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2a1a:	bf00      	nop
    2a1c:	b002      	add	sp, #8
    2a1e:	4770      	bx	lr

00002a20 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2a20:	b500      	push	{lr}
    2a22:	b085      	sub	sp, #20
    2a24:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2a26:	4b24      	ldr	r3, [pc, #144]	; (2ab8 <Clock_Ip_UpdateDriverContext+0x98>)
    2a28:	2201      	movs	r2, #1
    2a2a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2a2c:	4b23      	ldr	r3, [pc, #140]	; (2abc <Clock_Ip_UpdateDriverContext+0x9c>)
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	2102      	movs	r1, #2
    2a32:	4618      	mov	r0, r3
    2a34:	f003 fc32 	bl	629c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a38:	2300      	movs	r3, #0
    2a3a:	f88d 300f 	strb.w	r3, [sp, #15]
    2a3e:	e015      	b.n	2a6c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2a40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a44:	9a01      	ldr	r2, [sp, #4]
    2a46:	334a      	adds	r3, #74	; 0x4a
    2a48:	00db      	lsls	r3, r3, #3
    2a4a:	4413      	add	r3, r2
    2a4c:	6858      	ldr	r0, [r3, #4]
    2a4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a52:	9a01      	ldr	r2, [sp, #4]
    2a54:	334a      	adds	r3, #74	; 0x4a
    2a56:	00db      	lsls	r3, r3, #3
    2a58:	4413      	add	r3, r2
    2a5a:	689b      	ldr	r3, [r3, #8]
    2a5c:	4619      	mov	r1, r3
    2a5e:	f001 fadc 	bl	401a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a66:	3301      	adds	r3, #1
    2a68:	f88d 300f 	strb.w	r3, [sp, #15]
    2a6c:	9b01      	ldr	r3, [sp, #4]
    2a6e:	7bdb      	ldrb	r3, [r3, #15]
    2a70:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a74:	429a      	cmp	r2, r3
    2a76:	d3e3      	bcc.n	2a40 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2a78:	f000 f824 	bl	2ac4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2a7c:	2301      	movs	r3, #1
    2a7e:	f88d 300f 	strb.w	r3, [sp, #15]
    2a82:	e00e      	b.n	2aa2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2a84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	327e      	adds	r2, #126	; 0x7e
    2a8c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2a90:	490b      	ldr	r1, [pc, #44]	; (2ac0 <Clock_Ip_UpdateDriverContext+0xa0>)
    2a92:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a96:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2a98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a9c:	3301      	adds	r3, #1
    2a9e:	f88d 300f 	strb.w	r3, [sp, #15]
    2aa2:	9b01      	ldr	r3, [sp, #4]
    2aa4:	7cdb      	ldrb	r3, [r3, #19]
    2aa6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2aaa:	429a      	cmp	r2, r3
    2aac:	d3ea      	bcc.n	2a84 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2aae:	bf00      	nop
    2ab0:	bf00      	nop
    2ab2:	b005      	add	sp, #20
    2ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    2ab8:	1fff8b10 	.word	0x1fff8b10
    2abc:	1fff8b64 	.word	0x1fff8b64
    2ac0:	1fff8b70 	.word	0x1fff8b70

00002ac4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2ac4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2ac6:	4b23      	ldr	r3, [pc, #140]	; (2b54 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2ac8:	781b      	ldrb	r3, [r3, #0]
    2aca:	f083 0301 	eor.w	r3, r3, #1
    2ace:	b2db      	uxtb	r3, r3
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d03d      	beq.n	2b50 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2ad4:	4b1f      	ldr	r3, [pc, #124]	; (2b54 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2ad6:	2201      	movs	r2, #1
    2ad8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2ada:	4b1f      	ldr	r3, [pc, #124]	; (2b58 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2adc:	685b      	ldr	r3, [r3, #4]
    2ade:	2100      	movs	r1, #0
    2ae0:	2000      	movs	r0, #0
    2ae2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2ae4:	4b1c      	ldr	r3, [pc, #112]	; (2b58 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2ae6:	689b      	ldr	r3, [r3, #8]
    2ae8:	2057      	movs	r0, #87	; 0x57
    2aea:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2aec:	4b1b      	ldr	r3, [pc, #108]	; (2b5c <Clock_Ip_CallEmptyCallbacks+0x98>)
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	2000      	movs	r0, #0
    2af2:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2af4:	4b1a      	ldr	r3, [pc, #104]	; (2b60 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2af6:	681b      	ldr	r3, [r3, #0]
    2af8:	2000      	movs	r0, #0
    2afa:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2afc:	4b19      	ldr	r3, [pc, #100]	; (2b64 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2afe:	681b      	ldr	r3, [r3, #0]
    2b00:	2000      	movs	r0, #0
    2b02:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b04:	4b18      	ldr	r3, [pc, #96]	; (2b68 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2b06:	685b      	ldr	r3, [r3, #4]
    2b08:	2000      	movs	r0, #0
    2b0a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2b0c:	4b16      	ldr	r3, [pc, #88]	; (2b68 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2b0e:	689b      	ldr	r3, [r3, #8]
    2b10:	2057      	movs	r0, #87	; 0x57
    2b12:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b14:	4b15      	ldr	r3, [pc, #84]	; (2b6c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	2000      	movs	r0, #0
    2b1a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2b1c:	4b13      	ldr	r3, [pc, #76]	; (2b6c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2b1e:	685b      	ldr	r3, [r3, #4]
    2b20:	2100      	movs	r1, #0
    2b22:	2057      	movs	r0, #87	; 0x57
    2b24:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b26:	4b12      	ldr	r3, [pc, #72]	; (2b70 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2b28:	681b      	ldr	r3, [r3, #0]
    2b2a:	2000      	movs	r0, #0
    2b2c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b2e:	4b11      	ldr	r3, [pc, #68]	; (2b74 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2b30:	685b      	ldr	r3, [r3, #4]
    2b32:	2000      	movs	r0, #0
    2b34:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2b36:	4b0f      	ldr	r3, [pc, #60]	; (2b74 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2b38:	689b      	ldr	r3, [r3, #8]
    2b3a:	2057      	movs	r0, #87	; 0x57
    2b3c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b3e:	4b0e      	ldr	r3, [pc, #56]	; (2b78 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2b40:	685b      	ldr	r3, [r3, #4]
    2b42:	2000      	movs	r0, #0
    2b44:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2b46:	4b0d      	ldr	r3, [pc, #52]	; (2b7c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2b48:	681b      	ldr	r3, [r3, #0]
    2b4a:	2100      	movs	r1, #0
    2b4c:	2000      	movs	r0, #0
    2b4e:	4798      	blx	r3
    }
}
    2b50:	bf00      	nop
    2b52:	bd08      	pop	{r3, pc}
    2b54:	1fff8b68 	.word	0x1fff8b68
    2b58:	000165fc 	.word	0x000165fc
    2b5c:	00016510 	.word	0x00016510
    2b60:	0001654c 	.word	0x0001654c
    2b64:	00016554 	.word	0x00016554
    2b68:	0001657c 	.word	0x0001657c
    2b6c:	00016588 	.word	0x00016588
    2b70:	000165c0 	.word	0x000165c0
    2b74:	0001660c 	.word	0x0001660c
    2b78:	00016638 	.word	0x00016638
    2b7c:	00016634 	.word	0x00016634

00002b80 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2b80:	b500      	push	{lr}
    2b82:	b085      	sub	sp, #20
    2b84:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2b86:	9b01      	ldr	r3, [sp, #4]
    2b88:	7adb      	ldrb	r3, [r3, #11]
    2b8a:	9303      	str	r3, [sp, #12]
    2b8c:	e01f      	b.n	2bce <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2b8e:	9b03      	ldr	r3, [sp, #12]
    2b90:	1e5a      	subs	r2, r3, #1
    2b92:	9b01      	ldr	r3, [sp, #4]
    2b94:	320d      	adds	r2, #13
    2b96:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2b9a:	495a      	ldr	r1, [pc, #360]	; (2d04 <Clock_Ip_ResetClockConfiguration+0x184>)
    2b9c:	4613      	mov	r3, r2
    2b9e:	00db      	lsls	r3, r3, #3
    2ba0:	4413      	add	r3, r2
    2ba2:	440b      	add	r3, r1
    2ba4:	3301      	adds	r3, #1
    2ba6:	781b      	ldrb	r3, [r3, #0]
    2ba8:	461a      	mov	r2, r3
    2baa:	4b57      	ldr	r3, [pc, #348]	; (2d08 <Clock_Ip_ResetClockConfiguration+0x188>)
    2bac:	5c9b      	ldrb	r3, [r3, r2]
    2bae:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2bb0:	4a56      	ldr	r2, [pc, #344]	; (2d0c <Clock_Ip_ResetClockConfiguration+0x18c>)
    2bb2:	9b02      	ldr	r3, [sp, #8]
    2bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2bb8:	9a03      	ldr	r2, [sp, #12]
    2bba:	3a01      	subs	r2, #1
    2bbc:	320d      	adds	r2, #13
    2bbe:	00d2      	lsls	r2, r2, #3
    2bc0:	9901      	ldr	r1, [sp, #4]
    2bc2:	440a      	add	r2, r1
    2bc4:	4610      	mov	r0, r2
    2bc6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2bc8:	9b03      	ldr	r3, [sp, #12]
    2bca:	3b01      	subs	r3, #1
    2bcc:	9303      	str	r3, [sp, #12]
    2bce:	9b03      	ldr	r3, [sp, #12]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d1dc      	bne.n	2b8e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2bd4:	9b01      	ldr	r3, [sp, #4]
    2bd6:	7b9b      	ldrb	r3, [r3, #14]
    2bd8:	9303      	str	r3, [sp, #12]
    2bda:	e026      	b.n	2c2a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2bdc:	9b03      	ldr	r3, [sp, #12]
    2bde:	3b01      	subs	r3, #1
    2be0:	9a01      	ldr	r2, [sp, #4]
    2be2:	3324      	adds	r3, #36	; 0x24
    2be4:	011b      	lsls	r3, r3, #4
    2be6:	4413      	add	r3, r2
    2be8:	3304      	adds	r3, #4
    2bea:	681a      	ldr	r2, [r3, #0]
    2bec:	4945      	ldr	r1, [pc, #276]	; (2d04 <Clock_Ip_ResetClockConfiguration+0x184>)
    2bee:	4613      	mov	r3, r2
    2bf0:	00db      	lsls	r3, r3, #3
    2bf2:	4413      	add	r3, r2
    2bf4:	440b      	add	r3, r1
    2bf6:	3301      	adds	r3, #1
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	461a      	mov	r2, r3
    2bfc:	4b44      	ldr	r3, [pc, #272]	; (2d10 <Clock_Ip_ResetClockConfiguration+0x190>)
    2bfe:	5c9b      	ldrb	r3, [r3, r2]
    2c00:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2c02:	4944      	ldr	r1, [pc, #272]	; (2d14 <Clock_Ip_ResetClockConfiguration+0x194>)
    2c04:	9a02      	ldr	r2, [sp, #8]
    2c06:	4613      	mov	r3, r2
    2c08:	005b      	lsls	r3, r3, #1
    2c0a:	4413      	add	r3, r2
    2c0c:	009b      	lsls	r3, r3, #2
    2c0e:	440b      	add	r3, r1
    2c10:	681b      	ldr	r3, [r3, #0]
    2c12:	9a03      	ldr	r2, [sp, #12]
    2c14:	3a01      	subs	r2, #1
    2c16:	3224      	adds	r2, #36	; 0x24
    2c18:	0112      	lsls	r2, r2, #4
    2c1a:	9901      	ldr	r1, [sp, #4]
    2c1c:	440a      	add	r2, r1
    2c1e:	3204      	adds	r2, #4
    2c20:	4610      	mov	r0, r2
    2c22:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2c24:	9b03      	ldr	r3, [sp, #12]
    2c26:	3b01      	subs	r3, #1
    2c28:	9303      	str	r3, [sp, #12]
    2c2a:	9b03      	ldr	r3, [sp, #12]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d1d5      	bne.n	2bdc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	7a9b      	ldrb	r3, [r3, #10]
    2c34:	9303      	str	r3, [sp, #12]
    2c36:	e02a      	b.n	2c8e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c38:	9b03      	ldr	r3, [sp, #12]
    2c3a:	1e5a      	subs	r2, r3, #1
    2c3c:	9901      	ldr	r1, [sp, #4]
    2c3e:	4613      	mov	r3, r2
    2c40:	009b      	lsls	r3, r3, #2
    2c42:	4413      	add	r3, r2
    2c44:	00db      	lsls	r3, r3, #3
    2c46:	440b      	add	r3, r1
    2c48:	3340      	adds	r3, #64	; 0x40
    2c4a:	681a      	ldr	r2, [r3, #0]
    2c4c:	492d      	ldr	r1, [pc, #180]	; (2d04 <Clock_Ip_ResetClockConfiguration+0x184>)
    2c4e:	4613      	mov	r3, r2
    2c50:	00db      	lsls	r3, r3, #3
    2c52:	4413      	add	r3, r2
    2c54:	440b      	add	r3, r1
    2c56:	3301      	adds	r3, #1
    2c58:	781b      	ldrb	r3, [r3, #0]
    2c5a:	461a      	mov	r2, r3
    2c5c:	4b2e      	ldr	r3, [pc, #184]	; (2d18 <Clock_Ip_ResetClockConfiguration+0x198>)
    2c5e:	5c9b      	ldrb	r3, [r3, r2]
    2c60:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2c62:	492e      	ldr	r1, [pc, #184]	; (2d1c <Clock_Ip_ResetClockConfiguration+0x19c>)
    2c64:	9a02      	ldr	r2, [sp, #8]
    2c66:	4613      	mov	r3, r2
    2c68:	009b      	lsls	r3, r3, #2
    2c6a:	4413      	add	r3, r2
    2c6c:	009b      	lsls	r3, r3, #2
    2c6e:	440b      	add	r3, r1
    2c70:	6819      	ldr	r1, [r3, #0]
    2c72:	9b03      	ldr	r3, [sp, #12]
    2c74:	1e5a      	subs	r2, r3, #1
    2c76:	4613      	mov	r3, r2
    2c78:	009b      	lsls	r3, r3, #2
    2c7a:	4413      	add	r3, r2
    2c7c:	00db      	lsls	r3, r3, #3
    2c7e:	3340      	adds	r3, #64	; 0x40
    2c80:	9a01      	ldr	r2, [sp, #4]
    2c82:	4413      	add	r3, r2
    2c84:	4618      	mov	r0, r3
    2c86:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2c88:	9b03      	ldr	r3, [sp, #12]
    2c8a:	3b01      	subs	r3, #1
    2c8c:	9303      	str	r3, [sp, #12]
    2c8e:	9b03      	ldr	r3, [sp, #12]
    2c90:	2b00      	cmp	r3, #0
    2c92:	d1d1      	bne.n	2c38 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2c94:	9b01      	ldr	r3, [sp, #4]
    2c96:	7a5b      	ldrb	r3, [r3, #9]
    2c98:	9303      	str	r3, [sp, #12]
    2c9a:	e02b      	b.n	2cf4 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c9c:	9b03      	ldr	r3, [sp, #12]
    2c9e:	1e5a      	subs	r2, r3, #1
    2ca0:	9901      	ldr	r1, [sp, #4]
    2ca2:	4613      	mov	r3, r2
    2ca4:	009b      	lsls	r3, r3, #2
    2ca6:	4413      	add	r3, r2
    2ca8:	009b      	lsls	r3, r3, #2
    2caa:	440b      	add	r3, r1
    2cac:	332c      	adds	r3, #44	; 0x2c
    2cae:	681a      	ldr	r2, [r3, #0]
    2cb0:	4914      	ldr	r1, [pc, #80]	; (2d04 <Clock_Ip_ResetClockConfiguration+0x184>)
    2cb2:	4613      	mov	r3, r2
    2cb4:	00db      	lsls	r3, r3, #3
    2cb6:	4413      	add	r3, r2
    2cb8:	440b      	add	r3, r1
    2cba:	3301      	adds	r3, #1
    2cbc:	781b      	ldrb	r3, [r3, #0]
    2cbe:	461a      	mov	r2, r3
    2cc0:	4b17      	ldr	r3, [pc, #92]	; (2d20 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2cc2:	5c9b      	ldrb	r3, [r3, r2]
    2cc4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2cc6:	4917      	ldr	r1, [pc, #92]	; (2d24 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2cc8:	9a02      	ldr	r2, [sp, #8]
    2cca:	4613      	mov	r3, r2
    2ccc:	009b      	lsls	r3, r3, #2
    2cce:	4413      	add	r3, r2
    2cd0:	009b      	lsls	r3, r3, #2
    2cd2:	440b      	add	r3, r1
    2cd4:	6819      	ldr	r1, [r3, #0]
    2cd6:	9b03      	ldr	r3, [sp, #12]
    2cd8:	1e5a      	subs	r2, r3, #1
    2cda:	4613      	mov	r3, r2
    2cdc:	009b      	lsls	r3, r3, #2
    2cde:	4413      	add	r3, r2
    2ce0:	009b      	lsls	r3, r3, #2
    2ce2:	3328      	adds	r3, #40	; 0x28
    2ce4:	9a01      	ldr	r2, [sp, #4]
    2ce6:	4413      	add	r3, r2
    2ce8:	3304      	adds	r3, #4
    2cea:	4618      	mov	r0, r3
    2cec:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2cee:	9b03      	ldr	r3, [sp, #12]
    2cf0:	3b01      	subs	r3, #1
    2cf2:	9303      	str	r3, [sp, #12]
    2cf4:	9b03      	ldr	r3, [sp, #12]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d1d0      	bne.n	2c9c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2cfa:	bf00      	nop
    2cfc:	bf00      	nop
    2cfe:	b005      	add	sp, #20
    2d00:	f85d fb04 	ldr.w	pc, [sp], #4
    2d04:	00016000 	.word	0x00016000
    2d08:	00015fd0 	.word	0x00015fd0
    2d0c:	00016638 	.word	0x00016638
    2d10:	00015fb0 	.word	0x00015fb0
    2d14:	0001657c 	.word	0x0001657c
    2d18:	00015fc0 	.word	0x00015fc0
    2d1c:	0001660c 	.word	0x0001660c
    2d20:	00015f80 	.word	0x00015f80
    2d24:	00016554 	.word	0x00016554

00002d28 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2d28:	b500      	push	{lr}
    2d2a:	b085      	sub	sp, #20
    2d2c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2d2e:	2301      	movs	r3, #1
    2d30:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2d32:	9801      	ldr	r0, [sp, #4]
    2d34:	f000 f818 	bl	2d68 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2d38:	4b0a      	ldr	r3, [pc, #40]	; (2d64 <Clock_Ip_Init+0x3c>)
    2d3a:	781b      	ldrb	r3, [r3, #0]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d00a      	beq.n	2d56 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2d40:	f000 fb74 	bl	342c <Clock_Ip_GetPllStatus>
    2d44:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2d46:	9b02      	ldr	r3, [sp, #8]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d106      	bne.n	2d5a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2d4c:	f000 fbf2 	bl	3534 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2d50:	2300      	movs	r3, #0
    2d52:	9303      	str	r3, [sp, #12]
    2d54:	e001      	b.n	2d5a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2d56:	2300      	movs	r3, #0
    2d58:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2d5a:	9b03      	ldr	r3, [sp, #12]
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	b005      	add	sp, #20
    2d60:	f85d fb04 	ldr.w	pc, [sp], #4
    2d64:	1fff8b6c 	.word	0x1fff8b6c

00002d68 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2d68:	b510      	push	{r4, lr}
    2d6a:	b084      	sub	sp, #16
    2d6c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2d6e:	4a9f      	ldr	r2, [pc, #636]	; (2fec <Clock_Ip_InitClock+0x284>)
    2d70:	9b01      	ldr	r3, [sp, #4]
    2d72:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2d74:	2101      	movs	r1, #1
    2d76:	9801      	ldr	r0, [sp, #4]
    2d78:	f003 fa90 	bl	629c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2d7c:	4b9b      	ldr	r3, [pc, #620]	; (2fec <Clock_Ip_InitClock+0x284>)
    2d7e:	681b      	ldr	r3, [r3, #0]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d030      	beq.n	2de6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2d84:	2300      	movs	r3, #0
    2d86:	9303      	str	r3, [sp, #12]
    2d88:	e027      	b.n	2dda <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d8a:	9901      	ldr	r1, [sp, #4]
    2d8c:	9a03      	ldr	r2, [sp, #12]
    2d8e:	4613      	mov	r3, r2
    2d90:	009b      	lsls	r3, r3, #2
    2d92:	4413      	add	r3, r2
    2d94:	009b      	lsls	r3, r3, #2
    2d96:	440b      	add	r3, r1
    2d98:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d9c:	681a      	ldr	r2, [r3, #0]
    2d9e:	4994      	ldr	r1, [pc, #592]	; (2ff0 <Clock_Ip_InitClock+0x288>)
    2da0:	4613      	mov	r3, r2
    2da2:	00db      	lsls	r3, r3, #3
    2da4:	4413      	add	r3, r2
    2da6:	440b      	add	r3, r1
    2da8:	3301      	adds	r3, #1
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	461a      	mov	r2, r3
    2dae:	4b91      	ldr	r3, [pc, #580]	; (2ff4 <Clock_Ip_InitClock+0x28c>)
    2db0:	5c9b      	ldrb	r3, [r3, r2]
    2db2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2db4:	4a90      	ldr	r2, [pc, #576]	; (2ff8 <Clock_Ip_InitClock+0x290>)
    2db6:	9b02      	ldr	r3, [sp, #8]
    2db8:	011b      	lsls	r3, r3, #4
    2dba:	4413      	add	r3, r2
    2dbc:	6819      	ldr	r1, [r3, #0]
    2dbe:	9a03      	ldr	r2, [sp, #12]
    2dc0:	4613      	mov	r3, r2
    2dc2:	009b      	lsls	r3, r3, #2
    2dc4:	4413      	add	r3, r2
    2dc6:	009b      	lsls	r3, r3, #2
    2dc8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2dcc:	9a01      	ldr	r2, [sp, #4]
    2dce:	4413      	add	r3, r2
    2dd0:	4618      	mov	r0, r3
    2dd2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2dd4:	9b03      	ldr	r3, [sp, #12]
    2dd6:	3301      	adds	r3, #1
    2dd8:	9303      	str	r3, [sp, #12]
    2dda:	9b01      	ldr	r3, [sp, #4]
    2ddc:	7c9b      	ldrb	r3, [r3, #18]
    2dde:	461a      	mov	r2, r3
    2de0:	9b03      	ldr	r3, [sp, #12]
    2de2:	4293      	cmp	r3, r2
    2de4:	d3d1      	bcc.n	2d8a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2de6:	9801      	ldr	r0, [sp, #4]
    2de8:	f7ff feca 	bl	2b80 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2dec:	2300      	movs	r3, #0
    2dee:	9303      	str	r3, [sp, #12]
    2df0:	e029      	b.n	2e46 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2df2:	9901      	ldr	r1, [sp, #4]
    2df4:	9a03      	ldr	r2, [sp, #12]
    2df6:	4613      	mov	r3, r2
    2df8:	005b      	lsls	r3, r3, #1
    2dfa:	4413      	add	r3, r2
    2dfc:	009b      	lsls	r3, r3, #2
    2dfe:	440b      	add	r3, r1
    2e00:	3314      	adds	r3, #20
    2e02:	681a      	ldr	r2, [r3, #0]
    2e04:	497a      	ldr	r1, [pc, #488]	; (2ff0 <Clock_Ip_InitClock+0x288>)
    2e06:	4613      	mov	r3, r2
    2e08:	00db      	lsls	r3, r3, #3
    2e0a:	4413      	add	r3, r2
    2e0c:	440b      	add	r3, r1
    2e0e:	3301      	adds	r3, #1
    2e10:	781b      	ldrb	r3, [r3, #0]
    2e12:	461a      	mov	r2, r3
    2e14:	4b79      	ldr	r3, [pc, #484]	; (2ffc <Clock_Ip_InitClock+0x294>)
    2e16:	5c9b      	ldrb	r3, [r3, r2]
    2e18:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2e1a:	4979      	ldr	r1, [pc, #484]	; (3000 <Clock_Ip_InitClock+0x298>)
    2e1c:	9a02      	ldr	r2, [sp, #8]
    2e1e:	4613      	mov	r3, r2
    2e20:	005b      	lsls	r3, r3, #1
    2e22:	4413      	add	r3, r2
    2e24:	009b      	lsls	r3, r3, #2
    2e26:	440b      	add	r3, r1
    2e28:	6819      	ldr	r1, [r3, #0]
    2e2a:	9a03      	ldr	r2, [sp, #12]
    2e2c:	4613      	mov	r3, r2
    2e2e:	005b      	lsls	r3, r3, #1
    2e30:	4413      	add	r3, r2
    2e32:	009b      	lsls	r3, r3, #2
    2e34:	3310      	adds	r3, #16
    2e36:	9a01      	ldr	r2, [sp, #4]
    2e38:	4413      	add	r3, r2
    2e3a:	3304      	adds	r3, #4
    2e3c:	4618      	mov	r0, r3
    2e3e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2e40:	9b03      	ldr	r3, [sp, #12]
    2e42:	3301      	adds	r3, #1
    2e44:	9303      	str	r3, [sp, #12]
    2e46:	9b01      	ldr	r3, [sp, #4]
    2e48:	7a1b      	ldrb	r3, [r3, #8]
    2e4a:	461a      	mov	r2, r3
    2e4c:	9b03      	ldr	r3, [sp, #12]
    2e4e:	4293      	cmp	r3, r2
    2e50:	d3cf      	bcc.n	2df2 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2e52:	2300      	movs	r3, #0
    2e54:	9303      	str	r3, [sp, #12]
    2e56:	e02a      	b.n	2eae <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2e58:	9901      	ldr	r1, [sp, #4]
    2e5a:	9a03      	ldr	r2, [sp, #12]
    2e5c:	4613      	mov	r3, r2
    2e5e:	009b      	lsls	r3, r3, #2
    2e60:	4413      	add	r3, r2
    2e62:	009b      	lsls	r3, r3, #2
    2e64:	440b      	add	r3, r1
    2e66:	332c      	adds	r3, #44	; 0x2c
    2e68:	681a      	ldr	r2, [r3, #0]
    2e6a:	4961      	ldr	r1, [pc, #388]	; (2ff0 <Clock_Ip_InitClock+0x288>)
    2e6c:	4613      	mov	r3, r2
    2e6e:	00db      	lsls	r3, r3, #3
    2e70:	4413      	add	r3, r2
    2e72:	440b      	add	r3, r1
    2e74:	3301      	adds	r3, #1
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	461a      	mov	r2, r3
    2e7a:	4b62      	ldr	r3, [pc, #392]	; (3004 <Clock_Ip_InitClock+0x29c>)
    2e7c:	5c9b      	ldrb	r3, [r3, r2]
    2e7e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2e80:	4961      	ldr	r1, [pc, #388]	; (3008 <Clock_Ip_InitClock+0x2a0>)
    2e82:	9a02      	ldr	r2, [sp, #8]
    2e84:	4613      	mov	r3, r2
    2e86:	009b      	lsls	r3, r3, #2
    2e88:	4413      	add	r3, r2
    2e8a:	009b      	lsls	r3, r3, #2
    2e8c:	440b      	add	r3, r1
    2e8e:	3304      	adds	r3, #4
    2e90:	6819      	ldr	r1, [r3, #0]
    2e92:	9a03      	ldr	r2, [sp, #12]
    2e94:	4613      	mov	r3, r2
    2e96:	009b      	lsls	r3, r3, #2
    2e98:	4413      	add	r3, r2
    2e9a:	009b      	lsls	r3, r3, #2
    2e9c:	3328      	adds	r3, #40	; 0x28
    2e9e:	9a01      	ldr	r2, [sp, #4]
    2ea0:	4413      	add	r3, r2
    2ea2:	3304      	adds	r3, #4
    2ea4:	4618      	mov	r0, r3
    2ea6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2ea8:	9b03      	ldr	r3, [sp, #12]
    2eaa:	3301      	adds	r3, #1
    2eac:	9303      	str	r3, [sp, #12]
    2eae:	9b01      	ldr	r3, [sp, #4]
    2eb0:	7a5b      	ldrb	r3, [r3, #9]
    2eb2:	461a      	mov	r2, r3
    2eb4:	9b03      	ldr	r3, [sp, #12]
    2eb6:	4293      	cmp	r3, r2
    2eb8:	d3ce      	bcc.n	2e58 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2eba:	9801      	ldr	r0, [sp, #4]
    2ebc:	f7ff fdb0 	bl	2a20 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2ec0:	2300      	movs	r3, #0
    2ec2:	9303      	str	r3, [sp, #12]
    2ec4:	e028      	b.n	2f18 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2ec6:	9901      	ldr	r1, [sp, #4]
    2ec8:	9a03      	ldr	r2, [sp, #12]
    2eca:	4613      	mov	r3, r2
    2ecc:	009b      	lsls	r3, r3, #2
    2ece:	4413      	add	r3, r2
    2ed0:	009b      	lsls	r3, r3, #2
    2ed2:	440b      	add	r3, r1
    2ed4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2ed8:	681a      	ldr	r2, [r3, #0]
    2eda:	4945      	ldr	r1, [pc, #276]	; (2ff0 <Clock_Ip_InitClock+0x288>)
    2edc:	4613      	mov	r3, r2
    2ede:	00db      	lsls	r3, r3, #3
    2ee0:	4413      	add	r3, r2
    2ee2:	440b      	add	r3, r1
    2ee4:	3301      	adds	r3, #1
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	461a      	mov	r2, r3
    2eea:	4b48      	ldr	r3, [pc, #288]	; (300c <Clock_Ip_InitClock+0x2a4>)
    2eec:	5c9b      	ldrb	r3, [r3, r2]
    2eee:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2ef0:	4a47      	ldr	r2, [pc, #284]	; (3010 <Clock_Ip_InitClock+0x2a8>)
    2ef2:	9b02      	ldr	r3, [sp, #8]
    2ef4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2ef8:	9a03      	ldr	r2, [sp, #12]
    2efa:	4613      	mov	r3, r2
    2efc:	009b      	lsls	r3, r3, #2
    2efe:	4413      	add	r3, r2
    2f00:	009b      	lsls	r3, r3, #2
    2f02:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2f06:	9a01      	ldr	r2, [sp, #4]
    2f08:	4413      	add	r3, r2
    2f0a:	3304      	adds	r3, #4
    2f0c:	9903      	ldr	r1, [sp, #12]
    2f0e:	4618      	mov	r0, r3
    2f10:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2f12:	9b03      	ldr	r3, [sp, #12]
    2f14:	3301      	adds	r3, #1
    2f16:	9303      	str	r3, [sp, #12]
    2f18:	9b01      	ldr	r3, [sp, #4]
    2f1a:	7c5b      	ldrb	r3, [r3, #17]
    2f1c:	461a      	mov	r2, r3
    2f1e:	9b03      	ldr	r3, [sp, #12]
    2f20:	4293      	cmp	r3, r2
    2f22:	d3d0      	bcc.n	2ec6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2f24:	2300      	movs	r3, #0
    2f26:	9303      	str	r3, [sp, #12]
    2f28:	e026      	b.n	2f78 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2f2a:	9901      	ldr	r1, [sp, #4]
    2f2c:	9a03      	ldr	r2, [sp, #12]
    2f2e:	4613      	mov	r3, r2
    2f30:	005b      	lsls	r3, r3, #1
    2f32:	4413      	add	r3, r2
    2f34:	009b      	lsls	r3, r3, #2
    2f36:	440b      	add	r3, r1
    2f38:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f3c:	681a      	ldr	r2, [r3, #0]
    2f3e:	492c      	ldr	r1, [pc, #176]	; (2ff0 <Clock_Ip_InitClock+0x288>)
    2f40:	4613      	mov	r3, r2
    2f42:	00db      	lsls	r3, r3, #3
    2f44:	4413      	add	r3, r2
    2f46:	440b      	add	r3, r1
    2f48:	3301      	adds	r3, #1
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	461a      	mov	r2, r3
    2f4e:	4b31      	ldr	r3, [pc, #196]	; (3014 <Clock_Ip_InitClock+0x2ac>)
    2f50:	5c9b      	ldrb	r3, [r3, r2]
    2f52:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2f54:	4a30      	ldr	r2, [pc, #192]	; (3018 <Clock_Ip_InitClock+0x2b0>)
    2f56:	9b02      	ldr	r3, [sp, #8]
    2f58:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2f5c:	9a03      	ldr	r2, [sp, #12]
    2f5e:	4613      	mov	r3, r2
    2f60:	005b      	lsls	r3, r3, #1
    2f62:	4413      	add	r3, r2
    2f64:	009b      	lsls	r3, r3, #2
    2f66:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f6a:	9a01      	ldr	r2, [sp, #4]
    2f6c:	4413      	add	r3, r2
    2f6e:	4618      	mov	r0, r3
    2f70:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2f72:	9b03      	ldr	r3, [sp, #12]
    2f74:	3301      	adds	r3, #1
    2f76:	9303      	str	r3, [sp, #12]
    2f78:	9b01      	ldr	r3, [sp, #4]
    2f7a:	7b5b      	ldrb	r3, [r3, #13]
    2f7c:	461a      	mov	r2, r3
    2f7e:	9b03      	ldr	r3, [sp, #12]
    2f80:	4293      	cmp	r3, r2
    2f82:	d3d2      	bcc.n	2f2a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2f84:	2300      	movs	r3, #0
    2f86:	9303      	str	r3, [sp, #12]
    2f88:	e026      	b.n	2fd8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2f8a:	9901      	ldr	r1, [sp, #4]
    2f8c:	9a03      	ldr	r2, [sp, #12]
    2f8e:	4613      	mov	r3, r2
    2f90:	005b      	lsls	r3, r3, #1
    2f92:	4413      	add	r3, r2
    2f94:	009b      	lsls	r3, r3, #2
    2f96:	440b      	add	r3, r1
    2f98:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2f9c:	681a      	ldr	r2, [r3, #0]
    2f9e:	4914      	ldr	r1, [pc, #80]	; (2ff0 <Clock_Ip_InitClock+0x288>)
    2fa0:	4613      	mov	r3, r2
    2fa2:	00db      	lsls	r3, r3, #3
    2fa4:	4413      	add	r3, r2
    2fa6:	440b      	add	r3, r1
    2fa8:	3301      	adds	r3, #1
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	461a      	mov	r2, r3
    2fae:	4b1b      	ldr	r3, [pc, #108]	; (301c <Clock_Ip_InitClock+0x2b4>)
    2fb0:	5c9b      	ldrb	r3, [r3, r2]
    2fb2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2fb4:	4a1a      	ldr	r2, [pc, #104]	; (3020 <Clock_Ip_InitClock+0x2b8>)
    2fb6:	9b02      	ldr	r3, [sp, #8]
    2fb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2fbc:	9a03      	ldr	r2, [sp, #12]
    2fbe:	4613      	mov	r3, r2
    2fc0:	005b      	lsls	r3, r3, #1
    2fc2:	4413      	add	r3, r2
    2fc4:	009b      	lsls	r3, r3, #2
    2fc6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2fca:	9a01      	ldr	r2, [sp, #4]
    2fcc:	4413      	add	r3, r2
    2fce:	4618      	mov	r0, r3
    2fd0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2fd2:	9b03      	ldr	r3, [sp, #12]
    2fd4:	3301      	adds	r3, #1
    2fd6:	9303      	str	r3, [sp, #12]
    2fd8:	9b01      	ldr	r3, [sp, #4]
    2fda:	7b1b      	ldrb	r3, [r3, #12]
    2fdc:	461a      	mov	r2, r3
    2fde:	9b03      	ldr	r3, [sp, #12]
    2fe0:	4293      	cmp	r3, r2
    2fe2:	d3d2      	bcc.n	2f8a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2fe4:	2300      	movs	r3, #0
    2fe6:	9303      	str	r3, [sp, #12]
    2fe8:	e044      	b.n	3074 <Clock_Ip_InitClock+0x30c>
    2fea:	bf00      	nop
    2fec:	1fff8b64 	.word	0x1fff8b64
    2ff0:	00016000 	.word	0x00016000
    2ff4:	00015ff0 	.word	0x00015ff0
    2ff8:	000165fc 	.word	0x000165fc
    2ffc:	00015f90 	.word	0x00015f90
    3000:	000165c0 	.word	0x000165c0
    3004:	00015f80 	.word	0x00015f80
    3008:	00016554 	.word	0x00016554
    300c:	00015fe0 	.word	0x00015fe0
    3010:	00016634 	.word	0x00016634
    3014:	00015f70 	.word	0x00015f70
    3018:	0001654c 	.word	0x0001654c
    301c:	00015f60 	.word	0x00015f60
    3020:	00016510 	.word	0x00016510
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    3024:	9901      	ldr	r1, [sp, #4]
    3026:	9a03      	ldr	r2, [sp, #12]
    3028:	4613      	mov	r3, r2
    302a:	005b      	lsls	r3, r3, #1
    302c:	4413      	add	r3, r2
    302e:	009b      	lsls	r3, r3, #2
    3030:	440b      	add	r3, r1
    3032:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3036:	681a      	ldr	r2, [r3, #0]
    3038:	49ac      	ldr	r1, [pc, #688]	; (32ec <Clock_Ip_InitClock+0x584>)
    303a:	4613      	mov	r3, r2
    303c:	00db      	lsls	r3, r3, #3
    303e:	4413      	add	r3, r2
    3040:	440b      	add	r3, r1
    3042:	3301      	adds	r3, #1
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	461a      	mov	r2, r3
    3048:	4ba9      	ldr	r3, [pc, #676]	; (32f0 <Clock_Ip_InitClock+0x588>)
    304a:	5c9b      	ldrb	r3, [r3, r2]
    304c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    304e:	4aa9      	ldr	r2, [pc, #676]	; (32f4 <Clock_Ip_InitClock+0x58c>)
    3050:	9b02      	ldr	r3, [sp, #8]
    3052:	00db      	lsls	r3, r3, #3
    3054:	4413      	add	r3, r2
    3056:	6859      	ldr	r1, [r3, #4]
    3058:	9a03      	ldr	r2, [sp, #12]
    305a:	4613      	mov	r3, r2
    305c:	005b      	lsls	r3, r3, #1
    305e:	4413      	add	r3, r2
    3060:	009b      	lsls	r3, r3, #2
    3062:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3066:	9a01      	ldr	r2, [sp, #4]
    3068:	4413      	add	r3, r2
    306a:	4618      	mov	r0, r3
    306c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    306e:	9b03      	ldr	r3, [sp, #12]
    3070:	3301      	adds	r3, #1
    3072:	9303      	str	r3, [sp, #12]
    3074:	9b01      	ldr	r3, [sp, #4]
    3076:	7b5b      	ldrb	r3, [r3, #13]
    3078:	461a      	mov	r2, r3
    307a:	9b03      	ldr	r3, [sp, #12]
    307c:	4293      	cmp	r3, r2
    307e:	d3d1      	bcc.n	3024 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3080:	2300      	movs	r3, #0
    3082:	9303      	str	r3, [sp, #12]
    3084:	e029      	b.n	30da <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    3086:	9901      	ldr	r1, [sp, #4]
    3088:	9a03      	ldr	r2, [sp, #12]
    308a:	4613      	mov	r3, r2
    308c:	009b      	lsls	r3, r3, #2
    308e:	4413      	add	r3, r2
    3090:	00db      	lsls	r3, r3, #3
    3092:	440b      	add	r3, r1
    3094:	3340      	adds	r3, #64	; 0x40
    3096:	681a      	ldr	r2, [r3, #0]
    3098:	4994      	ldr	r1, [pc, #592]	; (32ec <Clock_Ip_InitClock+0x584>)
    309a:	4613      	mov	r3, r2
    309c:	00db      	lsls	r3, r3, #3
    309e:	4413      	add	r3, r2
    30a0:	440b      	add	r3, r1
    30a2:	3301      	adds	r3, #1
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	461a      	mov	r2, r3
    30a8:	4b93      	ldr	r3, [pc, #588]	; (32f8 <Clock_Ip_InitClock+0x590>)
    30aa:	5c9b      	ldrb	r3, [r3, r2]
    30ac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    30ae:	4993      	ldr	r1, [pc, #588]	; (32fc <Clock_Ip_InitClock+0x594>)
    30b0:	9a02      	ldr	r2, [sp, #8]
    30b2:	4613      	mov	r3, r2
    30b4:	009b      	lsls	r3, r3, #2
    30b6:	4413      	add	r3, r2
    30b8:	009b      	lsls	r3, r3, #2
    30ba:	440b      	add	r3, r1
    30bc:	3304      	adds	r3, #4
    30be:	6819      	ldr	r1, [r3, #0]
    30c0:	9a03      	ldr	r2, [sp, #12]
    30c2:	4613      	mov	r3, r2
    30c4:	009b      	lsls	r3, r3, #2
    30c6:	4413      	add	r3, r2
    30c8:	00db      	lsls	r3, r3, #3
    30ca:	3340      	adds	r3, #64	; 0x40
    30cc:	9a01      	ldr	r2, [sp, #4]
    30ce:	4413      	add	r3, r2
    30d0:	4618      	mov	r0, r3
    30d2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    30d4:	9b03      	ldr	r3, [sp, #12]
    30d6:	3301      	adds	r3, #1
    30d8:	9303      	str	r3, [sp, #12]
    30da:	9b01      	ldr	r3, [sp, #4]
    30dc:	7a9b      	ldrb	r3, [r3, #10]
    30de:	461a      	mov	r2, r3
    30e0:	9b03      	ldr	r3, [sp, #12]
    30e2:	4293      	cmp	r3, r2
    30e4:	d3cf      	bcc.n	3086 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    30e6:	2300      	movs	r3, #0
    30e8:	9303      	str	r3, [sp, #12]
    30ea:	e029      	b.n	3140 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    30ec:	9901      	ldr	r1, [sp, #4]
    30ee:	9a03      	ldr	r2, [sp, #12]
    30f0:	4613      	mov	r3, r2
    30f2:	009b      	lsls	r3, r3, #2
    30f4:	4413      	add	r3, r2
    30f6:	009b      	lsls	r3, r3, #2
    30f8:	440b      	add	r3, r1
    30fa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    30fe:	681a      	ldr	r2, [r3, #0]
    3100:	497a      	ldr	r1, [pc, #488]	; (32ec <Clock_Ip_InitClock+0x584>)
    3102:	4613      	mov	r3, r2
    3104:	00db      	lsls	r3, r3, #3
    3106:	4413      	add	r3, r2
    3108:	440b      	add	r3, r1
    310a:	3301      	adds	r3, #1
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	461a      	mov	r2, r3
    3110:	4b7b      	ldr	r3, [pc, #492]	; (3300 <Clock_Ip_InitClock+0x598>)
    3112:	5c9b      	ldrb	r3, [r3, r2]
    3114:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    3116:	4a7b      	ldr	r2, [pc, #492]	; (3304 <Clock_Ip_InitClock+0x59c>)
    3118:	9b02      	ldr	r3, [sp, #8]
    311a:	011b      	lsls	r3, r3, #4
    311c:	4413      	add	r3, r2
    311e:	3304      	adds	r3, #4
    3120:	681c      	ldr	r4, [r3, #0]
    3122:	9a03      	ldr	r2, [sp, #12]
    3124:	4613      	mov	r3, r2
    3126:	009b      	lsls	r3, r3, #2
    3128:	4413      	add	r3, r2
    312a:	009b      	lsls	r3, r3, #2
    312c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3130:	9a01      	ldr	r2, [sp, #4]
    3132:	4413      	add	r3, r2
    3134:	9903      	ldr	r1, [sp, #12]
    3136:	4618      	mov	r0, r3
    3138:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    313a:	9b03      	ldr	r3, [sp, #12]
    313c:	3301      	adds	r3, #1
    313e:	9303      	str	r3, [sp, #12]
    3140:	9b01      	ldr	r3, [sp, #4]
    3142:	7c9b      	ldrb	r3, [r3, #18]
    3144:	461a      	mov	r2, r3
    3146:	9b03      	ldr	r3, [sp, #12]
    3148:	4293      	cmp	r3, r2
    314a:	d3cf      	bcc.n	30ec <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    314c:	2300      	movs	r3, #0
    314e:	9303      	str	r3, [sp, #12]
    3150:	e02a      	b.n	31a8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    3152:	9901      	ldr	r1, [sp, #4]
    3154:	9a03      	ldr	r2, [sp, #12]
    3156:	4613      	mov	r3, r2
    3158:	009b      	lsls	r3, r3, #2
    315a:	4413      	add	r3, r2
    315c:	009b      	lsls	r3, r3, #2
    315e:	440b      	add	r3, r1
    3160:	332c      	adds	r3, #44	; 0x2c
    3162:	681a      	ldr	r2, [r3, #0]
    3164:	4961      	ldr	r1, [pc, #388]	; (32ec <Clock_Ip_InitClock+0x584>)
    3166:	4613      	mov	r3, r2
    3168:	00db      	lsls	r3, r3, #3
    316a:	4413      	add	r3, r2
    316c:	440b      	add	r3, r1
    316e:	3301      	adds	r3, #1
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	461a      	mov	r2, r3
    3174:	4b64      	ldr	r3, [pc, #400]	; (3308 <Clock_Ip_InitClock+0x5a0>)
    3176:	5c9b      	ldrb	r3, [r3, r2]
    3178:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    317a:	4964      	ldr	r1, [pc, #400]	; (330c <Clock_Ip_InitClock+0x5a4>)
    317c:	9a02      	ldr	r2, [sp, #8]
    317e:	4613      	mov	r3, r2
    3180:	009b      	lsls	r3, r3, #2
    3182:	4413      	add	r3, r2
    3184:	009b      	lsls	r3, r3, #2
    3186:	440b      	add	r3, r1
    3188:	3308      	adds	r3, #8
    318a:	6819      	ldr	r1, [r3, #0]
    318c:	9a03      	ldr	r2, [sp, #12]
    318e:	4613      	mov	r3, r2
    3190:	009b      	lsls	r3, r3, #2
    3192:	4413      	add	r3, r2
    3194:	009b      	lsls	r3, r3, #2
    3196:	3328      	adds	r3, #40	; 0x28
    3198:	9a01      	ldr	r2, [sp, #4]
    319a:	4413      	add	r3, r2
    319c:	3304      	adds	r3, #4
    319e:	4618      	mov	r0, r3
    31a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    31a2:	9b03      	ldr	r3, [sp, #12]
    31a4:	3301      	adds	r3, #1
    31a6:	9303      	str	r3, [sp, #12]
    31a8:	9b01      	ldr	r3, [sp, #4]
    31aa:	7a5b      	ldrb	r3, [r3, #9]
    31ac:	461a      	mov	r2, r3
    31ae:	9b03      	ldr	r3, [sp, #12]
    31b0:	4293      	cmp	r3, r2
    31b2:	d3ce      	bcc.n	3152 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    31b4:	2300      	movs	r3, #0
    31b6:	9303      	str	r3, [sp, #12]
    31b8:	e029      	b.n	320e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    31ba:	9901      	ldr	r1, [sp, #4]
    31bc:	9a03      	ldr	r2, [sp, #12]
    31be:	4613      	mov	r3, r2
    31c0:	009b      	lsls	r3, r3, #2
    31c2:	4413      	add	r3, r2
    31c4:	00db      	lsls	r3, r3, #3
    31c6:	440b      	add	r3, r1
    31c8:	3340      	adds	r3, #64	; 0x40
    31ca:	681a      	ldr	r2, [r3, #0]
    31cc:	4947      	ldr	r1, [pc, #284]	; (32ec <Clock_Ip_InitClock+0x584>)
    31ce:	4613      	mov	r3, r2
    31d0:	00db      	lsls	r3, r3, #3
    31d2:	4413      	add	r3, r2
    31d4:	440b      	add	r3, r1
    31d6:	3301      	adds	r3, #1
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	461a      	mov	r2, r3
    31dc:	4b46      	ldr	r3, [pc, #280]	; (32f8 <Clock_Ip_InitClock+0x590>)
    31de:	5c9b      	ldrb	r3, [r3, r2]
    31e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    31e2:	4946      	ldr	r1, [pc, #280]	; (32fc <Clock_Ip_InitClock+0x594>)
    31e4:	9a02      	ldr	r2, [sp, #8]
    31e6:	4613      	mov	r3, r2
    31e8:	009b      	lsls	r3, r3, #2
    31ea:	4413      	add	r3, r2
    31ec:	009b      	lsls	r3, r3, #2
    31ee:	440b      	add	r3, r1
    31f0:	330c      	adds	r3, #12
    31f2:	6819      	ldr	r1, [r3, #0]
    31f4:	9a03      	ldr	r2, [sp, #12]
    31f6:	4613      	mov	r3, r2
    31f8:	009b      	lsls	r3, r3, #2
    31fa:	4413      	add	r3, r2
    31fc:	00db      	lsls	r3, r3, #3
    31fe:	3340      	adds	r3, #64	; 0x40
    3200:	9a01      	ldr	r2, [sp, #4]
    3202:	4413      	add	r3, r2
    3204:	4618      	mov	r0, r3
    3206:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    3208:	9b03      	ldr	r3, [sp, #12]
    320a:	3301      	adds	r3, #1
    320c:	9303      	str	r3, [sp, #12]
    320e:	9b01      	ldr	r3, [sp, #4]
    3210:	7a9b      	ldrb	r3, [r3, #10]
    3212:	461a      	mov	r2, r3
    3214:	9b03      	ldr	r3, [sp, #12]
    3216:	4293      	cmp	r3, r2
    3218:	d3cf      	bcc.n	31ba <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    321a:	2300      	movs	r3, #0
    321c:	9303      	str	r3, [sp, #12]
    321e:	e025      	b.n	326c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    3220:	9a01      	ldr	r2, [sp, #4]
    3222:	9b03      	ldr	r3, [sp, #12]
    3224:	3324      	adds	r3, #36	; 0x24
    3226:	011b      	lsls	r3, r3, #4
    3228:	4413      	add	r3, r2
    322a:	3304      	adds	r3, #4
    322c:	681a      	ldr	r2, [r3, #0]
    322e:	492f      	ldr	r1, [pc, #188]	; (32ec <Clock_Ip_InitClock+0x584>)
    3230:	4613      	mov	r3, r2
    3232:	00db      	lsls	r3, r3, #3
    3234:	4413      	add	r3, r2
    3236:	440b      	add	r3, r1
    3238:	3301      	adds	r3, #1
    323a:	781b      	ldrb	r3, [r3, #0]
    323c:	461a      	mov	r2, r3
    323e:	4b34      	ldr	r3, [pc, #208]	; (3310 <Clock_Ip_InitClock+0x5a8>)
    3240:	5c9b      	ldrb	r3, [r3, r2]
    3242:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    3244:	4933      	ldr	r1, [pc, #204]	; (3314 <Clock_Ip_InitClock+0x5ac>)
    3246:	9a02      	ldr	r2, [sp, #8]
    3248:	4613      	mov	r3, r2
    324a:	005b      	lsls	r3, r3, #1
    324c:	4413      	add	r3, r2
    324e:	009b      	lsls	r3, r3, #2
    3250:	440b      	add	r3, r1
    3252:	3304      	adds	r3, #4
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	9a03      	ldr	r2, [sp, #12]
    3258:	3224      	adds	r2, #36	; 0x24
    325a:	0112      	lsls	r2, r2, #4
    325c:	9901      	ldr	r1, [sp, #4]
    325e:	440a      	add	r2, r1
    3260:	3204      	adds	r2, #4
    3262:	4610      	mov	r0, r2
    3264:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    3266:	9b03      	ldr	r3, [sp, #12]
    3268:	3301      	adds	r3, #1
    326a:	9303      	str	r3, [sp, #12]
    326c:	9b01      	ldr	r3, [sp, #4]
    326e:	7b9b      	ldrb	r3, [r3, #14]
    3270:	461a      	mov	r2, r3
    3272:	9b03      	ldr	r3, [sp, #12]
    3274:	4293      	cmp	r3, r2
    3276:	d3d3      	bcc.n	3220 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    3278:	4b27      	ldr	r3, [pc, #156]	; (3318 <Clock_Ip_InitClock+0x5b0>)
    327a:	2200      	movs	r2, #0
    327c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    327e:	4b26      	ldr	r3, [pc, #152]	; (3318 <Clock_Ip_InitClock+0x5b0>)
    3280:	2200      	movs	r2, #0
    3282:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    3284:	4b24      	ldr	r3, [pc, #144]	; (3318 <Clock_Ip_InitClock+0x5b0>)
    3286:	2201      	movs	r2, #1
    3288:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    328a:	4b23      	ldr	r3, [pc, #140]	; (3318 <Clock_Ip_InitClock+0x5b0>)
    328c:	2200      	movs	r2, #0
    328e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    3290:	f000 fa9c 	bl	37cc <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    3294:	2300      	movs	r3, #0
    3296:	9303      	str	r3, [sp, #12]
    3298:	e04c      	b.n	3334 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    329a:	9a01      	ldr	r2, [sp, #4]
    329c:	9b03      	ldr	r3, [sp, #12]
    329e:	330d      	adds	r3, #13
    32a0:	00db      	lsls	r3, r3, #3
    32a2:	4413      	add	r3, r2
    32a4:	685b      	ldr	r3, [r3, #4]
    32a6:	4a1d      	ldr	r2, [pc, #116]	; (331c <Clock_Ip_InitClock+0x5b4>)
    32a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    32ac:	2b03      	cmp	r3, #3
    32ae:	d03b      	beq.n	3328 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    32b0:	9b01      	ldr	r3, [sp, #4]
    32b2:	9a03      	ldr	r2, [sp, #12]
    32b4:	320d      	adds	r2, #13
    32b6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    32ba:	490c      	ldr	r1, [pc, #48]	; (32ec <Clock_Ip_InitClock+0x584>)
    32bc:	4613      	mov	r3, r2
    32be:	00db      	lsls	r3, r3, #3
    32c0:	4413      	add	r3, r2
    32c2:	440b      	add	r3, r1
    32c4:	3301      	adds	r3, #1
    32c6:	781b      	ldrb	r3, [r3, #0]
    32c8:	461a      	mov	r2, r3
    32ca:	4b15      	ldr	r3, [pc, #84]	; (3320 <Clock_Ip_InitClock+0x5b8>)
    32cc:	5c9b      	ldrb	r3, [r3, r2]
    32ce:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    32d0:	4a14      	ldr	r2, [pc, #80]	; (3324 <Clock_Ip_InitClock+0x5bc>)
    32d2:	9b02      	ldr	r3, [sp, #8]
    32d4:	00db      	lsls	r3, r3, #3
    32d6:	4413      	add	r3, r2
    32d8:	685b      	ldr	r3, [r3, #4]
    32da:	9a03      	ldr	r2, [sp, #12]
    32dc:	320d      	adds	r2, #13
    32de:	00d2      	lsls	r2, r2, #3
    32e0:	9901      	ldr	r1, [sp, #4]
    32e2:	440a      	add	r2, r1
    32e4:	4610      	mov	r0, r2
    32e6:	4798      	blx	r3
    32e8:	e021      	b.n	332e <Clock_Ip_InitClock+0x5c6>
    32ea:	bf00      	nop
    32ec:	00016000 	.word	0x00016000
    32f0:	00015f70 	.word	0x00015f70
    32f4:	0001654c 	.word	0x0001654c
    32f8:	00015fc0 	.word	0x00015fc0
    32fc:	0001660c 	.word	0x0001660c
    3300:	00015ff0 	.word	0x00015ff0
    3304:	000165fc 	.word	0x000165fc
    3308:	00015f80 	.word	0x00015f80
    330c:	00016554 	.word	0x00016554
    3310:	00015fb0 	.word	0x00015fb0
    3314:	0001657c 	.word	0x0001657c
    3318:	1fff8b6c 	.word	0x1fff8b6c
    331c:	0001644c 	.word	0x0001644c
    3320:	00015fd0 	.word	0x00015fd0
    3324:	00016638 	.word	0x00016638
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    3328:	4b3a      	ldr	r3, [pc, #232]	; (3414 <Clock_Ip_InitClock+0x6ac>)
    332a:	2201      	movs	r2, #1
    332c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    332e:	9b03      	ldr	r3, [sp, #12]
    3330:	3301      	adds	r3, #1
    3332:	9303      	str	r3, [sp, #12]
    3334:	9b01      	ldr	r3, [sp, #4]
    3336:	7adb      	ldrb	r3, [r3, #11]
    3338:	461a      	mov	r2, r3
    333a:	9b03      	ldr	r3, [sp, #12]
    333c:	4293      	cmp	r3, r2
    333e:	d3ac      	bcc.n	329a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3340:	4b34      	ldr	r3, [pc, #208]	; (3414 <Clock_Ip_InitClock+0x6ac>)
    3342:	781b      	ldrb	r3, [r3, #0]
    3344:	f083 0301 	eor.w	r3, r3, #1
    3348:	b2db      	uxtb	r3, r3
    334a:	2b00      	cmp	r3, #0
    334c:	d05e      	beq.n	340c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    334e:	2300      	movs	r3, #0
    3350:	9303      	str	r3, [sp, #12]
    3352:	e01f      	b.n	3394 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3354:	9a01      	ldr	r2, [sp, #4]
    3356:	9b03      	ldr	r3, [sp, #12]
    3358:	334e      	adds	r3, #78	; 0x4e
    335a:	00db      	lsls	r3, r3, #3
    335c:	4413      	add	r3, r2
    335e:	685a      	ldr	r2, [r3, #4]
    3360:	492d      	ldr	r1, [pc, #180]	; (3418 <Clock_Ip_InitClock+0x6b0>)
    3362:	4613      	mov	r3, r2
    3364:	00db      	lsls	r3, r3, #3
    3366:	4413      	add	r3, r2
    3368:	440b      	add	r3, r1
    336a:	3301      	adds	r3, #1
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	461a      	mov	r2, r3
    3370:	4b2a      	ldr	r3, [pc, #168]	; (341c <Clock_Ip_InitClock+0x6b4>)
    3372:	5c9b      	ldrb	r3, [r3, r2]
    3374:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    3376:	4a2a      	ldr	r2, [pc, #168]	; (3420 <Clock_Ip_InitClock+0x6b8>)
    3378:	9b02      	ldr	r3, [sp, #8]
    337a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    337e:	9a03      	ldr	r2, [sp, #12]
    3380:	324e      	adds	r2, #78	; 0x4e
    3382:	00d2      	lsls	r2, r2, #3
    3384:	9901      	ldr	r1, [sp, #4]
    3386:	440a      	add	r2, r1
    3388:	3204      	adds	r2, #4
    338a:	4610      	mov	r0, r2
    338c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    338e:	9b03      	ldr	r3, [sp, #12]
    3390:	3301      	adds	r3, #1
    3392:	9303      	str	r3, [sp, #12]
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	7c1b      	ldrb	r3, [r3, #16]
    3398:	461a      	mov	r2, r3
    339a:	9b03      	ldr	r3, [sp, #12]
    339c:	4293      	cmp	r3, r2
    339e:	d3d9      	bcc.n	3354 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    33a0:	2300      	movs	r3, #0
    33a2:	9303      	str	r3, [sp, #12]
    33a4:	e028      	b.n	33f8 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    33a6:	9901      	ldr	r1, [sp, #4]
    33a8:	9a03      	ldr	r2, [sp, #12]
    33aa:	4613      	mov	r3, r2
    33ac:	009b      	lsls	r3, r3, #2
    33ae:	4413      	add	r3, r2
    33b0:	009b      	lsls	r3, r3, #2
    33b2:	440b      	add	r3, r1
    33b4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33b8:	681a      	ldr	r2, [r3, #0]
    33ba:	4917      	ldr	r1, [pc, #92]	; (3418 <Clock_Ip_InitClock+0x6b0>)
    33bc:	4613      	mov	r3, r2
    33be:	00db      	lsls	r3, r3, #3
    33c0:	4413      	add	r3, r2
    33c2:	440b      	add	r3, r1
    33c4:	3301      	adds	r3, #1
    33c6:	781b      	ldrb	r3, [r3, #0]
    33c8:	461a      	mov	r2, r3
    33ca:	4b16      	ldr	r3, [pc, #88]	; (3424 <Clock_Ip_InitClock+0x6bc>)
    33cc:	5c9b      	ldrb	r3, [r3, r2]
    33ce:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    33d0:	4a15      	ldr	r2, [pc, #84]	; (3428 <Clock_Ip_InitClock+0x6c0>)
    33d2:	9b02      	ldr	r3, [sp, #8]
    33d4:	011b      	lsls	r3, r3, #4
    33d6:	4413      	add	r3, r2
    33d8:	330c      	adds	r3, #12
    33da:	6819      	ldr	r1, [r3, #0]
    33dc:	9a03      	ldr	r2, [sp, #12]
    33de:	4613      	mov	r3, r2
    33e0:	009b      	lsls	r3, r3, #2
    33e2:	4413      	add	r3, r2
    33e4:	009b      	lsls	r3, r3, #2
    33e6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33ea:	9a01      	ldr	r2, [sp, #4]
    33ec:	4413      	add	r3, r2
    33ee:	4618      	mov	r0, r3
    33f0:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    33f2:	9b03      	ldr	r3, [sp, #12]
    33f4:	3301      	adds	r3, #1
    33f6:	9303      	str	r3, [sp, #12]
    33f8:	9b01      	ldr	r3, [sp, #4]
    33fa:	7c9b      	ldrb	r3, [r3, #18]
    33fc:	461a      	mov	r2, r3
    33fe:	9b03      	ldr	r3, [sp, #12]
    3400:	4293      	cmp	r3, r2
    3402:	d3d0      	bcc.n	33a6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3404:	2104      	movs	r1, #4
    3406:	9801      	ldr	r0, [sp, #4]
    3408:	f002 ff48 	bl	629c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    340c:	bf00      	nop
    340e:	b004      	add	sp, #16
    3410:	bd10      	pop	{r4, pc}
    3412:	bf00      	nop
    3414:	1fff8b6c 	.word	0x1fff8b6c
    3418:	00016000 	.word	0x00016000
    341c:	00015fa0 	.word	0x00015fa0
    3420:	00016588 	.word	0x00016588
    3424:	00015ff0 	.word	0x00015ff0
    3428:	000165fc 	.word	0x000165fc

0000342c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    342c:	b500      	push	{lr}
    342e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    3430:	2302      	movs	r3, #2
    3432:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3434:	2300      	movs	r3, #0
    3436:	9304      	str	r3, [sp, #16]
    3438:	e02c      	b.n	3494 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    343a:	4a36      	ldr	r2, [pc, #216]	; (3514 <Clock_Ip_GetPllStatus+0xe8>)
    343c:	9b04      	ldr	r3, [sp, #16]
    343e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3442:	4935      	ldr	r1, [pc, #212]	; (3518 <Clock_Ip_GetPllStatus+0xec>)
    3444:	4613      	mov	r3, r2
    3446:	00db      	lsls	r3, r3, #3
    3448:	4413      	add	r3, r2
    344a:	440b      	add	r3, r1
    344c:	3301      	adds	r3, #1
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	461a      	mov	r2, r3
    3452:	4b32      	ldr	r3, [pc, #200]	; (351c <Clock_Ip_GetPllStatus+0xf0>)
    3454:	5c9b      	ldrb	r3, [r3, r2]
    3456:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3458:	4931      	ldr	r1, [pc, #196]	; (3520 <Clock_Ip_GetPllStatus+0xf4>)
    345a:	9a03      	ldr	r2, [sp, #12]
    345c:	4613      	mov	r3, r2
    345e:	009b      	lsls	r3, r3, #2
    3460:	4413      	add	r3, r2
    3462:	009b      	lsls	r3, r3, #2
    3464:	440b      	add	r3, r1
    3466:	3308      	adds	r3, #8
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	492a      	ldr	r1, [pc, #168]	; (3514 <Clock_Ip_GetPllStatus+0xe8>)
    346c:	9a04      	ldr	r2, [sp, #16]
    346e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    3472:	4610      	mov	r0, r2
    3474:	4798      	blx	r3
    3476:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    3478:	9b02      	ldr	r3, [sp, #8]
    347a:	2b01      	cmp	r3, #1
    347c:	d102      	bne.n	3484 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    347e:	2301      	movs	r3, #1
    3480:	9305      	str	r3, [sp, #20]
            break;
    3482:	e00d      	b.n	34a0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    3484:	9b02      	ldr	r3, [sp, #8]
    3486:	2b02      	cmp	r3, #2
    3488:	d101      	bne.n	348e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    348a:	2300      	movs	r3, #0
    348c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    348e:	9b04      	ldr	r3, [sp, #16]
    3490:	3301      	adds	r3, #1
    3492:	9304      	str	r3, [sp, #16]
    3494:	4b23      	ldr	r3, [pc, #140]	; (3524 <Clock_Ip_GetPllStatus+0xf8>)
    3496:	789b      	ldrb	r3, [r3, #2]
    3498:	461a      	mov	r2, r3
    349a:	9b04      	ldr	r3, [sp, #16]
    349c:	4293      	cmp	r3, r2
    349e:	d3cc      	bcc.n	343a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    34a0:	9b05      	ldr	r3, [sp, #20]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d130      	bne.n	3508 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    34a6:	2300      	movs	r3, #0
    34a8:	9304      	str	r3, [sp, #16]
    34aa:	e027      	b.n	34fc <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    34ac:	4a1e      	ldr	r2, [pc, #120]	; (3528 <Clock_Ip_GetPllStatus+0xfc>)
    34ae:	9b04      	ldr	r3, [sp, #16]
    34b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    34b4:	4918      	ldr	r1, [pc, #96]	; (3518 <Clock_Ip_GetPllStatus+0xec>)
    34b6:	4613      	mov	r3, r2
    34b8:	00db      	lsls	r3, r3, #3
    34ba:	4413      	add	r3, r2
    34bc:	440b      	add	r3, r1
    34be:	3301      	adds	r3, #1
    34c0:	781b      	ldrb	r3, [r3, #0]
    34c2:	461a      	mov	r2, r3
    34c4:	4b19      	ldr	r3, [pc, #100]	; (352c <Clock_Ip_GetPllStatus+0x100>)
    34c6:	5c9b      	ldrb	r3, [r3, r2]
    34c8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    34ca:	4919      	ldr	r1, [pc, #100]	; (3530 <Clock_Ip_GetPllStatus+0x104>)
    34cc:	9a03      	ldr	r2, [sp, #12]
    34ce:	4613      	mov	r3, r2
    34d0:	005b      	lsls	r3, r3, #1
    34d2:	4413      	add	r3, r2
    34d4:	009b      	lsls	r3, r3, #2
    34d6:	440b      	add	r3, r1
    34d8:	3308      	adds	r3, #8
    34da:	681b      	ldr	r3, [r3, #0]
    34dc:	4912      	ldr	r1, [pc, #72]	; (3528 <Clock_Ip_GetPllStatus+0xfc>)
    34de:	9a04      	ldr	r2, [sp, #16]
    34e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    34e4:	4610      	mov	r0, r2
    34e6:	4798      	blx	r3
    34e8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    34ea:	9b01      	ldr	r3, [sp, #4]
    34ec:	2b01      	cmp	r3, #1
    34ee:	d102      	bne.n	34f6 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    34f0:	2301      	movs	r3, #1
    34f2:	9305      	str	r3, [sp, #20]
                break;
    34f4:	e008      	b.n	3508 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    34f6:	9b04      	ldr	r3, [sp, #16]
    34f8:	3301      	adds	r3, #1
    34fa:	9304      	str	r3, [sp, #16]
    34fc:	4b09      	ldr	r3, [pc, #36]	; (3524 <Clock_Ip_GetPllStatus+0xf8>)
    34fe:	78db      	ldrb	r3, [r3, #3]
    3500:	461a      	mov	r2, r3
    3502:	9b04      	ldr	r3, [sp, #16]
    3504:	4293      	cmp	r3, r2
    3506:	d3d1      	bcc.n	34ac <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    3508:	9b05      	ldr	r3, [sp, #20]
}
    350a:	4618      	mov	r0, r3
    350c:	b007      	add	sp, #28
    350e:	f85d fb04 	ldr.w	pc, [sp], #4
    3512:	bf00      	nop
    3514:	00016508 	.word	0x00016508
    3518:	00016000 	.word	0x00016000
    351c:	00015fc0 	.word	0x00015fc0
    3520:	0001660c 	.word	0x0001660c
    3524:	1fff8b6c 	.word	0x1fff8b6c
    3528:	0001650c 	.word	0x0001650c
    352c:	00015fb0 	.word	0x00015fb0
    3530:	0001657c 	.word	0x0001657c

00003534 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    3534:	b500      	push	{lr}
    3536:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3538:	4b55      	ldr	r3, [pc, #340]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	2b00      	cmp	r3, #0
    353e:	f000 80a2 	beq.w	3686 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3542:	2300      	movs	r3, #0
    3544:	9301      	str	r3, [sp, #4]
    3546:	e02c      	b.n	35a2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    3548:	4b51      	ldr	r3, [pc, #324]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    354a:	681a      	ldr	r2, [r3, #0]
    354c:	9b01      	ldr	r3, [sp, #4]
    354e:	330d      	adds	r3, #13
    3550:	00db      	lsls	r3, r3, #3
    3552:	4413      	add	r3, r2
    3554:	685b      	ldr	r3, [r3, #4]
    3556:	4a4f      	ldr	r2, [pc, #316]	; (3694 <Clock_Ip_DistributePll+0x160>)
    3558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    355c:	2b03      	cmp	r3, #3
    355e:	d11d      	bne.n	359c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3560:	4b4b      	ldr	r3, [pc, #300]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	9a01      	ldr	r2, [sp, #4]
    3566:	320d      	adds	r2, #13
    3568:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    356c:	494a      	ldr	r1, [pc, #296]	; (3698 <Clock_Ip_DistributePll+0x164>)
    356e:	4613      	mov	r3, r2
    3570:	00db      	lsls	r3, r3, #3
    3572:	4413      	add	r3, r2
    3574:	440b      	add	r3, r1
    3576:	3301      	adds	r3, #1
    3578:	781b      	ldrb	r3, [r3, #0]
    357a:	461a      	mov	r2, r3
    357c:	4b47      	ldr	r3, [pc, #284]	; (369c <Clock_Ip_DistributePll+0x168>)
    357e:	5c9b      	ldrb	r3, [r3, r2]
    3580:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    3582:	4a47      	ldr	r2, [pc, #284]	; (36a0 <Clock_Ip_DistributePll+0x16c>)
    3584:	9b00      	ldr	r3, [sp, #0]
    3586:	00db      	lsls	r3, r3, #3
    3588:	4413      	add	r3, r2
    358a:	685b      	ldr	r3, [r3, #4]
    358c:	4a40      	ldr	r2, [pc, #256]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    358e:	6811      	ldr	r1, [r2, #0]
    3590:	9a01      	ldr	r2, [sp, #4]
    3592:	320d      	adds	r2, #13
    3594:	00d2      	lsls	r2, r2, #3
    3596:	440a      	add	r2, r1
    3598:	4610      	mov	r0, r2
    359a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	3301      	adds	r3, #1
    35a0:	9301      	str	r3, [sp, #4]
    35a2:	4b3b      	ldr	r3, [pc, #236]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    35a4:	681b      	ldr	r3, [r3, #0]
    35a6:	7adb      	ldrb	r3, [r3, #11]
    35a8:	461a      	mov	r2, r3
    35aa:	9b01      	ldr	r3, [sp, #4]
    35ac:	4293      	cmp	r3, r2
    35ae:	d3cb      	bcc.n	3548 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    35b0:	4b3c      	ldr	r3, [pc, #240]	; (36a4 <Clock_Ip_DistributePll+0x170>)
    35b2:	781b      	ldrb	r3, [r3, #0]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d066      	beq.n	3686 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    35b8:	2300      	movs	r3, #0
    35ba:	9301      	str	r3, [sp, #4]
    35bc:	e021      	b.n	3602 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    35be:	4b34      	ldr	r3, [pc, #208]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    35c0:	681a      	ldr	r2, [r3, #0]
    35c2:	9b01      	ldr	r3, [sp, #4]
    35c4:	334e      	adds	r3, #78	; 0x4e
    35c6:	00db      	lsls	r3, r3, #3
    35c8:	4413      	add	r3, r2
    35ca:	685a      	ldr	r2, [r3, #4]
    35cc:	4932      	ldr	r1, [pc, #200]	; (3698 <Clock_Ip_DistributePll+0x164>)
    35ce:	4613      	mov	r3, r2
    35d0:	00db      	lsls	r3, r3, #3
    35d2:	4413      	add	r3, r2
    35d4:	440b      	add	r3, r1
    35d6:	3301      	adds	r3, #1
    35d8:	781b      	ldrb	r3, [r3, #0]
    35da:	461a      	mov	r2, r3
    35dc:	4b32      	ldr	r3, [pc, #200]	; (36a8 <Clock_Ip_DistributePll+0x174>)
    35de:	5c9b      	ldrb	r3, [r3, r2]
    35e0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    35e2:	4a32      	ldr	r2, [pc, #200]	; (36ac <Clock_Ip_DistributePll+0x178>)
    35e4:	9b00      	ldr	r3, [sp, #0]
    35e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    35ea:	4a29      	ldr	r2, [pc, #164]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    35ec:	6811      	ldr	r1, [r2, #0]
    35ee:	9a01      	ldr	r2, [sp, #4]
    35f0:	324e      	adds	r2, #78	; 0x4e
    35f2:	00d2      	lsls	r2, r2, #3
    35f4:	440a      	add	r2, r1
    35f6:	3204      	adds	r2, #4
    35f8:	4610      	mov	r0, r2
    35fa:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    35fc:	9b01      	ldr	r3, [sp, #4]
    35fe:	3301      	adds	r3, #1
    3600:	9301      	str	r3, [sp, #4]
    3602:	4b23      	ldr	r3, [pc, #140]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	7c1b      	ldrb	r3, [r3, #16]
    3608:	461a      	mov	r2, r3
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	4293      	cmp	r3, r2
    360e:	d3d6      	bcc.n	35be <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3610:	2300      	movs	r3, #0
    3612:	9301      	str	r3, [sp, #4]
    3614:	e02a      	b.n	366c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3616:	4b1e      	ldr	r3, [pc, #120]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    3618:	6819      	ldr	r1, [r3, #0]
    361a:	9a01      	ldr	r2, [sp, #4]
    361c:	4613      	mov	r3, r2
    361e:	009b      	lsls	r3, r3, #2
    3620:	4413      	add	r3, r2
    3622:	009b      	lsls	r3, r3, #2
    3624:	440b      	add	r3, r1
    3626:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    362a:	681a      	ldr	r2, [r3, #0]
    362c:	491a      	ldr	r1, [pc, #104]	; (3698 <Clock_Ip_DistributePll+0x164>)
    362e:	4613      	mov	r3, r2
    3630:	00db      	lsls	r3, r3, #3
    3632:	4413      	add	r3, r2
    3634:	440b      	add	r3, r1
    3636:	3301      	adds	r3, #1
    3638:	781b      	ldrb	r3, [r3, #0]
    363a:	461a      	mov	r2, r3
    363c:	4b1c      	ldr	r3, [pc, #112]	; (36b0 <Clock_Ip_DistributePll+0x17c>)
    363e:	5c9b      	ldrb	r3, [r3, r2]
    3640:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    3642:	4a1c      	ldr	r2, [pc, #112]	; (36b4 <Clock_Ip_DistributePll+0x180>)
    3644:	9b00      	ldr	r3, [sp, #0]
    3646:	011b      	lsls	r3, r3, #4
    3648:	4413      	add	r3, r2
    364a:	330c      	adds	r3, #12
    364c:	6819      	ldr	r1, [r3, #0]
    364e:	4b10      	ldr	r3, [pc, #64]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    3650:	6818      	ldr	r0, [r3, #0]
    3652:	9a01      	ldr	r2, [sp, #4]
    3654:	4613      	mov	r3, r2
    3656:	009b      	lsls	r3, r3, #2
    3658:	4413      	add	r3, r2
    365a:	009b      	lsls	r3, r3, #2
    365c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3660:	4403      	add	r3, r0
    3662:	4618      	mov	r0, r3
    3664:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3666:	9b01      	ldr	r3, [sp, #4]
    3668:	3301      	adds	r3, #1
    366a:	9301      	str	r3, [sp, #4]
    366c:	4b08      	ldr	r3, [pc, #32]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    366e:	681b      	ldr	r3, [r3, #0]
    3670:	7c9b      	ldrb	r3, [r3, #18]
    3672:	461a      	mov	r2, r3
    3674:	9b01      	ldr	r3, [sp, #4]
    3676:	4293      	cmp	r3, r2
    3678:	d3cd      	bcc.n	3616 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    367a:	4b05      	ldr	r3, [pc, #20]	; (3690 <Clock_Ip_DistributePll+0x15c>)
    367c:	681b      	ldr	r3, [r3, #0]
    367e:	2104      	movs	r1, #4
    3680:	4618      	mov	r0, r3
    3682:	f002 fe0b 	bl	629c <Clock_Ip_Command>
        }
    }
}
    3686:	bf00      	nop
    3688:	b003      	add	sp, #12
    368a:	f85d fb04 	ldr.w	pc, [sp], #4
    368e:	bf00      	nop
    3690:	1fff8b64 	.word	0x1fff8b64
    3694:	0001644c 	.word	0x0001644c
    3698:	00016000 	.word	0x00016000
    369c:	00015fd0 	.word	0x00015fd0
    36a0:	00016638 	.word	0x00016638
    36a4:	1fff8b6c 	.word	0x1fff8b6c
    36a8:	00015fa0 	.word	0x00015fa0
    36ac:	00016588 	.word	0x00016588
    36b0:	00015ff0 	.word	0x00015ff0
    36b4:	000165fc 	.word	0x000165fc

000036b8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    36b8:	b500      	push	{lr}
    36ba:	b085      	sub	sp, #20
    36bc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    36be:	490c      	ldr	r1, [pc, #48]	; (36f0 <Clock_Ip_DisableClockMonitor+0x38>)
    36c0:	9a01      	ldr	r2, [sp, #4]
    36c2:	4613      	mov	r3, r2
    36c4:	00db      	lsls	r3, r3, #3
    36c6:	4413      	add	r3, r2
    36c8:	440b      	add	r3, r1
    36ca:	3301      	adds	r3, #1
    36cc:	781b      	ldrb	r3, [r3, #0]
    36ce:	461a      	mov	r2, r3
    36d0:	4b08      	ldr	r3, [pc, #32]	; (36f4 <Clock_Ip_DisableClockMonitor+0x3c>)
    36d2:	5c9b      	ldrb	r3, [r3, r2]
    36d4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    36d6:	4a08      	ldr	r2, [pc, #32]	; (36f8 <Clock_Ip_DisableClockMonitor+0x40>)
    36d8:	9b03      	ldr	r3, [sp, #12]
    36da:	011b      	lsls	r3, r3, #4
    36dc:	4413      	add	r3, r2
    36de:	3308      	adds	r3, #8
    36e0:	681b      	ldr	r3, [r3, #0]
    36e2:	9801      	ldr	r0, [sp, #4]
    36e4:	4798      	blx	r3
}
    36e6:	bf00      	nop
    36e8:	b005      	add	sp, #20
    36ea:	f85d fb04 	ldr.w	pc, [sp], #4
    36ee:	bf00      	nop
    36f0:	00016000 	.word	0x00016000
    36f4:	00015ff0 	.word	0x00015ff0
    36f8:	000165fc 	.word	0x000165fc

000036fc <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    36fc:	b082      	sub	sp, #8
    36fe:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    3700:	4a02      	ldr	r2, [pc, #8]	; (370c <Clock_Ip_InstallNotificationsCallback+0x10>)
    3702:	9b01      	ldr	r3, [sp, #4]
    3704:	6013      	str	r3, [r2, #0]
}
    3706:	bf00      	nop
    3708:	b002      	add	sp, #8
    370a:	4770      	bx	lr
    370c:	1fff8b14 	.word	0x1fff8b14

00003710 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    3710:	b500      	push	{lr}
    3712:	b085      	sub	sp, #20
    3714:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3716:	490c      	ldr	r1, [pc, #48]	; (3748 <Clock_Ip_DisableModuleClock+0x38>)
    3718:	9a01      	ldr	r2, [sp, #4]
    371a:	4613      	mov	r3, r2
    371c:	00db      	lsls	r3, r3, #3
    371e:	4413      	add	r3, r2
    3720:	440b      	add	r3, r1
    3722:	3301      	adds	r3, #1
    3724:	781b      	ldrb	r3, [r3, #0]
    3726:	461a      	mov	r2, r3
    3728:	4b08      	ldr	r3, [pc, #32]	; (374c <Clock_Ip_DisableModuleClock+0x3c>)
    372a:	5c9b      	ldrb	r3, [r3, r2]
    372c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    372e:	4a08      	ldr	r2, [pc, #32]	; (3750 <Clock_Ip_DisableModuleClock+0x40>)
    3730:	9b03      	ldr	r3, [sp, #12]
    3732:	00db      	lsls	r3, r3, #3
    3734:	4413      	add	r3, r2
    3736:	685b      	ldr	r3, [r3, #4]
    3738:	2101      	movs	r1, #1
    373a:	9801      	ldr	r0, [sp, #4]
    373c:	4798      	blx	r3
}
    373e:	bf00      	nop
    3740:	b005      	add	sp, #20
    3742:	f85d fb04 	ldr.w	pc, [sp], #4
    3746:	bf00      	nop
    3748:	00016000 	.word	0x00016000
    374c:	00015fa0 	.word	0x00015fa0
    3750:	00016588 	.word	0x00016588

00003754 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3754:	b500      	push	{lr}
    3756:	b085      	sub	sp, #20
    3758:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    375a:	490c      	ldr	r1, [pc, #48]	; (378c <Clock_Ip_EnableModuleClock+0x38>)
    375c:	9a01      	ldr	r2, [sp, #4]
    375e:	4613      	mov	r3, r2
    3760:	00db      	lsls	r3, r3, #3
    3762:	4413      	add	r3, r2
    3764:	440b      	add	r3, r1
    3766:	3301      	adds	r3, #1
    3768:	781b      	ldrb	r3, [r3, #0]
    376a:	461a      	mov	r2, r3
    376c:	4b08      	ldr	r3, [pc, #32]	; (3790 <Clock_Ip_EnableModuleClock+0x3c>)
    376e:	5c9b      	ldrb	r3, [r3, r2]
    3770:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3772:	4a08      	ldr	r2, [pc, #32]	; (3794 <Clock_Ip_EnableModuleClock+0x40>)
    3774:	9b03      	ldr	r3, [sp, #12]
    3776:	00db      	lsls	r3, r3, #3
    3778:	4413      	add	r3, r2
    377a:	685b      	ldr	r3, [r3, #4]
    377c:	2100      	movs	r1, #0
    377e:	9801      	ldr	r0, [sp, #4]
    3780:	4798      	blx	r3
}
    3782:	bf00      	nop
    3784:	b005      	add	sp, #20
    3786:	f85d fb04 	ldr.w	pc, [sp], #4
    378a:	bf00      	nop
    378c:	00016000 	.word	0x00016000
    3790:	00015fa0 	.word	0x00015fa0
    3794:	00016588 	.word	0x00016588

00003798 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3798:	b500      	push	{lr}
    379a:	b083      	sub	sp, #12
    379c:	9001      	str	r0, [sp, #4]
    379e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    37a0:	4b08      	ldr	r3, [pc, #32]	; (37c4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    37a2:	2200      	movs	r2, #0
    37a4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    37a6:	4b08      	ldr	r3, [pc, #32]	; (37c8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    37a8:	681b      	ldr	r3, [r3, #0]
    37aa:	2102      	movs	r1, #2
    37ac:	4618      	mov	r0, r3
    37ae:	f002 fd75 	bl	629c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    37b2:	9900      	ldr	r1, [sp, #0]
    37b4:	9801      	ldr	r0, [sp, #4]
    37b6:	f002 fc51 	bl	605c <Clock_Ip_ClockPowerModeChangeNotification>
}
    37ba:	bf00      	nop
    37bc:	b003      	add	sp, #12
    37be:	f85d fb04 	ldr.w	pc, [sp], #4
    37c2:	bf00      	nop
    37c4:	1fff8b10 	.word	0x1fff8b10
    37c8:	1fff8b64 	.word	0x1fff8b64

000037cc <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    37cc:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    37ce:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    37d2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    37d4:	4b06      	ldr	r3, [pc, #24]	; (37f0 <Clock_Ip_SetWaitStates+0x24>)
    37d6:	785b      	ldrb	r3, [r3, #1]
    37d8:	2b00      	cmp	r3, #0
    37da:	d005      	beq.n	37e8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    37dc:	9b01      	ldr	r3, [sp, #4]
    37de:	3b01      	subs	r3, #1
    37e0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    37e2:	9b01      	ldr	r3, [sp, #4]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d1f9      	bne.n	37dc <Clock_Ip_SetWaitStates+0x10>
    }
}
    37e8:	bf00      	nop
    37ea:	b002      	add	sp, #8
    37ec:	4770      	bx	lr
    37ee:	bf00      	nop
    37f0:	1fff8b6c 	.word	0x1fff8b6c

000037f4 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    37f4:	b500      	push	{lr}
    37f6:	b083      	sub	sp, #12
    37f8:	9001      	str	r0, [sp, #4]
    37fa:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    37fc:	4b04      	ldr	r3, [pc, #16]	; (3810 <Clock_Ip_ReportClockErrors+0x1c>)
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	9900      	ldr	r1, [sp, #0]
    3802:	9801      	ldr	r0, [sp, #4]
    3804:	4798      	blx	r3
}
    3806:	bf00      	nop
    3808:	b003      	add	sp, #12
    380a:	f85d fb04 	ldr.w	pc, [sp], #4
    380e:	bf00      	nop
    3810:	1fff8b14 	.word	0x1fff8b14

00003814 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3814:	b500      	push	{lr}
    3816:	b085      	sub	sp, #20
    3818:	9003      	str	r0, [sp, #12]
    381a:	9102      	str	r1, [sp, #8]
    381c:	9201      	str	r2, [sp, #4]
    381e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3820:	2000      	movs	r0, #0
    3822:	f7fe ffd1 	bl	27c8 <OsIf_GetCounter>
    3826:	4602      	mov	r2, r0
    3828:	9b03      	ldr	r3, [sp, #12]
    382a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    382c:	9b02      	ldr	r3, [sp, #8]
    382e:	2200      	movs	r2, #0
    3830:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3832:	2100      	movs	r1, #0
    3834:	9800      	ldr	r0, [sp, #0]
    3836:	f7ff f813 	bl	2860 <OsIf_MicrosToTicks>
    383a:	4602      	mov	r2, r0
    383c:	9b01      	ldr	r3, [sp, #4]
    383e:	601a      	str	r2, [r3, #0]
}
    3840:	bf00      	nop
    3842:	b005      	add	sp, #20
    3844:	f85d fb04 	ldr.w	pc, [sp], #4

00003848 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3848:	b500      	push	{lr}
    384a:	b087      	sub	sp, #28
    384c:	9003      	str	r0, [sp, #12]
    384e:	9102      	str	r1, [sp, #8]
    3850:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3852:	2300      	movs	r3, #0
    3854:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3858:	2100      	movs	r1, #0
    385a:	9803      	ldr	r0, [sp, #12]
    385c:	f7fe ffcd 	bl	27fa <OsIf_GetElapsed>
    3860:	4602      	mov	r2, r0
    3862:	9b02      	ldr	r3, [sp, #8]
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	441a      	add	r2, r3
    3868:	9b02      	ldr	r3, [sp, #8]
    386a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    386c:	9b02      	ldr	r3, [sp, #8]
    386e:	681b      	ldr	r3, [r3, #0]
    3870:	9a01      	ldr	r2, [sp, #4]
    3872:	429a      	cmp	r2, r3
    3874:	d802      	bhi.n	387c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    3876:	2301      	movs	r3, #1
    3878:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    387c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3880:	4618      	mov	r0, r3
    3882:	b007      	add	sp, #28
    3884:	f85d fb04 	ldr.w	pc, [sp], #4

00003888 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3888:	b082      	sub	sp, #8
    388a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    388c:	bf00      	nop
    388e:	b002      	add	sp, #8
    3890:	4770      	bx	lr

00003892 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3892:	b500      	push	{lr}
    3894:	b083      	sub	sp, #12
    3896:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3898:	9b01      	ldr	r3, [sp, #4]
    389a:	2b00      	cmp	r3, #0
    389c:	d002      	beq.n	38a4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    389e:	9801      	ldr	r0, [sp, #4]
    38a0:	f000 f8ad 	bl	39fe <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a4:	bf00      	nop
    38a6:	b003      	add	sp, #12
    38a8:	f85d fb04 	ldr.w	pc, [sp], #4

000038ac <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    38ac:	b500      	push	{lr}
    38ae:	b083      	sub	sp, #12
    38b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38b2:	9b01      	ldr	r3, [sp, #4]
    38b4:	2b00      	cmp	r3, #0
    38b6:	d002      	beq.n	38be <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    38b8:	9801      	ldr	r0, [sp, #4]
    38ba:	f000 f8cd 	bl	3a58 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38be:	bf00      	nop
    38c0:	b003      	add	sp, #12
    38c2:	f85d fb04 	ldr.w	pc, [sp], #4

000038c6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    38c6:	b500      	push	{lr}
    38c8:	b083      	sub	sp, #12
    38ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d002      	beq.n	38d8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    38d2:	9801      	ldr	r0, [sp, #4]
    38d4:	f000 f8ee 	bl	3ab4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38d8:	bf00      	nop
    38da:	b003      	add	sp, #12
    38dc:	f85d fb04 	ldr.w	pc, [sp], #4

000038e0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    38e0:	b500      	push	{lr}
    38e2:	b083      	sub	sp, #12
    38e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38e6:	9b01      	ldr	r3, [sp, #4]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d002      	beq.n	38f2 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    38ec:	9801      	ldr	r0, [sp, #4]
    38ee:	f000 f8f9 	bl	3ae4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38f2:	bf00      	nop
    38f4:	b003      	add	sp, #12
    38f6:	f85d fb04 	ldr.w	pc, [sp], #4

000038fa <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    38fa:	b500      	push	{lr}
    38fc:	b083      	sub	sp, #12
    38fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3900:	9b01      	ldr	r3, [sp, #4]
    3902:	2b00      	cmp	r3, #0
    3904:	d002      	beq.n	390c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3906:	9801      	ldr	r0, [sp, #4]
    3908:	f000 f904 	bl	3b14 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    390c:	bf00      	nop
    390e:	b003      	add	sp, #12
    3910:	f85d fb04 	ldr.w	pc, [sp], #4

00003914 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3914:	b500      	push	{lr}
    3916:	b083      	sub	sp, #12
    3918:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    391a:	9b01      	ldr	r3, [sp, #4]
    391c:	2b00      	cmp	r3, #0
    391e:	d002      	beq.n	3926 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3920:	9801      	ldr	r0, [sp, #4]
    3922:	f000 f90f 	bl	3b44 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3926:	bf00      	nop
    3928:	b003      	add	sp, #12
    392a:	f85d fb04 	ldr.w	pc, [sp], #4

0000392e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    392e:	b500      	push	{lr}
    3930:	b083      	sub	sp, #12
    3932:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3934:	9b01      	ldr	r3, [sp, #4]
    3936:	2b00      	cmp	r3, #0
    3938:	d002      	beq.n	3940 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    393a:	9801      	ldr	r0, [sp, #4]
    393c:	f000 f91a 	bl	3b74 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3940:	bf00      	nop
    3942:	b003      	add	sp, #12
    3944:	f85d fb04 	ldr.w	pc, [sp], #4

00003948 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3948:	b500      	push	{lr}
    394a:	b083      	sub	sp, #12
    394c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    394e:	9b01      	ldr	r3, [sp, #4]
    3950:	2b00      	cmp	r3, #0
    3952:	d002      	beq.n	395a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3954:	9801      	ldr	r0, [sp, #4]
    3956:	f000 f925 	bl	3ba4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    395a:	bf00      	nop
    395c:	b003      	add	sp, #12
    395e:	f85d fb04 	ldr.w	pc, [sp], #4

00003962 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3962:	b500      	push	{lr}
    3964:	b083      	sub	sp, #12
    3966:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3968:	9b01      	ldr	r3, [sp, #4]
    396a:	2b00      	cmp	r3, #0
    396c:	d002      	beq.n	3974 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    396e:	9801      	ldr	r0, [sp, #4]
    3970:	f000 f930 	bl	3bd4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3974:	bf00      	nop
    3976:	b003      	add	sp, #12
    3978:	f85d fb04 	ldr.w	pc, [sp], #4

0000397c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    397c:	b500      	push	{lr}
    397e:	b083      	sub	sp, #12
    3980:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3982:	9b01      	ldr	r3, [sp, #4]
    3984:	2b00      	cmp	r3, #0
    3986:	d002      	beq.n	398e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3988:	9801      	ldr	r0, [sp, #4]
    398a:	f000 f93b 	bl	3c04 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    398e:	bf00      	nop
    3990:	b003      	add	sp, #12
    3992:	f85d fb04 	ldr.w	pc, [sp], #4

00003996 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3996:	b500      	push	{lr}
    3998:	b083      	sub	sp, #12
    399a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    399c:	9b01      	ldr	r3, [sp, #4]
    399e:	2b00      	cmp	r3, #0
    39a0:	d002      	beq.n	39a8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    39a2:	9801      	ldr	r0, [sp, #4]
    39a4:	f000 f946 	bl	3c34 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39a8:	bf00      	nop
    39aa:	b003      	add	sp, #12
    39ac:	f85d fb04 	ldr.w	pc, [sp], #4

000039b0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    39b0:	b500      	push	{lr}
    39b2:	b083      	sub	sp, #12
    39b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39b6:	9b01      	ldr	r3, [sp, #4]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d002      	beq.n	39c2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    39bc:	9801      	ldr	r0, [sp, #4]
    39be:	f000 f951 	bl	3c64 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39c2:	bf00      	nop
    39c4:	b003      	add	sp, #12
    39c6:	f85d fb04 	ldr.w	pc, [sp], #4

000039ca <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    39ca:	b500      	push	{lr}
    39cc:	b083      	sub	sp, #12
    39ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39d0:	9b01      	ldr	r3, [sp, #4]
    39d2:	2b00      	cmp	r3, #0
    39d4:	d002      	beq.n	39dc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    39d6:	9801      	ldr	r0, [sp, #4]
    39d8:	f000 f95e 	bl	3c98 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39dc:	bf00      	nop
    39de:	b003      	add	sp, #12
    39e0:	f85d fb04 	ldr.w	pc, [sp], #4

000039e4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    39e4:	b500      	push	{lr}
    39e6:	b083      	sub	sp, #12
    39e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39ea:	9b01      	ldr	r3, [sp, #4]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d002      	beq.n	39f6 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    39f0:	9801      	ldr	r0, [sp, #4]
    39f2:	f000 f98b 	bl	3d0c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39f6:	bf00      	nop
    39f8:	b003      	add	sp, #12
    39fa:	f85d fb04 	ldr.w	pc, [sp], #4

000039fe <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    39fe:	b086      	sub	sp, #24
    3a00:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a02:	9b01      	ldr	r3, [sp, #4]
    3a04:	681a      	ldr	r2, [r3, #0]
    3a06:	4911      	ldr	r1, [pc, #68]	; (3a4c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3a08:	4613      	mov	r3, r2
    3a0a:	00db      	lsls	r3, r3, #3
    3a0c:	4413      	add	r3, r2
    3a0e:	440b      	add	r3, r1
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3a14:	9b01      	ldr	r3, [sp, #4]
    3a16:	685b      	ldr	r3, [r3, #4]
    3a18:	4a0d      	ldr	r2, [pc, #52]	; (3a50 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3a1a:	5cd3      	ldrb	r3, [r2, r3]
    3a1c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3a1e:	4a0d      	ldr	r2, [pc, #52]	; (3a54 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3a20:	9b05      	ldr	r3, [sp, #20]
    3a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3a2a:	9b03      	ldr	r3, [sp, #12]
    3a2c:	f023 0307 	bic.w	r3, r3, #7
    3a30:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3a32:	9a03      	ldr	r2, [sp, #12]
    3a34:	9b04      	ldr	r3, [sp, #16]
    3a36:	4313      	orrs	r3, r2
    3a38:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3a3a:	4a06      	ldr	r2, [pc, #24]	; (3a54 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3a3c:	9b05      	ldr	r3, [sp, #20]
    3a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a42:	9a03      	ldr	r2, [sp, #12]
    3a44:	601a      	str	r2, [r3, #0]
}
    3a46:	bf00      	nop
    3a48:	b006      	add	sp, #24
    3a4a:	4770      	bx	lr
    3a4c:	00016000 	.word	0x00016000
    3a50:	000163f8 	.word	0x000163f8
    3a54:	0001643c 	.word	0x0001643c

00003a58 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a58:	b086      	sub	sp, #24
    3a5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a5c:	9b01      	ldr	r3, [sp, #4]
    3a5e:	681a      	ldr	r2, [r3, #0]
    3a60:	4911      	ldr	r1, [pc, #68]	; (3aa8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3a62:	4613      	mov	r3, r2
    3a64:	00db      	lsls	r3, r3, #3
    3a66:	4413      	add	r3, r2
    3a68:	440b      	add	r3, r1
    3a6a:	781b      	ldrb	r3, [r3, #0]
    3a6c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3a6e:	9b01      	ldr	r3, [sp, #4]
    3a70:	685b      	ldr	r3, [r3, #4]
    3a72:	4a0e      	ldr	r2, [pc, #56]	; (3aac <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3a74:	5cd3      	ldrb	r3, [r2, r3]
    3a76:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3a78:	4a0d      	ldr	r2, [pc, #52]	; (3ab0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a7a:	9b05      	ldr	r3, [sp, #20]
    3a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3a84:	9b03      	ldr	r3, [sp, #12]
    3a86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3a8a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3a8c:	9b04      	ldr	r3, [sp, #16]
    3a8e:	021b      	lsls	r3, r3, #8
    3a90:	9a03      	ldr	r2, [sp, #12]
    3a92:	4313      	orrs	r3, r2
    3a94:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3a96:	4a06      	ldr	r2, [pc, #24]	; (3ab0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a98:	9b05      	ldr	r3, [sp, #20]
    3a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a9e:	9a03      	ldr	r2, [sp, #12]
    3aa0:	601a      	str	r2, [r3, #0]
}
    3aa2:	bf00      	nop
    3aa4:	b006      	add	sp, #24
    3aa6:	4770      	bx	lr
    3aa8:	00016000 	.word	0x00016000
    3aac:	000163f8 	.word	0x000163f8
    3ab0:	0001643c 	.word	0x0001643c

00003ab4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ab4:	b084      	sub	sp, #16
    3ab6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ab8:	4b09      	ldr	r3, [pc, #36]	; (3ae0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3aba:	695b      	ldr	r3, [r3, #20]
    3abc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3abe:	9b03      	ldr	r3, [sp, #12]
    3ac0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3ac4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3ac6:	9b01      	ldr	r3, [sp, #4]
    3ac8:	685b      	ldr	r3, [r3, #4]
    3aca:	3b01      	subs	r3, #1
    3acc:	041b      	lsls	r3, r3, #16
    3ace:	9a03      	ldr	r2, [sp, #12]
    3ad0:	4313      	orrs	r3, r2
    3ad2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3ad4:	4a02      	ldr	r2, [pc, #8]	; (3ae0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3ad6:	9b03      	ldr	r3, [sp, #12]
    3ad8:	6153      	str	r3, [r2, #20]
}
    3ada:	bf00      	nop
    3adc:	b004      	add	sp, #16
    3ade:	4770      	bx	lr
    3ae0:	40064000 	.word	0x40064000

00003ae4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ae4:	b084      	sub	sp, #16
    3ae6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ae8:	4b09      	ldr	r3, [pc, #36]	; (3b10 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3aea:	695b      	ldr	r3, [r3, #20]
    3aec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3aee:	9b03      	ldr	r3, [sp, #12]
    3af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3af4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3af6:	9b01      	ldr	r3, [sp, #4]
    3af8:	685b      	ldr	r3, [r3, #4]
    3afa:	3b01      	subs	r3, #1
    3afc:	011b      	lsls	r3, r3, #4
    3afe:	9a03      	ldr	r2, [sp, #12]
    3b00:	4313      	orrs	r3, r2
    3b02:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3b04:	4a02      	ldr	r2, [pc, #8]	; (3b10 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3b06:	9b03      	ldr	r3, [sp, #12]
    3b08:	6153      	str	r3, [r2, #20]
}
    3b0a:	bf00      	nop
    3b0c:	b004      	add	sp, #16
    3b0e:	4770      	bx	lr
    3b10:	40064000 	.word	0x40064000

00003b14 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b14:	b084      	sub	sp, #16
    3b16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3b18:	4b09      	ldr	r3, [pc, #36]	; (3b40 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3b1a:	695b      	ldr	r3, [r3, #20]
    3b1c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3b1e:	9b03      	ldr	r3, [sp, #12]
    3b20:	f023 030f 	bic.w	r3, r3, #15
    3b24:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3b26:	9b01      	ldr	r3, [sp, #4]
    3b28:	685b      	ldr	r3, [r3, #4]
    3b2a:	3b01      	subs	r3, #1
    3b2c:	9a03      	ldr	r2, [sp, #12]
    3b2e:	4313      	orrs	r3, r2
    3b30:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3b32:	4a03      	ldr	r2, [pc, #12]	; (3b40 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3b34:	9b03      	ldr	r3, [sp, #12]
    3b36:	6153      	str	r3, [r2, #20]
}
    3b38:	bf00      	nop
    3b3a:	b004      	add	sp, #16
    3b3c:	4770      	bx	lr
    3b3e:	bf00      	nop
    3b40:	40064000 	.word	0x40064000

00003b44 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b44:	b084      	sub	sp, #16
    3b46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b48:	4b09      	ldr	r3, [pc, #36]	; (3b70 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b4a:	699b      	ldr	r3, [r3, #24]
    3b4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3b4e:	9b03      	ldr	r3, [sp, #12]
    3b50:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3b54:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3b56:	9b01      	ldr	r3, [sp, #4]
    3b58:	685b      	ldr	r3, [r3, #4]
    3b5a:	3b01      	subs	r3, #1
    3b5c:	041b      	lsls	r3, r3, #16
    3b5e:	9a03      	ldr	r2, [sp, #12]
    3b60:	4313      	orrs	r3, r2
    3b62:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b64:	4a02      	ldr	r2, [pc, #8]	; (3b70 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b66:	9b03      	ldr	r3, [sp, #12]
    3b68:	6193      	str	r3, [r2, #24]
}
    3b6a:	bf00      	nop
    3b6c:	b004      	add	sp, #16
    3b6e:	4770      	bx	lr
    3b70:	40064000 	.word	0x40064000

00003b74 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b74:	b084      	sub	sp, #16
    3b76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b78:	4b09      	ldr	r3, [pc, #36]	; (3ba0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b7a:	699b      	ldr	r3, [r3, #24]
    3b7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3b7e:	9b03      	ldr	r3, [sp, #12]
    3b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3b84:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3b86:	9b01      	ldr	r3, [sp, #4]
    3b88:	685b      	ldr	r3, [r3, #4]
    3b8a:	3b01      	subs	r3, #1
    3b8c:	011b      	lsls	r3, r3, #4
    3b8e:	9a03      	ldr	r2, [sp, #12]
    3b90:	4313      	orrs	r3, r2
    3b92:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b94:	4a02      	ldr	r2, [pc, #8]	; (3ba0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b96:	9b03      	ldr	r3, [sp, #12]
    3b98:	6193      	str	r3, [r2, #24]
}
    3b9a:	bf00      	nop
    3b9c:	b004      	add	sp, #16
    3b9e:	4770      	bx	lr
    3ba0:	40064000 	.word	0x40064000

00003ba4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ba4:	b084      	sub	sp, #16
    3ba6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3ba8:	4b09      	ldr	r3, [pc, #36]	; (3bd0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3baa:	699b      	ldr	r3, [r3, #24]
    3bac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3bae:	9b03      	ldr	r3, [sp, #12]
    3bb0:	f023 030f 	bic.w	r3, r3, #15
    3bb4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3bb6:	9b01      	ldr	r3, [sp, #4]
    3bb8:	685b      	ldr	r3, [r3, #4]
    3bba:	3b01      	subs	r3, #1
    3bbc:	9a03      	ldr	r2, [sp, #12]
    3bbe:	4313      	orrs	r3, r2
    3bc0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3bc2:	4a03      	ldr	r2, [pc, #12]	; (3bd0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3bc4:	9b03      	ldr	r3, [sp, #12]
    3bc6:	6193      	str	r3, [r2, #24]
}
    3bc8:	bf00      	nop
    3bca:	b004      	add	sp, #16
    3bcc:	4770      	bx	lr
    3bce:	bf00      	nop
    3bd0:	40064000 	.word	0x40064000

00003bd4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bd4:	b084      	sub	sp, #16
    3bd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3bd8:	4b09      	ldr	r3, [pc, #36]	; (3c00 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3bda:	69db      	ldr	r3, [r3, #28]
    3bdc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3bde:	9b03      	ldr	r3, [sp, #12]
    3be0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3be4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3be6:	9b01      	ldr	r3, [sp, #4]
    3be8:	685b      	ldr	r3, [r3, #4]
    3bea:	3b01      	subs	r3, #1
    3bec:	041b      	lsls	r3, r3, #16
    3bee:	9a03      	ldr	r2, [sp, #12]
    3bf0:	4313      	orrs	r3, r2
    3bf2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3bf4:	4a02      	ldr	r2, [pc, #8]	; (3c00 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3bf6:	9b03      	ldr	r3, [sp, #12]
    3bf8:	61d3      	str	r3, [r2, #28]
}
    3bfa:	bf00      	nop
    3bfc:	b004      	add	sp, #16
    3bfe:	4770      	bx	lr
    3c00:	40064000 	.word	0x40064000

00003c04 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c04:	b084      	sub	sp, #16
    3c06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3c08:	4b09      	ldr	r3, [pc, #36]	; (3c30 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3c0a:	69db      	ldr	r3, [r3, #28]
    3c0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3c0e:	9b03      	ldr	r3, [sp, #12]
    3c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3c14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	685b      	ldr	r3, [r3, #4]
    3c1a:	3b01      	subs	r3, #1
    3c1c:	011b      	lsls	r3, r3, #4
    3c1e:	9a03      	ldr	r2, [sp, #12]
    3c20:	4313      	orrs	r3, r2
    3c22:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c24:	4a02      	ldr	r2, [pc, #8]	; (3c30 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3c26:	9b03      	ldr	r3, [sp, #12]
    3c28:	61d3      	str	r3, [r2, #28]
}
    3c2a:	bf00      	nop
    3c2c:	b004      	add	sp, #16
    3c2e:	4770      	bx	lr
    3c30:	40064000 	.word	0x40064000

00003c34 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c34:	b084      	sub	sp, #16
    3c36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3c38:	4b09      	ldr	r3, [pc, #36]	; (3c60 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c3a:	69db      	ldr	r3, [r3, #28]
    3c3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3c3e:	9b03      	ldr	r3, [sp, #12]
    3c40:	f023 030f 	bic.w	r3, r3, #15
    3c44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3c46:	9b01      	ldr	r3, [sp, #4]
    3c48:	685b      	ldr	r3, [r3, #4]
    3c4a:	3b01      	subs	r3, #1
    3c4c:	9a03      	ldr	r2, [sp, #12]
    3c4e:	4313      	orrs	r3, r2
    3c50:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c52:	4a03      	ldr	r2, [pc, #12]	; (3c60 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c54:	9b03      	ldr	r3, [sp, #12]
    3c56:	61d3      	str	r3, [r2, #28]
}
    3c58:	bf00      	nop
    3c5a:	b004      	add	sp, #16
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	40064000 	.word	0x40064000

00003c64 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3c64:	b084      	sub	sp, #16
    3c66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3c68:	4b0a      	ldr	r3, [pc, #40]	; (3c94 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c6a:	685b      	ldr	r3, [r3, #4]
    3c6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3c6e:	9b03      	ldr	r3, [sp, #12]
    3c70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3c74:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3c76:	9b01      	ldr	r3, [sp, #4]
    3c78:	685b      	ldr	r3, [r3, #4]
    3c7a:	3b01      	subs	r3, #1
    3c7c:	021b      	lsls	r3, r3, #8
    3c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3c82:	9a03      	ldr	r2, [sp, #12]
    3c84:	4313      	orrs	r3, r2
    3c86:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c88:	4a02      	ldr	r2, [pc, #8]	; (3c94 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c8a:	9b03      	ldr	r3, [sp, #12]
    3c8c:	6053      	str	r3, [r2, #4]
}
    3c8e:	bf00      	nop
    3c90:	b004      	add	sp, #16
    3c92:	4770      	bx	lr
    3c94:	40048000 	.word	0x40048000

00003c98 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c98:	b084      	sub	sp, #16
    3c9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3c9c:	4919      	ldr	r1, [pc, #100]	; (3d04 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	681a      	ldr	r2, [r3, #0]
    3ca2:	4819      	ldr	r0, [pc, #100]	; (3d08 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3ca4:	4613      	mov	r3, r2
    3ca6:	00db      	lsls	r3, r3, #3
    3ca8:	4413      	add	r3, r2
    3caa:	4403      	add	r3, r0
    3cac:	3305      	adds	r3, #5
    3cae:	781b      	ldrb	r3, [r3, #0]
    3cb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3cb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3cb6:	9b03      	ldr	r3, [sp, #12]
    3cb8:	f023 030f 	bic.w	r3, r3, #15
    3cbc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	685b      	ldr	r3, [r3, #4]
    3cc2:	3b01      	subs	r3, #1
    3cc4:	f003 0307 	and.w	r3, r3, #7
    3cc8:	9a03      	ldr	r2, [sp, #12]
    3cca:	4313      	orrs	r3, r2
    3ccc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3cce:	9b01      	ldr	r3, [sp, #4]
    3cd0:	7a1b      	ldrb	r3, [r3, #8]
    3cd2:	3b01      	subs	r3, #1
    3cd4:	00db      	lsls	r3, r3, #3
    3cd6:	f003 0308 	and.w	r3, r3, #8
    3cda:	9a03      	ldr	r2, [sp, #12]
    3cdc:	4313      	orrs	r3, r2
    3cde:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3ce0:	4908      	ldr	r1, [pc, #32]	; (3d04 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	681a      	ldr	r2, [r3, #0]
    3ce6:	4808      	ldr	r0, [pc, #32]	; (3d08 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3ce8:	4613      	mov	r3, r2
    3cea:	00db      	lsls	r3, r3, #3
    3cec:	4413      	add	r3, r2
    3cee:	4403      	add	r3, r0
    3cf0:	3305      	adds	r3, #5
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	461a      	mov	r2, r3
    3cf6:	9b03      	ldr	r3, [sp, #12]
    3cf8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3cfc:	bf00      	nop
    3cfe:	b004      	add	sp, #16
    3d00:	4770      	bx	lr
    3d02:	bf00      	nop
    3d04:	40065000 	.word	0x40065000
    3d08:	00016000 	.word	0x00016000

00003d0c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d0c:	b084      	sub	sp, #16
    3d0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3d10:	4b10      	ldr	r3, [pc, #64]	; (3d54 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d14:	4a0f      	ldr	r2, [pc, #60]	; (3d54 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3d1a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3d1c:	4b0d      	ldr	r3, [pc, #52]	; (3d54 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d20:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3d22:	9b03      	ldr	r3, [sp, #12]
    3d24:	f023 030f 	bic.w	r3, r3, #15
    3d28:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3d2a:	9b01      	ldr	r3, [sp, #4]
    3d2c:	685b      	ldr	r3, [r3, #4]
    3d2e:	3b01      	subs	r3, #1
    3d30:	005b      	lsls	r3, r3, #1
    3d32:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3d36:	9b01      	ldr	r3, [sp, #4]
    3d38:	7a1b      	ldrb	r3, [r3, #8]
    3d3a:	3b01      	subs	r3, #1
    3d3c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3d40:	4313      	orrs	r3, r2
    3d42:	9a03      	ldr	r2, [sp, #12]
    3d44:	4313      	orrs	r3, r2
    3d46:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3d48:	4a02      	ldr	r2, [pc, #8]	; (3d54 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d4a:	9b03      	ldr	r3, [sp, #12]
    3d4c:	6693      	str	r3, [r2, #104]	; 0x68
}
    3d4e:	bf00      	nop
    3d50:	b004      	add	sp, #16
    3d52:	4770      	bx	lr
    3d54:	40048000 	.word	0x40048000

00003d58 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3d58:	b082      	sub	sp, #8
    3d5a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d5c:	bf00      	nop
    3d5e:	b002      	add	sp, #8
    3d60:	4770      	bx	lr
	...

00003d64 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3d64:	b082      	sub	sp, #8
    3d66:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d68:	bf00      	nop
    3d6a:	b002      	add	sp, #8
    3d6c:	4770      	bx	lr

00003d6e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3d6e:	b082      	sub	sp, #8
    3d70:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3d72:	bf00      	nop
    3d74:	b002      	add	sp, #8
    3d76:	4770      	bx	lr

00003d78 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d78:	b500      	push	{lr}
    3d7a:	b083      	sub	sp, #12
    3d7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d7e:	9b01      	ldr	r3, [sp, #4]
    3d80:	2b00      	cmp	r3, #0
    3d82:	d002      	beq.n	3d8a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3d84:	9801      	ldr	r0, [sp, #4]
    3d86:	f000 f86a 	bl	3e5e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d8a:	bf00      	nop
    3d8c:	b003      	add	sp, #12
    3d8e:	f85d fb04 	ldr.w	pc, [sp], #4

00003d92 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d92:	b500      	push	{lr}
    3d94:	b083      	sub	sp, #12
    3d96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d98:	9b01      	ldr	r3, [sp, #4]
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d002      	beq.n	3da4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3d9e:	9801      	ldr	r0, [sp, #4]
    3da0:	f000 f884 	bl	3eac <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3da4:	bf00      	nop
    3da6:	b003      	add	sp, #12
    3da8:	f85d fb04 	ldr.w	pc, [sp], #4

00003dac <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3dac:	b500      	push	{lr}
    3dae:	b089      	sub	sp, #36	; 0x24
    3db0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3db2:	2300      	movs	r3, #0
    3db4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3db8:	9b01      	ldr	r3, [sp, #4]
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d031      	beq.n	3e22 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3dbe:	4b1b      	ldr	r3, [pc, #108]	; (3e2c <Clock_Ip_CompleteSOSC+0x80>)
    3dc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3dc4:	f003 0301 	and.w	r3, r3, #1
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d02a      	beq.n	3e22 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dcc:	aa03      	add	r2, sp, #12
    3dce:	a904      	add	r1, sp, #16
    3dd0:	a805      	add	r0, sp, #20
    3dd2:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dd6:	f7ff fd1d 	bl	3814 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3dda:	4b14      	ldr	r3, [pc, #80]	; (3e2c <Clock_Ip_CompleteSOSC+0x80>)
    3ddc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3de0:	0e1b      	lsrs	r3, r3, #24
    3de2:	f003 0301 	and.w	r3, r3, #1
    3de6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3de8:	9a03      	ldr	r2, [sp, #12]
    3dea:	a904      	add	r1, sp, #16
    3dec:	ab05      	add	r3, sp, #20
    3dee:	4618      	mov	r0, r3
    3df0:	f7ff fd2a 	bl	3848 <Clock_Ip_TimeoutExpired>
    3df4:	4603      	mov	r3, r0
    3df6:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3dfa:	9b06      	ldr	r3, [sp, #24]
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d106      	bne.n	3e0e <Clock_Ip_CompleteSOSC+0x62>
    3e00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e04:	f083 0301 	eor.w	r3, r3, #1
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d1e5      	bne.n	3dda <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3e0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d005      	beq.n	3e22 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e16:	9b01      	ldr	r3, [sp, #4]
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	4619      	mov	r1, r3
    3e1c:	2001      	movs	r0, #1
    3e1e:	f7ff fce9 	bl	37f4 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3e22:	bf00      	nop
    3e24:	b009      	add	sp, #36	; 0x24
    3e26:	f85d fb04 	ldr.w	pc, [sp], #4
    3e2a:	bf00      	nop
    3e2c:	40064000 	.word	0x40064000

00003e30 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3e30:	b500      	push	{lr}
    3e32:	b083      	sub	sp, #12
    3e34:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3e36:	9801      	ldr	r0, [sp, #4]
    3e38:	f000 f8c0 	bl	3fbc <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e3c:	bf00      	nop
    3e3e:	b003      	add	sp, #12
    3e40:	f85d fb04 	ldr.w	pc, [sp], #4

00003e44 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3e44:	b500      	push	{lr}
    3e46:	b083      	sub	sp, #12
    3e48:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e4a:	9b01      	ldr	r3, [sp, #4]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d002      	beq.n	3e56 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3e50:	9801      	ldr	r0, [sp, #4]
    3e52:	f000 f8c3 	bl	3fdc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e56:	bf00      	nop
    3e58:	b003      	add	sp, #12
    3e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00003e5e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3e5e:	b082      	sub	sp, #8
    3e60:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3e62:	4b11      	ldr	r3, [pc, #68]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e68:	4a0f      	ldr	r2, [pc, #60]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e6e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3e72:	4b0d      	ldr	r3, [pc, #52]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e74:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e78:	4a0b      	ldr	r2, [pc, #44]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3e7e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e88:	4a07      	ldr	r2, [pc, #28]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3e8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3e92:	4b05      	ldr	r3, [pc, #20]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e98:	4a03      	ldr	r2, [pc, #12]	; (3ea8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e9a:	f023 0301 	bic.w	r3, r3, #1
    3e9e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3ea2:	bf00      	nop
    3ea4:	b002      	add	sp, #8
    3ea6:	4770      	bx	lr
    3ea8:	40064000 	.word	0x40064000

00003eac <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3eac:	b082      	sub	sp, #8
    3eae:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3eb0:	9b01      	ldr	r3, [sp, #4]
    3eb2:	891b      	ldrh	r3, [r3, #8]
    3eb4:	2b01      	cmp	r3, #1
    3eb6:	d174      	bne.n	3fa2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3eb8:	9b01      	ldr	r3, [sp, #4]
    3eba:	7bdb      	ldrb	r3, [r3, #15]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d002      	beq.n	3ec6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3ec0:	2b01      	cmp	r3, #1
    3ec2:	d009      	beq.n	3ed8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3ec4:	e011      	b.n	3eea <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3ec6:	4b39      	ldr	r3, [pc, #228]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ec8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ecc:	4a37      	ldr	r2, [pc, #220]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ece:	f023 0308 	bic.w	r3, r3, #8
    3ed2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3ed6:	e008      	b.n	3eea <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3ed8:	4b34      	ldr	r3, [pc, #208]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ede:	4a33      	ldr	r2, [pc, #204]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ee0:	f043 0308 	orr.w	r3, r3, #8
    3ee4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3ee8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3eea:	4b30      	ldr	r3, [pc, #192]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ef0:	4a2e      	ldr	r2, [pc, #184]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ef2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3ef6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	685b      	ldr	r3, [r3, #4]
    3efe:	4a2c      	ldr	r2, [pc, #176]	; (3fb0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3f00:	4293      	cmp	r3, r2
    3f02:	d90d      	bls.n	3f20 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3f04:	9b01      	ldr	r3, [sp, #4]
    3f06:	685b      	ldr	r3, [r3, #4]
    3f08:	4a2a      	ldr	r2, [pc, #168]	; (3fb4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3f0a:	4293      	cmp	r3, r2
    3f0c:	d208      	bcs.n	3f20 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3f0e:	4b27      	ldr	r3, [pc, #156]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f14:	4a25      	ldr	r2, [pc, #148]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f16:	f043 0320 	orr.w	r3, r3, #32
    3f1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3f1e:	e007      	b.n	3f30 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3f20:	4b22      	ldr	r3, [pc, #136]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f26:	4a21      	ldr	r2, [pc, #132]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f28:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3f2c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3f30:	9b01      	ldr	r3, [sp, #4]
    3f32:	7b1b      	ldrb	r3, [r3, #12]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d108      	bne.n	3f4a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3f38:	4b1c      	ldr	r3, [pc, #112]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f3e:	4a1b      	ldr	r2, [pc, #108]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f40:	f043 0304 	orr.w	r3, r3, #4
    3f44:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3f48:	e007      	b.n	3f5a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3f4a:	4b18      	ldr	r3, [pc, #96]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f50:	4a16      	ldr	r2, [pc, #88]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f52:	f023 0304 	bic.w	r3, r3, #4
    3f56:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3f5a:	9b01      	ldr	r3, [sp, #4]
    3f5c:	7c1b      	ldrb	r3, [r3, #16]
    3f5e:	2b02      	cmp	r3, #2
    3f60:	d011      	beq.n	3f86 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3f62:	2b02      	cmp	r3, #2
    3f64:	dc14      	bgt.n	3f90 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3f66:	2b00      	cmp	r3, #0
    3f68:	d002      	beq.n	3f70 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3f6a:	2b01      	cmp	r3, #1
    3f6c:	d005      	beq.n	3f7a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3f6e:	e00f      	b.n	3f90 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f70:	4b0e      	ldr	r3, [pc, #56]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f72:	2201      	movs	r2, #1
    3f74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f78:	e014      	b.n	3fa4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f7a:	4b0c      	ldr	r3, [pc, #48]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f7c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3f80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f84:	e00e      	b.n	3fa4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f86:	4b09      	ldr	r3, [pc, #36]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f88:	4a0b      	ldr	r2, [pc, #44]	; (3fb8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3f8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3f8e:	e009      	b.n	3fa4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3f90:	4b06      	ldr	r3, [pc, #24]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3f96:	4a05      	ldr	r2, [pc, #20]	; (3fac <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f98:	f043 0301 	orr.w	r3, r3, #1
    3f9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3fa0:	e000      	b.n	3fa4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3fa2:	bf00      	nop
}
    3fa4:	bf00      	nop
    3fa6:	b002      	add	sp, #8
    3fa8:	4770      	bx	lr
    3faa:	bf00      	nop
    3fac:	40064000 	.word	0x40064000
    3fb0:	003d08ff 	.word	0x003d08ff
    3fb4:	007a1200 	.word	0x007a1200
    3fb8:	00030001 	.word	0x00030001

00003fbc <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3fbc:	b082      	sub	sp, #8
    3fbe:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3fc0:	4b05      	ldr	r3, [pc, #20]	; (3fd8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3fc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fc6:	4a04      	ldr	r2, [pc, #16]	; (3fd8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3fc8:	f023 0301 	bic.w	r3, r3, #1
    3fcc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3fd0:	bf00      	nop
    3fd2:	b002      	add	sp, #8
    3fd4:	4770      	bx	lr
    3fd6:	bf00      	nop
    3fd8:	40064000 	.word	0x40064000

00003fdc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3fdc:	b082      	sub	sp, #8
    3fde:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3fe0:	9b01      	ldr	r3, [sp, #4]
    3fe2:	891b      	ldrh	r3, [r3, #8]
    3fe4:	2b01      	cmp	r3, #1
    3fe6:	d107      	bne.n	3ff8 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3fe8:	4b05      	ldr	r3, [pc, #20]	; (4000 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3fea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fee:	4a04      	ldr	r2, [pc, #16]	; (4000 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3ff0:	f043 0301 	orr.w	r3, r3, #1
    3ff4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3ff8:	bf00      	nop
    3ffa:	b002      	add	sp, #8
    3ffc:	4770      	bx	lr
    3ffe:	bf00      	nop
    4000:	40064000 	.word	0x40064000

00004004 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    4004:	b082      	sub	sp, #8
    4006:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4008:	bf00      	nop
    400a:	b002      	add	sp, #8
    400c:	4770      	bx	lr

0000400e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    400e:	b082      	sub	sp, #8
    4010:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    4012:	2300      	movs	r3, #0
}
    4014:	4618      	mov	r0, r3
    4016:	b002      	add	sp, #8
    4018:	4770      	bx	lr

0000401a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    401a:	b082      	sub	sp, #8
    401c:	9001      	str	r0, [sp, #4]
    401e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    4020:	bf00      	nop
    4022:	b002      	add	sp, #8
    4024:	4770      	bx	lr
	...

00004028 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    4028:	b082      	sub	sp, #8
    402a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    402c:	bf00      	nop
    402e:	b002      	add	sp, #8
    4030:	4770      	bx	lr

00004032 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    4032:	b082      	sub	sp, #8
    4034:	9001      	str	r0, [sp, #4]
    4036:	460b      	mov	r3, r1
    4038:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    403c:	bf00      	nop
    403e:	b002      	add	sp, #8
    4040:	4770      	bx	lr

00004042 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    4042:	b500      	push	{lr}
    4044:	b083      	sub	sp, #12
    4046:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	2b00      	cmp	r3, #0
    404c:	d002      	beq.n	4054 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    404e:	9801      	ldr	r0, [sp, #4]
    4050:	f000 f8e7 	bl	4222 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4054:	bf00      	nop
    4056:	b003      	add	sp, #12
    4058:	f85d fb04 	ldr.w	pc, [sp], #4

0000405c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    405c:	b500      	push	{lr}
    405e:	b085      	sub	sp, #20
    4060:	9001      	str	r0, [sp, #4]
    4062:	460b      	mov	r3, r1
    4064:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4068:	9b01      	ldr	r3, [sp, #4]
    406a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    406c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4070:	2b00      	cmp	r3, #0
    4072:	d003      	beq.n	407c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    4074:	2300      	movs	r3, #0
    4076:	f8ad 300c 	strh.w	r3, [sp, #12]
    407a:	e002      	b.n	4082 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    407c:	2301      	movs	r3, #1
    407e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    4082:	ab02      	add	r3, sp, #8
    4084:	4618      	mov	r0, r3
    4086:	f7ff ffdc 	bl	4042 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    408a:	bf00      	nop
    408c:	b005      	add	sp, #20
    408e:	f85d fb04 	ldr.w	pc, [sp], #4

00004092 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    4092:	b500      	push	{lr}
    4094:	b083      	sub	sp, #12
    4096:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4098:	9b01      	ldr	r3, [sp, #4]
    409a:	2b00      	cmp	r3, #0
    409c:	d002      	beq.n	40a4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    409e:	9801      	ldr	r0, [sp, #4]
    40a0:	f000 f8d6 	bl	4250 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40a4:	bf00      	nop
    40a6:	b003      	add	sp, #12
    40a8:	f85d fb04 	ldr.w	pc, [sp], #4

000040ac <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    40ac:	b500      	push	{lr}
    40ae:	b085      	sub	sp, #20
    40b0:	9001      	str	r0, [sp, #4]
    40b2:	460b      	mov	r3, r1
    40b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    40b8:	9b01      	ldr	r3, [sp, #4]
    40ba:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    40bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d003      	beq.n	40cc <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    40c4:	2300      	movs	r3, #0
    40c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    40ca:	e002      	b.n	40d2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    40cc:	2301      	movs	r3, #1
    40ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    40d2:	ab02      	add	r3, sp, #8
    40d4:	4618      	mov	r0, r3
    40d6:	f7ff ffdc 	bl	4092 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    40da:	bf00      	nop
    40dc:	b005      	add	sp, #20
    40de:	f85d fb04 	ldr.w	pc, [sp], #4

000040e2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    40e2:	b500      	push	{lr}
    40e4:	b083      	sub	sp, #12
    40e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40e8:	9b01      	ldr	r3, [sp, #4]
    40ea:	2b00      	cmp	r3, #0
    40ec:	d002      	beq.n	40f4 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    40ee:	9801      	ldr	r0, [sp, #4]
    40f0:	f000 f8c6 	bl	4280 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40f4:	bf00      	nop
    40f6:	b003      	add	sp, #12
    40f8:	f85d fb04 	ldr.w	pc, [sp], #4

000040fc <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    40fc:	b500      	push	{lr}
    40fe:	b085      	sub	sp, #20
    4100:	9001      	str	r0, [sp, #4]
    4102:	460b      	mov	r3, r1
    4104:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4108:	9b01      	ldr	r3, [sp, #4]
    410a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    410c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4110:	2b00      	cmp	r3, #0
    4112:	d003      	beq.n	411c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    4114:	2300      	movs	r3, #0
    4116:	f8ad 300c 	strh.w	r3, [sp, #12]
    411a:	e002      	b.n	4122 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    411c:	2301      	movs	r3, #1
    411e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    4122:	ab02      	add	r3, sp, #8
    4124:	4618      	mov	r0, r3
    4126:	f7ff ffdc 	bl	40e2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    412a:	bf00      	nop
    412c:	b005      	add	sp, #20
    412e:	f85d fb04 	ldr.w	pc, [sp], #4

00004132 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    4132:	b500      	push	{lr}
    4134:	b083      	sub	sp, #12
    4136:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4138:	9b01      	ldr	r3, [sp, #4]
    413a:	2b00      	cmp	r3, #0
    413c:	d002      	beq.n	4144 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    413e:	9801      	ldr	r0, [sp, #4]
    4140:	f000 f8b6 	bl	42b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4144:	bf00      	nop
    4146:	b003      	add	sp, #12
    4148:	f85d fb04 	ldr.w	pc, [sp], #4

0000414c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    414c:	b500      	push	{lr}
    414e:	b085      	sub	sp, #20
    4150:	9001      	str	r0, [sp, #4]
    4152:	460b      	mov	r3, r1
    4154:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4158:	9b01      	ldr	r3, [sp, #4]
    415a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    415c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4160:	2b00      	cmp	r3, #0
    4162:	d003      	beq.n	416c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    4164:	2300      	movs	r3, #0
    4166:	f8ad 300c 	strh.w	r3, [sp, #12]
    416a:	e002      	b.n	4172 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    416c:	2301      	movs	r3, #1
    416e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    4172:	ab02      	add	r3, sp, #8
    4174:	4618      	mov	r0, r3
    4176:	f7ff ffdc 	bl	4132 <Clock_Ip_ClockSetPccCgcEnable>
}
    417a:	bf00      	nop
    417c:	b005      	add	sp, #20
    417e:	f85d fb04 	ldr.w	pc, [sp], #4

00004182 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    4182:	b500      	push	{lr}
    4184:	b083      	sub	sp, #12
    4186:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4188:	9b01      	ldr	r3, [sp, #4]
    418a:	2b00      	cmp	r3, #0
    418c:	d002      	beq.n	4194 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    418e:	9801      	ldr	r0, [sp, #4]
    4190:	f000 f8bc 	bl	430c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4194:	bf00      	nop
    4196:	b003      	add	sp, #12
    4198:	f85d fb04 	ldr.w	pc, [sp], #4

0000419c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    419c:	b500      	push	{lr}
    419e:	b085      	sub	sp, #20
    41a0:	9001      	str	r0, [sp, #4]
    41a2:	460b      	mov	r3, r1
    41a4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    41a8:	9b01      	ldr	r3, [sp, #4]
    41aa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    41ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d003      	beq.n	41bc <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    41b4:	2300      	movs	r3, #0
    41b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    41ba:	e002      	b.n	41c2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    41bc:	2301      	movs	r3, #1
    41be:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    41c2:	ab02      	add	r3, sp, #8
    41c4:	4618      	mov	r0, r3
    41c6:	f7ff ffdc 	bl	4182 <Clock_Ip_ClockSetSimGate>
}
    41ca:	bf00      	nop
    41cc:	b005      	add	sp, #20
    41ce:	f85d fb04 	ldr.w	pc, [sp], #4

000041d2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    41d2:	b500      	push	{lr}
    41d4:	b083      	sub	sp, #12
    41d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	2b00      	cmp	r3, #0
    41dc:	d002      	beq.n	41e4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    41de:	9801      	ldr	r0, [sp, #4]
    41e0:	f000 f8c0 	bl	4364 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e4:	bf00      	nop
    41e6:	b003      	add	sp, #12
    41e8:	f85d fb04 	ldr.w	pc, [sp], #4

000041ec <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    41ec:	b500      	push	{lr}
    41ee:	b085      	sub	sp, #20
    41f0:	9001      	str	r0, [sp, #4]
    41f2:	460b      	mov	r3, r1
    41f4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    41f8:	9b01      	ldr	r3, [sp, #4]
    41fa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    41fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4200:	2b00      	cmp	r3, #0
    4202:	d003      	beq.n	420c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    4204:	2300      	movs	r3, #0
    4206:	f8ad 300c 	strh.w	r3, [sp, #12]
    420a:	e002      	b.n	4212 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    420c:	2301      	movs	r3, #1
    420e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    4212:	ab02      	add	r3, sp, #8
    4214:	4618      	mov	r0, r3
    4216:	f7ff ffdc 	bl	41d2 <Clock_Ip_ClockSetSimTraceEnable>
}
    421a:	bf00      	nop
    421c:	b005      	add	sp, #20
    421e:	f85d fb04 	ldr.w	pc, [sp], #4

00004222 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4222:	b084      	sub	sp, #16
    4224:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    4226:	4b09      	ldr	r3, [pc, #36]	; (424c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4228:	691b      	ldr	r3, [r3, #16]
    422a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    422c:	9b03      	ldr	r3, [sp, #12]
    422e:	f023 0301 	bic.w	r3, r3, #1
    4232:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4234:	9b01      	ldr	r3, [sp, #4]
    4236:	889b      	ldrh	r3, [r3, #4]
    4238:	461a      	mov	r2, r3
    423a:	9b03      	ldr	r3, [sp, #12]
    423c:	4313      	orrs	r3, r2
    423e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4240:	4a02      	ldr	r2, [pc, #8]	; (424c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4242:	9b03      	ldr	r3, [sp, #12]
    4244:	6113      	str	r3, [r2, #16]
}
    4246:	bf00      	nop
    4248:	b004      	add	sp, #16
    424a:	4770      	bx	lr
    424c:	40048000 	.word	0x40048000

00004250 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4250:	b084      	sub	sp, #16
    4252:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    4254:	4b09      	ldr	r3, [pc, #36]	; (427c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4256:	691b      	ldr	r3, [r3, #16]
    4258:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    425a:	9b03      	ldr	r3, [sp, #12]
    425c:	f023 0302 	bic.w	r3, r3, #2
    4260:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	889b      	ldrh	r3, [r3, #4]
    4266:	005b      	lsls	r3, r3, #1
    4268:	9a03      	ldr	r2, [sp, #12]
    426a:	4313      	orrs	r3, r2
    426c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    426e:	4a03      	ldr	r2, [pc, #12]	; (427c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4270:	9b03      	ldr	r3, [sp, #12]
    4272:	6113      	str	r3, [r2, #16]
}
    4274:	bf00      	nop
    4276:	b004      	add	sp, #16
    4278:	4770      	bx	lr
    427a:	bf00      	nop
    427c:	40048000 	.word	0x40048000

00004280 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4280:	b084      	sub	sp, #16
    4282:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    4284:	4b09      	ldr	r3, [pc, #36]	; (42ac <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4286:	685b      	ldr	r3, [r3, #4]
    4288:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    428a:	9b03      	ldr	r3, [sp, #12]
    428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4290:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    4292:	9b01      	ldr	r3, [sp, #4]
    4294:	889b      	ldrh	r3, [r3, #4]
    4296:	02db      	lsls	r3, r3, #11
    4298:	9a03      	ldr	r2, [sp, #12]
    429a:	4313      	orrs	r3, r2
    429c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    429e:	4a03      	ldr	r2, [pc, #12]	; (42ac <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    42a0:	9b03      	ldr	r3, [sp, #12]
    42a2:	6053      	str	r3, [r2, #4]
}
    42a4:	bf00      	nop
    42a6:	b004      	add	sp, #16
    42a8:	4770      	bx	lr
    42aa:	bf00      	nop
    42ac:	40048000 	.word	0x40048000

000042b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    42b0:	b084      	sub	sp, #16
    42b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    42b4:	4913      	ldr	r1, [pc, #76]	; (4304 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    42b6:	9b01      	ldr	r3, [sp, #4]
    42b8:	681a      	ldr	r2, [r3, #0]
    42ba:	4813      	ldr	r0, [pc, #76]	; (4308 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    42bc:	4613      	mov	r3, r2
    42be:	00db      	lsls	r3, r3, #3
    42c0:	4413      	add	r3, r2
    42c2:	4403      	add	r3, r0
    42c4:	3306      	adds	r3, #6
    42c6:	781b      	ldrb	r3, [r3, #0]
    42c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    42cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    42ce:	9b03      	ldr	r3, [sp, #12]
    42d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    42d4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    42d6:	9b01      	ldr	r3, [sp, #4]
    42d8:	889b      	ldrh	r3, [r3, #4]
    42da:	079b      	lsls	r3, r3, #30
    42dc:	9a03      	ldr	r2, [sp, #12]
    42de:	4313      	orrs	r3, r2
    42e0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    42e2:	4908      	ldr	r1, [pc, #32]	; (4304 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    42e4:	9b01      	ldr	r3, [sp, #4]
    42e6:	681a      	ldr	r2, [r3, #0]
    42e8:	4807      	ldr	r0, [pc, #28]	; (4308 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    42ea:	4613      	mov	r3, r2
    42ec:	00db      	lsls	r3, r3, #3
    42ee:	4413      	add	r3, r2
    42f0:	4403      	add	r3, r0
    42f2:	3306      	adds	r3, #6
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	461a      	mov	r2, r3
    42f8:	9b03      	ldr	r3, [sp, #12]
    42fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    42fe:	bf00      	nop
    4300:	b004      	add	sp, #16
    4302:	4770      	bx	lr
    4304:	40065000 	.word	0x40065000
    4308:	00016000 	.word	0x00016000

0000430c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    430c:	b086      	sub	sp, #24
    430e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    4310:	9b01      	ldr	r3, [sp, #4]
    4312:	889b      	ldrh	r3, [r3, #4]
    4314:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    4316:	9b01      	ldr	r3, [sp, #4]
    4318:	681a      	ldr	r2, [r3, #0]
    431a:	4910      	ldr	r1, [pc, #64]	; (435c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    431c:	4613      	mov	r3, r2
    431e:	00db      	lsls	r3, r3, #3
    4320:	4413      	add	r3, r2
    4322:	440b      	add	r3, r1
    4324:	3306      	adds	r3, #6
    4326:	781b      	ldrb	r3, [r3, #0]
    4328:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    432a:	4b0d      	ldr	r3, [pc, #52]	; (4360 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    432e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    4330:	2201      	movs	r2, #1
    4332:	9b04      	ldr	r3, [sp, #16]
    4334:	fa02 f303 	lsl.w	r3, r2, r3
    4338:	43db      	mvns	r3, r3
    433a:	9a03      	ldr	r2, [sp, #12]
    433c:	4013      	ands	r3, r2
    433e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4340:	9a05      	ldr	r2, [sp, #20]
    4342:	9b04      	ldr	r3, [sp, #16]
    4344:	fa02 f303 	lsl.w	r3, r2, r3
    4348:	9a03      	ldr	r2, [sp, #12]
    434a:	4313      	orrs	r3, r2
    434c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    434e:	4a04      	ldr	r2, [pc, #16]	; (4360 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4350:	9b03      	ldr	r3, [sp, #12]
    4352:	6413      	str	r3, [r2, #64]	; 0x40
}
    4354:	bf00      	nop
    4356:	b006      	add	sp, #24
    4358:	4770      	bx	lr
    435a:	bf00      	nop
    435c:	00016000 	.word	0x00016000
    4360:	40048000 	.word	0x40048000

00004364 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4364:	b084      	sub	sp, #16
    4366:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4368:	4b0a      	ldr	r3, [pc, #40]	; (4394 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    436a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    436c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	889b      	ldrh	r3, [r3, #4]
    4372:	2b01      	cmp	r3, #1
    4374:	d104      	bne.n	4380 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    4376:	9b03      	ldr	r3, [sp, #12]
    4378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    437c:	9303      	str	r3, [sp, #12]
    437e:	e003      	b.n	4388 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4380:	9b03      	ldr	r3, [sp, #12]
    4382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    4386:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    4388:	4a02      	ldr	r2, [pc, #8]	; (4394 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    438a:	9b03      	ldr	r3, [sp, #12]
    438c:	6693      	str	r3, [r2, #104]	; 0x68
}
    438e:	bf00      	nop
    4390:	b004      	add	sp, #16
    4392:	4770      	bx	lr
    4394:	40048000 	.word	0x40048000

00004398 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    4398:	b082      	sub	sp, #8
    439a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    439c:	bf00      	nop
    439e:	b002      	add	sp, #8
    43a0:	4770      	bx	lr

000043a2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    43a2:	b082      	sub	sp, #8
    43a4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    43a6:	bf00      	nop
    43a8:	b002      	add	sp, #8
    43aa:	4770      	bx	lr

000043ac <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    43ac:	b500      	push	{lr}
    43ae:	b083      	sub	sp, #12
    43b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43b2:	9b01      	ldr	r3, [sp, #4]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d002      	beq.n	43be <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    43b8:	9801      	ldr	r0, [sp, #4]
    43ba:	f000 f8d1 	bl	4560 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43be:	bf00      	nop
    43c0:	b003      	add	sp, #12
    43c2:	f85d fb04 	ldr.w	pc, [sp], #4

000043c6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    43c6:	b500      	push	{lr}
    43c8:	b083      	sub	sp, #12
    43ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43cc:	9b01      	ldr	r3, [sp, #4]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d002      	beq.n	43d8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    43d2:	9801      	ldr	r0, [sp, #4]
    43d4:	f000 f950 	bl	4678 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43d8:	bf00      	nop
    43da:	b003      	add	sp, #12
    43dc:	f85d fb04 	ldr.w	pc, [sp], #4

000043e0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    43e0:	b500      	push	{lr}
    43e2:	b083      	sub	sp, #12
    43e4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    43e6:	9801      	ldr	r0, [sp, #4]
    43e8:	f000 f98e 	bl	4708 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    43ec:	bf00      	nop
    43ee:	b003      	add	sp, #12
    43f0:	f85d fb04 	ldr.w	pc, [sp], #4

000043f4 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    43f4:	b500      	push	{lr}
    43f6:	b083      	sub	sp, #12
    43f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43fa:	9b01      	ldr	r3, [sp, #4]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d002      	beq.n	4406 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    4400:	9801      	ldr	r0, [sp, #4]
    4402:	f000 f999 	bl	4738 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4406:	bf00      	nop
    4408:	b003      	add	sp, #12
    440a:	f85d fb04 	ldr.w	pc, [sp], #4

0000440e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    440e:	b500      	push	{lr}
    4410:	b083      	sub	sp, #12
    4412:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	2b00      	cmp	r3, #0
    4418:	d002      	beq.n	4420 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    441a:	9801      	ldr	r0, [sp, #4]
    441c:	f000 f9b0 	bl	4780 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4420:	bf00      	nop
    4422:	b003      	add	sp, #12
    4424:	f85d fb04 	ldr.w	pc, [sp], #4

00004428 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    4428:	b500      	push	{lr}
    442a:	b083      	sub	sp, #12
    442c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    442e:	9801      	ldr	r0, [sp, #4]
    4430:	f000 f9ba 	bl	47a8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4434:	bf00      	nop
    4436:	b003      	add	sp, #12
    4438:	f85d fb04 	ldr.w	pc, [sp], #4

0000443c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    443c:	b500      	push	{lr}
    443e:	b083      	sub	sp, #12
    4440:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4442:	9b01      	ldr	r3, [sp, #4]
    4444:	2b00      	cmp	r3, #0
    4446:	d002      	beq.n	444e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    4448:	9801      	ldr	r0, [sp, #4]
    444a:	f000 f9bd 	bl	47c8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    444e:	bf00      	nop
    4450:	b003      	add	sp, #12
    4452:	f85d fb04 	ldr.w	pc, [sp], #4

00004456 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4456:	b500      	push	{lr}
    4458:	b083      	sub	sp, #12
    445a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    445c:	9b01      	ldr	r3, [sp, #4]
    445e:	2b00      	cmp	r3, #0
    4460:	d002      	beq.n	4468 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    4462:	9801      	ldr	r0, [sp, #4]
    4464:	f000 f9d4 	bl	4810 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4468:	bf00      	nop
    446a:	b003      	add	sp, #12
    446c:	f85d fb04 	ldr.w	pc, [sp], #4

00004470 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4470:	b500      	push	{lr}
    4472:	b083      	sub	sp, #12
    4474:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    4476:	9801      	ldr	r0, [sp, #4]
    4478:	f000 f9de 	bl	4838 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    447c:	bf00      	nop
    447e:	b003      	add	sp, #12
    4480:	f85d fb04 	ldr.w	pc, [sp], #4

00004484 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    4484:	b500      	push	{lr}
    4486:	b089      	sub	sp, #36	; 0x24
    4488:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    448a:	2300      	movs	r3, #0
    448c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    4490:	4b20      	ldr	r3, [pc, #128]	; (4514 <SetInputSouceSytemClock+0x90>)
    4492:	695b      	ldr	r3, [r3, #20]
    4494:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4496:	9b06      	ldr	r3, [sp, #24]
    4498:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    449c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    449e:	9b01      	ldr	r3, [sp, #4]
    44a0:	061b      	lsls	r3, r3, #24
    44a2:	9a06      	ldr	r2, [sp, #24]
    44a4:	4313      	orrs	r3, r2
    44a6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    44a8:	4a1a      	ldr	r2, [pc, #104]	; (4514 <SetInputSouceSytemClock+0x90>)
    44aa:	9b06      	ldr	r3, [sp, #24]
    44ac:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    44ae:	aa02      	add	r2, sp, #8
    44b0:	a903      	add	r1, sp, #12
    44b2:	a804      	add	r0, sp, #16
    44b4:	f24c 3350 	movw	r3, #50000	; 0xc350
    44b8:	f7ff f9ac 	bl	3814 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    44bc:	4b15      	ldr	r3, [pc, #84]	; (4514 <SetInputSouceSytemClock+0x90>)
    44be:	691b      	ldr	r3, [r3, #16]
    44c0:	0e1b      	lsrs	r3, r3, #24
    44c2:	f003 030f 	and.w	r3, r3, #15
    44c6:	9a01      	ldr	r2, [sp, #4]
    44c8:	429a      	cmp	r2, r3
    44ca:	bf0c      	ite	eq
    44cc:	2301      	moveq	r3, #1
    44ce:	2300      	movne	r3, #0
    44d0:	b2db      	uxtb	r3, r3
    44d2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    44d4:	9a02      	ldr	r2, [sp, #8]
    44d6:	a903      	add	r1, sp, #12
    44d8:	ab04      	add	r3, sp, #16
    44da:	4618      	mov	r0, r3
    44dc:	f7ff f9b4 	bl	3848 <Clock_Ip_TimeoutExpired>
    44e0:	4603      	mov	r3, r0
    44e2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    44e6:	9b05      	ldr	r3, [sp, #20]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d106      	bne.n	44fa <SetInputSouceSytemClock+0x76>
    44ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44f0:	f083 0301 	eor.w	r3, r3, #1
    44f4:	b2db      	uxtb	r3, r3
    44f6:	2b00      	cmp	r3, #0
    44f8:	d1e0      	bne.n	44bc <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    44fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44fe:	2b00      	cmp	r3, #0
    4500:	d003      	beq.n	450a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4502:	2105      	movs	r1, #5
    4504:	2001      	movs	r0, #1
    4506:	f7ff f975 	bl	37f4 <Clock_Ip_ReportClockErrors>
    }
}
    450a:	bf00      	nop
    450c:	b009      	add	sp, #36	; 0x24
    450e:	f85d fb04 	ldr.w	pc, [sp], #4
    4512:	bf00      	nop
    4514:	40064000 	.word	0x40064000

00004518 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4518:	b500      	push	{lr}
    451a:	b083      	sub	sp, #12
    451c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    451e:	9b01      	ldr	r3, [sp, #4]
    4520:	2b00      	cmp	r3, #0
    4522:	d002      	beq.n	452a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    4524:	9801      	ldr	r0, [sp, #4]
    4526:	f000 f997 	bl	4858 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    452a:	bf00      	nop
    452c:	b003      	add	sp, #12
    452e:	f85d fb04 	ldr.w	pc, [sp], #4

00004532 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4532:	b500      	push	{lr}
    4534:	b083      	sub	sp, #12
    4536:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4538:	9b01      	ldr	r3, [sp, #4]
    453a:	2b00      	cmp	r3, #0
    453c:	d002      	beq.n	4544 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    453e:	9801      	ldr	r0, [sp, #4]
    4540:	f000 fa7e 	bl	4a40 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4544:	bf00      	nop
    4546:	b003      	add	sp, #12
    4548:	f85d fb04 	ldr.w	pc, [sp], #4

0000454c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    454c:	b500      	push	{lr}
    454e:	b083      	sub	sp, #12
    4550:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    4552:	9801      	ldr	r0, [sp, #4]
    4554:	f000 fab8 	bl	4ac8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4558:	bf00      	nop
    455a:	b003      	add	sp, #12
    455c:	f85d fb04 	ldr.w	pc, [sp], #4

00004560 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4560:	b500      	push	{lr}
    4562:	b08b      	sub	sp, #44	; 0x2c
    4564:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4566:	2300      	movs	r3, #0
    4568:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    456c:	9b01      	ldr	r3, [sp, #4]
    456e:	2b00      	cmp	r3, #0
    4570:	d10b      	bne.n	458a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    4572:	2305      	movs	r3, #5
    4574:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    4576:	2301      	movs	r3, #1
    4578:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    457c:	2301      	movs	r3, #1
    457e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    4582:	2301      	movs	r3, #1
    4584:	f88d 3010 	strb.w	r3, [sp, #16]
    4588:	e00e      	b.n	45a8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    458a:	9b01      	ldr	r3, [sp, #4]
    458c:	681b      	ldr	r3, [r3, #0]
    458e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    4590:	9b01      	ldr	r3, [sp, #4]
    4592:	79db      	ldrb	r3, [r3, #7]
    4594:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    4598:	9b01      	ldr	r3, [sp, #4]
    459a:	889b      	ldrh	r3, [r3, #4]
    459c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    45a0:	9b01      	ldr	r3, [sp, #4]
    45a2:	7a1b      	ldrb	r3, [r3, #8]
    45a4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    45a8:	4b32      	ldr	r3, [pc, #200]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45ae:	4a31      	ldr	r2, [pc, #196]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    45b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    45b8:	4b2e      	ldr	r3, [pc, #184]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45be:	4a2d      	ldr	r2, [pc, #180]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45c0:	f023 0301 	bic.w	r3, r3, #1
    45c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    45c8:	4b2a      	ldr	r3, [pc, #168]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45ce:	4a29      	ldr	r2, [pc, #164]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45d0:	f023 0304 	bic.w	r3, r3, #4
    45d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    45d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    45dc:	2b01      	cmp	r3, #1
    45de:	d144      	bne.n	466a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    45e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    45e4:	4a23      	ldr	r2, [pc, #140]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45e6:	f003 0301 	and.w	r3, r3, #1
    45ea:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    45ee:	4b21      	ldr	r3, [pc, #132]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45f4:	4a1f      	ldr	r2, [pc, #124]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45f6:	f043 0301 	orr.w	r3, r3, #1
    45fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    45fe:	4b1d      	ldr	r3, [pc, #116]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4600:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4604:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4608:	009b      	lsls	r3, r3, #2
    460a:	f003 0304 	and.w	r3, r3, #4
    460e:	4919      	ldr	r1, [pc, #100]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4610:	4313      	orrs	r3, r2
    4612:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4616:	aa05      	add	r2, sp, #20
    4618:	a906      	add	r1, sp, #24
    461a:	a807      	add	r0, sp, #28
    461c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4620:	f7ff f8f8 	bl	3814 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4624:	4b13      	ldr	r3, [pc, #76]	; (4674 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4626:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    462a:	0e1b      	lsrs	r3, r3, #24
    462c:	f003 0301 	and.w	r3, r3, #1
    4630:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4632:	9a05      	ldr	r2, [sp, #20]
    4634:	a906      	add	r1, sp, #24
    4636:	ab07      	add	r3, sp, #28
    4638:	4618      	mov	r0, r3
    463a:	f7ff f905 	bl	3848 <Clock_Ip_TimeoutExpired>
    463e:	4603      	mov	r3, r0
    4640:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4644:	9b08      	ldr	r3, [sp, #32]
    4646:	2b00      	cmp	r3, #0
    4648:	d106      	bne.n	4658 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    464a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    464e:	f083 0301 	eor.w	r3, r3, #1
    4652:	b2db      	uxtb	r3, r3
    4654:	2b00      	cmp	r3, #0
    4656:	d1e5      	bne.n	4624 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4658:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    465c:	2b00      	cmp	r3, #0
    465e:	d004      	beq.n	466a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4660:	9b02      	ldr	r3, [sp, #8]
    4662:	4619      	mov	r1, r3
    4664:	2001      	movs	r0, #1
    4666:	f7ff f8c5 	bl	37f4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    466a:	bf00      	nop
    466c:	b00b      	add	sp, #44	; 0x2c
    466e:	f85d fb04 	ldr.w	pc, [sp], #4
    4672:	bf00      	nop
    4674:	40064000 	.word	0x40064000

00004678 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4678:	b500      	push	{lr}
    467a:	b089      	sub	sp, #36	; 0x24
    467c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    467e:	2300      	movs	r3, #0
    4680:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4684:	4b1f      	ldr	r3, [pc, #124]	; (4704 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4686:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    468a:	4a1e      	ldr	r2, [pc, #120]	; (4704 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    468c:	f043 0301 	orr.w	r3, r3, #1
    4690:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    4694:	4b1b      	ldr	r3, [pc, #108]	; (4704 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4696:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    469a:	4a1a      	ldr	r2, [pc, #104]	; (4704 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    469c:	f043 0304 	orr.w	r3, r3, #4
    46a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    46a4:	aa03      	add	r2, sp, #12
    46a6:	a904      	add	r1, sp, #16
    46a8:	a805      	add	r0, sp, #20
    46aa:	f24c 3350 	movw	r3, #50000	; 0xc350
    46ae:	f7ff f8b1 	bl	3814 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    46b2:	4b14      	ldr	r3, [pc, #80]	; (4704 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    46b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46b8:	0e1b      	lsrs	r3, r3, #24
    46ba:	f003 0301 	and.w	r3, r3, #1
    46be:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    46c0:	9a03      	ldr	r2, [sp, #12]
    46c2:	a904      	add	r1, sp, #16
    46c4:	ab05      	add	r3, sp, #20
    46c6:	4618      	mov	r0, r3
    46c8:	f7ff f8be 	bl	3848 <Clock_Ip_TimeoutExpired>
    46cc:	4603      	mov	r3, r0
    46ce:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    46d2:	9b06      	ldr	r3, [sp, #24]
    46d4:	2b00      	cmp	r3, #0
    46d6:	d106      	bne.n	46e6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    46d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46dc:	f083 0301 	eor.w	r3, r3, #1
    46e0:	b2db      	uxtb	r3, r3
    46e2:	2b00      	cmp	r3, #0
    46e4:	d1e5      	bne.n	46b2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    46e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d005      	beq.n	46fa <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    46ee:	9b01      	ldr	r3, [sp, #4]
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	4619      	mov	r1, r3
    46f4:	2001      	movs	r0, #1
    46f6:	f7ff f87d 	bl	37f4 <Clock_Ip_ReportClockErrors>
    }
}
    46fa:	bf00      	nop
    46fc:	b009      	add	sp, #36	; 0x24
    46fe:	f85d fb04 	ldr.w	pc, [sp], #4
    4702:	bf00      	nop
    4704:	40064000 	.word	0x40064000

00004708 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    4708:	b082      	sub	sp, #8
    470a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    470c:	4b09      	ldr	r3, [pc, #36]	; (4734 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    470e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4712:	4a08      	ldr	r2, [pc, #32]	; (4734 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4714:	f023 0301 	bic.w	r3, r3, #1
    4718:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    471c:	4b05      	ldr	r3, [pc, #20]	; (4734 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    471e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4722:	4a04      	ldr	r2, [pc, #16]	; (4734 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4724:	f023 0304 	bic.w	r3, r3, #4
    4728:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    472c:	bf00      	nop
    472e:	b002      	add	sp, #8
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	40064000 	.word	0x40064000

00004738 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4738:	b082      	sub	sp, #8
    473a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    473c:	4b0f      	ldr	r3, [pc, #60]	; (477c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    473e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4742:	4a0e      	ldr	r2, [pc, #56]	; (477c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4744:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4748:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    474c:	4b0b      	ldr	r3, [pc, #44]	; (477c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    474e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4752:	4a0a      	ldr	r2, [pc, #40]	; (477c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4754:	f023 0304 	bic.w	r3, r3, #4
    4758:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    475c:	4b07      	ldr	r3, [pc, #28]	; (477c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    475e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4762:	9b01      	ldr	r3, [sp, #4]
    4764:	7a1b      	ldrb	r3, [r3, #8]
    4766:	009b      	lsls	r3, r3, #2
    4768:	f003 0304 	and.w	r3, r3, #4
    476c:	4903      	ldr	r1, [pc, #12]	; (477c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    476e:	4313      	orrs	r3, r2
    4770:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4774:	bf00      	nop
    4776:	b002      	add	sp, #8
    4778:	4770      	bx	lr
    477a:	bf00      	nop
    477c:	40064000 	.word	0x40064000

00004780 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4780:	b082      	sub	sp, #8
    4782:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4784:	9b01      	ldr	r3, [sp, #4]
    4786:	889b      	ldrh	r3, [r3, #4]
    4788:	2b01      	cmp	r3, #1
    478a:	d107      	bne.n	479c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    478c:	4b05      	ldr	r3, [pc, #20]	; (47a4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    478e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4792:	4a04      	ldr	r2, [pc, #16]	; (47a4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4794:	f043 0304 	orr.w	r3, r3, #4
    4798:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    479c:	bf00      	nop
    479e:	b002      	add	sp, #8
    47a0:	4770      	bx	lr
    47a2:	bf00      	nop
    47a4:	40064000 	.word	0x40064000

000047a8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    47a8:	b082      	sub	sp, #8
    47aa:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    47ac:	4b05      	ldr	r3, [pc, #20]	; (47c4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    47ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47b2:	4a04      	ldr	r2, [pc, #16]	; (47c4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    47b4:	f023 0304 	bic.w	r3, r3, #4
    47b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    47bc:	bf00      	nop
    47be:	b002      	add	sp, #8
    47c0:	4770      	bx	lr
    47c2:	bf00      	nop
    47c4:	40064000 	.word	0x40064000

000047c8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    47c8:	b082      	sub	sp, #8
    47ca:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    47cc:	4b0f      	ldr	r3, [pc, #60]	; (480c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47d2:	4a0e      	ldr	r2, [pc, #56]	; (480c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    47d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    47dc:	4b0b      	ldr	r3, [pc, #44]	; (480c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47e2:	4a0a      	ldr	r2, [pc, #40]	; (480c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47e4:	f023 0302 	bic.w	r3, r3, #2
    47e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    47ec:	4b07      	ldr	r3, [pc, #28]	; (480c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47f2:	9b01      	ldr	r3, [sp, #4]
    47f4:	7a5b      	ldrb	r3, [r3, #9]
    47f6:	005b      	lsls	r3, r3, #1
    47f8:	f003 0302 	and.w	r3, r3, #2
    47fc:	4903      	ldr	r1, [pc, #12]	; (480c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47fe:	4313      	orrs	r3, r2
    4800:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4804:	bf00      	nop
    4806:	b002      	add	sp, #8
    4808:	4770      	bx	lr
    480a:	bf00      	nop
    480c:	40064000 	.word	0x40064000

00004810 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4810:	b082      	sub	sp, #8
    4812:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4814:	9b01      	ldr	r3, [sp, #4]
    4816:	889b      	ldrh	r3, [r3, #4]
    4818:	2b01      	cmp	r3, #1
    481a:	d107      	bne.n	482c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    481c:	4b05      	ldr	r3, [pc, #20]	; (4834 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    481e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4822:	4a04      	ldr	r2, [pc, #16]	; (4834 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4824:	f043 0302 	orr.w	r3, r3, #2
    4828:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    482c:	bf00      	nop
    482e:	b002      	add	sp, #8
    4830:	4770      	bx	lr
    4832:	bf00      	nop
    4834:	40064000 	.word	0x40064000

00004838 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4838:	b082      	sub	sp, #8
    483a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    483c:	4b05      	ldr	r3, [pc, #20]	; (4854 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    483e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4842:	4a04      	ldr	r2, [pc, #16]	; (4854 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4844:	f023 0302 	bic.w	r3, r3, #2
    4848:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    484c:	bf00      	nop
    484e:	b002      	add	sp, #8
    4850:	4770      	bx	lr
    4852:	bf00      	nop
    4854:	40064000 	.word	0x40064000

00004858 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4858:	b500      	push	{lr}
    485a:	b08b      	sub	sp, #44	; 0x2c
    485c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    485e:	9b01      	ldr	r3, [sp, #4]
    4860:	681a      	ldr	r2, [r3, #0]
    4862:	4975      	ldr	r1, [pc, #468]	; (4a38 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4864:	4613      	mov	r3, r2
    4866:	00db      	lsls	r3, r3, #3
    4868:	4413      	add	r3, r2
    486a:	440b      	add	r3, r1
    486c:	781b      	ldrb	r3, [r3, #0]
    486e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4870:	2300      	movs	r3, #0
    4872:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    4876:	2300      	movs	r3, #0
    4878:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    487c:	4b6f      	ldr	r3, [pc, #444]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    487e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4882:	4a6e      	ldr	r2, [pc, #440]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4884:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4888:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    488c:	4b6b      	ldr	r3, [pc, #428]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    488e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4896:	2b00      	cmp	r3, #0
    4898:	d07d      	beq.n	4996 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    489a:	9b01      	ldr	r3, [sp, #4]
    489c:	79db      	ldrb	r3, [r3, #7]
    489e:	461a      	mov	r2, r3
    48a0:	4b66      	ldr	r3, [pc, #408]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48a2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    48a6:	f003 0303 	and.w	r3, r3, #3
    48aa:	429a      	cmp	r2, r3
    48ac:	d10b      	bne.n	48c6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    48ae:	9b01      	ldr	r3, [sp, #4]
    48b0:	799b      	ldrb	r3, [r3, #6]
    48b2:	461a      	mov	r2, r3
    48b4:	4b61      	ldr	r3, [pc, #388]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48ba:	08db      	lsrs	r3, r3, #3
    48bc:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    48c0:	429a      	cmp	r2, r3
    48c2:	f000 80b4 	beq.w	4a2e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    48c6:	4b5d      	ldr	r3, [pc, #372]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48cc:	f003 0301 	and.w	r3, r3, #1
    48d0:	2b00      	cmp	r3, #0
    48d2:	d105      	bne.n	48e0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    48d4:	2301      	movs	r3, #1
    48d6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    48da:	2000      	movs	r0, #0
    48dc:	f7ff fd66 	bl	43ac <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    48e0:	2002      	movs	r0, #2
    48e2:	f7ff fdcf 	bl	4484 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    48e6:	4b55      	ldr	r3, [pc, #340]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48ec:	4a53      	ldr	r2, [pc, #332]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48ee:	f023 0301 	bic.w	r3, r3, #1
    48f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	889b      	ldrh	r3, [r3, #4]
    48fa:	2b01      	cmp	r3, #1
    48fc:	f040 8097 	bne.w	4a2e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4900:	9b01      	ldr	r3, [sp, #4]
    4902:	79db      	ldrb	r3, [r3, #7]
    4904:	4a4d      	ldr	r2, [pc, #308]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4906:	f003 0303 	and.w	r3, r3, #3
    490a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    490e:	4b4b      	ldr	r3, [pc, #300]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4910:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4914:	9b01      	ldr	r3, [sp, #4]
    4916:	799b      	ldrb	r3, [r3, #6]
    4918:	00db      	lsls	r3, r3, #3
    491a:	f003 0308 	and.w	r3, r3, #8
    491e:	4313      	orrs	r3, r2
    4920:	4a46      	ldr	r2, [pc, #280]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4922:	f043 0301 	orr.w	r3, r3, #1
    4926:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    492a:	aa03      	add	r2, sp, #12
    492c:	a904      	add	r1, sp, #16
    492e:	a805      	add	r0, sp, #20
    4930:	f24c 3350 	movw	r3, #50000	; 0xc350
    4934:	f7fe ff6e 	bl	3814 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4938:	4b40      	ldr	r3, [pc, #256]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    493a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    493e:	0e1b      	lsrs	r3, r3, #24
    4940:	f003 0301 	and.w	r3, r3, #1
    4944:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4946:	9a03      	ldr	r2, [sp, #12]
    4948:	a904      	add	r1, sp, #16
    494a:	ab05      	add	r3, sp, #20
    494c:	4618      	mov	r0, r3
    494e:	f7fe ff7b 	bl	3848 <Clock_Ip_TimeoutExpired>
    4952:	4603      	mov	r3, r0
    4954:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4958:	9b06      	ldr	r3, [sp, #24]
    495a:	2b00      	cmp	r3, #0
    495c:	d106      	bne.n	496c <Clock_Ip_SetFirc_TrustedCall+0x114>
    495e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4962:	f083 0301 	eor.w	r3, r3, #1
    4966:	b2db      	uxtb	r3, r3
    4968:	2b00      	cmp	r3, #0
    496a:	d1e5      	bne.n	4938 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    496c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4970:	2b00      	cmp	r3, #0
    4972:	d005      	beq.n	4980 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4974:	9b01      	ldr	r3, [sp, #4]
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	4619      	mov	r1, r3
    497a:	2001      	movs	r0, #1
    497c:	f7fe ff3a 	bl	37f4 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4980:	2003      	movs	r0, #3
    4982:	f7ff fd7f 	bl	4484 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4986:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    498a:	2b00      	cmp	r3, #0
    498c:	d04f      	beq.n	4a2e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    498e:	2002      	movs	r0, #2
    4990:	f7ff fd26 	bl	43e0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4994:	e04b      	b.n	4a2e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4996:	4b29      	ldr	r3, [pc, #164]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4998:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    499c:	4a27      	ldr	r2, [pc, #156]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    499e:	f023 0301 	bic.w	r3, r3, #1
    49a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    49a6:	9b01      	ldr	r3, [sp, #4]
    49a8:	889b      	ldrh	r3, [r3, #4]
    49aa:	2b01      	cmp	r3, #1
    49ac:	d13f      	bne.n	4a2e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    49ae:	9b01      	ldr	r3, [sp, #4]
    49b0:	79db      	ldrb	r3, [r3, #7]
    49b2:	4a22      	ldr	r2, [pc, #136]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49b4:	f003 0303 	and.w	r3, r3, #3
    49b8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    49bc:	4b1f      	ldr	r3, [pc, #124]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49be:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    49c2:	9b01      	ldr	r3, [sp, #4]
    49c4:	799b      	ldrb	r3, [r3, #6]
    49c6:	00db      	lsls	r3, r3, #3
    49c8:	f003 0308 	and.w	r3, r3, #8
    49cc:	4313      	orrs	r3, r2
    49ce:	4a1b      	ldr	r2, [pc, #108]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49d0:	f043 0301 	orr.w	r3, r3, #1
    49d4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49d8:	aa03      	add	r2, sp, #12
    49da:	a904      	add	r1, sp, #16
    49dc:	a805      	add	r0, sp, #20
    49de:	f24c 3350 	movw	r3, #50000	; 0xc350
    49e2:	f7fe ff17 	bl	3814 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49e6:	4b15      	ldr	r3, [pc, #84]	; (4a3c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49ec:	0e1b      	lsrs	r3, r3, #24
    49ee:	f003 0301 	and.w	r3, r3, #1
    49f2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49f4:	9a03      	ldr	r2, [sp, #12]
    49f6:	a904      	add	r1, sp, #16
    49f8:	ab05      	add	r3, sp, #20
    49fa:	4618      	mov	r0, r3
    49fc:	f7fe ff24 	bl	3848 <Clock_Ip_TimeoutExpired>
    4a00:	4603      	mov	r3, r0
    4a02:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4a06:	9b06      	ldr	r3, [sp, #24]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d106      	bne.n	4a1a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4a0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a10:	f083 0301 	eor.w	r3, r3, #1
    4a14:	b2db      	uxtb	r3, r3
    4a16:	2b00      	cmp	r3, #0
    4a18:	d1e5      	bne.n	49e6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4a1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d005      	beq.n	4a2e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4a22:	9b01      	ldr	r3, [sp, #4]
    4a24:	681b      	ldr	r3, [r3, #0]
    4a26:	4619      	mov	r1, r3
    4a28:	2001      	movs	r0, #1
    4a2a:	f7fe fee3 	bl	37f4 <Clock_Ip_ReportClockErrors>
}
    4a2e:	bf00      	nop
    4a30:	b00b      	add	sp, #44	; 0x2c
    4a32:	f85d fb04 	ldr.w	pc, [sp], #4
    4a36:	bf00      	nop
    4a38:	00016000 	.word	0x00016000
    4a3c:	40064000 	.word	0x40064000

00004a40 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a40:	b500      	push	{lr}
    4a42:	b089      	sub	sp, #36	; 0x24
    4a44:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a46:	2300      	movs	r3, #0
    4a48:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4a4c:	9b01      	ldr	r3, [sp, #4]
    4a4e:	889b      	ldrh	r3, [r3, #4]
    4a50:	2b01      	cmp	r3, #1
    4a52:	d132      	bne.n	4aba <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4a54:	4b1b      	ldr	r3, [pc, #108]	; (4ac4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a5a:	4a1a      	ldr	r2, [pc, #104]	; (4ac4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a5c:	f043 0301 	orr.w	r3, r3, #1
    4a60:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a64:	aa03      	add	r2, sp, #12
    4a66:	a904      	add	r1, sp, #16
    4a68:	a805      	add	r0, sp, #20
    4a6a:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a6e:	f7fe fed1 	bl	3814 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a72:	4b14      	ldr	r3, [pc, #80]	; (4ac4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a74:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a78:	0e1b      	lsrs	r3, r3, #24
    4a7a:	f003 0301 	and.w	r3, r3, #1
    4a7e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a80:	9a03      	ldr	r2, [sp, #12]
    4a82:	a904      	add	r1, sp, #16
    4a84:	ab05      	add	r3, sp, #20
    4a86:	4618      	mov	r0, r3
    4a88:	f7fe fede 	bl	3848 <Clock_Ip_TimeoutExpired>
    4a8c:	4603      	mov	r3, r0
    4a8e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4a92:	9b06      	ldr	r3, [sp, #24]
    4a94:	2b00      	cmp	r3, #0
    4a96:	d106      	bne.n	4aa6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4a98:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a9c:	f083 0301 	eor.w	r3, r3, #1
    4aa0:	b2db      	uxtb	r3, r3
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d1e5      	bne.n	4a72 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4aa6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d005      	beq.n	4aba <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4aae:	9b01      	ldr	r3, [sp, #4]
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	4619      	mov	r1, r3
    4ab4:	2001      	movs	r0, #1
    4ab6:	f7fe fe9d 	bl	37f4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    4aba:	bf00      	nop
    4abc:	b009      	add	sp, #36	; 0x24
    4abe:	f85d fb04 	ldr.w	pc, [sp], #4
    4ac2:	bf00      	nop
    4ac4:	40064000 	.word	0x40064000

00004ac8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4ac8:	b082      	sub	sp, #8
    4aca:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4acc:	4b05      	ldr	r3, [pc, #20]	; (4ae4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ad2:	4a04      	ldr	r2, [pc, #16]	; (4ae4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4ad4:	f023 0301 	bic.w	r3, r3, #1
    4ad8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4adc:	bf00      	nop
    4ade:	b002      	add	sp, #8
    4ae0:	4770      	bx	lr
    4ae2:	bf00      	nop
    4ae4:	40064000 	.word	0x40064000

00004ae8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4ae8:	b082      	sub	sp, #8
    4aea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4aec:	bf00      	nop
    4aee:	b002      	add	sp, #8
    4af0:	4770      	bx	lr

00004af2 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4af2:	b082      	sub	sp, #8
    4af4:	9001      	str	r0, [sp, #4]
    4af6:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4af8:	bf00      	nop
    4afa:	b002      	add	sp, #8
    4afc:	4770      	bx	lr

00004afe <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4afe:	b082      	sub	sp, #8
    4b00:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4b02:	bf00      	nop
    4b04:	b002      	add	sp, #8
    4b06:	4770      	bx	lr

00004b08 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4b08:	b082      	sub	sp, #8
    4b0a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4b0c:	bf00      	nop
    4b0e:	b002      	add	sp, #8
    4b10:	4770      	bx	lr

00004b12 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4b12:	b082      	sub	sp, #8
    4b14:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4b16:	2302      	movs	r3, #2
}
    4b18:	4618      	mov	r0, r3
    4b1a:	b002      	add	sp, #8
    4b1c:	4770      	bx	lr

00004b1e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4b1e:	b082      	sub	sp, #8
    4b20:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4b22:	bf00      	nop
    4b24:	b002      	add	sp, #8
    4b26:	4770      	bx	lr

00004b28 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4b28:	b500      	push	{lr}
    4b2a:	b083      	sub	sp, #12
    4b2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b2e:	9b01      	ldr	r3, [sp, #4]
    4b30:	2b00      	cmp	r3, #0
    4b32:	d002      	beq.n	4b3a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4b34:	9801      	ldr	r0, [sp, #4]
    4b36:	f000 f870 	bl	4c1a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b3a:	bf00      	nop
    4b3c:	b003      	add	sp, #12
    4b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00004b42 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4b42:	b500      	push	{lr}
    4b44:	b083      	sub	sp, #12
    4b46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b48:	9b01      	ldr	r3, [sp, #4]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d002      	beq.n	4b54 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4b4e:	9801      	ldr	r0, [sp, #4]
    4b50:	f000 f89a 	bl	4c88 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b54:	bf00      	nop
    4b56:	b003      	add	sp, #12
    4b58:	f85d fb04 	ldr.w	pc, [sp], #4

00004b5c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4b5c:	b500      	push	{lr}
    4b5e:	b089      	sub	sp, #36	; 0x24
    4b60:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4b62:	2301      	movs	r3, #1
    4b64:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4b66:	2300      	movs	r3, #0
    4b68:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4b6c:	4b1e      	ldr	r3, [pc, #120]	; (4be8 <Clock_Ip_CompleteSpll+0x8c>)
    4b6e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b72:	f003 0301 	and.w	r3, r3, #1
    4b76:	2b00      	cmp	r3, #0
    4b78:	d02f      	beq.n	4bda <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4b7a:	aa02      	add	r2, sp, #8
    4b7c:	a903      	add	r1, sp, #12
    4b7e:	a804      	add	r0, sp, #16
    4b80:	f24c 3350 	movw	r3, #50000	; 0xc350
    4b84:	f7fe fe46 	bl	3814 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4b88:	4b17      	ldr	r3, [pc, #92]	; (4be8 <Clock_Ip_CompleteSpll+0x8c>)
    4b8a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b8e:	0e1b      	lsrs	r3, r3, #24
    4b90:	f003 0301 	and.w	r3, r3, #1
    4b94:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4b96:	9a02      	ldr	r2, [sp, #8]
    4b98:	a903      	add	r1, sp, #12
    4b9a:	ab04      	add	r3, sp, #16
    4b9c:	4618      	mov	r0, r3
    4b9e:	f7fe fe53 	bl	3848 <Clock_Ip_TimeoutExpired>
    4ba2:	4603      	mov	r3, r0
    4ba4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4ba8:	9b05      	ldr	r3, [sp, #20]
    4baa:	2b00      	cmp	r3, #0
    4bac:	d106      	bne.n	4bbc <Clock_Ip_CompleteSpll+0x60>
    4bae:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4bb2:	f083 0301 	eor.w	r3, r3, #1
    4bb6:	b2db      	uxtb	r3, r3
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d1e5      	bne.n	4b88 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4bbc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4bc0:	f083 0301 	eor.w	r3, r3, #1
    4bc4:	b2db      	uxtb	r3, r3
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d002      	beq.n	4bd0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4bca:	2302      	movs	r3, #2
    4bcc:	9307      	str	r3, [sp, #28]
    4bce:	e006      	b.n	4bde <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4bd0:	9901      	ldr	r1, [sp, #4]
    4bd2:	2001      	movs	r0, #1
    4bd4:	f7fe fe0e 	bl	37f4 <Clock_Ip_ReportClockErrors>
    4bd8:	e001      	b.n	4bde <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4bda:	2300      	movs	r3, #0
    4bdc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4bde:	9b07      	ldr	r3, [sp, #28]
}
    4be0:	4618      	mov	r0, r3
    4be2:	b009      	add	sp, #36	; 0x24
    4be4:	f85d fb04 	ldr.w	pc, [sp], #4
    4be8:	40064000 	.word	0x40064000

00004bec <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4bec:	b500      	push	{lr}
    4bee:	b083      	sub	sp, #12
    4bf0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4bf2:	9801      	ldr	r0, [sp, #4]
    4bf4:	f000 f886 	bl	4d04 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4bf8:	bf00      	nop
    4bfa:	b003      	add	sp, #12
    4bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00004c00 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4c00:	b500      	push	{lr}
    4c02:	b083      	sub	sp, #12
    4c04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4c06:	9b01      	ldr	r3, [sp, #4]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d002      	beq.n	4c12 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4c0c:	9801      	ldr	r0, [sp, #4]
    4c0e:	f000 f891 	bl	4d34 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4c12:	bf00      	nop
    4c14:	b003      	add	sp, #12
    4c16:	f85d fb04 	ldr.w	pc, [sp], #4

00004c1a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4c1a:	b082      	sub	sp, #8
    4c1c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4c1e:	4b19      	ldr	r3, [pc, #100]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c20:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c24:	4a17      	ldr	r2, [pc, #92]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4c2a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4c2e:	4b15      	ldr	r3, [pc, #84]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c30:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c34:	4a13      	ldr	r2, [pc, #76]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4c3a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4c3e:	4b11      	ldr	r3, [pc, #68]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c40:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c44:	4a0f      	ldr	r2, [pc, #60]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4c4a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4c4e:	4b0d      	ldr	r3, [pc, #52]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c50:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c54:	4a0b      	ldr	r2, [pc, #44]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c56:	f023 0301 	bic.w	r3, r3, #1
    4c5a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4c5e:	4b09      	ldr	r3, [pc, #36]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c60:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c64:	4a07      	ldr	r2, [pc, #28]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4c6a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4c6e:	4b05      	ldr	r3, [pc, #20]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c70:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c74:	4a03      	ldr	r2, [pc, #12]	; (4c84 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4c7a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4c7e:	bf00      	nop
    4c80:	b002      	add	sp, #8
    4c82:	4770      	bx	lr
    4c84:	40064000 	.word	0x40064000

00004c88 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4c88:	b082      	sub	sp, #8
    4c8a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4c8c:	9b01      	ldr	r3, [sp, #4]
    4c8e:	889b      	ldrh	r3, [r3, #4]
    4c90:	2b01      	cmp	r3, #1
    4c92:	d12f      	bne.n	4cf4 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4c94:	4b1a      	ldr	r3, [pc, #104]	; (4d00 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c96:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4c9a:	9b01      	ldr	r3, [sp, #4]
    4c9c:	7b5b      	ldrb	r3, [r3, #13]
    4c9e:	3b01      	subs	r3, #1
    4ca0:	021b      	lsls	r3, r3, #8
    4ca2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4ca6:	9b01      	ldr	r3, [sp, #4]
    4ca8:	7d1b      	ldrb	r3, [r3, #20]
    4caa:	3b10      	subs	r3, #16
    4cac:	041b      	lsls	r3, r3, #16
    4cae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4cb2:	430b      	orrs	r3, r1
    4cb4:	4912      	ldr	r1, [pc, #72]	; (4d00 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cb6:	4313      	orrs	r3, r2
    4cb8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4cbc:	9b01      	ldr	r3, [sp, #4]
    4cbe:	7fdb      	ldrb	r3, [r3, #31]
    4cc0:	2b02      	cmp	r3, #2
    4cc2:	d011      	beq.n	4ce8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4cc4:	2b02      	cmp	r3, #2
    4cc6:	dc17      	bgt.n	4cf8 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d002      	beq.n	4cd2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4ccc:	2b01      	cmp	r3, #1
    4cce:	d005      	beq.n	4cdc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4cd0:	e012      	b.n	4cf8 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4cd2:	4b0b      	ldr	r3, [pc, #44]	; (4d00 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cd4:	2200      	movs	r2, #0
    4cd6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4cda:	e00e      	b.n	4cfa <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4cdc:	4b08      	ldr	r3, [pc, #32]	; (4d00 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4ce2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4ce6:	e008      	b.n	4cfa <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4ce8:	4b05      	ldr	r3, [pc, #20]	; (4d00 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4cee:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4cf2:	e002      	b.n	4cfa <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4cf4:	bf00      	nop
    4cf6:	e000      	b.n	4cfa <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4cf8:	bf00      	nop
}
    4cfa:	bf00      	nop
    4cfc:	b002      	add	sp, #8
    4cfe:	4770      	bx	lr
    4d00:	40064000 	.word	0x40064000

00004d04 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4d04:	b082      	sub	sp, #8
    4d06:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4d08:	4b09      	ldr	r3, [pc, #36]	; (4d30 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d0a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d0e:	4a08      	ldr	r2, [pc, #32]	; (4d30 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4d14:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4d18:	4b05      	ldr	r3, [pc, #20]	; (4d30 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d1a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d1e:	4a04      	ldr	r2, [pc, #16]	; (4d30 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4d20:	f023 0301 	bic.w	r3, r3, #1
    4d24:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4d28:	bf00      	nop
    4d2a:	b002      	add	sp, #8
    4d2c:	4770      	bx	lr
    4d2e:	bf00      	nop
    4d30:	40064000 	.word	0x40064000

00004d34 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4d34:	b082      	sub	sp, #8
    4d36:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4d38:	9b01      	ldr	r3, [sp, #4]
    4d3a:	889b      	ldrh	r3, [r3, #4]
    4d3c:	2b01      	cmp	r3, #1
    4d3e:	d107      	bne.n	4d50 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4d40:	4b05      	ldr	r3, [pc, #20]	; (4d58 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d42:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d46:	4a04      	ldr	r2, [pc, #16]	; (4d58 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d48:	f043 0301 	orr.w	r3, r3, #1
    4d4c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4d50:	bf00      	nop
    4d52:	b002      	add	sp, #8
    4d54:	4770      	bx	lr
    4d56:	bf00      	nop
    4d58:	40064000 	.word	0x40064000

00004d5c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4d5c:	b082      	sub	sp, #8
    4d5e:	9001      	str	r0, [sp, #4]
    4d60:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4d62:	bf00      	nop
    4d64:	b002      	add	sp, #8
    4d66:	4770      	bx	lr

00004d68 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4d68:	b082      	sub	sp, #8
    4d6a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4d6c:	bf00      	nop
    4d6e:	b002      	add	sp, #8
    4d70:	4770      	bx	lr

00004d72 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d72:	b500      	push	{lr}
    4d74:	b083      	sub	sp, #12
    4d76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d002      	beq.n	4d84 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4d7e:	9801      	ldr	r0, [sp, #4]
    4d80:	f000 f8ee 	bl	4f60 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d84:	bf00      	nop
    4d86:	b003      	add	sp, #12
    4d88:	f85d fb04 	ldr.w	pc, [sp], #4

00004d8c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d8c:	b500      	push	{lr}
    4d8e:	b083      	sub	sp, #12
    4d90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d92:	9b01      	ldr	r3, [sp, #4]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d002      	beq.n	4d9e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4d98:	9801      	ldr	r0, [sp, #4]
    4d9a:	f000 f8ff 	bl	4f9c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d9e:	bf00      	nop
    4da0:	b003      	add	sp, #12
    4da2:	f85d fb04 	ldr.w	pc, [sp], #4

00004da6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4da6:	b500      	push	{lr}
    4da8:	b083      	sub	sp, #12
    4daa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dac:	9b01      	ldr	r3, [sp, #4]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d002      	beq.n	4db8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4db2:	9801      	ldr	r0, [sp, #4]
    4db4:	f000 f912 	bl	4fdc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4db8:	bf00      	nop
    4dba:	b003      	add	sp, #12
    4dbc:	f85d fb04 	ldr.w	pc, [sp], #4

00004dc0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dc0:	b500      	push	{lr}
    4dc2:	b083      	sub	sp, #12
    4dc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dc6:	9b01      	ldr	r3, [sp, #4]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d002      	beq.n	4dd2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4dcc:	9801      	ldr	r0, [sp, #4]
    4dce:	f000 f925 	bl	501c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dd2:	bf00      	nop
    4dd4:	b003      	add	sp, #12
    4dd6:	f85d fb04 	ldr.w	pc, [sp], #4

00004dda <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dda:	b500      	push	{lr}
    4ddc:	b083      	sub	sp, #12
    4dde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4de0:	9b01      	ldr	r3, [sp, #4]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d002      	beq.n	4dec <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4de6:	9801      	ldr	r0, [sp, #4]
    4de8:	f000 f936 	bl	5058 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dec:	bf00      	nop
    4dee:	b003      	add	sp, #12
    4df0:	f85d fb04 	ldr.w	pc, [sp], #4

00004df4 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4df4:	b500      	push	{lr}
    4df6:	b083      	sub	sp, #12
    4df8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dfa:	9b01      	ldr	r3, [sp, #4]
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d002      	beq.n	4e06 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4e00:	9801      	ldr	r0, [sp, #4]
    4e02:	f000 f949 	bl	5098 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e06:	bf00      	nop
    4e08:	b003      	add	sp, #12
    4e0a:	f85d fb04 	ldr.w	pc, [sp], #4

00004e0e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e0e:	b500      	push	{lr}
    4e10:	b083      	sub	sp, #12
    4e12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e14:	9b01      	ldr	r3, [sp, #4]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d002      	beq.n	4e20 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4e1a:	9801      	ldr	r0, [sp, #4]
    4e1c:	f000 f958 	bl	50d0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e20:	bf00      	nop
    4e22:	b003      	add	sp, #12
    4e24:	f85d fb04 	ldr.w	pc, [sp], #4

00004e28 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e28:	b500      	push	{lr}
    4e2a:	b083      	sub	sp, #12
    4e2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e2e:	9b01      	ldr	r3, [sp, #4]
    4e30:	2b00      	cmp	r3, #0
    4e32:	d002      	beq.n	4e3a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4e34:	9801      	ldr	r0, [sp, #4]
    4e36:	f000 f969 	bl	510c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e3a:	bf00      	nop
    4e3c:	b003      	add	sp, #12
    4e3e:	f85d fb04 	ldr.w	pc, [sp], #4

00004e42 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e42:	b500      	push	{lr}
    4e44:	b083      	sub	sp, #12
    4e46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e48:	9b01      	ldr	r3, [sp, #4]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d002      	beq.n	4e54 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4e4e:	9801      	ldr	r0, [sp, #4]
    4e50:	f000 f978 	bl	5144 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e54:	bf00      	nop
    4e56:	b003      	add	sp, #12
    4e58:	f85d fb04 	ldr.w	pc, [sp], #4

00004e5c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e5c:	b500      	push	{lr}
    4e5e:	b083      	sub	sp, #12
    4e60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e62:	9b01      	ldr	r3, [sp, #4]
    4e64:	2b00      	cmp	r3, #0
    4e66:	d002      	beq.n	4e6e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4e68:	9801      	ldr	r0, [sp, #4]
    4e6a:	f000 f989 	bl	5180 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e6e:	bf00      	nop
    4e70:	b003      	add	sp, #12
    4e72:	f85d fb04 	ldr.w	pc, [sp], #4

00004e76 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e76:	b500      	push	{lr}
    4e78:	b083      	sub	sp, #12
    4e7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e7c:	9b01      	ldr	r3, [sp, #4]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d002      	beq.n	4e88 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4e82:	9801      	ldr	r0, [sp, #4]
    4e84:	f000 f998 	bl	51b8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e88:	bf00      	nop
    4e8a:	b003      	add	sp, #12
    4e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e90 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e90:	b500      	push	{lr}
    4e92:	b083      	sub	sp, #12
    4e94:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e96:	9b01      	ldr	r3, [sp, #4]
    4e98:	2b00      	cmp	r3, #0
    4e9a:	d002      	beq.n	4ea2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4e9c:	9801      	ldr	r0, [sp, #4]
    4e9e:	f000 f9a9 	bl	51f4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ea2:	bf00      	nop
    4ea4:	b003      	add	sp, #12
    4ea6:	f85d fb04 	ldr.w	pc, [sp], #4

00004eaa <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4eaa:	b500      	push	{lr}
    4eac:	b083      	sub	sp, #12
    4eae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4eb0:	9b01      	ldr	r3, [sp, #4]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d002      	beq.n	4ebc <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4eb6:	9801      	ldr	r0, [sp, #4]
    4eb8:	f000 f9e6 	bl	5288 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ebc:	bf00      	nop
    4ebe:	b003      	add	sp, #12
    4ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ec4:	b500      	push	{lr}
    4ec6:	b083      	sub	sp, #12
    4ec8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4eca:	9b01      	ldr	r3, [sp, #4]
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d002      	beq.n	4ed6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4ed0:	9801      	ldr	r0, [sp, #4]
    4ed2:	f000 fa25 	bl	5320 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ed6:	bf00      	nop
    4ed8:	b003      	add	sp, #12
    4eda:	f85d fb04 	ldr.w	pc, [sp], #4

00004ede <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ede:	b500      	push	{lr}
    4ee0:	b083      	sub	sp, #12
    4ee2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ee4:	9b01      	ldr	r3, [sp, #4]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d002      	beq.n	4ef0 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4eea:	9801      	ldr	r0, [sp, #4]
    4eec:	f000 fa2a 	bl	5344 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ef0:	bf00      	nop
    4ef2:	b003      	add	sp, #12
    4ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ef8 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4ef8:	b500      	push	{lr}
    4efa:	b083      	sub	sp, #12
    4efc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4efe:	9b01      	ldr	r3, [sp, #4]
    4f00:	2b00      	cmp	r3, #0
    4f02:	d002      	beq.n	4f0a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4f04:	9801      	ldr	r0, [sp, #4]
    4f06:	f000 fa3b 	bl	5380 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f0a:	bf00      	nop
    4f0c:	b003      	add	sp, #12
    4f0e:	f85d fb04 	ldr.w	pc, [sp], #4

00004f12 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4f12:	b500      	push	{lr}
    4f14:	b083      	sub	sp, #12
    4f16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f18:	9b01      	ldr	r3, [sp, #4]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d002      	beq.n	4f24 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4f1e:	9801      	ldr	r0, [sp, #4]
    4f20:	f000 fa56 	bl	53d0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f24:	bf00      	nop
    4f26:	b003      	add	sp, #12
    4f28:	f85d fb04 	ldr.w	pc, [sp], #4

00004f2c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f2c:	b500      	push	{lr}
    4f2e:	b083      	sub	sp, #12
    4f30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	2b00      	cmp	r3, #0
    4f36:	d002      	beq.n	4f3e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4f38:	9801      	ldr	r0, [sp, #4]
    4f3a:	f000 fa79 	bl	5430 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f3e:	bf00      	nop
    4f40:	b003      	add	sp, #12
    4f42:	f85d fb04 	ldr.w	pc, [sp], #4

00004f46 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f46:	b500      	push	{lr}
    4f48:	b083      	sub	sp, #12
    4f4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f4c:	9b01      	ldr	r3, [sp, #4]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d002      	beq.n	4f58 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4f52:	9801      	ldr	r0, [sp, #4]
    4f54:	f000 fa8a 	bl	546c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f58:	bf00      	nop
    4f5a:	b003      	add	sp, #12
    4f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f60 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f60:	b084      	sub	sp, #16
    4f62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f64:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4f66:	795b      	ldrb	r3, [r3, #5]
    4f68:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4f6a:	4b0b      	ldr	r3, [pc, #44]	; (4f98 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f6c:	695b      	ldr	r3, [r3, #20]
    4f6e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4f70:	9b02      	ldr	r3, [sp, #8]
    4f72:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f76:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4f78:	9b03      	ldr	r3, [sp, #12]
    4f7a:	061b      	lsls	r3, r3, #24
    4f7c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4f80:	9a02      	ldr	r2, [sp, #8]
    4f82:	4313      	orrs	r3, r2
    4f84:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4f86:	4a04      	ldr	r2, [pc, #16]	; (4f98 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f88:	9b02      	ldr	r3, [sp, #8]
    4f8a:	6153      	str	r3, [r2, #20]
}
    4f8c:	bf00      	nop
    4f8e:	b004      	add	sp, #16
    4f90:	4770      	bx	lr
    4f92:	bf00      	nop
    4f94:	00016368 	.word	0x00016368
    4f98:	40064000 	.word	0x40064000

00004f9c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f9c:	b084      	sub	sp, #16
    4f9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fa0:	9b01      	ldr	r3, [sp, #4]
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	4a0b      	ldr	r2, [pc, #44]	; (4fd4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4fa6:	5cd3      	ldrb	r3, [r2, r3]
    4fa8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4faa:	4b0b      	ldr	r3, [pc, #44]	; (4fd8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4fac:	695b      	ldr	r3, [r3, #20]
    4fae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4fb0:	9b02      	ldr	r3, [sp, #8]
    4fb2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4fb6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4fb8:	9b03      	ldr	r3, [sp, #12]
    4fba:	061b      	lsls	r3, r3, #24
    4fbc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4fc0:	9a02      	ldr	r2, [sp, #8]
    4fc2:	4313      	orrs	r3, r2
    4fc4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4fc6:	4a04      	ldr	r2, [pc, #16]	; (4fd8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4fc8:	9b02      	ldr	r3, [sp, #8]
    4fca:	6153      	str	r3, [r2, #20]
}
    4fcc:	bf00      	nop
    4fce:	b004      	add	sp, #16
    4fd0:	4770      	bx	lr
    4fd2:	bf00      	nop
    4fd4:	00016368 	.word	0x00016368
    4fd8:	40064000 	.word	0x40064000

00004fdc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4fdc:	b084      	sub	sp, #16
    4fde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fe0:	9b01      	ldr	r3, [sp, #4]
    4fe2:	685b      	ldr	r3, [r3, #4]
    4fe4:	4a0b      	ldr	r2, [pc, #44]	; (5014 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4fe6:	5cd3      	ldrb	r3, [r2, r3]
    4fe8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4fea:	4b0b      	ldr	r3, [pc, #44]	; (5018 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4fec:	699b      	ldr	r3, [r3, #24]
    4fee:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4ff0:	9b02      	ldr	r3, [sp, #8]
    4ff2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4ff6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4ff8:	9b03      	ldr	r3, [sp, #12]
    4ffa:	061b      	lsls	r3, r3, #24
    4ffc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5000:	9a02      	ldr	r2, [sp, #8]
    5002:	4313      	orrs	r3, r2
    5004:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    5006:	4a04      	ldr	r2, [pc, #16]	; (5018 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    5008:	9b02      	ldr	r3, [sp, #8]
    500a:	6193      	str	r3, [r2, #24]
}
    500c:	bf00      	nop
    500e:	b004      	add	sp, #16
    5010:	4770      	bx	lr
    5012:	bf00      	nop
    5014:	00016368 	.word	0x00016368
    5018:	40064000 	.word	0x40064000

0000501c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    501c:	b084      	sub	sp, #16
    501e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5020:	4b0b      	ldr	r3, [pc, #44]	; (5050 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    5022:	795b      	ldrb	r3, [r3, #5]
    5024:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    5026:	4b0b      	ldr	r3, [pc, #44]	; (5054 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5028:	69db      	ldr	r3, [r3, #28]
    502a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    502c:	9b02      	ldr	r3, [sp, #8]
    502e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5032:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    5034:	9b03      	ldr	r3, [sp, #12]
    5036:	061b      	lsls	r3, r3, #24
    5038:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    503c:	9a02      	ldr	r2, [sp, #8]
    503e:	4313      	orrs	r3, r2
    5040:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    5042:	4a04      	ldr	r2, [pc, #16]	; (5054 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5044:	9b02      	ldr	r3, [sp, #8]
    5046:	61d3      	str	r3, [r2, #28]
}
    5048:	bf00      	nop
    504a:	b004      	add	sp, #16
    504c:	4770      	bx	lr
    504e:	bf00      	nop
    5050:	00016368 	.word	0x00016368
    5054:	40064000 	.word	0x40064000

00005058 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5058:	b084      	sub	sp, #16
    505a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    505c:	9b01      	ldr	r3, [sp, #4]
    505e:	685b      	ldr	r3, [r3, #4]
    5060:	4a0b      	ldr	r2, [pc, #44]	; (5090 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    5062:	5cd3      	ldrb	r3, [r2, r3]
    5064:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    5066:	4b0b      	ldr	r3, [pc, #44]	; (5094 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5068:	69db      	ldr	r3, [r3, #28]
    506a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    506c:	9b02      	ldr	r3, [sp, #8]
    506e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5072:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    5074:	9b03      	ldr	r3, [sp, #12]
    5076:	061b      	lsls	r3, r3, #24
    5078:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    507c:	9a02      	ldr	r2, [sp, #8]
    507e:	4313      	orrs	r3, r2
    5080:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    5082:	4a04      	ldr	r2, [pc, #16]	; (5094 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5084:	9b02      	ldr	r3, [sp, #8]
    5086:	61d3      	str	r3, [r2, #28]
}
    5088:	bf00      	nop
    508a:	b004      	add	sp, #16
    508c:	4770      	bx	lr
    508e:	bf00      	nop
    5090:	00016368 	.word	0x00016368
    5094:	40064000 	.word	0x40064000

00005098 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5098:	b084      	sub	sp, #16
    509a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    509c:	4b0a      	ldr	r3, [pc, #40]	; (50c8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    509e:	7b9b      	ldrb	r3, [r3, #14]
    50a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    50a2:	4b0a      	ldr	r3, [pc, #40]	; (50cc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    50a4:	691b      	ldr	r3, [r3, #16]
    50a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    50a8:	9b02      	ldr	r3, [sp, #8]
    50aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    50ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    50b0:	9b03      	ldr	r3, [sp, #12]
    50b2:	011b      	lsls	r3, r3, #4
    50b4:	9a02      	ldr	r2, [sp, #8]
    50b6:	4313      	orrs	r3, r2
    50b8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50ba:	4a04      	ldr	r2, [pc, #16]	; (50cc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    50bc:	9b02      	ldr	r3, [sp, #8]
    50be:	6113      	str	r3, [r2, #16]
}
    50c0:	bf00      	nop
    50c2:	b004      	add	sp, #16
    50c4:	4770      	bx	lr
    50c6:	bf00      	nop
    50c8:	00016310 	.word	0x00016310
    50cc:	40048000 	.word	0x40048000

000050d0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50d0:	b084      	sub	sp, #16
    50d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    50d4:	9b01      	ldr	r3, [sp, #4]
    50d6:	685b      	ldr	r3, [r3, #4]
    50d8:	4a0a      	ldr	r2, [pc, #40]	; (5104 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    50da:	5cd3      	ldrb	r3, [r2, r3]
    50dc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    50de:	4b0a      	ldr	r3, [pc, #40]	; (5108 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    50e0:	691b      	ldr	r3, [r3, #16]
    50e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    50e4:	9b02      	ldr	r3, [sp, #8]
    50e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    50ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    50ec:	9b03      	ldr	r3, [sp, #12]
    50ee:	011b      	lsls	r3, r3, #4
    50f0:	9a02      	ldr	r2, [sp, #8]
    50f2:	4313      	orrs	r3, r2
    50f4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50f6:	4a04      	ldr	r2, [pc, #16]	; (5108 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    50f8:	9b02      	ldr	r3, [sp, #8]
    50fa:	6113      	str	r3, [r2, #16]
}
    50fc:	bf00      	nop
    50fe:	b004      	add	sp, #16
    5100:	4770      	bx	lr
    5102:	bf00      	nop
    5104:	00016310 	.word	0x00016310
    5108:	40048000 	.word	0x40048000

0000510c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    510c:	b084      	sub	sp, #16
    510e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5110:	4b0a      	ldr	r3, [pc, #40]	; (513c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    5112:	785b      	ldrb	r3, [r3, #1]
    5114:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    5116:	4b0a      	ldr	r3, [pc, #40]	; (5140 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5118:	691b      	ldr	r3, [r3, #16]
    511a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    511c:	9b02      	ldr	r3, [sp, #8]
    511e:	f023 030c 	bic.w	r3, r3, #12
    5122:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5124:	9b03      	ldr	r3, [sp, #12]
    5126:	009b      	lsls	r3, r3, #2
    5128:	9a02      	ldr	r2, [sp, #8]
    512a:	4313      	orrs	r3, r2
    512c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    512e:	4a04      	ldr	r2, [pc, #16]	; (5140 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5130:	9b02      	ldr	r3, [sp, #8]
    5132:	6113      	str	r3, [r2, #16]
}
    5134:	bf00      	nop
    5136:	b004      	add	sp, #16
    5138:	4770      	bx	lr
    513a:	bf00      	nop
    513c:	000163c8 	.word	0x000163c8
    5140:	40048000 	.word	0x40048000

00005144 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5144:	b084      	sub	sp, #16
    5146:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5148:	9b01      	ldr	r3, [sp, #4]
    514a:	685b      	ldr	r3, [r3, #4]
    514c:	4a0a      	ldr	r2, [pc, #40]	; (5178 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    514e:	5cd3      	ldrb	r3, [r2, r3]
    5150:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    5152:	4b0a      	ldr	r3, [pc, #40]	; (517c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5154:	691b      	ldr	r3, [r3, #16]
    5156:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5158:	9b02      	ldr	r3, [sp, #8]
    515a:	f023 030c 	bic.w	r3, r3, #12
    515e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5160:	9b03      	ldr	r3, [sp, #12]
    5162:	009b      	lsls	r3, r3, #2
    5164:	9a02      	ldr	r2, [sp, #8]
    5166:	4313      	orrs	r3, r2
    5168:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    516a:	4a04      	ldr	r2, [pc, #16]	; (517c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    516c:	9b02      	ldr	r3, [sp, #8]
    516e:	6113      	str	r3, [r2, #16]
}
    5170:	bf00      	nop
    5172:	b004      	add	sp, #16
    5174:	4770      	bx	lr
    5176:	bf00      	nop
    5178:	000163c8 	.word	0x000163c8
    517c:	40048000 	.word	0x40048000

00005180 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5180:	b084      	sub	sp, #16
    5182:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5184:	4b0a      	ldr	r3, [pc, #40]	; (51b0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    5186:	795b      	ldrb	r3, [r3, #5]
    5188:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    518a:	4b0a      	ldr	r3, [pc, #40]	; (51b4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    518c:	6a1b      	ldr	r3, [r3, #32]
    518e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5190:	9b02      	ldr	r3, [sp, #8]
    5192:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5196:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5198:	9b03      	ldr	r3, [sp, #12]
    519a:	061b      	lsls	r3, r3, #24
    519c:	9a02      	ldr	r2, [sp, #8]
    519e:	4313      	orrs	r3, r2
    51a0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    51a2:	4a04      	ldr	r2, [pc, #16]	; (51b4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    51a4:	9b02      	ldr	r3, [sp, #8]
    51a6:	6213      	str	r3, [r2, #32]
}
    51a8:	bf00      	nop
    51aa:	b004      	add	sp, #16
    51ac:	4770      	bx	lr
    51ae:	bf00      	nop
    51b0:	00016368 	.word	0x00016368
    51b4:	40064000 	.word	0x40064000

000051b8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51b8:	b084      	sub	sp, #16
    51ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51bc:	9b01      	ldr	r3, [sp, #4]
    51be:	685b      	ldr	r3, [r3, #4]
    51c0:	4a0a      	ldr	r2, [pc, #40]	; (51ec <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    51c2:	5cd3      	ldrb	r3, [r2, r3]
    51c4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    51c6:	4b0a      	ldr	r3, [pc, #40]	; (51f0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    51c8:	6a1b      	ldr	r3, [r3, #32]
    51ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    51cc:	9b02      	ldr	r3, [sp, #8]
    51ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    51d2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    51d4:	9b03      	ldr	r3, [sp, #12]
    51d6:	061b      	lsls	r3, r3, #24
    51d8:	9a02      	ldr	r2, [sp, #8]
    51da:	4313      	orrs	r3, r2
    51dc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    51de:	4a04      	ldr	r2, [pc, #16]	; (51f0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    51e0:	9b02      	ldr	r3, [sp, #8]
    51e2:	6213      	str	r3, [r2, #32]
}
    51e4:	bf00      	nop
    51e6:	b004      	add	sp, #16
    51e8:	4770      	bx	lr
    51ea:	bf00      	nop
    51ec:	00016368 	.word	0x00016368
    51f0:	40064000 	.word	0x40064000

000051f4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51f4:	b086      	sub	sp, #24
    51f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51f8:	4b20      	ldr	r3, [pc, #128]	; (527c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    51fa:	795b      	ldrb	r3, [r3, #5]
    51fc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    51fe:	9b01      	ldr	r3, [sp, #4]
    5200:	681a      	ldr	r2, [r3, #0]
    5202:	491f      	ldr	r1, [pc, #124]	; (5280 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    5204:	4613      	mov	r3, r2
    5206:	00db      	lsls	r3, r3, #3
    5208:	4413      	add	r3, r2
    520a:	440b      	add	r3, r1
    520c:	781b      	ldrb	r3, [r3, #0]
    520e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5210:	4b1c      	ldr	r3, [pc, #112]	; (5284 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5212:	68db      	ldr	r3, [r3, #12]
    5214:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5216:	9b03      	ldr	r3, [sp, #12]
    5218:	2b03      	cmp	r3, #3
    521a:	d813      	bhi.n	5244 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    521c:	9b03      	ldr	r3, [sp, #12]
    521e:	005b      	lsls	r3, r3, #1
    5220:	3318      	adds	r3, #24
    5222:	2203      	movs	r2, #3
    5224:	fa02 f303 	lsl.w	r3, r2, r3
    5228:	43db      	mvns	r3, r3
    522a:	9a05      	ldr	r2, [sp, #20]
    522c:	4013      	ands	r3, r2
    522e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5230:	9b03      	ldr	r3, [sp, #12]
    5232:	005b      	lsls	r3, r3, #1
    5234:	3318      	adds	r3, #24
    5236:	9a04      	ldr	r2, [sp, #16]
    5238:	fa02 f303 	lsl.w	r3, r2, r3
    523c:	9a05      	ldr	r2, [sp, #20]
    523e:	4313      	orrs	r3, r2
    5240:	9305      	str	r3, [sp, #20]
    5242:	e014      	b.n	526e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5244:	9b03      	ldr	r3, [sp, #12]
    5246:	3b04      	subs	r3, #4
    5248:	005b      	lsls	r3, r3, #1
    524a:	3310      	adds	r3, #16
    524c:	2203      	movs	r2, #3
    524e:	fa02 f303 	lsl.w	r3, r2, r3
    5252:	43db      	mvns	r3, r3
    5254:	9a05      	ldr	r2, [sp, #20]
    5256:	4013      	ands	r3, r2
    5258:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    525a:	9b03      	ldr	r3, [sp, #12]
    525c:	3b04      	subs	r3, #4
    525e:	005b      	lsls	r3, r3, #1
    5260:	3310      	adds	r3, #16
    5262:	9a04      	ldr	r2, [sp, #16]
    5264:	fa02 f303 	lsl.w	r3, r2, r3
    5268:	9a05      	ldr	r2, [sp, #20]
    526a:	4313      	orrs	r3, r2
    526c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    526e:	4a05      	ldr	r2, [pc, #20]	; (5284 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5270:	9b05      	ldr	r3, [sp, #20]
    5272:	60d3      	str	r3, [r2, #12]
}
    5274:	bf00      	nop
    5276:	b006      	add	sp, #24
    5278:	4770      	bx	lr
    527a:	bf00      	nop
    527c:	00016310 	.word	0x00016310
    5280:	00016000 	.word	0x00016000
    5284:	40048000 	.word	0x40048000

00005288 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5288:	b086      	sub	sp, #24
    528a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	685b      	ldr	r3, [r3, #4]
    5290:	4a20      	ldr	r2, [pc, #128]	; (5314 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    5292:	5cd3      	ldrb	r3, [r2, r3]
    5294:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    5296:	9b01      	ldr	r3, [sp, #4]
    5298:	681a      	ldr	r2, [r3, #0]
    529a:	491f      	ldr	r1, [pc, #124]	; (5318 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    529c:	4613      	mov	r3, r2
    529e:	00db      	lsls	r3, r3, #3
    52a0:	4413      	add	r3, r2
    52a2:	440b      	add	r3, r1
    52a4:	781b      	ldrb	r3, [r3, #0]
    52a6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    52a8:	4b1c      	ldr	r3, [pc, #112]	; (531c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    52aa:	68db      	ldr	r3, [r3, #12]
    52ac:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    52ae:	9b03      	ldr	r3, [sp, #12]
    52b0:	2b03      	cmp	r3, #3
    52b2:	d813      	bhi.n	52dc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    52b4:	9b03      	ldr	r3, [sp, #12]
    52b6:	005b      	lsls	r3, r3, #1
    52b8:	3318      	adds	r3, #24
    52ba:	2203      	movs	r2, #3
    52bc:	fa02 f303 	lsl.w	r3, r2, r3
    52c0:	43db      	mvns	r3, r3
    52c2:	9a05      	ldr	r2, [sp, #20]
    52c4:	4013      	ands	r3, r2
    52c6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    52c8:	9b03      	ldr	r3, [sp, #12]
    52ca:	005b      	lsls	r3, r3, #1
    52cc:	3318      	adds	r3, #24
    52ce:	9a04      	ldr	r2, [sp, #16]
    52d0:	fa02 f303 	lsl.w	r3, r2, r3
    52d4:	9a05      	ldr	r2, [sp, #20]
    52d6:	4313      	orrs	r3, r2
    52d8:	9305      	str	r3, [sp, #20]
    52da:	e014      	b.n	5306 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    52dc:	9b03      	ldr	r3, [sp, #12]
    52de:	3b04      	subs	r3, #4
    52e0:	005b      	lsls	r3, r3, #1
    52e2:	3310      	adds	r3, #16
    52e4:	2203      	movs	r2, #3
    52e6:	fa02 f303 	lsl.w	r3, r2, r3
    52ea:	43db      	mvns	r3, r3
    52ec:	9a05      	ldr	r2, [sp, #20]
    52ee:	4013      	ands	r3, r2
    52f0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    52f2:	9b03      	ldr	r3, [sp, #12]
    52f4:	3b04      	subs	r3, #4
    52f6:	005b      	lsls	r3, r3, #1
    52f8:	3310      	adds	r3, #16
    52fa:	9a04      	ldr	r2, [sp, #16]
    52fc:	fa02 f303 	lsl.w	r3, r2, r3
    5300:	9a05      	ldr	r2, [sp, #20]
    5302:	4313      	orrs	r3, r2
    5304:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5306:	4a05      	ldr	r2, [pc, #20]	; (531c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5308:	9b05      	ldr	r3, [sp, #20]
    530a:	60d3      	str	r3, [r2, #12]
}
    530c:	bf00      	nop
    530e:	b006      	add	sp, #24
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	00016310 	.word	0x00016310
    5318:	00016000 	.word	0x00016000
    531c:	40048000 	.word	0x40048000

00005320 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5320:	b084      	sub	sp, #16
    5322:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    5324:	4b06      	ldr	r3, [pc, #24]	; (5340 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    5326:	685b      	ldr	r3, [r3, #4]
    5328:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    532a:	9b03      	ldr	r3, [sp, #12]
    532c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    5330:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    5332:	4a03      	ldr	r2, [pc, #12]	; (5340 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    5334:	9b03      	ldr	r3, [sp, #12]
    5336:	6053      	str	r3, [r2, #4]
}
    5338:	bf00      	nop
    533a:	b004      	add	sp, #16
    533c:	4770      	bx	lr
    533e:	bf00      	nop
    5340:	40048000 	.word	0x40048000

00005344 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5344:	b084      	sub	sp, #16
    5346:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5348:	9b01      	ldr	r3, [sp, #4]
    534a:	685b      	ldr	r3, [r3, #4]
    534c:	4a0a      	ldr	r2, [pc, #40]	; (5378 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    534e:	5cd3      	ldrb	r3, [r2, r3]
    5350:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    5352:	4b0a      	ldr	r3, [pc, #40]	; (537c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5354:	685b      	ldr	r3, [r3, #4]
    5356:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5358:	9b02      	ldr	r3, [sp, #8]
    535a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    535e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5360:	9b03      	ldr	r3, [sp, #12]
    5362:	011b      	lsls	r3, r3, #4
    5364:	9a02      	ldr	r2, [sp, #8]
    5366:	4313      	orrs	r3, r2
    5368:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    536a:	4a04      	ldr	r2, [pc, #16]	; (537c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    536c:	9b02      	ldr	r3, [sp, #8]
    536e:	6053      	str	r3, [r2, #4]
}
    5370:	bf00      	nop
    5372:	b004      	add	sp, #16
    5374:	4770      	bx	lr
    5376:	bf00      	nop
    5378:	00016310 	.word	0x00016310
    537c:	40048000 	.word	0x40048000

00005380 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5380:	b084      	sub	sp, #16
    5382:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	681a      	ldr	r2, [r3, #0]
    5388:	490f      	ldr	r1, [pc, #60]	; (53c8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    538a:	4613      	mov	r3, r2
    538c:	00db      	lsls	r3, r3, #3
    538e:	4413      	add	r3, r2
    5390:	440b      	add	r3, r1
    5392:	3304      	adds	r3, #4
    5394:	781b      	ldrb	r3, [r3, #0]
    5396:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    5398:	4a0c      	ldr	r2, [pc, #48]	; (53cc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    539a:	9b03      	ldr	r3, [sp, #12]
    539c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53a0:	490a      	ldr	r1, [pc, #40]	; (53cc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    53a6:	9b03      	ldr	r3, [sp, #12]
    53a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    53ac:	4a07      	ldr	r2, [pc, #28]	; (53cc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53ae:	9b03      	ldr	r3, [sp, #12]
    53b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53b4:	4905      	ldr	r1, [pc, #20]	; (53cc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    53b6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    53ba:	9b03      	ldr	r3, [sp, #12]
    53bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    53c0:	bf00      	nop
    53c2:	b004      	add	sp, #16
    53c4:	4770      	bx	lr
    53c6:	bf00      	nop
    53c8:	00016000 	.word	0x00016000
    53cc:	40065000 	.word	0x40065000

000053d0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53d0:	b086      	sub	sp, #24
    53d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    53d4:	9b01      	ldr	r3, [sp, #4]
    53d6:	681a      	ldr	r2, [r3, #0]
    53d8:	4912      	ldr	r1, [pc, #72]	; (5424 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    53da:	4613      	mov	r3, r2
    53dc:	00db      	lsls	r3, r3, #3
    53de:	4413      	add	r3, r2
    53e0:	440b      	add	r3, r1
    53e2:	3304      	adds	r3, #4
    53e4:	781b      	ldrb	r3, [r3, #0]
    53e6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53e8:	9b01      	ldr	r3, [sp, #4]
    53ea:	685b      	ldr	r3, [r3, #4]
    53ec:	4a0e      	ldr	r2, [pc, #56]	; (5428 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    53ee:	5cd3      	ldrb	r3, [r2, r3]
    53f0:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    53f2:	4a0e      	ldr	r2, [pc, #56]	; (542c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    53f4:	9b05      	ldr	r3, [sp, #20]
    53f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53fa:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    53fc:	9b03      	ldr	r3, [sp, #12]
    53fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    5402:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    5404:	9b04      	ldr	r3, [sp, #16]
    5406:	061b      	lsls	r3, r3, #24
    5408:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    540c:	9a03      	ldr	r2, [sp, #12]
    540e:	4313      	orrs	r3, r2
    5410:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    5412:	4906      	ldr	r1, [pc, #24]	; (542c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    5414:	9b05      	ldr	r3, [sp, #20]
    5416:	9a03      	ldr	r2, [sp, #12]
    5418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    541c:	bf00      	nop
    541e:	b006      	add	sp, #24
    5420:	4770      	bx	lr
    5422:	bf00      	nop
    5424:	00016000 	.word	0x00016000
    5428:	00016398 	.word	0x00016398
    542c:	40065000 	.word	0x40065000

00005430 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5430:	b084      	sub	sp, #16
    5432:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5434:	4b0b      	ldr	r3, [pc, #44]	; (5464 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    5436:	7f1b      	ldrb	r3, [r3, #28]
    5438:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    543a:	4b0b      	ldr	r3, [pc, #44]	; (5468 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    543c:	685b      	ldr	r3, [r3, #4]
    543e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5440:	9b02      	ldr	r3, [sp, #8]
    5442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5446:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5448:	9b03      	ldr	r3, [sp, #12]
    544a:	031b      	lsls	r3, r3, #12
    544c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5450:	9a02      	ldr	r2, [sp, #8]
    5452:	4313      	orrs	r3, r2
    5454:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    5456:	4a04      	ldr	r2, [pc, #16]	; (5468 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5458:	9b02      	ldr	r3, [sp, #8]
    545a:	6053      	str	r3, [r2, #4]
}
    545c:	bf00      	nop
    545e:	b004      	add	sp, #16
    5460:	4770      	bx	lr
    5462:	bf00      	nop
    5464:	00016310 	.word	0x00016310
    5468:	40048000 	.word	0x40048000

0000546c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    546c:	b084      	sub	sp, #16
    546e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5470:	9b01      	ldr	r3, [sp, #4]
    5472:	685b      	ldr	r3, [r3, #4]
    5474:	4a0b      	ldr	r2, [pc, #44]	; (54a4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    5476:	5cd3      	ldrb	r3, [r2, r3]
    5478:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    547a:	4b0b      	ldr	r3, [pc, #44]	; (54a8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    547c:	685b      	ldr	r3, [r3, #4]
    547e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5480:	9b02      	ldr	r3, [sp, #8]
    5482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5486:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5488:	9b03      	ldr	r3, [sp, #12]
    548a:	031b      	lsls	r3, r3, #12
    548c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5490:	9a02      	ldr	r2, [sp, #8]
    5492:	4313      	orrs	r3, r2
    5494:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    5496:	4a04      	ldr	r2, [pc, #16]	; (54a8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5498:	9b02      	ldr	r3, [sp, #8]
    549a:	6053      	str	r3, [r2, #4]
}
    549c:	bf00      	nop
    549e:	b004      	add	sp, #16
    54a0:	4770      	bx	lr
    54a2:	bf00      	nop
    54a4:	00016310 	.word	0x00016310
    54a8:	40048000 	.word	0x40048000

000054ac <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    54ac:	b500      	push	{lr}
    54ae:	b085      	sub	sp, #20
    54b0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    54b2:	2300      	movs	r3, #0
    54b4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    54b8:	9b01      	ldr	r3, [sp, #4]
    54ba:	2b00      	cmp	r3, #0
    54bc:	d037      	beq.n	552e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    54be:	2300      	movs	r3, #0
    54c0:	9303      	str	r3, [sp, #12]
    54c2:	e02b      	b.n	551c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    54c4:	4b29      	ldr	r3, [pc, #164]	; (556c <DisableSafeClock+0xc0>)
    54c6:	6819      	ldr	r1, [r3, #0]
    54c8:	9a03      	ldr	r2, [sp, #12]
    54ca:	4613      	mov	r3, r2
    54cc:	005b      	lsls	r3, r3, #1
    54ce:	4413      	add	r3, r2
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	440b      	add	r3, r1
    54d4:	3314      	adds	r3, #20
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	2b05      	cmp	r3, #5
    54da:	d11c      	bne.n	5516 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    54dc:	2301      	movs	r3, #1
    54de:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    54e2:	4b22      	ldr	r3, [pc, #136]	; (556c <DisableSafeClock+0xc0>)
    54e4:	6819      	ldr	r1, [r3, #0]
    54e6:	9a03      	ldr	r2, [sp, #12]
    54e8:	4613      	mov	r3, r2
    54ea:	005b      	lsls	r3, r3, #1
    54ec:	4413      	add	r3, r2
    54ee:	009b      	lsls	r3, r3, #2
    54f0:	440b      	add	r3, r1
    54f2:	3318      	adds	r3, #24
    54f4:	881b      	ldrh	r3, [r3, #0]
    54f6:	2b00      	cmp	r3, #0
    54f8:	d118      	bne.n	552c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    54fa:	4b1d      	ldr	r3, [pc, #116]	; (5570 <DisableSafeClock+0xc4>)
    54fc:	791b      	ldrb	r3, [r3, #4]
    54fe:	4619      	mov	r1, r3
    5500:	4a1c      	ldr	r2, [pc, #112]	; (5574 <DisableSafeClock+0xc8>)
    5502:	460b      	mov	r3, r1
    5504:	005b      	lsls	r3, r3, #1
    5506:	440b      	add	r3, r1
    5508:	009b      	lsls	r3, r3, #2
    550a:	4413      	add	r3, r2
    550c:	3308      	adds	r3, #8
    550e:	681b      	ldr	r3, [r3, #0]
    5510:	2005      	movs	r0, #5
    5512:	4798      	blx	r3
                }
                break;
    5514:	e00a      	b.n	552c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5516:	9b03      	ldr	r3, [sp, #12]
    5518:	3301      	adds	r3, #1
    551a:	9303      	str	r3, [sp, #12]
    551c:	4b13      	ldr	r3, [pc, #76]	; (556c <DisableSafeClock+0xc0>)
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	7a1b      	ldrb	r3, [r3, #8]
    5522:	461a      	mov	r2, r3
    5524:	9b03      	ldr	r3, [sp, #12]
    5526:	4293      	cmp	r3, r2
    5528:	d3cc      	bcc.n	54c4 <DisableSafeClock+0x18>
    552a:	e000      	b.n	552e <DisableSafeClock+0x82>
                break;
    552c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    552e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5532:	f083 0301 	eor.w	r3, r3, #1
    5536:	b2db      	uxtb	r3, r3
    5538:	2b00      	cmp	r3, #0
    553a:	d013      	beq.n	5564 <DisableSafeClock+0xb8>
    553c:	4b0e      	ldr	r3, [pc, #56]	; (5578 <DisableSafeClock+0xcc>)
    553e:	781b      	ldrb	r3, [r3, #0]
    5540:	f083 0301 	eor.w	r3, r3, #1
    5544:	b2db      	uxtb	r3, r3
    5546:	2b00      	cmp	r3, #0
    5548:	d00c      	beq.n	5564 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    554a:	4b09      	ldr	r3, [pc, #36]	; (5570 <DisableSafeClock+0xc4>)
    554c:	791b      	ldrb	r3, [r3, #4]
    554e:	4619      	mov	r1, r3
    5550:	4a08      	ldr	r2, [pc, #32]	; (5574 <DisableSafeClock+0xc8>)
    5552:	460b      	mov	r3, r1
    5554:	005b      	lsls	r3, r3, #1
    5556:	440b      	add	r3, r1
    5558:	009b      	lsls	r3, r3, #2
    555a:	4413      	add	r3, r2
    555c:	3308      	adds	r3, #8
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	2005      	movs	r0, #5
    5562:	4798      	blx	r3
    }
}
    5564:	bf00      	nop
    5566:	b005      	add	sp, #20
    5568:	f85d fb04 	ldr.w	pc, [sp], #4
    556c:	1fff8bc8 	.word	0x1fff8bc8
    5570:	00015f90 	.word	0x00015f90
    5574:	000165c0 	.word	0x000165c0
    5578:	1fff8b18 	.word	0x1fff8b18

0000557c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    557c:	4b06      	ldr	r3, [pc, #24]	; (5598 <SetFircToResetValue_TrustedCall+0x1c>)
    557e:	2200      	movs	r2, #0
    5580:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    5584:	4b04      	ldr	r3, [pc, #16]	; (5598 <SetFircToResetValue_TrustedCall+0x1c>)
    5586:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    558a:	4a03      	ldr	r2, [pc, #12]	; (5598 <SetFircToResetValue_TrustedCall+0x1c>)
    558c:	f043 0301 	orr.w	r3, r3, #1
    5590:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    5594:	bf00      	nop
    5596:	4770      	bx	lr
    5598:	40064000 	.word	0x40064000

0000559c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    559c:	b084      	sub	sp, #16
    559e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    55a0:	2303      	movs	r3, #3
    55a2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    55a4:	2300      	movs	r3, #0
    55a6:	9302      	str	r3, [sp, #8]
    55a8:	e028      	b.n	55fc <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    55aa:	9b01      	ldr	r3, [sp, #4]
    55ac:	9a02      	ldr	r2, [sp, #8]
    55ae:	320d      	adds	r2, #13
    55b0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    55b4:	2b28      	cmp	r3, #40	; 0x28
    55b6:	d10b      	bne.n	55d0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    55b8:	9a01      	ldr	r2, [sp, #4]
    55ba:	9b02      	ldr	r3, [sp, #8]
    55bc:	330d      	adds	r3, #13
    55be:	00db      	lsls	r3, r3, #3
    55c0:	4413      	add	r3, r2
    55c2:	685b      	ldr	r3, [r3, #4]
    55c4:	4a2b      	ldr	r2, [pc, #172]	; (5674 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    55c6:	5cd3      	ldrb	r3, [r2, r3]
    55c8:	011b      	lsls	r3, r3, #4
    55ca:	9a03      	ldr	r2, [sp, #12]
    55cc:	4313      	orrs	r3, r2
    55ce:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    55d0:	9b01      	ldr	r3, [sp, #4]
    55d2:	9a02      	ldr	r2, [sp, #8]
    55d4:	320d      	adds	r2, #13
    55d6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    55da:	2b29      	cmp	r3, #41	; 0x29
    55dc:	d10b      	bne.n	55f6 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    55de:	9a01      	ldr	r2, [sp, #4]
    55e0:	9b02      	ldr	r3, [sp, #8]
    55e2:	330d      	adds	r3, #13
    55e4:	00db      	lsls	r3, r3, #3
    55e6:	4413      	add	r3, r2
    55e8:	685b      	ldr	r3, [r3, #4]
    55ea:	4a23      	ldr	r2, [pc, #140]	; (5678 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    55ec:	5cd3      	ldrb	r3, [r2, r3]
    55ee:	009b      	lsls	r3, r3, #2
    55f0:	9a03      	ldr	r2, [sp, #12]
    55f2:	4313      	orrs	r3, r2
    55f4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    55f6:	9b02      	ldr	r3, [sp, #8]
    55f8:	3301      	adds	r3, #1
    55fa:	9302      	str	r3, [sp, #8]
    55fc:	9b01      	ldr	r3, [sp, #4]
    55fe:	7adb      	ldrb	r3, [r3, #11]
    5600:	461a      	mov	r2, r3
    5602:	9b02      	ldr	r3, [sp, #8]
    5604:	4293      	cmp	r3, r2
    5606:	d3d0      	bcc.n	55aa <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5608:	2300      	movs	r3, #0
    560a:	9302      	str	r3, [sp, #8]
    560c:	e026      	b.n	565c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    560e:	9a01      	ldr	r2, [sp, #4]
    5610:	9b02      	ldr	r3, [sp, #8]
    5612:	334e      	adds	r3, #78	; 0x4e
    5614:	00db      	lsls	r3, r3, #3
    5616:	4413      	add	r3, r2
    5618:	685b      	ldr	r3, [r3, #4]
    561a:	2b12      	cmp	r3, #18
    561c:	d109      	bne.n	5632 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    561e:	9a01      	ldr	r2, [sp, #4]
    5620:	9b02      	ldr	r3, [sp, #8]
    5622:	334e      	adds	r3, #78	; 0x4e
    5624:	00db      	lsls	r3, r3, #3
    5626:	4413      	add	r3, r2
    5628:	891b      	ldrh	r3, [r3, #8]
    562a:	005b      	lsls	r3, r3, #1
    562c:	9a03      	ldr	r2, [sp, #12]
    562e:	4313      	orrs	r3, r2
    5630:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    5632:	9a01      	ldr	r2, [sp, #4]
    5634:	9b02      	ldr	r3, [sp, #8]
    5636:	334e      	adds	r3, #78	; 0x4e
    5638:	00db      	lsls	r3, r3, #3
    563a:	4413      	add	r3, r2
    563c:	685b      	ldr	r3, [r3, #4]
    563e:	2b13      	cmp	r3, #19
    5640:	d109      	bne.n	5656 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    5642:	9a01      	ldr	r2, [sp, #4]
    5644:	9b02      	ldr	r3, [sp, #8]
    5646:	334e      	adds	r3, #78	; 0x4e
    5648:	00db      	lsls	r3, r3, #3
    564a:	4413      	add	r3, r2
    564c:	891b      	ldrh	r3, [r3, #8]
    564e:	461a      	mov	r2, r3
    5650:	9b03      	ldr	r3, [sp, #12]
    5652:	4313      	orrs	r3, r2
    5654:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5656:	9b02      	ldr	r3, [sp, #8]
    5658:	3301      	adds	r3, #1
    565a:	9302      	str	r3, [sp, #8]
    565c:	9b01      	ldr	r3, [sp, #4]
    565e:	7c1b      	ldrb	r3, [r3, #16]
    5660:	461a      	mov	r2, r3
    5662:	9b02      	ldr	r3, [sp, #8]
    5664:	4293      	cmp	r3, r2
    5666:	d3d2      	bcc.n	560e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5668:	4a04      	ldr	r2, [pc, #16]	; (567c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    566a:	9b03      	ldr	r3, [sp, #12]
    566c:	6113      	str	r3, [r2, #16]
}
    566e:	bf00      	nop
    5670:	b004      	add	sp, #16
    5672:	4770      	bx	lr
    5674:	00016310 	.word	0x00016310
    5678:	000163c8 	.word	0x000163c8
    567c:	40048000 	.word	0x40048000

00005680 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5680:	b500      	push	{lr}
    5682:	b089      	sub	sp, #36	; 0x24
    5684:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    5686:	2300      	movs	r3, #0
    5688:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    568c:	4a21      	ldr	r2, [pc, #132]	; (5714 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    568e:	9b01      	ldr	r3, [sp, #4]
    5690:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    5692:	4b21      	ldr	r3, [pc, #132]	; (5718 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5694:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5698:	f003 0301 	and.w	r3, r3, #1
    569c:	2b00      	cmp	r3, #0
    569e:	d12e      	bne.n	56fe <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    56a0:	4b1e      	ldr	r3, [pc, #120]	; (571c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    56a2:	2200      	movs	r2, #0
    56a4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    56a6:	f7ff ff69 	bl	557c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    56aa:	aa03      	add	r2, sp, #12
    56ac:	a904      	add	r1, sp, #16
    56ae:	a805      	add	r0, sp, #20
    56b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    56b4:	f7fe f8ae 	bl	3814 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    56b8:	4b17      	ldr	r3, [pc, #92]	; (5718 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    56ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    56be:	0e1b      	lsrs	r3, r3, #24
    56c0:	f003 0301 	and.w	r3, r3, #1
    56c4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    56c6:	9a03      	ldr	r2, [sp, #12]
    56c8:	a904      	add	r1, sp, #16
    56ca:	ab05      	add	r3, sp, #20
    56cc:	4618      	mov	r0, r3
    56ce:	f7fe f8bb 	bl	3848 <Clock_Ip_TimeoutExpired>
    56d2:	4603      	mov	r3, r0
    56d4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    56d8:	9b06      	ldr	r3, [sp, #24]
    56da:	2b00      	cmp	r3, #0
    56dc:	d106      	bne.n	56ec <Clock_Ip_SpecificPlatformInitClock+0x6c>
    56de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56e2:	f083 0301 	eor.w	r3, r3, #1
    56e6:	b2db      	uxtb	r3, r3
    56e8:	2b00      	cmp	r3, #0
    56ea:	d1e5      	bne.n	56b8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    56ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56f0:	2b00      	cmp	r3, #0
    56f2:	d007      	beq.n	5704 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    56f4:	2105      	movs	r1, #5
    56f6:	2001      	movs	r0, #1
    56f8:	f7fe f87c 	bl	37f4 <Clock_Ip_ReportClockErrors>
    56fc:	e002      	b.n	5704 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    56fe:	4b07      	ldr	r3, [pc, #28]	; (571c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5700:	2201      	movs	r2, #1
    5702:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    5704:	9801      	ldr	r0, [sp, #4]
    5706:	f7ff ff49 	bl	559c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    570a:	bf00      	nop
    570c:	b009      	add	sp, #36	; 0x24
    570e:	f85d fb04 	ldr.w	pc, [sp], #4
    5712:	bf00      	nop
    5714:	1fff8bc8 	.word	0x1fff8bc8
    5718:	40064000 	.word	0x40064000
    571c:	1fff8b18 	.word	0x1fff8b18

00005720 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    5720:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    5722:	2300      	movs	r3, #0
    5724:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5726:	4b29      	ldr	r3, [pc, #164]	; (57cc <getFircConfig+0xac>)
    5728:	681b      	ldr	r3, [r3, #0]
    572a:	2b00      	cmp	r3, #0
    572c:	d024      	beq.n	5778 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    572e:	2300      	movs	r3, #0
    5730:	9301      	str	r3, [sp, #4]
    5732:	e01a      	b.n	576a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5734:	4b25      	ldr	r3, [pc, #148]	; (57cc <getFircConfig+0xac>)
    5736:	6819      	ldr	r1, [r3, #0]
    5738:	9a01      	ldr	r2, [sp, #4]
    573a:	4613      	mov	r3, r2
    573c:	005b      	lsls	r3, r3, #1
    573e:	4413      	add	r3, r2
    5740:	009b      	lsls	r3, r3, #2
    5742:	440b      	add	r3, r1
    5744:	3314      	adds	r3, #20
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	2b05      	cmp	r3, #5
    574a:	d10b      	bne.n	5764 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    574c:	4b1f      	ldr	r3, [pc, #124]	; (57cc <getFircConfig+0xac>)
    574e:	6819      	ldr	r1, [r3, #0]
    5750:	9a01      	ldr	r2, [sp, #4]
    5752:	4613      	mov	r3, r2
    5754:	005b      	lsls	r3, r3, #1
    5756:	4413      	add	r3, r2
    5758:	009b      	lsls	r3, r3, #2
    575a:	3310      	adds	r3, #16
    575c:	440b      	add	r3, r1
    575e:	3304      	adds	r3, #4
    5760:	9300      	str	r3, [sp, #0]
                break;
    5762:	e009      	b.n	5778 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5764:	9b01      	ldr	r3, [sp, #4]
    5766:	3301      	adds	r3, #1
    5768:	9301      	str	r3, [sp, #4]
    576a:	4b18      	ldr	r3, [pc, #96]	; (57cc <getFircConfig+0xac>)
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	7a1b      	ldrb	r3, [r3, #8]
    5770:	461a      	mov	r2, r3
    5772:	9b01      	ldr	r3, [sp, #4]
    5774:	4293      	cmp	r3, r2
    5776:	d3dd      	bcc.n	5734 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5778:	9b00      	ldr	r3, [sp, #0]
    577a:	2b00      	cmp	r3, #0
    577c:	d121      	bne.n	57c2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    577e:	4b14      	ldr	r3, [pc, #80]	; (57d0 <getFircConfig+0xb0>)
    5780:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    5782:	4b13      	ldr	r3, [pc, #76]	; (57d0 <getFircConfig+0xb0>)
    5784:	2205      	movs	r2, #5
    5786:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5788:	4b12      	ldr	r3, [pc, #72]	; (57d4 <getFircConfig+0xb4>)
    578a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    578e:	b29b      	uxth	r3, r3
    5790:	f003 0301 	and.w	r3, r3, #1
    5794:	b29a      	uxth	r2, r3
    5796:	4b0e      	ldr	r3, [pc, #56]	; (57d0 <getFircConfig+0xb0>)
    5798:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <getFircConfig+0xb4>)
    579c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    57a0:	b2db      	uxtb	r3, r3
    57a2:	f003 0303 	and.w	r3, r3, #3
    57a6:	b2da      	uxtb	r2, r3
    57a8:	4b09      	ldr	r3, [pc, #36]	; (57d0 <getFircConfig+0xb0>)
    57aa:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    57ac:	4b09      	ldr	r3, [pc, #36]	; (57d4 <getFircConfig+0xb4>)
    57ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    57b2:	b2db      	uxtb	r3, r3
    57b4:	10db      	asrs	r3, r3, #3
    57b6:	b2db      	uxtb	r3, r3
    57b8:	f003 0301 	and.w	r3, r3, #1
    57bc:	b2da      	uxtb	r2, r3
    57be:	4b04      	ldr	r3, [pc, #16]	; (57d0 <getFircConfig+0xb0>)
    57c0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    57c2:	9b00      	ldr	r3, [sp, #0]
}
    57c4:	4618      	mov	r0, r3
    57c6:	b002      	add	sp, #8
    57c8:	4770      	bx	lr
    57ca:	bf00      	nop
    57cc:	1fff8bc8 	.word	0x1fff8bc8
    57d0:	1fff8c34 	.word	0x1fff8c34
    57d4:	40064000 	.word	0x40064000

000057d8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    57d8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    57da:	2300      	movs	r3, #0
    57dc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    57de:	4b20      	ldr	r3, [pc, #128]	; (5860 <getSoscConfig+0x88>)
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	2b00      	cmp	r3, #0
    57e4:	d024      	beq.n	5830 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    57e6:	2300      	movs	r3, #0
    57e8:	9301      	str	r3, [sp, #4]
    57ea:	e01a      	b.n	5822 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    57ec:	4b1c      	ldr	r3, [pc, #112]	; (5860 <getSoscConfig+0x88>)
    57ee:	6819      	ldr	r1, [r3, #0]
    57f0:	9a01      	ldr	r2, [sp, #4]
    57f2:	4613      	mov	r3, r2
    57f4:	009b      	lsls	r3, r3, #2
    57f6:	4413      	add	r3, r2
    57f8:	009b      	lsls	r3, r3, #2
    57fa:	440b      	add	r3, r1
    57fc:	332c      	adds	r3, #44	; 0x2c
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	2b08      	cmp	r3, #8
    5802:	d10b      	bne.n	581c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5804:	4b16      	ldr	r3, [pc, #88]	; (5860 <getSoscConfig+0x88>)
    5806:	6819      	ldr	r1, [r3, #0]
    5808:	9a01      	ldr	r2, [sp, #4]
    580a:	4613      	mov	r3, r2
    580c:	009b      	lsls	r3, r3, #2
    580e:	4413      	add	r3, r2
    5810:	009b      	lsls	r3, r3, #2
    5812:	3328      	adds	r3, #40	; 0x28
    5814:	440b      	add	r3, r1
    5816:	3304      	adds	r3, #4
    5818:	9300      	str	r3, [sp, #0]
                break;
    581a:	e009      	b.n	5830 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    581c:	9b01      	ldr	r3, [sp, #4]
    581e:	3301      	adds	r3, #1
    5820:	9301      	str	r3, [sp, #4]
    5822:	4b0f      	ldr	r3, [pc, #60]	; (5860 <getSoscConfig+0x88>)
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	7a5b      	ldrb	r3, [r3, #9]
    5828:	461a      	mov	r2, r3
    582a:	9b01      	ldr	r3, [sp, #4]
    582c:	4293      	cmp	r3, r2
    582e:	d3dd      	bcc.n	57ec <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5830:	9b00      	ldr	r3, [sp, #0]
    5832:	2b00      	cmp	r3, #0
    5834:	d110      	bne.n	5858 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    5836:	4b0b      	ldr	r3, [pc, #44]	; (5864 <getSoscConfig+0x8c>)
    5838:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    583a:	4b0a      	ldr	r3, [pc, #40]	; (5864 <getSoscConfig+0x8c>)
    583c:	2208      	movs	r2, #8
    583e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5840:	4b09      	ldr	r3, [pc, #36]	; (5868 <getSoscConfig+0x90>)
    5842:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5846:	b29b      	uxth	r3, r3
    5848:	f003 0301 	and.w	r3, r3, #1
    584c:	b29a      	uxth	r2, r3
    584e:	4b05      	ldr	r3, [pc, #20]	; (5864 <getSoscConfig+0x8c>)
    5850:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5852:	4b04      	ldr	r3, [pc, #16]	; (5864 <getSoscConfig+0x8c>)
    5854:	4a05      	ldr	r2, [pc, #20]	; (586c <getSoscConfig+0x94>)
    5856:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5858:	9b00      	ldr	r3, [sp, #0]
}
    585a:	4618      	mov	r0, r3
    585c:	b002      	add	sp, #8
    585e:	4770      	bx	lr
    5860:	1fff8bc8 	.word	0x1fff8bc8
    5864:	1fff8c40 	.word	0x1fff8c40
    5868:	40064000 	.word	0x40064000
    586c:	02625a00 	.word	0x02625a00

00005870 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5870:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5872:	2300      	movs	r3, #0
    5874:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5876:	4b28      	ldr	r3, [pc, #160]	; (5918 <getSpllConfig+0xa8>)
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	2b00      	cmp	r3, #0
    587c:	d023      	beq.n	58c6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    587e:	2300      	movs	r3, #0
    5880:	9301      	str	r3, [sp, #4]
    5882:	e019      	b.n	58b8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5884:	4b24      	ldr	r3, [pc, #144]	; (5918 <getSpllConfig+0xa8>)
    5886:	6819      	ldr	r1, [r3, #0]
    5888:	9a01      	ldr	r2, [sp, #4]
    588a:	4613      	mov	r3, r2
    588c:	009b      	lsls	r3, r3, #2
    588e:	4413      	add	r3, r2
    5890:	00db      	lsls	r3, r3, #3
    5892:	440b      	add	r3, r1
    5894:	3340      	adds	r3, #64	; 0x40
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	2b09      	cmp	r3, #9
    589a:	d10a      	bne.n	58b2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    589c:	4b1e      	ldr	r3, [pc, #120]	; (5918 <getSpllConfig+0xa8>)
    589e:	6819      	ldr	r1, [r3, #0]
    58a0:	9a01      	ldr	r2, [sp, #4]
    58a2:	4613      	mov	r3, r2
    58a4:	009b      	lsls	r3, r3, #2
    58a6:	4413      	add	r3, r2
    58a8:	00db      	lsls	r3, r3, #3
    58aa:	3340      	adds	r3, #64	; 0x40
    58ac:	440b      	add	r3, r1
    58ae:	9300      	str	r3, [sp, #0]
                break;
    58b0:	e009      	b.n	58c6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    58b2:	9b01      	ldr	r3, [sp, #4]
    58b4:	3301      	adds	r3, #1
    58b6:	9301      	str	r3, [sp, #4]
    58b8:	4b17      	ldr	r3, [pc, #92]	; (5918 <getSpllConfig+0xa8>)
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	7a9b      	ldrb	r3, [r3, #10]
    58be:	461a      	mov	r2, r3
    58c0:	9b01      	ldr	r3, [sp, #4]
    58c2:	4293      	cmp	r3, r2
    58c4:	d3de      	bcc.n	5884 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    58c6:	9b00      	ldr	r3, [sp, #0]
    58c8:	2b00      	cmp	r3, #0
    58ca:	d121      	bne.n	5910 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    58cc:	4b13      	ldr	r3, [pc, #76]	; (591c <getSpllConfig+0xac>)
    58ce:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    58d0:	4b12      	ldr	r3, [pc, #72]	; (591c <getSpllConfig+0xac>)
    58d2:	2209      	movs	r2, #9
    58d4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    58d6:	4b12      	ldr	r3, [pc, #72]	; (5920 <getSpllConfig+0xb0>)
    58d8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    58dc:	b29b      	uxth	r3, r3
    58de:	f003 0301 	and.w	r3, r3, #1
    58e2:	b29a      	uxth	r2, r3
    58e4:	4b0d      	ldr	r3, [pc, #52]	; (591c <getSpllConfig+0xac>)
    58e6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    58e8:	4b0d      	ldr	r3, [pc, #52]	; (5920 <getSpllConfig+0xb0>)
    58ea:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    58ee:	0a1b      	lsrs	r3, r3, #8
    58f0:	b2db      	uxtb	r3, r3
    58f2:	f003 0307 	and.w	r3, r3, #7
    58f6:	b2da      	uxtb	r2, r3
    58f8:	4b08      	ldr	r3, [pc, #32]	; (591c <getSpllConfig+0xac>)
    58fa:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    58fc:	4b08      	ldr	r3, [pc, #32]	; (5920 <getSpllConfig+0xb0>)
    58fe:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5902:	0c1b      	lsrs	r3, r3, #16
    5904:	b2db      	uxtb	r3, r3
    5906:	f003 031f 	and.w	r3, r3, #31
    590a:	b2da      	uxtb	r2, r3
    590c:	4b03      	ldr	r3, [pc, #12]	; (591c <getSpllConfig+0xac>)
    590e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5910:	9b00      	ldr	r3, [sp, #0]
}
    5912:	4618      	mov	r0, r3
    5914:	b002      	add	sp, #8
    5916:	4770      	bx	lr
    5918:	1fff8bc8 	.word	0x1fff8bc8
    591c:	1fff8c54 	.word	0x1fff8c54
    5920:	40064000 	.word	0x40064000

00005924 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5924:	b086      	sub	sp, #24
    5926:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5928:	2300      	movs	r3, #0
    592a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    592c:	9b01      	ldr	r3, [sp, #4]
    592e:	2b1b      	cmp	r3, #27
    5930:	d00f      	beq.n	5952 <getSelectorConfig+0x2e>
    5932:	9b01      	ldr	r3, [sp, #4]
    5934:	2b1b      	cmp	r3, #27
    5936:	d80f      	bhi.n	5958 <getSelectorConfig+0x34>
    5938:	9b01      	ldr	r3, [sp, #4]
    593a:	2b19      	cmp	r3, #25
    593c:	d003      	beq.n	5946 <getSelectorConfig+0x22>
    593e:	9b01      	ldr	r3, [sp, #4]
    5940:	2b1a      	cmp	r3, #26
    5942:	d003      	beq.n	594c <getSelectorConfig+0x28>
    5944:	e008      	b.n	5958 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5946:	2300      	movs	r3, #0
    5948:	9304      	str	r3, [sp, #16]
            break;
    594a:	e008      	b.n	595e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    594c:	2301      	movs	r3, #1
    594e:	9304      	str	r3, [sp, #16]
            break;
    5950:	e005      	b.n	595e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5952:	2302      	movs	r3, #2
    5954:	9304      	str	r3, [sp, #16]
            break;
    5956:	e002      	b.n	595e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5958:	2300      	movs	r3, #0
    595a:	9304      	str	r3, [sp, #16]
            break;
    595c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    595e:	4b36      	ldr	r3, [pc, #216]	; (5a38 <getSelectorConfig+0x114>)
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	2b00      	cmp	r3, #0
    5964:	d01d      	beq.n	59a2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5966:	2300      	movs	r3, #0
    5968:	9303      	str	r3, [sp, #12]
    596a:	e013      	b.n	5994 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    596c:	4b32      	ldr	r3, [pc, #200]	; (5a38 <getSelectorConfig+0x114>)
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	9a03      	ldr	r2, [sp, #12]
    5972:	320d      	adds	r2, #13
    5974:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5978:	9a01      	ldr	r2, [sp, #4]
    597a:	429a      	cmp	r2, r3
    597c:	d107      	bne.n	598e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    597e:	4b2e      	ldr	r3, [pc, #184]	; (5a38 <getSelectorConfig+0x114>)
    5980:	681a      	ldr	r2, [r3, #0]
    5982:	9b03      	ldr	r3, [sp, #12]
    5984:	330d      	adds	r3, #13
    5986:	00db      	lsls	r3, r3, #3
    5988:	4413      	add	r3, r2
    598a:	9305      	str	r3, [sp, #20]
                break;
    598c:	e009      	b.n	59a2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    598e:	9b03      	ldr	r3, [sp, #12]
    5990:	3301      	adds	r3, #1
    5992:	9303      	str	r3, [sp, #12]
    5994:	4b28      	ldr	r3, [pc, #160]	; (5a38 <getSelectorConfig+0x114>)
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	7adb      	ldrb	r3, [r3, #11]
    599a:	461a      	mov	r2, r3
    599c:	9b03      	ldr	r3, [sp, #12]
    599e:	4293      	cmp	r3, r2
    59a0:	d3e4      	bcc.n	596c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    59a2:	9b05      	ldr	r3, [sp, #20]
    59a4:	2b00      	cmp	r3, #0
    59a6:	d140      	bne.n	5a2a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    59a8:	9b04      	ldr	r3, [sp, #16]
    59aa:	00db      	lsls	r3, r3, #3
    59ac:	4a23      	ldr	r2, [pc, #140]	; (5a3c <getSelectorConfig+0x118>)
    59ae:	4413      	add	r3, r2
    59b0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    59b2:	4922      	ldr	r1, [pc, #136]	; (5a3c <getSelectorConfig+0x118>)
    59b4:	9b04      	ldr	r3, [sp, #16]
    59b6:	9a01      	ldr	r2, [sp, #4]
    59b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    59bc:	9b01      	ldr	r3, [sp, #4]
    59be:	2b1b      	cmp	r3, #27
    59c0:	d025      	beq.n	5a0e <getSelectorConfig+0xea>
    59c2:	9b01      	ldr	r3, [sp, #4]
    59c4:	2b1b      	cmp	r3, #27
    59c6:	d832      	bhi.n	5a2e <getSelectorConfig+0x10a>
    59c8:	9b01      	ldr	r3, [sp, #4]
    59ca:	2b19      	cmp	r3, #25
    59cc:	d003      	beq.n	59d6 <getSelectorConfig+0xb2>
    59ce:	9b01      	ldr	r3, [sp, #4]
    59d0:	2b1a      	cmp	r3, #26
    59d2:	d00e      	beq.n	59f2 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    59d4:	e02b      	b.n	5a2e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    59d6:	4b1a      	ldr	r3, [pc, #104]	; (5a40 <getSelectorConfig+0x11c>)
    59d8:	695b      	ldr	r3, [r3, #20]
    59da:	0e1b      	lsrs	r3, r3, #24
    59dc:	f003 030f 	and.w	r3, r3, #15
    59e0:	4a18      	ldr	r2, [pc, #96]	; (5a44 <getSelectorConfig+0x120>)
    59e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59e6:	4915      	ldr	r1, [pc, #84]	; (5a3c <getSelectorConfig+0x118>)
    59e8:	9b04      	ldr	r3, [sp, #16]
    59ea:	00db      	lsls	r3, r3, #3
    59ec:	440b      	add	r3, r1
    59ee:	605a      	str	r2, [r3, #4]
                break;
    59f0:	e01e      	b.n	5a30 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    59f2:	4b13      	ldr	r3, [pc, #76]	; (5a40 <getSelectorConfig+0x11c>)
    59f4:	699b      	ldr	r3, [r3, #24]
    59f6:	0e1b      	lsrs	r3, r3, #24
    59f8:	f003 030f 	and.w	r3, r3, #15
    59fc:	4a11      	ldr	r2, [pc, #68]	; (5a44 <getSelectorConfig+0x120>)
    59fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5a02:	490e      	ldr	r1, [pc, #56]	; (5a3c <getSelectorConfig+0x118>)
    5a04:	9b04      	ldr	r3, [sp, #16]
    5a06:	00db      	lsls	r3, r3, #3
    5a08:	440b      	add	r3, r1
    5a0a:	605a      	str	r2, [r3, #4]
                break;
    5a0c:	e010      	b.n	5a30 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5a0e:	4b0c      	ldr	r3, [pc, #48]	; (5a40 <getSelectorConfig+0x11c>)
    5a10:	69db      	ldr	r3, [r3, #28]
    5a12:	0e1b      	lsrs	r3, r3, #24
    5a14:	f003 030f 	and.w	r3, r3, #15
    5a18:	4a0a      	ldr	r2, [pc, #40]	; (5a44 <getSelectorConfig+0x120>)
    5a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5a1e:	4907      	ldr	r1, [pc, #28]	; (5a3c <getSelectorConfig+0x118>)
    5a20:	9b04      	ldr	r3, [sp, #16]
    5a22:	00db      	lsls	r3, r3, #3
    5a24:	440b      	add	r3, r1
    5a26:	605a      	str	r2, [r3, #4]
                break;
    5a28:	e002      	b.n	5a30 <getSelectorConfig+0x10c>
        }
    }
    5a2a:	bf00      	nop
    5a2c:	e000      	b.n	5a30 <getSelectorConfig+0x10c>
                break;
    5a2e:	bf00      	nop

    return ReturnValue;
    5a30:	9b05      	ldr	r3, [sp, #20]
}
    5a32:	4618      	mov	r0, r3
    5a34:	b006      	add	sp, #24
    5a36:	4770      	bx	lr
    5a38:	1fff8bc8 	.word	0x1fff8bc8
    5a3c:	1fff8c7c 	.word	0x1fff8c7c
    5a40:	40064000 	.word	0x40064000
    5a44:	00016690 	.word	0x00016690

00005a48 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5a48:	b086      	sub	sp, #24
    5a4a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5a4c:	2300      	movs	r3, #0
    5a4e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5a50:	2300      	movs	r3, #0
    5a52:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5a54:	9b01      	ldr	r3, [sp, #4]
    5a56:	2b1f      	cmp	r3, #31
    5a58:	d00f      	beq.n	5a7a <getCoreDividerConfig+0x32>
    5a5a:	9b01      	ldr	r3, [sp, #4]
    5a5c:	2b1f      	cmp	r3, #31
    5a5e:	d80f      	bhi.n	5a80 <getCoreDividerConfig+0x38>
    5a60:	9b01      	ldr	r3, [sp, #4]
    5a62:	2b1d      	cmp	r3, #29
    5a64:	d003      	beq.n	5a6e <getCoreDividerConfig+0x26>
    5a66:	9b01      	ldr	r3, [sp, #4]
    5a68:	2b1e      	cmp	r3, #30
    5a6a:	d003      	beq.n	5a74 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5a6c:	e008      	b.n	5a80 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5a6e:	2300      	movs	r3, #0
    5a70:	9304      	str	r3, [sp, #16]
            break;
    5a72:	e006      	b.n	5a82 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5a74:	2301      	movs	r3, #1
    5a76:	9304      	str	r3, [sp, #16]
            break;
    5a78:	e003      	b.n	5a82 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5a7a:	2302      	movs	r3, #2
    5a7c:	9304      	str	r3, [sp, #16]
            break;
    5a7e:	e000      	b.n	5a82 <getCoreDividerConfig+0x3a>
                break;
    5a80:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5a82:	4b41      	ldr	r3, [pc, #260]	; (5b88 <getCoreDividerConfig+0x140>)
    5a84:	681b      	ldr	r3, [r3, #0]
    5a86:	2b00      	cmp	r3, #0
    5a88:	d026      	beq.n	5ad8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5a8a:	2300      	movs	r3, #0
    5a8c:	9303      	str	r3, [sp, #12]
    5a8e:	e01c      	b.n	5aca <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5a90:	4b3d      	ldr	r3, [pc, #244]	; (5b88 <getCoreDividerConfig+0x140>)
    5a92:	6819      	ldr	r1, [r3, #0]
    5a94:	9a03      	ldr	r2, [sp, #12]
    5a96:	4613      	mov	r3, r2
    5a98:	005b      	lsls	r3, r3, #1
    5a9a:	4413      	add	r3, r2
    5a9c:	009b      	lsls	r3, r3, #2
    5a9e:	440b      	add	r3, r1
    5aa0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	9a01      	ldr	r2, [sp, #4]
    5aa8:	429a      	cmp	r2, r3
    5aaa:	d10b      	bne.n	5ac4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5aac:	4b36      	ldr	r3, [pc, #216]	; (5b88 <getCoreDividerConfig+0x140>)
    5aae:	6819      	ldr	r1, [r3, #0]
    5ab0:	9a03      	ldr	r2, [sp, #12]
    5ab2:	4613      	mov	r3, r2
    5ab4:	005b      	lsls	r3, r3, #1
    5ab6:	4413      	add	r3, r2
    5ab8:	009b      	lsls	r3, r3, #2
    5aba:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5abe:	440b      	add	r3, r1
    5ac0:	9305      	str	r3, [sp, #20]
                break;
    5ac2:	e009      	b.n	5ad8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5ac4:	9b03      	ldr	r3, [sp, #12]
    5ac6:	3301      	adds	r3, #1
    5ac8:	9303      	str	r3, [sp, #12]
    5aca:	4b2f      	ldr	r3, [pc, #188]	; (5b88 <getCoreDividerConfig+0x140>)
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	7b1b      	ldrb	r3, [r3, #12]
    5ad0:	461a      	mov	r2, r3
    5ad2:	9b03      	ldr	r3, [sp, #12]
    5ad4:	4293      	cmp	r3, r2
    5ad6:	d3db      	bcc.n	5a90 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5ad8:	9b05      	ldr	r3, [sp, #20]
    5ada:	2b00      	cmp	r3, #0
    5adc:	d14d      	bne.n	5b7a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5ade:	9a04      	ldr	r2, [sp, #16]
    5ae0:	4613      	mov	r3, r2
    5ae2:	005b      	lsls	r3, r3, #1
    5ae4:	4413      	add	r3, r2
    5ae6:	009b      	lsls	r3, r3, #2
    5ae8:	4a28      	ldr	r2, [pc, #160]	; (5b8c <getCoreDividerConfig+0x144>)
    5aea:	4413      	add	r3, r2
    5aec:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5aee:	4927      	ldr	r1, [pc, #156]	; (5b8c <getCoreDividerConfig+0x144>)
    5af0:	9a04      	ldr	r2, [sp, #16]
    5af2:	4613      	mov	r3, r2
    5af4:	005b      	lsls	r3, r3, #1
    5af6:	4413      	add	r3, r2
    5af8:	009b      	lsls	r3, r3, #2
    5afa:	440b      	add	r3, r1
    5afc:	9a01      	ldr	r2, [sp, #4]
    5afe:	601a      	str	r2, [r3, #0]
        switch(Name)
    5b00:	9b01      	ldr	r3, [sp, #4]
    5b02:	2b1f      	cmp	r3, #31
    5b04:	d029      	beq.n	5b5a <getCoreDividerConfig+0x112>
    5b06:	9b01      	ldr	r3, [sp, #4]
    5b08:	2b1f      	cmp	r3, #31
    5b0a:	d838      	bhi.n	5b7e <getCoreDividerConfig+0x136>
    5b0c:	9b01      	ldr	r3, [sp, #4]
    5b0e:	2b1d      	cmp	r3, #29
    5b10:	d003      	beq.n	5b1a <getCoreDividerConfig+0xd2>
    5b12:	9b01      	ldr	r3, [sp, #4]
    5b14:	2b1e      	cmp	r3, #30
    5b16:	d010      	beq.n	5b3a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5b18:	e031      	b.n	5b7e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5b1a:	4b1d      	ldr	r3, [pc, #116]	; (5b90 <getCoreDividerConfig+0x148>)
    5b1c:	695b      	ldr	r3, [r3, #20]
    5b1e:	0c1b      	lsrs	r3, r3, #16
    5b20:	f003 030f 	and.w	r3, r3, #15
    5b24:	1c59      	adds	r1, r3, #1
    5b26:	4819      	ldr	r0, [pc, #100]	; (5b8c <getCoreDividerConfig+0x144>)
    5b28:	9a04      	ldr	r2, [sp, #16]
    5b2a:	4613      	mov	r3, r2
    5b2c:	005b      	lsls	r3, r3, #1
    5b2e:	4413      	add	r3, r2
    5b30:	009b      	lsls	r3, r3, #2
    5b32:	4403      	add	r3, r0
    5b34:	3304      	adds	r3, #4
    5b36:	6019      	str	r1, [r3, #0]
                break;
    5b38:	e022      	b.n	5b80 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5b3a:	4b15      	ldr	r3, [pc, #84]	; (5b90 <getCoreDividerConfig+0x148>)
    5b3c:	699b      	ldr	r3, [r3, #24]
    5b3e:	0c1b      	lsrs	r3, r3, #16
    5b40:	f003 030f 	and.w	r3, r3, #15
    5b44:	1c59      	adds	r1, r3, #1
    5b46:	4811      	ldr	r0, [pc, #68]	; (5b8c <getCoreDividerConfig+0x144>)
    5b48:	9a04      	ldr	r2, [sp, #16]
    5b4a:	4613      	mov	r3, r2
    5b4c:	005b      	lsls	r3, r3, #1
    5b4e:	4413      	add	r3, r2
    5b50:	009b      	lsls	r3, r3, #2
    5b52:	4403      	add	r3, r0
    5b54:	3304      	adds	r3, #4
    5b56:	6019      	str	r1, [r3, #0]
                break;
    5b58:	e012      	b.n	5b80 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5b5a:	4b0d      	ldr	r3, [pc, #52]	; (5b90 <getCoreDividerConfig+0x148>)
    5b5c:	69db      	ldr	r3, [r3, #28]
    5b5e:	0c1b      	lsrs	r3, r3, #16
    5b60:	f003 030f 	and.w	r3, r3, #15
    5b64:	1c59      	adds	r1, r3, #1
    5b66:	4809      	ldr	r0, [pc, #36]	; (5b8c <getCoreDividerConfig+0x144>)
    5b68:	9a04      	ldr	r2, [sp, #16]
    5b6a:	4613      	mov	r3, r2
    5b6c:	005b      	lsls	r3, r3, #1
    5b6e:	4413      	add	r3, r2
    5b70:	009b      	lsls	r3, r3, #2
    5b72:	4403      	add	r3, r0
    5b74:	3304      	adds	r3, #4
    5b76:	6019      	str	r1, [r3, #0]
                break;
    5b78:	e002      	b.n	5b80 <getCoreDividerConfig+0x138>
        }
    }
    5b7a:	bf00      	nop
    5b7c:	e000      	b.n	5b80 <getCoreDividerConfig+0x138>
                break;
    5b7e:	bf00      	nop

    return ReturnValue;
    5b80:	9b05      	ldr	r3, [sp, #20]
}
    5b82:	4618      	mov	r0, r3
    5b84:	b006      	add	sp, #24
    5b86:	4770      	bx	lr
    5b88:	1fff8bc8 	.word	0x1fff8bc8
    5b8c:	1fff8c94 	.word	0x1fff8c94
    5b90:	40064000 	.word	0x40064000

00005b94 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5b94:	b086      	sub	sp, #24
    5b96:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5b98:	2300      	movs	r3, #0
    5b9a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5b9c:	2300      	movs	r3, #0
    5b9e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5ba0:	9b01      	ldr	r3, [sp, #4]
    5ba2:	2b23      	cmp	r3, #35	; 0x23
    5ba4:	d00f      	beq.n	5bc6 <getBusDividerConfig+0x32>
    5ba6:	9b01      	ldr	r3, [sp, #4]
    5ba8:	2b23      	cmp	r3, #35	; 0x23
    5baa:	d80f      	bhi.n	5bcc <getBusDividerConfig+0x38>
    5bac:	9b01      	ldr	r3, [sp, #4]
    5bae:	2b21      	cmp	r3, #33	; 0x21
    5bb0:	d003      	beq.n	5bba <getBusDividerConfig+0x26>
    5bb2:	9b01      	ldr	r3, [sp, #4]
    5bb4:	2b22      	cmp	r3, #34	; 0x22
    5bb6:	d003      	beq.n	5bc0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5bb8:	e008      	b.n	5bcc <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5bba:	2300      	movs	r3, #0
    5bbc:	9304      	str	r3, [sp, #16]
            break;
    5bbe:	e006      	b.n	5bce <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5bc0:	2301      	movs	r3, #1
    5bc2:	9304      	str	r3, [sp, #16]
            break;
    5bc4:	e003      	b.n	5bce <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5bc6:	2302      	movs	r3, #2
    5bc8:	9304      	str	r3, [sp, #16]
            break;
    5bca:	e000      	b.n	5bce <getBusDividerConfig+0x3a>
                break;
    5bcc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5bce:	4b41      	ldr	r3, [pc, #260]	; (5cd4 <getBusDividerConfig+0x140>)
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d026      	beq.n	5c24 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5bd6:	2300      	movs	r3, #0
    5bd8:	9303      	str	r3, [sp, #12]
    5bda:	e01c      	b.n	5c16 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5bdc:	4b3d      	ldr	r3, [pc, #244]	; (5cd4 <getBusDividerConfig+0x140>)
    5bde:	6819      	ldr	r1, [r3, #0]
    5be0:	9a03      	ldr	r2, [sp, #12]
    5be2:	4613      	mov	r3, r2
    5be4:	005b      	lsls	r3, r3, #1
    5be6:	4413      	add	r3, r2
    5be8:	009b      	lsls	r3, r3, #2
    5bea:	440b      	add	r3, r1
    5bec:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	9a01      	ldr	r2, [sp, #4]
    5bf4:	429a      	cmp	r2, r3
    5bf6:	d10b      	bne.n	5c10 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5bf8:	4b36      	ldr	r3, [pc, #216]	; (5cd4 <getBusDividerConfig+0x140>)
    5bfa:	6819      	ldr	r1, [r3, #0]
    5bfc:	9a03      	ldr	r2, [sp, #12]
    5bfe:	4613      	mov	r3, r2
    5c00:	005b      	lsls	r3, r3, #1
    5c02:	4413      	add	r3, r2
    5c04:	009b      	lsls	r3, r3, #2
    5c06:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5c0a:	440b      	add	r3, r1
    5c0c:	9305      	str	r3, [sp, #20]
                break;
    5c0e:	e009      	b.n	5c24 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5c10:	9b03      	ldr	r3, [sp, #12]
    5c12:	3301      	adds	r3, #1
    5c14:	9303      	str	r3, [sp, #12]
    5c16:	4b2f      	ldr	r3, [pc, #188]	; (5cd4 <getBusDividerConfig+0x140>)
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	7b1b      	ldrb	r3, [r3, #12]
    5c1c:	461a      	mov	r2, r3
    5c1e:	9b03      	ldr	r3, [sp, #12]
    5c20:	4293      	cmp	r3, r2
    5c22:	d3db      	bcc.n	5bdc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5c24:	9b05      	ldr	r3, [sp, #20]
    5c26:	2b00      	cmp	r3, #0
    5c28:	d14d      	bne.n	5cc6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5c2a:	9a04      	ldr	r2, [sp, #16]
    5c2c:	4613      	mov	r3, r2
    5c2e:	005b      	lsls	r3, r3, #1
    5c30:	4413      	add	r3, r2
    5c32:	009b      	lsls	r3, r3, #2
    5c34:	4a28      	ldr	r2, [pc, #160]	; (5cd8 <getBusDividerConfig+0x144>)
    5c36:	4413      	add	r3, r2
    5c38:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5c3a:	4927      	ldr	r1, [pc, #156]	; (5cd8 <getBusDividerConfig+0x144>)
    5c3c:	9a04      	ldr	r2, [sp, #16]
    5c3e:	4613      	mov	r3, r2
    5c40:	005b      	lsls	r3, r3, #1
    5c42:	4413      	add	r3, r2
    5c44:	009b      	lsls	r3, r3, #2
    5c46:	440b      	add	r3, r1
    5c48:	9a01      	ldr	r2, [sp, #4]
    5c4a:	601a      	str	r2, [r3, #0]
        switch(Name)
    5c4c:	9b01      	ldr	r3, [sp, #4]
    5c4e:	2b23      	cmp	r3, #35	; 0x23
    5c50:	d029      	beq.n	5ca6 <getBusDividerConfig+0x112>
    5c52:	9b01      	ldr	r3, [sp, #4]
    5c54:	2b23      	cmp	r3, #35	; 0x23
    5c56:	d838      	bhi.n	5cca <getBusDividerConfig+0x136>
    5c58:	9b01      	ldr	r3, [sp, #4]
    5c5a:	2b21      	cmp	r3, #33	; 0x21
    5c5c:	d003      	beq.n	5c66 <getBusDividerConfig+0xd2>
    5c5e:	9b01      	ldr	r3, [sp, #4]
    5c60:	2b22      	cmp	r3, #34	; 0x22
    5c62:	d010      	beq.n	5c86 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c64:	e031      	b.n	5cca <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5c66:	4b1d      	ldr	r3, [pc, #116]	; (5cdc <getBusDividerConfig+0x148>)
    5c68:	695b      	ldr	r3, [r3, #20]
    5c6a:	091b      	lsrs	r3, r3, #4
    5c6c:	f003 030f 	and.w	r3, r3, #15
    5c70:	1c59      	adds	r1, r3, #1
    5c72:	4819      	ldr	r0, [pc, #100]	; (5cd8 <getBusDividerConfig+0x144>)
    5c74:	9a04      	ldr	r2, [sp, #16]
    5c76:	4613      	mov	r3, r2
    5c78:	005b      	lsls	r3, r3, #1
    5c7a:	4413      	add	r3, r2
    5c7c:	009b      	lsls	r3, r3, #2
    5c7e:	4403      	add	r3, r0
    5c80:	3304      	adds	r3, #4
    5c82:	6019      	str	r1, [r3, #0]
                break;
    5c84:	e022      	b.n	5ccc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5c86:	4b15      	ldr	r3, [pc, #84]	; (5cdc <getBusDividerConfig+0x148>)
    5c88:	699b      	ldr	r3, [r3, #24]
    5c8a:	091b      	lsrs	r3, r3, #4
    5c8c:	f003 030f 	and.w	r3, r3, #15
    5c90:	1c59      	adds	r1, r3, #1
    5c92:	4811      	ldr	r0, [pc, #68]	; (5cd8 <getBusDividerConfig+0x144>)
    5c94:	9a04      	ldr	r2, [sp, #16]
    5c96:	4613      	mov	r3, r2
    5c98:	005b      	lsls	r3, r3, #1
    5c9a:	4413      	add	r3, r2
    5c9c:	009b      	lsls	r3, r3, #2
    5c9e:	4403      	add	r3, r0
    5ca0:	3304      	adds	r3, #4
    5ca2:	6019      	str	r1, [r3, #0]
                break;
    5ca4:	e012      	b.n	5ccc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5ca6:	4b0d      	ldr	r3, [pc, #52]	; (5cdc <getBusDividerConfig+0x148>)
    5ca8:	69db      	ldr	r3, [r3, #28]
    5caa:	091b      	lsrs	r3, r3, #4
    5cac:	f003 030f 	and.w	r3, r3, #15
    5cb0:	1c59      	adds	r1, r3, #1
    5cb2:	4809      	ldr	r0, [pc, #36]	; (5cd8 <getBusDividerConfig+0x144>)
    5cb4:	9a04      	ldr	r2, [sp, #16]
    5cb6:	4613      	mov	r3, r2
    5cb8:	005b      	lsls	r3, r3, #1
    5cba:	4413      	add	r3, r2
    5cbc:	009b      	lsls	r3, r3, #2
    5cbe:	4403      	add	r3, r0
    5cc0:	3304      	adds	r3, #4
    5cc2:	6019      	str	r1, [r3, #0]
                break;
    5cc4:	e002      	b.n	5ccc <getBusDividerConfig+0x138>
        }
    }
    5cc6:	bf00      	nop
    5cc8:	e000      	b.n	5ccc <getBusDividerConfig+0x138>
                break;
    5cca:	bf00      	nop

    return ReturnValue;
    5ccc:	9b05      	ldr	r3, [sp, #20]
}
    5cce:	4618      	mov	r0, r3
    5cd0:	b006      	add	sp, #24
    5cd2:	4770      	bx	lr
    5cd4:	1fff8bc8 	.word	0x1fff8bc8
    5cd8:	1fff8cb8 	.word	0x1fff8cb8
    5cdc:	40064000 	.word	0x40064000

00005ce0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5ce0:	b086      	sub	sp, #24
    5ce2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5ce4:	2300      	movs	r3, #0
    5ce6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5ce8:	2300      	movs	r3, #0
    5cea:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5cec:	9b01      	ldr	r3, [sp, #4]
    5cee:	2b27      	cmp	r3, #39	; 0x27
    5cf0:	d00f      	beq.n	5d12 <getSlowDividerConfig+0x32>
    5cf2:	9b01      	ldr	r3, [sp, #4]
    5cf4:	2b27      	cmp	r3, #39	; 0x27
    5cf6:	d80f      	bhi.n	5d18 <getSlowDividerConfig+0x38>
    5cf8:	9b01      	ldr	r3, [sp, #4]
    5cfa:	2b25      	cmp	r3, #37	; 0x25
    5cfc:	d003      	beq.n	5d06 <getSlowDividerConfig+0x26>
    5cfe:	9b01      	ldr	r3, [sp, #4]
    5d00:	2b26      	cmp	r3, #38	; 0x26
    5d02:	d003      	beq.n	5d0c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d04:	e008      	b.n	5d18 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5d06:	2300      	movs	r3, #0
    5d08:	9304      	str	r3, [sp, #16]
            break;
    5d0a:	e006      	b.n	5d1a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5d0c:	2301      	movs	r3, #1
    5d0e:	9304      	str	r3, [sp, #16]
            break;
    5d10:	e003      	b.n	5d1a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5d12:	2302      	movs	r3, #2
    5d14:	9304      	str	r3, [sp, #16]
            break;
    5d16:	e000      	b.n	5d1a <getSlowDividerConfig+0x3a>
                break;
    5d18:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5d1a:	4b40      	ldr	r3, [pc, #256]	; (5e1c <getSlowDividerConfig+0x13c>)
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d026      	beq.n	5d70 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d22:	2300      	movs	r3, #0
    5d24:	9303      	str	r3, [sp, #12]
    5d26:	e01c      	b.n	5d62 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5d28:	4b3c      	ldr	r3, [pc, #240]	; (5e1c <getSlowDividerConfig+0x13c>)
    5d2a:	6819      	ldr	r1, [r3, #0]
    5d2c:	9a03      	ldr	r2, [sp, #12]
    5d2e:	4613      	mov	r3, r2
    5d30:	005b      	lsls	r3, r3, #1
    5d32:	4413      	add	r3, r2
    5d34:	009b      	lsls	r3, r3, #2
    5d36:	440b      	add	r3, r1
    5d38:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	9a01      	ldr	r2, [sp, #4]
    5d40:	429a      	cmp	r2, r3
    5d42:	d10b      	bne.n	5d5c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5d44:	4b35      	ldr	r3, [pc, #212]	; (5e1c <getSlowDividerConfig+0x13c>)
    5d46:	6819      	ldr	r1, [r3, #0]
    5d48:	9a03      	ldr	r2, [sp, #12]
    5d4a:	4613      	mov	r3, r2
    5d4c:	005b      	lsls	r3, r3, #1
    5d4e:	4413      	add	r3, r2
    5d50:	009b      	lsls	r3, r3, #2
    5d52:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d56:	440b      	add	r3, r1
    5d58:	9305      	str	r3, [sp, #20]
                break;
    5d5a:	e009      	b.n	5d70 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d5c:	9b03      	ldr	r3, [sp, #12]
    5d5e:	3301      	adds	r3, #1
    5d60:	9303      	str	r3, [sp, #12]
    5d62:	4b2e      	ldr	r3, [pc, #184]	; (5e1c <getSlowDividerConfig+0x13c>)
    5d64:	681b      	ldr	r3, [r3, #0]
    5d66:	7b1b      	ldrb	r3, [r3, #12]
    5d68:	461a      	mov	r2, r3
    5d6a:	9b03      	ldr	r3, [sp, #12]
    5d6c:	4293      	cmp	r3, r2
    5d6e:	d3db      	bcc.n	5d28 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5d70:	9b05      	ldr	r3, [sp, #20]
    5d72:	2b00      	cmp	r3, #0
    5d74:	d14a      	bne.n	5e0c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5d76:	9a04      	ldr	r2, [sp, #16]
    5d78:	4613      	mov	r3, r2
    5d7a:	005b      	lsls	r3, r3, #1
    5d7c:	4413      	add	r3, r2
    5d7e:	009b      	lsls	r3, r3, #2
    5d80:	4a27      	ldr	r2, [pc, #156]	; (5e20 <getSlowDividerConfig+0x140>)
    5d82:	4413      	add	r3, r2
    5d84:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5d86:	4926      	ldr	r1, [pc, #152]	; (5e20 <getSlowDividerConfig+0x140>)
    5d88:	9a04      	ldr	r2, [sp, #16]
    5d8a:	4613      	mov	r3, r2
    5d8c:	005b      	lsls	r3, r3, #1
    5d8e:	4413      	add	r3, r2
    5d90:	009b      	lsls	r3, r3, #2
    5d92:	440b      	add	r3, r1
    5d94:	9a01      	ldr	r2, [sp, #4]
    5d96:	601a      	str	r2, [r3, #0]
        switch(Name)
    5d98:	9b01      	ldr	r3, [sp, #4]
    5d9a:	2b27      	cmp	r3, #39	; 0x27
    5d9c:	d027      	beq.n	5dee <getSlowDividerConfig+0x10e>
    5d9e:	9b01      	ldr	r3, [sp, #4]
    5da0:	2b27      	cmp	r3, #39	; 0x27
    5da2:	d835      	bhi.n	5e10 <getSlowDividerConfig+0x130>
    5da4:	9b01      	ldr	r3, [sp, #4]
    5da6:	2b25      	cmp	r3, #37	; 0x25
    5da8:	d003      	beq.n	5db2 <getSlowDividerConfig+0xd2>
    5daa:	9b01      	ldr	r3, [sp, #4]
    5dac:	2b26      	cmp	r3, #38	; 0x26
    5dae:	d00f      	beq.n	5dd0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5db0:	e02e      	b.n	5e10 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5db2:	4b1c      	ldr	r3, [pc, #112]	; (5e24 <getSlowDividerConfig+0x144>)
    5db4:	695b      	ldr	r3, [r3, #20]
    5db6:	f003 030f 	and.w	r3, r3, #15
    5dba:	1c59      	adds	r1, r3, #1
    5dbc:	4818      	ldr	r0, [pc, #96]	; (5e20 <getSlowDividerConfig+0x140>)
    5dbe:	9a04      	ldr	r2, [sp, #16]
    5dc0:	4613      	mov	r3, r2
    5dc2:	005b      	lsls	r3, r3, #1
    5dc4:	4413      	add	r3, r2
    5dc6:	009b      	lsls	r3, r3, #2
    5dc8:	4403      	add	r3, r0
    5dca:	3304      	adds	r3, #4
    5dcc:	6019      	str	r1, [r3, #0]
                break;
    5dce:	e020      	b.n	5e12 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5dd0:	4b14      	ldr	r3, [pc, #80]	; (5e24 <getSlowDividerConfig+0x144>)
    5dd2:	699b      	ldr	r3, [r3, #24]
    5dd4:	f003 030f 	and.w	r3, r3, #15
    5dd8:	1c59      	adds	r1, r3, #1
    5dda:	4811      	ldr	r0, [pc, #68]	; (5e20 <getSlowDividerConfig+0x140>)
    5ddc:	9a04      	ldr	r2, [sp, #16]
    5dde:	4613      	mov	r3, r2
    5de0:	005b      	lsls	r3, r3, #1
    5de2:	4413      	add	r3, r2
    5de4:	009b      	lsls	r3, r3, #2
    5de6:	4403      	add	r3, r0
    5de8:	3304      	adds	r3, #4
    5dea:	6019      	str	r1, [r3, #0]
                break;
    5dec:	e011      	b.n	5e12 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5dee:	4b0d      	ldr	r3, [pc, #52]	; (5e24 <getSlowDividerConfig+0x144>)
    5df0:	69db      	ldr	r3, [r3, #28]
    5df2:	f003 030f 	and.w	r3, r3, #15
    5df6:	1c59      	adds	r1, r3, #1
    5df8:	4809      	ldr	r0, [pc, #36]	; (5e20 <getSlowDividerConfig+0x140>)
    5dfa:	9a04      	ldr	r2, [sp, #16]
    5dfc:	4613      	mov	r3, r2
    5dfe:	005b      	lsls	r3, r3, #1
    5e00:	4413      	add	r3, r2
    5e02:	009b      	lsls	r3, r3, #2
    5e04:	4403      	add	r3, r0
    5e06:	3304      	adds	r3, #4
    5e08:	6019      	str	r1, [r3, #0]
                break;
    5e0a:	e002      	b.n	5e12 <getSlowDividerConfig+0x132>
        }
    }
    5e0c:	bf00      	nop
    5e0e:	e000      	b.n	5e12 <getSlowDividerConfig+0x132>
                break;
    5e10:	bf00      	nop

    return ReturnValue;
    5e12:	9b05      	ldr	r3, [sp, #20]
}
    5e14:	4618      	mov	r0, r3
    5e16:	b006      	add	sp, #24
    5e18:	4770      	bx	lr
    5e1a:	bf00      	nop
    5e1c:	1fff8bc8 	.word	0x1fff8bc8
    5e20:	1fff8cdc 	.word	0x1fff8cdc
    5e24:	40064000 	.word	0x40064000

00005e28 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5e28:	b500      	push	{lr}
    5e2a:	b083      	sub	sp, #12
    5e2c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5e2e:	4b64      	ldr	r3, [pc, #400]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5e30:	781b      	ldrb	r3, [r3, #0]
    5e32:	f083 0301 	eor.w	r3, r3, #1
    5e36:	b2db      	uxtb	r3, r3
    5e38:	2b00      	cmp	r3, #0
    5e3a:	d05b      	beq.n	5ef4 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5e3c:	4b60      	ldr	r3, [pc, #384]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5e3e:	2201      	movs	r2, #1
    5e40:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5e42:	4b60      	ldr	r3, [pc, #384]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5e44:	785b      	ldrb	r3, [r3, #1]
    5e46:	461a      	mov	r2, r3
    5e48:	4613      	mov	r3, r2
    5e4a:	009b      	lsls	r3, r3, #2
    5e4c:	4413      	add	r3, r2
    5e4e:	009b      	lsls	r3, r3, #2
    5e50:	4a5d      	ldr	r2, [pc, #372]	; (5fc8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5e52:	4413      	add	r3, r2
    5e54:	4a5d      	ldr	r2, [pc, #372]	; (5fcc <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5e56:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5e58:	4b5d      	ldr	r3, [pc, #372]	; (5fd0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5e5a:	785b      	ldrb	r3, [r3, #1]
    5e5c:	461a      	mov	r2, r3
    5e5e:	4613      	mov	r3, r2
    5e60:	009b      	lsls	r3, r3, #2
    5e62:	4413      	add	r3, r2
    5e64:	009b      	lsls	r3, r3, #2
    5e66:	4a5b      	ldr	r2, [pc, #364]	; (5fd4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5e68:	4413      	add	r3, r2
    5e6a:	4a5b      	ldr	r2, [pc, #364]	; (5fd8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5e6c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5e6e:	4b5b      	ldr	r3, [pc, #364]	; (5fdc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5e70:	791b      	ldrb	r3, [r3, #4]
    5e72:	461a      	mov	r2, r3
    5e74:	4613      	mov	r3, r2
    5e76:	005b      	lsls	r3, r3, #1
    5e78:	4413      	add	r3, r2
    5e7a:	009b      	lsls	r3, r3, #2
    5e7c:	4a58      	ldr	r2, [pc, #352]	; (5fe0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5e7e:	4413      	add	r3, r2
    5e80:	4a58      	ldr	r2, [pc, #352]	; (5fe4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5e82:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5e84:	4b58      	ldr	r3, [pc, #352]	; (5fe8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5e86:	795b      	ldrb	r3, [r3, #5]
    5e88:	00db      	lsls	r3, r3, #3
    5e8a:	4a58      	ldr	r2, [pc, #352]	; (5fec <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5e8c:	4413      	add	r3, r2
    5e8e:	4a58      	ldr	r2, [pc, #352]	; (5ff0 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5e90:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5e92:	4b55      	ldr	r3, [pc, #340]	; (5fe8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5e94:	79db      	ldrb	r3, [r3, #7]
    5e96:	00db      	lsls	r3, r3, #3
    5e98:	4a54      	ldr	r2, [pc, #336]	; (5fec <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5e9a:	4413      	add	r3, r2
    5e9c:	4a55      	ldr	r2, [pc, #340]	; (5ff4 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5e9e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5ea0:	4b55      	ldr	r3, [pc, #340]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ea2:	799b      	ldrb	r3, [r3, #6]
    5ea4:	009b      	lsls	r3, r3, #2
    5ea6:	4a55      	ldr	r2, [pc, #340]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ea8:	4413      	add	r3, r2
    5eaa:	4a55      	ldr	r2, [pc, #340]	; (6000 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5eac:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5eae:	4b52      	ldr	r3, [pc, #328]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5eb0:	7a1b      	ldrb	r3, [r3, #8]
    5eb2:	009b      	lsls	r3, r3, #2
    5eb4:	4a51      	ldr	r2, [pc, #324]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5eb6:	4413      	add	r3, r2
    5eb8:	4a52      	ldr	r2, [pc, #328]	; (6004 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5eba:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5ebc:	4b4e      	ldr	r3, [pc, #312]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ebe:	7a5b      	ldrb	r3, [r3, #9]
    5ec0:	009b      	lsls	r3, r3, #2
    5ec2:	4a4e      	ldr	r2, [pc, #312]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ec4:	4413      	add	r3, r2
    5ec6:	4a50      	ldr	r2, [pc, #320]	; (6008 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5ec8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5eca:	4b4b      	ldr	r3, [pc, #300]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ecc:	7adb      	ldrb	r3, [r3, #11]
    5ece:	009b      	lsls	r3, r3, #2
    5ed0:	4a4a      	ldr	r2, [pc, #296]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ed2:	4413      	add	r3, r2
    5ed4:	4a4d      	ldr	r2, [pc, #308]	; (600c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5ed6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5ed8:	4b47      	ldr	r3, [pc, #284]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5eda:	7b1b      	ldrb	r3, [r3, #12]
    5edc:	009b      	lsls	r3, r3, #2
    5ede:	4a47      	ldr	r2, [pc, #284]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ee0:	4413      	add	r3, r2
    5ee2:	4a4b      	ldr	r2, [pc, #300]	; (6010 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5ee4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5ee6:	4b44      	ldr	r3, [pc, #272]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ee8:	7b9b      	ldrb	r3, [r3, #14]
    5eea:	009b      	lsls	r3, r3, #2
    5eec:	4a43      	ldr	r2, [pc, #268]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5eee:	4413      	add	r3, r2
    5ef0:	4a48      	ldr	r2, [pc, #288]	; (6014 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5ef2:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5ef4:	4b48      	ldr	r3, [pc, #288]	; (6018 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d002      	beq.n	5f02 <Clock_Ip_ClockInitializeObjects+0xda>
    5efc:	9b01      	ldr	r3, [sp, #4]
    5efe:	2b00      	cmp	r3, #0
    5f00:	d003      	beq.n	5f0a <Clock_Ip_ClockInitializeObjects+0xe2>
    5f02:	4b46      	ldr	r3, [pc, #280]	; (601c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d056      	beq.n	5fb8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5f0a:	f7ff fc09 	bl	5720 <getFircConfig>
    5f0e:	4603      	mov	r3, r0
    5f10:	4a43      	ldr	r2, [pc, #268]	; (6020 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5f12:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5f14:	f7ff fc60 	bl	57d8 <getSoscConfig>
    5f18:	4603      	mov	r3, r0
    5f1a:	4a42      	ldr	r2, [pc, #264]	; (6024 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5f1c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5f1e:	f7ff fca7 	bl	5870 <getSpllConfig>
    5f22:	4603      	mov	r3, r0
    5f24:	4a40      	ldr	r2, [pc, #256]	; (6028 <Clock_Ip_ClockInitializeObjects+0x200>)
    5f26:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5f28:	2019      	movs	r0, #25
    5f2a:	f7ff fcfb 	bl	5924 <getSelectorConfig>
    5f2e:	4603      	mov	r3, r0
    5f30:	4a3e      	ldr	r2, [pc, #248]	; (602c <Clock_Ip_ClockInitializeObjects+0x204>)
    5f32:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5f34:	201a      	movs	r0, #26
    5f36:	f7ff fcf5 	bl	5924 <getSelectorConfig>
    5f3a:	4603      	mov	r3, r0
    5f3c:	4a3c      	ldr	r2, [pc, #240]	; (6030 <Clock_Ip_ClockInitializeObjects+0x208>)
    5f3e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5f40:	201b      	movs	r0, #27
    5f42:	f7ff fcef 	bl	5924 <getSelectorConfig>
    5f46:	4603      	mov	r3, r0
    5f48:	4a3a      	ldr	r2, [pc, #232]	; (6034 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5f4a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5f4c:	201d      	movs	r0, #29
    5f4e:	f7ff fd7b 	bl	5a48 <getCoreDividerConfig>
    5f52:	4603      	mov	r3, r0
    5f54:	4a38      	ldr	r2, [pc, #224]	; (6038 <Clock_Ip_ClockInitializeObjects+0x210>)
    5f56:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5f58:	201e      	movs	r0, #30
    5f5a:	f7ff fd75 	bl	5a48 <getCoreDividerConfig>
    5f5e:	4603      	mov	r3, r0
    5f60:	4a36      	ldr	r2, [pc, #216]	; (603c <Clock_Ip_ClockInitializeObjects+0x214>)
    5f62:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5f64:	201f      	movs	r0, #31
    5f66:	f7ff fd6f 	bl	5a48 <getCoreDividerConfig>
    5f6a:	4603      	mov	r3, r0
    5f6c:	4a34      	ldr	r2, [pc, #208]	; (6040 <Clock_Ip_ClockInitializeObjects+0x218>)
    5f6e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5f70:	2021      	movs	r0, #33	; 0x21
    5f72:	f7ff fe0f 	bl	5b94 <getBusDividerConfig>
    5f76:	4603      	mov	r3, r0
    5f78:	4a32      	ldr	r2, [pc, #200]	; (6044 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5f7a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5f7c:	2022      	movs	r0, #34	; 0x22
    5f7e:	f7ff fe09 	bl	5b94 <getBusDividerConfig>
    5f82:	4603      	mov	r3, r0
    5f84:	4a30      	ldr	r2, [pc, #192]	; (6048 <Clock_Ip_ClockInitializeObjects+0x220>)
    5f86:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5f88:	2023      	movs	r0, #35	; 0x23
    5f8a:	f7ff fe03 	bl	5b94 <getBusDividerConfig>
    5f8e:	4603      	mov	r3, r0
    5f90:	4a2e      	ldr	r2, [pc, #184]	; (604c <Clock_Ip_ClockInitializeObjects+0x224>)
    5f92:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5f94:	2025      	movs	r0, #37	; 0x25
    5f96:	f7ff fea3 	bl	5ce0 <getSlowDividerConfig>
    5f9a:	4603      	mov	r3, r0
    5f9c:	4a2c      	ldr	r2, [pc, #176]	; (6050 <Clock_Ip_ClockInitializeObjects+0x228>)
    5f9e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5fa0:	2026      	movs	r0, #38	; 0x26
    5fa2:	f7ff fe9d 	bl	5ce0 <getSlowDividerConfig>
    5fa6:	4603      	mov	r3, r0
    5fa8:	4a2a      	ldr	r2, [pc, #168]	; (6054 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5faa:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5fac:	2027      	movs	r0, #39	; 0x27
    5fae:	f7ff fe97 	bl	5ce0 <getSlowDividerConfig>
    5fb2:	4603      	mov	r3, r0
    5fb4:	4a28      	ldr	r2, [pc, #160]	; (6058 <Clock_Ip_ClockInitializeObjects+0x230>)
    5fb6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5fb8:	bf00      	nop
    5fba:	b003      	add	sp, #12
    5fbc:	f85d fb04 	ldr.w	pc, [sp], #4
    5fc0:	1fff8d00 	.word	0x1fff8d00
    5fc4:	00015fc0 	.word	0x00015fc0
    5fc8:	0001660c 	.word	0x0001660c
    5fcc:	1fff8bcc 	.word	0x1fff8bcc
    5fd0:	00015f80 	.word	0x00015f80
    5fd4:	00016554 	.word	0x00016554
    5fd8:	1fff8bd0 	.word	0x1fff8bd0
    5fdc:	00015f90 	.word	0x00015f90
    5fe0:	000165c0 	.word	0x000165c0
    5fe4:	1fff8bd4 	.word	0x1fff8bd4
    5fe8:	00015fd0 	.word	0x00015fd0
    5fec:	00016638 	.word	0x00016638
    5ff0:	1fff8bd8 	.word	0x1fff8bd8
    5ff4:	1fff8c14 	.word	0x1fff8c14
    5ff8:	00015f60 	.word	0x00015f60
    5ffc:	00016510 	.word	0x00016510
    6000:	1fff8bdc 	.word	0x1fff8bdc
    6004:	1fff8c18 	.word	0x1fff8c18
    6008:	1fff8be0 	.word	0x1fff8be0
    600c:	1fff8c1c 	.word	0x1fff8c1c
    6010:	1fff8be4 	.word	0x1fff8be4
    6014:	1fff8c20 	.word	0x1fff8c20
    6018:	1fff8b19 	.word	0x1fff8b19
    601c:	1fff8b10 	.word	0x1fff8b10
    6020:	1fff8be8 	.word	0x1fff8be8
    6024:	1fff8bec 	.word	0x1fff8bec
    6028:	1fff8bf0 	.word	0x1fff8bf0
    602c:	1fff8bf4 	.word	0x1fff8bf4
    6030:	1fff8bf8 	.word	0x1fff8bf8
    6034:	1fff8c24 	.word	0x1fff8c24
    6038:	1fff8bfc 	.word	0x1fff8bfc
    603c:	1fff8c00 	.word	0x1fff8c00
    6040:	1fff8c28 	.word	0x1fff8c28
    6044:	1fff8c04 	.word	0x1fff8c04
    6048:	1fff8c08 	.word	0x1fff8c08
    604c:	1fff8c2c 	.word	0x1fff8c2c
    6050:	1fff8c0c 	.word	0x1fff8c0c
    6054:	1fff8c10 	.word	0x1fff8c10
    6058:	1fff8c30 	.word	0x1fff8c30

0000605c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    605c:	b500      	push	{lr}
    605e:	b083      	sub	sp, #12
    6060:	9001      	str	r0, [sp, #4]
    6062:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    6064:	9b01      	ldr	r3, [sp, #4]
    6066:	2b03      	cmp	r3, #3
    6068:	f000 8090 	beq.w	618c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    606c:	9b01      	ldr	r3, [sp, #4]
    606e:	2b03      	cmp	r3, #3
    6070:	f200 80d3 	bhi.w	621a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	2b00      	cmp	r3, #0
    6078:	d040      	beq.n	60fc <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    607a:	9b01      	ldr	r3, [sp, #4]
    607c:	3b01      	subs	r3, #1
    607e:	2b01      	cmp	r3, #1
    6080:	f200 80cb 	bhi.w	621a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    6084:	9b00      	ldr	r3, [sp, #0]
    6086:	2b00      	cmp	r3, #0
    6088:	f040 80c9 	bne.w	621e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    608c:	4b68      	ldr	r3, [pc, #416]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    608e:	2200      	movs	r2, #0
    6090:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    6092:	4b68      	ldr	r3, [pc, #416]	; (6234 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	685b      	ldr	r3, [r3, #4]
    6098:	4a67      	ldr	r2, [pc, #412]	; (6238 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    609a:	6812      	ldr	r2, [r2, #0]
    609c:	4610      	mov	r0, r2
    609e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    60a0:	4b66      	ldr	r3, [pc, #408]	; (623c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    60a2:	681b      	ldr	r3, [r3, #0]
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	4a66      	ldr	r2, [pc, #408]	; (6240 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    60a8:	6812      	ldr	r2, [r2, #0]
    60aa:	4610      	mov	r0, r2
    60ac:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    60ae:	4b65      	ldr	r3, [pc, #404]	; (6244 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	681b      	ldr	r3, [r3, #0]
    60b4:	4a64      	ldr	r2, [pc, #400]	; (6248 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    60b6:	6812      	ldr	r2, [r2, #0]
    60b8:	4610      	mov	r0, r2
    60ba:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    60bc:	4b63      	ldr	r3, [pc, #396]	; (624c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    60be:	681b      	ldr	r3, [r3, #0]
    60c0:	681b      	ldr	r3, [r3, #0]
    60c2:	4a63      	ldr	r2, [pc, #396]	; (6250 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    60c4:	6812      	ldr	r2, [r2, #0]
    60c6:	4610      	mov	r0, r2
    60c8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    60ca:	4b62      	ldr	r3, [pc, #392]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    60cc:	681b      	ldr	r3, [r3, #0]
    60ce:	691b      	ldr	r3, [r3, #16]
    60d0:	4a61      	ldr	r2, [pc, #388]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    60d2:	6812      	ldr	r2, [r2, #0]
    60d4:	6812      	ldr	r2, [r2, #0]
    60d6:	4610      	mov	r0, r2
    60d8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    60da:	4b60      	ldr	r3, [pc, #384]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    60dc:	681b      	ldr	r3, [r3, #0]
    60de:	68db      	ldr	r3, [r3, #12]
    60e0:	4a5f      	ldr	r2, [pc, #380]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60e2:	6812      	ldr	r2, [r2, #0]
    60e4:	6812      	ldr	r2, [r2, #0]
    60e6:	4610      	mov	r0, r2
    60e8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    60ea:	4b5e      	ldr	r3, [pc, #376]	; (6264 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    60ec:	681b      	ldr	r3, [r3, #0]
    60ee:	689b      	ldr	r3, [r3, #8]
    60f0:	4a5d      	ldr	r2, [pc, #372]	; (6268 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    60f2:	6812      	ldr	r2, [r2, #0]
    60f4:	6812      	ldr	r2, [r2, #0]
    60f6:	4610      	mov	r0, r2
    60f8:	4798      	blx	r3
            }
        }
        break;
    60fa:	e090      	b.n	621e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    60fc:	9b00      	ldr	r3, [sp, #0]
    60fe:	2b02      	cmp	r3, #2
    6100:	f040 808f 	bne.w	6222 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    6104:	4b4a      	ldr	r3, [pc, #296]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6106:	2201      	movs	r2, #1
    6108:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    610a:	4b56      	ldr	r3, [pc, #344]	; (6264 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    610c:	681b      	ldr	r3, [r3, #0]
    610e:	685b      	ldr	r3, [r3, #4]
    6110:	4a55      	ldr	r2, [pc, #340]	; (6268 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6112:	6812      	ldr	r2, [r2, #0]
    6114:	4610      	mov	r0, r2
    6116:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    6118:	4b50      	ldr	r3, [pc, #320]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	691b      	ldr	r3, [r3, #16]
    611e:	4a50      	ldr	r2, [pc, #320]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6120:	6812      	ldr	r2, [r2, #0]
    6122:	4610      	mov	r0, r2
    6124:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    6126:	4b4d      	ldr	r3, [pc, #308]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6128:	681b      	ldr	r3, [r3, #0]
    612a:	689b      	ldr	r3, [r3, #8]
    612c:	4a4c      	ldr	r2, [pc, #304]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    612e:	6812      	ldr	r2, [r2, #0]
    6130:	4610      	mov	r0, r2
    6132:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    6134:	4b47      	ldr	r3, [pc, #284]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	68db      	ldr	r3, [r3, #12]
    613a:	4a47      	ldr	r2, [pc, #284]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    613c:	6812      	ldr	r2, [r2, #0]
    613e:	4610      	mov	r0, r2
    6140:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6142:	4b44      	ldr	r3, [pc, #272]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6144:	681b      	ldr	r3, [r3, #0]
    6146:	689b      	ldr	r3, [r3, #8]
    6148:	4a43      	ldr	r2, [pc, #268]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    614a:	6812      	ldr	r2, [r2, #0]
    614c:	6812      	ldr	r2, [r2, #0]
    614e:	4610      	mov	r0, r2
    6150:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    6152:	4b38      	ldr	r3, [pc, #224]	; (6234 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    6154:	681b      	ldr	r3, [r3, #0]
    6156:	685b      	ldr	r3, [r3, #4]
    6158:	4a44      	ldr	r2, [pc, #272]	; (626c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    615a:	6812      	ldr	r2, [r2, #0]
    615c:	4610      	mov	r0, r2
    615e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    6160:	4b36      	ldr	r3, [pc, #216]	; (623c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	681b      	ldr	r3, [r3, #0]
    6166:	4a42      	ldr	r2, [pc, #264]	; (6270 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    6168:	6812      	ldr	r2, [r2, #0]
    616a:	4610      	mov	r0, r2
    616c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    616e:	4b35      	ldr	r3, [pc, #212]	; (6244 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6170:	681b      	ldr	r3, [r3, #0]
    6172:	681b      	ldr	r3, [r3, #0]
    6174:	4a3f      	ldr	r2, [pc, #252]	; (6274 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    6176:	6812      	ldr	r2, [r2, #0]
    6178:	4610      	mov	r0, r2
    617a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    617c:	4b33      	ldr	r3, [pc, #204]	; (624c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	681b      	ldr	r3, [r3, #0]
    6182:	4a3d      	ldr	r2, [pc, #244]	; (6278 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    6184:	6812      	ldr	r2, [r2, #0]
    6186:	4610      	mov	r0, r2
    6188:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    618a:	e04a      	b.n	6222 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    618c:	9b00      	ldr	r3, [sp, #0]
    618e:	2b02      	cmp	r3, #2
    6190:	d149      	bne.n	6226 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    6192:	4b27      	ldr	r3, [pc, #156]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6194:	2201      	movs	r2, #1
    6196:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6198:	4b32      	ldr	r3, [pc, #200]	; (6264 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	685b      	ldr	r3, [r3, #4]
    619e:	4a32      	ldr	r2, [pc, #200]	; (6268 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    61a0:	6812      	ldr	r2, [r2, #0]
    61a2:	4610      	mov	r0, r2
    61a4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    61a6:	4b2d      	ldr	r3, [pc, #180]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    61a8:	681b      	ldr	r3, [r3, #0]
    61aa:	691b      	ldr	r3, [r3, #16]
    61ac:	4a2c      	ldr	r2, [pc, #176]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    61ae:	6812      	ldr	r2, [r2, #0]
    61b0:	4610      	mov	r0, r2
    61b2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    61b4:	4b29      	ldr	r3, [pc, #164]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    61b6:	681b      	ldr	r3, [r3, #0]
    61b8:	689b      	ldr	r3, [r3, #8]
    61ba:	4a29      	ldr	r2, [pc, #164]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    61bc:	6812      	ldr	r2, [r2, #0]
    61be:	4610      	mov	r0, r2
    61c0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    61c2:	4b24      	ldr	r3, [pc, #144]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	68db      	ldr	r3, [r3, #12]
    61c8:	4a23      	ldr	r2, [pc, #140]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    61ca:	6812      	ldr	r2, [r2, #0]
    61cc:	4610      	mov	r0, r2
    61ce:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    61d0:	4b20      	ldr	r3, [pc, #128]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    61d2:	681b      	ldr	r3, [r3, #0]
    61d4:	689b      	ldr	r3, [r3, #8]
    61d6:	4a20      	ldr	r2, [pc, #128]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    61d8:	6812      	ldr	r2, [r2, #0]
    61da:	6812      	ldr	r2, [r2, #0]
    61dc:	4610      	mov	r0, r2
    61de:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    61e0:	4b26      	ldr	r3, [pc, #152]	; (627c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	685b      	ldr	r3, [r3, #4]
    61e6:	4a26      	ldr	r2, [pc, #152]	; (6280 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    61e8:	6812      	ldr	r2, [r2, #0]
    61ea:	4610      	mov	r0, r2
    61ec:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    61ee:	4b25      	ldr	r3, [pc, #148]	; (6284 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	681b      	ldr	r3, [r3, #0]
    61f4:	4a24      	ldr	r2, [pc, #144]	; (6288 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    61f6:	6812      	ldr	r2, [r2, #0]
    61f8:	4610      	mov	r0, r2
    61fa:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    61fc:	4b23      	ldr	r3, [pc, #140]	; (628c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	681b      	ldr	r3, [r3, #0]
    6202:	4a23      	ldr	r2, [pc, #140]	; (6290 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    6204:	6812      	ldr	r2, [r2, #0]
    6206:	4610      	mov	r0, r2
    6208:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    620a:	4b22      	ldr	r3, [pc, #136]	; (6294 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    620c:	681b      	ldr	r3, [r3, #0]
    620e:	681b      	ldr	r3, [r3, #0]
    6210:	4a21      	ldr	r2, [pc, #132]	; (6298 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    6212:	6812      	ldr	r2, [r2, #0]
    6214:	4610      	mov	r0, r2
    6216:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6218:	e005      	b.n	6226 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    621a:	bf00      	nop
    621c:	e004      	b.n	6228 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    621e:	bf00      	nop
    6220:	e002      	b.n	6228 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6222:	bf00      	nop
    6224:	e000      	b.n	6228 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6226:	bf00      	nop
    }

}
    6228:	bf00      	nop
    622a:	b003      	add	sp, #12
    622c:	f85d fb04 	ldr.w	pc, [sp], #4
    6230:	1fff8b19 	.word	0x1fff8b19
    6234:	1fff8bd8 	.word	0x1fff8bd8
    6238:	1fff8bf8 	.word	0x1fff8bf8
    623c:	1fff8bdc 	.word	0x1fff8bdc
    6240:	1fff8c00 	.word	0x1fff8c00
    6244:	1fff8be0 	.word	0x1fff8be0
    6248:	1fff8c08 	.word	0x1fff8c08
    624c:	1fff8be4 	.word	0x1fff8be4
    6250:	1fff8c10 	.word	0x1fff8c10
    6254:	1fff8bcc 	.word	0x1fff8bcc
    6258:	1fff8bf0 	.word	0x1fff8bf0
    625c:	1fff8bd0 	.word	0x1fff8bd0
    6260:	1fff8bec 	.word	0x1fff8bec
    6264:	1fff8bd4 	.word	0x1fff8bd4
    6268:	1fff8be8 	.word	0x1fff8be8
    626c:	1fff8bf4 	.word	0x1fff8bf4
    6270:	1fff8bfc 	.word	0x1fff8bfc
    6274:	1fff8c04 	.word	0x1fff8c04
    6278:	1fff8c0c 	.word	0x1fff8c0c
    627c:	1fff8c14 	.word	0x1fff8c14
    6280:	1fff8c24 	.word	0x1fff8c24
    6284:	1fff8c18 	.word	0x1fff8c18
    6288:	1fff8c28 	.word	0x1fff8c28
    628c:	1fff8c1c 	.word	0x1fff8c1c
    6290:	1fff8c2c 	.word	0x1fff8c2c
    6294:	1fff8c20 	.word	0x1fff8c20
    6298:	1fff8c30 	.word	0x1fff8c30

0000629c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    629c:	b500      	push	{lr}
    629e:	b083      	sub	sp, #12
    62a0:	9001      	str	r0, [sp, #4]
    62a2:	9100      	str	r1, [sp, #0]
    switch(Command)
    62a4:	9b00      	ldr	r3, [sp, #0]
    62a6:	2b04      	cmp	r3, #4
    62a8:	d010      	beq.n	62cc <Clock_Ip_Command+0x30>
    62aa:	9b00      	ldr	r3, [sp, #0]
    62ac:	2b04      	cmp	r3, #4
    62ae:	d811      	bhi.n	62d4 <Clock_Ip_Command+0x38>
    62b0:	9b00      	ldr	r3, [sp, #0]
    62b2:	2b01      	cmp	r3, #1
    62b4:	d006      	beq.n	62c4 <Clock_Ip_Command+0x28>
    62b6:	9b00      	ldr	r3, [sp, #0]
    62b8:	2b02      	cmp	r3, #2
    62ba:	d10b      	bne.n	62d4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    62bc:	9801      	ldr	r0, [sp, #4]
    62be:	f7ff fdb3 	bl	5e28 <Clock_Ip_ClockInitializeObjects>
            break;
    62c2:	e008      	b.n	62d6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    62c4:	9801      	ldr	r0, [sp, #4]
    62c6:	f7ff f9db 	bl	5680 <Clock_Ip_SpecificPlatformInitClock>
            break;
    62ca:	e004      	b.n	62d6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    62cc:	9801      	ldr	r0, [sp, #4]
    62ce:	f7ff f8ed 	bl	54ac <DisableSafeClock>
            break;
    62d2:	e000      	b.n	62d6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    62d4:	bf00      	nop
    }
}
    62d6:	bf00      	nop
    62d8:	b003      	add	sp, #12
    62da:	f85d fb04 	ldr.w	pc, [sp], #4
    62de:	bf00      	nop

000062e0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    62e0:	b500      	push	{lr}
    62e2:	b085      	sub	sp, #20
    62e4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    62e6:	4a20      	ldr	r2, [pc, #128]	; (6368 <Mcu_Init+0x88>)
    62e8:	9b01      	ldr	r3, [sp, #4]
    62ea:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    62ec:	2300      	movs	r3, #0
    62ee:	9303      	str	r3, [sp, #12]
    62f0:	e010      	b.n	6314 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    62f2:	4b1d      	ldr	r3, [pc, #116]	; (6368 <Mcu_Init+0x88>)
    62f4:	681b      	ldr	r3, [r3, #0]
    62f6:	6919      	ldr	r1, [r3, #16]
    62f8:	9a03      	ldr	r2, [sp, #12]
    62fa:	4613      	mov	r3, r2
    62fc:	005b      	lsls	r3, r3, #1
    62fe:	4413      	add	r3, r2
    6300:	009b      	lsls	r3, r3, #2
    6302:	440b      	add	r3, r1
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	9a03      	ldr	r2, [sp, #12]
    6308:	b2d1      	uxtb	r1, r2
    630a:	4a18      	ldr	r2, [pc, #96]	; (636c <Mcu_Init+0x8c>)
    630c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    630e:	9b03      	ldr	r3, [sp, #12]
    6310:	3301      	adds	r3, #1
    6312:	9303      	str	r3, [sp, #12]
    6314:	4b14      	ldr	r3, [pc, #80]	; (6368 <Mcu_Init+0x88>)
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	689b      	ldr	r3, [r3, #8]
    631a:	9a03      	ldr	r2, [sp, #12]
    631c:	429a      	cmp	r2, r3
    631e:	d3e8      	bcc.n	62f2 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6320:	2300      	movs	r3, #0
    6322:	9303      	str	r3, [sp, #12]
    6324:	e010      	b.n	6348 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    6326:	4b10      	ldr	r3, [pc, #64]	; (6368 <Mcu_Init+0x88>)
    6328:	681b      	ldr	r3, [r3, #0]
    632a:	6959      	ldr	r1, [r3, #20]
    632c:	9a03      	ldr	r2, [sp, #12]
    632e:	4613      	mov	r3, r2
    6330:	01db      	lsls	r3, r3, #7
    6332:	1a9b      	subs	r3, r3, r2
    6334:	00db      	lsls	r3, r3, #3
    6336:	440b      	add	r3, r1
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	9a03      	ldr	r2, [sp, #12]
    633c:	b2d1      	uxtb	r1, r2
    633e:	4a0c      	ldr	r2, [pc, #48]	; (6370 <Mcu_Init+0x90>)
    6340:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6342:	9b03      	ldr	r3, [sp, #12]
    6344:	3301      	adds	r3, #1
    6346:	9303      	str	r3, [sp, #12]
    6348:	4b07      	ldr	r3, [pc, #28]	; (6368 <Mcu_Init+0x88>)
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	68db      	ldr	r3, [r3, #12]
    634e:	9a03      	ldr	r2, [sp, #12]
    6350:	429a      	cmp	r2, r3
    6352:	d3e8      	bcc.n	6326 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    6354:	4b04      	ldr	r3, [pc, #16]	; (6368 <Mcu_Init+0x88>)
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	699b      	ldr	r3, [r3, #24]
    635a:	4618      	mov	r0, r3
    635c:	f000 f88a 	bl	6474 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6360:	bf00      	nop
    6362:	b005      	add	sp, #20
    6364:	f85d fb04 	ldr.w	pc, [sp], #4
    6368:	1fff8d0c 	.word	0x1fff8d0c
    636c:	1fff8d08 	.word	0x1fff8d08
    6370:	1fff8d04 	.word	0x1fff8d04

00006374 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    6374:	b084      	sub	sp, #16
    6376:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6378:	2301      	movs	r3, #1
    637a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    637e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6382:	4618      	mov	r0, r3
    6384:	b004      	add	sp, #16
    6386:	4770      	bx	lr

00006388 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    6388:	b500      	push	{lr}
    638a:	b085      	sub	sp, #20
    638c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    638e:	4a0e      	ldr	r2, [pc, #56]	; (63c8 <Mcu_InitClock+0x40>)
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	4413      	add	r3, r2
    6394:	781b      	ldrb	r3, [r3, #0]
    6396:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    639a:	4b0c      	ldr	r3, [pc, #48]	; (63cc <Mcu_InitClock+0x44>)
    639c:	681b      	ldr	r3, [r3, #0]
    639e:	6959      	ldr	r1, [r3, #20]
    63a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    63a4:	4613      	mov	r3, r2
    63a6:	01db      	lsls	r3, r3, #7
    63a8:	1a9b      	subs	r3, r3, r2
    63aa:	00db      	lsls	r3, r3, #3
    63ac:	440b      	add	r3, r1
    63ae:	4618      	mov	r0, r3
    63b0:	f000 f86a 	bl	6488 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    63b4:	2300      	movs	r3, #0
    63b6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    63ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    63be:	4618      	mov	r0, r3
    63c0:	b005      	add	sp, #20
    63c2:	f85d fb04 	ldr.w	pc, [sp], #4
    63c6:	bf00      	nop
    63c8:	1fff8d04 	.word	0x1fff8d04
    63cc:	1fff8d0c 	.word	0x1fff8d0c

000063d0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    63d0:	b500      	push	{lr}
    63d2:	b085      	sub	sp, #20
    63d4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    63d6:	4a0d      	ldr	r2, [pc, #52]	; (640c <Mcu_SetMode+0x3c>)
    63d8:	9b01      	ldr	r3, [sp, #4]
    63da:	4413      	add	r3, r2
    63dc:	781b      	ldrb	r3, [r3, #0]
    63de:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    63e2:	f00c fe6b 	bl	130bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    63e6:	4b0a      	ldr	r3, [pc, #40]	; (6410 <Mcu_SetMode+0x40>)
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	6919      	ldr	r1, [r3, #16]
    63ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    63f0:	4613      	mov	r3, r2
    63f2:	005b      	lsls	r3, r3, #1
    63f4:	4413      	add	r3, r2
    63f6:	009b      	lsls	r3, r3, #2
    63f8:	440b      	add	r3, r1
    63fa:	4618      	mov	r0, r3
    63fc:	f000 f84e 	bl	649c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    6400:	f00c fe88 	bl	13114 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6404:	bf00      	nop
    6406:	b005      	add	sp, #20
    6408:	f85d fb04 	ldr.w	pc, [sp], #4
    640c:	1fff8d08 	.word	0x1fff8d08
    6410:	1fff8d0c 	.word	0x1fff8d0c

00006414 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    6414:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    6416:	2302      	movs	r3, #2
    6418:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    641a:	9b01      	ldr	r3, [sp, #4]
}
    641c:	4618      	mov	r0, r3
    641e:	b002      	add	sp, #8
    6420:	4770      	bx	lr

00006422 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    6422:	b500      	push	{lr}
    6424:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    6426:	f000 f843 	bl	64b0 <Mcu_Ipw_GetResetReason>
    642a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    642c:	9b01      	ldr	r3, [sp, #4]
}
    642e:	4618      	mov	r0, r3
    6430:	b003      	add	sp, #12
    6432:	f85d fb04 	ldr.w	pc, [sp], #4

00006436 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    6436:	b500      	push	{lr}
    6438:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    643a:	f000 f83f 	bl	64bc <Mcu_Ipw_GetResetRawValue>
    643e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    6440:	9b01      	ldr	r3, [sp, #4]
}
    6442:	4618      	mov	r0, r3
    6444:	b003      	add	sp, #12
    6446:	f85d fb04 	ldr.w	pc, [sp], #4

0000644a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    644a:	b500      	push	{lr}
    644c:	b083      	sub	sp, #12
    644e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    6450:	9801      	ldr	r0, [sp, #4]
    6452:	f000 f839 	bl	64c8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    6456:	bf00      	nop
    6458:	b003      	add	sp, #12
    645a:	f85d fb04 	ldr.w	pc, [sp], #4

0000645e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    645e:	b082      	sub	sp, #8
    6460:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    6462:	4b03      	ldr	r3, [pc, #12]	; (6470 <Mcu_ClkSrcFailureNotification+0x12>)
    6464:	681b      	ldr	r3, [r3, #0]
    6466:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6468:	bf00      	nop
    646a:	b002      	add	sp, #8
    646c:	4770      	bx	lr
    646e:	bf00      	nop
    6470:	1fff8d0c 	.word	0x1fff8d0c

00006474 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    6474:	b500      	push	{lr}
    6476:	b083      	sub	sp, #12
    6478:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    647a:	9801      	ldr	r0, [sp, #4]
    647c:	f000 f882 	bl	6584 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    6480:	bf00      	nop
    6482:	b003      	add	sp, #12
    6484:	f85d fb04 	ldr.w	pc, [sp], #4

00006488 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6488:	b500      	push	{lr}
    648a:	b083      	sub	sp, #12
    648c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    648e:	9801      	ldr	r0, [sp, #4]
    6490:	f7fc fc6a 	bl	2d68 <Clock_Ip_InitClock>
}
    6494:	bf00      	nop
    6496:	b003      	add	sp, #12
    6498:	f85d fb04 	ldr.w	pc, [sp], #4

0000649c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    649c:	b500      	push	{lr}
    649e:	b083      	sub	sp, #12
    64a0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    64a2:	9801      	ldr	r0, [sp, #4]
    64a4:	f000 f820 	bl	64e8 <Power_Ip_SetMode>
}
    64a8:	bf00      	nop
    64aa:	b003      	add	sp, #12
    64ac:	f85d fb04 	ldr.w	pc, [sp], #4

000064b0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    64b0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    64b2:	f000 f84f 	bl	6554 <Power_Ip_GetResetReason>
    64b6:	4603      	mov	r3, r0
}
    64b8:	4618      	mov	r0, r3
    64ba:	bd08      	pop	{r3, pc}

000064bc <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    64bc:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    64be:	f000 f857 	bl	6570 <Power_Ip_GetResetRawValue>
    64c2:	4603      	mov	r3, r0
}
    64c4:	4618      	mov	r0, r3
    64c6:	bd08      	pop	{r3, pc}

000064c8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    64c8:	b500      	push	{lr}
    64ca:	b083      	sub	sp, #12
    64cc:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    64ce:	9b01      	ldr	r3, [sp, #4]
    64d0:	2b00      	cmp	r3, #0
    64d2:	d102      	bne.n	64da <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    64d4:	f000 f86c 	bl	65b0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    64d8:	e001      	b.n	64de <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    64da:	f000 f86e 	bl	65ba <Power_Ip_EnableSleepOnExit>
}
    64de:	bf00      	nop
    64e0:	b003      	add	sp, #12
    64e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000064e8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    64e8:	b500      	push	{lr}
    64ea:	b085      	sub	sp, #20
    64ec:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    64ee:	9b01      	ldr	r3, [sp, #4]
    64f0:	685b      	ldr	r3, [r3, #4]
    64f2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    64f4:	9802      	ldr	r0, [sp, #8]
    64f6:	f000 f9f5 	bl	68e4 <Power_Ip_SMC_ModeCheckEntry>
    64fa:	4603      	mov	r3, r0
    64fc:	2b00      	cmp	r3, #0
    64fe:	d002      	beq.n	6506 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6500:	2301      	movs	r3, #1
    6502:	9303      	str	r3, [sp, #12]
    6504:	e003      	b.n	650e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    6506:	9801      	ldr	r0, [sp, #4]
    6508:	f000 fa1e 	bl	6948 <Power_Ip_SMC_ModeConfig>
    650c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    650e:	9b03      	ldr	r3, [sp, #12]
    6510:	2b01      	cmp	r3, #1
    6512:	d103      	bne.n	651c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6514:	21ff      	movs	r1, #255	; 0xff
    6516:	2003      	movs	r0, #3
    6518:	f000 f8f4 	bl	6704 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    651c:	bf00      	nop
    651e:	b005      	add	sp, #20
    6520:	f85d fb04 	ldr.w	pc, [sp], #4

00006524 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    6524:	b084      	sub	sp, #16
    6526:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    6528:	230c      	movs	r3, #12
    652a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    652c:	4a08      	ldr	r2, [pc, #32]	; (6550 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    652e:	9b01      	ldr	r3, [sp, #4]
    6530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6534:	2b0e      	cmp	r3, #14
    6536:	d805      	bhi.n	6544 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    6538:	4a05      	ldr	r2, [pc, #20]	; (6550 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    653a:	9b01      	ldr	r3, [sp, #4]
    653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6540:	9303      	str	r3, [sp, #12]
    6542:	e001      	b.n	6548 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    6544:	230c      	movs	r3, #12
    6546:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    6548:	9b03      	ldr	r3, [sp, #12]
}
    654a:	4618      	mov	r0, r3
    654c:	b004      	add	sp, #16
    654e:	4770      	bx	lr
    6550:	000166ac 	.word	0x000166ac

00006554 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    6554:	b500      	push	{lr}
    6556:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6558:	f000 f940 	bl	67dc <Power_Ip_RCM_GetResetReason>
    655c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    655e:	9801      	ldr	r0, [sp, #4]
    6560:	f7ff ffe0 	bl	6524 <Power_Ip_ConvertIntergeToResetType>
    6564:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    6566:	9b00      	ldr	r3, [sp, #0]
}
    6568:	4618      	mov	r0, r3
    656a:	b003      	add	sp, #12
    656c:	f85d fb04 	ldr.w	pc, [sp], #4

00006570 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6570:	b500      	push	{lr}
    6572:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6574:	f000 f98a 	bl	688c <Power_Ip_RCM_GetResetRawValue>
    6578:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    657a:	9b01      	ldr	r3, [sp, #4]
}
    657c:	4618      	mov	r0, r3
    657e:	b003      	add	sp, #12
    6580:	f85d fb04 	ldr.w	pc, [sp], #4

00006584 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    6584:	b500      	push	{lr}
    6586:	b083      	sub	sp, #12
    6588:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    658a:	9b01      	ldr	r3, [sp, #4]
    658c:	681b      	ldr	r3, [r3, #0]
    658e:	4618      	mov	r0, r3
    6590:	f000 f90e 	bl	67b0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    6594:	9b01      	ldr	r3, [sp, #4]
    6596:	685b      	ldr	r3, [r3, #4]
    6598:	4618      	mov	r0, r3
    659a:	f000 f86d 	bl	6678 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    659e:	9b01      	ldr	r3, [sp, #4]
    65a0:	689b      	ldr	r3, [r3, #8]
    65a2:	4618      	mov	r0, r3
    65a4:	f000 f990 	bl	68c8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    65a8:	bf00      	nop
    65aa:	b003      	add	sp, #12
    65ac:	f85d fb04 	ldr.w	pc, [sp], #4

000065b0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    65b0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    65b2:	f000 f811 	bl	65d8 <Power_Ip_CM4_DisableSleepOnExit>
}
    65b6:	bf00      	nop
    65b8:	bd08      	pop	{r3, pc}

000065ba <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    65ba:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    65bc:	f000 f820 	bl	6600 <Power_Ip_CM4_EnableSleepOnExit>
}
    65c0:	bf00      	nop
    65c2:	bd08      	pop	{r3, pc}

000065c4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    65c4:	b082      	sub	sp, #8
    65c6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    65c8:	4a02      	ldr	r2, [pc, #8]	; (65d4 <Power_Ip_InstallNotificationsCallback+0x10>)
    65ca:	9b01      	ldr	r3, [sp, #4]
    65cc:	6013      	str	r3, [r2, #0]
}
    65ce:	bf00      	nop
    65d0:	b002      	add	sp, #8
    65d2:	4770      	bx	lr
    65d4:	1fff8b1c 	.word	0x1fff8b1c

000065d8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    65d8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65da:	2300      	movs	r3, #0
    65dc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    65de:	4b07      	ldr	r3, [pc, #28]	; (65fc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    65e0:	681b      	ldr	r3, [r3, #0]
    65e2:	685b      	ldr	r3, [r3, #4]
    65e4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    65e6:	9b01      	ldr	r3, [sp, #4]
    65e8:	f023 0302 	bic.w	r3, r3, #2
    65ec:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    65ee:	4b03      	ldr	r3, [pc, #12]	; (65fc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	9a01      	ldr	r2, [sp, #4]
    65f4:	605a      	str	r2, [r3, #4]
}
    65f6:	bf00      	nop
    65f8:	b002      	add	sp, #8
    65fa:	4770      	bx	lr
    65fc:	1fff8b20 	.word	0x1fff8b20

00006600 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6600:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6602:	2300      	movs	r3, #0
    6604:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6606:	4b07      	ldr	r3, [pc, #28]	; (6624 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6608:	681b      	ldr	r3, [r3, #0]
    660a:	685b      	ldr	r3, [r3, #4]
    660c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	f043 0302 	orr.w	r3, r3, #2
    6614:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6616:	4b03      	ldr	r3, [pc, #12]	; (6624 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	9a01      	ldr	r2, [sp, #4]
    661c:	605a      	str	r2, [r3, #4]
}
    661e:	bf00      	nop
    6620:	b002      	add	sp, #8
    6622:	4770      	bx	lr
    6624:	1fff8b20 	.word	0x1fff8b20

00006628 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    6628:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    662a:	2300      	movs	r3, #0
    662c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    662e:	4b07      	ldr	r3, [pc, #28]	; (664c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	685b      	ldr	r3, [r3, #4]
    6634:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	f043 0304 	orr.w	r3, r3, #4
    663c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    663e:	4b03      	ldr	r3, [pc, #12]	; (664c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	9a01      	ldr	r2, [sp, #4]
    6644:	605a      	str	r2, [r3, #4]
}
    6646:	bf00      	nop
    6648:	b002      	add	sp, #8
    664a:	4770      	bx	lr
    664c:	1fff8b20 	.word	0x1fff8b20

00006650 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6650:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6652:	2300      	movs	r3, #0
    6654:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6656:	4b07      	ldr	r3, [pc, #28]	; (6674 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	685b      	ldr	r3, [r3, #4]
    665c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    665e:	9b01      	ldr	r3, [sp, #4]
    6660:	f023 0304 	bic.w	r3, r3, #4
    6664:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6666:	4b03      	ldr	r3, [pc, #12]	; (6674 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6668:	681b      	ldr	r3, [r3, #0]
    666a:	9a01      	ldr	r2, [sp, #4]
    666c:	605a      	str	r2, [r3, #4]
}
    666e:	bf00      	nop
    6670:	b002      	add	sp, #8
    6672:	4770      	bx	lr
    6674:	1fff8b20 	.word	0x1fff8b20

00006678 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6678:	b084      	sub	sp, #16
    667a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    667c:	4b20      	ldr	r3, [pc, #128]	; (6700 <Power_Ip_PMC_PowerInit+0x88>)
    667e:	781b      	ldrb	r3, [r3, #0]
    6680:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6684:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6688:	f003 030f 	and.w	r3, r3, #15
    668c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6690:	9b01      	ldr	r3, [sp, #4]
    6692:	781a      	ldrb	r2, [r3, #0]
    6694:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6698:	4313      	orrs	r3, r2
    669a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    669e:	4a18      	ldr	r2, [pc, #96]	; (6700 <Power_Ip_PMC_PowerInit+0x88>)
    66a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66a4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    66a6:	4b16      	ldr	r3, [pc, #88]	; (6700 <Power_Ip_PMC_PowerInit+0x88>)
    66a8:	785b      	ldrb	r3, [r3, #1]
    66aa:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    66ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66b2:	f003 031f 	and.w	r3, r3, #31
    66b6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    66ba:	9b01      	ldr	r3, [sp, #4]
    66bc:	785a      	ldrb	r2, [r3, #1]
    66be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66c2:	4313      	orrs	r3, r2
    66c4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    66c8:	4a0d      	ldr	r2, [pc, #52]	; (6700 <Power_Ip_PMC_PowerInit+0x88>)
    66ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66ce:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    66d0:	4b0b      	ldr	r3, [pc, #44]	; (6700 <Power_Ip_PMC_PowerInit+0x88>)
    66d2:	789b      	ldrb	r3, [r3, #2]
    66d4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    66d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    66e0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	789a      	ldrb	r2, [r3, #2]
    66e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66ec:	4313      	orrs	r3, r2
    66ee:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    66f2:	4a03      	ldr	r2, [pc, #12]	; (6700 <Power_Ip_PMC_PowerInit+0x88>)
    66f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66f8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    66fa:	bf00      	nop
    66fc:	b004      	add	sp, #16
    66fe:	4770      	bx	lr
    6700:	4007d000 	.word	0x4007d000

00006704 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6704:	b500      	push	{lr}
    6706:	b083      	sub	sp, #12
    6708:	9001      	str	r0, [sp, #4]
    670a:	460b      	mov	r3, r1
    670c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6710:	4b05      	ldr	r3, [pc, #20]	; (6728 <Power_Ip_ReportPowerErrors+0x24>)
    6712:	681b      	ldr	r3, [r3, #0]
    6714:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6718:	4611      	mov	r1, r2
    671a:	9801      	ldr	r0, [sp, #4]
    671c:	4798      	blx	r3
}
    671e:	bf00      	nop
    6720:	b003      	add	sp, #12
    6722:	f85d fb04 	ldr.w	pc, [sp], #4
    6726:	bf00      	nop
    6728:	1fff8b1c 	.word	0x1fff8b1c

0000672c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    672c:	b082      	sub	sp, #8
    672e:	9001      	str	r0, [sp, #4]
    6730:	460b      	mov	r3, r1
    6732:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6736:	bf00      	nop
    6738:	b002      	add	sp, #8
    673a:	4770      	bx	lr

0000673c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    673c:	b500      	push	{lr}
    673e:	b085      	sub	sp, #20
    6740:	9003      	str	r0, [sp, #12]
    6742:	9102      	str	r1, [sp, #8]
    6744:	9201      	str	r2, [sp, #4]
    6746:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6748:	2000      	movs	r0, #0
    674a:	f7fc f83d 	bl	27c8 <OsIf_GetCounter>
    674e:	4602      	mov	r2, r0
    6750:	9b03      	ldr	r3, [sp, #12]
    6752:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6754:	9b02      	ldr	r3, [sp, #8]
    6756:	2200      	movs	r2, #0
    6758:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    675a:	2100      	movs	r1, #0
    675c:	9800      	ldr	r0, [sp, #0]
    675e:	f7fc f87f 	bl	2860 <OsIf_MicrosToTicks>
    6762:	4602      	mov	r2, r0
    6764:	9b01      	ldr	r3, [sp, #4]
    6766:	601a      	str	r2, [r3, #0]
}
    6768:	bf00      	nop
    676a:	b005      	add	sp, #20
    676c:	f85d fb04 	ldr.w	pc, [sp], #4

00006770 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6770:	b500      	push	{lr}
    6772:	b087      	sub	sp, #28
    6774:	9003      	str	r0, [sp, #12]
    6776:	9102      	str	r1, [sp, #8]
    6778:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    677a:	2300      	movs	r3, #0
    677c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6780:	2100      	movs	r1, #0
    6782:	9803      	ldr	r0, [sp, #12]
    6784:	f7fc f839 	bl	27fa <OsIf_GetElapsed>
    6788:	4602      	mov	r2, r0
    678a:	9b02      	ldr	r3, [sp, #8]
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	441a      	add	r2, r3
    6790:	9b02      	ldr	r3, [sp, #8]
    6792:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6794:	9b02      	ldr	r3, [sp, #8]
    6796:	681b      	ldr	r3, [r3, #0]
    6798:	9a01      	ldr	r2, [sp, #4]
    679a:	429a      	cmp	r2, r3
    679c:	d802      	bhi.n	67a4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    679e:	2301      	movs	r3, #1
    67a0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    67a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    67a8:	4618      	mov	r0, r3
    67aa:	b007      	add	sp, #28
    67ac:	f85d fb04 	ldr.w	pc, [sp], #4

000067b0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    67b0:	b082      	sub	sp, #8
    67b2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	681a      	ldr	r2, [r3, #0]
    67b8:	4907      	ldr	r1, [pc, #28]	; (67d8 <Power_Ip_RCM_ResetInit+0x28>)
    67ba:	f641 7307 	movw	r3, #7943	; 0x1f07
    67be:	4013      	ands	r3, r2
    67c0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    67c2:	9b01      	ldr	r3, [sp, #4]
    67c4:	685a      	ldr	r2, [r3, #4]
    67c6:	4904      	ldr	r1, [pc, #16]	; (67d8 <Power_Ip_RCM_ResetInit+0x28>)
    67c8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    67cc:	4013      	ands	r3, r2
    67ce:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    67d0:	bf00      	nop
    67d2:	b002      	add	sp, #8
    67d4:	4770      	bx	lr
    67d6:	bf00      	nop
    67d8:	4007f000 	.word	0x4007f000

000067dc <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    67dc:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    67de:	230c      	movs	r3, #12
    67e0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    67e2:	2300      	movs	r3, #0
    67e4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    67e6:	2300      	movs	r3, #0
    67e8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    67ea:	2300      	movs	r3, #0
    67ec:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    67ee:	4b25      	ldr	r3, [pc, #148]	; (6884 <Power_Ip_RCM_GetResetReason+0xa8>)
    67f0:	699a      	ldr	r2, [r3, #24]
    67f2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67f6:	4013      	ands	r3, r2
    67f8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    67fa:	9b03      	ldr	r3, [sp, #12]
    67fc:	2b00      	cmp	r3, #0
    67fe:	d008      	beq.n	6812 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6800:	4920      	ldr	r1, [pc, #128]	; (6884 <Power_Ip_RCM_GetResetReason+0xa8>)
    6802:	9a03      	ldr	r2, [sp, #12]
    6804:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6808:	4013      	ands	r3, r2
    680a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    680c:	4a1e      	ldr	r2, [pc, #120]	; (6888 <Power_Ip_RCM_GetResetReason+0xac>)
    680e:	9b03      	ldr	r3, [sp, #12]
    6810:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6812:	4b1d      	ldr	r3, [pc, #116]	; (6888 <Power_Ip_RCM_GetResetReason+0xac>)
    6814:	681b      	ldr	r3, [r3, #0]
    6816:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    6818:	9a02      	ldr	r2, [sp, #8]
    681a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    681e:	4013      	ands	r3, r2
    6820:	2b82      	cmp	r3, #130	; 0x82
    6822:	d102      	bne.n	682a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6824:	2305      	movs	r3, #5
    6826:	9307      	str	r3, [sp, #28]
    6828:	e027      	b.n	687a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    682a:	2300      	movs	r3, #0
    682c:	9306      	str	r3, [sp, #24]
    682e:	e021      	b.n	6874 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6830:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6834:	9b06      	ldr	r3, [sp, #24]
    6836:	fa22 f303 	lsr.w	r3, r2, r3
    683a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    683c:	9a01      	ldr	r2, [sp, #4]
    683e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6842:	4013      	ands	r3, r2
    6844:	2b00      	cmp	r3, #0
    6846:	d012      	beq.n	686e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6848:	9a01      	ldr	r2, [sp, #4]
    684a:	9b02      	ldr	r3, [sp, #8]
    684c:	4013      	ands	r3, r2
    684e:	2b00      	cmp	r3, #0
    6850:	d00a      	beq.n	6868 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6852:	9b05      	ldr	r3, [sp, #20]
    6854:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6856:	9b04      	ldr	r3, [sp, #16]
    6858:	3301      	adds	r3, #1
    685a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    685c:	9b04      	ldr	r3, [sp, #16]
    685e:	2b01      	cmp	r3, #1
    6860:	d902      	bls.n	6868 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6862:	230d      	movs	r3, #13
    6864:	9307      	str	r3, [sp, #28]
                        break;
    6866:	e008      	b.n	687a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6868:	9b05      	ldr	r3, [sp, #20]
    686a:	3301      	adds	r3, #1
    686c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    686e:	9b06      	ldr	r3, [sp, #24]
    6870:	3301      	adds	r3, #1
    6872:	9306      	str	r3, [sp, #24]
    6874:	9b06      	ldr	r3, [sp, #24]
    6876:	2b1f      	cmp	r3, #31
    6878:	d9da      	bls.n	6830 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    687a:	9b07      	ldr	r3, [sp, #28]
}
    687c:	4618      	mov	r0, r3
    687e:	b008      	add	sp, #32
    6880:	4770      	bx	lr
    6882:	bf00      	nop
    6884:	4007f000 	.word	0x4007f000
    6888:	1fff8d10 	.word	0x1fff8d10

0000688c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    688c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    688e:	4b0c      	ldr	r3, [pc, #48]	; (68c0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6890:	699a      	ldr	r2, [r3, #24]
    6892:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6896:	4013      	ands	r3, r2
    6898:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    689a:	9b01      	ldr	r3, [sp, #4]
    689c:	2b00      	cmp	r3, #0
    689e:	d008      	beq.n	68b2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    68a0:	4907      	ldr	r1, [pc, #28]	; (68c0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    68a2:	9a01      	ldr	r2, [sp, #4]
    68a4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    68a8:	4013      	ands	r3, r2
    68aa:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    68ac:	4a05      	ldr	r2, [pc, #20]	; (68c4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    68ae:	9b01      	ldr	r3, [sp, #4]
    68b0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    68b2:	4b04      	ldr	r3, [pc, #16]	; (68c4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    68b4:	681b      	ldr	r3, [r3, #0]
    68b6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    68b8:	9b00      	ldr	r3, [sp, #0]
}
    68ba:	4618      	mov	r0, r3
    68bc:	b002      	add	sp, #8
    68be:	4770      	bx	lr
    68c0:	4007f000 	.word	0x4007f000
    68c4:	1fff8d10 	.word	0x1fff8d10

000068c8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    68c8:	b082      	sub	sp, #8
    68ca:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    68cc:	9b01      	ldr	r3, [sp, #4]
    68ce:	681b      	ldr	r3, [r3, #0]
    68d0:	4a03      	ldr	r2, [pc, #12]	; (68e0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    68d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    68d6:	6093      	str	r3, [r2, #8]
}
    68d8:	bf00      	nop
    68da:	b002      	add	sp, #8
    68dc:	4770      	bx	lr
    68de:	bf00      	nop
    68e0:	4007e000 	.word	0x4007e000

000068e4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    68e4:	b084      	sub	sp, #16
    68e6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    68e8:	2301      	movs	r3, #1
    68ea:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    68ec:	4b15      	ldr	r3, [pc, #84]	; (6944 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    68ee:	695b      	ldr	r3, [r3, #20]
    68f0:	b2db      	uxtb	r3, r3
    68f2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    68f4:	9b01      	ldr	r3, [sp, #4]
    68f6:	2b02      	cmp	r3, #2
    68f8:	d012      	beq.n	6920 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    68fa:	9b01      	ldr	r3, [sp, #4]
    68fc:	2b02      	cmp	r3, #2
    68fe:	d818      	bhi.n	6932 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6900:	9b01      	ldr	r3, [sp, #4]
    6902:	2b00      	cmp	r3, #0
    6904:	d003      	beq.n	690e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    6906:	9b01      	ldr	r3, [sp, #4]
    6908:	2b01      	cmp	r3, #1
    690a:	d003      	beq.n	6914 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    690c:	e011      	b.n	6932 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    690e:	2300      	movs	r3, #0
    6910:	9303      	str	r3, [sp, #12]
            break;
    6912:	e013      	b.n	693c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6914:	9b02      	ldr	r3, [sp, #8]
    6916:	2b01      	cmp	r3, #1
    6918:	d10d      	bne.n	6936 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    691a:	2300      	movs	r3, #0
    691c:	9303      	str	r3, [sp, #12]
            break;
    691e:	e00a      	b.n	6936 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6920:	9b02      	ldr	r3, [sp, #8]
    6922:	2b01      	cmp	r3, #1
    6924:	d002      	beq.n	692c <Power_Ip_SMC_ModeCheckEntry+0x48>
    6926:	9b02      	ldr	r3, [sp, #8]
    6928:	2b10      	cmp	r3, #16
    692a:	d106      	bne.n	693a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    692c:	2300      	movs	r3, #0
    692e:	9303      	str	r3, [sp, #12]
            break;
    6930:	e003      	b.n	693a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6932:	bf00      	nop
    6934:	e002      	b.n	693c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6936:	bf00      	nop
    6938:	e000      	b.n	693c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    693a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    693c:	9b03      	ldr	r3, [sp, #12]
}
    693e:	4618      	mov	r0, r3
    6940:	b004      	add	sp, #16
    6942:	4770      	bx	lr
    6944:	4007e000 	.word	0x4007e000

00006948 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6948:	b500      	push	{lr}
    694a:	b08b      	sub	sp, #44	; 0x2c
    694c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    694e:	2300      	movs	r3, #0
    6950:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6952:	2300      	movs	r3, #0
    6954:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6956:	2300      	movs	r3, #0
    6958:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    695c:	9b01      	ldr	r3, [sp, #4]
    695e:	685b      	ldr	r3, [r3, #4]
    6960:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6962:	9b08      	ldr	r3, [sp, #32]
    6964:	2b02      	cmp	r3, #2
    6966:	d076      	beq.n	6a56 <Power_Ip_SMC_ModeConfig+0x10e>
    6968:	9b08      	ldr	r3, [sp, #32]
    696a:	2b02      	cmp	r3, #2
    696c:	f200 80ab 	bhi.w	6ac6 <Power_Ip_SMC_ModeConfig+0x17e>
    6970:	9b08      	ldr	r3, [sp, #32]
    6972:	2b00      	cmp	r3, #0
    6974:	d003      	beq.n	697e <Power_Ip_SMC_ModeConfig+0x36>
    6976:	9b08      	ldr	r3, [sp, #32]
    6978:	2b01      	cmp	r3, #1
    697a:	d034      	beq.n	69e6 <Power_Ip_SMC_ModeConfig+0x9e>
    697c:	e0a3      	b.n	6ac6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    697e:	4b58      	ldr	r3, [pc, #352]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    6980:	68db      	ldr	r3, [r3, #12]
    6982:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6984:	9b06      	ldr	r3, [sp, #24]
    6986:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    698a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    698c:	4a54      	ldr	r2, [pc, #336]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    698e:	9b06      	ldr	r3, [sp, #24]
    6990:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6992:	aa02      	add	r2, sp, #8
    6994:	a903      	add	r1, sp, #12
    6996:	a804      	add	r0, sp, #16
    6998:	f24c 3350 	movw	r3, #50000	; 0xc350
    699c:	f7ff fece 	bl	673c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    69a0:	9a02      	ldr	r2, [sp, #8]
    69a2:	a903      	add	r1, sp, #12
    69a4:	ab04      	add	r3, sp, #16
    69a6:	4618      	mov	r0, r3
    69a8:	f7ff fee2 	bl	6770 <Power_Ip_TimeoutExpired>
    69ac:	4603      	mov	r3, r0
    69ae:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    69b2:	4b4b      	ldr	r3, [pc, #300]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    69b4:	695b      	ldr	r3, [r3, #20]
    69b6:	f003 0301 	and.w	r3, r3, #1
    69ba:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    69bc:	9b05      	ldr	r3, [sp, #20]
    69be:	2b01      	cmp	r3, #1
    69c0:	d006      	beq.n	69d0 <Power_Ip_SMC_ModeConfig+0x88>
    69c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    69c6:	f083 0301 	eor.w	r3, r3, #1
    69ca:	b2db      	uxtb	r3, r3
    69cc:	2b00      	cmp	r3, #0
    69ce:	d1e7      	bne.n	69a0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    69d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    69d4:	2b00      	cmp	r3, #0
    69d6:	d079      	beq.n	6acc <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    69d8:	2301      	movs	r3, #1
    69da:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    69dc:	21ff      	movs	r1, #255	; 0xff
    69de:	2000      	movs	r0, #0
    69e0:	f7ff fe90 	bl	6704 <Power_Ip_ReportPowerErrors>
            }

            break;
    69e4:	e072      	b.n	6acc <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    69e6:	4b3e      	ldr	r3, [pc, #248]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    69e8:	68db      	ldr	r3, [r3, #12]
    69ea:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    69ec:	9b06      	ldr	r3, [sp, #24]
    69ee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    69f2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    69f4:	9b06      	ldr	r3, [sp, #24]
    69f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    69fa:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    69fc:	4a38      	ldr	r2, [pc, #224]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    69fe:	9b06      	ldr	r3, [sp, #24]
    6a00:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6a02:	aa02      	add	r2, sp, #8
    6a04:	a903      	add	r1, sp, #12
    6a06:	a804      	add	r0, sp, #16
    6a08:	f24c 3350 	movw	r3, #50000	; 0xc350
    6a0c:	f7ff fe96 	bl	673c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6a10:	9a02      	ldr	r2, [sp, #8]
    6a12:	a903      	add	r1, sp, #12
    6a14:	ab04      	add	r3, sp, #16
    6a16:	4618      	mov	r0, r3
    6a18:	f7ff feaa 	bl	6770 <Power_Ip_TimeoutExpired>
    6a1c:	4603      	mov	r3, r0
    6a1e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6a22:	4b2f      	ldr	r3, [pc, #188]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a24:	695b      	ldr	r3, [r3, #20]
    6a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6a2a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6a2c:	9b05      	ldr	r3, [sp, #20]
    6a2e:	2b80      	cmp	r3, #128	; 0x80
    6a30:	d006      	beq.n	6a40 <Power_Ip_SMC_ModeConfig+0xf8>
    6a32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a36:	f083 0301 	eor.w	r3, r3, #1
    6a3a:	b2db      	uxtb	r3, r3
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d1e7      	bne.n	6a10 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6a40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a44:	2b00      	cmp	r3, #0
    6a46:	d043      	beq.n	6ad0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a48:	2301      	movs	r3, #1
    6a4a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a4c:	21ff      	movs	r1, #255	; 0xff
    6a4e:	2000      	movs	r0, #0
    6a50:	f7ff fe58 	bl	6704 <Power_Ip_ReportPowerErrors>
            }

            break;
    6a54:	e03c      	b.n	6ad0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6a56:	4b22      	ldr	r3, [pc, #136]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a58:	68db      	ldr	r3, [r3, #12]
    6a5a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6a5c:	9b06      	ldr	r3, [sp, #24]
    6a5e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6a62:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6a64:	9b06      	ldr	r3, [sp, #24]
    6a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a6a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6a6c:	4a1c      	ldr	r2, [pc, #112]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a6e:	9b06      	ldr	r3, [sp, #24]
    6a70:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6a72:	aa02      	add	r2, sp, #8
    6a74:	a903      	add	r1, sp, #12
    6a76:	a804      	add	r0, sp, #16
    6a78:	f24c 3350 	movw	r3, #50000	; 0xc350
    6a7c:	f7ff fe5e 	bl	673c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6a80:	9a02      	ldr	r2, [sp, #8]
    6a82:	a903      	add	r1, sp, #12
    6a84:	ab04      	add	r3, sp, #16
    6a86:	4618      	mov	r0, r3
    6a88:	f7ff fe72 	bl	6770 <Power_Ip_TimeoutExpired>
    6a8c:	4603      	mov	r3, r0
    6a8e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6a92:	4b13      	ldr	r3, [pc, #76]	; (6ae0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a94:	695b      	ldr	r3, [r3, #20]
    6a96:	f003 0304 	and.w	r3, r3, #4
    6a9a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6a9c:	9b05      	ldr	r3, [sp, #20]
    6a9e:	2b04      	cmp	r3, #4
    6aa0:	d006      	beq.n	6ab0 <Power_Ip_SMC_ModeConfig+0x168>
    6aa2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6aa6:	f083 0301 	eor.w	r3, r3, #1
    6aaa:	b2db      	uxtb	r3, r3
    6aac:	2b00      	cmp	r3, #0
    6aae:	d1e7      	bne.n	6a80 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6ab0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d00d      	beq.n	6ad4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6ab8:	2301      	movs	r3, #1
    6aba:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6abc:	21ff      	movs	r1, #255	; 0xff
    6abe:	2000      	movs	r0, #0
    6ac0:	f7ff fe20 	bl	6704 <Power_Ip_ReportPowerErrors>
            }

            break;
    6ac4:	e006      	b.n	6ad4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6ac6:	2301      	movs	r3, #1
    6ac8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6aca:	e004      	b.n	6ad6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6acc:	bf00      	nop
    6ace:	e002      	b.n	6ad6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6ad0:	bf00      	nop
    6ad2:	e000      	b.n	6ad6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6ad4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6ad8:	4618      	mov	r0, r3
    6ada:	b00b      	add	sp, #44	; 0x2c
    6adc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae0:	4007e000 	.word	0x4007e000

00006ae4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6ae4:	b500      	push	{lr}
    6ae6:	b085      	sub	sp, #20
    6ae8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6aea:	9b01      	ldr	r3, [sp, #4]
    6aec:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6aee:	9803      	ldr	r0, [sp, #12]
    6af0:	f000 fbc8 	bl	7284 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    6af4:	4a03      	ldr	r2, [pc, #12]	; (6b04 <Port_Init+0x20>)
    6af6:	9b03      	ldr	r3, [sp, #12]
    6af8:	6013      	str	r3, [r2, #0]
        }
    }
}
    6afa:	bf00      	nop
    6afc:	b005      	add	sp, #20
    6afe:	f85d fb04 	ldr.w	pc, [sp], #4
    6b02:	bf00      	nop
    6b04:	1fff8d14 	.word	0x1fff8d14

00006b08 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6b08:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6b0a:	4b03      	ldr	r3, [pc, #12]	; (6b18 <Port_RefreshPortDirection+0x10>)
    6b0c:	681b      	ldr	r3, [r3, #0]
    6b0e:	4618      	mov	r0, r3
    6b10:	f000 fc10 	bl	7334 <Port_Ipw_RefreshPortDirection>
    }
}
    6b14:	bf00      	nop
    6b16:	bd08      	pop	{r3, pc}
    6b18:	1fff8d14 	.word	0x1fff8d14

00006b1c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6b1c:	b086      	sub	sp, #24
    6b1e:	9003      	str	r0, [sp, #12]
    6b20:	9102      	str	r1, [sp, #8]
    6b22:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6b24:	23ff      	movs	r3, #255	; 0xff
    6b26:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6b28:	9b03      	ldr	r3, [sp, #12]
    6b2a:	4a39      	ldr	r2, [pc, #228]	; (6c10 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6b2c:	4293      	cmp	r3, r2
    6b2e:	d151      	bne.n	6bd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6b30:	9b02      	ldr	r3, [sp, #8]
    6b32:	2b10      	cmp	r3, #16
    6b34:	d867      	bhi.n	6c06 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6b36:	a201      	add	r2, pc, #4	; (adr r2, 6b3c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6b3c:	00006b81 	.word	0x00006b81
    6b40:	00006b8f 	.word	0x00006b8f
    6b44:	00006c07 	.word	0x00006c07
    6b48:	00006c07 	.word	0x00006c07
    6b4c:	00006c07 	.word	0x00006c07
    6b50:	00006c07 	.word	0x00006c07
    6b54:	00006c07 	.word	0x00006c07
    6b58:	00006c07 	.word	0x00006c07
    6b5c:	00006c07 	.word	0x00006c07
    6b60:	00006c07 	.word	0x00006c07
    6b64:	00006c07 	.word	0x00006c07
    6b68:	00006c07 	.word	0x00006c07
    6b6c:	00006c07 	.word	0x00006c07
    6b70:	00006b9d 	.word	0x00006b9d
    6b74:	00006bab 	.word	0x00006bab
    6b78:	00006bb9 	.word	0x00006bb9
    6b7c:	00006bc7 	.word	0x00006bc7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6b80:	2301      	movs	r3, #1
    6b82:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b84:	9a05      	ldr	r2, [sp, #20]
    6b86:	9b01      	ldr	r3, [sp, #4]
    6b88:	4313      	orrs	r3, r2
    6b8a:	9305      	str	r3, [sp, #20]
                break;
    6b8c:	e03c      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6b8e:	2302      	movs	r3, #2
    6b90:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b92:	9a05      	ldr	r2, [sp, #20]
    6b94:	9b01      	ldr	r3, [sp, #4]
    6b96:	4313      	orrs	r3, r2
    6b98:	9305      	str	r3, [sp, #20]
                break;
    6b9a:	e035      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6b9c:	2304      	movs	r3, #4
    6b9e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6ba0:	9a05      	ldr	r2, [sp, #20]
    6ba2:	9b01      	ldr	r3, [sp, #4]
    6ba4:	4313      	orrs	r3, r2
    6ba6:	9305      	str	r3, [sp, #20]
                break;
    6ba8:	e02e      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6baa:	2308      	movs	r3, #8
    6bac:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6bae:	9a05      	ldr	r2, [sp, #20]
    6bb0:	9b01      	ldr	r3, [sp, #4]
    6bb2:	4313      	orrs	r3, r2
    6bb4:	9305      	str	r3, [sp, #20]
                break;
    6bb6:	e027      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6bb8:	230e      	movs	r3, #14
    6bba:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bbc:	9a05      	ldr	r2, [sp, #20]
    6bbe:	9b01      	ldr	r3, [sp, #4]
    6bc0:	4013      	ands	r3, r2
    6bc2:	9305      	str	r3, [sp, #20]
                break;
    6bc4:	e020      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    6bc6:	230d      	movs	r3, #13
    6bc8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bca:	9a05      	ldr	r2, [sp, #20]
    6bcc:	9b01      	ldr	r3, [sp, #4]
    6bce:	4013      	ands	r3, r2
    6bd0:	9305      	str	r3, [sp, #20]
                break;
    6bd2:	e019      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6bd4:	9b03      	ldr	r3, [sp, #12]
    6bd6:	4a0f      	ldr	r2, [pc, #60]	; (6c14 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6bd8:	4293      	cmp	r3, r2
    6bda:	d115      	bne.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6bdc:	9b02      	ldr	r3, [sp, #8]
    6bde:	2b00      	cmp	r3, #0
    6be0:	d003      	beq.n	6bea <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6be2:	9b02      	ldr	r3, [sp, #8]
    6be4:	2b01      	cmp	r3, #1
    6be6:	d007      	beq.n	6bf8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6be8:	e00e      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6bea:	230b      	movs	r3, #11
    6bec:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bee:	9a05      	ldr	r2, [sp, #20]
    6bf0:	9b01      	ldr	r3, [sp, #4]
    6bf2:	4013      	ands	r3, r2
    6bf4:	9305      	str	r3, [sp, #20]
                break;
    6bf6:	e007      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6bf8:	2307      	movs	r3, #7
    6bfa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bfc:	9a05      	ldr	r2, [sp, #20]
    6bfe:	9b01      	ldr	r3, [sp, #4]
    6c00:	4013      	ands	r3, r2
    6c02:	9305      	str	r3, [sp, #20]
                break;
    6c04:	e000      	b.n	6c08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6c06:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6c08:	9b05      	ldr	r3, [sp, #20]
}
    6c0a:	4618      	mov	r0, r3
    6c0c:	b006      	add	sp, #24
    6c0e:	4770      	bx	lr
    6c10:	4004a000 	.word	0x4004a000
    6c14:	4004b000 	.word	0x4004b000

00006c18 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6c18:	b500      	push	{lr}
    6c1a:	b089      	sub	sp, #36	; 0x24
    6c1c:	9003      	str	r0, [sp, #12]
    6c1e:	9102      	str	r1, [sp, #8]
    6c20:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6c22:	9b01      	ldr	r3, [sp, #4]
    6c24:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6c26:	9b01      	ldr	r3, [sp, #4]
    6c28:	2b08      	cmp	r3, #8
    6c2a:	d121      	bne.n	6c70 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6c2c:	4b13      	ldr	r3, [pc, #76]	; (6c7c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c2e:	685b      	ldr	r3, [r3, #4]
    6c30:	f003 030f 	and.w	r3, r3, #15
    6c34:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6c36:	9a06      	ldr	r2, [sp, #24]
    6c38:	9902      	ldr	r1, [sp, #8]
    6c3a:	9803      	ldr	r0, [sp, #12]
    6c3c:	f7ff ff6e 	bl	6b1c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6c40:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6c42:	9b05      	ldr	r3, [sp, #20]
    6c44:	2bff      	cmp	r3, #255	; 0xff
    6c46:	d011      	beq.n	6c6c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6c48:	f00c fcc8 	bl	135dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6c4c:	4b0b      	ldr	r3, [pc, #44]	; (6c7c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c4e:	685b      	ldr	r3, [r3, #4]
    6c50:	4a0a      	ldr	r2, [pc, #40]	; (6c7c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c52:	f023 030f 	bic.w	r3, r3, #15
    6c56:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6c58:	4b08      	ldr	r3, [pc, #32]	; (6c7c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c5a:	685a      	ldr	r2, [r3, #4]
    6c5c:	9b05      	ldr	r3, [sp, #20]
    6c5e:	f003 030f 	and.w	r3, r3, #15
    6c62:	4906      	ldr	r1, [pc, #24]	; (6c7c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c64:	4313      	orrs	r3, r2
    6c66:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6c68:	f00c fce4 	bl	13634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6c6c:	2300      	movs	r3, #0
    6c6e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6c70:	9b07      	ldr	r3, [sp, #28]
}
    6c72:	4618      	mov	r0, r3
    6c74:	b009      	add	sp, #36	; 0x24
    6c76:	f85d fb04 	ldr.w	pc, [sp], #4
    6c7a:	bf00      	nop
    6c7c:	40048000 	.word	0x40048000

00006c80 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6c80:	b500      	push	{lr}
    6c82:	b087      	sub	sp, #28
    6c84:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6c86:	2300      	movs	r3, #0
    6c88:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6c8a:	2300      	movs	r3, #0
    6c8c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6c8e:	2300      	movs	r3, #0
    6c90:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6c92:	9b01      	ldr	r3, [sp, #4]
    6c94:	68db      	ldr	r3, [r3, #12]
    6c96:	2b02      	cmp	r3, #2
    6c98:	d00a      	beq.n	6cb0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6c9a:	9b05      	ldr	r3, [sp, #20]
    6c9c:	f043 0302 	orr.w	r3, r3, #2
    6ca0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6ca2:	9b01      	ldr	r3, [sp, #4]
    6ca4:	68db      	ldr	r3, [r3, #12]
    6ca6:	f003 0301 	and.w	r3, r3, #1
    6caa:	9a05      	ldr	r2, [sp, #20]
    6cac:	4313      	orrs	r3, r2
    6cae:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6cb0:	9b01      	ldr	r3, [sp, #4]
    6cb2:	699b      	ldr	r3, [r3, #24]
    6cb4:	019b      	lsls	r3, r3, #6
    6cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6cba:	9a05      	ldr	r2, [sp, #20]
    6cbc:	4313      	orrs	r3, r2
    6cbe:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6cc0:	9b01      	ldr	r3, [sp, #4]
    6cc2:	6a1b      	ldr	r3, [r3, #32]
    6cc4:	03db      	lsls	r3, r3, #15
    6cc6:	b29b      	uxth	r3, r3
    6cc8:	9a05      	ldr	r2, [sp, #20]
    6cca:	4313      	orrs	r3, r2
    6ccc:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6cce:	9b01      	ldr	r3, [sp, #4]
    6cd0:	7f1b      	ldrb	r3, [r3, #28]
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d001      	beq.n	6cda <Port_Ci_Port_Ip_PinInit+0x5a>
    6cd6:	2310      	movs	r3, #16
    6cd8:	e000      	b.n	6cdc <Port_Ci_Port_Ip_PinInit+0x5c>
    6cda:	2300      	movs	r3, #0
    6cdc:	9a05      	ldr	r2, [sp, #20]
    6cde:	4313      	orrs	r3, r2
    6ce0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6ce2:	9b01      	ldr	r3, [sp, #4]
    6ce4:	691b      	ldr	r3, [r3, #16]
    6ce6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6ce8:	9b01      	ldr	r3, [sp, #4]
    6cea:	6818      	ldr	r0, [r3, #0]
    6cec:	9b01      	ldr	r3, [sp, #4]
    6cee:	689b      	ldr	r3, [r3, #8]
    6cf0:	9a04      	ldr	r2, [sp, #16]
    6cf2:	4619      	mov	r1, r3
    6cf4:	f7ff ff90 	bl	6c18 <Port_Ci_Port_Ip_ConfigureInterleave>
    6cf8:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6cfa:	9b03      	ldr	r3, [sp, #12]
    6cfc:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6cfe:	9b04      	ldr	r3, [sp, #16]
    6d00:	021b      	lsls	r3, r3, #8
    6d02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6d06:	9a05      	ldr	r2, [sp, #20]
    6d08:	4313      	orrs	r3, r2
    6d0a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6d0c:	f00c facc 	bl	132a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6d10:	9b01      	ldr	r3, [sp, #4]
    6d12:	681b      	ldr	r3, [r3, #0]
    6d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6d18:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6d1a:	9b01      	ldr	r3, [sp, #4]
    6d1c:	689b      	ldr	r3, [r3, #8]
    6d1e:	2201      	movs	r2, #1
    6d20:	fa02 f303 	lsl.w	r3, r2, r3
    6d24:	43db      	mvns	r3, r3
    6d26:	9a02      	ldr	r2, [sp, #8]
    6d28:	4013      	ands	r3, r2
    6d2a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6d2c:	9b01      	ldr	r3, [sp, #4]
    6d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6d32:	2b00      	cmp	r3, #0
    6d34:	d001      	beq.n	6d3a <Port_Ci_Port_Ip_PinInit+0xba>
    6d36:	2201      	movs	r2, #1
    6d38:	e000      	b.n	6d3c <Port_Ci_Port_Ip_PinInit+0xbc>
    6d3a:	2200      	movs	r2, #0
    6d3c:	9b01      	ldr	r3, [sp, #4]
    6d3e:	689b      	ldr	r3, [r3, #8]
    6d40:	fa02 f303 	lsl.w	r3, r2, r3
    6d44:	9a02      	ldr	r2, [sp, #8]
    6d46:	4313      	orrs	r3, r2
    6d48:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6d4a:	9b01      	ldr	r3, [sp, #4]
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	9a02      	ldr	r2, [sp, #8]
    6d50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6d54:	f00c fad4 	bl	13300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6d58:	9b04      	ldr	r3, [sp, #16]
    6d5a:	2b01      	cmp	r3, #1
    6d5c:	d16d      	bne.n	6e3a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6d5e:	9b01      	ldr	r3, [sp, #4]
    6d60:	695b      	ldr	r3, [r3, #20]
    6d62:	2b02      	cmp	r3, #2
    6d64:	d138      	bne.n	6dd8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6d66:	9b01      	ldr	r3, [sp, #4]
    6d68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d6c:	2b01      	cmp	r3, #1
    6d6e:	d10f      	bne.n	6d90 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6d70:	f00c faec 	bl	1334c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6d74:	9b01      	ldr	r3, [sp, #4]
    6d76:	685b      	ldr	r3, [r3, #4]
    6d78:	6859      	ldr	r1, [r3, #4]
    6d7a:	9b01      	ldr	r3, [sp, #4]
    6d7c:	689b      	ldr	r3, [r3, #8]
    6d7e:	2201      	movs	r2, #1
    6d80:	409a      	lsls	r2, r3
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	685b      	ldr	r3, [r3, #4]
    6d86:	430a      	orrs	r2, r1
    6d88:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6d8a:	f00c fb0b 	bl	133a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6d8e:	e013      	b.n	6db8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6d90:	9b01      	ldr	r3, [sp, #4]
    6d92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d96:	2b00      	cmp	r3, #0
    6d98:	d10e      	bne.n	6db8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6d9a:	f00c fb29 	bl	133f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6d9e:	9b01      	ldr	r3, [sp, #4]
    6da0:	685b      	ldr	r3, [r3, #4]
    6da2:	6899      	ldr	r1, [r3, #8]
    6da4:	9b01      	ldr	r3, [sp, #4]
    6da6:	689b      	ldr	r3, [r3, #8]
    6da8:	2201      	movs	r2, #1
    6daa:	409a      	lsls	r2, r3
    6dac:	9b01      	ldr	r3, [sp, #4]
    6dae:	685b      	ldr	r3, [r3, #4]
    6db0:	430a      	orrs	r2, r1
    6db2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6db4:	f00c fb48 	bl	13448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6db8:	f00c fb6c 	bl	13494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	685b      	ldr	r3, [r3, #4]
    6dc0:	6959      	ldr	r1, [r3, #20]
    6dc2:	9b01      	ldr	r3, [sp, #4]
    6dc4:	689b      	ldr	r3, [r3, #8]
    6dc6:	2201      	movs	r2, #1
    6dc8:	409a      	lsls	r2, r3
    6dca:	9b01      	ldr	r3, [sp, #4]
    6dcc:	685b      	ldr	r3, [r3, #4]
    6dce:	430a      	orrs	r2, r1
    6dd0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6dd2:	f00c fb8b 	bl	134ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6dd6:	e030      	b.n	6e3a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6dd8:	f00c fb5c 	bl	13494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6ddc:	9b01      	ldr	r3, [sp, #4]
    6dde:	685b      	ldr	r3, [r3, #4]
    6de0:	6959      	ldr	r1, [r3, #20]
    6de2:	9b01      	ldr	r3, [sp, #4]
    6de4:	689b      	ldr	r3, [r3, #8]
    6de6:	2201      	movs	r2, #1
    6de8:	fa02 f303 	lsl.w	r3, r2, r3
    6dec:	43da      	mvns	r2, r3
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	685b      	ldr	r3, [r3, #4]
    6df2:	400a      	ands	r2, r1
    6df4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6df6:	f00c fb79 	bl	134ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6dfa:	f00c fb9d 	bl	13538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6dfe:	9b01      	ldr	r3, [sp, #4]
    6e00:	685b      	ldr	r3, [r3, #4]
    6e02:	6999      	ldr	r1, [r3, #24]
    6e04:	9b01      	ldr	r3, [sp, #4]
    6e06:	689b      	ldr	r3, [r3, #8]
    6e08:	2201      	movs	r2, #1
    6e0a:	fa02 f303 	lsl.w	r3, r2, r3
    6e0e:	43da      	mvns	r2, r3
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	685b      	ldr	r3, [r3, #4]
    6e14:	400a      	ands	r2, r1
    6e16:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6e18:	9b01      	ldr	r3, [sp, #4]
    6e1a:	695b      	ldr	r3, [r3, #20]
    6e1c:	2b03      	cmp	r3, #3
    6e1e:	d10a      	bne.n	6e36 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6e20:	9b01      	ldr	r3, [sp, #4]
    6e22:	685b      	ldr	r3, [r3, #4]
    6e24:	6999      	ldr	r1, [r3, #24]
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	689b      	ldr	r3, [r3, #8]
    6e2a:	2201      	movs	r2, #1
    6e2c:	409a      	lsls	r2, r3
    6e2e:	9b01      	ldr	r3, [sp, #4]
    6e30:	685b      	ldr	r3, [r3, #4]
    6e32:	430a      	orrs	r2, r1
    6e34:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6e36:	f00c fbab 	bl	13590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6e3a:	9b01      	ldr	r3, [sp, #4]
    6e3c:	681b      	ldr	r3, [r3, #0]
    6e3e:	9a01      	ldr	r2, [sp, #4]
    6e40:	6892      	ldr	r2, [r2, #8]
    6e42:	9905      	ldr	r1, [sp, #20]
    6e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6e48:	bf00      	nop
    6e4a:	b007      	add	sp, #28
    6e4c:	f85d fb04 	ldr.w	pc, [sp], #4

00006e50 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6e50:	b500      	push	{lr}
    6e52:	b085      	sub	sp, #20
    6e54:	9001      	str	r0, [sp, #4]
    6e56:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6e58:	2300      	movs	r3, #0
    6e5a:	9303      	str	r3, [sp, #12]
    6e5c:	e00d      	b.n	6e7a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6e5e:	9a03      	ldr	r2, [sp, #12]
    6e60:	4613      	mov	r3, r2
    6e62:	009b      	lsls	r3, r3, #2
    6e64:	4413      	add	r3, r2
    6e66:	00db      	lsls	r3, r3, #3
    6e68:	461a      	mov	r2, r3
    6e6a:	9b00      	ldr	r3, [sp, #0]
    6e6c:	4413      	add	r3, r2
    6e6e:	4618      	mov	r0, r3
    6e70:	f7ff ff06 	bl	6c80 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6e74:	9b03      	ldr	r3, [sp, #12]
    6e76:	3301      	adds	r3, #1
    6e78:	9303      	str	r3, [sp, #12]
    6e7a:	9a03      	ldr	r2, [sp, #12]
    6e7c:	9b01      	ldr	r3, [sp, #4]
    6e7e:	429a      	cmp	r2, r3
    6e80:	d3ed      	bcc.n	6e5e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6e82:	2300      	movs	r3, #0
}
    6e84:	4618      	mov	r0, r3
    6e86:	b005      	add	sp, #20
    6e88:	f85d fb04 	ldr.w	pc, [sp], #4

00006e8c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6e8c:	b500      	push	{lr}
    6e8e:	b087      	sub	sp, #28
    6e90:	9003      	str	r0, [sp, #12]
    6e92:	9102      	str	r1, [sp, #8]
    6e94:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6e96:	9a01      	ldr	r2, [sp, #4]
    6e98:	9902      	ldr	r1, [sp, #8]
    6e9a:	9803      	ldr	r0, [sp, #12]
    6e9c:	f7ff febc 	bl	6c18 <Port_Ci_Port_Ip_ConfigureInterleave>
    6ea0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6ea2:	f00c fbed 	bl	13680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6ea6:	9b03      	ldr	r3, [sp, #12]
    6ea8:	9a02      	ldr	r2, [sp, #8]
    6eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6eae:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6eb0:	9b04      	ldr	r3, [sp, #16]
    6eb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6eb6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6eb8:	9b05      	ldr	r3, [sp, #20]
    6eba:	021b      	lsls	r3, r3, #8
    6ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6ec0:	9a04      	ldr	r2, [sp, #16]
    6ec2:	4313      	orrs	r3, r2
    6ec4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6ec6:	9b03      	ldr	r3, [sp, #12]
    6ec8:	9a02      	ldr	r2, [sp, #8]
    6eca:	9904      	ldr	r1, [sp, #16]
    6ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6ed0:	f00c fc02 	bl	136d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6ed4:	bf00      	nop
    6ed6:	b007      	add	sp, #28
    6ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00006edc <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6edc:	b500      	push	{lr}
    6ede:	b083      	sub	sp, #12
    6ee0:	9001      	str	r0, [sp, #4]
    6ee2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6ee4:	f00c fc1e 	bl	13724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6ee8:	9b01      	ldr	r3, [sp, #4]
    6eea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6eee:	2101      	movs	r1, #1
    6ef0:	9b00      	ldr	r3, [sp, #0]
    6ef2:	fa01 f303 	lsl.w	r3, r1, r3
    6ef6:	431a      	orrs	r2, r3
    6ef8:	9b01      	ldr	r3, [sp, #4]
    6efa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6efe:	f00c fc3d 	bl	1377c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6f02:	bf00      	nop
    6f04:	b003      	add	sp, #12
    6f06:	f85d fb04 	ldr.w	pc, [sp], #4

00006f0a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6f0a:	b500      	push	{lr}
    6f0c:	b083      	sub	sp, #12
    6f0e:	9001      	str	r0, [sp, #4]
    6f10:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6f12:	f00c fc59 	bl	137c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6f16:	9b01      	ldr	r3, [sp, #4]
    6f18:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6f1c:	2101      	movs	r1, #1
    6f1e:	9b00      	ldr	r3, [sp, #0]
    6f20:	fa01 f303 	lsl.w	r3, r1, r3
    6f24:	43db      	mvns	r3, r3
    6f26:	401a      	ands	r2, r3
    6f28:	9b01      	ldr	r3, [sp, #4]
    6f2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6f2e:	f00c fc77 	bl	13820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6f32:	bf00      	nop
    6f34:	b003      	add	sp, #12
    6f36:	f85d fb04 	ldr.w	pc, [sp], #4

00006f3a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6f3a:	b082      	sub	sp, #8
    6f3c:	9001      	str	r0, [sp, #4]
    6f3e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6f40:	9b00      	ldr	r3, [sp, #0]
    6f42:	785b      	ldrb	r3, [r3, #1]
    6f44:	f003 0201 	and.w	r2, r3, #1
    6f48:	9b01      	ldr	r3, [sp, #4]
    6f4a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6f4e:	9b00      	ldr	r3, [sp, #0]
    6f50:	789b      	ldrb	r3, [r3, #2]
    6f52:	f003 021f 	and.w	r2, r3, #31
    6f56:	9b01      	ldr	r3, [sp, #4]
    6f58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6f5c:	bf00      	nop
    6f5e:	b002      	add	sp, #8
    6f60:	4770      	bx	lr

00006f62 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6f62:	b086      	sub	sp, #24
    6f64:	9003      	str	r0, [sp, #12]
    6f66:	9301      	str	r3, [sp, #4]
    6f68:	460b      	mov	r3, r1
    6f6a:	f8ad 300a 	strh.w	r3, [sp, #10]
    6f6e:	4613      	mov	r3, r2
    6f70:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6f74:	2300      	movs	r3, #0
    6f76:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6f7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f7e:	f043 0301 	orr.w	r3, r3, #1
    6f82:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6f86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f8a:	f043 0302 	orr.w	r3, r3, #2
    6f8e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6f92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f96:	f043 0310 	orr.w	r3, r3, #16
    6f9a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6f9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6fa6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6faa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6fb2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6fb6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6fc2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6fc6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6fca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6fce:	4013      	ands	r3, r2
    6fd0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d003      	beq.n	6fe2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6fda:	9b01      	ldr	r3, [sp, #4]
    6fdc:	2b01      	cmp	r3, #1
    6fde:	d00a      	beq.n	6ff6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6fe0:	e013      	b.n	700a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6fe2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fe6:	041a      	lsls	r2, r3, #16
    6fe8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fec:	431a      	orrs	r2, r3
    6fee:	9b03      	ldr	r3, [sp, #12]
    6ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6ff4:	e009      	b.n	700a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6ff6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ffa:	041a      	lsls	r2, r3, #16
    6ffc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7000:	431a      	orrs	r2, r3
    7002:	9b03      	ldr	r3, [sp, #12]
    7004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    7008:	bf00      	nop
    }
}
    700a:	bf00      	nop
    700c:	b006      	add	sp, #24
    700e:	4770      	bx	lr

00007010 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    7010:	b500      	push	{lr}
    7012:	b087      	sub	sp, #28
    7014:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    7016:	9b01      	ldr	r3, [sp, #4]
    7018:	885b      	ldrh	r3, [r3, #2]
    701a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    701e:	9b01      	ldr	r3, [sp, #4]
    7020:	689b      	ldr	r3, [r3, #8]
    7022:	7a1b      	ldrb	r3, [r3, #8]
    7024:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    7028:	9b01      	ldr	r3, [sp, #4]
    702a:	689b      	ldr	r3, [r3, #8]
    702c:	681b      	ldr	r3, [r3, #0]
    702e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    7030:	9b01      	ldr	r3, [sp, #4]
    7032:	689b      	ldr	r3, [r3, #8]
    7034:	685b      	ldr	r3, [r3, #4]
    7036:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7038:	2300      	movs	r3, #0
    703a:	f8ad 3016 	strh.w	r3, [sp, #22]
    703e:	e111      	b.n	7264 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    7040:	9b02      	ldr	r3, [sp, #8]
    7042:	2b02      	cmp	r3, #2
    7044:	d169      	bne.n	711a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7046:	f89d 3013 	ldrb.w	r3, [sp, #19]
    704a:	2b01      	cmp	r3, #1
    704c:	d11a      	bne.n	7084 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    704e:	9b01      	ldr	r3, [sp, #4]
    7050:	685a      	ldr	r2, [r3, #4]
    7052:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7056:	005b      	lsls	r3, r3, #1
    7058:	4413      	add	r3, r2
    705a:	881b      	ldrh	r3, [r3, #0]
    705c:	f003 021f 	and.w	r2, r3, #31
    7060:	9b01      	ldr	r3, [sp, #4]
    7062:	6859      	ldr	r1, [r3, #4]
    7064:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7068:	005b      	lsls	r3, r3, #1
    706a:	440b      	add	r3, r1
    706c:	881b      	ldrh	r3, [r3, #0]
    706e:	095b      	lsrs	r3, r3, #5
    7070:	b29b      	uxth	r3, r3
    7072:	4619      	mov	r1, r3
    7074:	4b81      	ldr	r3, [pc, #516]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    7076:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    707a:	2101      	movs	r1, #1
    707c:	fa01 f202 	lsl.w	r2, r1, r2
    7080:	605a      	str	r2, [r3, #4]
    7082:	e01d      	b.n	70c0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7084:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7088:	2b00      	cmp	r3, #0
    708a:	d119      	bne.n	70c0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    708c:	9b01      	ldr	r3, [sp, #4]
    708e:	685a      	ldr	r2, [r3, #4]
    7090:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7094:	005b      	lsls	r3, r3, #1
    7096:	4413      	add	r3, r2
    7098:	881b      	ldrh	r3, [r3, #0]
    709a:	f003 021f 	and.w	r2, r3, #31
    709e:	9b01      	ldr	r3, [sp, #4]
    70a0:	6859      	ldr	r1, [r3, #4]
    70a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70a6:	005b      	lsls	r3, r3, #1
    70a8:	440b      	add	r3, r1
    70aa:	881b      	ldrh	r3, [r3, #0]
    70ac:	095b      	lsrs	r3, r3, #5
    70ae:	b29b      	uxth	r3, r3
    70b0:	4619      	mov	r1, r3
    70b2:	4b72      	ldr	r3, [pc, #456]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    70b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    70b8:	2101      	movs	r1, #1
    70ba:	fa01 f202 	lsl.w	r2, r1, r2
    70be:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    70c0:	f00c fbd4 	bl	1386c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    70c4:	9b01      	ldr	r3, [sp, #4]
    70c6:	685a      	ldr	r2, [r3, #4]
    70c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70cc:	005b      	lsls	r3, r3, #1
    70ce:	4413      	add	r3, r2
    70d0:	881b      	ldrh	r3, [r3, #0]
    70d2:	095b      	lsrs	r3, r3, #5
    70d4:	b29b      	uxth	r3, r3
    70d6:	461a      	mov	r2, r3
    70d8:	4b68      	ldr	r3, [pc, #416]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    70da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70de:	6959      	ldr	r1, [r3, #20]
    70e0:	9b01      	ldr	r3, [sp, #4]
    70e2:	685a      	ldr	r2, [r3, #4]
    70e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70e8:	005b      	lsls	r3, r3, #1
    70ea:	4413      	add	r3, r2
    70ec:	881b      	ldrh	r3, [r3, #0]
    70ee:	f003 031f 	and.w	r3, r3, #31
    70f2:	2201      	movs	r2, #1
    70f4:	409a      	lsls	r2, r3
    70f6:	9b01      	ldr	r3, [sp, #4]
    70f8:	6858      	ldr	r0, [r3, #4]
    70fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70fe:	005b      	lsls	r3, r3, #1
    7100:	4403      	add	r3, r0
    7102:	881b      	ldrh	r3, [r3, #0]
    7104:	095b      	lsrs	r3, r3, #5
    7106:	b29b      	uxth	r3, r3
    7108:	4618      	mov	r0, r3
    710a:	4b5c      	ldr	r3, [pc, #368]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    710c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7110:	430a      	orrs	r2, r1
    7112:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7114:	f00c fbd6 	bl	138c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    7118:	e086      	b.n	7228 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    711a:	f00c fba7 	bl	1386c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    711e:	9b01      	ldr	r3, [sp, #4]
    7120:	685a      	ldr	r2, [r3, #4]
    7122:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7126:	005b      	lsls	r3, r3, #1
    7128:	4413      	add	r3, r2
    712a:	881b      	ldrh	r3, [r3, #0]
    712c:	095b      	lsrs	r3, r3, #5
    712e:	b29b      	uxth	r3, r3
    7130:	461a      	mov	r2, r3
    7132:	4b52      	ldr	r3, [pc, #328]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    7134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7138:	6959      	ldr	r1, [r3, #20]
    713a:	9b01      	ldr	r3, [sp, #4]
    713c:	685a      	ldr	r2, [r3, #4]
    713e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7142:	005b      	lsls	r3, r3, #1
    7144:	4413      	add	r3, r2
    7146:	881b      	ldrh	r3, [r3, #0]
    7148:	f003 031f 	and.w	r3, r3, #31
    714c:	2201      	movs	r2, #1
    714e:	fa02 f303 	lsl.w	r3, r2, r3
    7152:	43da      	mvns	r2, r3
    7154:	9b01      	ldr	r3, [sp, #4]
    7156:	6858      	ldr	r0, [r3, #4]
    7158:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    715c:	005b      	lsls	r3, r3, #1
    715e:	4403      	add	r3, r0
    7160:	881b      	ldrh	r3, [r3, #0]
    7162:	095b      	lsrs	r3, r3, #5
    7164:	b29b      	uxth	r3, r3
    7166:	4618      	mov	r0, r3
    7168:	4b44      	ldr	r3, [pc, #272]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    716a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    716e:	400a      	ands	r2, r1
    7170:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7172:	f00c fba7 	bl	138c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    7176:	f00c fbcb 	bl	13910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    717a:	9b01      	ldr	r3, [sp, #4]
    717c:	685a      	ldr	r2, [r3, #4]
    717e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7182:	005b      	lsls	r3, r3, #1
    7184:	4413      	add	r3, r2
    7186:	881b      	ldrh	r3, [r3, #0]
    7188:	095b      	lsrs	r3, r3, #5
    718a:	b29b      	uxth	r3, r3
    718c:	461a      	mov	r2, r3
    718e:	4b3b      	ldr	r3, [pc, #236]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    7190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7194:	6999      	ldr	r1, [r3, #24]
    7196:	9b01      	ldr	r3, [sp, #4]
    7198:	685a      	ldr	r2, [r3, #4]
    719a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    719e:	005b      	lsls	r3, r3, #1
    71a0:	4413      	add	r3, r2
    71a2:	881b      	ldrh	r3, [r3, #0]
    71a4:	f003 031f 	and.w	r3, r3, #31
    71a8:	2201      	movs	r2, #1
    71aa:	fa02 f303 	lsl.w	r3, r2, r3
    71ae:	43da      	mvns	r2, r3
    71b0:	9b01      	ldr	r3, [sp, #4]
    71b2:	6858      	ldr	r0, [r3, #4]
    71b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71b8:	005b      	lsls	r3, r3, #1
    71ba:	4403      	add	r3, r0
    71bc:	881b      	ldrh	r3, [r3, #0]
    71be:	095b      	lsrs	r3, r3, #5
    71c0:	b29b      	uxth	r3, r3
    71c2:	4618      	mov	r0, r3
    71c4:	4b2d      	ldr	r3, [pc, #180]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    71c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    71ca:	400a      	ands	r2, r1
    71cc:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    71ce:	9b02      	ldr	r3, [sp, #8]
    71d0:	2b03      	cmp	r3, #3
    71d2:	d127      	bne.n	7224 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    71d4:	9b01      	ldr	r3, [sp, #4]
    71d6:	685a      	ldr	r2, [r3, #4]
    71d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71dc:	005b      	lsls	r3, r3, #1
    71de:	4413      	add	r3, r2
    71e0:	881b      	ldrh	r3, [r3, #0]
    71e2:	095b      	lsrs	r3, r3, #5
    71e4:	b29b      	uxth	r3, r3
    71e6:	461a      	mov	r2, r3
    71e8:	4b24      	ldr	r3, [pc, #144]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    71ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71ee:	6999      	ldr	r1, [r3, #24]
    71f0:	9b01      	ldr	r3, [sp, #4]
    71f2:	685a      	ldr	r2, [r3, #4]
    71f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71f8:	005b      	lsls	r3, r3, #1
    71fa:	4413      	add	r3, r2
    71fc:	881b      	ldrh	r3, [r3, #0]
    71fe:	f003 031f 	and.w	r3, r3, #31
    7202:	2201      	movs	r2, #1
    7204:	409a      	lsls	r2, r3
    7206:	9b01      	ldr	r3, [sp, #4]
    7208:	6858      	ldr	r0, [r3, #4]
    720a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    720e:	005b      	lsls	r3, r3, #1
    7210:	4403      	add	r3, r0
    7212:	881b      	ldrh	r3, [r3, #0]
    7214:	095b      	lsrs	r3, r3, #5
    7216:	b29b      	uxth	r3, r3
    7218:	4618      	mov	r0, r3
    721a:	4b18      	ldr	r3, [pc, #96]	; (727c <Port_Ipw_Init_UnusedPins+0x26c>)
    721c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7220:	430a      	orrs	r2, r1
    7222:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    7224:	f00c fba0 	bl	13968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    7228:	9b01      	ldr	r3, [sp, #4]
    722a:	685a      	ldr	r2, [r3, #4]
    722c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7230:	005b      	lsls	r3, r3, #1
    7232:	4413      	add	r3, r2
    7234:	881b      	ldrh	r3, [r3, #0]
    7236:	095b      	lsrs	r3, r3, #5
    7238:	b29b      	uxth	r3, r3
    723a:	461a      	mov	r2, r3
    723c:	4b10      	ldr	r3, [pc, #64]	; (7280 <Port_Ipw_Init_UnusedPins+0x270>)
    723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7242:	9a01      	ldr	r2, [sp, #4]
    7244:	6851      	ldr	r1, [r2, #4]
    7246:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    724a:	0052      	lsls	r2, r2, #1
    724c:	440a      	add	r2, r1
    724e:	8812      	ldrh	r2, [r2, #0]
    7250:	f002 021f 	and.w	r2, r2, #31
    7254:	9903      	ldr	r1, [sp, #12]
    7256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    725a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    725e:	3301      	adds	r3, #1
    7260:	f8ad 3016 	strh.w	r3, [sp, #22]
    7264:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7268:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    726c:	429a      	cmp	r2, r3
    726e:	f4ff aee7 	bcc.w	7040 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    7272:	bf00      	nop
    7274:	bf00      	nop
    7276:	b007      	add	sp, #28
    7278:	f85d fb04 	ldr.w	pc, [sp], #4
    727c:	000166fc 	.word	0x000166fc
    7280:	000166e8 	.word	0x000166e8

00007284 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    7284:	b500      	push	{lr}
    7286:	b085      	sub	sp, #20
    7288:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    728a:	9b01      	ldr	r3, [sp, #4]
    728c:	7c1b      	ldrb	r3, [r3, #16]
    728e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7292:	2300      	movs	r3, #0
    7294:	f8ad 300e 	strh.w	r3, [sp, #14]
    7298:	e035      	b.n	7306 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    729a:	9b01      	ldr	r3, [sp, #4]
    729c:	695a      	ldr	r2, [r3, #20]
    729e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72a2:	00db      	lsls	r3, r3, #3
    72a4:	4413      	add	r3, r2
    72a6:	781b      	ldrb	r3, [r3, #0]
    72a8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    72ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72b0:	4a1f      	ldr	r2, [pc, #124]	; (7330 <Port_Ipw_Init+0xac>)
    72b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    72b6:	9b01      	ldr	r3, [sp, #4]
    72b8:	695a      	ldr	r2, [r3, #20]
    72ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72be:	00db      	lsls	r3, r3, #3
    72c0:	4413      	add	r3, r2
    72c2:	4619      	mov	r1, r3
    72c4:	f7ff fe39 	bl	6f3a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    72c8:	f00c fcbc 	bl	13c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    72cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72d0:	4a17      	ldr	r2, [pc, #92]	; (7330 <Port_Ipw_Init+0xac>)
    72d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    72da:	9b01      	ldr	r3, [sp, #4]
    72dc:	695a      	ldr	r2, [r3, #20]
    72de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72e2:	00db      	lsls	r3, r3, #3
    72e4:	4413      	add	r3, r2
    72e6:	685a      	ldr	r2, [r3, #4]
    72e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72ec:	4810      	ldr	r0, [pc, #64]	; (7330 <Port_Ipw_Init+0xac>)
    72ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    72f2:	430a      	orrs	r2, r1
    72f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    72f8:	f00c fcd0 	bl	13c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    72fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7300:	3301      	adds	r3, #1
    7302:	f8ad 300e 	strh.w	r3, [sp, #14]
    7306:	f89d 300d 	ldrb.w	r3, [sp, #13]
    730a:	b29b      	uxth	r3, r3
    730c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7310:	429a      	cmp	r2, r3
    7312:	d3c2      	bcc.n	729a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    7314:	9b01      	ldr	r3, [sp, #4]
    7316:	6a1b      	ldr	r3, [r3, #32]
    7318:	4619      	mov	r1, r3
    731a:	2011      	movs	r0, #17
    731c:	f7ff fd98 	bl	6e50 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    7320:	9801      	ldr	r0, [sp, #4]
    7322:	f7ff fe75 	bl	7010 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    7326:	bf00      	nop
    7328:	b005      	add	sp, #20
    732a:	f85d fb04 	ldr.w	pc, [sp], #4
    732e:	bf00      	nop
    7330:	000166e8 	.word	0x000166e8

00007334 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7334:	b500      	push	{lr}
    7336:	b085      	sub	sp, #20
    7338:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    733a:	9b01      	ldr	r3, [sp, #4]
    733c:	881b      	ldrh	r3, [r3, #0]
    733e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7342:	2300      	movs	r3, #0
    7344:	f8ad 300e 	strh.w	r3, [sp, #14]
    7348:	e0d2      	b.n	74f0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    734a:	9b01      	ldr	r3, [sp, #4]
    734c:	68d9      	ldr	r1, [r3, #12]
    734e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7352:	4613      	mov	r3, r2
    7354:	009b      	lsls	r3, r3, #2
    7356:	4413      	add	r3, r2
    7358:	009b      	lsls	r3, r3, #2
    735a:	440b      	add	r3, r1
    735c:	7c5b      	ldrb	r3, [r3, #17]
    735e:	f083 0301 	eor.w	r3, r3, #1
    7362:	b2db      	uxtb	r3, r3
    7364:	2b00      	cmp	r3, #0
    7366:	f000 80be 	beq.w	74e6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    736a:	9b01      	ldr	r3, [sp, #4]
    736c:	68d9      	ldr	r1, [r3, #12]
    736e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7372:	4613      	mov	r3, r2
    7374:	009b      	lsls	r3, r3, #2
    7376:	4413      	add	r3, r2
    7378:	009b      	lsls	r3, r3, #2
    737a:	440b      	add	r3, r1
    737c:	7c1b      	ldrb	r3, [r3, #16]
    737e:	2b00      	cmp	r3, #0
    7380:	f000 80b1 	beq.w	74e6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7384:	9b01      	ldr	r3, [sp, #4]
    7386:	68d9      	ldr	r1, [r3, #12]
    7388:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    738c:	4613      	mov	r3, r2
    738e:	009b      	lsls	r3, r3, #2
    7390:	4413      	add	r3, r2
    7392:	009b      	lsls	r3, r3, #2
    7394:	440b      	add	r3, r1
    7396:	881b      	ldrh	r3, [r3, #0]
    7398:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    739c:	9b01      	ldr	r3, [sp, #4]
    739e:	68d9      	ldr	r1, [r3, #12]
    73a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73a4:	4613      	mov	r3, r2
    73a6:	009b      	lsls	r3, r3, #2
    73a8:	4413      	add	r3, r2
    73aa:	009b      	lsls	r3, r3, #2
    73ac:	440b      	add	r3, r1
    73ae:	68db      	ldr	r3, [r3, #12]
    73b0:	2b02      	cmp	r3, #2
    73b2:	d11d      	bne.n	73f0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73b4:	f00c fd8e 	bl	13ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73bc:	095b      	lsrs	r3, r3, #5
    73be:	b29b      	uxth	r3, r3
    73c0:	461a      	mov	r2, r3
    73c2:	4b51      	ldr	r3, [pc, #324]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73c8:	6959      	ldr	r1, [r3, #20]
    73ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73ce:	f003 031f 	and.w	r3, r3, #31
    73d2:	2201      	movs	r2, #1
    73d4:	409a      	lsls	r2, r3
    73d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73da:	095b      	lsrs	r3, r3, #5
    73dc:	b29b      	uxth	r3, r3
    73de:	4618      	mov	r0, r3
    73e0:	4b49      	ldr	r3, [pc, #292]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73e6:	430a      	orrs	r2, r1
    73e8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    73ea:	f00c fd9f 	bl	13f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    73ee:	e07a      	b.n	74e6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    73f0:	9b01      	ldr	r3, [sp, #4]
    73f2:	68d9      	ldr	r1, [r3, #12]
    73f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73f8:	4613      	mov	r3, r2
    73fa:	009b      	lsls	r3, r3, #2
    73fc:	4413      	add	r3, r2
    73fe:	009b      	lsls	r3, r3, #2
    7400:	440b      	add	r3, r1
    7402:	68db      	ldr	r3, [r3, #12]
    7404:	2b01      	cmp	r3, #1
    7406:	d00b      	beq.n	7420 <Port_Ipw_RefreshPortDirection+0xec>
    7408:	9b01      	ldr	r3, [sp, #4]
    740a:	68d9      	ldr	r1, [r3, #12]
    740c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7410:	4613      	mov	r3, r2
    7412:	009b      	lsls	r3, r3, #2
    7414:	4413      	add	r3, r2
    7416:	009b      	lsls	r3, r3, #2
    7418:	440b      	add	r3, r1
    741a:	68db      	ldr	r3, [r3, #12]
    741c:	2b03      	cmp	r3, #3
    741e:	d162      	bne.n	74e6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7420:	f00c fd58 	bl	13ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7424:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7428:	095b      	lsrs	r3, r3, #5
    742a:	b29b      	uxth	r3, r3
    742c:	461a      	mov	r2, r3
    742e:	4b36      	ldr	r3, [pc, #216]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7434:	6959      	ldr	r1, [r3, #20]
    7436:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    743a:	f003 031f 	and.w	r3, r3, #31
    743e:	2201      	movs	r2, #1
    7440:	fa02 f303 	lsl.w	r3, r2, r3
    7444:	43da      	mvns	r2, r3
    7446:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    744a:	095b      	lsrs	r3, r3, #5
    744c:	b29b      	uxth	r3, r3
    744e:	4618      	mov	r0, r3
    7450:	4b2d      	ldr	r3, [pc, #180]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7452:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7456:	400a      	ands	r2, r1
    7458:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    745a:	f00c fd67 	bl	13f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    745e:	f00c fd8b 	bl	13f78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7462:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7466:	095b      	lsrs	r3, r3, #5
    7468:	b29b      	uxth	r3, r3
    746a:	461a      	mov	r2, r3
    746c:	4b26      	ldr	r3, [pc, #152]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7472:	6999      	ldr	r1, [r3, #24]
    7474:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7478:	f003 031f 	and.w	r3, r3, #31
    747c:	2201      	movs	r2, #1
    747e:	fa02 f303 	lsl.w	r3, r2, r3
    7482:	43da      	mvns	r2, r3
    7484:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7488:	095b      	lsrs	r3, r3, #5
    748a:	b29b      	uxth	r3, r3
    748c:	4618      	mov	r0, r3
    748e:	4b1e      	ldr	r3, [pc, #120]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7490:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7494:	400a      	ands	r2, r1
    7496:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7498:	9b01      	ldr	r3, [sp, #4]
    749a:	68d9      	ldr	r1, [r3, #12]
    749c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74a0:	4613      	mov	r3, r2
    74a2:	009b      	lsls	r3, r3, #2
    74a4:	4413      	add	r3, r2
    74a6:	009b      	lsls	r3, r3, #2
    74a8:	440b      	add	r3, r1
    74aa:	68db      	ldr	r3, [r3, #12]
    74ac:	2b03      	cmp	r3, #3
    74ae:	d118      	bne.n	74e2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    74b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74b4:	095b      	lsrs	r3, r3, #5
    74b6:	b29b      	uxth	r3, r3
    74b8:	461a      	mov	r2, r3
    74ba:	4b13      	ldr	r3, [pc, #76]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74c0:	6999      	ldr	r1, [r3, #24]
    74c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74c6:	f003 031f 	and.w	r3, r3, #31
    74ca:	2201      	movs	r2, #1
    74cc:	409a      	lsls	r2, r3
    74ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    74d2:	095b      	lsrs	r3, r3, #5
    74d4:	b29b      	uxth	r3, r3
    74d6:	4618      	mov	r0, r3
    74d8:	4b0b      	ldr	r3, [pc, #44]	; (7508 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74de:	430a      	orrs	r2, r1
    74e0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    74e2:	f00c fd75 	bl	13fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    74e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74ea:	3301      	adds	r3, #1
    74ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    74f0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74f8:	429a      	cmp	r2, r3
    74fa:	f4ff af26 	bcc.w	734a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    74fe:	bf00      	nop
    7500:	bf00      	nop
    7502:	b005      	add	sp, #20
    7504:	f85d fb04 	ldr.w	pc, [sp], #4
    7508:	000166fc 	.word	0x000166fc

0000750c <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    750c:	b500      	push	{lr}
    750e:	b085      	sub	sp, #20
    7510:	4603      	mov	r3, r0
    7512:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7516:	2300      	movs	r3, #0
    7518:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    751c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7520:	4618      	mov	r0, r3
    7522:	f000 f871 	bl	7608 <Dio_Ipw_ReadChannel>
    7526:	4603      	mov	r3, r0
    7528:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    752c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7530:	4618      	mov	r0, r3
    7532:	b005      	add	sp, #20
    7534:	f85d fb04 	ldr.w	pc, [sp], #4

00007538 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7538:	b500      	push	{lr}
    753a:	b083      	sub	sp, #12
    753c:	4603      	mov	r3, r0
    753e:	460a      	mov	r2, r1
    7540:	f8ad 3006 	strh.w	r3, [sp, #6]
    7544:	4613      	mov	r3, r2
    7546:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    754a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    754e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7552:	4611      	mov	r1, r2
    7554:	4618      	mov	r0, r3
    7556:	f000 f87d 	bl	7654 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    755a:	bf00      	nop
    755c:	b003      	add	sp, #12
    755e:	f85d fb04 	ldr.w	pc, [sp], #4

00007562 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7562:	b500      	push	{lr}
    7564:	b085      	sub	sp, #20
    7566:	4603      	mov	r3, r0
    7568:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    756c:	2300      	movs	r3, #0
    756e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    7572:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7576:	4618      	mov	r0, r3
    7578:	f000 f892 	bl	76a0 <Dio_Ipw_FlipChannel>
    757c:	4603      	mov	r3, r0
    757e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    7582:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7586:	4618      	mov	r0, r3
    7588:	b005      	add	sp, #20
    758a:	f85d fb04 	ldr.w	pc, [sp], #4

0000758e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    758e:	b500      	push	{lr}
    7590:	b085      	sub	sp, #20
    7592:	4603      	mov	r3, r0
    7594:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7598:	2300      	movs	r3, #0
    759a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    759c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75a0:	4618      	mov	r0, r3
    75a2:	f000 f8b3 	bl	770c <Dio_Ipw_ReadPort>
    75a6:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    75a8:	9b03      	ldr	r3, [sp, #12]
}
    75aa:	4618      	mov	r0, r3
    75ac:	b005      	add	sp, #20
    75ae:	f85d fb04 	ldr.w	pc, [sp], #4

000075b2 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    75b2:	b500      	push	{lr}
    75b4:	b083      	sub	sp, #12
    75b6:	4603      	mov	r3, r0
    75b8:	9100      	str	r1, [sp, #0]
    75ba:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    75be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75c2:	9900      	ldr	r1, [sp, #0]
    75c4:	4618      	mov	r0, r3
    75c6:	f000 f8b9 	bl	773c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    75ca:	bf00      	nop
    75cc:	b003      	add	sp, #12
    75ce:	f85d fb04 	ldr.w	pc, [sp], #4

000075d2 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    75d2:	b500      	push	{lr}
    75d4:	b085      	sub	sp, #20
    75d6:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    75d8:	2300      	movs	r3, #0
    75da:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    75dc:	9801      	ldr	r0, [sp, #4]
    75de:	f000 f8c5 	bl	776c <Dio_Ipw_ReadChannelGroup>
    75e2:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    75e4:	9b03      	ldr	r3, [sp, #12]
}
    75e6:	4618      	mov	r0, r3
    75e8:	b005      	add	sp, #20
    75ea:	f85d fb04 	ldr.w	pc, [sp], #4

000075ee <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    75ee:	b500      	push	{lr}
    75f0:	b083      	sub	sp, #12
    75f2:	9001      	str	r0, [sp, #4]
    75f4:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    75f6:	9900      	ldr	r1, [sp, #0]
    75f8:	9801      	ldr	r0, [sp, #4]
    75fa:	f000 f8d7 	bl	77ac <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    75fe:	bf00      	nop
    7600:	b003      	add	sp, #12
    7602:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00007608 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    7608:	b500      	push	{lr}
    760a:	b087      	sub	sp, #28
    760c:	4603      	mov	r3, r0
    760e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    7612:	2300      	movs	r3, #0
    7614:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7618:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    761c:	095b      	lsrs	r3, r3, #5
    761e:	b29b      	uxth	r3, r3
    7620:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7622:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7626:	f003 031f 	and.w	r3, r3, #31
    762a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    762c:	4a08      	ldr	r2, [pc, #32]	; (7650 <Dio_Ipw_ReadChannel+0x48>)
    762e:	9b04      	ldr	r3, [sp, #16]
    7630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7634:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    7636:	9903      	ldr	r1, [sp, #12]
    7638:	9802      	ldr	r0, [sp, #8]
    763a:	f000 f940 	bl	78be <Gpio_Dio_Ip_ReadPin>
    763e:	4603      	mov	r3, r0
    7640:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    7644:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7648:	4618      	mov	r0, r3
    764a:	b007      	add	sp, #28
    764c:	f85d fb04 	ldr.w	pc, [sp], #4
    7650:	1fff8b24 	.word	0x1fff8b24

00007654 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7654:	b500      	push	{lr}
    7656:	b087      	sub	sp, #28
    7658:	4603      	mov	r3, r0
    765a:	460a      	mov	r2, r1
    765c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7660:	4613      	mov	r3, r2
    7662:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7666:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    766a:	095b      	lsrs	r3, r3, #5
    766c:	b29b      	uxth	r3, r3
    766e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7670:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7674:	f003 031f 	and.w	r3, r3, #31
    7678:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    767a:	4a08      	ldr	r2, [pc, #32]	; (769c <Dio_Ipw_WriteChannel+0x48>)
    767c:	9b05      	ldr	r3, [sp, #20]
    767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7682:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    7684:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7688:	461a      	mov	r2, r3
    768a:	9904      	ldr	r1, [sp, #16]
    768c:	9803      	ldr	r0, [sp, #12]
    768e:	f000 f8b7 	bl	7800 <Gpio_Dio_Ip_WritePin>
}
    7692:	bf00      	nop
    7694:	b007      	add	sp, #28
    7696:	f85d fb04 	ldr.w	pc, [sp], #4
    769a:	bf00      	nop
    769c:	1fff8b24 	.word	0x1fff8b24

000076a0 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    76a0:	b500      	push	{lr}
    76a2:	b089      	sub	sp, #36	; 0x24
    76a4:	4603      	mov	r3, r0
    76a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    76aa:	2300      	movs	r3, #0
    76ac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    76b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    76b4:	095b      	lsrs	r3, r3, #5
    76b6:	b29b      	uxth	r3, r3
    76b8:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    76ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    76be:	f003 031f 	and.w	r3, r3, #31
    76c2:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    76c4:	4a10      	ldr	r2, [pc, #64]	; (7708 <Dio_Ipw_FlipChannel+0x68>)
    76c6:	9b06      	ldr	r3, [sp, #24]
    76c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76cc:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    76ce:	2201      	movs	r2, #1
    76d0:	9b05      	ldr	r3, [sp, #20]
    76d2:	fa02 f303 	lsl.w	r3, r2, r3
    76d6:	4619      	mov	r1, r3
    76d8:	9804      	ldr	r0, [sp, #16]
    76da:	f000 f8dc 	bl	7896 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    76de:	9804      	ldr	r0, [sp, #16]
    76e0:	f000 f8bc 	bl	785c <Gpio_Dio_Ip_GetPinsOutput>
    76e4:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    76e6:	2201      	movs	r2, #1
    76e8:	9b05      	ldr	r3, [sp, #20]
    76ea:	409a      	lsls	r2, r3
    76ec:	9b03      	ldr	r3, [sp, #12]
    76ee:	401a      	ands	r2, r3
    76f0:	9b05      	ldr	r3, [sp, #20]
    76f2:	fa22 f303 	lsr.w	r3, r2, r3
    76f6:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    76fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    76fe:	4618      	mov	r0, r3
    7700:	b009      	add	sp, #36	; 0x24
    7702:	f85d fb04 	ldr.w	pc, [sp], #4
    7706:	bf00      	nop
    7708:	1fff8b24 	.word	0x1fff8b24

0000770c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    770c:	b500      	push	{lr}
    770e:	b085      	sub	sp, #20
    7710:	4603      	mov	r3, r0
    7712:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7716:	2300      	movs	r3, #0
    7718:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    771a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    771e:	4a06      	ldr	r2, [pc, #24]	; (7738 <Dio_Ipw_ReadPort+0x2c>)
    7720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7724:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    7726:	9802      	ldr	r0, [sp, #8]
    7728:	f000 f8be 	bl	78a8 <Gpio_Dio_Ip_ReadPins>
    772c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    772e:	9b03      	ldr	r3, [sp, #12]
}
    7730:	4618      	mov	r0, r3
    7732:	b005      	add	sp, #20
    7734:	f85d fb04 	ldr.w	pc, [sp], #4
    7738:	1fff8b24 	.word	0x1fff8b24

0000773c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    773c:	b500      	push	{lr}
    773e:	b085      	sub	sp, #20
    7740:	4603      	mov	r3, r0
    7742:	9100      	str	r1, [sp, #0]
    7744:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    7748:	9b00      	ldr	r3, [sp, #0]
    774a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    774c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7750:	4a05      	ldr	r2, [pc, #20]	; (7768 <Dio_Ipw_WritePort+0x2c>)
    7752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7756:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    7758:	9903      	ldr	r1, [sp, #12]
    775a:	9802      	ldr	r0, [sp, #8]
    775c:	f000 f875 	bl	784a <Gpio_Dio_Ip_WritePins>
}
    7760:	bf00      	nop
    7762:	b005      	add	sp, #20
    7764:	f85d fb04 	ldr.w	pc, [sp], #4
    7768:	1fff8b24 	.word	0x1fff8b24

0000776c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    776c:	b500      	push	{lr}
    776e:	b087      	sub	sp, #28
    7770:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7772:	2300      	movs	r3, #0
    7774:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    7776:	9b01      	ldr	r3, [sp, #4]
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	461a      	mov	r2, r3
    777c:	4b0a      	ldr	r3, [pc, #40]	; (77a8 <Dio_Ipw_ReadChannelGroup+0x3c>)
    777e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7782:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    7784:	9804      	ldr	r0, [sp, #16]
    7786:	f000 f88f 	bl	78a8 <Gpio_Dio_Ip_ReadPins>
    778a:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    778c:	9b01      	ldr	r3, [sp, #4]
    778e:	685a      	ldr	r2, [r3, #4]
    7790:	9b03      	ldr	r3, [sp, #12]
    7792:	4013      	ands	r3, r2
    7794:	9a01      	ldr	r2, [sp, #4]
    7796:	7852      	ldrb	r2, [r2, #1]
    7798:	40d3      	lsrs	r3, r2
    779a:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    779c:	9b05      	ldr	r3, [sp, #20]
}
    779e:	4618      	mov	r0, r3
    77a0:	b007      	add	sp, #28
    77a2:	f85d fb04 	ldr.w	pc, [sp], #4
    77a6:	bf00      	nop
    77a8:	1fff8b24 	.word	0x1fff8b24

000077ac <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    77ac:	b500      	push	{lr}
    77ae:	b087      	sub	sp, #28
    77b0:	9001      	str	r0, [sp, #4]
    77b2:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    77b4:	9b01      	ldr	r3, [sp, #4]
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	461a      	mov	r2, r3
    77ba:	4b10      	ldr	r3, [pc, #64]	; (77fc <Dio_Ipw_WriteChannelGroup+0x50>)
    77bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77c0:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    77c2:	9b01      	ldr	r3, [sp, #4]
    77c4:	785b      	ldrb	r3, [r3, #1]
    77c6:	461a      	mov	r2, r3
    77c8:	9b00      	ldr	r3, [sp, #0]
    77ca:	fa03 f202 	lsl.w	r2, r3, r2
    77ce:	9b01      	ldr	r3, [sp, #4]
    77d0:	685b      	ldr	r3, [r3, #4]
    77d2:	4013      	ands	r3, r2
    77d4:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    77d6:	9904      	ldr	r1, [sp, #16]
    77d8:	9805      	ldr	r0, [sp, #20]
    77da:	f000 f84a 	bl	7872 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    77de:	9b04      	ldr	r3, [sp, #16]
    77e0:	43da      	mvns	r2, r3
    77e2:	9b01      	ldr	r3, [sp, #4]
    77e4:	685b      	ldr	r3, [r3, #4]
    77e6:	4013      	ands	r3, r2
    77e8:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    77ea:	9903      	ldr	r1, [sp, #12]
    77ec:	9805      	ldr	r0, [sp, #20]
    77ee:	f000 f849 	bl	7884 <Gpio_Dio_Ip_ClearPins>

}
    77f2:	bf00      	nop
    77f4:	b007      	add	sp, #28
    77f6:	f85d fb04 	ldr.w	pc, [sp], #4
    77fa:	bf00      	nop
    77fc:	1fff8b24 	.word	0x1fff8b24

00007800 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    7800:	b500      	push	{lr}
    7802:	b087      	sub	sp, #28
    7804:	9003      	str	r0, [sp, #12]
    7806:	9102      	str	r1, [sp, #8]
    7808:	4613      	mov	r3, r2
    780a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    780e:	f00b fbb1 	bl	12f74 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    7812:	9b03      	ldr	r3, [sp, #12]
    7814:	681b      	ldr	r3, [r3, #0]
    7816:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    7818:	2201      	movs	r2, #1
    781a:	9b02      	ldr	r3, [sp, #8]
    781c:	fa02 f303 	lsl.w	r3, r2, r3
    7820:	43db      	mvns	r3, r3
    7822:	9a05      	ldr	r2, [sp, #20]
    7824:	4013      	ands	r3, r2
    7826:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    7828:	f89d 2007 	ldrb.w	r2, [sp, #7]
    782c:	9b02      	ldr	r3, [sp, #8]
    782e:	fa02 f303 	lsl.w	r3, r2, r3
    7832:	9a05      	ldr	r2, [sp, #20]
    7834:	4313      	orrs	r3, r2
    7836:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    7838:	9b03      	ldr	r3, [sp, #12]
    783a:	9a05      	ldr	r2, [sp, #20]
    783c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    783e:	f00b fbc5 	bl	12fcc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7842:	bf00      	nop
    7844:	b007      	add	sp, #28
    7846:	f85d fb04 	ldr.w	pc, [sp], #4

0000784a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    784a:	b082      	sub	sp, #8
    784c:	9001      	str	r0, [sp, #4]
    784e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7850:	9b01      	ldr	r3, [sp, #4]
    7852:	9a00      	ldr	r2, [sp, #0]
    7854:	601a      	str	r2, [r3, #0]
}
    7856:	bf00      	nop
    7858:	b002      	add	sp, #8
    785a:	4770      	bx	lr

0000785c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    785c:	b084      	sub	sp, #16
    785e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7860:	2300      	movs	r3, #0
    7862:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7864:	9b01      	ldr	r3, [sp, #4]
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	9303      	str	r3, [sp, #12]
    return returnValue;
    786a:	9b03      	ldr	r3, [sp, #12]
}
    786c:	4618      	mov	r0, r3
    786e:	b004      	add	sp, #16
    7870:	4770      	bx	lr

00007872 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7872:	b082      	sub	sp, #8
    7874:	9001      	str	r0, [sp, #4]
    7876:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    7878:	9b01      	ldr	r3, [sp, #4]
    787a:	9a00      	ldr	r2, [sp, #0]
    787c:	605a      	str	r2, [r3, #4]
}
    787e:	bf00      	nop
    7880:	b002      	add	sp, #8
    7882:	4770      	bx	lr

00007884 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7884:	b082      	sub	sp, #8
    7886:	9001      	str	r0, [sp, #4]
    7888:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    788a:	9b01      	ldr	r3, [sp, #4]
    788c:	9a00      	ldr	r2, [sp, #0]
    788e:	609a      	str	r2, [r3, #8]
}
    7890:	bf00      	nop
    7892:	b002      	add	sp, #8
    7894:	4770      	bx	lr

00007896 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7896:	b082      	sub	sp, #8
    7898:	9001      	str	r0, [sp, #4]
    789a:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    789c:	9b01      	ldr	r3, [sp, #4]
    789e:	9a00      	ldr	r2, [sp, #0]
    78a0:	60da      	str	r2, [r3, #12]
}
    78a2:	bf00      	nop
    78a4:	b002      	add	sp, #8
    78a6:	4770      	bx	lr

000078a8 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    78a8:	b084      	sub	sp, #16
    78aa:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    78ac:	2300      	movs	r3, #0
    78ae:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    78b0:	9b01      	ldr	r3, [sp, #4]
    78b2:	691b      	ldr	r3, [r3, #16]
    78b4:	9303      	str	r3, [sp, #12]
    return returnValue;
    78b6:	9b03      	ldr	r3, [sp, #12]
}
    78b8:	4618      	mov	r0, r3
    78ba:	b004      	add	sp, #16
    78bc:	4770      	bx	lr

000078be <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    78be:	b084      	sub	sp, #16
    78c0:	9001      	str	r0, [sp, #4]
    78c2:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    78c4:	2300      	movs	r3, #0
    78c6:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    78ca:	9b01      	ldr	r3, [sp, #4]
    78cc:	691a      	ldr	r2, [r3, #16]
    78ce:	2101      	movs	r1, #1
    78d0:	9b00      	ldr	r3, [sp, #0]
    78d2:	fa01 f303 	lsl.w	r3, r1, r3
    78d6:	401a      	ands	r2, r3
    78d8:	9b00      	ldr	r3, [sp, #0]
    78da:	fa22 f303 	lsr.w	r3, r2, r3
    78de:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    78e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    78e6:	4618      	mov	r0, r3
    78e8:	b004      	add	sp, #16
    78ea:	4770      	bx	lr

000078ec <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    78ec:	b500      	push	{lr}
    78ee:	b083      	sub	sp, #12
    78f0:	4603      	mov	r3, r0
    78f2:	460a      	mov	r2, r1
    78f4:	f88d 3007 	strb.w	r3, [sp, #7]
    78f8:	4613      	mov	r3, r2
    78fa:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    78fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7902:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7906:	2100      	movs	r1, #0
    7908:	207b      	movs	r0, #123	; 0x7b
    790a:	f00e f937 	bl	15b7c <Det_ReportRuntimeError>
}
    790e:	bf00      	nop
    7910:	b003      	add	sp, #12
    7912:	f85d fb04 	ldr.w	pc, [sp], #4

00007916 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    7916:	b500      	push	{lr}
    7918:	b085      	sub	sp, #20
    791a:	4603      	mov	r3, r0
    791c:	460a      	mov	r2, r1
    791e:	f88d 3007 	strb.w	r3, [sp, #7]
    7922:	4613      	mov	r3, r2
    7924:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7928:	2300      	movs	r3, #0
    792a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    792e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7932:	4a0c      	ldr	r2, [pc, #48]	; (7964 <Adc_ValidateNotBusyNoQueue+0x4e>)
    7934:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7938:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    793c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7940:	2b00      	cmp	r3, #0
    7942:	d008      	beq.n	7956 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7944:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7948:	210b      	movs	r1, #11
    794a:	4618      	mov	r0, r3
    794c:	f7ff ffce 	bl	78ec <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    7950:	2301      	movs	r3, #1
    7952:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    7956:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    795a:	4618      	mov	r0, r3
    795c:	b005      	add	sp, #20
    795e:	f85d fb04 	ldr.w	pc, [sp], #4
    7962:	bf00      	nop
    7964:	1fff8d44 	.word	0x1fff8d44

00007968 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    7968:	b500      	push	{lr}
    796a:	b085      	sub	sp, #20
    796c:	4603      	mov	r3, r0
    796e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7972:	460b      	mov	r3, r1
    7974:	f88d 3005 	strb.w	r3, [sp, #5]
    7978:	4613      	mov	r3, r2
    797a:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    797e:	2301      	movs	r3, #1
    7980:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7984:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7988:	4917      	ldr	r1, [pc, #92]	; (79e8 <Adc_ValidateNotBusyNoPrio+0x80>)
    798a:	4613      	mov	r3, r2
    798c:	009b      	lsls	r3, r3, #2
    798e:	4413      	add	r3, r2
    7990:	009b      	lsls	r3, r3, #2
    7992:	440b      	add	r3, r1
    7994:	681b      	ldr	r3, [r3, #0]
    7996:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    7998:	f89d 3005 	ldrb.w	r3, [sp, #5]
    799c:	f083 0301 	eor.w	r3, r3, #1
    79a0:	b2db      	uxtb	r3, r3
    79a2:	2b00      	cmp	r3, #0
    79a4:	d007      	beq.n	79b6 <Adc_ValidateNotBusyNoPrio+0x4e>
    79a6:	9b02      	ldr	r3, [sp, #8]
    79a8:	2b00      	cmp	r3, #0
    79aa:	d004      	beq.n	79b6 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    79ac:	210b      	movs	r1, #11
    79ae:	2002      	movs	r0, #2
    79b0:	f7ff ff9c 	bl	78ec <Adc_ReportDetRuntimeError>
    79b4:	e011      	b.n	79da <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    79b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79ba:	2b00      	cmp	r3, #0
    79bc:	d00a      	beq.n	79d4 <Adc_ValidateNotBusyNoPrio+0x6c>
    79be:	9b02      	ldr	r3, [sp, #8]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d007      	beq.n	79d4 <Adc_ValidateNotBusyNoPrio+0x6c>
    79c4:	9b02      	ldr	r3, [sp, #8]
    79c6:	2b03      	cmp	r3, #3
    79c8:	d004      	beq.n	79d4 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    79ca:	210b      	movs	r1, #11
    79cc:	2002      	movs	r0, #2
    79ce:	f7ff ff8d 	bl	78ec <Adc_ReportDetRuntimeError>
    79d2:	e002      	b.n	79da <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    79d4:	2300      	movs	r3, #0
    79d6:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    79da:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    79de:	4618      	mov	r0, r3
    79e0:	b005      	add	sp, #20
    79e2:	f85d fb04 	ldr.w	pc, [sp], #4
    79e6:	bf00      	nop
    79e8:	1fff8d1c 	.word	0x1fff8d1c

000079ec <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    79ec:	b500      	push	{lr}
    79ee:	b087      	sub	sp, #28
    79f0:	4603      	mov	r3, r0
    79f2:	460a      	mov	r2, r1
    79f4:	f88d 3007 	strb.w	r3, [sp, #7]
    79f8:	4613      	mov	r3, r2
    79fa:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    79fe:	2300      	movs	r3, #0
    7a00:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7a04:	2300      	movs	r3, #0
    7a06:	f8ad 3016 	strh.w	r3, [sp, #22]
    7a0a:	e02c      	b.n	7a66 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    7a0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a10:	4a1d      	ldr	r2, [pc, #116]	; (7a88 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a16:	685a      	ldr	r2, [r3, #4]
    7a18:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a1c:	2134      	movs	r1, #52	; 0x34
    7a1e:	fb01 f303 	mul.w	r3, r1, r3
    7a22:	4413      	add	r3, r2
    7a24:	881b      	ldrh	r3, [r3, #0]
    7a26:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    7a2a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7a2e:	4917      	ldr	r1, [pc, #92]	; (7a8c <Adc_ValidateCheckGroupNotConversion+0xa0>)
    7a30:	4613      	mov	r3, r2
    7a32:	009b      	lsls	r3, r3, #2
    7a34:	4413      	add	r3, r2
    7a36:	009b      	lsls	r3, r3, #2
    7a38:	440b      	add	r3, r1
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    7a3e:	9b03      	ldr	r3, [sp, #12]
    7a40:	2b00      	cmp	r3, #0
    7a42:	d00b      	beq.n	7a5c <Adc_ValidateCheckGroupNotConversion+0x70>
    7a44:	9b03      	ldr	r3, [sp, #12]
    7a46:	2b03      	cmp	r3, #3
    7a48:	d008      	beq.n	7a5c <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a4e:	210b      	movs	r1, #11
    7a50:	4618      	mov	r0, r3
    7a52:	f7ff ff4b 	bl	78ec <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    7a56:	2301      	movs	r3, #1
    7a58:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7a5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a60:	3301      	adds	r3, #1
    7a62:	f8ad 3016 	strh.w	r3, [sp, #22]
    7a66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a6a:	4a07      	ldr	r2, [pc, #28]	; (7a88 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a70:	891b      	ldrh	r3, [r3, #8]
    7a72:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7a76:	429a      	cmp	r2, r3
    7a78:	d3c8      	bcc.n	7a0c <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    7a7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    7a7e:	4618      	mov	r0, r3
    7a80:	b007      	add	sp, #28
    7a82:	f85d fb04 	ldr.w	pc, [sp], #4
    7a86:	bf00      	nop
    7a88:	1fff8d18 	.word	0x1fff8d18
    7a8c:	1fff8d1c 	.word	0x1fff8d1c

00007a90 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    7a90:	b500      	push	{lr}
    7a92:	b085      	sub	sp, #20
    7a94:	4603      	mov	r3, r0
    7a96:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7a9a:	2300      	movs	r3, #0
    7a9c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7aa0:	2301      	movs	r3, #1
    7aa2:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7aa6:	2300      	movs	r3, #0
    7aa8:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7aac:	2300      	movs	r3, #0
    7aae:	f88d 300d 	strb.w	r3, [sp, #13]
    7ab2:	e01d      	b.n	7af0 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7ab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ab8:	4a1b      	ldr	r2, [pc, #108]	; (7b28 <Adc_ValidateDeInitNotBusy+0x98>)
    7aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7abe:	681a      	ldr	r2, [r3, #0]
    7ac0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ac4:	4413      	add	r3, r2
    7ac6:	7f9b      	ldrb	r3, [r3, #30]
    7ac8:	2b01      	cmp	r3, #1
    7aca:	d10c      	bne.n	7ae6 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    7acc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ad0:	2101      	movs	r1, #1
    7ad2:	4618      	mov	r0, r3
    7ad4:	f7ff ff1f 	bl	7916 <Adc_ValidateNotBusyNoQueue>
    7ad8:	4603      	mov	r3, r0
    7ada:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    7ade:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ae2:	2b01      	cmp	r3, #1
    7ae4:	d009      	beq.n	7afa <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7ae6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7aea:	3301      	adds	r3, #1
    7aec:	f88d 300d 	strb.w	r3, [sp, #13]
    7af0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7af4:	2b01      	cmp	r3, #1
    7af6:	d9dd      	bls.n	7ab4 <Adc_ValidateDeInitNotBusy+0x24>
    7af8:	e000      	b.n	7afc <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    7afa:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    7afc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d10b      	bne.n	7b1c <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    7b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b08:	4619      	mov	r1, r3
    7b0a:	2001      	movs	r0, #1
    7b0c:	f7ff ff6e 	bl	79ec <Adc_ValidateCheckGroupNotConversion>
    7b10:	4603      	mov	r3, r0
    7b12:	2b00      	cmp	r3, #0
    7b14:	d102      	bne.n	7b1c <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    7b16:	2300      	movs	r3, #0
    7b18:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    7b1c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7b20:	4618      	mov	r0, r3
    7b22:	b005      	add	sp, #20
    7b24:	f85d fb04 	ldr.w	pc, [sp], #4
    7b28:	1fff8d18 	.word	0x1fff8d18

00007b2c <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    7b2c:	b500      	push	{lr}
    7b2e:	b085      	sub	sp, #20
    7b30:	4603      	mov	r3, r0
    7b32:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7b36:	2301      	movs	r3, #1
    7b38:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    7b3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b40:	490b      	ldr	r1, [pc, #44]	; (7b70 <Adc_ValidateSetupBufferNotBusy+0x44>)
    7b42:	4613      	mov	r3, r2
    7b44:	009b      	lsls	r3, r3, #2
    7b46:	4413      	add	r3, r2
    7b48:	009b      	lsls	r3, r3, #2
    7b4a:	440b      	add	r3, r1
    7b4c:	681b      	ldr	r3, [r3, #0]
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d004      	beq.n	7b5c <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    7b52:	210b      	movs	r1, #11
    7b54:	200c      	movs	r0, #12
    7b56:	f7ff fec9 	bl	78ec <Adc_ReportDetRuntimeError>
    7b5a:	e002      	b.n	7b62 <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7b5c:	2300      	movs	r3, #0
    7b5e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    7b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7b66:	4618      	mov	r0, r3
    7b68:	b005      	add	sp, #20
    7b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b6e:	bf00      	nop
    7b70:	1fff8d1c 	.word	0x1fff8d1c

00007b74 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    7b74:	b500      	push	{lr}
    7b76:	b085      	sub	sp, #20
    7b78:	4603      	mov	r3, r0
    7b7a:	460a      	mov	r2, r1
    7b7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7b80:	4613      	mov	r3, r2
    7b82:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7b86:	2300      	movs	r3, #0
    7b88:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    7b8c:	2300      	movs	r3, #0
    7b8e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b92:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b96:	4a32      	ldr	r2, [pc, #200]	; (7c60 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9c:	68da      	ldr	r2, [r3, #12]
    7b9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ba2:	005b      	lsls	r3, r3, #1
    7ba4:	4413      	add	r3, r2
    7ba6:	881b      	ldrh	r3, [r3, #0]
    7ba8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7bac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bb0:	4a2b      	ldr	r2, [pc, #172]	; (7c60 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb6:	685a      	ldr	r2, [r3, #4]
    7bb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bbc:	2134      	movs	r1, #52	; 0x34
    7bbe:	fb01 f303 	mul.w	r3, r1, r3
    7bc2:	4413      	add	r3, r2
    7bc4:	689b      	ldr	r3, [r3, #8]
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	d02c      	beq.n	7c24 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7bca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bce:	4a24      	ldr	r2, [pc, #144]	; (7c60 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd4:	685a      	ldr	r2, [r3, #4]
    7bd6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bda:	2134      	movs	r1, #52	; 0x34
    7bdc:	fb01 f303 	mul.w	r3, r1, r3
    7be0:	4413      	add	r3, r2
    7be2:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7be4:	2b01      	cmp	r3, #1
    7be6:	d120      	bne.n	7c2a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7be8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bec:	4a1c      	ldr	r2, [pc, #112]	; (7c60 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bf2:	685a      	ldr	r2, [r3, #4]
    7bf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bf8:	2134      	movs	r1, #52	; 0x34
    7bfa:	fb01 f303 	mul.w	r3, r1, r3
    7bfe:	4413      	add	r3, r2
    7c00:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7c02:	2b01      	cmp	r3, #1
    7c04:	d111      	bne.n	7c2a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    7c06:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7c0a:	4a15      	ldr	r2, [pc, #84]	; (7c60 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c10:	685a      	ldr	r2, [r3, #4]
    7c12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c16:	2134      	movs	r1, #52	; 0x34
    7c18:	fb01 f303 	mul.w	r3, r1, r3
    7c1c:	4413      	add	r3, r2
    7c1e:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7c20:	2b00      	cmp	r3, #0
    7c22:	d102      	bne.n	7c2a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    7c24:	2301      	movs	r3, #1
    7c26:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    7c2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c2e:	2b01      	cmp	r3, #1
    7c30:	d104      	bne.n	7c3c <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7c32:	210b      	movs	r1, #11
    7c34:	2002      	movs	r0, #2
    7c36:	f7ff fe59 	bl	78ec <Adc_ReportDetRuntimeError>
    7c3a:	e00b      	b.n	7c54 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    7c3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7c40:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7c44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c48:	4618      	mov	r0, r3
    7c4a:	f7ff fe8d 	bl	7968 <Adc_ValidateNotBusyNoPrio>
    7c4e:	4603      	mov	r3, r0
    7c50:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    7c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7c58:	4618      	mov	r0, r3
    7c5a:	b005      	add	sp, #20
    7c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c60:	1fff8d18 	.word	0x1fff8d18

00007c64 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    7c64:	b500      	push	{lr}
    7c66:	b085      	sub	sp, #20
    7c68:	4603      	mov	r3, r0
    7c6a:	f88d 3007 	strb.w	r3, [sp, #7]
    7c6e:	460b      	mov	r3, r1
    7c70:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c74:	4613      	mov	r3, r2
    7c76:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7c7a:	2300      	movs	r3, #0
    7c7c:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    7c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c84:	2b0b      	cmp	r3, #11
    7c86:	d03b      	beq.n	7d00 <Adc_ValidateStateNotIdle+0x9c>
    7c88:	2b0b      	cmp	r3, #11
    7c8a:	dc4e      	bgt.n	7d2a <Adc_ValidateStateNotIdle+0xc6>
    7c8c:	2b03      	cmp	r3, #3
    7c8e:	d022      	beq.n	7cd6 <Adc_ValidateStateNotIdle+0x72>
    7c90:	2b04      	cmp	r3, #4
    7c92:	d14a      	bne.n	7d2a <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7c94:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c98:	492a      	ldr	r1, [pc, #168]	; (7d44 <Adc_ValidateStateNotIdle+0xe0>)
    7c9a:	4613      	mov	r3, r2
    7c9c:	009b      	lsls	r3, r3, #2
    7c9e:	4413      	add	r3, r2
    7ca0:	009b      	lsls	r3, r3, #2
    7ca2:	440b      	add	r3, r1
    7ca4:	681b      	ldr	r3, [r3, #0]
    7ca6:	2b00      	cmp	r3, #0
    7ca8:	d141      	bne.n	7d2e <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    7caa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cae:	4925      	ldr	r1, [pc, #148]	; (7d44 <Adc_ValidateStateNotIdle+0xe0>)
    7cb0:	4613      	mov	r3, r2
    7cb2:	009b      	lsls	r3, r3, #2
    7cb4:	4413      	add	r3, r2
    7cb6:	009b      	lsls	r3, r3, #2
    7cb8:	440b      	add	r3, r1
    7cba:	3304      	adds	r3, #4
    7cbc:	681b      	ldr	r3, [r3, #0]
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d135      	bne.n	7d2e <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cc6:	210c      	movs	r1, #12
    7cc8:	4618      	mov	r0, r3
    7cca:	f7ff fe0f 	bl	78ec <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    7cce:	2301      	movs	r3, #1
    7cd0:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    7cd4:	e02b      	b.n	7d2e <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7cd6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cda:	491a      	ldr	r1, [pc, #104]	; (7d44 <Adc_ValidateStateNotIdle+0xe0>)
    7cdc:	4613      	mov	r3, r2
    7cde:	009b      	lsls	r3, r3, #2
    7ce0:	4413      	add	r3, r2
    7ce2:	009b      	lsls	r3, r3, #2
    7ce4:	440b      	add	r3, r1
    7ce6:	681b      	ldr	r3, [r3, #0]
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d122      	bne.n	7d32 <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cf0:	210c      	movs	r1, #12
    7cf2:	4618      	mov	r0, r3
    7cf4:	f7ff fdfa 	bl	78ec <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    7cf8:	2301      	movs	r3, #1
    7cfa:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    7cfe:	e018      	b.n	7d32 <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7d00:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7d04:	490f      	ldr	r1, [pc, #60]	; (7d44 <Adc_ValidateStateNotIdle+0xe0>)
    7d06:	4613      	mov	r3, r2
    7d08:	009b      	lsls	r3, r3, #2
    7d0a:	4413      	add	r3, r2
    7d0c:	009b      	lsls	r3, r3, #2
    7d0e:	440b      	add	r3, r1
    7d10:	681b      	ldr	r3, [r3, #0]
    7d12:	2b00      	cmp	r3, #0
    7d14:	d10f      	bne.n	7d36 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d1a:	210c      	movs	r1, #12
    7d1c:	4618      	mov	r0, r3
    7d1e:	f7ff fde5 	bl	78ec <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    7d22:	2301      	movs	r3, #1
    7d24:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    7d28:	e005      	b.n	7d36 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    7d2a:	bf00      	nop
    7d2c:	e004      	b.n	7d38 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7d2e:	bf00      	nop
    7d30:	e002      	b.n	7d38 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7d32:	bf00      	nop
    7d34:	e000      	b.n	7d38 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7d36:	bf00      	nop
        }
    }

    return ValidState;
    7d38:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7d3c:	4618      	mov	r0, r3
    7d3e:	b005      	add	sp, #20
    7d40:	f85d fb04 	ldr.w	pc, [sp], #4
    7d44:	1fff8d1c 	.word	0x1fff8d1c

00007d48 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7d48:	b084      	sub	sp, #16
    7d4a:	4603      	mov	r3, r0
    7d4c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    7d50:	2300      	movs	r3, #0
    7d52:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    7d56:	2300      	movs	r3, #0
    7d58:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7d5c:	2300      	movs	r3, #0
    7d5e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7d62:	e049      	b.n	7df8 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    7d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d68:	4a2a      	ldr	r2, [pc, #168]	; (7e14 <Adc_InitGroupsStatus+0xcc>)
    7d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d6e:	685a      	ldr	r2, [r3, #4]
    7d70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d74:	2134      	movs	r1, #52	; 0x34
    7d76:	fb01 f303 	mul.w	r3, r1, r3
    7d7a:	4413      	add	r3, r2
    7d7c:	881b      	ldrh	r3, [r3, #0]
    7d7e:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    7d82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d86:	4924      	ldr	r1, [pc, #144]	; (7e18 <Adc_InitGroupsStatus+0xd0>)
    7d88:	4613      	mov	r3, r2
    7d8a:	009b      	lsls	r3, r3, #2
    7d8c:	4413      	add	r3, r2
    7d8e:	009b      	lsls	r3, r3, #2
    7d90:	440b      	add	r3, r1
    7d92:	2200      	movs	r2, #0
    7d94:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7d96:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d9a:	491f      	ldr	r1, [pc, #124]	; (7e18 <Adc_InitGroupsStatus+0xd0>)
    7d9c:	4613      	mov	r3, r2
    7d9e:	009b      	lsls	r3, r3, #2
    7da0:	4413      	add	r3, r2
    7da2:	009b      	lsls	r3, r3, #2
    7da4:	440b      	add	r3, r1
    7da6:	3304      	adds	r3, #4
    7da8:	2200      	movs	r2, #0
    7daa:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7dac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7db0:	4919      	ldr	r1, [pc, #100]	; (7e18 <Adc_InitGroupsStatus+0xd0>)
    7db2:	4613      	mov	r3, r2
    7db4:	009b      	lsls	r3, r3, #2
    7db6:	4413      	add	r3, r2
    7db8:	009b      	lsls	r3, r3, #2
    7dba:	440b      	add	r3, r1
    7dbc:	3308      	adds	r3, #8
    7dbe:	2200      	movs	r2, #0
    7dc0:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    7dc2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7dc6:	4914      	ldr	r1, [pc, #80]	; (7e18 <Adc_InitGroupsStatus+0xd0>)
    7dc8:	4613      	mov	r3, r2
    7dca:	009b      	lsls	r3, r3, #2
    7dcc:	4413      	add	r3, r2
    7dce:	009b      	lsls	r3, r3, #2
    7dd0:	440b      	add	r3, r1
    7dd2:	330c      	adds	r3, #12
    7dd4:	2200      	movs	r2, #0
    7dd6:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7dd8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7ddc:	490e      	ldr	r1, [pc, #56]	; (7e18 <Adc_InitGroupsStatus+0xd0>)
    7dde:	4613      	mov	r3, r2
    7de0:	009b      	lsls	r3, r3, #2
    7de2:	4413      	add	r3, r2
    7de4:	009b      	lsls	r3, r3, #2
    7de6:	440b      	add	r3, r1
    7de8:	3310      	adds	r3, #16
    7dea:	2200      	movs	r2, #0
    7dec:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7dee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7df2:	3301      	adds	r3, #1
    7df4:	f8ad 300e 	strh.w	r3, [sp, #14]
    7df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dfc:	4a05      	ldr	r2, [pc, #20]	; (7e14 <Adc_InitGroupsStatus+0xcc>)
    7dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e02:	891b      	ldrh	r3, [r3, #8]
    7e04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7e08:	429a      	cmp	r2, r3
    7e0a:	d3ab      	bcc.n	7d64 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7e0c:	bf00      	nop
    7e0e:	bf00      	nop
    7e10:	b004      	add	sp, #16
    7e12:	4770      	bx	lr
    7e14:	1fff8d18 	.word	0x1fff8d18
    7e18:	1fff8d1c 	.word	0x1fff8d1c

00007e1c <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7e1c:	b084      	sub	sp, #16
    7e1e:	4603      	mov	r3, r0
    7e20:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7e24:	2300      	movs	r3, #0
    7e26:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7e2a:	2300      	movs	r3, #0
    7e2c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7e30:	2300      	movs	r3, #0
    7e32:	f88d 300f 	strb.w	r3, [sp, #15]
    7e36:	e035      	b.n	7ea4 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e3c:	4a1d      	ldr	r2, [pc, #116]	; (7eb4 <Adc_InitUnitStatus+0x98>)
    7e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e42:	681a      	ldr	r2, [r3, #0]
    7e44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e48:	4413      	add	r3, r2
    7e4a:	7f9b      	ldrb	r3, [r3, #30]
    7e4c:	2b01      	cmp	r3, #1
    7e4e:	d124      	bne.n	7e9a <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    7e50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e54:	4a18      	ldr	r2, [pc, #96]	; (7eb8 <Adc_InitUnitStatus+0x9c>)
    7e56:	2100      	movs	r1, #0
    7e58:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e5c:	2300      	movs	r3, #0
    7e5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e62:	e00f      	b.n	7e84 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    7e64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7e68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e6c:	4912      	ldr	r1, [pc, #72]	; (7eb8 <Adc_InitUnitStatus+0x9c>)
    7e6e:	0092      	lsls	r2, r2, #2
    7e70:	4413      	add	r3, r2
    7e72:	005b      	lsls	r3, r3, #1
    7e74:	440b      	add	r3, r1
    7e76:	2200      	movs	r2, #0
    7e78:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e7e:	3301      	adds	r3, #1
    7e80:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e88:	2b01      	cmp	r3, #1
    7e8a:	d9eb      	bls.n	7e64 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7e8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e90:	4a09      	ldr	r2, [pc, #36]	; (7eb8 <Adc_InitUnitStatus+0x9c>)
    7e92:	00db      	lsls	r3, r3, #3
    7e94:	4413      	add	r3, r2
    7e96:	2200      	movs	r2, #0
    7e98:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7e9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e9e:	3301      	adds	r3, #1
    7ea0:	f88d 300f 	strb.w	r3, [sp, #15]
    7ea4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ea8:	2b01      	cmp	r3, #1
    7eaa:	d9c5      	bls.n	7e38 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7eac:	bf00      	nop
    7eae:	bf00      	nop
    7eb0:	b004      	add	sp, #16
    7eb2:	4770      	bx	lr
    7eb4:	1fff8d18 	.word	0x1fff8d18
    7eb8:	1fff8d44 	.word	0x1fff8d44

00007ebc <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7ebc:	b084      	sub	sp, #16
    7ebe:	9001      	str	r0, [sp, #4]
    7ec0:	460b      	mov	r3, r1
    7ec2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7ec6:	2300      	movs	r3, #0
    7ec8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7ecc:	2301      	movs	r3, #1
    7ece:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    7ed2:	9b01      	ldr	r3, [sp, #4]
    7ed4:	7c1b      	ldrb	r3, [r3, #16]
    7ed6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7eda:	429a      	cmp	r2, r3
    7edc:	d11c      	bne.n	7f18 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7ede:	2300      	movs	r3, #0
    7ee0:	f88d 300f 	strb.w	r3, [sp, #15]
    7ee4:	e012      	b.n	7f0c <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7ee6:	9b01      	ldr	r3, [sp, #4]
    7ee8:	695a      	ldr	r2, [r3, #20]
    7eea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eee:	4413      	add	r3, r2
    7ef0:	781b      	ldrb	r3, [r3, #0]
    7ef2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7ef6:	429a      	cmp	r2, r3
    7ef8:	d103      	bne.n	7f02 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7efa:	2300      	movs	r3, #0
    7efc:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    7f00:	e00a      	b.n	7f18 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7f02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f06:	3301      	adds	r3, #1
    7f08:	f88d 300f 	strb.w	r3, [sp, #15]
    7f0c:	9b01      	ldr	r3, [sp, #4]
    7f0e:	7e1b      	ldrb	r3, [r3, #24]
    7f10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7f14:	429a      	cmp	r2, r3
    7f16:	d3e6      	bcc.n	7ee6 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7f18:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7f1c:	4618      	mov	r0, r3
    7f1e:	b004      	add	sp, #16
    7f20:	4770      	bx	lr

00007f22 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    7f22:	b500      	push	{lr}
    7f24:	b085      	sub	sp, #20
    7f26:	4603      	mov	r3, r0
    7f28:	f8ad 3006 	strh.w	r3, [sp, #6]
    7f2c:	460b      	mov	r3, r1
    7f2e:	f88d 3005 	strb.w	r3, [sp, #5]
    7f32:	4613      	mov	r3, r2
    7f34:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7f38:	2300      	movs	r3, #0
    7f3a:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7f3e:	2300      	movs	r3, #0
    7f40:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7f44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f48:	493e      	ldr	r1, [pc, #248]	; (8044 <Adc_UpdateStatusStartConversion+0x122>)
    7f4a:	4613      	mov	r3, r2
    7f4c:	009b      	lsls	r3, r3, #2
    7f4e:	4413      	add	r3, r2
    7f50:	009b      	lsls	r3, r3, #2
    7f52:	440b      	add	r3, r1
    7f54:	2201      	movs	r2, #1
    7f56:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    7f58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f5c:	4939      	ldr	r1, [pc, #228]	; (8044 <Adc_UpdateStatusStartConversion+0x122>)
    7f5e:	4613      	mov	r3, r2
    7f60:	009b      	lsls	r3, r3, #2
    7f62:	4413      	add	r3, r2
    7f64:	009b      	lsls	r3, r3, #2
    7f66:	440b      	add	r3, r1
    7f68:	3308      	adds	r3, #8
    7f6a:	2200      	movs	r2, #0
    7f6c:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7f6e:	f007 f8ef 	bl	f150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7f72:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f76:	4a34      	ldr	r2, [pc, #208]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7f78:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7f7c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    7f80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f84:	2b00      	cmp	r3, #0
    7f86:	d016      	beq.n	7fb6 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    7f88:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7f8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f90:	492d      	ldr	r1, [pc, #180]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7f92:	0092      	lsls	r2, r2, #2
    7f94:	4413      	add	r3, r2
    7f96:	005b      	lsls	r3, r3, #1
    7f98:	440b      	add	r3, r1
    7f9a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f9e:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7fa0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fa4:	4a28      	ldr	r2, [pc, #160]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7fa6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7faa:	b292      	uxth	r2, r2
    7fac:	3201      	adds	r2, #1
    7fae:	b291      	uxth	r1, r2
    7fb0:	4a25      	ldr	r2, [pc, #148]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7fb2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7fb6:	f007 f8f7 	bl	f1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7fba:	f007 f8c9 	bl	f150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7fbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fc2:	4a21      	ldr	r2, [pc, #132]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7fc4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7fc8:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7fcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fd0:	4a1d      	ldr	r2, [pc, #116]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7fd2:	00db      	lsls	r3, r3, #3
    7fd4:	4413      	add	r3, r2
    7fd6:	885b      	ldrh	r3, [r3, #2]
    7fd8:	b29b      	uxth	r3, r3
    7fda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fde:	429a      	cmp	r2, r3
    7fe0:	d003      	beq.n	7fea <Adc_UpdateStatusStartConversion+0xc8>
    7fe2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	d125      	bne.n	8036 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7fea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fee:	4a16      	ldr	r2, [pc, #88]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    7ff0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7ff4:	b29b      	uxth	r3, r3
    7ff6:	2b00      	cmp	r3, #0
    7ff8:	d112      	bne.n	8020 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7ffa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ffe:	4a12      	ldr	r2, [pc, #72]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    8000:	00db      	lsls	r3, r3, #3
    8002:	4413      	add	r3, r2
    8004:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8008:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    800a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    800e:	4a0e      	ldr	r2, [pc, #56]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    8010:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8014:	b292      	uxth	r2, r2
    8016:	3201      	adds	r2, #1
    8018:	b291      	uxth	r1, r2
    801a:	4a0b      	ldr	r2, [pc, #44]	; (8048 <Adc_UpdateStatusStartConversion+0x126>)
    801c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    8020:	f007 f8c2 	bl	f1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    8024:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8028:	f89d 3005 	ldrb.w	r3, [sp, #5]
    802c:	4611      	mov	r1, r2
    802e:	4618      	mov	r0, r3
    8030:	f002 fbf2 	bl	a818 <Adc_Ipw_StartNormalConversion>
    8034:	e002      	b.n	803c <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    8036:	f007 f8b7 	bl	f1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    803a:	bf00      	nop
    803c:	bf00      	nop
    803e:	b005      	add	sp, #20
    8040:	f85d fb04 	ldr.w	pc, [sp], #4
    8044:	1fff8d1c 	.word	0x1fff8d1c
    8048:	1fff8d44 	.word	0x1fff8d44

0000804c <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    804c:	b500      	push	{lr}
    804e:	b085      	sub	sp, #20
    8050:	9001      	str	r0, [sp, #4]
    8052:	4608      	mov	r0, r1
    8054:	4611      	mov	r1, r2
    8056:	461a      	mov	r2, r3
    8058:	4603      	mov	r3, r0
    805a:	f8ad 3002 	strh.w	r3, [sp, #2]
    805e:	460b      	mov	r3, r1
    8060:	f88d 3001 	strb.w	r3, [sp, #1]
    8064:	4613      	mov	r3, r2
    8066:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    806a:	2300      	movs	r3, #0
    806c:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    8070:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8074:	4a26      	ldr	r2, [pc, #152]	; (8110 <Adc_StopSwGroupConversion+0xc4>)
    8076:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    807a:	b29a      	uxth	r2, r3
    807c:	9b01      	ldr	r3, [sp, #4]
    807e:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8080:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8084:	4a22      	ldr	r2, [pc, #136]	; (8110 <Adc_StopSwGroupConversion+0xc4>)
    8086:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    808a:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    808e:	2300      	movs	r3, #0
    8090:	f8ad 300c 	strh.w	r3, [sp, #12]
    8094:	e02f      	b.n	80f6 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    8096:	f89d 2001 	ldrb.w	r2, [sp, #1]
    809a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    809e:	491c      	ldr	r1, [pc, #112]	; (8110 <Adc_StopSwGroupConversion+0xc4>)
    80a0:	0092      	lsls	r2, r2, #2
    80a2:	4413      	add	r3, r2
    80a4:	005b      	lsls	r3, r3, #1
    80a6:	440b      	add	r3, r1
    80a8:	885b      	ldrh	r3, [r3, #2]
    80aa:	b29b      	uxth	r3, r3
    80ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    80b0:	429a      	cmp	r2, r3
    80b2:	d11b      	bne.n	80ec <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    80b4:	9b01      	ldr	r3, [sp, #4]
    80b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80ba:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    80bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80c0:	2b00      	cmp	r3, #0
    80c2:	d10b      	bne.n	80dc <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    80c4:	f89d 2000 	ldrb.w	r2, [sp]
    80c8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    80cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    80d0:	4618      	mov	r0, r3
    80d2:	f002 fc4b 	bl	a96c <Adc_Ipw_StopCurrentConversion>
    80d6:	4603      	mov	r3, r0
    80d8:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    80dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80e0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    80e4:	4611      	mov	r1, r2
    80e6:	4618      	mov	r0, r3
    80e8:	f001 fd88 	bl	9bfc <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    80ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80f0:	3301      	adds	r3, #1
    80f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    80f6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    80fe:	429a      	cmp	r2, r3
    8100:	d3c9      	bcc.n	8096 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    8102:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8106:	4618      	mov	r0, r3
    8108:	b005      	add	sp, #20
    810a:	f85d fb04 	ldr.w	pc, [sp], #4
    810e:	bf00      	nop
    8110:	1fff8d44 	.word	0x1fff8d44

00008114 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    8114:	b500      	push	{lr}
    8116:	b089      	sub	sp, #36	; 0x24
    8118:	4603      	mov	r3, r0
    811a:	f8ad 3006 	strh.w	r3, [sp, #6]
    811e:	460b      	mov	r3, r1
    8120:	f88d 3005 	strb.w	r3, [sp, #5]
    8124:	4613      	mov	r3, r2
    8126:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    812a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    812e:	4a4f      	ldr	r2, [pc, #316]	; (826c <Adc_UpdateStatusStopConversion+0x158>)
    8130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8134:	68da      	ldr	r2, [r3, #12]
    8136:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    813a:	005b      	lsls	r3, r3, #1
    813c:	4413      	add	r3, r2
    813e:	881b      	ldrh	r3, [r3, #0]
    8140:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    8144:	2300      	movs	r3, #0
    8146:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    814a:	2300      	movs	r3, #0
    814c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    8150:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8154:	4a45      	ldr	r2, [pc, #276]	; (826c <Adc_UpdateStatusStopConversion+0x158>)
    8156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    815a:	685a      	ldr	r2, [r3, #4]
    815c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8160:	2134      	movs	r1, #52	; 0x34
    8162:	fb01 f303 	mul.w	r3, r1, r3
    8166:	4413      	add	r3, r2
    8168:	689b      	ldr	r3, [r3, #8]
    816a:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    816c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8170:	4a3e      	ldr	r2, [pc, #248]	; (826c <Adc_UpdateStatusStopConversion+0x158>)
    8172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8176:	685a      	ldr	r2, [r3, #4]
    8178:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    817c:	2134      	movs	r1, #52	; 0x34
    817e:	fb01 f303 	mul.w	r3, r1, r3
    8182:	4413      	add	r3, r2
    8184:	685b      	ldr	r3, [r3, #4]
    8186:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    8188:	f89d 3004 	ldrb.w	r3, [sp, #4]
    818c:	4a37      	ldr	r2, [pc, #220]	; (826c <Adc_UpdateStatusStopConversion+0x158>)
    818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8192:	685a      	ldr	r2, [r3, #4]
    8194:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8198:	2134      	movs	r1, #52	; 0x34
    819a:	fb01 f303 	mul.w	r3, r1, r3
    819e:	4413      	add	r3, r2
    81a0:	699b      	ldr	r3, [r3, #24]
    81a2:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    81a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81a8:	4931      	ldr	r1, [pc, #196]	; (8270 <Adc_UpdateStatusStopConversion+0x15c>)
    81aa:	4613      	mov	r3, r2
    81ac:	009b      	lsls	r3, r3, #2
    81ae:	4413      	add	r3, r2
    81b0:	009b      	lsls	r3, r3, #2
    81b2:	440b      	add	r3, r1
    81b4:	681b      	ldr	r3, [r3, #0]
    81b6:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    81b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81bc:	492c      	ldr	r1, [pc, #176]	; (8270 <Adc_UpdateStatusStopConversion+0x15c>)
    81be:	4613      	mov	r3, r2
    81c0:	009b      	lsls	r3, r3, #2
    81c2:	4413      	add	r3, r2
    81c4:	009b      	lsls	r3, r3, #2
    81c6:	440b      	add	r3, r1
    81c8:	3308      	adds	r3, #8
    81ca:	2200      	movs	r2, #0
    81cc:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    81ce:	9b06      	ldr	r3, [sp, #24]
    81d0:	2b00      	cmp	r3, #0
    81d2:	d005      	beq.n	81e0 <Adc_UpdateStatusStopConversion+0xcc>
    81d4:	9b05      	ldr	r3, [sp, #20]
    81d6:	2b01      	cmp	r3, #1
    81d8:	d110      	bne.n	81fc <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    81da:	9b04      	ldr	r3, [sp, #16]
    81dc:	2b00      	cmp	r3, #0
    81de:	d10d      	bne.n	81fc <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    81e0:	9b03      	ldr	r3, [sp, #12]
    81e2:	2b03      	cmp	r3, #3
    81e4:	d10a      	bne.n	81fc <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    81e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81ea:	4921      	ldr	r1, [pc, #132]	; (8270 <Adc_UpdateStatusStopConversion+0x15c>)
    81ec:	4613      	mov	r3, r2
    81ee:	009b      	lsls	r3, r3, #2
    81f0:	4413      	add	r3, r2
    81f2:	009b      	lsls	r3, r3, #2
    81f4:	440b      	add	r3, r1
    81f6:	2200      	movs	r2, #0
    81f8:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    81fa:	e032      	b.n	8262 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    81fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8200:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8204:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    8208:	f10d 000a 	add.w	r0, sp, #10
    820c:	f7ff ff1e 	bl	804c <Adc_StopSwGroupConversion>
    8210:	4603      	mov	r3, r0
    8212:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8216:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    821a:	4915      	ldr	r1, [pc, #84]	; (8270 <Adc_UpdateStatusStopConversion+0x15c>)
    821c:	4613      	mov	r3, r2
    821e:	009b      	lsls	r3, r3, #2
    8220:	4413      	add	r3, r2
    8222:	009b      	lsls	r3, r3, #2
    8224:	440b      	add	r3, r1
    8226:	2200      	movs	r2, #0
    8228:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    822a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    822e:	2b00      	cmp	r3, #0
    8230:	d10f      	bne.n	8252 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    8232:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8236:	4a0f      	ldr	r2, [pc, #60]	; (8274 <Adc_UpdateStatusStopConversion+0x160>)
    8238:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    823c:	b29b      	uxth	r3, r3
    823e:	2b00      	cmp	r3, #0
    8240:	d007      	beq.n	8252 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    8242:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8246:	f89d 3005 	ldrb.w	r3, [sp, #5]
    824a:	4611      	mov	r1, r2
    824c:	4618      	mov	r0, r3
    824e:	f002 fae3 	bl	a818 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    8252:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8256:	2b01      	cmp	r3, #1
    8258:	d103      	bne.n	8262 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    825a:	212b      	movs	r1, #43	; 0x2b
    825c:	2003      	movs	r0, #3
    825e:	f7ff fb45 	bl	78ec <Adc_ReportDetRuntimeError>
}
    8262:	bf00      	nop
    8264:	b009      	add	sp, #36	; 0x24
    8266:	f85d fb04 	ldr.w	pc, [sp], #4
    826a:	bf00      	nop
    826c:	1fff8d18 	.word	0x1fff8d18
    8270:	1fff8d1c 	.word	0x1fff8d1c
    8274:	1fff8d44 	.word	0x1fff8d44

00008278 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    8278:	b500      	push	{lr}
    827a:	b085      	sub	sp, #20
    827c:	4603      	mov	r3, r0
    827e:	f8ad 3006 	strh.w	r3, [sp, #6]
    8282:	460b      	mov	r3, r1
    8284:	f88d 3005 	strb.w	r3, [sp, #5]
    8288:	4613      	mov	r3, r2
    828a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    828e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8292:	4a18      	ldr	r2, [pc, #96]	; (82f4 <Adc_UpdateStatusReadGroup+0x7c>)
    8294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8298:	68da      	ldr	r2, [r3, #12]
    829a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    829e:	005b      	lsls	r3, r3, #1
    82a0:	4413      	add	r3, r2
    82a2:	881b      	ldrh	r3, [r3, #0]
    82a4:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    82a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82ac:	4a11      	ldr	r2, [pc, #68]	; (82f4 <Adc_UpdateStatusReadGroup+0x7c>)
    82ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82b2:	685a      	ldr	r2, [r3, #4]
    82b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    82b8:	2134      	movs	r1, #52	; 0x34
    82ba:	fb01 f303 	mul.w	r3, r1, r3
    82be:	4413      	add	r3, r2
    82c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    82c4:	2b01      	cmp	r3, #1
    82c6:	d109      	bne.n	82dc <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    82c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    82cc:	f89d 1005 	ldrb.w	r1, [sp, #5]
    82d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82d4:	4618      	mov	r0, r3
    82d6:	f000 f80f 	bl	82f8 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    82da:	e007      	b.n	82ec <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    82dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    82e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82e4:	4611      	mov	r1, r2
    82e6:	4618      	mov	r0, r3
    82e8:	f000 f8e8 	bl	84bc <Adc_UpdateStatusReadGroupInt>
}
    82ec:	bf00      	nop
    82ee:	b005      	add	sp, #20
    82f0:	f85d fb04 	ldr.w	pc, [sp], #4
    82f4:	1fff8d18 	.word	0x1fff8d18

000082f8 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    82f8:	b500      	push	{lr}
    82fa:	b085      	sub	sp, #20
    82fc:	4603      	mov	r3, r0
    82fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    8302:	460b      	mov	r3, r1
    8304:	f88d 3005 	strb.w	r3, [sp, #5]
    8308:	4613      	mov	r3, r2
    830a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    830e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8312:	4a2c      	ldr	r2, [pc, #176]	; (83c4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8318:	68da      	ldr	r2, [r3, #12]
    831a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    831e:	005b      	lsls	r3, r3, #1
    8320:	4413      	add	r3, r2
    8322:	881b      	ldrh	r3, [r3, #0]
    8324:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    8328:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    832c:	4926      	ldr	r1, [pc, #152]	; (83c8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    832e:	4613      	mov	r3, r2
    8330:	009b      	lsls	r3, r3, #2
    8332:	4413      	add	r3, r2
    8334:	009b      	lsls	r3, r3, #2
    8336:	440b      	add	r3, r1
    8338:	3304      	adds	r3, #4
    833a:	2201      	movs	r2, #1
    833c:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    833e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8342:	2b00      	cmp	r3, #0
    8344:	d03a      	beq.n	83bc <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    8346:	f89d 3004 	ldrb.w	r3, [sp, #4]
    834a:	4a1e      	ldr	r2, [pc, #120]	; (83c4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    834c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8350:	685a      	ldr	r2, [r3, #4]
    8352:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8356:	2134      	movs	r1, #52	; 0x34
    8358:	fb01 f303 	mul.w	r3, r1, r3
    835c:	4413      	add	r3, r2
    835e:	689b      	ldr	r3, [r3, #8]
    8360:	2b01      	cmp	r3, #1
    8362:	d10a      	bne.n	837a <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8364:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8368:	4917      	ldr	r1, [pc, #92]	; (83c8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    836a:	4613      	mov	r3, r2
    836c:	009b      	lsls	r3, r3, #2
    836e:	4413      	add	r3, r2
    8370:	009b      	lsls	r3, r3, #2
    8372:	440b      	add	r3, r1
    8374:	2201      	movs	r2, #1
    8376:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    8378:	e020      	b.n	83bc <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    837a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    837e:	4a11      	ldr	r2, [pc, #68]	; (83c4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8384:	685a      	ldr	r2, [r3, #4]
    8386:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    838a:	2134      	movs	r1, #52	; 0x34
    838c:	fb01 f303 	mul.w	r3, r1, r3
    8390:	4413      	add	r3, r2
    8392:	695b      	ldr	r3, [r3, #20]
    8394:	2b00      	cmp	r3, #0
    8396:	d111      	bne.n	83bc <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8398:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    839c:	490a      	ldr	r1, [pc, #40]	; (83c8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    839e:	4613      	mov	r3, r2
    83a0:	009b      	lsls	r3, r3, #2
    83a2:	4413      	add	r3, r2
    83a4:	009b      	lsls	r3, r3, #2
    83a6:	440b      	add	r3, r1
    83a8:	2200      	movs	r2, #0
    83aa:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    83ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
    83b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83b4:	4611      	mov	r1, r2
    83b6:	4618      	mov	r0, r3
    83b8:	f000 f808 	bl	83cc <Adc_UpdateSwQueueIndexNoInt>
}
    83bc:	bf00      	nop
    83be:	b005      	add	sp, #20
    83c0:	f85d fb04 	ldr.w	pc, [sp], #4
    83c4:	1fff8d18 	.word	0x1fff8d18
    83c8:	1fff8d1c 	.word	0x1fff8d1c

000083cc <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    83cc:	b500      	push	{lr}
    83ce:	b085      	sub	sp, #20
    83d0:	4603      	mov	r3, r0
    83d2:	460a      	mov	r2, r1
    83d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    83d8:	4613      	mov	r3, r2
    83da:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    83de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83e2:	4a34      	ldr	r2, [pc, #208]	; (84b4 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    83e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83e8:	68da      	ldr	r2, [r3, #12]
    83ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83ee:	005b      	lsls	r3, r3, #1
    83f0:	4413      	add	r3, r2
    83f2:	881b      	ldrh	r3, [r3, #0]
    83f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    83f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83fc:	4a2d      	ldr	r2, [pc, #180]	; (84b4 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    83fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8402:	685a      	ldr	r2, [r3, #4]
    8404:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8408:	2134      	movs	r1, #52	; 0x34
    840a:	fb01 f303 	mul.w	r3, r1, r3
    840e:	4413      	add	r3, r2
    8410:	789b      	ldrb	r3, [r3, #2]
    8412:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    8416:	f89d 300b 	ldrb.w	r3, [sp, #11]
    841a:	4a27      	ldr	r2, [pc, #156]	; (84b8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    841c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8420:	b29b      	uxth	r3, r3
    8422:	2b00      	cmp	r3, #0
    8424:	d041      	beq.n	84aa <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    8426:	f89d 300b 	ldrb.w	r3, [sp, #11]
    842a:	4a23      	ldr	r2, [pc, #140]	; (84b8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    842c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8430:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8434:	2300      	movs	r3, #0
    8436:	f8ad 300e 	strh.w	r3, [sp, #14]
    843a:	e01c      	b.n	8476 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    843c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8440:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8444:	491c      	ldr	r1, [pc, #112]	; (84b8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8446:	0092      	lsls	r2, r2, #2
    8448:	4413      	add	r3, r2
    844a:	005b      	lsls	r3, r3, #1
    844c:	440b      	add	r3, r1
    844e:	885b      	ldrh	r3, [r3, #2]
    8450:	b29b      	uxth	r3, r3
    8452:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8456:	429a      	cmp	r2, r3
    8458:	d108      	bne.n	846c <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    845a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    845e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8462:	4611      	mov	r1, r2
    8464:	4618      	mov	r0, r3
    8466:	f001 fbc9 	bl	9bfc <Adc_Ipw_RemoveFromQueue>
                    break;
    846a:	e00a      	b.n	8482 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    846c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8470:	3301      	adds	r3, #1
    8472:	f8ad 300e 	strh.w	r3, [sp, #14]
    8476:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    847a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    847e:	429a      	cmp	r2, r3
    8480:	d3dc      	bcc.n	843c <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    8482:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8486:	2b00      	cmp	r3, #0
    8488:	d10f      	bne.n	84aa <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    848a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    848e:	4a0a      	ldr	r2, [pc, #40]	; (84b8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8490:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8494:	b29b      	uxth	r3, r3
    8496:	2b00      	cmp	r3, #0
    8498:	d007      	beq.n	84aa <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    849a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    849e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84a2:	4611      	mov	r1, r2
    84a4:	4618      	mov	r0, r3
    84a6:	f002 f9b7 	bl	a818 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    84aa:	bf00      	nop
    84ac:	b005      	add	sp, #20
    84ae:	f85d fb04 	ldr.w	pc, [sp], #4
    84b2:	bf00      	nop
    84b4:	1fff8d18 	.word	0x1fff8d18
    84b8:	1fff8d44 	.word	0x1fff8d44

000084bc <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    84bc:	b084      	sub	sp, #16
    84be:	4603      	mov	r3, r0
    84c0:	460a      	mov	r2, r1
    84c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    84c6:	4613      	mov	r3, r2
    84c8:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    84cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    84d0:	4a47      	ldr	r2, [pc, #284]	; (85f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    84d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d6:	68da      	ldr	r2, [r3, #12]
    84d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84dc:	005b      	lsls	r3, r3, #1
    84de:	4413      	add	r3, r2
    84e0:	881b      	ldrh	r3, [r3, #0]
    84e2:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    84e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84ea:	4942      	ldr	r1, [pc, #264]	; (85f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    84ec:	4613      	mov	r3, r2
    84ee:	009b      	lsls	r3, r3, #2
    84f0:	4413      	add	r3, r2
    84f2:	009b      	lsls	r3, r3, #2
    84f4:	440b      	add	r3, r1
    84f6:	681b      	ldr	r3, [r3, #0]
    84f8:	2b02      	cmp	r3, #2
    84fa:	d10a      	bne.n	8512 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    84fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8500:	493c      	ldr	r1, [pc, #240]	; (85f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    8502:	4613      	mov	r3, r2
    8504:	009b      	lsls	r3, r3, #2
    8506:	4413      	add	r3, r2
    8508:	009b      	lsls	r3, r3, #2
    850a:	440b      	add	r3, r1
    850c:	2201      	movs	r2, #1
    850e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    8510:	e06a      	b.n	85e8 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    8512:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8516:	4937      	ldr	r1, [pc, #220]	; (85f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    8518:	4613      	mov	r3, r2
    851a:	009b      	lsls	r3, r3, #2
    851c:	4413      	add	r3, r2
    851e:	009b      	lsls	r3, r3, #2
    8520:	440b      	add	r3, r1
    8522:	681b      	ldr	r3, [r3, #0]
    8524:	2b03      	cmp	r3, #3
    8526:	d15f      	bne.n	85e8 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8528:	f89d 3005 	ldrb.w	r3, [sp, #5]
    852c:	4a30      	ldr	r2, [pc, #192]	; (85f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    852e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8532:	685a      	ldr	r2, [r3, #4]
    8534:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8538:	2134      	movs	r1, #52	; 0x34
    853a:	fb01 f303 	mul.w	r3, r1, r3
    853e:	4413      	add	r3, r2
    8540:	695b      	ldr	r3, [r3, #20]
    8542:	2b00      	cmp	r3, #0
    8544:	d150      	bne.n	85e8 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    8546:	f89d 3005 	ldrb.w	r3, [sp, #5]
    854a:	4a29      	ldr	r2, [pc, #164]	; (85f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    854c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8550:	685a      	ldr	r2, [r3, #4]
    8552:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8556:	2134      	movs	r1, #52	; 0x34
    8558:	fb01 f303 	mul.w	r3, r1, r3
    855c:	4413      	add	r3, r2
    855e:	689b      	ldr	r3, [r3, #8]
    8560:	2b00      	cmp	r3, #0
    8562:	d02c      	beq.n	85be <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8564:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8568:	4a21      	ldr	r2, [pc, #132]	; (85f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    856a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    856e:	685a      	ldr	r2, [r3, #4]
    8570:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8574:	2134      	movs	r1, #52	; 0x34
    8576:	fb01 f303 	mul.w	r3, r1, r3
    857a:	4413      	add	r3, r2
    857c:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    857e:	2b01      	cmp	r3, #1
    8580:	d128      	bne.n	85d4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8582:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8586:	4a1a      	ldr	r2, [pc, #104]	; (85f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    8588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    858c:	685a      	ldr	r2, [r3, #4]
    858e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8592:	2134      	movs	r1, #52	; 0x34
    8594:	fb01 f303 	mul.w	r3, r1, r3
    8598:	4413      	add	r3, r2
    859a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    859c:	2b01      	cmp	r3, #1
    859e:	d119      	bne.n	85d4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    85a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85a4:	4a12      	ldr	r2, [pc, #72]	; (85f0 <Adc_UpdateStatusReadGroupInt+0x134>)
    85a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85aa:	685a      	ldr	r2, [r3, #4]
    85ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    85b0:	2134      	movs	r1, #52	; 0x34
    85b2:	fb01 f303 	mul.w	r3, r1, r3
    85b6:	4413      	add	r3, r2
    85b8:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    85ba:	2b00      	cmp	r3, #0
    85bc:	d10a      	bne.n	85d4 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    85be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85c2:	490c      	ldr	r1, [pc, #48]	; (85f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    85c4:	4613      	mov	r3, r2
    85c6:	009b      	lsls	r3, r3, #2
    85c8:	4413      	add	r3, r2
    85ca:	009b      	lsls	r3, r3, #2
    85cc:	440b      	add	r3, r1
    85ce:	2200      	movs	r2, #0
    85d0:	601a      	str	r2, [r3, #0]
}
    85d2:	e009      	b.n	85e8 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    85d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85d8:	4906      	ldr	r1, [pc, #24]	; (85f4 <Adc_UpdateStatusReadGroupInt+0x138>)
    85da:	4613      	mov	r3, r2
    85dc:	009b      	lsls	r3, r3, #2
    85de:	4413      	add	r3, r2
    85e0:	009b      	lsls	r3, r3, #2
    85e2:	440b      	add	r3, r1
    85e4:	2201      	movs	r2, #1
    85e6:	601a      	str	r2, [r3, #0]
}
    85e8:	bf00      	nop
    85ea:	b004      	add	sp, #16
    85ec:	4770      	bx	lr
    85ee:	bf00      	nop
    85f0:	1fff8d18 	.word	0x1fff8d18
    85f4:	1fff8d1c 	.word	0x1fff8d1c

000085f8 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    85f8:	b084      	sub	sp, #16
    85fa:	4603      	mov	r3, r0
    85fc:	460a      	mov	r2, r1
    85fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    8602:	4613      	mov	r3, r2
    8604:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8608:	f89d 3005 	ldrb.w	r3, [sp, #5]
    860c:	4a46      	ldr	r2, [pc, #280]	; (8728 <Adc_UpdateStatusAfterGetStream+0x130>)
    860e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8612:	68da      	ldr	r2, [r3, #12]
    8614:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8618:	005b      	lsls	r3, r3, #1
    861a:	4413      	add	r3, r2
    861c:	881b      	ldrh	r3, [r3, #0]
    861e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    8622:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8626:	4941      	ldr	r1, [pc, #260]	; (872c <Adc_UpdateStatusAfterGetStream+0x134>)
    8628:	4613      	mov	r3, r2
    862a:	009b      	lsls	r3, r3, #2
    862c:	4413      	add	r3, r2
    862e:	009b      	lsls	r3, r3, #2
    8630:	440b      	add	r3, r1
    8632:	681b      	ldr	r3, [r3, #0]
    8634:	2b02      	cmp	r3, #2
    8636:	d109      	bne.n	864c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8638:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    863c:	493b      	ldr	r1, [pc, #236]	; (872c <Adc_UpdateStatusAfterGetStream+0x134>)
    863e:	4613      	mov	r3, r2
    8640:	009b      	lsls	r3, r3, #2
    8642:	4413      	add	r3, r2
    8644:	009b      	lsls	r3, r3, #2
    8646:	440b      	add	r3, r1
    8648:	2201      	movs	r2, #1
    864a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    864c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8650:	4936      	ldr	r1, [pc, #216]	; (872c <Adc_UpdateStatusAfterGetStream+0x134>)
    8652:	4613      	mov	r3, r2
    8654:	009b      	lsls	r3, r3, #2
    8656:	4413      	add	r3, r2
    8658:	009b      	lsls	r3, r3, #2
    865a:	440b      	add	r3, r1
    865c:	681b      	ldr	r3, [r3, #0]
    865e:	2b03      	cmp	r3, #3
    8660:	d15f      	bne.n	8722 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8662:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8666:	4a30      	ldr	r2, [pc, #192]	; (8728 <Adc_UpdateStatusAfterGetStream+0x130>)
    8668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    866c:	685a      	ldr	r2, [r3, #4]
    866e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8672:	2134      	movs	r1, #52	; 0x34
    8674:	fb01 f303 	mul.w	r3, r1, r3
    8678:	4413      	add	r3, r2
    867a:	695b      	ldr	r3, [r3, #20]
    867c:	2b00      	cmp	r3, #0
    867e:	d150      	bne.n	8722 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8680:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8684:	4a28      	ldr	r2, [pc, #160]	; (8728 <Adc_UpdateStatusAfterGetStream+0x130>)
    8686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868a:	685a      	ldr	r2, [r3, #4]
    868c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8690:	2134      	movs	r1, #52	; 0x34
    8692:	fb01 f303 	mul.w	r3, r1, r3
    8696:	4413      	add	r3, r2
    8698:	689b      	ldr	r3, [r3, #8]
    869a:	2b00      	cmp	r3, #0
    869c:	d02c      	beq.n	86f8 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    869e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86a2:	4a21      	ldr	r2, [pc, #132]	; (8728 <Adc_UpdateStatusAfterGetStream+0x130>)
    86a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86a8:	685a      	ldr	r2, [r3, #4]
    86aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86ae:	2134      	movs	r1, #52	; 0x34
    86b0:	fb01 f303 	mul.w	r3, r1, r3
    86b4:	4413      	add	r3, r2
    86b6:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    86b8:	2b01      	cmp	r3, #1
    86ba:	d128      	bne.n	870e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    86bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86c0:	4a19      	ldr	r2, [pc, #100]	; (8728 <Adc_UpdateStatusAfterGetStream+0x130>)
    86c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c6:	685a      	ldr	r2, [r3, #4]
    86c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86cc:	2134      	movs	r1, #52	; 0x34
    86ce:	fb01 f303 	mul.w	r3, r1, r3
    86d2:	4413      	add	r3, r2
    86d4:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    86d6:	2b01      	cmp	r3, #1
    86d8:	d119      	bne.n	870e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    86da:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86de:	4a12      	ldr	r2, [pc, #72]	; (8728 <Adc_UpdateStatusAfterGetStream+0x130>)
    86e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86e4:	685a      	ldr	r2, [r3, #4]
    86e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86ea:	2134      	movs	r1, #52	; 0x34
    86ec:	fb01 f303 	mul.w	r3, r1, r3
    86f0:	4413      	add	r3, r2
    86f2:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    86f4:	2b00      	cmp	r3, #0
    86f6:	d10a      	bne.n	870e <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    86f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    86fc:	490b      	ldr	r1, [pc, #44]	; (872c <Adc_UpdateStatusAfterGetStream+0x134>)
    86fe:	4613      	mov	r3, r2
    8700:	009b      	lsls	r3, r3, #2
    8702:	4413      	add	r3, r2
    8704:	009b      	lsls	r3, r3, #2
    8706:	440b      	add	r3, r1
    8708:	2200      	movs	r2, #0
    870a:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    870c:	e009      	b.n	8722 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    870e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8712:	4906      	ldr	r1, [pc, #24]	; (872c <Adc_UpdateStatusAfterGetStream+0x134>)
    8714:	4613      	mov	r3, r2
    8716:	009b      	lsls	r3, r3, #2
    8718:	4413      	add	r3, r2
    871a:	009b      	lsls	r3, r3, #2
    871c:	440b      	add	r3, r1
    871e:	2201      	movs	r2, #1
    8720:	601a      	str	r2, [r3, #0]
}
    8722:	bf00      	nop
    8724:	b004      	add	sp, #16
    8726:	4770      	bx	lr
    8728:	1fff8d18 	.word	0x1fff8d18
    872c:	1fff8d1c 	.word	0x1fff8d1c

00008730 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    8730:	b500      	push	{lr}
    8732:	b085      	sub	sp, #20
    8734:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    8736:	f002 fa5b 	bl	abf0 <Adc_GetCoreID>
    873a:	4603      	mov	r3, r0
    873c:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    8740:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8744:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    8748:	f89d 300c 	ldrb.w	r3, [sp, #12]
    874c:	b2db      	uxtb	r3, r3
    874e:	4619      	mov	r1, r3
    8750:	9801      	ldr	r0, [sp, #4]
    8752:	f7ff fbb3 	bl	7ebc <Adc_CheckCurrentCoreId>
    8756:	4603      	mov	r3, r0
    8758:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    875c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8760:	2b00      	cmp	r3, #0
    8762:	d12c      	bne.n	87be <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    8764:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8768:	b2db      	uxtb	r3, r3
    876a:	4619      	mov	r1, r3
    876c:	4a16      	ldr	r2, [pc, #88]	; (87c8 <Adc_Init+0x98>)
    876e:	9b01      	ldr	r3, [sp, #4]
    8770:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    8774:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8778:	b2db      	uxtb	r3, r3
    877a:	4618      	mov	r0, r3
    877c:	f7ff fb4e 	bl	7e1c <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    8780:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8784:	b2db      	uxtb	r3, r3
    8786:	4618      	mov	r0, r3
    8788:	f7ff fade 	bl	7d48 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    878c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8790:	b2db      	uxtb	r3, r3
    8792:	461a      	mov	r2, r3
    8794:	4b0c      	ldr	r3, [pc, #48]	; (87c8 <Adc_Init+0x98>)
    8796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    879a:	681b      	ldr	r3, [r3, #0]
    879c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    87a0:	4611      	mov	r1, r2
    87a2:	4618      	mov	r0, r3
    87a4:	f001 ff78 	bl	a698 <Adc_Ipw_Init>
    87a8:	4603      	mov	r3, r0
    87aa:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    87ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    87b2:	2b01      	cmp	r3, #1
    87b4:	d103      	bne.n	87be <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    87b6:	212b      	movs	r1, #43	; 0x2b
    87b8:	2000      	movs	r0, #0
    87ba:	f7ff f897 	bl	78ec <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    87be:	bf00      	nop
    87c0:	b005      	add	sp, #20
    87c2:	f85d fb04 	ldr.w	pc, [sp], #4
    87c6:	bf00      	nop
    87c8:	1fff8d18 	.word	0x1fff8d18

000087cc <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    87cc:	b500      	push	{lr}
    87ce:	b085      	sub	sp, #20
    87d0:	4603      	mov	r3, r0
    87d2:	9100      	str	r1, [sp, #0]
    87d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    87d8:	2301      	movs	r3, #1
    87da:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    87de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    87e2:	4618      	mov	r0, r3
    87e4:	f7ff f9a2 	bl	7b2c <Adc_ValidateSetupBufferNotBusy>
    87e8:	4603      	mov	r3, r0
    87ea:	2b00      	cmp	r3, #0
    87ec:	d10d      	bne.n	880a <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    87ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    87f2:	4909      	ldr	r1, [pc, #36]	; (8818 <Adc_SetupResultBuffer+0x4c>)
    87f4:	4613      	mov	r3, r2
    87f6:	009b      	lsls	r3, r3, #2
    87f8:	4413      	add	r3, r2
    87fa:	009b      	lsls	r3, r3, #2
    87fc:	440b      	add	r3, r1
    87fe:	330c      	adds	r3, #12
    8800:	9a00      	ldr	r2, [sp, #0]
    8802:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    8804:	2300      	movs	r3, #0
    8806:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    880a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    880e:	4618      	mov	r0, r3
    8810:	b005      	add	sp, #20
    8812:	f85d fb04 	ldr.w	pc, [sp], #4
    8816:	bf00      	nop
    8818:	1fff8d1c 	.word	0x1fff8d1c

0000881c <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    881c:	b500      	push	{lr}
    881e:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8820:	2300      	movs	r3, #0
    8822:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    8826:	f002 f9e3 	bl	abf0 <Adc_GetCoreID>
    882a:	4603      	mov	r3, r0
    882c:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    8830:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8834:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    8838:	f89d 3002 	ldrb.w	r3, [sp, #2]
    883c:	b2db      	uxtb	r3, r3
    883e:	461a      	mov	r2, r3
    8840:	4b2d      	ldr	r3, [pc, #180]	; (88f8 <Adc_DeInit+0xdc>)
    8842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8846:	f89d 2006 	ldrb.w	r2, [sp, #6]
    884a:	4611      	mov	r1, r2
    884c:	4618      	mov	r0, r3
    884e:	f7ff fb35 	bl	7ebc <Adc_CheckCurrentCoreId>
    8852:	4603      	mov	r3, r0
    8854:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    8858:	f89d 3005 	ldrb.w	r3, [sp, #5]
    885c:	2b00      	cmp	r3, #0
    885e:	d147      	bne.n	88f0 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    8860:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8864:	b2db      	uxtb	r3, r3
    8866:	4618      	mov	r0, r3
    8868:	f7ff f912 	bl	7a90 <Adc_ValidateDeInitNotBusy>
    886c:	4603      	mov	r3, r0
    886e:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    8872:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8876:	2b00      	cmp	r3, #0
    8878:	d13a      	bne.n	88f0 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    887a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    887e:	b2db      	uxtb	r3, r3
    8880:	4618      	mov	r0, r3
    8882:	f001 ff4e 	bl	a722 <Adc_Ipw_DeInit>
    8886:	4603      	mov	r3, r0
    8888:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    888c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8890:	2b01      	cmp	r3, #1
    8892:	d103      	bne.n	889c <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    8894:	212b      	movs	r1, #43	; 0x2b
    8896:	2001      	movs	r0, #1
    8898:	f7ff f828 	bl	78ec <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    889c:	2300      	movs	r3, #0
    889e:	f88d 3007 	strb.w	r3, [sp, #7]
    88a2:	e019      	b.n	88d8 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    88a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    88a8:	b2db      	uxtb	r3, r3
    88aa:	461a      	mov	r2, r3
    88ac:	4b12      	ldr	r3, [pc, #72]	; (88f8 <Adc_DeInit+0xdc>)
    88ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88b2:	681a      	ldr	r2, [r3, #0]
    88b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88b8:	4413      	add	r3, r2
    88ba:	7f9b      	ldrb	r3, [r3, #30]
    88bc:	2b01      	cmp	r3, #1
    88be:	d106      	bne.n	88ce <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    88c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88c4:	4a0d      	ldr	r2, [pc, #52]	; (88fc <Adc_DeInit+0xe0>)
    88c6:	00db      	lsls	r3, r3, #3
    88c8:	4413      	add	r3, r2
    88ca:	2200      	movs	r2, #0
    88cc:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    88ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88d2:	3301      	adds	r3, #1
    88d4:	f88d 3007 	strb.w	r3, [sp, #7]
    88d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88dc:	2b01      	cmp	r3, #1
    88de:	d9e1      	bls.n	88a4 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    88e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    88e4:	b2db      	uxtb	r3, r3
    88e6:	4619      	mov	r1, r3
    88e8:	4b03      	ldr	r3, [pc, #12]	; (88f8 <Adc_DeInit+0xdc>)
    88ea:	2200      	movs	r2, #0
    88ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    88f0:	bf00      	nop
    88f2:	b003      	add	sp, #12
    88f4:	f85d fb04 	ldr.w	pc, [sp], #4
    88f8:	1fff8d18 	.word	0x1fff8d18
    88fc:	1fff8d44 	.word	0x1fff8d44

00008900 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    8900:	b500      	push	{lr}
    8902:	b085      	sub	sp, #20
    8904:	4603      	mov	r3, r0
    8906:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    890a:	2300      	movs	r3, #0
    890c:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8910:	2300      	movs	r3, #0
    8912:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    8916:	f002 f96b 	bl	abf0 <Adc_GetCoreID>
    891a:	4603      	mov	r3, r0
    891c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8920:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8924:	b2db      	uxtb	r3, r3
    8926:	461a      	mov	r2, r3
    8928:	4b1a      	ldr	r3, [pc, #104]	; (8994 <Adc_StartGroupConversion+0x94>)
    892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    892e:	68da      	ldr	r2, [r3, #12]
    8930:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8934:	005b      	lsls	r3, r3, #1
    8936:	4413      	add	r3, r2
    8938:	881b      	ldrh	r3, [r3, #0]
    893a:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    893e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8942:	b2da      	uxtb	r2, r3
    8944:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8948:	4611      	mov	r1, r2
    894a:	4618      	mov	r0, r3
    894c:	f7ff f912 	bl	7b74 <Adc_ValidateStateStartGroupConvNotBusy>
    8950:	4603      	mov	r3, r0
    8952:	2b00      	cmp	r3, #0
    8954:	d11a      	bne.n	898c <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8956:	f89d 300c 	ldrb.w	r3, [sp, #12]
    895a:	b2db      	uxtb	r3, r3
    895c:	461a      	mov	r2, r3
    895e:	4b0d      	ldr	r3, [pc, #52]	; (8994 <Adc_StartGroupConversion+0x94>)
    8960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8964:	685a      	ldr	r2, [r3, #4]
    8966:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    896a:	2134      	movs	r1, #52	; 0x34
    896c:	fb01 f303 	mul.w	r3, r1, r3
    8970:	4413      	add	r3, r2
    8972:	789b      	ldrb	r3, [r3, #2]
    8974:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    8978:	f89d 300c 	ldrb.w	r3, [sp, #12]
    897c:	b2da      	uxtb	r2, r3
    897e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8982:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8986:	4618      	mov	r0, r3
    8988:	f7ff facb 	bl	7f22 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    898c:	bf00      	nop
    898e:	b005      	add	sp, #20
    8990:	f85d fb04 	ldr.w	pc, [sp], #4
    8994:	1fff8d18 	.word	0x1fff8d18

00008998 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    8998:	b500      	push	{lr}
    899a:	b085      	sub	sp, #20
    899c:	4603      	mov	r3, r0
    899e:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    89a2:	2300      	movs	r3, #0
    89a4:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    89a8:	2300      	movs	r3, #0
    89aa:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    89ae:	f002 f91f 	bl	abf0 <Adc_GetCoreID>
    89b2:	4603      	mov	r3, r0
    89b4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    89b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89bc:	b2da      	uxtb	r2, r3
    89be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89c2:	4619      	mov	r1, r3
    89c4:	2003      	movs	r0, #3
    89c6:	f7ff f94d 	bl	7c64 <Adc_ValidateStateNotIdle>
    89ca:	4603      	mov	r3, r0
    89cc:	2b00      	cmp	r3, #0
    89ce:	d129      	bne.n	8a24 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    89d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89d4:	b2db      	uxtb	r3, r3
    89d6:	461a      	mov	r2, r3
    89d8:	4b14      	ldr	r3, [pc, #80]	; (8a2c <Adc_StopGroupConversion+0x94>)
    89da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89de:	68da      	ldr	r2, [r3, #12]
    89e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89e4:	005b      	lsls	r3, r3, #1
    89e6:	4413      	add	r3, r2
    89e8:	881b      	ldrh	r3, [r3, #0]
    89ea:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    89ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89f2:	b2db      	uxtb	r3, r3
    89f4:	461a      	mov	r2, r3
    89f6:	4b0d      	ldr	r3, [pc, #52]	; (8a2c <Adc_StopGroupConversion+0x94>)
    89f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89fc:	685a      	ldr	r2, [r3, #4]
    89fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8a02:	2134      	movs	r1, #52	; 0x34
    8a04:	fb01 f303 	mul.w	r3, r1, r3
    8a08:	4413      	add	r3, r2
    8a0a:	789b      	ldrb	r3, [r3, #2]
    8a0c:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    8a10:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8a14:	b2da      	uxtb	r2, r3
    8a16:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8a1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a1e:	4618      	mov	r0, r3
    8a20:	f7ff fb78 	bl	8114 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    8a24:	bf00      	nop
    8a26:	b005      	add	sp, #20
    8a28:	f85d fb04 	ldr.w	pc, [sp], #4
    8a2c:	1fff8d18 	.word	0x1fff8d18

00008a30 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    8a30:	b500      	push	{lr}
    8a32:	b085      	sub	sp, #20
    8a34:	4603      	mov	r3, r0
    8a36:	9100      	str	r1, [sp, #0]
    8a38:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    8a3c:	2301      	movs	r3, #1
    8a3e:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    8a42:	2301      	movs	r3, #1
    8a44:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    8a48:	f002 f8d2 	bl	abf0 <Adc_GetCoreID>
    8a4c:	4603      	mov	r3, r0
    8a4e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    8a52:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a56:	b2da      	uxtb	r2, r3
    8a58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a5c:	4619      	mov	r1, r3
    8a5e:	2004      	movs	r0, #4
    8a60:	f7ff f900 	bl	7c64 <Adc_ValidateStateNotIdle>
    8a64:	4603      	mov	r3, r0
    8a66:	2b00      	cmp	r3, #0
    8a68:	d121      	bne.n	8aae <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    8a6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a6e:	b2db      	uxtb	r3, r3
    8a70:	f10d 020d 	add.w	r2, sp, #13
    8a74:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    8a78:	9900      	ldr	r1, [sp, #0]
    8a7a:	f002 f812 	bl	aaa2 <Adc_Ipw_ReadGroup>
    8a7e:	4603      	mov	r3, r0
    8a80:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    8a84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d006      	beq.n	8a9a <Adc_ReadGroup+0x6a>
    8a8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8a90:	f083 0301 	eor.w	r3, r3, #1
    8a94:	b2db      	uxtb	r3, r3
    8a96:	2b00      	cmp	r3, #0
    8a98:	d009      	beq.n	8aae <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    8a9a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8a9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8aa2:	b2da      	uxtb	r2, r3
    8aa4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8aa8:	4618      	mov	r0, r3
    8aaa:	f7ff fbe5 	bl	8278 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    8aae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8ab2:	4618      	mov	r0, r3
    8ab4:	b005      	add	sp, #20
    8ab6:	f85d fb04 	ldr.w	pc, [sp], #4

00008aba <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    8aba:	b084      	sub	sp, #16
    8abc:	4603      	mov	r3, r0
    8abe:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    8ac2:	2300      	movs	r3, #0
    8ac4:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    8ac6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8aca:	4906      	ldr	r1, [pc, #24]	; (8ae4 <Adc_GetGroupStatus+0x2a>)
    8acc:	4613      	mov	r3, r2
    8ace:	009b      	lsls	r3, r3, #2
    8ad0:	4413      	add	r3, r2
    8ad2:	009b      	lsls	r3, r3, #2
    8ad4:	440b      	add	r3, r1
    8ad6:	681b      	ldr	r3, [r3, #0]
    8ad8:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    8ada:	9b03      	ldr	r3, [sp, #12]
}
    8adc:	4618      	mov	r0, r3
    8ade:	b004      	add	sp, #16
    8ae0:	4770      	bx	lr
    8ae2:	bf00      	nop
    8ae4:	1fff8d1c 	.word	0x1fff8d1c

00008ae8 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    8ae8:	b500      	push	{lr}
    8aea:	b085      	sub	sp, #20
    8aec:	4603      	mov	r3, r0
    8aee:	9100      	str	r1, [sp, #0]
    8af0:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    8af4:	f002 f87c 	bl	abf0 <Adc_GetCoreID>
    8af8:	4603      	mov	r3, r0
    8afa:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    8afe:	2300      	movs	r3, #0
    8b00:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    8b04:	2300      	movs	r3, #0
    8b06:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8b0a:	2300      	movs	r3, #0
    8b0c:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    8b10:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b14:	b2da      	uxtb	r2, r3
    8b16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b1a:	4619      	mov	r1, r3
    8b1c:	200b      	movs	r0, #11
    8b1e:	f7ff f8a1 	bl	7c64 <Adc_ValidateStateNotIdle>
    8b22:	4603      	mov	r3, r0
    8b24:	2b00      	cmp	r3, #0
    8b26:	f040 808e 	bne.w	8c46 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    8b2a:	9b00      	ldr	r3, [sp, #0]
    8b2c:	2200      	movs	r2, #0
    8b2e:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8b30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b34:	4948      	ldr	r1, [pc, #288]	; (8c58 <Adc_GetStreamLastPointer+0x170>)
    8b36:	4613      	mov	r3, r2
    8b38:	009b      	lsls	r3, r3, #2
    8b3a:	4413      	add	r3, r2
    8b3c:	009b      	lsls	r3, r3, #2
    8b3e:	440b      	add	r3, r1
    8b40:	681b      	ldr	r3, [r3, #0]
    8b42:	2b00      	cmp	r3, #0
    8b44:	f000 8082 	beq.w	8c4c <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    8b48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b4c:	4942      	ldr	r1, [pc, #264]	; (8c58 <Adc_GetStreamLastPointer+0x170>)
    8b4e:	4613      	mov	r3, r2
    8b50:	009b      	lsls	r3, r3, #2
    8b52:	4413      	add	r3, r2
    8b54:	009b      	lsls	r3, r3, #2
    8b56:	440b      	add	r3, r1
    8b58:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8b5a:	2b01      	cmp	r3, #1
    8b5c:	d076      	beq.n	8c4c <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b5e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b62:	b2db      	uxtb	r3, r3
    8b64:	461a      	mov	r2, r3
    8b66:	4b3d      	ldr	r3, [pc, #244]	; (8c5c <Adc_GetStreamLastPointer+0x174>)
    8b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b6c:	68da      	ldr	r2, [r3, #12]
    8b6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b72:	005b      	lsls	r3, r3, #1
    8b74:	4413      	add	r3, r2
    8b76:	881b      	ldrh	r3, [r3, #0]
    8b78:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8b7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b80:	4935      	ldr	r1, [pc, #212]	; (8c58 <Adc_GetStreamLastPointer+0x170>)
    8b82:	4613      	mov	r3, r2
    8b84:	009b      	lsls	r3, r3, #2
    8b86:	4413      	add	r3, r2
    8b88:	009b      	lsls	r3, r3, #2
    8b8a:	440b      	add	r3, r1
    8b8c:	3308      	adds	r3, #8
    8b8e:	881b      	ldrh	r3, [r3, #0]
    8b90:	b29b      	uxth	r3, r3
    8b92:	2b00      	cmp	r3, #0
    8b94:	d123      	bne.n	8bde <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    8b96:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b9a:	b2db      	uxtb	r3, r3
    8b9c:	461a      	mov	r2, r3
    8b9e:	4b2f      	ldr	r3, [pc, #188]	; (8c5c <Adc_GetStreamLastPointer+0x174>)
    8ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ba4:	685a      	ldr	r2, [r3, #4]
    8ba6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8baa:	2134      	movs	r1, #52	; 0x34
    8bac:	fb01 f303 	mul.w	r3, r1, r3
    8bb0:	4413      	add	r3, r2
    8bb2:	8b9b      	ldrh	r3, [r3, #28]
    8bb4:	3b01      	subs	r3, #1
    8bb6:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8bba:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8bbe:	b2db      	uxtb	r3, r3
    8bc0:	461a      	mov	r2, r3
    8bc2:	4b26      	ldr	r3, [pc, #152]	; (8c5c <Adc_GetStreamLastPointer+0x174>)
    8bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bc8:	685a      	ldr	r2, [r3, #4]
    8bca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8bce:	2134      	movs	r1, #52	; 0x34
    8bd0:	fb01 f303 	mul.w	r3, r1, r3
    8bd4:	4413      	add	r3, r2
    8bd6:	8b9b      	ldrh	r3, [r3, #28]
    8bd8:	f8ad 300e 	strh.w	r3, [sp, #14]
    8bdc:	e019      	b.n	8c12 <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8bde:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8be2:	491d      	ldr	r1, [pc, #116]	; (8c58 <Adc_GetStreamLastPointer+0x170>)
    8be4:	4613      	mov	r3, r2
    8be6:	009b      	lsls	r3, r3, #2
    8be8:	4413      	add	r3, r2
    8bea:	009b      	lsls	r3, r3, #2
    8bec:	440b      	add	r3, r1
    8bee:	3308      	adds	r3, #8
    8bf0:	881b      	ldrh	r3, [r3, #0]
    8bf2:	b29b      	uxth	r3, r3
    8bf4:	3b01      	subs	r3, #1
    8bf6:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    8bfa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8bfe:	4916      	ldr	r1, [pc, #88]	; (8c58 <Adc_GetStreamLastPointer+0x170>)
    8c00:	4613      	mov	r3, r2
    8c02:	009b      	lsls	r3, r3, #2
    8c04:	4413      	add	r3, r2
    8c06:	009b      	lsls	r3, r3, #2
    8c08:	440b      	add	r3, r1
    8c0a:	3308      	adds	r3, #8
    8c0c:	881b      	ldrh	r3, [r3, #0]
    8c0e:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8c12:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8c16:	4910      	ldr	r1, [pc, #64]	; (8c58 <Adc_GetStreamLastPointer+0x170>)
    8c18:	4613      	mov	r3, r2
    8c1a:	009b      	lsls	r3, r3, #2
    8c1c:	4413      	add	r3, r2
    8c1e:	009b      	lsls	r3, r3, #2
    8c20:	440b      	add	r3, r1
    8c22:	330c      	adds	r3, #12
    8c24:	681a      	ldr	r2, [r3, #0]
    8c26:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c2a:	005b      	lsls	r3, r3, #1
    8c2c:	441a      	add	r2, r3
    8c2e:	9b00      	ldr	r3, [sp, #0]
    8c30:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    8c32:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8c36:	b2da      	uxtb	r2, r3
    8c38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8c3c:	4611      	mov	r1, r2
    8c3e:	4618      	mov	r0, r3
    8c40:	f7ff fcda 	bl	85f8 <Adc_UpdateStatusAfterGetStream>
    8c44:	e002      	b.n	8c4c <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    8c46:	9b00      	ldr	r3, [sp, #0]
    8c48:	2200      	movs	r2, #0
    8c4a:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    8c4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8c50:	4618      	mov	r0, r3
    8c52:	b005      	add	sp, #20
    8c54:	f85d fb04 	ldr.w	pc, [sp], #4
    8c58:	1fff8d1c 	.word	0x1fff8d1c
    8c5c:	1fff8d18 	.word	0x1fff8d18

00008c60 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    8c64:	9b01      	ldr	r3, [sp, #4]
    8c66:	222b      	movs	r2, #43	; 0x2b
    8c68:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    8c6a:	9b01      	ldr	r3, [sp, #4]
    8c6c:	227b      	movs	r2, #123	; 0x7b
    8c6e:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    8c70:	9b01      	ldr	r3, [sp, #4]
    8c72:	2202      	movs	r2, #2
    8c74:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    8c76:	9b01      	ldr	r3, [sp, #4]
    8c78:	2200      	movs	r2, #0
    8c7a:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    8c7c:	9b01      	ldr	r3, [sp, #4]
    8c7e:	2200      	movs	r2, #0
    8c80:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    8c82:	bf00      	nop
    8c84:	b002      	add	sp, #8
    8c86:	4770      	bx	lr

00008c88 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    8c88:	b500      	push	{lr}
    8c8a:	b085      	sub	sp, #20
    8c8c:	4603      	mov	r3, r0
    8c8e:	9100      	str	r1, [sp, #0]
    8c90:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    8c94:	2300      	movs	r3, #0
    8c96:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    8c9a:	f001 ffa9 	bl	abf0 <Adc_GetCoreID>
    8c9e:	4603      	mov	r3, r0
    8ca0:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    8ca4:	9b00      	ldr	r3, [sp, #0]
    8ca6:	2201      	movs	r2, #1
    8ca8:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    8caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cae:	2129      	movs	r1, #41	; 0x29
    8cb0:	4618      	mov	r0, r3
    8cb2:	f7fe fe30 	bl	7916 <Adc_ValidateNotBusyNoQueue>
    8cb6:	4603      	mov	r3, r0
    8cb8:	2b00      	cmp	r3, #0
    8cba:	d115      	bne.n	8ce8 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8cbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8cc0:	b2db      	uxtb	r3, r3
    8cc2:	4619      	mov	r1, r3
    8cc4:	2029      	movs	r0, #41	; 0x29
    8cc6:	f7fe fe91 	bl	79ec <Adc_ValidateCheckGroupNotConversion>
    8cca:	4603      	mov	r3, r0
    8ccc:	2b00      	cmp	r3, #0
    8cce:	d10b      	bne.n	8ce8 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    8cd0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8cd4:	b2da      	uxtb	r2, r3
    8cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cda:	9900      	ldr	r1, [sp, #0]
    8cdc:	4618      	mov	r0, r3
    8cde:	f001 ff5d 	bl	ab9c <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    8ce2:	2301      	movs	r3, #1
    8ce4:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8ce8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cec:	2b00      	cmp	r3, #0
    8cee:	d007      	beq.n	8d00 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    8cf0:	9b00      	ldr	r3, [sp, #0]
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	2b01      	cmp	r3, #1
    8cf6:	d103      	bne.n	8d00 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8cf8:	212b      	movs	r1, #43	; 0x2b
    8cfa:	2029      	movs	r0, #41	; 0x29
    8cfc:	f7fe fdf6 	bl	78ec <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    8d00:	bf00      	nop
    8d02:	b005      	add	sp, #20
    8d04:	f85d fb04 	ldr.w	pc, [sp], #4

00008d08 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    8d08:	b086      	sub	sp, #24
    8d0a:	9003      	str	r0, [sp, #12]
    8d0c:	9102      	str	r1, [sp, #8]
    8d0e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    8d10:	9b03      	ldr	r3, [sp, #12]
    8d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8d16:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    8d18:	9b02      	ldr	r3, [sp, #8]
    8d1a:	43db      	mvns	r3, r3
    8d1c:	9a05      	ldr	r2, [sp, #20]
    8d1e:	4013      	ands	r3, r2
    8d20:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    8d22:	9a05      	ldr	r2, [sp, #20]
    8d24:	9b01      	ldr	r3, [sp, #4]
    8d26:	4313      	orrs	r3, r2
    8d28:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    8d2a:	9b03      	ldr	r3, [sp, #12]
    8d2c:	9a05      	ldr	r2, [sp, #20]
    8d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8d32:	bf00      	nop
    8d34:	b006      	add	sp, #24
    8d36:	4770      	bx	lr

00008d38 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    8d38:	b086      	sub	sp, #24
    8d3a:	9003      	str	r0, [sp, #12]
    8d3c:	9102      	str	r1, [sp, #8]
    8d3e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    8d40:	9b03      	ldr	r3, [sp, #12]
    8d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8d44:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    8d46:	9b05      	ldr	r3, [sp, #20]
    8d48:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    8d4c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    8d4e:	9b02      	ldr	r3, [sp, #8]
    8d50:	015b      	lsls	r3, r3, #5
    8d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
    8d56:	9a05      	ldr	r2, [sp, #20]
    8d58:	4313      	orrs	r3, r2
    8d5a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    8d5c:	9b01      	ldr	r3, [sp, #4]
    8d5e:	f003 0303 	and.w	r3, r3, #3
    8d62:	9a05      	ldr	r2, [sp, #20]
    8d64:	4313      	orrs	r3, r2
    8d66:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    8d68:	9b03      	ldr	r3, [sp, #12]
    8d6a:	9a05      	ldr	r2, [sp, #20]
    8d6c:	641a      	str	r2, [r3, #64]	; 0x40
}
    8d6e:	bf00      	nop
    8d70:	b006      	add	sp, #24
    8d72:	4770      	bx	lr

00008d74 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    8d74:	b084      	sub	sp, #16
    8d76:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8d78:	2300      	movs	r3, #0
    8d7a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8d7c:	9b01      	ldr	r3, [sp, #4]
    8d7e:	095b      	lsrs	r3, r3, #5
    8d80:	f003 0303 	and.w	r3, r3, #3
    8d84:	2b03      	cmp	r3, #3
    8d86:	d00c      	beq.n	8da2 <Adc_HwAcc_GetClockDivide+0x2e>
    8d88:	2b03      	cmp	r3, #3
    8d8a:	d80d      	bhi.n	8da8 <Adc_HwAcc_GetClockDivide+0x34>
    8d8c:	2b01      	cmp	r3, #1
    8d8e:	d002      	beq.n	8d96 <Adc_HwAcc_GetClockDivide+0x22>
    8d90:	2b02      	cmp	r3, #2
    8d92:	d003      	beq.n	8d9c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    8d94:	e008      	b.n	8da8 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    8d96:	2301      	movs	r3, #1
    8d98:	9303      	str	r3, [sp, #12]
            break;
    8d9a:	e006      	b.n	8daa <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8d9c:	2302      	movs	r3, #2
    8d9e:	9303      	str	r3, [sp, #12]
            break;
    8da0:	e003      	b.n	8daa <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    8da2:	2303      	movs	r3, #3
    8da4:	9303      	str	r3, [sp, #12]
            break;
    8da6:	e000      	b.n	8daa <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8da8:	bf00      	nop
    }
    return ReturnValue;
    8daa:	9b03      	ldr	r3, [sp, #12]
}
    8dac:	4618      	mov	r0, r3
    8dae:	b004      	add	sp, #16
    8db0:	4770      	bx	lr

00008db2 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    8db2:	b084      	sub	sp, #16
    8db4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8db6:	2300      	movs	r3, #0
    8db8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8dba:	9b01      	ldr	r3, [sp, #4]
    8dbc:	f003 0303 	and.w	r3, r3, #3
    8dc0:	2b03      	cmp	r3, #3
    8dc2:	d00c      	beq.n	8dde <Adc_HwAcc_GetInputClock+0x2c>
    8dc4:	2b03      	cmp	r3, #3
    8dc6:	d80d      	bhi.n	8de4 <Adc_HwAcc_GetInputClock+0x32>
    8dc8:	2b01      	cmp	r3, #1
    8dca:	d002      	beq.n	8dd2 <Adc_HwAcc_GetInputClock+0x20>
    8dcc:	2b02      	cmp	r3, #2
    8dce:	d003      	beq.n	8dd8 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    8dd0:	e008      	b.n	8de4 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    8dd2:	2301      	movs	r3, #1
    8dd4:	9303      	str	r3, [sp, #12]
            break;
    8dd6:	e006      	b.n	8de6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8dd8:	2302      	movs	r3, #2
    8dda:	9303      	str	r3, [sp, #12]
            break;
    8ddc:	e003      	b.n	8de6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    8dde:	2303      	movs	r3, #3
    8de0:	9303      	str	r3, [sp, #12]
            break;
    8de2:	e000      	b.n	8de6 <Adc_HwAcc_GetInputClock+0x34>
            break;
    8de4:	bf00      	nop
    }
    return ReturnValue;
    8de6:	9b03      	ldr	r3, [sp, #12]
}
    8de8:	4618      	mov	r0, r3
    8dea:	b004      	add	sp, #16
    8dec:	4770      	bx	lr

00008dee <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    8dee:	b084      	sub	sp, #16
    8df0:	9001      	str	r0, [sp, #4]
    8df2:	460b      	mov	r3, r1
    8df4:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8df8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d002      	beq.n	8e06 <Adc_HwAcc_SetSampleTime+0x18>
    8e00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e04:	e000      	b.n	8e08 <Adc_HwAcc_SetSampleTime+0x1a>
    8e06:	2301      	movs	r3, #1
    8e08:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8e0c:	9b01      	ldr	r3, [sp, #4]
    8e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8e10:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    8e12:	9b02      	ldr	r3, [sp, #8]
    8e14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8e18:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8e1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e1e:	9a02      	ldr	r2, [sp, #8]
    8e20:	4313      	orrs	r3, r2
    8e22:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8e24:	9b01      	ldr	r3, [sp, #4]
    8e26:	9a02      	ldr	r2, [sp, #8]
    8e28:	645a      	str	r2, [r3, #68]	; 0x44
}
    8e2a:	bf00      	nop
    8e2c:	b004      	add	sp, #16
    8e2e:	4770      	bx	lr

00008e30 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    8e30:	b086      	sub	sp, #24
    8e32:	9003      	str	r0, [sp, #12]
    8e34:	460b      	mov	r3, r1
    8e36:	9201      	str	r2, [sp, #4]
    8e38:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8e3c:	9b03      	ldr	r3, [sp, #12]
    8e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8e42:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    8e44:	9b05      	ldr	r3, [sp, #20]
    8e46:	f023 0307 	bic.w	r3, r3, #7
    8e4a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    8e4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8e50:	2b00      	cmp	r3, #0
    8e52:	d001      	beq.n	8e58 <Adc_HwAcc_SetAveraging+0x28>
    8e54:	2304      	movs	r3, #4
    8e56:	e000      	b.n	8e5a <Adc_HwAcc_SetAveraging+0x2a>
    8e58:	2300      	movs	r3, #0
    8e5a:	9a05      	ldr	r2, [sp, #20]
    8e5c:	4313      	orrs	r3, r2
    8e5e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    8e60:	9b01      	ldr	r3, [sp, #4]
    8e62:	f003 0303 	and.w	r3, r3, #3
    8e66:	9a05      	ldr	r2, [sp, #20]
    8e68:	4313      	orrs	r3, r2
    8e6a:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    8e6c:	9b03      	ldr	r3, [sp, #12]
    8e6e:	9a05      	ldr	r2, [sp, #20]
    8e70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8e74:	bf00      	nop
    8e76:	b006      	add	sp, #24
    8e78:	4770      	bx	lr

00008e7a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8e7a:	b084      	sub	sp, #16
    8e7c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    8e7e:	2300      	movs	r3, #0
    8e80:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    8e82:	9b01      	ldr	r3, [sp, #4]
    8e84:	f003 0303 	and.w	r3, r3, #3
    8e88:	2b03      	cmp	r3, #3
    8e8a:	d00c      	beq.n	8ea6 <Adc_HwAcc_GetAverageSelect+0x2c>
    8e8c:	2b03      	cmp	r3, #3
    8e8e:	d80d      	bhi.n	8eac <Adc_HwAcc_GetAverageSelect+0x32>
    8e90:	2b01      	cmp	r3, #1
    8e92:	d002      	beq.n	8e9a <Adc_HwAcc_GetAverageSelect+0x20>
    8e94:	2b02      	cmp	r3, #2
    8e96:	d003      	beq.n	8ea0 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8e98:	e008      	b.n	8eac <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8e9a:	2301      	movs	r3, #1
    8e9c:	9303      	str	r3, [sp, #12]
            break;
    8e9e:	e006      	b.n	8eae <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    8ea0:	2302      	movs	r3, #2
    8ea2:	9303      	str	r3, [sp, #12]
            break;
    8ea4:	e003      	b.n	8eae <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8ea6:	2303      	movs	r3, #3
    8ea8:	9303      	str	r3, [sp, #12]
            break;
    8eaa:	e000      	b.n	8eae <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8eac:	bf00      	nop
    }
    return ReturnValue;
    8eae:	9b03      	ldr	r3, [sp, #12]
}
    8eb0:	4618      	mov	r0, r3
    8eb2:	b004      	add	sp, #16
    8eb4:	4770      	bx	lr

00008eb6 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8eb6:	b084      	sub	sp, #16
    8eb8:	9001      	str	r0, [sp, #4]
    8eba:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8ebc:	9b01      	ldr	r3, [sp, #4]
    8ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8ec2:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8ec4:	9b03      	ldr	r3, [sp, #12]
    8ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8eca:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8ecc:	9b00      	ldr	r3, [sp, #0]
    8ece:	019b      	lsls	r3, r3, #6
    8ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ed4:	9a03      	ldr	r2, [sp, #12]
    8ed6:	4313      	orrs	r3, r2
    8ed8:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8eda:	9b01      	ldr	r3, [sp, #4]
    8edc:	9a03      	ldr	r2, [sp, #12]
    8ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8ee2:	bf00      	nop
    8ee4:	b004      	add	sp, #16
    8ee6:	4770      	bx	lr

00008ee8 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8ee8:	b084      	sub	sp, #16
    8eea:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8eec:	2300      	movs	r3, #0
    8eee:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    8ef0:	9b01      	ldr	r3, [sp, #4]
    8ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	d001      	beq.n	8efe <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8efa:	2301      	movs	r3, #1
    8efc:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    8efe:	9b03      	ldr	r3, [sp, #12]
}
    8f00:	4618      	mov	r0, r3
    8f02:	b004      	add	sp, #16
    8f04:	4770      	bx	lr

00008f06 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8f06:	b086      	sub	sp, #24
    8f08:	9003      	str	r0, [sp, #12]
    8f0a:	9201      	str	r2, [sp, #4]
    8f0c:	461a      	mov	r2, r3
    8f0e:	460b      	mov	r3, r1
    8f10:	f88d 300b 	strb.w	r3, [sp, #11]
    8f14:	4613      	mov	r3, r2
    8f16:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8f1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8f1e:	9b03      	ldr	r3, [sp, #12]
    8f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f24:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8f26:	9b05      	ldr	r3, [sp, #20]
    8f28:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8f2c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    8f2e:	9b01      	ldr	r3, [sp, #4]
    8f30:	f003 031f 	and.w	r3, r3, #31
    8f34:	9a05      	ldr	r2, [sp, #20]
    8f36:	4313      	orrs	r3, r2
    8f38:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8f3a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d001      	beq.n	8f46 <Adc_HwAcc_SetChannel+0x40>
    8f42:	2340      	movs	r3, #64	; 0x40
    8f44:	e000      	b.n	8f48 <Adc_HwAcc_SetChannel+0x42>
    8f46:	2300      	movs	r3, #0
    8f48:	9a05      	ldr	r2, [sp, #20]
    8f4a:	4313      	orrs	r3, r2
    8f4c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    8f4e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8f52:	9b03      	ldr	r3, [sp, #12]
    8f54:	9905      	ldr	r1, [sp, #20]
    8f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8f5a:	bf00      	nop
    8f5c:	b006      	add	sp, #24
    8f5e:	4770      	bx	lr

00008f60 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    8f60:	b082      	sub	sp, #8
    8f62:	9001      	str	r0, [sp, #4]
    8f64:	460b      	mov	r3, r1
    8f66:	f8ad 3002 	strh.w	r3, [sp, #2]
    8f6a:	4613      	mov	r3, r2
    8f6c:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    8f70:	f8bd 3000 	ldrh.w	r3, [sp]
    8f74:	b2da      	uxtb	r2, r3
    8f76:	9b01      	ldr	r3, [sp, #4]
    8f78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8f7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8f84:	9b01      	ldr	r3, [sp, #4]
    8f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8f8a:	bf00      	nop
    8f8c:	b002      	add	sp, #8
    8f8e:	4770      	bx	lr

00008f90 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    8f90:	b082      	sub	sp, #8
    8f92:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    8f94:	9b01      	ldr	r3, [sp, #4]
    8f96:	099b      	lsrs	r3, r3, #6
    8f98:	f003 0301 	and.w	r3, r3, #1
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	bf14      	ite	ne
    8fa0:	2301      	movne	r3, #1
    8fa2:	2300      	moveq	r3, #0
    8fa4:	b2db      	uxtb	r3, r3
}
    8fa6:	4618      	mov	r0, r3
    8fa8:	b002      	add	sp, #8
    8faa:	4770      	bx	lr

00008fac <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8fac:	b082      	sub	sp, #8
    8fae:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    8fb0:	9b01      	ldr	r3, [sp, #4]
    8fb2:	09db      	lsrs	r3, r3, #7
    8fb4:	f003 0301 	and.w	r3, r3, #1
    8fb8:	2b00      	cmp	r3, #0
    8fba:	bf14      	ite	ne
    8fbc:	2301      	movne	r3, #1
    8fbe:	2300      	moveq	r3, #0
    8fc0:	b2db      	uxtb	r3, r3
}
    8fc2:	4618      	mov	r0, r3
    8fc4:	b002      	add	sp, #8
    8fc6:	4770      	bx	lr

00008fc8 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8fc8:	b084      	sub	sp, #16
    8fca:	9001      	str	r0, [sp, #4]
    8fcc:	460b      	mov	r3, r1
    8fce:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    8fd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8fd6:	9b01      	ldr	r3, [sp, #4]
    8fd8:	3212      	adds	r2, #18
    8fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8fde:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8fe2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8fea:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    8fee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8ff2:	4618      	mov	r0, r3
    8ff4:	b004      	add	sp, #16
    8ff6:	4770      	bx	lr

00008ff8 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8ff8:	b500      	push	{lr}
    8ffa:	b085      	sub	sp, #20
    8ffc:	9003      	str	r0, [sp, #12]
    8ffe:	9102      	str	r1, [sp, #8]
    9000:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    9002:	f007 f99d 	bl	10340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    9006:	9b02      	ldr	r3, [sp, #8]
    9008:	7a59      	ldrb	r1, [r3, #9]
    900a:	9b02      	ldr	r3, [sp, #8]
    900c:	68db      	ldr	r3, [r3, #12]
    900e:	461a      	mov	r2, r3
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f7ff ff0d 	bl	8e30 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    9016:	f007 f9bf 	bl	10398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    901a:	f006 fff7 	bl	1000c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    901e:	9901      	ldr	r1, [sp, #4]
    9020:	9803      	ldr	r0, [sp, #12]
    9022:	f7ff ff48 	bl	8eb6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    9026:	f007 f81d 	bl	10064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    902a:	f006 fd0d 	bl	fa48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    902e:	9b02      	ldr	r3, [sp, #8]
    9030:	7a1b      	ldrb	r3, [r3, #8]
    9032:	4619      	mov	r1, r3
    9034:	9803      	ldr	r0, [sp, #12]
    9036:	f7ff feda 	bl	8dee <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    903a:	f006 fd31 	bl	faa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    903e:	f006 fc5f 	bl	f900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9042:	9b02      	ldr	r3, [sp, #8]
    9044:	6819      	ldr	r1, [r3, #0]
    9046:	9b02      	ldr	r3, [sp, #8]
    9048:	685b      	ldr	r3, [r3, #4]
    904a:	461a      	mov	r2, r3
    904c:	9803      	ldr	r0, [sp, #12]
    904e:	f7ff fe73 	bl	8d38 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    9052:	f006 fc81 	bl	f958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    9056:	bf00      	nop
    9058:	b005      	add	sp, #20
    905a:	f85d fb04 	ldr.w	pc, [sp], #4

0000905e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    905e:	b500      	push	{lr}
    9060:	b087      	sub	sp, #28
    9062:	9001      	str	r0, [sp, #4]
    9064:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9066:	4a67      	ldr	r2, [pc, #412]	; (9204 <Adc_Ip_Init+0x1a6>)
    9068:	9b01      	ldr	r3, [sp, #4]
    906a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    906e:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    9070:	2300      	movs	r3, #0
    9072:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    9074:	2300      	movs	r3, #0
    9076:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9078:	9b00      	ldr	r3, [sp, #0]
    907a:	6819      	ldr	r1, [r3, #0]
    907c:	9b00      	ldr	r3, [sp, #0]
    907e:	689b      	ldr	r3, [r3, #8]
    9080:	461a      	mov	r2, r3
    9082:	9802      	ldr	r0, [sp, #8]
    9084:	f7ff fe58 	bl	8d38 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    9088:	9b00      	ldr	r3, [sp, #0]
    908a:	7b1b      	ldrb	r3, [r3, #12]
    908c:	4619      	mov	r1, r3
    908e:	9802      	ldr	r0, [sp, #8]
    9090:	f7ff fead 	bl	8dee <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    9094:	9b00      	ldr	r3, [sp, #0]
    9096:	7b59      	ldrb	r1, [r3, #13]
    9098:	9b00      	ldr	r3, [sp, #0]
    909a:	691b      	ldr	r3, [r3, #16]
    909c:	461a      	mov	r2, r3
    909e:	9802      	ldr	r0, [sp, #8]
    90a0:	f7ff fec6 	bl	8e30 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    90a4:	9b00      	ldr	r3, [sp, #0]
    90a6:	695b      	ldr	r3, [r3, #20]
    90a8:	4619      	mov	r1, r3
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	f000 f9ea 	bl	9484 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    90b0:	9b04      	ldr	r3, [sp, #16]
    90b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    90b6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    90b8:	9b00      	ldr	r3, [sp, #0]
    90ba:	699b      	ldr	r3, [r3, #24]
    90bc:	019b      	lsls	r3, r3, #6
    90be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90c2:	9a05      	ldr	r2, [sp, #20]
    90c4:	4313      	orrs	r3, r2
    90c6:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    90c8:	9b00      	ldr	r3, [sp, #0]
    90ca:	7f1b      	ldrb	r3, [r3, #28]
    90cc:	2b00      	cmp	r3, #0
    90ce:	d004      	beq.n	90da <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    90d0:	9b05      	ldr	r3, [sp, #20]
    90d2:	f043 0304 	orr.w	r3, r3, #4
    90d6:	9305      	str	r3, [sp, #20]
    90d8:	e003      	b.n	90e2 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    90da:	9b04      	ldr	r3, [sp, #16]
    90dc:	f043 0304 	orr.w	r3, r3, #4
    90e0:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    90e2:	9b04      	ldr	r3, [sp, #16]
    90e4:	f043 0303 	orr.w	r3, r3, #3
    90e8:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    90ea:	9b00      	ldr	r3, [sp, #0]
    90ec:	6a1b      	ldr	r3, [r3, #32]
    90ee:	f003 0303 	and.w	r3, r3, #3
    90f2:	9a05      	ldr	r2, [sp, #20]
    90f4:	4313      	orrs	r3, r2
    90f6:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    90f8:	9b04      	ldr	r3, [sp, #16]
    90fa:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    90fe:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    9100:	9b00      	ldr	r3, [sp, #0]
    9102:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    9106:	2b00      	cmp	r3, #0
    9108:	d001      	beq.n	910e <Adc_Ip_Init+0xb0>
    910a:	2320      	movs	r3, #32
    910c:	e000      	b.n	9110 <Adc_Ip_Init+0xb2>
    910e:	2300      	movs	r3, #0
    9110:	9a05      	ldr	r2, [sp, #20]
    9112:	4313      	orrs	r3, r2
    9114:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    9116:	9b00      	ldr	r3, [sp, #0]
    9118:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    911c:	2b00      	cmp	r3, #0
    911e:	d001      	beq.n	9124 <Adc_Ip_Init+0xc6>
    9120:	2310      	movs	r3, #16
    9122:	e000      	b.n	9126 <Adc_Ip_Init+0xc8>
    9124:	2300      	movs	r3, #0
    9126:	9a05      	ldr	r2, [sp, #20]
    9128:	4313      	orrs	r3, r2
    912a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    912c:	9b00      	ldr	r3, [sp, #0]
    912e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    9132:	2b00      	cmp	r3, #0
    9134:	d001      	beq.n	913a <Adc_Ip_Init+0xdc>
    9136:	2308      	movs	r3, #8
    9138:	e000      	b.n	913c <Adc_Ip_Init+0xde>
    913a:	2300      	movs	r3, #0
    913c:	9a05      	ldr	r2, [sp, #20]
    913e:	4313      	orrs	r3, r2
    9140:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    9142:	9b00      	ldr	r3, [sp, #0]
    9144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9146:	461a      	mov	r2, r3
    9148:	9b02      	ldr	r3, [sp, #8]
    914a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    914e:	9b00      	ldr	r3, [sp, #0]
    9150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9152:	461a      	mov	r2, r3
    9154:	9b02      	ldr	r3, [sp, #8]
    9156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    915a:	9a05      	ldr	r2, [sp, #20]
    915c:	9904      	ldr	r1, [sp, #16]
    915e:	9802      	ldr	r0, [sp, #8]
    9160:	f7ff fdd2 	bl	8d08 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    9164:	9b00      	ldr	r3, [sp, #0]
    9166:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    9168:	9b00      	ldr	r3, [sp, #0]
    916a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    916c:	461a      	mov	r2, r3
    916e:	9802      	ldr	r0, [sp, #8]
    9170:	f7ff fef6 	bl	8f60 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    9174:	9b00      	ldr	r3, [sp, #0]
    9176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    917a:	4619      	mov	r1, r3
    917c:	9801      	ldr	r0, [sp, #4]
    917e:	f000 f955 	bl	942c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    9182:	9b00      	ldr	r3, [sp, #0]
    9184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9186:	2b00      	cmp	r3, #0
    9188:	d01c      	beq.n	91c4 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    918a:	2300      	movs	r3, #0
    918c:	f88d 300f 	strb.w	r3, [sp, #15]
    9190:	e011      	b.n	91b6 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    9192:	9b00      	ldr	r3, [sp, #0]
    9194:	6b59      	ldr	r1, [r3, #52]	; 0x34
    9196:	f89d 200f 	ldrb.w	r2, [sp, #15]
    919a:	4613      	mov	r3, r2
    919c:	005b      	lsls	r3, r3, #1
    919e:	4413      	add	r3, r2
    91a0:	009b      	lsls	r3, r3, #2
    91a2:	440b      	add	r3, r1
    91a4:	4619      	mov	r1, r3
    91a6:	9801      	ldr	r0, [sp, #4]
    91a8:	f000 f9c2 	bl	9530 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    91ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91b0:	3301      	adds	r3, #1
    91b2:	f88d 300f 	strb.w	r3, [sp, #15]
    91b6:	9b00      	ldr	r3, [sp, #0]
    91b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    91bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    91c0:	429a      	cmp	r2, r3
    91c2:	d3e6      	bcc.n	9192 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    91c4:	9b00      	ldr	r3, [sp, #0]
    91c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    91c8:	490f      	ldr	r1, [pc, #60]	; (9208 <Adc_Ip_Init+0x1aa>)
    91ca:	9b01      	ldr	r3, [sp, #4]
    91cc:	204c      	movs	r0, #76	; 0x4c
    91ce:	fb00 f303 	mul.w	r3, r0, r3
    91d2:	440b      	add	r3, r1
    91d4:	3308      	adds	r3, #8
    91d6:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    91d8:	9b00      	ldr	r3, [sp, #0]
    91da:	685a      	ldr	r2, [r3, #4]
    91dc:	490a      	ldr	r1, [pc, #40]	; (9208 <Adc_Ip_Init+0x1aa>)
    91de:	9b01      	ldr	r3, [sp, #4]
    91e0:	204c      	movs	r0, #76	; 0x4c
    91e2:	fb00 f303 	mul.w	r3, r0, r3
    91e6:	440b      	add	r3, r1
    91e8:	3304      	adds	r3, #4
    91ea:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    91ec:	4a06      	ldr	r2, [pc, #24]	; (9208 <Adc_Ip_Init+0x1aa>)
    91ee:	9b01      	ldr	r3, [sp, #4]
    91f0:	214c      	movs	r1, #76	; 0x4c
    91f2:	fb01 f303 	mul.w	r3, r1, r3
    91f6:	4413      	add	r3, r2
    91f8:	2201      	movs	r2, #1
    91fa:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    91fc:	bf00      	nop
    91fe:	b007      	add	sp, #28
    9200:	f85d fb04 	ldr.w	pc, [sp], #4
    9204:	00016710 	.word	0x00016710
    9208:	1fff8d54 	.word	0x1fff8d54

0000920c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    920c:	b500      	push	{lr}
    920e:	b0c3      	sub	sp, #268	; 0x10c
    9210:	ab42      	add	r3, sp, #264	; 0x108
    9212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    9216:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    9218:	2300      	movs	r3, #0
    921a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    921c:	2303      	movs	r3, #3
    921e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    9220:	2300      	movs	r3, #0
    9222:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    9224:	230c      	movs	r3, #12
    9226:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    922a:	2300      	movs	r3, #0
    922c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    9230:	2300      	movs	r3, #0
    9232:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    9234:	2300      	movs	r3, #0
    9236:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    9238:	2300      	movs	r3, #0
    923a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    923c:	2300      	movs	r3, #0
    923e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    9242:	2300      	movs	r3, #0
    9244:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    9246:	2300      	movs	r3, #0
    9248:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    924c:	2300      	movs	r3, #0
    924e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    9252:	2300      	movs	r3, #0
    9254:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    9258:	2300      	movs	r3, #0
    925a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    925e:	2300      	movs	r3, #0
    9260:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    9264:	2300      	movs	r3, #0
    9266:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    926a:	2304      	movs	r3, #4
    926c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    9270:	2300      	movs	r3, #0
    9272:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    9276:	2310      	movs	r3, #16
    9278:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    927c:	2300      	movs	r3, #0
    927e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    9282:	e02b      	b.n	92dc <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    9284:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9288:	ab42      	add	r3, sp, #264	; 0x108
    928a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    928e:	4613      	mov	r3, r2
    9290:	005b      	lsls	r3, r3, #1
    9292:	4413      	add	r3, r2
    9294:	009b      	lsls	r3, r3, #2
    9296:	440b      	add	r3, r1
    9298:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    929c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    929e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    92a2:	ab42      	add	r3, sp, #264	; 0x108
    92a4:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    92a8:	4613      	mov	r3, r2
    92aa:	005b      	lsls	r3, r3, #1
    92ac:	4413      	add	r3, r2
    92ae:	009b      	lsls	r3, r3, #2
    92b0:	440b      	add	r3, r1
    92b2:	3304      	adds	r3, #4
    92b4:	221f      	movs	r2, #31
    92b6:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    92b8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    92bc:	ab42      	add	r3, sp, #264	; 0x108
    92be:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    92c2:	4613      	mov	r3, r2
    92c4:	005b      	lsls	r3, r3, #1
    92c6:	4413      	add	r3, r2
    92c8:	009b      	lsls	r3, r3, #2
    92ca:	440b      	add	r3, r1
    92cc:	3308      	adds	r3, #8
    92ce:	2200      	movs	r2, #0
    92d0:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    92d2:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    92d6:	3301      	adds	r3, #1
    92d8:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    92dc:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    92e0:	2b0f      	cmp	r3, #15
    92e2:	d9cf      	bls.n	9284 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    92e4:	ab02      	add	r3, sp, #8
    92e6:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    92e8:	2300      	movs	r3, #0
    92ea:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    92ec:	aa32      	add	r2, sp, #200	; 0xc8
    92ee:	ab42      	add	r3, sp, #264	; 0x108
    92f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    92f4:	4611      	mov	r1, r2
    92f6:	6818      	ldr	r0, [r3, #0]
    92f8:	f7ff feb1 	bl	905e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    92fc:	4a07      	ldr	r2, [pc, #28]	; (931c <Adc_Ip_DeInit+0x110>)
    92fe:	ab42      	add	r3, sp, #264	; 0x108
    9300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    9304:	681b      	ldr	r3, [r3, #0]
    9306:	214c      	movs	r1, #76	; 0x4c
    9308:	fb01 f303 	mul.w	r3, r1, r3
    930c:	4413      	add	r3, r2
    930e:	2200      	movs	r2, #0
    9310:	701a      	strb	r2, [r3, #0]
}
    9312:	bf00      	nop
    9314:	b043      	add	sp, #268	; 0x10c
    9316:	f85d fb04 	ldr.w	pc, [sp], #4
    931a:	bf00      	nop
    931c:	1fff8d54 	.word	0x1fff8d54

00009320 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    9320:	b500      	push	{lr}
    9322:	b087      	sub	sp, #28
    9324:	9003      	str	r0, [sp, #12]
    9326:	460b      	mov	r3, r1
    9328:	9201      	str	r2, [sp, #4]
    932a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    932e:	4a0a      	ldr	r2, [pc, #40]	; (9358 <Adc_Ip_SetAveraging+0x38>)
    9330:	9b03      	ldr	r3, [sp, #12]
    9332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9336:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    9338:	f006 ff5e 	bl	101f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    933c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9340:	9a01      	ldr	r2, [sp, #4]
    9342:	4619      	mov	r1, r3
    9344:	9805      	ldr	r0, [sp, #20]
    9346:	f7ff fd73 	bl	8e30 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    934a:	f006 ff81 	bl	10250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    934e:	bf00      	nop
    9350:	b007      	add	sp, #28
    9352:	f85d fb04 	ldr.w	pc, [sp], #4
    9356:	bf00      	nop
    9358:	00016710 	.word	0x00016710

0000935c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    935c:	b500      	push	{lr}
    935e:	b085      	sub	sp, #20
    9360:	9001      	str	r0, [sp, #4]
    9362:	460b      	mov	r3, r1
    9364:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9368:	4a09      	ldr	r2, [pc, #36]	; (9390 <Adc_Ip_SetSampleTime+0x34>)
    936a:	9b01      	ldr	r3, [sp, #4]
    936c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9370:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    9372:	f006 fbbb 	bl	faec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    9376:	f89d 3003 	ldrb.w	r3, [sp, #3]
    937a:	4619      	mov	r1, r3
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	f7ff fd36 	bl	8dee <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    9382:	f006 fbdf 	bl	fb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    9386:	bf00      	nop
    9388:	b005      	add	sp, #20
    938a:	f85d fb04 	ldr.w	pc, [sp], #4
    938e:	bf00      	nop
    9390:	00016710 	.word	0x00016710

00009394 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    9394:	b500      	push	{lr}
    9396:	b085      	sub	sp, #20
    9398:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    939a:	4a0a      	ldr	r2, [pc, #40]	; (93c4 <Adc_Ip_EnableDma+0x30>)
    939c:	9b01      	ldr	r3, [sp, #4]
    939e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93a2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    93a4:	f006 fed6 	bl	10154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    93a8:	9b03      	ldr	r3, [sp, #12]
    93aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93ae:	f043 0204 	orr.w	r2, r3, #4
    93b2:	9b03      	ldr	r3, [sp, #12]
    93b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    93b8:	f006 fef8 	bl	101ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    93bc:	bf00      	nop
    93be:	b005      	add	sp, #20
    93c0:	f85d fb04 	ldr.w	pc, [sp], #4
    93c4:	00016710 	.word	0x00016710

000093c8 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    93c8:	b500      	push	{lr}
    93ca:	b085      	sub	sp, #20
    93cc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93ce:	4a0a      	ldr	r2, [pc, #40]	; (93f8 <Adc_Ip_DisableDma+0x30>)
    93d0:	9b01      	ldr	r3, [sp, #4]
    93d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    93d8:	f006 fd74 	bl	fec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    93dc:	9b03      	ldr	r3, [sp, #12]
    93de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93e2:	f023 0204 	bic.w	r2, r3, #4
    93e6:	9b03      	ldr	r3, [sp, #12]
    93e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    93ec:	f006 fd96 	bl	ff1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    93f0:	bf00      	nop
    93f2:	b005      	add	sp, #20
    93f4:	f85d fb04 	ldr.w	pc, [sp], #4
    93f8:	00016710 	.word	0x00016710

000093fc <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    93fc:	b500      	push	{lr}
    93fe:	b085      	sub	sp, #20
    9400:	9001      	str	r0, [sp, #4]
    9402:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9404:	4a08      	ldr	r2, [pc, #32]	; (9428 <Adc_Ip_SetTriggerMode+0x2c>)
    9406:	9b01      	ldr	r3, [sp, #4]
    9408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    940c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    940e:	f006 fdab 	bl	ff68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    9412:	9900      	ldr	r1, [sp, #0]
    9414:	9803      	ldr	r0, [sp, #12]
    9416:	f7ff fd4e 	bl	8eb6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    941a:	f006 fdd1 	bl	ffc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    941e:	bf00      	nop
    9420:	b005      	add	sp, #20
    9422:	f85d fb04 	ldr.w	pc, [sp], #4
    9426:	bf00      	nop
    9428:	00016710 	.word	0x00016710

0000942c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    942c:	b500      	push	{lr}
    942e:	b085      	sub	sp, #20
    9430:	9001      	str	r0, [sp, #4]
    9432:	460b      	mov	r3, r1
    9434:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9438:	4a11      	ldr	r2, [pc, #68]	; (9480 <Adc_Ip_SetContinuousMode+0x54>)
    943a:	9b01      	ldr	r3, [sp, #4]
    943c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9440:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    9442:	f006 ffcf 	bl	103e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    9446:	9b03      	ldr	r3, [sp, #12]
    9448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    944c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    944e:	9b02      	ldr	r3, [sp, #8]
    9450:	f023 0308 	bic.w	r3, r3, #8
    9454:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    9456:	f89d 3003 	ldrb.w	r3, [sp, #3]
    945a:	2b00      	cmp	r3, #0
    945c:	d001      	beq.n	9462 <Adc_Ip_SetContinuousMode+0x36>
    945e:	2308      	movs	r3, #8
    9460:	e000      	b.n	9464 <Adc_Ip_SetContinuousMode+0x38>
    9462:	2300      	movs	r3, #0
    9464:	9a02      	ldr	r2, [sp, #8]
    9466:	4313      	orrs	r3, r2
    9468:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    946a:	9b03      	ldr	r3, [sp, #12]
    946c:	9a02      	ldr	r2, [sp, #8]
    946e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    9472:	f006 ffe3 	bl	1043c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    9476:	bf00      	nop
    9478:	b005      	add	sp, #20
    947a:	f85d fb04 	ldr.w	pc, [sp], #4
    947e:	bf00      	nop
    9480:	00016710 	.word	0x00016710

00009484 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    9484:	b500      	push	{lr}
    9486:	b085      	sub	sp, #20
    9488:	9001      	str	r0, [sp, #4]
    948a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    948c:	4a0e      	ldr	r2, [pc, #56]	; (94c8 <Adc_Ip_SetResolution+0x44>)
    948e:	9b01      	ldr	r3, [sp, #4]
    9490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9494:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    9496:	f005 fff5 	bl	f484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    949a:	9b03      	ldr	r3, [sp, #12]
    949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    949e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    94a0:	9b02      	ldr	r3, [sp, #8]
    94a2:	f023 030c 	bic.w	r3, r3, #12
    94a6:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    94a8:	9b00      	ldr	r3, [sp, #0]
    94aa:	009b      	lsls	r3, r3, #2
    94ac:	f003 030c 	and.w	r3, r3, #12
    94b0:	9a02      	ldr	r2, [sp, #8]
    94b2:	4313      	orrs	r3, r2
    94b4:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    94b6:	9b03      	ldr	r3, [sp, #12]
    94b8:	9a02      	ldr	r2, [sp, #8]
    94ba:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    94bc:	f006 f80e 	bl	f4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    94c0:	bf00      	nop
    94c2:	b005      	add	sp, #20
    94c4:	f85d fb04 	ldr.w	pc, [sp], #4
    94c8:	00016710 	.word	0x00016710

000094cc <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    94cc:	b500      	push	{lr}
    94ce:	b085      	sub	sp, #20
    94d0:	9001      	str	r0, [sp, #4]
    94d2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    94d4:	4a15      	ldr	r2, [pc, #84]	; (952c <Adc_Ip_SetClockMode+0x60>)
    94d6:	9b01      	ldr	r3, [sp, #4]
    94d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94dc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    94de:	f006 f96b 	bl	f7b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    94e2:	9b00      	ldr	r3, [sp, #0]
    94e4:	6819      	ldr	r1, [r3, #0]
    94e6:	9b00      	ldr	r3, [sp, #0]
    94e8:	685b      	ldr	r3, [r3, #4]
    94ea:	461a      	mov	r2, r3
    94ec:	9803      	ldr	r0, [sp, #12]
    94ee:	f7ff fc23 	bl	8d38 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    94f2:	f006 f98d 	bl	f810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    94f6:	f006 fa55 	bl	f9a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    94fa:	9b00      	ldr	r3, [sp, #0]
    94fc:	7a1b      	ldrb	r3, [r3, #8]
    94fe:	4619      	mov	r1, r3
    9500:	9803      	ldr	r0, [sp, #12]
    9502:	f7ff fc74 	bl	8dee <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    9506:	f006 fa79 	bl	f9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    950a:	f006 fec7 	bl	1029c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    950e:	9b00      	ldr	r3, [sp, #0]
    9510:	7a59      	ldrb	r1, [r3, #9]
    9512:	9b00      	ldr	r3, [sp, #0]
    9514:	68db      	ldr	r3, [r3, #12]
    9516:	461a      	mov	r2, r3
    9518:	9803      	ldr	r0, [sp, #12]
    951a:	f7ff fc89 	bl	8e30 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    951e:	f006 fee9 	bl	102f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    9522:	bf00      	nop
    9524:	b005      	add	sp, #20
    9526:	f85d fb04 	ldr.w	pc, [sp], #4
    952a:	bf00      	nop
    952c:	00016710 	.word	0x00016710

00009530 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    9530:	b510      	push	{r4, lr}
    9532:	b084      	sub	sp, #16
    9534:	9001      	str	r0, [sp, #4]
    9536:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9538:	4a13      	ldr	r2, [pc, #76]	; (9588 <Adc_Ip_ConfigChannel+0x58>)
    953a:	9b01      	ldr	r3, [sp, #4]
    953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9540:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    9542:	9b00      	ldr	r3, [sp, #0]
    9544:	685b      	ldr	r3, [r3, #4]
    9546:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    9548:	f006 fc6a 	bl	fe20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    954c:	9b00      	ldr	r3, [sp, #0]
    954e:	7819      	ldrb	r1, [r3, #0]
    9550:	9b00      	ldr	r3, [sp, #0]
    9552:	7a1b      	ldrb	r3, [r3, #8]
    9554:	9a02      	ldr	r2, [sp, #8]
    9556:	9803      	ldr	r0, [sp, #12]
    9558:	f7ff fcd5 	bl	8f06 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    955c:	f006 fc8c 	bl	fe78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    9560:	9b00      	ldr	r3, [sp, #0]
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	461c      	mov	r4, r3
    9566:	9b00      	ldr	r3, [sp, #0]
    9568:	6859      	ldr	r1, [r3, #4]
    956a:	4808      	ldr	r0, [pc, #32]	; (958c <Adc_Ip_ConfigChannel+0x5c>)
    956c:	9a01      	ldr	r2, [sp, #4]
    956e:	4613      	mov	r3, r2
    9570:	00db      	lsls	r3, r3, #3
    9572:	4413      	add	r3, r2
    9574:	005b      	lsls	r3, r3, #1
    9576:	4413      	add	r3, r2
    9578:	4423      	add	r3, r4
    957a:	3302      	adds	r3, #2
    957c:	009b      	lsls	r3, r3, #2
    957e:	4403      	add	r3, r0
    9580:	6059      	str	r1, [r3, #4]
}
    9582:	bf00      	nop
    9584:	b004      	add	sp, #16
    9586:	bd10      	pop	{r4, pc}
    9588:	00016710 	.word	0x00016710
    958c:	1fff8d54 	.word	0x1fff8d54

00009590 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    9590:	b500      	push	{lr}
    9592:	b089      	sub	sp, #36	; 0x24
    9594:	9001      	str	r0, [sp, #4]
    9596:	460b      	mov	r3, r1
    9598:	f88d 3003 	strb.w	r3, [sp, #3]
    959c:	4613      	mov	r3, r2
    959e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    95a2:	4a24      	ldr	r2, [pc, #144]	; (9634 <Adc_Ip_SetDisabledChannel+0xa4>)
    95a4:	9b01      	ldr	r3, [sp, #4]
    95a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95aa:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    95ac:	2300      	movs	r3, #0
    95ae:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    95b0:	2100      	movs	r1, #0
    95b2:	4821      	ldr	r0, [pc, #132]	; (9638 <Adc_Ip_SetDisabledChannel+0xa8>)
    95b4:	f7f9 f954 	bl	2860 <OsIf_MicrosToTicks>
    95b8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    95ba:	2000      	movs	r0, #0
    95bc:	f7f9 f904 	bl	27c8 <OsIf_GetCounter>
    95c0:	4603      	mov	r3, r0
    95c2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    95c4:	2300      	movs	r3, #0
    95c6:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    95c8:	f006 fae2 	bl	fb90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    95cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95d0:	9b05      	ldr	r3, [sp, #20]
    95d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95da:	f043 011f 	orr.w	r1, r3, #31
    95de:	9b05      	ldr	r3, [sp, #20]
    95e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    95e4:	f006 fb00 	bl	fbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    95e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    95ec:	2b00      	cmp	r3, #0
    95ee:	d01c      	beq.n	962a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    95f0:	e008      	b.n	9604 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    95f2:	ab03      	add	r3, sp, #12
    95f4:	2100      	movs	r1, #0
    95f6:	4618      	mov	r0, r3
    95f8:	f7f9 f8ff 	bl	27fa <OsIf_GetElapsed>
    95fc:	4602      	mov	r2, r0
    95fe:	9b06      	ldr	r3, [sp, #24]
    9600:	4413      	add	r3, r2
    9602:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    9604:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9608:	9b05      	ldr	r3, [sp, #20]
    960a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    960e:	f003 031f 	and.w	r3, r3, #31
    9612:	2b1f      	cmp	r3, #31
    9614:	d003      	beq.n	961e <Adc_Ip_SetDisabledChannel+0x8e>
    9616:	9a06      	ldr	r2, [sp, #24]
    9618:	9b04      	ldr	r3, [sp, #16]
    961a:	429a      	cmp	r2, r3
    961c:	d3e9      	bcc.n	95f2 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    961e:	9a06      	ldr	r2, [sp, #24]
    9620:	9b04      	ldr	r3, [sp, #16]
    9622:	429a      	cmp	r2, r3
    9624:	d301      	bcc.n	962a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    9626:	2302      	movs	r3, #2
    9628:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    962a:	9b07      	ldr	r3, [sp, #28]
}
    962c:	4618      	mov	r0, r3
    962e:	b009      	add	sp, #36	; 0x24
    9630:	f85d fb04 	ldr.w	pc, [sp], #4
    9634:	00016710 	.word	0x00016710
    9638:	000186a0 	.word	0x000186a0

0000963c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    963c:	b500      	push	{lr}
    963e:	b087      	sub	sp, #28
    9640:	9003      	str	r0, [sp, #12]
    9642:	9102      	str	r1, [sp, #8]
    9644:	4613      	mov	r3, r2
    9646:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    964a:	4a0a      	ldr	r2, [pc, #40]	; (9674 <Adc_Ip_StartConversion+0x38>)
    964c:	9b03      	ldr	r3, [sp, #12]
    964e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9652:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    9654:	f006 faee 	bl	fc34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    9658:	f89d 3007 	ldrb.w	r3, [sp, #7]
    965c:	9a02      	ldr	r2, [sp, #8]
    965e:	2100      	movs	r1, #0
    9660:	9805      	ldr	r0, [sp, #20]
    9662:	f7ff fc50 	bl	8f06 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    9666:	f006 fb11 	bl	fc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    966a:	bf00      	nop
    966c:	b007      	add	sp, #28
    966e:	f85d fb04 	ldr.w	pc, [sp], #4
    9672:	bf00      	nop
    9674:	00016710 	.word	0x00016710

00009678 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    9678:	b084      	sub	sp, #16
    967a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    967c:	4a0b      	ldr	r2, [pc, #44]	; (96ac <Adc_Ip_GetConvActiveFlag+0x34>)
    967e:	9b01      	ldr	r3, [sp, #4]
    9680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9684:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    9686:	9b03      	ldr	r3, [sp, #12]
    9688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    968c:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    968e:	9b02      	ldr	r3, [sp, #8]
    9690:	09db      	lsrs	r3, r3, #7
    9692:	f003 0301 	and.w	r3, r3, #1
    9696:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    9698:	9b02      	ldr	r3, [sp, #8]
    969a:	2b00      	cmp	r3, #0
    969c:	bf14      	ite	ne
    969e:	2301      	movne	r3, #1
    96a0:	2300      	moveq	r3, #0
    96a2:	b2db      	uxtb	r3, r3
}
    96a4:	4618      	mov	r0, r3
    96a6:	b004      	add	sp, #16
    96a8:	4770      	bx	lr
    96aa:	bf00      	nop
    96ac:	00016710 	.word	0x00016710

000096b0 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    96b0:	b500      	push	{lr}
    96b2:	b085      	sub	sp, #20
    96b4:	9001      	str	r0, [sp, #4]
    96b6:	460b      	mov	r3, r1
    96b8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    96bc:	4a08      	ldr	r2, [pc, #32]	; (96e0 <Adc_Ip_GetChanInterrupt+0x30>)
    96be:	9b01      	ldr	r3, [sp, #4]
    96c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96cc:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    96ce:	9803      	ldr	r0, [sp, #12]
    96d0:	f7ff fc5e 	bl	8f90 <Adc_HwAcc_GetAIEN>
    96d4:	4603      	mov	r3, r0
}
    96d6:	4618      	mov	r0, r3
    96d8:	b005      	add	sp, #20
    96da:	f85d fb04 	ldr.w	pc, [sp], #4
    96de:	bf00      	nop
    96e0:	00016710 	.word	0x00016710

000096e4 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    96e4:	b500      	push	{lr}
    96e6:	b085      	sub	sp, #20
    96e8:	9001      	str	r0, [sp, #4]
    96ea:	460b      	mov	r3, r1
    96ec:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    96f0:	4a08      	ldr	r2, [pc, #32]	; (9714 <Adc_Ip_GetConvCompleteFlag+0x30>)
    96f2:	9b01      	ldr	r3, [sp, #4]
    96f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9700:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    9702:	9803      	ldr	r0, [sp, #12]
    9704:	f7ff fc52 	bl	8fac <Adc_HwAcc_GetCOCO>
    9708:	4603      	mov	r3, r0
}
    970a:	4618      	mov	r0, r3
    970c:	b005      	add	sp, #20
    970e:	f85d fb04 	ldr.w	pc, [sp], #4
    9712:	bf00      	nop
    9714:	00016710 	.word	0x00016710

00009718 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    9718:	b500      	push	{lr}
    971a:	b085      	sub	sp, #20
    971c:	9001      	str	r0, [sp, #4]
    971e:	460b      	mov	r3, r1
    9720:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9724:	4a07      	ldr	r2, [pc, #28]	; (9744 <Adc_Ip_GetConvData+0x2c>)
    9726:	9b01      	ldr	r3, [sp, #4]
    9728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    972c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    972e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9732:	4619      	mov	r1, r3
    9734:	9803      	ldr	r0, [sp, #12]
    9736:	f7ff fc47 	bl	8fc8 <Adc_HwAcc_GetData>
    973a:	4603      	mov	r3, r0
}
    973c:	4618      	mov	r0, r3
    973e:	b005      	add	sp, #20
    9740:	f85d fb04 	ldr.w	pc, [sp], #4
    9744:	00016710 	.word	0x00016710

00009748 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    9748:	b500      	push	{lr}
    974a:	b093      	sub	sp, #76	; 0x4c
    974c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    974e:	4a59      	ldr	r2, [pc, #356]	; (98b4 <Adc_Ip_DoCalibration+0x16c>)
    9750:	9b01      	ldr	r3, [sp, #4]
    9752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9756:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9758:	2300      	movs	r3, #0
    975a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    975c:	2100      	movs	r1, #0
    975e:	4856      	ldr	r0, [pc, #344]	; (98b8 <Adc_Ip_DoCalibration+0x170>)
    9760:	f7f9 f87e 	bl	2860 <OsIf_MicrosToTicks>
    9764:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    9766:	2000      	movs	r0, #0
    9768:	f7f9 f82e 	bl	27c8 <OsIf_GetCounter>
    976c:	4603      	mov	r3, r0
    976e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    9770:	2300      	movs	r3, #0
    9772:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    9774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    977a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    977c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    977e:	089b      	lsrs	r3, r3, #2
    9780:	f003 0301 	and.w	r3, r3, #1
    9784:	2b00      	cmp	r3, #0
    9786:	bf14      	ite	ne
    9788:	2301      	movne	r3, #1
    978a:	2300      	moveq	r3, #0
    978c:	b2db      	uxtb	r3, r3
    978e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    9792:	980d      	ldr	r0, [sp, #52]	; 0x34
    9794:	f7ff fb71 	bl	8e7a <Adc_HwAcc_GetAverageSelect>
    9798:	4603      	mov	r3, r0
    979a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    979c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    979e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    97a0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    97a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    97a4:	b2db      	uxtb	r3, r3
    97a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    97aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    97b0:	4618      	mov	r0, r3
    97b2:	f7ff fb99 	bl	8ee8 <Adc_HwAcc_GetTriggerMode>
    97b6:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    97b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    97bc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    97be:	980d      	ldr	r0, [sp, #52]	; 0x34
    97c0:	f7ff fad8 	bl	8d74 <Adc_HwAcc_GetClockDivide>
    97c4:	4603      	mov	r3, r0
    97c6:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    97c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    97ca:	f7ff faf2 	bl	8db2 <Adc_HwAcc_GetInputClock>
    97ce:	4603      	mov	r3, r0
    97d0:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    97d2:	2301      	movs	r3, #1
    97d4:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    97d8:	2303      	movs	r3, #3
    97da:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    97dc:	230c      	movs	r3, #12
    97de:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    97e2:	4a36      	ldr	r2, [pc, #216]	; (98bc <Adc_Ip_DoCalibration+0x174>)
    97e4:	9b01      	ldr	r3, [sp, #4]
    97e6:	214c      	movs	r1, #76	; 0x4c
    97e8:	fb01 f303 	mul.w	r3, r1, r3
    97ec:	4413      	add	r3, r2
    97ee:	3304      	adds	r3, #4
    97f0:	681b      	ldr	r3, [r3, #0]
    97f2:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    97f4:	9b08      	ldr	r3, [sp, #32]
    97f6:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    97f8:	ab03      	add	r3, sp, #12
    97fa:	2200      	movs	r2, #0
    97fc:	4619      	mov	r1, r3
    97fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9800:	f7ff fbfa 	bl	8ff8 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    9804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9806:	2200      	movs	r2, #0
    9808:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    980c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    980e:	2200      	movs	r2, #0
    9810:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    9814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9816:	2200      	movs	r2, #0
    9818:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    981c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    981e:	2200      	movs	r2, #0
    9820:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    9824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9826:	2200      	movs	r2, #0
    9828:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    982c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    982e:	2200      	movs	r2, #0
    9830:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    9834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9836:	2200      	movs	r2, #0
    9838:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    983c:	f006 fd80 	bl	10340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    9840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9846:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    9848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    984a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    984e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    9850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9856:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    9858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    985a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    985c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    9860:	f006 fd9a 	bl	10398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9864:	e008      	b.n	9878 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    9866:	ab0b      	add	r3, sp, #44	; 0x2c
    9868:	2100      	movs	r1, #0
    986a:	4618      	mov	r0, r3
    986c:	f7f8 ffc5 	bl	27fa <OsIf_GetElapsed>
    9870:	4602      	mov	r2, r0
    9872:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9874:	4413      	add	r3, r2
    9876:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    987a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    987e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9882:	2b00      	cmp	r3, #0
    9884:	d003      	beq.n	988e <Adc_Ip_DoCalibration+0x146>
    9886:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    988a:	429a      	cmp	r2, r3
    988c:	d3eb      	bcc.n	9866 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    988e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9892:	429a      	cmp	r2, r3
    9894:	d301      	bcc.n	989a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    9896:	2302      	movs	r3, #2
    9898:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    989a:	ab07      	add	r3, sp, #28
    989c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    989e:	4619      	mov	r1, r3
    98a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    98a2:	f7ff fba9 	bl	8ff8 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    98a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    98a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    98aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    98ac:	4618      	mov	r0, r3
    98ae:	b013      	add	sp, #76	; 0x4c
    98b0:	f85d fb04 	ldr.w	pc, [sp], #4
    98b4:	00016710 	.word	0x00016710
    98b8:	000186a0 	.word	0x000186a0
    98bc:	1fff8d54 	.word	0x1fff8d54

000098c0 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    98c0:	b500      	push	{lr}
    98c2:	b089      	sub	sp, #36	; 0x24
    98c4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    98c6:	4a1e      	ldr	r2, [pc, #120]	; (9940 <Adc_Ip_ClearLatchedTriggers+0x80>)
    98c8:	9b01      	ldr	r3, [sp, #4]
    98ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ce:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    98d0:	2300      	movs	r3, #0
    98d2:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    98d4:	2100      	movs	r1, #0
    98d6:	481b      	ldr	r0, [pc, #108]	; (9944 <Adc_Ip_ClearLatchedTriggers+0x84>)
    98d8:	f7f8 ffc2 	bl	2860 <OsIf_MicrosToTicks>
    98dc:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    98de:	2000      	movs	r0, #0
    98e0:	f7f8 ff72 	bl	27c8 <OsIf_GetCounter>
    98e4:	4603      	mov	r3, r0
    98e6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    98e8:	2300      	movs	r3, #0
    98ea:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    98ec:	f005 ffb6 	bl	f85c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    98f0:	9b05      	ldr	r3, [sp, #20]
    98f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    98f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    98f8:	9b05      	ldr	r3, [sp, #20]
    98fa:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    98fc:	f005 ffda 	bl	f8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9900:	e008      	b.n	9914 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    9902:	ab03      	add	r3, sp, #12
    9904:	2100      	movs	r1, #0
    9906:	4618      	mov	r0, r3
    9908:	f7f8 ff77 	bl	27fa <OsIf_GetElapsed>
    990c:	4602      	mov	r2, r0
    990e:	9b06      	ldr	r3, [sp, #24]
    9910:	4413      	add	r3, r2
    9912:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9914:	9b05      	ldr	r3, [sp, #20]
    9916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    991a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    991e:	2b00      	cmp	r3, #0
    9920:	d003      	beq.n	992a <Adc_Ip_ClearLatchedTriggers+0x6a>
    9922:	9a06      	ldr	r2, [sp, #24]
    9924:	9b04      	ldr	r3, [sp, #16]
    9926:	429a      	cmp	r2, r3
    9928:	d3eb      	bcc.n	9902 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    992a:	9a06      	ldr	r2, [sp, #24]
    992c:	9b04      	ldr	r3, [sp, #16]
    992e:	429a      	cmp	r2, r3
    9930:	d301      	bcc.n	9936 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    9932:	2302      	movs	r3, #2
    9934:	9307      	str	r3, [sp, #28]
    }

    return Status;
    9936:	9b07      	ldr	r3, [sp, #28]
}
    9938:	4618      	mov	r0, r3
    993a:	b009      	add	sp, #36	; 0x24
    993c:	f85d fb04 	ldr.w	pc, [sp], #4
    9940:	00016710 	.word	0x00016710
    9944:	000186a0 	.word	0x000186a0

00009948 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    9948:	b500      	push	{lr}
    994a:	b085      	sub	sp, #20
    994c:	9001      	str	r0, [sp, #4]
    994e:	460b      	mov	r3, r1
    9950:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9954:	4a0c      	ldr	r2, [pc, #48]	; (9988 <Adc_Ip_EnableChannelNotification+0x40>)
    9956:	9b01      	ldr	r3, [sp, #4]
    9958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    995e:	f006 f9bb 	bl	fcd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    9962:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9966:	9b03      	ldr	r3, [sp, #12]
    9968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    996c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9970:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    9974:	9b03      	ldr	r3, [sp, #12]
    9976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    997a:	f006 f9d9 	bl	fd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    997e:	bf00      	nop
    9980:	b005      	add	sp, #20
    9982:	f85d fb04 	ldr.w	pc, [sp], #4
    9986:	bf00      	nop
    9988:	00016710 	.word	0x00016710

0000998c <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    998c:	b500      	push	{lr}
    998e:	b085      	sub	sp, #20
    9990:	9001      	str	r0, [sp, #4]
    9992:	460b      	mov	r3, r1
    9994:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9998:	4a0c      	ldr	r2, [pc, #48]	; (99cc <Adc_Ip_DisableChannelNotification+0x40>)
    999a:	9b01      	ldr	r3, [sp, #4]
    999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    99a2:	f006 f9eb 	bl	fd7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    99a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99aa:	9b03      	ldr	r3, [sp, #12]
    99ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    99b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    99b4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    99b8:	9b03      	ldr	r3, [sp, #12]
    99ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    99be:	f006 fa09 	bl	fdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    99c2:	bf00      	nop
    99c4:	b005      	add	sp, #20
    99c6:	f85d fb04 	ldr.w	pc, [sp], #4
    99ca:	bf00      	nop
    99cc:	00016710 	.word	0x00016710

000099d0 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    99d0:	b500      	push	{lr}
    99d2:	b085      	sub	sp, #20
    99d4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    99d6:	4a0a      	ldr	r2, [pc, #40]	; (9a00 <Adc_Ip_ClearTrigErrReg+0x30>)
    99d8:	9b01      	ldr	r3, [sp, #4]
    99da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99de:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    99e0:	f006 fb66 	bl	100b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    99e4:	9b03      	ldr	r3, [sp, #12]
    99e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    99ea:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    99ee:	9b03      	ldr	r3, [sp, #12]
    99f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    99f4:	f006 fb88 	bl	10108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    99f8:	bf00      	nop
    99fa:	b005      	add	sp, #20
    99fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9a00:	00016710 	.word	0x00016710

00009a04 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    9a04:	b084      	sub	sp, #16
    9a06:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9a08:	4a06      	ldr	r2, [pc, #24]	; (9a24 <Adc_Ip_GetTrigErrReg+0x20>)
    9a0a:	9b01      	ldr	r3, [sp, #4]
    9a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a10:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    9a12:	9b03      	ldr	r3, [sp, #12]
    9a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9a18:	0e1b      	lsrs	r3, r3, #24
    9a1a:	f003 030f 	and.w	r3, r3, #15
}
    9a1e:	4618      	mov	r0, r3
    9a20:	b004      	add	sp, #16
    9a22:	4770      	bx	lr
    9a24:	00016710 	.word	0x00016710

00009a28 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    9a28:	b082      	sub	sp, #8
    9a2a:	9001      	str	r0, [sp, #4]
    9a2c:	460b      	mov	r3, r1
    9a2e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    9a32:	4a06      	ldr	r2, [pc, #24]	; (9a4c <Adc_Ip_GetDataAddress+0x24>)
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9a3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9a3e:	3312      	adds	r3, #18
    9a40:	009b      	lsls	r3, r3, #2
    9a42:	4413      	add	r3, r2
}
    9a44:	4618      	mov	r0, r3
    9a46:	b002      	add	sp, #8
    9a48:	4770      	bx	lr
    9a4a:	bf00      	nop
    9a4c:	00016710 	.word	0x00016710

00009a50 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    9a50:	b088      	sub	sp, #32
    9a52:	9003      	str	r0, [sp, #12]
    9a54:	9102      	str	r1, [sp, #8]
    9a56:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9a58:	4a25      	ldr	r2, [pc, #148]	; (9af0 <Adc_Ip_GetChanData+0xa0>)
    9a5a:	9b03      	ldr	r3, [sp, #12]
    9a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a60:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9a62:	2300      	movs	r3, #0
    9a64:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    9a66:	2300      	movs	r3, #0
    9a68:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    9a6c:	2300      	movs	r3, #0
    9a6e:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9a72:	2300      	movs	r3, #0
    9a74:	f88d 3019 	strb.w	r3, [sp, #25]
    9a78:	e019      	b.n	9aae <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    9a7a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    9a7e:	481d      	ldr	r0, [pc, #116]	; (9af4 <Adc_Ip_GetChanData+0xa4>)
    9a80:	9a03      	ldr	r2, [sp, #12]
    9a82:	4613      	mov	r3, r2
    9a84:	00db      	lsls	r3, r3, #3
    9a86:	4413      	add	r3, r2
    9a88:	005b      	lsls	r3, r3, #1
    9a8a:	4413      	add	r3, r2
    9a8c:	440b      	add	r3, r1
    9a8e:	3302      	adds	r3, #2
    9a90:	009b      	lsls	r3, r3, #2
    9a92:	4403      	add	r3, r0
    9a94:	685b      	ldr	r3, [r3, #4]
    9a96:	9a02      	ldr	r2, [sp, #8]
    9a98:	429a      	cmp	r2, r3
    9a9a:	d103      	bne.n	9aa4 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    9a9c:	2301      	movs	r3, #1
    9a9e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    9aa2:	e008      	b.n	9ab6 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9aa4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9aa8:	3301      	adds	r3, #1
    9aaa:	f88d 3019 	strb.w	r3, [sp, #25]
    9aae:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9ab2:	2b0f      	cmp	r3, #15
    9ab4:	d9e1      	bls.n	9a7a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    9ab6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9aba:	2b00      	cmp	r3, #0
    9abc:	d00e      	beq.n	9adc <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    9abe:	f89d 2019 	ldrb.w	r2, [sp, #25]
    9ac2:	9b05      	ldr	r3, [sp, #20]
    9ac4:	3212      	adds	r2, #18
    9ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9aca:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    9ace:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9ad6:	f8ad 301a 	strh.w	r3, [sp, #26]
    9ada:	e001      	b.n	9ae0 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    9adc:	2301      	movs	r3, #1
    9ade:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    9ae0:	9b01      	ldr	r3, [sp, #4]
    9ae2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9ae6:	801a      	strh	r2, [r3, #0]

    return Status;
    9ae8:	9b07      	ldr	r3, [sp, #28]
}
    9aea:	4618      	mov	r0, r3
    9aec:	b008      	add	sp, #32
    9aee:	4770      	bx	lr
    9af0:	00016710 	.word	0x00016710
    9af4:	1fff8d54 	.word	0x1fff8d54

00009af8 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    9af8:	b500      	push	{lr}
    9afa:	b085      	sub	sp, #20
    9afc:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    9afe:	2300      	movs	r3, #0
    9b00:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    9b04:	2300      	movs	r3, #0
    9b06:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    9b0a:	4a32      	ldr	r2, [pc, #200]	; (9bd4 <Adc_Ip_IRQHandler+0xdc>)
    9b0c:	9b01      	ldr	r3, [sp, #4]
    9b0e:	214c      	movs	r1, #76	; 0x4c
    9b10:	fb01 f303 	mul.w	r3, r1, r3
    9b14:	4413      	add	r3, r2
    9b16:	781b      	ldrb	r3, [r3, #0]
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d040      	beq.n	9b9e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    9b1c:	4a2d      	ldr	r2, [pc, #180]	; (9bd4 <Adc_Ip_IRQHandler+0xdc>)
    9b1e:	9b01      	ldr	r3, [sp, #4]
    9b20:	214c      	movs	r1, #76	; 0x4c
    9b22:	fb01 f303 	mul.w	r3, r1, r3
    9b26:	4413      	add	r3, r2
    9b28:	3308      	adds	r3, #8
    9b2a:	681b      	ldr	r3, [r3, #0]
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d04d      	beq.n	9bcc <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b30:	2300      	movs	r3, #0
    9b32:	f88d 300f 	strb.w	r3, [sp, #15]
    9b36:	e02d      	b.n	9b94 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9b38:	4a27      	ldr	r2, [pc, #156]	; (9bd8 <Adc_Ip_IRQHandler+0xe0>)
    9b3a:	9b01      	ldr	r3, [sp, #4]
    9b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9b48:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    9b4a:	9802      	ldr	r0, [sp, #8]
    9b4c:	f7ff fa20 	bl	8f90 <Adc_HwAcc_GetAIEN>
    9b50:	4603      	mov	r3, r0
    9b52:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    9b56:	9802      	ldr	r0, [sp, #8]
    9b58:	f7ff fa28 	bl	8fac <Adc_HwAcc_GetCOCO>
    9b5c:	4603      	mov	r3, r0
    9b5e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    9b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9b66:	2b00      	cmp	r3, #0
    9b68:	d00f      	beq.n	9b8a <Adc_Ip_IRQHandler+0x92>
    9b6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d00b      	beq.n	9b8a <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    9b72:	4a18      	ldr	r2, [pc, #96]	; (9bd4 <Adc_Ip_IRQHandler+0xdc>)
    9b74:	9b01      	ldr	r3, [sp, #4]
    9b76:	214c      	movs	r1, #76	; 0x4c
    9b78:	fb01 f303 	mul.w	r3, r1, r3
    9b7c:	4413      	add	r3, r2
    9b7e:	3308      	adds	r3, #8
    9b80:	681b      	ldr	r3, [r3, #0]
    9b82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b86:	4610      	mov	r0, r2
    9b88:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b8e:	3301      	adds	r3, #1
    9b90:	f88d 300f 	strb.w	r3, [sp, #15]
    9b94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b98:	2b0f      	cmp	r3, #15
    9b9a:	d9cd      	bls.n	9b38 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    9b9c:	e016      	b.n	9bcc <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b9e:	2300      	movs	r3, #0
    9ba0:	f88d 300f 	strb.w	r3, [sp, #15]
    9ba4:	e00e      	b.n	9bc4 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9ba6:	4a0c      	ldr	r2, [pc, #48]	; (9bd8 <Adc_Ip_IRQHandler+0xe0>)
    9ba8:	9b01      	ldr	r3, [sp, #4]
    9baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bae:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9bb2:	4611      	mov	r1, r2
    9bb4:	4618      	mov	r0, r3
    9bb6:	f7ff fa07 	bl	8fc8 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9bba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bbe:	3301      	adds	r3, #1
    9bc0:	f88d 300f 	strb.w	r3, [sp, #15]
    9bc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bc8:	2b0f      	cmp	r3, #15
    9bca:	d9ec      	bls.n	9ba6 <Adc_Ip_IRQHandler+0xae>
}
    9bcc:	bf00      	nop
    9bce:	b005      	add	sp, #20
    9bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    9bd4:	1fff8d54 	.word	0x1fff8d54
    9bd8:	00016710 	.word	0x00016710

00009bdc <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9bdc:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    9bde:	2000      	movs	r0, #0
    9be0:	f7ff ff8a 	bl	9af8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9be4:	f3bf 8f4f 	dsb	sy
}
    9be8:	bf00      	nop
    9bea:	bd08      	pop	{r3, pc}

00009bec <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9bec:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    9bee:	2001      	movs	r0, #1
    9bf0:	f7ff ff82 	bl	9af8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9bf4:	f3bf 8f4f 	dsb	sy
}
    9bf8:	bf00      	nop
    9bfa:	bd08      	pop	{r3, pc}

00009bfc <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    9bfc:	b510      	push	{r4, lr}
    9bfe:	b084      	sub	sp, #16
    9c00:	4603      	mov	r3, r0
    9c02:	460a      	mov	r2, r1
    9c04:	f88d 3007 	strb.w	r3, [sp, #7]
    9c08:	4613      	mov	r3, r2
    9c0a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    9c0e:	2300      	movs	r3, #0
    9c10:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    9c14:	2300      	movs	r3, #0
    9c16:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    9c1a:	f005 fa47 	bl	f0ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9c1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c22:	4a24      	ldr	r2, [pc, #144]	; (9cb4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c24:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c28:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    9c2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c30:	2b01      	cmp	r3, #1
    9c32:	d806      	bhi.n	9c42 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    9c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c38:	4a1e      	ldr	r2, [pc, #120]	; (9cb4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c3a:	2100      	movs	r1, #0
    9c3c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    9c40:	e032      	b.n	9ca8 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9c46:	3301      	adds	r3, #1
    9c48:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c4c:	e01b      	b.n	9c86 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    9c4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9c52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c56:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9c5a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c5e:	3a01      	subs	r2, #1
    9c60:	4c14      	ldr	r4, [pc, #80]	; (9cb4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c62:	0080      	lsls	r0, r0, #2
    9c64:	4403      	add	r3, r0
    9c66:	005b      	lsls	r3, r3, #1
    9c68:	4423      	add	r3, r4
    9c6a:	885b      	ldrh	r3, [r3, #2]
    9c6c:	b29c      	uxth	r4, r3
    9c6e:	4811      	ldr	r0, [pc, #68]	; (9cb4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c70:	008b      	lsls	r3, r1, #2
    9c72:	4413      	add	r3, r2
    9c74:	005b      	lsls	r3, r3, #1
    9c76:	4403      	add	r3, r0
    9c78:	4622      	mov	r2, r4
    9c7a:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c80:	3301      	adds	r3, #1
    9c82:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c86:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c8e:	429a      	cmp	r2, r3
    9c90:	d3dd      	bcc.n	9c4e <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    9c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c96:	4a07      	ldr	r2, [pc, #28]	; (9cb4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c98:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9c9c:	b292      	uxth	r2, r2
    9c9e:	3a01      	subs	r2, #1
    9ca0:	b291      	uxth	r1, r2
    9ca2:	4a04      	ldr	r2, [pc, #16]	; (9cb4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9ca4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    9ca8:	f005 fa2c 	bl	f104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    9cac:	bf00      	nop
    9cae:	b004      	add	sp, #16
    9cb0:	bd10      	pop	{r4, pc}
    9cb2:	bf00      	nop
    9cb4:	1fff8d44 	.word	0x1fff8d44

00009cb8 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9cb8:	b500      	push	{lr}
    9cba:	b087      	sub	sp, #28
    9cbc:	9003      	str	r0, [sp, #12]
    9cbe:	9102      	str	r1, [sp, #8]
    9cc0:	9201      	str	r2, [sp, #4]
    9cc2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9cc6:	2300      	movs	r3, #0
    9cc8:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9ccc:	9b03      	ldr	r3, [sp, #12]
    9cce:	789b      	ldrb	r3, [r3, #2]
    9cd0:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9cd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9cd8:	4a29      	ldr	r2, [pc, #164]	; (9d80 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cde:	681a      	ldr	r2, [r3, #0]
    9ce0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9ce4:	4413      	add	r3, r2
    9ce6:	7c1b      	ldrb	r3, [r3, #16]
    9ce8:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    9cec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9cf0:	4a23      	ldr	r2, [pc, #140]	; (9d80 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf6:	681b      	ldr	r3, [r3, #0]
    9cf8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    9cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d00:	695b      	ldr	r3, [r3, #20]
    9d02:	4618      	mov	r0, r3
    9d04:	f000 fbce 	bl	a4a4 <Adc_Ipw_CalculateNumsBitShift>
    9d08:	4603      	mov	r3, r0
    9d0a:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9d0e:	9b03      	ldr	r3, [sp, #12]
    9d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9d14:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9d18:	2300      	movs	r3, #0
    9d1a:	f88d 3017 	strb.w	r3, [sp, #23]
    9d1e:	e022      	b.n	9d66 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    9d20:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d24:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9d28:	4611      	mov	r1, r2
    9d2a:	4618      	mov	r0, r3
    9d2c:	f7ff fcf4 	bl	9718 <Adc_Ip_GetConvData>
    9d30:	4603      	mov	r3, r0
    9d32:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    9d36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d3a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d3e:	fa02 f303 	lsl.w	r3, r2, r3
    9d42:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9d46:	9b01      	ldr	r3, [sp, #4]
    9d48:	2201      	movs	r2, #1
    9d4a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    9d4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d50:	005b      	lsls	r3, r3, #1
    9d52:	9a02      	ldr	r2, [sp, #8]
    9d54:	4413      	add	r3, r2
    9d56:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d5a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9d5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d60:	3301      	adds	r3, #1
    9d62:	f88d 3017 	strb.w	r3, [sp, #23]
    9d66:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9d6a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d6e:	429a      	cmp	r2, r3
    9d70:	d3d6      	bcc.n	9d20 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    9d72:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9d76:	4618      	mov	r0, r3
    9d78:	b007      	add	sp, #28
    9d7a:	f85d fb04 	ldr.w	pc, [sp], #4
    9d7e:	bf00      	nop
    9d80:	1fff8d18 	.word	0x1fff8d18

00009d84 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9d84:	b500      	push	{lr}
    9d86:	b087      	sub	sp, #28
    9d88:	9003      	str	r0, [sp, #12]
    9d8a:	9102      	str	r1, [sp, #8]
    9d8c:	9201      	str	r2, [sp, #4]
    9d8e:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    9d92:	2301      	movs	r3, #1
    9d94:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9d98:	2300      	movs	r3, #0
    9d9a:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9d9e:	9b03      	ldr	r3, [sp, #12]
    9da0:	789b      	ldrb	r3, [r3, #2]
    9da2:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9da6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9daa:	4a19      	ldr	r2, [pc, #100]	; (9e10 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9db0:	681a      	ldr	r2, [r3, #0]
    9db2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9db6:	4413      	add	r3, r2
    9db8:	7c1b      	ldrb	r3, [r3, #16]
    9dba:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    9dbe:	9b03      	ldr	r3, [sp, #12]
    9dc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9dc4:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9dc8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9dcc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9dd0:	2100      	movs	r1, #0
    9dd2:	4618      	mov	r0, r3
    9dd4:	f000 fe2a 	bl	aa2c <Adc_Ipw_CheckValidConversion>
    9dd8:	4603      	mov	r3, r0
    9dda:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    9dde:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9de2:	2b00      	cmp	r3, #0
    9de4:	d00a      	beq.n	9dfc <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9de6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9dea:	9a01      	ldr	r2, [sp, #4]
    9dec:	9902      	ldr	r1, [sp, #8]
    9dee:	9803      	ldr	r0, [sp, #12]
    9df0:	f7ff ff62 	bl	9cb8 <Adc_Ipw_ReadGroupConvData>
    9df4:	4603      	mov	r3, r0
    9df6:	f88d 3017 	strb.w	r3, [sp, #23]
    9dfa:	e002      	b.n	9e02 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9dfc:	2301      	movs	r3, #1
    9dfe:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    9e02:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9e06:	4618      	mov	r0, r3
    9e08:	b007      	add	sp, #28
    9e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e0e:	bf00      	nop
    9e10:	1fff8d18 	.word	0x1fff8d18

00009e14 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9e14:	b088      	sub	sp, #32
    9e16:	4603      	mov	r3, r0
    9e18:	9100      	str	r1, [sp, #0]
    9e1a:	f8ad 3006 	strh.w	r3, [sp, #6]
    9e1e:	4613      	mov	r3, r2
    9e20:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9e24:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e28:	4a3a      	ldr	r2, [pc, #232]	; (9f14 <Adc_Ipw_WriteDataBuffer+0x100>)
    9e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e2e:	68da      	ldr	r2, [r3, #12]
    9e30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9e34:	005b      	lsls	r3, r3, #1
    9e36:	4413      	add	r3, r2
    9e38:	881b      	ldrh	r3, [r3, #0]
    9e3a:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9e3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e42:	4a34      	ldr	r2, [pc, #208]	; (9f14 <Adc_Ipw_WriteDataBuffer+0x100>)
    9e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e48:	685a      	ldr	r2, [r3, #4]
    9e4a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9e4e:	2134      	movs	r1, #52	; 0x34
    9e50:	fb01 f303 	mul.w	r3, r1, r3
    9e54:	4413      	add	r3, r2
    9e56:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9e58:	9b04      	ldr	r3, [sp, #16]
    9e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e5e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    9e62:	2300      	movs	r3, #0
    9e64:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    9e66:	2300      	movs	r3, #0
    9e68:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    9e6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e70:	4929      	ldr	r1, [pc, #164]	; (9f18 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e72:	4613      	mov	r3, r2
    9e74:	009b      	lsls	r3, r3, #2
    9e76:	4413      	add	r3, r2
    9e78:	009b      	lsls	r3, r3, #2
    9e7a:	440b      	add	r3, r1
    9e7c:	3308      	adds	r3, #8
    9e7e:	881b      	ldrh	r3, [r3, #0]
    9e80:	b29b      	uxth	r3, r3
    9e82:	3b01      	subs	r3, #1
    9e84:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    9e88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e8c:	4922      	ldr	r1, [pc, #136]	; (9f18 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e8e:	4613      	mov	r3, r2
    9e90:	009b      	lsls	r3, r3, #2
    9e92:	4413      	add	r3, r2
    9e94:	009b      	lsls	r3, r3, #2
    9e96:	440b      	add	r3, r1
    9e98:	3308      	adds	r3, #8
    9e9a:	881b      	ldrh	r3, [r3, #0]
    9e9c:	b29b      	uxth	r3, r3
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d104      	bne.n	9eac <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    9ea2:	9b04      	ldr	r3, [sp, #16]
    9ea4:	8b9b      	ldrh	r3, [r3, #28]
    9ea6:	3b01      	subs	r3, #1
    9ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9eac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9eb0:	4919      	ldr	r1, [pc, #100]	; (9f18 <Adc_Ipw_WriteDataBuffer+0x104>)
    9eb2:	4613      	mov	r3, r2
    9eb4:	009b      	lsls	r3, r3, #2
    9eb6:	4413      	add	r3, r2
    9eb8:	009b      	lsls	r3, r3, #2
    9eba:	440b      	add	r3, r1
    9ebc:	330c      	adds	r3, #12
    9ebe:	681a      	ldr	r2, [r3, #0]
    9ec0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9ec4:	005b      	lsls	r3, r3, #1
    9ec6:	4413      	add	r3, r2
    9ec8:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9eca:	9b04      	ldr	r3, [sp, #16]
    9ecc:	8b9b      	ldrh	r3, [r3, #28]
    9ece:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    9ed2:	2300      	movs	r3, #0
    9ed4:	f88d 301f 	strb.w	r3, [sp, #31]
    9ed8:	e012      	b.n	9f00 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9eda:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ede:	005b      	lsls	r3, r3, #1
    9ee0:	9a00      	ldr	r2, [sp, #0]
    9ee2:	4413      	add	r3, r2
    9ee4:	9a06      	ldr	r2, [sp, #24]
    9ee6:	8812      	ldrh	r2, [r2, #0]
    9ee8:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9eea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9eee:	005b      	lsls	r3, r3, #1
    9ef0:	9a06      	ldr	r2, [sp, #24]
    9ef2:	4413      	add	r3, r2
    9ef4:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9ef6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9efa:	3301      	adds	r3, #1
    9efc:	f88d 301f 	strb.w	r3, [sp, #31]
    9f00:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9f04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f08:	429a      	cmp	r2, r3
    9f0a:	d3e6      	bcc.n	9eda <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9f0c:	bf00      	nop
    9f0e:	bf00      	nop
    9f10:	b008      	add	sp, #32
    9f12:	4770      	bx	lr
    9f14:	1fff8d18 	.word	0x1fff8d18
    9f18:	1fff8d1c 	.word	0x1fff8d1c

00009f1c <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9f1c:	b500      	push	{lr}
    9f1e:	b089      	sub	sp, #36	; 0x24
    9f20:	9200      	str	r2, [sp, #0]
    9f22:	461a      	mov	r2, r3
    9f24:	4603      	mov	r3, r0
    9f26:	f88d 3007 	strb.w	r3, [sp, #7]
    9f2a:	460b      	mov	r3, r1
    9f2c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9f30:	4613      	mov	r3, r2
    9f32:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9f36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f3a:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9f3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f42:	f003 0307 	and.w	r3, r3, #7
    9f46:	b2db      	uxtb	r3, r3
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d006      	beq.n	9f5a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9f4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f50:	08db      	lsrs	r3, r3, #3
    9f52:	b2db      	uxtb	r3, r3
    9f54:	3301      	adds	r3, #1
    9f56:	b2db      	uxtb	r3, r3
    9f58:	e003      	b.n	9f62 <Adc_Ipw_ConfigurePdbChannels+0x46>
    9f5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f5e:	08db      	lsrs	r3, r3, #3
    9f60:	b2db      	uxtb	r3, r3
    9f62:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    9f66:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f6a:	4987      	ldr	r1, [pc, #540]	; (a188 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    9f6c:	4613      	mov	r3, r2
    9f6e:	009b      	lsls	r3, r3, #2
    9f70:	4413      	add	r3, r2
    9f72:	009b      	lsls	r3, r3, #2
    9f74:	440b      	add	r3, r1
    9f76:	3310      	adds	r3, #16
    9f78:	781b      	ldrb	r3, [r3, #0]
    9f7a:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9f7e:	4b83      	ldr	r3, [pc, #524]	; (a18c <Adc_Ipw_ConfigurePdbChannels+0x270>)
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	681a      	ldr	r2, [r3, #0]
    9f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f88:	4413      	add	r3, r2
    9f8a:	7c1b      	ldrb	r3, [r3, #16]
    9f8c:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9f90:	9b00      	ldr	r3, [sp, #0]
    9f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f94:	691b      	ldr	r3, [r3, #16]
    9f96:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9f98:	2300      	movs	r3, #0
    9f9a:	f88d 301f 	strb.w	r3, [sp, #31]
    9f9e:	e0e6      	b.n	a16e <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    9fa0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9fa4:	08db      	lsrs	r3, r3, #3
    9fa6:	b2db      	uxtb	r3, r3
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d102      	bne.n	9fb2 <Adc_Ipw_ConfigurePdbChannels+0x96>
    9fac:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9fb0:	e000      	b.n	9fb4 <Adc_Ipw_ConfigurePdbChannels+0x98>
    9fb2:	2308      	movs	r3, #8
    9fb4:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9fb8:	9b00      	ldr	r3, [sp, #0]
    9fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fbc:	7bdb      	ldrb	r3, [r3, #15]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d05e      	beq.n	a080 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9fc2:	9b00      	ldr	r3, [sp, #0]
    9fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fc6:	7b9b      	ldrb	r3, [r3, #14]
    9fc8:	f083 0301 	eor.w	r3, r3, #1
    9fcc:	b2db      	uxtb	r3, r3
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d02a      	beq.n	a028 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9fd2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9fd6:	f1c3 0308 	rsb	r3, r3, #8
    9fda:	22ff      	movs	r2, #255	; 0xff
    9fdc:	fa22 f303 	lsr.w	r3, r2, r3
    9fe0:	b2db      	uxtb	r3, r3
    9fe2:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9fe6:	2300      	movs	r3, #0
    9fe8:	f88d 301e 	strb.w	r3, [sp, #30]
    9fec:	e015      	b.n	a01a <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    9fee:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9ff2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9ff6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9ffa:	4413      	add	r3, r2
    9ffc:	005b      	lsls	r3, r3, #1
    9ffe:	9a05      	ldr	r2, [sp, #20]
    a000:	4413      	add	r3, r2
    a002:	881b      	ldrh	r3, [r3, #0]
    a004:	f89d 201e 	ldrb.w	r2, [sp, #30]
    a008:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a00c:	f001 fd16 	bl	ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    a010:	f89d 301e 	ldrb.w	r3, [sp, #30]
    a014:	3301      	adds	r3, #1
    a016:	f88d 301e 	strb.w	r3, [sp, #30]
    a01a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    a01e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a022:	429a      	cmp	r2, r3
    a024:	d3e3      	bcc.n	9fee <Adc_Ipw_ConfigurePdbChannels+0xd2>
    a026:	e051      	b.n	a0cc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    a028:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a02c:	2b00      	cmp	r3, #0
    a02e:	d110      	bne.n	a052 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    a030:	2301      	movs	r3, #1
    a032:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    a036:	9b05      	ldr	r3, [sp, #20]
    a038:	881b      	ldrh	r3, [r3, #0]
    a03a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a03e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a042:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a046:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a04a:	2200      	movs	r2, #0
    a04c:	f001 fcf6 	bl	ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a050:	e03c      	b.n	a0cc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    a052:	2301      	movs	r3, #1
    a054:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a058:	9b00      	ldr	r3, [sp, #0]
    a05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a05c:	899a      	ldrh	r2, [r3, #12]
    a05e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a062:	b29b      	uxth	r3, r3
    a064:	fb12 f303 	smulbb	r3, r2, r3
    a068:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a06c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a070:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a074:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a078:	2200      	movs	r2, #0
    a07a:	f001 fcdf 	bl	ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a07e:	e025      	b.n	a0cc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    a080:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a084:	2b00      	cmp	r3, #0
    a086:	d10b      	bne.n	a0a0 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    a088:	2301      	movs	r3, #1
    a08a:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    a08e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a092:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a096:	2300      	movs	r3, #0
    a098:	2200      	movs	r2, #0
    a09a:	f001 fccf 	bl	ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a09e:	e015      	b.n	a0cc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    a0a0:	2301      	movs	r3, #1
    a0a2:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a0a6:	9b00      	ldr	r3, [sp, #0]
    a0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0aa:	899a      	ldrh	r2, [r3, #12]
    a0ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a0b0:	b29b      	uxth	r3, r3
    a0b2:	fb12 f303 	smulbb	r3, r2, r3
    a0b6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a0ba:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a0be:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a0c2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a0c6:	2200      	movs	r2, #0
    a0c8:	f001 fcb8 	bl	ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a0cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a0d0:	4618      	mov	r0, r3
    a0d2:	f001 fb87 	bl	b7e4 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    a0d6:	f89d 201d 	ldrb.w	r2, [sp, #29]
    a0da:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0de:	1ad3      	subs	r3, r2, r3
    a0e0:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    a0e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0e8:	b29a      	uxth	r2, r3
    a0ea:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a0ee:	4413      	add	r3, r2
    a0f0:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a0f4:	9b00      	ldr	r3, [sp, #0]
    a0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0f8:	7b9b      	ldrb	r3, [r3, #14]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d01d      	beq.n	a13a <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    a0fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a102:	2b00      	cmp	r3, #0
    a104:	d10c      	bne.n	a120 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a106:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a10a:	f1c3 0308 	rsb	r3, r3, #8
    a10e:	22ff      	movs	r2, #255	; 0xff
    a110:	fa22 f303 	lsr.w	r3, r2, r3
    a114:	b2db      	uxtb	r3, r3
    a116:	3b01      	subs	r3, #1
    a118:	b2db      	uxtb	r3, r3
    a11a:	f88d 300e 	strb.w	r3, [sp, #14]
    a11e:	e00f      	b.n	a140 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a120:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a124:	f1c3 0308 	rsb	r3, r3, #8
    a128:	22ff      	movs	r2, #255	; 0xff
    a12a:	fa22 f303 	lsr.w	r3, r2, r3
    a12e:	b2db      	uxtb	r3, r3
    a130:	3b01      	subs	r3, #1
    a132:	b2db      	uxtb	r3, r3
    a134:	f88d 300e 	strb.w	r3, [sp, #14]
    a138:	e002      	b.n	a140 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a13a:	2300      	movs	r3, #0
    a13c:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    a140:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a144:	f1c3 0308 	rsb	r3, r3, #8
    a148:	22ff      	movs	r2, #255	; 0xff
    a14a:	fa22 f303 	lsr.w	r3, r2, r3
    a14e:	b2db      	uxtb	r3, r3
    a150:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a154:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a158:	aa03      	add	r2, sp, #12
    a15a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a15e:	4618      	mov	r0, r3
    a160:	f001 fb7c 	bl	b85c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    a164:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a168:	3301      	adds	r3, #1
    a16a:	f88d 301f 	strb.w	r3, [sp, #31]
    a16e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a172:	f89d 3019 	ldrb.w	r3, [sp, #25]
    a176:	429a      	cmp	r2, r3
    a178:	f4ff af12 	bcc.w	9fa0 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    a17c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a180:	4618      	mov	r0, r3
    a182:	b009      	add	sp, #36	; 0x24
    a184:	f85d fb04 	ldr.w	pc, [sp], #4
    a188:	1fff8d1c 	.word	0x1fff8d1c
    a18c:	1fff8d18 	.word	0x1fff8d18

0000a190 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    a190:	b500      	push	{lr}
    a192:	b089      	sub	sp, #36	; 0x24
    a194:	9202      	str	r2, [sp, #8]
    a196:	9301      	str	r3, [sp, #4]
    a198:	4603      	mov	r3, r0
    a19a:	f88d 300f 	strb.w	r3, [sp, #15]
    a19e:	460b      	mov	r3, r1
    a1a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    a1a4:	2300      	movs	r3, #0
    a1a6:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a1aa:	4b62      	ldr	r3, [pc, #392]	; (a334 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    a1ac:	681b      	ldr	r3, [r3, #0]
    a1ae:	681a      	ldr	r2, [r3, #0]
    a1b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1b4:	4413      	add	r3, r2
    a1b6:	7c1b      	ldrb	r3, [r3, #16]
    a1b8:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    a1bc:	9b02      	ldr	r3, [sp, #8]
    a1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1c0:	691b      	ldr	r3, [r3, #16]
    a1c2:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    a1c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1c8:	f003 0307 	and.w	r3, r3, #7
    a1cc:	b2db      	uxtb	r3, r3
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d006      	beq.n	a1e0 <Adc_Ipw_ConfigurePdbConversion+0x50>
    a1d2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1d6:	08db      	lsrs	r3, r3, #3
    a1d8:	b2db      	uxtb	r3, r3
    a1da:	3301      	adds	r3, #1
    a1dc:	b2db      	uxtb	r3, r3
    a1de:	e003      	b.n	a1e8 <Adc_Ipw_ConfigurePdbConversion+0x58>
    a1e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1e4:	08db      	lsrs	r3, r3, #3
    a1e6:	b2db      	uxtb	r3, r3
    a1e8:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    a1ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a1f0:	4618      	mov	r0, r3
    a1f2:	f001 fa61 	bl	b6b8 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    a1f6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a1fa:	9901      	ldr	r1, [sp, #4]
    a1fc:	4618      	mov	r0, r3
    a1fe:	f001 fa89 	bl	b714 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    a202:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a206:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a20a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a20e:	9a02      	ldr	r2, [sp, #8]
    a210:	f7ff fe84 	bl	9f1c <Adc_Ipw_ConfigurePdbChannels>
    a214:	4603      	mov	r3, r0
    a216:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    a21a:	9b02      	ldr	r3, [sp, #8]
    a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a21e:	7bdb      	ldrb	r3, [r3, #15]
    a220:	2b00      	cmp	r3, #0
    a222:	d02f      	beq.n	a284 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a224:	9b02      	ldr	r3, [sp, #8]
    a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a228:	7b9b      	ldrb	r3, [r3, #14]
    a22a:	f083 0301 	eor.w	r3, r3, #1
    a22e:	b2db      	uxtb	r3, r3
    a230:	2b00      	cmp	r3, #0
    a232:	d017      	beq.n	a264 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    a234:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a238:	493f      	ldr	r1, [pc, #252]	; (a338 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a23a:	4613      	mov	r3, r2
    a23c:	009b      	lsls	r3, r3, #2
    a23e:	4413      	add	r3, r2
    a240:	009b      	lsls	r3, r3, #2
    a242:	440b      	add	r3, r1
    a244:	3310      	adds	r3, #16
    a246:	781b      	ldrb	r3, [r3, #0]
    a248:	461a      	mov	r2, r3
    a24a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a24e:	4413      	add	r3, r2
    a250:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    a254:	3b01      	subs	r3, #1
    a256:	005b      	lsls	r3, r3, #1
    a258:	9a05      	ldr	r2, [sp, #20]
    a25a:	4413      	add	r3, r2
    a25c:	881b      	ldrh	r3, [r3, #0]
    a25e:	f8ad 301c 	strh.w	r3, [sp, #28]
    a262:	e01a      	b.n	a29a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    a264:	9b05      	ldr	r3, [sp, #20]
    a266:	881a      	ldrh	r2, [r3, #0]
    a268:	9b02      	ldr	r3, [sp, #8]
    a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a26c:	8999      	ldrh	r1, [r3, #12]
    a26e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a272:	3b01      	subs	r3, #1
    a274:	b29b      	uxth	r3, r3
    a276:	fb11 f303 	smulbb	r3, r1, r3
    a27a:	b29b      	uxth	r3, r3
    a27c:	4413      	add	r3, r2
    a27e:	f8ad 301c 	strh.w	r3, [sp, #28]
    a282:	e00a      	b.n	a29a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    a284:	9b02      	ldr	r3, [sp, #8]
    a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a288:	899a      	ldrh	r2, [r3, #12]
    a28a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a28e:	3b01      	subs	r3, #1
    a290:	b29b      	uxth	r3, r3
    a292:	fb12 f303 	smulbb	r3, r2, r3
    a296:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    a29a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a29e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a2a2:	4611      	mov	r1, r2
    a2a4:	4618      	mov	r0, r3
    a2a6:	f001 fab5 	bl	b814 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a2aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2ae:	4618      	mov	r0, r3
    a2b0:	f001 fa98 	bl	b7e4 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    a2b4:	2300      	movs	r3, #0
    a2b6:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    a2ba:	2300      	movs	r3, #0
    a2bc:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a2c0:	2300      	movs	r3, #0
    a2c2:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a2c6:	e00c      	b.n	a2e2 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a2c8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2cc:	aa04      	add	r2, sp, #16
    a2ce:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a2d2:	4618      	mov	r0, r3
    a2d4:	f001 fac2 	bl	b85c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a2d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a2dc:	3301      	adds	r3, #1
    a2de:	f88d 301f 	strb.w	r3, [sp, #31]
    a2e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a2e6:	2b01      	cmp	r3, #1
    a2e8:	d9ee      	bls.n	a2c8 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    a2ea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2ee:	4912      	ldr	r1, [pc, #72]	; (a338 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a2f0:	4613      	mov	r3, r2
    a2f2:	009b      	lsls	r3, r3, #2
    a2f4:	4413      	add	r3, r2
    a2f6:	009b      	lsls	r3, r3, #2
    a2f8:	440b      	add	r3, r1
    a2fa:	3310      	adds	r3, #16
    a2fc:	7819      	ldrb	r1, [r3, #0]
    a2fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a302:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a306:	440b      	add	r3, r1
    a308:	b2d8      	uxtb	r0, r3
    a30a:	490b      	ldr	r1, [pc, #44]	; (a338 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a30c:	4613      	mov	r3, r2
    a30e:	009b      	lsls	r3, r3, #2
    a310:	4413      	add	r3, r2
    a312:	009b      	lsls	r3, r3, #2
    a314:	440b      	add	r3, r1
    a316:	3310      	adds	r3, #16
    a318:	4602      	mov	r2, r0
    a31a:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    a31c:	9b01      	ldr	r3, [sp, #4]
    a31e:	2b0f      	cmp	r3, #15
    a320:	d104      	bne.n	a32c <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a322:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a326:	4618      	mov	r0, r3
    a328:	f001 fa34 	bl	b794 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    a32c:	bf00      	nop
    a32e:	b009      	add	sp, #36	; 0x24
    a330:	f85d fb04 	ldr.w	pc, [sp], #4
    a334:	1fff8d18 	.word	0x1fff8d18
    a338:	1fff8d1c 	.word	0x1fff8d1c

0000a33c <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    a33c:	b500      	push	{lr}
    a33e:	b087      	sub	sp, #28
    a340:	4603      	mov	r3, r0
    a342:	f88d 3007 	strb.w	r3, [sp, #7]
    a346:	460b      	mov	r3, r1
    a348:	f8ad 3004 	strh.w	r3, [sp, #4]
    a34c:	4613      	mov	r3, r2
    a34e:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a352:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a356:	4a36      	ldr	r2, [pc, #216]	; (a430 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a35c:	68da      	ldr	r2, [r3, #12]
    a35e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a362:	005b      	lsls	r3, r3, #1
    a364:	4413      	add	r3, r2
    a366:	881b      	ldrh	r3, [r3, #0]
    a368:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a36c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a370:	4a2f      	ldr	r2, [pc, #188]	; (a430 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a376:	681a      	ldr	r2, [r3, #0]
    a378:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a37c:	4413      	add	r3, r2
    a37e:	7c1b      	ldrb	r3, [r3, #16]
    a380:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    a384:	2300      	movs	r3, #0
    a386:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    a38a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a38e:	4618      	mov	r0, r3
    a390:	f001 fb7e 	bl	ba90 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    a394:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a398:	4a25      	ldr	r2, [pc, #148]	; (a430 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a39e:	685a      	ldr	r2, [r3, #4]
    a3a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a3a4:	2134      	movs	r1, #52	; 0x34
    a3a6:	fb01 f303 	mul.w	r3, r1, r3
    a3aa:	4413      	add	r3, r2
    a3ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a3b0:	2b01      	cmp	r3, #1
    a3b2:	d114      	bne.n	a3de <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    a3b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a3b8:	4a1d      	ldr	r2, [pc, #116]	; (a430 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3be:	685a      	ldr	r2, [r3, #4]
    a3c0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a3c4:	2134      	movs	r1, #52	; 0x34
    a3c6:	fb01 f303 	mul.w	r3, r1, r3
    a3ca:	4413      	add	r3, r2
    a3cc:	689b      	ldr	r3, [r3, #8]
    a3ce:	2b01      	cmp	r3, #1
    a3d0:	d105      	bne.n	a3de <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    a3d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3d6:	2100      	movs	r1, #0
    a3d8:	4618      	mov	r0, r3
    a3da:	f7ff f827 	bl	942c <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a3de:	2300      	movs	r3, #0
    a3e0:	f88d 3016 	strb.w	r3, [sp, #22]
    a3e4:	e013      	b.n	a40e <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    a3e6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3ea:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a3ee:	2201      	movs	r2, #1
    a3f0:	4618      	mov	r0, r3
    a3f2:	f7ff f8cd 	bl	9590 <Adc_Ip_SetDisabledChannel>
    a3f6:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    a3f8:	9b03      	ldr	r3, [sp, #12]
    a3fa:	2b02      	cmp	r3, #2
    a3fc:	d102      	bne.n	a404 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    a3fe:	2301      	movs	r3, #1
    a400:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a404:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a408:	3301      	adds	r3, #1
    a40a:	f88d 3016 	strb.w	r3, [sp, #22]
    a40e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a412:	4a08      	ldr	r2, [pc, #32]	; (a434 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    a414:	00db      	lsls	r3, r3, #3
    a416:	4413      	add	r3, r2
    a418:	799b      	ldrb	r3, [r3, #6]
    a41a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a41e:	429a      	cmp	r2, r3
    a420:	d3e1      	bcc.n	a3e6 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    a422:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a426:	4618      	mov	r0, r3
    a428:	b007      	add	sp, #28
    a42a:	f85d fb04 	ldr.w	pc, [sp], #4
    a42e:	bf00      	nop
    a430:	1fff8d18 	.word	0x1fff8d18
    a434:	1fff8d44 	.word	0x1fff8d44

0000a438 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    a438:	b500      	push	{lr}
    a43a:	b085      	sub	sp, #20
    a43c:	4603      	mov	r3, r0
    a43e:	9100      	str	r1, [sp, #0]
    a440:	f88d 3007 	strb.w	r3, [sp, #7]
    a444:	4613      	mov	r3, r2
    a446:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a44a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a44e:	4a14      	ldr	r2, [pc, #80]	; (a4a0 <Adc_Ipw_PrepareGroupStart+0x68>)
    a450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a454:	681a      	ldr	r2, [r3, #0]
    a456:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a45a:	4413      	add	r3, r2
    a45c:	7c1b      	ldrb	r3, [r3, #16]
    a45e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    a462:	9b00      	ldr	r3, [sp, #0]
    a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	2b01      	cmp	r3, #1
    a46a:	d108      	bne.n	a47e <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    a46c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a470:	9b00      	ldr	r3, [sp, #0]
    a472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a474:	685b      	ldr	r3, [r3, #4]
    a476:	461a      	mov	r2, r3
    a478:	2101      	movs	r1, #1
    a47a:	f7fe ff51 	bl	9320 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    a47e:	9b00      	ldr	r3, [sp, #0]
    a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a482:	7a1b      	ldrb	r3, [r3, #8]
    a484:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    a488:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a48c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a490:	4611      	mov	r1, r2
    a492:	4618      	mov	r0, r3
    a494:	f7fe ff62 	bl	935c <Adc_Ip_SetSampleTime>
}
    a498:	bf00      	nop
    a49a:	b005      	add	sp, #20
    a49c:	f85d fb04 	ldr.w	pc, [sp], #4
    a4a0:	1fff8d18 	.word	0x1fff8d18

0000a4a4 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    a4a4:	b084      	sub	sp, #16
    a4a6:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    a4a8:	2300      	movs	r3, #0
    a4aa:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    a4ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a4b2:	4618      	mov	r0, r3
    a4b4:	b004      	add	sp, #16
    a4b6:	4770      	bx	lr

0000a4b8 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    a4b8:	b500      	push	{lr}
    a4ba:	b08f      	sub	sp, #60	; 0x3c
    a4bc:	9202      	str	r2, [sp, #8]
    a4be:	461a      	mov	r2, r3
    a4c0:	4603      	mov	r3, r0
    a4c2:	f88d 300f 	strb.w	r3, [sp, #15]
    a4c6:	460b      	mov	r3, r1
    a4c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    a4cc:	4613      	mov	r3, r2
    a4ce:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a4d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4d6:	4a6d      	ldr	r2, [pc, #436]	; (a68c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4dc:	68da      	ldr	r2, [r3, #12]
    a4de:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a4e2:	005b      	lsls	r3, r3, #1
    a4e4:	4413      	add	r3, r2
    a4e6:	881b      	ldrh	r3, [r3, #0]
    a4e8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a4ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4f0:	4a66      	ldr	r2, [pc, #408]	; (a68c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f6:	685a      	ldr	r2, [r3, #4]
    a4f8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    a4fc:	2134      	movs	r1, #52	; 0x34
    a4fe:	fb01 f303 	mul.w	r3, r1, r3
    a502:	4413      	add	r3, r2
    a504:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a506:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a50a:	4a60      	ldr	r2, [pc, #384]	; (a68c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a510:	681a      	ldr	r2, [r3, #0]
    a512:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a516:	4413      	add	r3, r2
    a518:	7c1b      	ldrb	r3, [r3, #16]
    a51a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    a51e:	2300      	movs	r3, #0
    a520:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a522:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a526:	495a      	ldr	r1, [pc, #360]	; (a690 <Adc_Ipw_ConfigureConversion+0x1d8>)
    a528:	4613      	mov	r3, r2
    a52a:	009b      	lsls	r3, r3, #2
    a52c:	4413      	add	r3, r2
    a52e:	009b      	lsls	r3, r3, #2
    a530:	440b      	add	r3, r1
    a532:	3310      	adds	r3, #16
    a534:	781b      	ldrb	r3, [r3, #0]
    a536:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    a53a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a53c:	6a1b      	ldr	r3, [r3, #32]
    a53e:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a540:	2300      	movs	r3, #0
    a542:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a546:	e030      	b.n	a5aa <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a548:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a54c:	4a4f      	ldr	r2, [pc, #316]	; (a68c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a55c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a55e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a562:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a566:	440b      	add	r3, r1
    a568:	005b      	lsls	r3, r3, #1
    a56a:	990a      	ldr	r1, [sp, #40]	; 0x28
    a56c:	440b      	add	r3, r1
    a56e:	881b      	ldrh	r3, [r3, #0]
    a570:	4619      	mov	r1, r3
    a572:	460b      	mov	r3, r1
    a574:	005b      	lsls	r3, r3, #1
    a576:	440b      	add	r3, r1
    a578:	009b      	lsls	r3, r3, #2
    a57a:	4413      	add	r3, r2
    a57c:	685b      	ldr	r3, [r3, #4]
    a57e:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    a580:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a584:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    a588:	9b08      	ldr	r3, [sp, #32]
    a58a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    a58c:	2300      	movs	r3, #0
    a58e:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a592:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a596:	aa05      	add	r2, sp, #20
    a598:	4611      	mov	r1, r2
    a59a:	4618      	mov	r0, r3
    a59c:	f7fe ffc8 	bl	9530 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a5a0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5a4:	3301      	adds	r3, #1
    a5a6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a5aa:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    a5ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a5b2:	3b01      	subs	r3, #1
    a5b4:	429a      	cmp	r2, r3
    a5b6:	d3c7      	bcc.n	a548 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a5b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a5bc:	4a33      	ldr	r2, [pc, #204]	; (a68c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5c2:	681b      	ldr	r3, [r3, #0]
    a5c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a5ce:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a5d2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5d6:	440b      	add	r3, r1
    a5d8:	005b      	lsls	r3, r3, #1
    a5da:	990a      	ldr	r1, [sp, #40]	; 0x28
    a5dc:	440b      	add	r3, r1
    a5de:	881b      	ldrh	r3, [r3, #0]
    a5e0:	4619      	mov	r1, r3
    a5e2:	460b      	mov	r3, r1
    a5e4:	005b      	lsls	r3, r3, #1
    a5e6:	440b      	add	r3, r1
    a5e8:	009b      	lsls	r3, r3, #2
    a5ea:	4413      	add	r3, r2
    a5ec:	685b      	ldr	r3, [r3, #4]
    a5ee:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    a5f0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5f4:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    a5f8:	9b08      	ldr	r3, [sp, #32]
    a5fa:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    a5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a602:	2b00      	cmp	r3, #0
    a604:	d103      	bne.n	a60e <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    a606:	2301      	movs	r3, #1
    a608:	f88d 301c 	strb.w	r3, [sp, #28]
    a60c:	e002      	b.n	a614 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    a60e:	2300      	movs	r3, #0
    a610:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a614:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a618:	aa05      	add	r2, sp, #20
    a61a:	4611      	mov	r1, r2
    a61c:	4618      	mov	r0, r3
    a61e:	f7fe ff87 	bl	9530 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a622:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a626:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a62a:	e014      	b.n	a656 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    a62c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a630:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    a634:	231f      	movs	r3, #31
    a636:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    a638:	2300      	movs	r3, #0
    a63a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a63e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a642:	aa05      	add	r2, sp, #20
    a644:	4611      	mov	r1, r2
    a646:	4618      	mov	r0, r3
    a648:	f7fe ff72 	bl	9530 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a64c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a650:	3301      	adds	r3, #1
    a652:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a656:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a65a:	2b0f      	cmp	r3, #15
    a65c:	d9e6      	bls.n	a62c <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a65e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a662:	4a0c      	ldr	r2, [pc, #48]	; (a694 <Adc_Ipw_ConfigureConversion+0x1dc>)
    a664:	00db      	lsls	r3, r3, #3
    a666:	4413      	add	r3, r2
    a668:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a66c:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    a66e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a672:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a676:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a67a:	9300      	str	r3, [sp, #0]
    a67c:	9b02      	ldr	r3, [sp, #8]
    a67e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a680:	f7ff fd86 	bl	a190 <Adc_Ipw_ConfigurePdbConversion>
}
    a684:	bf00      	nop
    a686:	b00f      	add	sp, #60	; 0x3c
    a688:	f85d fb04 	ldr.w	pc, [sp], #4
    a68c:	1fff8d18 	.word	0x1fff8d18
    a690:	1fff8d1c 	.word	0x1fff8d1c
    a694:	1fff8d44 	.word	0x1fff8d44

0000a698 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    a698:	b500      	push	{lr}
    a69a:	b085      	sub	sp, #20
    a69c:	9001      	str	r0, [sp, #4]
    a69e:	460b      	mov	r3, r1
    a6a0:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a6a4:	2300      	movs	r3, #0
    a6a6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a6aa:	2300      	movs	r3, #0
    a6ac:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    a6b0:	2300      	movs	r3, #0
    a6b2:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a6b6:	2300      	movs	r3, #0
    a6b8:	f88d 300f 	strb.w	r3, [sp, #15]
    a6bc:	e027      	b.n	a70e <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    a6be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6c2:	9a01      	ldr	r2, [sp, #4]
    a6c4:	4413      	add	r3, r2
    a6c6:	7f9b      	ldrb	r3, [r3, #30]
    a6c8:	2b01      	cmp	r3, #1
    a6ca:	d11b      	bne.n	a704 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a6cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6d0:	9a01      	ldr	r2, [sp, #4]
    a6d2:	4413      	add	r3, r2
    a6d4:	7c1b      	ldrb	r3, [r3, #16]
    a6d6:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    a6da:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a6de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a6e2:	9b01      	ldr	r3, [sp, #4]
    a6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6e8:	4619      	mov	r1, r3
    a6ea:	f7fe fcb8 	bl	905e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    a6ee:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a6f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a6f6:	9b01      	ldr	r3, [sp, #4]
    a6f8:	3202      	adds	r2, #2
    a6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6fe:	4619      	mov	r1, r3
    a700:	f000 fead 	bl	b45e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a704:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a708:	3301      	adds	r3, #1
    a70a:	f88d 300f 	strb.w	r3, [sp, #15]
    a70e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a712:	2b01      	cmp	r3, #1
    a714:	d9d3      	bls.n	a6be <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    a716:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    a71a:	4618      	mov	r0, r3
    a71c:	b005      	add	sp, #20
    a71e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a722 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    a722:	b500      	push	{lr}
    a724:	b087      	sub	sp, #28
    a726:	4603      	mov	r3, r0
    a728:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a72c:	2300      	movs	r3, #0
    a72e:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a732:	2300      	movs	r3, #0
    a734:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    a738:	2300      	movs	r3, #0
    a73a:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    a73e:	2300      	movs	r3, #0
    a740:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    a744:	2300      	movs	r3, #0
    a746:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a74a:	2300      	movs	r3, #0
    a74c:	f88d 3017 	strb.w	r3, [sp, #23]
    a750:	e026      	b.n	a7a0 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    a752:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a756:	4a2e      	ldr	r2, [pc, #184]	; (a810 <Adc_Ipw_DeInit+0xee>)
    a758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a75c:	681a      	ldr	r2, [r3, #0]
    a75e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a762:	4413      	add	r3, r2
    a764:	7f9b      	ldrb	r3, [r3, #30]
    a766:	2b01      	cmp	r3, #1
    a768:	d115      	bne.n	a796 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a76a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a76e:	4a28      	ldr	r2, [pc, #160]	; (a810 <Adc_Ipw_DeInit+0xee>)
    a770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a774:	681a      	ldr	r2, [r3, #0]
    a776:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a77a:	4413      	add	r3, r2
    a77c:	7c1b      	ldrb	r3, [r3, #16]
    a77e:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    a782:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a786:	4618      	mov	r0, r3
    a788:	f7fe fd40 	bl	920c <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    a78c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a790:	4618      	mov	r0, r3
    a792:	f000 ff0d 	bl	b5b0 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a796:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a79a:	3301      	adds	r3, #1
    a79c:	f88d 3017 	strb.w	r3, [sp, #23]
    a7a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a7a4:	2b01      	cmp	r3, #1
    a7a6:	d9d4      	bls.n	a752 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a7a8:	2300      	movs	r3, #0
    a7aa:	f8ad 3014 	strh.w	r3, [sp, #20]
    a7ae:	e01e      	b.n	a7ee <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    a7b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7b4:	4a16      	ldr	r2, [pc, #88]	; (a810 <Adc_Ipw_DeInit+0xee>)
    a7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ba:	685a      	ldr	r2, [r3, #4]
    a7bc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a7c0:	2134      	movs	r1, #52	; 0x34
    a7c2:	fb01 f303 	mul.w	r3, r1, r3
    a7c6:	4413      	add	r3, r2
    a7c8:	881b      	ldrh	r3, [r3, #0]
    a7ca:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    a7ce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a7d2:	4910      	ldr	r1, [pc, #64]	; (a814 <Adc_Ipw_DeInit+0xf2>)
    a7d4:	4613      	mov	r3, r2
    a7d6:	009b      	lsls	r3, r3, #2
    a7d8:	4413      	add	r3, r2
    a7da:	009b      	lsls	r3, r3, #2
    a7dc:	440b      	add	r3, r1
    a7de:	330c      	adds	r3, #12
    a7e0:	2200      	movs	r2, #0
    a7e2:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a7e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a7e8:	3301      	adds	r3, #1
    a7ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    a7ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7f2:	4a07      	ldr	r2, [pc, #28]	; (a810 <Adc_Ipw_DeInit+0xee>)
    a7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f8:	891b      	ldrh	r3, [r3, #8]
    a7fa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a7fe:	429a      	cmp	r2, r3
    a800:	d3d6      	bcc.n	a7b0 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    a802:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a806:	4618      	mov	r0, r3
    a808:	b007      	add	sp, #28
    a80a:	f85d fb04 	ldr.w	pc, [sp], #4
    a80e:	bf00      	nop
    a810:	1fff8d18 	.word	0x1fff8d18
    a814:	1fff8d1c 	.word	0x1fff8d1c

0000a818 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    a818:	b500      	push	{lr}
    a81a:	b089      	sub	sp, #36	; 0x24
    a81c:	4603      	mov	r3, r0
    a81e:	460a      	mov	r2, r1
    a820:	f88d 300f 	strb.w	r3, [sp, #15]
    a824:	4613      	mov	r3, r2
    a826:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    a82a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a82e:	4a4c      	ldr	r2, [pc, #304]	; (a960 <Adc_Ipw_StartNormalConversion+0x148>)
    a830:	00db      	lsls	r3, r3, #3
    a832:	4413      	add	r3, r2
    a834:	885b      	ldrh	r3, [r3, #2]
    a836:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    a83a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a83e:	4a49      	ldr	r2, [pc, #292]	; (a964 <Adc_Ipw_StartNormalConversion+0x14c>)
    a840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a844:	68da      	ldr	r2, [r3, #12]
    a846:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a84a:	005b      	lsls	r3, r3, #1
    a84c:	4413      	add	r3, r2
    a84e:	881b      	ldrh	r3, [r3, #0]
    a850:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    a854:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a858:	4a42      	ldr	r2, [pc, #264]	; (a964 <Adc_Ipw_StartNormalConversion+0x14c>)
    a85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a85e:	685a      	ldr	r2, [r3, #4]
    a860:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a864:	2134      	movs	r1, #52	; 0x34
    a866:	fb01 f303 	mul.w	r3, r1, r3
    a86a:	4413      	add	r3, r2
    a86c:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a86e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a872:	4a3c      	ldr	r2, [pc, #240]	; (a964 <Adc_Ipw_StartNormalConversion+0x14c>)
    a874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a878:	681a      	ldr	r2, [r3, #0]
    a87a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a87e:	4413      	add	r3, r2
    a880:	7c1b      	ldrb	r3, [r3, #16]
    a882:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    a886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a88a:	4a35      	ldr	r2, [pc, #212]	; (a960 <Adc_Ipw_StartNormalConversion+0x148>)
    a88c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a890:	b29b      	uxth	r3, r3
    a892:	2b00      	cmp	r3, #0
    a894:	d05f      	beq.n	a956 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    a896:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a89a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a89e:	9905      	ldr	r1, [sp, #20]
    a8a0:	4618      	mov	r0, r3
    a8a2:	f7ff fdc9 	bl	a438 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a8a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a8aa:	492f      	ldr	r1, [pc, #188]	; (a968 <Adc_Ipw_StartNormalConversion+0x150>)
    a8ac:	4613      	mov	r3, r2
    a8ae:	009b      	lsls	r3, r3, #2
    a8b0:	4413      	add	r3, r2
    a8b2:	009b      	lsls	r3, r3, #2
    a8b4:	440b      	add	r3, r1
    a8b6:	3310      	adds	r3, #16
    a8b8:	2200      	movs	r2, #0
    a8ba:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    a8bc:	9b05      	ldr	r3, [sp, #20]
    a8be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a8c2:	2b0f      	cmp	r3, #15
    a8c4:	d806      	bhi.n	a8d4 <Adc_Ipw_StartNormalConversion+0xbc>
    a8c6:	9b05      	ldr	r3, [sp, #20]
    a8c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a8cc:	f003 030f 	and.w	r3, r3, #15
    a8d0:	b2db      	uxtb	r3, r3
    a8d2:	e000      	b.n	a8d6 <Adc_Ipw_StartNormalConversion+0xbe>
    a8d4:	2310      	movs	r3, #16
    a8d6:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    a8da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8de:	4a20      	ldr	r2, [pc, #128]	; (a960 <Adc_Ipw_StartNormalConversion+0x148>)
    a8e0:	00db      	lsls	r3, r3, #3
    a8e2:	4413      	add	r3, r2
    a8e4:	799b      	ldrb	r3, [r3, #6]
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d107      	bne.n	a8fa <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a8ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8ee:	4a1c      	ldr	r2, [pc, #112]	; (a960 <Adc_Ipw_StartNormalConversion+0x148>)
    a8f0:	00db      	lsls	r3, r3, #3
    a8f2:	4413      	add	r3, r2
    a8f4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a8f8:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a8fa:	2300      	movs	r3, #0
    a8fc:	f88d 301f 	strb.w	r3, [sp, #31]
    a900:	e00c      	b.n	a91c <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a902:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a906:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a90a:	4611      	mov	r1, r2
    a90c:	4618      	mov	r0, r3
    a90e:	f7fe ff03 	bl	9718 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a912:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a916:	3301      	adds	r3, #1
    a918:	f88d 301f 	strb.w	r3, [sp, #31]
    a91c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a920:	4a0f      	ldr	r2, [pc, #60]	; (a960 <Adc_Ipw_StartNormalConversion+0x148>)
    a922:	00db      	lsls	r3, r3, #3
    a924:	4413      	add	r3, r2
    a926:	799b      	ldrb	r3, [r3, #6]
    a928:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a92c:	429a      	cmp	r2, r3
    a92e:	d3e8      	bcc.n	a902 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    a930:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a934:	2101      	movs	r1, #1
    a936:	4618      	mov	r0, r3
    a938:	f7fe fd60 	bl	93fc <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a93c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a940:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    a944:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a948:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a94c:	9300      	str	r3, [sp, #0]
    a94e:	4613      	mov	r3, r2
    a950:	220f      	movs	r2, #15
    a952:	f7ff fdb1 	bl	a4b8 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    a956:	bf00      	nop
    a958:	b009      	add	sp, #36	; 0x24
    a95a:	f85d fb04 	ldr.w	pc, [sp], #4
    a95e:	bf00      	nop
    a960:	1fff8d44 	.word	0x1fff8d44
    a964:	1fff8d18 	.word	0x1fff8d18
    a968:	1fff8d1c 	.word	0x1fff8d1c

0000a96c <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a96c:	b500      	push	{lr}
    a96e:	b085      	sub	sp, #20
    a970:	4603      	mov	r3, r0
    a972:	f88d 3007 	strb.w	r3, [sp, #7]
    a976:	460b      	mov	r3, r1
    a978:	f8ad 3004 	strh.w	r3, [sp, #4]
    a97c:	4613      	mov	r3, r2
    a97e:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a982:	2300      	movs	r3, #0
    a984:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a988:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a98c:	4a24      	ldr	r2, [pc, #144]	; (aa20 <Adc_Ipw_StopCurrentConversion+0xb4>)
    a98e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a992:	681a      	ldr	r2, [r3, #0]
    a994:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a998:	4413      	add	r3, r2
    a99a:	7c1b      	ldrb	r3, [r3, #16]
    a99c:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a9a0:	2300      	movs	r3, #0
    a9a2:	f88d 300f 	strb.w	r3, [sp, #15]
    a9a6:	e014      	b.n	a9d2 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    a9a8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a9ac:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a9b0:	2200      	movs	r2, #0
    a9b2:	4618      	mov	r0, r3
    a9b4:	f7fe fdec 	bl	9590 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a9b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a9bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9c0:	4611      	mov	r1, r2
    a9c2:	4618      	mov	r0, r3
    a9c4:	f7fe fea8 	bl	9718 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a9c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a9cc:	3301      	adds	r3, #1
    a9ce:	f88d 300f 	strb.w	r3, [sp, #15]
    a9d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9d6:	4a13      	ldr	r2, [pc, #76]	; (aa24 <Adc_Ipw_StopCurrentConversion+0xb8>)
    a9d8:	00db      	lsls	r3, r3, #3
    a9da:	4413      	add	r3, r2
    a9dc:	799b      	ldrb	r3, [r3, #6]
    a9de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9e2:	429a      	cmp	r2, r3
    a9e4:	d3e0      	bcc.n	a9a8 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a9e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a9ea:	490f      	ldr	r1, [pc, #60]	; (aa28 <Adc_Ipw_StopCurrentConversion+0xbc>)
    a9ec:	4613      	mov	r3, r2
    a9ee:	009b      	lsls	r3, r3, #2
    a9f0:	4413      	add	r3, r2
    a9f2:	009b      	lsls	r3, r3, #2
    a9f4:	440b      	add	r3, r1
    a9f6:	3310      	adds	r3, #16
    a9f8:	2200      	movs	r2, #0
    a9fa:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    a9fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aa00:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aa04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa08:	4618      	mov	r0, r3
    aa0a:	f7ff fc97 	bl	a33c <Adc_Ipw_StopConversionCheckTimeout>
    aa0e:	4603      	mov	r3, r0
    aa10:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    aa14:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    aa18:	4618      	mov	r0, r3
    aa1a:	b005      	add	sp, #20
    aa1c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa20:	1fff8d18 	.word	0x1fff8d18
    aa24:	1fff8d44 	.word	0x1fff8d44
    aa28:	1fff8d1c 	.word	0x1fff8d1c

0000aa2c <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    aa2c:	b500      	push	{lr}
    aa2e:	b085      	sub	sp, #20
    aa30:	4603      	mov	r3, r0
    aa32:	f88d 3007 	strb.w	r3, [sp, #7]
    aa36:	460b      	mov	r3, r1
    aa38:	f88d 3006 	strb.w	r3, [sp, #6]
    aa3c:	4613      	mov	r3, r2
    aa3e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    aa42:	2301      	movs	r3, #1
    aa44:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    aa48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa4c:	f88d 300f 	strb.w	r3, [sp, #15]
    aa50:	e019      	b.n	aa86 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    aa52:	f89d 0007 	ldrb.w	r0, [sp, #7]
    aa56:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa5e:	1ad3      	subs	r3, r2, r3
    aa60:	b2db      	uxtb	r3, r3
    aa62:	4619      	mov	r1, r3
    aa64:	f7fe fe3e 	bl	96e4 <Adc_Ip_GetConvCompleteFlag>
    aa68:	4603      	mov	r3, r0
    aa6a:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    aa6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa72:	f083 0301 	eor.w	r3, r3, #1
    aa76:	b2db      	uxtb	r3, r3
    aa78:	2b00      	cmp	r3, #0
    aa7a:	d10b      	bne.n	aa94 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    aa7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aa80:	3301      	adds	r3, #1
    aa82:	f88d 300f 	strb.w	r3, [sp, #15]
    aa86:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    aa8e:	429a      	cmp	r2, r3
    aa90:	d3df      	bcc.n	aa52 <Adc_Ipw_CheckValidConversion+0x26>
    aa92:	e000      	b.n	aa96 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    aa94:	bf00      	nop
        }
    }

    return ValidConversion;
    aa96:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    aa9a:	4618      	mov	r0, r3
    aa9c:	b005      	add	sp, #20
    aa9e:	f85d fb04 	ldr.w	pc, [sp], #4

0000aaa2 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    aaa2:	b500      	push	{lr}
    aaa4:	b089      	sub	sp, #36	; 0x24
    aaa6:	9102      	str	r1, [sp, #8]
    aaa8:	9201      	str	r2, [sp, #4]
    aaaa:	461a      	mov	r2, r3
    aaac:	4603      	mov	r3, r0
    aaae:	f8ad 300e 	strh.w	r3, [sp, #14]
    aab2:	4613      	mov	r3, r2
    aab4:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    aab8:	2300      	movs	r3, #0
    aaba:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    aabe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aac2:	4a33      	ldr	r2, [pc, #204]	; (ab90 <Adc_Ipw_ReadGroup+0xee>)
    aac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aac8:	68da      	ldr	r2, [r3, #12]
    aaca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aace:	005b      	lsls	r3, r3, #1
    aad0:	4413      	add	r3, r2
    aad2:	881b      	ldrh	r3, [r3, #0]
    aad4:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    aad8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aadc:	4a2c      	ldr	r2, [pc, #176]	; (ab90 <Adc_Ipw_ReadGroup+0xee>)
    aade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aae2:	685a      	ldr	r2, [r3, #4]
    aae4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    aae8:	2134      	movs	r1, #52	; 0x34
    aaea:	fb01 f303 	mul.w	r3, r1, r3
    aaee:	4413      	add	r3, r2
    aaf0:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    aaf2:	9b06      	ldr	r3, [sp, #24]
    aaf4:	789b      	ldrb	r3, [r3, #2]
    aaf6:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    aafa:	9b06      	ldr	r3, [sp, #24]
    aafc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    ab00:	2b01      	cmp	r3, #1
    ab02:	d124      	bne.n	ab4e <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    ab04:	9b06      	ldr	r3, [sp, #24]
    ab06:	68db      	ldr	r3, [r3, #12]
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d111      	bne.n	ab30 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    ab0c:	9b06      	ldr	r3, [sp, #24]
    ab0e:	695b      	ldr	r3, [r3, #20]
    ab10:	2b00      	cmp	r3, #0
    ab12:	d10d      	bne.n	ab30 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    ab14:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab18:	4a1e      	ldr	r2, [pc, #120]	; (ab94 <Adc_Ipw_ReadGroup+0xf2>)
    ab1a:	00db      	lsls	r3, r3, #3
    ab1c:	4413      	add	r3, r2
    ab1e:	885b      	ldrh	r3, [r3, #2]
    ab20:	b29b      	uxth	r3, r3
    ab22:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ab26:	429a      	cmp	r2, r3
    ab28:	d002      	beq.n	ab30 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    ab2a:	2301      	movs	r3, #1
    ab2c:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    ab30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ab34:	2b00      	cmp	r3, #0
    ab36:	d124      	bne.n	ab82 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    ab38:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ab3c:	9a01      	ldr	r2, [sp, #4]
    ab3e:	9902      	ldr	r1, [sp, #8]
    ab40:	9806      	ldr	r0, [sp, #24]
    ab42:	f7ff f91f 	bl	9d84 <Adc_Ipw_ReadGroupNoInt>
    ab46:	4603      	mov	r3, r0
    ab48:	f88d 301f 	strb.w	r3, [sp, #31]
    ab4c:	e019      	b.n	ab82 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    ab4e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ab52:	4911      	ldr	r1, [pc, #68]	; (ab98 <Adc_Ipw_ReadGroup+0xf6>)
    ab54:	4613      	mov	r3, r2
    ab56:	009b      	lsls	r3, r3, #2
    ab58:	4413      	add	r3, r2
    ab5a:	009b      	lsls	r3, r3, #2
    ab5c:	440b      	add	r3, r1
    ab5e:	681b      	ldr	r3, [r3, #0]
    ab60:	2b01      	cmp	r3, #1
    ab62:	d102      	bne.n	ab6a <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    ab64:	2301      	movs	r3, #1
    ab66:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    ab6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d107      	bne.n	ab82 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    ab72:	f89d 200d 	ldrb.w	r2, [sp, #13]
    ab76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab7a:	9902      	ldr	r1, [sp, #8]
    ab7c:	4618      	mov	r0, r3
    ab7e:	f7ff f949 	bl	9e14 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    ab82:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    ab86:	4618      	mov	r0, r3
    ab88:	b009      	add	sp, #36	; 0x24
    ab8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab8e:	bf00      	nop
    ab90:	1fff8d18 	.word	0x1fff8d18
    ab94:	1fff8d44 	.word	0x1fff8d44
    ab98:	1fff8d1c 	.word	0x1fff8d1c

0000ab9c <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    ab9c:	b500      	push	{lr}
    ab9e:	b085      	sub	sp, #20
    aba0:	4603      	mov	r3, r0
    aba2:	9100      	str	r1, [sp, #0]
    aba4:	f88d 3007 	strb.w	r3, [sp, #7]
    aba8:	4613      	mov	r3, r2
    abaa:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    abae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abb2:	4a0e      	ldr	r2, [pc, #56]	; (abec <Adc_Ipw_Calibrate+0x50>)
    abb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abb8:	681a      	ldr	r2, [r3, #0]
    abba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abbe:	4413      	add	r3, r2
    abc0:	7c1b      	ldrb	r3, [r3, #16]
    abc2:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    abc6:	9b00      	ldr	r3, [sp, #0]
    abc8:	2200      	movs	r2, #0
    abca:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    abcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    abd0:	4618      	mov	r0, r3
    abd2:	f7fe fdb9 	bl	9748 <Adc_Ip_DoCalibration>
    abd6:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    abd8:	9b02      	ldr	r3, [sp, #8]
    abda:	2b00      	cmp	r3, #0
    abdc:	d002      	beq.n	abe4 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    abde:	9b00      	ldr	r3, [sp, #0]
    abe0:	2201      	movs	r2, #1
    abe2:	701a      	strb	r2, [r3, #0]
    }
}
    abe4:	bf00      	nop
    abe6:	b005      	add	sp, #20
    abe8:	f85d fb04 	ldr.w	pc, [sp], #4
    abec:	1fff8d18 	.word	0x1fff8d18

0000abf0 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    abf0:	2300      	movs	r3, #0
}
    abf2:	4618      	mov	r0, r3
    abf4:	4770      	bx	lr
    abf6:	bf00      	nop

0000abf8 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    abf8:	b500      	push	{lr}
    abfa:	b083      	sub	sp, #12
    abfc:	4603      	mov	r3, r0
    abfe:	460a      	mov	r2, r1
    ac00:	f88d 3007 	strb.w	r3, [sp, #7]
    ac04:	4613      	mov	r3, r2
    ac06:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    ac0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac0e:	2100      	movs	r1, #0
    ac10:	4618      	mov	r0, r3
    ac12:	f7fe fff3 	bl	9bfc <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    ac16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac1a:	4a09      	ldr	r2, [pc, #36]	; (ac40 <Adc_Ipw_UpdateQueue+0x48>)
    ac1c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    ac20:	b29b      	uxth	r3, r3
    ac22:	2b00      	cmp	r3, #0
    ac24:	d007      	beq.n	ac36 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    ac26:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ac2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac2e:	4611      	mov	r1, r2
    ac30:	4618      	mov	r0, r3
    ac32:	f7ff fdf1 	bl	a818 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    ac36:	bf00      	nop
    ac38:	b003      	add	sp, #12
    ac3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac3e:	bf00      	nop
    ac40:	1fff8d44 	.word	0x1fff8d44

0000ac44 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    ac44:	b510      	push	{r4, lr}
    ac46:	b08a      	sub	sp, #40	; 0x28
    ac48:	4604      	mov	r4, r0
    ac4a:	4608      	mov	r0, r1
    ac4c:	4611      	mov	r1, r2
    ac4e:	461a      	mov	r2, r3
    ac50:	4623      	mov	r3, r4
    ac52:	f88d 300f 	strb.w	r3, [sp, #15]
    ac56:	4603      	mov	r3, r0
    ac58:	f8ad 300c 	strh.w	r3, [sp, #12]
    ac5c:	460b      	mov	r3, r1
    ac5e:	f8ad 300a 	strh.w	r3, [sp, #10]
    ac62:	4613      	mov	r3, r2
    ac64:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ac68:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac6c:	4a68      	ldr	r2, [pc, #416]	; (ae10 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac72:	68da      	ldr	r2, [r3, #12]
    ac74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ac78:	005b      	lsls	r3, r3, #1
    ac7a:	4413      	add	r3, r2
    ac7c:	881b      	ldrh	r3, [r3, #0]
    ac7e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    ac82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ac86:	4963      	ldr	r1, [pc, #396]	; (ae14 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ac88:	4613      	mov	r3, r2
    ac8a:	009b      	lsls	r3, r3, #2
    ac8c:	4413      	add	r3, r2
    ac8e:	009b      	lsls	r3, r3, #2
    ac90:	440b      	add	r3, r1
    ac92:	3310      	adds	r3, #16
    ac94:	781b      	ldrb	r3, [r3, #0]
    ac96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    ac9a:	2300      	movs	r3, #0
    ac9c:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ac9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aca2:	4a5b      	ldr	r2, [pc, #364]	; (ae10 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca8:	681a      	ldr	r2, [r3, #0]
    acaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    acae:	4413      	add	r3, r2
    acb0:	7c1b      	ldrb	r3, [r3, #16]
    acb2:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    acb6:	2300      	movs	r3, #0
    acb8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    acbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    acc0:	4a53      	ldr	r2, [pc, #332]	; (ae10 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    acc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc6:	681b      	ldr	r3, [r3, #0]
    acc8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    accc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    acd0:	695b      	ldr	r3, [r3, #20]
    acd2:	4618      	mov	r0, r3
    acd4:	f7ff fbe6 	bl	a4a4 <Adc_Ipw_CalculateNumsBitShift>
    acd8:	4603      	mov	r3, r0
    acda:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    acde:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ace2:	4a4b      	ldr	r2, [pc, #300]	; (ae10 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ace4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace8:	685a      	ldr	r2, [r3, #4]
    acea:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    acee:	2134      	movs	r1, #52	; 0x34
    acf0:	fb01 f303 	mul.w	r3, r1, r3
    acf4:	4413      	add	r3, r2
    acf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    acfa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    acfe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ad02:	4a43      	ldr	r2, [pc, #268]	; (ae10 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ad04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad08:	685a      	ldr	r2, [r3, #4]
    ad0a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    ad0e:	2134      	movs	r1, #52	; 0x34
    ad10:	fb01 f303 	mul.w	r3, r1, r3
    ad14:	4413      	add	r3, r2
    ad16:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    ad18:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ad1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ad20:	429a      	cmp	r2, r3
    ad22:	d870      	bhi.n	ae06 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    ad24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad28:	f003 030f 	and.w	r3, r3, #15
    ad2c:	b2db      	uxtb	r3, r3
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d104      	bne.n	ad3c <Adc_Ipw_CheckConversionChannels+0xf8>
    ad32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad36:	3b10      	subs	r3, #16
    ad38:	b2db      	uxtb	r3, r3
    ad3a:	e004      	b.n	ad46 <Adc_Ipw_CheckConversionChannels+0x102>
    ad3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad40:	f023 030f 	bic.w	r3, r3, #15
    ad44:	b2db      	uxtb	r3, r3
    ad46:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    ad4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad4e:	4931      	ldr	r1, [pc, #196]	; (ae14 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad50:	4613      	mov	r3, r2
    ad52:	009b      	lsls	r3, r3, #2
    ad54:	4413      	add	r3, r2
    ad56:	009b      	lsls	r3, r3, #2
    ad58:	440b      	add	r3, r1
    ad5a:	330c      	adds	r3, #12
    ad5c:	6819      	ldr	r1, [r3, #0]
    ad5e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad62:	482c      	ldr	r0, [pc, #176]	; (ae14 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad64:	4613      	mov	r3, r2
    ad66:	009b      	lsls	r3, r3, #2
    ad68:	4413      	add	r3, r2
    ad6a:	009b      	lsls	r3, r3, #2
    ad6c:	4403      	add	r3, r0
    ad6e:	3308      	adds	r3, #8
    ad70:	881b      	ldrh	r3, [r3, #0]
    ad72:	b29b      	uxth	r3, r3
    ad74:	005b      	lsls	r3, r3, #1
    ad76:	440b      	add	r3, r1
    ad78:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    ad7a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ad7e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    ad82:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ad86:	4618      	mov	r0, r3
    ad88:	f7ff fe50 	bl	aa2c <Adc_Ipw_CheckValidConversion>
    ad8c:	4603      	mov	r3, r0
    ad8e:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    ad92:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ad96:	2b00      	cmp	r3, #0
    ad98:	d032      	beq.n	ae00 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    ad9a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ad9e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    ada2:	e026      	b.n	adf2 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    ada4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ada8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    adac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    adb0:	1ad3      	subs	r3, r2, r3
    adb2:	b2db      	uxtb	r3, r3
    adb4:	4619      	mov	r1, r3
    adb6:	f7fe fcaf 	bl	9718 <Adc_Ip_GetConvData>
    adba:	4603      	mov	r3, r0
    adbc:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    adc0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    adc4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    adc8:	fa02 f303 	lsl.w	r3, r2, r3
    adcc:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    add0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    add4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    add8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    addc:	9300      	str	r3, [sp, #0]
    adde:	460b      	mov	r3, r1
    ade0:	9907      	ldr	r1, [sp, #28]
    ade2:	9805      	ldr	r0, [sp, #20]
    ade4:	f000 fa02 	bl	b1ec <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    ade8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    adec:	3301      	adds	r3, #1
    adee:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    adf2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    adf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    adfa:	429a      	cmp	r2, r3
    adfc:	d3d2      	bcc.n	ada4 <Adc_Ipw_CheckConversionChannels+0x160>
    adfe:	e002      	b.n	ae06 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    ae00:	2301      	movs	r3, #1
    ae02:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    ae06:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    ae0a:	4618      	mov	r0, r3
    ae0c:	b00a      	add	sp, #40	; 0x28
    ae0e:	bd10      	pop	{r4, pc}
    ae10:	1fff8d18 	.word	0x1fff8d18
    ae14:	1fff8d1c 	.word	0x1fff8d1c

0000ae18 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    ae18:	b500      	push	{lr}
    ae1a:	b087      	sub	sp, #28
    ae1c:	4603      	mov	r3, r0
    ae1e:	f88d 300f 	strb.w	r3, [sp, #15]
    ae22:	460b      	mov	r3, r1
    ae24:	f8ad 300c 	strh.w	r3, [sp, #12]
    ae28:	4613      	mov	r3, r2
    ae2a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ae2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae32:	4a33      	ldr	r2, [pc, #204]	; (af00 <Adc_Ipw_RestartConversion+0xe8>)
    ae34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae38:	68da      	ldr	r2, [r3, #12]
    ae3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ae3e:	005b      	lsls	r3, r3, #1
    ae40:	4413      	add	r3, r2
    ae42:	881b      	ldrh	r3, [r3, #0]
    ae44:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ae48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae4c:	4a2c      	ldr	r2, [pc, #176]	; (af00 <Adc_Ipw_RestartConversion+0xe8>)
    ae4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae52:	681a      	ldr	r2, [r3, #0]
    ae54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ae58:	4413      	add	r3, r2
    ae5a:	7c1b      	ldrb	r3, [r3, #16]
    ae5c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ae60:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae64:	4a26      	ldr	r2, [pc, #152]	; (af00 <Adc_Ipw_RestartConversion+0xe8>)
    ae66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae6a:	685a      	ldr	r2, [r3, #4]
    ae6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae70:	2134      	movs	r1, #52	; 0x34
    ae72:	fb01 f303 	mul.w	r3, r1, r3
    ae76:	4413      	add	r3, r2
    ae78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    ae7c:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    ae80:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae84:	2b0f      	cmp	r3, #15
    ae86:	d805      	bhi.n	ae94 <Adc_Ipw_RestartConversion+0x7c>
    ae88:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae8c:	f003 030f 	and.w	r3, r3, #15
    ae90:	b2db      	uxtb	r3, r3
    ae92:	e000      	b.n	ae96 <Adc_Ipw_RestartConversion+0x7e>
    ae94:	2310      	movs	r3, #16
    ae96:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    ae9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae9e:	2b10      	cmp	r3, #16
    aea0:	d811      	bhi.n	aec6 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    aea2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aea6:	4917      	ldr	r1, [pc, #92]	; (af04 <Adc_Ipw_RestartConversion+0xec>)
    aea8:	4613      	mov	r3, r2
    aeaa:	009b      	lsls	r3, r3, #2
    aeac:	4413      	add	r3, r2
    aeae:	009b      	lsls	r3, r3, #2
    aeb0:	440b      	add	r3, r1
    aeb2:	3310      	adds	r3, #16
    aeb4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    aeb8:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    aeba:	f89d 3015 	ldrb.w	r3, [sp, #21]
    aebe:	4618      	mov	r0, r3
    aec0:	f000 fc68 	bl	b794 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    aec4:	e017      	b.n	aef6 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    aec6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    aeca:	490e      	ldr	r1, [pc, #56]	; (af04 <Adc_Ipw_RestartConversion+0xec>)
    aecc:	4613      	mov	r3, r2
    aece:	009b      	lsls	r3, r3, #2
    aed0:	4413      	add	r3, r2
    aed2:	009b      	lsls	r3, r3, #2
    aed4:	440b      	add	r3, r1
    aed6:	3310      	adds	r3, #16
    aed8:	2200      	movs	r2, #0
    aeda:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    aedc:	f89d 2013 	ldrb.w	r2, [sp, #19]
    aee0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    aee4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    aee8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aeec:	9300      	str	r3, [sp, #0]
    aeee:	4613      	mov	r3, r2
    aef0:	220f      	movs	r2, #15
    aef2:	f7ff fae1 	bl	a4b8 <Adc_Ipw_ConfigureConversion>
}
    aef6:	bf00      	nop
    aef8:	b007      	add	sp, #28
    aefa:	f85d fb04 	ldr.w	pc, [sp], #4
    aefe:	bf00      	nop
    af00:	1fff8d18 	.word	0x1fff8d18
    af04:	1fff8d1c 	.word	0x1fff8d1c

0000af08 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    af08:	b084      	sub	sp, #16
    af0a:	4603      	mov	r3, r0
    af0c:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    af10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    af14:	4907      	ldr	r1, [pc, #28]	; (af34 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    af16:	4613      	mov	r3, r2
    af18:	009b      	lsls	r3, r3, #2
    af1a:	4413      	add	r3, r2
    af1c:	009b      	lsls	r3, r3, #2
    af1e:	440b      	add	r3, r1
    af20:	3308      	adds	r3, #8
    af22:	881b      	ldrh	r3, [r3, #0]
    af24:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    af28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    af2c:	4618      	mov	r0, r3
    af2e:	b004      	add	sp, #16
    af30:	4770      	bx	lr
    af32:	bf00      	nop
    af34:	1fff8d1c 	.word	0x1fff8d1c

0000af38 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    af38:	b510      	push	{r4, lr}
    af3a:	b084      	sub	sp, #16
    af3c:	4604      	mov	r4, r0
    af3e:	4608      	mov	r0, r1
    af40:	4611      	mov	r1, r2
    af42:	461a      	mov	r2, r3
    af44:	4623      	mov	r3, r4
    af46:	f88d 3007 	strb.w	r3, [sp, #7]
    af4a:	4603      	mov	r3, r0
    af4c:	f8ad 3004 	strh.w	r3, [sp, #4]
    af50:	460b      	mov	r3, r1
    af52:	f8ad 3002 	strh.w	r3, [sp, #2]
    af56:	4613      	mov	r3, r2
    af58:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    af5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af60:	4a4f      	ldr	r2, [pc, #316]	; (b0a0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    af62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af66:	68da      	ldr	r2, [r3, #12]
    af68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    af6c:	005b      	lsls	r3, r3, #1
    af6e:	4413      	add	r3, r2
    af70:	881b      	ldrh	r3, [r3, #0]
    af72:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    af76:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af7a:	494a      	ldr	r1, [pc, #296]	; (b0a4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af7c:	4613      	mov	r3, r2
    af7e:	009b      	lsls	r3, r3, #2
    af80:	4413      	add	r3, r2
    af82:	009b      	lsls	r3, r3, #2
    af84:	440b      	add	r3, r1
    af86:	3304      	adds	r3, #4
    af88:	2201      	movs	r2, #1
    af8a:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    af8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af90:	4944      	ldr	r1, [pc, #272]	; (b0a4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af92:	4613      	mov	r3, r2
    af94:	009b      	lsls	r3, r3, #2
    af96:	4413      	add	r3, r2
    af98:	009b      	lsls	r3, r3, #2
    af9a:	440b      	add	r3, r1
    af9c:	681b      	ldr	r3, [r3, #0]
    af9e:	2b01      	cmp	r3, #1
    afa0:	d109      	bne.n	afb6 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    afa2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    afa6:	493f      	ldr	r1, [pc, #252]	; (b0a4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    afa8:	4613      	mov	r3, r2
    afaa:	009b      	lsls	r3, r3, #2
    afac:	4413      	add	r3, r2
    afae:	009b      	lsls	r3, r3, #2
    afb0:	440b      	add	r3, r1
    afb2:	2202      	movs	r2, #2
    afb4:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    afb6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    afba:	4618      	mov	r0, r3
    afbc:	f7ff ffa4 	bl	af08 <Adc_Ipw_GetCurrentSampleCount>
    afc0:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    afc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    afc6:	9a02      	ldr	r2, [sp, #8]
    afc8:	429a      	cmp	r2, r3
    afca:	d35d      	bcc.n	b088 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    afcc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    afd0:	4934      	ldr	r1, [pc, #208]	; (b0a4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    afd2:	4613      	mov	r3, r2
    afd4:	009b      	lsls	r3, r3, #2
    afd6:	4413      	add	r3, r2
    afd8:	009b      	lsls	r3, r3, #2
    afda:	440b      	add	r3, r1
    afdc:	2203      	movs	r2, #3
    afde:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    afe0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afe4:	4a2e      	ldr	r2, [pc, #184]	; (b0a0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    afe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afea:	685a      	ldr	r2, [r3, #4]
    afec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aff0:	2134      	movs	r1, #52	; 0x34
    aff2:	fb01 f303 	mul.w	r3, r1, r3
    aff6:	4413      	add	r3, r2
    aff8:	699b      	ldr	r3, [r3, #24]
    affa:	2b00      	cmp	r3, #0
    affc:	d117      	bne.n	b02e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    affe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b002:	4a27      	ldr	r2, [pc, #156]	; (b0a0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    b004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b008:	685a      	ldr	r2, [r3, #4]
    b00a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b00e:	2134      	movs	r1, #52	; 0x34
    b010:	fb01 f303 	mul.w	r3, r1, r3
    b014:	4413      	add	r3, r2
    b016:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    b018:	2b01      	cmp	r3, #1
    b01a:	d108      	bne.n	b02e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    b01c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b020:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b024:	4611      	mov	r1, r2
    b026:	4618      	mov	r0, r3
    b028:	f7ff fde6 	bl	abf8 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    b02c:	e035      	b.n	b09a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    b02e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b032:	4a1b      	ldr	r2, [pc, #108]	; (b0a0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    b034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b038:	685a      	ldr	r2, [r3, #4]
    b03a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b03e:	2134      	movs	r1, #52	; 0x34
    b040:	fb01 f303 	mul.w	r3, r1, r3
    b044:	4413      	add	r3, r2
    b046:	689b      	ldr	r3, [r3, #8]
    b048:	2b01      	cmp	r3, #1
    b04a:	d114      	bne.n	b076 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    b04c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b050:	4914      	ldr	r1, [pc, #80]	; (b0a4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    b052:	4613      	mov	r3, r2
    b054:	009b      	lsls	r3, r3, #2
    b056:	4413      	add	r3, r2
    b058:	009b      	lsls	r3, r3, #2
    b05a:	440b      	add	r3, r1
    b05c:	3308      	adds	r3, #8
    b05e:	2200      	movs	r2, #0
    b060:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b062:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b066:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b06a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b06e:	4618      	mov	r0, r3
    b070:	f7ff fed2 	bl	ae18 <Adc_Ipw_RestartConversion>
}
    b074:	e011      	b.n	b09a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    b076:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b07a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b07e:	4611      	mov	r1, r2
    b080:	4618      	mov	r0, r3
    b082:	f7ff fdb9 	bl	abf8 <Adc_Ipw_UpdateQueue>
}
    b086:	e008      	b.n	b09a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b088:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b08c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b090:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b094:	4618      	mov	r0, r3
    b096:	f7ff febf 	bl	ae18 <Adc_Ipw_RestartConversion>
}
    b09a:	bf00      	nop
    b09c:	b004      	add	sp, #16
    b09e:	bd10      	pop	{r4, pc}
    b0a0:	1fff8d18 	.word	0x1fff8d18
    b0a4:	1fff8d1c 	.word	0x1fff8d1c

0000b0a8 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    b0a8:	b510      	push	{r4, lr}
    b0aa:	b088      	sub	sp, #32
    b0ac:	4604      	mov	r4, r0
    b0ae:	4608      	mov	r0, r1
    b0b0:	4611      	mov	r1, r2
    b0b2:	461a      	mov	r2, r3
    b0b4:	4623      	mov	r3, r4
    b0b6:	f88d 300f 	strb.w	r3, [sp, #15]
    b0ba:	4603      	mov	r3, r0
    b0bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    b0c0:	460b      	mov	r3, r1
    b0c2:	f88d 300e 	strb.w	r3, [sp, #14]
    b0c6:	4613      	mov	r3, r2
    b0c8:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b0cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0d0:	4a44      	ldr	r2, [pc, #272]	; (b1e4 <Adc_Ipw_EndConversion+0x13c>)
    b0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0d6:	68da      	ldr	r2, [r3, #12]
    b0d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b0dc:	005b      	lsls	r3, r3, #1
    b0de:	4413      	add	r3, r2
    b0e0:	881b      	ldrh	r3, [r3, #0]
    b0e2:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b0e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0ea:	4a3e      	ldr	r2, [pc, #248]	; (b1e4 <Adc_Ipw_EndConversion+0x13c>)
    b0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0f0:	685a      	ldr	r2, [r3, #4]
    b0f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    b0f6:	2134      	movs	r1, #52	; 0x34
    b0f8:	fb01 f303 	mul.w	r3, r1, r3
    b0fc:	4413      	add	r3, r2
    b0fe:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    b100:	9b06      	ldr	r3, [sp, #24]
    b102:	8b9a      	ldrh	r2, [r3, #28]
    b104:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b108:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b10c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b110:	f7ff fd98 	bl	ac44 <Adc_Ipw_CheckConversionChannels>
    b114:	4603      	mov	r3, r0
    b116:	2b00      	cmp	r3, #0
    b118:	d160      	bne.n	b1dc <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    b11a:	9b06      	ldr	r3, [sp, #24]
    b11c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b120:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    b124:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b128:	492f      	ldr	r1, [pc, #188]	; (b1e8 <Adc_Ipw_EndConversion+0x140>)
    b12a:	4613      	mov	r3, r2
    b12c:	009b      	lsls	r3, r3, #2
    b12e:	4413      	add	r3, r2
    b130:	009b      	lsls	r3, r3, #2
    b132:	440b      	add	r3, r1
    b134:	3310      	adds	r3, #16
    b136:	781b      	ldrb	r3, [r3, #0]
    b138:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b13c:	429a      	cmp	r2, r3
    b13e:	d929      	bls.n	b194 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    b140:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b144:	4928      	ldr	r1, [pc, #160]	; (b1e8 <Adc_Ipw_EndConversion+0x140>)
    b146:	4613      	mov	r3, r2
    b148:	009b      	lsls	r3, r3, #2
    b14a:	4413      	add	r3, r2
    b14c:	009b      	lsls	r3, r3, #2
    b14e:	440b      	add	r3, r1
    b150:	3310      	adds	r3, #16
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b158:	1ad3      	subs	r3, r2, r3
    b15a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    b15e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b162:	2b0f      	cmp	r3, #15
    b164:	d805      	bhi.n	b172 <Adc_Ipw_EndConversion+0xca>
    b166:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b16a:	f003 030f 	and.w	r3, r3, #15
    b16e:	b2db      	uxtb	r3, r3
    b170:	e000      	b.n	b174 <Adc_Ipw_EndConversion+0xcc>
    b172:	2310      	movs	r3, #16
    b174:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    b178:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b17c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b180:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b184:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b188:	9300      	str	r3, [sp, #0]
    b18a:	4613      	mov	r3, r2
    b18c:	220f      	movs	r2, #15
    b18e:	f7ff f993 	bl	a4b8 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    b192:	e023      	b.n	b1dc <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    b194:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b198:	4913      	ldr	r1, [pc, #76]	; (b1e8 <Adc_Ipw_EndConversion+0x140>)
    b19a:	4613      	mov	r3, r2
    b19c:	009b      	lsls	r3, r3, #2
    b19e:	4413      	add	r3, r2
    b1a0:	009b      	lsls	r3, r3, #2
    b1a2:	440b      	add	r3, r1
    b1a4:	3308      	adds	r3, #8
    b1a6:	881b      	ldrh	r3, [r3, #0]
    b1a8:	b29b      	uxth	r3, r3
    b1aa:	3301      	adds	r3, #1
    b1ac:	b298      	uxth	r0, r3
    b1ae:	490e      	ldr	r1, [pc, #56]	; (b1e8 <Adc_Ipw_EndConversion+0x140>)
    b1b0:	4613      	mov	r3, r2
    b1b2:	009b      	lsls	r3, r3, #2
    b1b4:	4413      	add	r3, r2
    b1b6:	009b      	lsls	r3, r3, #2
    b1b8:	440b      	add	r3, r1
    b1ba:	3308      	adds	r3, #8
    b1bc:	4602      	mov	r2, r0
    b1be:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    b1c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b1c4:	2b00      	cmp	r3, #0
    b1c6:	d009      	beq.n	b1dc <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    b1c8:	9b06      	ldr	r3, [sp, #24]
    b1ca:	8b9a      	ldrh	r2, [r3, #28]
    b1cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b1d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b1d8:	f7ff feae 	bl	af38 <Adc_Ipw_UpdateSoftwareGroupState>
}
    b1dc:	bf00      	nop
    b1de:	b008      	add	sp, #32
    b1e0:	bd10      	pop	{r4, pc}
    b1e2:	bf00      	nop
    b1e4:	1fff8d18 	.word	0x1fff8d18
    b1e8:	1fff8d1c 	.word	0x1fff8d1c

0000b1ec <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    b1ec:	b084      	sub	sp, #16
    b1ee:	9003      	str	r0, [sp, #12]
    b1f0:	9102      	str	r1, [sp, #8]
    b1f2:	4611      	mov	r1, r2
    b1f4:	461a      	mov	r2, r3
    b1f6:	460b      	mov	r3, r1
    b1f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    b1fc:	4613      	mov	r3, r2
    b1fe:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    b202:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b206:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b20a:	fb02 f303 	mul.w	r3, r2, r3
    b20e:	005b      	lsls	r3, r3, #1
    b210:	9a02      	ldr	r2, [sp, #8]
    b212:	4413      	add	r3, r2
    b214:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b218:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b21a:	bf00      	nop
    b21c:	b004      	add	sp, #16
    b21e:	4770      	bx	lr

0000b220 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    b220:	b500      	push	{lr}
    b222:	b085      	sub	sp, #20
    b224:	4603      	mov	r3, r0
    b226:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    b22a:	f7ff fce1 	bl	abf0 <Adc_GetCoreID>
    b22e:	4603      	mov	r3, r0
    b230:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    b234:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b238:	b2db      	uxtb	r3, r3
    b23a:	461a      	mov	r2, r3
    b23c:	4b14      	ldr	r3, [pc, #80]	; (b290 <Adc_Ipw_EndConversionNotification+0x70>)
    b23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b242:	681a      	ldr	r2, [r3, #0]
    b244:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b248:	4413      	add	r3, r2
    b24a:	f893 3020 	ldrb.w	r3, [r3, #32]
    b24e:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    b252:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b256:	4a0f      	ldr	r2, [pc, #60]	; (b294 <Adc_Ipw_EndConversionNotification+0x74>)
    b258:	00db      	lsls	r3, r3, #3
    b25a:	4413      	add	r3, r2
    b25c:	885b      	ldrh	r3, [r3, #2]
    b25e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    b262:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b266:	4a0b      	ldr	r2, [pc, #44]	; (b294 <Adc_Ipw_EndConversionNotification+0x74>)
    b268:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b26c:	b29b      	uxth	r3, r3
    b26e:	2b00      	cmp	r3, #0
    b270:	d009      	beq.n	b286 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    b272:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b276:	b2db      	uxtb	r3, r3
    b278:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b27c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b280:	2201      	movs	r2, #1
    b282:	f7ff ff11 	bl	b0a8 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    b286:	bf00      	nop
    b288:	b005      	add	sp, #20
    b28a:	f85d fb04 	ldr.w	pc, [sp], #4
    b28e:	bf00      	nop
    b290:	1fff8d18 	.word	0x1fff8d18
    b294:	1fff8d44 	.word	0x1fff8d44

0000b298 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    b298:	b500      	push	{lr}
    b29a:	b085      	sub	sp, #20
    b29c:	4603      	mov	r3, r0
    b29e:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    b2a2:	2300      	movs	r3, #0
    b2a4:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b2a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2ac:	4618      	mov	r0, r3
    b2ae:	f7ff ffb7 	bl	b220 <Adc_Ipw_EndConversionNotification>
}
    b2b2:	bf00      	nop
    b2b4:	b005      	add	sp, #20
    b2b6:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2ba <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    b2ba:	b500      	push	{lr}
    b2bc:	b085      	sub	sp, #20
    b2be:	4603      	mov	r3, r0
    b2c0:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    b2c4:	2301      	movs	r3, #1
    b2c6:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b2ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2ce:	4618      	mov	r0, r3
    b2d0:	f7ff ffa6 	bl	b220 <Adc_Ipw_EndConversionNotification>
}
    b2d4:	bf00      	nop
    b2d6:	b005      	add	sp, #20
    b2d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2dc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    b2dc:	b084      	sub	sp, #16
    b2de:	9003      	str	r0, [sp, #12]
    b2e0:	9201      	str	r2, [sp, #4]
    b2e2:	461a      	mov	r2, r3
    b2e4:	460b      	mov	r3, r1
    b2e6:	f88d 300b 	strb.w	r3, [sp, #11]
    b2ea:	4613      	mov	r3, r2
    b2ec:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    b2f0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d016      	beq.n	b326 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    b2f8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2fc:	9903      	ldr	r1, [sp, #12]
    b2fe:	4613      	mov	r3, r2
    b300:	009b      	lsls	r3, r3, #2
    b302:	4413      	add	r3, r2
    b304:	00db      	lsls	r3, r3, #3
    b306:	440b      	add	r3, r1
    b308:	3310      	adds	r3, #16
    b30a:	6819      	ldr	r1, [r3, #0]
    b30c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b310:	9b01      	ldr	r3, [sp, #4]
    b312:	4319      	orrs	r1, r3
    b314:	9803      	ldr	r0, [sp, #12]
    b316:	4613      	mov	r3, r2
    b318:	009b      	lsls	r3, r3, #2
    b31a:	4413      	add	r3, r2
    b31c:	00db      	lsls	r3, r3, #3
    b31e:	4403      	add	r3, r0
    b320:	3310      	adds	r3, #16
    b322:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    b324:	e016      	b.n	b354 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    b326:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b32a:	9903      	ldr	r1, [sp, #12]
    b32c:	4613      	mov	r3, r2
    b32e:	009b      	lsls	r3, r3, #2
    b330:	4413      	add	r3, r2
    b332:	00db      	lsls	r3, r3, #3
    b334:	440b      	add	r3, r1
    b336:	3310      	adds	r3, #16
    b338:	6819      	ldr	r1, [r3, #0]
    b33a:	9b01      	ldr	r3, [sp, #4]
    b33c:	43db      	mvns	r3, r3
    b33e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b342:	4019      	ands	r1, r3
    b344:	9803      	ldr	r0, [sp, #12]
    b346:	4613      	mov	r3, r2
    b348:	009b      	lsls	r3, r3, #2
    b34a:	4413      	add	r3, r2
    b34c:	00db      	lsls	r3, r3, #3
    b34e:	4403      	add	r3, r0
    b350:	3310      	adds	r3, #16
    b352:	6019      	str	r1, [r3, #0]
}
    b354:	bf00      	nop
    b356:	b004      	add	sp, #16
    b358:	4770      	bx	lr

0000b35a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    b35a:	b082      	sub	sp, #8
    b35c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    b35e:	9b01      	ldr	r3, [sp, #4]
    b360:	681b      	ldr	r3, [r3, #0]
    b362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	601a      	str	r2, [r3, #0]
}
    b36a:	bf00      	nop
    b36c:	b002      	add	sp, #8
    b36e:	4770      	bx	lr

0000b370 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    b370:	b082      	sub	sp, #8
    b372:	9001      	str	r0, [sp, #4]
    b374:	460b      	mov	r3, r1
    b376:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    b37a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b37e:	2b00      	cmp	r3, #0
    b380:	d006      	beq.n	b390 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    b382:	9b01      	ldr	r3, [sp, #4]
    b384:	681b      	ldr	r3, [r3, #0]
    b386:	f043 0202 	orr.w	r2, r3, #2
    b38a:	9b01      	ldr	r3, [sp, #4]
    b38c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    b38e:	e005      	b.n	b39c <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    b390:	9b01      	ldr	r3, [sp, #4]
    b392:	681b      	ldr	r3, [r3, #0]
    b394:	f023 0202 	bic.w	r2, r3, #2
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	601a      	str	r2, [r3, #0]
}
    b39c:	bf00      	nop
    b39e:	b002      	add	sp, #8
    b3a0:	4770      	bx	lr

0000b3a2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b3a2:	b086      	sub	sp, #24
    b3a4:	9003      	str	r0, [sp, #12]
    b3a6:	460b      	mov	r3, r1
    b3a8:	9201      	str	r2, [sp, #4]
    b3aa:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    b3ae:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b3b2:	9903      	ldr	r1, [sp, #12]
    b3b4:	4613      	mov	r3, r2
    b3b6:	009b      	lsls	r3, r3, #2
    b3b8:	4413      	add	r3, r2
    b3ba:	00db      	lsls	r3, r3, #3
    b3bc:	440b      	add	r3, r1
    b3be:	3310      	adds	r3, #16
    b3c0:	681b      	ldr	r3, [r3, #0]
    b3c2:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    b3c4:	9b05      	ldr	r3, [sp, #20]
    b3c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    b3ca:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    b3cc:	9b01      	ldr	r3, [sp, #4]
    b3ce:	781b      	ldrb	r3, [r3, #0]
    b3d0:	461a      	mov	r2, r3
    b3d2:	9b05      	ldr	r3, [sp, #20]
    b3d4:	4313      	orrs	r3, r2
    b3d6:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    b3d8:	9b01      	ldr	r3, [sp, #4]
    b3da:	785b      	ldrb	r3, [r3, #1]
    b3dc:	021b      	lsls	r3, r3, #8
    b3de:	b29b      	uxth	r3, r3
    b3e0:	9a05      	ldr	r2, [sp, #20]
    b3e2:	4313      	orrs	r3, r2
    b3e4:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    b3e6:	9b01      	ldr	r3, [sp, #4]
    b3e8:	789b      	ldrb	r3, [r3, #2]
    b3ea:	041b      	lsls	r3, r3, #16
    b3ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b3f0:	9a05      	ldr	r2, [sp, #20]
    b3f2:	4313      	orrs	r3, r2
    b3f4:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    b3f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b3fa:	9903      	ldr	r1, [sp, #12]
    b3fc:	4613      	mov	r3, r2
    b3fe:	009b      	lsls	r3, r3, #2
    b400:	4413      	add	r3, r2
    b402:	00db      	lsls	r3, r3, #3
    b404:	440b      	add	r3, r1
    b406:	3310      	adds	r3, #16
    b408:	9a05      	ldr	r2, [sp, #20]
    b40a:	601a      	str	r2, [r3, #0]
}
    b40c:	bf00      	nop
    b40e:	b006      	add	sp, #24
    b410:	4770      	bx	lr

0000b412 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    b412:	b082      	sub	sp, #8
    b414:	9001      	str	r0, [sp, #4]
    b416:	460b      	mov	r3, r1
    b418:	f88d 3003 	strb.w	r3, [sp, #3]
    b41c:	4613      	mov	r3, r2
    b41e:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    b422:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b426:	9901      	ldr	r1, [sp, #4]
    b428:	4613      	mov	r3, r2
    b42a:	009b      	lsls	r3, r3, #2
    b42c:	4413      	add	r3, r2
    b42e:	00db      	lsls	r3, r3, #3
    b430:	440b      	add	r3, r1
    b432:	3314      	adds	r3, #20
    b434:	6819      	ldr	r1, [r3, #0]
    b436:	f8bd 3000 	ldrh.w	r3, [sp]
    b43a:	041b      	lsls	r3, r3, #16
    b43c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b440:	43db      	mvns	r3, r3
    b442:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b446:	4019      	ands	r1, r3
    b448:	9801      	ldr	r0, [sp, #4]
    b44a:	4613      	mov	r3, r2
    b44c:	009b      	lsls	r3, r3, #2
    b44e:	4413      	add	r3, r2
    b450:	00db      	lsls	r3, r3, #3
    b452:	4403      	add	r3, r0
    b454:	3314      	adds	r3, #20
    b456:	6019      	str	r1, [r3, #0]
}
    b458:	bf00      	nop
    b45a:	b002      	add	sp, #8
    b45c:	4770      	bx	lr

0000b45e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    b45e:	b500      	push	{lr}
    b460:	b087      	sub	sp, #28
    b462:	9001      	str	r0, [sp, #4]
    b464:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b466:	4a50      	ldr	r2, [pc, #320]	; (b5a8 <Pdb_Adc_Ip_Init+0x14a>)
    b468:	9b01      	ldr	r3, [sp, #4]
    b46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b46e:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    b470:	2300      	movs	r3, #0
    b472:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    b474:	9b00      	ldr	r3, [sp, #0]
    b476:	681b      	ldr	r3, [r3, #0]
    b478:	049b      	lsls	r3, r3, #18
    b47a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    b47e:	9a04      	ldr	r2, [sp, #16]
    b480:	4313      	orrs	r3, r2
    b482:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    b484:	9b00      	ldr	r3, [sp, #0]
    b486:	685b      	ldr	r3, [r3, #4]
    b488:	031b      	lsls	r3, r3, #12
    b48a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b48e:	9a04      	ldr	r2, [sp, #16]
    b490:	4313      	orrs	r3, r2
    b492:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    b494:	9b00      	ldr	r3, [sp, #0]
    b496:	689b      	ldr	r3, [r3, #8]
    b498:	009b      	lsls	r3, r3, #2
    b49a:	f003 030c 	and.w	r3, r3, #12
    b49e:	9a04      	ldr	r2, [sp, #16]
    b4a0:	4313      	orrs	r3, r2
    b4a2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    b4a4:	9b00      	ldr	r3, [sp, #0]
    b4a6:	68db      	ldr	r3, [r3, #12]
    b4a8:	021b      	lsls	r3, r3, #8
    b4aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b4ae:	9a04      	ldr	r2, [sp, #16]
    b4b0:	4313      	orrs	r3, r2
    b4b2:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    b4b4:	9b00      	ldr	r3, [sp, #0]
    b4b6:	7c1b      	ldrb	r3, [r3, #16]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d003      	beq.n	b4c4 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    b4bc:	9b04      	ldr	r3, [sp, #16]
    b4be:	f043 0302 	orr.w	r3, r3, #2
    b4c2:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    b4c4:	9b00      	ldr	r3, [sp, #0]
    b4c6:	7c5b      	ldrb	r3, [r3, #17]
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d003      	beq.n	b4d4 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    b4cc:	9b04      	ldr	r3, [sp, #16]
    b4ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b4d2:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    b4d4:	9b00      	ldr	r3, [sp, #0]
    b4d6:	69db      	ldr	r3, [r3, #28]
    b4d8:	2b00      	cmp	r3, #0
    b4da:	d003      	beq.n	b4e4 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    b4dc:	9b04      	ldr	r3, [sp, #16]
    b4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b4e2:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    b4e4:	9b03      	ldr	r3, [sp, #12]
    b4e6:	9a04      	ldr	r2, [sp, #16]
    b4e8:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    b4ea:	9b00      	ldr	r3, [sp, #0]
    b4ec:	8a5b      	ldrh	r3, [r3, #18]
    b4ee:	4619      	mov	r1, r3
    b4f0:	9801      	ldr	r0, [sp, #4]
    b4f2:	f000 f98f 	bl	b814 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    b4f6:	9b00      	ldr	r3, [sp, #0]
    b4f8:	7d1b      	ldrb	r3, [r3, #20]
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	d03e      	beq.n	b57c <Pdb_Adc_Ip_Init+0x11e>
    b4fe:	9b00      	ldr	r3, [sp, #0]
    b500:	699b      	ldr	r3, [r3, #24]
    b502:	2b00      	cmp	r3, #0
    b504:	d03a      	beq.n	b57c <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b506:	2300      	movs	r3, #0
    b508:	f88d 3017 	strb.w	r3, [sp, #23]
    b50c:	e030      	b.n	b570 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    b50e:	9b00      	ldr	r3, [sp, #0]
    b510:	6999      	ldr	r1, [r3, #24]
    b512:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b516:	4613      	mov	r3, r2
    b518:	009b      	lsls	r3, r3, #2
    b51a:	4413      	add	r3, r2
    b51c:	009b      	lsls	r3, r3, #2
    b51e:	440b      	add	r3, r1
    b520:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    b522:	9b02      	ldr	r3, [sp, #8]
    b524:	7819      	ldrb	r1, [r3, #0]
    b526:	9b02      	ldr	r3, [sp, #8]
    b528:	3301      	adds	r3, #1
    b52a:	461a      	mov	r2, r3
    b52c:	9803      	ldr	r0, [sp, #12]
    b52e:	f7ff ff38 	bl	b3a2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b532:	2300      	movs	r3, #0
    b534:	f88d 3016 	strb.w	r3, [sp, #22]
    b538:	e011      	b.n	b55e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    b53a:	9b02      	ldr	r3, [sp, #8]
    b53c:	7819      	ldrb	r1, [r3, #0]
    b53e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b542:	9a02      	ldr	r2, [sp, #8]
    b544:	005b      	lsls	r3, r3, #1
    b546:	4413      	add	r3, r2
    b548:	889b      	ldrh	r3, [r3, #4]
    b54a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b54e:	9801      	ldr	r0, [sp, #4]
    b550:	f000 fa74 	bl	ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b554:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b558:	3301      	adds	r3, #1
    b55a:	f88d 3016 	strb.w	r3, [sp, #22]
    b55e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b562:	2b07      	cmp	r3, #7
    b564:	d9e9      	bls.n	b53a <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b566:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b56a:	3301      	adds	r3, #1
    b56c:	f88d 3017 	strb.w	r3, [sp, #23]
    b570:	9b00      	ldr	r3, [sp, #0]
    b572:	7d1b      	ldrb	r3, [r3, #20]
    b574:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b578:	429a      	cmp	r2, r3
    b57a:	d3c8      	bcc.n	b50e <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    b57c:	9801      	ldr	r0, [sp, #4]
    b57e:	f000 f89b 	bl	b6b8 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    b582:	9801      	ldr	r0, [sp, #4]
    b584:	f000 f92e 	bl	b7e4 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    b588:	9b00      	ldr	r3, [sp, #0]
    b58a:	69da      	ldr	r2, [r3, #28]
    b58c:	4907      	ldr	r1, [pc, #28]	; (b5ac <Pdb_Adc_Ip_Init+0x14e>)
    b58e:	9b01      	ldr	r3, [sp, #4]
    b590:	00db      	lsls	r3, r3, #3
    b592:	440b      	add	r3, r1
    b594:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    b596:	4a05      	ldr	r2, [pc, #20]	; (b5ac <Pdb_Adc_Ip_Init+0x14e>)
    b598:	9b01      	ldr	r3, [sp, #4]
    b59a:	2101      	movs	r1, #1
    b59c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b5a0:	bf00      	nop
    b5a2:	b007      	add	sp, #28
    b5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5a8:	00016718 	.word	0x00016718
    b5ac:	1fff8dec 	.word	0x1fff8dec

0000b5b0 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    b5b0:	b500      	push	{lr}
    b5b2:	b097      	sub	sp, #92	; 0x5c
    b5b4:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    b5b6:	2300      	movs	r3, #0
    b5b8:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    b5ba:	2300      	movs	r3, #0
    b5bc:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    b5be:	2300      	movs	r3, #0
    b5c0:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    b5c2:	2300      	movs	r3, #0
    b5c4:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    b5c6:	2300      	movs	r3, #0
    b5c8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    b5cc:	2300      	movs	r3, #0
    b5ce:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    b5d2:	2300      	movs	r3, #0
    b5d4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    b5d8:	2302      	movs	r3, #2
    b5da:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b5de:	2300      	movs	r3, #0
    b5e0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b5e4:	e04d      	b.n	b682 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    b5e6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5ea:	4613      	mov	r3, r2
    b5ec:	009b      	lsls	r3, r3, #2
    b5ee:	4413      	add	r3, r2
    b5f0:	009b      	lsls	r3, r3, #2
    b5f2:	aa16      	add	r2, sp, #88	; 0x58
    b5f4:	4413      	add	r3, r2
    b5f6:	3b4c      	subs	r3, #76	; 0x4c
    b5f8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5fc:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    b5fe:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b602:	4613      	mov	r3, r2
    b604:	009b      	lsls	r3, r3, #2
    b606:	4413      	add	r3, r2
    b608:	009b      	lsls	r3, r3, #2
    b60a:	aa16      	add	r2, sp, #88	; 0x58
    b60c:	4413      	add	r3, r2
    b60e:	3b4b      	subs	r3, #75	; 0x4b
    b610:	2200      	movs	r2, #0
    b612:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    b614:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b618:	4613      	mov	r3, r2
    b61a:	009b      	lsls	r3, r3, #2
    b61c:	4413      	add	r3, r2
    b61e:	009b      	lsls	r3, r3, #2
    b620:	aa16      	add	r2, sp, #88	; 0x58
    b622:	4413      	add	r3, r2
    b624:	3b4a      	subs	r3, #74	; 0x4a
    b626:	2200      	movs	r2, #0
    b628:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    b62a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b62e:	4613      	mov	r3, r2
    b630:	009b      	lsls	r3, r3, #2
    b632:	4413      	add	r3, r2
    b634:	009b      	lsls	r3, r3, #2
    b636:	aa16      	add	r2, sp, #88	; 0x58
    b638:	4413      	add	r3, r2
    b63a:	3b49      	subs	r3, #73	; 0x49
    b63c:	2200      	movs	r2, #0
    b63e:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b640:	2300      	movs	r3, #0
    b642:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b646:	e013      	b.n	b670 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    b648:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b64c:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    b650:	4613      	mov	r3, r2
    b652:	009b      	lsls	r3, r3, #2
    b654:	4413      	add	r3, r2
    b656:	005b      	lsls	r3, r3, #1
    b658:	440b      	add	r3, r1
    b65a:	005b      	lsls	r3, r3, #1
    b65c:	aa16      	add	r2, sp, #88	; 0x58
    b65e:	4413      	add	r3, r2
    b660:	2200      	movs	r2, #0
    b662:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b666:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b66a:	3301      	adds	r3, #1
    b66c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b670:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b674:	2b07      	cmp	r3, #7
    b676:	d9e7      	bls.n	b648 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b678:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b67c:	3301      	adds	r3, #1
    b67e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b682:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b686:	2b01      	cmp	r3, #1
    b688:	d9ad      	bls.n	b5e6 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    b68a:	ab03      	add	r3, sp, #12
    b68c:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    b68e:	2300      	movs	r3, #0
    b690:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    b692:	ab0d      	add	r3, sp, #52	; 0x34
    b694:	4619      	mov	r1, r3
    b696:	9801      	ldr	r0, [sp, #4]
    b698:	f7ff fee1 	bl	b45e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    b69c:	9801      	ldr	r0, [sp, #4]
    b69e:	f000 f823 	bl	b6e8 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    b6a2:	4a04      	ldr	r2, [pc, #16]	; (b6b4 <Pdb_Adc_Ip_DeInit+0x104>)
    b6a4:	9b01      	ldr	r3, [sp, #4]
    b6a6:	2100      	movs	r1, #0
    b6a8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b6ac:	bf00      	nop
    b6ae:	b017      	add	sp, #92	; 0x5c
    b6b0:	f85d fb04 	ldr.w	pc, [sp], #4
    b6b4:	1fff8dec 	.word	0x1fff8dec

0000b6b8 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    b6b8:	b500      	push	{lr}
    b6ba:	b085      	sub	sp, #20
    b6bc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6be:	4a09      	ldr	r2, [pc, #36]	; (b6e4 <Pdb_Adc_Ip_Enable+0x2c>)
    b6c0:	9b01      	ldr	r3, [sp, #4]
    b6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    b6c8:	f004 ffd4 	bl	10674 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    b6cc:	9b03      	ldr	r3, [sp, #12]
    b6ce:	681b      	ldr	r3, [r3, #0]
    b6d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    b6d4:	9b03      	ldr	r3, [sp, #12]
    b6d6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    b6d8:	f004 fff8 	bl	106cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    b6dc:	bf00      	nop
    b6de:	b005      	add	sp, #20
    b6e0:	f85d fb04 	ldr.w	pc, [sp], #4
    b6e4:	00016718 	.word	0x00016718

0000b6e8 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    b6e8:	b500      	push	{lr}
    b6ea:	b085      	sub	sp, #20
    b6ec:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6ee:	4a08      	ldr	r2, [pc, #32]	; (b710 <Pdb_Adc_Ip_Disable+0x28>)
    b6f0:	9b01      	ldr	r3, [sp, #4]
    b6f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    b6f8:	f005 f80e 	bl	10718 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b6fc:	9803      	ldr	r0, [sp, #12]
    b6fe:	f7ff fe2c 	bl	b35a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    b702:	f005 f835 	bl	10770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    b706:	bf00      	nop
    b708:	b005      	add	sp, #20
    b70a:	f85d fb04 	ldr.w	pc, [sp], #4
    b70e:	bf00      	nop
    b710:	00016718 	.word	0x00016718

0000b714 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    b714:	b500      	push	{lr}
    b716:	b085      	sub	sp, #20
    b718:	9001      	str	r0, [sp, #4]
    b71a:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b71c:	4a0e      	ldr	r2, [pc, #56]	; (b758 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    b71e:	9b01      	ldr	r3, [sp, #4]
    b720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b724:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    b726:	f005 f849 	bl	107bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    b72a:	9b03      	ldr	r3, [sp, #12]
    b72c:	681b      	ldr	r3, [r3, #0]
    b72e:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    b730:	9b02      	ldr	r3, [sp, #8]
    b732:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    b736:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    b738:	9b00      	ldr	r3, [sp, #0]
    b73a:	021b      	lsls	r3, r3, #8
    b73c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b740:	9a02      	ldr	r2, [sp, #8]
    b742:	4313      	orrs	r3, r2
    b744:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    b746:	9b03      	ldr	r3, [sp, #12]
    b748:	9a02      	ldr	r2, [sp, #8]
    b74a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    b74c:	f005 f862 	bl	10814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    b750:	bf00      	nop
    b752:	b005      	add	sp, #20
    b754:	f85d fb04 	ldr.w	pc, [sp], #4
    b758:	00016718 	.word	0x00016718

0000b75c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    b75c:	b500      	push	{lr}
    b75e:	b085      	sub	sp, #20
    b760:	9001      	str	r0, [sp, #4]
    b762:	460b      	mov	r3, r1
    b764:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b768:	4a09      	ldr	r2, [pc, #36]	; (b790 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    b76a:	9b01      	ldr	r3, [sp, #4]
    b76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b770:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    b772:	f005 f875 	bl	10860 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    b776:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b77a:	4619      	mov	r1, r3
    b77c:	9803      	ldr	r0, [sp, #12]
    b77e:	f7ff fdf7 	bl	b370 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    b782:	f005 f899 	bl	108b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    b786:	bf00      	nop
    b788:	b005      	add	sp, #20
    b78a:	f85d fb04 	ldr.w	pc, [sp], #4
    b78e:	bf00      	nop
    b790:	00016718 	.word	0x00016718

0000b794 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    b794:	b500      	push	{lr}
    b796:	b085      	sub	sp, #20
    b798:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b79a:	4a09      	ldr	r2, [pc, #36]	; (b7c0 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    b79c:	9b01      	ldr	r3, [sp, #4]
    b79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7a2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    b7a4:	f005 f8ae 	bl	10904 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    b7a8:	9b03      	ldr	r3, [sp, #12]
    b7aa:	681b      	ldr	r3, [r3, #0]
    b7ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    b7b0:	9b03      	ldr	r3, [sp, #12]
    b7b2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    b7b4:	f005 f8d2 	bl	1095c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    b7b8:	bf00      	nop
    b7ba:	b005      	add	sp, #20
    b7bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c0:	00016718 	.word	0x00016718

0000b7c4 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    b7c4:	b084      	sub	sp, #16
    b7c6:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7c8:	4a05      	ldr	r2, [pc, #20]	; (b7e0 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    b7ca:	9b01      	ldr	r3, [sp, #4]
    b7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7d0:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    b7d2:	9b03      	ldr	r3, [sp, #12]
    b7d4:	689b      	ldr	r3, [r3, #8]
    b7d6:	b29b      	uxth	r3, r3
}
    b7d8:	4618      	mov	r0, r3
    b7da:	b004      	add	sp, #16
    b7dc:	4770      	bx	lr
    b7de:	bf00      	nop
    b7e0:	00016718 	.word	0x00016718

0000b7e4 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    b7e4:	b500      	push	{lr}
    b7e6:	b085      	sub	sp, #20
    b7e8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7ea:	4a09      	ldr	r2, [pc, #36]	; (b810 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    b7ec:	9b01      	ldr	r3, [sp, #4]
    b7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f2:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    b7f4:	f005 f8d8 	bl	109a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    b7f8:	9b03      	ldr	r3, [sp, #12]
    b7fa:	681b      	ldr	r3, [r3, #0]
    b7fc:	f043 0201 	orr.w	r2, r3, #1
    b800:	9b03      	ldr	r3, [sp, #12]
    b802:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    b804:	f005 f8fc 	bl	10a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    b808:	bf00      	nop
    b80a:	b005      	add	sp, #20
    b80c:	f85d fb04 	ldr.w	pc, [sp], #4
    b810:	00016718 	.word	0x00016718

0000b814 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    b814:	b500      	push	{lr}
    b816:	b085      	sub	sp, #20
    b818:	9001      	str	r0, [sp, #4]
    b81a:	460b      	mov	r3, r1
    b81c:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b820:	4a0d      	ldr	r2, [pc, #52]	; (b858 <Pdb_Adc_Ip_SetModulus+0x44>)
    b822:	9b01      	ldr	r3, [sp, #4]
    b824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b828:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    b82a:	f005 fb9f 	bl	10f6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    b82e:	9b03      	ldr	r3, [sp, #12]
    b830:	685b      	ldr	r3, [r3, #4]
    b832:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    b834:	9b02      	ldr	r3, [sp, #8]
    b836:	0c1b      	lsrs	r3, r3, #16
    b838:	041b      	lsls	r3, r3, #16
    b83a:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    b83c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b840:	9a02      	ldr	r2, [sp, #8]
    b842:	4313      	orrs	r3, r2
    b844:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    b846:	9b03      	ldr	r3, [sp, #12]
    b848:	9a02      	ldr	r2, [sp, #8]
    b84a:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    b84c:	f005 fbba 	bl	10fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    b850:	bf00      	nop
    b852:	b005      	add	sp, #20
    b854:	f85d fb04 	ldr.w	pc, [sp], #4
    b858:	00016718 	.word	0x00016718

0000b85c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b85c:	b500      	push	{lr}
    b85e:	b087      	sub	sp, #28
    b860:	9003      	str	r0, [sp, #12]
    b862:	460b      	mov	r3, r1
    b864:	9201      	str	r2, [sp, #4]
    b866:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b86a:	4a0a      	ldr	r2, [pc, #40]	; (b894 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    b86c:	9b03      	ldr	r3, [sp, #12]
    b86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b872:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    b874:	f005 f93c 	bl	10af0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    b878:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b87c:	9a01      	ldr	r2, [sp, #4]
    b87e:	4619      	mov	r1, r3
    b880:	9805      	ldr	r0, [sp, #20]
    b882:	f7ff fd8e 	bl	b3a2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    b886:	f005 f95f 	bl	10b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    b88a:	bf00      	nop
    b88c:	b007      	add	sp, #28
    b88e:	f85d fb04 	ldr.w	pc, [sp], #4
    b892:	bf00      	nop
    b894:	00016718 	.word	0x00016718

0000b898 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    b898:	b084      	sub	sp, #16
    b89a:	9001      	str	r0, [sp, #4]
    b89c:	460b      	mov	r3, r1
    b89e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8a2:	4a0c      	ldr	r2, [pc, #48]	; (b8d4 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    b8a4:	9b01      	ldr	r3, [sp, #4]
    b8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8aa:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    b8ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b8b0:	9903      	ldr	r1, [sp, #12]
    b8b2:	4613      	mov	r3, r2
    b8b4:	009b      	lsls	r3, r3, #2
    b8b6:	4413      	add	r3, r2
    b8b8:	00db      	lsls	r3, r3, #3
    b8ba:	440b      	add	r3, r1
    b8bc:	3314      	adds	r3, #20
    b8be:	681b      	ldr	r3, [r3, #0]
    b8c0:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    b8c2:	9b02      	ldr	r3, [sp, #8]
    b8c4:	0c1b      	lsrs	r3, r3, #16
    b8c6:	b2db      	uxtb	r3, r3
    b8c8:	9302      	str	r3, [sp, #8]

    return Result;
    b8ca:	9b02      	ldr	r3, [sp, #8]
}
    b8cc:	4618      	mov	r0, r3
    b8ce:	b004      	add	sp, #16
    b8d0:	4770      	bx	lr
    b8d2:	bf00      	nop
    b8d4:	00016718 	.word	0x00016718

0000b8d8 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    b8d8:	b500      	push	{lr}
    b8da:	b085      	sub	sp, #20
    b8dc:	9001      	str	r0, [sp, #4]
    b8de:	460b      	mov	r3, r1
    b8e0:	f88d 3003 	strb.w	r3, [sp, #3]
    b8e4:	4613      	mov	r3, r2
    b8e6:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8ea:	4a0a      	ldr	r2, [pc, #40]	; (b914 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    b8ec:	9b01      	ldr	r3, [sp, #4]
    b8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8f2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    b8f4:	f005 fa96 	bl	10e24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    b8f8:	f8bd 2000 	ldrh.w	r2, [sp]
    b8fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b900:	4619      	mov	r1, r3
    b902:	9803      	ldr	r0, [sp, #12]
    b904:	f7ff fd85 	bl	b412 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    b908:	f005 fab8 	bl	10e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    b90c:	bf00      	nop
    b90e:	b005      	add	sp, #20
    b910:	f85d fb04 	ldr.w	pc, [sp], #4
    b914:	00016718 	.word	0x00016718

0000b918 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    b918:	b500      	push	{lr}
    b91a:	b085      	sub	sp, #20
    b91c:	9001      	str	r0, [sp, #4]
    b91e:	4608      	mov	r0, r1
    b920:	4611      	mov	r1, r2
    b922:	461a      	mov	r2, r3
    b924:	4603      	mov	r3, r0
    b926:	f88d 3003 	strb.w	r3, [sp, #3]
    b92a:	460b      	mov	r3, r1
    b92c:	f88d 3002 	strb.w	r3, [sp, #2]
    b930:	4613      	mov	r3, r2
    b932:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b936:	4a10      	ldr	r2, [pc, #64]	; (b978 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    b938:	9b01      	ldr	r3, [sp, #4]
    b93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b93e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b940:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b944:	2201      	movs	r2, #1
    b946:	fa02 f303 	lsl.w	r3, r2, r3
    b94a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    b94c:	9b02      	ldr	r3, [sp, #8]
    b94e:	041b      	lsls	r3, r3, #16
    b950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b954:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    b956:	f005 f91d 	bl	10b94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b95a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b95e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b962:	9a02      	ldr	r2, [sp, #8]
    b964:	9803      	ldr	r0, [sp, #12]
    b966:	f7ff fcb9 	bl	b2dc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    b96a:	f005 f93f 	bl	10bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    b96e:	bf00      	nop
    b970:	b005      	add	sp, #20
    b972:	f85d fb04 	ldr.w	pc, [sp], #4
    b976:	bf00      	nop
    b978:	00016718 	.word	0x00016718

0000b97c <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    b97c:	b500      	push	{lr}
    b97e:	b085      	sub	sp, #20
    b980:	9001      	str	r0, [sp, #4]
    b982:	4608      	mov	r0, r1
    b984:	4611      	mov	r1, r2
    b986:	461a      	mov	r2, r3
    b988:	4603      	mov	r3, r0
    b98a:	f88d 3003 	strb.w	r3, [sp, #3]
    b98e:	460b      	mov	r3, r1
    b990:	f88d 3002 	strb.w	r3, [sp, #2]
    b994:	4613      	mov	r3, r2
    b996:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b99a:	4a0f      	ldr	r2, [pc, #60]	; (b9d8 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    b99c:	9b01      	ldr	r3, [sp, #4]
    b99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9a2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b9a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b9a8:	2201      	movs	r2, #1
    b9aa:	fa02 f303 	lsl.w	r3, r2, r3
    b9ae:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    b9b0:	9b02      	ldr	r3, [sp, #8]
    b9b2:	b2db      	uxtb	r3, r3
    b9b4:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    b9b6:	f005 f93f 	bl	10c38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b9ba:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b9be:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b9c2:	9a02      	ldr	r2, [sp, #8]
    b9c4:	9803      	ldr	r0, [sp, #12]
    b9c6:	f7ff fc89 	bl	b2dc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    b9ca:	f005 f961 	bl	10c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    b9ce:	bf00      	nop
    b9d0:	b005      	add	sp, #20
    b9d2:	f85d fb04 	ldr.w	pc, [sp], #4
    b9d6:	bf00      	nop
    b9d8:	00016718 	.word	0x00016718

0000b9dc <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    b9dc:	b500      	push	{lr}
    b9de:	b085      	sub	sp, #20
    b9e0:	9001      	str	r0, [sp, #4]
    b9e2:	4608      	mov	r0, r1
    b9e4:	4611      	mov	r1, r2
    b9e6:	461a      	mov	r2, r3
    b9e8:	4603      	mov	r3, r0
    b9ea:	f88d 3003 	strb.w	r3, [sp, #3]
    b9ee:	460b      	mov	r3, r1
    b9f0:	f88d 3002 	strb.w	r3, [sp, #2]
    b9f4:	4613      	mov	r3, r2
    b9f6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b9fa:	4a0f      	ldr	r2, [pc, #60]	; (ba38 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    b9fc:	9b01      	ldr	r3, [sp, #4]
    b9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba02:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    ba04:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ba08:	2201      	movs	r2, #1
    ba0a:	fa02 f303 	lsl.w	r3, r2, r3
    ba0e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    ba10:	9b02      	ldr	r3, [sp, #8]
    ba12:	021b      	lsls	r3, r3, #8
    ba14:	b29b      	uxth	r3, r3
    ba16:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    ba18:	f005 f960 	bl	10cdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    ba1c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    ba20:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ba24:	9a02      	ldr	r2, [sp, #8]
    ba26:	9803      	ldr	r0, [sp, #12]
    ba28:	f7ff fc58 	bl	b2dc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    ba2c:	f005 f982 	bl	10d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    ba30:	bf00      	nop
    ba32:	b005      	add	sp, #20
    ba34:	f85d fb04 	ldr.w	pc, [sp], #4
    ba38:	00016718 	.word	0x00016718

0000ba3c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    ba3c:	b410      	push	{r4}
    ba3e:	b085      	sub	sp, #20
    ba40:	9001      	str	r0, [sp, #4]
    ba42:	4608      	mov	r0, r1
    ba44:	4611      	mov	r1, r2
    ba46:	461a      	mov	r2, r3
    ba48:	4603      	mov	r3, r0
    ba4a:	f88d 3003 	strb.w	r3, [sp, #3]
    ba4e:	460b      	mov	r3, r1
    ba50:	f88d 3002 	strb.w	r3, [sp, #2]
    ba54:	4613      	mov	r3, r2
    ba56:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba5a:	4a0c      	ldr	r2, [pc, #48]	; (ba8c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    ba5c:	9b01      	ldr	r3, [sp, #4]
    ba5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba62:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    ba64:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba68:	f89d 4002 	ldrb.w	r4, [sp, #2]
    ba6c:	f8bd 0000 	ldrh.w	r0, [sp]
    ba70:	9903      	ldr	r1, [sp, #12]
    ba72:	4613      	mov	r3, r2
    ba74:	009b      	lsls	r3, r3, #2
    ba76:	4413      	add	r3, r2
    ba78:	005b      	lsls	r3, r3, #1
    ba7a:	4423      	add	r3, r4
    ba7c:	3306      	adds	r3, #6
    ba7e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    ba82:	bf00      	nop
    ba84:	b005      	add	sp, #20
    ba86:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba8a:	4770      	bx	lr
    ba8c:	00016718 	.word	0x00016718

0000ba90 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    ba90:	b500      	push	{lr}
    ba92:	b087      	sub	sp, #28
    ba94:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba96:	4a19      	ldr	r2, [pc, #100]	; (bafc <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    ba98:	9b01      	ldr	r3, [sp, #4]
    ba9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba9e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    baa0:	2300      	movs	r3, #0
    baa2:	f88d 300c 	strb.w	r3, [sp, #12]
    baa6:	2300      	movs	r3, #0
    baa8:	f88d 300d 	strb.w	r3, [sp, #13]
    baac:	2300      	movs	r3, #0
    baae:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    bab2:	f004 ffcb 	bl	10a4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    bab6:	9804      	ldr	r0, [sp, #16]
    bab8:	f7ff fc4f 	bl	b35a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    babc:	2100      	movs	r1, #0
    babe:	9804      	ldr	r0, [sp, #16]
    bac0:	f7ff fc56 	bl	b370 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    bac4:	f004 ffee 	bl	10aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bac8:	2300      	movs	r3, #0
    baca:	f88d 3017 	strb.w	r3, [sp, #23]
    bace:	e00b      	b.n	bae8 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    bad0:	aa03      	add	r2, sp, #12
    bad2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bad6:	4619      	mov	r1, r3
    bad8:	9804      	ldr	r0, [sp, #16]
    bada:	f000 f899 	bl	bc10 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bade:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bae2:	3301      	adds	r3, #1
    bae4:	f88d 3017 	strb.w	r3, [sp, #23]
    bae8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    baec:	2b01      	cmp	r3, #1
    baee:	d9ef      	bls.n	bad0 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    baf0:	bf00      	nop
    baf2:	bf00      	nop
    baf4:	b007      	add	sp, #28
    baf6:	f85d fb04 	ldr.w	pc, [sp], #4
    bafa:	bf00      	nop
    bafc:	00016718 	.word	0x00016718

0000bb00 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    bb00:	b500      	push	{lr}
    bb02:	b087      	sub	sp, #28
    bb04:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    bb06:	4a40      	ldr	r2, [pc, #256]	; (bc08 <Pdb_Adc_Ip_IRQHandler+0x108>)
    bb08:	9b01      	ldr	r3, [sp, #4]
    bb0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb0e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    bb10:	4a3e      	ldr	r2, [pc, #248]	; (bc0c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb12:	9b01      	ldr	r3, [sp, #4]
    bb14:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    bb18:	2b00      	cmp	r3, #0
    bb1a:	d04d      	beq.n	bbb8 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    bb1c:	9b04      	ldr	r3, [sp, #16]
    bb1e:	681b      	ldr	r3, [r3, #0]
    bb20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    bb24:	2b00      	cmp	r3, #0
    bb26:	d06a      	beq.n	bbfe <Pdb_Adc_Ip_IRQHandler+0xfe>
    bb28:	4a38      	ldr	r2, [pc, #224]	; (bc0c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb2a:	9b01      	ldr	r3, [sp, #4]
    bb2c:	00db      	lsls	r3, r3, #3
    bb2e:	4413      	add	r3, r2
    bb30:	685b      	ldr	r3, [r3, #4]
    bb32:	2b00      	cmp	r3, #0
    bb34:	d063      	beq.n	bbfe <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb36:	2300      	movs	r3, #0
    bb38:	f88d 3017 	strb.w	r3, [sp, #23]
    bb3c:	e037      	b.n	bbae <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    bb3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb42:	9904      	ldr	r1, [sp, #16]
    bb44:	4613      	mov	r3, r2
    bb46:	009b      	lsls	r3, r3, #2
    bb48:	4413      	add	r3, r2
    bb4a:	00db      	lsls	r3, r3, #3
    bb4c:	440b      	add	r3, r1
    bb4e:	3314      	adds	r3, #20
    bb50:	681b      	ldr	r3, [r3, #0]
    bb52:	b29b      	uxth	r3, r3
    bb54:	b2db      	uxtb	r3, r3
    bb56:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    bb5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    bb5e:	2b00      	cmp	r3, #0
    bb60:	d020      	beq.n	bba4 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bb62:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb66:	9904      	ldr	r1, [sp, #16]
    bb68:	4613      	mov	r3, r2
    bb6a:	009b      	lsls	r3, r3, #2
    bb6c:	4413      	add	r3, r2
    bb6e:	00db      	lsls	r3, r3, #3
    bb70:	440b      	add	r3, r1
    bb72:	3314      	adds	r3, #20
    bb74:	681b      	ldr	r3, [r3, #0]
    bb76:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bb7e:	9804      	ldr	r0, [sp, #16]
    bb80:	4613      	mov	r3, r2
    bb82:	009b      	lsls	r3, r3, #2
    bb84:	4413      	add	r3, r2
    bb86:	00db      	lsls	r3, r3, #3
    bb88:	4403      	add	r3, r0
    bb8a:	3314      	adds	r3, #20
    bb8c:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    bb8e:	4a1f      	ldr	r2, [pc, #124]	; (bc0c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb90:	9b01      	ldr	r3, [sp, #4]
    bb92:	00db      	lsls	r3, r3, #3
    bb94:	4413      	add	r3, r2
    bb96:	685b      	ldr	r3, [r3, #4]
    bb98:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    bb9c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bba0:	4610      	mov	r0, r2
    bba2:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bba4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bba8:	3301      	adds	r3, #1
    bbaa:	f88d 3017 	strb.w	r3, [sp, #23]
    bbae:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbb2:	2b01      	cmp	r3, #1
    bbb4:	d9c3      	bls.n	bb3e <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    bbb6:	e022      	b.n	bbfe <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bbb8:	2300      	movs	r3, #0
    bbba:	f88d 3017 	strb.w	r3, [sp, #23]
    bbbe:	e01a      	b.n	bbf6 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bbc0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bbc4:	9904      	ldr	r1, [sp, #16]
    bbc6:	4613      	mov	r3, r2
    bbc8:	009b      	lsls	r3, r3, #2
    bbca:	4413      	add	r3, r2
    bbcc:	00db      	lsls	r3, r3, #3
    bbce:	440b      	add	r3, r1
    bbd0:	3314      	adds	r3, #20
    bbd2:	681b      	ldr	r3, [r3, #0]
    bbd4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bbd8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bbdc:	9804      	ldr	r0, [sp, #16]
    bbde:	4613      	mov	r3, r2
    bbe0:	009b      	lsls	r3, r3, #2
    bbe2:	4413      	add	r3, r2
    bbe4:	00db      	lsls	r3, r3, #3
    bbe6:	4403      	add	r3, r0
    bbe8:	3314      	adds	r3, #20
    bbea:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bbec:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbf0:	3301      	adds	r3, #1
    bbf2:	f88d 3017 	strb.w	r3, [sp, #23]
    bbf6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbfa:	2b01      	cmp	r3, #1
    bbfc:	d9e0      	bls.n	bbc0 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    bbfe:	bf00      	nop
    bc00:	b007      	add	sp, #28
    bc02:	f85d fb04 	ldr.w	pc, [sp], #4
    bc06:	bf00      	nop
    bc08:	00016718 	.word	0x00016718
    bc0c:	1fff8dec 	.word	0x1fff8dec

0000bc10 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    bc10:	b500      	push	{lr}
    bc12:	b085      	sub	sp, #20
    bc14:	9003      	str	r0, [sp, #12]
    bc16:	460b      	mov	r3, r1
    bc18:	9201      	str	r2, [sp, #4]
    bc1a:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    bc1e:	f005 f8af 	bl	10d80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    bc22:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc26:	9a01      	ldr	r2, [sp, #4]
    bc28:	4619      	mov	r1, r3
    bc2a:	9803      	ldr	r0, [sp, #12]
    bc2c:	f7ff fbb9 	bl	b3a2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    bc30:	f005 f8d2 	bl	10dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    bc34:	f005 f948 	bl	10ec8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    bc38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc3c:	22ff      	movs	r2, #255	; 0xff
    bc3e:	4619      	mov	r1, r3
    bc40:	9803      	ldr	r0, [sp, #12]
    bc42:	f7ff fbe6 	bl	b412 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bc46:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc4a:	9903      	ldr	r1, [sp, #12]
    bc4c:	4613      	mov	r3, r2
    bc4e:	009b      	lsls	r3, r3, #2
    bc50:	4413      	add	r3, r2
    bc52:	00db      	lsls	r3, r3, #3
    bc54:	440b      	add	r3, r1
    bc56:	3314      	adds	r3, #20
    bc58:	681b      	ldr	r3, [r3, #0]
    bc5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bc62:	9803      	ldr	r0, [sp, #12]
    bc64:	4613      	mov	r3, r2
    bc66:	009b      	lsls	r3, r3, #2
    bc68:	4413      	add	r3, r2
    bc6a:	00db      	lsls	r3, r3, #3
    bc6c:	4403      	add	r3, r0
    bc6e:	3314      	adds	r3, #20
    bc70:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    bc72:	f005 f955 	bl	10f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    bc76:	bf00      	nop
    bc78:	b005      	add	sp, #20
    bc7a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc7e:	bf00      	nop

0000bc80 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    bc80:	b082      	sub	sp, #8
    bc82:	9001      	str	r0, [sp, #4]
    bc84:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    bc86:	9b01      	ldr	r3, [sp, #4]
    bc88:	681b      	ldr	r3, [r3, #0]
    bc8a:	f023 0207 	bic.w	r2, r3, #7
    bc8e:	9b00      	ldr	r3, [sp, #0]
    bc90:	f003 0307 	and.w	r3, r3, #7
    bc94:	431a      	orrs	r2, r3
    bc96:	9b01      	ldr	r3, [sp, #4]
    bc98:	601a      	str	r2, [r3, #0]
}
    bc9a:	bf00      	nop
    bc9c:	b002      	add	sp, #8
    bc9e:	4770      	bx	lr

0000bca0 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    bca0:	b082      	sub	sp, #8
    bca2:	9001      	str	r0, [sp, #4]
    bca4:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    bca6:	9b01      	ldr	r3, [sp, #4]
    bca8:	681b      	ldr	r3, [r3, #0]
    bcaa:	f023 0218 	bic.w	r2, r3, #24
    bcae:	9b00      	ldr	r3, [sp, #0]
    bcb0:	00db      	lsls	r3, r3, #3
    bcb2:	f003 0318 	and.w	r3, r3, #24
    bcb6:	431a      	orrs	r2, r3
    bcb8:	9b01      	ldr	r3, [sp, #4]
    bcba:	601a      	str	r2, [r3, #0]
}
    bcbc:	bf00      	nop
    bcbe:	b002      	add	sp, #8
    bcc0:	4770      	bx	lr

0000bcc2 <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    bcc2:	b082      	sub	sp, #8
    bcc4:	9001      	str	r0, [sp, #4]
    bcc6:	460b      	mov	r3, r1
    bcc8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    bccc:	9b01      	ldr	r3, [sp, #4]
    bcce:	681b      	ldr	r3, [r3, #0]
    bcd0:	f023 0320 	bic.w	r3, r3, #32
    bcd4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bcd8:	2a00      	cmp	r2, #0
    bcda:	d001      	beq.n	bce0 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    bcdc:	2220      	movs	r2, #32
    bcde:	e000      	b.n	bce2 <Ftm_Pwm_Ip_SetCpwms+0x20>
    bce0:	2200      	movs	r2, #0
    bce2:	431a      	orrs	r2, r3
    bce4:	9b01      	ldr	r3, [sp, #4]
    bce6:	601a      	str	r2, [r3, #0]
}
    bce8:	bf00      	nop
    bcea:	b002      	add	sp, #8
    bcec:	4770      	bx	lr

0000bcee <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bcee:	b082      	sub	sp, #8
    bcf0:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    bcf2:	9b01      	ldr	r3, [sp, #4]
    bcf4:	681b      	ldr	r3, [r3, #0]
    bcf6:	f003 0320 	and.w	r3, r3, #32
    bcfa:	2b00      	cmp	r3, #0
    bcfc:	bf14      	ite	ne
    bcfe:	2301      	movne	r3, #1
    bd00:	2300      	moveq	r3, #0
    bd02:	b2db      	uxtb	r3, r3
}
    bd04:	4618      	mov	r0, r3
    bd06:	b002      	add	sp, #8
    bd08:	4770      	bx	lr

0000bd0a <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    bd0a:	b082      	sub	sp, #8
    bd0c:	9001      	str	r0, [sp, #4]
    bd0e:	460b      	mov	r3, r1
    bd10:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    bd14:	9b01      	ldr	r3, [sp, #4]
    bd16:	681b      	ldr	r3, [r3, #0]
    bd18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bd1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bd20:	2a00      	cmp	r2, #0
    bd22:	d002      	beq.n	bd2a <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    bd24:	f44f 7280 	mov.w	r2, #256	; 0x100
    bd28:	e000      	b.n	bd2c <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    bd2a:	2200      	movs	r2, #0
    bd2c:	431a      	orrs	r2, r3
    bd2e:	9b01      	ldr	r3, [sp, #4]
    bd30:	601a      	str	r2, [r3, #0]
}
    bd32:	bf00      	nop
    bd34:	b002      	add	sp, #8
    bd36:	4770      	bx	lr

0000bd38 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bd38:	b082      	sub	sp, #8
    bd3a:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    bd3c:	9b01      	ldr	r3, [sp, #4]
    bd3e:	681b      	ldr	r3, [r3, #0]
    bd40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    bd44:	9b01      	ldr	r3, [sp, #4]
    bd46:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    bd48:	bf00      	nop
    bd4a:	b002      	add	sp, #8
    bd4c:	4770      	bx	lr

0000bd4e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    bd4e:	b082      	sub	sp, #8
    bd50:	9001      	str	r0, [sp, #4]
    bd52:	460b      	mov	r3, r1
    bd54:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    bd58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd5c:	3310      	adds	r3, #16
    bd5e:	2201      	movs	r2, #1
    bd60:	409a      	lsls	r2, r3
    bd62:	9b01      	ldr	r3, [sp, #4]
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	431a      	orrs	r2, r3
    bd68:	9b01      	ldr	r3, [sp, #4]
    bd6a:	601a      	str	r2, [r3, #0]
}
    bd6c:	bf00      	nop
    bd6e:	b002      	add	sp, #8
    bd70:	4770      	bx	lr

0000bd72 <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    bd72:	b082      	sub	sp, #8
    bd74:	9001      	str	r0, [sp, #4]
    bd76:	460b      	mov	r3, r1
    bd78:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	685b      	ldr	r3, [r3, #4]
    bd80:	0c1b      	lsrs	r3, r3, #16
    bd82:	041b      	lsls	r3, r3, #16
    bd84:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bd88:	431a      	orrs	r2, r3
    bd8a:	9b01      	ldr	r3, [sp, #4]
    bd8c:	605a      	str	r2, [r3, #4]
}
    bd8e:	bf00      	nop
    bd90:	b002      	add	sp, #8
    bd92:	4770      	bx	lr

0000bd94 <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    bd94:	b082      	sub	sp, #8
    bd96:	9001      	str	r0, [sp, #4]
    bd98:	460b      	mov	r3, r1
    bd9a:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    bd9e:	9b01      	ldr	r3, [sp, #4]
    bda0:	689b      	ldr	r3, [r3, #8]
    bda2:	0c1b      	lsrs	r3, r3, #16
    bda4:	041b      	lsls	r3, r3, #16
    bda6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bdaa:	431a      	orrs	r2, r3
    bdac:	9b01      	ldr	r3, [sp, #4]
    bdae:	609a      	str	r2, [r3, #8]
}
    bdb0:	bf00      	nop
    bdb2:	b002      	add	sp, #8
    bdb4:	4770      	bx	lr

0000bdb6 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    bdb6:	b084      	sub	sp, #16
    bdb8:	9001      	str	r0, [sp, #4]
    bdba:	460b      	mov	r3, r1
    bdbc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    bdc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bdc4:	9a01      	ldr	r2, [sp, #4]
    bdc6:	3301      	adds	r3, #1
    bdc8:	00db      	lsls	r3, r3, #3
    bdca:	4413      	add	r3, r2
    bdcc:	685b      	ldr	r3, [r3, #4]
    bdce:	089b      	lsrs	r3, r3, #2
    bdd0:	b2db      	uxtb	r3, r3
    bdd2:	f003 0301 	and.w	r3, r3, #1
    bdd6:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    bdda:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bdde:	9a01      	ldr	r2, [sp, #4]
    bde0:	3301      	adds	r3, #1
    bde2:	00db      	lsls	r3, r3, #3
    bde4:	4413      	add	r3, r2
    bde6:	685b      	ldr	r3, [r3, #4]
    bde8:	08db      	lsrs	r3, r3, #3
    bdea:	b2db      	uxtb	r3, r3
    bdec:	005b      	lsls	r3, r3, #1
    bdee:	b2db      	uxtb	r3, r3
    bdf0:	f003 0302 	and.w	r3, r3, #2
    bdf4:	b2da      	uxtb	r2, r3
    bdf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bdfa:	4313      	orrs	r3, r2
    bdfc:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    be00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    be04:	4618      	mov	r0, r3
    be06:	b004      	add	sp, #16
    be08:	4770      	bx	lr

0000be0a <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    be0a:	b086      	sub	sp, #24
    be0c:	9003      	str	r0, [sp, #12]
    be0e:	460b      	mov	r3, r1
    be10:	9201      	str	r2, [sp, #4]
    be12:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    be16:	9b01      	ldr	r3, [sp, #4]
    be18:	009b      	lsls	r3, r3, #2
    be1a:	f003 0304 	and.w	r3, r3, #4
    be1e:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    be20:	9b01      	ldr	r3, [sp, #4]
    be22:	009b      	lsls	r3, r3, #2
    be24:	f003 0308 	and.w	r3, r3, #8
    be28:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    be2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be2e:	9a03      	ldr	r2, [sp, #12]
    be30:	3301      	adds	r3, #1
    be32:	00db      	lsls	r3, r3, #3
    be34:	4413      	add	r3, r2
    be36:	685b      	ldr	r3, [r3, #4]
    be38:	f023 0104 	bic.w	r1, r3, #4
    be3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be40:	9a05      	ldr	r2, [sp, #20]
    be42:	430a      	orrs	r2, r1
    be44:	9903      	ldr	r1, [sp, #12]
    be46:	3301      	adds	r3, #1
    be48:	00db      	lsls	r3, r3, #3
    be4a:	440b      	add	r3, r1
    be4c:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    be4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be52:	9a03      	ldr	r2, [sp, #12]
    be54:	3301      	adds	r3, #1
    be56:	00db      	lsls	r3, r3, #3
    be58:	4413      	add	r3, r2
    be5a:	685b      	ldr	r3, [r3, #4]
    be5c:	f023 0108 	bic.w	r1, r3, #8
    be60:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be64:	9a04      	ldr	r2, [sp, #16]
    be66:	430a      	orrs	r2, r1
    be68:	9903      	ldr	r1, [sp, #12]
    be6a:	3301      	adds	r3, #1
    be6c:	00db      	lsls	r3, r3, #3
    be6e:	440b      	add	r3, r1
    be70:	605a      	str	r2, [r3, #4]
}
    be72:	bf00      	nop
    be74:	b006      	add	sp, #24
    be76:	4770      	bx	lr

0000be78 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    be78:	b086      	sub	sp, #24
    be7a:	9003      	str	r0, [sp, #12]
    be7c:	460b      	mov	r3, r1
    be7e:	9201      	str	r2, [sp, #4]
    be80:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    be84:	9b01      	ldr	r3, [sp, #4]
    be86:	009b      	lsls	r3, r3, #2
    be88:	f003 0310 	and.w	r3, r3, #16
    be8c:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    be8e:	9b01      	ldr	r3, [sp, #4]
    be90:	009b      	lsls	r3, r3, #2
    be92:	f003 0320 	and.w	r3, r3, #32
    be96:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    be98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be9c:	9a03      	ldr	r2, [sp, #12]
    be9e:	3301      	adds	r3, #1
    bea0:	00db      	lsls	r3, r3, #3
    bea2:	4413      	add	r3, r2
    bea4:	685b      	ldr	r3, [r3, #4]
    bea6:	f023 0110 	bic.w	r1, r3, #16
    beaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    beae:	9a05      	ldr	r2, [sp, #20]
    beb0:	430a      	orrs	r2, r1
    beb2:	9903      	ldr	r1, [sp, #12]
    beb4:	3301      	adds	r3, #1
    beb6:	00db      	lsls	r3, r3, #3
    beb8:	440b      	add	r3, r1
    beba:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    bebc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bec0:	9a03      	ldr	r2, [sp, #12]
    bec2:	3301      	adds	r3, #1
    bec4:	00db      	lsls	r3, r3, #3
    bec6:	4413      	add	r3, r2
    bec8:	685b      	ldr	r3, [r3, #4]
    beca:	f023 0120 	bic.w	r1, r3, #32
    bece:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bed2:	9a04      	ldr	r2, [sp, #16]
    bed4:	430a      	orrs	r2, r1
    bed6:	9903      	ldr	r1, [sp, #12]
    bed8:	3301      	adds	r3, #1
    beda:	00db      	lsls	r3, r3, #3
    bedc:	440b      	add	r3, r1
    bede:	605a      	str	r2, [r3, #4]
}
    bee0:	bf00      	nop
    bee2:	b006      	add	sp, #24
    bee4:	4770      	bx	lr

0000bee6 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    bee6:	b084      	sub	sp, #16
    bee8:	9001      	str	r0, [sp, #4]
    beea:	460b      	mov	r3, r1
    beec:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    bef0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bef4:	9a01      	ldr	r2, [sp, #4]
    bef6:	3301      	adds	r3, #1
    bef8:	00db      	lsls	r3, r3, #3
    befa:	4413      	add	r3, r2
    befc:	685b      	ldr	r3, [r3, #4]
    befe:	091b      	lsrs	r3, r3, #4
    bf00:	b2db      	uxtb	r3, r3
    bf02:	f003 0301 	and.w	r3, r3, #1
    bf06:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    bf0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf0e:	9a01      	ldr	r2, [sp, #4]
    bf10:	3301      	adds	r3, #1
    bf12:	00db      	lsls	r3, r3, #3
    bf14:	4413      	add	r3, r2
    bf16:	685b      	ldr	r3, [r3, #4]
    bf18:	095b      	lsrs	r3, r3, #5
    bf1a:	b2db      	uxtb	r3, r3
    bf1c:	005b      	lsls	r3, r3, #1
    bf1e:	b2db      	uxtb	r3, r3
    bf20:	f003 0302 	and.w	r3, r3, #2
    bf24:	b2da      	uxtb	r2, r3
    bf26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf2a:	4313      	orrs	r3, r2
    bf2c:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bf30:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bf34:	4618      	mov	r0, r3
    bf36:	b004      	add	sp, #16
    bf38:	4770      	bx	lr

0000bf3a <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    bf3a:	b082      	sub	sp, #8
    bf3c:	9001      	str	r0, [sp, #4]
    bf3e:	460b      	mov	r3, r1
    bf40:	f88d 3003 	strb.w	r3, [sp, #3]
    bf44:	4613      	mov	r3, r2
    bf46:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    bf4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf4e:	9a01      	ldr	r2, [sp, #4]
    bf50:	3301      	adds	r3, #1
    bf52:	00db      	lsls	r3, r3, #3
    bf54:	4413      	add	r3, r2
    bf56:	685b      	ldr	r3, [r3, #4]
    bf58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    bf5c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bf60:	2b00      	cmp	r3, #0
    bf62:	d001      	beq.n	bf68 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    bf64:	2140      	movs	r1, #64	; 0x40
    bf66:	e000      	b.n	bf6a <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    bf68:	2100      	movs	r1, #0
    bf6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf6e:	430a      	orrs	r2, r1
    bf70:	9901      	ldr	r1, [sp, #4]
    bf72:	3301      	adds	r3, #1
    bf74:	00db      	lsls	r3, r3, #3
    bf76:	440b      	add	r3, r1
    bf78:	605a      	str	r2, [r3, #4]
}
    bf7a:	bf00      	nop
    bf7c:	b002      	add	sp, #8
    bf7e:	4770      	bx	lr

0000bf80 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    bf80:	b082      	sub	sp, #8
    bf82:	9001      	str	r0, [sp, #4]
    bf84:	460b      	mov	r3, r1
    bf86:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    bf8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf8e:	9a01      	ldr	r2, [sp, #4]
    bf90:	3301      	adds	r3, #1
    bf92:	00db      	lsls	r3, r3, #3
    bf94:	4413      	add	r3, r2
    bf96:	685a      	ldr	r2, [r3, #4]
    bf98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    bfa0:	9901      	ldr	r1, [sp, #4]
    bfa2:	3301      	adds	r3, #1
    bfa4:	00db      	lsls	r3, r3, #3
    bfa6:	440b      	add	r3, r1
    bfa8:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    bfaa:	bf00      	nop
    bfac:	b002      	add	sp, #8
    bfae:	4770      	bx	lr

0000bfb0 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    bfb0:	b082      	sub	sp, #8
    bfb2:	9001      	str	r0, [sp, #4]
    bfb4:	460b      	mov	r3, r1
    bfb6:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    bfba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bfbe:	9a01      	ldr	r2, [sp, #4]
    bfc0:	3301      	adds	r3, #1
    bfc2:	00db      	lsls	r3, r3, #3
    bfc4:	4413      	add	r3, r2
    bfc6:	685b      	ldr	r3, [r3, #4]
    bfc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bfcc:	2b00      	cmp	r3, #0
    bfce:	bf14      	ite	ne
    bfd0:	2301      	movne	r3, #1
    bfd2:	2300      	moveq	r3, #0
    bfd4:	b2db      	uxtb	r3, r3
}
    bfd6:	4618      	mov	r0, r3
    bfd8:	b002      	add	sp, #8
    bfda:	4770      	bx	lr

0000bfdc <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    bfdc:	b082      	sub	sp, #8
    bfde:	9001      	str	r0, [sp, #4]
    bfe0:	460b      	mov	r3, r1
    bfe2:	f88d 3003 	strb.w	r3, [sp, #3]
    bfe6:	4613      	mov	r3, r2
    bfe8:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    bfec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bff0:	f8bd 2000 	ldrh.w	r2, [sp]
    bff4:	9901      	ldr	r1, [sp, #4]
    bff6:	3301      	adds	r3, #1
    bff8:	00db      	lsls	r3, r3, #3
    bffa:	440b      	add	r3, r1
    bffc:	609a      	str	r2, [r3, #8]
}
    bffe:	bf00      	nop
    c000:	b002      	add	sp, #8
    c002:	4770      	bx	lr

0000c004 <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    c004:	b082      	sub	sp, #8
    c006:	9001      	str	r0, [sp, #4]
    c008:	460b      	mov	r3, r1
    c00a:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    c00e:	9b01      	ldr	r3, [sp, #4]
    c010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c012:	0c1b      	lsrs	r3, r3, #16
    c014:	041b      	lsls	r3, r3, #16
    c016:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c01a:	431a      	orrs	r2, r3
    c01c:	9b01      	ldr	r3, [sp, #4]
    c01e:	64da      	str	r2, [r3, #76]	; 0x4c
}
    c020:	bf00      	nop
    c022:	b002      	add	sp, #8
    c024:	4770      	bx	lr

0000c026 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    c026:	b082      	sub	sp, #8
    c028:	9001      	str	r0, [sp, #4]
    c02a:	460b      	mov	r3, r1
    c02c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    c030:	9b01      	ldr	r3, [sp, #4]
    c032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c034:	f023 0301 	bic.w	r3, r3, #1
    c038:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c03c:	2a00      	cmp	r2, #0
    c03e:	d001      	beq.n	c044 <Ftm_Pwm_Ip_Enable+0x1e>
    c040:	2201      	movs	r2, #1
    c042:	e000      	b.n	c046 <Ftm_Pwm_Ip_Enable+0x20>
    c044:	2200      	movs	r2, #0
    c046:	431a      	orrs	r2, r3
    c048:	9b01      	ldr	r3, [sp, #4]
    c04a:	655a      	str	r2, [r3, #84]	; 0x54
}
    c04c:	bf00      	nop
    c04e:	b002      	add	sp, #8
    c050:	4770      	bx	lr

0000c052 <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    c052:	b082      	sub	sp, #8
    c054:	9001      	str	r0, [sp, #4]
    c056:	460b      	mov	r3, r1
    c058:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    c05c:	9b01      	ldr	r3, [sp, #4]
    c05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c060:	f023 0308 	bic.w	r3, r3, #8
    c064:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c068:	2a00      	cmp	r2, #0
    c06a:	d001      	beq.n	c070 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    c06c:	2208      	movs	r2, #8
    c06e:	e000      	b.n	c072 <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    c070:	2200      	movs	r2, #0
    c072:	431a      	orrs	r2, r3
    c074:	9b01      	ldr	r3, [sp, #4]
    c076:	655a      	str	r2, [r3, #84]	; 0x54
}
    c078:	bf00      	nop
    c07a:	b002      	add	sp, #8
    c07c:	4770      	bx	lr

0000c07e <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    c07e:	b082      	sub	sp, #8
    c080:	9001      	str	r0, [sp, #4]
    c082:	460b      	mov	r3, r1
    c084:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    c088:	9b01      	ldr	r3, [sp, #4]
    c08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c08c:	f023 0301 	bic.w	r3, r3, #1
    c090:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c094:	2a00      	cmp	r2, #0
    c096:	d001      	beq.n	c09c <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    c098:	2201      	movs	r2, #1
    c09a:	e000      	b.n	c09e <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    c09c:	2200      	movs	r2, #0
    c09e:	431a      	orrs	r2, r3
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	659a      	str	r2, [r3, #88]	; 0x58
}
    c0a4:	bf00      	nop
    c0a6:	b002      	add	sp, #8
    c0a8:	4770      	bx	lr

0000c0aa <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    c0aa:	b082      	sub	sp, #8
    c0ac:	9001      	str	r0, [sp, #4]
    c0ae:	460b      	mov	r3, r1
    c0b0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    c0b4:	9b01      	ldr	r3, [sp, #4]
    c0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c0b8:	f023 0302 	bic.w	r3, r3, #2
    c0bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c0c0:	2a00      	cmp	r2, #0
    c0c2:	d001      	beq.n	c0c8 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    c0c4:	2202      	movs	r2, #2
    c0c6:	e000      	b.n	c0ca <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    c0c8:	2200      	movs	r2, #0
    c0ca:	431a      	orrs	r2, r3
    c0cc:	9b01      	ldr	r3, [sp, #4]
    c0ce:	659a      	str	r2, [r3, #88]	; 0x58
}
    c0d0:	bf00      	nop
    c0d2:	b002      	add	sp, #8
    c0d4:	4770      	bx	lr

0000c0d6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c0d6:	b082      	sub	sp, #8
    c0d8:	9001      	str	r0, [sp, #4]
    c0da:	460b      	mov	r3, r1
    c0dc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    c0e0:	9b01      	ldr	r3, [sp, #4]
    c0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c0e4:	f023 0308 	bic.w	r3, r3, #8
    c0e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c0ec:	2a00      	cmp	r2, #0
    c0ee:	d001      	beq.n	c0f4 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    c0f0:	2208      	movs	r2, #8
    c0f2:	e000      	b.n	c0f6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    c0f4:	2200      	movs	r2, #0
    c0f6:	431a      	orrs	r2, r3
    c0f8:	9b01      	ldr	r3, [sp, #4]
    c0fa:	659a      	str	r2, [r3, #88]	; 0x58
}
    c0fc:	bf00      	nop
    c0fe:	b002      	add	sp, #8
    c100:	4770      	bx	lr

0000c102 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    c102:	b082      	sub	sp, #8
    c104:	9001      	str	r0, [sp, #4]
    c106:	460b      	mov	r3, r1
    c108:	f88d 3003 	strb.w	r3, [sp, #3]
    c10c:	4613      	mov	r3, r2
    c10e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c112:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c116:	2b00      	cmp	r3, #0
    c118:	d00a      	beq.n	c130 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    c11a:	9b01      	ldr	r3, [sp, #4]
    c11c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c11e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c122:	2110      	movs	r1, #16
    c124:	fa01 f303 	lsl.w	r3, r1, r3
    c128:	431a      	orrs	r2, r3
    c12a:	9b01      	ldr	r3, [sp, #4]
    c12c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    c12e:	e00a      	b.n	c146 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    c130:	9b01      	ldr	r3, [sp, #4]
    c132:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c134:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c138:	2110      	movs	r1, #16
    c13a:	fa01 f303 	lsl.w	r3, r1, r3
    c13e:	43db      	mvns	r3, r3
    c140:	401a      	ands	r2, r3
    c142:	9b01      	ldr	r3, [sp, #4]
    c144:	659a      	str	r2, [r3, #88]	; 0x58
}
    c146:	bf00      	nop
    c148:	b002      	add	sp, #8
    c14a:	4770      	bx	lr

0000c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    c14c:	b082      	sub	sp, #8
    c14e:	9001      	str	r0, [sp, #4]
    c150:	460b      	mov	r3, r1
    c152:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    c156:	9b01      	ldr	r3, [sp, #4]
    c158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c15e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c162:	2a00      	cmp	r2, #0
    c164:	d001      	beq.n	c16a <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    c166:	2280      	movs	r2, #128	; 0x80
    c168:	e000      	b.n	c16c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    c16a:	2200      	movs	r2, #0
    c16c:	431a      	orrs	r2, r3
    c16e:	9b01      	ldr	r3, [sp, #4]
    c170:	659a      	str	r2, [r3, #88]	; 0x58
}
    c172:	bf00      	nop
    c174:	b002      	add	sp, #8
    c176:	4770      	bx	lr

0000c178 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    c178:	b084      	sub	sp, #16
    c17a:	9003      	str	r0, [sp, #12]
    c17c:	460b      	mov	r3, r1
    c17e:	9201      	str	r2, [sp, #4]
    c180:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    c184:	9b01      	ldr	r3, [sp, #4]
    c186:	2b01      	cmp	r3, #1
    c188:	d10a      	bne.n	c1a0 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    c18a:	9b03      	ldr	r3, [sp, #12]
    c18c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c18e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c192:	2101      	movs	r1, #1
    c194:	fa01 f303 	lsl.w	r3, r1, r3
    c198:	431a      	orrs	r2, r3
    c19a:	9b03      	ldr	r3, [sp, #12]
    c19c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    c19e:	e00a      	b.n	c1b6 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    c1a0:	9b03      	ldr	r3, [sp, #12]
    c1a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c1a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c1a8:	2101      	movs	r1, #1
    c1aa:	fa01 f303 	lsl.w	r3, r1, r3
    c1ae:	43db      	mvns	r3, r3
    c1b0:	401a      	ands	r2, r3
    c1b2:	9b03      	ldr	r3, [sp, #12]
    c1b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
    c1b6:	bf00      	nop
    c1b8:	b004      	add	sp, #16
    c1ba:	4770      	bx	lr

0000c1bc <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    c1bc:	b082      	sub	sp, #8
    c1be:	9001      	str	r0, [sp, #4]
    c1c0:	460b      	mov	r3, r1
    c1c2:	f88d 3003 	strb.w	r3, [sp, #3]
    c1c6:	4613      	mov	r3, r2
    c1c8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    c1cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d00a      	beq.n	c1ea <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    c1d4:	9b01      	ldr	r3, [sp, #4]
    c1d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1dc:	2101      	movs	r1, #1
    c1de:	fa01 f303 	lsl.w	r3, r1, r3
    c1e2:	431a      	orrs	r2, r3
    c1e4:	9b01      	ldr	r3, [sp, #4]
    c1e6:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    c1e8:	e00a      	b.n	c200 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    c1ea:	9b01      	ldr	r3, [sp, #4]
    c1ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1f2:	2101      	movs	r1, #1
    c1f4:	fa01 f303 	lsl.w	r3, r1, r3
    c1f8:	43db      	mvns	r3, r3
    c1fa:	401a      	ands	r2, r3
    c1fc:	9b01      	ldr	r3, [sp, #4]
    c1fe:	661a      	str	r2, [r3, #96]	; 0x60
}
    c200:	bf00      	nop
    c202:	b002      	add	sp, #8
    c204:	4770      	bx	lr

0000c206 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    c206:	b082      	sub	sp, #8
    c208:	9001      	str	r0, [sp, #4]
    c20a:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    c20c:	9b01      	ldr	r3, [sp, #4]
    c20e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c210:	9b00      	ldr	r3, [sp, #0]
    c212:	43db      	mvns	r3, r3
    c214:	401a      	ands	r2, r3
    c216:	9b00      	ldr	r3, [sp, #0]
    c218:	431a      	orrs	r2, r3
    c21a:	9b01      	ldr	r3, [sp, #4]
    c21c:	661a      	str	r2, [r3, #96]	; 0x60
}
    c21e:	bf00      	nop
    c220:	b002      	add	sp, #8
    c222:	4770      	bx	lr

0000c224 <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    c224:	b082      	sub	sp, #8
    c226:	9001      	str	r0, [sp, #4]
    c228:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c22e:	9b00      	ldr	r3, [sp, #0]
    c230:	43db      	mvns	r3, r3
    c232:	401a      	ands	r2, r3
    c234:	9b01      	ldr	r3, [sp, #4]
    c236:	661a      	str	r2, [r3, #96]	; 0x60
}
    c238:	bf00      	nop
    c23a:	b002      	add	sp, #8
    c23c:	4770      	bx	lr

0000c23e <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c23e:	b082      	sub	sp, #8
    c240:	9001      	str	r0, [sp, #4]
    c242:	460b      	mov	r3, r1
    c244:	f88d 3003 	strb.w	r3, [sp, #3]
    c248:	4613      	mov	r3, r2
    c24a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c24e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c252:	2b00      	cmp	r3, #0
    c254:	d00b      	beq.n	c26e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c256:	9b01      	ldr	r3, [sp, #4]
    c258:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c25a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c25e:	00db      	lsls	r3, r3, #3
    c260:	2101      	movs	r1, #1
    c262:	fa01 f303 	lsl.w	r3, r1, r3
    c266:	431a      	orrs	r2, r3
    c268:	9b01      	ldr	r3, [sp, #4]
    c26a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c26c:	e00b      	b.n	c286 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c26e:	9b01      	ldr	r3, [sp, #4]
    c270:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c272:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c276:	00db      	lsls	r3, r3, #3
    c278:	2101      	movs	r1, #1
    c27a:	fa01 f303 	lsl.w	r3, r1, r3
    c27e:	43db      	mvns	r3, r3
    c280:	401a      	ands	r2, r3
    c282:	9b01      	ldr	r3, [sp, #4]
    c284:	665a      	str	r2, [r3, #100]	; 0x64
}
    c286:	bf00      	nop
    c288:	b002      	add	sp, #8
    c28a:	4770      	bx	lr

0000c28c <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    c28c:	b082      	sub	sp, #8
    c28e:	9001      	str	r0, [sp, #4]
    c290:	460b      	mov	r3, r1
    c292:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    c296:	9b01      	ldr	r3, [sp, #4]
    c298:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c29a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c29e:	00db      	lsls	r3, r3, #3
    c2a0:	fa22 f303 	lsr.w	r3, r2, r3
    c2a4:	f003 0301 	and.w	r3, r3, #1
    c2a8:	2b00      	cmp	r3, #0
    c2aa:	bf14      	ite	ne
    c2ac:	2301      	movne	r3, #1
    c2ae:	2300      	moveq	r3, #0
    c2b0:	b2db      	uxtb	r3, r3
}
    c2b2:	4618      	mov	r0, r3
    c2b4:	b002      	add	sp, #8
    c2b6:	4770      	bx	lr

0000c2b8 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    c2b8:	b082      	sub	sp, #8
    c2ba:	9001      	str	r0, [sp, #4]
    c2bc:	460b      	mov	r3, r1
    c2be:	f88d 3003 	strb.w	r3, [sp, #3]
    c2c2:	4613      	mov	r3, r2
    c2c4:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    c2c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c2cc:	2b00      	cmp	r3, #0
    c2ce:	d00b      	beq.n	c2e8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c2d0:	9b01      	ldr	r3, [sp, #4]
    c2d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2d8:	00db      	lsls	r3, r3, #3
    c2da:	2102      	movs	r1, #2
    c2dc:	fa01 f303 	lsl.w	r3, r1, r3
    c2e0:	431a      	orrs	r2, r3
    c2e2:	9b01      	ldr	r3, [sp, #4]
    c2e4:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c2e6:	e00b      	b.n	c300 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c2e8:	9b01      	ldr	r3, [sp, #4]
    c2ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2f0:	00db      	lsls	r3, r3, #3
    c2f2:	2102      	movs	r1, #2
    c2f4:	fa01 f303 	lsl.w	r3, r1, r3
    c2f8:	43db      	mvns	r3, r3
    c2fa:	401a      	ands	r2, r3
    c2fc:	9b01      	ldr	r3, [sp, #4]
    c2fe:	665a      	str	r2, [r3, #100]	; 0x64
}
    c300:	bf00      	nop
    c302:	b002      	add	sp, #8
    c304:	4770      	bx	lr

0000c306 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c306:	b082      	sub	sp, #8
    c308:	9001      	str	r0, [sp, #4]
    c30a:	460b      	mov	r3, r1
    c30c:	f88d 3003 	strb.w	r3, [sp, #3]
    c310:	4613      	mov	r3, r2
    c312:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c316:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c31a:	2b00      	cmp	r3, #0
    c31c:	d00b      	beq.n	c336 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c31e:	9b01      	ldr	r3, [sp, #4]
    c320:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c322:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c326:	00db      	lsls	r3, r3, #3
    c328:	2110      	movs	r1, #16
    c32a:	fa01 f303 	lsl.w	r3, r1, r3
    c32e:	431a      	orrs	r2, r3
    c330:	9b01      	ldr	r3, [sp, #4]
    c332:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c334:	e00b      	b.n	c34e <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c336:	9b01      	ldr	r3, [sp, #4]
    c338:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c33a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c33e:	00db      	lsls	r3, r3, #3
    c340:	2110      	movs	r1, #16
    c342:	fa01 f303 	lsl.w	r3, r1, r3
    c346:	43db      	mvns	r3, r3
    c348:	401a      	ands	r2, r3
    c34a:	9b01      	ldr	r3, [sp, #4]
    c34c:	665a      	str	r2, [r3, #100]	; 0x64
}
    c34e:	bf00      	nop
    c350:	b002      	add	sp, #8
    c352:	4770      	bx	lr

0000c354 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c354:	b082      	sub	sp, #8
    c356:	9001      	str	r0, [sp, #4]
    c358:	460b      	mov	r3, r1
    c35a:	f88d 3003 	strb.w	r3, [sp, #3]
    c35e:	4613      	mov	r3, r2
    c360:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c364:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c368:	2b00      	cmp	r3, #0
    c36a:	d00b      	beq.n	c384 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c36c:	9b01      	ldr	r3, [sp, #4]
    c36e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c370:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c374:	00db      	lsls	r3, r3, #3
    c376:	2120      	movs	r1, #32
    c378:	fa01 f303 	lsl.w	r3, r1, r3
    c37c:	431a      	orrs	r2, r3
    c37e:	9b01      	ldr	r3, [sp, #4]
    c380:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c382:	e00b      	b.n	c39c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c384:	9b01      	ldr	r3, [sp, #4]
    c386:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c388:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c38c:	00db      	lsls	r3, r3, #3
    c38e:	2120      	movs	r1, #32
    c390:	fa01 f303 	lsl.w	r3, r1, r3
    c394:	43db      	mvns	r3, r3
    c396:	401a      	ands	r2, r3
    c398:	9b01      	ldr	r3, [sp, #4]
    c39a:	665a      	str	r2, [r3, #100]	; 0x64
}
    c39c:	bf00      	nop
    c39e:	b002      	add	sp, #8
    c3a0:	4770      	bx	lr

0000c3a2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c3a2:	b082      	sub	sp, #8
    c3a4:	9001      	str	r0, [sp, #4]
    c3a6:	460b      	mov	r3, r1
    c3a8:	f88d 3003 	strb.w	r3, [sp, #3]
    c3ac:	4613      	mov	r3, r2
    c3ae:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c3b2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c3b6:	2b00      	cmp	r3, #0
    c3b8:	d00b      	beq.n	c3d2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c3ba:	9b01      	ldr	r3, [sp, #4]
    c3bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c3be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3c2:	00db      	lsls	r3, r3, #3
    c3c4:	2180      	movs	r1, #128	; 0x80
    c3c6:	fa01 f303 	lsl.w	r3, r1, r3
    c3ca:	431a      	orrs	r2, r3
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c3d0:	e00b      	b.n	c3ea <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c3d2:	9b01      	ldr	r3, [sp, #4]
    c3d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c3d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3da:	00db      	lsls	r3, r3, #3
    c3dc:	2180      	movs	r1, #128	; 0x80
    c3de:	fa01 f303 	lsl.w	r3, r1, r3
    c3e2:	43db      	mvns	r3, r3
    c3e4:	401a      	ands	r2, r3
    c3e6:	9b01      	ldr	r3, [sp, #4]
    c3e8:	665a      	str	r2, [r3, #100]	; 0x64
}
    c3ea:	bf00      	nop
    c3ec:	b002      	add	sp, #8
    c3ee:	4770      	bx	lr

0000c3f0 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    c3f0:	b082      	sub	sp, #8
    c3f2:	9001      	str	r0, [sp, #4]
    c3f4:	460b      	mov	r3, r1
    c3f6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    c3fa:	9b01      	ldr	r3, [sp, #4]
    c3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c3fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    c402:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c40a:	431a      	orrs	r2, r3
    c40c:	9b01      	ldr	r3, [sp, #4]
    c40e:	669a      	str	r2, [r3, #104]	; 0x68
}
    c410:	bf00      	nop
    c412:	b002      	add	sp, #8
    c414:	4770      	bx	lr

0000c416 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    c416:	b082      	sub	sp, #8
    c418:	9001      	str	r0, [sp, #4]
    c41a:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    c41c:	9b01      	ldr	r3, [sp, #4]
    c41e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c420:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c424:	9b00      	ldr	r3, [sp, #0]
    c426:	b2db      	uxtb	r3, r3
    c428:	019b      	lsls	r3, r3, #6
    c42a:	b2db      	uxtb	r3, r3
    c42c:	431a      	orrs	r2, r3
    c42e:	9b01      	ldr	r3, [sp, #4]
    c430:	669a      	str	r2, [r3, #104]	; 0x68
}
    c432:	bf00      	nop
    c434:	b002      	add	sp, #8
    c436:	4770      	bx	lr

0000c438 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    c438:	b082      	sub	sp, #8
    c43a:	9001      	str	r0, [sp, #4]
    c43c:	460b      	mov	r3, r1
    c43e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    c442:	9b01      	ldr	r3, [sp, #4]
    c444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c446:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    c44a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c44e:	041b      	lsls	r3, r3, #16
    c450:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c454:	431a      	orrs	r2, r3
    c456:	9b01      	ldr	r3, [sp, #4]
    c458:	669a      	str	r2, [r3, #104]	; 0x68
}
    c45a:	bf00      	nop
    c45c:	b002      	add	sp, #8
    c45e:	4770      	bx	lr

0000c460 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    c460:	b082      	sub	sp, #8
    c462:	9001      	str	r0, [sp, #4]
    c464:	460b      	mov	r3, r1
    c466:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    c46a:	9b01      	ldr	r3, [sp, #4]
    c46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    c46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    c472:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c476:	2a00      	cmp	r2, #0
    c478:	d001      	beq.n	c47e <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    c47a:	2240      	movs	r2, #64	; 0x40
    c47c:	e000      	b.n	c480 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    c47e:	2200      	movs	r2, #0
    c480:	431a      	orrs	r2, r3
    c482:	9b01      	ldr	r3, [sp, #4]
    c484:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c486:	bf00      	nop
    c488:	b002      	add	sp, #8
    c48a:	4770      	bx	lr

0000c48c <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    c48c:	b082      	sub	sp, #8
    c48e:	9001      	str	r0, [sp, #4]
    c490:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    c492:	9b01      	ldr	r3, [sp, #4]
    c494:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c496:	9b00      	ldr	r3, [sp, #0]
    c498:	43db      	mvns	r3, r3
    c49a:	401a      	ands	r2, r3
    c49c:	9b01      	ldr	r3, [sp, #4]
    c49e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c4a0:	bf00      	nop
    c4a2:	b002      	add	sp, #8
    c4a4:	4770      	bx	lr

0000c4a6 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    c4a6:	b082      	sub	sp, #8
    c4a8:	9001      	str	r0, [sp, #4]
    c4aa:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    c4ac:	9b01      	ldr	r3, [sp, #4]
    c4ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c4b0:	9b00      	ldr	r3, [sp, #0]
    c4b2:	43db      	mvns	r3, r3
    c4b4:	401a      	ands	r2, r3
    c4b6:	9b00      	ldr	r3, [sp, #0]
    c4b8:	431a      	orrs	r2, r3
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c4be:	bf00      	nop
    c4c0:	b002      	add	sp, #8
    c4c2:	4770      	bx	lr

0000c4c4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    c4c4:	b084      	sub	sp, #16
    c4c6:	9003      	str	r0, [sp, #12]
    c4c8:	460b      	mov	r3, r1
    c4ca:	9201      	str	r2, [sp, #4]
    c4cc:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    c4d0:	9b01      	ldr	r3, [sp, #4]
    c4d2:	2b00      	cmp	r3, #0
    c4d4:	d10b      	bne.n	c4ee <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    c4d6:	9b03      	ldr	r3, [sp, #12]
    c4d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c4de:	2101      	movs	r1, #1
    c4e0:	fa01 f303 	lsl.w	r3, r1, r3
    c4e4:	43db      	mvns	r3, r3
    c4e6:	401a      	ands	r2, r3
    c4e8:	9b03      	ldr	r3, [sp, #12]
    c4ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    c4ec:	e009      	b.n	c502 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    c4ee:	9b03      	ldr	r3, [sp, #12]
    c4f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c4f6:	2101      	movs	r1, #1
    c4f8:	fa01 f303 	lsl.w	r3, r1, r3
    c4fc:	431a      	orrs	r2, r3
    c4fe:	9b03      	ldr	r3, [sp, #12]
    c500:	671a      	str	r2, [r3, #112]	; 0x70
}
    c502:	bf00      	nop
    c504:	b004      	add	sp, #16
    c506:	4770      	bx	lr

0000c508 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    c508:	b082      	sub	sp, #8
    c50a:	9001      	str	r0, [sp, #4]
    c50c:	460b      	mov	r3, r1
    c50e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    c512:	9b01      	ldr	r3, [sp, #4]
    c514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c516:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c51a:	fa22 f303 	lsr.w	r3, r2, r3
    c51e:	f003 0301 	and.w	r3, r3, #1
    c522:	2b01      	cmp	r3, #1
    c524:	bf0c      	ite	eq
    c526:	2301      	moveq	r3, #1
    c528:	2300      	movne	r3, #0
    c52a:	b2db      	uxtb	r3, r3
}
    c52c:	4618      	mov	r0, r3
    c52e:	b002      	add	sp, #8
    c530:	4770      	bx	lr

0000c532 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    c532:	b082      	sub	sp, #8
    c534:	9001      	str	r0, [sp, #4]
    c536:	460b      	mov	r3, r1
    c538:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    c53c:	9b01      	ldr	r3, [sp, #4]
    c53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c542:	f023 021f 	bic.w	r2, r3, #31
    c546:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c54a:	f003 031f 	and.w	r3, r3, #31
    c54e:	431a      	orrs	r2, r3
    c550:	9b01      	ldr	r3, [sp, #4]
    c552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c556:	bf00      	nop
    c558:	b002      	add	sp, #8
    c55a:	4770      	bx	lr

0000c55c <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    c55c:	b082      	sub	sp, #8
    c55e:	9001      	str	r0, [sp, #4]
    c560:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    c562:	9b01      	ldr	r3, [sp, #4]
    c564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c568:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c56c:	9b00      	ldr	r3, [sp, #0]
    c56e:	019b      	lsls	r3, r3, #6
    c570:	b2db      	uxtb	r3, r3
    c572:	431a      	orrs	r2, r3
    c574:	9b01      	ldr	r3, [sp, #4]
    c576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c57a:	bf00      	nop
    c57c:	b002      	add	sp, #8
    c57e:	4770      	bx	lr

0000c580 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    c580:	b082      	sub	sp, #8
    c582:	9001      	str	r0, [sp, #4]
    c584:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    c586:	9b01      	ldr	r3, [sp, #4]
    c588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c58c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    c590:	9b00      	ldr	r3, [sp, #0]
    c592:	02db      	lsls	r3, r3, #11
    c594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c598:	431a      	orrs	r2, r3
    c59a:	9b01      	ldr	r3, [sp, #4]
    c59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c5a0:	bf00      	nop
    c5a2:	b002      	add	sp, #8
    c5a4:	4770      	bx	lr

0000c5a6 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    c5a6:	b082      	sub	sp, #8
    c5a8:	9001      	str	r0, [sp, #4]
    c5aa:	460b      	mov	r3, r1
    c5ac:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    c5b0:	9b01      	ldr	r3, [sp, #4]
    c5b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5b6:	f023 0301 	bic.w	r3, r3, #1
    c5ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5be:	2a00      	cmp	r2, #0
    c5c0:	d001      	beq.n	c5c6 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    c5c2:	2201      	movs	r2, #1
    c5c4:	e000      	b.n	c5c8 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    c5c6:	2200      	movs	r2, #0
    c5c8:	431a      	orrs	r2, r3
    c5ca:	9b01      	ldr	r3, [sp, #4]
    c5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5d0:	bf00      	nop
    c5d2:	b002      	add	sp, #8
    c5d4:	4770      	bx	lr

0000c5d6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    c5d6:	b082      	sub	sp, #8
    c5d8:	9001      	str	r0, [sp, #4]
    c5da:	460b      	mov	r3, r1
    c5dc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    c5e0:	9b01      	ldr	r3, [sp, #4]
    c5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5e6:	f023 0304 	bic.w	r3, r3, #4
    c5ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5ee:	2a00      	cmp	r2, #0
    c5f0:	d001      	beq.n	c5f6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    c5f2:	2204      	movs	r2, #4
    c5f4:	e000      	b.n	c5f8 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    c5f6:	2200      	movs	r2, #0
    c5f8:	431a      	orrs	r2, r3
    c5fa:	9b01      	ldr	r3, [sp, #4]
    c5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c600:	bf00      	nop
    c602:	b002      	add	sp, #8
    c604:	4770      	bx	lr

0000c606 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c606:	b082      	sub	sp, #8
    c608:	9001      	str	r0, [sp, #4]
    c60a:	460b      	mov	r3, r1
    c60c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c616:	f023 0310 	bic.w	r3, r3, #16
    c61a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c61e:	2a00      	cmp	r2, #0
    c620:	d001      	beq.n	c626 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    c622:	2210      	movs	r2, #16
    c624:	e000      	b.n	c628 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    c626:	2200      	movs	r2, #0
    c628:	431a      	orrs	r2, r3
    c62a:	9b01      	ldr	r3, [sp, #4]
    c62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c630:	bf00      	nop
    c632:	b002      	add	sp, #8
    c634:	4770      	bx	lr

0000c636 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c636:	b082      	sub	sp, #8
    c638:	9001      	str	r0, [sp, #4]
    c63a:	460b      	mov	r3, r1
    c63c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    c640:	9b01      	ldr	r3, [sp, #4]
    c642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c646:	f023 0320 	bic.w	r3, r3, #32
    c64a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c64e:	2a00      	cmp	r2, #0
    c650:	d001      	beq.n	c656 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    c652:	2220      	movs	r2, #32
    c654:	e000      	b.n	c658 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    c656:	2200      	movs	r2, #0
    c658:	431a      	orrs	r2, r3
    c65a:	9b01      	ldr	r3, [sp, #4]
    c65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c660:	bf00      	nop
    c662:	b002      	add	sp, #8
    c664:	4770      	bx	lr

0000c666 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    c666:	b082      	sub	sp, #8
    c668:	9001      	str	r0, [sp, #4]
    c66a:	460b      	mov	r3, r1
    c66c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    c670:	9b01      	ldr	r3, [sp, #4]
    c672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c67a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c67e:	2a00      	cmp	r2, #0
    c680:	d001      	beq.n	c686 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    c682:	2280      	movs	r2, #128	; 0x80
    c684:	e000      	b.n	c688 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    c686:	2200      	movs	r2, #0
    c688:	431a      	orrs	r2, r3
    c68a:	9b01      	ldr	r3, [sp, #4]
    c68c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c690:	bf00      	nop
    c692:	b002      	add	sp, #8
    c694:	4770      	bx	lr

0000c696 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    c696:	b082      	sub	sp, #8
    c698:	9001      	str	r0, [sp, #4]
    c69a:	460b      	mov	r3, r1
    c69c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c6a0:	9b01      	ldr	r3, [sp, #4]
    c6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c6a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c6aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c6ae:	2a00      	cmp	r2, #0
    c6b0:	d002      	beq.n	c6b8 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    c6b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    c6b6:	e000      	b.n	c6ba <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    c6b8:	2200      	movs	r2, #0
    c6ba:	431a      	orrs	r2, r3
    c6bc:	9b01      	ldr	r3, [sp, #4]
    c6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c6c2:	bf00      	nop
    c6c4:	b002      	add	sp, #8
    c6c6:	4770      	bx	lr

0000c6c8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c6c8:	b082      	sub	sp, #8
    c6ca:	9001      	str	r0, [sp, #4]
    c6cc:	460b      	mov	r3, r1
    c6ce:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c6d2:	9b01      	ldr	r3, [sp, #4]
    c6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c6d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    c6dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c6e0:	2a00      	cmp	r2, #0
    c6e2:	d002      	beq.n	c6ea <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    c6e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    c6e8:	e000      	b.n	c6ec <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    c6ea:	2200      	movs	r2, #0
    c6ec:	431a      	orrs	r2, r3
    c6ee:	9b01      	ldr	r3, [sp, #4]
    c6f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c6f4:	bf00      	nop
    c6f6:	b002      	add	sp, #8
    c6f8:	4770      	bx	lr

0000c6fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c6fa:	b082      	sub	sp, #8
    c6fc:	9001      	str	r0, [sp, #4]
    c6fe:	460b      	mov	r3, r1
    c700:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c704:	9b01      	ldr	r3, [sp, #4]
    c706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c70a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    c70e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c712:	2a00      	cmp	r2, #0
    c714:	d002      	beq.n	c71c <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    c716:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c71a:	e000      	b.n	c71e <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    c71c:	2200      	movs	r2, #0
    c71e:	431a      	orrs	r2, r3
    c720:	9b01      	ldr	r3, [sp, #4]
    c722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c726:	bf00      	nop
    c728:	b002      	add	sp, #8
    c72a:	4770      	bx	lr

0000c72c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c72c:	b082      	sub	sp, #8
    c72e:	9001      	str	r0, [sp, #4]
    c730:	460b      	mov	r3, r1
    c732:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c736:	9b01      	ldr	r3, [sp, #4]
    c738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c73c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c740:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c744:	2a00      	cmp	r2, #0
    c746:	d002      	beq.n	c74e <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    c748:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c74c:	e000      	b.n	c750 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    c74e:	2200      	movs	r2, #0
    c750:	431a      	orrs	r2, r3
    c752:	9b01      	ldr	r3, [sp, #4]
    c754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c758:	bf00      	nop
    c75a:	b002      	add	sp, #8
    c75c:	4770      	bx	lr

0000c75e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c75e:	b082      	sub	sp, #8
    c760:	9001      	str	r0, [sp, #4]
    c762:	460b      	mov	r3, r1
    c764:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    c768:	9b01      	ldr	r3, [sp, #4]
    c76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c76e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c772:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c776:	2a00      	cmp	r2, #0
    c778:	d002      	beq.n	c780 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    c77a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c77e:	e000      	b.n	c782 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    c780:	2200      	movs	r2, #0
    c782:	431a      	orrs	r2, r3
    c784:	9b01      	ldr	r3, [sp, #4]
    c786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c78a:	bf00      	nop
    c78c:	b002      	add	sp, #8
    c78e:	4770      	bx	lr

0000c790 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c790:	b082      	sub	sp, #8
    c792:	9001      	str	r0, [sp, #4]
    c794:	460b      	mov	r3, r1
    c796:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c7a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c7a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c7a8:	2a00      	cmp	r2, #0
    c7aa:	d002      	beq.n	c7b2 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    c7ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c7b0:	e000      	b.n	c7b4 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    c7b2:	2200      	movs	r2, #0
    c7b4:	431a      	orrs	r2, r3
    c7b6:	9b01      	ldr	r3, [sp, #4]
    c7b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c7bc:	bf00      	nop
    c7be:	b002      	add	sp, #8
    c7c0:	4770      	bx	lr

0000c7c2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c7c2:	b082      	sub	sp, #8
    c7c4:	9001      	str	r0, [sp, #4]
    c7c6:	460b      	mov	r3, r1
    c7c8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c7cc:	9b01      	ldr	r3, [sp, #4]
    c7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c7d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    c7d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c7da:	2a00      	cmp	r2, #0
    c7dc:	d002      	beq.n	c7e4 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    c7de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c7e2:	e000      	b.n	c7e6 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    c7e4:	2200      	movs	r2, #0
    c7e6:	431a      	orrs	r2, r3
    c7e8:	9b01      	ldr	r3, [sp, #4]
    c7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c7ee:	bf00      	nop
    c7f0:	b002      	add	sp, #8
    c7f2:	4770      	bx	lr

0000c7f4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c7f4:	b082      	sub	sp, #8
    c7f6:	9001      	str	r0, [sp, #4]
    c7f8:	460b      	mov	r3, r1
    c7fa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c7fe:	9b01      	ldr	r3, [sp, #4]
    c800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c808:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c80c:	2a00      	cmp	r2, #0
    c80e:	d002      	beq.n	c816 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    c810:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    c814:	e000      	b.n	c818 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    c816:	2200      	movs	r2, #0
    c818:	431a      	orrs	r2, r3
    c81a:	9b01      	ldr	r3, [sp, #4]
    c81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c820:	bf00      	nop
    c822:	b002      	add	sp, #8
    c824:	4770      	bx	lr

0000c826 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c826:	b082      	sub	sp, #8
    c828:	9001      	str	r0, [sp, #4]
    c82a:	460b      	mov	r3, r1
    c82c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c830:	9b01      	ldr	r3, [sp, #4]
    c832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c836:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    c83a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c83e:	2a00      	cmp	r2, #0
    c840:	d002      	beq.n	c848 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    c842:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    c846:	e000      	b.n	c84a <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    c848:	2200      	movs	r2, #0
    c84a:	431a      	orrs	r2, r3
    c84c:	9b01      	ldr	r3, [sp, #4]
    c84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c852:	bf00      	nop
    c854:	b002      	add	sp, #8
    c856:	4770      	bx	lr

0000c858 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c858:	b084      	sub	sp, #16
    c85a:	9001      	str	r0, [sp, #4]
    c85c:	460b      	mov	r3, r1
    c85e:	f88d 3003 	strb.w	r3, [sp, #3]
    c862:	4613      	mov	r3, r2
    c864:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    c868:	9b01      	ldr	r3, [sp, #4]
    c86a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c86c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c870:	fa22 f303 	lsr.w	r3, r2, r3
    c874:	b2db      	uxtb	r3, r3
    c876:	f003 0301 	and.w	r3, r3, #1
    c87a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    c87e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c882:	2b00      	cmp	r3, #0
    c884:	bf14      	ite	ne
    c886:	2301      	movne	r3, #1
    c888:	2300      	moveq	r3, #0
    c88a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    c88e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    c892:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c896:	429a      	cmp	r2, r3
    c898:	d00d      	beq.n	c8b6 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    c89a:	9b01      	ldr	r3, [sp, #4]
    c89c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8a4:	3308      	adds	r3, #8
    c8a6:	2101      	movs	r1, #1
    c8a8:	fa01 f303 	lsl.w	r3, r1, r3
    c8ac:	431a      	orrs	r2, r3
    c8ae:	9b01      	ldr	r3, [sp, #4]
    c8b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    c8b4:	e00d      	b.n	c8d2 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    c8b6:	9b01      	ldr	r3, [sp, #4]
    c8b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8c0:	3308      	adds	r3, #8
    c8c2:	2101      	movs	r1, #1
    c8c4:	fa01 f303 	lsl.w	r3, r1, r3
    c8c8:	43db      	mvns	r3, r3
    c8ca:	401a      	ands	r2, r3
    c8cc:	9b01      	ldr	r3, [sp, #4]
    c8ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c8d2:	bf00      	nop
    c8d4:	b004      	add	sp, #16
    c8d6:	4770      	bx	lr

0000c8d8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c8d8:	b082      	sub	sp, #8
    c8da:	9001      	str	r0, [sp, #4]
    c8dc:	460b      	mov	r3, r1
    c8de:	f88d 3003 	strb.w	r3, [sp, #3]
    c8e2:	4613      	mov	r3, r2
    c8e4:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c8e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c8ec:	2b00      	cmp	r3, #0
    c8ee:	d00c      	beq.n	c90a <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    c8f0:	9b01      	ldr	r3, [sp, #4]
    c8f2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8fa:	2101      	movs	r1, #1
    c8fc:	fa01 f303 	lsl.w	r3, r1, r3
    c900:	431a      	orrs	r2, r3
    c902:	9b01      	ldr	r3, [sp, #4]
    c904:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    c908:	e00c      	b.n	c924 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    c90a:	9b01      	ldr	r3, [sp, #4]
    c90c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c910:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c914:	2101      	movs	r1, #1
    c916:	fa01 f303 	lsl.w	r3, r1, r3
    c91a:	43db      	mvns	r3, r3
    c91c:	401a      	ands	r2, r3
    c91e:	9b01      	ldr	r3, [sp, #4]
    c920:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c924:	bf00      	nop
    c926:	b002      	add	sp, #8
    c928:	4770      	bx	lr

0000c92a <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    c92a:	b082      	sub	sp, #8
    c92c:	9001      	str	r0, [sp, #4]
    c92e:	460b      	mov	r3, r1
    c930:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    c934:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c938:	9b01      	ldr	r3, [sp, #4]
    c93a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c93e:	bf00      	nop
    c940:	b002      	add	sp, #8
    c942:	4770      	bx	lr

0000c944 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    c944:	b082      	sub	sp, #8
    c946:	9001      	str	r0, [sp, #4]
    c948:	460b      	mov	r3, r1
    c94a:	f88d 3003 	strb.w	r3, [sp, #3]
    c94e:	4613      	mov	r3, r2
    c950:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c954:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c958:	2b00      	cmp	r3, #0
    c95a:	d00c      	beq.n	c976 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    c95c:	9b01      	ldr	r3, [sp, #4]
    c95e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c962:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c966:	2101      	movs	r1, #1
    c968:	fa01 f303 	lsl.w	r3, r1, r3
    c96c:	431a      	orrs	r2, r3
    c96e:	9b01      	ldr	r3, [sp, #4]
    c970:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    c974:	e00c      	b.n	c990 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    c976:	9b01      	ldr	r3, [sp, #4]
    c978:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c97c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c980:	2101      	movs	r1, #1
    c982:	fa01 f303 	lsl.w	r3, r1, r3
    c986:	43db      	mvns	r3, r3
    c988:	401a      	ands	r2, r3
    c98a:	9b01      	ldr	r3, [sp, #4]
    c98c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c990:	bf00      	nop
    c992:	b002      	add	sp, #8
    c994:	4770      	bx	lr

0000c996 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    c996:	b082      	sub	sp, #8
    c998:	9001      	str	r0, [sp, #4]
    c99a:	460b      	mov	r3, r1
    c99c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    c9a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d008      	beq.n	c9ba <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    c9a8:	9b01      	ldr	r3, [sp, #4]
    c9aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c9ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    c9b2:	9b01      	ldr	r3, [sp, #4]
    c9b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    c9b8:	e007      	b.n	c9ca <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    c9ba:	9b01      	ldr	r3, [sp, #4]
    c9bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c9c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    c9c4:	9b01      	ldr	r3, [sp, #4]
    c9c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c9ca:	bf00      	nop
    c9cc:	b002      	add	sp, #8
    c9ce:	4770      	bx	lr

0000c9d0 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    c9d0:	b082      	sub	sp, #8
    c9d2:	9001      	str	r0, [sp, #4]
    c9d4:	460b      	mov	r3, r1
    c9d6:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    c9da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c9de:	9b01      	ldr	r3, [sp, #4]
    c9e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    c9e4:	bf00      	nop
    c9e6:	b002      	add	sp, #8
    c9e8:	4770      	bx	lr

0000c9ea <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c9ea:	b082      	sub	sp, #8
    c9ec:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    c9ee:	9b01      	ldr	r3, [sp, #4]
    c9f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    c9f4:	b29b      	uxth	r3, r3
}
    c9f6:	4618      	mov	r0, r3
    c9f8:	b002      	add	sp, #8
    c9fa:	4770      	bx	lr

0000c9fc <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c9fc:	b082      	sub	sp, #8
    c9fe:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    ca00:	9b01      	ldr	r3, [sp, #4]
    ca02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    ca04:	b29b      	uxth	r3, r3
}
    ca06:	4618      	mov	r0, r3
    ca08:	b002      	add	sp, #8
    ca0a:	4770      	bx	lr

0000ca0c <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    ca0c:	b500      	push	{lr}
    ca0e:	b085      	sub	sp, #20
    ca10:	9001      	str	r0, [sp, #4]
    ca12:	460b      	mov	r3, r1
    ca14:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    ca18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca1c:	085b      	lsrs	r3, r3, #1
    ca1e:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ca26:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca2a:	00db      	lsls	r3, r3, #3
    ca2c:	2101      	movs	r1, #1
    ca2e:	fa01 f303 	lsl.w	r3, r1, r3
    ca32:	401a      	ands	r2, r3
    ca34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca38:	00db      	lsls	r3, r3, #3
    ca3a:	fa22 f303 	lsr.w	r3, r2, r3
    ca3e:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    ca42:	9b01      	ldr	r3, [sp, #4]
    ca44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ca46:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca4a:	00db      	lsls	r3, r3, #3
    ca4c:	2180      	movs	r1, #128	; 0x80
    ca4e:	fa01 f303 	lsl.w	r3, r1, r3
    ca52:	401a      	ands	r2, r3
    ca54:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca58:	00db      	lsls	r3, r3, #3
    ca5a:	fa22 f303 	lsr.w	r3, r2, r3
    ca5e:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    ca62:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ca66:	2b80      	cmp	r3, #128	; 0x80
    ca68:	d101      	bne.n	ca6e <Ftm_Pwm_Ip_GetChannelMode+0x62>
    ca6a:	2301      	movs	r3, #1
    ca6c:	e000      	b.n	ca70 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    ca6e:	2300      	movs	r3, #0
    ca70:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    ca74:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca78:	4619      	mov	r1, r3
    ca7a:	9801      	ldr	r0, [sp, #4]
    ca7c:	f7ff f99b 	bl	bdb6 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    ca80:	4603      	mov	r3, r0
    ca82:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    ca86:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca8a:	4619      	mov	r1, r3
    ca8c:	9801      	ldr	r0, [sp, #4]
    ca8e:	f7ff fa2a 	bl	bee6 <Ftm_Pwm_Ip_GetChnMode>
    ca92:	4603      	mov	r3, r0
    ca94:	009b      	lsls	r3, r3, #2
    ca96:	b2da      	uxtb	r2, r3
    ca98:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca9c:	4313      	orrs	r3, r2
    ca9e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    caa2:	9801      	ldr	r0, [sp, #4]
    caa4:	f7ff f923 	bl	bcee <Ftm_Pwm_Ip_GetCpwms>
    caa8:	4603      	mov	r3, r0
    caaa:	b2db      	uxtb	r3, r3
    caac:	011b      	lsls	r3, r3, #4
    caae:	b2da      	uxtb	r2, r3
    cab0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cab4:	4313      	orrs	r3, r2
    cab6:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    caba:	f89d 300a 	ldrb.w	r3, [sp, #10]
    cabe:	015b      	lsls	r3, r3, #5
    cac0:	b2da      	uxtb	r2, r3
    cac2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cac6:	4313      	orrs	r3, r2
    cac8:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    cacc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    cad0:	019b      	lsls	r3, r3, #6
    cad2:	b2da      	uxtb	r2, r3
    cad4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cad8:	4313      	orrs	r3, r2
    cada:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    cade:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cae2:	2b62      	cmp	r3, #98	; 0x62
    cae4:	d055      	beq.n	cb92 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    cae6:	2b62      	cmp	r3, #98	; 0x62
    cae8:	dc59      	bgt.n	cb9e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    caea:	2b22      	cmp	r3, #34	; 0x22
    caec:	dc3c      	bgt.n	cb68 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    caee:	2b09      	cmp	r3, #9
    caf0:	db55      	blt.n	cb9e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    caf2:	3b09      	subs	r3, #9
    caf4:	2b19      	cmp	r3, #25
    caf6:	d852      	bhi.n	cb9e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    caf8:	a201      	add	r2, pc, #4	; (adr r2, cb00 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    cafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cafe:	bf00      	nop
    cb00:	0000cb75 	.word	0x0000cb75
    cb04:	0000cb6f 	.word	0x0000cb6f
    cb08:	0000cb9f 	.word	0x0000cb9f
    cb0c:	0000cb9f 	.word	0x0000cb9f
    cb10:	0000cb9f 	.word	0x0000cb9f
    cb14:	0000cb9f 	.word	0x0000cb9f
    cb18:	0000cb9f 	.word	0x0000cb9f
    cb1c:	0000cb9f 	.word	0x0000cb9f
    cb20:	0000cb81 	.word	0x0000cb81
    cb24:	0000cb7b 	.word	0x0000cb7b
    cb28:	0000cb9f 	.word	0x0000cb9f
    cb2c:	0000cb9f 	.word	0x0000cb9f
    cb30:	0000cb9f 	.word	0x0000cb9f
    cb34:	0000cb9f 	.word	0x0000cb9f
    cb38:	0000cb9f 	.word	0x0000cb9f
    cb3c:	0000cb9f 	.word	0x0000cb9f
    cb40:	0000cb9f 	.word	0x0000cb9f
    cb44:	0000cb9f 	.word	0x0000cb9f
    cb48:	0000cb9f 	.word	0x0000cb9f
    cb4c:	0000cb9f 	.word	0x0000cb9f
    cb50:	0000cb9f 	.word	0x0000cb9f
    cb54:	0000cb9f 	.word	0x0000cb9f
    cb58:	0000cb9f 	.word	0x0000cb9f
    cb5c:	0000cb9f 	.word	0x0000cb9f
    cb60:	0000cb8d 	.word	0x0000cb8d
    cb64:	0000cb87 	.word	0x0000cb87
    cb68:	2b61      	cmp	r3, #97	; 0x61
    cb6a:	d015      	beq.n	cb98 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    cb6c:	e017      	b.n	cb9e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    cb6e:	230a      	movs	r3, #10
    cb70:	9303      	str	r3, [sp, #12]
            break;
    cb72:	e017      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    cb74:	2309      	movs	r3, #9
    cb76:	9303      	str	r3, [sp, #12]
            break;
    cb78:	e014      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    cb7a:	2312      	movs	r3, #18
    cb7c:	9303      	str	r3, [sp, #12]
            break;
    cb7e:	e011      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    cb80:	2311      	movs	r3, #17
    cb82:	9303      	str	r3, [sp, #12]
            break;
    cb84:	e00e      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    cb86:	2322      	movs	r3, #34	; 0x22
    cb88:	9303      	str	r3, [sp, #12]
            break;
    cb8a:	e00b      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    cb8c:	2321      	movs	r3, #33	; 0x21
    cb8e:	9303      	str	r3, [sp, #12]
            break;
    cb90:	e008      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    cb92:	2362      	movs	r3, #98	; 0x62
    cb94:	9303      	str	r3, [sp, #12]
            break;
    cb96:	e005      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    cb98:	2361      	movs	r3, #97	; 0x61
    cb9a:	9303      	str	r3, [sp, #12]
            break;
    cb9c:	e002      	b.n	cba4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    cb9e:	23ff      	movs	r3, #255	; 0xff
    cba0:	9303      	str	r3, [sp, #12]
            break;
    cba2:	bf00      	nop
    }

    return ChMode; 
    cba4:	9b03      	ldr	r3, [sp, #12]
}
    cba6:	4618      	mov	r0, r3
    cba8:	b005      	add	sp, #20
    cbaa:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbae <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    cbae:	b082      	sub	sp, #8
    cbb0:	9001      	str	r0, [sp, #4]
    cbb2:	460b      	mov	r3, r1
    cbb4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    cbb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d006      	beq.n	cbce <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    cbc0:	9b01      	ldr	r3, [sp, #4]
    cbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cbc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cbc8:	9b01      	ldr	r3, [sp, #4]
    cbca:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    cbcc:	e00b      	b.n	cbe6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    cbce:	9b01      	ldr	r3, [sp, #4]
    cbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	d005      	beq.n	cbe6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    cbda:	9b01      	ldr	r3, [sp, #4]
    cbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cbde:	f043 0204 	orr.w	r2, r3, #4
    cbe2:	9b01      	ldr	r3, [sp, #4]
    cbe4:	655a      	str	r2, [r3, #84]	; 0x54
}
    cbe6:	bf00      	nop
    cbe8:	b002      	add	sp, #8
    cbea:	4770      	bx	lr

0000cbec <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    cbec:	b500      	push	{lr}
    cbee:	b085      	sub	sp, #20
    cbf0:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    cbf2:	2100      	movs	r1, #0
    cbf4:	9801      	ldr	r0, [sp, #4]
    cbf6:	f7ff ffda 	bl	cbae <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    cbfa:	9b01      	ldr	r3, [sp, #4]
    cbfc:	681a      	ldr	r2, [r3, #0]
    cbfe:	9b01      	ldr	r3, [sp, #4]
    cc00:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	2200      	movs	r2, #0
    cc06:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    cc08:	9b01      	ldr	r3, [sp, #4]
    cc0a:	2200      	movs	r2, #0
    cc0c:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	2200      	movs	r2, #0
    cc12:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    cc14:	9b01      	ldr	r3, [sp, #4]
    cc16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    cc18:	9b01      	ldr	r3, [sp, #4]
    cc1a:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    cc1c:	9b01      	ldr	r3, [sp, #4]
    cc1e:	2204      	movs	r2, #4
    cc20:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    cc22:	9b01      	ldr	r3, [sp, #4]
    cc24:	2200      	movs	r2, #0
    cc26:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    cc28:	9b01      	ldr	r3, [sp, #4]
    cc2a:	2200      	movs	r2, #0
    cc2c:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    cc2e:	9b01      	ldr	r3, [sp, #4]
    cc30:	2200      	movs	r2, #0
    cc32:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    cc34:	9b01      	ldr	r3, [sp, #4]
    cc36:	2200      	movs	r2, #0
    cc38:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	2200      	movs	r2, #0
    cc3e:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    cc40:	9b01      	ldr	r3, [sp, #4]
    cc42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cc44:	9b01      	ldr	r3, [sp, #4]
    cc46:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    cc48:	9b01      	ldr	r3, [sp, #4]
    cc4a:	2200      	movs	r2, #0
    cc4c:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    cc4e:	9b01      	ldr	r3, [sp, #4]
    cc50:	2200      	movs	r2, #0
    cc52:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    cc54:	9b01      	ldr	r3, [sp, #4]
    cc56:	2200      	movs	r2, #0
    cc58:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    cc5a:	9b01      	ldr	r3, [sp, #4]
    cc5c:	2200      	movs	r2, #0
    cc5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    cc62:	9b01      	ldr	r3, [sp, #4]
    cc64:	2200      	movs	r2, #0
    cc66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    cc6a:	9b01      	ldr	r3, [sp, #4]
    cc6c:	2200      	movs	r2, #0
    cc6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    cc72:	9b01      	ldr	r3, [sp, #4]
    cc74:	2200      	movs	r2, #0
    cc76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    cc7a:	9b01      	ldr	r3, [sp, #4]
    cc7c:	2200      	movs	r2, #0
    cc7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    cc82:	9b01      	ldr	r3, [sp, #4]
    cc84:	2200      	movs	r2, #0
    cc86:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    cc8a:	9b01      	ldr	r3, [sp, #4]
    cc8c:	2200      	movs	r2, #0
    cc8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    cc92:	2300      	movs	r3, #0
    cc94:	f88d 300f 	strb.w	r3, [sp, #15]
    cc98:	e014      	b.n	ccc4 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    cc9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc9e:	9a01      	ldr	r2, [sp, #4]
    cca0:	3301      	adds	r3, #1
    cca2:	00db      	lsls	r3, r3, #3
    cca4:	4413      	add	r3, r2
    cca6:	2200      	movs	r2, #0
    cca8:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    ccaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccae:	9a01      	ldr	r2, [sp, #4]
    ccb0:	3301      	adds	r3, #1
    ccb2:	00db      	lsls	r3, r3, #3
    ccb4:	4413      	add	r3, r2
    ccb6:	2200      	movs	r2, #0
    ccb8:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    ccba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccbe:	3301      	adds	r3, #1
    ccc0:	f88d 300f 	strb.w	r3, [sp, #15]
    ccc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ccc8:	2b07      	cmp	r3, #7
    ccca:	d9e6      	bls.n	cc9a <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    cccc:	bf00      	nop
    ccce:	bf00      	nop
    ccd0:	b005      	add	sp, #20
    ccd2:	f85d fb04 	ldr.w	pc, [sp], #4

0000ccd6 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    ccd6:	b084      	sub	sp, #16
    ccd8:	9001      	str	r0, [sp, #4]
    ccda:	460b      	mov	r3, r1
    ccdc:	f88d 3003 	strb.w	r3, [sp, #3]
    cce0:	4613      	mov	r3, r2
    cce2:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    cce6:	2300      	movs	r3, #0
    cce8:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    ccea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccee:	2b01      	cmp	r3, #1
    ccf0:	d806      	bhi.n	cd00 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    ccf2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccf6:	2210      	movs	r2, #16
    ccf8:	fa02 f303 	lsl.w	r3, r2, r3
    ccfc:	9303      	str	r3, [sp, #12]
    ccfe:	e013      	b.n	cd28 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    cd00:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd04:	2b05      	cmp	r3, #5
    cd06:	d807      	bhi.n	cd18 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    cd08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd0c:	3b02      	subs	r3, #2
    cd0e:	2201      	movs	r2, #1
    cd10:	fa02 f303 	lsl.w	r3, r2, r3
    cd14:	9303      	str	r3, [sp, #12]
    cd16:	e007      	b.n	cd28 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    cd18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd1c:	3b06      	subs	r3, #6
    cd1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    cd22:	fa02 f303 	lsl.w	r3, r2, r3
    cd26:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    cd28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	d006      	beq.n	cd3e <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cd34:	9b03      	ldr	r3, [sp, #12]
    cd36:	431a      	orrs	r2, r3
    cd38:	9b01      	ldr	r3, [sp, #4]
    cd3a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    cd3c:	e006      	b.n	cd4c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    cd3e:	9b01      	ldr	r3, [sp, #4]
    cd40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cd42:	9b03      	ldr	r3, [sp, #12]
    cd44:	43db      	mvns	r3, r3
    cd46:	401a      	ands	r2, r3
    cd48:	9b01      	ldr	r3, [sp, #4]
    cd4a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    cd4c:	bf00      	nop
    cd4e:	b004      	add	sp, #16
    cd50:	4770      	bx	lr

0000cd52 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    cd52:	b082      	sub	sp, #8
    cd54:	9001      	str	r0, [sp, #4]
    cd56:	9100      	str	r1, [sp, #0]
    cd58:	9b00      	ldr	r3, [sp, #0]
    cd5a:	2b03      	cmp	r3, #3
    cd5c:	d82a      	bhi.n	cdb4 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    cd5e:	a201      	add	r2, pc, #4	; (adr r2, cd64 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd64:	0000cd75 	.word	0x0000cd75
    cd68:	0000cd83 	.word	0x0000cd83
    cd6c:	0000cd95 	.word	0x0000cd95
    cd70:	0000cda7 	.word	0x0000cda7
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    cd74:	9b01      	ldr	r3, [sp, #4]
    cd76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd78:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    cd7c:	9b01      	ldr	r3, [sp, #4]
    cd7e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd80:	e019      	b.n	cdb6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    cd82:	9b01      	ldr	r3, [sp, #4]
    cd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd86:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cd8a:	f043 0220 	orr.w	r2, r3, #32
    cd8e:	9b01      	ldr	r3, [sp, #4]
    cd90:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd92:	e010      	b.n	cdb6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    cd94:	9b01      	ldr	r3, [sp, #4]
    cd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cd9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cda0:	9b01      	ldr	r3, [sp, #4]
    cda2:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cda4:	e007      	b.n	cdb6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    cda6:	9b01      	ldr	r3, [sp, #4]
    cda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cdaa:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    cdae:	9b01      	ldr	r3, [sp, #4]
    cdb0:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cdb2:	e000      	b.n	cdb6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    cdb4:	bf00      	nop
    }
}
    cdb6:	bf00      	nop
    cdb8:	b002      	add	sp, #8
    cdba:	4770      	bx	lr

0000cdbc <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    cdbc:	b082      	sub	sp, #8
    cdbe:	9001      	str	r0, [sp, #4]
    cdc0:	460b      	mov	r3, r1
    cdc2:	f88d 3003 	strb.w	r3, [sp, #3]
    cdc6:	4613      	mov	r3, r2
    cdc8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    cdcc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d00b      	beq.n	cdec <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cdd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cddc:	00db      	lsls	r3, r3, #3
    cdde:	2140      	movs	r1, #64	; 0x40
    cde0:	fa01 f303 	lsl.w	r3, r1, r3
    cde4:	431a      	orrs	r2, r3
    cde6:	9b01      	ldr	r3, [sp, #4]
    cde8:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    cdea:	e00b      	b.n	ce04 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    cdec:	9b01      	ldr	r3, [sp, #4]
    cdee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cdf0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cdf4:	00db      	lsls	r3, r3, #3
    cdf6:	2140      	movs	r1, #64	; 0x40
    cdf8:	fa01 f303 	lsl.w	r3, r1, r3
    cdfc:	43db      	mvns	r3, r3
    cdfe:	401a      	ands	r2, r3
    ce00:	9b01      	ldr	r3, [sp, #4]
    ce02:	665a      	str	r2, [r3, #100]	; 0x64
}
    ce04:	bf00      	nop
    ce06:	b002      	add	sp, #8
    ce08:	4770      	bx	lr

0000ce0a <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    ce0a:	b082      	sub	sp, #8
    ce0c:	9001      	str	r0, [sp, #4]
    ce0e:	460b      	mov	r3, r1
    ce10:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    ce14:	9b01      	ldr	r3, [sp, #4]
    ce16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ce18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ce1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ce20:	2a00      	cmp	r2, #0
    ce22:	d001      	beq.n	ce28 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    ce24:	2280      	movs	r2, #128	; 0x80
    ce26:	e000      	b.n	ce2a <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    ce28:	2200      	movs	r2, #0
    ce2a:	431a      	orrs	r2, r3
    ce2c:	9b01      	ldr	r3, [sp, #4]
    ce2e:	655a      	str	r2, [r3, #84]	; 0x54
}
    ce30:	bf00      	nop
    ce32:	b002      	add	sp, #8
    ce34:	4770      	bx	lr

0000ce36 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    ce36:	b082      	sub	sp, #8
    ce38:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    ce3a:	9b01      	ldr	r3, [sp, #4]
    ce3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    ce3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    ce42:	9b01      	ldr	r3, [sp, #4]
    ce44:	675a      	str	r2, [r3, #116]	; 0x74
}
    ce46:	bf00      	nop
    ce48:	b002      	add	sp, #8
    ce4a:	4770      	bx	lr

0000ce4c <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    ce4c:	b082      	sub	sp, #8
    ce4e:	9001      	str	r0, [sp, #4]
    ce50:	460b      	mov	r3, r1
    ce52:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    ce56:	9b01      	ldr	r3, [sp, #4]
    ce58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    ce5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ce62:	021b      	lsls	r3, r3, #8
    ce64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ce68:	431a      	orrs	r2, r3
    ce6a:	9b01      	ldr	r3, [sp, #4]
    ce6c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ce6e:	bf00      	nop
    ce70:	b002      	add	sp, #8
    ce72:	4770      	bx	lr

0000ce74 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    ce74:	b082      	sub	sp, #8
    ce76:	9001      	str	r0, [sp, #4]
    ce78:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    ce7a:	9b01      	ldr	r3, [sp, #4]
    ce7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ce82:	9a00      	ldr	r2, [sp, #0]
    ce84:	2a00      	cmp	r2, #0
    ce86:	d002      	beq.n	ce8e <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    ce88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ce8c:	e000      	b.n	ce90 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    ce8e:	2200      	movs	r2, #0
    ce90:	431a      	orrs	r2, r3
    ce92:	9b01      	ldr	r3, [sp, #4]
    ce94:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ce96:	bf00      	nop
    ce98:	b002      	add	sp, #8
    ce9a:	4770      	bx	lr

0000ce9c <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    ce9c:	b086      	sub	sp, #24
    ce9e:	9003      	str	r0, [sp, #12]
    cea0:	460b      	mov	r3, r1
    cea2:	9201      	str	r2, [sp, #4]
    cea4:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    cea8:	9b01      	ldr	r3, [sp, #4]
    ceaa:	2b00      	cmp	r3, #0
    ceac:	bf14      	ite	ne
    ceae:	2301      	movne	r3, #1
    ceb0:	2300      	moveq	r3, #0
    ceb2:	b2db      	uxtb	r3, r3
    ceb4:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    ceb6:	9b03      	ldr	r3, [sp, #12]
    ceb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cebc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cec0:	2101      	movs	r1, #1
    cec2:	fa01 f303 	lsl.w	r3, r1, r3
    cec6:	43db      	mvns	r3, r3
    cec8:	401a      	ands	r2, r3
    ceca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cece:	9905      	ldr	r1, [sp, #20]
    ced0:	fa01 f303 	lsl.w	r3, r1, r3
    ced4:	431a      	orrs	r2, r3
    ced6:	9b03      	ldr	r3, [sp, #12]
    ced8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    cedc:	bf00      	nop
    cede:	b006      	add	sp, #24
    cee0:	4770      	bx	lr

0000cee2 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    cee2:	b084      	sub	sp, #16
    cee4:	9001      	str	r0, [sp, #4]
    cee6:	460b      	mov	r3, r1
    cee8:	f88d 3003 	strb.w	r3, [sp, #3]
    ceec:	4613      	mov	r3, r2
    ceee:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    cef2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cef6:	2b00      	cmp	r3, #0
    cef8:	d001      	beq.n	cefe <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    cefa:	2301      	movs	r3, #1
    cefc:	e000      	b.n	cf00 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    cefe:	2300      	movs	r3, #0
    cf00:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    cf02:	9b01      	ldr	r3, [sp, #4]
    cf04:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    cf06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf0a:	2101      	movs	r1, #1
    cf0c:	fa01 f303 	lsl.w	r3, r1, r3
    cf10:	43db      	mvns	r3, r3
    cf12:	401a      	ands	r2, r3
    cf14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf18:	9903      	ldr	r1, [sp, #12]
    cf1a:	fa01 f303 	lsl.w	r3, r1, r3
    cf1e:	431a      	orrs	r2, r3
    cf20:	9b01      	ldr	r3, [sp, #4]
    cf22:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cf24:	bf00      	nop
    cf26:	b004      	add	sp, #16
    cf28:	4770      	bx	lr

0000cf2a <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    cf2a:	b084      	sub	sp, #16
    cf2c:	9001      	str	r0, [sp, #4]
    cf2e:	460b      	mov	r3, r1
    cf30:	f88d 3003 	strb.w	r3, [sp, #3]
    cf34:	4613      	mov	r3, r2
    cf36:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    cf3a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d001      	beq.n	cf46 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    cf42:	2301      	movs	r3, #1
    cf44:	e000      	b.n	cf48 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    cf46:	2300      	movs	r3, #0
    cf48:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    cf4a:	9b01      	ldr	r3, [sp, #4]
    cf4c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    cf4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf52:	2110      	movs	r1, #16
    cf54:	fa01 f303 	lsl.w	r3, r1, r3
    cf58:	43db      	mvns	r3, r3
    cf5a:	401a      	ands	r2, r3
    cf5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf60:	9903      	ldr	r1, [sp, #12]
    cf62:	fa01 f303 	lsl.w	r3, r1, r3
    cf66:	011b      	lsls	r3, r3, #4
    cf68:	431a      	orrs	r2, r3
    cf6a:	9b01      	ldr	r3, [sp, #4]
    cf6c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cf6e:	bf00      	nop
    cf70:	b004      	add	sp, #16
    cf72:	4770      	bx	lr

0000cf74 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    cf74:	b082      	sub	sp, #8
    cf76:	9001      	str	r0, [sp, #4]
    cf78:	460b      	mov	r3, r1
    cf7a:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    cf7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cf86:	409a      	lsls	r2, r3
    cf88:	9b01      	ldr	r3, [sp, #4]
    cf8a:	6a1b      	ldr	r3, [r3, #32]
    cf8c:	431a      	orrs	r2, r3
    cf8e:	9b01      	ldr	r3, [sp, #4]
    cf90:	621a      	str	r2, [r3, #32]
}
    cf92:	bf00      	nop
    cf94:	b002      	add	sp, #8
    cf96:	4770      	bx	lr

0000cf98 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    cf98:	b084      	sub	sp, #16
    cf9a:	4603      	mov	r3, r0
    cf9c:	f88d 3007 	strb.w	r3, [sp, #7]
    cfa0:	460b      	mov	r3, r1
    cfa2:	f8ad 3004 	strh.w	r3, [sp, #4]
    cfa6:	4613      	mov	r3, r2
    cfa8:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    cfac:	2300      	movs	r3, #0
    cfae:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    cfb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cfb6:	4a17      	ldr	r2, [pc, #92]	; (d014 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cfb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfbc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cfc0:	429a      	cmp	r2, r3
    cfc2:	d107      	bne.n	cfd4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    cfc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cfc8:	4a12      	ldr	r2, [pc, #72]	; (d014 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cfca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cfce:	f8ad 300e 	strh.w	r3, [sp, #14]
    cfd2:	e019      	b.n	d008 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    cfd4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d104      	bne.n	cfe6 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    cfdc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cfe0:	f8ad 300e 	strh.w	r3, [sp, #14]
    cfe4:	e010      	b.n	d008 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    cfe6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    cfea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cfee:	4413      	add	r3, r2
    cff0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cff4:	4907      	ldr	r1, [pc, #28]	; (d014 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cff6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    cffa:	fb93 f1f2 	sdiv	r1, r3, r2
    cffe:	fb01 f202 	mul.w	r2, r1, r2
    d002:	1a9b      	subs	r3, r3, r2
    d004:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    d008:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    d00c:	4618      	mov	r0, r3
    d00e:	b004      	add	sp, #16
    d010:	4770      	bx	lr
    d012:	bf00      	nop
    d014:	1fff8e00 	.word	0x1fff8e00

0000d018 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    d018:	b500      	push	{lr}
    d01a:	b085      	sub	sp, #20
    d01c:	4603      	mov	r3, r0
    d01e:	9100      	str	r1, [sp, #0]
    d020:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d024:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d028:	4a40      	ldr	r2, [pc, #256]	; (d12c <Ftm_Pwm_Ip_InitPair+0x114>)
    d02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d02e:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    d030:	2300      	movs	r3, #0
    d032:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    d036:	2300      	movs	r3, #0
    d038:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    d03c:	9b00      	ldr	r3, [sp, #0]
    d03e:	781b      	ldrb	r3, [r3, #0]
    d040:	005b      	lsls	r3, r3, #1
    d042:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    d046:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d04a:	3301      	adds	r3, #1
    d04c:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    d050:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d054:	9a00      	ldr	r2, [sp, #0]
    d056:	7812      	ldrb	r2, [r2, #0]
    d058:	4610      	mov	r0, r2
    d05a:	9a00      	ldr	r2, [sp, #0]
    d05c:	8951      	ldrh	r1, [r2, #10]
    d05e:	4a34      	ldr	r2, [pc, #208]	; (d130 <Ftm_Pwm_Ip_InitPair+0x118>)
    d060:	009b      	lsls	r3, r3, #2
    d062:	4403      	add	r3, r0
    d064:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    d068:	9b00      	ldr	r3, [sp, #0]
    d06a:	7819      	ldrb	r1, [r3, #0]
    d06c:	9b00      	ldr	r3, [sp, #0]
    d06e:	789b      	ldrb	r3, [r3, #2]
    d070:	461a      	mov	r2, r3
    d072:	9803      	ldr	r0, [sp, #12]
    d074:	f7ff f920 	bl	c2b8 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    d078:	9b00      	ldr	r3, [sp, #0]
    d07a:	789b      	ldrb	r3, [r3, #2]
    d07c:	2b00      	cmp	r3, #0
    d07e:	d02f      	beq.n	d0e0 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    d080:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d084:	4619      	mov	r1, r3
    d086:	9803      	ldr	r0, [sp, #12]
    d088:	f7ff fa3e 	bl	c508 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    d08c:	4603      	mov	r3, r0
    d08e:	2b01      	cmp	r3, #1
    d090:	d113      	bne.n	d0ba <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    d092:	9b00      	ldr	r3, [sp, #0]
    d094:	685b      	ldr	r3, [r3, #4]
    d096:	2b01      	cmp	r3, #1
    d098:	d107      	bne.n	d0aa <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    d09a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d09e:	2200      	movs	r2, #0
    d0a0:	4619      	mov	r1, r3
    d0a2:	9803      	ldr	r0, [sp, #12]
    d0a4:	f7ff fa0e 	bl	c4c4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d0a8:	e01a      	b.n	d0e0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    d0aa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0ae:	2201      	movs	r2, #1
    d0b0:	4619      	mov	r1, r3
    d0b2:	9803      	ldr	r0, [sp, #12]
    d0b4:	f7ff fa06 	bl	c4c4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d0b8:	e012      	b.n	d0e0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    d0ba:	9b00      	ldr	r3, [sp, #0]
    d0bc:	685b      	ldr	r3, [r3, #4]
    d0be:	2b01      	cmp	r3, #1
    d0c0:	d107      	bne.n	d0d2 <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    d0c2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0c6:	2201      	movs	r2, #1
    d0c8:	4619      	mov	r1, r3
    d0ca:	9803      	ldr	r0, [sp, #12]
    d0cc:	f7ff f9fa 	bl	c4c4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d0d0:	e006      	b.n	d0e0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    d0d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0d6:	2200      	movs	r2, #0
    d0d8:	4619      	mov	r1, r3
    d0da:	9803      	ldr	r0, [sp, #12]
    d0dc:	f7ff f9f2 	bl	c4c4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    d0e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0e4:	4619      	mov	r1, r3
    d0e6:	9803      	ldr	r0, [sp, #12]
    d0e8:	f7fe fe31 	bl	bd4e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    d0ec:	9b00      	ldr	r3, [sp, #0]
    d0ee:	7819      	ldrb	r1, [r3, #0]
    d0f0:	9b00      	ldr	r3, [sp, #0]
    d0f2:	7a5b      	ldrb	r3, [r3, #9]
    d0f4:	461a      	mov	r2, r3
    d0f6:	9803      	ldr	r0, [sp, #12]
    d0f8:	f7ff f92c 	bl	c354 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    d0fc:	9b00      	ldr	r3, [sp, #0]
    d0fe:	7819      	ldrb	r1, [r3, #0]
    d100:	9b00      	ldr	r3, [sp, #0]
    d102:	785b      	ldrb	r3, [r3, #1]
    d104:	461a      	mov	r2, r3
    d106:	9803      	ldr	r0, [sp, #12]
    d108:	f7ff f8fd 	bl	c306 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    d10c:	9b00      	ldr	r3, [sp, #0]
    d10e:	7a1a      	ldrb	r2, [r3, #8]
    d110:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d114:	4619      	mov	r1, r3
    d116:	9803      	ldr	r0, [sp, #12]
    d118:	f7ff fddd 	bl	ccd6 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d11c:	2101      	movs	r1, #1
    d11e:	9803      	ldr	r0, [sp, #12]
    d120:	f7ff f814 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d124:	bf00      	nop
    d126:	b005      	add	sp, #20
    d128:	f85d fb04 	ldr.w	pc, [sp], #4
    d12c:	00016720 	.word	0x00016720
    d130:	1fff8e48 	.word	0x1fff8e48

0000d134 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    d134:	b500      	push	{lr}
    d136:	b085      	sub	sp, #20
    d138:	4603      	mov	r3, r0
    d13a:	460a      	mov	r2, r1
    d13c:	f88d 3007 	strb.w	r3, [sp, #7]
    d140:	4613      	mov	r3, r2
    d142:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d146:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d14a:	4a0a      	ldr	r2, [pc, #40]	; (d174 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    d14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d150:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    d152:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d156:	2200      	movs	r2, #0
    d158:	4619      	mov	r1, r3
    d15a:	9803      	ldr	r0, [sp, #12]
    d15c:	f7fe feed 	bl	bf3a <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    d160:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d164:	4619      	mov	r1, r3
    d166:	9803      	ldr	r0, [sp, #12]
    d168:	f7fe ff0a 	bl	bf80 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    d16c:	bf00      	nop
    d16e:	b005      	add	sp, #20
    d170:	f85d fb04 	ldr.w	pc, [sp], #4
    d174:	00016720 	.word	0x00016720

0000d178 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d178:	b500      	push	{lr}
    d17a:	b085      	sub	sp, #20
    d17c:	4603      	mov	r3, r0
    d17e:	9100      	str	r1, [sp, #0]
    d180:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d184:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d188:	4a53      	ldr	r2, [pc, #332]	; (d2d8 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    d18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d18e:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    d190:	9b00      	ldr	r3, [sp, #0]
    d192:	681b      	ldr	r3, [r3, #0]
    d194:	2b00      	cmp	r3, #0
    d196:	d002      	beq.n	d19e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    d198:	2b01      	cmp	r3, #1
    d19a:	d04c      	beq.n	d236 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    d19c:	e097      	b.n	d2ce <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    d19e:	9b00      	ldr	r3, [sp, #0]
    d1a0:	699b      	ldr	r3, [r3, #24]
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	bf14      	ite	ne
    d1a6:	2301      	movne	r3, #1
    d1a8:	2300      	moveq	r3, #0
    d1aa:	b2db      	uxtb	r3, r3
    d1ac:	4619      	mov	r1, r3
    d1ae:	9803      	ldr	r0, [sp, #12]
    d1b0:	f7ff faa3 	bl	c6fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    d1b4:	2100      	movs	r1, #0
    d1b6:	9803      	ldr	r0, [sp, #12]
    d1b8:	f7ff fb1c 	bl	c7f4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d1bc:	9b00      	ldr	r3, [sp, #0]
    d1be:	691b      	ldr	r3, [r3, #16]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	bf14      	ite	ne
    d1c4:	2301      	movne	r3, #1
    d1c6:	2300      	moveq	r3, #0
    d1c8:	b2db      	uxtb	r3, r3
    d1ca:	4619      	mov	r1, r3
    d1cc:	9803      	ldr	r0, [sp, #12]
    d1ce:	f7ff faad 	bl	c72c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    d1d2:	2100      	movs	r1, #0
    d1d4:	9803      	ldr	r0, [sp, #12]
    d1d6:	f7ff fb26 	bl	c826 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d1da:	9b00      	ldr	r3, [sp, #0]
    d1dc:	695b      	ldr	r3, [r3, #20]
    d1de:	2b00      	cmp	r3, #0
    d1e0:	bf14      	ite	ne
    d1e2:	2301      	movne	r3, #1
    d1e4:	2300      	moveq	r3, #0
    d1e6:	b2db      	uxtb	r3, r3
    d1e8:	4619      	mov	r1, r3
    d1ea:	9803      	ldr	r0, [sp, #12]
    d1ec:	f7ff fab7 	bl	c75e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    d1f0:	2100      	movs	r1, #0
    d1f2:	9803      	ldr	r0, [sp, #12]
    d1f4:	f7ff fb17 	bl	c826 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d1f8:	9b00      	ldr	r3, [sp, #0]
    d1fa:	69db      	ldr	r3, [r3, #28]
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	bf14      	ite	ne
    d200:	2301      	movne	r3, #1
    d202:	2300      	moveq	r3, #0
    d204:	b2db      	uxtb	r3, r3
    d206:	4619      	mov	r1, r3
    d208:	9803      	ldr	r0, [sp, #12]
    d20a:	f7ff fa5d 	bl	c6c8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    d20e:	2100      	movs	r1, #0
    d210:	9803      	ldr	r0, [sp, #12]
    d212:	f7ff fad6 	bl	c7c2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d216:	9b00      	ldr	r3, [sp, #0]
    d218:	6a1b      	ldr	r3, [r3, #32]
    d21a:	2b00      	cmp	r3, #0
    d21c:	bf14      	ite	ne
    d21e:	2301      	movne	r3, #1
    d220:	2300      	moveq	r3, #0
    d222:	b2db      	uxtb	r3, r3
    d224:	4619      	mov	r1, r3
    d226:	9803      	ldr	r0, [sp, #12]
    d228:	f7ff fa35 	bl	c696 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    d22c:	2100      	movs	r1, #0
    d22e:	9803      	ldr	r0, [sp, #12]
    d230:	f7ff faae 	bl	c790 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d234:	e04b      	b.n	d2ce <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    d236:	2100      	movs	r1, #0
    d238:	9803      	ldr	r0, [sp, #12]
    d23a:	f7ff fa5e 	bl	c6fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    d23e:	9b00      	ldr	r3, [sp, #0]
    d240:	699b      	ldr	r3, [r3, #24]
    d242:	2b00      	cmp	r3, #0
    d244:	bf14      	ite	ne
    d246:	2301      	movne	r3, #1
    d248:	2300      	moveq	r3, #0
    d24a:	b2db      	uxtb	r3, r3
    d24c:	4619      	mov	r1, r3
    d24e:	9803      	ldr	r0, [sp, #12]
    d250:	f7ff fad0 	bl	c7f4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d254:	2100      	movs	r1, #0
    d256:	9803      	ldr	r0, [sp, #12]
    d258:	f7ff fa68 	bl	c72c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d25c:	9b00      	ldr	r3, [sp, #0]
    d25e:	691b      	ldr	r3, [r3, #16]
    d260:	2b00      	cmp	r3, #0
    d262:	bf14      	ite	ne
    d264:	2301      	movne	r3, #1
    d266:	2300      	moveq	r3, #0
    d268:	b2db      	uxtb	r3, r3
    d26a:	4619      	mov	r1, r3
    d26c:	9803      	ldr	r0, [sp, #12]
    d26e:	f7ff fada 	bl	c826 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d272:	2100      	movs	r1, #0
    d274:	9803      	ldr	r0, [sp, #12]
    d276:	f7ff fa72 	bl	c75e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d27a:	9b00      	ldr	r3, [sp, #0]
    d27c:	695b      	ldr	r3, [r3, #20]
    d27e:	2b00      	cmp	r3, #0
    d280:	bf14      	ite	ne
    d282:	2301      	movne	r3, #1
    d284:	2300      	moveq	r3, #0
    d286:	b2db      	uxtb	r3, r3
    d288:	4619      	mov	r1, r3
    d28a:	9803      	ldr	r0, [sp, #12]
    d28c:	f7ff facb 	bl	c826 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    d290:	2100      	movs	r1, #0
    d292:	9803      	ldr	r0, [sp, #12]
    d294:	f7ff fa18 	bl	c6c8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d298:	9b00      	ldr	r3, [sp, #0]
    d29a:	69db      	ldr	r3, [r3, #28]
    d29c:	2b00      	cmp	r3, #0
    d29e:	bf14      	ite	ne
    d2a0:	2301      	movne	r3, #1
    d2a2:	2300      	moveq	r3, #0
    d2a4:	b2db      	uxtb	r3, r3
    d2a6:	4619      	mov	r1, r3
    d2a8:	9803      	ldr	r0, [sp, #12]
    d2aa:	f7ff fa8a 	bl	c7c2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    d2ae:	2100      	movs	r1, #0
    d2b0:	9803      	ldr	r0, [sp, #12]
    d2b2:	f7ff f9f0 	bl	c696 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d2b6:	9b00      	ldr	r3, [sp, #0]
    d2b8:	6a1b      	ldr	r3, [r3, #32]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	bf14      	ite	ne
    d2be:	2301      	movne	r3, #1
    d2c0:	2300      	moveq	r3, #0
    d2c2:	b2db      	uxtb	r3, r3
    d2c4:	4619      	mov	r1, r3
    d2c6:	9803      	ldr	r0, [sp, #12]
    d2c8:	f7ff fa62 	bl	c790 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d2cc:	bf00      	nop
    }
}
    d2ce:	bf00      	nop
    d2d0:	b005      	add	sp, #20
    d2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    d2d6:	bf00      	nop
    d2d8:	00016720 	.word	0x00016720

0000d2dc <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d2dc:	b500      	push	{lr}
    d2de:	b085      	sub	sp, #20
    d2e0:	4603      	mov	r3, r0
    d2e2:	9100      	str	r1, [sp, #0]
    d2e4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d2e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2ec:	4a19      	ldr	r2, [pc, #100]	; (d354 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    d2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2f2:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2f4:	9b00      	ldr	r3, [sp, #0]
    d2f6:	699b      	ldr	r3, [r3, #24]
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	bf14      	ite	ne
    d2fc:	2301      	movne	r3, #1
    d2fe:	2300      	moveq	r3, #0
    d300:	b2db      	uxtb	r3, r3
    d302:	4619      	mov	r1, r3
    d304:	9803      	ldr	r0, [sp, #12]
    d306:	f7fe fee6 	bl	c0d6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d30a:	9b00      	ldr	r3, [sp, #0]
    d30c:	691b      	ldr	r3, [r3, #16]
    d30e:	2b00      	cmp	r3, #0
    d310:	bf14      	ite	ne
    d312:	2301      	movne	r3, #1
    d314:	2300      	moveq	r3, #0
    d316:	b2db      	uxtb	r3, r3
    d318:	4619      	mov	r1, r3
    d31a:	9803      	ldr	r0, [sp, #12]
    d31c:	f7ff f973 	bl	c606 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d320:	9b00      	ldr	r3, [sp, #0]
    d322:	695b      	ldr	r3, [r3, #20]
    d324:	2b00      	cmp	r3, #0
    d326:	bf14      	ite	ne
    d328:	2301      	movne	r3, #1
    d32a:	2300      	moveq	r3, #0
    d32c:	b2db      	uxtb	r3, r3
    d32e:	4619      	mov	r1, r3
    d330:	9803      	ldr	r0, [sp, #12]
    d332:	f7ff f980 	bl	c636 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d336:	9b00      	ldr	r3, [sp, #0]
    d338:	69db      	ldr	r3, [r3, #28]
    d33a:	2b00      	cmp	r3, #0
    d33c:	bf14      	ite	ne
    d33e:	2301      	movne	r3, #1
    d340:	2300      	moveq	r3, #0
    d342:	b2db      	uxtb	r3, r3
    d344:	4619      	mov	r1, r3
    d346:	9803      	ldr	r0, [sp, #12]
    d348:	f7ff f945 	bl	c5d6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    d34c:	bf00      	nop
    d34e:	b005      	add	sp, #20
    d350:	f85d fb04 	ldr.w	pc, [sp], #4
    d354:	00016720 	.word	0x00016720

0000d358 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d358:	b500      	push	{lr}
    d35a:	b087      	sub	sp, #28
    d35c:	4603      	mov	r3, r0
    d35e:	9100      	str	r1, [sp, #0]
    d360:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d364:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d368:	4a42      	ldr	r2, [pc, #264]	; (d474 <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    d36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d36e:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    d370:	2300      	movs	r3, #0
    d372:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    d374:	2300      	movs	r3, #0
    d376:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    d37a:	9b00      	ldr	r3, [sp, #0]
    d37c:	791b      	ldrb	r3, [r3, #4]
    d37e:	2b00      	cmp	r3, #0
    d380:	d107      	bne.n	d392 <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d382:	9b00      	ldr	r3, [sp, #0]
    d384:	795b      	ldrb	r3, [r3, #5]
    d386:	2b00      	cmp	r3, #0
    d388:	d103      	bne.n	d392 <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d38a:	9b00      	ldr	r3, [sp, #0]
    d38c:	799b      	ldrb	r3, [r3, #6]
    d38e:	2b00      	cmp	r3, #0
    d390:	d001      	beq.n	d396 <Ftm_Pwm_Ip_UpdateSync+0x3e>
    d392:	2301      	movs	r3, #1
    d394:	e000      	b.n	d398 <Ftm_Pwm_Ip_UpdateSync+0x40>
    d396:	2300      	movs	r3, #0
    d398:	f88d 300f 	strb.w	r3, [sp, #15]
    d39c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d3a0:	f003 0301 	and.w	r3, r3, #1
    d3a4:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    d3a8:	9b00      	ldr	r3, [sp, #0]
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d105      	bne.n	d3bc <Ftm_Pwm_Ip_UpdateSync+0x64>
    d3b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d001      	beq.n	d3bc <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d3b8:	2301      	movs	r3, #1
    d3ba:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    d3bc:	9b00      	ldr	r3, [sp, #0]
    d3be:	6a1b      	ldr	r3, [r3, #32]
    d3c0:	2b02      	cmp	r3, #2
    d3c2:	d101      	bne.n	d3c8 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d3c4:	2301      	movs	r3, #1
    d3c6:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    d3c8:	9b05      	ldr	r3, [sp, #20]
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	d14c      	bne.n	d468 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    d3ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3d2:	9900      	ldr	r1, [sp, #0]
    d3d4:	4618      	mov	r0, r3
    d3d6:	f7ff fecf 	bl	d178 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    d3da:	2101      	movs	r1, #1
    d3dc:	9804      	ldr	r0, [sp, #16]
    d3de:	f7ff f942 	bl	c666 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    d3e2:	9b00      	ldr	r3, [sp, #0]
    d3e4:	791b      	ldrb	r3, [r3, #4]
    d3e6:	461a      	mov	r2, r3
    d3e8:	2100      	movs	r1, #0
    d3ea:	9804      	ldr	r0, [sp, #16]
    d3ec:	f7fe fe89 	bl	c102 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    d3f0:	9b00      	ldr	r3, [sp, #0]
    d3f2:	795b      	ldrb	r3, [r3, #5]
    d3f4:	461a      	mov	r2, r3
    d3f6:	2101      	movs	r1, #1
    d3f8:	9804      	ldr	r0, [sp, #16]
    d3fa:	f7fe fe82 	bl	c102 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    d3fe:	9b00      	ldr	r3, [sp, #0]
    d400:	799b      	ldrb	r3, [r3, #6]
    d402:	461a      	mov	r2, r3
    d404:	2102      	movs	r1, #2
    d406:	9804      	ldr	r0, [sp, #16]
    d408:	f7fe fe7b 	bl	c102 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    d40c:	9b00      	ldr	r3, [sp, #0]
    d40e:	79db      	ldrb	r3, [r3, #7]
    d410:	4619      	mov	r1, r3
    d412:	9804      	ldr	r0, [sp, #16]
    d414:	f7ff f8c7 	bl	c5a6 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    d418:	9b00      	ldr	r3, [sp, #0]
    d41a:	7a1b      	ldrb	r3, [r3, #8]
    d41c:	4619      	mov	r1, r3
    d41e:	9804      	ldr	r0, [sp, #16]
    d420:	f7fe fe43 	bl	c0aa <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    d424:	9b00      	ldr	r3, [sp, #0]
    d426:	7a5b      	ldrb	r3, [r3, #9]
    d428:	4619      	mov	r1, r3
    d42a:	9804      	ldr	r0, [sp, #16]
    d42c:	f7fe fe27 	bl	c07e <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    d430:	9b00      	ldr	r3, [sp, #0]
    d432:	7a9b      	ldrb	r3, [r3, #10]
    d434:	2b00      	cmp	r3, #0
    d436:	d005      	beq.n	d444 <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    d438:	9b00      	ldr	r3, [sp, #0]
    d43a:	899b      	ldrh	r3, [r3, #12]
    d43c:	4619      	mov	r1, r3
    d43e:	9804      	ldr	r0, [sp, #16]
    d440:	f7ff fac6 	bl	c9d0 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    d444:	9b00      	ldr	r3, [sp, #0]
    d446:	7a9b      	ldrb	r3, [r3, #10]
    d448:	4619      	mov	r1, r3
    d44a:	9804      	ldr	r0, [sp, #16]
    d44c:	f7ff faa3 	bl	c996 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    d450:	9b00      	ldr	r3, [sp, #0]
    d452:	7b9b      	ldrb	r3, [r3, #14]
    d454:	4619      	mov	r1, r3
    d456:	9804      	ldr	r0, [sp, #16]
    d458:	f7ff f86b 	bl	c532 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    d45c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d460:	9900      	ldr	r1, [sp, #0]
    d462:	4618      	mov	r0, r3
    d464:	f7ff ff3a 	bl	d2dc <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    d468:	9b05      	ldr	r3, [sp, #20]
}
    d46a:	4618      	mov	r0, r3
    d46c:	b007      	add	sp, #28
    d46e:	f85d fb04 	ldr.w	pc, [sp], #4
    d472:	bf00      	nop
    d474:	00016720 	.word	0x00016720

0000d478 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d478:	b500      	push	{lr}
    d47a:	b085      	sub	sp, #20
    d47c:	4603      	mov	r3, r0
    d47e:	9100      	str	r1, [sp, #0]
    d480:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d488:	4a1f      	ldr	r2, [pc, #124]	; (d508 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    d48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d48e:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    d490:	9803      	ldr	r0, [sp, #12]
    d492:	f7ff fbab 	bl	cbec <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d496:	2100      	movs	r1, #0
    d498:	9803      	ldr	r0, [sp, #12]
    d49a:	f7fe fc01 	bl	bca0 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d49e:	9803      	ldr	r0, [sp, #12]
    d4a0:	f7fe fc4a 	bl	bd38 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    d4a4:	9b00      	ldr	r3, [sp, #0]
    d4a6:	68db      	ldr	r3, [r3, #12]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	bf14      	ite	ne
    d4ac:	2301      	movne	r3, #1
    d4ae:	2300      	moveq	r3, #0
    d4b0:	b2db      	uxtb	r3, r3
    d4b2:	4619      	mov	r1, r3
    d4b4:	9803      	ldr	r0, [sp, #12]
    d4b6:	f7fe fc04 	bl	bcc2 <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    d4ba:	2100      	movs	r1, #0
    d4bc:	9803      	ldr	r0, [sp, #12]
    d4be:	f7fe fdb2 	bl	c026 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    d4c2:	9b00      	ldr	r3, [sp, #0]
    d4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d4c6:	4619      	mov	r1, r3
    d4c8:	9803      	ldr	r0, [sp, #12]
    d4ca:	f7ff f847 	bl	c55c <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    d4ce:	9b00      	ldr	r3, [sp, #0]
    d4d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d4d2:	b2db      	uxtb	r3, r3
    d4d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d4d8:	b2db      	uxtb	r3, r3
    d4da:	4619      	mov	r1, r3
    d4dc:	9803      	ldr	r0, [sp, #12]
    d4de:	f7fe ff87 	bl	c3f0 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    d4e2:	9b00      	ldr	r3, [sp, #0]
    d4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d4e6:	099b      	lsrs	r3, r3, #6
    d4e8:	b29b      	uxth	r3, r3
    d4ea:	b2db      	uxtb	r3, r3
    d4ec:	4619      	mov	r1, r3
    d4ee:	9803      	ldr	r0, [sp, #12]
    d4f0:	f7fe ffa2 	bl	c438 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    d4f4:	9b00      	ldr	r3, [sp, #0]
    d4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d4f8:	4619      	mov	r1, r3
    d4fa:	9803      	ldr	r0, [sp, #12]
    d4fc:	f7fe ff8b 	bl	c416 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    d500:	bf00      	nop
    d502:	b005      	add	sp, #20
    d504:	f85d fb04 	ldr.w	pc, [sp], #4
    d508:	00016720 	.word	0x00016720

0000d50c <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d50c:	b500      	push	{lr}
    d50e:	b085      	sub	sp, #20
    d510:	4603      	mov	r3, r0
    d512:	9100      	str	r1, [sp, #0]
    d514:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d518:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d51c:	4a39      	ldr	r2, [pc, #228]	; (d604 <Ftm_Pwm_Ip_InitInstance+0xf8>)
    d51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d522:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    d524:	4b38      	ldr	r3, [pc, #224]	; (d608 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    d526:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    d528:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d52c:	4619      	mov	r1, r3
    d52e:	9802      	ldr	r0, [sp, #8]
    d530:	f7ff fd20 	bl	cf74 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    d534:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d538:	9900      	ldr	r1, [sp, #0]
    d53a:	4618      	mov	r0, r3
    d53c:	f7ff ff9c 	bl	d478 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    d540:	9b00      	ldr	r3, [sp, #0]
    d542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d544:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d548:	4611      	mov	r1, r2
    d54a:	4618      	mov	r0, r3
    d54c:	f7ff ff04 	bl	d358 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    d550:	2100      	movs	r1, #0
    d552:	9803      	ldr	r0, [sp, #12]
    d554:	f7fe fd56 	bl	c004 <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    d558:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d55c:	9a00      	ldr	r2, [sp, #0]
    d55e:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    d560:	4a2a      	ldr	r2, [pc, #168]	; (d60c <Ftm_Pwm_Ip_InitInstance+0x100>)
    d562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    d566:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d56a:	9a00      	ldr	r2, [sp, #0]
    d56c:	6812      	ldr	r2, [r2, #0]
    d56e:	4928      	ldr	r1, [pc, #160]	; (d610 <Ftm_Pwm_Ip_InitInstance+0x104>)
    d570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    d574:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d578:	9a00      	ldr	r2, [sp, #0]
    d57a:	6852      	ldr	r2, [r2, #4]
    d57c:	4925      	ldr	r1, [pc, #148]	; (d614 <Ftm_Pwm_Ip_InitInstance+0x108>)
    d57e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    d582:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d586:	9a00      	ldr	r2, [sp, #0]
    d588:	6892      	ldr	r2, [r2, #8]
    d58a:	4923      	ldr	r1, [pc, #140]	; (d618 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    d58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    d590:	9b00      	ldr	r3, [sp, #0]
    d592:	7c1b      	ldrb	r3, [r3, #16]
    d594:	2b00      	cmp	r3, #0
    d596:	d00e      	beq.n	d5b6 <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    d598:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d59c:	9a00      	ldr	r2, [sp, #0]
    d59e:	6952      	ldr	r2, [r2, #20]
    d5a0:	491e      	ldr	r1, [pc, #120]	; (d61c <Ftm_Pwm_Ip_InitInstance+0x110>)
    d5a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    d5a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5aa:	9a00      	ldr	r2, [sp, #0]
    d5ac:	6992      	ldr	r2, [r2, #24]
    d5ae:	491b      	ldr	r1, [pc, #108]	; (d61c <Ftm_Pwm_Ip_InitInstance+0x110>)
    d5b0:	00db      	lsls	r3, r3, #3
    d5b2:	440b      	add	r3, r1
    d5b4:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    d5b6:	9b00      	ldr	r3, [sp, #0]
    d5b8:	68db      	ldr	r3, [r3, #12]
    d5ba:	2b01      	cmp	r3, #1
    d5bc:	d108      	bne.n	d5d0 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    d5be:	9b00      	ldr	r3, [sp, #0]
    d5c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d5c2:	085b      	lsrs	r3, r3, #1
    d5c4:	b29b      	uxth	r3, r3
    d5c6:	4619      	mov	r1, r3
    d5c8:	9803      	ldr	r0, [sp, #12]
    d5ca:	f7fe fbe3 	bl	bd94 <Ftm_Pwm_Ip_SetMod>
    d5ce:	e007      	b.n	d5e0 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    d5d0:	9b00      	ldr	r3, [sp, #0]
    d5d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d5d4:	3b01      	subs	r3, #1
    d5d6:	b29b      	uxth	r3, r3
    d5d8:	4619      	mov	r1, r3
    d5da:	9803      	ldr	r0, [sp, #12]
    d5dc:	f7fe fbda 	bl	bd94 <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    d5e0:	9b00      	ldr	r3, [sp, #0]
    d5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    d5e6:	4619      	mov	r1, r3
    d5e8:	9803      	ldr	r0, [sp, #12]
    d5ea:	f7fe ff39 	bl	c460 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    d5ee:	9b00      	ldr	r3, [sp, #0]
    d5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d5f2:	4619      	mov	r1, r3
    d5f4:	9803      	ldr	r0, [sp, #12]
    d5f6:	f7fe ffc3 	bl	c580 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    d5fa:	bf00      	nop
    d5fc:	b005      	add	sp, #20
    d5fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d602:	bf00      	nop
    d604:	00016720 	.word	0x00016720
    d608:	40048000 	.word	0x40048000
    d60c:	1fff8e00 	.word	0x1fff8e00
    d610:	1fff90f8 	.word	0x1fff90f8
    d614:	1fff9108 	.word	0x1fff9108
    d618:	1fff9118 	.word	0x1fff9118
    d61c:	1fff8fa8 	.word	0x1fff8fa8

0000d620 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d620:	b500      	push	{lr}
    d622:	b085      	sub	sp, #20
    d624:	4603      	mov	r3, r0
    d626:	9100      	str	r1, [sp, #0]
    d628:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d62c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d630:	4a1a      	ldr	r2, [pc, #104]	; (d69c <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    d632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d636:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    d638:	9b00      	ldr	r3, [sp, #0]
    d63a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d63e:	4619      	mov	r1, r3
    d640:	9803      	ldr	r0, [sp, #12]
    d642:	f7ff fc03 	bl	ce4c <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    d646:	9b00      	ldr	r3, [sp, #0]
    d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d64a:	4619      	mov	r1, r3
    d64c:	9803      	ldr	r0, [sp, #12]
    d64e:	f7ff fc11 	bl	ce74 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    d652:	9b00      	ldr	r3, [sp, #0]
    d654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d656:	4619      	mov	r1, r3
    d658:	9803      	ldr	r0, [sp, #12]
    d65a:	f7ff fb7a 	bl	cd52 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    d65e:	2101      	movs	r1, #1
    d660:	9803      	ldr	r0, [sp, #12]
    d662:	f7fe fce0 	bl	c026 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    d666:	2101      	movs	r1, #1
    d668:	9803      	ldr	r0, [sp, #12]
    d66a:	f7fe fcf2 	bl	c052 <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    d66e:	9b00      	ldr	r3, [sp, #0]
    d670:	685b      	ldr	r3, [r3, #4]
    d672:	4619      	mov	r1, r3
    d674:	9803      	ldr	r0, [sp, #12]
    d676:	f7fe fb03 	bl	bc80 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    d67a:	9b00      	ldr	r3, [sp, #0]
    d67c:	681b      	ldr	r3, [r3, #0]
    d67e:	4619      	mov	r1, r3
    d680:	9803      	ldr	r0, [sp, #12]
    d682:	f7fe fb0d 	bl	bca0 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d686:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d68a:	4a05      	ldr	r2, [pc, #20]	; (d6a0 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    d68c:	2101      	movs	r1, #1
    d68e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    d692:	bf00      	nop
    d694:	b005      	add	sp, #20
    d696:	f85d fb04 	ldr.w	pc, [sp], #4
    d69a:	bf00      	nop
    d69c:	00016720 	.word	0x00016720
    d6a0:	1fff8fc8 	.word	0x1fff8fc8

0000d6a4 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d6a4:	b500      	push	{lr}
    d6a6:	b085      	sub	sp, #20
    d6a8:	4603      	mov	r3, r0
    d6aa:	9100      	str	r1, [sp, #0]
    d6ac:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d6b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6b4:	4a37      	ldr	r2, [pc, #220]	; (d794 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    d6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6ba:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d6bc:	2300      	movs	r3, #0
    d6be:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    d6c2:	2300      	movs	r3, #0
    d6c4:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d6c8:	9b00      	ldr	r3, [sp, #0]
    d6ca:	781b      	ldrb	r3, [r3, #0]
    d6cc:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    d6d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6d4:	085b      	lsrs	r3, r3, #1
    d6d6:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    d6da:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6de:	2201      	movs	r2, #1
    d6e0:	4619      	mov	r1, r3
    d6e2:	9803      	ldr	r0, [sp, #12]
    d6e4:	f7fe fe36 	bl	c354 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    d6e8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6ec:	2201      	movs	r2, #1
    d6ee:	4619      	mov	r1, r3
    d6f0:	9803      	ldr	r0, [sp, #12]
    d6f2:	f7ff fb63 	bl	cdbc <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6f6:	9b00      	ldr	r3, [sp, #0]
    d6f8:	685b      	ldr	r3, [r3, #4]
    d6fa:	2b22      	cmp	r3, #34	; 0x22
    d6fc:	d003      	beq.n	d706 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    d6fe:	9b00      	ldr	r3, [sp, #0]
    d700:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d702:	2b21      	cmp	r3, #33	; 0x21
    d704:	d113      	bne.n	d72e <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d706:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d70a:	005b      	lsls	r3, r3, #1
    d70c:	b2db      	uxtb	r3, r3
    d70e:	3301      	adds	r3, #1
    d710:	b2d9      	uxtb	r1, r3
    d712:	9b00      	ldr	r3, [sp, #0]
    d714:	685b      	ldr	r3, [r3, #4]
    d716:	461a      	mov	r2, r3
    d718:	9803      	ldr	r0, [sp, #12]
    d71a:	f7fe fb76 	bl	be0a <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d71e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d722:	2201      	movs	r2, #1
    d724:	4619      	mov	r1, r3
    d726:	9803      	ldr	r0, [sp, #12]
    d728:	f7fe fd89 	bl	c23e <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    d72c:	e021      	b.n	d772 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d72e:	9b00      	ldr	r3, [sp, #0]
    d730:	685b      	ldr	r3, [r3, #4]
    d732:	2b62      	cmp	r3, #98	; 0x62
    d734:	d003      	beq.n	d73e <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    d736:	9b00      	ldr	r3, [sp, #0]
    d738:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d73a:	2b61      	cmp	r3, #97	; 0x61
    d73c:	d119      	bne.n	d772 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d73e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d742:	005b      	lsls	r3, r3, #1
    d744:	b2db      	uxtb	r3, r3
    d746:	3301      	adds	r3, #1
    d748:	b2d9      	uxtb	r1, r3
    d74a:	9b00      	ldr	r3, [sp, #0]
    d74c:	685b      	ldr	r3, [r3, #4]
    d74e:	461a      	mov	r2, r3
    d750:	9803      	ldr	r0, [sp, #12]
    d752:	f7fe fb5a 	bl	be0a <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d756:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d75a:	2201      	movs	r2, #1
    d75c:	4619      	mov	r1, r3
    d75e:	9803      	ldr	r0, [sp, #12]
    d760:	f7fe fd6d 	bl	c23e <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    d764:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d768:	2201      	movs	r2, #1
    d76a:	4619      	mov	r1, r3
    d76c:	9803      	ldr	r0, [sp, #12]
    d76e:	f7fe fe18 	bl	c3a2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    d772:	9b00      	ldr	r3, [sp, #0]
    d774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d776:	2b00      	cmp	r3, #0
    d778:	d007      	beq.n	d78a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    d77a:	9b00      	ldr	r3, [sp, #0]
    d77c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d77e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d782:	4611      	mov	r1, r2
    d784:	4618      	mov	r0, r3
    d786:	f7ff fc47 	bl	d018 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    d78a:	bf00      	nop
    d78c:	b005      	add	sp, #20
    d78e:	f85d fb04 	ldr.w	pc, [sp], #4
    d792:	bf00      	nop
    d794:	00016720 	.word	0x00016720

0000d798 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d798:	b500      	push	{lr}
    d79a:	b085      	sub	sp, #20
    d79c:	4603      	mov	r3, r0
    d79e:	9100      	str	r1, [sp, #0]
    d7a0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d7a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7a8:	4a15      	ldr	r2, [pc, #84]	; (d800 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    d7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ae:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    d7b0:	9b00      	ldr	r3, [sp, #0]
    d7b2:	7819      	ldrb	r1, [r3, #0]
    d7b4:	9b00      	ldr	r3, [sp, #0]
    d7b6:	7ddb      	ldrb	r3, [r3, #23]
    d7b8:	461a      	mov	r2, r3
    d7ba:	9803      	ldr	r0, [sp, #12]
    d7bc:	f7ff fa8b 	bl	ccd6 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    d7c0:	9b00      	ldr	r3, [sp, #0]
    d7c2:	7819      	ldrb	r1, [r3, #0]
    d7c4:	9b00      	ldr	r3, [sp, #0]
    d7c6:	7e1b      	ldrb	r3, [r3, #24]
    d7c8:	461a      	mov	r2, r3
    d7ca:	9803      	ldr	r0, [sp, #12]
    d7cc:	f7ff f8ba 	bl	c944 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    d7d0:	9b00      	ldr	r3, [sp, #0]
    d7d2:	7819      	ldrb	r1, [r3, #0]
    d7d4:	9b00      	ldr	r3, [sp, #0]
    d7d6:	7d5b      	ldrb	r3, [r3, #21]
    d7d8:	461a      	mov	r2, r3
    d7da:	9803      	ldr	r0, [sp, #12]
    d7dc:	f7ff f87c 	bl	c8d8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    d7e0:	9b00      	ldr	r3, [sp, #0]
    d7e2:	7819      	ldrb	r1, [r3, #0]
    d7e4:	9b00      	ldr	r3, [sp, #0]
    d7e6:	7d9b      	ldrb	r3, [r3, #22]
    d7e8:	461a      	mov	r2, r3
    d7ea:	9803      	ldr	r0, [sp, #12]
    d7ec:	f7ff f834 	bl	c858 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d7f0:	2101      	movs	r1, #1
    d7f2:	9803      	ldr	r0, [sp, #12]
    d7f4:	f7fe fcaa 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d7f8:	bf00      	nop
    d7fa:	b005      	add	sp, #20
    d7fc:	f85d fb04 	ldr.w	pc, [sp], #4
    d800:	00016720 	.word	0x00016720

0000d804 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d804:	b500      	push	{lr}
    d806:	b085      	sub	sp, #20
    d808:	4603      	mov	r3, r0
    d80a:	9100      	str	r1, [sp, #0]
    d80c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d810:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d814:	4a48      	ldr	r2, [pc, #288]	; (d938 <Ftm_Pwm_Ip_InitChannel+0x134>)
    d816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81a:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d81c:	2300      	movs	r3, #0
    d81e:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d822:	9b00      	ldr	r3, [sp, #0]
    d824:	781b      	ldrb	r3, [r3, #0]
    d826:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    d82a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d82e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d832:	9900      	ldr	r1, [sp, #0]
    d834:	8b48      	ldrh	r0, [r1, #26]
    d836:	4941      	ldr	r1, [pc, #260]	; (d93c <Ftm_Pwm_Ip_InitChannel+0x138>)
    d838:	00d2      	lsls	r2, r2, #3
    d83a:	4413      	add	r3, r2
    d83c:	4602      	mov	r2, r0
    d83e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    d842:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d846:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d84a:	9a00      	ldr	r2, [sp, #0]
    d84c:	69d2      	ldr	r2, [r2, #28]
    d84e:	483c      	ldr	r0, [pc, #240]	; (d940 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    d850:	00c9      	lsls	r1, r1, #3
    d852:	440b      	add	r3, r1
    d854:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    d858:	9b00      	ldr	r3, [sp, #0]
    d85a:	6a1a      	ldr	r2, [r3, #32]
    d85c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d860:	4619      	mov	r1, r3
    d862:	9803      	ldr	r0, [sp, #12]
    d864:	f7fe fe2e 	bl	c4c4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    d868:	9b00      	ldr	r3, [sp, #0]
    d86a:	69da      	ldr	r2, [r3, #28]
    d86c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d870:	4619      	mov	r1, r3
    d872:	9803      	ldr	r0, [sp, #12]
    d874:	f7fe fc80 	bl	c178 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d878:	9b00      	ldr	r3, [sp, #0]
    d87a:	685a      	ldr	r2, [r3, #4]
    d87c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d880:	4619      	mov	r1, r3
    d882:	9803      	ldr	r0, [sp, #12]
    d884:	f7fe fac1 	bl	be0a <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d888:	9b00      	ldr	r3, [sp, #0]
    d88a:	685a      	ldr	r2, [r3, #4]
    d88c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d890:	4619      	mov	r1, r3
    d892:	9803      	ldr	r0, [sp, #12]
    d894:	f7fe faf0 	bl	be78 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    d898:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d89c:	9900      	ldr	r1, [sp, #0]
    d89e:	4618      	mov	r0, r3
    d8a0:	f7ff ff00 	bl	d6a4 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    d8a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d8a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8ac:	4923      	ldr	r1, [pc, #140]	; (d93c <Ftm_Pwm_Ip_InitChannel+0x138>)
    d8ae:	00d2      	lsls	r2, r2, #3
    d8b0:	4413      	add	r3, r2
    d8b2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    d8b6:	f89d 100b 	ldrb.w	r1, [sp, #11]
    d8ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d8be:	2301      	movs	r3, #1
    d8c0:	f000 f9c0 	bl	dc44 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    d8c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8c8:	9900      	ldr	r1, [sp, #0]
    d8ca:	4618      	mov	r0, r3
    d8cc:	f7ff ff64 	bl	d798 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    d8d0:	9b00      	ldr	r3, [sp, #0]
    d8d2:	7d1b      	ldrb	r3, [r3, #20]
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	d005      	beq.n	d8e4 <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    d8d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8dc:	4619      	mov	r1, r3
    d8de:	9803      	ldr	r0, [sp, #12]
    d8e0:	f7fe fa35 	bl	bd4e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d8e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d8e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8ec:	4915      	ldr	r1, [pc, #84]	; (d944 <Ftm_Pwm_Ip_InitChannel+0x140>)
    d8ee:	00d2      	lsls	r2, r2, #3
    d8f0:	4413      	add	r3, r2
    d8f2:	2201      	movs	r2, #1
    d8f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    d8f8:	9b00      	ldr	r3, [sp, #0]
    d8fa:	7a1b      	ldrb	r3, [r3, #8]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d016      	beq.n	d92e <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    d900:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d904:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d908:	9a00      	ldr	r2, [sp, #0]
    d90a:	68d2      	ldr	r2, [r2, #12]
    d90c:	480e      	ldr	r0, [pc, #56]	; (d948 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d90e:	00c9      	lsls	r1, r1, #3
    d910:	440b      	add	r3, r1
    d912:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    d916:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d91a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d91e:	9a00      	ldr	r2, [sp, #0]
    d920:	6912      	ldr	r2, [r2, #16]
    d922:	4809      	ldr	r0, [pc, #36]	; (d948 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d924:	00c9      	lsls	r1, r1, #3
    d926:	440b      	add	r3, r1
    d928:	00db      	lsls	r3, r3, #3
    d92a:	4403      	add	r3, r0
    d92c:	605a      	str	r2, [r3, #4]
    }

}
    d92e:	bf00      	nop
    d930:	b005      	add	sp, #20
    d932:	f85d fb04 	ldr.w	pc, [sp], #4
    d936:	bf00      	nop
    d938:	00016720 	.word	0x00016720
    d93c:	1fff8e08 	.word	0x1fff8e08
    d940:	1fff9078 	.word	0x1fff9078
    d944:	1fff8fd8 	.word	0x1fff8fd8
    d948:	1fff8ea8 	.word	0x1fff8ea8

0000d94c <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    d94c:	b500      	push	{lr}
    d94e:	b085      	sub	sp, #20
    d950:	4603      	mov	r3, r0
    d952:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d956:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d95a:	4a17      	ldr	r2, [pc, #92]	; (d9b8 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    d95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d960:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d962:	2100      	movs	r1, #0
    d964:	9803      	ldr	r0, [sp, #12]
    d966:	f7fe f99b 	bl	bca0 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    d96a:	2100      	movs	r1, #0
    d96c:	9803      	ldr	r0, [sp, #12]
    d96e:	f7fe fd63 	bl	c438 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    d972:	2101      	movs	r1, #1
    d974:	9803      	ldr	r0, [sp, #12]
    d976:	f7fe fd4e 	bl	c416 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    d97a:	2100      	movs	r1, #0
    d97c:	9803      	ldr	r0, [sp, #12]
    d97e:	f7fe fd37 	bl	c3f0 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    d982:	2100      	movs	r1, #0
    d984:	9803      	ldr	r0, [sp, #12]
    d986:	f7fe fde9 	bl	c55c <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    d98a:	2100      	movs	r1, #0
    d98c:	9803      	ldr	r0, [sp, #12]
    d98e:	f7fe f9bc 	bl	bd0a <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    d992:	2100      	movs	r1, #0
    d994:	9803      	ldr	r0, [sp, #12]
    d996:	f7fe f9fd 	bl	bd94 <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    d99a:	2100      	movs	r1, #0
    d99c:	9803      	ldr	r0, [sp, #12]
    d99e:	f7fe f9e8 	bl	bd72 <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    d9a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9a6:	4a05      	ldr	r2, [pc, #20]	; (d9bc <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    d9a8:	2100      	movs	r1, #0
    d9aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    d9ae:	bf00      	nop
    d9b0:	b005      	add	sp, #20
    d9b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d9b6:	bf00      	nop
    d9b8:	00016720 	.word	0x00016720
    d9bc:	1fff8fc8 	.word	0x1fff8fc8

0000d9c0 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    d9c0:	b500      	push	{lr}
    d9c2:	b085      	sub	sp, #20
    d9c4:	4603      	mov	r3, r0
    d9c6:	460a      	mov	r2, r1
    d9c8:	f88d 3007 	strb.w	r3, [sp, #7]
    d9cc:	4613      	mov	r3, r2
    d9ce:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d9d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9d6:	4a29      	ldr	r2, [pc, #164]	; (da7c <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    d9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9dc:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    d9de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9e2:	085b      	lsrs	r3, r3, #1
    d9e4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    d9e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d9ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9f0:	4611      	mov	r1, r2
    d9f2:	4618      	mov	r0, r3
    d9f4:	f7ff fb9e 	bl	d134 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    d9f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d9fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da00:	491f      	ldr	r1, [pc, #124]	; (da80 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    da02:	00d2      	lsls	r2, r2, #3
    da04:	4413      	add	r3, r2
    da06:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    da0a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    da0e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    da12:	2301      	movs	r3, #1
    da14:	f000 fa4c 	bl	deb0 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    da18:	2100      	movs	r1, #0
    da1a:	9803      	ldr	r0, [sp, #12]
    da1c:	f7fe fb96 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    da20:	2101      	movs	r1, #1
    da22:	9803      	ldr	r0, [sp, #12]
    da24:	f7fe fb57 	bl	c0d6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    da28:	2101      	movs	r1, #1
    da2a:	9803      	ldr	r0, [sp, #12]
    da2c:	f7fe fe65 	bl	c6fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    da30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    da34:	2200      	movs	r2, #0
    da36:	4619      	mov	r1, r3
    da38:	9803      	ldr	r0, [sp, #12]
    da3a:	f7fe fbbf 	bl	c1bc <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    da3e:	2101      	movs	r1, #1
    da40:	9803      	ldr	r0, [sp, #12]
    da42:	f7fe fb83 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    da46:	f89d 2007 	ldrb.w	r2, [sp, #7]
    da4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    da4e:	005b      	lsls	r3, r3, #1
    da50:	490c      	ldr	r1, [pc, #48]	; (da84 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    da52:	00d2      	lsls	r2, r2, #3
    da54:	440a      	add	r2, r1
    da56:	4413      	add	r3, r2
    da58:	2200      	movs	r2, #0
    da5a:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    da5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    da60:	f89d 300b 	ldrb.w	r3, [sp, #11]
    da64:	005b      	lsls	r3, r3, #1
    da66:	3301      	adds	r3, #1
    da68:	4906      	ldr	r1, [pc, #24]	; (da84 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    da6a:	00d2      	lsls	r2, r2, #3
    da6c:	440a      	add	r2, r1
    da6e:	4413      	add	r3, r2
    da70:	2200      	movs	r2, #0
    da72:	701a      	strb	r2, [r3, #0]

}
    da74:	bf00      	nop
    da76:	b005      	add	sp, #20
    da78:	f85d fb04 	ldr.w	pc, [sp], #4
    da7c:	00016720 	.word	0x00016720
    da80:	1fff9078 	.word	0x1fff9078
    da84:	1fff9058 	.word	0x1fff9058

0000da88 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    da88:	b500      	push	{lr}
    da8a:	b085      	sub	sp, #20
    da8c:	4603      	mov	r3, r0
    da8e:	9100      	str	r1, [sp, #0]
    da90:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    da94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da98:	4a15      	ldr	r2, [pc, #84]	; (daf0 <Ftm_Pwm_Ip_InitChFault+0x68>)
    da9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9e:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    daa0:	9b00      	ldr	r3, [sp, #0]
    daa2:	7819      	ldrb	r1, [r3, #0]
    daa4:	9b00      	ldr	r3, [sp, #0]
    daa6:	685b      	ldr	r3, [r3, #4]
    daa8:	461a      	mov	r2, r3
    daaa:	9803      	ldr	r0, [sp, #12]
    daac:	f7ff f9f6 	bl	ce9c <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    dab0:	9b00      	ldr	r3, [sp, #0]
    dab2:	7819      	ldrb	r1, [r3, #0]
    dab4:	9b00      	ldr	r3, [sp, #0]
    dab6:	7a1b      	ldrb	r3, [r3, #8]
    dab8:	461a      	mov	r2, r3
    daba:	9803      	ldr	r0, [sp, #12]
    dabc:	f7ff fa35 	bl	cf2a <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    dac0:	9b00      	ldr	r3, [sp, #0]
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	2201      	movs	r2, #1
    dac6:	4619      	mov	r1, r3
    dac8:	9803      	ldr	r0, [sp, #12]
    daca:	f7ff fa0a 	bl	cee2 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    dace:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dad2:	9a00      	ldr	r2, [sp, #0]
    dad4:	7812      	ldrb	r2, [r2, #0]
    dad6:	4610      	mov	r0, r2
    dad8:	9a00      	ldr	r2, [sp, #0]
    dada:	68d2      	ldr	r2, [r2, #12]
    dadc:	4905      	ldr	r1, [pc, #20]	; (daf4 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    dade:	009b      	lsls	r3, r3, #2
    dae0:	4403      	add	r3, r0
    dae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dae6:	bf00      	nop
    dae8:	b005      	add	sp, #20
    daea:	f85d fb04 	ldr.w	pc, [sp], #4
    daee:	bf00      	nop
    daf0:	00016720 	.word	0x00016720
    daf4:	1fff8e68 	.word	0x1fff8e68

0000daf8 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    daf8:	b500      	push	{lr}
    dafa:	b085      	sub	sp, #20
    dafc:	4603      	mov	r3, r0
    dafe:	9100      	str	r1, [sp, #0]
    db00:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    db04:	2300      	movs	r3, #0
    db06:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    db0a:	4b29      	ldr	r3, [pc, #164]	; (dbb0 <Ftm_Pwm_Ip_Init+0xb8>)
    db0c:	2200      	movs	r2, #0
    db0e:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    db10:	9b00      	ldr	r3, [sp, #0]
    db12:	681a      	ldr	r2, [r3, #0]
    db14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db18:	4611      	mov	r1, r2
    db1a:	4618      	mov	r0, r3
    db1c:	f7ff fcf6 	bl	d50c <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    db20:	2300      	movs	r3, #0
    db22:	f88d 300f 	strb.w	r3, [sp, #15]
    db26:	e011      	b.n	db4c <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    db28:	9b00      	ldr	r3, [sp, #0]
    db2a:	685a      	ldr	r2, [r3, #4]
    db2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db30:	009b      	lsls	r3, r3, #2
    db32:	4413      	add	r3, r2
    db34:	681a      	ldr	r2, [r3, #0]
    db36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db3a:	4611      	mov	r1, r2
    db3c:	4618      	mov	r0, r3
    db3e:	f7ff fe61 	bl	d804 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    db42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db46:	3301      	adds	r3, #1
    db48:	f88d 300f 	strb.w	r3, [sp, #15]
    db4c:	9b00      	ldr	r3, [sp, #0]
    db4e:	7a1b      	ldrb	r3, [r3, #8]
    db50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db54:	429a      	cmp	r2, r3
    db56:	d3e7      	bcc.n	db28 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    db58:	9b00      	ldr	r3, [sp, #0]
    db5a:	7c1b      	ldrb	r3, [r3, #16]
    db5c:	2b00      	cmp	r3, #0
    db5e:	d01b      	beq.n	db98 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    db60:	2300      	movs	r3, #0
    db62:	f88d 300f 	strb.w	r3, [sp, #15]
    db66:	e011      	b.n	db8c <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    db68:	9b00      	ldr	r3, [sp, #0]
    db6a:	68da      	ldr	r2, [r3, #12]
    db6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db70:	009b      	lsls	r3, r3, #2
    db72:	4413      	add	r3, r2
    db74:	681a      	ldr	r2, [r3, #0]
    db76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db7a:	4611      	mov	r1, r2
    db7c:	4618      	mov	r0, r3
    db7e:	f7ff ff83 	bl	da88 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    db82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db86:	3301      	adds	r3, #1
    db88:	f88d 300f 	strb.w	r3, [sp, #15]
    db8c:	9b00      	ldr	r3, [sp, #0]
    db8e:	7c1b      	ldrb	r3, [r3, #16]
    db90:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db94:	429a      	cmp	r2, r3
    db96:	d3e7      	bcc.n	db68 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    db98:	9b00      	ldr	r3, [sp, #0]
    db9a:	681a      	ldr	r2, [r3, #0]
    db9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dba0:	4611      	mov	r1, r2
    dba2:	4618      	mov	r0, r3
    dba4:	f7ff fd3c 	bl	d620 <Ftm_Pwm_Ip_InitInstanceStart>
}
    dba8:	bf00      	nop
    dbaa:	b005      	add	sp, #20
    dbac:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb0:	1fff8dfc 	.word	0x1fff8dfc

0000dbb4 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    dbb4:	b500      	push	{lr}
    dbb6:	b085      	sub	sp, #20
    dbb8:	4603      	mov	r3, r0
    dbba:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dbbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbc2:	4a1e      	ldr	r2, [pc, #120]	; (dc3c <Ftm_Pwm_Ip_DeInit+0x88>)
    dbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbc8:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    dbca:	2300      	movs	r3, #0
    dbcc:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    dbd0:	9802      	ldr	r0, [sp, #8]
    dbd2:	f7ff f80b 	bl	cbec <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    dbd6:	2300      	movs	r3, #0
    dbd8:	f88d 300f 	strb.w	r3, [sp, #15]
    dbdc:	e021      	b.n	dc22 <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    dbde:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dbe2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbe6:	4916      	ldr	r1, [pc, #88]	; (dc40 <Ftm_Pwm_Ip_DeInit+0x8c>)
    dbe8:	00d2      	lsls	r2, r2, #3
    dbea:	4413      	add	r3, r2
    dbec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	d011      	beq.n	dc18 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    dbf4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dbf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbfc:	4611      	mov	r1, r2
    dbfe:	4618      	mov	r0, r3
    dc00:	f7ff fede 	bl	d9c0 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    dc04:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dc08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc0c:	490c      	ldr	r1, [pc, #48]	; (dc40 <Ftm_Pwm_Ip_DeInit+0x8c>)
    dc0e:	00d2      	lsls	r2, r2, #3
    dc10:	4413      	add	r3, r2
    dc12:	2200      	movs	r2, #0
    dc14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    dc18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc1c:	3301      	adds	r3, #1
    dc1e:	f88d 300f 	strb.w	r3, [sp, #15]
    dc22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc26:	2b07      	cmp	r3, #7
    dc28:	d9d9      	bls.n	dbde <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    dc2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc2e:	4618      	mov	r0, r3
    dc30:	f7ff fe8c 	bl	d94c <Ftm_Pwm_Ip_DeInitInstance>
}
    dc34:	bf00      	nop
    dc36:	b005      	add	sp, #20
    dc38:	f85d fb04 	ldr.w	pc, [sp], #4
    dc3c:	00016720 	.word	0x00016720
    dc40:	1fff8fd8 	.word	0x1fff8fd8

0000dc44 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    dc44:	b510      	push	{r4, lr}
    dc46:	b088      	sub	sp, #32
    dc48:	4604      	mov	r4, r0
    dc4a:	4608      	mov	r0, r1
    dc4c:	4611      	mov	r1, r2
    dc4e:	461a      	mov	r2, r3
    dc50:	4623      	mov	r3, r4
    dc52:	f88d 300f 	strb.w	r3, [sp, #15]
    dc56:	4603      	mov	r3, r0
    dc58:	f88d 300e 	strb.w	r3, [sp, #14]
    dc5c:	460b      	mov	r3, r1
    dc5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    dc62:	4613      	mov	r3, r2
    dc64:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dc68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc6c:	4a54      	ldr	r2, [pc, #336]	; (ddc0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    dc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc72:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    dc74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    dc78:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    dc7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc80:	085b      	lsrs	r3, r3, #1
    dc82:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    dc86:	f006 fc07 	bl	14498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    dc8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc92:	494c      	ldr	r1, [pc, #304]	; (ddc4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    dc94:	00d2      	lsls	r2, r2, #3
    dc96:	4413      	add	r3, r2
    dc98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    dc9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    dca0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dca4:	4619      	mov	r1, r3
    dca6:	9807      	ldr	r0, [sp, #28]
    dca8:	f7fe feb0 	bl	ca0c <Ftm_Pwm_Ip_GetChannelMode>
    dcac:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dcae:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dcb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dcb6:	4944      	ldr	r1, [pc, #272]	; (ddc8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    dcb8:	00d2      	lsls	r2, r2, #3
    dcba:	4413      	add	r3, r2
    dcbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dcc0:	2b02      	cmp	r3, #2
    dcc2:	d111      	bne.n	dce8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dcc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dcc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dccc:	493e      	ldr	r1, [pc, #248]	; (ddc8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    dcce:	00d2      	lsls	r2, r2, #3
    dcd0:	4413      	add	r3, r2
    dcd2:	2201      	movs	r2, #1
    dcd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    dcd8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dcdc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dce0:	2300      	movs	r3, #0
    dce2:	2200      	movs	r2, #0
    dce4:	f000 f8e4 	bl	deb0 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    dce8:	9b05      	ldr	r3, [sp, #20]
    dcea:	2b0a      	cmp	r3, #10
    dcec:	d008      	beq.n	dd00 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    dcee:	9b05      	ldr	r3, [sp, #20]
    dcf0:	2b09      	cmp	r3, #9
    dcf2:	d005      	beq.n	dd00 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    dcf4:	9b05      	ldr	r3, [sp, #20]
    dcf6:	2b12      	cmp	r3, #18
    dcf8:	d002      	beq.n	dd00 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    dcfa:	9b05      	ldr	r3, [sp, #20]
    dcfc:	2b11      	cmp	r3, #17
    dcfe:	d10c      	bne.n	dd1a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd00:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dd04:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dd08:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dd0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd10:	9300      	str	r3, [sp, #0]
    dd12:	2300      	movs	r3, #0
    dd14:	f000 f992 	bl	e03c <Ftm_Pwm_Ip_UpdatePwmChannel>
    dd18:	e04c      	b.n	ddb4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    dd1a:	9b05      	ldr	r3, [sp, #20]
    dd1c:	2b22      	cmp	r3, #34	; 0x22
    dd1e:	d008      	beq.n	dd32 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    dd20:	9b05      	ldr	r3, [sp, #20]
    dd22:	2b62      	cmp	r3, #98	; 0x62
    dd24:	d005      	beq.n	dd32 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    dd26:	9b05      	ldr	r3, [sp, #20]
    dd28:	2b61      	cmp	r3, #97	; 0x61
    dd2a:	d002      	beq.n	dd32 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    dd2c:	9b05      	ldr	r3, [sp, #20]
    dd2e:	2b21      	cmp	r3, #33	; 0x21
    dd30:	d140      	bne.n	ddb4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    dd32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd36:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd3a:	4924      	ldr	r1, [pc, #144]	; (ddcc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd3c:	0092      	lsls	r2, r2, #2
    dd3e:	4413      	add	r3, r2
    dd40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d10d      	bne.n	dd64 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dd4c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dd50:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dd54:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd58:	9300      	str	r3, [sp, #0]
    dd5a:	4613      	mov	r3, r2
    dd5c:	2200      	movs	r2, #0
    dd5e:	f000 f96d 	bl	e03c <Ftm_Pwm_Ip_UpdatePwmChannel>
    dd62:	e027      	b.n	ddb4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    dd64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd68:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd6c:	4917      	ldr	r1, [pc, #92]	; (ddcc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd6e:	0092      	lsls	r2, r2, #2
    dd70:	4413      	add	r3, r2
    dd72:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    dd76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    dd7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd7e:	4618      	mov	r0, r3
    dd80:	f7ff f90a 	bl	cf98 <Ftm_Pwm_Ip_CalculatePhaseShift>
    dd84:	4603      	mov	r3, r0
    dd86:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd92:	490e      	ldr	r1, [pc, #56]	; (ddcc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd94:	0092      	lsls	r2, r2, #2
    dd96:	4413      	add	r3, r2
    dd98:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    dd9c:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    dda0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dda4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dda8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ddac:	9300      	str	r3, [sp, #0]
    ddae:	4623      	mov	r3, r4
    ddb0:	f000 f944 	bl	e03c <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    ddb4:	f006 fb9c 	bl	144f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    ddb8:	bf00      	nop
    ddba:	b008      	add	sp, #32
    ddbc:	bd10      	pop	{r4, pc}
    ddbe:	bf00      	nop
    ddc0:	00016720 	.word	0x00016720
    ddc4:	1fff8e08 	.word	0x1fff8e08
    ddc8:	1fff8fd8 	.word	0x1fff8fd8
    ddcc:	1fff8e48 	.word	0x1fff8e48

0000ddd0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    ddd0:	b510      	push	{r4, lr}
    ddd2:	b084      	sub	sp, #16
    ddd4:	4604      	mov	r4, r0
    ddd6:	4608      	mov	r0, r1
    ddd8:	4611      	mov	r1, r2
    ddda:	461a      	mov	r2, r3
    dddc:	4623      	mov	r3, r4
    ddde:	f88d 3007 	strb.w	r3, [sp, #7]
    dde2:	4603      	mov	r3, r0
    dde4:	f88d 3006 	strb.w	r3, [sp, #6]
    dde8:	460b      	mov	r3, r1
    ddea:	f8ad 3004 	strh.w	r3, [sp, #4]
    ddee:	4613      	mov	r3, r2
    ddf0:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    ddf4:	2300      	movs	r3, #0
    ddf6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ddfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddfe:	4a29      	ldr	r2, [pc, #164]	; (dea4 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    de00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de04:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    de06:	f006 fb99 	bl	1453c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    de0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    de0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    de12:	4925      	ldr	r1, [pc, #148]	; (dea8 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    de14:	00d2      	lsls	r2, r2, #3
    de16:	4413      	add	r3, r2
    de18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    de1c:	2b02      	cmp	r3, #2
    de1e:	d111      	bne.n	de44 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    de20:	f89d 2007 	ldrb.w	r2, [sp, #7]
    de24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    de28:	491f      	ldr	r1, [pc, #124]	; (dea8 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    de2a:	00d2      	lsls	r2, r2, #3
    de2c:	4413      	add	r3, r2
    de2e:	2201      	movs	r2, #1
    de30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    de34:	f89d 1006 	ldrb.w	r1, [sp, #6]
    de38:	f89d 0007 	ldrb.w	r0, [sp, #7]
    de3c:	2300      	movs	r3, #0
    de3e:	2200      	movs	r2, #0
    de40:	f000 f836 	bl	deb0 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    de44:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    de48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de4c:	2200      	movs	r2, #0
    de4e:	4618      	mov	r0, r3
    de50:	f000 f988 	bl	e164 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    de54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de58:	4914      	ldr	r1, [pc, #80]	; (deac <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    de5a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    de5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    de62:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    de66:	2b00      	cmp	r3, #0
    de68:	d103      	bne.n	de72 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    de6a:	2300      	movs	r3, #0
    de6c:	f8ad 300e 	strh.w	r3, [sp, #14]
    de70:	e003      	b.n	de7a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    de72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    de76:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    de7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    de82:	f89d 1006 	ldrb.w	r1, [sp, #6]
    de86:	f89d 0007 	ldrb.w	r0, [sp, #7]
    de8a:	f7ff fedb 	bl	dc44 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    de8e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de92:	4619      	mov	r1, r3
    de94:	9802      	ldr	r0, [sp, #8]
    de96:	f7fe f959 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    de9a:	f006 fb7b 	bl	14594 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    de9e:	bf00      	nop
    dea0:	b004      	add	sp, #16
    dea2:	bd10      	pop	{r4, pc}
    dea4:	00016720 	.word	0x00016720
    dea8:	1fff8fd8 	.word	0x1fff8fd8
    deac:	1fff8e00 	.word	0x1fff8e00

0000deb0 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    deb0:	b500      	push	{lr}
    deb2:	b089      	sub	sp, #36	; 0x24
    deb4:	9200      	str	r2, [sp, #0]
    deb6:	461a      	mov	r2, r3
    deb8:	4603      	mov	r3, r0
    deba:	f88d 3007 	strb.w	r3, [sp, #7]
    debe:	460b      	mov	r3, r1
    dec0:	f88d 3006 	strb.w	r3, [sp, #6]
    dec4:	4613      	mov	r3, r2
    dec6:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    deca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dece:	4a58      	ldr	r2, [pc, #352]	; (e030 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    ded0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded4:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    ded6:	2300      	movs	r3, #0
    ded8:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    dedc:	2300      	movs	r3, #0
    dede:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    dee2:	2300      	movs	r3, #0
    dee4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    dee8:	2300      	movs	r3, #0
    deea:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    deee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    def2:	4619      	mov	r1, r3
    def4:	9805      	ldr	r0, [sp, #20]
    def6:	f7fe fd89 	bl	ca0c <Ftm_Pwm_Ip_GetChannelMode>
    defa:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    defc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    df00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df04:	494b      	ldr	r1, [pc, #300]	; (e034 <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    df06:	00d2      	lsls	r2, r2, #3
    df08:	4413      	add	r3, r2
    df0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    df0e:	2b02      	cmp	r3, #2
    df10:	d109      	bne.n	df26 <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    df12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    df16:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df1a:	4947      	ldr	r1, [pc, #284]	; (e038 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    df1c:	00d2      	lsls	r2, r2, #3
    df1e:	4413      	add	r3, r2
    df20:	2200      	movs	r2, #0
    df22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    df26:	9805      	ldr	r0, [sp, #20]
    df28:	f7fe fd5f 	bl	c9ea <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    df2c:	4603      	mov	r3, r0
    df2e:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    df32:	9b03      	ldr	r3, [sp, #12]
    df34:	2b22      	cmp	r3, #34	; 0x22
    df36:	d008      	beq.n	df4a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    df38:	9b03      	ldr	r3, [sp, #12]
    df3a:	2b62      	cmp	r3, #98	; 0x62
    df3c:	d005      	beq.n	df4a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    df3e:	9b03      	ldr	r3, [sp, #12]
    df40:	2b61      	cmp	r3, #97	; 0x61
    df42:	d002      	beq.n	df4a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    df44:	9b03      	ldr	r3, [sp, #12]
    df46:	2b21      	cmp	r3, #33	; 0x21
    df48:	d103      	bne.n	df52 <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    df4a:	2303      	movs	r3, #3
    df4c:	f8ad 301c 	strh.w	r3, [sp, #28]
    df50:	e002      	b.n	df58 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    df52:	2301      	movs	r3, #1
    df54:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    df58:	9805      	ldr	r0, [sp, #20]
    df5a:	f7fe fd4f 	bl	c9fc <Ftm_Pwm_Ip_GetPolInstance>
    df5e:	4603      	mov	r3, r0
    df60:	4619      	mov	r1, r3
    df62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df6a:	fa02 f303 	lsl.w	r3, r2, r3
    df6e:	b29b      	uxth	r3, r3
    df70:	400b      	ands	r3, r1
    df72:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    df76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    df7a:	021b      	lsls	r3, r3, #8
    df7c:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    df80:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df84:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df88:	3308      	adds	r3, #8
    df8a:	fa02 f303 	lsl.w	r3, r2, r3
    df8e:	b29b      	uxth	r3, r3
    df90:	43db      	mvns	r3, r3
    df92:	b29a      	uxth	r2, r3
    df94:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    df98:	4013      	ands	r3, r2
    df9a:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    df9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	d027      	beq.n	dff6 <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    dfa6:	9b00      	ldr	r3, [sp, #0]
    dfa8:	2b01      	cmp	r3, #1
    dfaa:	d109      	bne.n	dfc0 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    dfac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dfb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfb4:	3308      	adds	r3, #8
    dfb6:	fa02 f303 	lsl.w	r3, r2, r3
    dfba:	f8ad 301a 	strh.w	r3, [sp, #26]
    dfbe:	e002      	b.n	dfc6 <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    dfc0:	2300      	movs	r3, #0
    dfc2:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    dfc6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dfca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    dfce:	4053      	eors	r3, r2
    dfd0:	b29a      	uxth	r2, r3
    dfd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfd6:	4313      	orrs	r3, r2
    dfd8:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    dfdc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dfe0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfe4:	fa02 f303 	lsl.w	r3, r2, r3
    dfe8:	b29a      	uxth	r2, r3
    dfea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfee:	4313      	orrs	r3, r2
    dff0:	f8ad 301e 	strh.w	r3, [sp, #30]
    dff4:	e00d      	b.n	e012 <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    dff6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dffa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dffe:	fa02 f303 	lsl.w	r3, r2, r3
    e002:	b29b      	uxth	r3, r3
    e004:	43db      	mvns	r3, r3
    e006:	b29a      	uxth	r2, r3
    e008:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    e00c:	4013      	ands	r3, r2
    e00e:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    e012:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    e016:	4619      	mov	r1, r3
    e018:	9805      	ldr	r0, [sp, #20]
    e01a:	f7fe fc86 	bl	c92a <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    e01e:	2101      	movs	r1, #1
    e020:	9805      	ldr	r0, [sp, #20]
    e022:	f7fe f893 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    e026:	bf00      	nop
    e028:	b009      	add	sp, #36	; 0x24
    e02a:	f85d fb04 	ldr.w	pc, [sp], #4
    e02e:	bf00      	nop
    e030:	00016720 	.word	0x00016720
    e034:	1fff8fd8 	.word	0x1fff8fd8
    e038:	1fff8e08 	.word	0x1fff8e08

0000e03c <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    e03c:	b510      	push	{r4, lr}
    e03e:	b086      	sub	sp, #24
    e040:	4604      	mov	r4, r0
    e042:	4608      	mov	r0, r1
    e044:	4611      	mov	r1, r2
    e046:	461a      	mov	r2, r3
    e048:	4623      	mov	r3, r4
    e04a:	f88d 3007 	strb.w	r3, [sp, #7]
    e04e:	4603      	mov	r3, r0
    e050:	f88d 3006 	strb.w	r3, [sp, #6]
    e054:	460b      	mov	r3, r1
    e056:	f8ad 3004 	strh.w	r3, [sp, #4]
    e05a:	4613      	mov	r3, r2
    e05c:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e064:	4a3d      	ldr	r2, [pc, #244]	; (e15c <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    e066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06a:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    e06c:	2300      	movs	r3, #0
    e06e:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    e070:	2300      	movs	r3, #0
    e072:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    e076:	2300      	movs	r3, #0
    e078:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    e07c:	2300      	movs	r3, #0
    e07e:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    e082:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e086:	085b      	lsrs	r3, r3, #1
    e088:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    e08c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e090:	4a33      	ldr	r2, [pc, #204]	; (e160 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    e092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e096:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    e09a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e09e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e0a2:	429a      	cmp	r2, r3
    e0a4:	d805      	bhi.n	e0b2 <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    e0a6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e0aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e0ae:	429a      	cmp	r2, r3
    e0b0:	d903      	bls.n	e0ba <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    e0b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d108      	bne.n	e0cc <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    e0ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e0be:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    e0c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e0c6:	f8ad 3010 	strh.w	r3, [sp, #16]
    e0ca:	e001      	b.n	e0d0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    e0cc:	2301      	movs	r3, #1
    e0ce:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    e0d0:	9b05      	ldr	r3, [sp, #20]
    e0d2:	2b00      	cmp	r3, #0
    e0d4:	d13e      	bne.n	e154 <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    e0d6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0da:	4619      	mov	r1, r3
    e0dc:	9803      	ldr	r0, [sp, #12]
    e0de:	f7fe f8d5 	bl	c28c <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    e0e2:	4603      	mov	r3, r0
    e0e4:	2b00      	cmp	r3, #0
    e0e6:	d016      	beq.n	e116 <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    e0e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0ec:	005b      	lsls	r3, r3, #1
    e0ee:	b2db      	uxtb	r3, r3
    e0f0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e0f4:	4619      	mov	r1, r3
    e0f6:	9803      	ldr	r0, [sp, #12]
    e0f8:	f7fd ff70 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    e0fc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e100:	005b      	lsls	r3, r3, #1
    e102:	b2db      	uxtb	r3, r3
    e104:	3301      	adds	r3, #1
    e106:	b2db      	uxtb	r3, r3
    e108:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e10c:	4619      	mov	r1, r3
    e10e:	9803      	ldr	r0, [sp, #12]
    e110:	f7fd ff64 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>
    e114:	e018      	b.n	e148 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e116:	9803      	ldr	r0, [sp, #12]
    e118:	f7fd fde9 	bl	bcee <Ftm_Pwm_Ip_GetCpwms>
    e11c:	4603      	mov	r3, r0
    e11e:	2b01      	cmp	r3, #1
    e120:	d10a      	bne.n	e138 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    e122:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e126:	085b      	lsrs	r3, r3, #1
    e128:	b29a      	uxth	r2, r3
    e12a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e12e:	4619      	mov	r1, r3
    e130:	9803      	ldr	r0, [sp, #12]
    e132:	f7fd ff53 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>
    e136:	e007      	b.n	e148 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    e138:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e13c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e140:	4619      	mov	r1, r3
    e142:	9803      	ldr	r0, [sp, #12]
    e144:	f7fd ff4a 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e148:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e14c:	4619      	mov	r1, r3
    e14e:	9803      	ldr	r0, [sp, #12]
    e150:	f7fd fffc 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    e154:	9b05      	ldr	r3, [sp, #20]
}
    e156:	4618      	mov	r0, r3
    e158:	b006      	add	sp, #24
    e15a:	bd10      	pop	{r4, pc}
    e15c:	00016720 	.word	0x00016720
    e160:	1fff8e00 	.word	0x1fff8e00

0000e164 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    e164:	b500      	push	{lr}
    e166:	b085      	sub	sp, #20
    e168:	4603      	mov	r3, r0
    e16a:	9100      	str	r1, [sp, #0]
    e16c:	f88d 3007 	strb.w	r3, [sp, #7]
    e170:	4613      	mov	r3, r2
    e172:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e176:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e17a:	4a16      	ldr	r2, [pc, #88]	; (e1d4 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    e17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e180:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    e182:	2300      	movs	r3, #0
    e184:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    e186:	9b00      	ldr	r3, [sp, #0]
    e188:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    e18a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e18e:	9a00      	ldr	r2, [sp, #0]
    e190:	b291      	uxth	r1, r2
    e192:	4a11      	ldr	r2, [pc, #68]	; (e1d8 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    e194:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e198:	9802      	ldr	r0, [sp, #8]
    e19a:	f7fd fda8 	bl	bcee <Ftm_Pwm_Ip_GetCpwms>
    e19e:	4603      	mov	r3, r0
    e1a0:	2b01      	cmp	r3, #1
    e1a2:	d103      	bne.n	e1ac <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    e1a4:	9b03      	ldr	r3, [sp, #12]
    e1a6:	085b      	lsrs	r3, r3, #1
    e1a8:	9303      	str	r3, [sp, #12]
    e1aa:	e002      	b.n	e1b2 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    e1ac:	9b03      	ldr	r3, [sp, #12]
    e1ae:	3b01      	subs	r3, #1
    e1b0:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    e1b2:	9b03      	ldr	r3, [sp, #12]
    e1b4:	b29b      	uxth	r3, r3
    e1b6:	4619      	mov	r1, r3
    e1b8:	9802      	ldr	r0, [sp, #8]
    e1ba:	f7fd fdeb 	bl	bd94 <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e1be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1c2:	4619      	mov	r1, r3
    e1c4:	9802      	ldr	r0, [sp, #8]
    e1c6:	f7fd ffc1 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    e1ca:	2300      	movs	r3, #0
}
    e1cc:	4618      	mov	r0, r3
    e1ce:	b005      	add	sp, #20
    e1d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1d4:	00016720 	.word	0x00016720
    e1d8:	1fff8e00 	.word	0x1fff8e00

0000e1dc <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    e1dc:	b500      	push	{lr}
    e1de:	b085      	sub	sp, #20
    e1e0:	4603      	mov	r3, r0
    e1e2:	460a      	mov	r2, r1
    e1e4:	f88d 3007 	strb.w	r3, [sp, #7]
    e1e8:	4613      	mov	r3, r2
    e1ea:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e1ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1f2:	4a0d      	ldr	r2, [pc, #52]	; (e228 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    e1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f8:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    e1fa:	f006 fa43 	bl	14684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    e1fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e202:	4619      	mov	r1, r3
    e204:	9802      	ldr	r0, [sp, #8]
    e206:	f7fd fed3 	bl	bfb0 <Ftm_Pwm_Ip_GetChOutputValue>
    e20a:	4603      	mov	r3, r0
    e20c:	2b00      	cmp	r3, #0
    e20e:	d002      	beq.n	e216 <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    e210:	2301      	movs	r3, #1
    e212:	9303      	str	r3, [sp, #12]
    e214:	e001      	b.n	e21a <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    e216:	2300      	movs	r3, #0
    e218:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    e21a:	f006 fa5f 	bl	146dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    e21e:	9b03      	ldr	r3, [sp, #12]
}
    e220:	4618      	mov	r0, r3
    e222:	b005      	add	sp, #20
    e224:	f85d fb04 	ldr.w	pc, [sp], #4
    e228:	00016720 	.word	0x00016720

0000e22c <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    e22c:	b500      	push	{lr}
    e22e:	b087      	sub	sp, #28
    e230:	4603      	mov	r3, r0
    e232:	9100      	str	r1, [sp, #0]
    e234:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e238:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e23c:	4a38      	ldr	r2, [pc, #224]	; (e320 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    e23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e242:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    e244:	9b00      	ldr	r3, [sp, #0]
    e246:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    e24a:	f006 fa6d 	bl	14728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e24e:	9b00      	ldr	r3, [sp, #0]
    e250:	2b00      	cmp	r3, #0
    e252:	d014      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
    e254:	9b00      	ldr	r3, [sp, #0]
    e256:	2b01      	cmp	r3, #1
    e258:	d011      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e25a:	9b00      	ldr	r3, [sp, #0]
    e25c:	2b02      	cmp	r3, #2
    e25e:	d00e      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e260:	9b00      	ldr	r3, [sp, #0]
    e262:	2b03      	cmp	r3, #3
    e264:	d00b      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e266:	9b00      	ldr	r3, [sp, #0]
    e268:	2b04      	cmp	r3, #4
    e26a:	d008      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e26c:	9b00      	ldr	r3, [sp, #0]
    e26e:	2b05      	cmp	r3, #5
    e270:	d005      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e272:	9b00      	ldr	r3, [sp, #0]
    e274:	2b06      	cmp	r3, #6
    e276:	d002      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e278:	9b00      	ldr	r3, [sp, #0]
    e27a:	2b07      	cmp	r3, #7
    e27c:	d136      	bne.n	e2ec <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    e27e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e282:	085b      	lsrs	r3, r3, #1
    e284:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    e288:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e28c:	4619      	mov	r1, r3
    e28e:	9805      	ldr	r0, [sp, #20]
    e290:	f7fe fbbc 	bl	ca0c <Ftm_Pwm_Ip_GetChannelMode>
    e294:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    e296:	f89d 2013 	ldrb.w	r2, [sp, #19]
    e29a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e29e:	4611      	mov	r1, r2
    e2a0:	4618      	mov	r0, r3
    e2a2:	f7fe ff47 	bl	d134 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e2a6:	9b03      	ldr	r3, [sp, #12]
    e2a8:	2b22      	cmp	r3, #34	; 0x22
    e2aa:	d008      	beq.n	e2be <Ftm_Pwm_Ip_DisableNotification+0x92>
    e2ac:	9b03      	ldr	r3, [sp, #12]
    e2ae:	2b62      	cmp	r3, #98	; 0x62
    e2b0:	d005      	beq.n	e2be <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e2b2:	9b03      	ldr	r3, [sp, #12]
    e2b4:	2b61      	cmp	r3, #97	; 0x61
    e2b6:	d002      	beq.n	e2be <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e2b8:	9b03      	ldr	r3, [sp, #12]
    e2ba:	2b21      	cmp	r3, #33	; 0x21
    e2bc:	d129      	bne.n	e312 <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    e2be:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e2c2:	005b      	lsls	r3, r3, #1
    e2c4:	b2da      	uxtb	r2, r3
    e2c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2ca:	4611      	mov	r1, r2
    e2cc:	4618      	mov	r0, r3
    e2ce:	f7fe ff31 	bl	d134 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    e2d2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e2d6:	005b      	lsls	r3, r3, #1
    e2d8:	b2db      	uxtb	r3, r3
    e2da:	3301      	adds	r3, #1
    e2dc:	b2da      	uxtb	r2, r3
    e2de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2e2:	4611      	mov	r1, r2
    e2e4:	4618      	mov	r0, r3
    e2e6:	f7fe ff25 	bl	d134 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e2ea:	e012      	b.n	e312 <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e2ec:	9b00      	ldr	r3, [sp, #0]
    e2ee:	2b0a      	cmp	r3, #10
    e2f0:	d107      	bne.n	e302 <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    e2f2:	2100      	movs	r1, #0
    e2f4:	9805      	ldr	r0, [sp, #20]
    e2f6:	f7fe fd88 	bl	ce0a <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e2fa:	9805      	ldr	r0, [sp, #20]
    e2fc:	f7fe fd9b 	bl	ce36 <Ftm_Pwm_Ip_ClearFaultFlag>
    e300:	e008      	b.n	e314 <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e302:	9805      	ldr	r0, [sp, #20]
    e304:	f7fd fd18 	bl	bd38 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    e308:	2100      	movs	r1, #0
    e30a:	9805      	ldr	r0, [sp, #20]
    e30c:	f7fd fcfd 	bl	bd0a <Ftm_Pwm_Ip_SetTimerOverflowInt>
    e310:	e000      	b.n	e314 <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e312:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    e314:	f006 fa34 	bl	14780 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    e318:	bf00      	nop
    e31a:	b007      	add	sp, #28
    e31c:	f85d fb04 	ldr.w	pc, [sp], #4
    e320:	00016720 	.word	0x00016720

0000e324 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    e324:	b500      	push	{lr}
    e326:	b087      	sub	sp, #28
    e328:	4603      	mov	r3, r0
    e32a:	460a      	mov	r2, r1
    e32c:	f88d 3007 	strb.w	r3, [sp, #7]
    e330:	4613      	mov	r3, r2
    e332:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e336:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e33a:	4a22      	ldr	r2, [pc, #136]	; (e3c4 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    e33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e340:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    e342:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e346:	085b      	lsrs	r3, r3, #1
    e348:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    e34c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e350:	4619      	mov	r1, r3
    e352:	9805      	ldr	r0, [sp, #20]
    e354:	f7fe fb5a 	bl	ca0c <Ftm_Pwm_Ip_GetChannelMode>
    e358:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    e35a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e35e:	2201      	movs	r2, #1
    e360:	4619      	mov	r1, r3
    e362:	9805      	ldr	r0, [sp, #20]
    e364:	f7fd fde9 	bl	bf3a <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e368:	9b03      	ldr	r3, [sp, #12]
    e36a:	2b22      	cmp	r3, #34	; 0x22
    e36c:	d008      	beq.n	e380 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    e36e:	9b03      	ldr	r3, [sp, #12]
    e370:	2b62      	cmp	r3, #98	; 0x62
    e372:	d005      	beq.n	e380 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e374:	9b03      	ldr	r3, [sp, #12]
    e376:	2b61      	cmp	r3, #97	; 0x61
    e378:	d002      	beq.n	e380 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e37a:	9b03      	ldr	r3, [sp, #12]
    e37c:	2b21      	cmp	r3, #33	; 0x21
    e37e:	d11d      	bne.n	e3bc <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    e380:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e384:	005b      	lsls	r3, r3, #1
    e386:	b2db      	uxtb	r3, r3
    e388:	3301      	adds	r3, #1
    e38a:	b2db      	uxtb	r3, r3
    e38c:	4619      	mov	r1, r3
    e38e:	9805      	ldr	r0, [sp, #20]
    e390:	f7fd fdf6 	bl	bf80 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    e394:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e398:	005b      	lsls	r3, r3, #1
    e39a:	b2db      	uxtb	r3, r3
    e39c:	2201      	movs	r2, #1
    e39e:	4619      	mov	r1, r3
    e3a0:	9805      	ldr	r0, [sp, #20]
    e3a2:	f7fd fdca 	bl	bf3a <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    e3a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e3aa:	005b      	lsls	r3, r3, #1
    e3ac:	b2db      	uxtb	r3, r3
    e3ae:	3301      	adds	r3, #1
    e3b0:	b2db      	uxtb	r3, r3
    e3b2:	2201      	movs	r2, #1
    e3b4:	4619      	mov	r1, r3
    e3b6:	9805      	ldr	r0, [sp, #20]
    e3b8:	f7fd fdbf 	bl	bf3a <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    e3bc:	bf00      	nop
    e3be:	b007      	add	sp, #28
    e3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c4:	00016720 	.word	0x00016720

0000e3c8 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    e3c8:	b500      	push	{lr}
    e3ca:	b085      	sub	sp, #20
    e3cc:	4603      	mov	r3, r0
    e3ce:	9100      	str	r1, [sp, #0]
    e3d0:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e3d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3d8:	4a23      	ldr	r2, [pc, #140]	; (e468 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    e3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3de:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    e3e0:	9b00      	ldr	r3, [sp, #0]
    e3e2:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    e3e6:	f006 f9f1 	bl	147cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e3ea:	9b00      	ldr	r3, [sp, #0]
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d014      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
    e3f0:	9b00      	ldr	r3, [sp, #0]
    e3f2:	2b01      	cmp	r3, #1
    e3f4:	d011      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e3f6:	9b00      	ldr	r3, [sp, #0]
    e3f8:	2b02      	cmp	r3, #2
    e3fa:	d00e      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e3fc:	9b00      	ldr	r3, [sp, #0]
    e3fe:	2b03      	cmp	r3, #3
    e400:	d00b      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e402:	9b00      	ldr	r3, [sp, #0]
    e404:	2b04      	cmp	r3, #4
    e406:	d008      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e408:	9b00      	ldr	r3, [sp, #0]
    e40a:	2b05      	cmp	r3, #5
    e40c:	d005      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e40e:	9b00      	ldr	r3, [sp, #0]
    e410:	2b06      	cmp	r3, #6
    e412:	d002      	beq.n	e41a <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e414:	9b00      	ldr	r3, [sp, #0]
    e416:	2b07      	cmp	r3, #7
    e418:	d10e      	bne.n	e438 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    e41a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e41e:	4619      	mov	r1, r3
    e420:	9803      	ldr	r0, [sp, #12]
    e422:	f7fd fdad 	bl	bf80 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    e426:	f89d 200b 	ldrb.w	r2, [sp, #11]
    e42a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e42e:	4611      	mov	r1, r2
    e430:	4618      	mov	r0, r3
    e432:	f7ff ff77 	bl	e324 <Ftm_Pwm_Ip_SetNormalNotificationCase>
    e436:	e011      	b.n	e45c <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e438:	9b00      	ldr	r3, [sp, #0]
    e43a:	2b0a      	cmp	r3, #10
    e43c:	d107      	bne.n	e44e <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e43e:	9803      	ldr	r0, [sp, #12]
    e440:	f7fe fcf9 	bl	ce36 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    e444:	2101      	movs	r1, #1
    e446:	9803      	ldr	r0, [sp, #12]
    e448:	f7fe fcdf 	bl	ce0a <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    e44c:	e006      	b.n	e45c <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e44e:	9803      	ldr	r0, [sp, #12]
    e450:	f7fd fc72 	bl	bd38 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    e454:	2101      	movs	r1, #1
    e456:	9803      	ldr	r0, [sp, #12]
    e458:	f7fd fc57 	bl	bd0a <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    e45c:	f006 f9e2 	bl	14824 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    e460:	bf00      	nop
    e462:	b005      	add	sp, #20
    e464:	f85d fb04 	ldr.w	pc, [sp], #4
    e468:	00016720 	.word	0x00016720

0000e46c <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    e46c:	b500      	push	{lr}
    e46e:	b085      	sub	sp, #20
    e470:	4603      	mov	r3, r0
    e472:	9100      	str	r1, [sp, #0]
    e474:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e478:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e47c:	4a0c      	ldr	r2, [pc, #48]	; (e4b0 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    e47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e482:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    e484:	9b00      	ldr	r3, [sp, #0]
    e486:	2b01      	cmp	r3, #1
    e488:	d104      	bne.n	e494 <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    e48a:	2100      	movs	r1, #0
    e48c:	9803      	ldr	r0, [sp, #12]
    e48e:	f7fd fc07 	bl	bca0 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    e492:	e008      	b.n	e4a6 <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    e494:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e498:	4a06      	ldr	r2, [pc, #24]	; (e4b4 <Ftm_Pwm_Ip_SetPowerState+0x48>)
    e49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e49e:	4619      	mov	r1, r3
    e4a0:	9803      	ldr	r0, [sp, #12]
    e4a2:	f7fd fbfd 	bl	bca0 <Ftm_Pwm_Ip_SetClockSource>
}
    e4a6:	bf00      	nop
    e4a8:	b005      	add	sp, #20
    e4aa:	f85d fb04 	ldr.w	pc, [sp], #4
    e4ae:	bf00      	nop
    e4b0:	00016720 	.word	0x00016720
    e4b4:	1fff90f8 	.word	0x1fff90f8

0000e4b8 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    e4b8:	b500      	push	{lr}
    e4ba:	b085      	sub	sp, #20
    e4bc:	4603      	mov	r3, r0
    e4be:	9100      	str	r1, [sp, #0]
    e4c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e4c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4c8:	4a0e      	ldr	r2, [pc, #56]	; (e504 <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    e4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ce:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    e4d0:	9b00      	ldr	r3, [sp, #0]
    e4d2:	2b01      	cmp	r3, #1
    e4d4:	d109      	bne.n	e4ea <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    e4d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4da:	4a0b      	ldr	r2, [pc, #44]	; (e508 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    e4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e0:	4619      	mov	r1, r3
    e4e2:	9803      	ldr	r0, [sp, #12]
    e4e4:	f7fd fbcc 	bl	bc80 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    e4e8:	e008      	b.n	e4fc <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    e4ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4ee:	4a07      	ldr	r2, [pc, #28]	; (e50c <Ftm_Pwm_Ip_SetClockMode+0x54>)
    e4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4f4:	4619      	mov	r1, r3
    e4f6:	9803      	ldr	r0, [sp, #12]
    e4f8:	f7fd fbc2 	bl	bc80 <Ftm_Pwm_Ip_SetClockPs>
}
    e4fc:	bf00      	nop
    e4fe:	b005      	add	sp, #20
    e500:	f85d fb04 	ldr.w	pc, [sp], #4
    e504:	00016720 	.word	0x00016720
    e508:	1fff9118 	.word	0x1fff9118
    e50c:	1fff9108 	.word	0x1fff9108

0000e510 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    e510:	b500      	push	{lr}
    e512:	b085      	sub	sp, #20
    e514:	4603      	mov	r3, r0
    e516:	460a      	mov	r2, r1
    e518:	f88d 3007 	strb.w	r3, [sp, #7]
    e51c:	4613      	mov	r3, r2
    e51e:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e522:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e526:	4a07      	ldr	r2, [pc, #28]	; (e544 <Ftm_Pwm_Ip_ResetCounter+0x34>)
    e528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52c:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    e52e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e532:	4619      	mov	r1, r3
    e534:	9803      	ldr	r0, [sp, #12]
    e536:	f7fe f8ae 	bl	c696 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    e53a:	bf00      	nop
    e53c:	b005      	add	sp, #20
    e53e:	f85d fb04 	ldr.w	pc, [sp], #4
    e542:	bf00      	nop
    e544:	00016720 	.word	0x00016720

0000e548 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    e548:	b084      	sub	sp, #16
    e54a:	4603      	mov	r3, r0
    e54c:	460a      	mov	r2, r1
    e54e:	f88d 3007 	strb.w	r3, [sp, #7]
    e552:	4613      	mov	r3, r2
    e554:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    e558:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e55c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e560:	4905      	ldr	r1, [pc, #20]	; (e578 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    e562:	00d2      	lsls	r2, r2, #3
    e564:	4413      	add	r3, r2
    e566:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e56a:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    e56e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    e572:	4618      	mov	r0, r3
    e574:	b004      	add	sp, #16
    e576:	4770      	bx	lr
    e578:	1fff8e08 	.word	0x1fff8e08

0000e57c <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    e57c:	b500      	push	{lr}
    e57e:	b087      	sub	sp, #28
    e580:	9202      	str	r2, [sp, #8]
    e582:	9301      	str	r3, [sp, #4]
    e584:	4603      	mov	r3, r0
    e586:	f88d 300f 	strb.w	r3, [sp, #15]
    e58a:	460b      	mov	r3, r1
    e58c:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e590:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e594:	4a1f      	ldr	r2, [pc, #124]	; (e614 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    e596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e59a:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e59c:	2300      	movs	r3, #0
    e59e:	f88d 3017 	strb.w	r3, [sp, #23]
    e5a2:	e026      	b.n	e5f2 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    e5a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e5a8:	9a02      	ldr	r2, [sp, #8]
    e5aa:	4413      	add	r3, r2
    e5ac:	7819      	ldrb	r1, [r3, #0]
    e5ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e5b2:	005b      	lsls	r3, r3, #1
    e5b4:	9a01      	ldr	r2, [sp, #4]
    e5b6:	4413      	add	r3, r2
    e5b8:	881b      	ldrh	r3, [r3, #0]
    e5ba:	461a      	mov	r2, r3
    e5bc:	9804      	ldr	r0, [sp, #16]
    e5be:	f7fd fd0d 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    e5c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e5c6:	005b      	lsls	r3, r3, #1
    e5c8:	9a01      	ldr	r2, [sp, #4]
    e5ca:	441a      	add	r2, r3
    e5cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e5d0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    e5d4:	9802      	ldr	r0, [sp, #8]
    e5d6:	4401      	add	r1, r0
    e5d8:	7809      	ldrb	r1, [r1, #0]
    e5da:	4608      	mov	r0, r1
    e5dc:	8811      	ldrh	r1, [r2, #0]
    e5de:	4a0e      	ldr	r2, [pc, #56]	; (e618 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    e5e0:	00db      	lsls	r3, r3, #3
    e5e2:	4403      	add	r3, r0
    e5e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e5e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e5ec:	3301      	adds	r3, #1
    e5ee:	f88d 3017 	strb.w	r3, [sp, #23]
    e5f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e5f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e5fa:	429a      	cmp	r2, r3
    e5fc:	d3d2      	bcc.n	e5a4 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e5fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e602:	4619      	mov	r1, r3
    e604:	9804      	ldr	r0, [sp, #16]
    e606:	f7fd fda1 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    e60a:	bf00      	nop
    e60c:	b007      	add	sp, #28
    e60e:	f85d fb04 	ldr.w	pc, [sp], #4
    e612:	bf00      	nop
    e614:	00016720 	.word	0x00016720
    e618:	1fff8e08 	.word	0x1fff8e08

0000e61c <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    e61c:	b500      	push	{lr}
    e61e:	b085      	sub	sp, #20
    e620:	4603      	mov	r3, r0
    e622:	9100      	str	r1, [sp, #0]
    e624:	f88d 3007 	strb.w	r3, [sp, #7]
    e628:	4613      	mov	r3, r2
    e62a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e62e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e632:	4a0b      	ldr	r2, [pc, #44]	; (e660 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    e634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e638:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    e63a:	f006 f96b 	bl	14914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    e63e:	9900      	ldr	r1, [sp, #0]
    e640:	9803      	ldr	r0, [sp, #12]
    e642:	f7fd fde0 	bl	c206 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e646:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e64a:	4619      	mov	r1, r3
    e64c:	9803      	ldr	r0, [sp, #12]
    e64e:	f7fd fd7d 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    e652:	f006 f98b 	bl	1496c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    e656:	bf00      	nop
    e658:	b005      	add	sp, #20
    e65a:	f85d fb04 	ldr.w	pc, [sp], #4
    e65e:	bf00      	nop
    e660:	00016720 	.word	0x00016720

0000e664 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    e664:	b500      	push	{lr}
    e666:	b085      	sub	sp, #20
    e668:	4603      	mov	r3, r0
    e66a:	9100      	str	r1, [sp, #0]
    e66c:	f88d 3007 	strb.w	r3, [sp, #7]
    e670:	4613      	mov	r3, r2
    e672:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e676:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e67a:	4a0b      	ldr	r2, [pc, #44]	; (e6a8 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    e67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e680:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    e682:	f006 f999 	bl	149b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    e686:	9900      	ldr	r1, [sp, #0]
    e688:	9803      	ldr	r0, [sp, #12]
    e68a:	f7fd fdcb 	bl	c224 <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e68e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e692:	4619      	mov	r1, r3
    e694:	9803      	ldr	r0, [sp, #12]
    e696:	f7fd fd59 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    e69a:	f006 f9b9 	bl	14a10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    e69e:	bf00      	nop
    e6a0:	b005      	add	sp, #20
    e6a2:	f85d fb04 	ldr.w	pc, [sp], #4
    e6a6:	bf00      	nop
    e6a8:	00016720 	.word	0x00016720

0000e6ac <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    e6ac:	b510      	push	{r4, lr}
    e6ae:	b084      	sub	sp, #16
    e6b0:	4604      	mov	r4, r0
    e6b2:	4608      	mov	r0, r1
    e6b4:	4611      	mov	r1, r2
    e6b6:	461a      	mov	r2, r3
    e6b8:	4623      	mov	r3, r4
    e6ba:	f88d 3007 	strb.w	r3, [sp, #7]
    e6be:	4603      	mov	r3, r0
    e6c0:	f88d 3006 	strb.w	r3, [sp, #6]
    e6c4:	460b      	mov	r3, r1
    e6c6:	f8ad 3004 	strh.w	r3, [sp, #4]
    e6ca:	4613      	mov	r3, r2
    e6cc:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e6d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6d4:	4a2e      	ldr	r2, [pc, #184]	; (e790 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    e6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6da:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    e6dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e6e0:	085b      	lsrs	r3, r3, #1
    e6e2:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    e6e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6ea:	492a      	ldr	r1, [pc, #168]	; (e794 <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    e6ec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e6f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    e6f4:	f006 f9b2 	bl	14a5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e6f8:	9803      	ldr	r0, [sp, #12]
    e6fa:	f7fd faf8 	bl	bcee <Ftm_Pwm_Ip_GetCpwms>
    e6fe:	4603      	mov	r3, r0
    e700:	2b01      	cmp	r3, #1
    e702:	d108      	bne.n	e716 <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    e704:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e708:	085b      	lsrs	r3, r3, #1
    e70a:	b29b      	uxth	r3, r3
    e70c:	4619      	mov	r1, r3
    e70e:	9803      	ldr	r0, [sp, #12]
    e710:	f7fd fb40 	bl	bd94 <Ftm_Pwm_Ip_SetMod>
    e714:	e007      	b.n	e726 <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    e716:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e71a:	3b01      	subs	r3, #1
    e71c:	b29b      	uxth	r3, r3
    e71e:	4619      	mov	r1, r3
    e720:	9803      	ldr	r0, [sp, #12]
    e722:	f7fd fb37 	bl	bd94 <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    e726:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e72a:	005b      	lsls	r3, r3, #1
    e72c:	b2db      	uxtb	r3, r3
    e72e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e732:	4619      	mov	r1, r3
    e734:	9803      	ldr	r0, [sp, #12]
    e736:	f7fd fc51 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    e73a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e73e:	085b      	lsrs	r3, r3, #1
    e740:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    e744:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e748:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e74c:	4912      	ldr	r1, [pc, #72]	; (e798 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    e74e:	00d2      	lsls	r2, r2, #3
    e750:	4413      	add	r3, r2
    e752:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    e756:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    e75a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e75e:	005b      	lsls	r3, r3, #1
    e760:	b2db      	uxtb	r3, r3
    e762:	3301      	adds	r3, #1
    e764:	b2d9      	uxtb	r1, r3
    e766:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e76a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e76e:	4413      	add	r3, r2
    e770:	b29b      	uxth	r3, r3
    e772:	461a      	mov	r2, r3
    e774:	9803      	ldr	r0, [sp, #12]
    e776:	f7fd fc31 	bl	bfdc <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e77a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e77e:	4619      	mov	r1, r3
    e780:	9803      	ldr	r0, [sp, #12]
    e782:	f7fd fce3 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    e786:	f006 f995 	bl	14ab4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    e78a:	bf00      	nop
    e78c:	b004      	add	sp, #16
    e78e:	bd10      	pop	{r4, pc}
    e790:	00016720 	.word	0x00016720
    e794:	1fff8e00 	.word	0x1fff8e00
    e798:	1fff8e08 	.word	0x1fff8e08

0000e79c <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    e79c:	b510      	push	{r4, lr}
    e79e:	b086      	sub	sp, #24
    e7a0:	4604      	mov	r4, r0
    e7a2:	4608      	mov	r0, r1
    e7a4:	4611      	mov	r1, r2
    e7a6:	461a      	mov	r2, r3
    e7a8:	4623      	mov	r3, r4
    e7aa:	f88d 300f 	strb.w	r3, [sp, #15]
    e7ae:	4603      	mov	r3, r0
    e7b0:	f88d 300e 	strb.w	r3, [sp, #14]
    e7b4:	460b      	mov	r3, r1
    e7b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    e7ba:	4613      	mov	r3, r2
    e7bc:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    e7c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e7c4:	085b      	lsrs	r3, r3, #1
    e7c6:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    e7ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7ce:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e7d2:	492d      	ldr	r1, [pc, #180]	; (e888 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    e7d4:	0092      	lsls	r2, r2, #2
    e7d6:	4413      	add	r3, r2
    e7d8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e7dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    e7e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e7e8:	4928      	ldr	r1, [pc, #160]	; (e88c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    e7ea:	00d2      	lsls	r2, r2, #3
    e7ec:	4413      	add	r3, r2
    e7ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e7f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    e7f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e7fa:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    e7fe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e802:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    e806:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e80a:	4618      	mov	r0, r3
    e80c:	f7fe fbc4 	bl	cf98 <Ftm_Pwm_Ip_CalculatePhaseShift>
    e810:	4603      	mov	r3, r0
    e812:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    e816:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e81a:	2b00      	cmp	r3, #0
    e81c:	d003      	beq.n	e826 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    e81e:	2300      	movs	r3, #0
    e820:	f88d 3017 	strb.w	r3, [sp, #23]
    e824:	e002      	b.n	e82c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    e826:	2301      	movs	r3, #1
    e828:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    e82c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e830:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e834:	4916      	ldr	r1, [pc, #88]	; (e890 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e836:	00d2      	lsls	r2, r2, #3
    e838:	4413      	add	r3, r2
    e83a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e83e:	2b02      	cmp	r3, #2
    e840:	d111      	bne.n	e866 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    e842:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e846:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e84a:	4911      	ldr	r1, [pc, #68]	; (e890 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e84c:	00d2      	lsls	r2, r2, #3
    e84e:	4413      	add	r3, r2
    e850:	2201      	movs	r2, #1
    e852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    e856:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e85a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e85e:	2300      	movs	r3, #0
    e860:	2200      	movs	r2, #0
    e862:	f7ff fb25 	bl	deb0 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    e866:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    e86a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e86e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e872:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e876:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e87a:	9300      	str	r3, [sp, #0]
    e87c:	4623      	mov	r3, r4
    e87e:	f7ff fbdd 	bl	e03c <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    e882:	bf00      	nop
    e884:	b006      	add	sp, #24
    e886:	bd10      	pop	{r4, pc}
    e888:	1fff8e48 	.word	0x1fff8e48
    e88c:	1fff8e08 	.word	0x1fff8e08
    e890:	1fff8fd8 	.word	0x1fff8fd8

0000e894 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    e894:	b500      	push	{lr}
    e896:	b085      	sub	sp, #20
    e898:	4603      	mov	r3, r0
    e89a:	9100      	str	r1, [sp, #0]
    e89c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e8a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8a4:	4a07      	ldr	r2, [pc, #28]	; (e8c4 <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    e8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8aa:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    e8ac:	f006 f928 	bl	14b00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    e8b0:	9900      	ldr	r1, [sp, #0]
    e8b2:	9803      	ldr	r0, [sp, #12]
    e8b4:	f7fd fdea 	bl	c48c <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    e8b8:	f006 f94e 	bl	14b58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    e8bc:	bf00      	nop
    e8be:	b005      	add	sp, #20
    e8c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e8c4:	00016720 	.word	0x00016720

0000e8c8 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    e8c8:	b500      	push	{lr}
    e8ca:	b085      	sub	sp, #20
    e8cc:	4603      	mov	r3, r0
    e8ce:	9100      	str	r1, [sp, #0]
    e8d0:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e8d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8d8:	4a07      	ldr	r2, [pc, #28]	; (e8f8 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    e8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8de:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    e8e0:	f006 f960 	bl	14ba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    e8e4:	9900      	ldr	r1, [sp, #0]
    e8e6:	9803      	ldr	r0, [sp, #12]
    e8e8:	f7fd fddd 	bl	c4a6 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    e8ec:	f006 f986 	bl	14bfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    e8f0:	bf00      	nop
    e8f2:	b005      	add	sp, #20
    e8f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e8f8:	00016720 	.word	0x00016720

0000e8fc <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    e8fc:	b500      	push	{lr}
    e8fe:	b085      	sub	sp, #20
    e900:	4603      	mov	r3, r0
    e902:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e906:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e90a:	4a08      	ldr	r2, [pc, #32]	; (e92c <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    e90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e910:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    e912:	f006 f999 	bl	14c48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    e916:	2101      	movs	r1, #1
    e918:	9803      	ldr	r0, [sp, #12]
    e91a:	f7fd fc17 	bl	c14c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    e91e:	f006 f9bf 	bl	14ca0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    e922:	bf00      	nop
    e924:	b005      	add	sp, #20
    e926:	f85d fb04 	ldr.w	pc, [sp], #4
    e92a:	bf00      	nop
    e92c:	00016720 	.word	0x00016720

0000e930 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    e930:	b500      	push	{lr}
    e932:	b085      	sub	sp, #20
    e934:	4603      	mov	r3, r0
    e936:	f88d 3007 	strb.w	r3, [sp, #7]
    e93a:	460b      	mov	r3, r1
    e93c:	f88d 3006 	strb.w	r3, [sp, #6]
    e940:	4613      	mov	r3, r2
    e942:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e946:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e94a:	4a17      	ldr	r2, [pc, #92]	; (e9a8 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    e94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e950:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    e952:	f006 f9cb 	bl	14cec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    e956:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e95a:	2b3f      	cmp	r3, #63	; 0x3f
    e95c:	d80b      	bhi.n	e976 <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    e95e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e962:	b2db      	uxtb	r3, r3
    e964:	4619      	mov	r1, r3
    e966:	9803      	ldr	r0, [sp, #12]
    e968:	f7fd fd42 	bl	c3f0 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    e96c:	2100      	movs	r1, #0
    e96e:	9803      	ldr	r0, [sp, #12]
    e970:	f7fd fd62 	bl	c438 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    e974:	e012      	b.n	e99c <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    e976:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e97a:	b2db      	uxtb	r3, r3
    e97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e980:	b2db      	uxtb	r3, r3
    e982:	4619      	mov	r1, r3
    e984:	9803      	ldr	r0, [sp, #12]
    e986:	f7fd fd33 	bl	c3f0 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    e98a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e98e:	099b      	lsrs	r3, r3, #6
    e990:	b29b      	uxth	r3, r3
    e992:	b2db      	uxtb	r3, r3
    e994:	4619      	mov	r1, r3
    e996:	9803      	ldr	r0, [sp, #12]
    e998:	f7fd fd4e 	bl	c438 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    e99c:	f006 f9d2 	bl	14d44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    e9a0:	bf00      	nop
    e9a2:	b005      	add	sp, #20
    e9a4:	f85d fb04 	ldr.w	pc, [sp], #4
    e9a8:	00016720 	.word	0x00016720

0000e9ac <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    e9ac:	b082      	sub	sp, #8
    e9ae:	9001      	str	r0, [sp, #4]
    e9b0:	460b      	mov	r3, r1
    e9b2:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    e9b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    e9ba:	4618      	mov	r0, r3
    e9bc:	b002      	add	sp, #8
    e9be:	4770      	bx	lr

0000e9c0 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    e9c0:	b510      	push	{r4, lr}
    e9c2:	b084      	sub	sp, #16
    e9c4:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    e9c6:	2300      	movs	r3, #0
    e9c8:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    e9ca:	493e      	ldr	r1, [pc, #248]	; (eac4 <Pwm_Init+0x104>)
    e9cc:	9a02      	ldr	r2, [sp, #8]
    e9ce:	4613      	mov	r3, r2
    e9d0:	009b      	lsls	r3, r3, #2
    e9d2:	4413      	add	r3, r2
    e9d4:	009b      	lsls	r3, r3, #2
    e9d6:	440b      	add	r3, r1
    e9d8:	9a01      	ldr	r2, [sp, #4]
    e9da:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e9dc:	2300      	movs	r3, #0
    e9de:	f88d 300f 	strb.w	r3, [sp, #15]
    e9e2:	e017      	b.n	ea14 <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    e9e4:	4937      	ldr	r1, [pc, #220]	; (eac4 <Pwm_Init+0x104>)
    e9e6:	9a02      	ldr	r2, [sp, #8]
    e9e8:	4613      	mov	r3, r2
    e9ea:	009b      	lsls	r3, r3, #2
    e9ec:	4413      	add	r3, r2
    e9ee:	009b      	lsls	r3, r3, #2
    e9f0:	440b      	add	r3, r1
    e9f2:	681b      	ldr	r3, [r3, #0]
    e9f4:	68d9      	ldr	r1, [r3, #12]
    e9f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e9fa:	4613      	mov	r3, r2
    e9fc:	005b      	lsls	r3, r3, #1
    e9fe:	4413      	add	r3, r2
    ea00:	009b      	lsls	r3, r3, #2
    ea02:	440b      	add	r3, r1
    ea04:	4618      	mov	r0, r3
    ea06:	f000 f9cd 	bl	eda4 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    ea0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ea0e:	3301      	adds	r3, #1
    ea10:	f88d 300f 	strb.w	r3, [sp, #15]
    ea14:	492b      	ldr	r1, [pc, #172]	; (eac4 <Pwm_Init+0x104>)
    ea16:	9a02      	ldr	r2, [sp, #8]
    ea18:	4613      	mov	r3, r2
    ea1a:	009b      	lsls	r3, r3, #2
    ea1c:	4413      	add	r3, r2
    ea1e:	009b      	lsls	r3, r3, #2
    ea20:	440b      	add	r3, r1
    ea22:	681b      	ldr	r3, [r3, #0]
    ea24:	7a1b      	ldrb	r3, [r3, #8]
    ea26:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea2a:	429a      	cmp	r2, r3
    ea2c:	d3da      	bcc.n	e9e4 <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ea2e:	2300      	movs	r3, #0
    ea30:	f88d 300f 	strb.w	r3, [sp, #15]
    ea34:	e034      	b.n	eaa0 <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    ea36:	4923      	ldr	r1, [pc, #140]	; (eac4 <Pwm_Init+0x104>)
    ea38:	9a02      	ldr	r2, [sp, #8]
    ea3a:	4613      	mov	r3, r2
    ea3c:	009b      	lsls	r3, r3, #2
    ea3e:	4413      	add	r3, r2
    ea40:	009b      	lsls	r3, r3, #2
    ea42:	440b      	add	r3, r1
    ea44:	681b      	ldr	r3, [r3, #0]
    ea46:	6859      	ldr	r1, [r3, #4]
    ea48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea4c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ea50:	4613      	mov	r3, r2
    ea52:	005b      	lsls	r3, r3, #1
    ea54:	4413      	add	r3, r2
    ea56:	00db      	lsls	r3, r3, #3
    ea58:	4419      	add	r1, r3
    ea5a:	4c1a      	ldr	r4, [pc, #104]	; (eac4 <Pwm_Init+0x104>)
    ea5c:	9a02      	ldr	r2, [sp, #8]
    ea5e:	4613      	mov	r3, r2
    ea60:	009b      	lsls	r3, r3, #2
    ea62:	4413      	add	r3, r2
    ea64:	4403      	add	r3, r0
    ea66:	3302      	adds	r3, #2
    ea68:	009b      	lsls	r3, r3, #2
    ea6a:	4423      	add	r3, r4
    ea6c:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    ea6e:	4915      	ldr	r1, [pc, #84]	; (eac4 <Pwm_Init+0x104>)
    ea70:	9a02      	ldr	r2, [sp, #8]
    ea72:	4613      	mov	r3, r2
    ea74:	009b      	lsls	r3, r3, #2
    ea76:	4413      	add	r3, r2
    ea78:	009b      	lsls	r3, r3, #2
    ea7a:	440b      	add	r3, r1
    ea7c:	681b      	ldr	r3, [r3, #0]
    ea7e:	6859      	ldr	r1, [r3, #4]
    ea80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea84:	4613      	mov	r3, r2
    ea86:	005b      	lsls	r3, r3, #1
    ea88:	4413      	add	r3, r2
    ea8a:	00db      	lsls	r3, r3, #3
    ea8c:	3308      	adds	r3, #8
    ea8e:	440b      	add	r3, r1
    ea90:	4618      	mov	r0, r3
    ea92:	f000 f965 	bl	ed60 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ea96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ea9a:	3301      	adds	r3, #1
    ea9c:	f88d 300f 	strb.w	r3, [sp, #15]
    eaa0:	4908      	ldr	r1, [pc, #32]	; (eac4 <Pwm_Init+0x104>)
    eaa2:	9a02      	ldr	r2, [sp, #8]
    eaa4:	4613      	mov	r3, r2
    eaa6:	009b      	lsls	r3, r3, #2
    eaa8:	4413      	add	r3, r2
    eaaa:	009b      	lsls	r3, r3, #2
    eaac:	440b      	add	r3, r1
    eaae:	681b      	ldr	r3, [r3, #0]
    eab0:	781b      	ldrb	r3, [r3, #0]
    eab2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eab6:	429a      	cmp	r2, r3
    eab8:	d3bd      	bcc.n	ea36 <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    eaba:	bf00      	nop
    eabc:	bf00      	nop
    eabe:	b004      	add	sp, #16
    eac0:	bd10      	pop	{r4, pc}
    eac2:	bf00      	nop
    eac4:	1fff8b38 	.word	0x1fff8b38

0000eac8 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    eac8:	b500      	push	{lr}
    eaca:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    eacc:	2300      	movs	r3, #0
    eace:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ead0:	2300      	movs	r3, #0
    ead2:	f88d 300f 	strb.w	r3, [sp, #15]
    ead6:	e02a      	b.n	eb2e <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    ead8:	4945      	ldr	r1, [pc, #276]	; (ebf0 <Pwm_DeInit+0x128>)
    eada:	9a02      	ldr	r2, [sp, #8]
    eadc:	4613      	mov	r3, r2
    eade:	009b      	lsls	r3, r3, #2
    eae0:	4413      	add	r3, r2
    eae2:	009b      	lsls	r3, r3, #2
    eae4:	440b      	add	r3, r1
    eae6:	330c      	adds	r3, #12
    eae8:	6819      	ldr	r1, [r3, #0]
    eaea:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eaee:	4613      	mov	r3, r2
    eaf0:	005b      	lsls	r3, r3, #1
    eaf2:	4413      	add	r3, r2
    eaf4:	00db      	lsls	r3, r3, #3
    eaf6:	440b      	add	r3, r1
    eaf8:	f103 0008 	add.w	r0, r3, #8
    eafc:	493c      	ldr	r1, [pc, #240]	; (ebf0 <Pwm_DeInit+0x128>)
    eafe:	9a02      	ldr	r2, [sp, #8]
    eb00:	4613      	mov	r3, r2
    eb02:	009b      	lsls	r3, r3, #2
    eb04:	4413      	add	r3, r2
    eb06:	009b      	lsls	r3, r3, #2
    eb08:	440b      	add	r3, r1
    eb0a:	330c      	adds	r3, #12
    eb0c:	6819      	ldr	r1, [r3, #0]
    eb0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb12:	4613      	mov	r3, r2
    eb14:	005b      	lsls	r3, r3, #1
    eb16:	4413      	add	r3, r2
    eb18:	00db      	lsls	r3, r3, #3
    eb1a:	440b      	add	r3, r1
    eb1c:	695b      	ldr	r3, [r3, #20]
    eb1e:	4619      	mov	r1, r3
    eb20:	f000 f996 	bl	ee50 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    eb24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb28:	3301      	adds	r3, #1
    eb2a:	f88d 300f 	strb.w	r3, [sp, #15]
    eb2e:	4930      	ldr	r1, [pc, #192]	; (ebf0 <Pwm_DeInit+0x128>)
    eb30:	9a02      	ldr	r2, [sp, #8]
    eb32:	4613      	mov	r3, r2
    eb34:	009b      	lsls	r3, r3, #2
    eb36:	4413      	add	r3, r2
    eb38:	009b      	lsls	r3, r3, #2
    eb3a:	440b      	add	r3, r1
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	781b      	ldrb	r3, [r3, #0]
    eb40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb44:	429a      	cmp	r2, r3
    eb46:	d3c7      	bcc.n	ead8 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    eb48:	4929      	ldr	r1, [pc, #164]	; (ebf0 <Pwm_DeInit+0x128>)
    eb4a:	9a02      	ldr	r2, [sp, #8]
    eb4c:	4613      	mov	r3, r2
    eb4e:	009b      	lsls	r3, r3, #2
    eb50:	4413      	add	r3, r2
    eb52:	009b      	lsls	r3, r3, #2
    eb54:	440b      	add	r3, r1
    eb56:	681b      	ldr	r3, [r3, #0]
    eb58:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    eb5a:	2300      	movs	r3, #0
    eb5c:	f88d 300f 	strb.w	r3, [sp, #15]
    eb60:	e010      	b.n	eb84 <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    eb62:	9b01      	ldr	r3, [sp, #4]
    eb64:	68d9      	ldr	r1, [r3, #12]
    eb66:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb6a:	4613      	mov	r3, r2
    eb6c:	005b      	lsls	r3, r3, #1
    eb6e:	4413      	add	r3, r2
    eb70:	009b      	lsls	r3, r3, #2
    eb72:	440b      	add	r3, r1
    eb74:	4618      	mov	r0, r3
    eb76:	f000 f98b 	bl	ee90 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    eb7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb7e:	3301      	adds	r3, #1
    eb80:	f88d 300f 	strb.w	r3, [sp, #15]
    eb84:	491a      	ldr	r1, [pc, #104]	; (ebf0 <Pwm_DeInit+0x128>)
    eb86:	9a02      	ldr	r2, [sp, #8]
    eb88:	4613      	mov	r3, r2
    eb8a:	009b      	lsls	r3, r3, #2
    eb8c:	4413      	add	r3, r2
    eb8e:	009b      	lsls	r3, r3, #2
    eb90:	440b      	add	r3, r1
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	7a1b      	ldrb	r3, [r3, #8]
    eb96:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb9a:	429a      	cmp	r2, r3
    eb9c:	d3e1      	bcc.n	eb62 <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    eb9e:	4914      	ldr	r1, [pc, #80]	; (ebf0 <Pwm_DeInit+0x128>)
    eba0:	9a02      	ldr	r2, [sp, #8]
    eba2:	4613      	mov	r3, r2
    eba4:	009b      	lsls	r3, r3, #2
    eba6:	4413      	add	r3, r2
    eba8:	009b      	lsls	r3, r3, #2
    ebaa:	440b      	add	r3, r1
    ebac:	2200      	movs	r2, #0
    ebae:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    ebb0:	2300      	movs	r3, #0
    ebb2:	f88d 300f 	strb.w	r3, [sp, #15]
    ebb6:	e011      	b.n	ebdc <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    ebb8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ebbc:	480c      	ldr	r0, [pc, #48]	; (ebf0 <Pwm_DeInit+0x128>)
    ebbe:	9a02      	ldr	r2, [sp, #8]
    ebc0:	4613      	mov	r3, r2
    ebc2:	009b      	lsls	r3, r3, #2
    ebc4:	4413      	add	r3, r2
    ebc6:	440b      	add	r3, r1
    ebc8:	3302      	adds	r3, #2
    ebca:	009b      	lsls	r3, r3, #2
    ebcc:	4403      	add	r3, r0
    ebce:	2200      	movs	r2, #0
    ebd0:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    ebd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ebd6:	3301      	adds	r3, #1
    ebd8:	f88d 300f 	strb.w	r3, [sp, #15]
    ebdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d0e9      	beq.n	ebb8 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    ebe4:	bf00      	nop
    ebe6:	bf00      	nop
    ebe8:	b005      	add	sp, #20
    ebea:	f85d fb04 	ldr.w	pc, [sp], #4
    ebee:	bf00      	nop
    ebf0:	1fff8b38 	.word	0x1fff8b38

0000ebf4 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    ebf4:	b500      	push	{lr}
    ebf6:	b087      	sub	sp, #28
    ebf8:	4603      	mov	r3, r0
    ebfa:	460a      	mov	r2, r1
    ebfc:	f88d 3007 	strb.w	r3, [sp, #7]
    ec00:	4613      	mov	r3, r2
    ec02:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    ec06:	2300      	movs	r3, #0
    ec08:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ec0c:	2300      	movs	r3, #0
    ec0e:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ec10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec14:	4619      	mov	r1, r3
    ec16:	9804      	ldr	r0, [sp, #16]
    ec18:	f7ff fec8 	bl	e9ac <Pwm_GetPartitionChannelIdx>
    ec1c:	4603      	mov	r3, r0
    ec1e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ec22:	490f      	ldr	r1, [pc, #60]	; (ec60 <Pwm_SetDutyCycle+0x6c>)
    ec24:	9a04      	ldr	r2, [sp, #16]
    ec26:	4613      	mov	r3, r2
    ec28:	009b      	lsls	r3, r3, #2
    ec2a:	4413      	add	r3, r2
    ec2c:	009b      	lsls	r3, r3, #2
    ec2e:	440b      	add	r3, r1
    ec30:	330c      	adds	r3, #12
    ec32:	6819      	ldr	r1, [r3, #0]
    ec34:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ec38:	4613      	mov	r3, r2
    ec3a:	005b      	lsls	r3, r3, #1
    ec3c:	4413      	add	r3, r2
    ec3e:	00db      	lsls	r3, r3, #3
    ec40:	440b      	add	r3, r1
    ec42:	f103 0208 	add.w	r2, r3, #8
    ec46:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ec4a:	4611      	mov	r1, r2
    ec4c:	4618      	mov	r0, r3
    ec4e:	f000 f93b 	bl	eec8 <Pwm_Ipw_SetDutyCycle>
    ec52:	4603      	mov	r3, r0
    ec54:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ec58:	bf00      	nop
    ec5a:	b007      	add	sp, #28
    ec5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ec60:	1fff8b38 	.word	0x1fff8b38

0000ec64 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    ec64:	b500      	push	{lr}
    ec66:	b085      	sub	sp, #20
    ec68:	4603      	mov	r3, r0
    ec6a:	f88d 3007 	strb.w	r3, [sp, #7]
    ec6e:	460b      	mov	r3, r1
    ec70:	f8ad 3004 	strh.w	r3, [sp, #4]
    ec74:	4613      	mov	r3, r2
    ec76:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ec7a:	2300      	movs	r3, #0
    ec7c:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ec7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec82:	4619      	mov	r1, r3
    ec84:	9803      	ldr	r0, [sp, #12]
    ec86:	f7ff fe91 	bl	e9ac <Pwm_GetPartitionChannelIdx>
    ec8a:	4603      	mov	r3, r0
    ec8c:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ec90:	490e      	ldr	r1, [pc, #56]	; (eccc <Pwm_SetPeriodAndDuty+0x68>)
    ec92:	9a03      	ldr	r2, [sp, #12]
    ec94:	4613      	mov	r3, r2
    ec96:	009b      	lsls	r3, r3, #2
    ec98:	4413      	add	r3, r2
    ec9a:	009b      	lsls	r3, r3, #2
    ec9c:	440b      	add	r3, r1
    ec9e:	330c      	adds	r3, #12
    eca0:	6819      	ldr	r1, [r3, #0]
    eca2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    eca6:	4613      	mov	r3, r2
    eca8:	005b      	lsls	r3, r3, #1
    ecaa:	4413      	add	r3, r2
    ecac:	00db      	lsls	r3, r3, #3
    ecae:	440b      	add	r3, r1
    ecb0:	f103 0208 	add.w	r2, r3, #8
    ecb4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ecb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ecbc:	4618      	mov	r0, r3
    ecbe:	f000 f94f 	bl	ef60 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ecc2:	bf00      	nop
    ecc4:	b005      	add	sp, #20
    ecc6:	f85d fb04 	ldr.w	pc, [sp], #4
    ecca:	bf00      	nop
    eccc:	1fff8b38 	.word	0x1fff8b38

0000ecd0 <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
    ecd0:	b500      	push	{lr}
    ecd2:	b085      	sub	sp, #20
    ecd4:	4603      	mov	r3, r0
    ecd6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ecda:	2300      	movs	r3, #0
    ecdc:	9303      	str	r3, [sp, #12]
#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ecde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ece2:	4619      	mov	r1, r3
    ece4:	9803      	ldr	r0, [sp, #12]
    ece6:	f7ff fe61 	bl	e9ac <Pwm_GetPartitionChannelIdx>
    ecea:	4603      	mov	r3, r0
    ecec:	f88d 300b 	strb.w	r3, [sp, #11]
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ecf0:	491a      	ldr	r1, [pc, #104]	; (ed5c <Pwm_SetOutputToIdle+0x8c>)
    ecf2:	9a03      	ldr	r2, [sp, #12]
    ecf4:	4613      	mov	r3, r2
    ecf6:	009b      	lsls	r3, r3, #2
    ecf8:	4413      	add	r3, r2
    ecfa:	009b      	lsls	r3, r3, #2
    ecfc:	440b      	add	r3, r1
    ecfe:	330c      	adds	r3, #12
    ed00:	6819      	ldr	r1, [r3, #0]
    ed02:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ed06:	4613      	mov	r3, r2
    ed08:	005b      	lsls	r3, r3, #1
    ed0a:	4413      	add	r3, r2
    ed0c:	00db      	lsls	r3, r3, #3
    ed0e:	440b      	add	r3, r1
    ed10:	6958      	ldr	r0, [r3, #20]
    ed12:	4912      	ldr	r1, [pc, #72]	; (ed5c <Pwm_SetOutputToIdle+0x8c>)
    ed14:	9a03      	ldr	r2, [sp, #12]
    ed16:	4613      	mov	r3, r2
    ed18:	009b      	lsls	r3, r3, #2
    ed1a:	4413      	add	r3, r2
    ed1c:	009b      	lsls	r3, r3, #2
    ed1e:	440b      	add	r3, r1
    ed20:	330c      	adds	r3, #12
    ed22:	6819      	ldr	r1, [r3, #0]
    ed24:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ed28:	4613      	mov	r3, r2
    ed2a:	005b      	lsls	r3, r3, #1
    ed2c:	4413      	add	r3, r2
    ed2e:	00db      	lsls	r3, r3, #3
    ed30:	440b      	add	r3, r1
    ed32:	3308      	adds	r3, #8
    ed34:	4619      	mov	r1, r3
    ed36:	f000 f959 	bl	efec <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
    ed3a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    ed3e:	4807      	ldr	r0, [pc, #28]	; (ed5c <Pwm_SetOutputToIdle+0x8c>)
    ed40:	9a03      	ldr	r2, [sp, #12]
    ed42:	4613      	mov	r3, r2
    ed44:	009b      	lsls	r3, r3, #2
    ed46:	4413      	add	r3, r2
    ed48:	009b      	lsls	r3, r3, #2
    ed4a:	4403      	add	r3, r0
    ed4c:	440b      	add	r3, r1
    ed4e:	3310      	adds	r3, #16
    ed50:	2201      	movs	r2, #1
    ed52:	701a      	strb	r2, [r3, #0]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ed54:	bf00      	nop
    ed56:	b005      	add	sp, #20
    ed58:	f85d fb04 	ldr.w	pc, [sp], #4
    ed5c:	1fff8b38 	.word	0x1fff8b38

0000ed60 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    ed60:	b410      	push	{r4}
    ed62:	b083      	sub	sp, #12
    ed64:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    ed66:	9b01      	ldr	r3, [sp, #4]
    ed68:	681b      	ldr	r3, [r3, #0]
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d010      	beq.n	ed90 <Pwm_Ipw_Init+0x30>
    ed6e:	2b01      	cmp	r3, #1
    ed70:	d110      	bne.n	ed94 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    ed72:	9b01      	ldr	r3, [sp, #4]
    ed74:	7a1b      	ldrb	r3, [r3, #8]
    ed76:	461c      	mov	r4, r3
    ed78:	9b01      	ldr	r3, [sp, #4]
    ed7a:	685b      	ldr	r3, [r3, #4]
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	4618      	mov	r0, r3
    ed80:	9b01      	ldr	r3, [sp, #4]
    ed82:	8959      	ldrh	r1, [r3, #10]
    ed84:	4a06      	ldr	r2, [pc, #24]	; (eda0 <Pwm_Ipw_Init+0x40>)
    ed86:	00e3      	lsls	r3, r4, #3
    ed88:	4403      	add	r3, r0
    ed8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ed8e:	e002      	b.n	ed96 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ed90:	bf00      	nop
    ed92:	e000      	b.n	ed96 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    ed94:	bf00      	nop
    }
}
    ed96:	bf00      	nop
    ed98:	b003      	add	sp, #12
    ed9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ed9e:	4770      	bx	lr
    eda0:	1fff91a8 	.word	0x1fff91a8

0000eda4 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    eda4:	b500      	push	{lr}
    eda6:	b085      	sub	sp, #20
    eda8:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    edaa:	2300      	movs	r3, #0
    edac:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    edb0:	2300      	movs	r3, #0
    edb2:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    edb6:	9b01      	ldr	r3, [sp, #4]
    edb8:	685b      	ldr	r3, [r3, #4]
    edba:	2b00      	cmp	r3, #0
    edbc:	d03c      	beq.n	ee38 <Pwm_Ipw_InitInstance+0x94>
    edbe:	2b01      	cmp	r3, #1
    edc0:	d13c      	bne.n	ee3c <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    edc2:	9b01      	ldr	r3, [sp, #4]
    edc4:	689b      	ldr	r3, [r3, #8]
    edc6:	2b00      	cmp	r3, #0
    edc8:	d03a      	beq.n	ee40 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    edca:	9b01      	ldr	r3, [sp, #4]
    edcc:	781a      	ldrb	r2, [r3, #0]
    edce:	9b01      	ldr	r3, [sp, #4]
    edd0:	689b      	ldr	r3, [r3, #8]
    edd2:	4619      	mov	r1, r3
    edd4:	4610      	mov	r0, r2
    edd6:	f7fe fe8f 	bl	daf8 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    edda:	2300      	movs	r3, #0
    eddc:	f88d 300f 	strb.w	r3, [sp, #15]
    ede0:	e022      	b.n	ee28 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    ede2:	9b01      	ldr	r3, [sp, #4]
    ede4:	689b      	ldr	r3, [r3, #8]
    ede6:	685a      	ldr	r2, [r3, #4]
    ede8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edec:	009b      	lsls	r3, r3, #2
    edee:	4413      	add	r3, r2
    edf0:	681b      	ldr	r3, [r3, #0]
    edf2:	781b      	ldrb	r3, [r3, #0]
    edf4:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    edf8:	9b01      	ldr	r3, [sp, #4]
    edfa:	689b      	ldr	r3, [r3, #8]
    edfc:	685a      	ldr	r2, [r3, #4]
    edfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ee02:	009b      	lsls	r3, r3, #2
    ee04:	4413      	add	r3, r2
    ee06:	681a      	ldr	r2, [r3, #0]
    ee08:	9b01      	ldr	r3, [sp, #4]
    ee0a:	781b      	ldrb	r3, [r3, #0]
    ee0c:	4619      	mov	r1, r3
    ee0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ee12:	6a12      	ldr	r2, [r2, #32]
    ee14:	480d      	ldr	r0, [pc, #52]	; (ee4c <Pwm_Ipw_InitInstance+0xa8>)
    ee16:	00c9      	lsls	r1, r1, #3
    ee18:	440b      	add	r3, r1
    ee1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    ee1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ee22:	3301      	adds	r3, #1
    ee24:	f88d 300f 	strb.w	r3, [sp, #15]
    ee28:	9b01      	ldr	r3, [sp, #4]
    ee2a:	689b      	ldr	r3, [r3, #8]
    ee2c:	7a1b      	ldrb	r3, [r3, #8]
    ee2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ee32:	429a      	cmp	r2, r3
    ee34:	d3d5      	bcc.n	ede2 <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    ee36:	e003      	b.n	ee40 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ee38:	bf00      	nop
    ee3a:	e002      	b.n	ee42 <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    ee3c:	bf00      	nop
    ee3e:	e000      	b.n	ee42 <Pwm_Ipw_InitInstance+0x9e>
            break;
    ee40:	bf00      	nop
    }
}
    ee42:	bf00      	nop
    ee44:	b005      	add	sp, #20
    ee46:	f85d fb04 	ldr.w	pc, [sp], #4
    ee4a:	bf00      	nop
    ee4c:	1fff9128 	.word	0x1fff9128

0000ee50 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    ee50:	b082      	sub	sp, #8
    ee52:	9001      	str	r0, [sp, #4]
    ee54:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	681b      	ldr	r3, [r3, #0]
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	d00f      	beq.n	ee7e <Pwm_Ipw_DeInit+0x2e>
    ee5e:	2b01      	cmp	r3, #1
    ee60:	d10f      	bne.n	ee82 <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    ee62:	9b01      	ldr	r3, [sp, #4]
    ee64:	7a1b      	ldrb	r3, [r3, #8]
    ee66:	4618      	mov	r0, r3
    ee68:	9b01      	ldr	r3, [sp, #4]
    ee6a:	685b      	ldr	r3, [r3, #4]
    ee6c:	781b      	ldrb	r3, [r3, #0]
    ee6e:	4619      	mov	r1, r3
    ee70:	4a06      	ldr	r2, [pc, #24]	; (ee8c <Pwm_Ipw_DeInit+0x3c>)
    ee72:	00c3      	lsls	r3, r0, #3
    ee74:	440b      	add	r3, r1
    ee76:	2100      	movs	r1, #0
    ee78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ee7c:	e002      	b.n	ee84 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ee7e:	bf00      	nop
    ee80:	e000      	b.n	ee84 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    ee82:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    ee84:	bf00      	nop
    ee86:	b002      	add	sp, #8
    ee88:	4770      	bx	lr
    ee8a:	bf00      	nop
    ee8c:	1fff91a8 	.word	0x1fff91a8

0000ee90 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ee90:	b500      	push	{lr}
    ee92:	b083      	sub	sp, #12
    ee94:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    ee96:	9b01      	ldr	r3, [sp, #4]
    ee98:	685b      	ldr	r3, [r3, #4]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d00b      	beq.n	eeb6 <Pwm_Ipw_DeInitInstance+0x26>
    ee9e:	2b01      	cmp	r3, #1
    eea0:	d10b      	bne.n	eeba <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    eea2:	9b01      	ldr	r3, [sp, #4]
    eea4:	689b      	ldr	r3, [r3, #8]
    eea6:	2b00      	cmp	r3, #0
    eea8:	d009      	beq.n	eebe <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    eeaa:	9b01      	ldr	r3, [sp, #4]
    eeac:	781b      	ldrb	r3, [r3, #0]
    eeae:	4618      	mov	r0, r3
    eeb0:	f7fe fe80 	bl	dbb4 <Ftm_Pwm_Ip_DeInit>
            }
            break;
    eeb4:	e003      	b.n	eebe <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    eeb6:	bf00      	nop
    eeb8:	e002      	b.n	eec0 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    eeba:	bf00      	nop
    eebc:	e000      	b.n	eec0 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    eebe:	bf00      	nop
    }
}
    eec0:	bf00      	nop
    eec2:	b003      	add	sp, #12
    eec4:	f85d fb04 	ldr.w	pc, [sp], #4

0000eec8 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    eec8:	b500      	push	{lr}
    eeca:	b085      	sub	sp, #20
    eecc:	4603      	mov	r3, r0
    eece:	9100      	str	r1, [sp, #0]
    eed0:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    eed4:	2300      	movs	r3, #0
    eed6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    eeda:	2300      	movs	r3, #0
    eedc:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    eee0:	9b00      	ldr	r3, [sp, #0]
    eee2:	681b      	ldr	r3, [r3, #0]
    eee4:	2b00      	cmp	r3, #0
    eee6:	d02c      	beq.n	ef42 <Pwm_Ipw_SetDutyCycle+0x7a>
    eee8:	2b01      	cmp	r3, #1
    eeea:	d12c      	bne.n	ef46 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    eeec:	9b00      	ldr	r3, [sp, #0]
    eeee:	685b      	ldr	r3, [r3, #4]
    eef0:	2b00      	cmp	r3, #0
    eef2:	d02a      	beq.n	ef4a <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    eef4:	9b00      	ldr	r3, [sp, #0]
    eef6:	7a1b      	ldrb	r3, [r3, #8]
    eef8:	461a      	mov	r2, r3
    eefa:	4b17      	ldr	r3, [pc, #92]	; (ef58 <Pwm_Ipw_SetDutyCycle+0x90>)
    eefc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    ef00:	461a      	mov	r2, r3
    ef02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ef06:	fb02 f303 	mul.w	r3, r2, r3
    ef0a:	0bdb      	lsrs	r3, r3, #15
    ef0c:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    ef10:	9b00      	ldr	r3, [sp, #0]
    ef12:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    ef14:	9b00      	ldr	r3, [sp, #0]
    ef16:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    ef18:	7819      	ldrb	r1, [r3, #0]
    ef1a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ef1e:	2301      	movs	r3, #1
    ef20:	f7fe fe90 	bl	dc44 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    ef24:	9b00      	ldr	r3, [sp, #0]
    ef26:	7a1b      	ldrb	r3, [r3, #8]
    ef28:	4618      	mov	r0, r3
    ef2a:	9b00      	ldr	r3, [sp, #0]
    ef2c:	685b      	ldr	r3, [r3, #4]
    ef2e:	781b      	ldrb	r3, [r3, #0]
    ef30:	461a      	mov	r2, r3
    ef32:	490a      	ldr	r1, [pc, #40]	; (ef5c <Pwm_Ipw_SetDutyCycle+0x94>)
    ef34:	00c3      	lsls	r3, r0, #3
    ef36:	4413      	add	r3, r2
    ef38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ef3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ef40:	e003      	b.n	ef4a <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ef42:	bf00      	nop
    ef44:	e002      	b.n	ef4c <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    ef46:	bf00      	nop
    ef48:	e000      	b.n	ef4c <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    ef4a:	bf00      	nop
    }

    return RetVal;
    ef4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    ef50:	4618      	mov	r0, r3
    ef52:	b005      	add	sp, #20
    ef54:	f85d fb04 	ldr.w	pc, [sp], #4
    ef58:	1fff8e00 	.word	0x1fff8e00
    ef5c:	1fff91a8 	.word	0x1fff91a8

0000ef60 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    ef60:	b510      	push	{r4, lr}
    ef62:	b086      	sub	sp, #24
    ef64:	4603      	mov	r3, r0
    ef66:	9202      	str	r2, [sp, #8]
    ef68:	f8ad 300e 	strh.w	r3, [sp, #14]
    ef6c:	460b      	mov	r3, r1
    ef6e:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    ef72:	2300      	movs	r3, #0
    ef74:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    ef78:	9b02      	ldr	r3, [sp, #8]
    ef7a:	681b      	ldr	r3, [r3, #0]
    ef7c:	2b00      	cmp	r3, #0
    ef7e:	d02a      	beq.n	efd6 <Pwm_Ipw_SetPeriodAndDuty+0x76>
    ef80:	2b01      	cmp	r3, #1
    ef82:	d12a      	bne.n	efda <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    ef84:	9b02      	ldr	r3, [sp, #8]
    ef86:	685b      	ldr	r3, [r3, #4]
    ef88:	2b00      	cmp	r3, #0
    ef8a:	d028      	beq.n	efde <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    ef8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ef90:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ef94:	fb02 f303 	mul.w	r3, r2, r3
    ef98:	0bdb      	lsrs	r3, r3, #15
    ef9a:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ef9e:	9b02      	ldr	r3, [sp, #8]
    efa0:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    efa2:	9b02      	ldr	r3, [sp, #8]
    efa4:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    efa6:	7819      	ldrb	r1, [r3, #0]
    efa8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    efac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    efb0:	2401      	movs	r4, #1
    efb2:	9400      	str	r4, [sp, #0]
    efb4:	f7fe ff0c 	bl	ddd0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    efb8:	9b02      	ldr	r3, [sp, #8]
    efba:	7a1b      	ldrb	r3, [r3, #8]
    efbc:	4618      	mov	r0, r3
    efbe:	9b02      	ldr	r3, [sp, #8]
    efc0:	685b      	ldr	r3, [r3, #4]
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	461a      	mov	r2, r3
    efc6:	4908      	ldr	r1, [pc, #32]	; (efe8 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    efc8:	00c3      	lsls	r3, r0, #3
    efca:	4413      	add	r3, r2
    efcc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    efd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    efd4:	e003      	b.n	efde <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    efd6:	bf00      	nop
    efd8:	e002      	b.n	efe0 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    efda:	bf00      	nop
    efdc:	e000      	b.n	efe0 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    efde:	bf00      	nop
    }
}
    efe0:	bf00      	nop
    efe2:	b006      	add	sp, #24
    efe4:	bd10      	pop	{r4, pc}
    efe6:	bf00      	nop
    efe8:	1fff91a8 	.word	0x1fff91a8

0000efec <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
    efec:	b500      	push	{lr}
    efee:	b085      	sub	sp, #20
    eff0:	9001      	str	r0, [sp, #4]
    eff2:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
    eff4:	9b00      	ldr	r3, [sp, #0]
    eff6:	7a1b      	ldrb	r3, [r3, #8]
    eff8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
    effc:	9b00      	ldr	r3, [sp, #0]
    effe:	685b      	ldr	r3, [r3, #4]
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
    f006:	9b00      	ldr	r3, [sp, #0]
    f008:	681b      	ldr	r3, [r3, #0]
    f00a:	2b00      	cmp	r3, #0
    f00c:	d02e      	beq.n	f06c <Pwm_Ipw_SetOutputToIdle+0x80>
    f00e:	2b01      	cmp	r3, #1
    f010:	d12e      	bne.n	f070 <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    f012:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f016:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f01a:	4919      	ldr	r1, [pc, #100]	; (f080 <Pwm_Ipw_SetOutputToIdle+0x94>)
    f01c:	00d2      	lsls	r2, r2, #3
    f01e:	4413      	add	r3, r2
    f020:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f024:	2b01      	cmp	r3, #1
    f026:	d125      	bne.n	f074 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
    f028:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f02c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f030:	4913      	ldr	r1, [pc, #76]	; (f080 <Pwm_Ipw_SetOutputToIdle+0x94>)
    f032:	00d2      	lsls	r2, r2, #3
    f034:	4413      	add	r3, r2
    f036:	2202      	movs	r2, #2
    f038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
    f03c:	9b00      	ldr	r3, [sp, #0]
    f03e:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
    f040:	69da      	ldr	r2, [r3, #28]
    f042:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f046:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f04a:	2301      	movs	r3, #1
    f04c:	f7fe ff30 	bl	deb0 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    f050:	9b00      	ldr	r3, [sp, #0]
    f052:	7a1b      	ldrb	r3, [r3, #8]
    f054:	4618      	mov	r0, r3
    f056:	9b00      	ldr	r3, [sp, #0]
    f058:	685b      	ldr	r3, [r3, #4]
    f05a:	781b      	ldrb	r3, [r3, #0]
    f05c:	4619      	mov	r1, r3
    f05e:	4a09      	ldr	r2, [pc, #36]	; (f084 <Pwm_Ipw_SetOutputToIdle+0x98>)
    f060:	00c3      	lsls	r3, r0, #3
    f062:	440b      	add	r3, r1
    f064:	2100      	movs	r1, #0
    f066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
    f06a:	e003      	b.n	f074 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    f06c:	bf00      	nop
    f06e:	e002      	b.n	f076 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
    f070:	bf00      	nop
    f072:	e000      	b.n	f076 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
    f074:	bf00      	nop
    }

    (void) IdleState;

}
    f076:	bf00      	nop
    f078:	b005      	add	sp, #20
    f07a:	f85d fb04 	ldr.w	pc, [sp], #4
    f07e:	bf00      	nop
    f080:	1fff8fd8 	.word	0x1fff8fd8
    f084:	1fff91a8 	.word	0x1fff91a8

0000f088 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    f088:	b084      	sub	sp, #16
    f08a:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    f08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f090:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    f092:	9b01      	ldr	r3, [sp, #4]
    f094:	681b      	ldr	r3, [r3, #0]
    f096:	2b01      	cmp	r3, #1
    f098:	d103      	bne.n	f0a2 <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    f09a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    f09e:	9303      	str	r3, [sp, #12]
            break;
    f0a0:	e000      	b.n	f0a4 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    f0a2:	bf00      	nop
    }

    return RetVal;
    f0a4:	9b03      	ldr	r3, [sp, #12]
}
    f0a6:	4618      	mov	r0, r3
    f0a8:	b004      	add	sp, #16
    f0aa:	4770      	bx	lr

0000f0ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    f0ac:	b500      	push	{lr}
    f0ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0b0:	f7f2 fbca 	bl	1848 <Sys_GetCoreID>
    f0b4:	4603      	mov	r3, r0
    f0b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    f0b8:	4a10      	ldr	r2, [pc, #64]	; (f0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0ba:	9b01      	ldr	r3, [sp, #4]
    f0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c0:	2b00      	cmp	r3, #0
    f0c2:	d10d      	bne.n	f0e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0c4:	f7f1 fda0 	bl	c08 <Adc_schm_read_msr>
    f0c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0ca:	9b00      	ldr	r3, [sp, #0]
    f0cc:	f003 0301 	and.w	r3, r3, #1
    f0d0:	2b00      	cmp	r3, #0
    f0d2:	d100      	bne.n	f0d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f0d6:	490a      	ldr	r1, [pc, #40]	; (f100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    f0d8:	9b01      	ldr	r3, [sp, #4]
    f0da:	9a00      	ldr	r2, [sp, #0]
    f0dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    f0e0:	4a06      	ldr	r2, [pc, #24]	; (f0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0e2:	9b01      	ldr	r3, [sp, #4]
    f0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e8:	1c5a      	adds	r2, r3, #1
    f0ea:	4904      	ldr	r1, [pc, #16]	; (f0fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0ec:	9b01      	ldr	r3, [sp, #4]
    f0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0f2:	bf00      	nop
    f0f4:	b003      	add	sp, #12
    f0f6:	f85d fb04 	ldr.w	pc, [sp], #4
    f0fa:	bf00      	nop
    f0fc:	1fff91ec 	.word	0x1fff91ec
    f100:	1fff91e8 	.word	0x1fff91e8

0000f104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    f104:	b500      	push	{lr}
    f106:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f108:	f7f2 fb9e 	bl	1848 <Sys_GetCoreID>
    f10c:	4603      	mov	r3, r0
    f10e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    f110:	4a0d      	ldr	r2, [pc, #52]	; (f148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f112:	9b01      	ldr	r3, [sp, #4]
    f114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f118:	1e5a      	subs	r2, r3, #1
    f11a:	490b      	ldr	r1, [pc, #44]	; (f148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f11c:	9b01      	ldr	r3, [sp, #4]
    f11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f122:	4a0a      	ldr	r2, [pc, #40]	; (f14c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    f124:	9b01      	ldr	r3, [sp, #4]
    f126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f12a:	f003 0301 	and.w	r3, r3, #1
    f12e:	2b00      	cmp	r3, #0
    f130:	d106      	bne.n	f140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    f132:	4a05      	ldr	r2, [pc, #20]	; (f148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f134:	9b01      	ldr	r3, [sp, #4]
    f136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f13a:	2b00      	cmp	r3, #0
    f13c:	d100      	bne.n	f140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f13e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f140:	bf00      	nop
    f142:	b003      	add	sp, #12
    f144:	f85d fb04 	ldr.w	pc, [sp], #4
    f148:	1fff91ec 	.word	0x1fff91ec
    f14c:	1fff91e8 	.word	0x1fff91e8

0000f150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    f150:	b500      	push	{lr}
    f152:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f154:	f7f2 fb78 	bl	1848 <Sys_GetCoreID>
    f158:	4603      	mov	r3, r0
    f15a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    f15c:	4a10      	ldr	r2, [pc, #64]	; (f1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f15e:	9b01      	ldr	r3, [sp, #4]
    f160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f164:	2b00      	cmp	r3, #0
    f166:	d10d      	bne.n	f184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f168:	f7f1 fd4e 	bl	c08 <Adc_schm_read_msr>
    f16c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f16e:	9b00      	ldr	r3, [sp, #0]
    f170:	f003 0301 	and.w	r3, r3, #1
    f174:	2b00      	cmp	r3, #0
    f176:	d100      	bne.n	f17a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f178:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f17a:	490a      	ldr	r1, [pc, #40]	; (f1a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    f17c:	9b01      	ldr	r3, [sp, #4]
    f17e:	9a00      	ldr	r2, [sp, #0]
    f180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    f184:	4a06      	ldr	r2, [pc, #24]	; (f1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f186:	9b01      	ldr	r3, [sp, #4]
    f188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f18c:	1c5a      	adds	r2, r3, #1
    f18e:	4904      	ldr	r1, [pc, #16]	; (f1a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f190:	9b01      	ldr	r3, [sp, #4]
    f192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f196:	bf00      	nop
    f198:	b003      	add	sp, #12
    f19a:	f85d fb04 	ldr.w	pc, [sp], #4
    f19e:	bf00      	nop
    f1a0:	1fff91f4 	.word	0x1fff91f4
    f1a4:	1fff91f0 	.word	0x1fff91f0

0000f1a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    f1a8:	b500      	push	{lr}
    f1aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1ac:	f7f2 fb4c 	bl	1848 <Sys_GetCoreID>
    f1b0:	4603      	mov	r3, r0
    f1b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    f1b4:	4a0d      	ldr	r2, [pc, #52]	; (f1ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f1b6:	9b01      	ldr	r3, [sp, #4]
    f1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1bc:	1e5a      	subs	r2, r3, #1
    f1be:	490b      	ldr	r1, [pc, #44]	; (f1ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f1c0:	9b01      	ldr	r3, [sp, #4]
    f1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f1c6:	4a0a      	ldr	r2, [pc, #40]	; (f1f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    f1c8:	9b01      	ldr	r3, [sp, #4]
    f1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ce:	f003 0301 	and.w	r3, r3, #1
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d106      	bne.n	f1e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    f1d6:	4a05      	ldr	r2, [pc, #20]	; (f1ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f1d8:	9b01      	ldr	r3, [sp, #4]
    f1da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d100      	bne.n	f1e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1e4:	bf00      	nop
    f1e6:	b003      	add	sp, #12
    f1e8:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ec:	1fff91f4 	.word	0x1fff91f4
    f1f0:	1fff91f0 	.word	0x1fff91f0

0000f1f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    f1f4:	b500      	push	{lr}
    f1f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1f8:	f7f2 fb26 	bl	1848 <Sys_GetCoreID>
    f1fc:	4603      	mov	r3, r0
    f1fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    f200:	4a10      	ldr	r2, [pc, #64]	; (f244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f202:	9b01      	ldr	r3, [sp, #4]
    f204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f208:	2b00      	cmp	r3, #0
    f20a:	d10d      	bne.n	f228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f20c:	f7f1 fcfc 	bl	c08 <Adc_schm_read_msr>
    f210:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f212:	9b00      	ldr	r3, [sp, #0]
    f214:	f003 0301 	and.w	r3, r3, #1
    f218:	2b00      	cmp	r3, #0
    f21a:	d100      	bne.n	f21e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f21c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f21e:	490a      	ldr	r1, [pc, #40]	; (f248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    f220:	9b01      	ldr	r3, [sp, #4]
    f222:	9a00      	ldr	r2, [sp, #0]
    f224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    f228:	4a06      	ldr	r2, [pc, #24]	; (f244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f22a:	9b01      	ldr	r3, [sp, #4]
    f22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f230:	1c5a      	adds	r2, r3, #1
    f232:	4904      	ldr	r1, [pc, #16]	; (f244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f234:	9b01      	ldr	r3, [sp, #4]
    f236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f23a:	bf00      	nop
    f23c:	b003      	add	sp, #12
    f23e:	f85d fb04 	ldr.w	pc, [sp], #4
    f242:	bf00      	nop
    f244:	1fff91fc 	.word	0x1fff91fc
    f248:	1fff91f8 	.word	0x1fff91f8

0000f24c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    f24c:	b500      	push	{lr}
    f24e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f250:	f7f2 fafa 	bl	1848 <Sys_GetCoreID>
    f254:	4603      	mov	r3, r0
    f256:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    f258:	4a0d      	ldr	r2, [pc, #52]	; (f290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f25a:	9b01      	ldr	r3, [sp, #4]
    f25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f260:	1e5a      	subs	r2, r3, #1
    f262:	490b      	ldr	r1, [pc, #44]	; (f290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f264:	9b01      	ldr	r3, [sp, #4]
    f266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f26a:	4a0a      	ldr	r2, [pc, #40]	; (f294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    f26c:	9b01      	ldr	r3, [sp, #4]
    f26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f272:	f003 0301 	and.w	r3, r3, #1
    f276:	2b00      	cmp	r3, #0
    f278:	d106      	bne.n	f288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    f27a:	4a05      	ldr	r2, [pc, #20]	; (f290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f27c:	9b01      	ldr	r3, [sp, #4]
    f27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f282:	2b00      	cmp	r3, #0
    f284:	d100      	bne.n	f288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f286:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f288:	bf00      	nop
    f28a:	b003      	add	sp, #12
    f28c:	f85d fb04 	ldr.w	pc, [sp], #4
    f290:	1fff91fc 	.word	0x1fff91fc
    f294:	1fff91f8 	.word	0x1fff91f8

0000f298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f298:	b500      	push	{lr}
    f29a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f29c:	f7f2 fad4 	bl	1848 <Sys_GetCoreID>
    f2a0:	4603      	mov	r3, r0
    f2a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    f2a4:	4a10      	ldr	r2, [pc, #64]	; (f2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f2a6:	9b01      	ldr	r3, [sp, #4]
    f2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d10d      	bne.n	f2cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2b0:	f7f1 fcaa 	bl	c08 <Adc_schm_read_msr>
    f2b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2b6:	9b00      	ldr	r3, [sp, #0]
    f2b8:	f003 0301 	and.w	r3, r3, #1
    f2bc:	2b00      	cmp	r3, #0
    f2be:	d100      	bne.n	f2c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f2c2:	490a      	ldr	r1, [pc, #40]	; (f2ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    f2c4:	9b01      	ldr	r3, [sp, #4]
    f2c6:	9a00      	ldr	r2, [sp, #0]
    f2c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    f2cc:	4a06      	ldr	r2, [pc, #24]	; (f2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f2ce:	9b01      	ldr	r3, [sp, #4]
    f2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d4:	1c5a      	adds	r2, r3, #1
    f2d6:	4904      	ldr	r1, [pc, #16]	; (f2e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f2d8:	9b01      	ldr	r3, [sp, #4]
    f2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2de:	bf00      	nop
    f2e0:	b003      	add	sp, #12
    f2e2:	f85d fb04 	ldr.w	pc, [sp], #4
    f2e6:	bf00      	nop
    f2e8:	1fff9204 	.word	0x1fff9204
    f2ec:	1fff9200 	.word	0x1fff9200

0000f2f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f2f0:	b500      	push	{lr}
    f2f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2f4:	f7f2 faa8 	bl	1848 <Sys_GetCoreID>
    f2f8:	4603      	mov	r3, r0
    f2fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    f2fc:	4a0d      	ldr	r2, [pc, #52]	; (f334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2fe:	9b01      	ldr	r3, [sp, #4]
    f300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f304:	1e5a      	subs	r2, r3, #1
    f306:	490b      	ldr	r1, [pc, #44]	; (f334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f308:	9b01      	ldr	r3, [sp, #4]
    f30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f30e:	4a0a      	ldr	r2, [pc, #40]	; (f338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f316:	f003 0301 	and.w	r3, r3, #1
    f31a:	2b00      	cmp	r3, #0
    f31c:	d106      	bne.n	f32c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    f31e:	4a05      	ldr	r2, [pc, #20]	; (f334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f320:	9b01      	ldr	r3, [sp, #4]
    f322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f326:	2b00      	cmp	r3, #0
    f328:	d100      	bne.n	f32c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f32a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f32c:	bf00      	nop
    f32e:	b003      	add	sp, #12
    f330:	f85d fb04 	ldr.w	pc, [sp], #4
    f334:	1fff9204 	.word	0x1fff9204
    f338:	1fff9200 	.word	0x1fff9200

0000f33c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f33c:	b500      	push	{lr}
    f33e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f340:	f7f2 fa82 	bl	1848 <Sys_GetCoreID>
    f344:	4603      	mov	r3, r0
    f346:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    f348:	4a10      	ldr	r2, [pc, #64]	; (f38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f34a:	9b01      	ldr	r3, [sp, #4]
    f34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f350:	2b00      	cmp	r3, #0
    f352:	d10d      	bne.n	f370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f354:	f7f1 fc58 	bl	c08 <Adc_schm_read_msr>
    f358:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f35a:	9b00      	ldr	r3, [sp, #0]
    f35c:	f003 0301 	and.w	r3, r3, #1
    f360:	2b00      	cmp	r3, #0
    f362:	d100      	bne.n	f366 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f364:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f366:	490a      	ldr	r1, [pc, #40]	; (f390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    f368:	9b01      	ldr	r3, [sp, #4]
    f36a:	9a00      	ldr	r2, [sp, #0]
    f36c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    f370:	4a06      	ldr	r2, [pc, #24]	; (f38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f372:	9b01      	ldr	r3, [sp, #4]
    f374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f378:	1c5a      	adds	r2, r3, #1
    f37a:	4904      	ldr	r1, [pc, #16]	; (f38c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f37c:	9b01      	ldr	r3, [sp, #4]
    f37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f382:	bf00      	nop
    f384:	b003      	add	sp, #12
    f386:	f85d fb04 	ldr.w	pc, [sp], #4
    f38a:	bf00      	nop
    f38c:	1fff920c 	.word	0x1fff920c
    f390:	1fff9208 	.word	0x1fff9208

0000f394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f394:	b500      	push	{lr}
    f396:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f398:	f7f2 fa56 	bl	1848 <Sys_GetCoreID>
    f39c:	4603      	mov	r3, r0
    f39e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    f3a0:	4a0d      	ldr	r2, [pc, #52]	; (f3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f3a2:	9b01      	ldr	r3, [sp, #4]
    f3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a8:	1e5a      	subs	r2, r3, #1
    f3aa:	490b      	ldr	r1, [pc, #44]	; (f3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f3ac:	9b01      	ldr	r3, [sp, #4]
    f3ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f3b2:	4a0a      	ldr	r2, [pc, #40]	; (f3dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    f3b4:	9b01      	ldr	r3, [sp, #4]
    f3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ba:	f003 0301 	and.w	r3, r3, #1
    f3be:	2b00      	cmp	r3, #0
    f3c0:	d106      	bne.n	f3d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    f3c2:	4a05      	ldr	r2, [pc, #20]	; (f3d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f3c4:	9b01      	ldr	r3, [sp, #4]
    f3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ca:	2b00      	cmp	r3, #0
    f3cc:	d100      	bne.n	f3d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3d0:	bf00      	nop
    f3d2:	b003      	add	sp, #12
    f3d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f3d8:	1fff920c 	.word	0x1fff920c
    f3dc:	1fff9208 	.word	0x1fff9208

0000f3e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f3e0:	b500      	push	{lr}
    f3e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3e4:	f7f2 fa30 	bl	1848 <Sys_GetCoreID>
    f3e8:	4603      	mov	r3, r0
    f3ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    f3ec:	4a10      	ldr	r2, [pc, #64]	; (f430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3ee:	9b01      	ldr	r3, [sp, #4]
    f3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d10d      	bne.n	f414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3f8:	f7f1 fc06 	bl	c08 <Adc_schm_read_msr>
    f3fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3fe:	9b00      	ldr	r3, [sp, #0]
    f400:	f003 0301 	and.w	r3, r3, #1
    f404:	2b00      	cmp	r3, #0
    f406:	d100      	bne.n	f40a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f408:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f40a:	490a      	ldr	r1, [pc, #40]	; (f434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    f40c:	9b01      	ldr	r3, [sp, #4]
    f40e:	9a00      	ldr	r2, [sp, #0]
    f410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    f414:	4a06      	ldr	r2, [pc, #24]	; (f430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f416:	9b01      	ldr	r3, [sp, #4]
    f418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f41c:	1c5a      	adds	r2, r3, #1
    f41e:	4904      	ldr	r1, [pc, #16]	; (f430 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f420:	9b01      	ldr	r3, [sp, #4]
    f422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f426:	bf00      	nop
    f428:	b003      	add	sp, #12
    f42a:	f85d fb04 	ldr.w	pc, [sp], #4
    f42e:	bf00      	nop
    f430:	1fff9214 	.word	0x1fff9214
    f434:	1fff9210 	.word	0x1fff9210

0000f438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f438:	b500      	push	{lr}
    f43a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f43c:	f7f2 fa04 	bl	1848 <Sys_GetCoreID>
    f440:	4603      	mov	r3, r0
    f442:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    f444:	4a0d      	ldr	r2, [pc, #52]	; (f47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f446:	9b01      	ldr	r3, [sp, #4]
    f448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44c:	1e5a      	subs	r2, r3, #1
    f44e:	490b      	ldr	r1, [pc, #44]	; (f47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f450:	9b01      	ldr	r3, [sp, #4]
    f452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f456:	4a0a      	ldr	r2, [pc, #40]	; (f480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    f458:	9b01      	ldr	r3, [sp, #4]
    f45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f45e:	f003 0301 	and.w	r3, r3, #1
    f462:	2b00      	cmp	r3, #0
    f464:	d106      	bne.n	f474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    f466:	4a05      	ldr	r2, [pc, #20]	; (f47c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f468:	9b01      	ldr	r3, [sp, #4]
    f46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f46e:	2b00      	cmp	r3, #0
    f470:	d100      	bne.n	f474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f472:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f474:	bf00      	nop
    f476:	b003      	add	sp, #12
    f478:	f85d fb04 	ldr.w	pc, [sp], #4
    f47c:	1fff9214 	.word	0x1fff9214
    f480:	1fff9210 	.word	0x1fff9210

0000f484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f484:	b500      	push	{lr}
    f486:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f488:	f7f2 f9de 	bl	1848 <Sys_GetCoreID>
    f48c:	4603      	mov	r3, r0
    f48e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    f490:	4a10      	ldr	r2, [pc, #64]	; (f4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f492:	9b01      	ldr	r3, [sp, #4]
    f494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f498:	2b00      	cmp	r3, #0
    f49a:	d10d      	bne.n	f4b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f49c:	f7f1 fbb4 	bl	c08 <Adc_schm_read_msr>
    f4a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4a2:	9b00      	ldr	r3, [sp, #0]
    f4a4:	f003 0301 	and.w	r3, r3, #1
    f4a8:	2b00      	cmp	r3, #0
    f4aa:	d100      	bne.n	f4ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f4ae:	490a      	ldr	r1, [pc, #40]	; (f4d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    f4b0:	9b01      	ldr	r3, [sp, #4]
    f4b2:	9a00      	ldr	r2, [sp, #0]
    f4b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    f4b8:	4a06      	ldr	r2, [pc, #24]	; (f4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f4ba:	9b01      	ldr	r3, [sp, #4]
    f4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c0:	1c5a      	adds	r2, r3, #1
    f4c2:	4904      	ldr	r1, [pc, #16]	; (f4d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f4c4:	9b01      	ldr	r3, [sp, #4]
    f4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4ca:	bf00      	nop
    f4cc:	b003      	add	sp, #12
    f4ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f4d2:	bf00      	nop
    f4d4:	1fff921c 	.word	0x1fff921c
    f4d8:	1fff9218 	.word	0x1fff9218

0000f4dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f4dc:	b500      	push	{lr}
    f4de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4e0:	f7f2 f9b2 	bl	1848 <Sys_GetCoreID>
    f4e4:	4603      	mov	r3, r0
    f4e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    f4e8:	4a0d      	ldr	r2, [pc, #52]	; (f520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4ea:	9b01      	ldr	r3, [sp, #4]
    f4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f0:	1e5a      	subs	r2, r3, #1
    f4f2:	490b      	ldr	r1, [pc, #44]	; (f520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4f4:	9b01      	ldr	r3, [sp, #4]
    f4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f4fa:	4a0a      	ldr	r2, [pc, #40]	; (f524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f502:	f003 0301 	and.w	r3, r3, #1
    f506:	2b00      	cmp	r3, #0
    f508:	d106      	bne.n	f518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    f50a:	4a05      	ldr	r2, [pc, #20]	; (f520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f50c:	9b01      	ldr	r3, [sp, #4]
    f50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f512:	2b00      	cmp	r3, #0
    f514:	d100      	bne.n	f518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f516:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f518:	bf00      	nop
    f51a:	b003      	add	sp, #12
    f51c:	f85d fb04 	ldr.w	pc, [sp], #4
    f520:	1fff921c 	.word	0x1fff921c
    f524:	1fff9218 	.word	0x1fff9218

0000f528 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f528:	b500      	push	{lr}
    f52a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f52c:	f7f2 f98c 	bl	1848 <Sys_GetCoreID>
    f530:	4603      	mov	r3, r0
    f532:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    f534:	4a10      	ldr	r2, [pc, #64]	; (f578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f536:	9b01      	ldr	r3, [sp, #4]
    f538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d10d      	bne.n	f55c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f540:	f7f1 fb62 	bl	c08 <Adc_schm_read_msr>
    f544:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f546:	9b00      	ldr	r3, [sp, #0]
    f548:	f003 0301 	and.w	r3, r3, #1
    f54c:	2b00      	cmp	r3, #0
    f54e:	d100      	bne.n	f552 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f550:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    f552:	490a      	ldr	r1, [pc, #40]	; (f57c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    f554:	9b01      	ldr	r3, [sp, #4]
    f556:	9a00      	ldr	r2, [sp, #0]
    f558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    f55c:	4a06      	ldr	r2, [pc, #24]	; (f578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f55e:	9b01      	ldr	r3, [sp, #4]
    f560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f564:	1c5a      	adds	r2, r3, #1
    f566:	4904      	ldr	r1, [pc, #16]	; (f578 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f568:	9b01      	ldr	r3, [sp, #4]
    f56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f56e:	bf00      	nop
    f570:	b003      	add	sp, #12
    f572:	f85d fb04 	ldr.w	pc, [sp], #4
    f576:	bf00      	nop
    f578:	1fff9224 	.word	0x1fff9224
    f57c:	1fff9220 	.word	0x1fff9220

0000f580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f580:	b500      	push	{lr}
    f582:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f584:	f7f2 f960 	bl	1848 <Sys_GetCoreID>
    f588:	4603      	mov	r3, r0
    f58a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    f58c:	4a0d      	ldr	r2, [pc, #52]	; (f5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f58e:	9b01      	ldr	r3, [sp, #4]
    f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f594:	1e5a      	subs	r2, r3, #1
    f596:	490b      	ldr	r1, [pc, #44]	; (f5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f598:	9b01      	ldr	r3, [sp, #4]
    f59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    f59e:	4a0a      	ldr	r2, [pc, #40]	; (f5c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    f5a0:	9b01      	ldr	r3, [sp, #4]
    f5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5a6:	f003 0301 	and.w	r3, r3, #1
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	d106      	bne.n	f5bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    f5ae:	4a05      	ldr	r2, [pc, #20]	; (f5c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f5b0:	9b01      	ldr	r3, [sp, #4]
    f5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5b6:	2b00      	cmp	r3, #0
    f5b8:	d100      	bne.n	f5bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5bc:	bf00      	nop
    f5be:	b003      	add	sp, #12
    f5c0:	f85d fb04 	ldr.w	pc, [sp], #4
    f5c4:	1fff9224 	.word	0x1fff9224
    f5c8:	1fff9220 	.word	0x1fff9220

0000f5cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f5cc:	b500      	push	{lr}
    f5ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5d0:	f7f2 f93a 	bl	1848 <Sys_GetCoreID>
    f5d4:	4603      	mov	r3, r0
    f5d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    f5d8:	4a10      	ldr	r2, [pc, #64]	; (f61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f5da:	9b01      	ldr	r3, [sp, #4]
    f5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d10d      	bne.n	f600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5e4:	f7f1 fb10 	bl	c08 <Adc_schm_read_msr>
    f5e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5ea:	9b00      	ldr	r3, [sp, #0]
    f5ec:	f003 0301 	and.w	r3, r3, #1
    f5f0:	2b00      	cmp	r3, #0
    f5f2:	d100      	bne.n	f5f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    f5f6:	490a      	ldr	r1, [pc, #40]	; (f620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    f5f8:	9b01      	ldr	r3, [sp, #4]
    f5fa:	9a00      	ldr	r2, [sp, #0]
    f5fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    f600:	4a06      	ldr	r2, [pc, #24]	; (f61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f602:	9b01      	ldr	r3, [sp, #4]
    f604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f608:	1c5a      	adds	r2, r3, #1
    f60a:	4904      	ldr	r1, [pc, #16]	; (f61c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f60c:	9b01      	ldr	r3, [sp, #4]
    f60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f612:	bf00      	nop
    f614:	b003      	add	sp, #12
    f616:	f85d fb04 	ldr.w	pc, [sp], #4
    f61a:	bf00      	nop
    f61c:	1fff922c 	.word	0x1fff922c
    f620:	1fff9228 	.word	0x1fff9228

0000f624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f624:	b500      	push	{lr}
    f626:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f628:	f7f2 f90e 	bl	1848 <Sys_GetCoreID>
    f62c:	4603      	mov	r3, r0
    f62e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    f630:	4a0d      	ldr	r2, [pc, #52]	; (f668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f632:	9b01      	ldr	r3, [sp, #4]
    f634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f638:	1e5a      	subs	r2, r3, #1
    f63a:	490b      	ldr	r1, [pc, #44]	; (f668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f63c:	9b01      	ldr	r3, [sp, #4]
    f63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    f642:	4a0a      	ldr	r2, [pc, #40]	; (f66c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    f644:	9b01      	ldr	r3, [sp, #4]
    f646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f64a:	f003 0301 	and.w	r3, r3, #1
    f64e:	2b00      	cmp	r3, #0
    f650:	d106      	bne.n	f660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    f652:	4a05      	ldr	r2, [pc, #20]	; (f668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f654:	9b01      	ldr	r3, [sp, #4]
    f656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d100      	bne.n	f660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f65e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f660:	bf00      	nop
    f662:	b003      	add	sp, #12
    f664:	f85d fb04 	ldr.w	pc, [sp], #4
    f668:	1fff922c 	.word	0x1fff922c
    f66c:	1fff9228 	.word	0x1fff9228

0000f670 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f670:	b500      	push	{lr}
    f672:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f674:	f7f2 f8e8 	bl	1848 <Sys_GetCoreID>
    f678:	4603      	mov	r3, r0
    f67a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    f67c:	4a10      	ldr	r2, [pc, #64]	; (f6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f67e:	9b01      	ldr	r3, [sp, #4]
    f680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f684:	2b00      	cmp	r3, #0
    f686:	d10d      	bne.n	f6a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f688:	f7f1 fabe 	bl	c08 <Adc_schm_read_msr>
    f68c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f68e:	9b00      	ldr	r3, [sp, #0]
    f690:	f003 0301 	and.w	r3, r3, #1
    f694:	2b00      	cmp	r3, #0
    f696:	d100      	bne.n	f69a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f698:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    f69a:	490a      	ldr	r1, [pc, #40]	; (f6c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    f69c:	9b01      	ldr	r3, [sp, #4]
    f69e:	9a00      	ldr	r2, [sp, #0]
    f6a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    f6a4:	4a06      	ldr	r2, [pc, #24]	; (f6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f6a6:	9b01      	ldr	r3, [sp, #4]
    f6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ac:	1c5a      	adds	r2, r3, #1
    f6ae:	4904      	ldr	r1, [pc, #16]	; (f6c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f6b0:	9b01      	ldr	r3, [sp, #4]
    f6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6b6:	bf00      	nop
    f6b8:	b003      	add	sp, #12
    f6ba:	f85d fb04 	ldr.w	pc, [sp], #4
    f6be:	bf00      	nop
    f6c0:	1fff9234 	.word	0x1fff9234
    f6c4:	1fff9230 	.word	0x1fff9230

0000f6c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f6c8:	b500      	push	{lr}
    f6ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6cc:	f7f2 f8bc 	bl	1848 <Sys_GetCoreID>
    f6d0:	4603      	mov	r3, r0
    f6d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    f6d4:	4a0d      	ldr	r2, [pc, #52]	; (f70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6d6:	9b01      	ldr	r3, [sp, #4]
    f6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6dc:	1e5a      	subs	r2, r3, #1
    f6de:	490b      	ldr	r1, [pc, #44]	; (f70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6e0:	9b01      	ldr	r3, [sp, #4]
    f6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    f6e6:	4a0a      	ldr	r2, [pc, #40]	; (f710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    f6e8:	9b01      	ldr	r3, [sp, #4]
    f6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ee:	f003 0301 	and.w	r3, r3, #1
    f6f2:	2b00      	cmp	r3, #0
    f6f4:	d106      	bne.n	f704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    f6f6:	4a05      	ldr	r2, [pc, #20]	; (f70c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6f8:	9b01      	ldr	r3, [sp, #4]
    f6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d100      	bne.n	f704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f702:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f704:	bf00      	nop
    f706:	b003      	add	sp, #12
    f708:	f85d fb04 	ldr.w	pc, [sp], #4
    f70c:	1fff9234 	.word	0x1fff9234
    f710:	1fff9230 	.word	0x1fff9230

0000f714 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f714:	b500      	push	{lr}
    f716:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f718:	f7f2 f896 	bl	1848 <Sys_GetCoreID>
    f71c:	4603      	mov	r3, r0
    f71e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    f720:	4a10      	ldr	r2, [pc, #64]	; (f764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f722:	9b01      	ldr	r3, [sp, #4]
    f724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f728:	2b00      	cmp	r3, #0
    f72a:	d10d      	bne.n	f748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f72c:	f7f1 fa6c 	bl	c08 <Adc_schm_read_msr>
    f730:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f732:	9b00      	ldr	r3, [sp, #0]
    f734:	f003 0301 	and.w	r3, r3, #1
    f738:	2b00      	cmp	r3, #0
    f73a:	d100      	bne.n	f73e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f73c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    f73e:	490a      	ldr	r1, [pc, #40]	; (f768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    f740:	9b01      	ldr	r3, [sp, #4]
    f742:	9a00      	ldr	r2, [sp, #0]
    f744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    f748:	4a06      	ldr	r2, [pc, #24]	; (f764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f74a:	9b01      	ldr	r3, [sp, #4]
    f74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f750:	1c5a      	adds	r2, r3, #1
    f752:	4904      	ldr	r1, [pc, #16]	; (f764 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f754:	9b01      	ldr	r3, [sp, #4]
    f756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f75a:	bf00      	nop
    f75c:	b003      	add	sp, #12
    f75e:	f85d fb04 	ldr.w	pc, [sp], #4
    f762:	bf00      	nop
    f764:	1fff923c 	.word	0x1fff923c
    f768:	1fff9238 	.word	0x1fff9238

0000f76c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f76c:	b500      	push	{lr}
    f76e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f770:	f7f2 f86a 	bl	1848 <Sys_GetCoreID>
    f774:	4603      	mov	r3, r0
    f776:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    f778:	4a0d      	ldr	r2, [pc, #52]	; (f7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f77a:	9b01      	ldr	r3, [sp, #4]
    f77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f780:	1e5a      	subs	r2, r3, #1
    f782:	490b      	ldr	r1, [pc, #44]	; (f7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f784:	9b01      	ldr	r3, [sp, #4]
    f786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    f78a:	4a0a      	ldr	r2, [pc, #40]	; (f7b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    f78c:	9b01      	ldr	r3, [sp, #4]
    f78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f792:	f003 0301 	and.w	r3, r3, #1
    f796:	2b00      	cmp	r3, #0
    f798:	d106      	bne.n	f7a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    f79a:	4a05      	ldr	r2, [pc, #20]	; (f7b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f79c:	9b01      	ldr	r3, [sp, #4]
    f79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	d100      	bne.n	f7a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7a8:	bf00      	nop
    f7aa:	b003      	add	sp, #12
    f7ac:	f85d fb04 	ldr.w	pc, [sp], #4
    f7b0:	1fff923c 	.word	0x1fff923c
    f7b4:	1fff9238 	.word	0x1fff9238

0000f7b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f7b8:	b500      	push	{lr}
    f7ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7bc:	f7f2 f844 	bl	1848 <Sys_GetCoreID>
    f7c0:	4603      	mov	r3, r0
    f7c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    f7c4:	4a10      	ldr	r2, [pc, #64]	; (f808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7c6:	9b01      	ldr	r3, [sp, #4]
    f7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d10d      	bne.n	f7ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7d0:	f7f1 fa1a 	bl	c08 <Adc_schm_read_msr>
    f7d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7d6:	9b00      	ldr	r3, [sp, #0]
    f7d8:	f003 0301 	and.w	r3, r3, #1
    f7dc:	2b00      	cmp	r3, #0
    f7de:	d100      	bne.n	f7e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f7e2:	490a      	ldr	r1, [pc, #40]	; (f80c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    f7e4:	9b01      	ldr	r3, [sp, #4]
    f7e6:	9a00      	ldr	r2, [sp, #0]
    f7e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    f7ec:	4a06      	ldr	r2, [pc, #24]	; (f808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7ee:	9b01      	ldr	r3, [sp, #4]
    f7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f4:	1c5a      	adds	r2, r3, #1
    f7f6:	4904      	ldr	r1, [pc, #16]	; (f808 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7f8:	9b01      	ldr	r3, [sp, #4]
    f7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7fe:	bf00      	nop
    f800:	b003      	add	sp, #12
    f802:	f85d fb04 	ldr.w	pc, [sp], #4
    f806:	bf00      	nop
    f808:	1fff9244 	.word	0x1fff9244
    f80c:	1fff9240 	.word	0x1fff9240

0000f810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f810:	b500      	push	{lr}
    f812:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f814:	f7f2 f818 	bl	1848 <Sys_GetCoreID>
    f818:	4603      	mov	r3, r0
    f81a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    f81c:	4a0d      	ldr	r2, [pc, #52]	; (f854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f81e:	9b01      	ldr	r3, [sp, #4]
    f820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f824:	1e5a      	subs	r2, r3, #1
    f826:	490b      	ldr	r1, [pc, #44]	; (f854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f828:	9b01      	ldr	r3, [sp, #4]
    f82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f82e:	4a0a      	ldr	r2, [pc, #40]	; (f858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    f830:	9b01      	ldr	r3, [sp, #4]
    f832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f836:	f003 0301 	and.w	r3, r3, #1
    f83a:	2b00      	cmp	r3, #0
    f83c:	d106      	bne.n	f84c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    f83e:	4a05      	ldr	r2, [pc, #20]	; (f854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f840:	9b01      	ldr	r3, [sp, #4]
    f842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f846:	2b00      	cmp	r3, #0
    f848:	d100      	bne.n	f84c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f84a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f84c:	bf00      	nop
    f84e:	b003      	add	sp, #12
    f850:	f85d fb04 	ldr.w	pc, [sp], #4
    f854:	1fff9244 	.word	0x1fff9244
    f858:	1fff9240 	.word	0x1fff9240

0000f85c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f85c:	b500      	push	{lr}
    f85e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f860:	f7f1 fff2 	bl	1848 <Sys_GetCoreID>
    f864:	4603      	mov	r3, r0
    f866:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    f868:	4a10      	ldr	r2, [pc, #64]	; (f8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f86a:	9b01      	ldr	r3, [sp, #4]
    f86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f870:	2b00      	cmp	r3, #0
    f872:	d10d      	bne.n	f890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f874:	f7f1 f9c8 	bl	c08 <Adc_schm_read_msr>
    f878:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f87a:	9b00      	ldr	r3, [sp, #0]
    f87c:	f003 0301 	and.w	r3, r3, #1
    f880:	2b00      	cmp	r3, #0
    f882:	d100      	bne.n	f886 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f884:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f886:	490a      	ldr	r1, [pc, #40]	; (f8b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    f888:	9b01      	ldr	r3, [sp, #4]
    f88a:	9a00      	ldr	r2, [sp, #0]
    f88c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    f890:	4a06      	ldr	r2, [pc, #24]	; (f8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f892:	9b01      	ldr	r3, [sp, #4]
    f894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f898:	1c5a      	adds	r2, r3, #1
    f89a:	4904      	ldr	r1, [pc, #16]	; (f8ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f89c:	9b01      	ldr	r3, [sp, #4]
    f89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8a2:	bf00      	nop
    f8a4:	b003      	add	sp, #12
    f8a6:	f85d fb04 	ldr.w	pc, [sp], #4
    f8aa:	bf00      	nop
    f8ac:	1fff924c 	.word	0x1fff924c
    f8b0:	1fff9248 	.word	0x1fff9248

0000f8b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f8b4:	b500      	push	{lr}
    f8b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8b8:	f7f1 ffc6 	bl	1848 <Sys_GetCoreID>
    f8bc:	4603      	mov	r3, r0
    f8be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    f8c0:	4a0d      	ldr	r2, [pc, #52]	; (f8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f8c2:	9b01      	ldr	r3, [sp, #4]
    f8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8c8:	1e5a      	subs	r2, r3, #1
    f8ca:	490b      	ldr	r1, [pc, #44]	; (f8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f8cc:	9b01      	ldr	r3, [sp, #4]
    f8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f8d2:	4a0a      	ldr	r2, [pc, #40]	; (f8fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    f8d4:	9b01      	ldr	r3, [sp, #4]
    f8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8da:	f003 0301 	and.w	r3, r3, #1
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d106      	bne.n	f8f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    f8e2:	4a05      	ldr	r2, [pc, #20]	; (f8f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f8e4:	9b01      	ldr	r3, [sp, #4]
    f8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8ea:	2b00      	cmp	r3, #0
    f8ec:	d100      	bne.n	f8f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8f0:	bf00      	nop
    f8f2:	b003      	add	sp, #12
    f8f4:	f85d fb04 	ldr.w	pc, [sp], #4
    f8f8:	1fff924c 	.word	0x1fff924c
    f8fc:	1fff9248 	.word	0x1fff9248

0000f900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f900:	b500      	push	{lr}
    f902:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f904:	f7f1 ffa0 	bl	1848 <Sys_GetCoreID>
    f908:	4603      	mov	r3, r0
    f90a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    f90c:	4a10      	ldr	r2, [pc, #64]	; (f950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f90e:	9b01      	ldr	r3, [sp, #4]
    f910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f914:	2b00      	cmp	r3, #0
    f916:	d10d      	bne.n	f934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f918:	f7f1 f976 	bl	c08 <Adc_schm_read_msr>
    f91c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f91e:	9b00      	ldr	r3, [sp, #0]
    f920:	f003 0301 	and.w	r3, r3, #1
    f924:	2b00      	cmp	r3, #0
    f926:	d100      	bne.n	f92a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f928:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f92a:	490a      	ldr	r1, [pc, #40]	; (f954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    f92c:	9b01      	ldr	r3, [sp, #4]
    f92e:	9a00      	ldr	r2, [sp, #0]
    f930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    f934:	4a06      	ldr	r2, [pc, #24]	; (f950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f936:	9b01      	ldr	r3, [sp, #4]
    f938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f93c:	1c5a      	adds	r2, r3, #1
    f93e:	4904      	ldr	r1, [pc, #16]	; (f950 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f940:	9b01      	ldr	r3, [sp, #4]
    f942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f946:	bf00      	nop
    f948:	b003      	add	sp, #12
    f94a:	f85d fb04 	ldr.w	pc, [sp], #4
    f94e:	bf00      	nop
    f950:	1fff9254 	.word	0x1fff9254
    f954:	1fff9250 	.word	0x1fff9250

0000f958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f958:	b500      	push	{lr}
    f95a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f95c:	f7f1 ff74 	bl	1848 <Sys_GetCoreID>
    f960:	4603      	mov	r3, r0
    f962:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    f964:	4a0d      	ldr	r2, [pc, #52]	; (f99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f966:	9b01      	ldr	r3, [sp, #4]
    f968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f96c:	1e5a      	subs	r2, r3, #1
    f96e:	490b      	ldr	r1, [pc, #44]	; (f99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f970:	9b01      	ldr	r3, [sp, #4]
    f972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f976:	4a0a      	ldr	r2, [pc, #40]	; (f9a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    f978:	9b01      	ldr	r3, [sp, #4]
    f97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f97e:	f003 0301 	and.w	r3, r3, #1
    f982:	2b00      	cmp	r3, #0
    f984:	d106      	bne.n	f994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    f986:	4a05      	ldr	r2, [pc, #20]	; (f99c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f988:	9b01      	ldr	r3, [sp, #4]
    f98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f98e:	2b00      	cmp	r3, #0
    f990:	d100      	bne.n	f994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f992:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f994:	bf00      	nop
    f996:	b003      	add	sp, #12
    f998:	f85d fb04 	ldr.w	pc, [sp], #4
    f99c:	1fff9254 	.word	0x1fff9254
    f9a0:	1fff9250 	.word	0x1fff9250

0000f9a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f9a4:	b500      	push	{lr}
    f9a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9a8:	f7f1 ff4e 	bl	1848 <Sys_GetCoreID>
    f9ac:	4603      	mov	r3, r0
    f9ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    f9b0:	4a10      	ldr	r2, [pc, #64]	; (f9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f9b2:	9b01      	ldr	r3, [sp, #4]
    f9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d10d      	bne.n	f9d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9bc:	f7f1 f924 	bl	c08 <Adc_schm_read_msr>
    f9c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9c2:	9b00      	ldr	r3, [sp, #0]
    f9c4:	f003 0301 	and.w	r3, r3, #1
    f9c8:	2b00      	cmp	r3, #0
    f9ca:	d100      	bne.n	f9ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f9ce:	490a      	ldr	r1, [pc, #40]	; (f9f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    f9d0:	9b01      	ldr	r3, [sp, #4]
    f9d2:	9a00      	ldr	r2, [sp, #0]
    f9d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    f9d8:	4a06      	ldr	r2, [pc, #24]	; (f9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f9da:	9b01      	ldr	r3, [sp, #4]
    f9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9e0:	1c5a      	adds	r2, r3, #1
    f9e2:	4904      	ldr	r1, [pc, #16]	; (f9f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f9e4:	9b01      	ldr	r3, [sp, #4]
    f9e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9ea:	bf00      	nop
    f9ec:	b003      	add	sp, #12
    f9ee:	f85d fb04 	ldr.w	pc, [sp], #4
    f9f2:	bf00      	nop
    f9f4:	1fff925c 	.word	0x1fff925c
    f9f8:	1fff9258 	.word	0x1fff9258

0000f9fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f9fc:	b500      	push	{lr}
    f9fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa00:	f7f1 ff22 	bl	1848 <Sys_GetCoreID>
    fa04:	4603      	mov	r3, r0
    fa06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    fa08:	4a0d      	ldr	r2, [pc, #52]	; (fa40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    fa0a:	9b01      	ldr	r3, [sp, #4]
    fa0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa10:	1e5a      	subs	r2, r3, #1
    fa12:	490b      	ldr	r1, [pc, #44]	; (fa40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    fa14:	9b01      	ldr	r3, [sp, #4]
    fa16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    fa1a:	4a0a      	ldr	r2, [pc, #40]	; (fa44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    fa1c:	9b01      	ldr	r3, [sp, #4]
    fa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa22:	f003 0301 	and.w	r3, r3, #1
    fa26:	2b00      	cmp	r3, #0
    fa28:	d106      	bne.n	fa38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    fa2a:	4a05      	ldr	r2, [pc, #20]	; (fa40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    fa2c:	9b01      	ldr	r3, [sp, #4]
    fa2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa32:	2b00      	cmp	r3, #0
    fa34:	d100      	bne.n	fa38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa38:	bf00      	nop
    fa3a:	b003      	add	sp, #12
    fa3c:	f85d fb04 	ldr.w	pc, [sp], #4
    fa40:	1fff925c 	.word	0x1fff925c
    fa44:	1fff9258 	.word	0x1fff9258

0000fa48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    fa48:	b500      	push	{lr}
    fa4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa4c:	f7f1 fefc 	bl	1848 <Sys_GetCoreID>
    fa50:	4603      	mov	r3, r0
    fa52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    fa54:	4a10      	ldr	r2, [pc, #64]	; (fa98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa56:	9b01      	ldr	r3, [sp, #4]
    fa58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d10d      	bne.n	fa7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa60:	f7f1 f8d2 	bl	c08 <Adc_schm_read_msr>
    fa64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa66:	9b00      	ldr	r3, [sp, #0]
    fa68:	f003 0301 	and.w	r3, r3, #1
    fa6c:	2b00      	cmp	r3, #0
    fa6e:	d100      	bne.n	fa72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    fa72:	490a      	ldr	r1, [pc, #40]	; (fa9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    fa74:	9b01      	ldr	r3, [sp, #4]
    fa76:	9a00      	ldr	r2, [sp, #0]
    fa78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    fa7c:	4a06      	ldr	r2, [pc, #24]	; (fa98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa7e:	9b01      	ldr	r3, [sp, #4]
    fa80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa84:	1c5a      	adds	r2, r3, #1
    fa86:	4904      	ldr	r1, [pc, #16]	; (fa98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa88:	9b01      	ldr	r3, [sp, #4]
    fa8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa8e:	bf00      	nop
    fa90:	b003      	add	sp, #12
    fa92:	f85d fb04 	ldr.w	pc, [sp], #4
    fa96:	bf00      	nop
    fa98:	1fff9264 	.word	0x1fff9264
    fa9c:	1fff9260 	.word	0x1fff9260

0000faa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    faa0:	b500      	push	{lr}
    faa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    faa4:	f7f1 fed0 	bl	1848 <Sys_GetCoreID>
    faa8:	4603      	mov	r3, r0
    faaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    faac:	4a0d      	ldr	r2, [pc, #52]	; (fae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    faae:	9b01      	ldr	r3, [sp, #4]
    fab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab4:	1e5a      	subs	r2, r3, #1
    fab6:	490b      	ldr	r1, [pc, #44]	; (fae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fab8:	9b01      	ldr	r3, [sp, #4]
    faba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    fabe:	4a0a      	ldr	r2, [pc, #40]	; (fae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    fac0:	9b01      	ldr	r3, [sp, #4]
    fac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fac6:	f003 0301 	and.w	r3, r3, #1
    faca:	2b00      	cmp	r3, #0
    facc:	d106      	bne.n	fadc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    face:	4a05      	ldr	r2, [pc, #20]	; (fae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fad0:	9b01      	ldr	r3, [sp, #4]
    fad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fad6:	2b00      	cmp	r3, #0
    fad8:	d100      	bne.n	fadc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fada:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fadc:	bf00      	nop
    fade:	b003      	add	sp, #12
    fae0:	f85d fb04 	ldr.w	pc, [sp], #4
    fae4:	1fff9264 	.word	0x1fff9264
    fae8:	1fff9260 	.word	0x1fff9260

0000faec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    faec:	b500      	push	{lr}
    faee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    faf0:	f7f1 feaa 	bl	1848 <Sys_GetCoreID>
    faf4:	4603      	mov	r3, r0
    faf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    faf8:	4a10      	ldr	r2, [pc, #64]	; (fb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    fafa:	9b01      	ldr	r3, [sp, #4]
    fafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb00:	2b00      	cmp	r3, #0
    fb02:	d10d      	bne.n	fb20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb04:	f7f1 f880 	bl	c08 <Adc_schm_read_msr>
    fb08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb0a:	9b00      	ldr	r3, [sp, #0]
    fb0c:	f003 0301 	and.w	r3, r3, #1
    fb10:	2b00      	cmp	r3, #0
    fb12:	d100      	bne.n	fb16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    fb16:	490a      	ldr	r1, [pc, #40]	; (fb40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    fb18:	9b01      	ldr	r3, [sp, #4]
    fb1a:	9a00      	ldr	r2, [sp, #0]
    fb1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    fb20:	4a06      	ldr	r2, [pc, #24]	; (fb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    fb22:	9b01      	ldr	r3, [sp, #4]
    fb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb28:	1c5a      	adds	r2, r3, #1
    fb2a:	4904      	ldr	r1, [pc, #16]	; (fb3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    fb2c:	9b01      	ldr	r3, [sp, #4]
    fb2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb32:	bf00      	nop
    fb34:	b003      	add	sp, #12
    fb36:	f85d fb04 	ldr.w	pc, [sp], #4
    fb3a:	bf00      	nop
    fb3c:	1fff926c 	.word	0x1fff926c
    fb40:	1fff9268 	.word	0x1fff9268

0000fb44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    fb44:	b500      	push	{lr}
    fb46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb48:	f7f1 fe7e 	bl	1848 <Sys_GetCoreID>
    fb4c:	4603      	mov	r3, r0
    fb4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    fb50:	4a0d      	ldr	r2, [pc, #52]	; (fb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb52:	9b01      	ldr	r3, [sp, #4]
    fb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb58:	1e5a      	subs	r2, r3, #1
    fb5a:	490b      	ldr	r1, [pc, #44]	; (fb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb5c:	9b01      	ldr	r3, [sp, #4]
    fb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    fb62:	4a0a      	ldr	r2, [pc, #40]	; (fb8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    fb64:	9b01      	ldr	r3, [sp, #4]
    fb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb6a:	f003 0301 	and.w	r3, r3, #1
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d106      	bne.n	fb80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    fb72:	4a05      	ldr	r2, [pc, #20]	; (fb88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb74:	9b01      	ldr	r3, [sp, #4]
    fb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	d100      	bne.n	fb80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb80:	bf00      	nop
    fb82:	b003      	add	sp, #12
    fb84:	f85d fb04 	ldr.w	pc, [sp], #4
    fb88:	1fff926c 	.word	0x1fff926c
    fb8c:	1fff9268 	.word	0x1fff9268

0000fb90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    fb90:	b500      	push	{lr}
    fb92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb94:	f7f1 fe58 	bl	1848 <Sys_GetCoreID>
    fb98:	4603      	mov	r3, r0
    fb9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    fb9c:	4a10      	ldr	r2, [pc, #64]	; (fbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb9e:	9b01      	ldr	r3, [sp, #4]
    fba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fba4:	2b00      	cmp	r3, #0
    fba6:	d10d      	bne.n	fbc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fba8:	f7f1 f82e 	bl	c08 <Adc_schm_read_msr>
    fbac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbae:	9b00      	ldr	r3, [sp, #0]
    fbb0:	f003 0301 	and.w	r3, r3, #1
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	d100      	bne.n	fbba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    fbba:	490a      	ldr	r1, [pc, #40]	; (fbe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    fbbc:	9b01      	ldr	r3, [sp, #4]
    fbbe:	9a00      	ldr	r2, [sp, #0]
    fbc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    fbc4:	4a06      	ldr	r2, [pc, #24]	; (fbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fbc6:	9b01      	ldr	r3, [sp, #4]
    fbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbcc:	1c5a      	adds	r2, r3, #1
    fbce:	4904      	ldr	r1, [pc, #16]	; (fbe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fbd0:	9b01      	ldr	r3, [sp, #4]
    fbd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbd6:	bf00      	nop
    fbd8:	b003      	add	sp, #12
    fbda:	f85d fb04 	ldr.w	pc, [sp], #4
    fbde:	bf00      	nop
    fbe0:	1fff9274 	.word	0x1fff9274
    fbe4:	1fff9270 	.word	0x1fff9270

0000fbe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    fbe8:	b500      	push	{lr}
    fbea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbec:	f7f1 fe2c 	bl	1848 <Sys_GetCoreID>
    fbf0:	4603      	mov	r3, r0
    fbf2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    fbf4:	4a0d      	ldr	r2, [pc, #52]	; (fc2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbf6:	9b01      	ldr	r3, [sp, #4]
    fbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbfc:	1e5a      	subs	r2, r3, #1
    fbfe:	490b      	ldr	r1, [pc, #44]	; (fc2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fc00:	9b01      	ldr	r3, [sp, #4]
    fc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    fc06:	4a0a      	ldr	r2, [pc, #40]	; (fc30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    fc08:	9b01      	ldr	r3, [sp, #4]
    fc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc0e:	f003 0301 	and.w	r3, r3, #1
    fc12:	2b00      	cmp	r3, #0
    fc14:	d106      	bne.n	fc24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    fc16:	4a05      	ldr	r2, [pc, #20]	; (fc2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fc18:	9b01      	ldr	r3, [sp, #4]
    fc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc1e:	2b00      	cmp	r3, #0
    fc20:	d100      	bne.n	fc24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc24:	bf00      	nop
    fc26:	b003      	add	sp, #12
    fc28:	f85d fb04 	ldr.w	pc, [sp], #4
    fc2c:	1fff9274 	.word	0x1fff9274
    fc30:	1fff9270 	.word	0x1fff9270

0000fc34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fc34:	b500      	push	{lr}
    fc36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc38:	f7f1 fe06 	bl	1848 <Sys_GetCoreID>
    fc3c:	4603      	mov	r3, r0
    fc3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    fc40:	4a10      	ldr	r2, [pc, #64]	; (fc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc42:	9b01      	ldr	r3, [sp, #4]
    fc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d10d      	bne.n	fc68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc4c:	f7f0 ffdc 	bl	c08 <Adc_schm_read_msr>
    fc50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc52:	9b00      	ldr	r3, [sp, #0]
    fc54:	f003 0301 	and.w	r3, r3, #1
    fc58:	2b00      	cmp	r3, #0
    fc5a:	d100      	bne.n	fc5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    fc5e:	490a      	ldr	r1, [pc, #40]	; (fc88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    fc60:	9b01      	ldr	r3, [sp, #4]
    fc62:	9a00      	ldr	r2, [sp, #0]
    fc64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    fc68:	4a06      	ldr	r2, [pc, #24]	; (fc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc6a:	9b01      	ldr	r3, [sp, #4]
    fc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc70:	1c5a      	adds	r2, r3, #1
    fc72:	4904      	ldr	r1, [pc, #16]	; (fc84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc74:	9b01      	ldr	r3, [sp, #4]
    fc76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc7a:	bf00      	nop
    fc7c:	b003      	add	sp, #12
    fc7e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc82:	bf00      	nop
    fc84:	1fff927c 	.word	0x1fff927c
    fc88:	1fff9278 	.word	0x1fff9278

0000fc8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fc8c:	b500      	push	{lr}
    fc8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc90:	f7f1 fdda 	bl	1848 <Sys_GetCoreID>
    fc94:	4603      	mov	r3, r0
    fc96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    fc98:	4a0d      	ldr	r2, [pc, #52]	; (fcd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc9a:	9b01      	ldr	r3, [sp, #4]
    fc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca0:	1e5a      	subs	r2, r3, #1
    fca2:	490b      	ldr	r1, [pc, #44]	; (fcd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fca4:	9b01      	ldr	r3, [sp, #4]
    fca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    fcaa:	4a0a      	ldr	r2, [pc, #40]	; (fcd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    fcac:	9b01      	ldr	r3, [sp, #4]
    fcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcb2:	f003 0301 	and.w	r3, r3, #1
    fcb6:	2b00      	cmp	r3, #0
    fcb8:	d106      	bne.n	fcc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    fcba:	4a05      	ldr	r2, [pc, #20]	; (fcd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fcbc:	9b01      	ldr	r3, [sp, #4]
    fcbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	d100      	bne.n	fcc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcc8:	bf00      	nop
    fcca:	b003      	add	sp, #12
    fccc:	f85d fb04 	ldr.w	pc, [sp], #4
    fcd0:	1fff927c 	.word	0x1fff927c
    fcd4:	1fff9278 	.word	0x1fff9278

0000fcd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fcd8:	b500      	push	{lr}
    fcda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcdc:	f7f1 fdb4 	bl	1848 <Sys_GetCoreID>
    fce0:	4603      	mov	r3, r0
    fce2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    fce4:	4a10      	ldr	r2, [pc, #64]	; (fd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fce6:	9b01      	ldr	r3, [sp, #4]
    fce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcec:	2b00      	cmp	r3, #0
    fcee:	d10d      	bne.n	fd0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fcf0:	f7f0 ff8a 	bl	c08 <Adc_schm_read_msr>
    fcf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fcf6:	9b00      	ldr	r3, [sp, #0]
    fcf8:	f003 0301 	and.w	r3, r3, #1
    fcfc:	2b00      	cmp	r3, #0
    fcfe:	d100      	bne.n	fd02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    fd02:	490a      	ldr	r1, [pc, #40]	; (fd2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    fd04:	9b01      	ldr	r3, [sp, #4]
    fd06:	9a00      	ldr	r2, [sp, #0]
    fd08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    fd0c:	4a06      	ldr	r2, [pc, #24]	; (fd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fd0e:	9b01      	ldr	r3, [sp, #4]
    fd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd14:	1c5a      	adds	r2, r3, #1
    fd16:	4904      	ldr	r1, [pc, #16]	; (fd28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fd18:	9b01      	ldr	r3, [sp, #4]
    fd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd1e:	bf00      	nop
    fd20:	b003      	add	sp, #12
    fd22:	f85d fb04 	ldr.w	pc, [sp], #4
    fd26:	bf00      	nop
    fd28:	1fff9284 	.word	0x1fff9284
    fd2c:	1fff9280 	.word	0x1fff9280

0000fd30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fd30:	b500      	push	{lr}
    fd32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd34:	f7f1 fd88 	bl	1848 <Sys_GetCoreID>
    fd38:	4603      	mov	r3, r0
    fd3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    fd3c:	4a0d      	ldr	r2, [pc, #52]	; (fd74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd3e:	9b01      	ldr	r3, [sp, #4]
    fd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd44:	1e5a      	subs	r2, r3, #1
    fd46:	490b      	ldr	r1, [pc, #44]	; (fd74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd48:	9b01      	ldr	r3, [sp, #4]
    fd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    fd4e:	4a0a      	ldr	r2, [pc, #40]	; (fd78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    fd50:	9b01      	ldr	r3, [sp, #4]
    fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd56:	f003 0301 	and.w	r3, r3, #1
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d106      	bne.n	fd6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    fd5e:	4a05      	ldr	r2, [pc, #20]	; (fd74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd60:	9b01      	ldr	r3, [sp, #4]
    fd62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd66:	2b00      	cmp	r3, #0
    fd68:	d100      	bne.n	fd6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd6c:	bf00      	nop
    fd6e:	b003      	add	sp, #12
    fd70:	f85d fb04 	ldr.w	pc, [sp], #4
    fd74:	1fff9284 	.word	0x1fff9284
    fd78:	1fff9280 	.word	0x1fff9280

0000fd7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fd7c:	b500      	push	{lr}
    fd7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd80:	f7f1 fd62 	bl	1848 <Sys_GetCoreID>
    fd84:	4603      	mov	r3, r0
    fd86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    fd88:	4a10      	ldr	r2, [pc, #64]	; (fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd8a:	9b01      	ldr	r3, [sp, #4]
    fd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd90:	2b00      	cmp	r3, #0
    fd92:	d10d      	bne.n	fdb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd94:	f7f0 ff38 	bl	c08 <Adc_schm_read_msr>
    fd98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd9a:	9b00      	ldr	r3, [sp, #0]
    fd9c:	f003 0301 	and.w	r3, r3, #1
    fda0:	2b00      	cmp	r3, #0
    fda2:	d100      	bne.n	fda6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fda4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fda6:	490a      	ldr	r1, [pc, #40]	; (fdd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    fda8:	9b01      	ldr	r3, [sp, #4]
    fdaa:	9a00      	ldr	r2, [sp, #0]
    fdac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    fdb0:	4a06      	ldr	r2, [pc, #24]	; (fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fdb2:	9b01      	ldr	r3, [sp, #4]
    fdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb8:	1c5a      	adds	r2, r3, #1
    fdba:	4904      	ldr	r1, [pc, #16]	; (fdcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fdbc:	9b01      	ldr	r3, [sp, #4]
    fdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdc2:	bf00      	nop
    fdc4:	b003      	add	sp, #12
    fdc6:	f85d fb04 	ldr.w	pc, [sp], #4
    fdca:	bf00      	nop
    fdcc:	1fff928c 	.word	0x1fff928c
    fdd0:	1fff9288 	.word	0x1fff9288

0000fdd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fdd4:	b500      	push	{lr}
    fdd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdd8:	f7f1 fd36 	bl	1848 <Sys_GetCoreID>
    fddc:	4603      	mov	r3, r0
    fdde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    fde0:	4a0d      	ldr	r2, [pc, #52]	; (fe18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fde2:	9b01      	ldr	r3, [sp, #4]
    fde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fde8:	1e5a      	subs	r2, r3, #1
    fdea:	490b      	ldr	r1, [pc, #44]	; (fe18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fdec:	9b01      	ldr	r3, [sp, #4]
    fdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fdf2:	4a0a      	ldr	r2, [pc, #40]	; (fe1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    fdf4:	9b01      	ldr	r3, [sp, #4]
    fdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdfa:	f003 0301 	and.w	r3, r3, #1
    fdfe:	2b00      	cmp	r3, #0
    fe00:	d106      	bne.n	fe10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    fe02:	4a05      	ldr	r2, [pc, #20]	; (fe18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fe04:	9b01      	ldr	r3, [sp, #4]
    fe06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe0a:	2b00      	cmp	r3, #0
    fe0c:	d100      	bne.n	fe10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe10:	bf00      	nop
    fe12:	b003      	add	sp, #12
    fe14:	f85d fb04 	ldr.w	pc, [sp], #4
    fe18:	1fff928c 	.word	0x1fff928c
    fe1c:	1fff9288 	.word	0x1fff9288

0000fe20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fe20:	b500      	push	{lr}
    fe22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe24:	f7f1 fd10 	bl	1848 <Sys_GetCoreID>
    fe28:	4603      	mov	r3, r0
    fe2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    fe2c:	4a10      	ldr	r2, [pc, #64]	; (fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe2e:	9b01      	ldr	r3, [sp, #4]
    fe30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe34:	2b00      	cmp	r3, #0
    fe36:	d10d      	bne.n	fe54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe38:	f7f0 fee6 	bl	c08 <Adc_schm_read_msr>
    fe3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe3e:	9b00      	ldr	r3, [sp, #0]
    fe40:	f003 0301 	and.w	r3, r3, #1
    fe44:	2b00      	cmp	r3, #0
    fe46:	d100      	bne.n	fe4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fe4a:	490a      	ldr	r1, [pc, #40]	; (fe74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    fe4c:	9b01      	ldr	r3, [sp, #4]
    fe4e:	9a00      	ldr	r2, [sp, #0]
    fe50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    fe54:	4a06      	ldr	r2, [pc, #24]	; (fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe56:	9b01      	ldr	r3, [sp, #4]
    fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe5c:	1c5a      	adds	r2, r3, #1
    fe5e:	4904      	ldr	r1, [pc, #16]	; (fe70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe60:	9b01      	ldr	r3, [sp, #4]
    fe62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe66:	bf00      	nop
    fe68:	b003      	add	sp, #12
    fe6a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe6e:	bf00      	nop
    fe70:	1fff9294 	.word	0x1fff9294
    fe74:	1fff9290 	.word	0x1fff9290

0000fe78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fe78:	b500      	push	{lr}
    fe7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe7c:	f7f1 fce4 	bl	1848 <Sys_GetCoreID>
    fe80:	4603      	mov	r3, r0
    fe82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    fe84:	4a0d      	ldr	r2, [pc, #52]	; (febc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe86:	9b01      	ldr	r3, [sp, #4]
    fe88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8c:	1e5a      	subs	r2, r3, #1
    fe8e:	490b      	ldr	r1, [pc, #44]	; (febc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe90:	9b01      	ldr	r3, [sp, #4]
    fe92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fe96:	4a0a      	ldr	r2, [pc, #40]	; (fec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    fe98:	9b01      	ldr	r3, [sp, #4]
    fe9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe9e:	f003 0301 	and.w	r3, r3, #1
    fea2:	2b00      	cmp	r3, #0
    fea4:	d106      	bne.n	feb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    fea6:	4a05      	ldr	r2, [pc, #20]	; (febc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fea8:	9b01      	ldr	r3, [sp, #4]
    feaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feae:	2b00      	cmp	r3, #0
    feb0:	d100      	bne.n	feb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    feb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    feb4:	bf00      	nop
    feb6:	b003      	add	sp, #12
    feb8:	f85d fb04 	ldr.w	pc, [sp], #4
    febc:	1fff9294 	.word	0x1fff9294
    fec0:	1fff9290 	.word	0x1fff9290

0000fec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fec4:	b500      	push	{lr}
    fec6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fec8:	f7f1 fcbe 	bl	1848 <Sys_GetCoreID>
    fecc:	4603      	mov	r3, r0
    fece:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    fed0:	4a10      	ldr	r2, [pc, #64]	; (ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fed2:	9b01      	ldr	r3, [sp, #4]
    fed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fed8:	2b00      	cmp	r3, #0
    feda:	d10d      	bne.n	fef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fedc:	f7f0 fe94 	bl	c08 <Adc_schm_read_msr>
    fee0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fee2:	9b00      	ldr	r3, [sp, #0]
    fee4:	f003 0301 	and.w	r3, r3, #1
    fee8:	2b00      	cmp	r3, #0
    feea:	d100      	bne.n	feee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    feec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    feee:	490a      	ldr	r1, [pc, #40]	; (ff18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    fef0:	9b01      	ldr	r3, [sp, #4]
    fef2:	9a00      	ldr	r2, [sp, #0]
    fef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    fef8:	4a06      	ldr	r2, [pc, #24]	; (ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fefa:	9b01      	ldr	r3, [sp, #4]
    fefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff00:	1c5a      	adds	r2, r3, #1
    ff02:	4904      	ldr	r1, [pc, #16]	; (ff14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff0a:	bf00      	nop
    ff0c:	b003      	add	sp, #12
    ff0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ff12:	bf00      	nop
    ff14:	1fff929c 	.word	0x1fff929c
    ff18:	1fff9298 	.word	0x1fff9298

0000ff1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    ff1c:	b500      	push	{lr}
    ff1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff20:	f7f1 fc92 	bl	1848 <Sys_GetCoreID>
    ff24:	4603      	mov	r3, r0
    ff26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    ff28:	4a0d      	ldr	r2, [pc, #52]	; (ff60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ff2a:	9b01      	ldr	r3, [sp, #4]
    ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff30:	1e5a      	subs	r2, r3, #1
    ff32:	490b      	ldr	r1, [pc, #44]	; (ff60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    ff3a:	4a0a      	ldr	r2, [pc, #40]	; (ff64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    ff3c:	9b01      	ldr	r3, [sp, #4]
    ff3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff42:	f003 0301 	and.w	r3, r3, #1
    ff46:	2b00      	cmp	r3, #0
    ff48:	d106      	bne.n	ff58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    ff4a:	4a05      	ldr	r2, [pc, #20]	; (ff60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ff4c:	9b01      	ldr	r3, [sp, #4]
    ff4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff52:	2b00      	cmp	r3, #0
    ff54:	d100      	bne.n	ff58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff58:	bf00      	nop
    ff5a:	b003      	add	sp, #12
    ff5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff60:	1fff929c 	.word	0x1fff929c
    ff64:	1fff9298 	.word	0x1fff9298

0000ff68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ff68:	b500      	push	{lr}
    ff6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff6c:	f7f1 fc6c 	bl	1848 <Sys_GetCoreID>
    ff70:	4603      	mov	r3, r0
    ff72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    ff74:	4a10      	ldr	r2, [pc, #64]	; (ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff76:	9b01      	ldr	r3, [sp, #4]
    ff78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d10d      	bne.n	ff9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff80:	f7f0 fe42 	bl	c08 <Adc_schm_read_msr>
    ff84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff86:	9b00      	ldr	r3, [sp, #0]
    ff88:	f003 0301 	and.w	r3, r3, #1
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	d100      	bne.n	ff92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ff92:	490a      	ldr	r1, [pc, #40]	; (ffbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    ff94:	9b01      	ldr	r3, [sp, #4]
    ff96:	9a00      	ldr	r2, [sp, #0]
    ff98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    ff9c:	4a06      	ldr	r2, [pc, #24]	; (ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff9e:	9b01      	ldr	r3, [sp, #4]
    ffa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa4:	1c5a      	adds	r2, r3, #1
    ffa6:	4904      	ldr	r1, [pc, #16]	; (ffb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ffa8:	9b01      	ldr	r3, [sp, #4]
    ffaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ffae:	bf00      	nop
    ffb0:	b003      	add	sp, #12
    ffb2:	f85d fb04 	ldr.w	pc, [sp], #4
    ffb6:	bf00      	nop
    ffb8:	1fff92a4 	.word	0x1fff92a4
    ffbc:	1fff92a0 	.word	0x1fff92a0

0000ffc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ffc0:	b500      	push	{lr}
    ffc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffc4:	f7f1 fc40 	bl	1848 <Sys_GetCoreID>
    ffc8:	4603      	mov	r3, r0
    ffca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    ffcc:	4a0d      	ldr	r2, [pc, #52]	; (10004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ffce:	9b01      	ldr	r3, [sp, #4]
    ffd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd4:	1e5a      	subs	r2, r3, #1
    ffd6:	490b      	ldr	r1, [pc, #44]	; (10004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ffd8:	9b01      	ldr	r3, [sp, #4]
    ffda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ffde:	4a0a      	ldr	r2, [pc, #40]	; (10008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    ffe0:	9b01      	ldr	r3, [sp, #4]
    ffe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe6:	f003 0301 	and.w	r3, r3, #1
    ffea:	2b00      	cmp	r3, #0
    ffec:	d106      	bne.n	fffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    ffee:	4a05      	ldr	r2, [pc, #20]	; (10004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    fff0:	9b01      	ldr	r3, [sp, #4]
    fff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fff6:	2b00      	cmp	r3, #0
    fff8:	d100      	bne.n	fffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fffa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fffc:	bf00      	nop
    fffe:	b003      	add	sp, #12
   10000:	f85d fb04 	ldr.w	pc, [sp], #4
   10004:	1fff92a4 	.word	0x1fff92a4
   10008:	1fff92a0 	.word	0x1fff92a0

0001000c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   1000c:	b500      	push	{lr}
   1000e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10010:	f7f1 fc1a 	bl	1848 <Sys_GetCoreID>
   10014:	4603      	mov	r3, r0
   10016:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   10018:	4a10      	ldr	r2, [pc, #64]	; (1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1001a:	9b01      	ldr	r3, [sp, #4]
   1001c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10020:	2b00      	cmp	r3, #0
   10022:	d10d      	bne.n	10040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10024:	f7f0 fdf0 	bl	c08 <Adc_schm_read_msr>
   10028:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1002a:	9b00      	ldr	r3, [sp, #0]
   1002c:	f003 0301 	and.w	r3, r3, #1
   10030:	2b00      	cmp	r3, #0
   10032:	d100      	bne.n	10036 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10034:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   10036:	490a      	ldr	r1, [pc, #40]	; (10060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10038:	9b01      	ldr	r3, [sp, #4]
   1003a:	9a00      	ldr	r2, [sp, #0]
   1003c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10040:	4a06      	ldr	r2, [pc, #24]	; (1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10042:	9b01      	ldr	r3, [sp, #4]
   10044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10048:	1c5a      	adds	r2, r3, #1
   1004a:	4904      	ldr	r1, [pc, #16]	; (1005c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1004c:	9b01      	ldr	r3, [sp, #4]
   1004e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10052:	bf00      	nop
   10054:	b003      	add	sp, #12
   10056:	f85d fb04 	ldr.w	pc, [sp], #4
   1005a:	bf00      	nop
   1005c:	1fff92ac 	.word	0x1fff92ac
   10060:	1fff92a8 	.word	0x1fff92a8

00010064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10064:	b500      	push	{lr}
   10066:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10068:	f7f1 fbee 	bl	1848 <Sys_GetCoreID>
   1006c:	4603      	mov	r3, r0
   1006e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10070:	4a0d      	ldr	r2, [pc, #52]	; (100a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10072:	9b01      	ldr	r3, [sp, #4]
   10074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10078:	1e5a      	subs	r2, r3, #1
   1007a:	490b      	ldr	r1, [pc, #44]	; (100a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1007c:	9b01      	ldr	r3, [sp, #4]
   1007e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10082:	4a0a      	ldr	r2, [pc, #40]	; (100ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10084:	9b01      	ldr	r3, [sp, #4]
   10086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1008a:	f003 0301 	and.w	r3, r3, #1
   1008e:	2b00      	cmp	r3, #0
   10090:	d106      	bne.n	100a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10092:	4a05      	ldr	r2, [pc, #20]	; (100a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10094:	9b01      	ldr	r3, [sp, #4]
   10096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1009a:	2b00      	cmp	r3, #0
   1009c:	d100      	bne.n	100a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1009e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   100a0:	bf00      	nop
   100a2:	b003      	add	sp, #12
   100a4:	f85d fb04 	ldr.w	pc, [sp], #4
   100a8:	1fff92ac 	.word	0x1fff92ac
   100ac:	1fff92a8 	.word	0x1fff92a8

000100b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   100b0:	b500      	push	{lr}
   100b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100b4:	f7f1 fbc8 	bl	1848 <Sys_GetCoreID>
   100b8:	4603      	mov	r3, r0
   100ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   100bc:	4a10      	ldr	r2, [pc, #64]	; (10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100be:	9b01      	ldr	r3, [sp, #4]
   100c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100c4:	2b00      	cmp	r3, #0
   100c6:	d10d      	bne.n	100e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100c8:	f7f0 fd9e 	bl	c08 <Adc_schm_read_msr>
   100cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100ce:	9b00      	ldr	r3, [sp, #0]
   100d0:	f003 0301 	and.w	r3, r3, #1
   100d4:	2b00      	cmp	r3, #0
   100d6:	d100      	bne.n	100da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   100da:	490a      	ldr	r1, [pc, #40]	; (10104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   100dc:	9b01      	ldr	r3, [sp, #4]
   100de:	9a00      	ldr	r2, [sp, #0]
   100e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   100e4:	4a06      	ldr	r2, [pc, #24]	; (10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100e6:	9b01      	ldr	r3, [sp, #4]
   100e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ec:	1c5a      	adds	r2, r3, #1
   100ee:	4904      	ldr	r1, [pc, #16]	; (10100 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100f0:	9b01      	ldr	r3, [sp, #4]
   100f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100f6:	bf00      	nop
   100f8:	b003      	add	sp, #12
   100fa:	f85d fb04 	ldr.w	pc, [sp], #4
   100fe:	bf00      	nop
   10100:	1fff92b4 	.word	0x1fff92b4
   10104:	1fff92b0 	.word	0x1fff92b0

00010108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10108:	b500      	push	{lr}
   1010a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1010c:	f7f1 fb9c 	bl	1848 <Sys_GetCoreID>
   10110:	4603      	mov	r3, r0
   10112:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   10114:	4a0d      	ldr	r2, [pc, #52]	; (1014c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10116:	9b01      	ldr	r3, [sp, #4]
   10118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1011c:	1e5a      	subs	r2, r3, #1
   1011e:	490b      	ldr	r1, [pc, #44]	; (1014c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10120:	9b01      	ldr	r3, [sp, #4]
   10122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   10126:	4a0a      	ldr	r2, [pc, #40]	; (10150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   10128:	9b01      	ldr	r3, [sp, #4]
   1012a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1012e:	f003 0301 	and.w	r3, r3, #1
   10132:	2b00      	cmp	r3, #0
   10134:	d106      	bne.n	10144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   10136:	4a05      	ldr	r2, [pc, #20]	; (1014c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10138:	9b01      	ldr	r3, [sp, #4]
   1013a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1013e:	2b00      	cmp	r3, #0
   10140:	d100      	bne.n	10144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10144:	bf00      	nop
   10146:	b003      	add	sp, #12
   10148:	f85d fb04 	ldr.w	pc, [sp], #4
   1014c:	1fff92b4 	.word	0x1fff92b4
   10150:	1fff92b0 	.word	0x1fff92b0

00010154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10154:	b500      	push	{lr}
   10156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10158:	f7f1 fb76 	bl	1848 <Sys_GetCoreID>
   1015c:	4603      	mov	r3, r0
   1015e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10160:	4a10      	ldr	r2, [pc, #64]	; (101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10162:	9b01      	ldr	r3, [sp, #4]
   10164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10168:	2b00      	cmp	r3, #0
   1016a:	d10d      	bne.n	10188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1016c:	f7f0 fd4c 	bl	c08 <Adc_schm_read_msr>
   10170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10172:	9b00      	ldr	r3, [sp, #0]
   10174:	f003 0301 	and.w	r3, r3, #1
   10178:	2b00      	cmp	r3, #0
   1017a:	d100      	bne.n	1017e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1017c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   1017e:	490a      	ldr	r1, [pc, #40]	; (101a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10180:	9b01      	ldr	r3, [sp, #4]
   10182:	9a00      	ldr	r2, [sp, #0]
   10184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10188:	4a06      	ldr	r2, [pc, #24]	; (101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1018a:	9b01      	ldr	r3, [sp, #4]
   1018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10190:	1c5a      	adds	r2, r3, #1
   10192:	4904      	ldr	r1, [pc, #16]	; (101a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10194:	9b01      	ldr	r3, [sp, #4]
   10196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1019a:	bf00      	nop
   1019c:	b003      	add	sp, #12
   1019e:	f85d fb04 	ldr.w	pc, [sp], #4
   101a2:	bf00      	nop
   101a4:	1fff92bc 	.word	0x1fff92bc
   101a8:	1fff92b8 	.word	0x1fff92b8

000101ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   101ac:	b500      	push	{lr}
   101ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101b0:	f7f1 fb4a 	bl	1848 <Sys_GetCoreID>
   101b4:	4603      	mov	r3, r0
   101b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   101b8:	4a0d      	ldr	r2, [pc, #52]	; (101f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   101ba:	9b01      	ldr	r3, [sp, #4]
   101bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101c0:	1e5a      	subs	r2, r3, #1
   101c2:	490b      	ldr	r1, [pc, #44]	; (101f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   101c4:	9b01      	ldr	r3, [sp, #4]
   101c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   101ca:	4a0a      	ldr	r2, [pc, #40]	; (101f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   101cc:	9b01      	ldr	r3, [sp, #4]
   101ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101d2:	f003 0301 	and.w	r3, r3, #1
   101d6:	2b00      	cmp	r3, #0
   101d8:	d106      	bne.n	101e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   101da:	4a05      	ldr	r2, [pc, #20]	; (101f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   101dc:	9b01      	ldr	r3, [sp, #4]
   101de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101e2:	2b00      	cmp	r3, #0
   101e4:	d100      	bne.n	101e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101e8:	bf00      	nop
   101ea:	b003      	add	sp, #12
   101ec:	f85d fb04 	ldr.w	pc, [sp], #4
   101f0:	1fff92bc 	.word	0x1fff92bc
   101f4:	1fff92b8 	.word	0x1fff92b8

000101f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   101f8:	b500      	push	{lr}
   101fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101fc:	f7f1 fb24 	bl	1848 <Sys_GetCoreID>
   10200:	4603      	mov	r3, r0
   10202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   10204:	4a10      	ldr	r2, [pc, #64]	; (10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10206:	9b01      	ldr	r3, [sp, #4]
   10208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1020c:	2b00      	cmp	r3, #0
   1020e:	d10d      	bne.n	1022c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10210:	f7f0 fcfa 	bl	c08 <Adc_schm_read_msr>
   10214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10216:	9b00      	ldr	r3, [sp, #0]
   10218:	f003 0301 	and.w	r3, r3, #1
   1021c:	2b00      	cmp	r3, #0
   1021e:	d100      	bne.n	10222 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   10222:	490a      	ldr	r1, [pc, #40]	; (1024c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   10224:	9b01      	ldr	r3, [sp, #4]
   10226:	9a00      	ldr	r2, [sp, #0]
   10228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   1022c:	4a06      	ldr	r2, [pc, #24]	; (10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   1022e:	9b01      	ldr	r3, [sp, #4]
   10230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10234:	1c5a      	adds	r2, r3, #1
   10236:	4904      	ldr	r1, [pc, #16]	; (10248 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10238:	9b01      	ldr	r3, [sp, #4]
   1023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1023e:	bf00      	nop
   10240:	b003      	add	sp, #12
   10242:	f85d fb04 	ldr.w	pc, [sp], #4
   10246:	bf00      	nop
   10248:	1fff92c4 	.word	0x1fff92c4
   1024c:	1fff92c0 	.word	0x1fff92c0

00010250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10250:	b500      	push	{lr}
   10252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10254:	f7f1 faf8 	bl	1848 <Sys_GetCoreID>
   10258:	4603      	mov	r3, r0
   1025a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   1025c:	4a0d      	ldr	r2, [pc, #52]	; (10294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   1025e:	9b01      	ldr	r3, [sp, #4]
   10260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10264:	1e5a      	subs	r2, r3, #1
   10266:	490b      	ldr	r1, [pc, #44]	; (10294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10268:	9b01      	ldr	r3, [sp, #4]
   1026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1026e:	4a0a      	ldr	r2, [pc, #40]	; (10298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10270:	9b01      	ldr	r3, [sp, #4]
   10272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10276:	f003 0301 	and.w	r3, r3, #1
   1027a:	2b00      	cmp	r3, #0
   1027c:	d106      	bne.n	1028c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   1027e:	4a05      	ldr	r2, [pc, #20]	; (10294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10280:	9b01      	ldr	r3, [sp, #4]
   10282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10286:	2b00      	cmp	r3, #0
   10288:	d100      	bne.n	1028c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1028a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1028c:	bf00      	nop
   1028e:	b003      	add	sp, #12
   10290:	f85d fb04 	ldr.w	pc, [sp], #4
   10294:	1fff92c4 	.word	0x1fff92c4
   10298:	1fff92c0 	.word	0x1fff92c0

0001029c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   1029c:	b500      	push	{lr}
   1029e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102a0:	f7f1 fad2 	bl	1848 <Sys_GetCoreID>
   102a4:	4603      	mov	r3, r0
   102a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   102a8:	4a10      	ldr	r2, [pc, #64]	; (102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   102aa:	9b01      	ldr	r3, [sp, #4]
   102ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b0:	2b00      	cmp	r3, #0
   102b2:	d10d      	bne.n	102d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102b4:	f7f0 fca8 	bl	c08 <Adc_schm_read_msr>
   102b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102ba:	9b00      	ldr	r3, [sp, #0]
   102bc:	f003 0301 	and.w	r3, r3, #1
   102c0:	2b00      	cmp	r3, #0
   102c2:	d100      	bne.n	102c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   102c6:	490a      	ldr	r1, [pc, #40]	; (102f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   102c8:	9b01      	ldr	r3, [sp, #4]
   102ca:	9a00      	ldr	r2, [sp, #0]
   102cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   102d0:	4a06      	ldr	r2, [pc, #24]	; (102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   102d2:	9b01      	ldr	r3, [sp, #4]
   102d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102d8:	1c5a      	adds	r2, r3, #1
   102da:	4904      	ldr	r1, [pc, #16]	; (102ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   102dc:	9b01      	ldr	r3, [sp, #4]
   102de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102e2:	bf00      	nop
   102e4:	b003      	add	sp, #12
   102e6:	f85d fb04 	ldr.w	pc, [sp], #4
   102ea:	bf00      	nop
   102ec:	1fff92cc 	.word	0x1fff92cc
   102f0:	1fff92c8 	.word	0x1fff92c8

000102f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   102f4:	b500      	push	{lr}
   102f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102f8:	f7f1 faa6 	bl	1848 <Sys_GetCoreID>
   102fc:	4603      	mov	r3, r0
   102fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   10300:	4a0d      	ldr	r2, [pc, #52]	; (10338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10302:	9b01      	ldr	r3, [sp, #4]
   10304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10308:	1e5a      	subs	r2, r3, #1
   1030a:	490b      	ldr	r1, [pc, #44]	; (10338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1030c:	9b01      	ldr	r3, [sp, #4]
   1030e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   10312:	4a0a      	ldr	r2, [pc, #40]	; (1033c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   10314:	9b01      	ldr	r3, [sp, #4]
   10316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1031a:	f003 0301 	and.w	r3, r3, #1
   1031e:	2b00      	cmp	r3, #0
   10320:	d106      	bne.n	10330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   10322:	4a05      	ldr	r2, [pc, #20]	; (10338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   10324:	9b01      	ldr	r3, [sp, #4]
   10326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1032a:	2b00      	cmp	r3, #0
   1032c:	d100      	bne.n	10330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1032e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10330:	bf00      	nop
   10332:	b003      	add	sp, #12
   10334:	f85d fb04 	ldr.w	pc, [sp], #4
   10338:	1fff92cc 	.word	0x1fff92cc
   1033c:	1fff92c8 	.word	0x1fff92c8

00010340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10340:	b500      	push	{lr}
   10342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10344:	f7f1 fa80 	bl	1848 <Sys_GetCoreID>
   10348:	4603      	mov	r3, r0
   1034a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   1034c:	4a10      	ldr	r2, [pc, #64]	; (10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1034e:	9b01      	ldr	r3, [sp, #4]
   10350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10354:	2b00      	cmp	r3, #0
   10356:	d10d      	bne.n	10374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10358:	f7f0 fc56 	bl	c08 <Adc_schm_read_msr>
   1035c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1035e:	9b00      	ldr	r3, [sp, #0]
   10360:	f003 0301 	and.w	r3, r3, #1
   10364:	2b00      	cmp	r3, #0
   10366:	d100      	bne.n	1036a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   1036a:	490a      	ldr	r1, [pc, #40]	; (10394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   1036c:	9b01      	ldr	r3, [sp, #4]
   1036e:	9a00      	ldr	r2, [sp, #0]
   10370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   10374:	4a06      	ldr	r2, [pc, #24]	; (10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10376:	9b01      	ldr	r3, [sp, #4]
   10378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1037c:	1c5a      	adds	r2, r3, #1
   1037e:	4904      	ldr	r1, [pc, #16]	; (10390 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10380:	9b01      	ldr	r3, [sp, #4]
   10382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10386:	bf00      	nop
   10388:	b003      	add	sp, #12
   1038a:	f85d fb04 	ldr.w	pc, [sp], #4
   1038e:	bf00      	nop
   10390:	1fff92d4 	.word	0x1fff92d4
   10394:	1fff92d0 	.word	0x1fff92d0

00010398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10398:	b500      	push	{lr}
   1039a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1039c:	f7f1 fa54 	bl	1848 <Sys_GetCoreID>
   103a0:	4603      	mov	r3, r0
   103a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   103a4:	4a0d      	ldr	r2, [pc, #52]	; (103dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   103a6:	9b01      	ldr	r3, [sp, #4]
   103a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ac:	1e5a      	subs	r2, r3, #1
   103ae:	490b      	ldr	r1, [pc, #44]	; (103dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   103b0:	9b01      	ldr	r3, [sp, #4]
   103b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   103b6:	4a0a      	ldr	r2, [pc, #40]	; (103e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   103b8:	9b01      	ldr	r3, [sp, #4]
   103ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103be:	f003 0301 	and.w	r3, r3, #1
   103c2:	2b00      	cmp	r3, #0
   103c4:	d106      	bne.n	103d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   103c6:	4a05      	ldr	r2, [pc, #20]	; (103dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   103c8:	9b01      	ldr	r3, [sp, #4]
   103ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ce:	2b00      	cmp	r3, #0
   103d0:	d100      	bne.n	103d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103d4:	bf00      	nop
   103d6:	b003      	add	sp, #12
   103d8:	f85d fb04 	ldr.w	pc, [sp], #4
   103dc:	1fff92d4 	.word	0x1fff92d4
   103e0:	1fff92d0 	.word	0x1fff92d0

000103e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   103e4:	b500      	push	{lr}
   103e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103e8:	f7f1 fa2e 	bl	1848 <Sys_GetCoreID>
   103ec:	4603      	mov	r3, r0
   103ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   103f0:	4a10      	ldr	r2, [pc, #64]	; (10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103f2:	9b01      	ldr	r3, [sp, #4]
   103f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103f8:	2b00      	cmp	r3, #0
   103fa:	d10d      	bne.n	10418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103fc:	f7f0 fc04 	bl	c08 <Adc_schm_read_msr>
   10400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10402:	9b00      	ldr	r3, [sp, #0]
   10404:	f003 0301 	and.w	r3, r3, #1
   10408:	2b00      	cmp	r3, #0
   1040a:	d100      	bne.n	1040e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1040c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   1040e:	490a      	ldr	r1, [pc, #40]	; (10438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   10410:	9b01      	ldr	r3, [sp, #4]
   10412:	9a00      	ldr	r2, [sp, #0]
   10414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   10418:	4a06      	ldr	r2, [pc, #24]	; (10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1041a:	9b01      	ldr	r3, [sp, #4]
   1041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10420:	1c5a      	adds	r2, r3, #1
   10422:	4904      	ldr	r1, [pc, #16]	; (10434 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   10424:	9b01      	ldr	r3, [sp, #4]
   10426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1042a:	bf00      	nop
   1042c:	b003      	add	sp, #12
   1042e:	f85d fb04 	ldr.w	pc, [sp], #4
   10432:	bf00      	nop
   10434:	1fff92dc 	.word	0x1fff92dc
   10438:	1fff92d8 	.word	0x1fff92d8

0001043c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   1043c:	b500      	push	{lr}
   1043e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10440:	f7f1 fa02 	bl	1848 <Sys_GetCoreID>
   10444:	4603      	mov	r3, r0
   10446:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   10448:	4a0d      	ldr	r2, [pc, #52]	; (10480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1044a:	9b01      	ldr	r3, [sp, #4]
   1044c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10450:	1e5a      	subs	r2, r3, #1
   10452:	490b      	ldr	r1, [pc, #44]	; (10480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   10454:	9b01      	ldr	r3, [sp, #4]
   10456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   1045a:	4a0a      	ldr	r2, [pc, #40]	; (10484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   1045c:	9b01      	ldr	r3, [sp, #4]
   1045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10462:	f003 0301 	and.w	r3, r3, #1
   10466:	2b00      	cmp	r3, #0
   10468:	d106      	bne.n	10478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   1046a:	4a05      	ldr	r2, [pc, #20]	; (10480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1046c:	9b01      	ldr	r3, [sp, #4]
   1046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10472:	2b00      	cmp	r3, #0
   10474:	d100      	bne.n	10478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10478:	bf00      	nop
   1047a:	b003      	add	sp, #12
   1047c:	f85d fb04 	ldr.w	pc, [sp], #4
   10480:	1fff92dc 	.word	0x1fff92dc
   10484:	1fff92d8 	.word	0x1fff92d8

00010488 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   10488:	b500      	push	{lr}
   1048a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1048c:	f7f1 f9dc 	bl	1848 <Sys_GetCoreID>
   10490:	4603      	mov	r3, r0
   10492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   10494:	4a10      	ldr	r2, [pc, #64]	; (104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10496:	9b01      	ldr	r3, [sp, #4]
   10498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1049c:	2b00      	cmp	r3, #0
   1049e:	d10d      	bne.n	104bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   104a0:	f7f0 fbb2 	bl	c08 <Adc_schm_read_msr>
   104a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   104a6:	9b00      	ldr	r3, [sp, #0]
   104a8:	f003 0301 	and.w	r3, r3, #1
   104ac:	2b00      	cmp	r3, #0
   104ae:	d100      	bne.n	104b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   104b2:	490a      	ldr	r1, [pc, #40]	; (104dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   104b4:	9b01      	ldr	r3, [sp, #4]
   104b6:	9a00      	ldr	r2, [sp, #0]
   104b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   104bc:	4a06      	ldr	r2, [pc, #24]	; (104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   104be:	9b01      	ldr	r3, [sp, #4]
   104c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c4:	1c5a      	adds	r2, r3, #1
   104c6:	4904      	ldr	r1, [pc, #16]	; (104d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   104c8:	9b01      	ldr	r3, [sp, #4]
   104ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104ce:	bf00      	nop
   104d0:	b003      	add	sp, #12
   104d2:	f85d fb04 	ldr.w	pc, [sp], #4
   104d6:	bf00      	nop
   104d8:	1fff92e4 	.word	0x1fff92e4
   104dc:	1fff92e0 	.word	0x1fff92e0

000104e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   104e0:	b500      	push	{lr}
   104e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104e4:	f7f1 f9b0 	bl	1848 <Sys_GetCoreID>
   104e8:	4603      	mov	r3, r0
   104ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   104ec:	4a0d      	ldr	r2, [pc, #52]	; (10524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104f4:	1e5a      	subs	r2, r3, #1
   104f6:	490b      	ldr	r1, [pc, #44]	; (10524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   104fe:	4a0a      	ldr	r2, [pc, #40]	; (10528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10506:	f003 0301 	and.w	r3, r3, #1
   1050a:	2b00      	cmp	r3, #0
   1050c:	d106      	bne.n	1051c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   1050e:	4a05      	ldr	r2, [pc, #20]	; (10524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   10510:	9b01      	ldr	r3, [sp, #4]
   10512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10516:	2b00      	cmp	r3, #0
   10518:	d100      	bne.n	1051c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1051a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1051c:	bf00      	nop
   1051e:	b003      	add	sp, #12
   10520:	f85d fb04 	ldr.w	pc, [sp], #4
   10524:	1fff92e4 	.word	0x1fff92e4
   10528:	1fff92e0 	.word	0x1fff92e0

0001052c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   1052c:	b500      	push	{lr}
   1052e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10530:	f7f1 f98a 	bl	1848 <Sys_GetCoreID>
   10534:	4603      	mov	r3, r0
   10536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   10538:	4a10      	ldr	r2, [pc, #64]	; (1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1053a:	9b01      	ldr	r3, [sp, #4]
   1053c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10540:	2b00      	cmp	r3, #0
   10542:	d10d      	bne.n	10560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10544:	f7f0 fb60 	bl	c08 <Adc_schm_read_msr>
   10548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1054a:	9b00      	ldr	r3, [sp, #0]
   1054c:	f003 0301 	and.w	r3, r3, #1
   10550:	2b00      	cmp	r3, #0
   10552:	d100      	bne.n	10556 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   10556:	490a      	ldr	r1, [pc, #40]	; (10580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   10558:	9b01      	ldr	r3, [sp, #4]
   1055a:	9a00      	ldr	r2, [sp, #0]
   1055c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   10560:	4a06      	ldr	r2, [pc, #24]	; (1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   10562:	9b01      	ldr	r3, [sp, #4]
   10564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10568:	1c5a      	adds	r2, r3, #1
   1056a:	4904      	ldr	r1, [pc, #16]	; (1057c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1056c:	9b01      	ldr	r3, [sp, #4]
   1056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10572:	bf00      	nop
   10574:	b003      	add	sp, #12
   10576:	f85d fb04 	ldr.w	pc, [sp], #4
   1057a:	bf00      	nop
   1057c:	1fff92ec 	.word	0x1fff92ec
   10580:	1fff92e8 	.word	0x1fff92e8

00010584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   10584:	b500      	push	{lr}
   10586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10588:	f7f1 f95e 	bl	1848 <Sys_GetCoreID>
   1058c:	4603      	mov	r3, r0
   1058e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   10590:	4a0d      	ldr	r2, [pc, #52]	; (105c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   10592:	9b01      	ldr	r3, [sp, #4]
   10594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10598:	1e5a      	subs	r2, r3, #1
   1059a:	490b      	ldr	r1, [pc, #44]	; (105c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1059c:	9b01      	ldr	r3, [sp, #4]
   1059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   105a2:	4a0a      	ldr	r2, [pc, #40]	; (105cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   105a4:	9b01      	ldr	r3, [sp, #4]
   105a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105aa:	f003 0301 	and.w	r3, r3, #1
   105ae:	2b00      	cmp	r3, #0
   105b0:	d106      	bne.n	105c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   105b2:	4a05      	ldr	r2, [pc, #20]	; (105c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   105b4:	9b01      	ldr	r3, [sp, #4]
   105b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105ba:	2b00      	cmp	r3, #0
   105bc:	d100      	bne.n	105c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105c0:	bf00      	nop
   105c2:	b003      	add	sp, #12
   105c4:	f85d fb04 	ldr.w	pc, [sp], #4
   105c8:	1fff92ec 	.word	0x1fff92ec
   105cc:	1fff92e8 	.word	0x1fff92e8

000105d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   105d0:	b500      	push	{lr}
   105d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105d4:	f7f1 f938 	bl	1848 <Sys_GetCoreID>
   105d8:	4603      	mov	r3, r0
   105da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   105dc:	4a10      	ldr	r2, [pc, #64]	; (10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   105de:	9b01      	ldr	r3, [sp, #4]
   105e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105e4:	2b00      	cmp	r3, #0
   105e6:	d10d      	bne.n	10604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105e8:	f7f0 fb0e 	bl	c08 <Adc_schm_read_msr>
   105ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105ee:	9b00      	ldr	r3, [sp, #0]
   105f0:	f003 0301 	and.w	r3, r3, #1
   105f4:	2b00      	cmp	r3, #0
   105f6:	d100      	bne.n	105fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   105fa:	490a      	ldr	r1, [pc, #40]	; (10624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   105fc:	9b01      	ldr	r3, [sp, #4]
   105fe:	9a00      	ldr	r2, [sp, #0]
   10600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   10604:	4a06      	ldr	r2, [pc, #24]	; (10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   10606:	9b01      	ldr	r3, [sp, #4]
   10608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1060c:	1c5a      	adds	r2, r3, #1
   1060e:	4904      	ldr	r1, [pc, #16]	; (10620 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   10610:	9b01      	ldr	r3, [sp, #4]
   10612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10616:	bf00      	nop
   10618:	b003      	add	sp, #12
   1061a:	f85d fb04 	ldr.w	pc, [sp], #4
   1061e:	bf00      	nop
   10620:	1fff92f4 	.word	0x1fff92f4
   10624:	1fff92f0 	.word	0x1fff92f0

00010628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   10628:	b500      	push	{lr}
   1062a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1062c:	f7f1 f90c 	bl	1848 <Sys_GetCoreID>
   10630:	4603      	mov	r3, r0
   10632:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   10634:	4a0d      	ldr	r2, [pc, #52]	; (1066c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10636:	9b01      	ldr	r3, [sp, #4]
   10638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1063c:	1e5a      	subs	r2, r3, #1
   1063e:	490b      	ldr	r1, [pc, #44]	; (1066c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10640:	9b01      	ldr	r3, [sp, #4]
   10642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   10646:	4a0a      	ldr	r2, [pc, #40]	; (10670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   10648:	9b01      	ldr	r3, [sp, #4]
   1064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1064e:	f003 0301 	and.w	r3, r3, #1
   10652:	2b00      	cmp	r3, #0
   10654:	d106      	bne.n	10664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   10656:	4a05      	ldr	r2, [pc, #20]	; (1066c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10658:	9b01      	ldr	r3, [sp, #4]
   1065a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1065e:	2b00      	cmp	r3, #0
   10660:	d100      	bne.n	10664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10664:	bf00      	nop
   10666:	b003      	add	sp, #12
   10668:	f85d fb04 	ldr.w	pc, [sp], #4
   1066c:	1fff92f4 	.word	0x1fff92f4
   10670:	1fff92f0 	.word	0x1fff92f0

00010674 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   10674:	b500      	push	{lr}
   10676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10678:	f7f1 f8e6 	bl	1848 <Sys_GetCoreID>
   1067c:	4603      	mov	r3, r0
   1067e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   10680:	4a10      	ldr	r2, [pc, #64]	; (106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   10682:	9b01      	ldr	r3, [sp, #4]
   10684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10688:	2b00      	cmp	r3, #0
   1068a:	d10d      	bne.n	106a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1068c:	f7f0 fabc 	bl	c08 <Adc_schm_read_msr>
   10690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10692:	9b00      	ldr	r3, [sp, #0]
   10694:	f003 0301 	and.w	r3, r3, #1
   10698:	2b00      	cmp	r3, #0
   1069a:	d100      	bne.n	1069e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1069c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   1069e:	490a      	ldr	r1, [pc, #40]	; (106c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   106a0:	9b01      	ldr	r3, [sp, #4]
   106a2:	9a00      	ldr	r2, [sp, #0]
   106a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   106a8:	4a06      	ldr	r2, [pc, #24]	; (106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   106aa:	9b01      	ldr	r3, [sp, #4]
   106ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106b0:	1c5a      	adds	r2, r3, #1
   106b2:	4904      	ldr	r1, [pc, #16]	; (106c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   106b4:	9b01      	ldr	r3, [sp, #4]
   106b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106ba:	bf00      	nop
   106bc:	b003      	add	sp, #12
   106be:	f85d fb04 	ldr.w	pc, [sp], #4
   106c2:	bf00      	nop
   106c4:	1fff92fc 	.word	0x1fff92fc
   106c8:	1fff92f8 	.word	0x1fff92f8

000106cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   106cc:	b500      	push	{lr}
   106ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106d0:	f7f1 f8ba 	bl	1848 <Sys_GetCoreID>
   106d4:	4603      	mov	r3, r0
   106d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   106d8:	4a0d      	ldr	r2, [pc, #52]	; (10710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106da:	9b01      	ldr	r3, [sp, #4]
   106dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106e0:	1e5a      	subs	r2, r3, #1
   106e2:	490b      	ldr	r1, [pc, #44]	; (10710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106e4:	9b01      	ldr	r3, [sp, #4]
   106e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   106ea:	4a0a      	ldr	r2, [pc, #40]	; (10714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   106ec:	9b01      	ldr	r3, [sp, #4]
   106ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106f2:	f003 0301 	and.w	r3, r3, #1
   106f6:	2b00      	cmp	r3, #0
   106f8:	d106      	bne.n	10708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   106fa:	4a05      	ldr	r2, [pc, #20]	; (10710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106fc:	9b01      	ldr	r3, [sp, #4]
   106fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10702:	2b00      	cmp	r3, #0
   10704:	d100      	bne.n	10708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10708:	bf00      	nop
   1070a:	b003      	add	sp, #12
   1070c:	f85d fb04 	ldr.w	pc, [sp], #4
   10710:	1fff92fc 	.word	0x1fff92fc
   10714:	1fff92f8 	.word	0x1fff92f8

00010718 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   10718:	b500      	push	{lr}
   1071a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1071c:	f7f1 f894 	bl	1848 <Sys_GetCoreID>
   10720:	4603      	mov	r3, r0
   10722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   10724:	4a10      	ldr	r2, [pc, #64]	; (10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   10726:	9b01      	ldr	r3, [sp, #4]
   10728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1072c:	2b00      	cmp	r3, #0
   1072e:	d10d      	bne.n	1074c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10730:	f7f0 fa6a 	bl	c08 <Adc_schm_read_msr>
   10734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10736:	9b00      	ldr	r3, [sp, #0]
   10738:	f003 0301 	and.w	r3, r3, #1
   1073c:	2b00      	cmp	r3, #0
   1073e:	d100      	bne.n	10742 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   10742:	490a      	ldr	r1, [pc, #40]	; (1076c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   10744:	9b01      	ldr	r3, [sp, #4]
   10746:	9a00      	ldr	r2, [sp, #0]
   10748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   1074c:	4a06      	ldr	r2, [pc, #24]	; (10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   1074e:	9b01      	ldr	r3, [sp, #4]
   10750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10754:	1c5a      	adds	r2, r3, #1
   10756:	4904      	ldr	r1, [pc, #16]	; (10768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   10758:	9b01      	ldr	r3, [sp, #4]
   1075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1075e:	bf00      	nop
   10760:	b003      	add	sp, #12
   10762:	f85d fb04 	ldr.w	pc, [sp], #4
   10766:	bf00      	nop
   10768:	1fff9304 	.word	0x1fff9304
   1076c:	1fff9300 	.word	0x1fff9300

00010770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   10770:	b500      	push	{lr}
   10772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10774:	f7f1 f868 	bl	1848 <Sys_GetCoreID>
   10778:	4603      	mov	r3, r0
   1077a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   1077c:	4a0d      	ldr	r2, [pc, #52]	; (107b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1077e:	9b01      	ldr	r3, [sp, #4]
   10780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10784:	1e5a      	subs	r2, r3, #1
   10786:	490b      	ldr	r1, [pc, #44]	; (107b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10788:	9b01      	ldr	r3, [sp, #4]
   1078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   1078e:	4a0a      	ldr	r2, [pc, #40]	; (107b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   10790:	9b01      	ldr	r3, [sp, #4]
   10792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10796:	f003 0301 	and.w	r3, r3, #1
   1079a:	2b00      	cmp	r3, #0
   1079c:	d106      	bne.n	107ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   1079e:	4a05      	ldr	r2, [pc, #20]	; (107b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   107a0:	9b01      	ldr	r3, [sp, #4]
   107a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107a6:	2b00      	cmp	r3, #0
   107a8:	d100      	bne.n	107ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   107aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   107ac:	bf00      	nop
   107ae:	b003      	add	sp, #12
   107b0:	f85d fb04 	ldr.w	pc, [sp], #4
   107b4:	1fff9304 	.word	0x1fff9304
   107b8:	1fff9300 	.word	0x1fff9300

000107bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   107bc:	b500      	push	{lr}
   107be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107c0:	f7f1 f842 	bl	1848 <Sys_GetCoreID>
   107c4:	4603      	mov	r3, r0
   107c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   107c8:	4a10      	ldr	r2, [pc, #64]	; (1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107ca:	9b01      	ldr	r3, [sp, #4]
   107cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107d0:	2b00      	cmp	r3, #0
   107d2:	d10d      	bne.n	107f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107d4:	f7f0 fa18 	bl	c08 <Adc_schm_read_msr>
   107d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107da:	9b00      	ldr	r3, [sp, #0]
   107dc:	f003 0301 	and.w	r3, r3, #1
   107e0:	2b00      	cmp	r3, #0
   107e2:	d100      	bne.n	107e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   107e6:	490a      	ldr	r1, [pc, #40]	; (10810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   107e8:	9b01      	ldr	r3, [sp, #4]
   107ea:	9a00      	ldr	r2, [sp, #0]
   107ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   107f0:	4a06      	ldr	r2, [pc, #24]	; (1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107f2:	9b01      	ldr	r3, [sp, #4]
   107f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107f8:	1c5a      	adds	r2, r3, #1
   107fa:	4904      	ldr	r1, [pc, #16]	; (1080c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107fc:	9b01      	ldr	r3, [sp, #4]
   107fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10802:	bf00      	nop
   10804:	b003      	add	sp, #12
   10806:	f85d fb04 	ldr.w	pc, [sp], #4
   1080a:	bf00      	nop
   1080c:	1fff930c 	.word	0x1fff930c
   10810:	1fff9308 	.word	0x1fff9308

00010814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   10814:	b500      	push	{lr}
   10816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10818:	f7f1 f816 	bl	1848 <Sys_GetCoreID>
   1081c:	4603      	mov	r3, r0
   1081e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   10820:	4a0d      	ldr	r2, [pc, #52]	; (10858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   10822:	9b01      	ldr	r3, [sp, #4]
   10824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10828:	1e5a      	subs	r2, r3, #1
   1082a:	490b      	ldr	r1, [pc, #44]	; (10858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   1082c:	9b01      	ldr	r3, [sp, #4]
   1082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   10832:	4a0a      	ldr	r2, [pc, #40]	; (1085c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   10834:	9b01      	ldr	r3, [sp, #4]
   10836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1083a:	f003 0301 	and.w	r3, r3, #1
   1083e:	2b00      	cmp	r3, #0
   10840:	d106      	bne.n	10850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   10842:	4a05      	ldr	r2, [pc, #20]	; (10858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   10844:	9b01      	ldr	r3, [sp, #4]
   10846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1084a:	2b00      	cmp	r3, #0
   1084c:	d100      	bne.n	10850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1084e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10850:	bf00      	nop
   10852:	b003      	add	sp, #12
   10854:	f85d fb04 	ldr.w	pc, [sp], #4
   10858:	1fff930c 	.word	0x1fff930c
   1085c:	1fff9308 	.word	0x1fff9308

00010860 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10860:	b500      	push	{lr}
   10862:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10864:	f7f0 fff0 	bl	1848 <Sys_GetCoreID>
   10868:	4603      	mov	r3, r0
   1086a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   1086c:	4a10      	ldr	r2, [pc, #64]	; (108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1086e:	9b01      	ldr	r3, [sp, #4]
   10870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10874:	2b00      	cmp	r3, #0
   10876:	d10d      	bne.n	10894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10878:	f7f0 f9c6 	bl	c08 <Adc_schm_read_msr>
   1087c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1087e:	9b00      	ldr	r3, [sp, #0]
   10880:	f003 0301 	and.w	r3, r3, #1
   10884:	2b00      	cmp	r3, #0
   10886:	d100      	bne.n	1088a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10888:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   1088a:	490a      	ldr	r1, [pc, #40]	; (108b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   1088c:	9b01      	ldr	r3, [sp, #4]
   1088e:	9a00      	ldr	r2, [sp, #0]
   10890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   10894:	4a06      	ldr	r2, [pc, #24]	; (108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10896:	9b01      	ldr	r3, [sp, #4]
   10898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1089c:	1c5a      	adds	r2, r3, #1
   1089e:	4904      	ldr	r1, [pc, #16]	; (108b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   108a0:	9b01      	ldr	r3, [sp, #4]
   108a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   108a6:	bf00      	nop
   108a8:	b003      	add	sp, #12
   108aa:	f85d fb04 	ldr.w	pc, [sp], #4
   108ae:	bf00      	nop
   108b0:	1fff9314 	.word	0x1fff9314
   108b4:	1fff9310 	.word	0x1fff9310

000108b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   108b8:	b500      	push	{lr}
   108ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108bc:	f7f0 ffc4 	bl	1848 <Sys_GetCoreID>
   108c0:	4603      	mov	r3, r0
   108c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   108c4:	4a0d      	ldr	r2, [pc, #52]	; (108fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   108c6:	9b01      	ldr	r3, [sp, #4]
   108c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108cc:	1e5a      	subs	r2, r3, #1
   108ce:	490b      	ldr	r1, [pc, #44]	; (108fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   108d0:	9b01      	ldr	r3, [sp, #4]
   108d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   108d6:	4a0a      	ldr	r2, [pc, #40]	; (10900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   108d8:	9b01      	ldr	r3, [sp, #4]
   108da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108de:	f003 0301 	and.w	r3, r3, #1
   108e2:	2b00      	cmp	r3, #0
   108e4:	d106      	bne.n	108f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   108e6:	4a05      	ldr	r2, [pc, #20]	; (108fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   108e8:	9b01      	ldr	r3, [sp, #4]
   108ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d100      	bne.n	108f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108f4:	bf00      	nop
   108f6:	b003      	add	sp, #12
   108f8:	f85d fb04 	ldr.w	pc, [sp], #4
   108fc:	1fff9314 	.word	0x1fff9314
   10900:	1fff9310 	.word	0x1fff9310

00010904 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   10904:	b500      	push	{lr}
   10906:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10908:	f7f0 ff9e 	bl	1848 <Sys_GetCoreID>
   1090c:	4603      	mov	r3, r0
   1090e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   10910:	4a10      	ldr	r2, [pc, #64]	; (10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   10912:	9b01      	ldr	r3, [sp, #4]
   10914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10918:	2b00      	cmp	r3, #0
   1091a:	d10d      	bne.n	10938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1091c:	f7f0 f974 	bl	c08 <Adc_schm_read_msr>
   10920:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10922:	9b00      	ldr	r3, [sp, #0]
   10924:	f003 0301 	and.w	r3, r3, #1
   10928:	2b00      	cmp	r3, #0
   1092a:	d100      	bne.n	1092e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1092c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   1092e:	490a      	ldr	r1, [pc, #40]	; (10958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   10930:	9b01      	ldr	r3, [sp, #4]
   10932:	9a00      	ldr	r2, [sp, #0]
   10934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   10938:	4a06      	ldr	r2, [pc, #24]	; (10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   1093a:	9b01      	ldr	r3, [sp, #4]
   1093c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10940:	1c5a      	adds	r2, r3, #1
   10942:	4904      	ldr	r1, [pc, #16]	; (10954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   10944:	9b01      	ldr	r3, [sp, #4]
   10946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1094a:	bf00      	nop
   1094c:	b003      	add	sp, #12
   1094e:	f85d fb04 	ldr.w	pc, [sp], #4
   10952:	bf00      	nop
   10954:	1fff931c 	.word	0x1fff931c
   10958:	1fff9318 	.word	0x1fff9318

0001095c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   1095c:	b500      	push	{lr}
   1095e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10960:	f7f0 ff72 	bl	1848 <Sys_GetCoreID>
   10964:	4603      	mov	r3, r0
   10966:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   10968:	4a0d      	ldr	r2, [pc, #52]	; (109a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1096a:	9b01      	ldr	r3, [sp, #4]
   1096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10970:	1e5a      	subs	r2, r3, #1
   10972:	490b      	ldr	r1, [pc, #44]	; (109a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   10974:	9b01      	ldr	r3, [sp, #4]
   10976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   1097a:	4a0a      	ldr	r2, [pc, #40]	; (109a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   1097c:	9b01      	ldr	r3, [sp, #4]
   1097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10982:	f003 0301 	and.w	r3, r3, #1
   10986:	2b00      	cmp	r3, #0
   10988:	d106      	bne.n	10998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   1098a:	4a05      	ldr	r2, [pc, #20]	; (109a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1098c:	9b01      	ldr	r3, [sp, #4]
   1098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10992:	2b00      	cmp	r3, #0
   10994:	d100      	bne.n	10998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10996:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10998:	bf00      	nop
   1099a:	b003      	add	sp, #12
   1099c:	f85d fb04 	ldr.w	pc, [sp], #4
   109a0:	1fff931c 	.word	0x1fff931c
   109a4:	1fff9318 	.word	0x1fff9318

000109a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   109a8:	b500      	push	{lr}
   109aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109ac:	f7f0 ff4c 	bl	1848 <Sys_GetCoreID>
   109b0:	4603      	mov	r3, r0
   109b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   109b4:	4a10      	ldr	r2, [pc, #64]	; (109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   109b6:	9b01      	ldr	r3, [sp, #4]
   109b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109bc:	2b00      	cmp	r3, #0
   109be:	d10d      	bne.n	109dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109c0:	f7f0 f922 	bl	c08 <Adc_schm_read_msr>
   109c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109c6:	9b00      	ldr	r3, [sp, #0]
   109c8:	f003 0301 	and.w	r3, r3, #1
   109cc:	2b00      	cmp	r3, #0
   109ce:	d100      	bne.n	109d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   109d2:	490a      	ldr	r1, [pc, #40]	; (109fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   109d4:	9b01      	ldr	r3, [sp, #4]
   109d6:	9a00      	ldr	r2, [sp, #0]
   109d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   109dc:	4a06      	ldr	r2, [pc, #24]	; (109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   109de:	9b01      	ldr	r3, [sp, #4]
   109e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109e4:	1c5a      	adds	r2, r3, #1
   109e6:	4904      	ldr	r1, [pc, #16]	; (109f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   109e8:	9b01      	ldr	r3, [sp, #4]
   109ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109ee:	bf00      	nop
   109f0:	b003      	add	sp, #12
   109f2:	f85d fb04 	ldr.w	pc, [sp], #4
   109f6:	bf00      	nop
   109f8:	1fff9324 	.word	0x1fff9324
   109fc:	1fff9320 	.word	0x1fff9320

00010a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   10a00:	b500      	push	{lr}
   10a02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a04:	f7f0 ff20 	bl	1848 <Sys_GetCoreID>
   10a08:	4603      	mov	r3, r0
   10a0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   10a0c:	4a0d      	ldr	r2, [pc, #52]	; (10a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   10a0e:	9b01      	ldr	r3, [sp, #4]
   10a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a14:	1e5a      	subs	r2, r3, #1
   10a16:	490b      	ldr	r1, [pc, #44]	; (10a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   10a18:	9b01      	ldr	r3, [sp, #4]
   10a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   10a1e:	4a0a      	ldr	r2, [pc, #40]	; (10a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   10a20:	9b01      	ldr	r3, [sp, #4]
   10a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a26:	f003 0301 	and.w	r3, r3, #1
   10a2a:	2b00      	cmp	r3, #0
   10a2c:	d106      	bne.n	10a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   10a2e:	4a05      	ldr	r2, [pc, #20]	; (10a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   10a30:	9b01      	ldr	r3, [sp, #4]
   10a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d100      	bne.n	10a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a3c:	bf00      	nop
   10a3e:	b003      	add	sp, #12
   10a40:	f85d fb04 	ldr.w	pc, [sp], #4
   10a44:	1fff9324 	.word	0x1fff9324
   10a48:	1fff9320 	.word	0x1fff9320

00010a4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   10a4c:	b500      	push	{lr}
   10a4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a50:	f7f0 fefa 	bl	1848 <Sys_GetCoreID>
   10a54:	4603      	mov	r3, r0
   10a56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   10a58:	4a10      	ldr	r2, [pc, #64]	; (10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a5a:	9b01      	ldr	r3, [sp, #4]
   10a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d10d      	bne.n	10a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a64:	f7f0 f8d0 	bl	c08 <Adc_schm_read_msr>
   10a68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a6a:	9b00      	ldr	r3, [sp, #0]
   10a6c:	f003 0301 	and.w	r3, r3, #1
   10a70:	2b00      	cmp	r3, #0
   10a72:	d100      	bne.n	10a76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   10a76:	490a      	ldr	r1, [pc, #40]	; (10aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   10a78:	9b01      	ldr	r3, [sp, #4]
   10a7a:	9a00      	ldr	r2, [sp, #0]
   10a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   10a80:	4a06      	ldr	r2, [pc, #24]	; (10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a82:	9b01      	ldr	r3, [sp, #4]
   10a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a88:	1c5a      	adds	r2, r3, #1
   10a8a:	4904      	ldr	r1, [pc, #16]	; (10a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a8c:	9b01      	ldr	r3, [sp, #4]
   10a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a92:	bf00      	nop
   10a94:	b003      	add	sp, #12
   10a96:	f85d fb04 	ldr.w	pc, [sp], #4
   10a9a:	bf00      	nop
   10a9c:	1fff932c 	.word	0x1fff932c
   10aa0:	1fff9328 	.word	0x1fff9328

00010aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   10aa4:	b500      	push	{lr}
   10aa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10aa8:	f7f0 fece 	bl	1848 <Sys_GetCoreID>
   10aac:	4603      	mov	r3, r0
   10aae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   10ab0:	4a0d      	ldr	r2, [pc, #52]	; (10ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10ab2:	9b01      	ldr	r3, [sp, #4]
   10ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ab8:	1e5a      	subs	r2, r3, #1
   10aba:	490b      	ldr	r1, [pc, #44]	; (10ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10abc:	9b01      	ldr	r3, [sp, #4]
   10abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   10ac2:	4a0a      	ldr	r2, [pc, #40]	; (10aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   10ac4:	9b01      	ldr	r3, [sp, #4]
   10ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aca:	f003 0301 	and.w	r3, r3, #1
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d106      	bne.n	10ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   10ad2:	4a05      	ldr	r2, [pc, #20]	; (10ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10ad4:	9b01      	ldr	r3, [sp, #4]
   10ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ada:	2b00      	cmp	r3, #0
   10adc:	d100      	bne.n	10ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ade:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ae0:	bf00      	nop
   10ae2:	b003      	add	sp, #12
   10ae4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ae8:	1fff932c 	.word	0x1fff932c
   10aec:	1fff9328 	.word	0x1fff9328

00010af0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10af0:	b500      	push	{lr}
   10af2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10af4:	f7f0 fea8 	bl	1848 <Sys_GetCoreID>
   10af8:	4603      	mov	r3, r0
   10afa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   10afc:	4a10      	ldr	r2, [pc, #64]	; (10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10afe:	9b01      	ldr	r3, [sp, #4]
   10b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b04:	2b00      	cmp	r3, #0
   10b06:	d10d      	bne.n	10b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b08:	f7f0 f87e 	bl	c08 <Adc_schm_read_msr>
   10b0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b0e:	9b00      	ldr	r3, [sp, #0]
   10b10:	f003 0301 	and.w	r3, r3, #1
   10b14:	2b00      	cmp	r3, #0
   10b16:	d100      	bne.n	10b1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   10b1a:	490a      	ldr	r1, [pc, #40]	; (10b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   10b1c:	9b01      	ldr	r3, [sp, #4]
   10b1e:	9a00      	ldr	r2, [sp, #0]
   10b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   10b24:	4a06      	ldr	r2, [pc, #24]	; (10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10b26:	9b01      	ldr	r3, [sp, #4]
   10b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b2c:	1c5a      	adds	r2, r3, #1
   10b2e:	4904      	ldr	r1, [pc, #16]	; (10b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10b30:	9b01      	ldr	r3, [sp, #4]
   10b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b36:	bf00      	nop
   10b38:	b003      	add	sp, #12
   10b3a:	f85d fb04 	ldr.w	pc, [sp], #4
   10b3e:	bf00      	nop
   10b40:	1fff9334 	.word	0x1fff9334
   10b44:	1fff9330 	.word	0x1fff9330

00010b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10b48:	b500      	push	{lr}
   10b4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b4c:	f7f0 fe7c 	bl	1848 <Sys_GetCoreID>
   10b50:	4603      	mov	r3, r0
   10b52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   10b54:	4a0d      	ldr	r2, [pc, #52]	; (10b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b56:	9b01      	ldr	r3, [sp, #4]
   10b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b5c:	1e5a      	subs	r2, r3, #1
   10b5e:	490b      	ldr	r1, [pc, #44]	; (10b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b60:	9b01      	ldr	r3, [sp, #4]
   10b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   10b66:	4a0a      	ldr	r2, [pc, #40]	; (10b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   10b68:	9b01      	ldr	r3, [sp, #4]
   10b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b6e:	f003 0301 	and.w	r3, r3, #1
   10b72:	2b00      	cmp	r3, #0
   10b74:	d106      	bne.n	10b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   10b76:	4a05      	ldr	r2, [pc, #20]	; (10b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b78:	9b01      	ldr	r3, [sp, #4]
   10b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b7e:	2b00      	cmp	r3, #0
   10b80:	d100      	bne.n	10b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b84:	bf00      	nop
   10b86:	b003      	add	sp, #12
   10b88:	f85d fb04 	ldr.w	pc, [sp], #4
   10b8c:	1fff9334 	.word	0x1fff9334
   10b90:	1fff9330 	.word	0x1fff9330

00010b94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10b94:	b500      	push	{lr}
   10b96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b98:	f7f0 fe56 	bl	1848 <Sys_GetCoreID>
   10b9c:	4603      	mov	r3, r0
   10b9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   10ba0:	4a10      	ldr	r2, [pc, #64]	; (10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10ba2:	9b01      	ldr	r3, [sp, #4]
   10ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d10d      	bne.n	10bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10bac:	f7f0 f82c 	bl	c08 <Adc_schm_read_msr>
   10bb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10bb2:	9b00      	ldr	r3, [sp, #0]
   10bb4:	f003 0301 	and.w	r3, r3, #1
   10bb8:	2b00      	cmp	r3, #0
   10bba:	d100      	bne.n	10bbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   10bbe:	490a      	ldr	r1, [pc, #40]	; (10be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   10bc0:	9b01      	ldr	r3, [sp, #4]
   10bc2:	9a00      	ldr	r2, [sp, #0]
   10bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   10bc8:	4a06      	ldr	r2, [pc, #24]	; (10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10bca:	9b01      	ldr	r3, [sp, #4]
   10bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bd0:	1c5a      	adds	r2, r3, #1
   10bd2:	4904      	ldr	r1, [pc, #16]	; (10be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10bd4:	9b01      	ldr	r3, [sp, #4]
   10bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10bda:	bf00      	nop
   10bdc:	b003      	add	sp, #12
   10bde:	f85d fb04 	ldr.w	pc, [sp], #4
   10be2:	bf00      	nop
   10be4:	1fff933c 	.word	0x1fff933c
   10be8:	1fff9338 	.word	0x1fff9338

00010bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10bec:	b500      	push	{lr}
   10bee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bf0:	f7f0 fe2a 	bl	1848 <Sys_GetCoreID>
   10bf4:	4603      	mov	r3, r0
   10bf6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   10bf8:	4a0d      	ldr	r2, [pc, #52]	; (10c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10bfa:	9b01      	ldr	r3, [sp, #4]
   10bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c00:	1e5a      	subs	r2, r3, #1
   10c02:	490b      	ldr	r1, [pc, #44]	; (10c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10c04:	9b01      	ldr	r3, [sp, #4]
   10c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   10c0a:	4a0a      	ldr	r2, [pc, #40]	; (10c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   10c0c:	9b01      	ldr	r3, [sp, #4]
   10c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c12:	f003 0301 	and.w	r3, r3, #1
   10c16:	2b00      	cmp	r3, #0
   10c18:	d106      	bne.n	10c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   10c1a:	4a05      	ldr	r2, [pc, #20]	; (10c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10c1c:	9b01      	ldr	r3, [sp, #4]
   10c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c22:	2b00      	cmp	r3, #0
   10c24:	d100      	bne.n	10c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c28:	bf00      	nop
   10c2a:	b003      	add	sp, #12
   10c2c:	f85d fb04 	ldr.w	pc, [sp], #4
   10c30:	1fff933c 	.word	0x1fff933c
   10c34:	1fff9338 	.word	0x1fff9338

00010c38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10c38:	b500      	push	{lr}
   10c3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c3c:	f7f0 fe04 	bl	1848 <Sys_GetCoreID>
   10c40:	4603      	mov	r3, r0
   10c42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   10c44:	4a10      	ldr	r2, [pc, #64]	; (10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c46:	9b01      	ldr	r3, [sp, #4]
   10c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d10d      	bne.n	10c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c50:	f7ef ffda 	bl	c08 <Adc_schm_read_msr>
   10c54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c56:	9b00      	ldr	r3, [sp, #0]
   10c58:	f003 0301 	and.w	r3, r3, #1
   10c5c:	2b00      	cmp	r3, #0
   10c5e:	d100      	bne.n	10c62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   10c62:	490a      	ldr	r1, [pc, #40]	; (10c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   10c64:	9b01      	ldr	r3, [sp, #4]
   10c66:	9a00      	ldr	r2, [sp, #0]
   10c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   10c6c:	4a06      	ldr	r2, [pc, #24]	; (10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c6e:	9b01      	ldr	r3, [sp, #4]
   10c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c74:	1c5a      	adds	r2, r3, #1
   10c76:	4904      	ldr	r1, [pc, #16]	; (10c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c78:	9b01      	ldr	r3, [sp, #4]
   10c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c7e:	bf00      	nop
   10c80:	b003      	add	sp, #12
   10c82:	f85d fb04 	ldr.w	pc, [sp], #4
   10c86:	bf00      	nop
   10c88:	1fff9344 	.word	0x1fff9344
   10c8c:	1fff9340 	.word	0x1fff9340

00010c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10c90:	b500      	push	{lr}
   10c92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c94:	f7f0 fdd8 	bl	1848 <Sys_GetCoreID>
   10c98:	4603      	mov	r3, r0
   10c9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   10c9c:	4a0d      	ldr	r2, [pc, #52]	; (10cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c9e:	9b01      	ldr	r3, [sp, #4]
   10ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ca4:	1e5a      	subs	r2, r3, #1
   10ca6:	490b      	ldr	r1, [pc, #44]	; (10cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10ca8:	9b01      	ldr	r3, [sp, #4]
   10caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   10cae:	4a0a      	ldr	r2, [pc, #40]	; (10cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   10cb0:	9b01      	ldr	r3, [sp, #4]
   10cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb6:	f003 0301 	and.w	r3, r3, #1
   10cba:	2b00      	cmp	r3, #0
   10cbc:	d106      	bne.n	10ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   10cbe:	4a05      	ldr	r2, [pc, #20]	; (10cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10cc0:	9b01      	ldr	r3, [sp, #4]
   10cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cc6:	2b00      	cmp	r3, #0
   10cc8:	d100      	bne.n	10ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10cca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ccc:	bf00      	nop
   10cce:	b003      	add	sp, #12
   10cd0:	f85d fb04 	ldr.w	pc, [sp], #4
   10cd4:	1fff9344 	.word	0x1fff9344
   10cd8:	1fff9340 	.word	0x1fff9340

00010cdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10cdc:	b500      	push	{lr}
   10cde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ce0:	f7f0 fdb2 	bl	1848 <Sys_GetCoreID>
   10ce4:	4603      	mov	r3, r0
   10ce6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   10ce8:	4a10      	ldr	r2, [pc, #64]	; (10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10cea:	9b01      	ldr	r3, [sp, #4]
   10cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cf0:	2b00      	cmp	r3, #0
   10cf2:	d10d      	bne.n	10d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cf4:	f7ef ff88 	bl	c08 <Adc_schm_read_msr>
   10cf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cfa:	9b00      	ldr	r3, [sp, #0]
   10cfc:	f003 0301 	and.w	r3, r3, #1
   10d00:	2b00      	cmp	r3, #0
   10d02:	d100      	bne.n	10d06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   10d06:	490a      	ldr	r1, [pc, #40]	; (10d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   10d08:	9b01      	ldr	r3, [sp, #4]
   10d0a:	9a00      	ldr	r2, [sp, #0]
   10d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   10d10:	4a06      	ldr	r2, [pc, #24]	; (10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10d12:	9b01      	ldr	r3, [sp, #4]
   10d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d18:	1c5a      	adds	r2, r3, #1
   10d1a:	4904      	ldr	r1, [pc, #16]	; (10d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10d1c:	9b01      	ldr	r3, [sp, #4]
   10d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d22:	bf00      	nop
   10d24:	b003      	add	sp, #12
   10d26:	f85d fb04 	ldr.w	pc, [sp], #4
   10d2a:	bf00      	nop
   10d2c:	1fff934c 	.word	0x1fff934c
   10d30:	1fff9348 	.word	0x1fff9348

00010d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10d34:	b500      	push	{lr}
   10d36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d38:	f7f0 fd86 	bl	1848 <Sys_GetCoreID>
   10d3c:	4603      	mov	r3, r0
   10d3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   10d40:	4a0d      	ldr	r2, [pc, #52]	; (10d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d42:	9b01      	ldr	r3, [sp, #4]
   10d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d48:	1e5a      	subs	r2, r3, #1
   10d4a:	490b      	ldr	r1, [pc, #44]	; (10d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d4c:	9b01      	ldr	r3, [sp, #4]
   10d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   10d52:	4a0a      	ldr	r2, [pc, #40]	; (10d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   10d54:	9b01      	ldr	r3, [sp, #4]
   10d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d5a:	f003 0301 	and.w	r3, r3, #1
   10d5e:	2b00      	cmp	r3, #0
   10d60:	d106      	bne.n	10d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   10d62:	4a05      	ldr	r2, [pc, #20]	; (10d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d64:	9b01      	ldr	r3, [sp, #4]
   10d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d6a:	2b00      	cmp	r3, #0
   10d6c:	d100      	bne.n	10d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d70:	bf00      	nop
   10d72:	b003      	add	sp, #12
   10d74:	f85d fb04 	ldr.w	pc, [sp], #4
   10d78:	1fff934c 	.word	0x1fff934c
   10d7c:	1fff9348 	.word	0x1fff9348

00010d80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10d80:	b500      	push	{lr}
   10d82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d84:	f7f0 fd60 	bl	1848 <Sys_GetCoreID>
   10d88:	4603      	mov	r3, r0
   10d8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   10d8c:	4a10      	ldr	r2, [pc, #64]	; (10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d8e:	9b01      	ldr	r3, [sp, #4]
   10d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d94:	2b00      	cmp	r3, #0
   10d96:	d10d      	bne.n	10db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d98:	f7ef ff36 	bl	c08 <Adc_schm_read_msr>
   10d9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d9e:	9b00      	ldr	r3, [sp, #0]
   10da0:	f003 0301 	and.w	r3, r3, #1
   10da4:	2b00      	cmp	r3, #0
   10da6:	d100      	bne.n	10daa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10da8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   10daa:	490a      	ldr	r1, [pc, #40]	; (10dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   10dac:	9b01      	ldr	r3, [sp, #4]
   10dae:	9a00      	ldr	r2, [sp, #0]
   10db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   10db4:	4a06      	ldr	r2, [pc, #24]	; (10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10db6:	9b01      	ldr	r3, [sp, #4]
   10db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dbc:	1c5a      	adds	r2, r3, #1
   10dbe:	4904      	ldr	r1, [pc, #16]	; (10dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10dc0:	9b01      	ldr	r3, [sp, #4]
   10dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10dc6:	bf00      	nop
   10dc8:	b003      	add	sp, #12
   10dca:	f85d fb04 	ldr.w	pc, [sp], #4
   10dce:	bf00      	nop
   10dd0:	1fff9354 	.word	0x1fff9354
   10dd4:	1fff9350 	.word	0x1fff9350

00010dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10dd8:	b500      	push	{lr}
   10dda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ddc:	f7f0 fd34 	bl	1848 <Sys_GetCoreID>
   10de0:	4603      	mov	r3, r0
   10de2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   10de4:	4a0d      	ldr	r2, [pc, #52]	; (10e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10de6:	9b01      	ldr	r3, [sp, #4]
   10de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dec:	1e5a      	subs	r2, r3, #1
   10dee:	490b      	ldr	r1, [pc, #44]	; (10e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10df0:	9b01      	ldr	r3, [sp, #4]
   10df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   10df6:	4a0a      	ldr	r2, [pc, #40]	; (10e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   10df8:	9b01      	ldr	r3, [sp, #4]
   10dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dfe:	f003 0301 	and.w	r3, r3, #1
   10e02:	2b00      	cmp	r3, #0
   10e04:	d106      	bne.n	10e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   10e06:	4a05      	ldr	r2, [pc, #20]	; (10e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10e08:	9b01      	ldr	r3, [sp, #4]
   10e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e0e:	2b00      	cmp	r3, #0
   10e10:	d100      	bne.n	10e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e14:	bf00      	nop
   10e16:	b003      	add	sp, #12
   10e18:	f85d fb04 	ldr.w	pc, [sp], #4
   10e1c:	1fff9354 	.word	0x1fff9354
   10e20:	1fff9350 	.word	0x1fff9350

00010e24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10e24:	b500      	push	{lr}
   10e26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e28:	f7f0 fd0e 	bl	1848 <Sys_GetCoreID>
   10e2c:	4603      	mov	r3, r0
   10e2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   10e30:	4a10      	ldr	r2, [pc, #64]	; (10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e32:	9b01      	ldr	r3, [sp, #4]
   10e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e38:	2b00      	cmp	r3, #0
   10e3a:	d10d      	bne.n	10e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e3c:	f7ef fee4 	bl	c08 <Adc_schm_read_msr>
   10e40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e42:	9b00      	ldr	r3, [sp, #0]
   10e44:	f003 0301 	and.w	r3, r3, #1
   10e48:	2b00      	cmp	r3, #0
   10e4a:	d100      	bne.n	10e4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   10e4e:	490a      	ldr	r1, [pc, #40]	; (10e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   10e50:	9b01      	ldr	r3, [sp, #4]
   10e52:	9a00      	ldr	r2, [sp, #0]
   10e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   10e58:	4a06      	ldr	r2, [pc, #24]	; (10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e5a:	9b01      	ldr	r3, [sp, #4]
   10e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e60:	1c5a      	adds	r2, r3, #1
   10e62:	4904      	ldr	r1, [pc, #16]	; (10e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e64:	9b01      	ldr	r3, [sp, #4]
   10e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e6a:	bf00      	nop
   10e6c:	b003      	add	sp, #12
   10e6e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e72:	bf00      	nop
   10e74:	1fff935c 	.word	0x1fff935c
   10e78:	1fff9358 	.word	0x1fff9358

00010e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10e7c:	b500      	push	{lr}
   10e7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e80:	f7f0 fce2 	bl	1848 <Sys_GetCoreID>
   10e84:	4603      	mov	r3, r0
   10e86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   10e88:	4a0d      	ldr	r2, [pc, #52]	; (10ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e8a:	9b01      	ldr	r3, [sp, #4]
   10e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e90:	1e5a      	subs	r2, r3, #1
   10e92:	490b      	ldr	r1, [pc, #44]	; (10ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e94:	9b01      	ldr	r3, [sp, #4]
   10e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   10e9a:	4a0a      	ldr	r2, [pc, #40]	; (10ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   10e9c:	9b01      	ldr	r3, [sp, #4]
   10e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ea2:	f003 0301 	and.w	r3, r3, #1
   10ea6:	2b00      	cmp	r3, #0
   10ea8:	d106      	bne.n	10eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   10eaa:	4a05      	ldr	r2, [pc, #20]	; (10ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10eac:	9b01      	ldr	r3, [sp, #4]
   10eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10eb2:	2b00      	cmp	r3, #0
   10eb4:	d100      	bne.n	10eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10eb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10eb8:	bf00      	nop
   10eba:	b003      	add	sp, #12
   10ebc:	f85d fb04 	ldr.w	pc, [sp], #4
   10ec0:	1fff935c 	.word	0x1fff935c
   10ec4:	1fff9358 	.word	0x1fff9358

00010ec8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10ec8:	b500      	push	{lr}
   10eca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ecc:	f7f0 fcbc 	bl	1848 <Sys_GetCoreID>
   10ed0:	4603      	mov	r3, r0
   10ed2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   10ed4:	4a10      	ldr	r2, [pc, #64]	; (10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10ed6:	9b01      	ldr	r3, [sp, #4]
   10ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10edc:	2b00      	cmp	r3, #0
   10ede:	d10d      	bne.n	10efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ee0:	f7ef fe92 	bl	c08 <Adc_schm_read_msr>
   10ee4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ee6:	9b00      	ldr	r3, [sp, #0]
   10ee8:	f003 0301 	and.w	r3, r3, #1
   10eec:	2b00      	cmp	r3, #0
   10eee:	d100      	bne.n	10ef2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ef0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   10ef2:	490a      	ldr	r1, [pc, #40]	; (10f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   10ef4:	9b01      	ldr	r3, [sp, #4]
   10ef6:	9a00      	ldr	r2, [sp, #0]
   10ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   10efc:	4a06      	ldr	r2, [pc, #24]	; (10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10efe:	9b01      	ldr	r3, [sp, #4]
   10f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f04:	1c5a      	adds	r2, r3, #1
   10f06:	4904      	ldr	r1, [pc, #16]	; (10f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10f08:	9b01      	ldr	r3, [sp, #4]
   10f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f0e:	bf00      	nop
   10f10:	b003      	add	sp, #12
   10f12:	f85d fb04 	ldr.w	pc, [sp], #4
   10f16:	bf00      	nop
   10f18:	1fff9364 	.word	0x1fff9364
   10f1c:	1fff9360 	.word	0x1fff9360

00010f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10f20:	b500      	push	{lr}
   10f22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f24:	f7f0 fc90 	bl	1848 <Sys_GetCoreID>
   10f28:	4603      	mov	r3, r0
   10f2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   10f2c:	4a0d      	ldr	r2, [pc, #52]	; (10f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10f2e:	9b01      	ldr	r3, [sp, #4]
   10f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f34:	1e5a      	subs	r2, r3, #1
   10f36:	490b      	ldr	r1, [pc, #44]	; (10f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10f38:	9b01      	ldr	r3, [sp, #4]
   10f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   10f3e:	4a0a      	ldr	r2, [pc, #40]	; (10f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   10f40:	9b01      	ldr	r3, [sp, #4]
   10f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f46:	f003 0301 	and.w	r3, r3, #1
   10f4a:	2b00      	cmp	r3, #0
   10f4c:	d106      	bne.n	10f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   10f4e:	4a05      	ldr	r2, [pc, #20]	; (10f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10f50:	9b01      	ldr	r3, [sp, #4]
   10f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f56:	2b00      	cmp	r3, #0
   10f58:	d100      	bne.n	10f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f5c:	bf00      	nop
   10f5e:	b003      	add	sp, #12
   10f60:	f85d fb04 	ldr.w	pc, [sp], #4
   10f64:	1fff9364 	.word	0x1fff9364
   10f68:	1fff9360 	.word	0x1fff9360

00010f6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10f6c:	b500      	push	{lr}
   10f6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f70:	f7f0 fc6a 	bl	1848 <Sys_GetCoreID>
   10f74:	4603      	mov	r3, r0
   10f76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   10f78:	4a10      	ldr	r2, [pc, #64]	; (10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f7a:	9b01      	ldr	r3, [sp, #4]
   10f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f80:	2b00      	cmp	r3, #0
   10f82:	d10d      	bne.n	10fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f84:	f7ef fe40 	bl	c08 <Adc_schm_read_msr>
   10f88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f8a:	9b00      	ldr	r3, [sp, #0]
   10f8c:	f003 0301 	and.w	r3, r3, #1
   10f90:	2b00      	cmp	r3, #0
   10f92:	d100      	bne.n	10f96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   10f96:	490a      	ldr	r1, [pc, #40]	; (10fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   10f98:	9b01      	ldr	r3, [sp, #4]
   10f9a:	9a00      	ldr	r2, [sp, #0]
   10f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   10fa0:	4a06      	ldr	r2, [pc, #24]	; (10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10fa2:	9b01      	ldr	r3, [sp, #4]
   10fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fa8:	1c5a      	adds	r2, r3, #1
   10faa:	4904      	ldr	r1, [pc, #16]	; (10fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fb2:	bf00      	nop
   10fb4:	b003      	add	sp, #12
   10fb6:	f85d fb04 	ldr.w	pc, [sp], #4
   10fba:	bf00      	nop
   10fbc:	1fff936c 	.word	0x1fff936c
   10fc0:	1fff9368 	.word	0x1fff9368

00010fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10fc4:	b500      	push	{lr}
   10fc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fc8:	f7f0 fc3e 	bl	1848 <Sys_GetCoreID>
   10fcc:	4603      	mov	r3, r0
   10fce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   10fd0:	4a0d      	ldr	r2, [pc, #52]	; (11008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10fd2:	9b01      	ldr	r3, [sp, #4]
   10fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fd8:	1e5a      	subs	r2, r3, #1
   10fda:	490b      	ldr	r1, [pc, #44]	; (11008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10fdc:	9b01      	ldr	r3, [sp, #4]
   10fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   10fe2:	4a0a      	ldr	r2, [pc, #40]	; (1100c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   10fe4:	9b01      	ldr	r3, [sp, #4]
   10fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fea:	f003 0301 	and.w	r3, r3, #1
   10fee:	2b00      	cmp	r3, #0
   10ff0:	d106      	bne.n	11000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   10ff2:	4a05      	ldr	r2, [pc, #20]	; (11008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10ff4:	9b01      	ldr	r3, [sp, #4]
   10ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ffa:	2b00      	cmp	r3, #0
   10ffc:	d100      	bne.n	11000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ffe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11000:	bf00      	nop
   11002:	b003      	add	sp, #12
   11004:	f85d fb04 	ldr.w	pc, [sp], #4
   11008:	1fff936c 	.word	0x1fff936c
   1100c:	1fff9368 	.word	0x1fff9368

00011010 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11010:	b500      	push	{lr}
   11012:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11014:	f7f0 fc18 	bl	1848 <Sys_GetCoreID>
   11018:	4603      	mov	r3, r0
   1101a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   1101c:	4a10      	ldr	r2, [pc, #64]	; (11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   1101e:	9b01      	ldr	r3, [sp, #4]
   11020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11024:	2b00      	cmp	r3, #0
   11026:	d10d      	bne.n	11044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11028:	f7ef fdee 	bl	c08 <Adc_schm_read_msr>
   1102c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1102e:	9b00      	ldr	r3, [sp, #0]
   11030:	f003 0301 	and.w	r3, r3, #1
   11034:	2b00      	cmp	r3, #0
   11036:	d100      	bne.n	1103a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11038:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   1103a:	490a      	ldr	r1, [pc, #40]	; (11064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   1103c:	9b01      	ldr	r3, [sp, #4]
   1103e:	9a00      	ldr	r2, [sp, #0]
   11040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11044:	4a06      	ldr	r2, [pc, #24]	; (11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11046:	9b01      	ldr	r3, [sp, #4]
   11048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1104c:	1c5a      	adds	r2, r3, #1
   1104e:	4904      	ldr	r1, [pc, #16]	; (11060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11056:	bf00      	nop
   11058:	b003      	add	sp, #12
   1105a:	f85d fb04 	ldr.w	pc, [sp], #4
   1105e:	bf00      	nop
   11060:	1fff9374 	.word	0x1fff9374
   11064:	1fff9370 	.word	0x1fff9370

00011068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11068:	b500      	push	{lr}
   1106a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1106c:	f7f0 fbec 	bl	1848 <Sys_GetCoreID>
   11070:	4603      	mov	r3, r0
   11072:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11074:	4a0d      	ldr	r2, [pc, #52]	; (110ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11076:	9b01      	ldr	r3, [sp, #4]
   11078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1107c:	1e5a      	subs	r2, r3, #1
   1107e:	490b      	ldr	r1, [pc, #44]	; (110ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11080:	9b01      	ldr	r3, [sp, #4]
   11082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11086:	4a0a      	ldr	r2, [pc, #40]	; (110b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11088:	9b01      	ldr	r3, [sp, #4]
   1108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1108e:	f003 0301 	and.w	r3, r3, #1
   11092:	2b00      	cmp	r3, #0
   11094:	d106      	bne.n	110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11096:	4a05      	ldr	r2, [pc, #20]	; (110ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11098:	9b01      	ldr	r3, [sp, #4]
   1109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1109e:	2b00      	cmp	r3, #0
   110a0:	d100      	bne.n	110a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   110a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   110a4:	bf00      	nop
   110a6:	b003      	add	sp, #12
   110a8:	f85d fb04 	ldr.w	pc, [sp], #4
   110ac:	1fff9374 	.word	0x1fff9374
   110b0:	1fff9370 	.word	0x1fff9370

000110b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   110b4:	b500      	push	{lr}
   110b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110b8:	f7f0 fbc6 	bl	1848 <Sys_GetCoreID>
   110bc:	4603      	mov	r3, r0
   110be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   110c0:	4a10      	ldr	r2, [pc, #64]	; (11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110c2:	9b01      	ldr	r3, [sp, #4]
   110c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110c8:	2b00      	cmp	r3, #0
   110ca:	d10d      	bne.n	110e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   110cc:	f7ef fd9c 	bl	c08 <Adc_schm_read_msr>
   110d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   110d2:	9b00      	ldr	r3, [sp, #0]
   110d4:	f003 0301 	and.w	r3, r3, #1
   110d8:	2b00      	cmp	r3, #0
   110da:	d100      	bne.n	110de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   110de:	490a      	ldr	r1, [pc, #40]	; (11108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   110e0:	9b01      	ldr	r3, [sp, #4]
   110e2:	9a00      	ldr	r2, [sp, #0]
   110e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   110e8:	4a06      	ldr	r2, [pc, #24]	; (11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110ea:	9b01      	ldr	r3, [sp, #4]
   110ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110f0:	1c5a      	adds	r2, r3, #1
   110f2:	4904      	ldr	r1, [pc, #16]	; (11104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110f4:	9b01      	ldr	r3, [sp, #4]
   110f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110fa:	bf00      	nop
   110fc:	b003      	add	sp, #12
   110fe:	f85d fb04 	ldr.w	pc, [sp], #4
   11102:	bf00      	nop
   11104:	1fff937c 	.word	0x1fff937c
   11108:	1fff9378 	.word	0x1fff9378

0001110c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   1110c:	b500      	push	{lr}
   1110e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11110:	f7f0 fb9a 	bl	1848 <Sys_GetCoreID>
   11114:	4603      	mov	r3, r0
   11116:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   11118:	4a0d      	ldr	r2, [pc, #52]	; (11150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   1111a:	9b01      	ldr	r3, [sp, #4]
   1111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11120:	1e5a      	subs	r2, r3, #1
   11122:	490b      	ldr	r1, [pc, #44]	; (11150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11124:	9b01      	ldr	r3, [sp, #4]
   11126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   1112a:	4a0a      	ldr	r2, [pc, #40]	; (11154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   1112c:	9b01      	ldr	r3, [sp, #4]
   1112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11132:	f003 0301 	and.w	r3, r3, #1
   11136:	2b00      	cmp	r3, #0
   11138:	d106      	bne.n	11148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   1113a:	4a05      	ldr	r2, [pc, #20]	; (11150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   1113c:	9b01      	ldr	r3, [sp, #4]
   1113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11142:	2b00      	cmp	r3, #0
   11144:	d100      	bne.n	11148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11146:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11148:	bf00      	nop
   1114a:	b003      	add	sp, #12
   1114c:	f85d fb04 	ldr.w	pc, [sp], #4
   11150:	1fff937c 	.word	0x1fff937c
   11154:	1fff9378 	.word	0x1fff9378

00011158 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11158:	b500      	push	{lr}
   1115a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1115c:	f7f0 fb74 	bl	1848 <Sys_GetCoreID>
   11160:	4603      	mov	r3, r0
   11162:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11164:	4a10      	ldr	r2, [pc, #64]	; (111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11166:	9b01      	ldr	r3, [sp, #4]
   11168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1116c:	2b00      	cmp	r3, #0
   1116e:	d10d      	bne.n	1118c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11170:	f7ef fd4a 	bl	c08 <Adc_schm_read_msr>
   11174:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11176:	9b00      	ldr	r3, [sp, #0]
   11178:	f003 0301 	and.w	r3, r3, #1
   1117c:	2b00      	cmp	r3, #0
   1117e:	d100      	bne.n	11182 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11180:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11182:	490a      	ldr	r1, [pc, #40]	; (111ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11184:	9b01      	ldr	r3, [sp, #4]
   11186:	9a00      	ldr	r2, [sp, #0]
   11188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   1118c:	4a06      	ldr	r2, [pc, #24]	; (111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1118e:	9b01      	ldr	r3, [sp, #4]
   11190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11194:	1c5a      	adds	r2, r3, #1
   11196:	4904      	ldr	r1, [pc, #16]	; (111a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11198:	9b01      	ldr	r3, [sp, #4]
   1119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1119e:	bf00      	nop
   111a0:	b003      	add	sp, #12
   111a2:	f85d fb04 	ldr.w	pc, [sp], #4
   111a6:	bf00      	nop
   111a8:	1fff9384 	.word	0x1fff9384
   111ac:	1fff9380 	.word	0x1fff9380

000111b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   111b0:	b500      	push	{lr}
   111b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111b4:	f7f0 fb48 	bl	1848 <Sys_GetCoreID>
   111b8:	4603      	mov	r3, r0
   111ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   111bc:	4a0d      	ldr	r2, [pc, #52]	; (111f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   111be:	9b01      	ldr	r3, [sp, #4]
   111c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111c4:	1e5a      	subs	r2, r3, #1
   111c6:	490b      	ldr	r1, [pc, #44]	; (111f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   111c8:	9b01      	ldr	r3, [sp, #4]
   111ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   111ce:	4a0a      	ldr	r2, [pc, #40]	; (111f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   111d0:	9b01      	ldr	r3, [sp, #4]
   111d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d6:	f003 0301 	and.w	r3, r3, #1
   111da:	2b00      	cmp	r3, #0
   111dc:	d106      	bne.n	111ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   111de:	4a05      	ldr	r2, [pc, #20]	; (111f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   111e0:	9b01      	ldr	r3, [sp, #4]
   111e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111e6:	2b00      	cmp	r3, #0
   111e8:	d100      	bne.n	111ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111ec:	bf00      	nop
   111ee:	b003      	add	sp, #12
   111f0:	f85d fb04 	ldr.w	pc, [sp], #4
   111f4:	1fff9384 	.word	0x1fff9384
   111f8:	1fff9380 	.word	0x1fff9380

000111fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   111fc:	b500      	push	{lr}
   111fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11200:	f7f0 fb22 	bl	1848 <Sys_GetCoreID>
   11204:	4603      	mov	r3, r0
   11206:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   11208:	4a10      	ldr	r2, [pc, #64]	; (1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   1120a:	9b01      	ldr	r3, [sp, #4]
   1120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11210:	2b00      	cmp	r3, #0
   11212:	d10d      	bne.n	11230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11214:	f7ef fcf8 	bl	c08 <Adc_schm_read_msr>
   11218:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1121a:	9b00      	ldr	r3, [sp, #0]
   1121c:	f003 0301 	and.w	r3, r3, #1
   11220:	2b00      	cmp	r3, #0
   11222:	d100      	bne.n	11226 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11224:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   11226:	490a      	ldr	r1, [pc, #40]	; (11250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   11228:	9b01      	ldr	r3, [sp, #4]
   1122a:	9a00      	ldr	r2, [sp, #0]
   1122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   11230:	4a06      	ldr	r2, [pc, #24]	; (1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11232:	9b01      	ldr	r3, [sp, #4]
   11234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11238:	1c5a      	adds	r2, r3, #1
   1123a:	4904      	ldr	r1, [pc, #16]	; (1124c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   1123c:	9b01      	ldr	r3, [sp, #4]
   1123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11242:	bf00      	nop
   11244:	b003      	add	sp, #12
   11246:	f85d fb04 	ldr.w	pc, [sp], #4
   1124a:	bf00      	nop
   1124c:	1fff938c 	.word	0x1fff938c
   11250:	1fff9388 	.word	0x1fff9388

00011254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11254:	b500      	push	{lr}
   11256:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11258:	f7f0 faf6 	bl	1848 <Sys_GetCoreID>
   1125c:	4603      	mov	r3, r0
   1125e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11260:	4a0d      	ldr	r2, [pc, #52]	; (11298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11262:	9b01      	ldr	r3, [sp, #4]
   11264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11268:	1e5a      	subs	r2, r3, #1
   1126a:	490b      	ldr	r1, [pc, #44]	; (11298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1126c:	9b01      	ldr	r3, [sp, #4]
   1126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   11272:	4a0a      	ldr	r2, [pc, #40]	; (1129c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   11274:	9b01      	ldr	r3, [sp, #4]
   11276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1127a:	f003 0301 	and.w	r3, r3, #1
   1127e:	2b00      	cmp	r3, #0
   11280:	d106      	bne.n	11290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   11282:	4a05      	ldr	r2, [pc, #20]	; (11298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11284:	9b01      	ldr	r3, [sp, #4]
   11286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1128a:	2b00      	cmp	r3, #0
   1128c:	d100      	bne.n	11290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1128e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11290:	bf00      	nop
   11292:	b003      	add	sp, #12
   11294:	f85d fb04 	ldr.w	pc, [sp], #4
   11298:	1fff938c 	.word	0x1fff938c
   1129c:	1fff9388 	.word	0x1fff9388

000112a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   112a0:	b500      	push	{lr}
   112a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112a4:	f7f0 fad0 	bl	1848 <Sys_GetCoreID>
   112a8:	4603      	mov	r3, r0
   112aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   112ac:	4a10      	ldr	r2, [pc, #64]	; (112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   112ae:	9b01      	ldr	r3, [sp, #4]
   112b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112b4:	2b00      	cmp	r3, #0
   112b6:	d10d      	bne.n	112d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112b8:	f7ef fca6 	bl	c08 <Adc_schm_read_msr>
   112bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112be:	9b00      	ldr	r3, [sp, #0]
   112c0:	f003 0301 	and.w	r3, r3, #1
   112c4:	2b00      	cmp	r3, #0
   112c6:	d100      	bne.n	112ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   112c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   112ca:	490a      	ldr	r1, [pc, #40]	; (112f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   112cc:	9b01      	ldr	r3, [sp, #4]
   112ce:	9a00      	ldr	r2, [sp, #0]
   112d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   112d4:	4a06      	ldr	r2, [pc, #24]	; (112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   112d6:	9b01      	ldr	r3, [sp, #4]
   112d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112dc:	1c5a      	adds	r2, r3, #1
   112de:	4904      	ldr	r1, [pc, #16]	; (112f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   112e0:	9b01      	ldr	r3, [sp, #4]
   112e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112e6:	bf00      	nop
   112e8:	b003      	add	sp, #12
   112ea:	f85d fb04 	ldr.w	pc, [sp], #4
   112ee:	bf00      	nop
   112f0:	1fff9394 	.word	0x1fff9394
   112f4:	1fff9390 	.word	0x1fff9390

000112f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   112f8:	b500      	push	{lr}
   112fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112fc:	f7f0 faa4 	bl	1848 <Sys_GetCoreID>
   11300:	4603      	mov	r3, r0
   11302:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   11304:	4a0d      	ldr	r2, [pc, #52]	; (1133c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11306:	9b01      	ldr	r3, [sp, #4]
   11308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1130c:	1e5a      	subs	r2, r3, #1
   1130e:	490b      	ldr	r1, [pc, #44]	; (1133c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11310:	9b01      	ldr	r3, [sp, #4]
   11312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   11316:	4a0a      	ldr	r2, [pc, #40]	; (11340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   11318:	9b01      	ldr	r3, [sp, #4]
   1131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1131e:	f003 0301 	and.w	r3, r3, #1
   11322:	2b00      	cmp	r3, #0
   11324:	d106      	bne.n	11334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   11326:	4a05      	ldr	r2, [pc, #20]	; (1133c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   11328:	9b01      	ldr	r3, [sp, #4]
   1132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1132e:	2b00      	cmp	r3, #0
   11330:	d100      	bne.n	11334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11332:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11334:	bf00      	nop
   11336:	b003      	add	sp, #12
   11338:	f85d fb04 	ldr.w	pc, [sp], #4
   1133c:	1fff9394 	.word	0x1fff9394
   11340:	1fff9390 	.word	0x1fff9390

00011344 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   11344:	b500      	push	{lr}
   11346:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11348:	f7f0 fa7e 	bl	1848 <Sys_GetCoreID>
   1134c:	4603      	mov	r3, r0
   1134e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   11350:	4a10      	ldr	r2, [pc, #64]	; (11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11352:	9b01      	ldr	r3, [sp, #4]
   11354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11358:	2b00      	cmp	r3, #0
   1135a:	d10d      	bne.n	11378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1135c:	f7ef fc54 	bl	c08 <Adc_schm_read_msr>
   11360:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11362:	9b00      	ldr	r3, [sp, #0]
   11364:	f003 0301 	and.w	r3, r3, #1
   11368:	2b00      	cmp	r3, #0
   1136a:	d100      	bne.n	1136e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1136c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   1136e:	490a      	ldr	r1, [pc, #40]	; (11398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   11370:	9b01      	ldr	r3, [sp, #4]
   11372:	9a00      	ldr	r2, [sp, #0]
   11374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   11378:	4a06      	ldr	r2, [pc, #24]	; (11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1137a:	9b01      	ldr	r3, [sp, #4]
   1137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11380:	1c5a      	adds	r2, r3, #1
   11382:	4904      	ldr	r1, [pc, #16]	; (11394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11384:	9b01      	ldr	r3, [sp, #4]
   11386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1138a:	bf00      	nop
   1138c:	b003      	add	sp, #12
   1138e:	f85d fb04 	ldr.w	pc, [sp], #4
   11392:	bf00      	nop
   11394:	1fff939c 	.word	0x1fff939c
   11398:	1fff9398 	.word	0x1fff9398

0001139c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1139c:	b500      	push	{lr}
   1139e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113a0:	f7f0 fa52 	bl	1848 <Sys_GetCoreID>
   113a4:	4603      	mov	r3, r0
   113a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   113a8:	4a0d      	ldr	r2, [pc, #52]	; (113e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   113aa:	9b01      	ldr	r3, [sp, #4]
   113ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113b0:	1e5a      	subs	r2, r3, #1
   113b2:	490b      	ldr	r1, [pc, #44]	; (113e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   113b4:	9b01      	ldr	r3, [sp, #4]
   113b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   113ba:	4a0a      	ldr	r2, [pc, #40]	; (113e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   113bc:	9b01      	ldr	r3, [sp, #4]
   113be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113c2:	f003 0301 	and.w	r3, r3, #1
   113c6:	2b00      	cmp	r3, #0
   113c8:	d106      	bne.n	113d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   113ca:	4a05      	ldr	r2, [pc, #20]	; (113e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   113cc:	9b01      	ldr	r3, [sp, #4]
   113ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113d2:	2b00      	cmp	r3, #0
   113d4:	d100      	bne.n	113d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   113d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113d8:	bf00      	nop
   113da:	b003      	add	sp, #12
   113dc:	f85d fb04 	ldr.w	pc, [sp], #4
   113e0:	1fff939c 	.word	0x1fff939c
   113e4:	1fff9398 	.word	0x1fff9398

000113e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   113e8:	b500      	push	{lr}
   113ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113ec:	f7f0 fa2c 	bl	1848 <Sys_GetCoreID>
   113f0:	4603      	mov	r3, r0
   113f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   113f4:	4a10      	ldr	r2, [pc, #64]	; (11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113f6:	9b01      	ldr	r3, [sp, #4]
   113f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113fc:	2b00      	cmp	r3, #0
   113fe:	d10d      	bne.n	1141c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11400:	f7ef fc02 	bl	c08 <Adc_schm_read_msr>
   11404:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11406:	9b00      	ldr	r3, [sp, #0]
   11408:	f003 0301 	and.w	r3, r3, #1
   1140c:	2b00      	cmp	r3, #0
   1140e:	d100      	bne.n	11412 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11410:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   11412:	490a      	ldr	r1, [pc, #40]	; (1143c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   11414:	9b01      	ldr	r3, [sp, #4]
   11416:	9a00      	ldr	r2, [sp, #0]
   11418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   1141c:	4a06      	ldr	r2, [pc, #24]	; (11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11424:	1c5a      	adds	r2, r3, #1
   11426:	4904      	ldr	r1, [pc, #16]	; (11438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   11428:	9b01      	ldr	r3, [sp, #4]
   1142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1142e:	bf00      	nop
   11430:	b003      	add	sp, #12
   11432:	f85d fb04 	ldr.w	pc, [sp], #4
   11436:	bf00      	nop
   11438:	1fff93a4 	.word	0x1fff93a4
   1143c:	1fff93a0 	.word	0x1fff93a0

00011440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   11440:	b500      	push	{lr}
   11442:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11444:	f7f0 fa00 	bl	1848 <Sys_GetCoreID>
   11448:	4603      	mov	r3, r0
   1144a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   1144c:	4a0d      	ldr	r2, [pc, #52]	; (11484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   1144e:	9b01      	ldr	r3, [sp, #4]
   11450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11454:	1e5a      	subs	r2, r3, #1
   11456:	490b      	ldr	r1, [pc, #44]	; (11484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11458:	9b01      	ldr	r3, [sp, #4]
   1145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   1145e:	4a0a      	ldr	r2, [pc, #40]	; (11488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   11460:	9b01      	ldr	r3, [sp, #4]
   11462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11466:	f003 0301 	and.w	r3, r3, #1
   1146a:	2b00      	cmp	r3, #0
   1146c:	d106      	bne.n	1147c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   1146e:	4a05      	ldr	r2, [pc, #20]	; (11484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11470:	9b01      	ldr	r3, [sp, #4]
   11472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11476:	2b00      	cmp	r3, #0
   11478:	d100      	bne.n	1147c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1147a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1147c:	bf00      	nop
   1147e:	b003      	add	sp, #12
   11480:	f85d fb04 	ldr.w	pc, [sp], #4
   11484:	1fff93a4 	.word	0x1fff93a4
   11488:	1fff93a0 	.word	0x1fff93a0

0001148c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   1148c:	b500      	push	{lr}
   1148e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11490:	f7f0 f9da 	bl	1848 <Sys_GetCoreID>
   11494:	4603      	mov	r3, r0
   11496:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   11498:	4a10      	ldr	r2, [pc, #64]	; (114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1149a:	9b01      	ldr	r3, [sp, #4]
   1149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114a0:	2b00      	cmp	r3, #0
   114a2:	d10d      	bne.n	114c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114a4:	f7ef fbb0 	bl	c08 <Adc_schm_read_msr>
   114a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114aa:	9b00      	ldr	r3, [sp, #0]
   114ac:	f003 0301 	and.w	r3, r3, #1
   114b0:	2b00      	cmp	r3, #0
   114b2:	d100      	bne.n	114b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   114b6:	490a      	ldr	r1, [pc, #40]	; (114e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   114b8:	9b01      	ldr	r3, [sp, #4]
   114ba:	9a00      	ldr	r2, [sp, #0]
   114bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   114c0:	4a06      	ldr	r2, [pc, #24]	; (114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   114c2:	9b01      	ldr	r3, [sp, #4]
   114c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114c8:	1c5a      	adds	r2, r3, #1
   114ca:	4904      	ldr	r1, [pc, #16]	; (114dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   114d2:	bf00      	nop
   114d4:	b003      	add	sp, #12
   114d6:	f85d fb04 	ldr.w	pc, [sp], #4
   114da:	bf00      	nop
   114dc:	1fff93ac 	.word	0x1fff93ac
   114e0:	1fff93a8 	.word	0x1fff93a8

000114e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   114e4:	b500      	push	{lr}
   114e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114e8:	f7f0 f9ae 	bl	1848 <Sys_GetCoreID>
   114ec:	4603      	mov	r3, r0
   114ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   114f0:	4a0d      	ldr	r2, [pc, #52]	; (11528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114f2:	9b01      	ldr	r3, [sp, #4]
   114f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114f8:	1e5a      	subs	r2, r3, #1
   114fa:	490b      	ldr	r1, [pc, #44]	; (11528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114fc:	9b01      	ldr	r3, [sp, #4]
   114fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   11502:	4a0a      	ldr	r2, [pc, #40]	; (1152c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   11504:	9b01      	ldr	r3, [sp, #4]
   11506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1150a:	f003 0301 	and.w	r3, r3, #1
   1150e:	2b00      	cmp	r3, #0
   11510:	d106      	bne.n	11520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   11512:	4a05      	ldr	r2, [pc, #20]	; (11528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   11514:	9b01      	ldr	r3, [sp, #4]
   11516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1151a:	2b00      	cmp	r3, #0
   1151c:	d100      	bne.n	11520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1151e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11520:	bf00      	nop
   11522:	b003      	add	sp, #12
   11524:	f85d fb04 	ldr.w	pc, [sp], #4
   11528:	1fff93ac 	.word	0x1fff93ac
   1152c:	1fff93a8 	.word	0x1fff93a8

00011530 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   11530:	b500      	push	{lr}
   11532:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11534:	f7f0 f988 	bl	1848 <Sys_GetCoreID>
   11538:	4603      	mov	r3, r0
   1153a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   1153c:	4a10      	ldr	r2, [pc, #64]	; (11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1153e:	9b01      	ldr	r3, [sp, #4]
   11540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11544:	2b00      	cmp	r3, #0
   11546:	d10d      	bne.n	11564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11548:	f7ef fb5e 	bl	c08 <Adc_schm_read_msr>
   1154c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1154e:	9b00      	ldr	r3, [sp, #0]
   11550:	f003 0301 	and.w	r3, r3, #1
   11554:	2b00      	cmp	r3, #0
   11556:	d100      	bne.n	1155a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11558:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   1155a:	490a      	ldr	r1, [pc, #40]	; (11584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   1155c:	9b01      	ldr	r3, [sp, #4]
   1155e:	9a00      	ldr	r2, [sp, #0]
   11560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   11564:	4a06      	ldr	r2, [pc, #24]	; (11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11566:	9b01      	ldr	r3, [sp, #4]
   11568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1156c:	1c5a      	adds	r2, r3, #1
   1156e:	4904      	ldr	r1, [pc, #16]	; (11580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11570:	9b01      	ldr	r3, [sp, #4]
   11572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11576:	bf00      	nop
   11578:	b003      	add	sp, #12
   1157a:	f85d fb04 	ldr.w	pc, [sp], #4
   1157e:	bf00      	nop
   11580:	1fff93b4 	.word	0x1fff93b4
   11584:	1fff93b0 	.word	0x1fff93b0

00011588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   11588:	b500      	push	{lr}
   1158a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1158c:	f7f0 f95c 	bl	1848 <Sys_GetCoreID>
   11590:	4603      	mov	r3, r0
   11592:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   11594:	4a0d      	ldr	r2, [pc, #52]	; (115cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11596:	9b01      	ldr	r3, [sp, #4]
   11598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1159c:	1e5a      	subs	r2, r3, #1
   1159e:	490b      	ldr	r1, [pc, #44]	; (115cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   115a0:	9b01      	ldr	r3, [sp, #4]
   115a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   115a6:	4a0a      	ldr	r2, [pc, #40]	; (115d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   115a8:	9b01      	ldr	r3, [sp, #4]
   115aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115ae:	f003 0301 	and.w	r3, r3, #1
   115b2:	2b00      	cmp	r3, #0
   115b4:	d106      	bne.n	115c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   115b6:	4a05      	ldr	r2, [pc, #20]	; (115cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   115b8:	9b01      	ldr	r3, [sp, #4]
   115ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115be:	2b00      	cmp	r3, #0
   115c0:	d100      	bne.n	115c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115c4:	bf00      	nop
   115c6:	b003      	add	sp, #12
   115c8:	f85d fb04 	ldr.w	pc, [sp], #4
   115cc:	1fff93b4 	.word	0x1fff93b4
   115d0:	1fff93b0 	.word	0x1fff93b0

000115d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   115d4:	b500      	push	{lr}
   115d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115d8:	f7f0 f936 	bl	1848 <Sys_GetCoreID>
   115dc:	4603      	mov	r3, r0
   115de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   115e0:	4a10      	ldr	r2, [pc, #64]	; (11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115e2:	9b01      	ldr	r3, [sp, #4]
   115e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e8:	2b00      	cmp	r3, #0
   115ea:	d10d      	bne.n	11608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115ec:	f7ef fb0c 	bl	c08 <Adc_schm_read_msr>
   115f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115f2:	9b00      	ldr	r3, [sp, #0]
   115f4:	f003 0301 	and.w	r3, r3, #1
   115f8:	2b00      	cmp	r3, #0
   115fa:	d100      	bne.n	115fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   115fe:	490a      	ldr	r1, [pc, #40]	; (11628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   11600:	9b01      	ldr	r3, [sp, #4]
   11602:	9a00      	ldr	r2, [sp, #0]
   11604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   11608:	4a06      	ldr	r2, [pc, #24]	; (11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   1160a:	9b01      	ldr	r3, [sp, #4]
   1160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11610:	1c5a      	adds	r2, r3, #1
   11612:	4904      	ldr	r1, [pc, #16]	; (11624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   11614:	9b01      	ldr	r3, [sp, #4]
   11616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1161a:	bf00      	nop
   1161c:	b003      	add	sp, #12
   1161e:	f85d fb04 	ldr.w	pc, [sp], #4
   11622:	bf00      	nop
   11624:	1fff93bc 	.word	0x1fff93bc
   11628:	1fff93b8 	.word	0x1fff93b8

0001162c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   1162c:	b500      	push	{lr}
   1162e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11630:	f7f0 f90a 	bl	1848 <Sys_GetCoreID>
   11634:	4603      	mov	r3, r0
   11636:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   11638:	4a0d      	ldr	r2, [pc, #52]	; (11670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   1163a:	9b01      	ldr	r3, [sp, #4]
   1163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11640:	1e5a      	subs	r2, r3, #1
   11642:	490b      	ldr	r1, [pc, #44]	; (11670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   1164a:	4a0a      	ldr	r2, [pc, #40]	; (11674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   1164c:	9b01      	ldr	r3, [sp, #4]
   1164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11652:	f003 0301 	and.w	r3, r3, #1
   11656:	2b00      	cmp	r3, #0
   11658:	d106      	bne.n	11668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   1165a:	4a05      	ldr	r2, [pc, #20]	; (11670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   1165c:	9b01      	ldr	r3, [sp, #4]
   1165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11662:	2b00      	cmp	r3, #0
   11664:	d100      	bne.n	11668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11666:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11668:	bf00      	nop
   1166a:	b003      	add	sp, #12
   1166c:	f85d fb04 	ldr.w	pc, [sp], #4
   11670:	1fff93bc 	.word	0x1fff93bc
   11674:	1fff93b8 	.word	0x1fff93b8

00011678 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11678:	b500      	push	{lr}
   1167a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1167c:	f7f0 f8e4 	bl	1848 <Sys_GetCoreID>
   11680:	4603      	mov	r3, r0
   11682:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   11684:	4a10      	ldr	r2, [pc, #64]	; (116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11686:	9b01      	ldr	r3, [sp, #4]
   11688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1168c:	2b00      	cmp	r3, #0
   1168e:	d10d      	bne.n	116ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11690:	f7ef faba 	bl	c08 <Adc_schm_read_msr>
   11694:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11696:	9b00      	ldr	r3, [sp, #0]
   11698:	f003 0301 	and.w	r3, r3, #1
   1169c:	2b00      	cmp	r3, #0
   1169e:	d100      	bne.n	116a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   116a2:	490a      	ldr	r1, [pc, #40]	; (116cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   116a4:	9b01      	ldr	r3, [sp, #4]
   116a6:	9a00      	ldr	r2, [sp, #0]
   116a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   116ac:	4a06      	ldr	r2, [pc, #24]	; (116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   116ae:	9b01      	ldr	r3, [sp, #4]
   116b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116b4:	1c5a      	adds	r2, r3, #1
   116b6:	4904      	ldr	r1, [pc, #16]	; (116c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   116b8:	9b01      	ldr	r3, [sp, #4]
   116ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116be:	bf00      	nop
   116c0:	b003      	add	sp, #12
   116c2:	f85d fb04 	ldr.w	pc, [sp], #4
   116c6:	bf00      	nop
   116c8:	1fff93c4 	.word	0x1fff93c4
   116cc:	1fff93c0 	.word	0x1fff93c0

000116d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   116d0:	b500      	push	{lr}
   116d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116d4:	f7f0 f8b8 	bl	1848 <Sys_GetCoreID>
   116d8:	4603      	mov	r3, r0
   116da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   116dc:	4a0d      	ldr	r2, [pc, #52]	; (11714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116de:	9b01      	ldr	r3, [sp, #4]
   116e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116e4:	1e5a      	subs	r2, r3, #1
   116e6:	490b      	ldr	r1, [pc, #44]	; (11714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116e8:	9b01      	ldr	r3, [sp, #4]
   116ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   116ee:	4a0a      	ldr	r2, [pc, #40]	; (11718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f6:	f003 0301 	and.w	r3, r3, #1
   116fa:	2b00      	cmp	r3, #0
   116fc:	d106      	bne.n	1170c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   116fe:	4a05      	ldr	r2, [pc, #20]	; (11714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   11700:	9b01      	ldr	r3, [sp, #4]
   11702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11706:	2b00      	cmp	r3, #0
   11708:	d100      	bne.n	1170c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1170a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1170c:	bf00      	nop
   1170e:	b003      	add	sp, #12
   11710:	f85d fb04 	ldr.w	pc, [sp], #4
   11714:	1fff93c4 	.word	0x1fff93c4
   11718:	1fff93c0 	.word	0x1fff93c0

0001171c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   1171c:	b500      	push	{lr}
   1171e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11720:	f7f0 f892 	bl	1848 <Sys_GetCoreID>
   11724:	4603      	mov	r3, r0
   11726:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   11728:	4a10      	ldr	r2, [pc, #64]	; (1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1172a:	9b01      	ldr	r3, [sp, #4]
   1172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11730:	2b00      	cmp	r3, #0
   11732:	d10d      	bne.n	11750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11734:	f7ef fa68 	bl	c08 <Adc_schm_read_msr>
   11738:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1173a:	9b00      	ldr	r3, [sp, #0]
   1173c:	f003 0301 	and.w	r3, r3, #1
   11740:	2b00      	cmp	r3, #0
   11742:	d100      	bne.n	11746 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11744:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   11746:	490a      	ldr	r1, [pc, #40]	; (11770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   11748:	9b01      	ldr	r3, [sp, #4]
   1174a:	9a00      	ldr	r2, [sp, #0]
   1174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   11750:	4a06      	ldr	r2, [pc, #24]	; (1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11758:	1c5a      	adds	r2, r3, #1
   1175a:	4904      	ldr	r1, [pc, #16]	; (1176c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1175c:	9b01      	ldr	r3, [sp, #4]
   1175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11762:	bf00      	nop
   11764:	b003      	add	sp, #12
   11766:	f85d fb04 	ldr.w	pc, [sp], #4
   1176a:	bf00      	nop
   1176c:	1fff93cc 	.word	0x1fff93cc
   11770:	1fff93c8 	.word	0x1fff93c8

00011774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   11774:	b500      	push	{lr}
   11776:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11778:	f7f0 f866 	bl	1848 <Sys_GetCoreID>
   1177c:	4603      	mov	r3, r0
   1177e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   11780:	4a0d      	ldr	r2, [pc, #52]	; (117b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   11782:	9b01      	ldr	r3, [sp, #4]
   11784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11788:	1e5a      	subs	r2, r3, #1
   1178a:	490b      	ldr	r1, [pc, #44]	; (117b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1178c:	9b01      	ldr	r3, [sp, #4]
   1178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   11792:	4a0a      	ldr	r2, [pc, #40]	; (117bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   11794:	9b01      	ldr	r3, [sp, #4]
   11796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1179a:	f003 0301 	and.w	r3, r3, #1
   1179e:	2b00      	cmp	r3, #0
   117a0:	d106      	bne.n	117b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   117a2:	4a05      	ldr	r2, [pc, #20]	; (117b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   117a4:	9b01      	ldr	r3, [sp, #4]
   117a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117aa:	2b00      	cmp	r3, #0
   117ac:	d100      	bne.n	117b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117b0:	bf00      	nop
   117b2:	b003      	add	sp, #12
   117b4:	f85d fb04 	ldr.w	pc, [sp], #4
   117b8:	1fff93cc 	.word	0x1fff93cc
   117bc:	1fff93c8 	.word	0x1fff93c8

000117c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   117c0:	b500      	push	{lr}
   117c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117c4:	f7f0 f840 	bl	1848 <Sys_GetCoreID>
   117c8:	4603      	mov	r3, r0
   117ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   117cc:	4a10      	ldr	r2, [pc, #64]	; (11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   117ce:	9b01      	ldr	r3, [sp, #4]
   117d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117d4:	2b00      	cmp	r3, #0
   117d6:	d10d      	bne.n	117f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117d8:	f7ef fa16 	bl	c08 <Adc_schm_read_msr>
   117dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117de:	9b00      	ldr	r3, [sp, #0]
   117e0:	f003 0301 	and.w	r3, r3, #1
   117e4:	2b00      	cmp	r3, #0
   117e6:	d100      	bne.n	117ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   117ea:	490a      	ldr	r1, [pc, #40]	; (11814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   117ec:	9b01      	ldr	r3, [sp, #4]
   117ee:	9a00      	ldr	r2, [sp, #0]
   117f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   117f4:	4a06      	ldr	r2, [pc, #24]	; (11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   117f6:	9b01      	ldr	r3, [sp, #4]
   117f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117fc:	1c5a      	adds	r2, r3, #1
   117fe:	4904      	ldr	r1, [pc, #16]	; (11810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   11800:	9b01      	ldr	r3, [sp, #4]
   11802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11806:	bf00      	nop
   11808:	b003      	add	sp, #12
   1180a:	f85d fb04 	ldr.w	pc, [sp], #4
   1180e:	bf00      	nop
   11810:	1fff93d4 	.word	0x1fff93d4
   11814:	1fff93d0 	.word	0x1fff93d0

00011818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   11818:	b500      	push	{lr}
   1181a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1181c:	f7f0 f814 	bl	1848 <Sys_GetCoreID>
   11820:	4603      	mov	r3, r0
   11822:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   11824:	4a0d      	ldr	r2, [pc, #52]	; (1185c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   11826:	9b01      	ldr	r3, [sp, #4]
   11828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1182c:	1e5a      	subs	r2, r3, #1
   1182e:	490b      	ldr	r1, [pc, #44]	; (1185c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   11830:	9b01      	ldr	r3, [sp, #4]
   11832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   11836:	4a0a      	ldr	r2, [pc, #40]	; (11860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   11838:	9b01      	ldr	r3, [sp, #4]
   1183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1183e:	f003 0301 	and.w	r3, r3, #1
   11842:	2b00      	cmp	r3, #0
   11844:	d106      	bne.n	11854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   11846:	4a05      	ldr	r2, [pc, #20]	; (1185c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   11848:	9b01      	ldr	r3, [sp, #4]
   1184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1184e:	2b00      	cmp	r3, #0
   11850:	d100      	bne.n	11854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11852:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11854:	bf00      	nop
   11856:	b003      	add	sp, #12
   11858:	f85d fb04 	ldr.w	pc, [sp], #4
   1185c:	1fff93d4 	.word	0x1fff93d4
   11860:	1fff93d0 	.word	0x1fff93d0

00011864 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   11864:	b500      	push	{lr}
   11866:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11868:	f7ef ffee 	bl	1848 <Sys_GetCoreID>
   1186c:	4603      	mov	r3, r0
   1186e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   11870:	4a10      	ldr	r2, [pc, #64]	; (118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   11872:	9b01      	ldr	r3, [sp, #4]
   11874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11878:	2b00      	cmp	r3, #0
   1187a:	d10d      	bne.n	11898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1187c:	f7ef f9c4 	bl	c08 <Adc_schm_read_msr>
   11880:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11882:	9b00      	ldr	r3, [sp, #0]
   11884:	f003 0301 	and.w	r3, r3, #1
   11888:	2b00      	cmp	r3, #0
   1188a:	d100      	bne.n	1188e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1188c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   1188e:	490a      	ldr	r1, [pc, #40]	; (118b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   11890:	9b01      	ldr	r3, [sp, #4]
   11892:	9a00      	ldr	r2, [sp, #0]
   11894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   11898:	4a06      	ldr	r2, [pc, #24]	; (118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1189a:	9b01      	ldr	r3, [sp, #4]
   1189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a0:	1c5a      	adds	r2, r3, #1
   118a2:	4904      	ldr	r1, [pc, #16]	; (118b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   118a4:	9b01      	ldr	r3, [sp, #4]
   118a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118aa:	bf00      	nop
   118ac:	b003      	add	sp, #12
   118ae:	f85d fb04 	ldr.w	pc, [sp], #4
   118b2:	bf00      	nop
   118b4:	1fff93dc 	.word	0x1fff93dc
   118b8:	1fff93d8 	.word	0x1fff93d8

000118bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   118bc:	b500      	push	{lr}
   118be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118c0:	f7ef ffc2 	bl	1848 <Sys_GetCoreID>
   118c4:	4603      	mov	r3, r0
   118c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   118c8:	4a0d      	ldr	r2, [pc, #52]	; (11900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   118ca:	9b01      	ldr	r3, [sp, #4]
   118cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118d0:	1e5a      	subs	r2, r3, #1
   118d2:	490b      	ldr	r1, [pc, #44]	; (11900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   118d4:	9b01      	ldr	r3, [sp, #4]
   118d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   118da:	4a0a      	ldr	r2, [pc, #40]	; (11904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   118dc:	9b01      	ldr	r3, [sp, #4]
   118de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118e2:	f003 0301 	and.w	r3, r3, #1
   118e6:	2b00      	cmp	r3, #0
   118e8:	d106      	bne.n	118f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   118ea:	4a05      	ldr	r2, [pc, #20]	; (11900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   118ec:	9b01      	ldr	r3, [sp, #4]
   118ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118f2:	2b00      	cmp	r3, #0
   118f4:	d100      	bne.n	118f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118f8:	bf00      	nop
   118fa:	b003      	add	sp, #12
   118fc:	f85d fb04 	ldr.w	pc, [sp], #4
   11900:	1fff93dc 	.word	0x1fff93dc
   11904:	1fff93d8 	.word	0x1fff93d8

00011908 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   11908:	b500      	push	{lr}
   1190a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1190c:	f7ef ff9c 	bl	1848 <Sys_GetCoreID>
   11910:	4603      	mov	r3, r0
   11912:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   11914:	4a10      	ldr	r2, [pc, #64]	; (11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   11916:	9b01      	ldr	r3, [sp, #4]
   11918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1191c:	2b00      	cmp	r3, #0
   1191e:	d10d      	bne.n	1193c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11920:	f7ef f972 	bl	c08 <Adc_schm_read_msr>
   11924:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11926:	9b00      	ldr	r3, [sp, #0]
   11928:	f003 0301 	and.w	r3, r3, #1
   1192c:	2b00      	cmp	r3, #0
   1192e:	d100      	bne.n	11932 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11930:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   11932:	490a      	ldr	r1, [pc, #40]	; (1195c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   11934:	9b01      	ldr	r3, [sp, #4]
   11936:	9a00      	ldr	r2, [sp, #0]
   11938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   1193c:	4a06      	ldr	r2, [pc, #24]	; (11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   1193e:	9b01      	ldr	r3, [sp, #4]
   11940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11944:	1c5a      	adds	r2, r3, #1
   11946:	4904      	ldr	r1, [pc, #16]	; (11958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   11948:	9b01      	ldr	r3, [sp, #4]
   1194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1194e:	bf00      	nop
   11950:	b003      	add	sp, #12
   11952:	f85d fb04 	ldr.w	pc, [sp], #4
   11956:	bf00      	nop
   11958:	1fff93e4 	.word	0x1fff93e4
   1195c:	1fff93e0 	.word	0x1fff93e0

00011960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   11960:	b500      	push	{lr}
   11962:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11964:	f7ef ff70 	bl	1848 <Sys_GetCoreID>
   11968:	4603      	mov	r3, r0
   1196a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   1196c:	4a0d      	ldr	r2, [pc, #52]	; (119a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1196e:	9b01      	ldr	r3, [sp, #4]
   11970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11974:	1e5a      	subs	r2, r3, #1
   11976:	490b      	ldr	r1, [pc, #44]	; (119a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11978:	9b01      	ldr	r3, [sp, #4]
   1197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   1197e:	4a0a      	ldr	r2, [pc, #40]	; (119a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   11980:	9b01      	ldr	r3, [sp, #4]
   11982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11986:	f003 0301 	and.w	r3, r3, #1
   1198a:	2b00      	cmp	r3, #0
   1198c:	d106      	bne.n	1199c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   1198e:	4a05      	ldr	r2, [pc, #20]	; (119a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11990:	9b01      	ldr	r3, [sp, #4]
   11992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11996:	2b00      	cmp	r3, #0
   11998:	d100      	bne.n	1199c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1199a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1199c:	bf00      	nop
   1199e:	b003      	add	sp, #12
   119a0:	f85d fb04 	ldr.w	pc, [sp], #4
   119a4:	1fff93e4 	.word	0x1fff93e4
   119a8:	1fff93e0 	.word	0x1fff93e0

000119ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   119ac:	b500      	push	{lr}
   119ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119b0:	f7ef ff4a 	bl	1848 <Sys_GetCoreID>
   119b4:	4603      	mov	r3, r0
   119b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   119b8:	4a10      	ldr	r2, [pc, #64]	; (119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119ba:	9b01      	ldr	r3, [sp, #4]
   119bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119c0:	2b00      	cmp	r3, #0
   119c2:	d10d      	bne.n	119e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119c4:	f7ef f920 	bl	c08 <Adc_schm_read_msr>
   119c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119ca:	9b00      	ldr	r3, [sp, #0]
   119cc:	f003 0301 	and.w	r3, r3, #1
   119d0:	2b00      	cmp	r3, #0
   119d2:	d100      	bne.n	119d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   119d6:	490a      	ldr	r1, [pc, #40]	; (11a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   119d8:	9b01      	ldr	r3, [sp, #4]
   119da:	9a00      	ldr	r2, [sp, #0]
   119dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   119e0:	4a06      	ldr	r2, [pc, #24]	; (119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119e2:	9b01      	ldr	r3, [sp, #4]
   119e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119e8:	1c5a      	adds	r2, r3, #1
   119ea:	4904      	ldr	r1, [pc, #16]	; (119fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119ec:	9b01      	ldr	r3, [sp, #4]
   119ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119f2:	bf00      	nop
   119f4:	b003      	add	sp, #12
   119f6:	f85d fb04 	ldr.w	pc, [sp], #4
   119fa:	bf00      	nop
   119fc:	1fff93ec 	.word	0x1fff93ec
   11a00:	1fff93e8 	.word	0x1fff93e8

00011a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   11a04:	b500      	push	{lr}
   11a06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a08:	f7ef ff1e 	bl	1848 <Sys_GetCoreID>
   11a0c:	4603      	mov	r3, r0
   11a0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   11a10:	4a0d      	ldr	r2, [pc, #52]	; (11a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   11a12:	9b01      	ldr	r3, [sp, #4]
   11a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a18:	1e5a      	subs	r2, r3, #1
   11a1a:	490b      	ldr	r1, [pc, #44]	; (11a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   11a1c:	9b01      	ldr	r3, [sp, #4]
   11a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   11a22:	4a0a      	ldr	r2, [pc, #40]	; (11a4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   11a24:	9b01      	ldr	r3, [sp, #4]
   11a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a2a:	f003 0301 	and.w	r3, r3, #1
   11a2e:	2b00      	cmp	r3, #0
   11a30:	d106      	bne.n	11a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   11a32:	4a05      	ldr	r2, [pc, #20]	; (11a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   11a34:	9b01      	ldr	r3, [sp, #4]
   11a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	d100      	bne.n	11a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a40:	bf00      	nop
   11a42:	b003      	add	sp, #12
   11a44:	f85d fb04 	ldr.w	pc, [sp], #4
   11a48:	1fff93ec 	.word	0x1fff93ec
   11a4c:	1fff93e8 	.word	0x1fff93e8

00011a50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11a50:	b500      	push	{lr}
   11a52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a54:	f7ef fef8 	bl	1848 <Sys_GetCoreID>
   11a58:	4603      	mov	r3, r0
   11a5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   11a5c:	4a10      	ldr	r2, [pc, #64]	; (11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a5e:	9b01      	ldr	r3, [sp, #4]
   11a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a64:	2b00      	cmp	r3, #0
   11a66:	d10d      	bne.n	11a84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a68:	f7ef f8ce 	bl	c08 <Adc_schm_read_msr>
   11a6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a6e:	9b00      	ldr	r3, [sp, #0]
   11a70:	f003 0301 	and.w	r3, r3, #1
   11a74:	2b00      	cmp	r3, #0
   11a76:	d100      	bne.n	11a7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   11a7a:	490a      	ldr	r1, [pc, #40]	; (11aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   11a7c:	9b01      	ldr	r3, [sp, #4]
   11a7e:	9a00      	ldr	r2, [sp, #0]
   11a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   11a84:	4a06      	ldr	r2, [pc, #24]	; (11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a86:	9b01      	ldr	r3, [sp, #4]
   11a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a8c:	1c5a      	adds	r2, r3, #1
   11a8e:	4904      	ldr	r1, [pc, #16]	; (11aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a96:	bf00      	nop
   11a98:	b003      	add	sp, #12
   11a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a9e:	bf00      	nop
   11aa0:	1fff93f4 	.word	0x1fff93f4
   11aa4:	1fff93f0 	.word	0x1fff93f0

00011aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11aa8:	b500      	push	{lr}
   11aaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11aac:	f7ef fecc 	bl	1848 <Sys_GetCoreID>
   11ab0:	4603      	mov	r3, r0
   11ab2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   11ab4:	4a0d      	ldr	r2, [pc, #52]	; (11aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11ab6:	9b01      	ldr	r3, [sp, #4]
   11ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11abc:	1e5a      	subs	r2, r3, #1
   11abe:	490b      	ldr	r1, [pc, #44]	; (11aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11ac0:	9b01      	ldr	r3, [sp, #4]
   11ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   11ac6:	4a0a      	ldr	r2, [pc, #40]	; (11af0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   11ac8:	9b01      	ldr	r3, [sp, #4]
   11aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ace:	f003 0301 	and.w	r3, r3, #1
   11ad2:	2b00      	cmp	r3, #0
   11ad4:	d106      	bne.n	11ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   11ad6:	4a05      	ldr	r2, [pc, #20]	; (11aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11ad8:	9b01      	ldr	r3, [sp, #4]
   11ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ade:	2b00      	cmp	r3, #0
   11ae0:	d100      	bne.n	11ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ae2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ae4:	bf00      	nop
   11ae6:	b003      	add	sp, #12
   11ae8:	f85d fb04 	ldr.w	pc, [sp], #4
   11aec:	1fff93f4 	.word	0x1fff93f4
   11af0:	1fff93f0 	.word	0x1fff93f0

00011af4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   11af4:	b500      	push	{lr}
   11af6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11af8:	f7ef fea6 	bl	1848 <Sys_GetCoreID>
   11afc:	4603      	mov	r3, r0
   11afe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   11b00:	4a10      	ldr	r2, [pc, #64]	; (11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11b02:	9b01      	ldr	r3, [sp, #4]
   11b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d10d      	bne.n	11b28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b0c:	f7ef f87c 	bl	c08 <Adc_schm_read_msr>
   11b10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b12:	9b00      	ldr	r3, [sp, #0]
   11b14:	f003 0301 	and.w	r3, r3, #1
   11b18:	2b00      	cmp	r3, #0
   11b1a:	d100      	bne.n	11b1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   11b1e:	490a      	ldr	r1, [pc, #40]	; (11b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   11b20:	9b01      	ldr	r3, [sp, #4]
   11b22:	9a00      	ldr	r2, [sp, #0]
   11b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   11b28:	4a06      	ldr	r2, [pc, #24]	; (11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b30:	1c5a      	adds	r2, r3, #1
   11b32:	4904      	ldr	r1, [pc, #16]	; (11b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11b34:	9b01      	ldr	r3, [sp, #4]
   11b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b3a:	bf00      	nop
   11b3c:	b003      	add	sp, #12
   11b3e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b42:	bf00      	nop
   11b44:	1fff93fc 	.word	0x1fff93fc
   11b48:	1fff93f8 	.word	0x1fff93f8

00011b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   11b4c:	b500      	push	{lr}
   11b4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b50:	f7ef fe7a 	bl	1848 <Sys_GetCoreID>
   11b54:	4603      	mov	r3, r0
   11b56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   11b58:	4a0d      	ldr	r2, [pc, #52]	; (11b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b5a:	9b01      	ldr	r3, [sp, #4]
   11b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b60:	1e5a      	subs	r2, r3, #1
   11b62:	490b      	ldr	r1, [pc, #44]	; (11b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b64:	9b01      	ldr	r3, [sp, #4]
   11b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   11b6a:	4a0a      	ldr	r2, [pc, #40]	; (11b94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   11b6c:	9b01      	ldr	r3, [sp, #4]
   11b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b72:	f003 0301 	and.w	r3, r3, #1
   11b76:	2b00      	cmp	r3, #0
   11b78:	d106      	bne.n	11b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   11b7a:	4a05      	ldr	r2, [pc, #20]	; (11b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b7c:	9b01      	ldr	r3, [sp, #4]
   11b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b82:	2b00      	cmp	r3, #0
   11b84:	d100      	bne.n	11b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b88:	bf00      	nop
   11b8a:	b003      	add	sp, #12
   11b8c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b90:	1fff93fc 	.word	0x1fff93fc
   11b94:	1fff93f8 	.word	0x1fff93f8

00011b98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11b98:	b500      	push	{lr}
   11b9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b9c:	f7ef fe54 	bl	1848 <Sys_GetCoreID>
   11ba0:	4603      	mov	r3, r0
   11ba2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   11ba4:	4a10      	ldr	r2, [pc, #64]	; (11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11ba6:	9b01      	ldr	r3, [sp, #4]
   11ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bac:	2b00      	cmp	r3, #0
   11bae:	d10d      	bne.n	11bcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11bb0:	f7ef f82a 	bl	c08 <Adc_schm_read_msr>
   11bb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bb6:	9b00      	ldr	r3, [sp, #0]
   11bb8:	f003 0301 	and.w	r3, r3, #1
   11bbc:	2b00      	cmp	r3, #0
   11bbe:	d100      	bne.n	11bc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   11bc2:	490a      	ldr	r1, [pc, #40]	; (11bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   11bc4:	9b01      	ldr	r3, [sp, #4]
   11bc6:	9a00      	ldr	r2, [sp, #0]
   11bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   11bcc:	4a06      	ldr	r2, [pc, #24]	; (11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11bce:	9b01      	ldr	r3, [sp, #4]
   11bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bd4:	1c5a      	adds	r2, r3, #1
   11bd6:	4904      	ldr	r1, [pc, #16]	; (11be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11bd8:	9b01      	ldr	r3, [sp, #4]
   11bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bde:	bf00      	nop
   11be0:	b003      	add	sp, #12
   11be2:	f85d fb04 	ldr.w	pc, [sp], #4
   11be6:	bf00      	nop
   11be8:	1fff9404 	.word	0x1fff9404
   11bec:	1fff9400 	.word	0x1fff9400

00011bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11bf0:	b500      	push	{lr}
   11bf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bf4:	f7ef fe28 	bl	1848 <Sys_GetCoreID>
   11bf8:	4603      	mov	r3, r0
   11bfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   11bfc:	4a0d      	ldr	r2, [pc, #52]	; (11c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11bfe:	9b01      	ldr	r3, [sp, #4]
   11c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c04:	1e5a      	subs	r2, r3, #1
   11c06:	490b      	ldr	r1, [pc, #44]	; (11c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11c08:	9b01      	ldr	r3, [sp, #4]
   11c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   11c0e:	4a0a      	ldr	r2, [pc, #40]	; (11c38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   11c10:	9b01      	ldr	r3, [sp, #4]
   11c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c16:	f003 0301 	and.w	r3, r3, #1
   11c1a:	2b00      	cmp	r3, #0
   11c1c:	d106      	bne.n	11c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   11c1e:	4a05      	ldr	r2, [pc, #20]	; (11c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11c20:	9b01      	ldr	r3, [sp, #4]
   11c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c26:	2b00      	cmp	r3, #0
   11c28:	d100      	bne.n	11c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c2c:	bf00      	nop
   11c2e:	b003      	add	sp, #12
   11c30:	f85d fb04 	ldr.w	pc, [sp], #4
   11c34:	1fff9404 	.word	0x1fff9404
   11c38:	1fff9400 	.word	0x1fff9400

00011c3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11c3c:	b500      	push	{lr}
   11c3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c40:	f7ef fe02 	bl	1848 <Sys_GetCoreID>
   11c44:	4603      	mov	r3, r0
   11c46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   11c48:	4a10      	ldr	r2, [pc, #64]	; (11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c4a:	9b01      	ldr	r3, [sp, #4]
   11c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c50:	2b00      	cmp	r3, #0
   11c52:	d10d      	bne.n	11c70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c54:	f7ee ffd8 	bl	c08 <Adc_schm_read_msr>
   11c58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c5a:	9b00      	ldr	r3, [sp, #0]
   11c5c:	f003 0301 	and.w	r3, r3, #1
   11c60:	2b00      	cmp	r3, #0
   11c62:	d100      	bne.n	11c66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   11c66:	490a      	ldr	r1, [pc, #40]	; (11c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   11c68:	9b01      	ldr	r3, [sp, #4]
   11c6a:	9a00      	ldr	r2, [sp, #0]
   11c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   11c70:	4a06      	ldr	r2, [pc, #24]	; (11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c72:	9b01      	ldr	r3, [sp, #4]
   11c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c78:	1c5a      	adds	r2, r3, #1
   11c7a:	4904      	ldr	r1, [pc, #16]	; (11c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c82:	bf00      	nop
   11c84:	b003      	add	sp, #12
   11c86:	f85d fb04 	ldr.w	pc, [sp], #4
   11c8a:	bf00      	nop
   11c8c:	1fff940c 	.word	0x1fff940c
   11c90:	1fff9408 	.word	0x1fff9408

00011c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11c94:	b500      	push	{lr}
   11c96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c98:	f7ef fdd6 	bl	1848 <Sys_GetCoreID>
   11c9c:	4603      	mov	r3, r0
   11c9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   11ca0:	4a0d      	ldr	r2, [pc, #52]	; (11cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11ca2:	9b01      	ldr	r3, [sp, #4]
   11ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ca8:	1e5a      	subs	r2, r3, #1
   11caa:	490b      	ldr	r1, [pc, #44]	; (11cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11cac:	9b01      	ldr	r3, [sp, #4]
   11cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   11cb2:	4a0a      	ldr	r2, [pc, #40]	; (11cdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   11cb4:	9b01      	ldr	r3, [sp, #4]
   11cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cba:	f003 0301 	and.w	r3, r3, #1
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d106      	bne.n	11cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   11cc2:	4a05      	ldr	r2, [pc, #20]	; (11cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11cc4:	9b01      	ldr	r3, [sp, #4]
   11cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d100      	bne.n	11cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11cce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11cd0:	bf00      	nop
   11cd2:	b003      	add	sp, #12
   11cd4:	f85d fb04 	ldr.w	pc, [sp], #4
   11cd8:	1fff940c 	.word	0x1fff940c
   11cdc:	1fff9408 	.word	0x1fff9408

00011ce0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11ce0:	b500      	push	{lr}
   11ce2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ce4:	f7ef fdb0 	bl	1848 <Sys_GetCoreID>
   11ce8:	4603      	mov	r3, r0
   11cea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   11cec:	4a10      	ldr	r2, [pc, #64]	; (11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11cee:	9b01      	ldr	r3, [sp, #4]
   11cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d10d      	bne.n	11d14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cf8:	f7ee ff86 	bl	c08 <Adc_schm_read_msr>
   11cfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cfe:	9b00      	ldr	r3, [sp, #0]
   11d00:	f003 0301 	and.w	r3, r3, #1
   11d04:	2b00      	cmp	r3, #0
   11d06:	d100      	bne.n	11d0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   11d0a:	490a      	ldr	r1, [pc, #40]	; (11d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   11d0c:	9b01      	ldr	r3, [sp, #4]
   11d0e:	9a00      	ldr	r2, [sp, #0]
   11d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   11d14:	4a06      	ldr	r2, [pc, #24]	; (11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11d16:	9b01      	ldr	r3, [sp, #4]
   11d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d1c:	1c5a      	adds	r2, r3, #1
   11d1e:	4904      	ldr	r1, [pc, #16]	; (11d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11d20:	9b01      	ldr	r3, [sp, #4]
   11d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d26:	bf00      	nop
   11d28:	b003      	add	sp, #12
   11d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   11d2e:	bf00      	nop
   11d30:	1fff9414 	.word	0x1fff9414
   11d34:	1fff9410 	.word	0x1fff9410

00011d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11d38:	b500      	push	{lr}
   11d3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d3c:	f7ef fd84 	bl	1848 <Sys_GetCoreID>
   11d40:	4603      	mov	r3, r0
   11d42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   11d44:	4a0d      	ldr	r2, [pc, #52]	; (11d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d46:	9b01      	ldr	r3, [sp, #4]
   11d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d4c:	1e5a      	subs	r2, r3, #1
   11d4e:	490b      	ldr	r1, [pc, #44]	; (11d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d50:	9b01      	ldr	r3, [sp, #4]
   11d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   11d56:	4a0a      	ldr	r2, [pc, #40]	; (11d80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   11d58:	9b01      	ldr	r3, [sp, #4]
   11d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d5e:	f003 0301 	and.w	r3, r3, #1
   11d62:	2b00      	cmp	r3, #0
   11d64:	d106      	bne.n	11d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   11d66:	4a05      	ldr	r2, [pc, #20]	; (11d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d68:	9b01      	ldr	r3, [sp, #4]
   11d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d6e:	2b00      	cmp	r3, #0
   11d70:	d100      	bne.n	11d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d74:	bf00      	nop
   11d76:	b003      	add	sp, #12
   11d78:	f85d fb04 	ldr.w	pc, [sp], #4
   11d7c:	1fff9414 	.word	0x1fff9414
   11d80:	1fff9410 	.word	0x1fff9410

00011d84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11d84:	b500      	push	{lr}
   11d86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d88:	f7ef fd5e 	bl	1848 <Sys_GetCoreID>
   11d8c:	4603      	mov	r3, r0
   11d8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   11d90:	4a10      	ldr	r2, [pc, #64]	; (11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d92:	9b01      	ldr	r3, [sp, #4]
   11d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d98:	2b00      	cmp	r3, #0
   11d9a:	d10d      	bne.n	11db8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d9c:	f7ee ff34 	bl	c08 <Adc_schm_read_msr>
   11da0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11da2:	9b00      	ldr	r3, [sp, #0]
   11da4:	f003 0301 	and.w	r3, r3, #1
   11da8:	2b00      	cmp	r3, #0
   11daa:	d100      	bne.n	11dae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11dac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   11dae:	490a      	ldr	r1, [pc, #40]	; (11dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   11db0:	9b01      	ldr	r3, [sp, #4]
   11db2:	9a00      	ldr	r2, [sp, #0]
   11db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   11db8:	4a06      	ldr	r2, [pc, #24]	; (11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11dba:	9b01      	ldr	r3, [sp, #4]
   11dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc0:	1c5a      	adds	r2, r3, #1
   11dc2:	4904      	ldr	r1, [pc, #16]	; (11dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11dc4:	9b01      	ldr	r3, [sp, #4]
   11dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11dca:	bf00      	nop
   11dcc:	b003      	add	sp, #12
   11dce:	f85d fb04 	ldr.w	pc, [sp], #4
   11dd2:	bf00      	nop
   11dd4:	1fff941c 	.word	0x1fff941c
   11dd8:	1fff9418 	.word	0x1fff9418

00011ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11ddc:	b500      	push	{lr}
   11dde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11de0:	f7ef fd32 	bl	1848 <Sys_GetCoreID>
   11de4:	4603      	mov	r3, r0
   11de6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   11de8:	4a0d      	ldr	r2, [pc, #52]	; (11e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11dea:	9b01      	ldr	r3, [sp, #4]
   11dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11df0:	1e5a      	subs	r2, r3, #1
   11df2:	490b      	ldr	r1, [pc, #44]	; (11e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11df4:	9b01      	ldr	r3, [sp, #4]
   11df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   11dfa:	4a0a      	ldr	r2, [pc, #40]	; (11e24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   11dfc:	9b01      	ldr	r3, [sp, #4]
   11dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e02:	f003 0301 	and.w	r3, r3, #1
   11e06:	2b00      	cmp	r3, #0
   11e08:	d106      	bne.n	11e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   11e0a:	4a05      	ldr	r2, [pc, #20]	; (11e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11e0c:	9b01      	ldr	r3, [sp, #4]
   11e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e12:	2b00      	cmp	r3, #0
   11e14:	d100      	bne.n	11e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e18:	bf00      	nop
   11e1a:	b003      	add	sp, #12
   11e1c:	f85d fb04 	ldr.w	pc, [sp], #4
   11e20:	1fff941c 	.word	0x1fff941c
   11e24:	1fff9418 	.word	0x1fff9418

00011e28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11e28:	b500      	push	{lr}
   11e2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e2c:	f7ef fd0c 	bl	1848 <Sys_GetCoreID>
   11e30:	4603      	mov	r3, r0
   11e32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   11e34:	4a10      	ldr	r2, [pc, #64]	; (11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e36:	9b01      	ldr	r3, [sp, #4]
   11e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	d10d      	bne.n	11e5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e40:	f7ee fee2 	bl	c08 <Adc_schm_read_msr>
   11e44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e46:	9b00      	ldr	r3, [sp, #0]
   11e48:	f003 0301 	and.w	r3, r3, #1
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d100      	bne.n	11e52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   11e52:	490a      	ldr	r1, [pc, #40]	; (11e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   11e54:	9b01      	ldr	r3, [sp, #4]
   11e56:	9a00      	ldr	r2, [sp, #0]
   11e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   11e5c:	4a06      	ldr	r2, [pc, #24]	; (11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e5e:	9b01      	ldr	r3, [sp, #4]
   11e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e64:	1c5a      	adds	r2, r3, #1
   11e66:	4904      	ldr	r1, [pc, #16]	; (11e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e68:	9b01      	ldr	r3, [sp, #4]
   11e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e6e:	bf00      	nop
   11e70:	b003      	add	sp, #12
   11e72:	f85d fb04 	ldr.w	pc, [sp], #4
   11e76:	bf00      	nop
   11e78:	1fff9424 	.word	0x1fff9424
   11e7c:	1fff9420 	.word	0x1fff9420

00011e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11e80:	b500      	push	{lr}
   11e82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e84:	f7ef fce0 	bl	1848 <Sys_GetCoreID>
   11e88:	4603      	mov	r3, r0
   11e8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   11e8c:	4a0d      	ldr	r2, [pc, #52]	; (11ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e8e:	9b01      	ldr	r3, [sp, #4]
   11e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e94:	1e5a      	subs	r2, r3, #1
   11e96:	490b      	ldr	r1, [pc, #44]	; (11ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e98:	9b01      	ldr	r3, [sp, #4]
   11e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   11e9e:	4a0a      	ldr	r2, [pc, #40]	; (11ec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea6:	f003 0301 	and.w	r3, r3, #1
   11eaa:	2b00      	cmp	r3, #0
   11eac:	d106      	bne.n	11ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   11eae:	4a05      	ldr	r2, [pc, #20]	; (11ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11eb0:	9b01      	ldr	r3, [sp, #4]
   11eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	d100      	bne.n	11ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11eba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ebc:	bf00      	nop
   11ebe:	b003      	add	sp, #12
   11ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ec4:	1fff9424 	.word	0x1fff9424
   11ec8:	1fff9420 	.word	0x1fff9420

00011ecc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11ecc:	b500      	push	{lr}
   11ece:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ed0:	f7ef fcba 	bl	1848 <Sys_GetCoreID>
   11ed4:	4603      	mov	r3, r0
   11ed6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   11ed8:	4a10      	ldr	r2, [pc, #64]	; (11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11eda:	9b01      	ldr	r3, [sp, #4]
   11edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ee0:	2b00      	cmp	r3, #0
   11ee2:	d10d      	bne.n	11f00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ee4:	f7ee fe90 	bl	c08 <Adc_schm_read_msr>
   11ee8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eea:	9b00      	ldr	r3, [sp, #0]
   11eec:	f003 0301 	and.w	r3, r3, #1
   11ef0:	2b00      	cmp	r3, #0
   11ef2:	d100      	bne.n	11ef6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ef4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   11ef6:	490a      	ldr	r1, [pc, #40]	; (11f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   11ef8:	9b01      	ldr	r3, [sp, #4]
   11efa:	9a00      	ldr	r2, [sp, #0]
   11efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   11f00:	4a06      	ldr	r2, [pc, #24]	; (11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11f02:	9b01      	ldr	r3, [sp, #4]
   11f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f08:	1c5a      	adds	r2, r3, #1
   11f0a:	4904      	ldr	r1, [pc, #16]	; (11f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f12:	bf00      	nop
   11f14:	b003      	add	sp, #12
   11f16:	f85d fb04 	ldr.w	pc, [sp], #4
   11f1a:	bf00      	nop
   11f1c:	1fff942c 	.word	0x1fff942c
   11f20:	1fff9428 	.word	0x1fff9428

00011f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11f24:	b500      	push	{lr}
   11f26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f28:	f7ef fc8e 	bl	1848 <Sys_GetCoreID>
   11f2c:	4603      	mov	r3, r0
   11f2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   11f30:	4a0d      	ldr	r2, [pc, #52]	; (11f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11f32:	9b01      	ldr	r3, [sp, #4]
   11f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f38:	1e5a      	subs	r2, r3, #1
   11f3a:	490b      	ldr	r1, [pc, #44]	; (11f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11f3c:	9b01      	ldr	r3, [sp, #4]
   11f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   11f42:	4a0a      	ldr	r2, [pc, #40]	; (11f6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f4a:	f003 0301 	and.w	r3, r3, #1
   11f4e:	2b00      	cmp	r3, #0
   11f50:	d106      	bne.n	11f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   11f52:	4a05      	ldr	r2, [pc, #20]	; (11f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11f54:	9b01      	ldr	r3, [sp, #4]
   11f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d100      	bne.n	11f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f60:	bf00      	nop
   11f62:	b003      	add	sp, #12
   11f64:	f85d fb04 	ldr.w	pc, [sp], #4
   11f68:	1fff942c 	.word	0x1fff942c
   11f6c:	1fff9428 	.word	0x1fff9428

00011f70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11f70:	b500      	push	{lr}
   11f72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f74:	f7ef fc68 	bl	1848 <Sys_GetCoreID>
   11f78:	4603      	mov	r3, r0
   11f7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   11f7c:	4a10      	ldr	r2, [pc, #64]	; (11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f7e:	9b01      	ldr	r3, [sp, #4]
   11f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f84:	2b00      	cmp	r3, #0
   11f86:	d10d      	bne.n	11fa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f88:	f7ee fe3e 	bl	c08 <Adc_schm_read_msr>
   11f8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f8e:	9b00      	ldr	r3, [sp, #0]
   11f90:	f003 0301 	and.w	r3, r3, #1
   11f94:	2b00      	cmp	r3, #0
   11f96:	d100      	bne.n	11f9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   11f9a:	490a      	ldr	r1, [pc, #40]	; (11fc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   11f9c:	9b01      	ldr	r3, [sp, #4]
   11f9e:	9a00      	ldr	r2, [sp, #0]
   11fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   11fa4:	4a06      	ldr	r2, [pc, #24]	; (11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11fa6:	9b01      	ldr	r3, [sp, #4]
   11fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fac:	1c5a      	adds	r2, r3, #1
   11fae:	4904      	ldr	r1, [pc, #16]	; (11fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11fb0:	9b01      	ldr	r3, [sp, #4]
   11fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fb6:	bf00      	nop
   11fb8:	b003      	add	sp, #12
   11fba:	f85d fb04 	ldr.w	pc, [sp], #4
   11fbe:	bf00      	nop
   11fc0:	1fff9434 	.word	0x1fff9434
   11fc4:	1fff9430 	.word	0x1fff9430

00011fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11fc8:	b500      	push	{lr}
   11fca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fcc:	f7ef fc3c 	bl	1848 <Sys_GetCoreID>
   11fd0:	4603      	mov	r3, r0
   11fd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   11fd4:	4a0d      	ldr	r2, [pc, #52]	; (1200c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11fd6:	9b01      	ldr	r3, [sp, #4]
   11fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fdc:	1e5a      	subs	r2, r3, #1
   11fde:	490b      	ldr	r1, [pc, #44]	; (1200c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11fe0:	9b01      	ldr	r3, [sp, #4]
   11fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   11fe6:	4a0a      	ldr	r2, [pc, #40]	; (12010 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   11fe8:	9b01      	ldr	r3, [sp, #4]
   11fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fee:	f003 0301 	and.w	r3, r3, #1
   11ff2:	2b00      	cmp	r3, #0
   11ff4:	d106      	bne.n	12004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   11ff6:	4a05      	ldr	r2, [pc, #20]	; (1200c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11ff8:	9b01      	ldr	r3, [sp, #4]
   11ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ffe:	2b00      	cmp	r3, #0
   12000:	d100      	bne.n	12004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12002:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12004:	bf00      	nop
   12006:	b003      	add	sp, #12
   12008:	f85d fb04 	ldr.w	pc, [sp], #4
   1200c:	1fff9434 	.word	0x1fff9434
   12010:	1fff9430 	.word	0x1fff9430

00012014 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12014:	b500      	push	{lr}
   12016:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12018:	f7ef fc16 	bl	1848 <Sys_GetCoreID>
   1201c:	4603      	mov	r3, r0
   1201e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   12020:	4a10      	ldr	r2, [pc, #64]	; (12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12022:	9b01      	ldr	r3, [sp, #4]
   12024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12028:	2b00      	cmp	r3, #0
   1202a:	d10d      	bne.n	12048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1202c:	f7ee fdec 	bl	c08 <Adc_schm_read_msr>
   12030:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12032:	9b00      	ldr	r3, [sp, #0]
   12034:	f003 0301 	and.w	r3, r3, #1
   12038:	2b00      	cmp	r3, #0
   1203a:	d100      	bne.n	1203e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1203c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   1203e:	490a      	ldr	r1, [pc, #40]	; (12068 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12040:	9b01      	ldr	r3, [sp, #4]
   12042:	9a00      	ldr	r2, [sp, #0]
   12044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12048:	4a06      	ldr	r2, [pc, #24]	; (12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1204a:	9b01      	ldr	r3, [sp, #4]
   1204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12050:	1c5a      	adds	r2, r3, #1
   12052:	4904      	ldr	r1, [pc, #16]	; (12064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12054:	9b01      	ldr	r3, [sp, #4]
   12056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1205a:	bf00      	nop
   1205c:	b003      	add	sp, #12
   1205e:	f85d fb04 	ldr.w	pc, [sp], #4
   12062:	bf00      	nop
   12064:	1fff943c 	.word	0x1fff943c
   12068:	1fff9438 	.word	0x1fff9438

0001206c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   1206c:	b500      	push	{lr}
   1206e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12070:	f7ef fbea 	bl	1848 <Sys_GetCoreID>
   12074:	4603      	mov	r3, r0
   12076:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12078:	4a0d      	ldr	r2, [pc, #52]	; (120b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1207a:	9b01      	ldr	r3, [sp, #4]
   1207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12080:	1e5a      	subs	r2, r3, #1
   12082:	490b      	ldr	r1, [pc, #44]	; (120b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12084:	9b01      	ldr	r3, [sp, #4]
   12086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   1208a:	4a0a      	ldr	r2, [pc, #40]	; (120b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   1208c:	9b01      	ldr	r3, [sp, #4]
   1208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12092:	f003 0301 	and.w	r3, r3, #1
   12096:	2b00      	cmp	r3, #0
   12098:	d106      	bne.n	120a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   1209a:	4a05      	ldr	r2, [pc, #20]	; (120b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1209c:	9b01      	ldr	r3, [sp, #4]
   1209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120a2:	2b00      	cmp	r3, #0
   120a4:	d100      	bne.n	120a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120a8:	bf00      	nop
   120aa:	b003      	add	sp, #12
   120ac:	f85d fb04 	ldr.w	pc, [sp], #4
   120b0:	1fff943c 	.word	0x1fff943c
   120b4:	1fff9438 	.word	0x1fff9438

000120b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   120b8:	b500      	push	{lr}
   120ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120bc:	f7ef fbc4 	bl	1848 <Sys_GetCoreID>
   120c0:	4603      	mov	r3, r0
   120c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   120c4:	4a10      	ldr	r2, [pc, #64]	; (12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120c6:	9b01      	ldr	r3, [sp, #4]
   120c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120cc:	2b00      	cmp	r3, #0
   120ce:	d10d      	bne.n	120ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120d0:	f7ee fd9a 	bl	c08 <Adc_schm_read_msr>
   120d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120d6:	9b00      	ldr	r3, [sp, #0]
   120d8:	f003 0301 	and.w	r3, r3, #1
   120dc:	2b00      	cmp	r3, #0
   120de:	d100      	bne.n	120e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   120e2:	490a      	ldr	r1, [pc, #40]	; (1210c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   120e4:	9b01      	ldr	r3, [sp, #4]
   120e6:	9a00      	ldr	r2, [sp, #0]
   120e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   120ec:	4a06      	ldr	r2, [pc, #24]	; (12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120ee:	9b01      	ldr	r3, [sp, #4]
   120f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120f4:	1c5a      	adds	r2, r3, #1
   120f6:	4904      	ldr	r1, [pc, #16]	; (12108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120f8:	9b01      	ldr	r3, [sp, #4]
   120fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120fe:	bf00      	nop
   12100:	b003      	add	sp, #12
   12102:	f85d fb04 	ldr.w	pc, [sp], #4
   12106:	bf00      	nop
   12108:	1fff9444 	.word	0x1fff9444
   1210c:	1fff9440 	.word	0x1fff9440

00012110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12110:	b500      	push	{lr}
   12112:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12114:	f7ef fb98 	bl	1848 <Sys_GetCoreID>
   12118:	4603      	mov	r3, r0
   1211a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   1211c:	4a0d      	ldr	r2, [pc, #52]	; (12154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   1211e:	9b01      	ldr	r3, [sp, #4]
   12120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12124:	1e5a      	subs	r2, r3, #1
   12126:	490b      	ldr	r1, [pc, #44]	; (12154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12128:	9b01      	ldr	r3, [sp, #4]
   1212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   1212e:	4a0a      	ldr	r2, [pc, #40]	; (12158 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   12130:	9b01      	ldr	r3, [sp, #4]
   12132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12136:	f003 0301 	and.w	r3, r3, #1
   1213a:	2b00      	cmp	r3, #0
   1213c:	d106      	bne.n	1214c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   1213e:	4a05      	ldr	r2, [pc, #20]	; (12154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12140:	9b01      	ldr	r3, [sp, #4]
   12142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12146:	2b00      	cmp	r3, #0
   12148:	d100      	bne.n	1214c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1214a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1214c:	bf00      	nop
   1214e:	b003      	add	sp, #12
   12150:	f85d fb04 	ldr.w	pc, [sp], #4
   12154:	1fff9444 	.word	0x1fff9444
   12158:	1fff9440 	.word	0x1fff9440

0001215c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   1215c:	b500      	push	{lr}
   1215e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12160:	f7ef fb72 	bl	1848 <Sys_GetCoreID>
   12164:	4603      	mov	r3, r0
   12166:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12168:	4a10      	ldr	r2, [pc, #64]	; (121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1216a:	9b01      	ldr	r3, [sp, #4]
   1216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12170:	2b00      	cmp	r3, #0
   12172:	d10d      	bne.n	12190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12174:	f7ee fd48 	bl	c08 <Adc_schm_read_msr>
   12178:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1217a:	9b00      	ldr	r3, [sp, #0]
   1217c:	f003 0301 	and.w	r3, r3, #1
   12180:	2b00      	cmp	r3, #0
   12182:	d100      	bne.n	12186 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12184:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12186:	490a      	ldr	r1, [pc, #40]	; (121b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12188:	9b01      	ldr	r3, [sp, #4]
   1218a:	9a00      	ldr	r2, [sp, #0]
   1218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12190:	4a06      	ldr	r2, [pc, #24]	; (121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12192:	9b01      	ldr	r3, [sp, #4]
   12194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12198:	1c5a      	adds	r2, r3, #1
   1219a:	4904      	ldr	r1, [pc, #16]	; (121ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1219c:	9b01      	ldr	r3, [sp, #4]
   1219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121a2:	bf00      	nop
   121a4:	b003      	add	sp, #12
   121a6:	f85d fb04 	ldr.w	pc, [sp], #4
   121aa:	bf00      	nop
   121ac:	1fff944c 	.word	0x1fff944c
   121b0:	1fff9448 	.word	0x1fff9448

000121b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   121b4:	b500      	push	{lr}
   121b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121b8:	f7ef fb46 	bl	1848 <Sys_GetCoreID>
   121bc:	4603      	mov	r3, r0
   121be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   121c0:	4a0d      	ldr	r2, [pc, #52]	; (121f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   121c2:	9b01      	ldr	r3, [sp, #4]
   121c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121c8:	1e5a      	subs	r2, r3, #1
   121ca:	490b      	ldr	r1, [pc, #44]	; (121f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   121cc:	9b01      	ldr	r3, [sp, #4]
   121ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   121d2:	4a0a      	ldr	r2, [pc, #40]	; (121fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   121d4:	9b01      	ldr	r3, [sp, #4]
   121d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121da:	f003 0301 	and.w	r3, r3, #1
   121de:	2b00      	cmp	r3, #0
   121e0:	d106      	bne.n	121f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   121e2:	4a05      	ldr	r2, [pc, #20]	; (121f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   121e4:	9b01      	ldr	r3, [sp, #4]
   121e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ea:	2b00      	cmp	r3, #0
   121ec:	d100      	bne.n	121f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121f0:	bf00      	nop
   121f2:	b003      	add	sp, #12
   121f4:	f85d fb04 	ldr.w	pc, [sp], #4
   121f8:	1fff944c 	.word	0x1fff944c
   121fc:	1fff9448 	.word	0x1fff9448

00012200 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12200:	b500      	push	{lr}
   12202:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12204:	f7ef fb20 	bl	1848 <Sys_GetCoreID>
   12208:	4603      	mov	r3, r0
   1220a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   1220c:	4a10      	ldr	r2, [pc, #64]	; (12250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1220e:	9b01      	ldr	r3, [sp, #4]
   12210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12214:	2b00      	cmp	r3, #0
   12216:	d10d      	bne.n	12234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12218:	f7ee fcf6 	bl	c08 <Adc_schm_read_msr>
   1221c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1221e:	9b00      	ldr	r3, [sp, #0]
   12220:	f003 0301 	and.w	r3, r3, #1
   12224:	2b00      	cmp	r3, #0
   12226:	d100      	bne.n	1222a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12228:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   1222a:	490a      	ldr	r1, [pc, #40]	; (12254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   1222c:	9b01      	ldr	r3, [sp, #4]
   1222e:	9a00      	ldr	r2, [sp, #0]
   12230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   12234:	4a06      	ldr	r2, [pc, #24]	; (12250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12236:	9b01      	ldr	r3, [sp, #4]
   12238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1223c:	1c5a      	adds	r2, r3, #1
   1223e:	4904      	ldr	r1, [pc, #16]	; (12250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12240:	9b01      	ldr	r3, [sp, #4]
   12242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12246:	bf00      	nop
   12248:	b003      	add	sp, #12
   1224a:	f85d fb04 	ldr.w	pc, [sp], #4
   1224e:	bf00      	nop
   12250:	1fff9454 	.word	0x1fff9454
   12254:	1fff9450 	.word	0x1fff9450

00012258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12258:	b500      	push	{lr}
   1225a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1225c:	f7ef faf4 	bl	1848 <Sys_GetCoreID>
   12260:	4603      	mov	r3, r0
   12262:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   12264:	4a0d      	ldr	r2, [pc, #52]	; (1229c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12266:	9b01      	ldr	r3, [sp, #4]
   12268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1226c:	1e5a      	subs	r2, r3, #1
   1226e:	490b      	ldr	r1, [pc, #44]	; (1229c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12270:	9b01      	ldr	r3, [sp, #4]
   12272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   12276:	4a0a      	ldr	r2, [pc, #40]	; (122a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12278:	9b01      	ldr	r3, [sp, #4]
   1227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1227e:	f003 0301 	and.w	r3, r3, #1
   12282:	2b00      	cmp	r3, #0
   12284:	d106      	bne.n	12294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   12286:	4a05      	ldr	r2, [pc, #20]	; (1229c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12288:	9b01      	ldr	r3, [sp, #4]
   1228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1228e:	2b00      	cmp	r3, #0
   12290:	d100      	bne.n	12294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12292:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12294:	bf00      	nop
   12296:	b003      	add	sp, #12
   12298:	f85d fb04 	ldr.w	pc, [sp], #4
   1229c:	1fff9454 	.word	0x1fff9454
   122a0:	1fff9450 	.word	0x1fff9450

000122a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   122a4:	b500      	push	{lr}
   122a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122a8:	f7ef face 	bl	1848 <Sys_GetCoreID>
   122ac:	4603      	mov	r3, r0
   122ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   122b0:	4a10      	ldr	r2, [pc, #64]	; (122f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   122b2:	9b01      	ldr	r3, [sp, #4]
   122b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b8:	2b00      	cmp	r3, #0
   122ba:	d10d      	bne.n	122d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122bc:	f7ee fca4 	bl	c08 <Adc_schm_read_msr>
   122c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122c2:	9b00      	ldr	r3, [sp, #0]
   122c4:	f003 0301 	and.w	r3, r3, #1
   122c8:	2b00      	cmp	r3, #0
   122ca:	d100      	bne.n	122ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   122ce:	490a      	ldr	r1, [pc, #40]	; (122f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   122d0:	9b01      	ldr	r3, [sp, #4]
   122d2:	9a00      	ldr	r2, [sp, #0]
   122d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   122d8:	4a06      	ldr	r2, [pc, #24]	; (122f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   122da:	9b01      	ldr	r3, [sp, #4]
   122dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e0:	1c5a      	adds	r2, r3, #1
   122e2:	4904      	ldr	r1, [pc, #16]	; (122f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122ea:	bf00      	nop
   122ec:	b003      	add	sp, #12
   122ee:	f85d fb04 	ldr.w	pc, [sp], #4
   122f2:	bf00      	nop
   122f4:	1fff945c 	.word	0x1fff945c
   122f8:	1fff9458 	.word	0x1fff9458

000122fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   122fc:	b500      	push	{lr}
   122fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12300:	f7ef faa2 	bl	1848 <Sys_GetCoreID>
   12304:	4603      	mov	r3, r0
   12306:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   12308:	4a0d      	ldr	r2, [pc, #52]	; (12340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   1230a:	9b01      	ldr	r3, [sp, #4]
   1230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12310:	1e5a      	subs	r2, r3, #1
   12312:	490b      	ldr	r1, [pc, #44]	; (12340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   12314:	9b01      	ldr	r3, [sp, #4]
   12316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   1231a:	4a0a      	ldr	r2, [pc, #40]	; (12344 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12322:	f003 0301 	and.w	r3, r3, #1
   12326:	2b00      	cmp	r3, #0
   12328:	d106      	bne.n	12338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   1232a:	4a05      	ldr	r2, [pc, #20]	; (12340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   1232c:	9b01      	ldr	r3, [sp, #4]
   1232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12332:	2b00      	cmp	r3, #0
   12334:	d100      	bne.n	12338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12336:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12338:	bf00      	nop
   1233a:	b003      	add	sp, #12
   1233c:	f85d fb04 	ldr.w	pc, [sp], #4
   12340:	1fff945c 	.word	0x1fff945c
   12344:	1fff9458 	.word	0x1fff9458

00012348 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12348:	b500      	push	{lr}
   1234a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1234c:	f7ef fa7c 	bl	1848 <Sys_GetCoreID>
   12350:	4603      	mov	r3, r0
   12352:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   12354:	4a10      	ldr	r2, [pc, #64]	; (12398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12356:	9b01      	ldr	r3, [sp, #4]
   12358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1235c:	2b00      	cmp	r3, #0
   1235e:	d10d      	bne.n	1237c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12360:	f7ee fc52 	bl	c08 <Adc_schm_read_msr>
   12364:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12366:	9b00      	ldr	r3, [sp, #0]
   12368:	f003 0301 	and.w	r3, r3, #1
   1236c:	2b00      	cmp	r3, #0
   1236e:	d100      	bne.n	12372 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12370:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   12372:	490a      	ldr	r1, [pc, #40]	; (1239c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   12374:	9b01      	ldr	r3, [sp, #4]
   12376:	9a00      	ldr	r2, [sp, #0]
   12378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   1237c:	4a06      	ldr	r2, [pc, #24]	; (12398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1237e:	9b01      	ldr	r3, [sp, #4]
   12380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12384:	1c5a      	adds	r2, r3, #1
   12386:	4904      	ldr	r1, [pc, #16]	; (12398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1238e:	bf00      	nop
   12390:	b003      	add	sp, #12
   12392:	f85d fb04 	ldr.w	pc, [sp], #4
   12396:	bf00      	nop
   12398:	1fff9464 	.word	0x1fff9464
   1239c:	1fff9460 	.word	0x1fff9460

000123a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   123a0:	b500      	push	{lr}
   123a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123a4:	f7ef fa50 	bl	1848 <Sys_GetCoreID>
   123a8:	4603      	mov	r3, r0
   123aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   123ac:	4a0d      	ldr	r2, [pc, #52]	; (123e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   123ae:	9b01      	ldr	r3, [sp, #4]
   123b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123b4:	1e5a      	subs	r2, r3, #1
   123b6:	490b      	ldr	r1, [pc, #44]	; (123e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   123b8:	9b01      	ldr	r3, [sp, #4]
   123ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   123be:	4a0a      	ldr	r2, [pc, #40]	; (123e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c6:	f003 0301 	and.w	r3, r3, #1
   123ca:	2b00      	cmp	r3, #0
   123cc:	d106      	bne.n	123dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   123ce:	4a05      	ldr	r2, [pc, #20]	; (123e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   123d0:	9b01      	ldr	r3, [sp, #4]
   123d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123d6:	2b00      	cmp	r3, #0
   123d8:	d100      	bne.n	123dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123dc:	bf00      	nop
   123de:	b003      	add	sp, #12
   123e0:	f85d fb04 	ldr.w	pc, [sp], #4
   123e4:	1fff9464 	.word	0x1fff9464
   123e8:	1fff9460 	.word	0x1fff9460

000123ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   123ec:	b500      	push	{lr}
   123ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123f0:	f7ef fa2a 	bl	1848 <Sys_GetCoreID>
   123f4:	4603      	mov	r3, r0
   123f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   123f8:	4a10      	ldr	r2, [pc, #64]	; (1243c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123fa:	9b01      	ldr	r3, [sp, #4]
   123fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12400:	2b00      	cmp	r3, #0
   12402:	d10d      	bne.n	12420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12404:	f7ee fc00 	bl	c08 <Adc_schm_read_msr>
   12408:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1240a:	9b00      	ldr	r3, [sp, #0]
   1240c:	f003 0301 	and.w	r3, r3, #1
   12410:	2b00      	cmp	r3, #0
   12412:	d100      	bne.n	12416 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12414:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   12416:	490a      	ldr	r1, [pc, #40]	; (12440 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   12418:	9b01      	ldr	r3, [sp, #4]
   1241a:	9a00      	ldr	r2, [sp, #0]
   1241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   12420:	4a06      	ldr	r2, [pc, #24]	; (1243c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   12422:	9b01      	ldr	r3, [sp, #4]
   12424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12428:	1c5a      	adds	r2, r3, #1
   1242a:	4904      	ldr	r1, [pc, #16]	; (1243c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1242c:	9b01      	ldr	r3, [sp, #4]
   1242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12432:	bf00      	nop
   12434:	b003      	add	sp, #12
   12436:	f85d fb04 	ldr.w	pc, [sp], #4
   1243a:	bf00      	nop
   1243c:	1fff946c 	.word	0x1fff946c
   12440:	1fff9468 	.word	0x1fff9468

00012444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   12444:	b500      	push	{lr}
   12446:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12448:	f7ef f9fe 	bl	1848 <Sys_GetCoreID>
   1244c:	4603      	mov	r3, r0
   1244e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   12450:	4a0d      	ldr	r2, [pc, #52]	; (12488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   12452:	9b01      	ldr	r3, [sp, #4]
   12454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12458:	1e5a      	subs	r2, r3, #1
   1245a:	490b      	ldr	r1, [pc, #44]	; (12488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1245c:	9b01      	ldr	r3, [sp, #4]
   1245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   12462:	4a0a      	ldr	r2, [pc, #40]	; (1248c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1246a:	f003 0301 	and.w	r3, r3, #1
   1246e:	2b00      	cmp	r3, #0
   12470:	d106      	bne.n	12480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   12472:	4a05      	ldr	r2, [pc, #20]	; (12488 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   12474:	9b01      	ldr	r3, [sp, #4]
   12476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1247a:	2b00      	cmp	r3, #0
   1247c:	d100      	bne.n	12480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1247e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12480:	bf00      	nop
   12482:	b003      	add	sp, #12
   12484:	f85d fb04 	ldr.w	pc, [sp], #4
   12488:	1fff946c 	.word	0x1fff946c
   1248c:	1fff9468 	.word	0x1fff9468

00012490 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   12490:	b500      	push	{lr}
   12492:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12494:	f7ef f9d8 	bl	1848 <Sys_GetCoreID>
   12498:	4603      	mov	r3, r0
   1249a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   1249c:	4a10      	ldr	r2, [pc, #64]	; (124e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1249e:	9b01      	ldr	r3, [sp, #4]
   124a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124a4:	2b00      	cmp	r3, #0
   124a6:	d10d      	bne.n	124c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124a8:	f7ee fbae 	bl	c08 <Adc_schm_read_msr>
   124ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124ae:	9b00      	ldr	r3, [sp, #0]
   124b0:	f003 0301 	and.w	r3, r3, #1
   124b4:	2b00      	cmp	r3, #0
   124b6:	d100      	bne.n	124ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   124ba:	490a      	ldr	r1, [pc, #40]	; (124e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   124bc:	9b01      	ldr	r3, [sp, #4]
   124be:	9a00      	ldr	r2, [sp, #0]
   124c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   124c4:	4a06      	ldr	r2, [pc, #24]	; (124e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   124c6:	9b01      	ldr	r3, [sp, #4]
   124c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124cc:	1c5a      	adds	r2, r3, #1
   124ce:	4904      	ldr	r1, [pc, #16]	; (124e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   124d0:	9b01      	ldr	r3, [sp, #4]
   124d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124d6:	bf00      	nop
   124d8:	b003      	add	sp, #12
   124da:	f85d fb04 	ldr.w	pc, [sp], #4
   124de:	bf00      	nop
   124e0:	1fff9474 	.word	0x1fff9474
   124e4:	1fff9470 	.word	0x1fff9470

000124e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   124e8:	b500      	push	{lr}
   124ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124ec:	f7ef f9ac 	bl	1848 <Sys_GetCoreID>
   124f0:	4603      	mov	r3, r0
   124f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   124f4:	4a0d      	ldr	r2, [pc, #52]	; (1252c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124f6:	9b01      	ldr	r3, [sp, #4]
   124f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124fc:	1e5a      	subs	r2, r3, #1
   124fe:	490b      	ldr	r1, [pc, #44]	; (1252c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   12500:	9b01      	ldr	r3, [sp, #4]
   12502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   12506:	4a0a      	ldr	r2, [pc, #40]	; (12530 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   12508:	9b01      	ldr	r3, [sp, #4]
   1250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1250e:	f003 0301 	and.w	r3, r3, #1
   12512:	2b00      	cmp	r3, #0
   12514:	d106      	bne.n	12524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   12516:	4a05      	ldr	r2, [pc, #20]	; (1252c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   12518:	9b01      	ldr	r3, [sp, #4]
   1251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1251e:	2b00      	cmp	r3, #0
   12520:	d100      	bne.n	12524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12522:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12524:	bf00      	nop
   12526:	b003      	add	sp, #12
   12528:	f85d fb04 	ldr.w	pc, [sp], #4
   1252c:	1fff9474 	.word	0x1fff9474
   12530:	1fff9470 	.word	0x1fff9470

00012534 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   12534:	b500      	push	{lr}
   12536:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12538:	f7ef f986 	bl	1848 <Sys_GetCoreID>
   1253c:	4603      	mov	r3, r0
   1253e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   12540:	4a10      	ldr	r2, [pc, #64]	; (12584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   12542:	9b01      	ldr	r3, [sp, #4]
   12544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12548:	2b00      	cmp	r3, #0
   1254a:	d10d      	bne.n	12568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1254c:	f7ee fb5c 	bl	c08 <Adc_schm_read_msr>
   12550:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12552:	9b00      	ldr	r3, [sp, #0]
   12554:	f003 0301 	and.w	r3, r3, #1
   12558:	2b00      	cmp	r3, #0
   1255a:	d100      	bne.n	1255e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1255c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   1255e:	490a      	ldr	r1, [pc, #40]	; (12588 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   12560:	9b01      	ldr	r3, [sp, #4]
   12562:	9a00      	ldr	r2, [sp, #0]
   12564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   12568:	4a06      	ldr	r2, [pc, #24]	; (12584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1256a:	9b01      	ldr	r3, [sp, #4]
   1256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12570:	1c5a      	adds	r2, r3, #1
   12572:	4904      	ldr	r1, [pc, #16]	; (12584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   12574:	9b01      	ldr	r3, [sp, #4]
   12576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1257a:	bf00      	nop
   1257c:	b003      	add	sp, #12
   1257e:	f85d fb04 	ldr.w	pc, [sp], #4
   12582:	bf00      	nop
   12584:	1fff947c 	.word	0x1fff947c
   12588:	1fff9478 	.word	0x1fff9478

0001258c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   1258c:	b500      	push	{lr}
   1258e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12590:	f7ef f95a 	bl	1848 <Sys_GetCoreID>
   12594:	4603      	mov	r3, r0
   12596:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   12598:	4a0d      	ldr	r2, [pc, #52]	; (125d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a0:	1e5a      	subs	r2, r3, #1
   125a2:	490b      	ldr	r1, [pc, #44]	; (125d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   125a4:	9b01      	ldr	r3, [sp, #4]
   125a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   125aa:	4a0a      	ldr	r2, [pc, #40]	; (125d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   125ac:	9b01      	ldr	r3, [sp, #4]
   125ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125b2:	f003 0301 	and.w	r3, r3, #1
   125b6:	2b00      	cmp	r3, #0
   125b8:	d106      	bne.n	125c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   125ba:	4a05      	ldr	r2, [pc, #20]	; (125d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   125bc:	9b01      	ldr	r3, [sp, #4]
   125be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d100      	bne.n	125c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125c8:	bf00      	nop
   125ca:	b003      	add	sp, #12
   125cc:	f85d fb04 	ldr.w	pc, [sp], #4
   125d0:	1fff947c 	.word	0x1fff947c
   125d4:	1fff9478 	.word	0x1fff9478

000125d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   125d8:	b500      	push	{lr}
   125da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125dc:	f7ef f934 	bl	1848 <Sys_GetCoreID>
   125e0:	4603      	mov	r3, r0
   125e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   125e4:	4a10      	ldr	r2, [pc, #64]	; (12628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125e6:	9b01      	ldr	r3, [sp, #4]
   125e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ec:	2b00      	cmp	r3, #0
   125ee:	d10d      	bne.n	1260c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125f0:	f7ee fb0a 	bl	c08 <Adc_schm_read_msr>
   125f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125f6:	9b00      	ldr	r3, [sp, #0]
   125f8:	f003 0301 	and.w	r3, r3, #1
   125fc:	2b00      	cmp	r3, #0
   125fe:	d100      	bne.n	12602 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12600:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   12602:	490a      	ldr	r1, [pc, #40]	; (1262c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   12604:	9b01      	ldr	r3, [sp, #4]
   12606:	9a00      	ldr	r2, [sp, #0]
   12608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   1260c:	4a06      	ldr	r2, [pc, #24]	; (12628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1260e:	9b01      	ldr	r3, [sp, #4]
   12610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12614:	1c5a      	adds	r2, r3, #1
   12616:	4904      	ldr	r1, [pc, #16]	; (12628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   12618:	9b01      	ldr	r3, [sp, #4]
   1261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1261e:	bf00      	nop
   12620:	b003      	add	sp, #12
   12622:	f85d fb04 	ldr.w	pc, [sp], #4
   12626:	bf00      	nop
   12628:	1fff9484 	.word	0x1fff9484
   1262c:	1fff9480 	.word	0x1fff9480

00012630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   12630:	b500      	push	{lr}
   12632:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12634:	f7ef f908 	bl	1848 <Sys_GetCoreID>
   12638:	4603      	mov	r3, r0
   1263a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   1263c:	4a0d      	ldr	r2, [pc, #52]	; (12674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   1263e:	9b01      	ldr	r3, [sp, #4]
   12640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12644:	1e5a      	subs	r2, r3, #1
   12646:	490b      	ldr	r1, [pc, #44]	; (12674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12648:	9b01      	ldr	r3, [sp, #4]
   1264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   1264e:	4a0a      	ldr	r2, [pc, #40]	; (12678 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   12650:	9b01      	ldr	r3, [sp, #4]
   12652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12656:	f003 0301 	and.w	r3, r3, #1
   1265a:	2b00      	cmp	r3, #0
   1265c:	d106      	bne.n	1266c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   1265e:	4a05      	ldr	r2, [pc, #20]	; (12674 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12660:	9b01      	ldr	r3, [sp, #4]
   12662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12666:	2b00      	cmp	r3, #0
   12668:	d100      	bne.n	1266c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1266a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1266c:	bf00      	nop
   1266e:	b003      	add	sp, #12
   12670:	f85d fb04 	ldr.w	pc, [sp], #4
   12674:	1fff9484 	.word	0x1fff9484
   12678:	1fff9480 	.word	0x1fff9480

0001267c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   1267c:	b500      	push	{lr}
   1267e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12680:	f7ef f8e2 	bl	1848 <Sys_GetCoreID>
   12684:	4603      	mov	r3, r0
   12686:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   12688:	4a10      	ldr	r2, [pc, #64]	; (126cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1268a:	9b01      	ldr	r3, [sp, #4]
   1268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12690:	2b00      	cmp	r3, #0
   12692:	d10d      	bne.n	126b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12694:	f7ee fab8 	bl	c08 <Adc_schm_read_msr>
   12698:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1269a:	9b00      	ldr	r3, [sp, #0]
   1269c:	f003 0301 	and.w	r3, r3, #1
   126a0:	2b00      	cmp	r3, #0
   126a2:	d100      	bne.n	126a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   126a6:	490a      	ldr	r1, [pc, #40]	; (126d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   126a8:	9b01      	ldr	r3, [sp, #4]
   126aa:	9a00      	ldr	r2, [sp, #0]
   126ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   126b0:	4a06      	ldr	r2, [pc, #24]	; (126cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   126b2:	9b01      	ldr	r3, [sp, #4]
   126b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126b8:	1c5a      	adds	r2, r3, #1
   126ba:	4904      	ldr	r1, [pc, #16]	; (126cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126c2:	bf00      	nop
   126c4:	b003      	add	sp, #12
   126c6:	f85d fb04 	ldr.w	pc, [sp], #4
   126ca:	bf00      	nop
   126cc:	1fff948c 	.word	0x1fff948c
   126d0:	1fff9488 	.word	0x1fff9488

000126d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   126d4:	b500      	push	{lr}
   126d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126d8:	f7ef f8b6 	bl	1848 <Sys_GetCoreID>
   126dc:	4603      	mov	r3, r0
   126de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   126e0:	4a0d      	ldr	r2, [pc, #52]	; (12718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126e2:	9b01      	ldr	r3, [sp, #4]
   126e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126e8:	1e5a      	subs	r2, r3, #1
   126ea:	490b      	ldr	r1, [pc, #44]	; (12718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126ec:	9b01      	ldr	r3, [sp, #4]
   126ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   126f2:	4a0a      	ldr	r2, [pc, #40]	; (1271c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126fa:	f003 0301 	and.w	r3, r3, #1
   126fe:	2b00      	cmp	r3, #0
   12700:	d106      	bne.n	12710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   12702:	4a05      	ldr	r2, [pc, #20]	; (12718 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   12704:	9b01      	ldr	r3, [sp, #4]
   12706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1270a:	2b00      	cmp	r3, #0
   1270c:	d100      	bne.n	12710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1270e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12710:	bf00      	nop
   12712:	b003      	add	sp, #12
   12714:	f85d fb04 	ldr.w	pc, [sp], #4
   12718:	1fff948c 	.word	0x1fff948c
   1271c:	1fff9488 	.word	0x1fff9488

00012720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   12720:	b500      	push	{lr}
   12722:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12724:	f7ef f890 	bl	1848 <Sys_GetCoreID>
   12728:	4603      	mov	r3, r0
   1272a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   1272c:	4a10      	ldr	r2, [pc, #64]	; (12770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1272e:	9b01      	ldr	r3, [sp, #4]
   12730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12734:	2b00      	cmp	r3, #0
   12736:	d10d      	bne.n	12754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12738:	f7ee fa66 	bl	c08 <Adc_schm_read_msr>
   1273c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1273e:	9b00      	ldr	r3, [sp, #0]
   12740:	f003 0301 	and.w	r3, r3, #1
   12744:	2b00      	cmp	r3, #0
   12746:	d100      	bne.n	1274a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12748:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   1274a:	490a      	ldr	r1, [pc, #40]	; (12774 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   1274c:	9b01      	ldr	r3, [sp, #4]
   1274e:	9a00      	ldr	r2, [sp, #0]
   12750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   12754:	4a06      	ldr	r2, [pc, #24]	; (12770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   12756:	9b01      	ldr	r3, [sp, #4]
   12758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1275c:	1c5a      	adds	r2, r3, #1
   1275e:	4904      	ldr	r1, [pc, #16]	; (12770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   12760:	9b01      	ldr	r3, [sp, #4]
   12762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12766:	bf00      	nop
   12768:	b003      	add	sp, #12
   1276a:	f85d fb04 	ldr.w	pc, [sp], #4
   1276e:	bf00      	nop
   12770:	1fff9494 	.word	0x1fff9494
   12774:	1fff9490 	.word	0x1fff9490

00012778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   12778:	b500      	push	{lr}
   1277a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1277c:	f7ef f864 	bl	1848 <Sys_GetCoreID>
   12780:	4603      	mov	r3, r0
   12782:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   12784:	4a0d      	ldr	r2, [pc, #52]	; (127bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12786:	9b01      	ldr	r3, [sp, #4]
   12788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1278c:	1e5a      	subs	r2, r3, #1
   1278e:	490b      	ldr	r1, [pc, #44]	; (127bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12790:	9b01      	ldr	r3, [sp, #4]
   12792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   12796:	4a0a      	ldr	r2, [pc, #40]	; (127c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   12798:	9b01      	ldr	r3, [sp, #4]
   1279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1279e:	f003 0301 	and.w	r3, r3, #1
   127a2:	2b00      	cmp	r3, #0
   127a4:	d106      	bne.n	127b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   127a6:	4a05      	ldr	r2, [pc, #20]	; (127bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   127a8:	9b01      	ldr	r3, [sp, #4]
   127aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127ae:	2b00      	cmp	r3, #0
   127b0:	d100      	bne.n	127b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127b4:	bf00      	nop
   127b6:	b003      	add	sp, #12
   127b8:	f85d fb04 	ldr.w	pc, [sp], #4
   127bc:	1fff9494 	.word	0x1fff9494
   127c0:	1fff9490 	.word	0x1fff9490

000127c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   127c4:	b500      	push	{lr}
   127c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127c8:	f7ef f83e 	bl	1848 <Sys_GetCoreID>
   127cc:	4603      	mov	r3, r0
   127ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   127d0:	4a10      	ldr	r2, [pc, #64]	; (12814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   127d2:	9b01      	ldr	r3, [sp, #4]
   127d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d8:	2b00      	cmp	r3, #0
   127da:	d10d      	bne.n	127f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127dc:	f7ee fa14 	bl	c08 <Adc_schm_read_msr>
   127e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127e2:	9b00      	ldr	r3, [sp, #0]
   127e4:	f003 0301 	and.w	r3, r3, #1
   127e8:	2b00      	cmp	r3, #0
   127ea:	d100      	bne.n	127ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   127ee:	490a      	ldr	r1, [pc, #40]	; (12818 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   127f0:	9b01      	ldr	r3, [sp, #4]
   127f2:	9a00      	ldr	r2, [sp, #0]
   127f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   127f8:	4a06      	ldr	r2, [pc, #24]	; (12814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   127fa:	9b01      	ldr	r3, [sp, #4]
   127fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12800:	1c5a      	adds	r2, r3, #1
   12802:	4904      	ldr	r1, [pc, #16]	; (12814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   12804:	9b01      	ldr	r3, [sp, #4]
   12806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1280a:	bf00      	nop
   1280c:	b003      	add	sp, #12
   1280e:	f85d fb04 	ldr.w	pc, [sp], #4
   12812:	bf00      	nop
   12814:	1fff949c 	.word	0x1fff949c
   12818:	1fff9498 	.word	0x1fff9498

0001281c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   1281c:	b500      	push	{lr}
   1281e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12820:	f7ef f812 	bl	1848 <Sys_GetCoreID>
   12824:	4603      	mov	r3, r0
   12826:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   12828:	4a0d      	ldr	r2, [pc, #52]	; (12860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   1282a:	9b01      	ldr	r3, [sp, #4]
   1282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12830:	1e5a      	subs	r2, r3, #1
   12832:	490b      	ldr	r1, [pc, #44]	; (12860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   12834:	9b01      	ldr	r3, [sp, #4]
   12836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   1283a:	4a0a      	ldr	r2, [pc, #40]	; (12864 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   1283c:	9b01      	ldr	r3, [sp, #4]
   1283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12842:	f003 0301 	and.w	r3, r3, #1
   12846:	2b00      	cmp	r3, #0
   12848:	d106      	bne.n	12858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   1284a:	4a05      	ldr	r2, [pc, #20]	; (12860 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   1284c:	9b01      	ldr	r3, [sp, #4]
   1284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12852:	2b00      	cmp	r3, #0
   12854:	d100      	bne.n	12858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12856:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12858:	bf00      	nop
   1285a:	b003      	add	sp, #12
   1285c:	f85d fb04 	ldr.w	pc, [sp], #4
   12860:	1fff949c 	.word	0x1fff949c
   12864:	1fff9498 	.word	0x1fff9498

00012868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12868:	b500      	push	{lr}
   1286a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1286c:	f7ee ffec 	bl	1848 <Sys_GetCoreID>
   12870:	4603      	mov	r3, r0
   12872:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   12874:	4a10      	ldr	r2, [pc, #64]	; (128b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12876:	9b01      	ldr	r3, [sp, #4]
   12878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287c:	2b00      	cmp	r3, #0
   1287e:	d10d      	bne.n	1289c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12880:	f7ee f9c2 	bl	c08 <Adc_schm_read_msr>
   12884:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12886:	9b00      	ldr	r3, [sp, #0]
   12888:	f003 0301 	and.w	r3, r3, #1
   1288c:	2b00      	cmp	r3, #0
   1288e:	d100      	bne.n	12892 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12890:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   12892:	490a      	ldr	r1, [pc, #40]	; (128bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   12894:	9b01      	ldr	r3, [sp, #4]
   12896:	9a00      	ldr	r2, [sp, #0]
   12898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   1289c:	4a06      	ldr	r2, [pc, #24]	; (128b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1289e:	9b01      	ldr	r3, [sp, #4]
   128a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a4:	1c5a      	adds	r2, r3, #1
   128a6:	4904      	ldr	r1, [pc, #16]	; (128b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   128a8:	9b01      	ldr	r3, [sp, #4]
   128aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128ae:	bf00      	nop
   128b0:	b003      	add	sp, #12
   128b2:	f85d fb04 	ldr.w	pc, [sp], #4
   128b6:	bf00      	nop
   128b8:	1fff94a4 	.word	0x1fff94a4
   128bc:	1fff94a0 	.word	0x1fff94a0

000128c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   128c0:	b500      	push	{lr}
   128c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128c4:	f7ee ffc0 	bl	1848 <Sys_GetCoreID>
   128c8:	4603      	mov	r3, r0
   128ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   128cc:	4a0d      	ldr	r2, [pc, #52]	; (12904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   128ce:	9b01      	ldr	r3, [sp, #4]
   128d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128d4:	1e5a      	subs	r2, r3, #1
   128d6:	490b      	ldr	r1, [pc, #44]	; (12904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   128d8:	9b01      	ldr	r3, [sp, #4]
   128da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   128de:	4a0a      	ldr	r2, [pc, #40]	; (12908 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   128e0:	9b01      	ldr	r3, [sp, #4]
   128e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e6:	f003 0301 	and.w	r3, r3, #1
   128ea:	2b00      	cmp	r3, #0
   128ec:	d106      	bne.n	128fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   128ee:	4a05      	ldr	r2, [pc, #20]	; (12904 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   128f0:	9b01      	ldr	r3, [sp, #4]
   128f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f6:	2b00      	cmp	r3, #0
   128f8:	d100      	bne.n	128fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128fc:	bf00      	nop
   128fe:	b003      	add	sp, #12
   12900:	f85d fb04 	ldr.w	pc, [sp], #4
   12904:	1fff94a4 	.word	0x1fff94a4
   12908:	1fff94a0 	.word	0x1fff94a0

0001290c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   1290c:	b500      	push	{lr}
   1290e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12910:	f7ee ff9a 	bl	1848 <Sys_GetCoreID>
   12914:	4603      	mov	r3, r0
   12916:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   12918:	4a10      	ldr	r2, [pc, #64]	; (1295c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1291a:	9b01      	ldr	r3, [sp, #4]
   1291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12920:	2b00      	cmp	r3, #0
   12922:	d10d      	bne.n	12940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12924:	f7ee f970 	bl	c08 <Adc_schm_read_msr>
   12928:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1292a:	9b00      	ldr	r3, [sp, #0]
   1292c:	f003 0301 	and.w	r3, r3, #1
   12930:	2b00      	cmp	r3, #0
   12932:	d100      	bne.n	12936 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12934:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   12936:	490a      	ldr	r1, [pc, #40]	; (12960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   12938:	9b01      	ldr	r3, [sp, #4]
   1293a:	9a00      	ldr	r2, [sp, #0]
   1293c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   12940:	4a06      	ldr	r2, [pc, #24]	; (1295c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   12942:	9b01      	ldr	r3, [sp, #4]
   12944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12948:	1c5a      	adds	r2, r3, #1
   1294a:	4904      	ldr	r1, [pc, #16]	; (1295c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1294c:	9b01      	ldr	r3, [sp, #4]
   1294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12952:	bf00      	nop
   12954:	b003      	add	sp, #12
   12956:	f85d fb04 	ldr.w	pc, [sp], #4
   1295a:	bf00      	nop
   1295c:	1fff94ac 	.word	0x1fff94ac
   12960:	1fff94a8 	.word	0x1fff94a8

00012964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   12964:	b500      	push	{lr}
   12966:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12968:	f7ee ff6e 	bl	1848 <Sys_GetCoreID>
   1296c:	4603      	mov	r3, r0
   1296e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   12970:	4a0d      	ldr	r2, [pc, #52]	; (129a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   12972:	9b01      	ldr	r3, [sp, #4]
   12974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12978:	1e5a      	subs	r2, r3, #1
   1297a:	490b      	ldr	r1, [pc, #44]	; (129a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1297c:	9b01      	ldr	r3, [sp, #4]
   1297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   12982:	4a0a      	ldr	r2, [pc, #40]	; (129ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   12984:	9b01      	ldr	r3, [sp, #4]
   12986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1298a:	f003 0301 	and.w	r3, r3, #1
   1298e:	2b00      	cmp	r3, #0
   12990:	d106      	bne.n	129a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   12992:	4a05      	ldr	r2, [pc, #20]	; (129a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   12994:	9b01      	ldr	r3, [sp, #4]
   12996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d100      	bne.n	129a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1299e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129a0:	bf00      	nop
   129a2:	b003      	add	sp, #12
   129a4:	f85d fb04 	ldr.w	pc, [sp], #4
   129a8:	1fff94ac 	.word	0x1fff94ac
   129ac:	1fff94a8 	.word	0x1fff94a8

000129b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   129b0:	b500      	push	{lr}
   129b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129b4:	f7ee ff48 	bl	1848 <Sys_GetCoreID>
   129b8:	4603      	mov	r3, r0
   129ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   129bc:	4a10      	ldr	r2, [pc, #64]	; (12a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129be:	9b01      	ldr	r3, [sp, #4]
   129c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c4:	2b00      	cmp	r3, #0
   129c6:	d10d      	bne.n	129e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129c8:	f7ee f91e 	bl	c08 <Adc_schm_read_msr>
   129cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129ce:	9b00      	ldr	r3, [sp, #0]
   129d0:	f003 0301 	and.w	r3, r3, #1
   129d4:	2b00      	cmp	r3, #0
   129d6:	d100      	bne.n	129da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   129da:	490a      	ldr	r1, [pc, #40]	; (12a04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   129dc:	9b01      	ldr	r3, [sp, #4]
   129de:	9a00      	ldr	r2, [sp, #0]
   129e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   129e4:	4a06      	ldr	r2, [pc, #24]	; (12a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129e6:	9b01      	ldr	r3, [sp, #4]
   129e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ec:	1c5a      	adds	r2, r3, #1
   129ee:	4904      	ldr	r1, [pc, #16]	; (12a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129f0:	9b01      	ldr	r3, [sp, #4]
   129f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129f6:	bf00      	nop
   129f8:	b003      	add	sp, #12
   129fa:	f85d fb04 	ldr.w	pc, [sp], #4
   129fe:	bf00      	nop
   12a00:	1fff94b4 	.word	0x1fff94b4
   12a04:	1fff94b0 	.word	0x1fff94b0

00012a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   12a08:	b500      	push	{lr}
   12a0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a0c:	f7ee ff1c 	bl	1848 <Sys_GetCoreID>
   12a10:	4603      	mov	r3, r0
   12a12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   12a14:	4a0d      	ldr	r2, [pc, #52]	; (12a4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   12a16:	9b01      	ldr	r3, [sp, #4]
   12a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a1c:	1e5a      	subs	r2, r3, #1
   12a1e:	490b      	ldr	r1, [pc, #44]	; (12a4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   12a20:	9b01      	ldr	r3, [sp, #4]
   12a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   12a26:	4a0a      	ldr	r2, [pc, #40]	; (12a50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   12a28:	9b01      	ldr	r3, [sp, #4]
   12a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a2e:	f003 0301 	and.w	r3, r3, #1
   12a32:	2b00      	cmp	r3, #0
   12a34:	d106      	bne.n	12a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   12a36:	4a05      	ldr	r2, [pc, #20]	; (12a4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   12a38:	9b01      	ldr	r3, [sp, #4]
   12a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a3e:	2b00      	cmp	r3, #0
   12a40:	d100      	bne.n	12a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a44:	bf00      	nop
   12a46:	b003      	add	sp, #12
   12a48:	f85d fb04 	ldr.w	pc, [sp], #4
   12a4c:	1fff94b4 	.word	0x1fff94b4
   12a50:	1fff94b0 	.word	0x1fff94b0

00012a54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12a54:	b500      	push	{lr}
   12a56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a58:	f7ee fef6 	bl	1848 <Sys_GetCoreID>
   12a5c:	4603      	mov	r3, r0
   12a5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   12a60:	4a10      	ldr	r2, [pc, #64]	; (12aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a62:	9b01      	ldr	r3, [sp, #4]
   12a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d10d      	bne.n	12a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a6c:	f7ee f8cc 	bl	c08 <Adc_schm_read_msr>
   12a70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a72:	9b00      	ldr	r3, [sp, #0]
   12a74:	f003 0301 	and.w	r3, r3, #1
   12a78:	2b00      	cmp	r3, #0
   12a7a:	d100      	bne.n	12a7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   12a7e:	490a      	ldr	r1, [pc, #40]	; (12aa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   12a80:	9b01      	ldr	r3, [sp, #4]
   12a82:	9a00      	ldr	r2, [sp, #0]
   12a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   12a88:	4a06      	ldr	r2, [pc, #24]	; (12aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a8a:	9b01      	ldr	r3, [sp, #4]
   12a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a90:	1c5a      	adds	r2, r3, #1
   12a92:	4904      	ldr	r1, [pc, #16]	; (12aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a94:	9b01      	ldr	r3, [sp, #4]
   12a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a9a:	bf00      	nop
   12a9c:	b003      	add	sp, #12
   12a9e:	f85d fb04 	ldr.w	pc, [sp], #4
   12aa2:	bf00      	nop
   12aa4:	1fff94bc 	.word	0x1fff94bc
   12aa8:	1fff94b8 	.word	0x1fff94b8

00012aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12aac:	b500      	push	{lr}
   12aae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ab0:	f7ee feca 	bl	1848 <Sys_GetCoreID>
   12ab4:	4603      	mov	r3, r0
   12ab6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   12ab8:	4a0d      	ldr	r2, [pc, #52]	; (12af0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12aba:	9b01      	ldr	r3, [sp, #4]
   12abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac0:	1e5a      	subs	r2, r3, #1
   12ac2:	490b      	ldr	r1, [pc, #44]	; (12af0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12ac4:	9b01      	ldr	r3, [sp, #4]
   12ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   12aca:	4a0a      	ldr	r2, [pc, #40]	; (12af4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   12acc:	9b01      	ldr	r3, [sp, #4]
   12ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ad2:	f003 0301 	and.w	r3, r3, #1
   12ad6:	2b00      	cmp	r3, #0
   12ad8:	d106      	bne.n	12ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   12ada:	4a05      	ldr	r2, [pc, #20]	; (12af0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12adc:	9b01      	ldr	r3, [sp, #4]
   12ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ae2:	2b00      	cmp	r3, #0
   12ae4:	d100      	bne.n	12ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ae6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ae8:	bf00      	nop
   12aea:	b003      	add	sp, #12
   12aec:	f85d fb04 	ldr.w	pc, [sp], #4
   12af0:	1fff94bc 	.word	0x1fff94bc
   12af4:	1fff94b8 	.word	0x1fff94b8

00012af8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   12af8:	b500      	push	{lr}
   12afa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12afc:	f7ee fea4 	bl	1848 <Sys_GetCoreID>
   12b00:	4603      	mov	r3, r0
   12b02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   12b04:	4a10      	ldr	r2, [pc, #64]	; (12b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12b06:	9b01      	ldr	r3, [sp, #4]
   12b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b0c:	2b00      	cmp	r3, #0
   12b0e:	d10d      	bne.n	12b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b10:	f7ee f87a 	bl	c08 <Adc_schm_read_msr>
   12b14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b16:	9b00      	ldr	r3, [sp, #0]
   12b18:	f003 0301 	and.w	r3, r3, #1
   12b1c:	2b00      	cmp	r3, #0
   12b1e:	d100      	bne.n	12b22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   12b22:	490a      	ldr	r1, [pc, #40]	; (12b4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   12b24:	9b01      	ldr	r3, [sp, #4]
   12b26:	9a00      	ldr	r2, [sp, #0]
   12b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   12b2c:	4a06      	ldr	r2, [pc, #24]	; (12b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12b2e:	9b01      	ldr	r3, [sp, #4]
   12b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b34:	1c5a      	adds	r2, r3, #1
   12b36:	4904      	ldr	r1, [pc, #16]	; (12b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12b38:	9b01      	ldr	r3, [sp, #4]
   12b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b3e:	bf00      	nop
   12b40:	b003      	add	sp, #12
   12b42:	f85d fb04 	ldr.w	pc, [sp], #4
   12b46:	bf00      	nop
   12b48:	1fff94c4 	.word	0x1fff94c4
   12b4c:	1fff94c0 	.word	0x1fff94c0

00012b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   12b50:	b500      	push	{lr}
   12b52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b54:	f7ee fe78 	bl	1848 <Sys_GetCoreID>
   12b58:	4603      	mov	r3, r0
   12b5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   12b5c:	4a0d      	ldr	r2, [pc, #52]	; (12b94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b5e:	9b01      	ldr	r3, [sp, #4]
   12b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b64:	1e5a      	subs	r2, r3, #1
   12b66:	490b      	ldr	r1, [pc, #44]	; (12b94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b68:	9b01      	ldr	r3, [sp, #4]
   12b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   12b6e:	4a0a      	ldr	r2, [pc, #40]	; (12b98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   12b70:	9b01      	ldr	r3, [sp, #4]
   12b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b76:	f003 0301 	and.w	r3, r3, #1
   12b7a:	2b00      	cmp	r3, #0
   12b7c:	d106      	bne.n	12b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   12b7e:	4a05      	ldr	r2, [pc, #20]	; (12b94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b80:	9b01      	ldr	r3, [sp, #4]
   12b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b86:	2b00      	cmp	r3, #0
   12b88:	d100      	bne.n	12b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b8c:	bf00      	nop
   12b8e:	b003      	add	sp, #12
   12b90:	f85d fb04 	ldr.w	pc, [sp], #4
   12b94:	1fff94c4 	.word	0x1fff94c4
   12b98:	1fff94c0 	.word	0x1fff94c0

00012b9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12b9c:	b500      	push	{lr}
   12b9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ba0:	f7ee fe52 	bl	1848 <Sys_GetCoreID>
   12ba4:	4603      	mov	r3, r0
   12ba6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   12ba8:	4a10      	ldr	r2, [pc, #64]	; (12bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12baa:	9b01      	ldr	r3, [sp, #4]
   12bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bb0:	2b00      	cmp	r3, #0
   12bb2:	d10d      	bne.n	12bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bb4:	f7ee f828 	bl	c08 <Adc_schm_read_msr>
   12bb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bba:	9b00      	ldr	r3, [sp, #0]
   12bbc:	f003 0301 	and.w	r3, r3, #1
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d100      	bne.n	12bc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   12bc6:	490a      	ldr	r1, [pc, #40]	; (12bf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   12bc8:	9b01      	ldr	r3, [sp, #4]
   12bca:	9a00      	ldr	r2, [sp, #0]
   12bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   12bd0:	4a06      	ldr	r2, [pc, #24]	; (12bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12bd2:	9b01      	ldr	r3, [sp, #4]
   12bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd8:	1c5a      	adds	r2, r3, #1
   12bda:	4904      	ldr	r1, [pc, #16]	; (12bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12bdc:	9b01      	ldr	r3, [sp, #4]
   12bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12be2:	bf00      	nop
   12be4:	b003      	add	sp, #12
   12be6:	f85d fb04 	ldr.w	pc, [sp], #4
   12bea:	bf00      	nop
   12bec:	1fff94cc 	.word	0x1fff94cc
   12bf0:	1fff94c8 	.word	0x1fff94c8

00012bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12bf4:	b500      	push	{lr}
   12bf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bf8:	f7ee fe26 	bl	1848 <Sys_GetCoreID>
   12bfc:	4603      	mov	r3, r0
   12bfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   12c00:	4a0d      	ldr	r2, [pc, #52]	; (12c38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12c02:	9b01      	ldr	r3, [sp, #4]
   12c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c08:	1e5a      	subs	r2, r3, #1
   12c0a:	490b      	ldr	r1, [pc, #44]	; (12c38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12c0c:	9b01      	ldr	r3, [sp, #4]
   12c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   12c12:	4a0a      	ldr	r2, [pc, #40]	; (12c3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   12c14:	9b01      	ldr	r3, [sp, #4]
   12c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c1a:	f003 0301 	and.w	r3, r3, #1
   12c1e:	2b00      	cmp	r3, #0
   12c20:	d106      	bne.n	12c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   12c22:	4a05      	ldr	r2, [pc, #20]	; (12c38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12c24:	9b01      	ldr	r3, [sp, #4]
   12c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	d100      	bne.n	12c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c30:	bf00      	nop
   12c32:	b003      	add	sp, #12
   12c34:	f85d fb04 	ldr.w	pc, [sp], #4
   12c38:	1fff94cc 	.word	0x1fff94cc
   12c3c:	1fff94c8 	.word	0x1fff94c8

00012c40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12c40:	b500      	push	{lr}
   12c42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c44:	f7ee fe00 	bl	1848 <Sys_GetCoreID>
   12c48:	4603      	mov	r3, r0
   12c4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   12c4c:	4a10      	ldr	r2, [pc, #64]	; (12c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c4e:	9b01      	ldr	r3, [sp, #4]
   12c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c54:	2b00      	cmp	r3, #0
   12c56:	d10d      	bne.n	12c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c58:	f7ed ffd6 	bl	c08 <Adc_schm_read_msr>
   12c5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c5e:	9b00      	ldr	r3, [sp, #0]
   12c60:	f003 0301 	and.w	r3, r3, #1
   12c64:	2b00      	cmp	r3, #0
   12c66:	d100      	bne.n	12c6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   12c6a:	490a      	ldr	r1, [pc, #40]	; (12c94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   12c6c:	9b01      	ldr	r3, [sp, #4]
   12c6e:	9a00      	ldr	r2, [sp, #0]
   12c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   12c74:	4a06      	ldr	r2, [pc, #24]	; (12c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c76:	9b01      	ldr	r3, [sp, #4]
   12c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c7c:	1c5a      	adds	r2, r3, #1
   12c7e:	4904      	ldr	r1, [pc, #16]	; (12c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c86:	bf00      	nop
   12c88:	b003      	add	sp, #12
   12c8a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c8e:	bf00      	nop
   12c90:	1fff94d4 	.word	0x1fff94d4
   12c94:	1fff94d0 	.word	0x1fff94d0

00012c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12c98:	b500      	push	{lr}
   12c9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c9c:	f7ee fdd4 	bl	1848 <Sys_GetCoreID>
   12ca0:	4603      	mov	r3, r0
   12ca2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   12ca4:	4a0d      	ldr	r2, [pc, #52]	; (12cdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12ca6:	9b01      	ldr	r3, [sp, #4]
   12ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cac:	1e5a      	subs	r2, r3, #1
   12cae:	490b      	ldr	r1, [pc, #44]	; (12cdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12cb0:	9b01      	ldr	r3, [sp, #4]
   12cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   12cb6:	4a0a      	ldr	r2, [pc, #40]	; (12ce0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   12cb8:	9b01      	ldr	r3, [sp, #4]
   12cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cbe:	f003 0301 	and.w	r3, r3, #1
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	d106      	bne.n	12cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   12cc6:	4a05      	ldr	r2, [pc, #20]	; (12cdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12cc8:	9b01      	ldr	r3, [sp, #4]
   12cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d100      	bne.n	12cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12cd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cd4:	bf00      	nop
   12cd6:	b003      	add	sp, #12
   12cd8:	f85d fb04 	ldr.w	pc, [sp], #4
   12cdc:	1fff94d4 	.word	0x1fff94d4
   12ce0:	1fff94d0 	.word	0x1fff94d0

00012ce4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12ce4:	b500      	push	{lr}
   12ce6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ce8:	f7ee fdae 	bl	1848 <Sys_GetCoreID>
   12cec:	4603      	mov	r3, r0
   12cee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   12cf0:	4a10      	ldr	r2, [pc, #64]	; (12d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12cf2:	9b01      	ldr	r3, [sp, #4]
   12cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf8:	2b00      	cmp	r3, #0
   12cfa:	d10d      	bne.n	12d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cfc:	f7ed ff84 	bl	c08 <Adc_schm_read_msr>
   12d00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d02:	9b00      	ldr	r3, [sp, #0]
   12d04:	f003 0301 	and.w	r3, r3, #1
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d100      	bne.n	12d0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   12d0e:	490a      	ldr	r1, [pc, #40]	; (12d38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   12d10:	9b01      	ldr	r3, [sp, #4]
   12d12:	9a00      	ldr	r2, [sp, #0]
   12d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   12d18:	4a06      	ldr	r2, [pc, #24]	; (12d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12d1a:	9b01      	ldr	r3, [sp, #4]
   12d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d20:	1c5a      	adds	r2, r3, #1
   12d22:	4904      	ldr	r1, [pc, #16]	; (12d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12d24:	9b01      	ldr	r3, [sp, #4]
   12d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d2a:	bf00      	nop
   12d2c:	b003      	add	sp, #12
   12d2e:	f85d fb04 	ldr.w	pc, [sp], #4
   12d32:	bf00      	nop
   12d34:	1fff94dc 	.word	0x1fff94dc
   12d38:	1fff94d8 	.word	0x1fff94d8

00012d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12d3c:	b500      	push	{lr}
   12d3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d40:	f7ee fd82 	bl	1848 <Sys_GetCoreID>
   12d44:	4603      	mov	r3, r0
   12d46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   12d48:	4a0d      	ldr	r2, [pc, #52]	; (12d80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d4a:	9b01      	ldr	r3, [sp, #4]
   12d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d50:	1e5a      	subs	r2, r3, #1
   12d52:	490b      	ldr	r1, [pc, #44]	; (12d80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d54:	9b01      	ldr	r3, [sp, #4]
   12d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   12d5a:	4a0a      	ldr	r2, [pc, #40]	; (12d84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   12d5c:	9b01      	ldr	r3, [sp, #4]
   12d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d62:	f003 0301 	and.w	r3, r3, #1
   12d66:	2b00      	cmp	r3, #0
   12d68:	d106      	bne.n	12d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   12d6a:	4a05      	ldr	r2, [pc, #20]	; (12d80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d6c:	9b01      	ldr	r3, [sp, #4]
   12d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d72:	2b00      	cmp	r3, #0
   12d74:	d100      	bne.n	12d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d78:	bf00      	nop
   12d7a:	b003      	add	sp, #12
   12d7c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d80:	1fff94dc 	.word	0x1fff94dc
   12d84:	1fff94d8 	.word	0x1fff94d8

00012d88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12d88:	b500      	push	{lr}
   12d8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d8c:	f7ee fd5c 	bl	1848 <Sys_GetCoreID>
   12d90:	4603      	mov	r3, r0
   12d92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   12d94:	4a10      	ldr	r2, [pc, #64]	; (12dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d96:	9b01      	ldr	r3, [sp, #4]
   12d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	d10d      	bne.n	12dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12da0:	f7ed ff32 	bl	c08 <Adc_schm_read_msr>
   12da4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12da6:	9b00      	ldr	r3, [sp, #0]
   12da8:	f003 0301 	and.w	r3, r3, #1
   12dac:	2b00      	cmp	r3, #0
   12dae:	d100      	bne.n	12db2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12db0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   12db2:	490a      	ldr	r1, [pc, #40]	; (12ddc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   12db4:	9b01      	ldr	r3, [sp, #4]
   12db6:	9a00      	ldr	r2, [sp, #0]
   12db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   12dbc:	4a06      	ldr	r2, [pc, #24]	; (12dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12dbe:	9b01      	ldr	r3, [sp, #4]
   12dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dc4:	1c5a      	adds	r2, r3, #1
   12dc6:	4904      	ldr	r1, [pc, #16]	; (12dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12dc8:	9b01      	ldr	r3, [sp, #4]
   12dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12dce:	bf00      	nop
   12dd0:	b003      	add	sp, #12
   12dd2:	f85d fb04 	ldr.w	pc, [sp], #4
   12dd6:	bf00      	nop
   12dd8:	1fff94e4 	.word	0x1fff94e4
   12ddc:	1fff94e0 	.word	0x1fff94e0

00012de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12de0:	b500      	push	{lr}
   12de2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12de4:	f7ee fd30 	bl	1848 <Sys_GetCoreID>
   12de8:	4603      	mov	r3, r0
   12dea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   12dec:	4a0d      	ldr	r2, [pc, #52]	; (12e24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12dee:	9b01      	ldr	r3, [sp, #4]
   12df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12df4:	1e5a      	subs	r2, r3, #1
   12df6:	490b      	ldr	r1, [pc, #44]	; (12e24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12df8:	9b01      	ldr	r3, [sp, #4]
   12dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   12dfe:	4a0a      	ldr	r2, [pc, #40]	; (12e28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   12e00:	9b01      	ldr	r3, [sp, #4]
   12e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e06:	f003 0301 	and.w	r3, r3, #1
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	d106      	bne.n	12e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   12e0e:	4a05      	ldr	r2, [pc, #20]	; (12e24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12e10:	9b01      	ldr	r3, [sp, #4]
   12e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e16:	2b00      	cmp	r3, #0
   12e18:	d100      	bne.n	12e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e1c:	bf00      	nop
   12e1e:	b003      	add	sp, #12
   12e20:	f85d fb04 	ldr.w	pc, [sp], #4
   12e24:	1fff94e4 	.word	0x1fff94e4
   12e28:	1fff94e0 	.word	0x1fff94e0

00012e2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12e2c:	b500      	push	{lr}
   12e2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e30:	f7ee fd0a 	bl	1848 <Sys_GetCoreID>
   12e34:	4603      	mov	r3, r0
   12e36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   12e38:	4a10      	ldr	r2, [pc, #64]	; (12e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e3a:	9b01      	ldr	r3, [sp, #4]
   12e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e40:	2b00      	cmp	r3, #0
   12e42:	d10d      	bne.n	12e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e44:	f7ed fee0 	bl	c08 <Adc_schm_read_msr>
   12e48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e4a:	9b00      	ldr	r3, [sp, #0]
   12e4c:	f003 0301 	and.w	r3, r3, #1
   12e50:	2b00      	cmp	r3, #0
   12e52:	d100      	bne.n	12e56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   12e56:	490a      	ldr	r1, [pc, #40]	; (12e80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   12e58:	9b01      	ldr	r3, [sp, #4]
   12e5a:	9a00      	ldr	r2, [sp, #0]
   12e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   12e60:	4a06      	ldr	r2, [pc, #24]	; (12e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e62:	9b01      	ldr	r3, [sp, #4]
   12e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e68:	1c5a      	adds	r2, r3, #1
   12e6a:	4904      	ldr	r1, [pc, #16]	; (12e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e6c:	9b01      	ldr	r3, [sp, #4]
   12e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e72:	bf00      	nop
   12e74:	b003      	add	sp, #12
   12e76:	f85d fb04 	ldr.w	pc, [sp], #4
   12e7a:	bf00      	nop
   12e7c:	1fff94ec 	.word	0x1fff94ec
   12e80:	1fff94e8 	.word	0x1fff94e8

00012e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12e84:	b500      	push	{lr}
   12e86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e88:	f7ee fcde 	bl	1848 <Sys_GetCoreID>
   12e8c:	4603      	mov	r3, r0
   12e8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   12e90:	4a0d      	ldr	r2, [pc, #52]	; (12ec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e92:	9b01      	ldr	r3, [sp, #4]
   12e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e98:	1e5a      	subs	r2, r3, #1
   12e9a:	490b      	ldr	r1, [pc, #44]	; (12ec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e9c:	9b01      	ldr	r3, [sp, #4]
   12e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   12ea2:	4a0a      	ldr	r2, [pc, #40]	; (12ecc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eaa:	f003 0301 	and.w	r3, r3, #1
   12eae:	2b00      	cmp	r3, #0
   12eb0:	d106      	bne.n	12ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   12eb2:	4a05      	ldr	r2, [pc, #20]	; (12ec8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12eb4:	9b01      	ldr	r3, [sp, #4]
   12eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eba:	2b00      	cmp	r3, #0
   12ebc:	d100      	bne.n	12ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ebe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ec0:	bf00      	nop
   12ec2:	b003      	add	sp, #12
   12ec4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ec8:	1fff94ec 	.word	0x1fff94ec
   12ecc:	1fff94e8 	.word	0x1fff94e8

00012ed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12ed0:	b500      	push	{lr}
   12ed2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ed4:	f7ee fcb8 	bl	1848 <Sys_GetCoreID>
   12ed8:	4603      	mov	r3, r0
   12eda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   12edc:	4a10      	ldr	r2, [pc, #64]	; (12f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12ede:	9b01      	ldr	r3, [sp, #4]
   12ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d10d      	bne.n	12f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ee8:	f7ed fe8e 	bl	c08 <Adc_schm_read_msr>
   12eec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12eee:	9b00      	ldr	r3, [sp, #0]
   12ef0:	f003 0301 	and.w	r3, r3, #1
   12ef4:	2b00      	cmp	r3, #0
   12ef6:	d100      	bne.n	12efa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ef8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   12efa:	490a      	ldr	r1, [pc, #40]	; (12f24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   12efc:	9b01      	ldr	r3, [sp, #4]
   12efe:	9a00      	ldr	r2, [sp, #0]
   12f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   12f04:	4a06      	ldr	r2, [pc, #24]	; (12f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12f06:	9b01      	ldr	r3, [sp, #4]
   12f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f0c:	1c5a      	adds	r2, r3, #1
   12f0e:	4904      	ldr	r1, [pc, #16]	; (12f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12f10:	9b01      	ldr	r3, [sp, #4]
   12f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f16:	bf00      	nop
   12f18:	b003      	add	sp, #12
   12f1a:	f85d fb04 	ldr.w	pc, [sp], #4
   12f1e:	bf00      	nop
   12f20:	1fff94f4 	.word	0x1fff94f4
   12f24:	1fff94f0 	.word	0x1fff94f0

00012f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12f28:	b500      	push	{lr}
   12f2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f2c:	f7ee fc8c 	bl	1848 <Sys_GetCoreID>
   12f30:	4603      	mov	r3, r0
   12f32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   12f34:	4a0d      	ldr	r2, [pc, #52]	; (12f6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f36:	9b01      	ldr	r3, [sp, #4]
   12f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f3c:	1e5a      	subs	r2, r3, #1
   12f3e:	490b      	ldr	r1, [pc, #44]	; (12f6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f40:	9b01      	ldr	r3, [sp, #4]
   12f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   12f46:	4a0a      	ldr	r2, [pc, #40]	; (12f70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   12f48:	9b01      	ldr	r3, [sp, #4]
   12f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f4e:	f003 0301 	and.w	r3, r3, #1
   12f52:	2b00      	cmp	r3, #0
   12f54:	d106      	bne.n	12f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   12f56:	4a05      	ldr	r2, [pc, #20]	; (12f6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f58:	9b01      	ldr	r3, [sp, #4]
   12f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f5e:	2b00      	cmp	r3, #0
   12f60:	d100      	bne.n	12f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f64:	bf00      	nop
   12f66:	b003      	add	sp, #12
   12f68:	f85d fb04 	ldr.w	pc, [sp], #4
   12f6c:	1fff94f4 	.word	0x1fff94f4
   12f70:	1fff94f0 	.word	0x1fff94f0

00012f74 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12f74:	b500      	push	{lr}
   12f76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f78:	f7ee fc66 	bl	1848 <Sys_GetCoreID>
   12f7c:	4603      	mov	r3, r0
   12f7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   12f80:	4a10      	ldr	r2, [pc, #64]	; (12fc4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f82:	9b01      	ldr	r3, [sp, #4]
   12f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d10d      	bne.n	12fa8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f8c:	f7ed fe45 	bl	c1a <Dio_schm_read_msr>
   12f90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f92:	9b00      	ldr	r3, [sp, #0]
   12f94:	f003 0301 	and.w	r3, r3, #1
   12f98:	2b00      	cmp	r3, #0
   12f9a:	d100      	bne.n	12f9e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   12f9e:	490a      	ldr	r1, [pc, #40]	; (12fc8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   12fa0:	9b01      	ldr	r3, [sp, #4]
   12fa2:	9a00      	ldr	r2, [sp, #0]
   12fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   12fa8:	4a06      	ldr	r2, [pc, #24]	; (12fc4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb0:	1c5a      	adds	r2, r3, #1
   12fb2:	4904      	ldr	r1, [pc, #16]	; (12fc4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12fb4:	9b01      	ldr	r3, [sp, #4]
   12fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12fba:	bf00      	nop
   12fbc:	b003      	add	sp, #12
   12fbe:	f85d fb04 	ldr.w	pc, [sp], #4
   12fc2:	bf00      	nop
   12fc4:	1fff94fc 	.word	0x1fff94fc
   12fc8:	1fff94f8 	.word	0x1fff94f8

00012fcc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12fcc:	b500      	push	{lr}
   12fce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fd0:	f7ee fc3a 	bl	1848 <Sys_GetCoreID>
   12fd4:	4603      	mov	r3, r0
   12fd6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   12fd8:	4a0d      	ldr	r2, [pc, #52]	; (13010 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fda:	9b01      	ldr	r3, [sp, #4]
   12fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fe0:	1e5a      	subs	r2, r3, #1
   12fe2:	490b      	ldr	r1, [pc, #44]	; (13010 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fe4:	9b01      	ldr	r3, [sp, #4]
   12fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   12fea:	4a0a      	ldr	r2, [pc, #40]	; (13014 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   12fec:	9b01      	ldr	r3, [sp, #4]
   12fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ff2:	f003 0301 	and.w	r3, r3, #1
   12ff6:	2b00      	cmp	r3, #0
   12ff8:	d106      	bne.n	13008 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   12ffa:	4a05      	ldr	r2, [pc, #20]	; (13010 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12ffc:	9b01      	ldr	r3, [sp, #4]
   12ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13002:	2b00      	cmp	r3, #0
   13004:	d100      	bne.n	13008 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13006:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13008:	bf00      	nop
   1300a:	b003      	add	sp, #12
   1300c:	f85d fb04 	ldr.w	pc, [sp], #4
   13010:	1fff94fc 	.word	0x1fff94fc
   13014:	1fff94f8 	.word	0x1fff94f8

00013018 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   13018:	b500      	push	{lr}
   1301a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1301c:	f7ee fc14 	bl	1848 <Sys_GetCoreID>
   13020:	4603      	mov	r3, r0
   13022:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   13024:	4a10      	ldr	r2, [pc, #64]	; (13068 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   13026:	9b01      	ldr	r3, [sp, #4]
   13028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1302c:	2b00      	cmp	r3, #0
   1302e:	d10d      	bne.n	1304c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13030:	f7ed fdf3 	bl	c1a <Dio_schm_read_msr>
   13034:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13036:	9b00      	ldr	r3, [sp, #0]
   13038:	f003 0301 	and.w	r3, r3, #1
   1303c:	2b00      	cmp	r3, #0
   1303e:	d100      	bne.n	13042 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13040:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13042:	490a      	ldr	r1, [pc, #40]	; (1306c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   13044:	9b01      	ldr	r3, [sp, #4]
   13046:	9a00      	ldr	r2, [sp, #0]
   13048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   1304c:	4a06      	ldr	r2, [pc, #24]	; (13068 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   1304e:	9b01      	ldr	r3, [sp, #4]
   13050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13054:	1c5a      	adds	r2, r3, #1
   13056:	4904      	ldr	r1, [pc, #16]	; (13068 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   13058:	9b01      	ldr	r3, [sp, #4]
   1305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1305e:	bf00      	nop
   13060:	b003      	add	sp, #12
   13062:	f85d fb04 	ldr.w	pc, [sp], #4
   13066:	bf00      	nop
   13068:	1fff9504 	.word	0x1fff9504
   1306c:	1fff9500 	.word	0x1fff9500

00013070 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   13070:	b500      	push	{lr}
   13072:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13074:	f7ee fbe8 	bl	1848 <Sys_GetCoreID>
   13078:	4603      	mov	r3, r0
   1307a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   1307c:	4a0d      	ldr	r2, [pc, #52]	; (130b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   1307e:	9b01      	ldr	r3, [sp, #4]
   13080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13084:	1e5a      	subs	r2, r3, #1
   13086:	490b      	ldr	r1, [pc, #44]	; (130b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   13088:	9b01      	ldr	r3, [sp, #4]
   1308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1308e:	4a0a      	ldr	r2, [pc, #40]	; (130b8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   13090:	9b01      	ldr	r3, [sp, #4]
   13092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13096:	f003 0301 	and.w	r3, r3, #1
   1309a:	2b00      	cmp	r3, #0
   1309c:	d106      	bne.n	130ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   1309e:	4a05      	ldr	r2, [pc, #20]	; (130b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   130a0:	9b01      	ldr	r3, [sp, #4]
   130a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130a6:	2b00      	cmp	r3, #0
   130a8:	d100      	bne.n	130ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130ac:	bf00      	nop
   130ae:	b003      	add	sp, #12
   130b0:	f85d fb04 	ldr.w	pc, [sp], #4
   130b4:	1fff9504 	.word	0x1fff9504
   130b8:	1fff9500 	.word	0x1fff9500

000130bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   130bc:	b500      	push	{lr}
   130be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130c0:	f7ee fbc2 	bl	1848 <Sys_GetCoreID>
   130c4:	4603      	mov	r3, r0
   130c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   130c8:	4a10      	ldr	r2, [pc, #64]	; (1310c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130ca:	9b01      	ldr	r3, [sp, #4]
   130cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130d0:	2b00      	cmp	r3, #0
   130d2:	d10d      	bne.n	130f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130d4:	f7ed fdaa 	bl	c2c <Mcu_schm_read_msr>
   130d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130da:	9b00      	ldr	r3, [sp, #0]
   130dc:	f003 0301 	and.w	r3, r3, #1
   130e0:	2b00      	cmp	r3, #0
   130e2:	d100      	bne.n	130e6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   130e6:	490a      	ldr	r1, [pc, #40]	; (13110 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   130e8:	9b01      	ldr	r3, [sp, #4]
   130ea:	9a00      	ldr	r2, [sp, #0]
   130ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   130f0:	4a06      	ldr	r2, [pc, #24]	; (1310c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130f2:	9b01      	ldr	r3, [sp, #4]
   130f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130f8:	1c5a      	adds	r2, r3, #1
   130fa:	4904      	ldr	r1, [pc, #16]	; (1310c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130fc:	9b01      	ldr	r3, [sp, #4]
   130fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13102:	bf00      	nop
   13104:	b003      	add	sp, #12
   13106:	f85d fb04 	ldr.w	pc, [sp], #4
   1310a:	bf00      	nop
   1310c:	1fff950c 	.word	0x1fff950c
   13110:	1fff9508 	.word	0x1fff9508

00013114 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   13114:	b500      	push	{lr}
   13116:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13118:	f7ee fb96 	bl	1848 <Sys_GetCoreID>
   1311c:	4603      	mov	r3, r0
   1311e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   13120:	4a0d      	ldr	r2, [pc, #52]	; (13158 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   13122:	9b01      	ldr	r3, [sp, #4]
   13124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13128:	1e5a      	subs	r2, r3, #1
   1312a:	490b      	ldr	r1, [pc, #44]	; (13158 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1312c:	9b01      	ldr	r3, [sp, #4]
   1312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   13132:	4a0a      	ldr	r2, [pc, #40]	; (1315c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   13134:	9b01      	ldr	r3, [sp, #4]
   13136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1313a:	f003 0301 	and.w	r3, r3, #1
   1313e:	2b00      	cmp	r3, #0
   13140:	d106      	bne.n	13150 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   13142:	4a05      	ldr	r2, [pc, #20]	; (13158 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   13144:	9b01      	ldr	r3, [sp, #4]
   13146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1314a:	2b00      	cmp	r3, #0
   1314c:	d100      	bne.n	13150 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1314e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13150:	bf00      	nop
   13152:	b003      	add	sp, #12
   13154:	f85d fb04 	ldr.w	pc, [sp], #4
   13158:	1fff950c 	.word	0x1fff950c
   1315c:	1fff9508 	.word	0x1fff9508

00013160 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   13160:	b500      	push	{lr}
   13162:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13164:	f7ee fb70 	bl	1848 <Sys_GetCoreID>
   13168:	4603      	mov	r3, r0
   1316a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   1316c:	4a10      	ldr	r2, [pc, #64]	; (131b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   1316e:	9b01      	ldr	r3, [sp, #4]
   13170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13174:	2b00      	cmp	r3, #0
   13176:	d10d      	bne.n	13194 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13178:	f7ed fd58 	bl	c2c <Mcu_schm_read_msr>
   1317c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1317e:	9b00      	ldr	r3, [sp, #0]
   13180:	f003 0301 	and.w	r3, r3, #1
   13184:	2b00      	cmp	r3, #0
   13186:	d100      	bne.n	1318a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13188:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1318a:	490a      	ldr	r1, [pc, #40]	; (131b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   1318c:	9b01      	ldr	r3, [sp, #4]
   1318e:	9a00      	ldr	r2, [sp, #0]
   13190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   13194:	4a06      	ldr	r2, [pc, #24]	; (131b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   13196:	9b01      	ldr	r3, [sp, #4]
   13198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1319c:	1c5a      	adds	r2, r3, #1
   1319e:	4904      	ldr	r1, [pc, #16]	; (131b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131a6:	bf00      	nop
   131a8:	b003      	add	sp, #12
   131aa:	f85d fb04 	ldr.w	pc, [sp], #4
   131ae:	bf00      	nop
   131b0:	1fff9514 	.word	0x1fff9514
   131b4:	1fff9510 	.word	0x1fff9510

000131b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   131b8:	b500      	push	{lr}
   131ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131bc:	f7ee fb44 	bl	1848 <Sys_GetCoreID>
   131c0:	4603      	mov	r3, r0
   131c2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   131c4:	4a0d      	ldr	r2, [pc, #52]	; (131fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   131c6:	9b01      	ldr	r3, [sp, #4]
   131c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131cc:	1e5a      	subs	r2, r3, #1
   131ce:	490b      	ldr	r1, [pc, #44]	; (131fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   131d0:	9b01      	ldr	r3, [sp, #4]
   131d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   131d6:	4a0a      	ldr	r2, [pc, #40]	; (13200 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   131d8:	9b01      	ldr	r3, [sp, #4]
   131da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131de:	f003 0301 	and.w	r3, r3, #1
   131e2:	2b00      	cmp	r3, #0
   131e4:	d106      	bne.n	131f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   131e6:	4a05      	ldr	r2, [pc, #20]	; (131fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   131e8:	9b01      	ldr	r3, [sp, #4]
   131ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ee:	2b00      	cmp	r3, #0
   131f0:	d100      	bne.n	131f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131f4:	bf00      	nop
   131f6:	b003      	add	sp, #12
   131f8:	f85d fb04 	ldr.w	pc, [sp], #4
   131fc:	1fff9514 	.word	0x1fff9514
   13200:	1fff9510 	.word	0x1fff9510

00013204 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   13204:	b500      	push	{lr}
   13206:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13208:	f7ee fb1e 	bl	1848 <Sys_GetCoreID>
   1320c:	4603      	mov	r3, r0
   1320e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   13210:	4a10      	ldr	r2, [pc, #64]	; (13254 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   13212:	9b01      	ldr	r3, [sp, #4]
   13214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13218:	2b00      	cmp	r3, #0
   1321a:	d10d      	bne.n	13238 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1321c:	f7ed fd06 	bl	c2c <Mcu_schm_read_msr>
   13220:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13222:	9b00      	ldr	r3, [sp, #0]
   13224:	f003 0301 	and.w	r3, r3, #1
   13228:	2b00      	cmp	r3, #0
   1322a:	d100      	bne.n	1322e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1322c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   1322e:	490a      	ldr	r1, [pc, #40]	; (13258 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   13230:	9b01      	ldr	r3, [sp, #4]
   13232:	9a00      	ldr	r2, [sp, #0]
   13234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   13238:	4a06      	ldr	r2, [pc, #24]	; (13254 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1323a:	9b01      	ldr	r3, [sp, #4]
   1323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13240:	1c5a      	adds	r2, r3, #1
   13242:	4904      	ldr	r1, [pc, #16]	; (13254 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   13244:	9b01      	ldr	r3, [sp, #4]
   13246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1324a:	bf00      	nop
   1324c:	b003      	add	sp, #12
   1324e:	f85d fb04 	ldr.w	pc, [sp], #4
   13252:	bf00      	nop
   13254:	1fff951c 	.word	0x1fff951c
   13258:	1fff9518 	.word	0x1fff9518

0001325c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   1325c:	b500      	push	{lr}
   1325e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13260:	f7ee faf2 	bl	1848 <Sys_GetCoreID>
   13264:	4603      	mov	r3, r0
   13266:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   13268:	4a0d      	ldr	r2, [pc, #52]	; (132a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1326a:	9b01      	ldr	r3, [sp, #4]
   1326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13270:	1e5a      	subs	r2, r3, #1
   13272:	490b      	ldr	r1, [pc, #44]	; (132a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   13274:	9b01      	ldr	r3, [sp, #4]
   13276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1327a:	4a0a      	ldr	r2, [pc, #40]	; (132a4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   1327c:	9b01      	ldr	r3, [sp, #4]
   1327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13282:	f003 0301 	and.w	r3, r3, #1
   13286:	2b00      	cmp	r3, #0
   13288:	d106      	bne.n	13298 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   1328a:	4a05      	ldr	r2, [pc, #20]	; (132a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1328c:	9b01      	ldr	r3, [sp, #4]
   1328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13292:	2b00      	cmp	r3, #0
   13294:	d100      	bne.n	13298 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13296:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13298:	bf00      	nop
   1329a:	b003      	add	sp, #12
   1329c:	f85d fb04 	ldr.w	pc, [sp], #4
   132a0:	1fff951c 	.word	0x1fff951c
   132a4:	1fff9518 	.word	0x1fff9518

000132a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   132a8:	b500      	push	{lr}
   132aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132ac:	f7ee facc 	bl	1848 <Sys_GetCoreID>
   132b0:	4603      	mov	r3, r0
   132b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   132b4:	4a10      	ldr	r2, [pc, #64]	; (132f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   132b6:	9b01      	ldr	r3, [sp, #4]
   132b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132bc:	2b00      	cmp	r3, #0
   132be:	d10d      	bne.n	132dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132c0:	f7ed fcbd 	bl	c3e <Port_schm_read_msr>
   132c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132c6:	9b00      	ldr	r3, [sp, #0]
   132c8:	f003 0301 	and.w	r3, r3, #1
   132cc:	2b00      	cmp	r3, #0
   132ce:	d100      	bne.n	132d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   132d2:	490a      	ldr	r1, [pc, #40]	; (132fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   132d4:	9b01      	ldr	r3, [sp, #4]
   132d6:	9a00      	ldr	r2, [sp, #0]
   132d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   132dc:	4a06      	ldr	r2, [pc, #24]	; (132f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   132de:	9b01      	ldr	r3, [sp, #4]
   132e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132e4:	1c5a      	adds	r2, r3, #1
   132e6:	4904      	ldr	r1, [pc, #16]	; (132f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   132e8:	9b01      	ldr	r3, [sp, #4]
   132ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132ee:	bf00      	nop
   132f0:	b003      	add	sp, #12
   132f2:	f85d fb04 	ldr.w	pc, [sp], #4
   132f6:	bf00      	nop
   132f8:	1fff9524 	.word	0x1fff9524
   132fc:	1fff9520 	.word	0x1fff9520

00013300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   13300:	b500      	push	{lr}
   13302:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13304:	f7ee faa0 	bl	1848 <Sys_GetCoreID>
   13308:	4603      	mov	r3, r0
   1330a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   1330c:	4a0d      	ldr	r2, [pc, #52]	; (13344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   1330e:	9b01      	ldr	r3, [sp, #4]
   13310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13314:	1e5a      	subs	r2, r3, #1
   13316:	490b      	ldr	r1, [pc, #44]	; (13344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   13318:	9b01      	ldr	r3, [sp, #4]
   1331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1331e:	4a0a      	ldr	r2, [pc, #40]	; (13348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   13320:	9b01      	ldr	r3, [sp, #4]
   13322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13326:	f003 0301 	and.w	r3, r3, #1
   1332a:	2b00      	cmp	r3, #0
   1332c:	d106      	bne.n	1333c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   1332e:	4a05      	ldr	r2, [pc, #20]	; (13344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   13330:	9b01      	ldr	r3, [sp, #4]
   13332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13336:	2b00      	cmp	r3, #0
   13338:	d100      	bne.n	1333c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1333a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1333c:	bf00      	nop
   1333e:	b003      	add	sp, #12
   13340:	f85d fb04 	ldr.w	pc, [sp], #4
   13344:	1fff9524 	.word	0x1fff9524
   13348:	1fff9520 	.word	0x1fff9520

0001334c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   1334c:	b500      	push	{lr}
   1334e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13350:	f7ee fa7a 	bl	1848 <Sys_GetCoreID>
   13354:	4603      	mov	r3, r0
   13356:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   13358:	4a10      	ldr	r2, [pc, #64]	; (1339c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1335a:	9b01      	ldr	r3, [sp, #4]
   1335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13360:	2b00      	cmp	r3, #0
   13362:	d10d      	bne.n	13380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13364:	f7ed fc6b 	bl	c3e <Port_schm_read_msr>
   13368:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1336a:	9b00      	ldr	r3, [sp, #0]
   1336c:	f003 0301 	and.w	r3, r3, #1
   13370:	2b00      	cmp	r3, #0
   13372:	d100      	bne.n	13376 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13374:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13376:	490a      	ldr	r1, [pc, #40]	; (133a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   13378:	9b01      	ldr	r3, [sp, #4]
   1337a:	9a00      	ldr	r2, [sp, #0]
   1337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   13380:	4a06      	ldr	r2, [pc, #24]	; (1339c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   13382:	9b01      	ldr	r3, [sp, #4]
   13384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13388:	1c5a      	adds	r2, r3, #1
   1338a:	4904      	ldr	r1, [pc, #16]	; (1339c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1338c:	9b01      	ldr	r3, [sp, #4]
   1338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13392:	bf00      	nop
   13394:	b003      	add	sp, #12
   13396:	f85d fb04 	ldr.w	pc, [sp], #4
   1339a:	bf00      	nop
   1339c:	1fff952c 	.word	0x1fff952c
   133a0:	1fff9528 	.word	0x1fff9528

000133a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   133a4:	b500      	push	{lr}
   133a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133a8:	f7ee fa4e 	bl	1848 <Sys_GetCoreID>
   133ac:	4603      	mov	r3, r0
   133ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   133b0:	4a0d      	ldr	r2, [pc, #52]	; (133e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   133b2:	9b01      	ldr	r3, [sp, #4]
   133b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133b8:	1e5a      	subs	r2, r3, #1
   133ba:	490b      	ldr	r1, [pc, #44]	; (133e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   133bc:	9b01      	ldr	r3, [sp, #4]
   133be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   133c2:	4a0a      	ldr	r2, [pc, #40]	; (133ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ca:	f003 0301 	and.w	r3, r3, #1
   133ce:	2b00      	cmp	r3, #0
   133d0:	d106      	bne.n	133e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   133d2:	4a05      	ldr	r2, [pc, #20]	; (133e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   133d4:	9b01      	ldr	r3, [sp, #4]
   133d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133da:	2b00      	cmp	r3, #0
   133dc:	d100      	bne.n	133e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133e0:	bf00      	nop
   133e2:	b003      	add	sp, #12
   133e4:	f85d fb04 	ldr.w	pc, [sp], #4
   133e8:	1fff952c 	.word	0x1fff952c
   133ec:	1fff9528 	.word	0x1fff9528

000133f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   133f0:	b500      	push	{lr}
   133f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133f4:	f7ee fa28 	bl	1848 <Sys_GetCoreID>
   133f8:	4603      	mov	r3, r0
   133fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   133fc:	4a10      	ldr	r2, [pc, #64]	; (13440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133fe:	9b01      	ldr	r3, [sp, #4]
   13400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13404:	2b00      	cmp	r3, #0
   13406:	d10d      	bne.n	13424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13408:	f7ed fc19 	bl	c3e <Port_schm_read_msr>
   1340c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1340e:	9b00      	ldr	r3, [sp, #0]
   13410:	f003 0301 	and.w	r3, r3, #1
   13414:	2b00      	cmp	r3, #0
   13416:	d100      	bne.n	1341a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13418:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   1341a:	490a      	ldr	r1, [pc, #40]	; (13444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   1341c:	9b01      	ldr	r3, [sp, #4]
   1341e:	9a00      	ldr	r2, [sp, #0]
   13420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   13424:	4a06      	ldr	r2, [pc, #24]	; (13440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   13426:	9b01      	ldr	r3, [sp, #4]
   13428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1342c:	1c5a      	adds	r2, r3, #1
   1342e:	4904      	ldr	r1, [pc, #16]	; (13440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   13430:	9b01      	ldr	r3, [sp, #4]
   13432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13436:	bf00      	nop
   13438:	b003      	add	sp, #12
   1343a:	f85d fb04 	ldr.w	pc, [sp], #4
   1343e:	bf00      	nop
   13440:	1fff9534 	.word	0x1fff9534
   13444:	1fff9530 	.word	0x1fff9530

00013448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   13448:	b500      	push	{lr}
   1344a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1344c:	f7ee f9fc 	bl	1848 <Sys_GetCoreID>
   13450:	4603      	mov	r3, r0
   13452:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   13454:	4a0d      	ldr	r2, [pc, #52]	; (1348c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13456:	9b01      	ldr	r3, [sp, #4]
   13458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1345c:	1e5a      	subs	r2, r3, #1
   1345e:	490b      	ldr	r1, [pc, #44]	; (1348c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13460:	9b01      	ldr	r3, [sp, #4]
   13462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13466:	4a0a      	ldr	r2, [pc, #40]	; (13490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   13468:	9b01      	ldr	r3, [sp, #4]
   1346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1346e:	f003 0301 	and.w	r3, r3, #1
   13472:	2b00      	cmp	r3, #0
   13474:	d106      	bne.n	13484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   13476:	4a05      	ldr	r2, [pc, #20]	; (1348c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13478:	9b01      	ldr	r3, [sp, #4]
   1347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1347e:	2b00      	cmp	r3, #0
   13480:	d100      	bne.n	13484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13482:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13484:	bf00      	nop
   13486:	b003      	add	sp, #12
   13488:	f85d fb04 	ldr.w	pc, [sp], #4
   1348c:	1fff9534 	.word	0x1fff9534
   13490:	1fff9530 	.word	0x1fff9530

00013494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   13494:	b500      	push	{lr}
   13496:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13498:	f7ee f9d6 	bl	1848 <Sys_GetCoreID>
   1349c:	4603      	mov	r3, r0
   1349e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   134a0:	4a10      	ldr	r2, [pc, #64]	; (134e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   134a2:	9b01      	ldr	r3, [sp, #4]
   134a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a8:	2b00      	cmp	r3, #0
   134aa:	d10d      	bne.n	134c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134ac:	f7ed fbc7 	bl	c3e <Port_schm_read_msr>
   134b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134b2:	9b00      	ldr	r3, [sp, #0]
   134b4:	f003 0301 	and.w	r3, r3, #1
   134b8:	2b00      	cmp	r3, #0
   134ba:	d100      	bne.n	134be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   134be:	490a      	ldr	r1, [pc, #40]	; (134e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   134c0:	9b01      	ldr	r3, [sp, #4]
   134c2:	9a00      	ldr	r2, [sp, #0]
   134c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   134c8:	4a06      	ldr	r2, [pc, #24]	; (134e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   134ca:	9b01      	ldr	r3, [sp, #4]
   134cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d0:	1c5a      	adds	r2, r3, #1
   134d2:	4904      	ldr	r1, [pc, #16]	; (134e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   134d4:	9b01      	ldr	r3, [sp, #4]
   134d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134da:	bf00      	nop
   134dc:	b003      	add	sp, #12
   134de:	f85d fb04 	ldr.w	pc, [sp], #4
   134e2:	bf00      	nop
   134e4:	1fff953c 	.word	0x1fff953c
   134e8:	1fff9538 	.word	0x1fff9538

000134ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   134ec:	b500      	push	{lr}
   134ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134f0:	f7ee f9aa 	bl	1848 <Sys_GetCoreID>
   134f4:	4603      	mov	r3, r0
   134f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   134f8:	4a0d      	ldr	r2, [pc, #52]	; (13530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134fa:	9b01      	ldr	r3, [sp, #4]
   134fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13500:	1e5a      	subs	r2, r3, #1
   13502:	490b      	ldr	r1, [pc, #44]	; (13530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   13504:	9b01      	ldr	r3, [sp, #4]
   13506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   1350a:	4a0a      	ldr	r2, [pc, #40]	; (13534 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   1350c:	9b01      	ldr	r3, [sp, #4]
   1350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13512:	f003 0301 	and.w	r3, r3, #1
   13516:	2b00      	cmp	r3, #0
   13518:	d106      	bne.n	13528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   1351a:	4a05      	ldr	r2, [pc, #20]	; (13530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   1351c:	9b01      	ldr	r3, [sp, #4]
   1351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13522:	2b00      	cmp	r3, #0
   13524:	d100      	bne.n	13528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13526:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13528:	bf00      	nop
   1352a:	b003      	add	sp, #12
   1352c:	f85d fb04 	ldr.w	pc, [sp], #4
   13530:	1fff953c 	.word	0x1fff953c
   13534:	1fff9538 	.word	0x1fff9538

00013538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   13538:	b500      	push	{lr}
   1353a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1353c:	f7ee f984 	bl	1848 <Sys_GetCoreID>
   13540:	4603      	mov	r3, r0
   13542:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   13544:	4a10      	ldr	r2, [pc, #64]	; (13588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13546:	9b01      	ldr	r3, [sp, #4]
   13548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1354c:	2b00      	cmp	r3, #0
   1354e:	d10d      	bne.n	1356c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13550:	f7ed fb75 	bl	c3e <Port_schm_read_msr>
   13554:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13556:	9b00      	ldr	r3, [sp, #0]
   13558:	f003 0301 	and.w	r3, r3, #1
   1355c:	2b00      	cmp	r3, #0
   1355e:	d100      	bne.n	13562 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13560:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13562:	490a      	ldr	r1, [pc, #40]	; (1358c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   13564:	9b01      	ldr	r3, [sp, #4]
   13566:	9a00      	ldr	r2, [sp, #0]
   13568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   1356c:	4a06      	ldr	r2, [pc, #24]	; (13588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   1356e:	9b01      	ldr	r3, [sp, #4]
   13570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13574:	1c5a      	adds	r2, r3, #1
   13576:	4904      	ldr	r1, [pc, #16]	; (13588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13578:	9b01      	ldr	r3, [sp, #4]
   1357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1357e:	bf00      	nop
   13580:	b003      	add	sp, #12
   13582:	f85d fb04 	ldr.w	pc, [sp], #4
   13586:	bf00      	nop
   13588:	1fff9544 	.word	0x1fff9544
   1358c:	1fff9540 	.word	0x1fff9540

00013590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   13590:	b500      	push	{lr}
   13592:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13594:	f7ee f958 	bl	1848 <Sys_GetCoreID>
   13598:	4603      	mov	r3, r0
   1359a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   1359c:	4a0d      	ldr	r2, [pc, #52]	; (135d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   1359e:	9b01      	ldr	r3, [sp, #4]
   135a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135a4:	1e5a      	subs	r2, r3, #1
   135a6:	490b      	ldr	r1, [pc, #44]	; (135d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   135a8:	9b01      	ldr	r3, [sp, #4]
   135aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   135ae:	4a0a      	ldr	r2, [pc, #40]	; (135d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   135b0:	9b01      	ldr	r3, [sp, #4]
   135b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b6:	f003 0301 	and.w	r3, r3, #1
   135ba:	2b00      	cmp	r3, #0
   135bc:	d106      	bne.n	135cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   135be:	4a05      	ldr	r2, [pc, #20]	; (135d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   135c0:	9b01      	ldr	r3, [sp, #4]
   135c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135c6:	2b00      	cmp	r3, #0
   135c8:	d100      	bne.n	135cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135cc:	bf00      	nop
   135ce:	b003      	add	sp, #12
   135d0:	f85d fb04 	ldr.w	pc, [sp], #4
   135d4:	1fff9544 	.word	0x1fff9544
   135d8:	1fff9540 	.word	0x1fff9540

000135dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   135dc:	b500      	push	{lr}
   135de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135e0:	f7ee f932 	bl	1848 <Sys_GetCoreID>
   135e4:	4603      	mov	r3, r0
   135e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   135e8:	4a10      	ldr	r2, [pc, #64]	; (1362c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135ea:	9b01      	ldr	r3, [sp, #4]
   135ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135f0:	2b00      	cmp	r3, #0
   135f2:	d10d      	bne.n	13610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135f4:	f7ed fb23 	bl	c3e <Port_schm_read_msr>
   135f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135fa:	9b00      	ldr	r3, [sp, #0]
   135fc:	f003 0301 	and.w	r3, r3, #1
   13600:	2b00      	cmp	r3, #0
   13602:	d100      	bne.n	13606 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13604:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   13606:	490a      	ldr	r1, [pc, #40]	; (13630 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   13608:	9b01      	ldr	r3, [sp, #4]
   1360a:	9a00      	ldr	r2, [sp, #0]
   1360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   13610:	4a06      	ldr	r2, [pc, #24]	; (1362c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   13612:	9b01      	ldr	r3, [sp, #4]
   13614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13618:	1c5a      	adds	r2, r3, #1
   1361a:	4904      	ldr	r1, [pc, #16]	; (1362c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   1361c:	9b01      	ldr	r3, [sp, #4]
   1361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13622:	bf00      	nop
   13624:	b003      	add	sp, #12
   13626:	f85d fb04 	ldr.w	pc, [sp], #4
   1362a:	bf00      	nop
   1362c:	1fff954c 	.word	0x1fff954c
   13630:	1fff9548 	.word	0x1fff9548

00013634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   13634:	b500      	push	{lr}
   13636:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13638:	f7ee f906 	bl	1848 <Sys_GetCoreID>
   1363c:	4603      	mov	r3, r0
   1363e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   13640:	4a0d      	ldr	r2, [pc, #52]	; (13678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   13642:	9b01      	ldr	r3, [sp, #4]
   13644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13648:	1e5a      	subs	r2, r3, #1
   1364a:	490b      	ldr	r1, [pc, #44]	; (13678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1364c:	9b01      	ldr	r3, [sp, #4]
   1364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   13652:	4a0a      	ldr	r2, [pc, #40]	; (1367c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   13654:	9b01      	ldr	r3, [sp, #4]
   13656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1365a:	f003 0301 	and.w	r3, r3, #1
   1365e:	2b00      	cmp	r3, #0
   13660:	d106      	bne.n	13670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   13662:	4a05      	ldr	r2, [pc, #20]	; (13678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   13664:	9b01      	ldr	r3, [sp, #4]
   13666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1366a:	2b00      	cmp	r3, #0
   1366c:	d100      	bne.n	13670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1366e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13670:	bf00      	nop
   13672:	b003      	add	sp, #12
   13674:	f85d fb04 	ldr.w	pc, [sp], #4
   13678:	1fff954c 	.word	0x1fff954c
   1367c:	1fff9548 	.word	0x1fff9548

00013680 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   13680:	b500      	push	{lr}
   13682:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13684:	f7ee f8e0 	bl	1848 <Sys_GetCoreID>
   13688:	4603      	mov	r3, r0
   1368a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   1368c:	4a10      	ldr	r2, [pc, #64]	; (136d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1368e:	9b01      	ldr	r3, [sp, #4]
   13690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13694:	2b00      	cmp	r3, #0
   13696:	d10d      	bne.n	136b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13698:	f7ed fad1 	bl	c3e <Port_schm_read_msr>
   1369c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1369e:	9b00      	ldr	r3, [sp, #0]
   136a0:	f003 0301 	and.w	r3, r3, #1
   136a4:	2b00      	cmp	r3, #0
   136a6:	d100      	bne.n	136aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   136aa:	490a      	ldr	r1, [pc, #40]	; (136d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   136ac:	9b01      	ldr	r3, [sp, #4]
   136ae:	9a00      	ldr	r2, [sp, #0]
   136b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   136b4:	4a06      	ldr	r2, [pc, #24]	; (136d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   136b6:	9b01      	ldr	r3, [sp, #4]
   136b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136bc:	1c5a      	adds	r2, r3, #1
   136be:	4904      	ldr	r1, [pc, #16]	; (136d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   136c0:	9b01      	ldr	r3, [sp, #4]
   136c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136c6:	bf00      	nop
   136c8:	b003      	add	sp, #12
   136ca:	f85d fb04 	ldr.w	pc, [sp], #4
   136ce:	bf00      	nop
   136d0:	1fff9554 	.word	0x1fff9554
   136d4:	1fff9550 	.word	0x1fff9550

000136d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   136d8:	b500      	push	{lr}
   136da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136dc:	f7ee f8b4 	bl	1848 <Sys_GetCoreID>
   136e0:	4603      	mov	r3, r0
   136e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   136e4:	4a0d      	ldr	r2, [pc, #52]	; (1371c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136e6:	9b01      	ldr	r3, [sp, #4]
   136e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ec:	1e5a      	subs	r2, r3, #1
   136ee:	490b      	ldr	r1, [pc, #44]	; (1371c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136f0:	9b01      	ldr	r3, [sp, #4]
   136f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   136f6:	4a0a      	ldr	r2, [pc, #40]	; (13720 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   136f8:	9b01      	ldr	r3, [sp, #4]
   136fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136fe:	f003 0301 	and.w	r3, r3, #1
   13702:	2b00      	cmp	r3, #0
   13704:	d106      	bne.n	13714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   13706:	4a05      	ldr	r2, [pc, #20]	; (1371c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   13708:	9b01      	ldr	r3, [sp, #4]
   1370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1370e:	2b00      	cmp	r3, #0
   13710:	d100      	bne.n	13714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13712:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13714:	bf00      	nop
   13716:	b003      	add	sp, #12
   13718:	f85d fb04 	ldr.w	pc, [sp], #4
   1371c:	1fff9554 	.word	0x1fff9554
   13720:	1fff9550 	.word	0x1fff9550

00013724 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   13724:	b500      	push	{lr}
   13726:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13728:	f7ee f88e 	bl	1848 <Sys_GetCoreID>
   1372c:	4603      	mov	r3, r0
   1372e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   13730:	4a10      	ldr	r2, [pc, #64]	; (13774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   13732:	9b01      	ldr	r3, [sp, #4]
   13734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13738:	2b00      	cmp	r3, #0
   1373a:	d10d      	bne.n	13758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1373c:	f7ed fa7f 	bl	c3e <Port_schm_read_msr>
   13740:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13742:	9b00      	ldr	r3, [sp, #0]
   13744:	f003 0301 	and.w	r3, r3, #1
   13748:	2b00      	cmp	r3, #0
   1374a:	d100      	bne.n	1374e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1374c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1374e:	490a      	ldr	r1, [pc, #40]	; (13778 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   13750:	9b01      	ldr	r3, [sp, #4]
   13752:	9a00      	ldr	r2, [sp, #0]
   13754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   13758:	4a06      	ldr	r2, [pc, #24]	; (13774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1375a:	9b01      	ldr	r3, [sp, #4]
   1375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13760:	1c5a      	adds	r2, r3, #1
   13762:	4904      	ldr	r1, [pc, #16]	; (13774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1376a:	bf00      	nop
   1376c:	b003      	add	sp, #12
   1376e:	f85d fb04 	ldr.w	pc, [sp], #4
   13772:	bf00      	nop
   13774:	1fff955c 	.word	0x1fff955c
   13778:	1fff9558 	.word	0x1fff9558

0001377c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   1377c:	b500      	push	{lr}
   1377e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13780:	f7ee f862 	bl	1848 <Sys_GetCoreID>
   13784:	4603      	mov	r3, r0
   13786:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   13788:	4a0d      	ldr	r2, [pc, #52]	; (137c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1378a:	9b01      	ldr	r3, [sp, #4]
   1378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13790:	1e5a      	subs	r2, r3, #1
   13792:	490b      	ldr	r1, [pc, #44]	; (137c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   13794:	9b01      	ldr	r3, [sp, #4]
   13796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1379a:	4a0a      	ldr	r2, [pc, #40]	; (137c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   1379c:	9b01      	ldr	r3, [sp, #4]
   1379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137a2:	f003 0301 	and.w	r3, r3, #1
   137a6:	2b00      	cmp	r3, #0
   137a8:	d106      	bne.n	137b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   137aa:	4a05      	ldr	r2, [pc, #20]	; (137c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   137ac:	9b01      	ldr	r3, [sp, #4]
   137ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137b2:	2b00      	cmp	r3, #0
   137b4:	d100      	bne.n	137b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137b8:	bf00      	nop
   137ba:	b003      	add	sp, #12
   137bc:	f85d fb04 	ldr.w	pc, [sp], #4
   137c0:	1fff955c 	.word	0x1fff955c
   137c4:	1fff9558 	.word	0x1fff9558

000137c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   137c8:	b500      	push	{lr}
   137ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137cc:	f7ee f83c 	bl	1848 <Sys_GetCoreID>
   137d0:	4603      	mov	r3, r0
   137d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   137d4:	4a10      	ldr	r2, [pc, #64]	; (13818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   137d6:	9b01      	ldr	r3, [sp, #4]
   137d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137dc:	2b00      	cmp	r3, #0
   137de:	d10d      	bne.n	137fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137e0:	f7ed fa2d 	bl	c3e <Port_schm_read_msr>
   137e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137e6:	9b00      	ldr	r3, [sp, #0]
   137e8:	f003 0301 	and.w	r3, r3, #1
   137ec:	2b00      	cmp	r3, #0
   137ee:	d100      	bne.n	137f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   137f2:	490a      	ldr	r1, [pc, #40]	; (1381c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   137f4:	9b01      	ldr	r3, [sp, #4]
   137f6:	9a00      	ldr	r2, [sp, #0]
   137f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   137fc:	4a06      	ldr	r2, [pc, #24]	; (13818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   137fe:	9b01      	ldr	r3, [sp, #4]
   13800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13804:	1c5a      	adds	r2, r3, #1
   13806:	4904      	ldr	r1, [pc, #16]	; (13818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   13808:	9b01      	ldr	r3, [sp, #4]
   1380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1380e:	bf00      	nop
   13810:	b003      	add	sp, #12
   13812:	f85d fb04 	ldr.w	pc, [sp], #4
   13816:	bf00      	nop
   13818:	1fff9564 	.word	0x1fff9564
   1381c:	1fff9560 	.word	0x1fff9560

00013820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   13820:	b500      	push	{lr}
   13822:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13824:	f7ee f810 	bl	1848 <Sys_GetCoreID>
   13828:	4603      	mov	r3, r0
   1382a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   1382c:	4a0d      	ldr	r2, [pc, #52]	; (13864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   1382e:	9b01      	ldr	r3, [sp, #4]
   13830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13834:	1e5a      	subs	r2, r3, #1
   13836:	490b      	ldr	r1, [pc, #44]	; (13864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   13838:	9b01      	ldr	r3, [sp, #4]
   1383a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   1383e:	4a0a      	ldr	r2, [pc, #40]	; (13868 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   13840:	9b01      	ldr	r3, [sp, #4]
   13842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13846:	f003 0301 	and.w	r3, r3, #1
   1384a:	2b00      	cmp	r3, #0
   1384c:	d106      	bne.n	1385c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   1384e:	4a05      	ldr	r2, [pc, #20]	; (13864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   13850:	9b01      	ldr	r3, [sp, #4]
   13852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13856:	2b00      	cmp	r3, #0
   13858:	d100      	bne.n	1385c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1385a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1385c:	bf00      	nop
   1385e:	b003      	add	sp, #12
   13860:	f85d fb04 	ldr.w	pc, [sp], #4
   13864:	1fff9564 	.word	0x1fff9564
   13868:	1fff9560 	.word	0x1fff9560

0001386c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   1386c:	b500      	push	{lr}
   1386e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13870:	f7ed ffea 	bl	1848 <Sys_GetCoreID>
   13874:	4603      	mov	r3, r0
   13876:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   13878:	4a10      	ldr	r2, [pc, #64]	; (138bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1387a:	9b01      	ldr	r3, [sp, #4]
   1387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13880:	2b00      	cmp	r3, #0
   13882:	d10d      	bne.n	138a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13884:	f7ed f9db 	bl	c3e <Port_schm_read_msr>
   13888:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1388a:	9b00      	ldr	r3, [sp, #0]
   1388c:	f003 0301 	and.w	r3, r3, #1
   13890:	2b00      	cmp	r3, #0
   13892:	d100      	bne.n	13896 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13894:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   13896:	490a      	ldr	r1, [pc, #40]	; (138c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   13898:	9b01      	ldr	r3, [sp, #4]
   1389a:	9a00      	ldr	r2, [sp, #0]
   1389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   138a0:	4a06      	ldr	r2, [pc, #24]	; (138bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   138a2:	9b01      	ldr	r3, [sp, #4]
   138a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138a8:	1c5a      	adds	r2, r3, #1
   138aa:	4904      	ldr	r1, [pc, #16]	; (138bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   138ac:	9b01      	ldr	r3, [sp, #4]
   138ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138b2:	bf00      	nop
   138b4:	b003      	add	sp, #12
   138b6:	f85d fb04 	ldr.w	pc, [sp], #4
   138ba:	bf00      	nop
   138bc:	1fff956c 	.word	0x1fff956c
   138c0:	1fff9568 	.word	0x1fff9568

000138c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   138c4:	b500      	push	{lr}
   138c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138c8:	f7ed ffbe 	bl	1848 <Sys_GetCoreID>
   138cc:	4603      	mov	r3, r0
   138ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   138d0:	4a0d      	ldr	r2, [pc, #52]	; (13908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   138d2:	9b01      	ldr	r3, [sp, #4]
   138d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138d8:	1e5a      	subs	r2, r3, #1
   138da:	490b      	ldr	r1, [pc, #44]	; (13908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   138dc:	9b01      	ldr	r3, [sp, #4]
   138de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   138e2:	4a0a      	ldr	r2, [pc, #40]	; (1390c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   138e4:	9b01      	ldr	r3, [sp, #4]
   138e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ea:	f003 0301 	and.w	r3, r3, #1
   138ee:	2b00      	cmp	r3, #0
   138f0:	d106      	bne.n	13900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   138f2:	4a05      	ldr	r2, [pc, #20]	; (13908 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   138f4:	9b01      	ldr	r3, [sp, #4]
   138f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138fa:	2b00      	cmp	r3, #0
   138fc:	d100      	bne.n	13900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13900:	bf00      	nop
   13902:	b003      	add	sp, #12
   13904:	f85d fb04 	ldr.w	pc, [sp], #4
   13908:	1fff956c 	.word	0x1fff956c
   1390c:	1fff9568 	.word	0x1fff9568

00013910 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   13910:	b500      	push	{lr}
   13912:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13914:	f7ed ff98 	bl	1848 <Sys_GetCoreID>
   13918:	4603      	mov	r3, r0
   1391a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   1391c:	4a10      	ldr	r2, [pc, #64]	; (13960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1391e:	9b01      	ldr	r3, [sp, #4]
   13920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13924:	2b00      	cmp	r3, #0
   13926:	d10d      	bne.n	13944 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13928:	f7ed f989 	bl	c3e <Port_schm_read_msr>
   1392c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1392e:	9b00      	ldr	r3, [sp, #0]
   13930:	f003 0301 	and.w	r3, r3, #1
   13934:	2b00      	cmp	r3, #0
   13936:	d100      	bne.n	1393a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13938:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   1393a:	490a      	ldr	r1, [pc, #40]	; (13964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   1393c:	9b01      	ldr	r3, [sp, #4]
   1393e:	9a00      	ldr	r2, [sp, #0]
   13940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   13944:	4a06      	ldr	r2, [pc, #24]	; (13960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   13946:	9b01      	ldr	r3, [sp, #4]
   13948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1394c:	1c5a      	adds	r2, r3, #1
   1394e:	4904      	ldr	r1, [pc, #16]	; (13960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   13950:	9b01      	ldr	r3, [sp, #4]
   13952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13956:	bf00      	nop
   13958:	b003      	add	sp, #12
   1395a:	f85d fb04 	ldr.w	pc, [sp], #4
   1395e:	bf00      	nop
   13960:	1fff9574 	.word	0x1fff9574
   13964:	1fff9570 	.word	0x1fff9570

00013968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   13968:	b500      	push	{lr}
   1396a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1396c:	f7ed ff6c 	bl	1848 <Sys_GetCoreID>
   13970:	4603      	mov	r3, r0
   13972:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   13974:	4a0d      	ldr	r2, [pc, #52]	; (139ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13976:	9b01      	ldr	r3, [sp, #4]
   13978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1397c:	1e5a      	subs	r2, r3, #1
   1397e:	490b      	ldr	r1, [pc, #44]	; (139ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13980:	9b01      	ldr	r3, [sp, #4]
   13982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   13986:	4a0a      	ldr	r2, [pc, #40]	; (139b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   13988:	9b01      	ldr	r3, [sp, #4]
   1398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1398e:	f003 0301 	and.w	r3, r3, #1
   13992:	2b00      	cmp	r3, #0
   13994:	d106      	bne.n	139a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   13996:	4a05      	ldr	r2, [pc, #20]	; (139ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13998:	9b01      	ldr	r3, [sp, #4]
   1399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1399e:	2b00      	cmp	r3, #0
   139a0:	d100      	bne.n	139a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139a4:	bf00      	nop
   139a6:	b003      	add	sp, #12
   139a8:	f85d fb04 	ldr.w	pc, [sp], #4
   139ac:	1fff9574 	.word	0x1fff9574
   139b0:	1fff9570 	.word	0x1fff9570

000139b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   139b4:	b500      	push	{lr}
   139b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139b8:	f7ed ff46 	bl	1848 <Sys_GetCoreID>
   139bc:	4603      	mov	r3, r0
   139be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   139c0:	4a10      	ldr	r2, [pc, #64]	; (13a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139c2:	9b01      	ldr	r3, [sp, #4]
   139c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c8:	2b00      	cmp	r3, #0
   139ca:	d10d      	bne.n	139e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139cc:	f7ed f937 	bl	c3e <Port_schm_read_msr>
   139d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139d2:	9b00      	ldr	r3, [sp, #0]
   139d4:	f003 0301 	and.w	r3, r3, #1
   139d8:	2b00      	cmp	r3, #0
   139da:	d100      	bne.n	139de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   139de:	490a      	ldr	r1, [pc, #40]	; (13a08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   139e0:	9b01      	ldr	r3, [sp, #4]
   139e2:	9a00      	ldr	r2, [sp, #0]
   139e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   139e8:	4a06      	ldr	r2, [pc, #24]	; (13a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139ea:	9b01      	ldr	r3, [sp, #4]
   139ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f0:	1c5a      	adds	r2, r3, #1
   139f2:	4904      	ldr	r1, [pc, #16]	; (13a04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139f4:	9b01      	ldr	r3, [sp, #4]
   139f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139fa:	bf00      	nop
   139fc:	b003      	add	sp, #12
   139fe:	f85d fb04 	ldr.w	pc, [sp], #4
   13a02:	bf00      	nop
   13a04:	1fff957c 	.word	0x1fff957c
   13a08:	1fff9578 	.word	0x1fff9578

00013a0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   13a0c:	b500      	push	{lr}
   13a0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a10:	f7ed ff1a 	bl	1848 <Sys_GetCoreID>
   13a14:	4603      	mov	r3, r0
   13a16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   13a18:	4a0d      	ldr	r2, [pc, #52]	; (13a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   13a1a:	9b01      	ldr	r3, [sp, #4]
   13a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a20:	1e5a      	subs	r2, r3, #1
   13a22:	490b      	ldr	r1, [pc, #44]	; (13a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   13a24:	9b01      	ldr	r3, [sp, #4]
   13a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   13a2a:	4a0a      	ldr	r2, [pc, #40]	; (13a54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   13a2c:	9b01      	ldr	r3, [sp, #4]
   13a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a32:	f003 0301 	and.w	r3, r3, #1
   13a36:	2b00      	cmp	r3, #0
   13a38:	d106      	bne.n	13a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   13a3a:	4a05      	ldr	r2, [pc, #20]	; (13a50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   13a3c:	9b01      	ldr	r3, [sp, #4]
   13a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a42:	2b00      	cmp	r3, #0
   13a44:	d100      	bne.n	13a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a48:	bf00      	nop
   13a4a:	b003      	add	sp, #12
   13a4c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a50:	1fff957c 	.word	0x1fff957c
   13a54:	1fff9578 	.word	0x1fff9578

00013a58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13a58:	b500      	push	{lr}
   13a5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a5c:	f7ed fef4 	bl	1848 <Sys_GetCoreID>
   13a60:	4603      	mov	r3, r0
   13a62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   13a64:	4a10      	ldr	r2, [pc, #64]	; (13aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a66:	9b01      	ldr	r3, [sp, #4]
   13a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a6c:	2b00      	cmp	r3, #0
   13a6e:	d10d      	bne.n	13a8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a70:	f7ed f8e5 	bl	c3e <Port_schm_read_msr>
   13a74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a76:	9b00      	ldr	r3, [sp, #0]
   13a78:	f003 0301 	and.w	r3, r3, #1
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d100      	bne.n	13a82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   13a82:	490a      	ldr	r1, [pc, #40]	; (13aac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   13a84:	9b01      	ldr	r3, [sp, #4]
   13a86:	9a00      	ldr	r2, [sp, #0]
   13a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   13a8c:	4a06      	ldr	r2, [pc, #24]	; (13aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a8e:	9b01      	ldr	r3, [sp, #4]
   13a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a94:	1c5a      	adds	r2, r3, #1
   13a96:	4904      	ldr	r1, [pc, #16]	; (13aa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a98:	9b01      	ldr	r3, [sp, #4]
   13a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a9e:	bf00      	nop
   13aa0:	b003      	add	sp, #12
   13aa2:	f85d fb04 	ldr.w	pc, [sp], #4
   13aa6:	bf00      	nop
   13aa8:	1fff9584 	.word	0x1fff9584
   13aac:	1fff9580 	.word	0x1fff9580

00013ab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13ab0:	b500      	push	{lr}
   13ab2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ab4:	f7ed fec8 	bl	1848 <Sys_GetCoreID>
   13ab8:	4603      	mov	r3, r0
   13aba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   13abc:	4a0d      	ldr	r2, [pc, #52]	; (13af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13abe:	9b01      	ldr	r3, [sp, #4]
   13ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ac4:	1e5a      	subs	r2, r3, #1
   13ac6:	490b      	ldr	r1, [pc, #44]	; (13af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13ac8:	9b01      	ldr	r3, [sp, #4]
   13aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   13ace:	4a0a      	ldr	r2, [pc, #40]	; (13af8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   13ad0:	9b01      	ldr	r3, [sp, #4]
   13ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad6:	f003 0301 	and.w	r3, r3, #1
   13ada:	2b00      	cmp	r3, #0
   13adc:	d106      	bne.n	13aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   13ade:	4a05      	ldr	r2, [pc, #20]	; (13af4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13ae0:	9b01      	ldr	r3, [sp, #4]
   13ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ae6:	2b00      	cmp	r3, #0
   13ae8:	d100      	bne.n	13aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13aea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13aec:	bf00      	nop
   13aee:	b003      	add	sp, #12
   13af0:	f85d fb04 	ldr.w	pc, [sp], #4
   13af4:	1fff9584 	.word	0x1fff9584
   13af8:	1fff9580 	.word	0x1fff9580

00013afc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   13afc:	b500      	push	{lr}
   13afe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b00:	f7ed fea2 	bl	1848 <Sys_GetCoreID>
   13b04:	4603      	mov	r3, r0
   13b06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   13b08:	4a10      	ldr	r2, [pc, #64]	; (13b4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13b0a:	9b01      	ldr	r3, [sp, #4]
   13b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b10:	2b00      	cmp	r3, #0
   13b12:	d10d      	bne.n	13b30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b14:	f7ed f893 	bl	c3e <Port_schm_read_msr>
   13b18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b1a:	9b00      	ldr	r3, [sp, #0]
   13b1c:	f003 0301 	and.w	r3, r3, #1
   13b20:	2b00      	cmp	r3, #0
   13b22:	d100      	bne.n	13b26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   13b26:	490a      	ldr	r1, [pc, #40]	; (13b50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   13b28:	9b01      	ldr	r3, [sp, #4]
   13b2a:	9a00      	ldr	r2, [sp, #0]
   13b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   13b30:	4a06      	ldr	r2, [pc, #24]	; (13b4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13b32:	9b01      	ldr	r3, [sp, #4]
   13b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b38:	1c5a      	adds	r2, r3, #1
   13b3a:	4904      	ldr	r1, [pc, #16]	; (13b4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13b3c:	9b01      	ldr	r3, [sp, #4]
   13b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b42:	bf00      	nop
   13b44:	b003      	add	sp, #12
   13b46:	f85d fb04 	ldr.w	pc, [sp], #4
   13b4a:	bf00      	nop
   13b4c:	1fff958c 	.word	0x1fff958c
   13b50:	1fff9588 	.word	0x1fff9588

00013b54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   13b54:	b500      	push	{lr}
   13b56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b58:	f7ed fe76 	bl	1848 <Sys_GetCoreID>
   13b5c:	4603      	mov	r3, r0
   13b5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   13b60:	4a0d      	ldr	r2, [pc, #52]	; (13b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b62:	9b01      	ldr	r3, [sp, #4]
   13b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b68:	1e5a      	subs	r2, r3, #1
   13b6a:	490b      	ldr	r1, [pc, #44]	; (13b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b6c:	9b01      	ldr	r3, [sp, #4]
   13b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   13b72:	4a0a      	ldr	r2, [pc, #40]	; (13b9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   13b74:	9b01      	ldr	r3, [sp, #4]
   13b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b7a:	f003 0301 	and.w	r3, r3, #1
   13b7e:	2b00      	cmp	r3, #0
   13b80:	d106      	bne.n	13b90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   13b82:	4a05      	ldr	r2, [pc, #20]	; (13b98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b84:	9b01      	ldr	r3, [sp, #4]
   13b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b8a:	2b00      	cmp	r3, #0
   13b8c:	d100      	bne.n	13b90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b90:	bf00      	nop
   13b92:	b003      	add	sp, #12
   13b94:	f85d fb04 	ldr.w	pc, [sp], #4
   13b98:	1fff958c 	.word	0x1fff958c
   13b9c:	1fff9588 	.word	0x1fff9588

00013ba0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13ba0:	b500      	push	{lr}
   13ba2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ba4:	f7ed fe50 	bl	1848 <Sys_GetCoreID>
   13ba8:	4603      	mov	r3, r0
   13baa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   13bac:	4a10      	ldr	r2, [pc, #64]	; (13bf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13bae:	9b01      	ldr	r3, [sp, #4]
   13bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d10d      	bne.n	13bd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bb8:	f7ed f841 	bl	c3e <Port_schm_read_msr>
   13bbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bbe:	9b00      	ldr	r3, [sp, #0]
   13bc0:	f003 0301 	and.w	r3, r3, #1
   13bc4:	2b00      	cmp	r3, #0
   13bc6:	d100      	bne.n	13bca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13bc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   13bca:	490a      	ldr	r1, [pc, #40]	; (13bf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   13bcc:	9b01      	ldr	r3, [sp, #4]
   13bce:	9a00      	ldr	r2, [sp, #0]
   13bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   13bd4:	4a06      	ldr	r2, [pc, #24]	; (13bf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13bd6:	9b01      	ldr	r3, [sp, #4]
   13bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bdc:	1c5a      	adds	r2, r3, #1
   13bde:	4904      	ldr	r1, [pc, #16]	; (13bf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13be0:	9b01      	ldr	r3, [sp, #4]
   13be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13be6:	bf00      	nop
   13be8:	b003      	add	sp, #12
   13bea:	f85d fb04 	ldr.w	pc, [sp], #4
   13bee:	bf00      	nop
   13bf0:	1fff9594 	.word	0x1fff9594
   13bf4:	1fff9590 	.word	0x1fff9590

00013bf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13bf8:	b500      	push	{lr}
   13bfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bfc:	f7ed fe24 	bl	1848 <Sys_GetCoreID>
   13c00:	4603      	mov	r3, r0
   13c02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   13c04:	4a0d      	ldr	r2, [pc, #52]	; (13c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13c06:	9b01      	ldr	r3, [sp, #4]
   13c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c0c:	1e5a      	subs	r2, r3, #1
   13c0e:	490b      	ldr	r1, [pc, #44]	; (13c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13c10:	9b01      	ldr	r3, [sp, #4]
   13c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   13c16:	4a0a      	ldr	r2, [pc, #40]	; (13c40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   13c18:	9b01      	ldr	r3, [sp, #4]
   13c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c1e:	f003 0301 	and.w	r3, r3, #1
   13c22:	2b00      	cmp	r3, #0
   13c24:	d106      	bne.n	13c34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   13c26:	4a05      	ldr	r2, [pc, #20]	; (13c3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13c28:	9b01      	ldr	r3, [sp, #4]
   13c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d100      	bne.n	13c34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c34:	bf00      	nop
   13c36:	b003      	add	sp, #12
   13c38:	f85d fb04 	ldr.w	pc, [sp], #4
   13c3c:	1fff9594 	.word	0x1fff9594
   13c40:	1fff9590 	.word	0x1fff9590

00013c44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13c44:	b500      	push	{lr}
   13c46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c48:	f7ed fdfe 	bl	1848 <Sys_GetCoreID>
   13c4c:	4603      	mov	r3, r0
   13c4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   13c50:	4a10      	ldr	r2, [pc, #64]	; (13c94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c52:	9b01      	ldr	r3, [sp, #4]
   13c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c58:	2b00      	cmp	r3, #0
   13c5a:	d10d      	bne.n	13c78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c5c:	f7ec ffef 	bl	c3e <Port_schm_read_msr>
   13c60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c62:	9b00      	ldr	r3, [sp, #0]
   13c64:	f003 0301 	and.w	r3, r3, #1
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d100      	bne.n	13c6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   13c6e:	490a      	ldr	r1, [pc, #40]	; (13c98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   13c70:	9b01      	ldr	r3, [sp, #4]
   13c72:	9a00      	ldr	r2, [sp, #0]
   13c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   13c78:	4a06      	ldr	r2, [pc, #24]	; (13c94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c7a:	9b01      	ldr	r3, [sp, #4]
   13c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c80:	1c5a      	adds	r2, r3, #1
   13c82:	4904      	ldr	r1, [pc, #16]	; (13c94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c84:	9b01      	ldr	r3, [sp, #4]
   13c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c8a:	bf00      	nop
   13c8c:	b003      	add	sp, #12
   13c8e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c92:	bf00      	nop
   13c94:	1fff959c 	.word	0x1fff959c
   13c98:	1fff9598 	.word	0x1fff9598

00013c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13c9c:	b500      	push	{lr}
   13c9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ca0:	f7ed fdd2 	bl	1848 <Sys_GetCoreID>
   13ca4:	4603      	mov	r3, r0
   13ca6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   13ca8:	4a0d      	ldr	r2, [pc, #52]	; (13ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13caa:	9b01      	ldr	r3, [sp, #4]
   13cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cb0:	1e5a      	subs	r2, r3, #1
   13cb2:	490b      	ldr	r1, [pc, #44]	; (13ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13cb4:	9b01      	ldr	r3, [sp, #4]
   13cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   13cba:	4a0a      	ldr	r2, [pc, #40]	; (13ce4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   13cbc:	9b01      	ldr	r3, [sp, #4]
   13cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cc2:	f003 0301 	and.w	r3, r3, #1
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	d106      	bne.n	13cd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   13cca:	4a05      	ldr	r2, [pc, #20]	; (13ce0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13ccc:	9b01      	ldr	r3, [sp, #4]
   13cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d100      	bne.n	13cd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cd8:	bf00      	nop
   13cda:	b003      	add	sp, #12
   13cdc:	f85d fb04 	ldr.w	pc, [sp], #4
   13ce0:	1fff959c 	.word	0x1fff959c
   13ce4:	1fff9598 	.word	0x1fff9598

00013ce8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13ce8:	b500      	push	{lr}
   13cea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cec:	f7ed fdac 	bl	1848 <Sys_GetCoreID>
   13cf0:	4603      	mov	r3, r0
   13cf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   13cf4:	4a10      	ldr	r2, [pc, #64]	; (13d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13cf6:	9b01      	ldr	r3, [sp, #4]
   13cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cfc:	2b00      	cmp	r3, #0
   13cfe:	d10d      	bne.n	13d1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d00:	f7ec ff9d 	bl	c3e <Port_schm_read_msr>
   13d04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d06:	9b00      	ldr	r3, [sp, #0]
   13d08:	f003 0301 	and.w	r3, r3, #1
   13d0c:	2b00      	cmp	r3, #0
   13d0e:	d100      	bne.n	13d12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   13d12:	490a      	ldr	r1, [pc, #40]	; (13d3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   13d14:	9b01      	ldr	r3, [sp, #4]
   13d16:	9a00      	ldr	r2, [sp, #0]
   13d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   13d1c:	4a06      	ldr	r2, [pc, #24]	; (13d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13d1e:	9b01      	ldr	r3, [sp, #4]
   13d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d24:	1c5a      	adds	r2, r3, #1
   13d26:	4904      	ldr	r1, [pc, #16]	; (13d38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13d28:	9b01      	ldr	r3, [sp, #4]
   13d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d2e:	bf00      	nop
   13d30:	b003      	add	sp, #12
   13d32:	f85d fb04 	ldr.w	pc, [sp], #4
   13d36:	bf00      	nop
   13d38:	1fff95a4 	.word	0x1fff95a4
   13d3c:	1fff95a0 	.word	0x1fff95a0

00013d40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13d40:	b500      	push	{lr}
   13d42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d44:	f7ed fd80 	bl	1848 <Sys_GetCoreID>
   13d48:	4603      	mov	r3, r0
   13d4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   13d4c:	4a0d      	ldr	r2, [pc, #52]	; (13d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d4e:	9b01      	ldr	r3, [sp, #4]
   13d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d54:	1e5a      	subs	r2, r3, #1
   13d56:	490b      	ldr	r1, [pc, #44]	; (13d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d58:	9b01      	ldr	r3, [sp, #4]
   13d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   13d5e:	4a0a      	ldr	r2, [pc, #40]	; (13d88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   13d60:	9b01      	ldr	r3, [sp, #4]
   13d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d66:	f003 0301 	and.w	r3, r3, #1
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	d106      	bne.n	13d7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   13d6e:	4a05      	ldr	r2, [pc, #20]	; (13d84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d70:	9b01      	ldr	r3, [sp, #4]
   13d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d76:	2b00      	cmp	r3, #0
   13d78:	d100      	bne.n	13d7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d7c:	bf00      	nop
   13d7e:	b003      	add	sp, #12
   13d80:	f85d fb04 	ldr.w	pc, [sp], #4
   13d84:	1fff95a4 	.word	0x1fff95a4
   13d88:	1fff95a0 	.word	0x1fff95a0

00013d8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13d8c:	b500      	push	{lr}
   13d8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d90:	f7ed fd5a 	bl	1848 <Sys_GetCoreID>
   13d94:	4603      	mov	r3, r0
   13d96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   13d98:	4a10      	ldr	r2, [pc, #64]	; (13ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d9a:	9b01      	ldr	r3, [sp, #4]
   13d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13da0:	2b00      	cmp	r3, #0
   13da2:	d10d      	bne.n	13dc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13da4:	f7ec ff4b 	bl	c3e <Port_schm_read_msr>
   13da8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13daa:	9b00      	ldr	r3, [sp, #0]
   13dac:	f003 0301 	and.w	r3, r3, #1
   13db0:	2b00      	cmp	r3, #0
   13db2:	d100      	bne.n	13db6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13db4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   13db6:	490a      	ldr	r1, [pc, #40]	; (13de0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   13db8:	9b01      	ldr	r3, [sp, #4]
   13dba:	9a00      	ldr	r2, [sp, #0]
   13dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   13dc0:	4a06      	ldr	r2, [pc, #24]	; (13ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13dc2:	9b01      	ldr	r3, [sp, #4]
   13dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dc8:	1c5a      	adds	r2, r3, #1
   13dca:	4904      	ldr	r1, [pc, #16]	; (13ddc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13dcc:	9b01      	ldr	r3, [sp, #4]
   13dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13dd2:	bf00      	nop
   13dd4:	b003      	add	sp, #12
   13dd6:	f85d fb04 	ldr.w	pc, [sp], #4
   13dda:	bf00      	nop
   13ddc:	1fff95ac 	.word	0x1fff95ac
   13de0:	1fff95a8 	.word	0x1fff95a8

00013de4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13de4:	b500      	push	{lr}
   13de6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13de8:	f7ed fd2e 	bl	1848 <Sys_GetCoreID>
   13dec:	4603      	mov	r3, r0
   13dee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   13df0:	4a0d      	ldr	r2, [pc, #52]	; (13e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13df2:	9b01      	ldr	r3, [sp, #4]
   13df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13df8:	1e5a      	subs	r2, r3, #1
   13dfa:	490b      	ldr	r1, [pc, #44]	; (13e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13dfc:	9b01      	ldr	r3, [sp, #4]
   13dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   13e02:	4a0a      	ldr	r2, [pc, #40]	; (13e2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   13e04:	9b01      	ldr	r3, [sp, #4]
   13e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e0a:	f003 0301 	and.w	r3, r3, #1
   13e0e:	2b00      	cmp	r3, #0
   13e10:	d106      	bne.n	13e20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   13e12:	4a05      	ldr	r2, [pc, #20]	; (13e28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13e14:	9b01      	ldr	r3, [sp, #4]
   13e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	d100      	bne.n	13e20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e20:	bf00      	nop
   13e22:	b003      	add	sp, #12
   13e24:	f85d fb04 	ldr.w	pc, [sp], #4
   13e28:	1fff95ac 	.word	0x1fff95ac
   13e2c:	1fff95a8 	.word	0x1fff95a8

00013e30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13e30:	b500      	push	{lr}
   13e32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e34:	f7ed fd08 	bl	1848 <Sys_GetCoreID>
   13e38:	4603      	mov	r3, r0
   13e3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   13e3c:	4a10      	ldr	r2, [pc, #64]	; (13e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e3e:	9b01      	ldr	r3, [sp, #4]
   13e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e44:	2b00      	cmp	r3, #0
   13e46:	d10d      	bne.n	13e64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e48:	f7ec fef9 	bl	c3e <Port_schm_read_msr>
   13e4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e4e:	9b00      	ldr	r3, [sp, #0]
   13e50:	f003 0301 	and.w	r3, r3, #1
   13e54:	2b00      	cmp	r3, #0
   13e56:	d100      	bne.n	13e5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   13e5a:	490a      	ldr	r1, [pc, #40]	; (13e84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   13e5c:	9b01      	ldr	r3, [sp, #4]
   13e5e:	9a00      	ldr	r2, [sp, #0]
   13e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   13e64:	4a06      	ldr	r2, [pc, #24]	; (13e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e66:	9b01      	ldr	r3, [sp, #4]
   13e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e6c:	1c5a      	adds	r2, r3, #1
   13e6e:	4904      	ldr	r1, [pc, #16]	; (13e80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e70:	9b01      	ldr	r3, [sp, #4]
   13e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e76:	bf00      	nop
   13e78:	b003      	add	sp, #12
   13e7a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e7e:	bf00      	nop
   13e80:	1fff95b4 	.word	0x1fff95b4
   13e84:	1fff95b0 	.word	0x1fff95b0

00013e88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13e88:	b500      	push	{lr}
   13e8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e8c:	f7ed fcdc 	bl	1848 <Sys_GetCoreID>
   13e90:	4603      	mov	r3, r0
   13e92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   13e94:	4a0d      	ldr	r2, [pc, #52]	; (13ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e96:	9b01      	ldr	r3, [sp, #4]
   13e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e9c:	1e5a      	subs	r2, r3, #1
   13e9e:	490b      	ldr	r1, [pc, #44]	; (13ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13ea0:	9b01      	ldr	r3, [sp, #4]
   13ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   13ea6:	4a0a      	ldr	r2, [pc, #40]	; (13ed0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   13ea8:	9b01      	ldr	r3, [sp, #4]
   13eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eae:	f003 0301 	and.w	r3, r3, #1
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d106      	bne.n	13ec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   13eb6:	4a05      	ldr	r2, [pc, #20]	; (13ecc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13eb8:	9b01      	ldr	r3, [sp, #4]
   13eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d100      	bne.n	13ec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ec2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ec4:	bf00      	nop
   13ec6:	b003      	add	sp, #12
   13ec8:	f85d fb04 	ldr.w	pc, [sp], #4
   13ecc:	1fff95b4 	.word	0x1fff95b4
   13ed0:	1fff95b0 	.word	0x1fff95b0

00013ed4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13ed4:	b500      	push	{lr}
   13ed6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ed8:	f7ed fcb6 	bl	1848 <Sys_GetCoreID>
   13edc:	4603      	mov	r3, r0
   13ede:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   13ee0:	4a10      	ldr	r2, [pc, #64]	; (13f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13ee2:	9b01      	ldr	r3, [sp, #4]
   13ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee8:	2b00      	cmp	r3, #0
   13eea:	d10d      	bne.n	13f08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13eec:	f7ec fea7 	bl	c3e <Port_schm_read_msr>
   13ef0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ef2:	9b00      	ldr	r3, [sp, #0]
   13ef4:	f003 0301 	and.w	r3, r3, #1
   13ef8:	2b00      	cmp	r3, #0
   13efa:	d100      	bne.n	13efe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13efc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   13efe:	490a      	ldr	r1, [pc, #40]	; (13f28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   13f00:	9b01      	ldr	r3, [sp, #4]
   13f02:	9a00      	ldr	r2, [sp, #0]
   13f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   13f08:	4a06      	ldr	r2, [pc, #24]	; (13f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13f0a:	9b01      	ldr	r3, [sp, #4]
   13f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f10:	1c5a      	adds	r2, r3, #1
   13f12:	4904      	ldr	r1, [pc, #16]	; (13f24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13f14:	9b01      	ldr	r3, [sp, #4]
   13f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f1a:	bf00      	nop
   13f1c:	b003      	add	sp, #12
   13f1e:	f85d fb04 	ldr.w	pc, [sp], #4
   13f22:	bf00      	nop
   13f24:	1fff95bc 	.word	0x1fff95bc
   13f28:	1fff95b8 	.word	0x1fff95b8

00013f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13f2c:	b500      	push	{lr}
   13f2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f30:	f7ed fc8a 	bl	1848 <Sys_GetCoreID>
   13f34:	4603      	mov	r3, r0
   13f36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   13f38:	4a0d      	ldr	r2, [pc, #52]	; (13f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f3a:	9b01      	ldr	r3, [sp, #4]
   13f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f40:	1e5a      	subs	r2, r3, #1
   13f42:	490b      	ldr	r1, [pc, #44]	; (13f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f44:	9b01      	ldr	r3, [sp, #4]
   13f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   13f4a:	4a0a      	ldr	r2, [pc, #40]	; (13f74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   13f4c:	9b01      	ldr	r3, [sp, #4]
   13f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f52:	f003 0301 	and.w	r3, r3, #1
   13f56:	2b00      	cmp	r3, #0
   13f58:	d106      	bne.n	13f68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   13f5a:	4a05      	ldr	r2, [pc, #20]	; (13f70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f5c:	9b01      	ldr	r3, [sp, #4]
   13f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f62:	2b00      	cmp	r3, #0
   13f64:	d100      	bne.n	13f68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f68:	bf00      	nop
   13f6a:	b003      	add	sp, #12
   13f6c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f70:	1fff95bc 	.word	0x1fff95bc
   13f74:	1fff95b8 	.word	0x1fff95b8

00013f78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13f78:	b500      	push	{lr}
   13f7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f7c:	f7ed fc64 	bl	1848 <Sys_GetCoreID>
   13f80:	4603      	mov	r3, r0
   13f82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   13f84:	4a10      	ldr	r2, [pc, #64]	; (13fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f86:	9b01      	ldr	r3, [sp, #4]
   13f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d10d      	bne.n	13fac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f90:	f7ec fe55 	bl	c3e <Port_schm_read_msr>
   13f94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f96:	9b00      	ldr	r3, [sp, #0]
   13f98:	f003 0301 	and.w	r3, r3, #1
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d100      	bne.n	13fa2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   13fa2:	490a      	ldr	r1, [pc, #40]	; (13fcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   13fa4:	9b01      	ldr	r3, [sp, #4]
   13fa6:	9a00      	ldr	r2, [sp, #0]
   13fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   13fac:	4a06      	ldr	r2, [pc, #24]	; (13fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13fae:	9b01      	ldr	r3, [sp, #4]
   13fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fb4:	1c5a      	adds	r2, r3, #1
   13fb6:	4904      	ldr	r1, [pc, #16]	; (13fc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13fb8:	9b01      	ldr	r3, [sp, #4]
   13fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fbe:	bf00      	nop
   13fc0:	b003      	add	sp, #12
   13fc2:	f85d fb04 	ldr.w	pc, [sp], #4
   13fc6:	bf00      	nop
   13fc8:	1fff95c4 	.word	0x1fff95c4
   13fcc:	1fff95c0 	.word	0x1fff95c0

00013fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13fd0:	b500      	push	{lr}
   13fd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fd4:	f7ed fc38 	bl	1848 <Sys_GetCoreID>
   13fd8:	4603      	mov	r3, r0
   13fda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   13fdc:	4a0d      	ldr	r2, [pc, #52]	; (14014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fde:	9b01      	ldr	r3, [sp, #4]
   13fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fe4:	1e5a      	subs	r2, r3, #1
   13fe6:	490b      	ldr	r1, [pc, #44]	; (14014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fe8:	9b01      	ldr	r3, [sp, #4]
   13fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   13fee:	4a0a      	ldr	r2, [pc, #40]	; (14018 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   13ff0:	9b01      	ldr	r3, [sp, #4]
   13ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff6:	f003 0301 	and.w	r3, r3, #1
   13ffa:	2b00      	cmp	r3, #0
   13ffc:	d106      	bne.n	1400c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   13ffe:	4a05      	ldr	r2, [pc, #20]	; (14014 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   14000:	9b01      	ldr	r3, [sp, #4]
   14002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14006:	2b00      	cmp	r3, #0
   14008:	d100      	bne.n	1400c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1400a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1400c:	bf00      	nop
   1400e:	b003      	add	sp, #12
   14010:	f85d fb04 	ldr.w	pc, [sp], #4
   14014:	1fff95c4 	.word	0x1fff95c4
   14018:	1fff95c0 	.word	0x1fff95c0

0001401c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1401c:	b500      	push	{lr}
   1401e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14020:	f7ed fc12 	bl	1848 <Sys_GetCoreID>
   14024:	4603      	mov	r3, r0
   14026:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   14028:	4a10      	ldr	r2, [pc, #64]	; (1406c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1402a:	9b01      	ldr	r3, [sp, #4]
   1402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14030:	2b00      	cmp	r3, #0
   14032:	d10d      	bne.n	14050 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14034:	f7ec fe03 	bl	c3e <Port_schm_read_msr>
   14038:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1403a:	9b00      	ldr	r3, [sp, #0]
   1403c:	f003 0301 	and.w	r3, r3, #1
   14040:	2b00      	cmp	r3, #0
   14042:	d100      	bne.n	14046 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14044:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   14046:	490a      	ldr	r1, [pc, #40]	; (14070 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   14048:	9b01      	ldr	r3, [sp, #4]
   1404a:	9a00      	ldr	r2, [sp, #0]
   1404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   14050:	4a06      	ldr	r2, [pc, #24]	; (1406c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   14052:	9b01      	ldr	r3, [sp, #4]
   14054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14058:	1c5a      	adds	r2, r3, #1
   1405a:	4904      	ldr	r1, [pc, #16]	; (1406c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14062:	bf00      	nop
   14064:	b003      	add	sp, #12
   14066:	f85d fb04 	ldr.w	pc, [sp], #4
   1406a:	bf00      	nop
   1406c:	1fff95cc 	.word	0x1fff95cc
   14070:	1fff95c8 	.word	0x1fff95c8

00014074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   14074:	b500      	push	{lr}
   14076:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14078:	f7ed fbe6 	bl	1848 <Sys_GetCoreID>
   1407c:	4603      	mov	r3, r0
   1407e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   14080:	4a0d      	ldr	r2, [pc, #52]	; (140b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   14082:	9b01      	ldr	r3, [sp, #4]
   14084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14088:	1e5a      	subs	r2, r3, #1
   1408a:	490b      	ldr	r1, [pc, #44]	; (140b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1408c:	9b01      	ldr	r3, [sp, #4]
   1408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   14092:	4a0a      	ldr	r2, [pc, #40]	; (140bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   14094:	9b01      	ldr	r3, [sp, #4]
   14096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1409a:	f003 0301 	and.w	r3, r3, #1
   1409e:	2b00      	cmp	r3, #0
   140a0:	d106      	bne.n	140b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   140a2:	4a05      	ldr	r2, [pc, #20]	; (140b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   140a4:	9b01      	ldr	r3, [sp, #4]
   140a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140aa:	2b00      	cmp	r3, #0
   140ac:	d100      	bne.n	140b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140b0:	bf00      	nop
   140b2:	b003      	add	sp, #12
   140b4:	f85d fb04 	ldr.w	pc, [sp], #4
   140b8:	1fff95cc 	.word	0x1fff95cc
   140bc:	1fff95c8 	.word	0x1fff95c8

000140c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   140c0:	b500      	push	{lr}
   140c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140c4:	f7ed fbc0 	bl	1848 <Sys_GetCoreID>
   140c8:	4603      	mov	r3, r0
   140ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   140cc:	4a10      	ldr	r2, [pc, #64]	; (14110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   140ce:	9b01      	ldr	r3, [sp, #4]
   140d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140d4:	2b00      	cmp	r3, #0
   140d6:	d10d      	bne.n	140f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140d8:	f7ec fdb1 	bl	c3e <Port_schm_read_msr>
   140dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140de:	9b00      	ldr	r3, [sp, #0]
   140e0:	f003 0301 	and.w	r3, r3, #1
   140e4:	2b00      	cmp	r3, #0
   140e6:	d100      	bne.n	140ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   140ea:	490a      	ldr	r1, [pc, #40]	; (14114 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   140ec:	9b01      	ldr	r3, [sp, #4]
   140ee:	9a00      	ldr	r2, [sp, #0]
   140f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   140f4:	4a06      	ldr	r2, [pc, #24]	; (14110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   140f6:	9b01      	ldr	r3, [sp, #4]
   140f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140fc:	1c5a      	adds	r2, r3, #1
   140fe:	4904      	ldr	r1, [pc, #16]	; (14110 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   14100:	9b01      	ldr	r3, [sp, #4]
   14102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14106:	bf00      	nop
   14108:	b003      	add	sp, #12
   1410a:	f85d fb04 	ldr.w	pc, [sp], #4
   1410e:	bf00      	nop
   14110:	1fff95d4 	.word	0x1fff95d4
   14114:	1fff95d0 	.word	0x1fff95d0

00014118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   14118:	b500      	push	{lr}
   1411a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1411c:	f7ed fb94 	bl	1848 <Sys_GetCoreID>
   14120:	4603      	mov	r3, r0
   14122:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   14124:	4a0d      	ldr	r2, [pc, #52]	; (1415c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   14126:	9b01      	ldr	r3, [sp, #4]
   14128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1412c:	1e5a      	subs	r2, r3, #1
   1412e:	490b      	ldr	r1, [pc, #44]	; (1415c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   14130:	9b01      	ldr	r3, [sp, #4]
   14132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   14136:	4a0a      	ldr	r2, [pc, #40]	; (14160 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   14138:	9b01      	ldr	r3, [sp, #4]
   1413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1413e:	f003 0301 	and.w	r3, r3, #1
   14142:	2b00      	cmp	r3, #0
   14144:	d106      	bne.n	14154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   14146:	4a05      	ldr	r2, [pc, #20]	; (1415c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   14148:	9b01      	ldr	r3, [sp, #4]
   1414a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1414e:	2b00      	cmp	r3, #0
   14150:	d100      	bne.n	14154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14152:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14154:	bf00      	nop
   14156:	b003      	add	sp, #12
   14158:	f85d fb04 	ldr.w	pc, [sp], #4
   1415c:	1fff95d4 	.word	0x1fff95d4
   14160:	1fff95d0 	.word	0x1fff95d0

00014164 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   14164:	b500      	push	{lr}
   14166:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14168:	f7ed fb6e 	bl	1848 <Sys_GetCoreID>
   1416c:	4603      	mov	r3, r0
   1416e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   14170:	4a10      	ldr	r2, [pc, #64]	; (141b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   14172:	9b01      	ldr	r3, [sp, #4]
   14174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14178:	2b00      	cmp	r3, #0
   1417a:	d10d      	bne.n	14198 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1417c:	f7ec fd5f 	bl	c3e <Port_schm_read_msr>
   14180:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14182:	9b00      	ldr	r3, [sp, #0]
   14184:	f003 0301 	and.w	r3, r3, #1
   14188:	2b00      	cmp	r3, #0
   1418a:	d100      	bne.n	1418e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1418c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1418e:	490a      	ldr	r1, [pc, #40]	; (141b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   14190:	9b01      	ldr	r3, [sp, #4]
   14192:	9a00      	ldr	r2, [sp, #0]
   14194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   14198:	4a06      	ldr	r2, [pc, #24]	; (141b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1419a:	9b01      	ldr	r3, [sp, #4]
   1419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a0:	1c5a      	adds	r2, r3, #1
   141a2:	4904      	ldr	r1, [pc, #16]	; (141b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   141a4:	9b01      	ldr	r3, [sp, #4]
   141a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141aa:	bf00      	nop
   141ac:	b003      	add	sp, #12
   141ae:	f85d fb04 	ldr.w	pc, [sp], #4
   141b2:	bf00      	nop
   141b4:	1fff95dc 	.word	0x1fff95dc
   141b8:	1fff95d8 	.word	0x1fff95d8

000141bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   141bc:	b500      	push	{lr}
   141be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141c0:	f7ed fb42 	bl	1848 <Sys_GetCoreID>
   141c4:	4603      	mov	r3, r0
   141c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   141c8:	4a0d      	ldr	r2, [pc, #52]	; (14200 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   141ca:	9b01      	ldr	r3, [sp, #4]
   141cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141d0:	1e5a      	subs	r2, r3, #1
   141d2:	490b      	ldr	r1, [pc, #44]	; (14200 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   141d4:	9b01      	ldr	r3, [sp, #4]
   141d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   141da:	4a0a      	ldr	r2, [pc, #40]	; (14204 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   141dc:	9b01      	ldr	r3, [sp, #4]
   141de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141e2:	f003 0301 	and.w	r3, r3, #1
   141e6:	2b00      	cmp	r3, #0
   141e8:	d106      	bne.n	141f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   141ea:	4a05      	ldr	r2, [pc, #20]	; (14200 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   141ec:	9b01      	ldr	r3, [sp, #4]
   141ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141f2:	2b00      	cmp	r3, #0
   141f4:	d100      	bne.n	141f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141f8:	bf00      	nop
   141fa:	b003      	add	sp, #12
   141fc:	f85d fb04 	ldr.w	pc, [sp], #4
   14200:	1fff95dc 	.word	0x1fff95dc
   14204:	1fff95d8 	.word	0x1fff95d8

00014208 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   14208:	b500      	push	{lr}
   1420a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1420c:	f7ed fb1c 	bl	1848 <Sys_GetCoreID>
   14210:	4603      	mov	r3, r0
   14212:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   14214:	4a10      	ldr	r2, [pc, #64]	; (14258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   14216:	9b01      	ldr	r3, [sp, #4]
   14218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1421c:	2b00      	cmp	r3, #0
   1421e:	d10d      	bne.n	1423c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14220:	f7ec fd0d 	bl	c3e <Port_schm_read_msr>
   14224:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14226:	9b00      	ldr	r3, [sp, #0]
   14228:	f003 0301 	and.w	r3, r3, #1
   1422c:	2b00      	cmp	r3, #0
   1422e:	d100      	bne.n	14232 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14230:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   14232:	490a      	ldr	r1, [pc, #40]	; (1425c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   14234:	9b01      	ldr	r3, [sp, #4]
   14236:	9a00      	ldr	r2, [sp, #0]
   14238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   1423c:	4a06      	ldr	r2, [pc, #24]	; (14258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   1423e:	9b01      	ldr	r3, [sp, #4]
   14240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14244:	1c5a      	adds	r2, r3, #1
   14246:	4904      	ldr	r1, [pc, #16]	; (14258 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1424e:	bf00      	nop
   14250:	b003      	add	sp, #12
   14252:	f85d fb04 	ldr.w	pc, [sp], #4
   14256:	bf00      	nop
   14258:	1fff95e4 	.word	0x1fff95e4
   1425c:	1fff95e0 	.word	0x1fff95e0

00014260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   14260:	b500      	push	{lr}
   14262:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14264:	f7ed faf0 	bl	1848 <Sys_GetCoreID>
   14268:	4603      	mov	r3, r0
   1426a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   1426c:	4a0d      	ldr	r2, [pc, #52]	; (142a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   1426e:	9b01      	ldr	r3, [sp, #4]
   14270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14274:	1e5a      	subs	r2, r3, #1
   14276:	490b      	ldr	r1, [pc, #44]	; (142a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14278:	9b01      	ldr	r3, [sp, #4]
   1427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1427e:	4a0a      	ldr	r2, [pc, #40]	; (142a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   14280:	9b01      	ldr	r3, [sp, #4]
   14282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14286:	f003 0301 	and.w	r3, r3, #1
   1428a:	2b00      	cmp	r3, #0
   1428c:	d106      	bne.n	1429c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   1428e:	4a05      	ldr	r2, [pc, #20]	; (142a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14290:	9b01      	ldr	r3, [sp, #4]
   14292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14296:	2b00      	cmp	r3, #0
   14298:	d100      	bne.n	1429c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1429a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1429c:	bf00      	nop
   1429e:	b003      	add	sp, #12
   142a0:	f85d fb04 	ldr.w	pc, [sp], #4
   142a4:	1fff95e4 	.word	0x1fff95e4
   142a8:	1fff95e0 	.word	0x1fff95e0

000142ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   142ac:	b500      	push	{lr}
   142ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142b0:	f7ed faca 	bl	1848 <Sys_GetCoreID>
   142b4:	4603      	mov	r3, r0
   142b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   142b8:	4a10      	ldr	r2, [pc, #64]	; (142fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142ba:	9b01      	ldr	r3, [sp, #4]
   142bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142c0:	2b00      	cmp	r3, #0
   142c2:	d10d      	bne.n	142e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142c4:	f7ec fcbb 	bl	c3e <Port_schm_read_msr>
   142c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142ca:	9b00      	ldr	r3, [sp, #0]
   142cc:	f003 0301 	and.w	r3, r3, #1
   142d0:	2b00      	cmp	r3, #0
   142d2:	d100      	bne.n	142d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   142d6:	490a      	ldr	r1, [pc, #40]	; (14300 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   142d8:	9b01      	ldr	r3, [sp, #4]
   142da:	9a00      	ldr	r2, [sp, #0]
   142dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   142e0:	4a06      	ldr	r2, [pc, #24]	; (142fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142e2:	9b01      	ldr	r3, [sp, #4]
   142e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142e8:	1c5a      	adds	r2, r3, #1
   142ea:	4904      	ldr	r1, [pc, #16]	; (142fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142ec:	9b01      	ldr	r3, [sp, #4]
   142ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142f2:	bf00      	nop
   142f4:	b003      	add	sp, #12
   142f6:	f85d fb04 	ldr.w	pc, [sp], #4
   142fa:	bf00      	nop
   142fc:	1fff95ec 	.word	0x1fff95ec
   14300:	1fff95e8 	.word	0x1fff95e8

00014304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   14304:	b500      	push	{lr}
   14306:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14308:	f7ed fa9e 	bl	1848 <Sys_GetCoreID>
   1430c:	4603      	mov	r3, r0
   1430e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   14310:	4a0d      	ldr	r2, [pc, #52]	; (14348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   14312:	9b01      	ldr	r3, [sp, #4]
   14314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14318:	1e5a      	subs	r2, r3, #1
   1431a:	490b      	ldr	r1, [pc, #44]	; (14348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1431c:	9b01      	ldr	r3, [sp, #4]
   1431e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   14322:	4a0a      	ldr	r2, [pc, #40]	; (1434c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1432a:	f003 0301 	and.w	r3, r3, #1
   1432e:	2b00      	cmp	r3, #0
   14330:	d106      	bne.n	14340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   14332:	4a05      	ldr	r2, [pc, #20]	; (14348 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   14334:	9b01      	ldr	r3, [sp, #4]
   14336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1433a:	2b00      	cmp	r3, #0
   1433c:	d100      	bne.n	14340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1433e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14340:	bf00      	nop
   14342:	b003      	add	sp, #12
   14344:	f85d fb04 	ldr.w	pc, [sp], #4
   14348:	1fff95ec 	.word	0x1fff95ec
   1434c:	1fff95e8 	.word	0x1fff95e8

00014350 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   14350:	b500      	push	{lr}
   14352:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14354:	f7ed fa78 	bl	1848 <Sys_GetCoreID>
   14358:	4603      	mov	r3, r0
   1435a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   1435c:	4a10      	ldr	r2, [pc, #64]	; (143a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1435e:	9b01      	ldr	r3, [sp, #4]
   14360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14364:	2b00      	cmp	r3, #0
   14366:	d10d      	bne.n	14384 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14368:	f7ec fc69 	bl	c3e <Port_schm_read_msr>
   1436c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1436e:	9b00      	ldr	r3, [sp, #0]
   14370:	f003 0301 	and.w	r3, r3, #1
   14374:	2b00      	cmp	r3, #0
   14376:	d100      	bne.n	1437a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14378:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   1437a:	490a      	ldr	r1, [pc, #40]	; (143a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   1437c:	9b01      	ldr	r3, [sp, #4]
   1437e:	9a00      	ldr	r2, [sp, #0]
   14380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   14384:	4a06      	ldr	r2, [pc, #24]	; (143a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14386:	9b01      	ldr	r3, [sp, #4]
   14388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1438c:	1c5a      	adds	r2, r3, #1
   1438e:	4904      	ldr	r1, [pc, #16]	; (143a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14390:	9b01      	ldr	r3, [sp, #4]
   14392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14396:	bf00      	nop
   14398:	b003      	add	sp, #12
   1439a:	f85d fb04 	ldr.w	pc, [sp], #4
   1439e:	bf00      	nop
   143a0:	1fff95f4 	.word	0x1fff95f4
   143a4:	1fff95f0 	.word	0x1fff95f0

000143a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   143a8:	b500      	push	{lr}
   143aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143ac:	f7ed fa4c 	bl	1848 <Sys_GetCoreID>
   143b0:	4603      	mov	r3, r0
   143b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   143b4:	4a0d      	ldr	r2, [pc, #52]	; (143ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   143b6:	9b01      	ldr	r3, [sp, #4]
   143b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143bc:	1e5a      	subs	r2, r3, #1
   143be:	490b      	ldr	r1, [pc, #44]	; (143ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   143c0:	9b01      	ldr	r3, [sp, #4]
   143c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   143c6:	4a0a      	ldr	r2, [pc, #40]	; (143f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   143c8:	9b01      	ldr	r3, [sp, #4]
   143ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ce:	f003 0301 	and.w	r3, r3, #1
   143d2:	2b00      	cmp	r3, #0
   143d4:	d106      	bne.n	143e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   143d6:	4a05      	ldr	r2, [pc, #20]	; (143ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   143d8:	9b01      	ldr	r3, [sp, #4]
   143da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143de:	2b00      	cmp	r3, #0
   143e0:	d100      	bne.n	143e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143e4:	bf00      	nop
   143e6:	b003      	add	sp, #12
   143e8:	f85d fb04 	ldr.w	pc, [sp], #4
   143ec:	1fff95f4 	.word	0x1fff95f4
   143f0:	1fff95f0 	.word	0x1fff95f0

000143f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   143f4:	b500      	push	{lr}
   143f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143f8:	f7ed fa26 	bl	1848 <Sys_GetCoreID>
   143fc:	4603      	mov	r3, r0
   143fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   14400:	4a10      	ldr	r2, [pc, #64]	; (14444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   14402:	9b01      	ldr	r3, [sp, #4]
   14404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14408:	2b00      	cmp	r3, #0
   1440a:	d10d      	bne.n	14428 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1440c:	f7ec fc17 	bl	c3e <Port_schm_read_msr>
   14410:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14412:	9b00      	ldr	r3, [sp, #0]
   14414:	f003 0301 	and.w	r3, r3, #1
   14418:	2b00      	cmp	r3, #0
   1441a:	d100      	bne.n	1441e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1441c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1441e:	490a      	ldr	r1, [pc, #40]	; (14448 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   14420:	9b01      	ldr	r3, [sp, #4]
   14422:	9a00      	ldr	r2, [sp, #0]
   14424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   14428:	4a06      	ldr	r2, [pc, #24]	; (14444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1442a:	9b01      	ldr	r3, [sp, #4]
   1442c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14430:	1c5a      	adds	r2, r3, #1
   14432:	4904      	ldr	r1, [pc, #16]	; (14444 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   14434:	9b01      	ldr	r3, [sp, #4]
   14436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1443a:	bf00      	nop
   1443c:	b003      	add	sp, #12
   1443e:	f85d fb04 	ldr.w	pc, [sp], #4
   14442:	bf00      	nop
   14444:	1fff95fc 	.word	0x1fff95fc
   14448:	1fff95f8 	.word	0x1fff95f8

0001444c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   1444c:	b500      	push	{lr}
   1444e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14450:	f7ed f9fa 	bl	1848 <Sys_GetCoreID>
   14454:	4603      	mov	r3, r0
   14456:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   14458:	4a0d      	ldr	r2, [pc, #52]	; (14490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1445a:	9b01      	ldr	r3, [sp, #4]
   1445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14460:	1e5a      	subs	r2, r3, #1
   14462:	490b      	ldr	r1, [pc, #44]	; (14490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   14464:	9b01      	ldr	r3, [sp, #4]
   14466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1446a:	4a0a      	ldr	r2, [pc, #40]	; (14494 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14472:	f003 0301 	and.w	r3, r3, #1
   14476:	2b00      	cmp	r3, #0
   14478:	d106      	bne.n	14488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   1447a:	4a05      	ldr	r2, [pc, #20]	; (14490 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1447c:	9b01      	ldr	r3, [sp, #4]
   1447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14482:	2b00      	cmp	r3, #0
   14484:	d100      	bne.n	14488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14486:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14488:	bf00      	nop
   1448a:	b003      	add	sp, #12
   1448c:	f85d fb04 	ldr.w	pc, [sp], #4
   14490:	1fff95fc 	.word	0x1fff95fc
   14494:	1fff95f8 	.word	0x1fff95f8

00014498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   14498:	b500      	push	{lr}
   1449a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1449c:	f7ed f9d4 	bl	1848 <Sys_GetCoreID>
   144a0:	4603      	mov	r3, r0
   144a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   144a4:	4a10      	ldr	r2, [pc, #64]	; (144e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   144a6:	9b01      	ldr	r3, [sp, #4]
   144a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ac:	2b00      	cmp	r3, #0
   144ae:	d10d      	bne.n	144cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144b0:	f7ec fbce 	bl	c50 <Pwm_schm_read_msr>
   144b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144b6:	9b00      	ldr	r3, [sp, #0]
   144b8:	f003 0301 	and.w	r3, r3, #1
   144bc:	2b00      	cmp	r3, #0
   144be:	d100      	bne.n	144c2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   144c2:	490a      	ldr	r1, [pc, #40]	; (144ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   144c4:	9b01      	ldr	r3, [sp, #4]
   144c6:	9a00      	ldr	r2, [sp, #0]
   144c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   144cc:	4a06      	ldr	r2, [pc, #24]	; (144e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   144ce:	9b01      	ldr	r3, [sp, #4]
   144d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144d4:	1c5a      	adds	r2, r3, #1
   144d6:	4904      	ldr	r1, [pc, #16]	; (144e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   144d8:	9b01      	ldr	r3, [sp, #4]
   144da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144de:	bf00      	nop
   144e0:	b003      	add	sp, #12
   144e2:	f85d fb04 	ldr.w	pc, [sp], #4
   144e6:	bf00      	nop
   144e8:	1fff9604 	.word	0x1fff9604
   144ec:	1fff9600 	.word	0x1fff9600

000144f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   144f0:	b500      	push	{lr}
   144f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144f4:	f7ed f9a8 	bl	1848 <Sys_GetCoreID>
   144f8:	4603      	mov	r3, r0
   144fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   144fc:	4a0d      	ldr	r2, [pc, #52]	; (14534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144fe:	9b01      	ldr	r3, [sp, #4]
   14500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14504:	1e5a      	subs	r2, r3, #1
   14506:	490b      	ldr	r1, [pc, #44]	; (14534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   14508:	9b01      	ldr	r3, [sp, #4]
   1450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1450e:	4a0a      	ldr	r2, [pc, #40]	; (14538 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   14510:	9b01      	ldr	r3, [sp, #4]
   14512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14516:	f003 0301 	and.w	r3, r3, #1
   1451a:	2b00      	cmp	r3, #0
   1451c:	d106      	bne.n	1452c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   1451e:	4a05      	ldr	r2, [pc, #20]	; (14534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   14520:	9b01      	ldr	r3, [sp, #4]
   14522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14526:	2b00      	cmp	r3, #0
   14528:	d100      	bne.n	1452c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1452a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1452c:	bf00      	nop
   1452e:	b003      	add	sp, #12
   14530:	f85d fb04 	ldr.w	pc, [sp], #4
   14534:	1fff9604 	.word	0x1fff9604
   14538:	1fff9600 	.word	0x1fff9600

0001453c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   1453c:	b500      	push	{lr}
   1453e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14540:	f7ed f982 	bl	1848 <Sys_GetCoreID>
   14544:	4603      	mov	r3, r0
   14546:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   14548:	4a10      	ldr	r2, [pc, #64]	; (1458c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1454a:	9b01      	ldr	r3, [sp, #4]
   1454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14550:	2b00      	cmp	r3, #0
   14552:	d10d      	bne.n	14570 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14554:	f7ec fb7c 	bl	c50 <Pwm_schm_read_msr>
   14558:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1455a:	9b00      	ldr	r3, [sp, #0]
   1455c:	f003 0301 	and.w	r3, r3, #1
   14560:	2b00      	cmp	r3, #0
   14562:	d100      	bne.n	14566 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14564:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14566:	490a      	ldr	r1, [pc, #40]	; (14590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   14568:	9b01      	ldr	r3, [sp, #4]
   1456a:	9a00      	ldr	r2, [sp, #0]
   1456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   14570:	4a06      	ldr	r2, [pc, #24]	; (1458c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   14572:	9b01      	ldr	r3, [sp, #4]
   14574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14578:	1c5a      	adds	r2, r3, #1
   1457a:	4904      	ldr	r1, [pc, #16]	; (1458c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1457c:	9b01      	ldr	r3, [sp, #4]
   1457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14582:	bf00      	nop
   14584:	b003      	add	sp, #12
   14586:	f85d fb04 	ldr.w	pc, [sp], #4
   1458a:	bf00      	nop
   1458c:	1fff960c 	.word	0x1fff960c
   14590:	1fff9608 	.word	0x1fff9608

00014594 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   14594:	b500      	push	{lr}
   14596:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14598:	f7ed f956 	bl	1848 <Sys_GetCoreID>
   1459c:	4603      	mov	r3, r0
   1459e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   145a0:	4a0d      	ldr	r2, [pc, #52]	; (145d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   145a2:	9b01      	ldr	r3, [sp, #4]
   145a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145a8:	1e5a      	subs	r2, r3, #1
   145aa:	490b      	ldr	r1, [pc, #44]	; (145d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   145ac:	9b01      	ldr	r3, [sp, #4]
   145ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   145b2:	4a0a      	ldr	r2, [pc, #40]	; (145dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ba:	f003 0301 	and.w	r3, r3, #1
   145be:	2b00      	cmp	r3, #0
   145c0:	d106      	bne.n	145d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   145c2:	4a05      	ldr	r2, [pc, #20]	; (145d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   145c4:	9b01      	ldr	r3, [sp, #4]
   145c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ca:	2b00      	cmp	r3, #0
   145cc:	d100      	bne.n	145d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145d0:	bf00      	nop
   145d2:	b003      	add	sp, #12
   145d4:	f85d fb04 	ldr.w	pc, [sp], #4
   145d8:	1fff960c 	.word	0x1fff960c
   145dc:	1fff9608 	.word	0x1fff9608

000145e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   145e0:	b500      	push	{lr}
   145e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145e4:	f7ed f930 	bl	1848 <Sys_GetCoreID>
   145e8:	4603      	mov	r3, r0
   145ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   145ec:	4a10      	ldr	r2, [pc, #64]	; (14630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145ee:	9b01      	ldr	r3, [sp, #4]
   145f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145f4:	2b00      	cmp	r3, #0
   145f6:	d10d      	bne.n	14614 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145f8:	f7ec fb2a 	bl	c50 <Pwm_schm_read_msr>
   145fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145fe:	9b00      	ldr	r3, [sp, #0]
   14600:	f003 0301 	and.w	r3, r3, #1
   14604:	2b00      	cmp	r3, #0
   14606:	d100      	bne.n	1460a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14608:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   1460a:	490a      	ldr	r1, [pc, #40]	; (14634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   1460c:	9b01      	ldr	r3, [sp, #4]
   1460e:	9a00      	ldr	r2, [sp, #0]
   14610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   14614:	4a06      	ldr	r2, [pc, #24]	; (14630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   14616:	9b01      	ldr	r3, [sp, #4]
   14618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1461c:	1c5a      	adds	r2, r3, #1
   1461e:	4904      	ldr	r1, [pc, #16]	; (14630 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   14620:	9b01      	ldr	r3, [sp, #4]
   14622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14626:	bf00      	nop
   14628:	b003      	add	sp, #12
   1462a:	f85d fb04 	ldr.w	pc, [sp], #4
   1462e:	bf00      	nop
   14630:	1fff9614 	.word	0x1fff9614
   14634:	1fff9610 	.word	0x1fff9610

00014638 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   14638:	b500      	push	{lr}
   1463a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1463c:	f7ed f904 	bl	1848 <Sys_GetCoreID>
   14640:	4603      	mov	r3, r0
   14642:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   14644:	4a0d      	ldr	r2, [pc, #52]	; (1467c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14646:	9b01      	ldr	r3, [sp, #4]
   14648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1464c:	1e5a      	subs	r2, r3, #1
   1464e:	490b      	ldr	r1, [pc, #44]	; (1467c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14650:	9b01      	ldr	r3, [sp, #4]
   14652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14656:	4a0a      	ldr	r2, [pc, #40]	; (14680 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1465e:	f003 0301 	and.w	r3, r3, #1
   14662:	2b00      	cmp	r3, #0
   14664:	d106      	bne.n	14674 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   14666:	4a05      	ldr	r2, [pc, #20]	; (1467c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14668:	9b01      	ldr	r3, [sp, #4]
   1466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1466e:	2b00      	cmp	r3, #0
   14670:	d100      	bne.n	14674 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14672:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14674:	bf00      	nop
   14676:	b003      	add	sp, #12
   14678:	f85d fb04 	ldr.w	pc, [sp], #4
   1467c:	1fff9614 	.word	0x1fff9614
   14680:	1fff9610 	.word	0x1fff9610

00014684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   14684:	b500      	push	{lr}
   14686:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14688:	f7ed f8de 	bl	1848 <Sys_GetCoreID>
   1468c:	4603      	mov	r3, r0
   1468e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   14690:	4a10      	ldr	r2, [pc, #64]	; (146d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   14692:	9b01      	ldr	r3, [sp, #4]
   14694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14698:	2b00      	cmp	r3, #0
   1469a:	d10d      	bne.n	146b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1469c:	f7ec fad8 	bl	c50 <Pwm_schm_read_msr>
   146a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146a2:	9b00      	ldr	r3, [sp, #0]
   146a4:	f003 0301 	and.w	r3, r3, #1
   146a8:	2b00      	cmp	r3, #0
   146aa:	d100      	bne.n	146ae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   146ae:	490a      	ldr	r1, [pc, #40]	; (146d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   146b0:	9b01      	ldr	r3, [sp, #4]
   146b2:	9a00      	ldr	r2, [sp, #0]
   146b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   146b8:	4a06      	ldr	r2, [pc, #24]	; (146d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   146ba:	9b01      	ldr	r3, [sp, #4]
   146bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c0:	1c5a      	adds	r2, r3, #1
   146c2:	4904      	ldr	r1, [pc, #16]	; (146d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   146c4:	9b01      	ldr	r3, [sp, #4]
   146c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146ca:	bf00      	nop
   146cc:	b003      	add	sp, #12
   146ce:	f85d fb04 	ldr.w	pc, [sp], #4
   146d2:	bf00      	nop
   146d4:	1fff961c 	.word	0x1fff961c
   146d8:	1fff9618 	.word	0x1fff9618

000146dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   146dc:	b500      	push	{lr}
   146de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146e0:	f7ed f8b2 	bl	1848 <Sys_GetCoreID>
   146e4:	4603      	mov	r3, r0
   146e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   146e8:	4a0d      	ldr	r2, [pc, #52]	; (14720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146ea:	9b01      	ldr	r3, [sp, #4]
   146ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146f0:	1e5a      	subs	r2, r3, #1
   146f2:	490b      	ldr	r1, [pc, #44]	; (14720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146f4:	9b01      	ldr	r3, [sp, #4]
   146f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   146fa:	4a0a      	ldr	r2, [pc, #40]	; (14724 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14702:	f003 0301 	and.w	r3, r3, #1
   14706:	2b00      	cmp	r3, #0
   14708:	d106      	bne.n	14718 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   1470a:	4a05      	ldr	r2, [pc, #20]	; (14720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   1470c:	9b01      	ldr	r3, [sp, #4]
   1470e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14712:	2b00      	cmp	r3, #0
   14714:	d100      	bne.n	14718 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14716:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14718:	bf00      	nop
   1471a:	b003      	add	sp, #12
   1471c:	f85d fb04 	ldr.w	pc, [sp], #4
   14720:	1fff961c 	.word	0x1fff961c
   14724:	1fff9618 	.word	0x1fff9618

00014728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   14728:	b500      	push	{lr}
   1472a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1472c:	f7ed f88c 	bl	1848 <Sys_GetCoreID>
   14730:	4603      	mov	r3, r0
   14732:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   14734:	4a10      	ldr	r2, [pc, #64]	; (14778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14736:	9b01      	ldr	r3, [sp, #4]
   14738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1473c:	2b00      	cmp	r3, #0
   1473e:	d10d      	bne.n	1475c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14740:	f7ec fa86 	bl	c50 <Pwm_schm_read_msr>
   14744:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14746:	9b00      	ldr	r3, [sp, #0]
   14748:	f003 0301 	and.w	r3, r3, #1
   1474c:	2b00      	cmp	r3, #0
   1474e:	d100      	bne.n	14752 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14750:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14752:	490a      	ldr	r1, [pc, #40]	; (1477c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   14754:	9b01      	ldr	r3, [sp, #4]
   14756:	9a00      	ldr	r2, [sp, #0]
   14758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   1475c:	4a06      	ldr	r2, [pc, #24]	; (14778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   1475e:	9b01      	ldr	r3, [sp, #4]
   14760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14764:	1c5a      	adds	r2, r3, #1
   14766:	4904      	ldr	r1, [pc, #16]	; (14778 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14768:	9b01      	ldr	r3, [sp, #4]
   1476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1476e:	bf00      	nop
   14770:	b003      	add	sp, #12
   14772:	f85d fb04 	ldr.w	pc, [sp], #4
   14776:	bf00      	nop
   14778:	1fff9624 	.word	0x1fff9624
   1477c:	1fff9620 	.word	0x1fff9620

00014780 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   14780:	b500      	push	{lr}
   14782:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14784:	f7ed f860 	bl	1848 <Sys_GetCoreID>
   14788:	4603      	mov	r3, r0
   1478a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   1478c:	4a0d      	ldr	r2, [pc, #52]	; (147c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   1478e:	9b01      	ldr	r3, [sp, #4]
   14790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14794:	1e5a      	subs	r2, r3, #1
   14796:	490b      	ldr	r1, [pc, #44]	; (147c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14798:	9b01      	ldr	r3, [sp, #4]
   1479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1479e:	4a0a      	ldr	r2, [pc, #40]	; (147c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a6:	f003 0301 	and.w	r3, r3, #1
   147aa:	2b00      	cmp	r3, #0
   147ac:	d106      	bne.n	147bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   147ae:	4a05      	ldr	r2, [pc, #20]	; (147c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   147b0:	9b01      	ldr	r3, [sp, #4]
   147b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147b6:	2b00      	cmp	r3, #0
   147b8:	d100      	bne.n	147bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147bc:	bf00      	nop
   147be:	b003      	add	sp, #12
   147c0:	f85d fb04 	ldr.w	pc, [sp], #4
   147c4:	1fff9624 	.word	0x1fff9624
   147c8:	1fff9620 	.word	0x1fff9620

000147cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   147cc:	b500      	push	{lr}
   147ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147d0:	f7ed f83a 	bl	1848 <Sys_GetCoreID>
   147d4:	4603      	mov	r3, r0
   147d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   147d8:	4a10      	ldr	r2, [pc, #64]	; (1481c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   147da:	9b01      	ldr	r3, [sp, #4]
   147dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147e0:	2b00      	cmp	r3, #0
   147e2:	d10d      	bne.n	14800 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147e4:	f7ec fa34 	bl	c50 <Pwm_schm_read_msr>
   147e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147ea:	9b00      	ldr	r3, [sp, #0]
   147ec:	f003 0301 	and.w	r3, r3, #1
   147f0:	2b00      	cmp	r3, #0
   147f2:	d100      	bne.n	147f6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   147f6:	490a      	ldr	r1, [pc, #40]	; (14820 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   147f8:	9b01      	ldr	r3, [sp, #4]
   147fa:	9a00      	ldr	r2, [sp, #0]
   147fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   14800:	4a06      	ldr	r2, [pc, #24]	; (1481c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   14802:	9b01      	ldr	r3, [sp, #4]
   14804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14808:	1c5a      	adds	r2, r3, #1
   1480a:	4904      	ldr	r1, [pc, #16]	; (1481c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   1480c:	9b01      	ldr	r3, [sp, #4]
   1480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14812:	bf00      	nop
   14814:	b003      	add	sp, #12
   14816:	f85d fb04 	ldr.w	pc, [sp], #4
   1481a:	bf00      	nop
   1481c:	1fff962c 	.word	0x1fff962c
   14820:	1fff9628 	.word	0x1fff9628

00014824 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   14824:	b500      	push	{lr}
   14826:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14828:	f7ed f80e 	bl	1848 <Sys_GetCoreID>
   1482c:	4603      	mov	r3, r0
   1482e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   14830:	4a0d      	ldr	r2, [pc, #52]	; (14868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   14832:	9b01      	ldr	r3, [sp, #4]
   14834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14838:	1e5a      	subs	r2, r3, #1
   1483a:	490b      	ldr	r1, [pc, #44]	; (14868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   1483c:	9b01      	ldr	r3, [sp, #4]
   1483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   14842:	4a0a      	ldr	r2, [pc, #40]	; (1486c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1484a:	f003 0301 	and.w	r3, r3, #1
   1484e:	2b00      	cmp	r3, #0
   14850:	d106      	bne.n	14860 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   14852:	4a05      	ldr	r2, [pc, #20]	; (14868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   14854:	9b01      	ldr	r3, [sp, #4]
   14856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1485a:	2b00      	cmp	r3, #0
   1485c:	d100      	bne.n	14860 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1485e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14860:	bf00      	nop
   14862:	b003      	add	sp, #12
   14864:	f85d fb04 	ldr.w	pc, [sp], #4
   14868:	1fff962c 	.word	0x1fff962c
   1486c:	1fff9628 	.word	0x1fff9628

00014870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14870:	b500      	push	{lr}
   14872:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14874:	f7ec ffe8 	bl	1848 <Sys_GetCoreID>
   14878:	4603      	mov	r3, r0
   1487a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   1487c:	4a10      	ldr	r2, [pc, #64]	; (148c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   1487e:	9b01      	ldr	r3, [sp, #4]
   14880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14884:	2b00      	cmp	r3, #0
   14886:	d10d      	bne.n	148a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14888:	f7ec f9e2 	bl	c50 <Pwm_schm_read_msr>
   1488c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1488e:	9b00      	ldr	r3, [sp, #0]
   14890:	f003 0301 	and.w	r3, r3, #1
   14894:	2b00      	cmp	r3, #0
   14896:	d100      	bne.n	1489a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14898:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1489a:	490a      	ldr	r1, [pc, #40]	; (148c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   1489c:	9b01      	ldr	r3, [sp, #4]
   1489e:	9a00      	ldr	r2, [sp, #0]
   148a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   148a4:	4a06      	ldr	r2, [pc, #24]	; (148c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   148a6:	9b01      	ldr	r3, [sp, #4]
   148a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ac:	1c5a      	adds	r2, r3, #1
   148ae:	4904      	ldr	r1, [pc, #16]	; (148c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148b6:	bf00      	nop
   148b8:	b003      	add	sp, #12
   148ba:	f85d fb04 	ldr.w	pc, [sp], #4
   148be:	bf00      	nop
   148c0:	1fff9634 	.word	0x1fff9634
   148c4:	1fff9630 	.word	0x1fff9630

000148c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   148c8:	b500      	push	{lr}
   148ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148cc:	f7ec ffbc 	bl	1848 <Sys_GetCoreID>
   148d0:	4603      	mov	r3, r0
   148d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   148d4:	4a0d      	ldr	r2, [pc, #52]	; (1490c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148d6:	9b01      	ldr	r3, [sp, #4]
   148d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148dc:	1e5a      	subs	r2, r3, #1
   148de:	490b      	ldr	r1, [pc, #44]	; (1490c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148e0:	9b01      	ldr	r3, [sp, #4]
   148e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   148e6:	4a0a      	ldr	r2, [pc, #40]	; (14910 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   148e8:	9b01      	ldr	r3, [sp, #4]
   148ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ee:	f003 0301 	and.w	r3, r3, #1
   148f2:	2b00      	cmp	r3, #0
   148f4:	d106      	bne.n	14904 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   148f6:	4a05      	ldr	r2, [pc, #20]	; (1490c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148f8:	9b01      	ldr	r3, [sp, #4]
   148fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148fe:	2b00      	cmp	r3, #0
   14900:	d100      	bne.n	14904 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14902:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14904:	bf00      	nop
   14906:	b003      	add	sp, #12
   14908:	f85d fb04 	ldr.w	pc, [sp], #4
   1490c:	1fff9634 	.word	0x1fff9634
   14910:	1fff9630 	.word	0x1fff9630

00014914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   14914:	b500      	push	{lr}
   14916:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14918:	f7ec ff96 	bl	1848 <Sys_GetCoreID>
   1491c:	4603      	mov	r3, r0
   1491e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   14920:	4a10      	ldr	r2, [pc, #64]	; (14964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   14922:	9b01      	ldr	r3, [sp, #4]
   14924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14928:	2b00      	cmp	r3, #0
   1492a:	d10d      	bne.n	14948 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1492c:	f7ec f990 	bl	c50 <Pwm_schm_read_msr>
   14930:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14932:	9b00      	ldr	r3, [sp, #0]
   14934:	f003 0301 	and.w	r3, r3, #1
   14938:	2b00      	cmp	r3, #0
   1493a:	d100      	bne.n	1493e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1493c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1493e:	490a      	ldr	r1, [pc, #40]	; (14968 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   14940:	9b01      	ldr	r3, [sp, #4]
   14942:	9a00      	ldr	r2, [sp, #0]
   14944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   14948:	4a06      	ldr	r2, [pc, #24]	; (14964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   1494a:	9b01      	ldr	r3, [sp, #4]
   1494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14950:	1c5a      	adds	r2, r3, #1
   14952:	4904      	ldr	r1, [pc, #16]	; (14964 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   14954:	9b01      	ldr	r3, [sp, #4]
   14956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1495a:	bf00      	nop
   1495c:	b003      	add	sp, #12
   1495e:	f85d fb04 	ldr.w	pc, [sp], #4
   14962:	bf00      	nop
   14964:	1fff963c 	.word	0x1fff963c
   14968:	1fff9638 	.word	0x1fff9638

0001496c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   1496c:	b500      	push	{lr}
   1496e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14970:	f7ec ff6a 	bl	1848 <Sys_GetCoreID>
   14974:	4603      	mov	r3, r0
   14976:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   14978:	4a0d      	ldr	r2, [pc, #52]	; (149b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1497a:	9b01      	ldr	r3, [sp, #4]
   1497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14980:	1e5a      	subs	r2, r3, #1
   14982:	490b      	ldr	r1, [pc, #44]	; (149b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   14984:	9b01      	ldr	r3, [sp, #4]
   14986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1498a:	4a0a      	ldr	r2, [pc, #40]	; (149b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   1498c:	9b01      	ldr	r3, [sp, #4]
   1498e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14992:	f003 0301 	and.w	r3, r3, #1
   14996:	2b00      	cmp	r3, #0
   14998:	d106      	bne.n	149a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   1499a:	4a05      	ldr	r2, [pc, #20]	; (149b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1499c:	9b01      	ldr	r3, [sp, #4]
   1499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149a2:	2b00      	cmp	r3, #0
   149a4:	d100      	bne.n	149a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149a8:	bf00      	nop
   149aa:	b003      	add	sp, #12
   149ac:	f85d fb04 	ldr.w	pc, [sp], #4
   149b0:	1fff963c 	.word	0x1fff963c
   149b4:	1fff9638 	.word	0x1fff9638

000149b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   149b8:	b500      	push	{lr}
   149ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149bc:	f7ec ff44 	bl	1848 <Sys_GetCoreID>
   149c0:	4603      	mov	r3, r0
   149c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   149c4:	4a10      	ldr	r2, [pc, #64]	; (14a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149c6:	9b01      	ldr	r3, [sp, #4]
   149c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149cc:	2b00      	cmp	r3, #0
   149ce:	d10d      	bne.n	149ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149d0:	f7ec f93e 	bl	c50 <Pwm_schm_read_msr>
   149d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149d6:	9b00      	ldr	r3, [sp, #0]
   149d8:	f003 0301 	and.w	r3, r3, #1
   149dc:	2b00      	cmp	r3, #0
   149de:	d100      	bne.n	149e2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   149e2:	490a      	ldr	r1, [pc, #40]	; (14a0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   149e4:	9b01      	ldr	r3, [sp, #4]
   149e6:	9a00      	ldr	r2, [sp, #0]
   149e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   149ec:	4a06      	ldr	r2, [pc, #24]	; (14a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149ee:	9b01      	ldr	r3, [sp, #4]
   149f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149f4:	1c5a      	adds	r2, r3, #1
   149f6:	4904      	ldr	r1, [pc, #16]	; (14a08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149f8:	9b01      	ldr	r3, [sp, #4]
   149fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149fe:	bf00      	nop
   14a00:	b003      	add	sp, #12
   14a02:	f85d fb04 	ldr.w	pc, [sp], #4
   14a06:	bf00      	nop
   14a08:	1fff9644 	.word	0x1fff9644
   14a0c:	1fff9640 	.word	0x1fff9640

00014a10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   14a10:	b500      	push	{lr}
   14a12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a14:	f7ec ff18 	bl	1848 <Sys_GetCoreID>
   14a18:	4603      	mov	r3, r0
   14a1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   14a1c:	4a0d      	ldr	r2, [pc, #52]	; (14a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   14a1e:	9b01      	ldr	r3, [sp, #4]
   14a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a24:	1e5a      	subs	r2, r3, #1
   14a26:	490b      	ldr	r1, [pc, #44]	; (14a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   14a28:	9b01      	ldr	r3, [sp, #4]
   14a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   14a2e:	4a0a      	ldr	r2, [pc, #40]	; (14a58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   14a30:	9b01      	ldr	r3, [sp, #4]
   14a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a36:	f003 0301 	and.w	r3, r3, #1
   14a3a:	2b00      	cmp	r3, #0
   14a3c:	d106      	bne.n	14a4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   14a3e:	4a05      	ldr	r2, [pc, #20]	; (14a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   14a40:	9b01      	ldr	r3, [sp, #4]
   14a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a46:	2b00      	cmp	r3, #0
   14a48:	d100      	bne.n	14a4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a4c:	bf00      	nop
   14a4e:	b003      	add	sp, #12
   14a50:	f85d fb04 	ldr.w	pc, [sp], #4
   14a54:	1fff9644 	.word	0x1fff9644
   14a58:	1fff9640 	.word	0x1fff9640

00014a5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14a5c:	b500      	push	{lr}
   14a5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a60:	f7ec fef2 	bl	1848 <Sys_GetCoreID>
   14a64:	4603      	mov	r3, r0
   14a66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   14a68:	4a10      	ldr	r2, [pc, #64]	; (14aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a6a:	9b01      	ldr	r3, [sp, #4]
   14a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a70:	2b00      	cmp	r3, #0
   14a72:	d10d      	bne.n	14a90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a74:	f7ec f8ec 	bl	c50 <Pwm_schm_read_msr>
   14a78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a7a:	9b00      	ldr	r3, [sp, #0]
   14a7c:	f003 0301 	and.w	r3, r3, #1
   14a80:	2b00      	cmp	r3, #0
   14a82:	d100      	bne.n	14a86 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   14a86:	490a      	ldr	r1, [pc, #40]	; (14ab0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   14a88:	9b01      	ldr	r3, [sp, #4]
   14a8a:	9a00      	ldr	r2, [sp, #0]
   14a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   14a90:	4a06      	ldr	r2, [pc, #24]	; (14aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a92:	9b01      	ldr	r3, [sp, #4]
   14a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a98:	1c5a      	adds	r2, r3, #1
   14a9a:	4904      	ldr	r1, [pc, #16]	; (14aac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14aa2:	bf00      	nop
   14aa4:	b003      	add	sp, #12
   14aa6:	f85d fb04 	ldr.w	pc, [sp], #4
   14aaa:	bf00      	nop
   14aac:	1fff964c 	.word	0x1fff964c
   14ab0:	1fff9648 	.word	0x1fff9648

00014ab4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14ab4:	b500      	push	{lr}
   14ab6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ab8:	f7ec fec6 	bl	1848 <Sys_GetCoreID>
   14abc:	4603      	mov	r3, r0
   14abe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   14ac0:	4a0d      	ldr	r2, [pc, #52]	; (14af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14ac2:	9b01      	ldr	r3, [sp, #4]
   14ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ac8:	1e5a      	subs	r2, r3, #1
   14aca:	490b      	ldr	r1, [pc, #44]	; (14af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14acc:	9b01      	ldr	r3, [sp, #4]
   14ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   14ad2:	4a0a      	ldr	r2, [pc, #40]	; (14afc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   14ad4:	9b01      	ldr	r3, [sp, #4]
   14ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ada:	f003 0301 	and.w	r3, r3, #1
   14ade:	2b00      	cmp	r3, #0
   14ae0:	d106      	bne.n	14af0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   14ae2:	4a05      	ldr	r2, [pc, #20]	; (14af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14ae4:	9b01      	ldr	r3, [sp, #4]
   14ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d100      	bne.n	14af0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14aee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14af0:	bf00      	nop
   14af2:	b003      	add	sp, #12
   14af4:	f85d fb04 	ldr.w	pc, [sp], #4
   14af8:	1fff964c 	.word	0x1fff964c
   14afc:	1fff9648 	.word	0x1fff9648

00014b00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14b00:	b500      	push	{lr}
   14b02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b04:	f7ec fea0 	bl	1848 <Sys_GetCoreID>
   14b08:	4603      	mov	r3, r0
   14b0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   14b0c:	4a10      	ldr	r2, [pc, #64]	; (14b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14b0e:	9b01      	ldr	r3, [sp, #4]
   14b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b14:	2b00      	cmp	r3, #0
   14b16:	d10d      	bne.n	14b34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b18:	f7ec f89a 	bl	c50 <Pwm_schm_read_msr>
   14b1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b1e:	9b00      	ldr	r3, [sp, #0]
   14b20:	f003 0301 	and.w	r3, r3, #1
   14b24:	2b00      	cmp	r3, #0
   14b26:	d100      	bne.n	14b2a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   14b2a:	490a      	ldr	r1, [pc, #40]	; (14b54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   14b2c:	9b01      	ldr	r3, [sp, #4]
   14b2e:	9a00      	ldr	r2, [sp, #0]
   14b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   14b34:	4a06      	ldr	r2, [pc, #24]	; (14b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14b36:	9b01      	ldr	r3, [sp, #4]
   14b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b3c:	1c5a      	adds	r2, r3, #1
   14b3e:	4904      	ldr	r1, [pc, #16]	; (14b50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14b40:	9b01      	ldr	r3, [sp, #4]
   14b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b46:	bf00      	nop
   14b48:	b003      	add	sp, #12
   14b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b4e:	bf00      	nop
   14b50:	1fff9654 	.word	0x1fff9654
   14b54:	1fff9650 	.word	0x1fff9650

00014b58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14b58:	b500      	push	{lr}
   14b5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b5c:	f7ec fe74 	bl	1848 <Sys_GetCoreID>
   14b60:	4603      	mov	r3, r0
   14b62:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   14b64:	4a0d      	ldr	r2, [pc, #52]	; (14b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b66:	9b01      	ldr	r3, [sp, #4]
   14b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b6c:	1e5a      	subs	r2, r3, #1
   14b6e:	490b      	ldr	r1, [pc, #44]	; (14b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b70:	9b01      	ldr	r3, [sp, #4]
   14b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   14b76:	4a0a      	ldr	r2, [pc, #40]	; (14ba0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   14b78:	9b01      	ldr	r3, [sp, #4]
   14b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b7e:	f003 0301 	and.w	r3, r3, #1
   14b82:	2b00      	cmp	r3, #0
   14b84:	d106      	bne.n	14b94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   14b86:	4a05      	ldr	r2, [pc, #20]	; (14b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b88:	9b01      	ldr	r3, [sp, #4]
   14b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b8e:	2b00      	cmp	r3, #0
   14b90:	d100      	bne.n	14b94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b94:	bf00      	nop
   14b96:	b003      	add	sp, #12
   14b98:	f85d fb04 	ldr.w	pc, [sp], #4
   14b9c:	1fff9654 	.word	0x1fff9654
   14ba0:	1fff9650 	.word	0x1fff9650

00014ba4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   14ba4:	b500      	push	{lr}
   14ba6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ba8:	f7ec fe4e 	bl	1848 <Sys_GetCoreID>
   14bac:	4603      	mov	r3, r0
   14bae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   14bb0:	4a10      	ldr	r2, [pc, #64]	; (14bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14bb2:	9b01      	ldr	r3, [sp, #4]
   14bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb8:	2b00      	cmp	r3, #0
   14bba:	d10d      	bne.n	14bd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bbc:	f7ec f848 	bl	c50 <Pwm_schm_read_msr>
   14bc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bc2:	9b00      	ldr	r3, [sp, #0]
   14bc4:	f003 0301 	and.w	r3, r3, #1
   14bc8:	2b00      	cmp	r3, #0
   14bca:	d100      	bne.n	14bce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14bcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14bce:	490a      	ldr	r1, [pc, #40]	; (14bf8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   14bd0:	9b01      	ldr	r3, [sp, #4]
   14bd2:	9a00      	ldr	r2, [sp, #0]
   14bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   14bd8:	4a06      	ldr	r2, [pc, #24]	; (14bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be0:	1c5a      	adds	r2, r3, #1
   14be2:	4904      	ldr	r1, [pc, #16]	; (14bf4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14be4:	9b01      	ldr	r3, [sp, #4]
   14be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bea:	bf00      	nop
   14bec:	b003      	add	sp, #12
   14bee:	f85d fb04 	ldr.w	pc, [sp], #4
   14bf2:	bf00      	nop
   14bf4:	1fff965c 	.word	0x1fff965c
   14bf8:	1fff9658 	.word	0x1fff9658

00014bfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   14bfc:	b500      	push	{lr}
   14bfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c00:	f7ec fe22 	bl	1848 <Sys_GetCoreID>
   14c04:	4603      	mov	r3, r0
   14c06:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   14c08:	4a0d      	ldr	r2, [pc, #52]	; (14c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14c0a:	9b01      	ldr	r3, [sp, #4]
   14c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c10:	1e5a      	subs	r2, r3, #1
   14c12:	490b      	ldr	r1, [pc, #44]	; (14c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14c14:	9b01      	ldr	r3, [sp, #4]
   14c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   14c1a:	4a0a      	ldr	r2, [pc, #40]	; (14c44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   14c1c:	9b01      	ldr	r3, [sp, #4]
   14c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c22:	f003 0301 	and.w	r3, r3, #1
   14c26:	2b00      	cmp	r3, #0
   14c28:	d106      	bne.n	14c38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   14c2a:	4a05      	ldr	r2, [pc, #20]	; (14c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14c2c:	9b01      	ldr	r3, [sp, #4]
   14c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c32:	2b00      	cmp	r3, #0
   14c34:	d100      	bne.n	14c38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c38:	bf00      	nop
   14c3a:	b003      	add	sp, #12
   14c3c:	f85d fb04 	ldr.w	pc, [sp], #4
   14c40:	1fff965c 	.word	0x1fff965c
   14c44:	1fff9658 	.word	0x1fff9658

00014c48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14c48:	b500      	push	{lr}
   14c4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c4c:	f7ec fdfc 	bl	1848 <Sys_GetCoreID>
   14c50:	4603      	mov	r3, r0
   14c52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   14c54:	4a10      	ldr	r2, [pc, #64]	; (14c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c56:	9b01      	ldr	r3, [sp, #4]
   14c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d10d      	bne.n	14c7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c60:	f7eb fff6 	bl	c50 <Pwm_schm_read_msr>
   14c64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c66:	9b00      	ldr	r3, [sp, #0]
   14c68:	f003 0301 	and.w	r3, r3, #1
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d100      	bne.n	14c72 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   14c72:	490a      	ldr	r1, [pc, #40]	; (14c9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   14c74:	9b01      	ldr	r3, [sp, #4]
   14c76:	9a00      	ldr	r2, [sp, #0]
   14c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   14c7c:	4a06      	ldr	r2, [pc, #24]	; (14c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c7e:	9b01      	ldr	r3, [sp, #4]
   14c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c84:	1c5a      	adds	r2, r3, #1
   14c86:	4904      	ldr	r1, [pc, #16]	; (14c98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c88:	9b01      	ldr	r3, [sp, #4]
   14c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c8e:	bf00      	nop
   14c90:	b003      	add	sp, #12
   14c92:	f85d fb04 	ldr.w	pc, [sp], #4
   14c96:	bf00      	nop
   14c98:	1fff9664 	.word	0x1fff9664
   14c9c:	1fff9660 	.word	0x1fff9660

00014ca0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14ca0:	b500      	push	{lr}
   14ca2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ca4:	f7ec fdd0 	bl	1848 <Sys_GetCoreID>
   14ca8:	4603      	mov	r3, r0
   14caa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   14cac:	4a0d      	ldr	r2, [pc, #52]	; (14ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14cae:	9b01      	ldr	r3, [sp, #4]
   14cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cb4:	1e5a      	subs	r2, r3, #1
   14cb6:	490b      	ldr	r1, [pc, #44]	; (14ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14cb8:	9b01      	ldr	r3, [sp, #4]
   14cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   14cbe:	4a0a      	ldr	r2, [pc, #40]	; (14ce8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   14cc0:	9b01      	ldr	r3, [sp, #4]
   14cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cc6:	f003 0301 	and.w	r3, r3, #1
   14cca:	2b00      	cmp	r3, #0
   14ccc:	d106      	bne.n	14cdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   14cce:	4a05      	ldr	r2, [pc, #20]	; (14ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14cd0:	9b01      	ldr	r3, [sp, #4]
   14cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	d100      	bne.n	14cdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14cda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cdc:	bf00      	nop
   14cde:	b003      	add	sp, #12
   14ce0:	f85d fb04 	ldr.w	pc, [sp], #4
   14ce4:	1fff9664 	.word	0x1fff9664
   14ce8:	1fff9660 	.word	0x1fff9660

00014cec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14cec:	b500      	push	{lr}
   14cee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cf0:	f7ec fdaa 	bl	1848 <Sys_GetCoreID>
   14cf4:	4603      	mov	r3, r0
   14cf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   14cf8:	4a10      	ldr	r2, [pc, #64]	; (14d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14cfa:	9b01      	ldr	r3, [sp, #4]
   14cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d00:	2b00      	cmp	r3, #0
   14d02:	d10d      	bne.n	14d20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d04:	f7eb ffa4 	bl	c50 <Pwm_schm_read_msr>
   14d08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d0a:	9b00      	ldr	r3, [sp, #0]
   14d0c:	f003 0301 	and.w	r3, r3, #1
   14d10:	2b00      	cmp	r3, #0
   14d12:	d100      	bne.n	14d16 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   14d16:	490a      	ldr	r1, [pc, #40]	; (14d40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   14d18:	9b01      	ldr	r3, [sp, #4]
   14d1a:	9a00      	ldr	r2, [sp, #0]
   14d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   14d20:	4a06      	ldr	r2, [pc, #24]	; (14d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14d22:	9b01      	ldr	r3, [sp, #4]
   14d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d28:	1c5a      	adds	r2, r3, #1
   14d2a:	4904      	ldr	r1, [pc, #16]	; (14d3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14d2c:	9b01      	ldr	r3, [sp, #4]
   14d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d32:	bf00      	nop
   14d34:	b003      	add	sp, #12
   14d36:	f85d fb04 	ldr.w	pc, [sp], #4
   14d3a:	bf00      	nop
   14d3c:	1fff966c 	.word	0x1fff966c
   14d40:	1fff9668 	.word	0x1fff9668

00014d44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14d44:	b500      	push	{lr}
   14d46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d48:	f7ec fd7e 	bl	1848 <Sys_GetCoreID>
   14d4c:	4603      	mov	r3, r0
   14d4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   14d50:	4a0d      	ldr	r2, [pc, #52]	; (14d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d52:	9b01      	ldr	r3, [sp, #4]
   14d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d58:	1e5a      	subs	r2, r3, #1
   14d5a:	490b      	ldr	r1, [pc, #44]	; (14d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d5c:	9b01      	ldr	r3, [sp, #4]
   14d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   14d62:	4a0a      	ldr	r2, [pc, #40]	; (14d8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d6a:	f003 0301 	and.w	r3, r3, #1
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d106      	bne.n	14d80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   14d72:	4a05      	ldr	r2, [pc, #20]	; (14d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d74:	9b01      	ldr	r3, [sp, #4]
   14d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	d100      	bne.n	14d80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d80:	bf00      	nop
   14d82:	b003      	add	sp, #12
   14d84:	f85d fb04 	ldr.w	pc, [sp], #4
   14d88:	1fff966c 	.word	0x1fff966c
   14d8c:	1fff9668 	.word	0x1fff9668

00014d90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14d90:	b500      	push	{lr}
   14d92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d94:	f7ec fd58 	bl	1848 <Sys_GetCoreID>
   14d98:	4603      	mov	r3, r0
   14d9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   14d9c:	4a10      	ldr	r2, [pc, #64]	; (14de0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d9e:	9b01      	ldr	r3, [sp, #4]
   14da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14da4:	2b00      	cmp	r3, #0
   14da6:	d10d      	bne.n	14dc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14da8:	f7eb ff52 	bl	c50 <Pwm_schm_read_msr>
   14dac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14dae:	9b00      	ldr	r3, [sp, #0]
   14db0:	f003 0301 	and.w	r3, r3, #1
   14db4:	2b00      	cmp	r3, #0
   14db6:	d100      	bne.n	14dba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14db8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14dba:	490a      	ldr	r1, [pc, #40]	; (14de4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   14dbc:	9b01      	ldr	r3, [sp, #4]
   14dbe:	9a00      	ldr	r2, [sp, #0]
   14dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   14dc4:	4a06      	ldr	r2, [pc, #24]	; (14de0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14dc6:	9b01      	ldr	r3, [sp, #4]
   14dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dcc:	1c5a      	adds	r2, r3, #1
   14dce:	4904      	ldr	r1, [pc, #16]	; (14de0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14dd6:	bf00      	nop
   14dd8:	b003      	add	sp, #12
   14dda:	f85d fb04 	ldr.w	pc, [sp], #4
   14dde:	bf00      	nop
   14de0:	1fff9674 	.word	0x1fff9674
   14de4:	1fff9670 	.word	0x1fff9670

00014de8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14de8:	b500      	push	{lr}
   14dea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dec:	f7ec fd2c 	bl	1848 <Sys_GetCoreID>
   14df0:	4603      	mov	r3, r0
   14df2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   14df4:	4a0d      	ldr	r2, [pc, #52]	; (14e2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14df6:	9b01      	ldr	r3, [sp, #4]
   14df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dfc:	1e5a      	subs	r2, r3, #1
   14dfe:	490b      	ldr	r1, [pc, #44]	; (14e2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14e00:	9b01      	ldr	r3, [sp, #4]
   14e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14e06:	4a0a      	ldr	r2, [pc, #40]	; (14e30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   14e08:	9b01      	ldr	r3, [sp, #4]
   14e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e0e:	f003 0301 	and.w	r3, r3, #1
   14e12:	2b00      	cmp	r3, #0
   14e14:	d106      	bne.n	14e24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   14e16:	4a05      	ldr	r2, [pc, #20]	; (14e2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14e18:	9b01      	ldr	r3, [sp, #4]
   14e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e1e:	2b00      	cmp	r3, #0
   14e20:	d100      	bne.n	14e24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e24:	bf00      	nop
   14e26:	b003      	add	sp, #12
   14e28:	f85d fb04 	ldr.w	pc, [sp], #4
   14e2c:	1fff9674 	.word	0x1fff9674
   14e30:	1fff9670 	.word	0x1fff9670

00014e34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14e34:	b500      	push	{lr}
   14e36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e38:	f7ec fd06 	bl	1848 <Sys_GetCoreID>
   14e3c:	4603      	mov	r3, r0
   14e3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   14e40:	4a10      	ldr	r2, [pc, #64]	; (14e84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e42:	9b01      	ldr	r3, [sp, #4]
   14e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e48:	2b00      	cmp	r3, #0
   14e4a:	d10d      	bne.n	14e68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e4c:	f7eb ff00 	bl	c50 <Pwm_schm_read_msr>
   14e50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e52:	9b00      	ldr	r3, [sp, #0]
   14e54:	f003 0301 	and.w	r3, r3, #1
   14e58:	2b00      	cmp	r3, #0
   14e5a:	d100      	bne.n	14e5e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14e5e:	490a      	ldr	r1, [pc, #40]	; (14e88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   14e60:	9b01      	ldr	r3, [sp, #4]
   14e62:	9a00      	ldr	r2, [sp, #0]
   14e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   14e68:	4a06      	ldr	r2, [pc, #24]	; (14e84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e6a:	9b01      	ldr	r3, [sp, #4]
   14e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e70:	1c5a      	adds	r2, r3, #1
   14e72:	4904      	ldr	r1, [pc, #16]	; (14e84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e7a:	bf00      	nop
   14e7c:	b003      	add	sp, #12
   14e7e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e82:	bf00      	nop
   14e84:	1fff967c 	.word	0x1fff967c
   14e88:	1fff9678 	.word	0x1fff9678

00014e8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14e8c:	b500      	push	{lr}
   14e8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e90:	f7ec fcda 	bl	1848 <Sys_GetCoreID>
   14e94:	4603      	mov	r3, r0
   14e96:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   14e98:	4a0d      	ldr	r2, [pc, #52]	; (14ed0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e9a:	9b01      	ldr	r3, [sp, #4]
   14e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ea0:	1e5a      	subs	r2, r3, #1
   14ea2:	490b      	ldr	r1, [pc, #44]	; (14ed0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14ea4:	9b01      	ldr	r3, [sp, #4]
   14ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14eaa:	4a0a      	ldr	r2, [pc, #40]	; (14ed4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   14eac:	9b01      	ldr	r3, [sp, #4]
   14eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eb2:	f003 0301 	and.w	r3, r3, #1
   14eb6:	2b00      	cmp	r3, #0
   14eb8:	d106      	bne.n	14ec8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   14eba:	4a05      	ldr	r2, [pc, #20]	; (14ed0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14ebc:	9b01      	ldr	r3, [sp, #4]
   14ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d100      	bne.n	14ec8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ec6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ec8:	bf00      	nop
   14eca:	b003      	add	sp, #12
   14ecc:	f85d fb04 	ldr.w	pc, [sp], #4
   14ed0:	1fff967c 	.word	0x1fff967c
   14ed4:	1fff9678 	.word	0x1fff9678

00014ed8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14ed8:	b500      	push	{lr}
   14eda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14edc:	f7ec fcb4 	bl	1848 <Sys_GetCoreID>
   14ee0:	4603      	mov	r3, r0
   14ee2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   14ee4:	4a10      	ldr	r2, [pc, #64]	; (14f28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14ee6:	9b01      	ldr	r3, [sp, #4]
   14ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eec:	2b00      	cmp	r3, #0
   14eee:	d10d      	bne.n	14f0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ef0:	f7eb feae 	bl	c50 <Pwm_schm_read_msr>
   14ef4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ef6:	9b00      	ldr	r3, [sp, #0]
   14ef8:	f003 0301 	and.w	r3, r3, #1
   14efc:	2b00      	cmp	r3, #0
   14efe:	d100      	bne.n	14f02 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   14f02:	490a      	ldr	r1, [pc, #40]	; (14f2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   14f04:	9b01      	ldr	r3, [sp, #4]
   14f06:	9a00      	ldr	r2, [sp, #0]
   14f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   14f0c:	4a06      	ldr	r2, [pc, #24]	; (14f28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14f0e:	9b01      	ldr	r3, [sp, #4]
   14f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f14:	1c5a      	adds	r2, r3, #1
   14f16:	4904      	ldr	r1, [pc, #16]	; (14f28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14f18:	9b01      	ldr	r3, [sp, #4]
   14f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f1e:	bf00      	nop
   14f20:	b003      	add	sp, #12
   14f22:	f85d fb04 	ldr.w	pc, [sp], #4
   14f26:	bf00      	nop
   14f28:	1fff9684 	.word	0x1fff9684
   14f2c:	1fff9680 	.word	0x1fff9680

00014f30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14f30:	b500      	push	{lr}
   14f32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f34:	f7ec fc88 	bl	1848 <Sys_GetCoreID>
   14f38:	4603      	mov	r3, r0
   14f3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   14f3c:	4a0d      	ldr	r2, [pc, #52]	; (14f74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f3e:	9b01      	ldr	r3, [sp, #4]
   14f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f44:	1e5a      	subs	r2, r3, #1
   14f46:	490b      	ldr	r1, [pc, #44]	; (14f74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f48:	9b01      	ldr	r3, [sp, #4]
   14f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14f4e:	4a0a      	ldr	r2, [pc, #40]	; (14f78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   14f50:	9b01      	ldr	r3, [sp, #4]
   14f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f56:	f003 0301 	and.w	r3, r3, #1
   14f5a:	2b00      	cmp	r3, #0
   14f5c:	d106      	bne.n	14f6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   14f5e:	4a05      	ldr	r2, [pc, #20]	; (14f74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f60:	9b01      	ldr	r3, [sp, #4]
   14f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f66:	2b00      	cmp	r3, #0
   14f68:	d100      	bne.n	14f6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f6c:	bf00      	nop
   14f6e:	b003      	add	sp, #12
   14f70:	f85d fb04 	ldr.w	pc, [sp], #4
   14f74:	1fff9684 	.word	0x1fff9684
   14f78:	1fff9680 	.word	0x1fff9680

00014f7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14f7c:	b500      	push	{lr}
   14f7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f80:	f7ec fc62 	bl	1848 <Sys_GetCoreID>
   14f84:	4603      	mov	r3, r0
   14f86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   14f88:	4a10      	ldr	r2, [pc, #64]	; (14fcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f8a:	9b01      	ldr	r3, [sp, #4]
   14f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f90:	2b00      	cmp	r3, #0
   14f92:	d10d      	bne.n	14fb0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f94:	f7eb fe5c 	bl	c50 <Pwm_schm_read_msr>
   14f98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f9a:	9b00      	ldr	r3, [sp, #0]
   14f9c:	f003 0301 	and.w	r3, r3, #1
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	d100      	bne.n	14fa6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14fa6:	490a      	ldr	r1, [pc, #40]	; (14fd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   14fa8:	9b01      	ldr	r3, [sp, #4]
   14faa:	9a00      	ldr	r2, [sp, #0]
   14fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   14fb0:	4a06      	ldr	r2, [pc, #24]	; (14fcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14fb2:	9b01      	ldr	r3, [sp, #4]
   14fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fb8:	1c5a      	adds	r2, r3, #1
   14fba:	4904      	ldr	r1, [pc, #16]	; (14fcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14fbc:	9b01      	ldr	r3, [sp, #4]
   14fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14fc2:	bf00      	nop
   14fc4:	b003      	add	sp, #12
   14fc6:	f85d fb04 	ldr.w	pc, [sp], #4
   14fca:	bf00      	nop
   14fcc:	1fff968c 	.word	0x1fff968c
   14fd0:	1fff9688 	.word	0x1fff9688

00014fd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14fd4:	b500      	push	{lr}
   14fd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fd8:	f7ec fc36 	bl	1848 <Sys_GetCoreID>
   14fdc:	4603      	mov	r3, r0
   14fde:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   14fe0:	4a0d      	ldr	r2, [pc, #52]	; (15018 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fe2:	9b01      	ldr	r3, [sp, #4]
   14fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fe8:	1e5a      	subs	r2, r3, #1
   14fea:	490b      	ldr	r1, [pc, #44]	; (15018 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fec:	9b01      	ldr	r3, [sp, #4]
   14fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   14ff2:	4a0a      	ldr	r2, [pc, #40]	; (1501c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   14ff4:	9b01      	ldr	r3, [sp, #4]
   14ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ffa:	f003 0301 	and.w	r3, r3, #1
   14ffe:	2b00      	cmp	r3, #0
   15000:	d106      	bne.n	15010 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   15002:	4a05      	ldr	r2, [pc, #20]	; (15018 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   15004:	9b01      	ldr	r3, [sp, #4]
   15006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1500a:	2b00      	cmp	r3, #0
   1500c:	d100      	bne.n	15010 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1500e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15010:	bf00      	nop
   15012:	b003      	add	sp, #12
   15014:	f85d fb04 	ldr.w	pc, [sp], #4
   15018:	1fff968c 	.word	0x1fff968c
   1501c:	1fff9688 	.word	0x1fff9688

00015020 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   15020:	b500      	push	{lr}
   15022:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15024:	f7ec fc10 	bl	1848 <Sys_GetCoreID>
   15028:	4603      	mov	r3, r0
   1502a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   1502c:	4a10      	ldr	r2, [pc, #64]	; (15070 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   1502e:	9b01      	ldr	r3, [sp, #4]
   15030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15034:	2b00      	cmp	r3, #0
   15036:	d10d      	bne.n	15054 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15038:	f7eb fe0a 	bl	c50 <Pwm_schm_read_msr>
   1503c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1503e:	9b00      	ldr	r3, [sp, #0]
   15040:	f003 0301 	and.w	r3, r3, #1
   15044:	2b00      	cmp	r3, #0
   15046:	d100      	bne.n	1504a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15048:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   1504a:	490a      	ldr	r1, [pc, #40]	; (15074 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   1504c:	9b01      	ldr	r3, [sp, #4]
   1504e:	9a00      	ldr	r2, [sp, #0]
   15050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   15054:	4a06      	ldr	r2, [pc, #24]	; (15070 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   15056:	9b01      	ldr	r3, [sp, #4]
   15058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505c:	1c5a      	adds	r2, r3, #1
   1505e:	4904      	ldr	r1, [pc, #16]	; (15070 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   15060:	9b01      	ldr	r3, [sp, #4]
   15062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15066:	bf00      	nop
   15068:	b003      	add	sp, #12
   1506a:	f85d fb04 	ldr.w	pc, [sp], #4
   1506e:	bf00      	nop
   15070:	1fff9694 	.word	0x1fff9694
   15074:	1fff9690 	.word	0x1fff9690

00015078 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   15078:	b500      	push	{lr}
   1507a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1507c:	f7ec fbe4 	bl	1848 <Sys_GetCoreID>
   15080:	4603      	mov	r3, r0
   15082:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   15084:	4a0d      	ldr	r2, [pc, #52]	; (150bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15086:	9b01      	ldr	r3, [sp, #4]
   15088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1508c:	1e5a      	subs	r2, r3, #1
   1508e:	490b      	ldr	r1, [pc, #44]	; (150bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15090:	9b01      	ldr	r3, [sp, #4]
   15092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   15096:	4a0a      	ldr	r2, [pc, #40]	; (150c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   15098:	9b01      	ldr	r3, [sp, #4]
   1509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1509e:	f003 0301 	and.w	r3, r3, #1
   150a2:	2b00      	cmp	r3, #0
   150a4:	d106      	bne.n	150b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   150a6:	4a05      	ldr	r2, [pc, #20]	; (150bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   150a8:	9b01      	ldr	r3, [sp, #4]
   150aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150ae:	2b00      	cmp	r3, #0
   150b0:	d100      	bne.n	150b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150b4:	bf00      	nop
   150b6:	b003      	add	sp, #12
   150b8:	f85d fb04 	ldr.w	pc, [sp], #4
   150bc:	1fff9694 	.word	0x1fff9694
   150c0:	1fff9690 	.word	0x1fff9690

000150c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   150c4:	b500      	push	{lr}
   150c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150c8:	f7ec fbbe 	bl	1848 <Sys_GetCoreID>
   150cc:	4603      	mov	r3, r0
   150ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   150d0:	4a10      	ldr	r2, [pc, #64]	; (15114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   150d2:	9b01      	ldr	r3, [sp, #4]
   150d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150d8:	2b00      	cmp	r3, #0
   150da:	d10d      	bne.n	150f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150dc:	f7eb fdb8 	bl	c50 <Pwm_schm_read_msr>
   150e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150e2:	9b00      	ldr	r3, [sp, #0]
   150e4:	f003 0301 	and.w	r3, r3, #1
   150e8:	2b00      	cmp	r3, #0
   150ea:	d100      	bne.n	150ee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   150ee:	490a      	ldr	r1, [pc, #40]	; (15118 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   150f0:	9b01      	ldr	r3, [sp, #4]
   150f2:	9a00      	ldr	r2, [sp, #0]
   150f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   150f8:	4a06      	ldr	r2, [pc, #24]	; (15114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   150fa:	9b01      	ldr	r3, [sp, #4]
   150fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15100:	1c5a      	adds	r2, r3, #1
   15102:	4904      	ldr	r1, [pc, #16]	; (15114 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   15104:	9b01      	ldr	r3, [sp, #4]
   15106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1510a:	bf00      	nop
   1510c:	b003      	add	sp, #12
   1510e:	f85d fb04 	ldr.w	pc, [sp], #4
   15112:	bf00      	nop
   15114:	1fff969c 	.word	0x1fff969c
   15118:	1fff9698 	.word	0x1fff9698

0001511c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   1511c:	b500      	push	{lr}
   1511e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15120:	f7ec fb92 	bl	1848 <Sys_GetCoreID>
   15124:	4603      	mov	r3, r0
   15126:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   15128:	4a0d      	ldr	r2, [pc, #52]	; (15160 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   1512a:	9b01      	ldr	r3, [sp, #4]
   1512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15130:	1e5a      	subs	r2, r3, #1
   15132:	490b      	ldr	r1, [pc, #44]	; (15160 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   15134:	9b01      	ldr	r3, [sp, #4]
   15136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   1513a:	4a0a      	ldr	r2, [pc, #40]	; (15164 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   1513c:	9b01      	ldr	r3, [sp, #4]
   1513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15142:	f003 0301 	and.w	r3, r3, #1
   15146:	2b00      	cmp	r3, #0
   15148:	d106      	bne.n	15158 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   1514a:	4a05      	ldr	r2, [pc, #20]	; (15160 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   1514c:	9b01      	ldr	r3, [sp, #4]
   1514e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15152:	2b00      	cmp	r3, #0
   15154:	d100      	bne.n	15158 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15156:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15158:	bf00      	nop
   1515a:	b003      	add	sp, #12
   1515c:	f85d fb04 	ldr.w	pc, [sp], #4
   15160:	1fff969c 	.word	0x1fff969c
   15164:	1fff9698 	.word	0x1fff9698

00015168 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   15168:	b500      	push	{lr}
   1516a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1516c:	f7ec fb6c 	bl	1848 <Sys_GetCoreID>
   15170:	4603      	mov	r3, r0
   15172:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   15174:	4a10      	ldr	r2, [pc, #64]	; (151b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   15176:	9b01      	ldr	r3, [sp, #4]
   15178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1517c:	2b00      	cmp	r3, #0
   1517e:	d10d      	bne.n	1519c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15180:	f7eb fd66 	bl	c50 <Pwm_schm_read_msr>
   15184:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15186:	9b00      	ldr	r3, [sp, #0]
   15188:	f003 0301 	and.w	r3, r3, #1
   1518c:	2b00      	cmp	r3, #0
   1518e:	d100      	bne.n	15192 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15190:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   15192:	490a      	ldr	r1, [pc, #40]	; (151bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   15194:	9b01      	ldr	r3, [sp, #4]
   15196:	9a00      	ldr	r2, [sp, #0]
   15198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   1519c:	4a06      	ldr	r2, [pc, #24]	; (151b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   1519e:	9b01      	ldr	r3, [sp, #4]
   151a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151a4:	1c5a      	adds	r2, r3, #1
   151a6:	4904      	ldr	r1, [pc, #16]	; (151b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   151a8:	9b01      	ldr	r3, [sp, #4]
   151aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151ae:	bf00      	nop
   151b0:	b003      	add	sp, #12
   151b2:	f85d fb04 	ldr.w	pc, [sp], #4
   151b6:	bf00      	nop
   151b8:	1fff96a4 	.word	0x1fff96a4
   151bc:	1fff96a0 	.word	0x1fff96a0

000151c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   151c0:	b500      	push	{lr}
   151c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151c4:	f7ec fb40 	bl	1848 <Sys_GetCoreID>
   151c8:	4603      	mov	r3, r0
   151ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   151cc:	4a0d      	ldr	r2, [pc, #52]	; (15204 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   151ce:	9b01      	ldr	r3, [sp, #4]
   151d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151d4:	1e5a      	subs	r2, r3, #1
   151d6:	490b      	ldr	r1, [pc, #44]	; (15204 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   151d8:	9b01      	ldr	r3, [sp, #4]
   151da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   151de:	4a0a      	ldr	r2, [pc, #40]	; (15208 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   151e0:	9b01      	ldr	r3, [sp, #4]
   151e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151e6:	f003 0301 	and.w	r3, r3, #1
   151ea:	2b00      	cmp	r3, #0
   151ec:	d106      	bne.n	151fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   151ee:	4a05      	ldr	r2, [pc, #20]	; (15204 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   151f0:	9b01      	ldr	r3, [sp, #4]
   151f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151f6:	2b00      	cmp	r3, #0
   151f8:	d100      	bne.n	151fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151fc:	bf00      	nop
   151fe:	b003      	add	sp, #12
   15200:	f85d fb04 	ldr.w	pc, [sp], #4
   15204:	1fff96a4 	.word	0x1fff96a4
   15208:	1fff96a0 	.word	0x1fff96a0

0001520c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   1520c:	b500      	push	{lr}
   1520e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15210:	f7ec fb1a 	bl	1848 <Sys_GetCoreID>
   15214:	4603      	mov	r3, r0
   15216:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   15218:	4a10      	ldr	r2, [pc, #64]	; (1525c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1521a:	9b01      	ldr	r3, [sp, #4]
   1521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15220:	2b00      	cmp	r3, #0
   15222:	d10d      	bne.n	15240 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15224:	f7eb fd14 	bl	c50 <Pwm_schm_read_msr>
   15228:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1522a:	9b00      	ldr	r3, [sp, #0]
   1522c:	f003 0301 	and.w	r3, r3, #1
   15230:	2b00      	cmp	r3, #0
   15232:	d100      	bne.n	15236 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15234:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   15236:	490a      	ldr	r1, [pc, #40]	; (15260 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   15238:	9b01      	ldr	r3, [sp, #4]
   1523a:	9a00      	ldr	r2, [sp, #0]
   1523c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   15240:	4a06      	ldr	r2, [pc, #24]	; (1525c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   15242:	9b01      	ldr	r3, [sp, #4]
   15244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15248:	1c5a      	adds	r2, r3, #1
   1524a:	4904      	ldr	r1, [pc, #16]	; (1525c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1524c:	9b01      	ldr	r3, [sp, #4]
   1524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15252:	bf00      	nop
   15254:	b003      	add	sp, #12
   15256:	f85d fb04 	ldr.w	pc, [sp], #4
   1525a:	bf00      	nop
   1525c:	1fff96ac 	.word	0x1fff96ac
   15260:	1fff96a8 	.word	0x1fff96a8

00015264 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   15264:	b500      	push	{lr}
   15266:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15268:	f7ec faee 	bl	1848 <Sys_GetCoreID>
   1526c:	4603      	mov	r3, r0
   1526e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   15270:	4a0d      	ldr	r2, [pc, #52]	; (152a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   15272:	9b01      	ldr	r3, [sp, #4]
   15274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15278:	1e5a      	subs	r2, r3, #1
   1527a:	490b      	ldr	r1, [pc, #44]	; (152a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1527c:	9b01      	ldr	r3, [sp, #4]
   1527e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   15282:	4a0a      	ldr	r2, [pc, #40]	; (152ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   15284:	9b01      	ldr	r3, [sp, #4]
   15286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1528a:	f003 0301 	and.w	r3, r3, #1
   1528e:	2b00      	cmp	r3, #0
   15290:	d106      	bne.n	152a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   15292:	4a05      	ldr	r2, [pc, #20]	; (152a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   15294:	9b01      	ldr	r3, [sp, #4]
   15296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1529a:	2b00      	cmp	r3, #0
   1529c:	d100      	bne.n	152a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1529e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152a0:	bf00      	nop
   152a2:	b003      	add	sp, #12
   152a4:	f85d fb04 	ldr.w	pc, [sp], #4
   152a8:	1fff96ac 	.word	0x1fff96ac
   152ac:	1fff96a8 	.word	0x1fff96a8

000152b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   152b0:	b500      	push	{lr}
   152b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152b4:	f7ec fac8 	bl	1848 <Sys_GetCoreID>
   152b8:	4603      	mov	r3, r0
   152ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   152bc:	4a10      	ldr	r2, [pc, #64]	; (15300 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152be:	9b01      	ldr	r3, [sp, #4]
   152c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152c4:	2b00      	cmp	r3, #0
   152c6:	d10d      	bne.n	152e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   152c8:	f7eb fcc2 	bl	c50 <Pwm_schm_read_msr>
   152cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   152ce:	9b00      	ldr	r3, [sp, #0]
   152d0:	f003 0301 	and.w	r3, r3, #1
   152d4:	2b00      	cmp	r3, #0
   152d6:	d100      	bne.n	152da <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   152da:	490a      	ldr	r1, [pc, #40]	; (15304 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   152dc:	9b01      	ldr	r3, [sp, #4]
   152de:	9a00      	ldr	r2, [sp, #0]
   152e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   152e4:	4a06      	ldr	r2, [pc, #24]	; (15300 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152e6:	9b01      	ldr	r3, [sp, #4]
   152e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ec:	1c5a      	adds	r2, r3, #1
   152ee:	4904      	ldr	r1, [pc, #16]	; (15300 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152f6:	bf00      	nop
   152f8:	b003      	add	sp, #12
   152fa:	f85d fb04 	ldr.w	pc, [sp], #4
   152fe:	bf00      	nop
   15300:	1fff96b4 	.word	0x1fff96b4
   15304:	1fff96b0 	.word	0x1fff96b0

00015308 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   15308:	b500      	push	{lr}
   1530a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1530c:	f7ec fa9c 	bl	1848 <Sys_GetCoreID>
   15310:	4603      	mov	r3, r0
   15312:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   15314:	4a0d      	ldr	r2, [pc, #52]	; (1534c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   15316:	9b01      	ldr	r3, [sp, #4]
   15318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1531c:	1e5a      	subs	r2, r3, #1
   1531e:	490b      	ldr	r1, [pc, #44]	; (1534c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   15320:	9b01      	ldr	r3, [sp, #4]
   15322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   15326:	4a0a      	ldr	r2, [pc, #40]	; (15350 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   15328:	9b01      	ldr	r3, [sp, #4]
   1532a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1532e:	f003 0301 	and.w	r3, r3, #1
   15332:	2b00      	cmp	r3, #0
   15334:	d106      	bne.n	15344 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   15336:	4a05      	ldr	r2, [pc, #20]	; (1534c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   15338:	9b01      	ldr	r3, [sp, #4]
   1533a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1533e:	2b00      	cmp	r3, #0
   15340:	d100      	bne.n	15344 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15342:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15344:	bf00      	nop
   15346:	b003      	add	sp, #12
   15348:	f85d fb04 	ldr.w	pc, [sp], #4
   1534c:	1fff96b4 	.word	0x1fff96b4
   15350:	1fff96b0 	.word	0x1fff96b0

00015354 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   15354:	b500      	push	{lr}
   15356:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15358:	f7ec fa76 	bl	1848 <Sys_GetCoreID>
   1535c:	4603      	mov	r3, r0
   1535e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   15360:	4a10      	ldr	r2, [pc, #64]	; (153a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   15362:	9b01      	ldr	r3, [sp, #4]
   15364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15368:	2b00      	cmp	r3, #0
   1536a:	d10d      	bne.n	15388 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1536c:	f7eb fc70 	bl	c50 <Pwm_schm_read_msr>
   15370:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15372:	9b00      	ldr	r3, [sp, #0]
   15374:	f003 0301 	and.w	r3, r3, #1
   15378:	2b00      	cmp	r3, #0
   1537a:	d100      	bne.n	1537e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1537c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1537e:	490a      	ldr	r1, [pc, #40]	; (153a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   15380:	9b01      	ldr	r3, [sp, #4]
   15382:	9a00      	ldr	r2, [sp, #0]
   15384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   15388:	4a06      	ldr	r2, [pc, #24]	; (153a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1538a:	9b01      	ldr	r3, [sp, #4]
   1538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15390:	1c5a      	adds	r2, r3, #1
   15392:	4904      	ldr	r1, [pc, #16]	; (153a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   15394:	9b01      	ldr	r3, [sp, #4]
   15396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1539a:	bf00      	nop
   1539c:	b003      	add	sp, #12
   1539e:	f85d fb04 	ldr.w	pc, [sp], #4
   153a2:	bf00      	nop
   153a4:	1fff96bc 	.word	0x1fff96bc
   153a8:	1fff96b8 	.word	0x1fff96b8

000153ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   153ac:	b500      	push	{lr}
   153ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153b0:	f7ec fa4a 	bl	1848 <Sys_GetCoreID>
   153b4:	4603      	mov	r3, r0
   153b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   153b8:	4a0d      	ldr	r2, [pc, #52]	; (153f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   153ba:	9b01      	ldr	r3, [sp, #4]
   153bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153c0:	1e5a      	subs	r2, r3, #1
   153c2:	490b      	ldr	r1, [pc, #44]	; (153f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   153c4:	9b01      	ldr	r3, [sp, #4]
   153c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   153ca:	4a0a      	ldr	r2, [pc, #40]	; (153f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   153cc:	9b01      	ldr	r3, [sp, #4]
   153ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153d2:	f003 0301 	and.w	r3, r3, #1
   153d6:	2b00      	cmp	r3, #0
   153d8:	d106      	bne.n	153e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   153da:	4a05      	ldr	r2, [pc, #20]	; (153f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   153dc:	9b01      	ldr	r3, [sp, #4]
   153de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153e2:	2b00      	cmp	r3, #0
   153e4:	d100      	bne.n	153e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153e8:	bf00      	nop
   153ea:	b003      	add	sp, #12
   153ec:	f85d fb04 	ldr.w	pc, [sp], #4
   153f0:	1fff96bc 	.word	0x1fff96bc
   153f4:	1fff96b8 	.word	0x1fff96b8

000153f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   153f8:	b500      	push	{lr}
   153fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153fc:	f7ec fa24 	bl	1848 <Sys_GetCoreID>
   15400:	4603      	mov	r3, r0
   15402:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   15404:	4a10      	ldr	r2, [pc, #64]	; (15448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   15406:	9b01      	ldr	r3, [sp, #4]
   15408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1540c:	2b00      	cmp	r3, #0
   1540e:	d10d      	bne.n	1542c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15410:	f7eb fc1e 	bl	c50 <Pwm_schm_read_msr>
   15414:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15416:	9b00      	ldr	r3, [sp, #0]
   15418:	f003 0301 	and.w	r3, r3, #1
   1541c:	2b00      	cmp	r3, #0
   1541e:	d100      	bne.n	15422 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15420:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   15422:	490a      	ldr	r1, [pc, #40]	; (1544c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   15424:	9b01      	ldr	r3, [sp, #4]
   15426:	9a00      	ldr	r2, [sp, #0]
   15428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   1542c:	4a06      	ldr	r2, [pc, #24]	; (15448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   1542e:	9b01      	ldr	r3, [sp, #4]
   15430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15434:	1c5a      	adds	r2, r3, #1
   15436:	4904      	ldr	r1, [pc, #16]	; (15448 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   15438:	9b01      	ldr	r3, [sp, #4]
   1543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1543e:	bf00      	nop
   15440:	b003      	add	sp, #12
   15442:	f85d fb04 	ldr.w	pc, [sp], #4
   15446:	bf00      	nop
   15448:	1fff96c4 	.word	0x1fff96c4
   1544c:	1fff96c0 	.word	0x1fff96c0

00015450 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   15450:	b500      	push	{lr}
   15452:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15454:	f7ec f9f8 	bl	1848 <Sys_GetCoreID>
   15458:	4603      	mov	r3, r0
   1545a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   1545c:	4a0d      	ldr	r2, [pc, #52]	; (15494 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   1545e:	9b01      	ldr	r3, [sp, #4]
   15460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15464:	1e5a      	subs	r2, r3, #1
   15466:	490b      	ldr	r1, [pc, #44]	; (15494 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15468:	9b01      	ldr	r3, [sp, #4]
   1546a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1546e:	4a0a      	ldr	r2, [pc, #40]	; (15498 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   15470:	9b01      	ldr	r3, [sp, #4]
   15472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15476:	f003 0301 	and.w	r3, r3, #1
   1547a:	2b00      	cmp	r3, #0
   1547c:	d106      	bne.n	1548c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   1547e:	4a05      	ldr	r2, [pc, #20]	; (15494 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15480:	9b01      	ldr	r3, [sp, #4]
   15482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15486:	2b00      	cmp	r3, #0
   15488:	d100      	bne.n	1548c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1548a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1548c:	bf00      	nop
   1548e:	b003      	add	sp, #12
   15490:	f85d fb04 	ldr.w	pc, [sp], #4
   15494:	1fff96c4 	.word	0x1fff96c4
   15498:	1fff96c0 	.word	0x1fff96c0

0001549c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   1549c:	b500      	push	{lr}
   1549e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154a0:	f7ec f9d2 	bl	1848 <Sys_GetCoreID>
   154a4:	4603      	mov	r3, r0
   154a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   154a8:	4a10      	ldr	r2, [pc, #64]	; (154ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   154aa:	9b01      	ldr	r3, [sp, #4]
   154ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154b0:	2b00      	cmp	r3, #0
   154b2:	d10d      	bne.n	154d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154b4:	f7eb fbcc 	bl	c50 <Pwm_schm_read_msr>
   154b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154ba:	9b00      	ldr	r3, [sp, #0]
   154bc:	f003 0301 	and.w	r3, r3, #1
   154c0:	2b00      	cmp	r3, #0
   154c2:	d100      	bne.n	154c6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   154c6:	490a      	ldr	r1, [pc, #40]	; (154f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   154c8:	9b01      	ldr	r3, [sp, #4]
   154ca:	9a00      	ldr	r2, [sp, #0]
   154cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   154d0:	4a06      	ldr	r2, [pc, #24]	; (154ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   154d2:	9b01      	ldr	r3, [sp, #4]
   154d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154d8:	1c5a      	adds	r2, r3, #1
   154da:	4904      	ldr	r1, [pc, #16]	; (154ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154e2:	bf00      	nop
   154e4:	b003      	add	sp, #12
   154e6:	f85d fb04 	ldr.w	pc, [sp], #4
   154ea:	bf00      	nop
   154ec:	1fff96cc 	.word	0x1fff96cc
   154f0:	1fff96c8 	.word	0x1fff96c8

000154f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   154f4:	b500      	push	{lr}
   154f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154f8:	f7ec f9a6 	bl	1848 <Sys_GetCoreID>
   154fc:	4603      	mov	r3, r0
   154fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   15500:	4a0d      	ldr	r2, [pc, #52]	; (15538 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   15502:	9b01      	ldr	r3, [sp, #4]
   15504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15508:	1e5a      	subs	r2, r3, #1
   1550a:	490b      	ldr	r1, [pc, #44]	; (15538 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   1550c:	9b01      	ldr	r3, [sp, #4]
   1550e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   15512:	4a0a      	ldr	r2, [pc, #40]	; (1553c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   15514:	9b01      	ldr	r3, [sp, #4]
   15516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1551a:	f003 0301 	and.w	r3, r3, #1
   1551e:	2b00      	cmp	r3, #0
   15520:	d106      	bne.n	15530 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   15522:	4a05      	ldr	r2, [pc, #20]	; (15538 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   15524:	9b01      	ldr	r3, [sp, #4]
   15526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1552a:	2b00      	cmp	r3, #0
   1552c:	d100      	bne.n	15530 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1552e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15530:	bf00      	nop
   15532:	b003      	add	sp, #12
   15534:	f85d fb04 	ldr.w	pc, [sp], #4
   15538:	1fff96cc 	.word	0x1fff96cc
   1553c:	1fff96c8 	.word	0x1fff96c8

00015540 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15540:	b500      	push	{lr}
   15542:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15544:	f7ec f980 	bl	1848 <Sys_GetCoreID>
   15548:	4603      	mov	r3, r0
   1554a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   1554c:	4a10      	ldr	r2, [pc, #64]	; (15590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   1554e:	9b01      	ldr	r3, [sp, #4]
   15550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15554:	2b00      	cmp	r3, #0
   15556:	d10d      	bne.n	15574 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15558:	f7eb fb7a 	bl	c50 <Pwm_schm_read_msr>
   1555c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1555e:	9b00      	ldr	r3, [sp, #0]
   15560:	f003 0301 	and.w	r3, r3, #1
   15564:	2b00      	cmp	r3, #0
   15566:	d100      	bne.n	1556a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15568:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   1556a:	490a      	ldr	r1, [pc, #40]	; (15594 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   1556c:	9b01      	ldr	r3, [sp, #4]
   1556e:	9a00      	ldr	r2, [sp, #0]
   15570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   15574:	4a06      	ldr	r2, [pc, #24]	; (15590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15576:	9b01      	ldr	r3, [sp, #4]
   15578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1557c:	1c5a      	adds	r2, r3, #1
   1557e:	4904      	ldr	r1, [pc, #16]	; (15590 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15580:	9b01      	ldr	r3, [sp, #4]
   15582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15586:	bf00      	nop
   15588:	b003      	add	sp, #12
   1558a:	f85d fb04 	ldr.w	pc, [sp], #4
   1558e:	bf00      	nop
   15590:	1fff96d4 	.word	0x1fff96d4
   15594:	1fff96d0 	.word	0x1fff96d0

00015598 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15598:	b500      	push	{lr}
   1559a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1559c:	f7ec f954 	bl	1848 <Sys_GetCoreID>
   155a0:	4603      	mov	r3, r0
   155a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   155a4:	4a0d      	ldr	r2, [pc, #52]	; (155dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   155a6:	9b01      	ldr	r3, [sp, #4]
   155a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ac:	1e5a      	subs	r2, r3, #1
   155ae:	490b      	ldr	r1, [pc, #44]	; (155dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   155b0:	9b01      	ldr	r3, [sp, #4]
   155b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   155b6:	4a0a      	ldr	r2, [pc, #40]	; (155e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   155b8:	9b01      	ldr	r3, [sp, #4]
   155ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155be:	f003 0301 	and.w	r3, r3, #1
   155c2:	2b00      	cmp	r3, #0
   155c4:	d106      	bne.n	155d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   155c6:	4a05      	ldr	r2, [pc, #20]	; (155dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   155c8:	9b01      	ldr	r3, [sp, #4]
   155ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155ce:	2b00      	cmp	r3, #0
   155d0:	d100      	bne.n	155d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155d4:	bf00      	nop
   155d6:	b003      	add	sp, #12
   155d8:	f85d fb04 	ldr.w	pc, [sp], #4
   155dc:	1fff96d4 	.word	0x1fff96d4
   155e0:	1fff96d0 	.word	0x1fff96d0

000155e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   155e4:	b500      	push	{lr}
   155e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155e8:	f7ec f92e 	bl	1848 <Sys_GetCoreID>
   155ec:	4603      	mov	r3, r0
   155ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   155f0:	4a10      	ldr	r2, [pc, #64]	; (15634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155f2:	9b01      	ldr	r3, [sp, #4]
   155f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f8:	2b00      	cmp	r3, #0
   155fa:	d10d      	bne.n	15618 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155fc:	f7eb fb28 	bl	c50 <Pwm_schm_read_msr>
   15600:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15602:	9b00      	ldr	r3, [sp, #0]
   15604:	f003 0301 	and.w	r3, r3, #1
   15608:	2b00      	cmp	r3, #0
   1560a:	d100      	bne.n	1560e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1560c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1560e:	490a      	ldr	r1, [pc, #40]	; (15638 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   15610:	9b01      	ldr	r3, [sp, #4]
   15612:	9a00      	ldr	r2, [sp, #0]
   15614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   15618:	4a06      	ldr	r2, [pc, #24]	; (15634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   1561a:	9b01      	ldr	r3, [sp, #4]
   1561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15620:	1c5a      	adds	r2, r3, #1
   15622:	4904      	ldr	r1, [pc, #16]	; (15634 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   15624:	9b01      	ldr	r3, [sp, #4]
   15626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1562a:	bf00      	nop
   1562c:	b003      	add	sp, #12
   1562e:	f85d fb04 	ldr.w	pc, [sp], #4
   15632:	bf00      	nop
   15634:	1fff96dc 	.word	0x1fff96dc
   15638:	1fff96d8 	.word	0x1fff96d8

0001563c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   1563c:	b500      	push	{lr}
   1563e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15640:	f7ec f902 	bl	1848 <Sys_GetCoreID>
   15644:	4603      	mov	r3, r0
   15646:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   15648:	4a0d      	ldr	r2, [pc, #52]	; (15680 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   1564a:	9b01      	ldr	r3, [sp, #4]
   1564c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15650:	1e5a      	subs	r2, r3, #1
   15652:	490b      	ldr	r1, [pc, #44]	; (15680 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   15654:	9b01      	ldr	r3, [sp, #4]
   15656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1565a:	4a0a      	ldr	r2, [pc, #40]	; (15684 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   1565c:	9b01      	ldr	r3, [sp, #4]
   1565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15662:	f003 0301 	and.w	r3, r3, #1
   15666:	2b00      	cmp	r3, #0
   15668:	d106      	bne.n	15678 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   1566a:	4a05      	ldr	r2, [pc, #20]	; (15680 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   1566c:	9b01      	ldr	r3, [sp, #4]
   1566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15672:	2b00      	cmp	r3, #0
   15674:	d100      	bne.n	15678 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15676:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15678:	bf00      	nop
   1567a:	b003      	add	sp, #12
   1567c:	f85d fb04 	ldr.w	pc, [sp], #4
   15680:	1fff96dc 	.word	0x1fff96dc
   15684:	1fff96d8 	.word	0x1fff96d8

00015688 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   15688:	b500      	push	{lr}
   1568a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1568c:	f7ec f8dc 	bl	1848 <Sys_GetCoreID>
   15690:	4603      	mov	r3, r0
   15692:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   15694:	4a10      	ldr	r2, [pc, #64]	; (156d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15696:	9b01      	ldr	r3, [sp, #4]
   15698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1569c:	2b00      	cmp	r3, #0
   1569e:	d10d      	bne.n	156bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156a0:	f7eb fad6 	bl	c50 <Pwm_schm_read_msr>
   156a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156a6:	9b00      	ldr	r3, [sp, #0]
   156a8:	f003 0301 	and.w	r3, r3, #1
   156ac:	2b00      	cmp	r3, #0
   156ae:	d100      	bne.n	156b2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   156b2:	490a      	ldr	r1, [pc, #40]	; (156dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   156b4:	9b01      	ldr	r3, [sp, #4]
   156b6:	9a00      	ldr	r2, [sp, #0]
   156b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   156bc:	4a06      	ldr	r2, [pc, #24]	; (156d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   156be:	9b01      	ldr	r3, [sp, #4]
   156c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156c4:	1c5a      	adds	r2, r3, #1
   156c6:	4904      	ldr	r1, [pc, #16]	; (156d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   156c8:	9b01      	ldr	r3, [sp, #4]
   156ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   156ce:	bf00      	nop
   156d0:	b003      	add	sp, #12
   156d2:	f85d fb04 	ldr.w	pc, [sp], #4
   156d6:	bf00      	nop
   156d8:	1fff96e4 	.word	0x1fff96e4
   156dc:	1fff96e0 	.word	0x1fff96e0

000156e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   156e0:	b500      	push	{lr}
   156e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156e4:	f7ec f8b0 	bl	1848 <Sys_GetCoreID>
   156e8:	4603      	mov	r3, r0
   156ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   156ec:	4a0d      	ldr	r2, [pc, #52]	; (15724 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156ee:	9b01      	ldr	r3, [sp, #4]
   156f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156f4:	1e5a      	subs	r2, r3, #1
   156f6:	490b      	ldr	r1, [pc, #44]	; (15724 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156f8:	9b01      	ldr	r3, [sp, #4]
   156fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   156fe:	4a0a      	ldr	r2, [pc, #40]	; (15728 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   15700:	9b01      	ldr	r3, [sp, #4]
   15702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15706:	f003 0301 	and.w	r3, r3, #1
   1570a:	2b00      	cmp	r3, #0
   1570c:	d106      	bne.n	1571c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   1570e:	4a05      	ldr	r2, [pc, #20]	; (15724 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   15710:	9b01      	ldr	r3, [sp, #4]
   15712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15716:	2b00      	cmp	r3, #0
   15718:	d100      	bne.n	1571c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1571a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1571c:	bf00      	nop
   1571e:	b003      	add	sp, #12
   15720:	f85d fb04 	ldr.w	pc, [sp], #4
   15724:	1fff96e4 	.word	0x1fff96e4
   15728:	1fff96e0 	.word	0x1fff96e0

0001572c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   1572c:	b500      	push	{lr}
   1572e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15730:	f7ec f88a 	bl	1848 <Sys_GetCoreID>
   15734:	4603      	mov	r3, r0
   15736:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   15738:	4a10      	ldr	r2, [pc, #64]	; (1577c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   1573a:	9b01      	ldr	r3, [sp, #4]
   1573c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15740:	2b00      	cmp	r3, #0
   15742:	d10d      	bne.n	15760 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15744:	f7eb fa84 	bl	c50 <Pwm_schm_read_msr>
   15748:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1574a:	9b00      	ldr	r3, [sp, #0]
   1574c:	f003 0301 	and.w	r3, r3, #1
   15750:	2b00      	cmp	r3, #0
   15752:	d100      	bne.n	15756 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15754:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   15756:	490a      	ldr	r1, [pc, #40]	; (15780 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   15758:	9b01      	ldr	r3, [sp, #4]
   1575a:	9a00      	ldr	r2, [sp, #0]
   1575c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   15760:	4a06      	ldr	r2, [pc, #24]	; (1577c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   15762:	9b01      	ldr	r3, [sp, #4]
   15764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15768:	1c5a      	adds	r2, r3, #1
   1576a:	4904      	ldr	r1, [pc, #16]	; (1577c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   1576c:	9b01      	ldr	r3, [sp, #4]
   1576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15772:	bf00      	nop
   15774:	b003      	add	sp, #12
   15776:	f85d fb04 	ldr.w	pc, [sp], #4
   1577a:	bf00      	nop
   1577c:	1fff96ec 	.word	0x1fff96ec
   15780:	1fff96e8 	.word	0x1fff96e8

00015784 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   15784:	b500      	push	{lr}
   15786:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15788:	f7ec f85e 	bl	1848 <Sys_GetCoreID>
   1578c:	4603      	mov	r3, r0
   1578e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   15790:	4a0d      	ldr	r2, [pc, #52]	; (157c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   15792:	9b01      	ldr	r3, [sp, #4]
   15794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15798:	1e5a      	subs	r2, r3, #1
   1579a:	490b      	ldr	r1, [pc, #44]	; (157c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   1579c:	9b01      	ldr	r3, [sp, #4]
   1579e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   157a2:	4a0a      	ldr	r2, [pc, #40]	; (157cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   157a4:	9b01      	ldr	r3, [sp, #4]
   157a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157aa:	f003 0301 	and.w	r3, r3, #1
   157ae:	2b00      	cmp	r3, #0
   157b0:	d106      	bne.n	157c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   157b2:	4a05      	ldr	r2, [pc, #20]	; (157c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   157b4:	9b01      	ldr	r3, [sp, #4]
   157b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157ba:	2b00      	cmp	r3, #0
   157bc:	d100      	bne.n	157c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157c0:	bf00      	nop
   157c2:	b003      	add	sp, #12
   157c4:	f85d fb04 	ldr.w	pc, [sp], #4
   157c8:	1fff96ec 	.word	0x1fff96ec
   157cc:	1fff96e8 	.word	0x1fff96e8

000157d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   157d0:	b500      	push	{lr}
   157d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157d4:	f7ec f838 	bl	1848 <Sys_GetCoreID>
   157d8:	4603      	mov	r3, r0
   157da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   157dc:	4a10      	ldr	r2, [pc, #64]	; (15820 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   157de:	9b01      	ldr	r3, [sp, #4]
   157e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157e4:	2b00      	cmp	r3, #0
   157e6:	d10d      	bne.n	15804 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157e8:	f7eb fa32 	bl	c50 <Pwm_schm_read_msr>
   157ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157ee:	9b00      	ldr	r3, [sp, #0]
   157f0:	f003 0301 	and.w	r3, r3, #1
   157f4:	2b00      	cmp	r3, #0
   157f6:	d100      	bne.n	157fa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   157fa:	490a      	ldr	r1, [pc, #40]	; (15824 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   157fc:	9b01      	ldr	r3, [sp, #4]
   157fe:	9a00      	ldr	r2, [sp, #0]
   15800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   15804:	4a06      	ldr	r2, [pc, #24]	; (15820 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   15806:	9b01      	ldr	r3, [sp, #4]
   15808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1580c:	1c5a      	adds	r2, r3, #1
   1580e:	4904      	ldr	r1, [pc, #16]	; (15820 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   15810:	9b01      	ldr	r3, [sp, #4]
   15812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15816:	bf00      	nop
   15818:	b003      	add	sp, #12
   1581a:	f85d fb04 	ldr.w	pc, [sp], #4
   1581e:	bf00      	nop
   15820:	1fff96f4 	.word	0x1fff96f4
   15824:	1fff96f0 	.word	0x1fff96f0

00015828 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   15828:	b500      	push	{lr}
   1582a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1582c:	f7ec f80c 	bl	1848 <Sys_GetCoreID>
   15830:	4603      	mov	r3, r0
   15832:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   15834:	4a0d      	ldr	r2, [pc, #52]	; (1586c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15836:	9b01      	ldr	r3, [sp, #4]
   15838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1583c:	1e5a      	subs	r2, r3, #1
   1583e:	490b      	ldr	r1, [pc, #44]	; (1586c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15840:	9b01      	ldr	r3, [sp, #4]
   15842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   15846:	4a0a      	ldr	r2, [pc, #40]	; (15870 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   15848:	9b01      	ldr	r3, [sp, #4]
   1584a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1584e:	f003 0301 	and.w	r3, r3, #1
   15852:	2b00      	cmp	r3, #0
   15854:	d106      	bne.n	15864 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   15856:	4a05      	ldr	r2, [pc, #20]	; (1586c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15858:	9b01      	ldr	r3, [sp, #4]
   1585a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1585e:	2b00      	cmp	r3, #0
   15860:	d100      	bne.n	15864 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15862:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15864:	bf00      	nop
   15866:	b003      	add	sp, #12
   15868:	f85d fb04 	ldr.w	pc, [sp], #4
   1586c:	1fff96f4 	.word	0x1fff96f4
   15870:	1fff96f0 	.word	0x1fff96f0

00015874 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   15874:	b500      	push	{lr}
   15876:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15878:	f7eb ffe6 	bl	1848 <Sys_GetCoreID>
   1587c:	4603      	mov	r3, r0
   1587e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   15880:	4a10      	ldr	r2, [pc, #64]	; (158c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   15882:	9b01      	ldr	r3, [sp, #4]
   15884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15888:	2b00      	cmp	r3, #0
   1588a:	d10d      	bne.n	158a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1588c:	f7eb f9e0 	bl	c50 <Pwm_schm_read_msr>
   15890:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15892:	9b00      	ldr	r3, [sp, #0]
   15894:	f003 0301 	and.w	r3, r3, #1
   15898:	2b00      	cmp	r3, #0
   1589a:	d100      	bne.n	1589e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1589c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1589e:	490a      	ldr	r1, [pc, #40]	; (158c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   158a0:	9b01      	ldr	r3, [sp, #4]
   158a2:	9a00      	ldr	r2, [sp, #0]
   158a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   158a8:	4a06      	ldr	r2, [pc, #24]	; (158c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   158aa:	9b01      	ldr	r3, [sp, #4]
   158ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b0:	1c5a      	adds	r2, r3, #1
   158b2:	4904      	ldr	r1, [pc, #16]	; (158c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   158b4:	9b01      	ldr	r3, [sp, #4]
   158b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158ba:	bf00      	nop
   158bc:	b003      	add	sp, #12
   158be:	f85d fb04 	ldr.w	pc, [sp], #4
   158c2:	bf00      	nop
   158c4:	1fff96fc 	.word	0x1fff96fc
   158c8:	1fff96f8 	.word	0x1fff96f8

000158cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   158cc:	b500      	push	{lr}
   158ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158d0:	f7eb ffba 	bl	1848 <Sys_GetCoreID>
   158d4:	4603      	mov	r3, r0
   158d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   158d8:	4a0d      	ldr	r2, [pc, #52]	; (15910 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158da:	9b01      	ldr	r3, [sp, #4]
   158dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158e0:	1e5a      	subs	r2, r3, #1
   158e2:	490b      	ldr	r1, [pc, #44]	; (15910 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158e4:	9b01      	ldr	r3, [sp, #4]
   158e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   158ea:	4a0a      	ldr	r2, [pc, #40]	; (15914 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   158ec:	9b01      	ldr	r3, [sp, #4]
   158ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158f2:	f003 0301 	and.w	r3, r3, #1
   158f6:	2b00      	cmp	r3, #0
   158f8:	d106      	bne.n	15908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   158fa:	4a05      	ldr	r2, [pc, #20]	; (15910 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158fc:	9b01      	ldr	r3, [sp, #4]
   158fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15902:	2b00      	cmp	r3, #0
   15904:	d100      	bne.n	15908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15906:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15908:	bf00      	nop
   1590a:	b003      	add	sp, #12
   1590c:	f85d fb04 	ldr.w	pc, [sp], #4
   15910:	1fff96fc 	.word	0x1fff96fc
   15914:	1fff96f8 	.word	0x1fff96f8

00015918 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   15918:	b500      	push	{lr}
   1591a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1591c:	f7eb ff94 	bl	1848 <Sys_GetCoreID>
   15920:	4603      	mov	r3, r0
   15922:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   15924:	4a10      	ldr	r2, [pc, #64]	; (15968 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   15926:	9b01      	ldr	r3, [sp, #4]
   15928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1592c:	2b00      	cmp	r3, #0
   1592e:	d10d      	bne.n	1594c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15930:	f7eb f98e 	bl	c50 <Pwm_schm_read_msr>
   15934:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15936:	9b00      	ldr	r3, [sp, #0]
   15938:	f003 0301 	and.w	r3, r3, #1
   1593c:	2b00      	cmp	r3, #0
   1593e:	d100      	bne.n	15942 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15940:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   15942:	490a      	ldr	r1, [pc, #40]	; (1596c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   15944:	9b01      	ldr	r3, [sp, #4]
   15946:	9a00      	ldr	r2, [sp, #0]
   15948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   1594c:	4a06      	ldr	r2, [pc, #24]	; (15968 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   1594e:	9b01      	ldr	r3, [sp, #4]
   15950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15954:	1c5a      	adds	r2, r3, #1
   15956:	4904      	ldr	r1, [pc, #16]	; (15968 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   15958:	9b01      	ldr	r3, [sp, #4]
   1595a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1595e:	bf00      	nop
   15960:	b003      	add	sp, #12
   15962:	f85d fb04 	ldr.w	pc, [sp], #4
   15966:	bf00      	nop
   15968:	1fff9704 	.word	0x1fff9704
   1596c:	1fff9700 	.word	0x1fff9700

00015970 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   15970:	b500      	push	{lr}
   15972:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15974:	f7eb ff68 	bl	1848 <Sys_GetCoreID>
   15978:	4603      	mov	r3, r0
   1597a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   1597c:	4a0d      	ldr	r2, [pc, #52]	; (159b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   1597e:	9b01      	ldr	r3, [sp, #4]
   15980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15984:	1e5a      	subs	r2, r3, #1
   15986:	490b      	ldr	r1, [pc, #44]	; (159b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15988:	9b01      	ldr	r3, [sp, #4]
   1598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   1598e:	4a0a      	ldr	r2, [pc, #40]	; (159b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   15990:	9b01      	ldr	r3, [sp, #4]
   15992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15996:	f003 0301 	and.w	r3, r3, #1
   1599a:	2b00      	cmp	r3, #0
   1599c:	d106      	bne.n	159ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   1599e:	4a05      	ldr	r2, [pc, #20]	; (159b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   159a0:	9b01      	ldr	r3, [sp, #4]
   159a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159a6:	2b00      	cmp	r3, #0
   159a8:	d100      	bne.n	159ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   159aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   159ac:	bf00      	nop
   159ae:	b003      	add	sp, #12
   159b0:	f85d fb04 	ldr.w	pc, [sp], #4
   159b4:	1fff9704 	.word	0x1fff9704
   159b8:	1fff9700 	.word	0x1fff9700

000159bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   159bc:	b500      	push	{lr}
   159be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159c0:	f7eb ff42 	bl	1848 <Sys_GetCoreID>
   159c4:	4603      	mov	r3, r0
   159c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   159c8:	4a10      	ldr	r2, [pc, #64]	; (15a0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159ca:	9b01      	ldr	r3, [sp, #4]
   159cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159d0:	2b00      	cmp	r3, #0
   159d2:	d10d      	bne.n	159f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159d4:	f7eb f93c 	bl	c50 <Pwm_schm_read_msr>
   159d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159da:	9b00      	ldr	r3, [sp, #0]
   159dc:	f003 0301 	and.w	r3, r3, #1
   159e0:	2b00      	cmp	r3, #0
   159e2:	d100      	bne.n	159e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   159e6:	490a      	ldr	r1, [pc, #40]	; (15a10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   159e8:	9b01      	ldr	r3, [sp, #4]
   159ea:	9a00      	ldr	r2, [sp, #0]
   159ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   159f0:	4a06      	ldr	r2, [pc, #24]	; (15a0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159f2:	9b01      	ldr	r3, [sp, #4]
   159f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159f8:	1c5a      	adds	r2, r3, #1
   159fa:	4904      	ldr	r1, [pc, #16]	; (15a0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159fc:	9b01      	ldr	r3, [sp, #4]
   159fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a02:	bf00      	nop
   15a04:	b003      	add	sp, #12
   15a06:	f85d fb04 	ldr.w	pc, [sp], #4
   15a0a:	bf00      	nop
   15a0c:	1fff970c 	.word	0x1fff970c
   15a10:	1fff9708 	.word	0x1fff9708

00015a14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   15a14:	b500      	push	{lr}
   15a16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a18:	f7eb ff16 	bl	1848 <Sys_GetCoreID>
   15a1c:	4603      	mov	r3, r0
   15a1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   15a20:	4a0d      	ldr	r2, [pc, #52]	; (15a58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   15a22:	9b01      	ldr	r3, [sp, #4]
   15a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a28:	1e5a      	subs	r2, r3, #1
   15a2a:	490b      	ldr	r1, [pc, #44]	; (15a58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   15a2c:	9b01      	ldr	r3, [sp, #4]
   15a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   15a32:	4a0a      	ldr	r2, [pc, #40]	; (15a5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   15a34:	9b01      	ldr	r3, [sp, #4]
   15a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a3a:	f003 0301 	and.w	r3, r3, #1
   15a3e:	2b00      	cmp	r3, #0
   15a40:	d106      	bne.n	15a50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   15a42:	4a05      	ldr	r2, [pc, #20]	; (15a58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   15a44:	9b01      	ldr	r3, [sp, #4]
   15a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a4a:	2b00      	cmp	r3, #0
   15a4c:	d100      	bne.n	15a50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a50:	bf00      	nop
   15a52:	b003      	add	sp, #12
   15a54:	f85d fb04 	ldr.w	pc, [sp], #4
   15a58:	1fff970c 	.word	0x1fff970c
   15a5c:	1fff9708 	.word	0x1fff9708

00015a60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15a60:	b500      	push	{lr}
   15a62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a64:	f7eb fef0 	bl	1848 <Sys_GetCoreID>
   15a68:	4603      	mov	r3, r0
   15a6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   15a6c:	4a10      	ldr	r2, [pc, #64]	; (15ab0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a6e:	9b01      	ldr	r3, [sp, #4]
   15a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a74:	2b00      	cmp	r3, #0
   15a76:	d10d      	bne.n	15a94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a78:	f7eb f8ea 	bl	c50 <Pwm_schm_read_msr>
   15a7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a7e:	9b00      	ldr	r3, [sp, #0]
   15a80:	f003 0301 	and.w	r3, r3, #1
   15a84:	2b00      	cmp	r3, #0
   15a86:	d100      	bne.n	15a8a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   15a8a:	490a      	ldr	r1, [pc, #40]	; (15ab4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   15a8c:	9b01      	ldr	r3, [sp, #4]
   15a8e:	9a00      	ldr	r2, [sp, #0]
   15a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   15a94:	4a06      	ldr	r2, [pc, #24]	; (15ab0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a96:	9b01      	ldr	r3, [sp, #4]
   15a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a9c:	1c5a      	adds	r2, r3, #1
   15a9e:	4904      	ldr	r1, [pc, #16]	; (15ab0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15aa0:	9b01      	ldr	r3, [sp, #4]
   15aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15aa6:	bf00      	nop
   15aa8:	b003      	add	sp, #12
   15aaa:	f85d fb04 	ldr.w	pc, [sp], #4
   15aae:	bf00      	nop
   15ab0:	1fff9714 	.word	0x1fff9714
   15ab4:	1fff9710 	.word	0x1fff9710

00015ab8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15ab8:	b500      	push	{lr}
   15aba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15abc:	f7eb fec4 	bl	1848 <Sys_GetCoreID>
   15ac0:	4603      	mov	r3, r0
   15ac2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   15ac4:	4a0d      	ldr	r2, [pc, #52]	; (15afc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15ac6:	9b01      	ldr	r3, [sp, #4]
   15ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15acc:	1e5a      	subs	r2, r3, #1
   15ace:	490b      	ldr	r1, [pc, #44]	; (15afc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15ad0:	9b01      	ldr	r3, [sp, #4]
   15ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   15ad6:	4a0a      	ldr	r2, [pc, #40]	; (15b00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   15ad8:	9b01      	ldr	r3, [sp, #4]
   15ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ade:	f003 0301 	and.w	r3, r3, #1
   15ae2:	2b00      	cmp	r3, #0
   15ae4:	d106      	bne.n	15af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   15ae6:	4a05      	ldr	r2, [pc, #20]	; (15afc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15ae8:	9b01      	ldr	r3, [sp, #4]
   15aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aee:	2b00      	cmp	r3, #0
   15af0:	d100      	bne.n	15af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15af2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15af4:	bf00      	nop
   15af6:	b003      	add	sp, #12
   15af8:	f85d fb04 	ldr.w	pc, [sp], #4
   15afc:	1fff9714 	.word	0x1fff9714
   15b00:	1fff9710 	.word	0x1fff9710

00015b04 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   15b04:	bf00      	nop
   15b06:	4770      	bx	lr

00015b08 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   15b08:	b510      	push	{r4, lr}
   15b0a:	b084      	sub	sp, #16
   15b0c:	4604      	mov	r4, r0
   15b0e:	4608      	mov	r0, r1
   15b10:	4611      	mov	r1, r2
   15b12:	461a      	mov	r2, r3
   15b14:	4623      	mov	r3, r4
   15b16:	f8ad 3006 	strh.w	r3, [sp, #6]
   15b1a:	4603      	mov	r3, r0
   15b1c:	f88d 3005 	strb.w	r3, [sp, #5]
   15b20:	460b      	mov	r3, r1
   15b22:	f88d 3004 	strb.w	r3, [sp, #4]
   15b26:	4613      	mov	r3, r2
   15b28:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b2c:	f7eb fe8c 	bl	1848 <Sys_GetCoreID>
   15b30:	4603      	mov	r3, r0
   15b32:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   15b34:	490d      	ldr	r1, [pc, #52]	; (15b6c <Det_ReportError+0x64>)
   15b36:	9b03      	ldr	r3, [sp, #12]
   15b38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   15b40:	4a0b      	ldr	r2, [pc, #44]	; (15b70 <Det_ReportError+0x68>)
   15b42:	9b03      	ldr	r3, [sp, #12]
   15b44:	4413      	add	r3, r2
   15b46:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15b4a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   15b4c:	4a09      	ldr	r2, [pc, #36]	; (15b74 <Det_ReportError+0x6c>)
   15b4e:	9b03      	ldr	r3, [sp, #12]
   15b50:	4413      	add	r3, r2
   15b52:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15b56:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   15b58:	4a07      	ldr	r2, [pc, #28]	; (15b78 <Det_ReportError+0x70>)
   15b5a:	9b03      	ldr	r3, [sp, #12]
   15b5c:	4413      	add	r3, r2
   15b5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15b62:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15b64:	2300      	movs	r3, #0
}
   15b66:	4618      	mov	r0, r3
   15b68:	b004      	add	sp, #16
   15b6a:	bd10      	pop	{r4, pc}
   15b6c:	1fff9740 	.word	0x1fff9740
   15b70:	1fff9718 	.word	0x1fff9718
   15b74:	1fff971c 	.word	0x1fff971c
   15b78:	1fff9720 	.word	0x1fff9720

00015b7c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   15b7c:	b510      	push	{r4, lr}
   15b7e:	b084      	sub	sp, #16
   15b80:	4604      	mov	r4, r0
   15b82:	4608      	mov	r0, r1
   15b84:	4611      	mov	r1, r2
   15b86:	461a      	mov	r2, r3
   15b88:	4623      	mov	r3, r4
   15b8a:	f8ad 3006 	strh.w	r3, [sp, #6]
   15b8e:	4603      	mov	r3, r0
   15b90:	f88d 3005 	strb.w	r3, [sp, #5]
   15b94:	460b      	mov	r3, r1
   15b96:	f88d 3004 	strb.w	r3, [sp, #4]
   15b9a:	4613      	mov	r3, r2
   15b9c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ba0:	f7eb fe52 	bl	1848 <Sys_GetCoreID>
   15ba4:	4603      	mov	r3, r0
   15ba6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   15ba8:	490d      	ldr	r1, [pc, #52]	; (15be0 <Det_ReportRuntimeError+0x64>)
   15baa:	9b03      	ldr	r3, [sp, #12]
   15bac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15bb0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   15bb4:	4a0b      	ldr	r2, [pc, #44]	; (15be4 <Det_ReportRuntimeError+0x68>)
   15bb6:	9b03      	ldr	r3, [sp, #12]
   15bb8:	4413      	add	r3, r2
   15bba:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15bbe:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   15bc0:	4a09      	ldr	r2, [pc, #36]	; (15be8 <Det_ReportRuntimeError+0x6c>)
   15bc2:	9b03      	ldr	r3, [sp, #12]
   15bc4:	4413      	add	r3, r2
   15bc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15bca:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   15bcc:	4a07      	ldr	r2, [pc, #28]	; (15bec <Det_ReportRuntimeError+0x70>)
   15bce:	9b03      	ldr	r3, [sp, #12]
   15bd0:	4413      	add	r3, r2
   15bd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15bd6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15bd8:	2300      	movs	r3, #0
}
   15bda:	4618      	mov	r0, r3
   15bdc:	b004      	add	sp, #16
   15bde:	bd10      	pop	{r4, pc}
   15be0:	1fff9744 	.word	0x1fff9744
   15be4:	1fff9724 	.word	0x1fff9724
   15be8:	1fff9728 	.word	0x1fff9728
   15bec:	1fff972c 	.word	0x1fff972c

00015bf0 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   15bf0:	b510      	push	{r4, lr}
   15bf2:	b084      	sub	sp, #16
   15bf4:	4604      	mov	r4, r0
   15bf6:	4608      	mov	r0, r1
   15bf8:	4611      	mov	r1, r2
   15bfa:	461a      	mov	r2, r3
   15bfc:	4623      	mov	r3, r4
   15bfe:	f8ad 3006 	strh.w	r3, [sp, #6]
   15c02:	4603      	mov	r3, r0
   15c04:	f88d 3005 	strb.w	r3, [sp, #5]
   15c08:	460b      	mov	r3, r1
   15c0a:	f88d 3004 	strb.w	r3, [sp, #4]
   15c0e:	4613      	mov	r3, r2
   15c10:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c14:	f7eb fe18 	bl	1848 <Sys_GetCoreID>
   15c18:	4603      	mov	r3, r0
   15c1a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   15c1c:	490d      	ldr	r1, [pc, #52]	; (15c54 <Det_ReportTransientFault+0x64>)
   15c1e:	9b03      	ldr	r3, [sp, #12]
   15c20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15c24:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   15c28:	4a0b      	ldr	r2, [pc, #44]	; (15c58 <Det_ReportTransientFault+0x68>)
   15c2a:	9b03      	ldr	r3, [sp, #12]
   15c2c:	4413      	add	r3, r2
   15c2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15c32:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   15c34:	4a09      	ldr	r2, [pc, #36]	; (15c5c <Det_ReportTransientFault+0x6c>)
   15c36:	9b03      	ldr	r3, [sp, #12]
   15c38:	4413      	add	r3, r2
   15c3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15c3e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   15c40:	4a07      	ldr	r2, [pc, #28]	; (15c60 <Det_ReportTransientFault+0x70>)
   15c42:	9b03      	ldr	r3, [sp, #12]
   15c44:	4413      	add	r3, r2
   15c46:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15c4a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15c4c:	2300      	movs	r3, #0
}
   15c4e:	4618      	mov	r0, r3
   15c50:	b004      	add	sp, #16
   15c52:	bd10      	pop	{r4, pc}
   15c54:	1fff973c 	.word	0x1fff973c
   15c58:	1fff9730 	.word	0x1fff9730
   15c5c:	1fff9734 	.word	0x1fff9734
   15c60:	1fff9738 	.word	0x1fff9738

00015c64 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   15c64:	bf00      	nop
   15c66:	4770      	bx	lr

00015c68 <Fls_ACEraseRomEnd>:
   15c68:	74747542 	.word	0x74747542
   15c6c:	31206e6f 	.word	0x31206e6f
   15c70:	74636120 	.word	0x74636120
   15c74:	3a6e6f69 	.word	0x3a6e6f69
   15c78:	4e495320 	.word	0x4e495320
   15c7c:	5f454c47 	.word	0x5f454c47
   15c80:	43494c43 	.word	0x43494c43
   15c84:	000a204b 	.word	0x000a204b
   15c88:	65756c42 	.word	0x65756c42
   15c8c:	42475220 	.word	0x42475220
   15c90:	44454c20 	.word	0x44454c20
   15c94:	676f5420 	.word	0x676f5420
   15c98:	20656c67 	.word	0x20656c67
   15c9c:	0000000a 	.word	0x0000000a
   15ca0:	74747542 	.word	0x74747542
   15ca4:	31206e6f 	.word	0x31206e6f
   15ca8:	74636120 	.word	0x74636120
   15cac:	3a6e6f69 	.word	0x3a6e6f69
   15cb0:	554f4420 	.word	0x554f4420
   15cb4:	5f454c42 	.word	0x5f454c42
   15cb8:	43494c43 	.word	0x43494c43
   15cbc:	000a204b 	.word	0x000a204b
   15cc0:	20746f50 	.word	0x20746f50
   15cc4:	44412031 	.word	0x44412031
   15cc8:	72203043 	.word	0x72203043
   15ccc:	73697365 	.word	0x73697365
   15cd0:	636e6174 	.word	0x636e6174
   15cd4:	61762065 	.word	0x61762065
   15cd8:	2065756c 	.word	0x2065756c
   15cdc:	6f206e69 	.word	0x6f206e69
   15ce0:	3a736d68 	.word	0x3a736d68
   15ce4:	0a642520 	.word	0x0a642520
   15ce8:	00000000 	.word	0x00000000
   15cec:	74747542 	.word	0x74747542
   15cf0:	31206e6f 	.word	0x31206e6f
   15cf4:	74636120 	.word	0x74636120
   15cf8:	3a6e6f69 	.word	0x3a6e6f69
   15cfc:	4c4f4820 	.word	0x4c4f4820
   15d00:	4c435f44 	.word	0x4c435f44
   15d04:	204b4349 	.word	0x204b4349
   15d08:	0000000a 	.word	0x0000000a
   15d0c:	7a7a7542 	.word	0x7a7a7542
   15d10:	70207265 	.word	0x70207265
   15d14:	6979616c 	.word	0x6979616c
   15d18:	5420676e 	.word	0x5420676e
   15d1c:	20656e6f 	.word	0x20656e6f
   15d20:	74612031 	.word	0x74612031
   15d24:	684b3320 	.word	0x684b3320
   15d28:	000a207a 	.word	0x000a207a
   15d2c:	74747542 	.word	0x74747542
   15d30:	31206e6f 	.word	0x31206e6f
   15d34:	74636120 	.word	0x74636120
   15d38:	3a6e6f69 	.word	0x3a6e6f69
   15d3c:	4c455220 	.word	0x4c455220
   15d40:	45534145 	.word	0x45534145
   15d44:	00000a20 	.word	0x00000a20
   15d48:	7a7a7542 	.word	0x7a7a7542
   15d4c:	73207265 	.word	0x73207265
   15d50:	70706f74 	.word	0x70706f74
   15d54:	0a206465 	.word	0x0a206465
   15d58:	00000000 	.word	0x00000000
   15d5c:	74747542 	.word	0x74747542
   15d60:	32206e6f 	.word	0x32206e6f
   15d64:	74636120 	.word	0x74636120
   15d68:	3a6e6f69 	.word	0x3a6e6f69
   15d6c:	4e495320 	.word	0x4e495320
   15d70:	5f454c47 	.word	0x5f454c47
   15d74:	43494c43 	.word	0x43494c43
   15d78:	000a204b 	.word	0x000a204b
   15d7c:	20646552 	.word	0x20646552
   15d80:	20424752 	.word	0x20424752
   15d84:	2044454c 	.word	0x2044454c
   15d88:	67676f54 	.word	0x67676f54
   15d8c:	0a20656c 	.word	0x0a20656c
   15d90:	00000000 	.word	0x00000000
   15d94:	74747542 	.word	0x74747542
   15d98:	32206e6f 	.word	0x32206e6f
   15d9c:	74636120 	.word	0x74636120
   15da0:	3a6e6f69 	.word	0x3a6e6f69
   15da4:	554f4420 	.word	0x554f4420
   15da8:	5f454c42 	.word	0x5f454c42
   15dac:	43494c43 	.word	0x43494c43
   15db0:	000a204b 	.word	0x000a204b
   15db4:	20746f50 	.word	0x20746f50
   15db8:	44412032 	.word	0x44412032
   15dbc:	72203043 	.word	0x72203043
   15dc0:	73697365 	.word	0x73697365
   15dc4:	636e6174 	.word	0x636e6174
   15dc8:	61762065 	.word	0x61762065
   15dcc:	2065756c 	.word	0x2065756c
   15dd0:	6f206e69 	.word	0x6f206e69
   15dd4:	3a736d68 	.word	0x3a736d68
   15dd8:	0a642520 	.word	0x0a642520
   15ddc:	00000000 	.word	0x00000000
   15de0:	74747542 	.word	0x74747542
   15de4:	32206e6f 	.word	0x32206e6f
   15de8:	74636120 	.word	0x74636120
   15dec:	3a6e6f69 	.word	0x3a6e6f69
   15df0:	4c4f4820 	.word	0x4c4f4820
   15df4:	4c435f44 	.word	0x4c435f44
   15df8:	204b4349 	.word	0x204b4349
   15dfc:	0000000a 	.word	0x0000000a
   15e00:	7a7a7542 	.word	0x7a7a7542
   15e04:	70207265 	.word	0x70207265
   15e08:	6979616c 	.word	0x6979616c
   15e0c:	5420676e 	.word	0x5420676e
   15e10:	20656e6f 	.word	0x20656e6f
   15e14:	74612032 	.word	0x74612032
   15e18:	684b3520 	.word	0x684b3520
   15e1c:	000a207a 	.word	0x000a207a
   15e20:	74747542 	.word	0x74747542
   15e24:	32206e6f 	.word	0x32206e6f
   15e28:	74636120 	.word	0x74636120
   15e2c:	3a6e6f69 	.word	0x3a6e6f69
   15e30:	4c455220 	.word	0x4c455220
   15e34:	45534145 	.word	0x45534145
   15e38:	00000a20 	.word	0x00000a20
   15e3c:	74747542 	.word	0x74747542
   15e40:	33206e6f 	.word	0x33206e6f
   15e44:	74636120 	.word	0x74636120
   15e48:	3a6e6f69 	.word	0x3a6e6f69
   15e4c:	4e495320 	.word	0x4e495320
   15e50:	5f454c47 	.word	0x5f454c47
   15e54:	43494c43 	.word	0x43494c43
   15e58:	000a204b 	.word	0x000a204b
   15e5c:	65657247 	.word	0x65657247
   15e60:	4752206e 	.word	0x4752206e
   15e64:	454c2042 	.word	0x454c2042
   15e68:	6f542044 	.word	0x6f542044
   15e6c:	656c6767 	.word	0x656c6767
   15e70:	00000a20 	.word	0x00000a20
   15e74:	74747542 	.word	0x74747542
   15e78:	33206e6f 	.word	0x33206e6f
   15e7c:	74636120 	.word	0x74636120
   15e80:	3a6e6f69 	.word	0x3a6e6f69
   15e84:	554f4420 	.word	0x554f4420
   15e88:	5f454c42 	.word	0x5f454c42
   15e8c:	43494c43 	.word	0x43494c43
   15e90:	000a204b 	.word	0x000a204b
   15e94:	20746f50 	.word	0x20746f50
   15e98:	44412031 	.word	0x44412031
   15e9c:	72203143 	.word	0x72203143
   15ea0:	73697365 	.word	0x73697365
   15ea4:	636e6174 	.word	0x636e6174
   15ea8:	61762065 	.word	0x61762065
   15eac:	2065756c 	.word	0x2065756c
   15eb0:	6f206e69 	.word	0x6f206e69
   15eb4:	3a736d68 	.word	0x3a736d68
   15eb8:	0a642520 	.word	0x0a642520
   15ebc:	00000000 	.word	0x00000000
   15ec0:	20746f50 	.word	0x20746f50
   15ec4:	44412032 	.word	0x44412032
   15ec8:	72203143 	.word	0x72203143
   15ecc:	73697365 	.word	0x73697365
   15ed0:	636e6174 	.word	0x636e6174
   15ed4:	61762065 	.word	0x61762065
   15ed8:	2065756c 	.word	0x2065756c
   15edc:	6f206e69 	.word	0x6f206e69
   15ee0:	3a736d68 	.word	0x3a736d68
   15ee4:	0a642520 	.word	0x0a642520
   15ee8:	00000000 	.word	0x00000000
   15eec:	74747542 	.word	0x74747542
   15ef0:	33206e6f 	.word	0x33206e6f
   15ef4:	74636120 	.word	0x74636120
   15ef8:	3a6e6f69 	.word	0x3a6e6f69
   15efc:	4c4f4820 	.word	0x4c4f4820
   15f00:	4c435f44 	.word	0x4c435f44
   15f04:	204b4349 	.word	0x204b4349
   15f08:	0000000a 	.word	0x0000000a
   15f0c:	7a7a7542 	.word	0x7a7a7542
   15f10:	70207265 	.word	0x70207265
   15f14:	6979616c 	.word	0x6979616c
   15f18:	5420676e 	.word	0x5420676e
   15f1c:	20656e6f 	.word	0x20656e6f
   15f20:	74612033 	.word	0x74612033
   15f24:	352e3720 	.word	0x352e3720
   15f28:	207a684b 	.word	0x207a684b
   15f2c:	0000000a 	.word	0x0000000a
   15f30:	74747542 	.word	0x74747542
   15f34:	33206e6f 	.word	0x33206e6f
   15f38:	74636120 	.word	0x74636120
   15f3c:	3a6e6f69 	.word	0x3a6e6f69
   15f40:	4c455220 	.word	0x4c455220
   15f44:	45534145 	.word	0x45534145
   15f48:	00000a20 	.word	0x00000a20
   15f4c:	6d726554 	.word	0x6d726554
   15f50:	6c616e69 	.word	0x6c616e69
   15f54:	00000000 	.word	0x00000000
   15f58:	4c554e28 	.word	0x4c554e28
   15f5c:	0000294c 	.word	0x0000294c

00015f60 <Clock_Ip_au8DividerCallbackIndex>:
   15f60:	0e0d0c00 06030201 0a070409 000b0805     ................

00015f70 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00015f80 <Clock_Ip_au8XoscCallbackIndex>:
   15f80:	00000100 00000000 00000000 00000000     ................

00015f90 <Clock_Ip_au8IrcoscCallbackIndex>:
   15f90:	03020100 00000004 00000000 00000000     ................

00015fa0 <Clock_Ip_au8GateCallbackIndex>:
   15fa0:	06010200 01040301 00000500 00000000     ................

00015fb0 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00015fc0 <Clock_Ip_au8PllCallbackIndex>:
   15fc0:	00000100 00000000 00000000 00000000     ................

00015fd0 <Clock_Ip_au8SelectorCallbackIndex>:
   15fd0:	0a090800 03020109 07060504 00000000     ................

00015fe0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00015ff0 <Clock_Ip_au8CmuCallbackIndex>:
	...

00016000 <Clock_Ip_au8ClockFeatures>:
	...
   16010:	01000000 00000000 00000000 00000002     ................
   16020:	00000000 00000300 00000000 00040000     ................
   16030:	00000000 05000000 00000000 00000000     ................
   16040:	00000006 00000000 00000100 00000000     ................
   16050:	00010000 00000000 04000000 00000000     ................
   16060:	00000000 00000005 00000001 00000401     ................
   16070:	00000200 00050100 00030000 04020000     ................
   16080:	04000000 02000000 00000005 00000005     ................
   16090:	00000403 00000600 00050300 00070000     ................
   160a0:	05000000 00000000 00000000 00000006     ................
	...
   160e0:	00050000 00000000 06000000 00000100     ................
   160f0:	00000000 00030007 00000000 00000000     ................
   16100:	00000000 00060000 00000000 07000000     ................
   16110:	00000100 00000000 00030008 00000000     ................
	...
   16128:	00090000 00000000 0a000000 00000100     ................
   16138:	00000000 0003000b 00000000 00000000     ................
   16148:	00000000 000c0000 00000000 0d000000     ................
   16158:	00000100 00000000 0003000e 00000000     ................
   16168:	00000800 00000000 00090000 00000000     ................
   16178:	0a000000 00000000 00000000 0000000b     ................
   16188:	00000000 00000b01 00000000 000b0200     ................
   16198:	00000000 0b030000 00000000 00000000     ................
	...
   161b0:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   161c0:	01000000 00000000 00000000 00000007     ................
   161d0:	00007300 00000700 00320000 00090000     .s........2.....
   161e0:	02000000 07000000 00000000 00000021     ............!...
   161f0:	00000009 00000400 00000900 00030000     ................
   16200:	00070000 61000000 07000000 00000000     .......a........
   16210:	00000024 00000007 00002500 00000700     $........%......
   16220:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   16230:	00000000 00000020 38000004 00003800     .... ......8.8..
   16240:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   16250:	04000000 00260000 00000026 66000004     ......&.&......f
   16260:	00006600 00000400 00370037 00040000     .f......7.7.....
   16270:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   16280:	2e000004 00002e00 00000200 00404040     ............@@@.
   16290:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   162a0:	0000006b 6c000004 00006c00 00000900     k......l.l......
   162b0:	00010000 00090000 00000000 07000000     ................
   162c0:	00000000 00000036 00000007 00003100     ....6........1..
   162d0:	00000700 00490000 00070000 4a000000     ......I........J
   162e0:	07000000 00000000 0000004b 00000007     ........K.......
   162f0:	00004c00 00000700 004d0000 00070000     .L........M.....
   16300:	3d000000 03000000 00000000 00000000     ...=............

00016310 <Clock_Ip_au16SelectorEntryHardwareValue>:
   16310:	01010a03 01010001 04040002 02000603     ................
   16320:	00010810 02020100 00000000 00000007     ................
   16330:	00000009 00000000 00000c0e 00000000     ................
	...

00016368 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   16368:	00020000 00000300 00000601 00000000     ................
	...

00016398 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   16398:	00000700 00000000 02020000 01010303     ................
   163a8:	03020606 00000000 00000000 00000000     ................
	...

000163c8 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   163c8:	00000001 00000000 02020000 01010303     ................
   163d8:	03020606 00000000 00000000 00000000     ................
	...

000163f8 <Clock_Ip_au8DividerValueHardwareValue>:
   163f8:	00020100 00000003 00000004 00000000     ................
   16408:	00000005 00000000 00000000 00000000     ................
   16418:	00000006 00000000 00000000 00000000     ................
	...
   16438:	00000007                                ....

0001643c <Clock_Ip_apxScgPeriphAsyncDivs>:
   1643c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0001644c <Clock_Ip_aeSourceTypeClockName>:
   1644c:	00000000 00000001 00000001 00000001     ................
   1645c:	00000001 00000001 00000001 00000001     ................
   1646c:	00000002 00000003 00000001 00000001     ................
   1647c:	00000001 00000001 00000002 00000002     ................
   1648c:	00000003 00000003 00000001 00000001     ................
   1649c:	00000004 00000004 00000004 00000004     ................
	...

00016508 <Clock_Ip_aeHwPllName>:
   16508:	00000009                                ....

0001650c <Clock_Ip_aeHwDfsName>:
   1650c:	00000057                                W...

00016510 <Clock_Ip_axDividerCallbacks>:
   16510:	00003889 00003893 000038ad 000038c7     .8...8...8...8..
   16520:	000038e1 000038fb 00003915 0000392f     .8...8...9../9..
   16530:	00003949 00003963 0000397d 00003997     I9..c9..}9...9..
   16540:	000039b1 000039cb 000039e5              .9...9...9..

0001654c <Clock_Ip_axDividerTriggerCallbacks>:
   1654c:	00003d59 00003d59                       Y=..Y=..

00016554 <Clock_Ip_axExtOscCallbacks>:
   16554:	00003d65 00003d65 00003d65 00003d6f     e=..e=..e=..o=..
   16564:	00003d65 00003d79 00003d93 00003dad     e=..y=...=...=..
   16574:	00003e31 00003e45                       1>..E>..

0001657c <Clock_Ip_axFracDivCallbacks>:
   1657c:	00004005 00004005 0000400f              .@...@...@..

00016588 <Clock_Ip_axGateCallbacks>:
   16588:	00004029 00004033 00004133 0000414d     )@..3@..3A..MA..
   16598:	000040e3 000040fd 00004093 000040ad     .@...@...@...@..
   165a8:	00004043 0000405d 00004183 0000419d     C@..]@...A...A..
   165b8:	000041d3 000041ed                       .A...A..

000165c0 <Clock_Ip_axIntOscCallbacks>:
   165c0:	00004399 00004399 000043a3 000043ad     .C...C...C...C..
   165d0:	000043c7 000043e1 000043f5 0000440f     .C...C...C...D..
   165e0:	00004429 0000443d 00004457 00004471     )D..=D..WD..qD..
   165f0:	00004519 00004533 0000454d              .E..3E..ME..

000165fc <Clock_Ip_axCmuCallbacks>:
   165fc:	00004ae9 00004af3 00004aff 00004ae9     .J...J...J...J..

0001660c <Clock_Ip_axPllCallbacks>:
   1660c:	00004b09 00004b09 00004b13 00004b09     .K...K...K...K..
   1661c:	00004b1f 00004b29 00004b43 00004b5d     .K..)K..CK..]K..
   1662c:	00004c01 00004bed                       .L...K..

00016634 <Clock_Ip_axPcfsCallbacks>:
   16634:	00004d5d                                ]M..

00016638 <Clock_Ip_axSelectorCallbacks>:
   16638:	00004d69 00004d69 00004d73 00004d8d     iM..iM..sM...M..
   16648:	00004d69 00004da7 00004dc1 00004ddb     iM...M...M...M..
   16658:	00004df5 00004e0f 00004e29 00004e43     .M...N..)N..CN..
   16668:	00004e5d 00004e77 00004e91 00004eab     ]N..wN...N...N..
   16678:	00004ec5 00004edf 00004ef9 00004f13     .N...N...N...O..
   16688:	00004f2d 00004f47                       -O..GO..

00016690 <ClockSource>:
   16690:	00000000 00000008 00000002 00000005     ................
	...
   166a8:	00000009                                ....

000166ac <ResetReasonArray>:
   166ac:	00000000 00000001 00000002 00000003     ................
   166bc:	00000004 00000005 00000006 00000007     ................
   166cc:	00000008 00000009 0000000a 0000000b     ................
   166dc:	0000000c 0000000d 0000000e              ............

000166e8 <Port_au32PortCiPortBaseAddr>:
   166e8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   166f8:	4004d000                                ...@

000166fc <Port_au32PortCiGpioBaseAddr>:
   166fc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   1670c:	400ff100                                ...@

00016710 <Adc_Ip_apxBase>:
   16710:	4003b000 40027000                       ...@.p.@

00016718 <Pdb_Adc_Ip_apxBase>:
   16718:	40036000 40031000                       .`.@...@

00016720 <Ftm_Pwm_Ip_aFtmBase>:
   16720:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

00016730 <ButtonsCfg>:
   16730:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   16740:	0000000c 0000012c                       ....,...

00016748 <LedsCfg>:
   16748:	00000060 0000006f 00000070 00010048     `...o...p...H...
   16758:	00010049 0001004a 0001004b 0001004c     I...J...K...L...
   16768:	0001004d 0001004e 0001004f              M...N...O...

00016774 <Task_Config>:
   16774:	00000032 00000001 00000931 00000064     2.......1...d...
   16784:	00000001 0000093d 000003e8 00000000     ....=...........
   16794:	000016ad 00000bb8 00000000 000016b1     ................
   167a4:	00001388 00000000 000016b5 00000bb8     ................
   167b4:	00000000 000016b9                       ........

000167bc <Timer_Config>:
	...

000167c8 <Queue_Config>:
   167c8:	00000002 0000000a 00000000              ............

000167d4 <Scheduler_Config>:
   167d4:	0000000a 00000006 00016774 00000001     ........tg......
   167e4:	000167bc 00000001 000167c8              .g.......g..

000167f0 <AdcIpChansConfig_0>:
   167f0:	00000000 00000005 00000000 00000001     ................
   16800:	00000008 00000000                       ........

00016808 <AdcIpChansConfig_1>:
   16808:	00000000 0000000f 00000000 00000001     ................
   16818:	00000008 00000000                       ........

00016820 <AdcIpConfig_0>:
   16820:	00000000 00000003 00000000 0000000c     ................
   16830:	00000000 00000001 00000001 00000000     ................
	...
   16848:	00ff0000 00000000 00000000 000167f0     .............g..
   16858:	0000b299                                ....

0001685c <AdcIpConfig_1>:
   1685c:	00000000 00000003 00000000 0000000c     ................
   1686c:	00000000 00000001 00000001 00000000     ................
	...
   16884:	00ff0000 00000000 00000000 00016808     .............h..
   16894:	0000b2bb                                ....

00016898 <AdcIpwCfg>:
   16898:	00016820 0001685c 00016e68 00016e88      h..\h..hn...n..
   168a8:	01010100 00010001 00020002 0101ffff     ................
   168b8:	00000100                                ....

000168bc <AdcIpwGroupConfig_0>:
   168bc:	00000001 00000000 000000c8 00010000     ................
   168cc:	00000000                                ....

000168d0 <AdcIpwGroupConfig_1>:
   168d0:	00000001 00000000 000000c8 00010000     ................
   168e0:	00000000                                ....

000168e4 <Adc_Group0_Assignment_0>:
   168e4:	00010000                                ....

000168e8 <Adc_Group1_Assignment_1>:
   168e8:	00010000                                ....

000168ec <Adc_GroupsCfg>:
	...
   16908:	00000001 000168e4 00080002 00000005     .....h..........
   16918:	00000000 000168bc 00010001 00000000     .....h..........
	...
   1693c:	00000001 000168e8 000f0002 00000008     .....h..........
   1694c:	00000000 000168d0                       .....h..

00016954 <Adc_au16GroupIdToIndexMap>:
   16954:	00010000                                ....

00016958 <Adc_Partition_Assignment>:
   16958:	00000000                                ....

0001695c <Adc_Config>:
   1695c:	00016898 000168ec 00000002 00016954     .h...h......Ti..
   1696c:	00000000 00016958 00000001              ....Xi......

00016978 <Mcu_aClockConfigPB>:
	...
   16980:	1c000002 04000010 01000029 00000002     ........).......
   16990:	01000001 00000001 00000005 00000001     ................
   169a0:	00000000 00000057 00000000 00000000     ....W...........
	...
   169b8:	00000057 00000000 00000057 00000000     W.......W.......
	...
   169e0:	00000019 00000005 0000001a 00000002     ................
   169f0:	0000001b 00000005 0000002a 00000002     ........*.......
   16a00:	00000028 0000000e 00000029 00000001     (.......).......
   16a10:	00000056 0000001c 00000032 0000002a     V.......2...*...
   16a20:	0000002b 00000014 0000002c 00000014     +.......,.......
   16a30:	0000002d 00000014 0000002e 00000014     -...............
   16a40:	0000003f 00000000 00000040 0000000a     ?.......@.......
   16a50:	00000041 00000000 00000042 00000000     A.......B.......
   16a60:	00000031 0000000b 00000045 00000000     1.......E.......
   16a70:	00000046 00000000 00000047 00000000     F.......G.......
   16a80:	00000044 00000000 00000030 0000000b     D.......0.......
   16a90:	0000003d 00000000 00000043 00000000     =.......C.......
   16aa0:	00000049 00000000 0000004a 00000000     I.......J.......
   16ab0:	0000004b 00000000 00000048 00000000     K.......H.......
   16ac0:	0000000a 00000001 00000000 0000000b     ................
   16ad0:	00000001 00000000 0000000c 00000001     ................
   16ae0:	00000000 0000000d 00000002 00000000     ................
   16af0:	0000001d 00000001 00000000 0000001e     ................
   16b00:	00000002 00000000 0000001f 00000001     ................
   16b10:	00000000 00000021 00000001 00000000     ....!...........
   16b20:	00000022 00000002 00000000 00000023     "...........#...
   16b30:	00000001 00000000 00000025 00000002     ........%.......
   16b40:	00000000 00000026 00000004 00000000     ....&...........
   16b50:	00000027 00000002 00000000 00000032     '...........2...
   16b60:	00000001 00000000 00000048 00000001     ........H.......
   16b70:	00000001 00000056 00000001 00000001     ....V...........
   16b80:	00000057 00000000 00000000 00000057     W...........W...
	...
   16b98:	00000057 00000000 00000000 00000057     W...........W...
	...
   16bb0:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   16bcc:	00000014 00007d00 00000015 00007d00     .....}.......}..
   16bdc:	00000016 00007d00 00000017 00008000     .....}..........
   16bec:	00000012 00000001 00000013 00000001     ................
   16bfc:	00000030 00000001 00000031 00000001     0.......1.......
   16c0c:	00000032 00000000 00000033 00000000     2.......3.......
   16c1c:	00000034 00000000 00000035 00000001     4.......5.......
   16c2c:	00000036 00000000 00000037 00000001     6.......7.......
   16c3c:	00000038 00000001 00000039 00000000     8.......9.......
   16c4c:	0000003a 00000000 0000003b 00000000     :.......;.......
   16c5c:	0000003c 00000000 0000003d 00000000     <.......=.......
   16c6c:	0000003e 00000000 0000003f 00000000     >.......?.......
   16c7c:	00000040 00000001 00000041 00000000     @.......A.......
   16c8c:	00000042 00000000 00000043 00000000     B.......C.......
   16c9c:	00000044 00000000 00000045 00000000     D.......E.......
   16cac:	00000046 00000000 00000047 00000000     F.......G.......
   16cbc:	00000048 00000000 00000049 00000000     H.......I.......
   16ccc:	0000004a 00000000 0000004b 00000000     J.......K.......
   16cdc:	0000004c 00000001 0000004d 00000001     L.......M.......
   16cec:	0000004e 00000001 0000004f 00000001     N.......O.......
   16cfc:	00000050 00000001 00000051 00000001     P.......Q.......
   16d0c:	00000052 00000001 00000053 00000001     R.......S.......
   16d1c:	00000054 00000001 00000055 00000000     T.......U.......
   16d2c:	00000056 00000001 00000057 00000000     V.......W.......
   16d3c:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00016d70 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   16d8c:	00000003 00000003                       ........

00016d94 <Ftm_Pwm_Ip_InstCfg1>:
   16d94:	00000003 00000000 00000000 00000000     ................
	...
   16dc8:	00000b93 00000001 00000000 00000000     ................
   16dd8:	00000000 00016d70                       ....pm..

00016de0 <Ftm_Pwm_Ip_I1_Ch7>:
   16de0:	00000007 0000000a 00000000 00000000     ................
   16df0:	00000000 00000001 00000000 00000000     ................
	...

00016e08 <Ftm_Pwm_Ip_I1_ChArray>:
   16e08:	00016de0                                .m..

00016e0c <Ftm_Pwm_Ip_UserCfg1>:
   16e0c:	00016d94 00016e08 00000001 00000000     .m...n..........
   16e1c:	00000000                                ....

00016e20 <aIrqConfiguration>:
   16e20:	00000027 00000f01 00009bdd 00000028     '...........(...
   16e30:	00000f01 00009bed                       ........

00016e38 <intCtrlConfig>:
   16e38:	00000002 00016e20                       .... n..

00016e40 <Mcu_Config>:
   16e40:	0000005a 00000000 00000001 00000001     Z...............
   16e50:	000173c4 00016978 000173d0              .s..xi...s..

00016e5c <OsIf_xPredefinedConfig>:
   16e5c:	00000000 02dc6c00                       .....l..

00016e64 <OsIf_apxPredefinedConfig>:
   16e64:	00016e5c                                \n..

00016e68 <PdbAdcIpConfig_0>:
	...
   16e74:	0000000f ffff0000 00000000 00000000     ................
   16e84:	00000000                                ....

00016e88 <PdbAdcIpConfig_1>:
	...
   16e94:	0000000f ffff0000 00000000 00000000     ................
   16ea4:	00000000                                ....

00016ea8 <Platform_uConfiguration>:
   16ea8:	00016eb0                                .n..

00016eac <Platform_Config>:
   16eac:	00016ea8                                .n..

00016eb0 <ipwConfig>:
   16eb0:	00016e38 00000000                       8n......

00016eb8 <g_pin_mux_InitConfigArr>:
   16eb8:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   16ec8:	00000001 00000002 00000000 00000000     ................
   16ed8:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   16ee8:	00000011 00000002 00000001 00000001     ................
	...
   16f08:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
   16f18:	00000001 00000002 00000000 00000000     ................
   16f28:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   16f38:	00000000 00000002 00000001 00000002     ................
	...
   16f54:	00000100 4004d000 400ff100 0000000c     .......@...@....
   16f64:	00000002 00000001 00000001 00000000     ................
	...
   16f80:	40049000 400ff000 0000000c 00000002     ...@...@........
   16f90:	00000001 00000001 00000000 00000000     ................
	...
   16fa8:	4004a000 00000000 00000001 00000002     ...@............
   16fb8:	00000000 00000001 00000000 00000000     ................
	...
   16fd0:	4004a000 00000000 0000000d 00000002     ...@............
   16fe0:	00000000 00000001 00000000 00000000     ................
	...
   16ff8:	40049000 00000000 0000000d 00000002     ...@............
   17008:	00000002 00000002 00000000 00000000     ................
	...
   17020:	4004b000 400ff080 00000008 00000002     ...@...@........
   17030:	00000001 00000002 00000000 00000000     ................
	...
   17048:	4004b000 400ff080 00000009 00000002     ...@...@........
   17058:	00000001 00000002 00000000 00000000     ................
	...
   17070:	4004b000 400ff080 0000000a 00000002     ...@...@........
   17080:	00000001 00000002 00000000 00000000     ................
	...
   17098:	4004b000 400ff080 0000000b 00000002     ...@...@........
   170a8:	00000001 00000002 00000000 00000000     ................
	...
   170c0:	4004b000 400ff080 0000000c 00000002     ...@...@........
   170d0:	00000001 00000002 00000000 00000000     ................
	...
   170e8:	4004b000 400ff080 0000000d 00000002     ...@...@........
   170f8:	00000001 00000002 00000000 00000000     ................
	...
   17110:	4004b000 400ff080 0000000e 00000002     ...@...@........
   17120:	00000001 00000002 00000000 00000000     ................
	...
   17138:	4004b000 400ff080 0000000f 00000002     ...@...@........
   17148:	00000001 00000002 00000000 00000000     ................
	...

00017160 <au8Port_PartitionList>:
   17160:	00000001                                ....

00017164 <au32Port_PinToPartitionMap>:
   17164:	00000001 00000001 00000001 00000001     ................
   17174:	00000001 00000001 00000001 00000001     ................
   17184:	00000001 00000001 00000001 00000001     ................
   17194:	00000001 00000001 00000001 00000001     ................
   171a4:	00000001                                ....

000171a8 <Port_au16NoUnUsedPadsArrayDefault>:
   171a8:	00010000 00030002 00070006 00090008     ................
   171b8:	000e000b 0010000f 00200011 00230022     .......... .".#.
   171c8:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   171d8:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   171e8:	00460043 00500047 00610051 00630062     C.F.G.P.Q.a.b.c.
   171f8:	00650064 00670066 00690068 006b006a     d.e.f.g.h.i.j.k.
   17208:	006d006c 0080006e 00820081 00840083     l.m.n...........
   17218:	00860085 00880087 008a0089 008d008b     ................
   17228:	008f008e 00000090                       ........

00017230 <Port_UnUsedPin>:
   17230:	00000000 00000001 00000000              ............

0001723c <Port_aPinConfigDefault>:
   1723c:	00000070 00000100 00000001 00000002     p...............
   1724c:	00010001 00000071 00000100 00000000     ....q...........
   1725c:	00000001 00010001 0000006f 00000100     ........o.......
   1726c:	00000001 00000002 00010001 00000060     ............`...
   1727c:	00000100 00000001 00000002 00010001     ................
   1728c:	0000008c 00000100 00000000 00000001     ................
   1729c:	00010001 0000000c 00000100 00000000     ................
   172ac:	00000001 00010001 00000021 00000000     ........!.......
   172bc:	00000002 00000000 00010000 0000002d     ............-...
   172cc:	00000000 00000002 00000000 00010000     ................
   172dc:	0000000d 00000200 00000000 00000002     ................
   172ec:	00010000 00000048 00000100 00000000     ....H...........
   172fc:	00000002 00010001 00000049 00000100     ........I.......
   1730c:	00000000 00000002 00010001 0000004a     ............J...
   1731c:	00000100 00000000 00000002 00010001     ................
   1732c:	0000004b 00000100 00000000 00000002     K...............
   1733c:	00010001 0000004c 00000100 00000000     ....L...........
   1734c:	00000002 00010001 0000004d 00000100     ........M.......
   1735c:	00000000 00000002 00010001 0000004e     ............N...
   1736c:	00000100 00000000 00000002 00010001     ................
   1737c:	0000004f 00000100 00000000 00000002     O...............
   1738c:	00010001                                ....

00017390 <Port_Config>:
   17390:	00430011 000171a8 00017230 0001723c     ..C..q..0r..<r..
	...
   173a8:	00017164 00017160 00016eb8              dq..`q...n..

000173b4 <Power_Ip_RCM_ConfigPB>:
	...

000173bc <Power_Ip_PMC_ConfigPB>:
   173bc:	00000000                                ....

000173c0 <Power_Ip_SMC_ConfigPB>:
   173c0:	00000000                                ....

000173c4 <Power_Ip_aModeConfigPB>:
	...

000173d0 <Power_Ip_HwIPsConfigPB>:
   173d0:	000173b4 000173bc 000173c0              .s...s...s..

000173dc <Pwm_Channels_PB>:
   173dc:	00000000 00000001 00000001 00016de0     .............m..
   173ec:	00000001 00000001                       ........

000173f4 <Pwm_Instances_PB>:
   173f4:	00000001 00000001 00016e0c              .........n..

00017400 <Pwm_Config>:
   17400:	00000001 000173dc 00000001 000173f4     .....s.......s..

00017410 <_aInitStr.0>:
   17410:	00000000 54540000 45522052 53454747     ......TTR REGGES
   17420:	00000000                                ....

00017424 <_aV2C.0>:
   17424:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00017434 <__INIT_TABLE>:
   17434:	00000002 	.word	0x00000002
   17438:	1fff8b10 	.word	0x1fff8b10
   1743c:	0001745c 	.word	0x0001745c
   17440:	000174a4 	.word	0x000174a4
   17444:	1fff8800 	.word	0x1fff8800
   17448:	00000000 	.word	0x00000000
   1744c:	00000310 	.word	0x00000310

00017450 <__ZERO_TABLE>:
   17450:	00000001 	.word	0x00000001
   17454:	1fff8b60 	.word	0x1fff8b60
   17458:	1fff9ca0 	.word	0x1fff9ca0
