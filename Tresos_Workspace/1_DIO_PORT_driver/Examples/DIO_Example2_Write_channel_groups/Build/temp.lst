
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b27 	.word	0x00000b27
  10:	00000b29 	.word	0x00000b29
  14:	00000b2b 	.word	0x00000b2b
  18:	00000b2d 	.word	0x00000b2d
	...
  2c:	00000b2f 	.word	0x00000b2f
  30:	00000b31 	.word	0x00000b31
  34:	00000000 	.word	0x00000000
  38:	00000b33 	.word	0x00000b33
  3c:	00000b35 	.word	0x00000b35
  40:	00000b37 	.word	0x00000b37
  44:	00000b37 	.word	0x00000b37
  48:	00000b37 	.word	0x00000b37
  4c:	00000b37 	.word	0x00000b37
  50:	00000b37 	.word	0x00000b37
  54:	00000b37 	.word	0x00000b37
  58:	00000b37 	.word	0x00000b37
  5c:	00000b37 	.word	0x00000b37
  60:	00000b37 	.word	0x00000b37
  64:	00000b37 	.word	0x00000b37
  68:	00000b37 	.word	0x00000b37
  6c:	00000b37 	.word	0x00000b37
  70:	00000b37 	.word	0x00000b37
  74:	00000b37 	.word	0x00000b37
  78:	00000b37 	.word	0x00000b37
  7c:	00000b37 	.word	0x00000b37
  80:	00000b37 	.word	0x00000b37
  84:	00000b37 	.word	0x00000b37
  88:	00000b37 	.word	0x00000b37
  8c:	00000b37 	.word	0x00000b37
  90:	00000b37 	.word	0x00000b37
  94:	00000b37 	.word	0x00000b37
  98:	00000b37 	.word	0x00000b37
  9c:	00000b37 	.word	0x00000b37
  a0:	00000b37 	.word	0x00000b37
  a4:	00000b37 	.word	0x00000b37
  a8:	00000b37 	.word	0x00000b37
  ac:	00000b37 	.word	0x00000b37
  b0:	00000b37 	.word	0x00000b37
  b4:	00000b37 	.word	0x00000b37
  b8:	00000b37 	.word	0x00000b37
  bc:	00000b37 	.word	0x00000b37
  c0:	00000b37 	.word	0x00000b37
  c4:	00000b37 	.word	0x00000b37
  c8:	00000b37 	.word	0x00000b37
  cc:	00000b37 	.word	0x00000b37
  d0:	00000b37 	.word	0x00000b37
  d4:	00000b37 	.word	0x00000b37
  d8:	00000b37 	.word	0x00000b37
  dc:	00000b37 	.word	0x00000b37
  e0:	00000b37 	.word	0x00000b37
  e4:	00000b37 	.word	0x00000b37
  e8:	00000b37 	.word	0x00000b37
  ec:	00000b37 	.word	0x00000b37
  f0:	00000b37 	.word	0x00000b37
  f4:	00000b37 	.word	0x00000b37
  f8:	00000b37 	.word	0x00000b37
  fc:	00000b37 	.word	0x00000b37
 100:	00000b37 	.word	0x00000b37
 104:	00000b37 	.word	0x00000b37
 108:	00000b37 	.word	0x00000b37
 10c:	00000b37 	.word	0x00000b37
 110:	00000b37 	.word	0x00000b37
 114:	00000b37 	.word	0x00000b37
 118:	00000b37 	.word	0x00000b37
 11c:	00000b37 	.word	0x00000b37
 120:	00000b37 	.word	0x00000b37
 124:	00000b37 	.word	0x00000b37
 128:	00000b37 	.word	0x00000b37
 12c:	00000b37 	.word	0x00000b37
 130:	00000b37 	.word	0x00000b37
 134:	00000b37 	.word	0x00000b37
 138:	00000b37 	.word	0x00000b37
 13c:	00000b37 	.word	0x00000b37
 140:	00000b37 	.word	0x00000b37
 144:	00000b37 	.word	0x00000b37
 148:	00000b37 	.word	0x00000b37
 14c:	00000b37 	.word	0x00000b37
 150:	00000b37 	.word	0x00000b37
 154:	00000b37 	.word	0x00000b37
 158:	00000b37 	.word	0x00000b37
 15c:	00000b37 	.word	0x00000b37
 160:	00000b37 	.word	0x00000b37
 164:	00000b37 	.word	0x00000b37
 168:	00000b37 	.word	0x00000b37
 16c:	00000b37 	.word	0x00000b37
 170:	00000b37 	.word	0x00000b37
 174:	00000b37 	.word	0x00000b37
 178:	00000b37 	.word	0x00000b37
 17c:	00000b37 	.word	0x00000b37
 180:	00000b37 	.word	0x00000b37
 184:	00000b37 	.word	0x00000b37
 188:	00000b37 	.word	0x00000b37
 18c:	00000b37 	.word	0x00000b37
 190:	00000b37 	.word	0x00000b37
 194:	00000b37 	.word	0x00000b37
 198:	00000b37 	.word	0x00000b37
 19c:	00000b37 	.word	0x00000b37
 1a0:	00000b37 	.word	0x00000b37
 1a4:	00000b37 	.word	0x00000b37
 1a8:	00000b37 	.word	0x00000b37
 1ac:	00000b37 	.word	0x00000b37
 1b0:	00000b37 	.word	0x00000b37
 1b4:	00000b37 	.word	0x00000b37
 1b8:	00000b37 	.word	0x00000b37
 1bc:	00000b37 	.word	0x00000b37
 1c0:	00000b37 	.word	0x00000b37
 1c4:	00000b37 	.word	0x00000b37
 1c8:	00000b37 	.word	0x00000b37
 1cc:	00000b37 	.word	0x00000b37
 1d0:	00000b37 	.word	0x00000b37
 1d4:	00000b37 	.word	0x00000b37
 1d8:	00000b37 	.word	0x00000b37
 1dc:	00000b37 	.word	0x00000b37
 1e0:	00000b37 	.word	0x00000b37
 1e4:	00000b37 	.word	0x00000b37
 1e8:	00000b37 	.word	0x00000b37
 1ec:	00000b37 	.word	0x00000b37
 1f0:	00000b37 	.word	0x00000b37
 1f4:	00000b37 	.word	0x00000b37
 1f8:	00000b37 	.word	0x00000b37
 1fc:	00000b37 	.word	0x00000b37
 200:	00000b37 	.word	0x00000b37
 204:	00000b37 	.word	0x00000b37
 208:	00000b37 	.word	0x00000b37
 20c:	00000b37 	.word	0x00000b37
 210:	00000b37 	.word	0x00000b37
 214:	00000b37 	.word	0x00000b37
 218:	00000b37 	.word	0x00000b37
 21c:	00000b37 	.word	0x00000b37
 220:	00000b37 	.word	0x00000b37
 224:	00000b37 	.word	0x00000b37
 228:	00000b37 	.word	0x00000b37
 22c:	00000b37 	.word	0x00000b37
 230:	00000b37 	.word	0x00000b37
 234:	00000b37 	.word	0x00000b37
 238:	00000b37 	.word	0x00000b37
 23c:	00000b37 	.word	0x00000b37
 240:	00000b37 	.word	0x00000b37
 244:	00000b37 	.word	0x00000b37
 248:	00000b37 	.word	0x00000b37
 24c:	00000b37 	.word	0x00000b37
 250:	00000b37 	.word	0x00000b37
 254:	00000b37 	.word	0x00000b37
 258:	00000b37 	.word	0x00000b37
 25c:	00000b37 	.word	0x00000b37
 260:	00000b37 	.word	0x00000b37
 264:	00000b37 	.word	0x00000b37
 268:	00000b37 	.word	0x00000b37
 26c:	00000b37 	.word	0x00000b37
 270:	00000b37 	.word	0x00000b37
 274:	00000b37 	.word	0x00000b37
 278:	00000b37 	.word	0x00000b37
 27c:	00000b37 	.word	0x00000b37
 280:	00000b37 	.word	0x00000b37
 284:	00000b37 	.word	0x00000b37
 288:	00000b37 	.word	0x00000b37
 28c:	00000b37 	.word	0x00000b37
 290:	00000b37 	.word	0x00000b37
 294:	00000b37 	.word	0x00000b37
 298:	00000b37 	.word	0x00000b37
 29c:	00000b37 	.word	0x00000b37
 2a0:	00000b37 	.word	0x00000b37
 2a4:	00000b37 	.word	0x00000b37
 2a8:	00000b37 	.word	0x00000b37
 2ac:	00000b37 	.word	0x00000b37
 2b0:	00000b37 	.word	0x00000b37
 2b4:	00000b37 	.word	0x00000b37
 2b8:	00000b37 	.word	0x00000b37
 2bc:	00000b37 	.word	0x00000b37
 2c0:	00000b37 	.word	0x00000b37
 2c4:	00000b37 	.word	0x00000b37
 2c8:	00000b37 	.word	0x00000b37
 2cc:	00000b37 	.word	0x00000b37
 2d0:	00000b37 	.word	0x00000b37
 2d4:	00000b37 	.word	0x00000b37
 2d8:	00000b37 	.word	0x00000b37
 2dc:	00000b37 	.word	0x00000b37
 2e0:	00000b37 	.word	0x00000b37
 2e4:	00000b37 	.word	0x00000b37
 2e8:	00000b37 	.word	0x00000b37
 2ec:	00000b37 	.word	0x00000b37
 2f0:	00000b37 	.word	0x00000b37
 2f4:	00000b37 	.word	0x00000b37
 2f8:	00000b37 	.word	0x00000b37
 2fc:	00000b37 	.word	0x00000b37
 300:	00000b37 	.word	0x00000b37
 304:	00000b37 	.word	0x00000b37
 308:	00000b37 	.word	0x00000b37
 30c:	00000b37 	.word	0x00000b37

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa87 	bl	994 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb46 	bl	b1c <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e00 	.word	0x1fff8e00

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fa91 	bl	ac0 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    EcuM_Init();
     8b4:	f000 f83e 	bl	934 <EcuM_Init>

    while( 1u )
    {
        /*Write a value of four bits on a group of Dio channels*/
        Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, 0x5u );
     8b8:	2105      	movs	r1, #5
     8ba:	481c      	ldr	r0, [pc, #112]	; (92c <main+0x7c>)
     8bc:	f005 f857 	bl	596e <Dio_WriteChannelGroup>
        /*dummy delay*/
        for( uint32 i = 0u ; i < 2000000u ; i++ );
     8c0:	2300      	movs	r3, #0
     8c2:	9303      	str	r3, [sp, #12]
     8c4:	e002      	b.n	8cc <main+0x1c>
     8c6:	9b03      	ldr	r3, [sp, #12]
     8c8:	3301      	adds	r3, #1
     8ca:	9303      	str	r3, [sp, #12]
     8cc:	9b03      	ldr	r3, [sp, #12]
     8ce:	4a18      	ldr	r2, [pc, #96]	; (930 <main+0x80>)
     8d0:	4293      	cmp	r3, r2
     8d2:	d9f8      	bls.n	8c6 <main+0x16>
        Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, 0x0u );
     8d4:	2100      	movs	r1, #0
     8d6:	4815      	ldr	r0, [pc, #84]	; (92c <main+0x7c>)
     8d8:	f005 f849 	bl	596e <Dio_WriteChannelGroup>
        /*dummy delay*/
        for( uint32 i = 0u ; i < 2000000u ; i++ );
     8dc:	2300      	movs	r3, #0
     8de:	9302      	str	r3, [sp, #8]
     8e0:	e002      	b.n	8e8 <main+0x38>
     8e2:	9b02      	ldr	r3, [sp, #8]
     8e4:	3301      	adds	r3, #1
     8e6:	9302      	str	r3, [sp, #8]
     8e8:	9b02      	ldr	r3, [sp, #8]
     8ea:	4a11      	ldr	r2, [pc, #68]	; (930 <main+0x80>)
     8ec:	4293      	cmp	r3, r2
     8ee:	d9f8      	bls.n	8e2 <main+0x32>
        /*Write a value of four bits on a group of Dio channels*/
        Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, 0xAu );
     8f0:	210a      	movs	r1, #10
     8f2:	480e      	ldr	r0, [pc, #56]	; (92c <main+0x7c>)
     8f4:	f005 f83b 	bl	596e <Dio_WriteChannelGroup>
        /*dummy delay*/
        for( uint32 i = 0u ; i < 2000000u ; i++ );
     8f8:	2300      	movs	r3, #0
     8fa:	9301      	str	r3, [sp, #4]
     8fc:	e002      	b.n	904 <main+0x54>
     8fe:	9b01      	ldr	r3, [sp, #4]
     900:	3301      	adds	r3, #1
     902:	9301      	str	r3, [sp, #4]
     904:	9b01      	ldr	r3, [sp, #4]
     906:	4a0a      	ldr	r2, [pc, #40]	; (930 <main+0x80>)
     908:	4293      	cmp	r3, r2
     90a:	d9f8      	bls.n	8fe <main+0x4e>
        Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, 0x0u );
     90c:	2100      	movs	r1, #0
     90e:	4807      	ldr	r0, [pc, #28]	; (92c <main+0x7c>)
     910:	f005 f82d 	bl	596e <Dio_WriteChannelGroup>
        /*dummy delay*/
        for( uint32 i = 0u ; i < 2000000u ; i++ );
     914:	2300      	movs	r3, #0
     916:	9300      	str	r3, [sp, #0]
     918:	e002      	b.n	920 <main+0x70>
     91a:	9b00      	ldr	r3, [sp, #0]
     91c:	3301      	adds	r3, #1
     91e:	9300      	str	r3, [sp, #0]
     920:	9b00      	ldr	r3, [sp, #0]
     922:	4a03      	ldr	r2, [pc, #12]	; (930 <main+0x80>)
     924:	4293      	cmp	r3, r2
     926:	d9f8      	bls.n	91a <main+0x6a>
        Dio_WriteChannelGroup( DioConf_DioChannelGroup_PORTC_LEDS, 0x5u );
     928:	e7c6      	b.n	8b8 <main+0x8>
     92a:	bf00      	nop
     92c:	00007ccc 	.word	0x00007ccc
     930:	001e847f 	.word	0x001e847f

00000934 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     934:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     936:	4807      	ldr	r0, [pc, #28]	; (954 <EcuM_Init+0x20>)
     938:	f003 fea8 	bl	468c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     93c:	2000      	movs	r0, #0
     93e:	f003 fef9 	bl	4734 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     942:	2000      	movs	r0, #0
     944:	f003 ff1a 	bl	477c <Mcu_SetMode>
    /*Apply all the Pin Port microcontroller configuration, for this case
    ports from D0 to D3 are configured as output*/
    Port_Init( &Port_Config );
     948:	4803      	ldr	r0, [pc, #12]	; (958 <EcuM_Init+0x24>)
     94a:	f004 faa1 	bl	4e90 <Port_Init>
}
     94e:	bf00      	nop
     950:	bd08      	pop	{r3, pc}
     952:	bf00      	nop
     954:	00007cd4 	.word	0x00007cd4
     958:	00007eac 	.word	0x00007eac

0000095c <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     95c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     95e:	f3ef 8310 	mrs	r3, PRIMASK
     962:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     964:	4623      	mov	r3, r4
}
     966:	4618      	mov	r0, r3
     968:	f85d 4b04 	ldr.w	r4, [sp], #4
     96c:	4770      	bx	lr

0000096e <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     96e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     970:	f3ef 8310 	mrs	r3, PRIMASK
     974:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     976:	4623      	mov	r3, r4
}
     978:	4618      	mov	r0, r3
     97a:	f85d 4b04 	ldr.w	r4, [sp], #4
     97e:	4770      	bx	lr

00000980 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     980:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     982:	f3ef 8310 	mrs	r3, PRIMASK
     986:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     988:	4623      	mov	r3, r4
}
     98a:	4618      	mov	r0, r3
     98c:	f85d 4b04 	ldr.w	r4, [sp], #4
     990:	4770      	bx	lr
	...

00000994 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     994:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     996:	2300      	movs	r3, #0
     998:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     99a:	2300      	movs	r3, #0
     99c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     99e:	2300      	movs	r3, #0
     9a0:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9a2:	2300      	movs	r3, #0
     9a4:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     9a6:	4b44      	ldr	r3, [pc, #272]	; (ab8 <init_data_bss+0x124>)
     9a8:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     9aa:	4b44      	ldr	r3, [pc, #272]	; (abc <init_data_bss+0x128>)
     9ac:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     9ae:	9b05      	ldr	r3, [sp, #20]
     9b0:	681b      	ldr	r3, [r3, #0]
     9b2:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     9b4:	9b05      	ldr	r3, [sp, #20]
     9b6:	3304      	adds	r3, #4
     9b8:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     9ba:	9b05      	ldr	r3, [sp, #20]
     9bc:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     9be:	2300      	movs	r3, #0
     9c0:	9309      	str	r3, [sp, #36]	; 0x24
     9c2:	e03d      	b.n	a40 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     9c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9c6:	4613      	mov	r3, r2
     9c8:	005b      	lsls	r3, r3, #1
     9ca:	4413      	add	r3, r2
     9cc:	009b      	lsls	r3, r3, #2
     9ce:	461a      	mov	r2, r3
     9d0:	9b03      	ldr	r3, [sp, #12]
     9d2:	4413      	add	r3, r2
     9d4:	685b      	ldr	r3, [r3, #4]
     9d6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9da:	4613      	mov	r3, r2
     9dc:	005b      	lsls	r3, r3, #1
     9de:	4413      	add	r3, r2
     9e0:	009b      	lsls	r3, r3, #2
     9e2:	461a      	mov	r2, r3
     9e4:	9b03      	ldr	r3, [sp, #12]
     9e6:	4413      	add	r3, r2
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9ee:	4613      	mov	r3, r2
     9f0:	005b      	lsls	r3, r3, #1
     9f2:	4413      	add	r3, r2
     9f4:	009b      	lsls	r3, r3, #2
     9f6:	461a      	mov	r2, r3
     9f8:	9b03      	ldr	r3, [sp, #12]
     9fa:	4413      	add	r3, r2
     9fc:	689b      	ldr	r3, [r3, #8]
     9fe:	4619      	mov	r1, r3
     a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a02:	4613      	mov	r3, r2
     a04:	005b      	lsls	r3, r3, #1
     a06:	4413      	add	r3, r2
     a08:	009b      	lsls	r3, r3, #2
     a0a:	461a      	mov	r2, r3
     a0c:	9b03      	ldr	r3, [sp, #12]
     a0e:	4413      	add	r3, r2
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	1acb      	subs	r3, r1, r3
     a14:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a16:	2300      	movs	r3, #0
     a18:	9308      	str	r3, [sp, #32]
     a1a:	e00a      	b.n	a32 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a1c:	9a00      	ldr	r2, [sp, #0]
     a1e:	9b08      	ldr	r3, [sp, #32]
     a20:	441a      	add	r2, r3
     a22:	9901      	ldr	r1, [sp, #4]
     a24:	9b08      	ldr	r3, [sp, #32]
     a26:	440b      	add	r3, r1
     a28:	7812      	ldrb	r2, [r2, #0]
     a2a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a2c:	9b08      	ldr	r3, [sp, #32]
     a2e:	3301      	adds	r3, #1
     a30:	9308      	str	r3, [sp, #32]
     a32:	9a08      	ldr	r2, [sp, #32]
     a34:	9b06      	ldr	r3, [sp, #24]
     a36:	429a      	cmp	r2, r3
     a38:	d3f0      	bcc.n	a1c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a3c:	3301      	adds	r3, #1
     a3e:	9309      	str	r3, [sp, #36]	; 0x24
     a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a42:	9b07      	ldr	r3, [sp, #28]
     a44:	429a      	cmp	r2, r3
     a46:	d3bd      	bcc.n	9c4 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a48:	9b04      	ldr	r3, [sp, #16]
     a4a:	681b      	ldr	r3, [r3, #0]
     a4c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a4e:	9b04      	ldr	r3, [sp, #16]
     a50:	3304      	adds	r3, #4
     a52:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a54:	9b04      	ldr	r3, [sp, #16]
     a56:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a58:	2300      	movs	r3, #0
     a5a:	9309      	str	r3, [sp, #36]	; 0x24
     a5c:	e024      	b.n	aa8 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a60:	00db      	lsls	r3, r3, #3
     a62:	9a02      	ldr	r2, [sp, #8]
     a64:	4413      	add	r3, r2
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a6c:	00db      	lsls	r3, r3, #3
     a6e:	9a02      	ldr	r2, [sp, #8]
     a70:	4413      	add	r3, r2
     a72:	685b      	ldr	r3, [r3, #4]
     a74:	4619      	mov	r1, r3
     a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a78:	00db      	lsls	r3, r3, #3
     a7a:	9a02      	ldr	r2, [sp, #8]
     a7c:	4413      	add	r3, r2
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	1acb      	subs	r3, r1, r3
     a82:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a84:	2300      	movs	r3, #0
     a86:	9308      	str	r3, [sp, #32]
     a88:	e007      	b.n	a9a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     a8a:	9a01      	ldr	r2, [sp, #4]
     a8c:	9b08      	ldr	r3, [sp, #32]
     a8e:	4413      	add	r3, r2
     a90:	2200      	movs	r2, #0
     a92:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a94:	9b08      	ldr	r3, [sp, #32]
     a96:	3301      	adds	r3, #1
     a98:	9308      	str	r3, [sp, #32]
     a9a:	9a08      	ldr	r2, [sp, #32]
     a9c:	9b06      	ldr	r3, [sp, #24]
     a9e:	429a      	cmp	r2, r3
     aa0:	d3f3      	bcc.n	a8a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aa4:	3301      	adds	r3, #1
     aa6:	9309      	str	r3, [sp, #36]	; 0x24
     aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aaa:	9b07      	ldr	r3, [sp, #28]
     aac:	429a      	cmp	r2, r3
     aae:	d3d6      	bcc.n	a5e <init_data_bss+0xca>
        }
    }
}
     ab0:	bf00      	nop
     ab2:	bf00      	nop
     ab4:	b00a      	add	sp, #40	; 0x28
     ab6:	4770      	bx	lr
     ab8:	00007ef8 	.word	0x00007ef8
     abc:	00007f14 	.word	0x00007f14

00000ac0 <sys_m4_cache_init>:
{
     ac0:	b084      	sub	sp, #16
     ac2:	4603      	mov	r3, r0
     ac4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     ac8:	2300      	movs	r3, #0
     aca:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     ace:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d118      	bne.n	b08 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     ad6:	4b10      	ldr	r3, [pc, #64]	; (b18 <sys_m4_cache_init+0x58>)
     ad8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     adc:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     ade:	4b0e      	ldr	r3, [pc, #56]	; (b18 <sys_m4_cache_init+0x58>)
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	4a0d      	ldr	r2, [pc, #52]	; (b18 <sys_m4_cache_init+0x58>)
     ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ae8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     aea:	bf00      	nop
     aec:	4b0a      	ldr	r3, [pc, #40]	; (b18 <sys_m4_cache_init+0x58>)
     aee:	681b      	ldr	r3, [r3, #0]
     af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     af8:	d0f8      	beq.n	aec <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     afa:	4b07      	ldr	r3, [pc, #28]	; (b18 <sys_m4_cache_init+0x58>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	4a06      	ldr	r2, [pc, #24]	; (b18 <sys_m4_cache_init+0x58>)
     b00:	f043 0301 	orr.w	r3, r3, #1
     b04:	6013      	str	r3, [r2, #0]
     b06:	e002      	b.n	b0e <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b08:	2301      	movs	r3, #1
     b0a:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b12:	4618      	mov	r0, r3
     b14:	b004      	add	sp, #16
     b16:	4770      	bx	lr
     b18:	e0082000 	.word	0xe0082000

00000b1c <startup_go_to_user_mode>:
}
     b1c:	bf00      	nop
     b1e:	4770      	bx	lr

00000b20 <Sys_GetCoreID>:
    return 0U;
     b20:	2300      	movs	r3, #0
}
     b22:	4618      	mov	r0, r3
     b24:	4770      	bx	lr

00000b26 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b26:	e7fe      	b.n	b26 <HardFault_Handler>

00000b28 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b28:	e7fe      	b.n	b28 <MemManage_Handler>

00000b2a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b2a:	e7fe      	b.n	b2a <BusFault_Handler>

00000b2c <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b2c:	e7fe      	b.n	b2c <UsageFault_Handler>

00000b2e <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b2e:	e7fe      	b.n	b2e <SVC_Handler>

00000b30 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b30:	e7fe      	b.n	b30 <DebugMon_Handler>

00000b32 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b32:	e7fe      	b.n	b32 <PendSV_Handler>

00000b34 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b34:	e7fe      	b.n	b34 <SysTick_Handler>

00000b36 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b36:	e7fe      	b.n	b36 <undefined_handler>

00000b38 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     b38:	2300      	movs	r3, #0
}
     b3a:	4618      	mov	r0, r3
     b3c:	4770      	bx	lr

00000b3e <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     b3e:	b082      	sub	sp, #8
     b40:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     b42:	2301      	movs	r3, #1
}
     b44:	4618      	mov	r0, r3
     b46:	b002      	add	sp, #8
     b48:	4770      	bx	lr

00000b4a <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     b4a:	b082      	sub	sp, #8
     b4c:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     b4e:	bf00      	nop
     b50:	b002      	add	sp, #8
     b52:	4770      	bx	lr

00000b54 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     b54:	b082      	sub	sp, #8
     b56:	9001      	str	r0, [sp, #4]
    return Micros;
     b58:	9b01      	ldr	r3, [sp, #4]
}
     b5a:	4618      	mov	r0, r3
     b5c:	b002      	add	sp, #8
     b5e:	4770      	bx	lr

00000b60 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     b60:	b500      	push	{lr}
     b62:	b083      	sub	sp, #12
     b64:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     b66:	f000 f86d 	bl	c44 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     b6a:	bf00      	nop
     b6c:	b003      	add	sp, #12
     b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00000b72 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     b72:	b500      	push	{lr}
     b74:	b085      	sub	sp, #20
     b76:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     b78:	2300      	movs	r3, #0
     b7a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     b7c:	9b01      	ldr	r3, [sp, #4]
     b7e:	2b00      	cmp	r3, #0
     b80:	d003      	beq.n	b8a <OsIf_GetCounter+0x18>
     b82:	9b01      	ldr	r3, [sp, #4]
     b84:	2b01      	cmp	r3, #1
     b86:	d004      	beq.n	b92 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     b88:	e007      	b.n	b9a <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     b8a:	f7ff ffd5 	bl	b38 <OsIf_Timer_Dummy_GetCounter>
     b8e:	9003      	str	r0, [sp, #12]
            break;
     b90:	e003      	b.n	b9a <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     b92:	f000 f873 	bl	c7c <OsIf_Timer_System_GetCounter>
     b96:	9003      	str	r0, [sp, #12]
            break;
     b98:	bf00      	nop
    }

    return Value;
     b9a:	9b03      	ldr	r3, [sp, #12]
}
     b9c:	4618      	mov	r0, r3
     b9e:	b005      	add	sp, #20
     ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00000ba4 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     ba4:	b500      	push	{lr}
     ba6:	b085      	sub	sp, #20
     ba8:	9001      	str	r0, [sp, #4]
     baa:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     bac:	2300      	movs	r3, #0
     bae:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     bb0:	9b00      	ldr	r3, [sp, #0]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d003      	beq.n	bbe <OsIf_GetElapsed+0x1a>
     bb6:	9b00      	ldr	r3, [sp, #0]
     bb8:	2b01      	cmp	r3, #1
     bba:	d005      	beq.n	bc8 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     bbc:	e009      	b.n	bd2 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     bbe:	9801      	ldr	r0, [sp, #4]
     bc0:	f7ff ffbd 	bl	b3e <OsIf_Timer_Dummy_GetElapsed>
     bc4:	9003      	str	r0, [sp, #12]
            break;
     bc6:	e004      	b.n	bd2 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     bc8:	9801      	ldr	r0, [sp, #4]
     bca:	f000 f865 	bl	c98 <OsIf_Timer_System_GetElapsed>
     bce:	9003      	str	r0, [sp, #12]
            break;
     bd0:	bf00      	nop
    }

    return Value;
     bd2:	9b03      	ldr	r3, [sp, #12]
}
     bd4:	4618      	mov	r0, r3
     bd6:	b005      	add	sp, #20
     bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00000bdc <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     bdc:	b500      	push	{lr}
     bde:	b083      	sub	sp, #12
     be0:	9001      	str	r0, [sp, #4]
     be2:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     be4:	9b00      	ldr	r3, [sp, #0]
     be6:	2b00      	cmp	r3, #0
     be8:	d003      	beq.n	bf2 <OsIf_SetTimerFrequency+0x16>
     bea:	9b00      	ldr	r3, [sp, #0]
     bec:	2b01      	cmp	r3, #1
     bee:	d004      	beq.n	bfa <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     bf0:	e007      	b.n	c02 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
     bf2:	9801      	ldr	r0, [sp, #4]
     bf4:	f7ff ffa9 	bl	b4a <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
     bf8:	e003      	b.n	c02 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
     bfa:	9801      	ldr	r0, [sp, #4]
     bfc:	f000 f85c 	bl	cb8 <OsIf_Timer_System_SetTimerFrequency>
            break;
     c00:	bf00      	nop
    }
}
     c02:	bf00      	nop
     c04:	b003      	add	sp, #12
     c06:	f85d fb04 	ldr.w	pc, [sp], #4

00000c0a <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
     c0a:	b500      	push	{lr}
     c0c:	b085      	sub	sp, #20
     c0e:	9001      	str	r0, [sp, #4]
     c10:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     c12:	2300      	movs	r3, #0
     c14:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     c16:	9b00      	ldr	r3, [sp, #0]
     c18:	2b00      	cmp	r3, #0
     c1a:	d003      	beq.n	c24 <OsIf_MicrosToTicks+0x1a>
     c1c:	9b00      	ldr	r3, [sp, #0]
     c1e:	2b01      	cmp	r3, #1
     c20:	d005      	beq.n	c2e <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     c22:	e009      	b.n	c38 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
     c24:	9801      	ldr	r0, [sp, #4]
     c26:	f7ff ff95 	bl	b54 <OsIf_Timer_Dummy_MicrosToTicks>
     c2a:	9003      	str	r0, [sp, #12]
            break;
     c2c:	e004      	b.n	c38 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
     c2e:	9801      	ldr	r0, [sp, #4]
     c30:	f000 f850 	bl	cd4 <OsIf_Timer_System_MicrosToTicks>
     c34:	9003      	str	r0, [sp, #12]
            break;
     c36:	bf00      	nop
    }

    return Value;
     c38:	9b03      	ldr	r3, [sp, #12]
}
     c3a:	4618      	mov	r0, r3
     c3c:	b005      	add	sp, #20
     c3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000c44 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
     c44:	b500      	push	{lr}
     c46:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
     c48:	2300      	movs	r3, #0
     c4a:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
     c4c:	4a09      	ldr	r2, [pc, #36]	; (c74 <OsIf_Timer_System_Init+0x30>)
     c4e:	9b01      	ldr	r3, [sp, #4]
     c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c54:	685a      	ldr	r2, [r3, #4]
     c56:	4908      	ldr	r1, [pc, #32]	; (c78 <OsIf_Timer_System_Init+0x34>)
     c58:	9b01      	ldr	r3, [sp, #4]
     c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
     c5e:	4a06      	ldr	r2, [pc, #24]	; (c78 <OsIf_Timer_System_Init+0x34>)
     c60:	9b01      	ldr	r3, [sp, #4]
     c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c66:	4618      	mov	r0, r3
     c68:	f000 f868 	bl	d3c <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
     c6c:	bf00      	nop
     c6e:	b003      	add	sp, #12
     c70:	f85d fb04 	ldr.w	pc, [sp], #4
     c74:	00007cf8 	.word	0x00007cf8
     c78:	1fff8b40 	.word	0x1fff8b40

00000c7c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
     c7c:	b500      	push	{lr}
     c7e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
     c80:	2300      	movs	r3, #0
     c82:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     c84:	2300      	movs	r3, #0
     c86:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
     c88:	f000 f86c 	bl	d64 <OsIf_Timer_System_Internal_GetCounter>
     c8c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
     c8e:	9b01      	ldr	r3, [sp, #4]
}
     c90:	4618      	mov	r0, r3
     c92:	b003      	add	sp, #12
     c94:	f85d fb04 	ldr.w	pc, [sp], #4

00000c98 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
     c98:	b500      	push	{lr}
     c9a:	b085      	sub	sp, #20
     c9c:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
     c9e:	2300      	movs	r3, #0
     ca0:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
     ca2:	2300      	movs	r3, #0
     ca4:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
     ca6:	9801      	ldr	r0, [sp, #4]
     ca8:	f000 f864 	bl	d74 <OsIf_Timer_System_Internal_GetElapsed>
     cac:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
     cae:	9b03      	ldr	r3, [sp, #12]
}
     cb0:	4618      	mov	r0, r3
     cb2:	b005      	add	sp, #20
     cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00000cb8 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
     cb8:	b084      	sub	sp, #16
     cba:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     cbc:	2300      	movs	r3, #0
     cbe:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
     cc0:	4903      	ldr	r1, [pc, #12]	; (cd0 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     cc2:	9b03      	ldr	r3, [sp, #12]
     cc4:	9a01      	ldr	r2, [sp, #4]
     cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
     cca:	bf00      	nop
     ccc:	b004      	add	sp, #16
     cce:	4770      	bx	lr
     cd0:	1fff8b40 	.word	0x1fff8b40

00000cd4 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
     cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cd6:	b087      	sub	sp, #28
     cd8:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
     cda:	2100      	movs	r1, #0
     cdc:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
     cde:	2100      	movs	r1, #0
     ce0:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
     ce2:	9901      	ldr	r1, [sp, #4]
     ce4:	2000      	movs	r0, #0
     ce6:	460e      	mov	r6, r1
     ce8:	4607      	mov	r7, r0
     cea:	4812      	ldr	r0, [pc, #72]	; (d34 <OsIf_Timer_System_MicrosToTicks+0x60>)
     cec:	9904      	ldr	r1, [sp, #16]
     cee:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     cf2:	2000      	movs	r0, #0
     cf4:	460c      	mov	r4, r1
     cf6:	4605      	mov	r5, r0
     cf8:	fb04 f007 	mul.w	r0, r4, r7
     cfc:	fb06 f105 	mul.w	r1, r6, r5
     d00:	4401      	add	r1, r0
     d02:	fba6 2304 	umull	r2, r3, r6, r4
     d06:	4419      	add	r1, r3
     d08:	460b      	mov	r3, r1
     d0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
     d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
     d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     d16:	4a08      	ldr	r2, [pc, #32]	; (d38 <OsIf_Timer_System_MicrosToTicks+0x64>)
     d18:	f04f 0300 	mov.w	r3, #0
     d1c:	f7ff fc42 	bl	5a4 <__aeabi_uldivmod>
     d20:	4602      	mov	r2, r0
     d22:	460b      	mov	r3, r1
     d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
     d28:	9b02      	ldr	r3, [sp, #8]
     d2a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
     d2c:	9b05      	ldr	r3, [sp, #20]
}
     d2e:	4618      	mov	r0, r3
     d30:	b007      	add	sp, #28
     d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d34:	1fff8b40 	.word	0x1fff8b40
     d38:	000f4240 	.word	0x000f4240

00000d3c <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
     d3c:	b082      	sub	sp, #8
     d3e:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
     d40:	4b07      	ldr	r3, [pc, #28]	; (d60 <OsIf_Timer_System_Internal_Init+0x24>)
     d42:	2200      	movs	r2, #0
     d44:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
     d46:	4b06      	ldr	r3, [pc, #24]	; (d60 <OsIf_Timer_System_Internal_Init+0x24>)
     d48:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     d4c:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
     d4e:	4b04      	ldr	r3, [pc, #16]	; (d60 <OsIf_Timer_System_Internal_Init+0x24>)
     d50:	2200      	movs	r2, #0
     d52:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
     d54:	4b02      	ldr	r3, [pc, #8]	; (d60 <OsIf_Timer_System_Internal_Init+0x24>)
     d56:	2205      	movs	r2, #5
     d58:	601a      	str	r2, [r3, #0]
}
     d5a:	bf00      	nop
     d5c:	b002      	add	sp, #8
     d5e:	4770      	bx	lr
     d60:	e000e010 	.word	0xe000e010

00000d64 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
     d64:	4b02      	ldr	r3, [pc, #8]	; (d70 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     d66:	689b      	ldr	r3, [r3, #8]
     d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
     d6c:	4618      	mov	r0, r3
     d6e:	4770      	bx	lr
     d70:	e000e010 	.word	0xe000e010

00000d74 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
     d74:	b084      	sub	sp, #16
     d76:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
     d78:	4b10      	ldr	r3, [pc, #64]	; (dbc <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d7a:	689b      	ldr	r3, [r3, #8]
     d7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d80:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
     d82:	2300      	movs	r3, #0
     d84:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
     d86:	9b01      	ldr	r3, [sp, #4]
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	9a02      	ldr	r2, [sp, #8]
     d8c:	429a      	cmp	r2, r3
     d8e:	d909      	bls.n	da4 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
     d90:	9b01      	ldr	r3, [sp, #4]
     d92:	681a      	ldr	r2, [r3, #0]
     d94:	9b02      	ldr	r3, [sp, #8]
     d96:	1ad3      	subs	r3, r2, r3
     d98:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d9c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     da0:	9303      	str	r3, [sp, #12]
     da2:	e004      	b.n	dae <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	681a      	ldr	r2, [r3, #0]
     da8:	9b02      	ldr	r3, [sp, #8]
     daa:	1ad3      	subs	r3, r2, r3
     dac:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
     dae:	9b01      	ldr	r3, [sp, #4]
     db0:	9a02      	ldr	r2, [sp, #8]
     db2:	601a      	str	r2, [r3, #0]

    return dif;
     db4:	9b03      	ldr	r3, [sp, #12]
}
     db6:	4618      	mov	r0, r3
     db8:	b004      	add	sp, #16
     dba:	4770      	bx	lr
     dbc:	e000e010 	.word	0xe000e010

00000dc0 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
     dc0:	b082      	sub	sp, #8
     dc2:	9001      	str	r0, [sp, #4]
     dc4:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
     dc6:	bf00      	nop
     dc8:	b002      	add	sp, #8
     dca:	4770      	bx	lr

00000dcc <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
     dcc:	b500      	push	{lr}
     dce:	b085      	sub	sp, #20
     dd0:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
     dd2:	4b24      	ldr	r3, [pc, #144]	; (e64 <Clock_Ip_UpdateDriverContext+0x98>)
     dd4:	2201      	movs	r2, #1
     dd6:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
     dd8:	4b23      	ldr	r3, [pc, #140]	; (e68 <Clock_Ip_UpdateDriverContext+0x9c>)
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2102      	movs	r1, #2
     dde:	4618      	mov	r0, r3
     de0:	f003 fc32 	bl	4648 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     de4:	2300      	movs	r3, #0
     de6:	f88d 300f 	strb.w	r3, [sp, #15]
     dea:	e015      	b.n	e18 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
     dec:	f89d 300f 	ldrb.w	r3, [sp, #15]
     df0:	9a01      	ldr	r2, [sp, #4]
     df2:	334a      	adds	r3, #74	; 0x4a
     df4:	00db      	lsls	r3, r3, #3
     df6:	4413      	add	r3, r2
     df8:	6858      	ldr	r0, [r3, #4]
     dfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dfe:	9a01      	ldr	r2, [sp, #4]
     e00:	334a      	adds	r3, #74	; 0x4a
     e02:	00db      	lsls	r3, r3, #3
     e04:	4413      	add	r3, r2
     e06:	689b      	ldr	r3, [r3, #8]
     e08:	4619      	mov	r1, r3
     e0a:	f001 fadc 	bl	23c6 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     e0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e12:	3301      	adds	r3, #1
     e14:	f88d 300f 	strb.w	r3, [sp, #15]
     e18:	9b01      	ldr	r3, [sp, #4]
     e1a:	7bdb      	ldrb	r3, [r3, #15]
     e1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e20:	429a      	cmp	r2, r3
     e22:	d3e3      	bcc.n	dec <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
     e24:	f000 f824 	bl	e70 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     e28:	2301      	movs	r3, #1
     e2a:	f88d 300f 	strb.w	r3, [sp, #15]
     e2e:	e00e      	b.n	e4e <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
     e30:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e34:	9b01      	ldr	r3, [sp, #4]
     e36:	327e      	adds	r2, #126	; 0x7e
     e38:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     e3c:	490b      	ldr	r1, [pc, #44]	; (e6c <Clock_Ip_UpdateDriverContext+0xa0>)
     e3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e42:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     e44:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e48:	3301      	adds	r3, #1
     e4a:	f88d 300f 	strb.w	r3, [sp, #15]
     e4e:	9b01      	ldr	r3, [sp, #4]
     e50:	7cdb      	ldrb	r3, [r3, #19]
     e52:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e56:	429a      	cmp	r2, r3
     e58:	d3ea      	bcc.n	e30 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
     e5a:	bf00      	nop
     e5c:	bf00      	nop
     e5e:	b005      	add	sp, #20
     e60:	f85d fb04 	ldr.w	pc, [sp], #4
     e64:	1fff8b10 	.word	0x1fff8b10
     e68:	1fff8b44 	.word	0x1fff8b44
     e6c:	1fff8b50 	.word	0x1fff8b50

00000e70 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
     e70:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
     e72:	4b23      	ldr	r3, [pc, #140]	; (f00 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	f083 0301 	eor.w	r3, r3, #1
     e7a:	b2db      	uxtb	r3, r3
     e7c:	2b00      	cmp	r3, #0
     e7e:	d03d      	beq.n	efc <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
     e80:	4b1f      	ldr	r3, [pc, #124]	; (f00 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e82:	2201      	movs	r2, #1
     e84:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     e86:	4b1f      	ldr	r3, [pc, #124]	; (f04 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e88:	685b      	ldr	r3, [r3, #4]
     e8a:	2100      	movs	r1, #0
     e8c:	2000      	movs	r0, #0
     e8e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
     e90:	4b1c      	ldr	r3, [pc, #112]	; (f04 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e92:	689b      	ldr	r3, [r3, #8]
     e94:	2057      	movs	r0, #87	; 0x57
     e96:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     e98:	4b1b      	ldr	r3, [pc, #108]	; (f08 <Clock_Ip_CallEmptyCallbacks+0x98>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	2000      	movs	r0, #0
     e9e:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
     ea0:	4b1a      	ldr	r3, [pc, #104]	; (f0c <Clock_Ip_CallEmptyCallbacks+0x9c>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	2000      	movs	r0, #0
     ea6:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
     ea8:	4b19      	ldr	r3, [pc, #100]	; (f10 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	2000      	movs	r0, #0
     eae:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     eb0:	4b18      	ldr	r3, [pc, #96]	; (f14 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     eb2:	685b      	ldr	r3, [r3, #4]
     eb4:	2000      	movs	r0, #0
     eb6:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     eb8:	4b16      	ldr	r3, [pc, #88]	; (f14 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     eba:	689b      	ldr	r3, [r3, #8]
     ebc:	2057      	movs	r0, #87	; 0x57
     ebe:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ec0:	4b15      	ldr	r3, [pc, #84]	; (f18 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	2000      	movs	r0, #0
     ec6:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
     ec8:	4b13      	ldr	r3, [pc, #76]	; (f18 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     eca:	685b      	ldr	r3, [r3, #4]
     ecc:	2100      	movs	r1, #0
     ece:	2057      	movs	r0, #87	; 0x57
     ed0:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     ed2:	4b12      	ldr	r3, [pc, #72]	; (f1c <Clock_Ip_CallEmptyCallbacks+0xac>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2000      	movs	r0, #0
     ed8:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     eda:	4b11      	ldr	r3, [pc, #68]	; (f20 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     edc:	685b      	ldr	r3, [r3, #4]
     ede:	2000      	movs	r0, #0
     ee0:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     ee2:	4b0f      	ldr	r3, [pc, #60]	; (f20 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     ee4:	689b      	ldr	r3, [r3, #8]
     ee6:	2057      	movs	r0, #87	; 0x57
     ee8:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     eea:	4b0e      	ldr	r3, [pc, #56]	; (f24 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     eec:	685b      	ldr	r3, [r3, #4]
     eee:	2000      	movs	r0, #0
     ef0:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     ef2:	4b0d      	ldr	r3, [pc, #52]	; (f28 <Clock_Ip_CallEmptyCallbacks+0xb8>)
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	2100      	movs	r1, #0
     ef8:	2000      	movs	r0, #0
     efa:	4798      	blx	r3
    }
}
     efc:	bf00      	nop
     efe:	bd08      	pop	{r3, pc}
     f00:	1fff8b48 	.word	0x1fff8b48
     f04:	000077c0 	.word	0x000077c0
     f08:	000076d4 	.word	0x000076d4
     f0c:	00007710 	.word	0x00007710
     f10:	00007718 	.word	0x00007718
     f14:	00007740 	.word	0x00007740
     f18:	0000774c 	.word	0x0000774c
     f1c:	00007784 	.word	0x00007784
     f20:	000077d0 	.word	0x000077d0
     f24:	000077fc 	.word	0x000077fc
     f28:	000077f8 	.word	0x000077f8

00000f2c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
     f2c:	b500      	push	{lr}
     f2e:	b085      	sub	sp, #20
     f30:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     f32:	9b01      	ldr	r3, [sp, #4]
     f34:	7adb      	ldrb	r3, [r3, #11]
     f36:	9303      	str	r3, [sp, #12]
     f38:	e01f      	b.n	f7a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f3a:	9b03      	ldr	r3, [sp, #12]
     f3c:	1e5a      	subs	r2, r3, #1
     f3e:	9b01      	ldr	r3, [sp, #4]
     f40:	320d      	adds	r2, #13
     f42:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     f46:	495a      	ldr	r1, [pc, #360]	; (10b0 <Clock_Ip_ResetClockConfiguration+0x184>)
     f48:	4613      	mov	r3, r2
     f4a:	00db      	lsls	r3, r3, #3
     f4c:	4413      	add	r3, r2
     f4e:	440b      	add	r3, r1
     f50:	3301      	adds	r3, #1
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	461a      	mov	r2, r3
     f56:	4b57      	ldr	r3, [pc, #348]	; (10b4 <Clock_Ip_ResetClockConfiguration+0x188>)
     f58:	5c9b      	ldrb	r3, [r3, r2]
     f5a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
     f5c:	4a56      	ldr	r2, [pc, #344]	; (10b8 <Clock_Ip_ResetClockConfiguration+0x18c>)
     f5e:	9b02      	ldr	r3, [sp, #8]
     f60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f64:	9a03      	ldr	r2, [sp, #12]
     f66:	3a01      	subs	r2, #1
     f68:	320d      	adds	r2, #13
     f6a:	00d2      	lsls	r2, r2, #3
     f6c:	9901      	ldr	r1, [sp, #4]
     f6e:	440a      	add	r2, r1
     f70:	4610      	mov	r0, r2
     f72:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     f74:	9b03      	ldr	r3, [sp, #12]
     f76:	3b01      	subs	r3, #1
     f78:	9303      	str	r3, [sp, #12]
     f7a:	9b03      	ldr	r3, [sp, #12]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d1dc      	bne.n	f3a <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	7b9b      	ldrb	r3, [r3, #14]
     f84:	9303      	str	r3, [sp, #12]
     f86:	e026      	b.n	fd6 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     f88:	9b03      	ldr	r3, [sp, #12]
     f8a:	3b01      	subs	r3, #1
     f8c:	9a01      	ldr	r2, [sp, #4]
     f8e:	3324      	adds	r3, #36	; 0x24
     f90:	011b      	lsls	r3, r3, #4
     f92:	4413      	add	r3, r2
     f94:	3304      	adds	r3, #4
     f96:	681a      	ldr	r2, [r3, #0]
     f98:	4945      	ldr	r1, [pc, #276]	; (10b0 <Clock_Ip_ResetClockConfiguration+0x184>)
     f9a:	4613      	mov	r3, r2
     f9c:	00db      	lsls	r3, r3, #3
     f9e:	4413      	add	r3, r2
     fa0:	440b      	add	r3, r1
     fa2:	3301      	adds	r3, #1
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	461a      	mov	r2, r3
     fa8:	4b44      	ldr	r3, [pc, #272]	; (10bc <Clock_Ip_ResetClockConfiguration+0x190>)
     faa:	5c9b      	ldrb	r3, [r3, r2]
     fac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
     fae:	4944      	ldr	r1, [pc, #272]	; (10c0 <Clock_Ip_ResetClockConfiguration+0x194>)
     fb0:	9a02      	ldr	r2, [sp, #8]
     fb2:	4613      	mov	r3, r2
     fb4:	005b      	lsls	r3, r3, #1
     fb6:	4413      	add	r3, r2
     fb8:	009b      	lsls	r3, r3, #2
     fba:	440b      	add	r3, r1
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	9a03      	ldr	r2, [sp, #12]
     fc0:	3a01      	subs	r2, #1
     fc2:	3224      	adds	r2, #36	; 0x24
     fc4:	0112      	lsls	r2, r2, #4
     fc6:	9901      	ldr	r1, [sp, #4]
     fc8:	440a      	add	r2, r1
     fca:	3204      	adds	r2, #4
     fcc:	4610      	mov	r0, r2
     fce:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
     fd0:	9b03      	ldr	r3, [sp, #12]
     fd2:	3b01      	subs	r3, #1
     fd4:	9303      	str	r3, [sp, #12]
     fd6:	9b03      	ldr	r3, [sp, #12]
     fd8:	2b00      	cmp	r3, #0
     fda:	d1d5      	bne.n	f88 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	7a9b      	ldrb	r3, [r3, #10]
     fe0:	9303      	str	r3, [sp, #12]
     fe2:	e02a      	b.n	103a <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     fe4:	9b03      	ldr	r3, [sp, #12]
     fe6:	1e5a      	subs	r2, r3, #1
     fe8:	9901      	ldr	r1, [sp, #4]
     fea:	4613      	mov	r3, r2
     fec:	009b      	lsls	r3, r3, #2
     fee:	4413      	add	r3, r2
     ff0:	00db      	lsls	r3, r3, #3
     ff2:	440b      	add	r3, r1
     ff4:	3340      	adds	r3, #64	; 0x40
     ff6:	681a      	ldr	r2, [r3, #0]
     ff8:	492d      	ldr	r1, [pc, #180]	; (10b0 <Clock_Ip_ResetClockConfiguration+0x184>)
     ffa:	4613      	mov	r3, r2
     ffc:	00db      	lsls	r3, r3, #3
     ffe:	4413      	add	r3, r2
    1000:	440b      	add	r3, r1
    1002:	3301      	adds	r3, #1
    1004:	781b      	ldrb	r3, [r3, #0]
    1006:	461a      	mov	r2, r3
    1008:	4b2e      	ldr	r3, [pc, #184]	; (10c4 <Clock_Ip_ResetClockConfiguration+0x198>)
    100a:	5c9b      	ldrb	r3, [r3, r2]
    100c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    100e:	492e      	ldr	r1, [pc, #184]	; (10c8 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1010:	9a02      	ldr	r2, [sp, #8]
    1012:	4613      	mov	r3, r2
    1014:	009b      	lsls	r3, r3, #2
    1016:	4413      	add	r3, r2
    1018:	009b      	lsls	r3, r3, #2
    101a:	440b      	add	r3, r1
    101c:	6819      	ldr	r1, [r3, #0]
    101e:	9b03      	ldr	r3, [sp, #12]
    1020:	1e5a      	subs	r2, r3, #1
    1022:	4613      	mov	r3, r2
    1024:	009b      	lsls	r3, r3, #2
    1026:	4413      	add	r3, r2
    1028:	00db      	lsls	r3, r3, #3
    102a:	3340      	adds	r3, #64	; 0x40
    102c:	9a01      	ldr	r2, [sp, #4]
    102e:	4413      	add	r3, r2
    1030:	4618      	mov	r0, r3
    1032:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1034:	9b03      	ldr	r3, [sp, #12]
    1036:	3b01      	subs	r3, #1
    1038:	9303      	str	r3, [sp, #12]
    103a:	9b03      	ldr	r3, [sp, #12]
    103c:	2b00      	cmp	r3, #0
    103e:	d1d1      	bne.n	fe4 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1040:	9b01      	ldr	r3, [sp, #4]
    1042:	7a5b      	ldrb	r3, [r3, #9]
    1044:	9303      	str	r3, [sp, #12]
    1046:	e02b      	b.n	10a0 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1048:	9b03      	ldr	r3, [sp, #12]
    104a:	1e5a      	subs	r2, r3, #1
    104c:	9901      	ldr	r1, [sp, #4]
    104e:	4613      	mov	r3, r2
    1050:	009b      	lsls	r3, r3, #2
    1052:	4413      	add	r3, r2
    1054:	009b      	lsls	r3, r3, #2
    1056:	440b      	add	r3, r1
    1058:	332c      	adds	r3, #44	; 0x2c
    105a:	681a      	ldr	r2, [r3, #0]
    105c:	4914      	ldr	r1, [pc, #80]	; (10b0 <Clock_Ip_ResetClockConfiguration+0x184>)
    105e:	4613      	mov	r3, r2
    1060:	00db      	lsls	r3, r3, #3
    1062:	4413      	add	r3, r2
    1064:	440b      	add	r3, r1
    1066:	3301      	adds	r3, #1
    1068:	781b      	ldrb	r3, [r3, #0]
    106a:	461a      	mov	r2, r3
    106c:	4b17      	ldr	r3, [pc, #92]	; (10cc <Clock_Ip_ResetClockConfiguration+0x1a0>)
    106e:	5c9b      	ldrb	r3, [r3, r2]
    1070:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1072:	4917      	ldr	r1, [pc, #92]	; (10d0 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1074:	9a02      	ldr	r2, [sp, #8]
    1076:	4613      	mov	r3, r2
    1078:	009b      	lsls	r3, r3, #2
    107a:	4413      	add	r3, r2
    107c:	009b      	lsls	r3, r3, #2
    107e:	440b      	add	r3, r1
    1080:	6819      	ldr	r1, [r3, #0]
    1082:	9b03      	ldr	r3, [sp, #12]
    1084:	1e5a      	subs	r2, r3, #1
    1086:	4613      	mov	r3, r2
    1088:	009b      	lsls	r3, r3, #2
    108a:	4413      	add	r3, r2
    108c:	009b      	lsls	r3, r3, #2
    108e:	3328      	adds	r3, #40	; 0x28
    1090:	9a01      	ldr	r2, [sp, #4]
    1092:	4413      	add	r3, r2
    1094:	3304      	adds	r3, #4
    1096:	4618      	mov	r0, r3
    1098:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    109a:	9b03      	ldr	r3, [sp, #12]
    109c:	3b01      	subs	r3, #1
    109e:	9303      	str	r3, [sp, #12]
    10a0:	9b03      	ldr	r3, [sp, #12]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d1d0      	bne.n	1048 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    10a6:	bf00      	nop
    10a8:	bf00      	nop
    10aa:	b005      	add	sp, #20
    10ac:	f85d fb04 	ldr.w	pc, [sp], #4
    10b0:	000071c4 	.word	0x000071c4
    10b4:	00007194 	.word	0x00007194
    10b8:	000077fc 	.word	0x000077fc
    10bc:	00007174 	.word	0x00007174
    10c0:	00007740 	.word	0x00007740
    10c4:	00007184 	.word	0x00007184
    10c8:	000077d0 	.word	0x000077d0
    10cc:	00007144 	.word	0x00007144
    10d0:	00007718 	.word	0x00007718

000010d4 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    10d4:	b500      	push	{lr}
    10d6:	b085      	sub	sp, #20
    10d8:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    10da:	2301      	movs	r3, #1
    10dc:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    10de:	9801      	ldr	r0, [sp, #4]
    10e0:	f000 f818 	bl	1114 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <Clock_Ip_Init+0x3c>)
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d00a      	beq.n	1102 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    10ec:	f000 fb74 	bl	17d8 <Clock_Ip_GetPllStatus>
    10f0:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    10f2:	9b02      	ldr	r3, [sp, #8]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d106      	bne.n	1106 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    10f8:	f000 fbf2 	bl	18e0 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    10fc:	2300      	movs	r3, #0
    10fe:	9303      	str	r3, [sp, #12]
    1100:	e001      	b.n	1106 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1102:	2300      	movs	r3, #0
    1104:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1106:	9b03      	ldr	r3, [sp, #12]
}
    1108:	4618      	mov	r0, r3
    110a:	b005      	add	sp, #20
    110c:	f85d fb04 	ldr.w	pc, [sp], #4
    1110:	1fff8b4c 	.word	0x1fff8b4c

00001114 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1114:	b510      	push	{r4, lr}
    1116:	b084      	sub	sp, #16
    1118:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    111a:	4a9f      	ldr	r2, [pc, #636]	; (1398 <Clock_Ip_InitClock+0x284>)
    111c:	9b01      	ldr	r3, [sp, #4]
    111e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1120:	2101      	movs	r1, #1
    1122:	9801      	ldr	r0, [sp, #4]
    1124:	f003 fa90 	bl	4648 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1128:	4b9b      	ldr	r3, [pc, #620]	; (1398 <Clock_Ip_InitClock+0x284>)
    112a:	681b      	ldr	r3, [r3, #0]
    112c:	2b00      	cmp	r3, #0
    112e:	d030      	beq.n	1192 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1130:	2300      	movs	r3, #0
    1132:	9303      	str	r3, [sp, #12]
    1134:	e027      	b.n	1186 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1136:	9901      	ldr	r1, [sp, #4]
    1138:	9a03      	ldr	r2, [sp, #12]
    113a:	4613      	mov	r3, r2
    113c:	009b      	lsls	r3, r3, #2
    113e:	4413      	add	r3, r2
    1140:	009b      	lsls	r3, r3, #2
    1142:	440b      	add	r3, r1
    1144:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1148:	681a      	ldr	r2, [r3, #0]
    114a:	4994      	ldr	r1, [pc, #592]	; (139c <Clock_Ip_InitClock+0x288>)
    114c:	4613      	mov	r3, r2
    114e:	00db      	lsls	r3, r3, #3
    1150:	4413      	add	r3, r2
    1152:	440b      	add	r3, r1
    1154:	3301      	adds	r3, #1
    1156:	781b      	ldrb	r3, [r3, #0]
    1158:	461a      	mov	r2, r3
    115a:	4b91      	ldr	r3, [pc, #580]	; (13a0 <Clock_Ip_InitClock+0x28c>)
    115c:	5c9b      	ldrb	r3, [r3, r2]
    115e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1160:	4a90      	ldr	r2, [pc, #576]	; (13a4 <Clock_Ip_InitClock+0x290>)
    1162:	9b02      	ldr	r3, [sp, #8]
    1164:	011b      	lsls	r3, r3, #4
    1166:	4413      	add	r3, r2
    1168:	6819      	ldr	r1, [r3, #0]
    116a:	9a03      	ldr	r2, [sp, #12]
    116c:	4613      	mov	r3, r2
    116e:	009b      	lsls	r3, r3, #2
    1170:	4413      	add	r3, r2
    1172:	009b      	lsls	r3, r3, #2
    1174:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1178:	9a01      	ldr	r2, [sp, #4]
    117a:	4413      	add	r3, r2
    117c:	4618      	mov	r0, r3
    117e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1180:	9b03      	ldr	r3, [sp, #12]
    1182:	3301      	adds	r3, #1
    1184:	9303      	str	r3, [sp, #12]
    1186:	9b01      	ldr	r3, [sp, #4]
    1188:	7c9b      	ldrb	r3, [r3, #18]
    118a:	461a      	mov	r2, r3
    118c:	9b03      	ldr	r3, [sp, #12]
    118e:	4293      	cmp	r3, r2
    1190:	d3d1      	bcc.n	1136 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1192:	9801      	ldr	r0, [sp, #4]
    1194:	f7ff feca 	bl	f2c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1198:	2300      	movs	r3, #0
    119a:	9303      	str	r3, [sp, #12]
    119c:	e029      	b.n	11f2 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    119e:	9901      	ldr	r1, [sp, #4]
    11a0:	9a03      	ldr	r2, [sp, #12]
    11a2:	4613      	mov	r3, r2
    11a4:	005b      	lsls	r3, r3, #1
    11a6:	4413      	add	r3, r2
    11a8:	009b      	lsls	r3, r3, #2
    11aa:	440b      	add	r3, r1
    11ac:	3314      	adds	r3, #20
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	497a      	ldr	r1, [pc, #488]	; (139c <Clock_Ip_InitClock+0x288>)
    11b2:	4613      	mov	r3, r2
    11b4:	00db      	lsls	r3, r3, #3
    11b6:	4413      	add	r3, r2
    11b8:	440b      	add	r3, r1
    11ba:	3301      	adds	r3, #1
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	461a      	mov	r2, r3
    11c0:	4b79      	ldr	r3, [pc, #484]	; (13a8 <Clock_Ip_InitClock+0x294>)
    11c2:	5c9b      	ldrb	r3, [r3, r2]
    11c4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    11c6:	4979      	ldr	r1, [pc, #484]	; (13ac <Clock_Ip_InitClock+0x298>)
    11c8:	9a02      	ldr	r2, [sp, #8]
    11ca:	4613      	mov	r3, r2
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	4413      	add	r3, r2
    11d0:	009b      	lsls	r3, r3, #2
    11d2:	440b      	add	r3, r1
    11d4:	6819      	ldr	r1, [r3, #0]
    11d6:	9a03      	ldr	r2, [sp, #12]
    11d8:	4613      	mov	r3, r2
    11da:	005b      	lsls	r3, r3, #1
    11dc:	4413      	add	r3, r2
    11de:	009b      	lsls	r3, r3, #2
    11e0:	3310      	adds	r3, #16
    11e2:	9a01      	ldr	r2, [sp, #4]
    11e4:	4413      	add	r3, r2
    11e6:	3304      	adds	r3, #4
    11e8:	4618      	mov	r0, r3
    11ea:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    11ec:	9b03      	ldr	r3, [sp, #12]
    11ee:	3301      	adds	r3, #1
    11f0:	9303      	str	r3, [sp, #12]
    11f2:	9b01      	ldr	r3, [sp, #4]
    11f4:	7a1b      	ldrb	r3, [r3, #8]
    11f6:	461a      	mov	r2, r3
    11f8:	9b03      	ldr	r3, [sp, #12]
    11fa:	4293      	cmp	r3, r2
    11fc:	d3cf      	bcc.n	119e <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    11fe:	2300      	movs	r3, #0
    1200:	9303      	str	r3, [sp, #12]
    1202:	e02a      	b.n	125a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1204:	9901      	ldr	r1, [sp, #4]
    1206:	9a03      	ldr	r2, [sp, #12]
    1208:	4613      	mov	r3, r2
    120a:	009b      	lsls	r3, r3, #2
    120c:	4413      	add	r3, r2
    120e:	009b      	lsls	r3, r3, #2
    1210:	440b      	add	r3, r1
    1212:	332c      	adds	r3, #44	; 0x2c
    1214:	681a      	ldr	r2, [r3, #0]
    1216:	4961      	ldr	r1, [pc, #388]	; (139c <Clock_Ip_InitClock+0x288>)
    1218:	4613      	mov	r3, r2
    121a:	00db      	lsls	r3, r3, #3
    121c:	4413      	add	r3, r2
    121e:	440b      	add	r3, r1
    1220:	3301      	adds	r3, #1
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	461a      	mov	r2, r3
    1226:	4b62      	ldr	r3, [pc, #392]	; (13b0 <Clock_Ip_InitClock+0x29c>)
    1228:	5c9b      	ldrb	r3, [r3, r2]
    122a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    122c:	4961      	ldr	r1, [pc, #388]	; (13b4 <Clock_Ip_InitClock+0x2a0>)
    122e:	9a02      	ldr	r2, [sp, #8]
    1230:	4613      	mov	r3, r2
    1232:	009b      	lsls	r3, r3, #2
    1234:	4413      	add	r3, r2
    1236:	009b      	lsls	r3, r3, #2
    1238:	440b      	add	r3, r1
    123a:	3304      	adds	r3, #4
    123c:	6819      	ldr	r1, [r3, #0]
    123e:	9a03      	ldr	r2, [sp, #12]
    1240:	4613      	mov	r3, r2
    1242:	009b      	lsls	r3, r3, #2
    1244:	4413      	add	r3, r2
    1246:	009b      	lsls	r3, r3, #2
    1248:	3328      	adds	r3, #40	; 0x28
    124a:	9a01      	ldr	r2, [sp, #4]
    124c:	4413      	add	r3, r2
    124e:	3304      	adds	r3, #4
    1250:	4618      	mov	r0, r3
    1252:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1254:	9b03      	ldr	r3, [sp, #12]
    1256:	3301      	adds	r3, #1
    1258:	9303      	str	r3, [sp, #12]
    125a:	9b01      	ldr	r3, [sp, #4]
    125c:	7a5b      	ldrb	r3, [r3, #9]
    125e:	461a      	mov	r2, r3
    1260:	9b03      	ldr	r3, [sp, #12]
    1262:	4293      	cmp	r3, r2
    1264:	d3ce      	bcc.n	1204 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1266:	9801      	ldr	r0, [sp, #4]
    1268:	f7ff fdb0 	bl	dcc <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    126c:	2300      	movs	r3, #0
    126e:	9303      	str	r3, [sp, #12]
    1270:	e028      	b.n	12c4 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1272:	9901      	ldr	r1, [sp, #4]
    1274:	9a03      	ldr	r2, [sp, #12]
    1276:	4613      	mov	r3, r2
    1278:	009b      	lsls	r3, r3, #2
    127a:	4413      	add	r3, r2
    127c:	009b      	lsls	r3, r3, #2
    127e:	440b      	add	r3, r1
    1280:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1284:	681a      	ldr	r2, [r3, #0]
    1286:	4945      	ldr	r1, [pc, #276]	; (139c <Clock_Ip_InitClock+0x288>)
    1288:	4613      	mov	r3, r2
    128a:	00db      	lsls	r3, r3, #3
    128c:	4413      	add	r3, r2
    128e:	440b      	add	r3, r1
    1290:	3301      	adds	r3, #1
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	461a      	mov	r2, r3
    1296:	4b48      	ldr	r3, [pc, #288]	; (13b8 <Clock_Ip_InitClock+0x2a4>)
    1298:	5c9b      	ldrb	r3, [r3, r2]
    129a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    129c:	4a47      	ldr	r2, [pc, #284]	; (13bc <Clock_Ip_InitClock+0x2a8>)
    129e:	9b02      	ldr	r3, [sp, #8]
    12a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    12a4:	9a03      	ldr	r2, [sp, #12]
    12a6:	4613      	mov	r3, r2
    12a8:	009b      	lsls	r3, r3, #2
    12aa:	4413      	add	r3, r2
    12ac:	009b      	lsls	r3, r3, #2
    12ae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    12b2:	9a01      	ldr	r2, [sp, #4]
    12b4:	4413      	add	r3, r2
    12b6:	3304      	adds	r3, #4
    12b8:	9903      	ldr	r1, [sp, #12]
    12ba:	4618      	mov	r0, r3
    12bc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    12be:	9b03      	ldr	r3, [sp, #12]
    12c0:	3301      	adds	r3, #1
    12c2:	9303      	str	r3, [sp, #12]
    12c4:	9b01      	ldr	r3, [sp, #4]
    12c6:	7c5b      	ldrb	r3, [r3, #17]
    12c8:	461a      	mov	r2, r3
    12ca:	9b03      	ldr	r3, [sp, #12]
    12cc:	4293      	cmp	r3, r2
    12ce:	d3d0      	bcc.n	1272 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    12d0:	2300      	movs	r3, #0
    12d2:	9303      	str	r3, [sp, #12]
    12d4:	e026      	b.n	1324 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    12d6:	9901      	ldr	r1, [sp, #4]
    12d8:	9a03      	ldr	r2, [sp, #12]
    12da:	4613      	mov	r3, r2
    12dc:	005b      	lsls	r3, r3, #1
    12de:	4413      	add	r3, r2
    12e0:	009b      	lsls	r3, r3, #2
    12e2:	440b      	add	r3, r1
    12e4:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12e8:	681a      	ldr	r2, [r3, #0]
    12ea:	492c      	ldr	r1, [pc, #176]	; (139c <Clock_Ip_InitClock+0x288>)
    12ec:	4613      	mov	r3, r2
    12ee:	00db      	lsls	r3, r3, #3
    12f0:	4413      	add	r3, r2
    12f2:	440b      	add	r3, r1
    12f4:	3301      	adds	r3, #1
    12f6:	781b      	ldrb	r3, [r3, #0]
    12f8:	461a      	mov	r2, r3
    12fa:	4b31      	ldr	r3, [pc, #196]	; (13c0 <Clock_Ip_InitClock+0x2ac>)
    12fc:	5c9b      	ldrb	r3, [r3, r2]
    12fe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1300:	4a30      	ldr	r2, [pc, #192]	; (13c4 <Clock_Ip_InitClock+0x2b0>)
    1302:	9b02      	ldr	r3, [sp, #8]
    1304:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1308:	9a03      	ldr	r2, [sp, #12]
    130a:	4613      	mov	r3, r2
    130c:	005b      	lsls	r3, r3, #1
    130e:	4413      	add	r3, r2
    1310:	009b      	lsls	r3, r3, #2
    1312:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1316:	9a01      	ldr	r2, [sp, #4]
    1318:	4413      	add	r3, r2
    131a:	4618      	mov	r0, r3
    131c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    131e:	9b03      	ldr	r3, [sp, #12]
    1320:	3301      	adds	r3, #1
    1322:	9303      	str	r3, [sp, #12]
    1324:	9b01      	ldr	r3, [sp, #4]
    1326:	7b5b      	ldrb	r3, [r3, #13]
    1328:	461a      	mov	r2, r3
    132a:	9b03      	ldr	r3, [sp, #12]
    132c:	4293      	cmp	r3, r2
    132e:	d3d2      	bcc.n	12d6 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1330:	2300      	movs	r3, #0
    1332:	9303      	str	r3, [sp, #12]
    1334:	e026      	b.n	1384 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1336:	9901      	ldr	r1, [sp, #4]
    1338:	9a03      	ldr	r2, [sp, #12]
    133a:	4613      	mov	r3, r2
    133c:	005b      	lsls	r3, r3, #1
    133e:	4413      	add	r3, r2
    1340:	009b      	lsls	r3, r3, #2
    1342:	440b      	add	r3, r1
    1344:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1348:	681a      	ldr	r2, [r3, #0]
    134a:	4914      	ldr	r1, [pc, #80]	; (139c <Clock_Ip_InitClock+0x288>)
    134c:	4613      	mov	r3, r2
    134e:	00db      	lsls	r3, r3, #3
    1350:	4413      	add	r3, r2
    1352:	440b      	add	r3, r1
    1354:	3301      	adds	r3, #1
    1356:	781b      	ldrb	r3, [r3, #0]
    1358:	461a      	mov	r2, r3
    135a:	4b1b      	ldr	r3, [pc, #108]	; (13c8 <Clock_Ip_InitClock+0x2b4>)
    135c:	5c9b      	ldrb	r3, [r3, r2]
    135e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1360:	4a1a      	ldr	r2, [pc, #104]	; (13cc <Clock_Ip_InitClock+0x2b8>)
    1362:	9b02      	ldr	r3, [sp, #8]
    1364:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1368:	9a03      	ldr	r2, [sp, #12]
    136a:	4613      	mov	r3, r2
    136c:	005b      	lsls	r3, r3, #1
    136e:	4413      	add	r3, r2
    1370:	009b      	lsls	r3, r3, #2
    1372:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1376:	9a01      	ldr	r2, [sp, #4]
    1378:	4413      	add	r3, r2
    137a:	4618      	mov	r0, r3
    137c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    137e:	9b03      	ldr	r3, [sp, #12]
    1380:	3301      	adds	r3, #1
    1382:	9303      	str	r3, [sp, #12]
    1384:	9b01      	ldr	r3, [sp, #4]
    1386:	7b1b      	ldrb	r3, [r3, #12]
    1388:	461a      	mov	r2, r3
    138a:	9b03      	ldr	r3, [sp, #12]
    138c:	4293      	cmp	r3, r2
    138e:	d3d2      	bcc.n	1336 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1390:	2300      	movs	r3, #0
    1392:	9303      	str	r3, [sp, #12]
    1394:	e044      	b.n	1420 <Clock_Ip_InitClock+0x30c>
    1396:	bf00      	nop
    1398:	1fff8b44 	.word	0x1fff8b44
    139c:	000071c4 	.word	0x000071c4
    13a0:	000071b4 	.word	0x000071b4
    13a4:	000077c0 	.word	0x000077c0
    13a8:	00007154 	.word	0x00007154
    13ac:	00007784 	.word	0x00007784
    13b0:	00007144 	.word	0x00007144
    13b4:	00007718 	.word	0x00007718
    13b8:	000071a4 	.word	0x000071a4
    13bc:	000077f8 	.word	0x000077f8
    13c0:	00007134 	.word	0x00007134
    13c4:	00007710 	.word	0x00007710
    13c8:	00007124 	.word	0x00007124
    13cc:	000076d4 	.word	0x000076d4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    13d0:	9901      	ldr	r1, [sp, #4]
    13d2:	9a03      	ldr	r2, [sp, #12]
    13d4:	4613      	mov	r3, r2
    13d6:	005b      	lsls	r3, r3, #1
    13d8:	4413      	add	r3, r2
    13da:	009b      	lsls	r3, r3, #2
    13dc:	440b      	add	r3, r1
    13de:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13e2:	681a      	ldr	r2, [r3, #0]
    13e4:	49ac      	ldr	r1, [pc, #688]	; (1698 <Clock_Ip_InitClock+0x584>)
    13e6:	4613      	mov	r3, r2
    13e8:	00db      	lsls	r3, r3, #3
    13ea:	4413      	add	r3, r2
    13ec:	440b      	add	r3, r1
    13ee:	3301      	adds	r3, #1
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	461a      	mov	r2, r3
    13f4:	4ba9      	ldr	r3, [pc, #676]	; (169c <Clock_Ip_InitClock+0x588>)
    13f6:	5c9b      	ldrb	r3, [r3, r2]
    13f8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    13fa:	4aa9      	ldr	r2, [pc, #676]	; (16a0 <Clock_Ip_InitClock+0x58c>)
    13fc:	9b02      	ldr	r3, [sp, #8]
    13fe:	00db      	lsls	r3, r3, #3
    1400:	4413      	add	r3, r2
    1402:	6859      	ldr	r1, [r3, #4]
    1404:	9a03      	ldr	r2, [sp, #12]
    1406:	4613      	mov	r3, r2
    1408:	005b      	lsls	r3, r3, #1
    140a:	4413      	add	r3, r2
    140c:	009b      	lsls	r3, r3, #2
    140e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1412:	9a01      	ldr	r2, [sp, #4]
    1414:	4413      	add	r3, r2
    1416:	4618      	mov	r0, r3
    1418:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    141a:	9b03      	ldr	r3, [sp, #12]
    141c:	3301      	adds	r3, #1
    141e:	9303      	str	r3, [sp, #12]
    1420:	9b01      	ldr	r3, [sp, #4]
    1422:	7b5b      	ldrb	r3, [r3, #13]
    1424:	461a      	mov	r2, r3
    1426:	9b03      	ldr	r3, [sp, #12]
    1428:	4293      	cmp	r3, r2
    142a:	d3d1      	bcc.n	13d0 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    142c:	2300      	movs	r3, #0
    142e:	9303      	str	r3, [sp, #12]
    1430:	e029      	b.n	1486 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1432:	9901      	ldr	r1, [sp, #4]
    1434:	9a03      	ldr	r2, [sp, #12]
    1436:	4613      	mov	r3, r2
    1438:	009b      	lsls	r3, r3, #2
    143a:	4413      	add	r3, r2
    143c:	00db      	lsls	r3, r3, #3
    143e:	440b      	add	r3, r1
    1440:	3340      	adds	r3, #64	; 0x40
    1442:	681a      	ldr	r2, [r3, #0]
    1444:	4994      	ldr	r1, [pc, #592]	; (1698 <Clock_Ip_InitClock+0x584>)
    1446:	4613      	mov	r3, r2
    1448:	00db      	lsls	r3, r3, #3
    144a:	4413      	add	r3, r2
    144c:	440b      	add	r3, r1
    144e:	3301      	adds	r3, #1
    1450:	781b      	ldrb	r3, [r3, #0]
    1452:	461a      	mov	r2, r3
    1454:	4b93      	ldr	r3, [pc, #588]	; (16a4 <Clock_Ip_InitClock+0x590>)
    1456:	5c9b      	ldrb	r3, [r3, r2]
    1458:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    145a:	4993      	ldr	r1, [pc, #588]	; (16a8 <Clock_Ip_InitClock+0x594>)
    145c:	9a02      	ldr	r2, [sp, #8]
    145e:	4613      	mov	r3, r2
    1460:	009b      	lsls	r3, r3, #2
    1462:	4413      	add	r3, r2
    1464:	009b      	lsls	r3, r3, #2
    1466:	440b      	add	r3, r1
    1468:	3304      	adds	r3, #4
    146a:	6819      	ldr	r1, [r3, #0]
    146c:	9a03      	ldr	r2, [sp, #12]
    146e:	4613      	mov	r3, r2
    1470:	009b      	lsls	r3, r3, #2
    1472:	4413      	add	r3, r2
    1474:	00db      	lsls	r3, r3, #3
    1476:	3340      	adds	r3, #64	; 0x40
    1478:	9a01      	ldr	r2, [sp, #4]
    147a:	4413      	add	r3, r2
    147c:	4618      	mov	r0, r3
    147e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1480:	9b03      	ldr	r3, [sp, #12]
    1482:	3301      	adds	r3, #1
    1484:	9303      	str	r3, [sp, #12]
    1486:	9b01      	ldr	r3, [sp, #4]
    1488:	7a9b      	ldrb	r3, [r3, #10]
    148a:	461a      	mov	r2, r3
    148c:	9b03      	ldr	r3, [sp, #12]
    148e:	4293      	cmp	r3, r2
    1490:	d3cf      	bcc.n	1432 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1492:	2300      	movs	r3, #0
    1494:	9303      	str	r3, [sp, #12]
    1496:	e029      	b.n	14ec <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1498:	9901      	ldr	r1, [sp, #4]
    149a:	9a03      	ldr	r2, [sp, #12]
    149c:	4613      	mov	r3, r2
    149e:	009b      	lsls	r3, r3, #2
    14a0:	4413      	add	r3, r2
    14a2:	009b      	lsls	r3, r3, #2
    14a4:	440b      	add	r3, r1
    14a6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    14aa:	681a      	ldr	r2, [r3, #0]
    14ac:	497a      	ldr	r1, [pc, #488]	; (1698 <Clock_Ip_InitClock+0x584>)
    14ae:	4613      	mov	r3, r2
    14b0:	00db      	lsls	r3, r3, #3
    14b2:	4413      	add	r3, r2
    14b4:	440b      	add	r3, r1
    14b6:	3301      	adds	r3, #1
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	461a      	mov	r2, r3
    14bc:	4b7b      	ldr	r3, [pc, #492]	; (16ac <Clock_Ip_InitClock+0x598>)
    14be:	5c9b      	ldrb	r3, [r3, r2]
    14c0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    14c2:	4a7b      	ldr	r2, [pc, #492]	; (16b0 <Clock_Ip_InitClock+0x59c>)
    14c4:	9b02      	ldr	r3, [sp, #8]
    14c6:	011b      	lsls	r3, r3, #4
    14c8:	4413      	add	r3, r2
    14ca:	3304      	adds	r3, #4
    14cc:	681c      	ldr	r4, [r3, #0]
    14ce:	9a03      	ldr	r2, [sp, #12]
    14d0:	4613      	mov	r3, r2
    14d2:	009b      	lsls	r3, r3, #2
    14d4:	4413      	add	r3, r2
    14d6:	009b      	lsls	r3, r3, #2
    14d8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    14dc:	9a01      	ldr	r2, [sp, #4]
    14de:	4413      	add	r3, r2
    14e0:	9903      	ldr	r1, [sp, #12]
    14e2:	4618      	mov	r0, r3
    14e4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    14e6:	9b03      	ldr	r3, [sp, #12]
    14e8:	3301      	adds	r3, #1
    14ea:	9303      	str	r3, [sp, #12]
    14ec:	9b01      	ldr	r3, [sp, #4]
    14ee:	7c9b      	ldrb	r3, [r3, #18]
    14f0:	461a      	mov	r2, r3
    14f2:	9b03      	ldr	r3, [sp, #12]
    14f4:	4293      	cmp	r3, r2
    14f6:	d3cf      	bcc.n	1498 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    14f8:	2300      	movs	r3, #0
    14fa:	9303      	str	r3, [sp, #12]
    14fc:	e02a      	b.n	1554 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    14fe:	9901      	ldr	r1, [sp, #4]
    1500:	9a03      	ldr	r2, [sp, #12]
    1502:	4613      	mov	r3, r2
    1504:	009b      	lsls	r3, r3, #2
    1506:	4413      	add	r3, r2
    1508:	009b      	lsls	r3, r3, #2
    150a:	440b      	add	r3, r1
    150c:	332c      	adds	r3, #44	; 0x2c
    150e:	681a      	ldr	r2, [r3, #0]
    1510:	4961      	ldr	r1, [pc, #388]	; (1698 <Clock_Ip_InitClock+0x584>)
    1512:	4613      	mov	r3, r2
    1514:	00db      	lsls	r3, r3, #3
    1516:	4413      	add	r3, r2
    1518:	440b      	add	r3, r1
    151a:	3301      	adds	r3, #1
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	461a      	mov	r2, r3
    1520:	4b64      	ldr	r3, [pc, #400]	; (16b4 <Clock_Ip_InitClock+0x5a0>)
    1522:	5c9b      	ldrb	r3, [r3, r2]
    1524:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1526:	4964      	ldr	r1, [pc, #400]	; (16b8 <Clock_Ip_InitClock+0x5a4>)
    1528:	9a02      	ldr	r2, [sp, #8]
    152a:	4613      	mov	r3, r2
    152c:	009b      	lsls	r3, r3, #2
    152e:	4413      	add	r3, r2
    1530:	009b      	lsls	r3, r3, #2
    1532:	440b      	add	r3, r1
    1534:	3308      	adds	r3, #8
    1536:	6819      	ldr	r1, [r3, #0]
    1538:	9a03      	ldr	r2, [sp, #12]
    153a:	4613      	mov	r3, r2
    153c:	009b      	lsls	r3, r3, #2
    153e:	4413      	add	r3, r2
    1540:	009b      	lsls	r3, r3, #2
    1542:	3328      	adds	r3, #40	; 0x28
    1544:	9a01      	ldr	r2, [sp, #4]
    1546:	4413      	add	r3, r2
    1548:	3304      	adds	r3, #4
    154a:	4618      	mov	r0, r3
    154c:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    154e:	9b03      	ldr	r3, [sp, #12]
    1550:	3301      	adds	r3, #1
    1552:	9303      	str	r3, [sp, #12]
    1554:	9b01      	ldr	r3, [sp, #4]
    1556:	7a5b      	ldrb	r3, [r3, #9]
    1558:	461a      	mov	r2, r3
    155a:	9b03      	ldr	r3, [sp, #12]
    155c:	4293      	cmp	r3, r2
    155e:	d3ce      	bcc.n	14fe <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1560:	2300      	movs	r3, #0
    1562:	9303      	str	r3, [sp, #12]
    1564:	e029      	b.n	15ba <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1566:	9901      	ldr	r1, [sp, #4]
    1568:	9a03      	ldr	r2, [sp, #12]
    156a:	4613      	mov	r3, r2
    156c:	009b      	lsls	r3, r3, #2
    156e:	4413      	add	r3, r2
    1570:	00db      	lsls	r3, r3, #3
    1572:	440b      	add	r3, r1
    1574:	3340      	adds	r3, #64	; 0x40
    1576:	681a      	ldr	r2, [r3, #0]
    1578:	4947      	ldr	r1, [pc, #284]	; (1698 <Clock_Ip_InitClock+0x584>)
    157a:	4613      	mov	r3, r2
    157c:	00db      	lsls	r3, r3, #3
    157e:	4413      	add	r3, r2
    1580:	440b      	add	r3, r1
    1582:	3301      	adds	r3, #1
    1584:	781b      	ldrb	r3, [r3, #0]
    1586:	461a      	mov	r2, r3
    1588:	4b46      	ldr	r3, [pc, #280]	; (16a4 <Clock_Ip_InitClock+0x590>)
    158a:	5c9b      	ldrb	r3, [r3, r2]
    158c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    158e:	4946      	ldr	r1, [pc, #280]	; (16a8 <Clock_Ip_InitClock+0x594>)
    1590:	9a02      	ldr	r2, [sp, #8]
    1592:	4613      	mov	r3, r2
    1594:	009b      	lsls	r3, r3, #2
    1596:	4413      	add	r3, r2
    1598:	009b      	lsls	r3, r3, #2
    159a:	440b      	add	r3, r1
    159c:	330c      	adds	r3, #12
    159e:	6819      	ldr	r1, [r3, #0]
    15a0:	9a03      	ldr	r2, [sp, #12]
    15a2:	4613      	mov	r3, r2
    15a4:	009b      	lsls	r3, r3, #2
    15a6:	4413      	add	r3, r2
    15a8:	00db      	lsls	r3, r3, #3
    15aa:	3340      	adds	r3, #64	; 0x40
    15ac:	9a01      	ldr	r2, [sp, #4]
    15ae:	4413      	add	r3, r2
    15b0:	4618      	mov	r0, r3
    15b2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    15b4:	9b03      	ldr	r3, [sp, #12]
    15b6:	3301      	adds	r3, #1
    15b8:	9303      	str	r3, [sp, #12]
    15ba:	9b01      	ldr	r3, [sp, #4]
    15bc:	7a9b      	ldrb	r3, [r3, #10]
    15be:	461a      	mov	r2, r3
    15c0:	9b03      	ldr	r3, [sp, #12]
    15c2:	4293      	cmp	r3, r2
    15c4:	d3cf      	bcc.n	1566 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    15c6:	2300      	movs	r3, #0
    15c8:	9303      	str	r3, [sp, #12]
    15ca:	e025      	b.n	1618 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    15cc:	9a01      	ldr	r2, [sp, #4]
    15ce:	9b03      	ldr	r3, [sp, #12]
    15d0:	3324      	adds	r3, #36	; 0x24
    15d2:	011b      	lsls	r3, r3, #4
    15d4:	4413      	add	r3, r2
    15d6:	3304      	adds	r3, #4
    15d8:	681a      	ldr	r2, [r3, #0]
    15da:	492f      	ldr	r1, [pc, #188]	; (1698 <Clock_Ip_InitClock+0x584>)
    15dc:	4613      	mov	r3, r2
    15de:	00db      	lsls	r3, r3, #3
    15e0:	4413      	add	r3, r2
    15e2:	440b      	add	r3, r1
    15e4:	3301      	adds	r3, #1
    15e6:	781b      	ldrb	r3, [r3, #0]
    15e8:	461a      	mov	r2, r3
    15ea:	4b34      	ldr	r3, [pc, #208]	; (16bc <Clock_Ip_InitClock+0x5a8>)
    15ec:	5c9b      	ldrb	r3, [r3, r2]
    15ee:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    15f0:	4933      	ldr	r1, [pc, #204]	; (16c0 <Clock_Ip_InitClock+0x5ac>)
    15f2:	9a02      	ldr	r2, [sp, #8]
    15f4:	4613      	mov	r3, r2
    15f6:	005b      	lsls	r3, r3, #1
    15f8:	4413      	add	r3, r2
    15fa:	009b      	lsls	r3, r3, #2
    15fc:	440b      	add	r3, r1
    15fe:	3304      	adds	r3, #4
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	9a03      	ldr	r2, [sp, #12]
    1604:	3224      	adds	r2, #36	; 0x24
    1606:	0112      	lsls	r2, r2, #4
    1608:	9901      	ldr	r1, [sp, #4]
    160a:	440a      	add	r2, r1
    160c:	3204      	adds	r2, #4
    160e:	4610      	mov	r0, r2
    1610:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1612:	9b03      	ldr	r3, [sp, #12]
    1614:	3301      	adds	r3, #1
    1616:	9303      	str	r3, [sp, #12]
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	7b9b      	ldrb	r3, [r3, #14]
    161c:	461a      	mov	r2, r3
    161e:	9b03      	ldr	r3, [sp, #12]
    1620:	4293      	cmp	r3, r2
    1622:	d3d3      	bcc.n	15cc <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1624:	4b27      	ldr	r3, [pc, #156]	; (16c4 <Clock_Ip_InitClock+0x5b0>)
    1626:	2200      	movs	r2, #0
    1628:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    162a:	4b26      	ldr	r3, [pc, #152]	; (16c4 <Clock_Ip_InitClock+0x5b0>)
    162c:	2200      	movs	r2, #0
    162e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1630:	4b24      	ldr	r3, [pc, #144]	; (16c4 <Clock_Ip_InitClock+0x5b0>)
    1632:	2201      	movs	r2, #1
    1634:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1636:	4b23      	ldr	r3, [pc, #140]	; (16c4 <Clock_Ip_InitClock+0x5b0>)
    1638:	2200      	movs	r2, #0
    163a:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    163c:	f000 fa9c 	bl	1b78 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1640:	2300      	movs	r3, #0
    1642:	9303      	str	r3, [sp, #12]
    1644:	e04c      	b.n	16e0 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1646:	9a01      	ldr	r2, [sp, #4]
    1648:	9b03      	ldr	r3, [sp, #12]
    164a:	330d      	adds	r3, #13
    164c:	00db      	lsls	r3, r3, #3
    164e:	4413      	add	r3, r2
    1650:	685b      	ldr	r3, [r3, #4]
    1652:	4a1d      	ldr	r2, [pc, #116]	; (16c8 <Clock_Ip_InitClock+0x5b4>)
    1654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1658:	2b03      	cmp	r3, #3
    165a:	d03b      	beq.n	16d4 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    165c:	9b01      	ldr	r3, [sp, #4]
    165e:	9a03      	ldr	r2, [sp, #12]
    1660:	320d      	adds	r2, #13
    1662:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1666:	490c      	ldr	r1, [pc, #48]	; (1698 <Clock_Ip_InitClock+0x584>)
    1668:	4613      	mov	r3, r2
    166a:	00db      	lsls	r3, r3, #3
    166c:	4413      	add	r3, r2
    166e:	440b      	add	r3, r1
    1670:	3301      	adds	r3, #1
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	461a      	mov	r2, r3
    1676:	4b15      	ldr	r3, [pc, #84]	; (16cc <Clock_Ip_InitClock+0x5b8>)
    1678:	5c9b      	ldrb	r3, [r3, r2]
    167a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    167c:	4a14      	ldr	r2, [pc, #80]	; (16d0 <Clock_Ip_InitClock+0x5bc>)
    167e:	9b02      	ldr	r3, [sp, #8]
    1680:	00db      	lsls	r3, r3, #3
    1682:	4413      	add	r3, r2
    1684:	685b      	ldr	r3, [r3, #4]
    1686:	9a03      	ldr	r2, [sp, #12]
    1688:	320d      	adds	r2, #13
    168a:	00d2      	lsls	r2, r2, #3
    168c:	9901      	ldr	r1, [sp, #4]
    168e:	440a      	add	r2, r1
    1690:	4610      	mov	r0, r2
    1692:	4798      	blx	r3
    1694:	e021      	b.n	16da <Clock_Ip_InitClock+0x5c6>
    1696:	bf00      	nop
    1698:	000071c4 	.word	0x000071c4
    169c:	00007134 	.word	0x00007134
    16a0:	00007710 	.word	0x00007710
    16a4:	00007184 	.word	0x00007184
    16a8:	000077d0 	.word	0x000077d0
    16ac:	000071b4 	.word	0x000071b4
    16b0:	000077c0 	.word	0x000077c0
    16b4:	00007144 	.word	0x00007144
    16b8:	00007718 	.word	0x00007718
    16bc:	00007174 	.word	0x00007174
    16c0:	00007740 	.word	0x00007740
    16c4:	1fff8b4c 	.word	0x1fff8b4c
    16c8:	00007610 	.word	0x00007610
    16cc:	00007194 	.word	0x00007194
    16d0:	000077fc 	.word	0x000077fc
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    16d4:	4b3a      	ldr	r3, [pc, #232]	; (17c0 <Clock_Ip_InitClock+0x6ac>)
    16d6:	2201      	movs	r2, #1
    16d8:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    16da:	9b03      	ldr	r3, [sp, #12]
    16dc:	3301      	adds	r3, #1
    16de:	9303      	str	r3, [sp, #12]
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	7adb      	ldrb	r3, [r3, #11]
    16e4:	461a      	mov	r2, r3
    16e6:	9b03      	ldr	r3, [sp, #12]
    16e8:	4293      	cmp	r3, r2
    16ea:	d3ac      	bcc.n	1646 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    16ec:	4b34      	ldr	r3, [pc, #208]	; (17c0 <Clock_Ip_InitClock+0x6ac>)
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	f083 0301 	eor.w	r3, r3, #1
    16f4:	b2db      	uxtb	r3, r3
    16f6:	2b00      	cmp	r3, #0
    16f8:	d05e      	beq.n	17b8 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    16fa:	2300      	movs	r3, #0
    16fc:	9303      	str	r3, [sp, #12]
    16fe:	e01f      	b.n	1740 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1700:	9a01      	ldr	r2, [sp, #4]
    1702:	9b03      	ldr	r3, [sp, #12]
    1704:	334e      	adds	r3, #78	; 0x4e
    1706:	00db      	lsls	r3, r3, #3
    1708:	4413      	add	r3, r2
    170a:	685a      	ldr	r2, [r3, #4]
    170c:	492d      	ldr	r1, [pc, #180]	; (17c4 <Clock_Ip_InitClock+0x6b0>)
    170e:	4613      	mov	r3, r2
    1710:	00db      	lsls	r3, r3, #3
    1712:	4413      	add	r3, r2
    1714:	440b      	add	r3, r1
    1716:	3301      	adds	r3, #1
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	461a      	mov	r2, r3
    171c:	4b2a      	ldr	r3, [pc, #168]	; (17c8 <Clock_Ip_InitClock+0x6b4>)
    171e:	5c9b      	ldrb	r3, [r3, r2]
    1720:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1722:	4a2a      	ldr	r2, [pc, #168]	; (17cc <Clock_Ip_InitClock+0x6b8>)
    1724:	9b02      	ldr	r3, [sp, #8]
    1726:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    172a:	9a03      	ldr	r2, [sp, #12]
    172c:	324e      	adds	r2, #78	; 0x4e
    172e:	00d2      	lsls	r2, r2, #3
    1730:	9901      	ldr	r1, [sp, #4]
    1732:	440a      	add	r2, r1
    1734:	3204      	adds	r2, #4
    1736:	4610      	mov	r0, r2
    1738:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    173a:	9b03      	ldr	r3, [sp, #12]
    173c:	3301      	adds	r3, #1
    173e:	9303      	str	r3, [sp, #12]
    1740:	9b01      	ldr	r3, [sp, #4]
    1742:	7c1b      	ldrb	r3, [r3, #16]
    1744:	461a      	mov	r2, r3
    1746:	9b03      	ldr	r3, [sp, #12]
    1748:	4293      	cmp	r3, r2
    174a:	d3d9      	bcc.n	1700 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    174c:	2300      	movs	r3, #0
    174e:	9303      	str	r3, [sp, #12]
    1750:	e028      	b.n	17a4 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1752:	9901      	ldr	r1, [sp, #4]
    1754:	9a03      	ldr	r2, [sp, #12]
    1756:	4613      	mov	r3, r2
    1758:	009b      	lsls	r3, r3, #2
    175a:	4413      	add	r3, r2
    175c:	009b      	lsls	r3, r3, #2
    175e:	440b      	add	r3, r1
    1760:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1764:	681a      	ldr	r2, [r3, #0]
    1766:	4917      	ldr	r1, [pc, #92]	; (17c4 <Clock_Ip_InitClock+0x6b0>)
    1768:	4613      	mov	r3, r2
    176a:	00db      	lsls	r3, r3, #3
    176c:	4413      	add	r3, r2
    176e:	440b      	add	r3, r1
    1770:	3301      	adds	r3, #1
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	461a      	mov	r2, r3
    1776:	4b16      	ldr	r3, [pc, #88]	; (17d0 <Clock_Ip_InitClock+0x6bc>)
    1778:	5c9b      	ldrb	r3, [r3, r2]
    177a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    177c:	4a15      	ldr	r2, [pc, #84]	; (17d4 <Clock_Ip_InitClock+0x6c0>)
    177e:	9b02      	ldr	r3, [sp, #8]
    1780:	011b      	lsls	r3, r3, #4
    1782:	4413      	add	r3, r2
    1784:	330c      	adds	r3, #12
    1786:	6819      	ldr	r1, [r3, #0]
    1788:	9a03      	ldr	r2, [sp, #12]
    178a:	4613      	mov	r3, r2
    178c:	009b      	lsls	r3, r3, #2
    178e:	4413      	add	r3, r2
    1790:	009b      	lsls	r3, r3, #2
    1792:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1796:	9a01      	ldr	r2, [sp, #4]
    1798:	4413      	add	r3, r2
    179a:	4618      	mov	r0, r3
    179c:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    179e:	9b03      	ldr	r3, [sp, #12]
    17a0:	3301      	adds	r3, #1
    17a2:	9303      	str	r3, [sp, #12]
    17a4:	9b01      	ldr	r3, [sp, #4]
    17a6:	7c9b      	ldrb	r3, [r3, #18]
    17a8:	461a      	mov	r2, r3
    17aa:	9b03      	ldr	r3, [sp, #12]
    17ac:	4293      	cmp	r3, r2
    17ae:	d3d0      	bcc.n	1752 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    17b0:	2104      	movs	r1, #4
    17b2:	9801      	ldr	r0, [sp, #4]
    17b4:	f002 ff48 	bl	4648 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    17b8:	bf00      	nop
    17ba:	b004      	add	sp, #16
    17bc:	bd10      	pop	{r4, pc}
    17be:	bf00      	nop
    17c0:	1fff8b4c 	.word	0x1fff8b4c
    17c4:	000071c4 	.word	0x000071c4
    17c8:	00007164 	.word	0x00007164
    17cc:	0000774c 	.word	0x0000774c
    17d0:	000071b4 	.word	0x000071b4
    17d4:	000077c0 	.word	0x000077c0

000017d8 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    17d8:	b500      	push	{lr}
    17da:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    17dc:	2302      	movs	r3, #2
    17de:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    17e0:	2300      	movs	r3, #0
    17e2:	9304      	str	r3, [sp, #16]
    17e4:	e02c      	b.n	1840 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    17e6:	4a36      	ldr	r2, [pc, #216]	; (18c0 <Clock_Ip_GetPllStatus+0xe8>)
    17e8:	9b04      	ldr	r3, [sp, #16]
    17ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17ee:	4935      	ldr	r1, [pc, #212]	; (18c4 <Clock_Ip_GetPllStatus+0xec>)
    17f0:	4613      	mov	r3, r2
    17f2:	00db      	lsls	r3, r3, #3
    17f4:	4413      	add	r3, r2
    17f6:	440b      	add	r3, r1
    17f8:	3301      	adds	r3, #1
    17fa:	781b      	ldrb	r3, [r3, #0]
    17fc:	461a      	mov	r2, r3
    17fe:	4b32      	ldr	r3, [pc, #200]	; (18c8 <Clock_Ip_GetPllStatus+0xf0>)
    1800:	5c9b      	ldrb	r3, [r3, r2]
    1802:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1804:	4931      	ldr	r1, [pc, #196]	; (18cc <Clock_Ip_GetPllStatus+0xf4>)
    1806:	9a03      	ldr	r2, [sp, #12]
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009b      	lsls	r3, r3, #2
    1810:	440b      	add	r3, r1
    1812:	3308      	adds	r3, #8
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	492a      	ldr	r1, [pc, #168]	; (18c0 <Clock_Ip_GetPllStatus+0xe8>)
    1818:	9a04      	ldr	r2, [sp, #16]
    181a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    181e:	4610      	mov	r0, r2
    1820:	4798      	blx	r3
    1822:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1824:	9b02      	ldr	r3, [sp, #8]
    1826:	2b01      	cmp	r3, #1
    1828:	d102      	bne.n	1830 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    182a:	2301      	movs	r3, #1
    182c:	9305      	str	r3, [sp, #20]
            break;
    182e:	e00d      	b.n	184c <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1830:	9b02      	ldr	r3, [sp, #8]
    1832:	2b02      	cmp	r3, #2
    1834:	d101      	bne.n	183a <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1836:	2300      	movs	r3, #0
    1838:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    183a:	9b04      	ldr	r3, [sp, #16]
    183c:	3301      	adds	r3, #1
    183e:	9304      	str	r3, [sp, #16]
    1840:	4b23      	ldr	r3, [pc, #140]	; (18d0 <Clock_Ip_GetPllStatus+0xf8>)
    1842:	789b      	ldrb	r3, [r3, #2]
    1844:	461a      	mov	r2, r3
    1846:	9b04      	ldr	r3, [sp, #16]
    1848:	4293      	cmp	r3, r2
    184a:	d3cc      	bcc.n	17e6 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    184c:	9b05      	ldr	r3, [sp, #20]
    184e:	2b00      	cmp	r3, #0
    1850:	d130      	bne.n	18b4 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1852:	2300      	movs	r3, #0
    1854:	9304      	str	r3, [sp, #16]
    1856:	e027      	b.n	18a8 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1858:	4a1e      	ldr	r2, [pc, #120]	; (18d4 <Clock_Ip_GetPllStatus+0xfc>)
    185a:	9b04      	ldr	r3, [sp, #16]
    185c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1860:	4918      	ldr	r1, [pc, #96]	; (18c4 <Clock_Ip_GetPllStatus+0xec>)
    1862:	4613      	mov	r3, r2
    1864:	00db      	lsls	r3, r3, #3
    1866:	4413      	add	r3, r2
    1868:	440b      	add	r3, r1
    186a:	3301      	adds	r3, #1
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	461a      	mov	r2, r3
    1870:	4b19      	ldr	r3, [pc, #100]	; (18d8 <Clock_Ip_GetPllStatus+0x100>)
    1872:	5c9b      	ldrb	r3, [r3, r2]
    1874:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1876:	4919      	ldr	r1, [pc, #100]	; (18dc <Clock_Ip_GetPllStatus+0x104>)
    1878:	9a03      	ldr	r2, [sp, #12]
    187a:	4613      	mov	r3, r2
    187c:	005b      	lsls	r3, r3, #1
    187e:	4413      	add	r3, r2
    1880:	009b      	lsls	r3, r3, #2
    1882:	440b      	add	r3, r1
    1884:	3308      	adds	r3, #8
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	4912      	ldr	r1, [pc, #72]	; (18d4 <Clock_Ip_GetPllStatus+0xfc>)
    188a:	9a04      	ldr	r2, [sp, #16]
    188c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1890:	4610      	mov	r0, r2
    1892:	4798      	blx	r3
    1894:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1896:	9b01      	ldr	r3, [sp, #4]
    1898:	2b01      	cmp	r3, #1
    189a:	d102      	bne.n	18a2 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    189c:	2301      	movs	r3, #1
    189e:	9305      	str	r3, [sp, #20]
                break;
    18a0:	e008      	b.n	18b4 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    18a2:	9b04      	ldr	r3, [sp, #16]
    18a4:	3301      	adds	r3, #1
    18a6:	9304      	str	r3, [sp, #16]
    18a8:	4b09      	ldr	r3, [pc, #36]	; (18d0 <Clock_Ip_GetPllStatus+0xf8>)
    18aa:	78db      	ldrb	r3, [r3, #3]
    18ac:	461a      	mov	r2, r3
    18ae:	9b04      	ldr	r3, [sp, #16]
    18b0:	4293      	cmp	r3, r2
    18b2:	d3d1      	bcc.n	1858 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    18b4:	9b05      	ldr	r3, [sp, #20]
}
    18b6:	4618      	mov	r0, r3
    18b8:	b007      	add	sp, #28
    18ba:	f85d fb04 	ldr.w	pc, [sp], #4
    18be:	bf00      	nop
    18c0:	000076cc 	.word	0x000076cc
    18c4:	000071c4 	.word	0x000071c4
    18c8:	00007184 	.word	0x00007184
    18cc:	000077d0 	.word	0x000077d0
    18d0:	1fff8b4c 	.word	0x1fff8b4c
    18d4:	000076d0 	.word	0x000076d0
    18d8:	00007174 	.word	0x00007174
    18dc:	00007740 	.word	0x00007740

000018e0 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    18e0:	b500      	push	{lr}
    18e2:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    18e4:	4b55      	ldr	r3, [pc, #340]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	2b00      	cmp	r3, #0
    18ea:	f000 80a2 	beq.w	1a32 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    18ee:	2300      	movs	r3, #0
    18f0:	9301      	str	r3, [sp, #4]
    18f2:	e02c      	b.n	194e <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    18f4:	4b51      	ldr	r3, [pc, #324]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    18f6:	681a      	ldr	r2, [r3, #0]
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	330d      	adds	r3, #13
    18fc:	00db      	lsls	r3, r3, #3
    18fe:	4413      	add	r3, r2
    1900:	685b      	ldr	r3, [r3, #4]
    1902:	4a4f      	ldr	r2, [pc, #316]	; (1a40 <Clock_Ip_DistributePll+0x160>)
    1904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1908:	2b03      	cmp	r3, #3
    190a:	d11d      	bne.n	1948 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    190c:	4b4b      	ldr	r3, [pc, #300]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	9a01      	ldr	r2, [sp, #4]
    1912:	320d      	adds	r2, #13
    1914:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1918:	494a      	ldr	r1, [pc, #296]	; (1a44 <Clock_Ip_DistributePll+0x164>)
    191a:	4613      	mov	r3, r2
    191c:	00db      	lsls	r3, r3, #3
    191e:	4413      	add	r3, r2
    1920:	440b      	add	r3, r1
    1922:	3301      	adds	r3, #1
    1924:	781b      	ldrb	r3, [r3, #0]
    1926:	461a      	mov	r2, r3
    1928:	4b47      	ldr	r3, [pc, #284]	; (1a48 <Clock_Ip_DistributePll+0x168>)
    192a:	5c9b      	ldrb	r3, [r3, r2]
    192c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    192e:	4a47      	ldr	r2, [pc, #284]	; (1a4c <Clock_Ip_DistributePll+0x16c>)
    1930:	9b00      	ldr	r3, [sp, #0]
    1932:	00db      	lsls	r3, r3, #3
    1934:	4413      	add	r3, r2
    1936:	685b      	ldr	r3, [r3, #4]
    1938:	4a40      	ldr	r2, [pc, #256]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    193a:	6811      	ldr	r1, [r2, #0]
    193c:	9a01      	ldr	r2, [sp, #4]
    193e:	320d      	adds	r2, #13
    1940:	00d2      	lsls	r2, r2, #3
    1942:	440a      	add	r2, r1
    1944:	4610      	mov	r0, r2
    1946:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1948:	9b01      	ldr	r3, [sp, #4]
    194a:	3301      	adds	r3, #1
    194c:	9301      	str	r3, [sp, #4]
    194e:	4b3b      	ldr	r3, [pc, #236]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	7adb      	ldrb	r3, [r3, #11]
    1954:	461a      	mov	r2, r3
    1956:	9b01      	ldr	r3, [sp, #4]
    1958:	4293      	cmp	r3, r2
    195a:	d3cb      	bcc.n	18f4 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    195c:	4b3c      	ldr	r3, [pc, #240]	; (1a50 <Clock_Ip_DistributePll+0x170>)
    195e:	781b      	ldrb	r3, [r3, #0]
    1960:	2b00      	cmp	r3, #0
    1962:	d066      	beq.n	1a32 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1964:	2300      	movs	r3, #0
    1966:	9301      	str	r3, [sp, #4]
    1968:	e021      	b.n	19ae <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    196a:	4b34      	ldr	r3, [pc, #208]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    196c:	681a      	ldr	r2, [r3, #0]
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	334e      	adds	r3, #78	; 0x4e
    1972:	00db      	lsls	r3, r3, #3
    1974:	4413      	add	r3, r2
    1976:	685a      	ldr	r2, [r3, #4]
    1978:	4932      	ldr	r1, [pc, #200]	; (1a44 <Clock_Ip_DistributePll+0x164>)
    197a:	4613      	mov	r3, r2
    197c:	00db      	lsls	r3, r3, #3
    197e:	4413      	add	r3, r2
    1980:	440b      	add	r3, r1
    1982:	3301      	adds	r3, #1
    1984:	781b      	ldrb	r3, [r3, #0]
    1986:	461a      	mov	r2, r3
    1988:	4b32      	ldr	r3, [pc, #200]	; (1a54 <Clock_Ip_DistributePll+0x174>)
    198a:	5c9b      	ldrb	r3, [r3, r2]
    198c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    198e:	4a32      	ldr	r2, [pc, #200]	; (1a58 <Clock_Ip_DistributePll+0x178>)
    1990:	9b00      	ldr	r3, [sp, #0]
    1992:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1996:	4a29      	ldr	r2, [pc, #164]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    1998:	6811      	ldr	r1, [r2, #0]
    199a:	9a01      	ldr	r2, [sp, #4]
    199c:	324e      	adds	r2, #78	; 0x4e
    199e:	00d2      	lsls	r2, r2, #3
    19a0:	440a      	add	r2, r1
    19a2:	3204      	adds	r2, #4
    19a4:	4610      	mov	r0, r2
    19a6:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    19a8:	9b01      	ldr	r3, [sp, #4]
    19aa:	3301      	adds	r3, #1
    19ac:	9301      	str	r3, [sp, #4]
    19ae:	4b23      	ldr	r3, [pc, #140]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	7c1b      	ldrb	r3, [r3, #16]
    19b4:	461a      	mov	r2, r3
    19b6:	9b01      	ldr	r3, [sp, #4]
    19b8:	4293      	cmp	r3, r2
    19ba:	d3d6      	bcc.n	196a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    19bc:	2300      	movs	r3, #0
    19be:	9301      	str	r3, [sp, #4]
    19c0:	e02a      	b.n	1a18 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    19c2:	4b1e      	ldr	r3, [pc, #120]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    19c4:	6819      	ldr	r1, [r3, #0]
    19c6:	9a01      	ldr	r2, [sp, #4]
    19c8:	4613      	mov	r3, r2
    19ca:	009b      	lsls	r3, r3, #2
    19cc:	4413      	add	r3, r2
    19ce:	009b      	lsls	r3, r3, #2
    19d0:	440b      	add	r3, r1
    19d2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19d6:	681a      	ldr	r2, [r3, #0]
    19d8:	491a      	ldr	r1, [pc, #104]	; (1a44 <Clock_Ip_DistributePll+0x164>)
    19da:	4613      	mov	r3, r2
    19dc:	00db      	lsls	r3, r3, #3
    19de:	4413      	add	r3, r2
    19e0:	440b      	add	r3, r1
    19e2:	3301      	adds	r3, #1
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	461a      	mov	r2, r3
    19e8:	4b1c      	ldr	r3, [pc, #112]	; (1a5c <Clock_Ip_DistributePll+0x17c>)
    19ea:	5c9b      	ldrb	r3, [r3, r2]
    19ec:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    19ee:	4a1c      	ldr	r2, [pc, #112]	; (1a60 <Clock_Ip_DistributePll+0x180>)
    19f0:	9b00      	ldr	r3, [sp, #0]
    19f2:	011b      	lsls	r3, r3, #4
    19f4:	4413      	add	r3, r2
    19f6:	330c      	adds	r3, #12
    19f8:	6819      	ldr	r1, [r3, #0]
    19fa:	4b10      	ldr	r3, [pc, #64]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    19fc:	6818      	ldr	r0, [r3, #0]
    19fe:	9a01      	ldr	r2, [sp, #4]
    1a00:	4613      	mov	r3, r2
    1a02:	009b      	lsls	r3, r3, #2
    1a04:	4413      	add	r3, r2
    1a06:	009b      	lsls	r3, r3, #2
    1a08:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a0c:	4403      	add	r3, r0
    1a0e:	4618      	mov	r0, r3
    1a10:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1a12:	9b01      	ldr	r3, [sp, #4]
    1a14:	3301      	adds	r3, #1
    1a16:	9301      	str	r3, [sp, #4]
    1a18:	4b08      	ldr	r3, [pc, #32]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    1a1a:	681b      	ldr	r3, [r3, #0]
    1a1c:	7c9b      	ldrb	r3, [r3, #18]
    1a1e:	461a      	mov	r2, r3
    1a20:	9b01      	ldr	r3, [sp, #4]
    1a22:	4293      	cmp	r3, r2
    1a24:	d3cd      	bcc.n	19c2 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1a26:	4b05      	ldr	r3, [pc, #20]	; (1a3c <Clock_Ip_DistributePll+0x15c>)
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	2104      	movs	r1, #4
    1a2c:	4618      	mov	r0, r3
    1a2e:	f002 fe0b 	bl	4648 <Clock_Ip_Command>
        }
    }
}
    1a32:	bf00      	nop
    1a34:	b003      	add	sp, #12
    1a36:	f85d fb04 	ldr.w	pc, [sp], #4
    1a3a:	bf00      	nop
    1a3c:	1fff8b44 	.word	0x1fff8b44
    1a40:	00007610 	.word	0x00007610
    1a44:	000071c4 	.word	0x000071c4
    1a48:	00007194 	.word	0x00007194
    1a4c:	000077fc 	.word	0x000077fc
    1a50:	1fff8b4c 	.word	0x1fff8b4c
    1a54:	00007164 	.word	0x00007164
    1a58:	0000774c 	.word	0x0000774c
    1a5c:	000071b4 	.word	0x000071b4
    1a60:	000077c0 	.word	0x000077c0

00001a64 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1a64:	b500      	push	{lr}
    1a66:	b085      	sub	sp, #20
    1a68:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1a6a:	490c      	ldr	r1, [pc, #48]	; (1a9c <Clock_Ip_DisableClockMonitor+0x38>)
    1a6c:	9a01      	ldr	r2, [sp, #4]
    1a6e:	4613      	mov	r3, r2
    1a70:	00db      	lsls	r3, r3, #3
    1a72:	4413      	add	r3, r2
    1a74:	440b      	add	r3, r1
    1a76:	3301      	adds	r3, #1
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	461a      	mov	r2, r3
    1a7c:	4b08      	ldr	r3, [pc, #32]	; (1aa0 <Clock_Ip_DisableClockMonitor+0x3c>)
    1a7e:	5c9b      	ldrb	r3, [r3, r2]
    1a80:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1a82:	4a08      	ldr	r2, [pc, #32]	; (1aa4 <Clock_Ip_DisableClockMonitor+0x40>)
    1a84:	9b03      	ldr	r3, [sp, #12]
    1a86:	011b      	lsls	r3, r3, #4
    1a88:	4413      	add	r3, r2
    1a8a:	3308      	adds	r3, #8
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	9801      	ldr	r0, [sp, #4]
    1a90:	4798      	blx	r3
}
    1a92:	bf00      	nop
    1a94:	b005      	add	sp, #20
    1a96:	f85d fb04 	ldr.w	pc, [sp], #4
    1a9a:	bf00      	nop
    1a9c:	000071c4 	.word	0x000071c4
    1aa0:	000071b4 	.word	0x000071b4
    1aa4:	000077c0 	.word	0x000077c0

00001aa8 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1aa8:	b082      	sub	sp, #8
    1aaa:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1aac:	4a02      	ldr	r2, [pc, #8]	; (1ab8 <Clock_Ip_InstallNotificationsCallback+0x10>)
    1aae:	9b01      	ldr	r3, [sp, #4]
    1ab0:	6013      	str	r3, [r2, #0]
}
    1ab2:	bf00      	nop
    1ab4:	b002      	add	sp, #8
    1ab6:	4770      	bx	lr
    1ab8:	1fff8b14 	.word	0x1fff8b14

00001abc <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1abc:	b500      	push	{lr}
    1abe:	b085      	sub	sp, #20
    1ac0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1ac2:	490c      	ldr	r1, [pc, #48]	; (1af4 <Clock_Ip_DisableModuleClock+0x38>)
    1ac4:	9a01      	ldr	r2, [sp, #4]
    1ac6:	4613      	mov	r3, r2
    1ac8:	00db      	lsls	r3, r3, #3
    1aca:	4413      	add	r3, r2
    1acc:	440b      	add	r3, r1
    1ace:	3301      	adds	r3, #1
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	461a      	mov	r2, r3
    1ad4:	4b08      	ldr	r3, [pc, #32]	; (1af8 <Clock_Ip_DisableModuleClock+0x3c>)
    1ad6:	5c9b      	ldrb	r3, [r3, r2]
    1ad8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1ada:	4a08      	ldr	r2, [pc, #32]	; (1afc <Clock_Ip_DisableModuleClock+0x40>)
    1adc:	9b03      	ldr	r3, [sp, #12]
    1ade:	00db      	lsls	r3, r3, #3
    1ae0:	4413      	add	r3, r2
    1ae2:	685b      	ldr	r3, [r3, #4]
    1ae4:	2101      	movs	r1, #1
    1ae6:	9801      	ldr	r0, [sp, #4]
    1ae8:	4798      	blx	r3
}
    1aea:	bf00      	nop
    1aec:	b005      	add	sp, #20
    1aee:	f85d fb04 	ldr.w	pc, [sp], #4
    1af2:	bf00      	nop
    1af4:	000071c4 	.word	0x000071c4
    1af8:	00007164 	.word	0x00007164
    1afc:	0000774c 	.word	0x0000774c

00001b00 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1b00:	b500      	push	{lr}
    1b02:	b085      	sub	sp, #20
    1b04:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1b06:	490c      	ldr	r1, [pc, #48]	; (1b38 <Clock_Ip_EnableModuleClock+0x38>)
    1b08:	9a01      	ldr	r2, [sp, #4]
    1b0a:	4613      	mov	r3, r2
    1b0c:	00db      	lsls	r3, r3, #3
    1b0e:	4413      	add	r3, r2
    1b10:	440b      	add	r3, r1
    1b12:	3301      	adds	r3, #1
    1b14:	781b      	ldrb	r3, [r3, #0]
    1b16:	461a      	mov	r2, r3
    1b18:	4b08      	ldr	r3, [pc, #32]	; (1b3c <Clock_Ip_EnableModuleClock+0x3c>)
    1b1a:	5c9b      	ldrb	r3, [r3, r2]
    1b1c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1b1e:	4a08      	ldr	r2, [pc, #32]	; (1b40 <Clock_Ip_EnableModuleClock+0x40>)
    1b20:	9b03      	ldr	r3, [sp, #12]
    1b22:	00db      	lsls	r3, r3, #3
    1b24:	4413      	add	r3, r2
    1b26:	685b      	ldr	r3, [r3, #4]
    1b28:	2100      	movs	r1, #0
    1b2a:	9801      	ldr	r0, [sp, #4]
    1b2c:	4798      	blx	r3
}
    1b2e:	bf00      	nop
    1b30:	b005      	add	sp, #20
    1b32:	f85d fb04 	ldr.w	pc, [sp], #4
    1b36:	bf00      	nop
    1b38:	000071c4 	.word	0x000071c4
    1b3c:	00007164 	.word	0x00007164
    1b40:	0000774c 	.word	0x0000774c

00001b44 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1b44:	b500      	push	{lr}
    1b46:	b083      	sub	sp, #12
    1b48:	9001      	str	r0, [sp, #4]
    1b4a:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1b4c:	4b08      	ldr	r3, [pc, #32]	; (1b70 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1b4e:	2200      	movs	r2, #0
    1b50:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1b52:	4b08      	ldr	r3, [pc, #32]	; (1b74 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	2102      	movs	r1, #2
    1b58:	4618      	mov	r0, r3
    1b5a:	f002 fd75 	bl	4648 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1b5e:	9900      	ldr	r1, [sp, #0]
    1b60:	9801      	ldr	r0, [sp, #4]
    1b62:	f002 fc51 	bl	4408 <Clock_Ip_ClockPowerModeChangeNotification>
}
    1b66:	bf00      	nop
    1b68:	b003      	add	sp, #12
    1b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b6e:	bf00      	nop
    1b70:	1fff8b10 	.word	0x1fff8b10
    1b74:	1fff8b44 	.word	0x1fff8b44

00001b78 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1b78:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1b7a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1b7e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1b80:	4b06      	ldr	r3, [pc, #24]	; (1b9c <Clock_Ip_SetWaitStates+0x24>)
    1b82:	785b      	ldrb	r3, [r3, #1]
    1b84:	2b00      	cmp	r3, #0
    1b86:	d005      	beq.n	1b94 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1b88:	9b01      	ldr	r3, [sp, #4]
    1b8a:	3b01      	subs	r3, #1
    1b8c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1b8e:	9b01      	ldr	r3, [sp, #4]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d1f9      	bne.n	1b88 <Clock_Ip_SetWaitStates+0x10>
    }
}
    1b94:	bf00      	nop
    1b96:	b002      	add	sp, #8
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop
    1b9c:	1fff8b4c 	.word	0x1fff8b4c

00001ba0 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1ba0:	b500      	push	{lr}
    1ba2:	b083      	sub	sp, #12
    1ba4:	9001      	str	r0, [sp, #4]
    1ba6:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1ba8:	4b04      	ldr	r3, [pc, #16]	; (1bbc <Clock_Ip_ReportClockErrors+0x1c>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	9900      	ldr	r1, [sp, #0]
    1bae:	9801      	ldr	r0, [sp, #4]
    1bb0:	4798      	blx	r3
}
    1bb2:	bf00      	nop
    1bb4:	b003      	add	sp, #12
    1bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    1bba:	bf00      	nop
    1bbc:	1fff8b14 	.word	0x1fff8b14

00001bc0 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1bc0:	b500      	push	{lr}
    1bc2:	b085      	sub	sp, #20
    1bc4:	9003      	str	r0, [sp, #12]
    1bc6:	9102      	str	r1, [sp, #8]
    1bc8:	9201      	str	r2, [sp, #4]
    1bca:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1bcc:	2000      	movs	r0, #0
    1bce:	f7fe ffd0 	bl	b72 <OsIf_GetCounter>
    1bd2:	4602      	mov	r2, r0
    1bd4:	9b03      	ldr	r3, [sp, #12]
    1bd6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1bd8:	9b02      	ldr	r3, [sp, #8]
    1bda:	2200      	movs	r2, #0
    1bdc:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1bde:	2100      	movs	r1, #0
    1be0:	9800      	ldr	r0, [sp, #0]
    1be2:	f7ff f812 	bl	c0a <OsIf_MicrosToTicks>
    1be6:	4602      	mov	r2, r0
    1be8:	9b01      	ldr	r3, [sp, #4]
    1bea:	601a      	str	r2, [r3, #0]
}
    1bec:	bf00      	nop
    1bee:	b005      	add	sp, #20
    1bf0:	f85d fb04 	ldr.w	pc, [sp], #4

00001bf4 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    1bf4:	b500      	push	{lr}
    1bf6:	b087      	sub	sp, #28
    1bf8:	9003      	str	r0, [sp, #12]
    1bfa:	9102      	str	r1, [sp, #8]
    1bfc:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    1bfe:	2300      	movs	r3, #0
    1c00:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    1c04:	2100      	movs	r1, #0
    1c06:	9803      	ldr	r0, [sp, #12]
    1c08:	f7fe ffcc 	bl	ba4 <OsIf_GetElapsed>
    1c0c:	4602      	mov	r2, r0
    1c0e:	9b02      	ldr	r3, [sp, #8]
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	441a      	add	r2, r3
    1c14:	9b02      	ldr	r3, [sp, #8]
    1c16:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    1c18:	9b02      	ldr	r3, [sp, #8]
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	9a01      	ldr	r2, [sp, #4]
    1c1e:	429a      	cmp	r2, r3
    1c20:	d802      	bhi.n	1c28 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    1c22:	2301      	movs	r3, #1
    1c24:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    1c28:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1c2c:	4618      	mov	r0, r3
    1c2e:	b007      	add	sp, #28
    1c30:	f85d fb04 	ldr.w	pc, [sp], #4

00001c34 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    1c34:	b082      	sub	sp, #8
    1c36:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    1c38:	bf00      	nop
    1c3a:	b002      	add	sp, #8
    1c3c:	4770      	bx	lr

00001c3e <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    1c3e:	b500      	push	{lr}
    1c40:	b083      	sub	sp, #12
    1c42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c44:	9b01      	ldr	r3, [sp, #4]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d002      	beq.n	1c50 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    1c4a:	9801      	ldr	r0, [sp, #4]
    1c4c:	f000 f8ad 	bl	1daa <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c50:	bf00      	nop
    1c52:	b003      	add	sp, #12
    1c54:	f85d fb04 	ldr.w	pc, [sp], #4

00001c58 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    1c58:	b500      	push	{lr}
    1c5a:	b083      	sub	sp, #12
    1c5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d002      	beq.n	1c6a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    1c64:	9801      	ldr	r0, [sp, #4]
    1c66:	f000 f8cd 	bl	1e04 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c6a:	bf00      	nop
    1c6c:	b003      	add	sp, #12
    1c6e:	f85d fb04 	ldr.w	pc, [sp], #4

00001c72 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1c72:	b500      	push	{lr}
    1c74:	b083      	sub	sp, #12
    1c76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c78:	9b01      	ldr	r3, [sp, #4]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d002      	beq.n	1c84 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    1c7e:	9801      	ldr	r0, [sp, #4]
    1c80:	f000 f8ee 	bl	1e60 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c84:	bf00      	nop
    1c86:	b003      	add	sp, #12
    1c88:	f85d fb04 	ldr.w	pc, [sp], #4

00001c8c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1c8c:	b500      	push	{lr}
    1c8e:	b083      	sub	sp, #12
    1c90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1c92:	9b01      	ldr	r3, [sp, #4]
    1c94:	2b00      	cmp	r3, #0
    1c96:	d002      	beq.n	1c9e <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    1c98:	9801      	ldr	r0, [sp, #4]
    1c9a:	f000 f8f9 	bl	1e90 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1c9e:	bf00      	nop
    1ca0:	b003      	add	sp, #12
    1ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca6 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1ca6:	b500      	push	{lr}
    1ca8:	b083      	sub	sp, #12
    1caa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cac:	9b01      	ldr	r3, [sp, #4]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d002      	beq.n	1cb8 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    1cb2:	9801      	ldr	r0, [sp, #4]
    1cb4:	f000 f904 	bl	1ec0 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cb8:	bf00      	nop
    1cba:	b003      	add	sp, #12
    1cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00001cc0 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b083      	sub	sp, #12
    1cc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cc6:	9b01      	ldr	r3, [sp, #4]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d002      	beq.n	1cd2 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    1ccc:	9801      	ldr	r0, [sp, #4]
    1cce:	f000 f90f 	bl	1ef0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cd2:	bf00      	nop
    1cd4:	b003      	add	sp, #12
    1cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00001cda <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1cda:	b500      	push	{lr}
    1cdc:	b083      	sub	sp, #12
    1cde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1ce0:	9b01      	ldr	r3, [sp, #4]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d002      	beq.n	1cec <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    1ce6:	9801      	ldr	r0, [sp, #4]
    1ce8:	f000 f91a 	bl	1f20 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cec:	bf00      	nop
    1cee:	b003      	add	sp, #12
    1cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cf4 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1cf4:	b500      	push	{lr}
    1cf6:	b083      	sub	sp, #12
    1cf8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1cfa:	9b01      	ldr	r3, [sp, #4]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d002      	beq.n	1d06 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    1d00:	9801      	ldr	r0, [sp, #4]
    1d02:	f000 f925 	bl	1f50 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d06:	bf00      	nop
    1d08:	b003      	add	sp, #12
    1d0a:	f85d fb04 	ldr.w	pc, [sp], #4

00001d0e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1d0e:	b500      	push	{lr}
    1d10:	b083      	sub	sp, #12
    1d12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d002      	beq.n	1d20 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    1d1a:	9801      	ldr	r0, [sp, #4]
    1d1c:	f000 f930 	bl	1f80 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d20:	bf00      	nop
    1d22:	b003      	add	sp, #12
    1d24:	f85d fb04 	ldr.w	pc, [sp], #4

00001d28 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1d28:	b500      	push	{lr}
    1d2a:	b083      	sub	sp, #12
    1d2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d2e:	9b01      	ldr	r3, [sp, #4]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d002      	beq.n	1d3a <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    1d34:	9801      	ldr	r0, [sp, #4]
    1d36:	f000 f93b 	bl	1fb0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d3a:	bf00      	nop
    1d3c:	b003      	add	sp, #12
    1d3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001d42 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1d42:	b500      	push	{lr}
    1d44:	b083      	sub	sp, #12
    1d46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d48:	9b01      	ldr	r3, [sp, #4]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d002      	beq.n	1d54 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    1d4e:	9801      	ldr	r0, [sp, #4]
    1d50:	f000 f946 	bl	1fe0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d54:	bf00      	nop
    1d56:	b003      	add	sp, #12
    1d58:	f85d fb04 	ldr.w	pc, [sp], #4

00001d5c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    1d5c:	b500      	push	{lr}
    1d5e:	b083      	sub	sp, #12
    1d60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d62:	9b01      	ldr	r3, [sp, #4]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d002      	beq.n	1d6e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    1d68:	9801      	ldr	r0, [sp, #4]
    1d6a:	f000 f951 	bl	2010 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d6e:	bf00      	nop
    1d70:	b003      	add	sp, #12
    1d72:	f85d fb04 	ldr.w	pc, [sp], #4

00001d76 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    1d76:	b500      	push	{lr}
    1d78:	b083      	sub	sp, #12
    1d7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d7c:	9b01      	ldr	r3, [sp, #4]
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d002      	beq.n	1d88 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    1d82:	9801      	ldr	r0, [sp, #4]
    1d84:	f000 f95e 	bl	2044 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d88:	bf00      	nop
    1d8a:	b003      	add	sp, #12
    1d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d90 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    1d90:	b500      	push	{lr}
    1d92:	b083      	sub	sp, #12
    1d94:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d96:	9b01      	ldr	r3, [sp, #4]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d002      	beq.n	1da2 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    1d9c:	9801      	ldr	r0, [sp, #4]
    1d9e:	f000 f98b 	bl	20b8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1da2:	bf00      	nop
    1da4:	b003      	add	sp, #12
    1da6:	f85d fb04 	ldr.w	pc, [sp], #4

00001daa <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1daa:	b086      	sub	sp, #24
    1dac:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1dae:	9b01      	ldr	r3, [sp, #4]
    1db0:	681a      	ldr	r2, [r3, #0]
    1db2:	4911      	ldr	r1, [pc, #68]	; (1df8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1db4:	4613      	mov	r3, r2
    1db6:	00db      	lsls	r3, r3, #3
    1db8:	4413      	add	r3, r2
    1dba:	440b      	add	r3, r1
    1dbc:	781b      	ldrb	r3, [r3, #0]
    1dbe:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1dc0:	9b01      	ldr	r3, [sp, #4]
    1dc2:	685b      	ldr	r3, [r3, #4]
    1dc4:	4a0d      	ldr	r2, [pc, #52]	; (1dfc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1dc6:	5cd3      	ldrb	r3, [r2, r3]
    1dc8:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1dca:	4a0d      	ldr	r2, [pc, #52]	; (1e00 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1dcc:	9b05      	ldr	r3, [sp, #20]
    1dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dd2:	681b      	ldr	r3, [r3, #0]
    1dd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    1dd6:	9b03      	ldr	r3, [sp, #12]
    1dd8:	f023 0307 	bic.w	r3, r3, #7
    1ddc:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    1dde:	9a03      	ldr	r2, [sp, #12]
    1de0:	9b04      	ldr	r3, [sp, #16]
    1de2:	4313      	orrs	r3, r2
    1de4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1de6:	4a06      	ldr	r2, [pc, #24]	; (1e00 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1de8:	9b05      	ldr	r3, [sp, #20]
    1dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dee:	9a03      	ldr	r2, [sp, #12]
    1df0:	601a      	str	r2, [r3, #0]
}
    1df2:	bf00      	nop
    1df4:	b006      	add	sp, #24
    1df6:	4770      	bx	lr
    1df8:	000071c4 	.word	0x000071c4
    1dfc:	000075bc 	.word	0x000075bc
    1e00:	00007600 	.word	0x00007600

00001e04 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e04:	b086      	sub	sp, #24
    1e06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1e08:	9b01      	ldr	r3, [sp, #4]
    1e0a:	681a      	ldr	r2, [r3, #0]
    1e0c:	4911      	ldr	r1, [pc, #68]	; (1e54 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1e0e:	4613      	mov	r3, r2
    1e10:	00db      	lsls	r3, r3, #3
    1e12:	4413      	add	r3, r2
    1e14:	440b      	add	r3, r1
    1e16:	781b      	ldrb	r3, [r3, #0]
    1e18:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1e1a:	9b01      	ldr	r3, [sp, #4]
    1e1c:	685b      	ldr	r3, [r3, #4]
    1e1e:	4a0e      	ldr	r2, [pc, #56]	; (1e58 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1e20:	5cd3      	ldrb	r3, [r2, r3]
    1e22:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1e24:	4a0d      	ldr	r2, [pc, #52]	; (1e5c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1e26:	9b05      	ldr	r3, [sp, #20]
    1e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    1e30:	9b03      	ldr	r3, [sp, #12]
    1e32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1e36:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    1e38:	9b04      	ldr	r3, [sp, #16]
    1e3a:	021b      	lsls	r3, r3, #8
    1e3c:	9a03      	ldr	r2, [sp, #12]
    1e3e:	4313      	orrs	r3, r2
    1e40:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1e42:	4a06      	ldr	r2, [pc, #24]	; (1e5c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1e44:	9b05      	ldr	r3, [sp, #20]
    1e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e4a:	9a03      	ldr	r2, [sp, #12]
    1e4c:	601a      	str	r2, [r3, #0]
}
    1e4e:	bf00      	nop
    1e50:	b006      	add	sp, #24
    1e52:	4770      	bx	lr
    1e54:	000071c4 	.word	0x000071c4
    1e58:	000075bc 	.word	0x000075bc
    1e5c:	00007600 	.word	0x00007600

00001e60 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e60:	b084      	sub	sp, #16
    1e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e64:	4b09      	ldr	r3, [pc, #36]	; (1e8c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e66:	695b      	ldr	r3, [r3, #20]
    1e68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    1e6a:	9b03      	ldr	r3, [sp, #12]
    1e6c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e70:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    1e72:	9b01      	ldr	r3, [sp, #4]
    1e74:	685b      	ldr	r3, [r3, #4]
    1e76:	3b01      	subs	r3, #1
    1e78:	041b      	lsls	r3, r3, #16
    1e7a:	9a03      	ldr	r2, [sp, #12]
    1e7c:	4313      	orrs	r3, r2
    1e7e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1e80:	4a02      	ldr	r2, [pc, #8]	; (1e8c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e82:	9b03      	ldr	r3, [sp, #12]
    1e84:	6153      	str	r3, [r2, #20]
}
    1e86:	bf00      	nop
    1e88:	b004      	add	sp, #16
    1e8a:	4770      	bx	lr
    1e8c:	40064000 	.word	0x40064000

00001e90 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e90:	b084      	sub	sp, #16
    1e92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1e94:	4b09      	ldr	r3, [pc, #36]	; (1ebc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e96:	695b      	ldr	r3, [r3, #20]
    1e98:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    1e9a:	9b03      	ldr	r3, [sp, #12]
    1e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ea0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    1ea2:	9b01      	ldr	r3, [sp, #4]
    1ea4:	685b      	ldr	r3, [r3, #4]
    1ea6:	3b01      	subs	r3, #1
    1ea8:	011b      	lsls	r3, r3, #4
    1eaa:	9a03      	ldr	r2, [sp, #12]
    1eac:	4313      	orrs	r3, r2
    1eae:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1eb0:	4a02      	ldr	r2, [pc, #8]	; (1ebc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1eb2:	9b03      	ldr	r3, [sp, #12]
    1eb4:	6153      	str	r3, [r2, #20]
}
    1eb6:	bf00      	nop
    1eb8:	b004      	add	sp, #16
    1eba:	4770      	bx	lr
    1ebc:	40064000 	.word	0x40064000

00001ec0 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ec0:	b084      	sub	sp, #16
    1ec2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1ec4:	4b09      	ldr	r3, [pc, #36]	; (1eec <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1ec6:	695b      	ldr	r3, [r3, #20]
    1ec8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    1eca:	9b03      	ldr	r3, [sp, #12]
    1ecc:	f023 030f 	bic.w	r3, r3, #15
    1ed0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    1ed2:	9b01      	ldr	r3, [sp, #4]
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	3b01      	subs	r3, #1
    1ed8:	9a03      	ldr	r2, [sp, #12]
    1eda:	4313      	orrs	r3, r2
    1edc:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1ede:	4a03      	ldr	r2, [pc, #12]	; (1eec <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1ee0:	9b03      	ldr	r3, [sp, #12]
    1ee2:	6153      	str	r3, [r2, #20]
}
    1ee4:	bf00      	nop
    1ee6:	b004      	add	sp, #16
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	40064000 	.word	0x40064000

00001ef0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ef0:	b084      	sub	sp, #16
    1ef2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ef4:	4b09      	ldr	r3, [pc, #36]	; (1f1c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ef6:	699b      	ldr	r3, [r3, #24]
    1ef8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    1efa:	9b03      	ldr	r3, [sp, #12]
    1efc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f00:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    1f02:	9b01      	ldr	r3, [sp, #4]
    1f04:	685b      	ldr	r3, [r3, #4]
    1f06:	3b01      	subs	r3, #1
    1f08:	041b      	lsls	r3, r3, #16
    1f0a:	9a03      	ldr	r2, [sp, #12]
    1f0c:	4313      	orrs	r3, r2
    1f0e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f10:	4a02      	ldr	r2, [pc, #8]	; (1f1c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1f12:	9b03      	ldr	r3, [sp, #12]
    1f14:	6193      	str	r3, [r2, #24]
}
    1f16:	bf00      	nop
    1f18:	b004      	add	sp, #16
    1f1a:	4770      	bx	lr
    1f1c:	40064000 	.word	0x40064000

00001f20 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f20:	b084      	sub	sp, #16
    1f22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f24:	4b09      	ldr	r3, [pc, #36]	; (1f4c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1f26:	699b      	ldr	r3, [r3, #24]
    1f28:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    1f2a:	9b03      	ldr	r3, [sp, #12]
    1f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f30:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    1f32:	9b01      	ldr	r3, [sp, #4]
    1f34:	685b      	ldr	r3, [r3, #4]
    1f36:	3b01      	subs	r3, #1
    1f38:	011b      	lsls	r3, r3, #4
    1f3a:	9a03      	ldr	r2, [sp, #12]
    1f3c:	4313      	orrs	r3, r2
    1f3e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f40:	4a02      	ldr	r2, [pc, #8]	; (1f4c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1f42:	9b03      	ldr	r3, [sp, #12]
    1f44:	6193      	str	r3, [r2, #24]
}
    1f46:	bf00      	nop
    1f48:	b004      	add	sp, #16
    1f4a:	4770      	bx	lr
    1f4c:	40064000 	.word	0x40064000

00001f50 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f50:	b084      	sub	sp, #16
    1f52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f54:	4b09      	ldr	r3, [pc, #36]	; (1f7c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f56:	699b      	ldr	r3, [r3, #24]
    1f58:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    1f5a:	9b03      	ldr	r3, [sp, #12]
    1f5c:	f023 030f 	bic.w	r3, r3, #15
    1f60:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    1f62:	9b01      	ldr	r3, [sp, #4]
    1f64:	685b      	ldr	r3, [r3, #4]
    1f66:	3b01      	subs	r3, #1
    1f68:	9a03      	ldr	r2, [sp, #12]
    1f6a:	4313      	orrs	r3, r2
    1f6c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1f6e:	4a03      	ldr	r2, [pc, #12]	; (1f7c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f70:	9b03      	ldr	r3, [sp, #12]
    1f72:	6193      	str	r3, [r2, #24]
}
    1f74:	bf00      	nop
    1f76:	b004      	add	sp, #16
    1f78:	4770      	bx	lr
    1f7a:	bf00      	nop
    1f7c:	40064000 	.word	0x40064000

00001f80 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f80:	b084      	sub	sp, #16
    1f82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1f84:	4b09      	ldr	r3, [pc, #36]	; (1fac <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f86:	69db      	ldr	r3, [r3, #28]
    1f88:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    1f8a:	9b03      	ldr	r3, [sp, #12]
    1f8c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f90:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    1f92:	9b01      	ldr	r3, [sp, #4]
    1f94:	685b      	ldr	r3, [r3, #4]
    1f96:	3b01      	subs	r3, #1
    1f98:	041b      	lsls	r3, r3, #16
    1f9a:	9a03      	ldr	r2, [sp, #12]
    1f9c:	4313      	orrs	r3, r2
    1f9e:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1fa0:	4a02      	ldr	r2, [pc, #8]	; (1fac <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1fa2:	9b03      	ldr	r3, [sp, #12]
    1fa4:	61d3      	str	r3, [r2, #28]
}
    1fa6:	bf00      	nop
    1fa8:	b004      	add	sp, #16
    1faa:	4770      	bx	lr
    1fac:	40064000 	.word	0x40064000

00001fb0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fb0:	b084      	sub	sp, #16
    1fb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1fb4:	4b09      	ldr	r3, [pc, #36]	; (1fdc <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1fb6:	69db      	ldr	r3, [r3, #28]
    1fb8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    1fba:	9b03      	ldr	r3, [sp, #12]
    1fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fc0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    1fc2:	9b01      	ldr	r3, [sp, #4]
    1fc4:	685b      	ldr	r3, [r3, #4]
    1fc6:	3b01      	subs	r3, #1
    1fc8:	011b      	lsls	r3, r3, #4
    1fca:	9a03      	ldr	r2, [sp, #12]
    1fcc:	4313      	orrs	r3, r2
    1fce:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1fd0:	4a02      	ldr	r2, [pc, #8]	; (1fdc <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1fd2:	9b03      	ldr	r3, [sp, #12]
    1fd4:	61d3      	str	r3, [r2, #28]
}
    1fd6:	bf00      	nop
    1fd8:	b004      	add	sp, #16
    1fda:	4770      	bx	lr
    1fdc:	40064000 	.word	0x40064000

00001fe0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fe0:	b084      	sub	sp, #16
    1fe2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    1fe4:	4b09      	ldr	r3, [pc, #36]	; (200c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fe6:	69db      	ldr	r3, [r3, #28]
    1fe8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    1fea:	9b03      	ldr	r3, [sp, #12]
    1fec:	f023 030f 	bic.w	r3, r3, #15
    1ff0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    1ff2:	9b01      	ldr	r3, [sp, #4]
    1ff4:	685b      	ldr	r3, [r3, #4]
    1ff6:	3b01      	subs	r3, #1
    1ff8:	9a03      	ldr	r2, [sp, #12]
    1ffa:	4313      	orrs	r3, r2
    1ffc:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    1ffe:	4a03      	ldr	r2, [pc, #12]	; (200c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2000:	9b03      	ldr	r3, [sp, #12]
    2002:	61d3      	str	r3, [r2, #28]
}
    2004:	bf00      	nop
    2006:	b004      	add	sp, #16
    2008:	4770      	bx	lr
    200a:	bf00      	nop
    200c:	40064000 	.word	0x40064000

00002010 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2010:	b084      	sub	sp, #16
    2012:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2014:	4b0a      	ldr	r3, [pc, #40]	; (2040 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2016:	685b      	ldr	r3, [r3, #4]
    2018:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    201a:	9b03      	ldr	r3, [sp, #12]
    201c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2020:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2022:	9b01      	ldr	r3, [sp, #4]
    2024:	685b      	ldr	r3, [r3, #4]
    2026:	3b01      	subs	r3, #1
    2028:	021b      	lsls	r3, r3, #8
    202a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    202e:	9a03      	ldr	r2, [sp, #12]
    2030:	4313      	orrs	r3, r2
    2032:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2034:	4a02      	ldr	r2, [pc, #8]	; (2040 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	6053      	str	r3, [r2, #4]
}
    203a:	bf00      	nop
    203c:	b004      	add	sp, #16
    203e:	4770      	bx	lr
    2040:	40048000 	.word	0x40048000

00002044 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2044:	b084      	sub	sp, #16
    2046:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2048:	4919      	ldr	r1, [pc, #100]	; (20b0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    204a:	9b01      	ldr	r3, [sp, #4]
    204c:	681a      	ldr	r2, [r3, #0]
    204e:	4819      	ldr	r0, [pc, #100]	; (20b4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2050:	4613      	mov	r3, r2
    2052:	00db      	lsls	r3, r3, #3
    2054:	4413      	add	r3, r2
    2056:	4403      	add	r3, r0
    2058:	3305      	adds	r3, #5
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2060:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2062:	9b03      	ldr	r3, [sp, #12]
    2064:	f023 030f 	bic.w	r3, r3, #15
    2068:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    206a:	9b01      	ldr	r3, [sp, #4]
    206c:	685b      	ldr	r3, [r3, #4]
    206e:	3b01      	subs	r3, #1
    2070:	f003 0307 	and.w	r3, r3, #7
    2074:	9a03      	ldr	r2, [sp, #12]
    2076:	4313      	orrs	r3, r2
    2078:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    207a:	9b01      	ldr	r3, [sp, #4]
    207c:	7a1b      	ldrb	r3, [r3, #8]
    207e:	3b01      	subs	r3, #1
    2080:	00db      	lsls	r3, r3, #3
    2082:	f003 0308 	and.w	r3, r3, #8
    2086:	9a03      	ldr	r2, [sp, #12]
    2088:	4313      	orrs	r3, r2
    208a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    208c:	4908      	ldr	r1, [pc, #32]	; (20b0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    208e:	9b01      	ldr	r3, [sp, #4]
    2090:	681a      	ldr	r2, [r3, #0]
    2092:	4808      	ldr	r0, [pc, #32]	; (20b4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2094:	4613      	mov	r3, r2
    2096:	00db      	lsls	r3, r3, #3
    2098:	4413      	add	r3, r2
    209a:	4403      	add	r3, r0
    209c:	3305      	adds	r3, #5
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	461a      	mov	r2, r3
    20a2:	9b03      	ldr	r3, [sp, #12]
    20a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    20a8:	bf00      	nop
    20aa:	b004      	add	sp, #16
    20ac:	4770      	bx	lr
    20ae:	bf00      	nop
    20b0:	40065000 	.word	0x40065000
    20b4:	000071c4 	.word	0x000071c4

000020b8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    20b8:	b084      	sub	sp, #16
    20ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    20bc:	4b10      	ldr	r3, [pc, #64]	; (2100 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    20c0:	4a0f      	ldr	r2, [pc, #60]	; (2100 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    20c6:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    20c8:	4b0d      	ldr	r3, [pc, #52]	; (2100 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    20cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    20ce:	9b03      	ldr	r3, [sp, #12]
    20d0:	f023 030f 	bic.w	r3, r3, #15
    20d4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    20d6:	9b01      	ldr	r3, [sp, #4]
    20d8:	685b      	ldr	r3, [r3, #4]
    20da:	3b01      	subs	r3, #1
    20dc:	005b      	lsls	r3, r3, #1
    20de:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    20e2:	9b01      	ldr	r3, [sp, #4]
    20e4:	7a1b      	ldrb	r3, [r3, #8]
    20e6:	3b01      	subs	r3, #1
    20e8:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    20ec:	4313      	orrs	r3, r2
    20ee:	9a03      	ldr	r2, [sp, #12]
    20f0:	4313      	orrs	r3, r2
    20f2:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    20f4:	4a02      	ldr	r2, [pc, #8]	; (2100 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20f6:	9b03      	ldr	r3, [sp, #12]
    20f8:	6693      	str	r3, [r2, #104]	; 0x68
}
    20fa:	bf00      	nop
    20fc:	b004      	add	sp, #16
    20fe:	4770      	bx	lr
    2100:	40048000 	.word	0x40048000

00002104 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2104:	b082      	sub	sp, #8
    2106:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2108:	bf00      	nop
    210a:	b002      	add	sp, #8
    210c:	4770      	bx	lr
	...

00002110 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2110:	b082      	sub	sp, #8
    2112:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2114:	bf00      	nop
    2116:	b002      	add	sp, #8
    2118:	4770      	bx	lr

0000211a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    211a:	b082      	sub	sp, #8
    211c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    211e:	bf00      	nop
    2120:	b002      	add	sp, #8
    2122:	4770      	bx	lr

00002124 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2124:	b500      	push	{lr}
    2126:	b083      	sub	sp, #12
    2128:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    212a:	9b01      	ldr	r3, [sp, #4]
    212c:	2b00      	cmp	r3, #0
    212e:	d002      	beq.n	2136 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2130:	9801      	ldr	r0, [sp, #4]
    2132:	f000 f86a 	bl	220a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2136:	bf00      	nop
    2138:	b003      	add	sp, #12
    213a:	f85d fb04 	ldr.w	pc, [sp], #4

0000213e <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    213e:	b500      	push	{lr}
    2140:	b083      	sub	sp, #12
    2142:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2144:	9b01      	ldr	r3, [sp, #4]
    2146:	2b00      	cmp	r3, #0
    2148:	d002      	beq.n	2150 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    214a:	9801      	ldr	r0, [sp, #4]
    214c:	f000 f884 	bl	2258 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2150:	bf00      	nop
    2152:	b003      	add	sp, #12
    2154:	f85d fb04 	ldr.w	pc, [sp], #4

00002158 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2158:	b500      	push	{lr}
    215a:	b089      	sub	sp, #36	; 0x24
    215c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    215e:	2300      	movs	r3, #0
    2160:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2164:	9b01      	ldr	r3, [sp, #4]
    2166:	2b00      	cmp	r3, #0
    2168:	d031      	beq.n	21ce <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    216a:	4b1b      	ldr	r3, [pc, #108]	; (21d8 <Clock_Ip_CompleteSOSC+0x80>)
    216c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2170:	f003 0301 	and.w	r3, r3, #1
    2174:	2b00      	cmp	r3, #0
    2176:	d02a      	beq.n	21ce <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2178:	aa03      	add	r2, sp, #12
    217a:	a904      	add	r1, sp, #16
    217c:	a805      	add	r0, sp, #20
    217e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2182:	f7ff fd1d 	bl	1bc0 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2186:	4b14      	ldr	r3, [pc, #80]	; (21d8 <Clock_Ip_CompleteSOSC+0x80>)
    2188:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    218c:	0e1b      	lsrs	r3, r3, #24
    218e:	f003 0301 	and.w	r3, r3, #1
    2192:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2194:	9a03      	ldr	r2, [sp, #12]
    2196:	a904      	add	r1, sp, #16
    2198:	ab05      	add	r3, sp, #20
    219a:	4618      	mov	r0, r3
    219c:	f7ff fd2a 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    21a0:	4603      	mov	r3, r0
    21a2:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    21a6:	9b06      	ldr	r3, [sp, #24]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d106      	bne.n	21ba <Clock_Ip_CompleteSOSC+0x62>
    21ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    21b0:	f083 0301 	eor.w	r3, r3, #1
    21b4:	b2db      	uxtb	r3, r3
    21b6:	2b00      	cmp	r3, #0
    21b8:	d1e5      	bne.n	2186 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    21ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    21be:	2b00      	cmp	r3, #0
    21c0:	d005      	beq.n	21ce <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    21c2:	9b01      	ldr	r3, [sp, #4]
    21c4:	681b      	ldr	r3, [r3, #0]
    21c6:	4619      	mov	r1, r3
    21c8:	2001      	movs	r0, #1
    21ca:	f7ff fce9 	bl	1ba0 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    21ce:	bf00      	nop
    21d0:	b009      	add	sp, #36	; 0x24
    21d2:	f85d fb04 	ldr.w	pc, [sp], #4
    21d6:	bf00      	nop
    21d8:	40064000 	.word	0x40064000

000021dc <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    21dc:	b500      	push	{lr}
    21de:	b083      	sub	sp, #12
    21e0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    21e2:	9801      	ldr	r0, [sp, #4]
    21e4:	f000 f8c0 	bl	2368 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    21e8:	bf00      	nop
    21ea:	b003      	add	sp, #12
    21ec:	f85d fb04 	ldr.w	pc, [sp], #4

000021f0 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    21f0:	b500      	push	{lr}
    21f2:	b083      	sub	sp, #12
    21f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21f6:	9b01      	ldr	r3, [sp, #4]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d002      	beq.n	2202 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    21fc:	9801      	ldr	r0, [sp, #4]
    21fe:	f000 f8c3 	bl	2388 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2202:	bf00      	nop
    2204:	b003      	add	sp, #12
    2206:	f85d fb04 	ldr.w	pc, [sp], #4

0000220a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    220a:	b082      	sub	sp, #8
    220c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    220e:	4b11      	ldr	r3, [pc, #68]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2210:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2214:	4a0f      	ldr	r2, [pc, #60]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2216:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    221a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    221e:	4b0d      	ldr	r3, [pc, #52]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2220:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2224:	4a0b      	ldr	r2, [pc, #44]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    222a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    222e:	4b09      	ldr	r3, [pc, #36]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2230:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2234:	4a07      	ldr	r2, [pc, #28]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2236:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    223a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    223e:	4b05      	ldr	r3, [pc, #20]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2240:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2244:	4a03      	ldr	r2, [pc, #12]	; (2254 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2246:	f023 0301 	bic.w	r3, r3, #1
    224a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    224e:	bf00      	nop
    2250:	b002      	add	sp, #8
    2252:	4770      	bx	lr
    2254:	40064000 	.word	0x40064000

00002258 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2258:	b082      	sub	sp, #8
    225a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    225c:	9b01      	ldr	r3, [sp, #4]
    225e:	891b      	ldrh	r3, [r3, #8]
    2260:	2b01      	cmp	r3, #1
    2262:	d174      	bne.n	234e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2264:	9b01      	ldr	r3, [sp, #4]
    2266:	7bdb      	ldrb	r3, [r3, #15]
    2268:	2b00      	cmp	r3, #0
    226a:	d002      	beq.n	2272 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    226c:	2b01      	cmp	r3, #1
    226e:	d009      	beq.n	2284 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2270:	e011      	b.n	2296 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2272:	4b39      	ldr	r3, [pc, #228]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2274:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2278:	4a37      	ldr	r2, [pc, #220]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    227a:	f023 0308 	bic.w	r3, r3, #8
    227e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2282:	e008      	b.n	2296 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2284:	4b34      	ldr	r3, [pc, #208]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    228a:	4a33      	ldr	r2, [pc, #204]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    228c:	f043 0308 	orr.w	r3, r3, #8
    2290:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2294:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    2296:	4b30      	ldr	r3, [pc, #192]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2298:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    229c:	4a2e      	ldr	r2, [pc, #184]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    229e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    22a2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    22a6:	9b01      	ldr	r3, [sp, #4]
    22a8:	685b      	ldr	r3, [r3, #4]
    22aa:	4a2c      	ldr	r2, [pc, #176]	; (235c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    22ac:	4293      	cmp	r3, r2
    22ae:	d90d      	bls.n	22cc <Clock_Ip_SetSOSC_TrustedCall+0x74>
    22b0:	9b01      	ldr	r3, [sp, #4]
    22b2:	685b      	ldr	r3, [r3, #4]
    22b4:	4a2a      	ldr	r2, [pc, #168]	; (2360 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    22b6:	4293      	cmp	r3, r2
    22b8:	d208      	bcs.n	22cc <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    22ba:	4b27      	ldr	r3, [pc, #156]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22c0:	4a25      	ldr	r2, [pc, #148]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22c2:	f043 0320 	orr.w	r3, r3, #32
    22c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22ca:	e007      	b.n	22dc <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    22cc:	4b22      	ldr	r3, [pc, #136]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22d2:	4a21      	ldr	r2, [pc, #132]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    22d8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	7b1b      	ldrb	r3, [r3, #12]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d108      	bne.n	22f6 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    22e4:	4b1c      	ldr	r3, [pc, #112]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22ea:	4a1b      	ldr	r2, [pc, #108]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ec:	f043 0304 	orr.w	r3, r3, #4
    22f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22f4:	e007      	b.n	2306 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    22f6:	4b18      	ldr	r3, [pc, #96]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22fc:	4a16      	ldr	r2, [pc, #88]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22fe:	f023 0304 	bic.w	r3, r3, #4
    2302:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2306:	9b01      	ldr	r3, [sp, #4]
    2308:	7c1b      	ldrb	r3, [r3, #16]
    230a:	2b02      	cmp	r3, #2
    230c:	d011      	beq.n	2332 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    230e:	2b02      	cmp	r3, #2
    2310:	dc14      	bgt.n	233c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2312:	2b00      	cmp	r3, #0
    2314:	d002      	beq.n	231c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2316:	2b01      	cmp	r3, #1
    2318:	d005      	beq.n	2326 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    231a:	e00f      	b.n	233c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    231c:	4b0e      	ldr	r3, [pc, #56]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    231e:	2201      	movs	r2, #1
    2320:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2324:	e014      	b.n	2350 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2326:	4b0c      	ldr	r3, [pc, #48]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2328:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    232c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2330:	e00e      	b.n	2350 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2332:	4b09      	ldr	r3, [pc, #36]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2334:	4a0b      	ldr	r2, [pc, #44]	; (2364 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    233a:	e009      	b.n	2350 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    233c:	4b06      	ldr	r3, [pc, #24]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    233e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2342:	4a05      	ldr	r2, [pc, #20]	; (2358 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2344:	f043 0301 	orr.w	r3, r3, #1
    2348:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    234c:	e000      	b.n	2350 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    234e:	bf00      	nop
}
    2350:	bf00      	nop
    2352:	b002      	add	sp, #8
    2354:	4770      	bx	lr
    2356:	bf00      	nop
    2358:	40064000 	.word	0x40064000
    235c:	003d08ff 	.word	0x003d08ff
    2360:	007a1200 	.word	0x007a1200
    2364:	00030001 	.word	0x00030001

00002368 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2368:	b082      	sub	sp, #8
    236a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    236c:	4b05      	ldr	r3, [pc, #20]	; (2384 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    236e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2372:	4a04      	ldr	r2, [pc, #16]	; (2384 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2374:	f023 0301 	bic.w	r3, r3, #1
    2378:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    237c:	bf00      	nop
    237e:	b002      	add	sp, #8
    2380:	4770      	bx	lr
    2382:	bf00      	nop
    2384:	40064000 	.word	0x40064000

00002388 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2388:	b082      	sub	sp, #8
    238a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	891b      	ldrh	r3, [r3, #8]
    2390:	2b01      	cmp	r3, #1
    2392:	d107      	bne.n	23a4 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2394:	4b05      	ldr	r3, [pc, #20]	; (23ac <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2396:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    239a:	4a04      	ldr	r2, [pc, #16]	; (23ac <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    239c:	f043 0301 	orr.w	r3, r3, #1
    23a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    23a4:	bf00      	nop
    23a6:	b002      	add	sp, #8
    23a8:	4770      	bx	lr
    23aa:	bf00      	nop
    23ac:	40064000 	.word	0x40064000

000023b0 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    23b0:	b082      	sub	sp, #8
    23b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    23b4:	bf00      	nop
    23b6:	b002      	add	sp, #8
    23b8:	4770      	bx	lr

000023ba <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    23ba:	b082      	sub	sp, #8
    23bc:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    23be:	2300      	movs	r3, #0
}
    23c0:	4618      	mov	r0, r3
    23c2:	b002      	add	sp, #8
    23c4:	4770      	bx	lr

000023c6 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    23c6:	b082      	sub	sp, #8
    23c8:	9001      	str	r0, [sp, #4]
    23ca:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    23cc:	bf00      	nop
    23ce:	b002      	add	sp, #8
    23d0:	4770      	bx	lr
	...

000023d4 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    23d4:	b082      	sub	sp, #8
    23d6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    23d8:	bf00      	nop
    23da:	b002      	add	sp, #8
    23dc:	4770      	bx	lr

000023de <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    23de:	b082      	sub	sp, #8
    23e0:	9001      	str	r0, [sp, #4]
    23e2:	460b      	mov	r3, r1
    23e4:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    23e8:	bf00      	nop
    23ea:	b002      	add	sp, #8
    23ec:	4770      	bx	lr

000023ee <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    23ee:	b500      	push	{lr}
    23f0:	b083      	sub	sp, #12
    23f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23f4:	9b01      	ldr	r3, [sp, #4]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d002      	beq.n	2400 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    23fa:	9801      	ldr	r0, [sp, #4]
    23fc:	f000 f8e7 	bl	25ce <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2400:	bf00      	nop
    2402:	b003      	add	sp, #12
    2404:	f85d fb04 	ldr.w	pc, [sp], #4

00002408 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2408:	b500      	push	{lr}
    240a:	b085      	sub	sp, #20
    240c:	9001      	str	r0, [sp, #4]
    240e:	460b      	mov	r3, r1
    2410:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2414:	9b01      	ldr	r3, [sp, #4]
    2416:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2418:	f89d 3003 	ldrb.w	r3, [sp, #3]
    241c:	2b00      	cmp	r3, #0
    241e:	d003      	beq.n	2428 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2420:	2300      	movs	r3, #0
    2422:	f8ad 300c 	strh.w	r3, [sp, #12]
    2426:	e002      	b.n	242e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2428:	2301      	movs	r3, #1
    242a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    242e:	ab02      	add	r3, sp, #8
    2430:	4618      	mov	r0, r3
    2432:	f7ff ffdc 	bl	23ee <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2436:	bf00      	nop
    2438:	b005      	add	sp, #20
    243a:	f85d fb04 	ldr.w	pc, [sp], #4

0000243e <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    243e:	b500      	push	{lr}
    2440:	b083      	sub	sp, #12
    2442:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2444:	9b01      	ldr	r3, [sp, #4]
    2446:	2b00      	cmp	r3, #0
    2448:	d002      	beq.n	2450 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    244a:	9801      	ldr	r0, [sp, #4]
    244c:	f000 f8d6 	bl	25fc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2450:	bf00      	nop
    2452:	b003      	add	sp, #12
    2454:	f85d fb04 	ldr.w	pc, [sp], #4

00002458 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2458:	b500      	push	{lr}
    245a:	b085      	sub	sp, #20
    245c:	9001      	str	r0, [sp, #4]
    245e:	460b      	mov	r3, r1
    2460:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2464:	9b01      	ldr	r3, [sp, #4]
    2466:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2468:	f89d 3003 	ldrb.w	r3, [sp, #3]
    246c:	2b00      	cmp	r3, #0
    246e:	d003      	beq.n	2478 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2470:	2300      	movs	r3, #0
    2472:	f8ad 300c 	strh.w	r3, [sp, #12]
    2476:	e002      	b.n	247e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2478:	2301      	movs	r3, #1
    247a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    247e:	ab02      	add	r3, sp, #8
    2480:	4618      	mov	r0, r3
    2482:	f7ff ffdc 	bl	243e <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2486:	bf00      	nop
    2488:	b005      	add	sp, #20
    248a:	f85d fb04 	ldr.w	pc, [sp], #4

0000248e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    248e:	b500      	push	{lr}
    2490:	b083      	sub	sp, #12
    2492:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2494:	9b01      	ldr	r3, [sp, #4]
    2496:	2b00      	cmp	r3, #0
    2498:	d002      	beq.n	24a0 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    249a:	9801      	ldr	r0, [sp, #4]
    249c:	f000 f8c6 	bl	262c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24a0:	bf00      	nop
    24a2:	b003      	add	sp, #12
    24a4:	f85d fb04 	ldr.w	pc, [sp], #4

000024a8 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    24a8:	b500      	push	{lr}
    24aa:	b085      	sub	sp, #20
    24ac:	9001      	str	r0, [sp, #4]
    24ae:	460b      	mov	r3, r1
    24b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24bc:	2b00      	cmp	r3, #0
    24be:	d003      	beq.n	24c8 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    24c0:	2300      	movs	r3, #0
    24c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    24c6:	e002      	b.n	24ce <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    24c8:	2301      	movs	r3, #1
    24ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    24ce:	ab02      	add	r3, sp, #8
    24d0:	4618      	mov	r0, r3
    24d2:	f7ff ffdc 	bl	248e <Clock_Ip_ClockSetSimClkoutEnable>
}
    24d6:	bf00      	nop
    24d8:	b005      	add	sp, #20
    24da:	f85d fb04 	ldr.w	pc, [sp], #4

000024de <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    24de:	b500      	push	{lr}
    24e0:	b083      	sub	sp, #12
    24e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24e4:	9b01      	ldr	r3, [sp, #4]
    24e6:	2b00      	cmp	r3, #0
    24e8:	d002      	beq.n	24f0 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    24ea:	9801      	ldr	r0, [sp, #4]
    24ec:	f000 f8b6 	bl	265c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24f0:	bf00      	nop
    24f2:	b003      	add	sp, #12
    24f4:	f85d fb04 	ldr.w	pc, [sp], #4

000024f8 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    24f8:	b500      	push	{lr}
    24fa:	b085      	sub	sp, #20
    24fc:	9001      	str	r0, [sp, #4]
    24fe:	460b      	mov	r3, r1
    2500:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2504:	9b01      	ldr	r3, [sp, #4]
    2506:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2508:	f89d 3003 	ldrb.w	r3, [sp, #3]
    250c:	2b00      	cmp	r3, #0
    250e:	d003      	beq.n	2518 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2510:	2300      	movs	r3, #0
    2512:	f8ad 300c 	strh.w	r3, [sp, #12]
    2516:	e002      	b.n	251e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2518:	2301      	movs	r3, #1
    251a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    251e:	ab02      	add	r3, sp, #8
    2520:	4618      	mov	r0, r3
    2522:	f7ff ffdc 	bl	24de <Clock_Ip_ClockSetPccCgcEnable>
}
    2526:	bf00      	nop
    2528:	b005      	add	sp, #20
    252a:	f85d fb04 	ldr.w	pc, [sp], #4

0000252e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    252e:	b500      	push	{lr}
    2530:	b083      	sub	sp, #12
    2532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2534:	9b01      	ldr	r3, [sp, #4]
    2536:	2b00      	cmp	r3, #0
    2538:	d002      	beq.n	2540 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    253a:	9801      	ldr	r0, [sp, #4]
    253c:	f000 f8bc 	bl	26b8 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2540:	bf00      	nop
    2542:	b003      	add	sp, #12
    2544:	f85d fb04 	ldr.w	pc, [sp], #4

00002548 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2548:	b500      	push	{lr}
    254a:	b085      	sub	sp, #20
    254c:	9001      	str	r0, [sp, #4]
    254e:	460b      	mov	r3, r1
    2550:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2554:	9b01      	ldr	r3, [sp, #4]
    2556:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2558:	f89d 3003 	ldrb.w	r3, [sp, #3]
    255c:	2b00      	cmp	r3, #0
    255e:	d003      	beq.n	2568 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2560:	2300      	movs	r3, #0
    2562:	f8ad 300c 	strh.w	r3, [sp, #12]
    2566:	e002      	b.n	256e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2568:	2301      	movs	r3, #1
    256a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    256e:	ab02      	add	r3, sp, #8
    2570:	4618      	mov	r0, r3
    2572:	f7ff ffdc 	bl	252e <Clock_Ip_ClockSetSimGate>
}
    2576:	bf00      	nop
    2578:	b005      	add	sp, #20
    257a:	f85d fb04 	ldr.w	pc, [sp], #4

0000257e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    257e:	b500      	push	{lr}
    2580:	b083      	sub	sp, #12
    2582:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2584:	9b01      	ldr	r3, [sp, #4]
    2586:	2b00      	cmp	r3, #0
    2588:	d002      	beq.n	2590 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    258a:	9801      	ldr	r0, [sp, #4]
    258c:	f000 f8c0 	bl	2710 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2590:	bf00      	nop
    2592:	b003      	add	sp, #12
    2594:	f85d fb04 	ldr.w	pc, [sp], #4

00002598 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2598:	b500      	push	{lr}
    259a:	b085      	sub	sp, #20
    259c:	9001      	str	r0, [sp, #4]
    259e:	460b      	mov	r3, r1
    25a0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    25a4:	9b01      	ldr	r3, [sp, #4]
    25a6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    25a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d003      	beq.n	25b8 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    25b0:	2300      	movs	r3, #0
    25b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    25b6:	e002      	b.n	25be <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    25b8:	2301      	movs	r3, #1
    25ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    25be:	ab02      	add	r3, sp, #8
    25c0:	4618      	mov	r0, r3
    25c2:	f7ff ffdc 	bl	257e <Clock_Ip_ClockSetSimTraceEnable>
}
    25c6:	bf00      	nop
    25c8:	b005      	add	sp, #20
    25ca:	f85d fb04 	ldr.w	pc, [sp], #4

000025ce <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25ce:	b084      	sub	sp, #16
    25d0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    25d2:	4b09      	ldr	r3, [pc, #36]	; (25f8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    25d4:	691b      	ldr	r3, [r3, #16]
    25d6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    25d8:	9b03      	ldr	r3, [sp, #12]
    25da:	f023 0301 	bic.w	r3, r3, #1
    25de:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    25e0:	9b01      	ldr	r3, [sp, #4]
    25e2:	889b      	ldrh	r3, [r3, #4]
    25e4:	461a      	mov	r2, r3
    25e6:	9b03      	ldr	r3, [sp, #12]
    25e8:	4313      	orrs	r3, r2
    25ea:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    25ec:	4a02      	ldr	r2, [pc, #8]	; (25f8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    25ee:	9b03      	ldr	r3, [sp, #12]
    25f0:	6113      	str	r3, [r2, #16]
}
    25f2:	bf00      	nop
    25f4:	b004      	add	sp, #16
    25f6:	4770      	bx	lr
    25f8:	40048000 	.word	0x40048000

000025fc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    25fc:	b084      	sub	sp, #16
    25fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2600:	4b09      	ldr	r3, [pc, #36]	; (2628 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2602:	691b      	ldr	r3, [r3, #16]
    2604:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2606:	9b03      	ldr	r3, [sp, #12]
    2608:	f023 0302 	bic.w	r3, r3, #2
    260c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    260e:	9b01      	ldr	r3, [sp, #4]
    2610:	889b      	ldrh	r3, [r3, #4]
    2612:	005b      	lsls	r3, r3, #1
    2614:	9a03      	ldr	r2, [sp, #12]
    2616:	4313      	orrs	r3, r2
    2618:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    261a:	4a03      	ldr	r2, [pc, #12]	; (2628 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    261c:	9b03      	ldr	r3, [sp, #12]
    261e:	6113      	str	r3, [r2, #16]
}
    2620:	bf00      	nop
    2622:	b004      	add	sp, #16
    2624:	4770      	bx	lr
    2626:	bf00      	nop
    2628:	40048000 	.word	0x40048000

0000262c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    262c:	b084      	sub	sp, #16
    262e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2630:	4b09      	ldr	r3, [pc, #36]	; (2658 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2632:	685b      	ldr	r3, [r3, #4]
    2634:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    263c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	889b      	ldrh	r3, [r3, #4]
    2642:	02db      	lsls	r3, r3, #11
    2644:	9a03      	ldr	r2, [sp, #12]
    2646:	4313      	orrs	r3, r2
    2648:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    264a:	4a03      	ldr	r2, [pc, #12]	; (2658 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    264c:	9b03      	ldr	r3, [sp, #12]
    264e:	6053      	str	r3, [r2, #4]
}
    2650:	bf00      	nop
    2652:	b004      	add	sp, #16
    2654:	4770      	bx	lr
    2656:	bf00      	nop
    2658:	40048000 	.word	0x40048000

0000265c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    265c:	b084      	sub	sp, #16
    265e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2660:	4913      	ldr	r1, [pc, #76]	; (26b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	681a      	ldr	r2, [r3, #0]
    2666:	4813      	ldr	r0, [pc, #76]	; (26b4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2668:	4613      	mov	r3, r2
    266a:	00db      	lsls	r3, r3, #3
    266c:	4413      	add	r3, r2
    266e:	4403      	add	r3, r0
    2670:	3306      	adds	r3, #6
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2678:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    267a:	9b03      	ldr	r3, [sp, #12]
    267c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2680:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2682:	9b01      	ldr	r3, [sp, #4]
    2684:	889b      	ldrh	r3, [r3, #4]
    2686:	079b      	lsls	r3, r3, #30
    2688:	9a03      	ldr	r2, [sp, #12]
    268a:	4313      	orrs	r3, r2
    268c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    268e:	4908      	ldr	r1, [pc, #32]	; (26b0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2690:	9b01      	ldr	r3, [sp, #4]
    2692:	681a      	ldr	r2, [r3, #0]
    2694:	4807      	ldr	r0, [pc, #28]	; (26b4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2696:	4613      	mov	r3, r2
    2698:	00db      	lsls	r3, r3, #3
    269a:	4413      	add	r3, r2
    269c:	4403      	add	r3, r0
    269e:	3306      	adds	r3, #6
    26a0:	781b      	ldrb	r3, [r3, #0]
    26a2:	461a      	mov	r2, r3
    26a4:	9b03      	ldr	r3, [sp, #12]
    26a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    26aa:	bf00      	nop
    26ac:	b004      	add	sp, #16
    26ae:	4770      	bx	lr
    26b0:	40065000 	.word	0x40065000
    26b4:	000071c4 	.word	0x000071c4

000026b8 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    26b8:	b086      	sub	sp, #24
    26ba:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    26bc:	9b01      	ldr	r3, [sp, #4]
    26be:	889b      	ldrh	r3, [r3, #4]
    26c0:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    26c2:	9b01      	ldr	r3, [sp, #4]
    26c4:	681a      	ldr	r2, [r3, #0]
    26c6:	4910      	ldr	r1, [pc, #64]	; (2708 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    26c8:	4613      	mov	r3, r2
    26ca:	00db      	lsls	r3, r3, #3
    26cc:	4413      	add	r3, r2
    26ce:	440b      	add	r3, r1
    26d0:	3306      	adds	r3, #6
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    26d6:	4b0d      	ldr	r3, [pc, #52]	; (270c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26da:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    26dc:	2201      	movs	r2, #1
    26de:	9b04      	ldr	r3, [sp, #16]
    26e0:	fa02 f303 	lsl.w	r3, r2, r3
    26e4:	43db      	mvns	r3, r3
    26e6:	9a03      	ldr	r2, [sp, #12]
    26e8:	4013      	ands	r3, r2
    26ea:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    26ec:	9a05      	ldr	r2, [sp, #20]
    26ee:	9b04      	ldr	r3, [sp, #16]
    26f0:	fa02 f303 	lsl.w	r3, r2, r3
    26f4:	9a03      	ldr	r2, [sp, #12]
    26f6:	4313      	orrs	r3, r2
    26f8:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    26fa:	4a04      	ldr	r2, [pc, #16]	; (270c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26fc:	9b03      	ldr	r3, [sp, #12]
    26fe:	6413      	str	r3, [r2, #64]	; 0x40
}
    2700:	bf00      	nop
    2702:	b006      	add	sp, #24
    2704:	4770      	bx	lr
    2706:	bf00      	nop
    2708:	000071c4 	.word	0x000071c4
    270c:	40048000 	.word	0x40048000

00002710 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2710:	b084      	sub	sp, #16
    2712:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2714:	4b0a      	ldr	r3, [pc, #40]	; (2740 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2718:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    271a:	9b01      	ldr	r3, [sp, #4]
    271c:	889b      	ldrh	r3, [r3, #4]
    271e:	2b01      	cmp	r3, #1
    2720:	d104      	bne.n	272c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2728:	9303      	str	r3, [sp, #12]
    272a:	e003      	b.n	2734 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    272c:	9b03      	ldr	r3, [sp, #12]
    272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2732:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2734:	4a02      	ldr	r2, [pc, #8]	; (2740 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2736:	9b03      	ldr	r3, [sp, #12]
    2738:	6693      	str	r3, [r2, #104]	; 0x68
}
    273a:	bf00      	nop
    273c:	b004      	add	sp, #16
    273e:	4770      	bx	lr
    2740:	40048000 	.word	0x40048000

00002744 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2744:	b082      	sub	sp, #8
    2746:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2748:	bf00      	nop
    274a:	b002      	add	sp, #8
    274c:	4770      	bx	lr

0000274e <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    274e:	b082      	sub	sp, #8
    2750:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2752:	bf00      	nop
    2754:	b002      	add	sp, #8
    2756:	4770      	bx	lr

00002758 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2758:	b500      	push	{lr}
    275a:	b083      	sub	sp, #12
    275c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    275e:	9b01      	ldr	r3, [sp, #4]
    2760:	2b00      	cmp	r3, #0
    2762:	d002      	beq.n	276a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2764:	9801      	ldr	r0, [sp, #4]
    2766:	f000 f8d1 	bl	290c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    276a:	bf00      	nop
    276c:	b003      	add	sp, #12
    276e:	f85d fb04 	ldr.w	pc, [sp], #4

00002772 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2772:	b500      	push	{lr}
    2774:	b083      	sub	sp, #12
    2776:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	2b00      	cmp	r3, #0
    277c:	d002      	beq.n	2784 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    277e:	9801      	ldr	r0, [sp, #4]
    2780:	f000 f950 	bl	2a24 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2784:	bf00      	nop
    2786:	b003      	add	sp, #12
    2788:	f85d fb04 	ldr.w	pc, [sp], #4

0000278c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    278c:	b500      	push	{lr}
    278e:	b083      	sub	sp, #12
    2790:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2792:	9801      	ldr	r0, [sp, #4]
    2794:	f000 f98e 	bl	2ab4 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2798:	bf00      	nop
    279a:	b003      	add	sp, #12
    279c:	f85d fb04 	ldr.w	pc, [sp], #4

000027a0 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    27a0:	b500      	push	{lr}
    27a2:	b083      	sub	sp, #12
    27a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27a6:	9b01      	ldr	r3, [sp, #4]
    27a8:	2b00      	cmp	r3, #0
    27aa:	d002      	beq.n	27b2 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    27ac:	9801      	ldr	r0, [sp, #4]
    27ae:	f000 f999 	bl	2ae4 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27b2:	bf00      	nop
    27b4:	b003      	add	sp, #12
    27b6:	f85d fb04 	ldr.w	pc, [sp], #4

000027ba <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    27ba:	b500      	push	{lr}
    27bc:	b083      	sub	sp, #12
    27be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27c0:	9b01      	ldr	r3, [sp, #4]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d002      	beq.n	27cc <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    27c6:	9801      	ldr	r0, [sp, #4]
    27c8:	f000 f9b0 	bl	2b2c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27cc:	bf00      	nop
    27ce:	b003      	add	sp, #12
    27d0:	f85d fb04 	ldr.w	pc, [sp], #4

000027d4 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    27d4:	b500      	push	{lr}
    27d6:	b083      	sub	sp, #12
    27d8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    27da:	9801      	ldr	r0, [sp, #4]
    27dc:	f000 f9ba 	bl	2b54 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27e0:	bf00      	nop
    27e2:	b003      	add	sp, #12
    27e4:	f85d fb04 	ldr.w	pc, [sp], #4

000027e8 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    27e8:	b500      	push	{lr}
    27ea:	b083      	sub	sp, #12
    27ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ee:	9b01      	ldr	r3, [sp, #4]
    27f0:	2b00      	cmp	r3, #0
    27f2:	d002      	beq.n	27fa <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    27f4:	9801      	ldr	r0, [sp, #4]
    27f6:	f000 f9bd 	bl	2b74 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27fa:	bf00      	nop
    27fc:	b003      	add	sp, #12
    27fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002802 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2802:	b500      	push	{lr}
    2804:	b083      	sub	sp, #12
    2806:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2808:	9b01      	ldr	r3, [sp, #4]
    280a:	2b00      	cmp	r3, #0
    280c:	d002      	beq.n	2814 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    280e:	9801      	ldr	r0, [sp, #4]
    2810:	f000 f9d4 	bl	2bbc <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2814:	bf00      	nop
    2816:	b003      	add	sp, #12
    2818:	f85d fb04 	ldr.w	pc, [sp], #4

0000281c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    281c:	b500      	push	{lr}
    281e:	b083      	sub	sp, #12
    2820:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2822:	9801      	ldr	r0, [sp, #4]
    2824:	f000 f9de 	bl	2be4 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2828:	bf00      	nop
    282a:	b003      	add	sp, #12
    282c:	f85d fb04 	ldr.w	pc, [sp], #4

00002830 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2830:	b500      	push	{lr}
    2832:	b089      	sub	sp, #36	; 0x24
    2834:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2836:	2300      	movs	r3, #0
    2838:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    283c:	4b20      	ldr	r3, [pc, #128]	; (28c0 <SetInputSouceSytemClock+0x90>)
    283e:	695b      	ldr	r3, [r3, #20]
    2840:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2842:	9b06      	ldr	r3, [sp, #24]
    2844:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2848:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    284a:	9b01      	ldr	r3, [sp, #4]
    284c:	061b      	lsls	r3, r3, #24
    284e:	9a06      	ldr	r2, [sp, #24]
    2850:	4313      	orrs	r3, r2
    2852:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2854:	4a1a      	ldr	r2, [pc, #104]	; (28c0 <SetInputSouceSytemClock+0x90>)
    2856:	9b06      	ldr	r3, [sp, #24]
    2858:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    285a:	aa02      	add	r2, sp, #8
    285c:	a903      	add	r1, sp, #12
    285e:	a804      	add	r0, sp, #16
    2860:	f24c 3350 	movw	r3, #50000	; 0xc350
    2864:	f7ff f9ac 	bl	1bc0 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2868:	4b15      	ldr	r3, [pc, #84]	; (28c0 <SetInputSouceSytemClock+0x90>)
    286a:	691b      	ldr	r3, [r3, #16]
    286c:	0e1b      	lsrs	r3, r3, #24
    286e:	f003 030f 	and.w	r3, r3, #15
    2872:	9a01      	ldr	r2, [sp, #4]
    2874:	429a      	cmp	r2, r3
    2876:	bf0c      	ite	eq
    2878:	2301      	moveq	r3, #1
    287a:	2300      	movne	r3, #0
    287c:	b2db      	uxtb	r3, r3
    287e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2880:	9a02      	ldr	r2, [sp, #8]
    2882:	a903      	add	r1, sp, #12
    2884:	ab04      	add	r3, sp, #16
    2886:	4618      	mov	r0, r3
    2888:	f7ff f9b4 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    288c:	4603      	mov	r3, r0
    288e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2892:	9b05      	ldr	r3, [sp, #20]
    2894:	2b00      	cmp	r3, #0
    2896:	d106      	bne.n	28a6 <SetInputSouceSytemClock+0x76>
    2898:	f89d 301f 	ldrb.w	r3, [sp, #31]
    289c:	f083 0301 	eor.w	r3, r3, #1
    28a0:	b2db      	uxtb	r3, r3
    28a2:	2b00      	cmp	r3, #0
    28a4:	d1e0      	bne.n	2868 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    28a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d003      	beq.n	28b6 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    28ae:	2105      	movs	r1, #5
    28b0:	2001      	movs	r0, #1
    28b2:	f7ff f975 	bl	1ba0 <Clock_Ip_ReportClockErrors>
    }
}
    28b6:	bf00      	nop
    28b8:	b009      	add	sp, #36	; 0x24
    28ba:	f85d fb04 	ldr.w	pc, [sp], #4
    28be:	bf00      	nop
    28c0:	40064000 	.word	0x40064000

000028c4 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    28c4:	b500      	push	{lr}
    28c6:	b083      	sub	sp, #12
    28c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28ca:	9b01      	ldr	r3, [sp, #4]
    28cc:	2b00      	cmp	r3, #0
    28ce:	d002      	beq.n	28d6 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    28d0:	9801      	ldr	r0, [sp, #4]
    28d2:	f000 f997 	bl	2c04 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28d6:	bf00      	nop
    28d8:	b003      	add	sp, #12
    28da:	f85d fb04 	ldr.w	pc, [sp], #4

000028de <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    28de:	b500      	push	{lr}
    28e0:	b083      	sub	sp, #12
    28e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28e4:	9b01      	ldr	r3, [sp, #4]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d002      	beq.n	28f0 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    28ea:	9801      	ldr	r0, [sp, #4]
    28ec:	f000 fa7e 	bl	2dec <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28f0:	bf00      	nop
    28f2:	b003      	add	sp, #12
    28f4:	f85d fb04 	ldr.w	pc, [sp], #4

000028f8 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    28f8:	b500      	push	{lr}
    28fa:	b083      	sub	sp, #12
    28fc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    28fe:	9801      	ldr	r0, [sp, #4]
    2900:	f000 fab8 	bl	2e74 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2904:	bf00      	nop
    2906:	b003      	add	sp, #12
    2908:	f85d fb04 	ldr.w	pc, [sp], #4

0000290c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    290c:	b500      	push	{lr}
    290e:	b08b      	sub	sp, #44	; 0x2c
    2910:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2912:	2300      	movs	r3, #0
    2914:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2918:	9b01      	ldr	r3, [sp, #4]
    291a:	2b00      	cmp	r3, #0
    291c:	d10b      	bne.n	2936 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    291e:	2305      	movs	r3, #5
    2920:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2922:	2301      	movs	r3, #1
    2924:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2928:	2301      	movs	r3, #1
    292a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    292e:	2301      	movs	r3, #1
    2930:	f88d 3010 	strb.w	r3, [sp, #16]
    2934:	e00e      	b.n	2954 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2936:	9b01      	ldr	r3, [sp, #4]
    2938:	681b      	ldr	r3, [r3, #0]
    293a:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    293c:	9b01      	ldr	r3, [sp, #4]
    293e:	79db      	ldrb	r3, [r3, #7]
    2940:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2944:	9b01      	ldr	r3, [sp, #4]
    2946:	889b      	ldrh	r3, [r3, #4]
    2948:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    294c:	9b01      	ldr	r3, [sp, #4]
    294e:	7a1b      	ldrb	r3, [r3, #8]
    2950:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2954:	4b32      	ldr	r3, [pc, #200]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    295a:	4a31      	ldr	r2, [pc, #196]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    295c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2960:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2964:	4b2e      	ldr	r3, [pc, #184]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    296a:	4a2d      	ldr	r2, [pc, #180]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    296c:	f023 0301 	bic.w	r3, r3, #1
    2970:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2974:	4b2a      	ldr	r3, [pc, #168]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    297a:	4a29      	ldr	r2, [pc, #164]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    297c:	f023 0304 	bic.w	r3, r3, #4
    2980:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2984:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2988:	2b01      	cmp	r3, #1
    298a:	d144      	bne.n	2a16 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    298c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2990:	4a23      	ldr	r2, [pc, #140]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2992:	f003 0301 	and.w	r3, r3, #1
    2996:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    299a:	4b21      	ldr	r3, [pc, #132]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    299c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29a0:	4a1f      	ldr	r2, [pc, #124]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29a2:	f043 0301 	orr.w	r3, r3, #1
    29a6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    29aa:	4b1d      	ldr	r3, [pc, #116]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    29b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    29b4:	009b      	lsls	r3, r3, #2
    29b6:	f003 0304 	and.w	r3, r3, #4
    29ba:	4919      	ldr	r1, [pc, #100]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29bc:	4313      	orrs	r3, r2
    29be:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    29c2:	aa05      	add	r2, sp, #20
    29c4:	a906      	add	r1, sp, #24
    29c6:	a807      	add	r0, sp, #28
    29c8:	f24c 3350 	movw	r3, #50000	; 0xc350
    29cc:	f7ff f8f8 	bl	1bc0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    29d0:	4b13      	ldr	r3, [pc, #76]	; (2a20 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29d6:	0e1b      	lsrs	r3, r3, #24
    29d8:	f003 0301 	and.w	r3, r3, #1
    29dc:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    29de:	9a05      	ldr	r2, [sp, #20]
    29e0:	a906      	add	r1, sp, #24
    29e2:	ab07      	add	r3, sp, #28
    29e4:	4618      	mov	r0, r3
    29e6:	f7ff f905 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    29ea:	4603      	mov	r3, r0
    29ec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    29f0:	9b08      	ldr	r3, [sp, #32]
    29f2:	2b00      	cmp	r3, #0
    29f4:	d106      	bne.n	2a04 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    29f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29fa:	f083 0301 	eor.w	r3, r3, #1
    29fe:	b2db      	uxtb	r3, r3
    2a00:	2b00      	cmp	r3, #0
    2a02:	d1e5      	bne.n	29d0 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2a04:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d004      	beq.n	2a16 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2a0c:	9b02      	ldr	r3, [sp, #8]
    2a0e:	4619      	mov	r1, r3
    2a10:	2001      	movs	r0, #1
    2a12:	f7ff f8c5 	bl	1ba0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2a16:	bf00      	nop
    2a18:	b00b      	add	sp, #44	; 0x2c
    2a1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a1e:	bf00      	nop
    2a20:	40064000 	.word	0x40064000

00002a24 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2a24:	b500      	push	{lr}
    2a26:	b089      	sub	sp, #36	; 0x24
    2a28:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2a2a:	2300      	movs	r3, #0
    2a2c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2a30:	4b1f      	ldr	r3, [pc, #124]	; (2ab0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a36:	4a1e      	ldr	r2, [pc, #120]	; (2ab0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a38:	f043 0301 	orr.w	r3, r3, #1
    2a3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2a40:	4b1b      	ldr	r3, [pc, #108]	; (2ab0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a46:	4a1a      	ldr	r2, [pc, #104]	; (2ab0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a48:	f043 0304 	orr.w	r3, r3, #4
    2a4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2a50:	aa03      	add	r2, sp, #12
    2a52:	a904      	add	r1, sp, #16
    2a54:	a805      	add	r0, sp, #20
    2a56:	f24c 3350 	movw	r3, #50000	; 0xc350
    2a5a:	f7ff f8b1 	bl	1bc0 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2a5e:	4b14      	ldr	r3, [pc, #80]	; (2ab0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a64:	0e1b      	lsrs	r3, r3, #24
    2a66:	f003 0301 	and.w	r3, r3, #1
    2a6a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2a6c:	9a03      	ldr	r2, [sp, #12]
    2a6e:	a904      	add	r1, sp, #16
    2a70:	ab05      	add	r3, sp, #20
    2a72:	4618      	mov	r0, r3
    2a74:	f7ff f8be 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    2a78:	4603      	mov	r3, r0
    2a7a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2a7e:	9b06      	ldr	r3, [sp, #24]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d106      	bne.n	2a92 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2a84:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a88:	f083 0301 	eor.w	r3, r3, #1
    2a8c:	b2db      	uxtb	r3, r3
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d1e5      	bne.n	2a5e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2a92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d005      	beq.n	2aa6 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2a9a:	9b01      	ldr	r3, [sp, #4]
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	4619      	mov	r1, r3
    2aa0:	2001      	movs	r0, #1
    2aa2:	f7ff f87d 	bl	1ba0 <Clock_Ip_ReportClockErrors>
    }
}
    2aa6:	bf00      	nop
    2aa8:	b009      	add	sp, #36	; 0x24
    2aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    2aae:	bf00      	nop
    2ab0:	40064000 	.word	0x40064000

00002ab4 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2ab4:	b082      	sub	sp, #8
    2ab6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2aba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2abe:	4a08      	ldr	r2, [pc, #32]	; (2ae0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2ac0:	f023 0301 	bic.w	r3, r3, #1
    2ac4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ace:	4a04      	ldr	r2, [pc, #16]	; (2ae0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2ad0:	f023 0304 	bic.w	r3, r3, #4
    2ad4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2ad8:	bf00      	nop
    2ada:	b002      	add	sp, #8
    2adc:	4770      	bx	lr
    2ade:	bf00      	nop
    2ae0:	40064000 	.word	0x40064000

00002ae4 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ae4:	b082      	sub	sp, #8
    2ae6:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ae8:	4b0f      	ldr	r3, [pc, #60]	; (2b28 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aee:	4a0e      	ldr	r2, [pc, #56]	; (2b28 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2af0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2af4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2af8:	4b0b      	ldr	r3, [pc, #44]	; (2b28 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2afe:	4a0a      	ldr	r2, [pc, #40]	; (2b28 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b00:	f023 0304 	bic.w	r3, r3, #4
    2b04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2b08:	4b07      	ldr	r3, [pc, #28]	; (2b28 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b0e:	9b01      	ldr	r3, [sp, #4]
    2b10:	7a1b      	ldrb	r3, [r3, #8]
    2b12:	009b      	lsls	r3, r3, #2
    2b14:	f003 0304 	and.w	r3, r3, #4
    2b18:	4903      	ldr	r1, [pc, #12]	; (2b28 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b1a:	4313      	orrs	r3, r2
    2b1c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2b20:	bf00      	nop
    2b22:	b002      	add	sp, #8
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	40064000 	.word	0x40064000

00002b2c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b2c:	b082      	sub	sp, #8
    2b2e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2b30:	9b01      	ldr	r3, [sp, #4]
    2b32:	889b      	ldrh	r3, [r3, #4]
    2b34:	2b01      	cmp	r3, #1
    2b36:	d107      	bne.n	2b48 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2b38:	4b05      	ldr	r3, [pc, #20]	; (2b50 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b3e:	4a04      	ldr	r2, [pc, #16]	; (2b50 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b40:	f043 0304 	orr.w	r3, r3, #4
    2b44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2b48:	bf00      	nop
    2b4a:	b002      	add	sp, #8
    2b4c:	4770      	bx	lr
    2b4e:	bf00      	nop
    2b50:	40064000 	.word	0x40064000

00002b54 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2b54:	b082      	sub	sp, #8
    2b56:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2b58:	4b05      	ldr	r3, [pc, #20]	; (2b70 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b5e:	4a04      	ldr	r2, [pc, #16]	; (2b70 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b60:	f023 0304 	bic.w	r3, r3, #4
    2b64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b68:	bf00      	nop
    2b6a:	b002      	add	sp, #8
    2b6c:	4770      	bx	lr
    2b6e:	bf00      	nop
    2b70:	40064000 	.word	0x40064000

00002b74 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b74:	b082      	sub	sp, #8
    2b76:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2b78:	4b0f      	ldr	r3, [pc, #60]	; (2bb8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b7e:	4a0e      	ldr	r2, [pc, #56]	; (2bb8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2b88:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b8e:	4a0a      	ldr	r2, [pc, #40]	; (2bb8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b90:	f023 0302 	bic.w	r3, r3, #2
    2b94:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2b98:	4b07      	ldr	r3, [pc, #28]	; (2bb8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	7a5b      	ldrb	r3, [r3, #9]
    2ba2:	005b      	lsls	r3, r3, #1
    2ba4:	f003 0302 	and.w	r3, r3, #2
    2ba8:	4903      	ldr	r1, [pc, #12]	; (2bb8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2baa:	4313      	orrs	r3, r2
    2bac:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2bb0:	bf00      	nop
    2bb2:	b002      	add	sp, #8
    2bb4:	4770      	bx	lr
    2bb6:	bf00      	nop
    2bb8:	40064000 	.word	0x40064000

00002bbc <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2bbc:	b082      	sub	sp, #8
    2bbe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2bc0:	9b01      	ldr	r3, [sp, #4]
    2bc2:	889b      	ldrh	r3, [r3, #4]
    2bc4:	2b01      	cmp	r3, #1
    2bc6:	d107      	bne.n	2bd8 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2bc8:	4b05      	ldr	r3, [pc, #20]	; (2be0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2bce:	4a04      	ldr	r2, [pc, #16]	; (2be0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2bd0:	f043 0302 	orr.w	r3, r3, #2
    2bd4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2bd8:	bf00      	nop
    2bda:	b002      	add	sp, #8
    2bdc:	4770      	bx	lr
    2bde:	bf00      	nop
    2be0:	40064000 	.word	0x40064000

00002be4 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2be4:	b082      	sub	sp, #8
    2be6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2be8:	4b05      	ldr	r3, [pc, #20]	; (2c00 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2bee:	4a04      	ldr	r2, [pc, #16]	; (2c00 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2bf0:	f023 0302 	bic.w	r3, r3, #2
    2bf4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2bf8:	bf00      	nop
    2bfa:	b002      	add	sp, #8
    2bfc:	4770      	bx	lr
    2bfe:	bf00      	nop
    2c00:	40064000 	.word	0x40064000

00002c04 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2c04:	b500      	push	{lr}
    2c06:	b08b      	sub	sp, #44	; 0x2c
    2c08:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2c0a:	9b01      	ldr	r3, [sp, #4]
    2c0c:	681a      	ldr	r2, [r3, #0]
    2c0e:	4975      	ldr	r1, [pc, #468]	; (2de4 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2c10:	4613      	mov	r3, r2
    2c12:	00db      	lsls	r3, r3, #3
    2c14:	4413      	add	r3, r2
    2c16:	440b      	add	r3, r1
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    2c1c:	2300      	movs	r3, #0
    2c1e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    2c22:	2300      	movs	r3, #0
    2c24:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    2c28:	4b6f      	ldr	r3, [pc, #444]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c2e:	4a6e      	ldr	r2, [pc, #440]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2c34:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    2c38:	4b6b      	ldr	r3, [pc, #428]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2c42:	2b00      	cmp	r3, #0
    2c44:	d07d      	beq.n	2d42 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c46:	9b01      	ldr	r3, [sp, #4]
    2c48:	79db      	ldrb	r3, [r3, #7]
    2c4a:	461a      	mov	r2, r3
    2c4c:	4b66      	ldr	r3, [pc, #408]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c4e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2c52:	f003 0303 	and.w	r3, r3, #3
    2c56:	429a      	cmp	r2, r3
    2c58:	d10b      	bne.n	2c72 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    2c5a:	9b01      	ldr	r3, [sp, #4]
    2c5c:	799b      	ldrb	r3, [r3, #6]
    2c5e:	461a      	mov	r2, r3
    2c60:	4b61      	ldr	r3, [pc, #388]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c66:	08db      	lsrs	r3, r3, #3
    2c68:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2c6c:	429a      	cmp	r2, r3
    2c6e:	f000 80b4 	beq.w	2dda <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    2c72:	4b5d      	ldr	r3, [pc, #372]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c78:	f003 0301 	and.w	r3, r3, #1
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d105      	bne.n	2c8c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    2c80:	2301      	movs	r3, #1
    2c82:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    2c86:	2000      	movs	r0, #0
    2c88:	f7ff fd66 	bl	2758 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    2c8c:	2002      	movs	r0, #2
    2c8e:	f7ff fdcf 	bl	2830 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2c92:	4b55      	ldr	r3, [pc, #340]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c94:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c98:	4a53      	ldr	r2, [pc, #332]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c9a:	f023 0301 	bic.w	r3, r3, #1
    2c9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    2ca2:	9b01      	ldr	r3, [sp, #4]
    2ca4:	889b      	ldrh	r3, [r3, #4]
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	f040 8097 	bne.w	2dda <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2cac:	9b01      	ldr	r3, [sp, #4]
    2cae:	79db      	ldrb	r3, [r3, #7]
    2cb0:	4a4d      	ldr	r2, [pc, #308]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cb2:	f003 0303 	and.w	r3, r3, #3
    2cb6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2cba:	4b4b      	ldr	r3, [pc, #300]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cbc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2cc0:	9b01      	ldr	r3, [sp, #4]
    2cc2:	799b      	ldrb	r3, [r3, #6]
    2cc4:	00db      	lsls	r3, r3, #3
    2cc6:	f003 0308 	and.w	r3, r3, #8
    2cca:	4313      	orrs	r3, r2
    2ccc:	4a46      	ldr	r2, [pc, #280]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cce:	f043 0301 	orr.w	r3, r3, #1
    2cd2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2cd6:	aa03      	add	r2, sp, #12
    2cd8:	a904      	add	r1, sp, #16
    2cda:	a805      	add	r0, sp, #20
    2cdc:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ce0:	f7fe ff6e 	bl	1bc0 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2ce4:	4b40      	ldr	r3, [pc, #256]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2ce6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cea:	0e1b      	lsrs	r3, r3, #24
    2cec:	f003 0301 	and.w	r3, r3, #1
    2cf0:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2cf2:	9a03      	ldr	r2, [sp, #12]
    2cf4:	a904      	add	r1, sp, #16
    2cf6:	ab05      	add	r3, sp, #20
    2cf8:	4618      	mov	r0, r3
    2cfa:	f7fe ff7b 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    2cfe:	4603      	mov	r3, r0
    2d00:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2d04:	9b06      	ldr	r3, [sp, #24]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d106      	bne.n	2d18 <Clock_Ip_SetFirc_TrustedCall+0x114>
    2d0a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d0e:	f083 0301 	eor.w	r3, r3, #1
    2d12:	b2db      	uxtb	r3, r3
    2d14:	2b00      	cmp	r3, #0
    2d16:	d1e5      	bne.n	2ce4 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    2d18:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d005      	beq.n	2d2c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2d20:	9b01      	ldr	r3, [sp, #4]
    2d22:	681b      	ldr	r3, [r3, #0]
    2d24:	4619      	mov	r1, r3
    2d26:	2001      	movs	r0, #1
    2d28:	f7fe ff3a 	bl	1ba0 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    2d2c:	2003      	movs	r0, #3
    2d2e:	f7ff fd7f 	bl	2830 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    2d32:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2d36:	2b00      	cmp	r3, #0
    2d38:	d04f      	beq.n	2dda <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    2d3a:	2002      	movs	r0, #2
    2d3c:	f7ff fd26 	bl	278c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    2d40:	e04b      	b.n	2dda <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2d42:	4b29      	ldr	r3, [pc, #164]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d48:	4a27      	ldr	r2, [pc, #156]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d4a:	f023 0301 	bic.w	r3, r3, #1
    2d4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	889b      	ldrh	r3, [r3, #4]
    2d56:	2b01      	cmp	r3, #1
    2d58:	d13f      	bne.n	2dda <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2d5a:	9b01      	ldr	r3, [sp, #4]
    2d5c:	79db      	ldrb	r3, [r3, #7]
    2d5e:	4a22      	ldr	r2, [pc, #136]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d60:	f003 0303 	and.w	r3, r3, #3
    2d64:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2d68:	4b1f      	ldr	r3, [pc, #124]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d6a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d6e:	9b01      	ldr	r3, [sp, #4]
    2d70:	799b      	ldrb	r3, [r3, #6]
    2d72:	00db      	lsls	r3, r3, #3
    2d74:	f003 0308 	and.w	r3, r3, #8
    2d78:	4313      	orrs	r3, r2
    2d7a:	4a1b      	ldr	r2, [pc, #108]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d7c:	f043 0301 	orr.w	r3, r3, #1
    2d80:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2d84:	aa03      	add	r2, sp, #12
    2d86:	a904      	add	r1, sp, #16
    2d88:	a805      	add	r0, sp, #20
    2d8a:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d8e:	f7fe ff17 	bl	1bc0 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d92:	4b15      	ldr	r3, [pc, #84]	; (2de8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d94:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d98:	0e1b      	lsrs	r3, r3, #24
    2d9a:	f003 0301 	and.w	r3, r3, #1
    2d9e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2da0:	9a03      	ldr	r2, [sp, #12]
    2da2:	a904      	add	r1, sp, #16
    2da4:	ab05      	add	r3, sp, #20
    2da6:	4618      	mov	r0, r3
    2da8:	f7fe ff24 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    2dac:	4603      	mov	r3, r0
    2dae:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2db2:	9b06      	ldr	r3, [sp, #24]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d106      	bne.n	2dc6 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2db8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dbc:	f083 0301 	eor.w	r3, r3, #1
    2dc0:	b2db      	uxtb	r3, r3
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d1e5      	bne.n	2d92 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    2dc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d005      	beq.n	2dda <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	681b      	ldr	r3, [r3, #0]
    2dd2:	4619      	mov	r1, r3
    2dd4:	2001      	movs	r0, #1
    2dd6:	f7fe fee3 	bl	1ba0 <Clock_Ip_ReportClockErrors>
}
    2dda:	bf00      	nop
    2ddc:	b00b      	add	sp, #44	; 0x2c
    2dde:	f85d fb04 	ldr.w	pc, [sp], #4
    2de2:	bf00      	nop
    2de4:	000071c4 	.word	0x000071c4
    2de8:	40064000 	.word	0x40064000

00002dec <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2dec:	b500      	push	{lr}
    2dee:	b089      	sub	sp, #36	; 0x24
    2df0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2df2:	2300      	movs	r3, #0
    2df4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    2df8:	9b01      	ldr	r3, [sp, #4]
    2dfa:	889b      	ldrh	r3, [r3, #4]
    2dfc:	2b01      	cmp	r3, #1
    2dfe:	d132      	bne.n	2e66 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    2e00:	4b1b      	ldr	r3, [pc, #108]	; (2e70 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2e02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e06:	4a1a      	ldr	r2, [pc, #104]	; (2e70 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2e08:	f043 0301 	orr.w	r3, r3, #1
    2e0c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e10:	aa03      	add	r2, sp, #12
    2e12:	a904      	add	r1, sp, #16
    2e14:	a805      	add	r0, sp, #20
    2e16:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e1a:	f7fe fed1 	bl	1bc0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2e1e:	4b14      	ldr	r3, [pc, #80]	; (2e70 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2e20:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e24:	0e1b      	lsrs	r3, r3, #24
    2e26:	f003 0301 	and.w	r3, r3, #1
    2e2a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e2c:	9a03      	ldr	r2, [sp, #12]
    2e2e:	a904      	add	r1, sp, #16
    2e30:	ab05      	add	r3, sp, #20
    2e32:	4618      	mov	r0, r3
    2e34:	f7fe fede 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    2e38:	4603      	mov	r3, r0
    2e3a:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2e3e:	9b06      	ldr	r3, [sp, #24]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d106      	bne.n	2e52 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2e44:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e48:	f083 0301 	eor.w	r3, r3, #1
    2e4c:	b2db      	uxtb	r3, r3
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d1e5      	bne.n	2e1e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    2e52:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d005      	beq.n	2e66 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	681b      	ldr	r3, [r3, #0]
    2e5e:	4619      	mov	r1, r3
    2e60:	2001      	movs	r0, #1
    2e62:	f7fe fe9d 	bl	1ba0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2e66:	bf00      	nop
    2e68:	b009      	add	sp, #36	; 0x24
    2e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e6e:	bf00      	nop
    2e70:	40064000 	.word	0x40064000

00002e74 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    2e74:	b082      	sub	sp, #8
    2e76:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    2e78:	4b05      	ldr	r3, [pc, #20]	; (2e90 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e7e:	4a04      	ldr	r2, [pc, #16]	; (2e90 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e80:	f023 0301 	bic.w	r3, r3, #1
    2e84:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    2e88:	bf00      	nop
    2e8a:	b002      	add	sp, #8
    2e8c:	4770      	bx	lr
    2e8e:	bf00      	nop
    2e90:	40064000 	.word	0x40064000

00002e94 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    2e94:	b082      	sub	sp, #8
    2e96:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e98:	bf00      	nop
    2e9a:	b002      	add	sp, #8
    2e9c:	4770      	bx	lr

00002e9e <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    2e9e:	b082      	sub	sp, #8
    2ea0:	9001      	str	r0, [sp, #4]
    2ea2:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    2ea4:	bf00      	nop
    2ea6:	b002      	add	sp, #8
    2ea8:	4770      	bx	lr

00002eaa <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    2eaa:	b082      	sub	sp, #8
    2eac:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2eae:	bf00      	nop
    2eb0:	b002      	add	sp, #8
    2eb2:	4770      	bx	lr

00002eb4 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    2eb4:	b082      	sub	sp, #8
    2eb6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2eb8:	bf00      	nop
    2eba:	b002      	add	sp, #8
    2ebc:	4770      	bx	lr

00002ebe <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    2ebe:	b082      	sub	sp, #8
    2ec0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    2ec2:	2302      	movs	r3, #2
}
    2ec4:	4618      	mov	r0, r3
    2ec6:	b002      	add	sp, #8
    2ec8:	4770      	bx	lr

00002eca <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    2eca:	b082      	sub	sp, #8
    2ecc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    2ece:	bf00      	nop
    2ed0:	b002      	add	sp, #8
    2ed2:	4770      	bx	lr

00002ed4 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    2ed4:	b500      	push	{lr}
    2ed6:	b083      	sub	sp, #12
    2ed8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eda:	9b01      	ldr	r3, [sp, #4]
    2edc:	2b00      	cmp	r3, #0
    2ede:	d002      	beq.n	2ee6 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    2ee0:	9801      	ldr	r0, [sp, #4]
    2ee2:	f000 f870 	bl	2fc6 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ee6:	bf00      	nop
    2ee8:	b003      	add	sp, #12
    2eea:	f85d fb04 	ldr.w	pc, [sp], #4

00002eee <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    2eee:	b500      	push	{lr}
    2ef0:	b083      	sub	sp, #12
    2ef2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ef4:	9b01      	ldr	r3, [sp, #4]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d002      	beq.n	2f00 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    2efa:	9801      	ldr	r0, [sp, #4]
    2efc:	f000 f89a 	bl	3034 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f00:	bf00      	nop
    2f02:	b003      	add	sp, #12
    2f04:	f85d fb04 	ldr.w	pc, [sp], #4

00002f08 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    2f08:	b500      	push	{lr}
    2f0a:	b089      	sub	sp, #36	; 0x24
    2f0c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    2f0e:	2301      	movs	r3, #1
    2f10:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    2f12:	2300      	movs	r3, #0
    2f14:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    2f18:	4b1e      	ldr	r3, [pc, #120]	; (2f94 <Clock_Ip_CompleteSpll+0x8c>)
    2f1a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f1e:	f003 0301 	and.w	r3, r3, #1
    2f22:	2b00      	cmp	r3, #0
    2f24:	d02f      	beq.n	2f86 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f26:	aa02      	add	r2, sp, #8
    2f28:	a903      	add	r1, sp, #12
    2f2a:	a804      	add	r0, sp, #16
    2f2c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f30:	f7fe fe46 	bl	1bc0 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    2f34:	4b17      	ldr	r3, [pc, #92]	; (2f94 <Clock_Ip_CompleteSpll+0x8c>)
    2f36:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f3a:	0e1b      	lsrs	r3, r3, #24
    2f3c:	f003 0301 	and.w	r3, r3, #1
    2f40:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f42:	9a02      	ldr	r2, [sp, #8]
    2f44:	a903      	add	r1, sp, #12
    2f46:	ab04      	add	r3, sp, #16
    2f48:	4618      	mov	r0, r3
    2f4a:	f7fe fe53 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    2f4e:	4603      	mov	r3, r0
    2f50:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    2f54:	9b05      	ldr	r3, [sp, #20]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d106      	bne.n	2f68 <Clock_Ip_CompleteSpll+0x60>
    2f5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f5e:	f083 0301 	eor.w	r3, r3, #1
    2f62:	b2db      	uxtb	r3, r3
    2f64:	2b00      	cmp	r3, #0
    2f66:	d1e5      	bne.n	2f34 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    2f68:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f6c:	f083 0301 	eor.w	r3, r3, #1
    2f70:	b2db      	uxtb	r3, r3
    2f72:	2b00      	cmp	r3, #0
    2f74:	d002      	beq.n	2f7c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    2f76:	2302      	movs	r3, #2
    2f78:	9307      	str	r3, [sp, #28]
    2f7a:	e006      	b.n	2f8a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    2f7c:	9901      	ldr	r1, [sp, #4]
    2f7e:	2001      	movs	r0, #1
    2f80:	f7fe fe0e 	bl	1ba0 <Clock_Ip_ReportClockErrors>
    2f84:	e001      	b.n	2f8a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    2f86:	2300      	movs	r3, #0
    2f88:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    2f8a:	9b07      	ldr	r3, [sp, #28]
}
    2f8c:	4618      	mov	r0, r3
    2f8e:	b009      	add	sp, #36	; 0x24
    2f90:	f85d fb04 	ldr.w	pc, [sp], #4
    2f94:	40064000 	.word	0x40064000

00002f98 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    2f98:	b500      	push	{lr}
    2f9a:	b083      	sub	sp, #12
    2f9c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    2f9e:	9801      	ldr	r0, [sp, #4]
    2fa0:	f000 f886 	bl	30b0 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2fa4:	bf00      	nop
    2fa6:	b003      	add	sp, #12
    2fa8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fac <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    2fac:	b500      	push	{lr}
    2fae:	b083      	sub	sp, #12
    2fb0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fb2:	9b01      	ldr	r3, [sp, #4]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d002      	beq.n	2fbe <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    2fb8:	9801      	ldr	r0, [sp, #4]
    2fba:	f000 f891 	bl	30e0 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fbe:	bf00      	nop
    2fc0:	b003      	add	sp, #12
    2fc2:	f85d fb04 	ldr.w	pc, [sp], #4

00002fc6 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    2fc6:	b082      	sub	sp, #8
    2fc8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    2fca:	4b19      	ldr	r3, [pc, #100]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fcc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fd0:	4a17      	ldr	r2, [pc, #92]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2fd6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    2fda:	4b15      	ldr	r3, [pc, #84]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fdc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fe0:	4a13      	ldr	r2, [pc, #76]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2fe6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    2fea:	4b11      	ldr	r3, [pc, #68]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ff0:	4a0f      	ldr	r2, [pc, #60]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2ff2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2ff6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    2ffa:	4b0d      	ldr	r3, [pc, #52]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2ffc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3000:	4a0b      	ldr	r2, [pc, #44]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3002:	f023 0301 	bic.w	r3, r3, #1
    3006:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    300a:	4b09      	ldr	r3, [pc, #36]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    300c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3010:	4a07      	ldr	r2, [pc, #28]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3012:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3016:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    301c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3020:	4a03      	ldr	r2, [pc, #12]	; (3030 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3022:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3026:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    302a:	bf00      	nop
    302c:	b002      	add	sp, #8
    302e:	4770      	bx	lr
    3030:	40064000 	.word	0x40064000

00003034 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3034:	b082      	sub	sp, #8
    3036:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3038:	9b01      	ldr	r3, [sp, #4]
    303a:	889b      	ldrh	r3, [r3, #4]
    303c:	2b01      	cmp	r3, #1
    303e:	d12f      	bne.n	30a0 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3040:	4b1a      	ldr	r3, [pc, #104]	; (30ac <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3042:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	7b5b      	ldrb	r3, [r3, #13]
    304a:	3b01      	subs	r3, #1
    304c:	021b      	lsls	r3, r3, #8
    304e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3052:	9b01      	ldr	r3, [sp, #4]
    3054:	7d1b      	ldrb	r3, [r3, #20]
    3056:	3b10      	subs	r3, #16
    3058:	041b      	lsls	r3, r3, #16
    305a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    305e:	430b      	orrs	r3, r1
    3060:	4912      	ldr	r1, [pc, #72]	; (30ac <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3062:	4313      	orrs	r3, r2
    3064:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3068:	9b01      	ldr	r3, [sp, #4]
    306a:	7fdb      	ldrb	r3, [r3, #31]
    306c:	2b02      	cmp	r3, #2
    306e:	d011      	beq.n	3094 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3070:	2b02      	cmp	r3, #2
    3072:	dc17      	bgt.n	30a4 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3074:	2b00      	cmp	r3, #0
    3076:	d002      	beq.n	307e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3078:	2b01      	cmp	r3, #1
    307a:	d005      	beq.n	3088 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    307c:	e012      	b.n	30a4 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    307e:	4b0b      	ldr	r3, [pc, #44]	; (30ac <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3080:	2200      	movs	r2, #0
    3082:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3086:	e00e      	b.n	30a6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3088:	4b08      	ldr	r3, [pc, #32]	; (30ac <Clock_Ip_SetSpll_TrustedCall+0x78>)
    308a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    308e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3092:	e008      	b.n	30a6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3094:	4b05      	ldr	r3, [pc, #20]	; (30ac <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3096:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    309a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    309e:	e002      	b.n	30a6 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    30a0:	bf00      	nop
    30a2:	e000      	b.n	30a6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    30a4:	bf00      	nop
}
    30a6:	bf00      	nop
    30a8:	b002      	add	sp, #8
    30aa:	4770      	bx	lr
    30ac:	40064000 	.word	0x40064000

000030b0 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    30b0:	b082      	sub	sp, #8
    30b2:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    30b4:	4b09      	ldr	r3, [pc, #36]	; (30dc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30b6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30ba:	4a08      	ldr	r2, [pc, #32]	; (30dc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30c0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    30c4:	4b05      	ldr	r3, [pc, #20]	; (30dc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30c6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30ca:	4a04      	ldr	r2, [pc, #16]	; (30dc <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    30cc:	f023 0301 	bic.w	r3, r3, #1
    30d0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    30d4:	bf00      	nop
    30d6:	b002      	add	sp, #8
    30d8:	4770      	bx	lr
    30da:	bf00      	nop
    30dc:	40064000 	.word	0x40064000

000030e0 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    30e0:	b082      	sub	sp, #8
    30e2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    30e4:	9b01      	ldr	r3, [sp, #4]
    30e6:	889b      	ldrh	r3, [r3, #4]
    30e8:	2b01      	cmp	r3, #1
    30ea:	d107      	bne.n	30fc <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    30ec:	4b05      	ldr	r3, [pc, #20]	; (3104 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30ee:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30f2:	4a04      	ldr	r2, [pc, #16]	; (3104 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30f4:	f043 0301 	orr.w	r3, r3, #1
    30f8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    30fc:	bf00      	nop
    30fe:	b002      	add	sp, #8
    3100:	4770      	bx	lr
    3102:	bf00      	nop
    3104:	40064000 	.word	0x40064000

00003108 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3108:	b082      	sub	sp, #8
    310a:	9001      	str	r0, [sp, #4]
    310c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    310e:	bf00      	nop
    3110:	b002      	add	sp, #8
    3112:	4770      	bx	lr

00003114 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3114:	b082      	sub	sp, #8
    3116:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3118:	bf00      	nop
    311a:	b002      	add	sp, #8
    311c:	4770      	bx	lr

0000311e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    311e:	b500      	push	{lr}
    3120:	b083      	sub	sp, #12
    3122:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3124:	9b01      	ldr	r3, [sp, #4]
    3126:	2b00      	cmp	r3, #0
    3128:	d002      	beq.n	3130 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    312a:	9801      	ldr	r0, [sp, #4]
    312c:	f000 f8ee 	bl	330c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3130:	bf00      	nop
    3132:	b003      	add	sp, #12
    3134:	f85d fb04 	ldr.w	pc, [sp], #4

00003138 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3138:	b500      	push	{lr}
    313a:	b083      	sub	sp, #12
    313c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	2b00      	cmp	r3, #0
    3142:	d002      	beq.n	314a <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3144:	9801      	ldr	r0, [sp, #4]
    3146:	f000 f8ff 	bl	3348 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    314a:	bf00      	nop
    314c:	b003      	add	sp, #12
    314e:	f85d fb04 	ldr.w	pc, [sp], #4

00003152 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3152:	b500      	push	{lr}
    3154:	b083      	sub	sp, #12
    3156:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3158:	9b01      	ldr	r3, [sp, #4]
    315a:	2b00      	cmp	r3, #0
    315c:	d002      	beq.n	3164 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    315e:	9801      	ldr	r0, [sp, #4]
    3160:	f000 f912 	bl	3388 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3164:	bf00      	nop
    3166:	b003      	add	sp, #12
    3168:	f85d fb04 	ldr.w	pc, [sp], #4

0000316c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    316c:	b500      	push	{lr}
    316e:	b083      	sub	sp, #12
    3170:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3172:	9b01      	ldr	r3, [sp, #4]
    3174:	2b00      	cmp	r3, #0
    3176:	d002      	beq.n	317e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3178:	9801      	ldr	r0, [sp, #4]
    317a:	f000 f925 	bl	33c8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    317e:	bf00      	nop
    3180:	b003      	add	sp, #12
    3182:	f85d fb04 	ldr.w	pc, [sp], #4

00003186 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3186:	b500      	push	{lr}
    3188:	b083      	sub	sp, #12
    318a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    318c:	9b01      	ldr	r3, [sp, #4]
    318e:	2b00      	cmp	r3, #0
    3190:	d002      	beq.n	3198 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3192:	9801      	ldr	r0, [sp, #4]
    3194:	f000 f936 	bl	3404 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3198:	bf00      	nop
    319a:	b003      	add	sp, #12
    319c:	f85d fb04 	ldr.w	pc, [sp], #4

000031a0 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    31a0:	b500      	push	{lr}
    31a2:	b083      	sub	sp, #12
    31a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31a6:	9b01      	ldr	r3, [sp, #4]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d002      	beq.n	31b2 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    31ac:	9801      	ldr	r0, [sp, #4]
    31ae:	f000 f949 	bl	3444 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31b2:	bf00      	nop
    31b4:	b003      	add	sp, #12
    31b6:	f85d fb04 	ldr.w	pc, [sp], #4

000031ba <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    31ba:	b500      	push	{lr}
    31bc:	b083      	sub	sp, #12
    31be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31c0:	9b01      	ldr	r3, [sp, #4]
    31c2:	2b00      	cmp	r3, #0
    31c4:	d002      	beq.n	31cc <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    31c6:	9801      	ldr	r0, [sp, #4]
    31c8:	f000 f958 	bl	347c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31cc:	bf00      	nop
    31ce:	b003      	add	sp, #12
    31d0:	f85d fb04 	ldr.w	pc, [sp], #4

000031d4 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    31d4:	b500      	push	{lr}
    31d6:	b083      	sub	sp, #12
    31d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31da:	9b01      	ldr	r3, [sp, #4]
    31dc:	2b00      	cmp	r3, #0
    31de:	d002      	beq.n	31e6 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    31e0:	9801      	ldr	r0, [sp, #4]
    31e2:	f000 f969 	bl	34b8 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31e6:	bf00      	nop
    31e8:	b003      	add	sp, #12
    31ea:	f85d fb04 	ldr.w	pc, [sp], #4

000031ee <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    31ee:	b500      	push	{lr}
    31f0:	b083      	sub	sp, #12
    31f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31f4:	9b01      	ldr	r3, [sp, #4]
    31f6:	2b00      	cmp	r3, #0
    31f8:	d002      	beq.n	3200 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    31fa:	9801      	ldr	r0, [sp, #4]
    31fc:	f000 f978 	bl	34f0 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3200:	bf00      	nop
    3202:	b003      	add	sp, #12
    3204:	f85d fb04 	ldr.w	pc, [sp], #4

00003208 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3208:	b500      	push	{lr}
    320a:	b083      	sub	sp, #12
    320c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    320e:	9b01      	ldr	r3, [sp, #4]
    3210:	2b00      	cmp	r3, #0
    3212:	d002      	beq.n	321a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3214:	9801      	ldr	r0, [sp, #4]
    3216:	f000 f989 	bl	352c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    321a:	bf00      	nop
    321c:	b003      	add	sp, #12
    321e:	f85d fb04 	ldr.w	pc, [sp], #4

00003222 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3222:	b500      	push	{lr}
    3224:	b083      	sub	sp, #12
    3226:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	2b00      	cmp	r3, #0
    322c:	d002      	beq.n	3234 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    322e:	9801      	ldr	r0, [sp, #4]
    3230:	f000 f998 	bl	3564 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3234:	bf00      	nop
    3236:	b003      	add	sp, #12
    3238:	f85d fb04 	ldr.w	pc, [sp], #4

0000323c <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    323c:	b500      	push	{lr}
    323e:	b083      	sub	sp, #12
    3240:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3242:	9b01      	ldr	r3, [sp, #4]
    3244:	2b00      	cmp	r3, #0
    3246:	d002      	beq.n	324e <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3248:	9801      	ldr	r0, [sp, #4]
    324a:	f000 f9a9 	bl	35a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    324e:	bf00      	nop
    3250:	b003      	add	sp, #12
    3252:	f85d fb04 	ldr.w	pc, [sp], #4

00003256 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3256:	b500      	push	{lr}
    3258:	b083      	sub	sp, #12
    325a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    325c:	9b01      	ldr	r3, [sp, #4]
    325e:	2b00      	cmp	r3, #0
    3260:	d002      	beq.n	3268 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3262:	9801      	ldr	r0, [sp, #4]
    3264:	f000 f9e6 	bl	3634 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3268:	bf00      	nop
    326a:	b003      	add	sp, #12
    326c:	f85d fb04 	ldr.w	pc, [sp], #4

00003270 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3270:	b500      	push	{lr}
    3272:	b083      	sub	sp, #12
    3274:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3276:	9b01      	ldr	r3, [sp, #4]
    3278:	2b00      	cmp	r3, #0
    327a:	d002      	beq.n	3282 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    327c:	9801      	ldr	r0, [sp, #4]
    327e:	f000 fa25 	bl	36cc <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3282:	bf00      	nop
    3284:	b003      	add	sp, #12
    3286:	f85d fb04 	ldr.w	pc, [sp], #4

0000328a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    328a:	b500      	push	{lr}
    328c:	b083      	sub	sp, #12
    328e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3290:	9b01      	ldr	r3, [sp, #4]
    3292:	2b00      	cmp	r3, #0
    3294:	d002      	beq.n	329c <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    3296:	9801      	ldr	r0, [sp, #4]
    3298:	f000 fa2a 	bl	36f0 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    329c:	bf00      	nop
    329e:	b003      	add	sp, #12
    32a0:	f85d fb04 	ldr.w	pc, [sp], #4

000032a4 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    32a4:	b500      	push	{lr}
    32a6:	b083      	sub	sp, #12
    32a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32aa:	9b01      	ldr	r3, [sp, #4]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d002      	beq.n	32b6 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    32b0:	9801      	ldr	r0, [sp, #4]
    32b2:	f000 fa3b 	bl	372c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32b6:	bf00      	nop
    32b8:	b003      	add	sp, #12
    32ba:	f85d fb04 	ldr.w	pc, [sp], #4

000032be <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    32be:	b500      	push	{lr}
    32c0:	b083      	sub	sp, #12
    32c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32c4:	9b01      	ldr	r3, [sp, #4]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d002      	beq.n	32d0 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    32ca:	9801      	ldr	r0, [sp, #4]
    32cc:	f000 fa56 	bl	377c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d0:	bf00      	nop
    32d2:	b003      	add	sp, #12
    32d4:	f85d fb04 	ldr.w	pc, [sp], #4

000032d8 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    32d8:	b500      	push	{lr}
    32da:	b083      	sub	sp, #12
    32dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32de:	9b01      	ldr	r3, [sp, #4]
    32e0:	2b00      	cmp	r3, #0
    32e2:	d002      	beq.n	32ea <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    32e4:	9801      	ldr	r0, [sp, #4]
    32e6:	f000 fa79 	bl	37dc <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32ea:	bf00      	nop
    32ec:	b003      	add	sp, #12
    32ee:	f85d fb04 	ldr.w	pc, [sp], #4

000032f2 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    32f2:	b500      	push	{lr}
    32f4:	b083      	sub	sp, #12
    32f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32f8:	9b01      	ldr	r3, [sp, #4]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d002      	beq.n	3304 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    32fe:	9801      	ldr	r0, [sp, #4]
    3300:	f000 fa8a 	bl	3818 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3304:	bf00      	nop
    3306:	b003      	add	sp, #12
    3308:	f85d fb04 	ldr.w	pc, [sp], #4

0000330c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    330c:	b084      	sub	sp, #16
    330e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3310:	4b0b      	ldr	r3, [pc, #44]	; (3340 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3312:	795b      	ldrb	r3, [r3, #5]
    3314:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3316:	4b0b      	ldr	r3, [pc, #44]	; (3344 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3318:	695b      	ldr	r3, [r3, #20]
    331a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    331c:	9b02      	ldr	r3, [sp, #8]
    331e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3322:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3324:	9b03      	ldr	r3, [sp, #12]
    3326:	061b      	lsls	r3, r3, #24
    3328:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    332c:	9a02      	ldr	r2, [sp, #8]
    332e:	4313      	orrs	r3, r2
    3330:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3332:	4a04      	ldr	r2, [pc, #16]	; (3344 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3334:	9b02      	ldr	r3, [sp, #8]
    3336:	6153      	str	r3, [r2, #20]
}
    3338:	bf00      	nop
    333a:	b004      	add	sp, #16
    333c:	4770      	bx	lr
    333e:	bf00      	nop
    3340:	0000752c 	.word	0x0000752c
    3344:	40064000 	.word	0x40064000

00003348 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3348:	b084      	sub	sp, #16
    334a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    334c:	9b01      	ldr	r3, [sp, #4]
    334e:	685b      	ldr	r3, [r3, #4]
    3350:	4a0b      	ldr	r2, [pc, #44]	; (3380 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3352:	5cd3      	ldrb	r3, [r2, r3]
    3354:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3356:	4b0b      	ldr	r3, [pc, #44]	; (3384 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3358:	695b      	ldr	r3, [r3, #20]
    335a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    335c:	9b02      	ldr	r3, [sp, #8]
    335e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3362:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3364:	9b03      	ldr	r3, [sp, #12]
    3366:	061b      	lsls	r3, r3, #24
    3368:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    336c:	9a02      	ldr	r2, [sp, #8]
    336e:	4313      	orrs	r3, r2
    3370:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3372:	4a04      	ldr	r2, [pc, #16]	; (3384 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3374:	9b02      	ldr	r3, [sp, #8]
    3376:	6153      	str	r3, [r2, #20]
}
    3378:	bf00      	nop
    337a:	b004      	add	sp, #16
    337c:	4770      	bx	lr
    337e:	bf00      	nop
    3380:	0000752c 	.word	0x0000752c
    3384:	40064000 	.word	0x40064000

00003388 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3388:	b084      	sub	sp, #16
    338a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    338c:	9b01      	ldr	r3, [sp, #4]
    338e:	685b      	ldr	r3, [r3, #4]
    3390:	4a0b      	ldr	r2, [pc, #44]	; (33c0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3392:	5cd3      	ldrb	r3, [r2, r3]
    3394:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3396:	4b0b      	ldr	r3, [pc, #44]	; (33c4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3398:	699b      	ldr	r3, [r3, #24]
    339a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    339c:	9b02      	ldr	r3, [sp, #8]
    339e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33a2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    33a4:	9b03      	ldr	r3, [sp, #12]
    33a6:	061b      	lsls	r3, r3, #24
    33a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33ac:	9a02      	ldr	r2, [sp, #8]
    33ae:	4313      	orrs	r3, r2
    33b0:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    33b2:	4a04      	ldr	r2, [pc, #16]	; (33c4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    33b4:	9b02      	ldr	r3, [sp, #8]
    33b6:	6193      	str	r3, [r2, #24]
}
    33b8:	bf00      	nop
    33ba:	b004      	add	sp, #16
    33bc:	4770      	bx	lr
    33be:	bf00      	nop
    33c0:	0000752c 	.word	0x0000752c
    33c4:	40064000 	.word	0x40064000

000033c8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33c8:	b084      	sub	sp, #16
    33ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33cc:	4b0b      	ldr	r3, [pc, #44]	; (33fc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    33ce:	795b      	ldrb	r3, [r3, #5]
    33d0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    33d2:	4b0b      	ldr	r3, [pc, #44]	; (3400 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33d4:	69db      	ldr	r3, [r3, #28]
    33d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33de:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    33e0:	9b03      	ldr	r3, [sp, #12]
    33e2:	061b      	lsls	r3, r3, #24
    33e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33e8:	9a02      	ldr	r2, [sp, #8]
    33ea:	4313      	orrs	r3, r2
    33ec:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    33ee:	4a04      	ldr	r2, [pc, #16]	; (3400 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33f0:	9b02      	ldr	r3, [sp, #8]
    33f2:	61d3      	str	r3, [r2, #28]
}
    33f4:	bf00      	nop
    33f6:	b004      	add	sp, #16
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop
    33fc:	0000752c 	.word	0x0000752c
    3400:	40064000 	.word	0x40064000

00003404 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3404:	b084      	sub	sp, #16
    3406:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3408:	9b01      	ldr	r3, [sp, #4]
    340a:	685b      	ldr	r3, [r3, #4]
    340c:	4a0b      	ldr	r2, [pc, #44]	; (343c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    340e:	5cd3      	ldrb	r3, [r2, r3]
    3410:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3412:	4b0b      	ldr	r3, [pc, #44]	; (3440 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3414:	69db      	ldr	r3, [r3, #28]
    3416:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3418:	9b02      	ldr	r3, [sp, #8]
    341a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    341e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3420:	9b03      	ldr	r3, [sp, #12]
    3422:	061b      	lsls	r3, r3, #24
    3424:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3428:	9a02      	ldr	r2, [sp, #8]
    342a:	4313      	orrs	r3, r2
    342c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    342e:	4a04      	ldr	r2, [pc, #16]	; (3440 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3430:	9b02      	ldr	r3, [sp, #8]
    3432:	61d3      	str	r3, [r2, #28]
}
    3434:	bf00      	nop
    3436:	b004      	add	sp, #16
    3438:	4770      	bx	lr
    343a:	bf00      	nop
    343c:	0000752c 	.word	0x0000752c
    3440:	40064000 	.word	0x40064000

00003444 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3444:	b084      	sub	sp, #16
    3446:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3448:	4b0a      	ldr	r3, [pc, #40]	; (3474 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    344a:	7b9b      	ldrb	r3, [r3, #14]
    344c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    344e:	4b0a      	ldr	r3, [pc, #40]	; (3478 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3450:	691b      	ldr	r3, [r3, #16]
    3452:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3454:	9b02      	ldr	r3, [sp, #8]
    3456:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    345a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    345c:	9b03      	ldr	r3, [sp, #12]
    345e:	011b      	lsls	r3, r3, #4
    3460:	9a02      	ldr	r2, [sp, #8]
    3462:	4313      	orrs	r3, r2
    3464:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3466:	4a04      	ldr	r2, [pc, #16]	; (3478 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3468:	9b02      	ldr	r3, [sp, #8]
    346a:	6113      	str	r3, [r2, #16]
}
    346c:	bf00      	nop
    346e:	b004      	add	sp, #16
    3470:	4770      	bx	lr
    3472:	bf00      	nop
    3474:	000074d4 	.word	0x000074d4
    3478:	40048000 	.word	0x40048000

0000347c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    347c:	b084      	sub	sp, #16
    347e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3480:	9b01      	ldr	r3, [sp, #4]
    3482:	685b      	ldr	r3, [r3, #4]
    3484:	4a0a      	ldr	r2, [pc, #40]	; (34b0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3486:	5cd3      	ldrb	r3, [r2, r3]
    3488:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    348a:	4b0a      	ldr	r3, [pc, #40]	; (34b4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    348c:	691b      	ldr	r3, [r3, #16]
    348e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3490:	9b02      	ldr	r3, [sp, #8]
    3492:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3496:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3498:	9b03      	ldr	r3, [sp, #12]
    349a:	011b      	lsls	r3, r3, #4
    349c:	9a02      	ldr	r2, [sp, #8]
    349e:	4313      	orrs	r3, r2
    34a0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34a2:	4a04      	ldr	r2, [pc, #16]	; (34b4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    34a4:	9b02      	ldr	r3, [sp, #8]
    34a6:	6113      	str	r3, [r2, #16]
}
    34a8:	bf00      	nop
    34aa:	b004      	add	sp, #16
    34ac:	4770      	bx	lr
    34ae:	bf00      	nop
    34b0:	000074d4 	.word	0x000074d4
    34b4:	40048000 	.word	0x40048000

000034b8 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34b8:	b084      	sub	sp, #16
    34ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34bc:	4b0a      	ldr	r3, [pc, #40]	; (34e8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    34be:	785b      	ldrb	r3, [r3, #1]
    34c0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    34c2:	4b0a      	ldr	r3, [pc, #40]	; (34ec <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    34c4:	691b      	ldr	r3, [r3, #16]
    34c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    34c8:	9b02      	ldr	r3, [sp, #8]
    34ca:	f023 030c 	bic.w	r3, r3, #12
    34ce:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    34d0:	9b03      	ldr	r3, [sp, #12]
    34d2:	009b      	lsls	r3, r3, #2
    34d4:	9a02      	ldr	r2, [sp, #8]
    34d6:	4313      	orrs	r3, r2
    34d8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    34da:	4a04      	ldr	r2, [pc, #16]	; (34ec <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    34dc:	9b02      	ldr	r3, [sp, #8]
    34de:	6113      	str	r3, [r2, #16]
}
    34e0:	bf00      	nop
    34e2:	b004      	add	sp, #16
    34e4:	4770      	bx	lr
    34e6:	bf00      	nop
    34e8:	0000758c 	.word	0x0000758c
    34ec:	40048000 	.word	0x40048000

000034f0 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34f0:	b084      	sub	sp, #16
    34f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34f4:	9b01      	ldr	r3, [sp, #4]
    34f6:	685b      	ldr	r3, [r3, #4]
    34f8:	4a0a      	ldr	r2, [pc, #40]	; (3524 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    34fa:	5cd3      	ldrb	r3, [r2, r3]
    34fc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    34fe:	4b0a      	ldr	r3, [pc, #40]	; (3528 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3500:	691b      	ldr	r3, [r3, #16]
    3502:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3504:	9b02      	ldr	r3, [sp, #8]
    3506:	f023 030c 	bic.w	r3, r3, #12
    350a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    350c:	9b03      	ldr	r3, [sp, #12]
    350e:	009b      	lsls	r3, r3, #2
    3510:	9a02      	ldr	r2, [sp, #8]
    3512:	4313      	orrs	r3, r2
    3514:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3516:	4a04      	ldr	r2, [pc, #16]	; (3528 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3518:	9b02      	ldr	r3, [sp, #8]
    351a:	6113      	str	r3, [r2, #16]
}
    351c:	bf00      	nop
    351e:	b004      	add	sp, #16
    3520:	4770      	bx	lr
    3522:	bf00      	nop
    3524:	0000758c 	.word	0x0000758c
    3528:	40048000 	.word	0x40048000

0000352c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    352c:	b084      	sub	sp, #16
    352e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3530:	4b0a      	ldr	r3, [pc, #40]	; (355c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3532:	795b      	ldrb	r3, [r3, #5]
    3534:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3536:	4b0a      	ldr	r3, [pc, #40]	; (3560 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3538:	6a1b      	ldr	r3, [r3, #32]
    353a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    353c:	9b02      	ldr	r3, [sp, #8]
    353e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3542:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3544:	9b03      	ldr	r3, [sp, #12]
    3546:	061b      	lsls	r3, r3, #24
    3548:	9a02      	ldr	r2, [sp, #8]
    354a:	4313      	orrs	r3, r2
    354c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    354e:	4a04      	ldr	r2, [pc, #16]	; (3560 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3550:	9b02      	ldr	r3, [sp, #8]
    3552:	6213      	str	r3, [r2, #32]
}
    3554:	bf00      	nop
    3556:	b004      	add	sp, #16
    3558:	4770      	bx	lr
    355a:	bf00      	nop
    355c:	0000752c 	.word	0x0000752c
    3560:	40064000 	.word	0x40064000

00003564 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3564:	b084      	sub	sp, #16
    3566:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3568:	9b01      	ldr	r3, [sp, #4]
    356a:	685b      	ldr	r3, [r3, #4]
    356c:	4a0a      	ldr	r2, [pc, #40]	; (3598 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    356e:	5cd3      	ldrb	r3, [r2, r3]
    3570:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3572:	4b0a      	ldr	r3, [pc, #40]	; (359c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3574:	6a1b      	ldr	r3, [r3, #32]
    3576:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3578:	9b02      	ldr	r3, [sp, #8]
    357a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    357e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3580:	9b03      	ldr	r3, [sp, #12]
    3582:	061b      	lsls	r3, r3, #24
    3584:	9a02      	ldr	r2, [sp, #8]
    3586:	4313      	orrs	r3, r2
    3588:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    358a:	4a04      	ldr	r2, [pc, #16]	; (359c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    358c:	9b02      	ldr	r3, [sp, #8]
    358e:	6213      	str	r3, [r2, #32]
}
    3590:	bf00      	nop
    3592:	b004      	add	sp, #16
    3594:	4770      	bx	lr
    3596:	bf00      	nop
    3598:	0000752c 	.word	0x0000752c
    359c:	40064000 	.word	0x40064000

000035a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    35a0:	b086      	sub	sp, #24
    35a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    35a4:	4b20      	ldr	r3, [pc, #128]	; (3628 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    35a6:	795b      	ldrb	r3, [r3, #5]
    35a8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    35aa:	9b01      	ldr	r3, [sp, #4]
    35ac:	681a      	ldr	r2, [r3, #0]
    35ae:	491f      	ldr	r1, [pc, #124]	; (362c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    35b0:	4613      	mov	r3, r2
    35b2:	00db      	lsls	r3, r3, #3
    35b4:	4413      	add	r3, r2
    35b6:	440b      	add	r3, r1
    35b8:	781b      	ldrb	r3, [r3, #0]
    35ba:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    35bc:	4b1c      	ldr	r3, [pc, #112]	; (3630 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35be:	68db      	ldr	r3, [r3, #12]
    35c0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    35c2:	9b03      	ldr	r3, [sp, #12]
    35c4:	2b03      	cmp	r3, #3
    35c6:	d813      	bhi.n	35f0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    35c8:	9b03      	ldr	r3, [sp, #12]
    35ca:	005b      	lsls	r3, r3, #1
    35cc:	3318      	adds	r3, #24
    35ce:	2203      	movs	r2, #3
    35d0:	fa02 f303 	lsl.w	r3, r2, r3
    35d4:	43db      	mvns	r3, r3
    35d6:	9a05      	ldr	r2, [sp, #20]
    35d8:	4013      	ands	r3, r2
    35da:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    35dc:	9b03      	ldr	r3, [sp, #12]
    35de:	005b      	lsls	r3, r3, #1
    35e0:	3318      	adds	r3, #24
    35e2:	9a04      	ldr	r2, [sp, #16]
    35e4:	fa02 f303 	lsl.w	r3, r2, r3
    35e8:	9a05      	ldr	r2, [sp, #20]
    35ea:	4313      	orrs	r3, r2
    35ec:	9305      	str	r3, [sp, #20]
    35ee:	e014      	b.n	361a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    35f0:	9b03      	ldr	r3, [sp, #12]
    35f2:	3b04      	subs	r3, #4
    35f4:	005b      	lsls	r3, r3, #1
    35f6:	3310      	adds	r3, #16
    35f8:	2203      	movs	r2, #3
    35fa:	fa02 f303 	lsl.w	r3, r2, r3
    35fe:	43db      	mvns	r3, r3
    3600:	9a05      	ldr	r2, [sp, #20]
    3602:	4013      	ands	r3, r2
    3604:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3606:	9b03      	ldr	r3, [sp, #12]
    3608:	3b04      	subs	r3, #4
    360a:	005b      	lsls	r3, r3, #1
    360c:	3310      	adds	r3, #16
    360e:	9a04      	ldr	r2, [sp, #16]
    3610:	fa02 f303 	lsl.w	r3, r2, r3
    3614:	9a05      	ldr	r2, [sp, #20]
    3616:	4313      	orrs	r3, r2
    3618:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    361a:	4a05      	ldr	r2, [pc, #20]	; (3630 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    361c:	9b05      	ldr	r3, [sp, #20]
    361e:	60d3      	str	r3, [r2, #12]
}
    3620:	bf00      	nop
    3622:	b006      	add	sp, #24
    3624:	4770      	bx	lr
    3626:	bf00      	nop
    3628:	000074d4 	.word	0x000074d4
    362c:	000071c4 	.word	0x000071c4
    3630:	40048000 	.word	0x40048000

00003634 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3634:	b086      	sub	sp, #24
    3636:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3638:	9b01      	ldr	r3, [sp, #4]
    363a:	685b      	ldr	r3, [r3, #4]
    363c:	4a20      	ldr	r2, [pc, #128]	; (36c0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    363e:	5cd3      	ldrb	r3, [r2, r3]
    3640:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3642:	9b01      	ldr	r3, [sp, #4]
    3644:	681a      	ldr	r2, [r3, #0]
    3646:	491f      	ldr	r1, [pc, #124]	; (36c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3648:	4613      	mov	r3, r2
    364a:	00db      	lsls	r3, r3, #3
    364c:	4413      	add	r3, r2
    364e:	440b      	add	r3, r1
    3650:	781b      	ldrb	r3, [r3, #0]
    3652:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3654:	4b1c      	ldr	r3, [pc, #112]	; (36c8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3656:	68db      	ldr	r3, [r3, #12]
    3658:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    365a:	9b03      	ldr	r3, [sp, #12]
    365c:	2b03      	cmp	r3, #3
    365e:	d813      	bhi.n	3688 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3660:	9b03      	ldr	r3, [sp, #12]
    3662:	005b      	lsls	r3, r3, #1
    3664:	3318      	adds	r3, #24
    3666:	2203      	movs	r2, #3
    3668:	fa02 f303 	lsl.w	r3, r2, r3
    366c:	43db      	mvns	r3, r3
    366e:	9a05      	ldr	r2, [sp, #20]
    3670:	4013      	ands	r3, r2
    3672:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3674:	9b03      	ldr	r3, [sp, #12]
    3676:	005b      	lsls	r3, r3, #1
    3678:	3318      	adds	r3, #24
    367a:	9a04      	ldr	r2, [sp, #16]
    367c:	fa02 f303 	lsl.w	r3, r2, r3
    3680:	9a05      	ldr	r2, [sp, #20]
    3682:	4313      	orrs	r3, r2
    3684:	9305      	str	r3, [sp, #20]
    3686:	e014      	b.n	36b2 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3688:	9b03      	ldr	r3, [sp, #12]
    368a:	3b04      	subs	r3, #4
    368c:	005b      	lsls	r3, r3, #1
    368e:	3310      	adds	r3, #16
    3690:	2203      	movs	r2, #3
    3692:	fa02 f303 	lsl.w	r3, r2, r3
    3696:	43db      	mvns	r3, r3
    3698:	9a05      	ldr	r2, [sp, #20]
    369a:	4013      	ands	r3, r2
    369c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    369e:	9b03      	ldr	r3, [sp, #12]
    36a0:	3b04      	subs	r3, #4
    36a2:	005b      	lsls	r3, r3, #1
    36a4:	3310      	adds	r3, #16
    36a6:	9a04      	ldr	r2, [sp, #16]
    36a8:	fa02 f303 	lsl.w	r3, r2, r3
    36ac:	9a05      	ldr	r2, [sp, #20]
    36ae:	4313      	orrs	r3, r2
    36b0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    36b2:	4a05      	ldr	r2, [pc, #20]	; (36c8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    36b4:	9b05      	ldr	r3, [sp, #20]
    36b6:	60d3      	str	r3, [r2, #12]
}
    36b8:	bf00      	nop
    36ba:	b006      	add	sp, #24
    36bc:	4770      	bx	lr
    36be:	bf00      	nop
    36c0:	000074d4 	.word	0x000074d4
    36c4:	000071c4 	.word	0x000071c4
    36c8:	40048000 	.word	0x40048000

000036cc <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36cc:	b084      	sub	sp, #16
    36ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    36d0:	4b06      	ldr	r3, [pc, #24]	; (36ec <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    36d2:	685b      	ldr	r3, [r3, #4]
    36d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    36d6:	9b03      	ldr	r3, [sp, #12]
    36d8:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    36dc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    36de:	4a03      	ldr	r2, [pc, #12]	; (36ec <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    36e0:	9b03      	ldr	r3, [sp, #12]
    36e2:	6053      	str	r3, [r2, #4]
}
    36e4:	bf00      	nop
    36e6:	b004      	add	sp, #16
    36e8:	4770      	bx	lr
    36ea:	bf00      	nop
    36ec:	40048000 	.word	0x40048000

000036f0 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36f0:	b084      	sub	sp, #16
    36f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    36f4:	9b01      	ldr	r3, [sp, #4]
    36f6:	685b      	ldr	r3, [r3, #4]
    36f8:	4a0a      	ldr	r2, [pc, #40]	; (3724 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    36fa:	5cd3      	ldrb	r3, [r2, r3]
    36fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    36fe:	4b0a      	ldr	r3, [pc, #40]	; (3728 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3700:	685b      	ldr	r3, [r3, #4]
    3702:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3704:	9b02      	ldr	r3, [sp, #8]
    3706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    370a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    370c:	9b03      	ldr	r3, [sp, #12]
    370e:	011b      	lsls	r3, r3, #4
    3710:	9a02      	ldr	r2, [sp, #8]
    3712:	4313      	orrs	r3, r2
    3714:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3716:	4a04      	ldr	r2, [pc, #16]	; (3728 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3718:	9b02      	ldr	r3, [sp, #8]
    371a:	6053      	str	r3, [r2, #4]
}
    371c:	bf00      	nop
    371e:	b004      	add	sp, #16
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	000074d4 	.word	0x000074d4
    3728:	40048000 	.word	0x40048000

0000372c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    372c:	b084      	sub	sp, #16
    372e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3730:	9b01      	ldr	r3, [sp, #4]
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	490f      	ldr	r1, [pc, #60]	; (3774 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3736:	4613      	mov	r3, r2
    3738:	00db      	lsls	r3, r3, #3
    373a:	4413      	add	r3, r2
    373c:	440b      	add	r3, r1
    373e:	3304      	adds	r3, #4
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3744:	4a0c      	ldr	r2, [pc, #48]	; (3778 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3746:	9b03      	ldr	r3, [sp, #12]
    3748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    374c:	490a      	ldr	r1, [pc, #40]	; (3778 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    374e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3752:	9b03      	ldr	r3, [sp, #12]
    3754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3758:	4a07      	ldr	r2, [pc, #28]	; (3778 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    375a:	9b03      	ldr	r3, [sp, #12]
    375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3760:	4905      	ldr	r1, [pc, #20]	; (3778 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3762:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3766:	9b03      	ldr	r3, [sp, #12]
    3768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    376c:	bf00      	nop
    376e:	b004      	add	sp, #16
    3770:	4770      	bx	lr
    3772:	bf00      	nop
    3774:	000071c4 	.word	0x000071c4
    3778:	40065000 	.word	0x40065000

0000377c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    377c:	b086      	sub	sp, #24
    377e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3780:	9b01      	ldr	r3, [sp, #4]
    3782:	681a      	ldr	r2, [r3, #0]
    3784:	4912      	ldr	r1, [pc, #72]	; (37d0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3786:	4613      	mov	r3, r2
    3788:	00db      	lsls	r3, r3, #3
    378a:	4413      	add	r3, r2
    378c:	440b      	add	r3, r1
    378e:	3304      	adds	r3, #4
    3790:	781b      	ldrb	r3, [r3, #0]
    3792:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3794:	9b01      	ldr	r3, [sp, #4]
    3796:	685b      	ldr	r3, [r3, #4]
    3798:	4a0e      	ldr	r2, [pc, #56]	; (37d4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    379a:	5cd3      	ldrb	r3, [r2, r3]
    379c:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    379e:	4a0e      	ldr	r2, [pc, #56]	; (37d8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    37a0:	9b05      	ldr	r3, [sp, #20]
    37a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37a6:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    37a8:	9b03      	ldr	r3, [sp, #12]
    37aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    37ae:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    37b0:	9b04      	ldr	r3, [sp, #16]
    37b2:	061b      	lsls	r3, r3, #24
    37b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    37b8:	9a03      	ldr	r2, [sp, #12]
    37ba:	4313      	orrs	r3, r2
    37bc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    37be:	4906      	ldr	r1, [pc, #24]	; (37d8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    37c0:	9b05      	ldr	r3, [sp, #20]
    37c2:	9a03      	ldr	r2, [sp, #12]
    37c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    37c8:	bf00      	nop
    37ca:	b006      	add	sp, #24
    37cc:	4770      	bx	lr
    37ce:	bf00      	nop
    37d0:	000071c4 	.word	0x000071c4
    37d4:	0000755c 	.word	0x0000755c
    37d8:	40065000 	.word	0x40065000

000037dc <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37dc:	b084      	sub	sp, #16
    37de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    37e0:	4b0b      	ldr	r3, [pc, #44]	; (3810 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    37e2:	7f1b      	ldrb	r3, [r3, #28]
    37e4:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    37e6:	4b0b      	ldr	r3, [pc, #44]	; (3814 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37e8:	685b      	ldr	r3, [r3, #4]
    37ea:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    37ec:	9b02      	ldr	r3, [sp, #8]
    37ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37f2:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    37f4:	9b03      	ldr	r3, [sp, #12]
    37f6:	031b      	lsls	r3, r3, #12
    37f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37fc:	9a02      	ldr	r2, [sp, #8]
    37fe:	4313      	orrs	r3, r2
    3800:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3802:	4a04      	ldr	r2, [pc, #16]	; (3814 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3804:	9b02      	ldr	r3, [sp, #8]
    3806:	6053      	str	r3, [r2, #4]
}
    3808:	bf00      	nop
    380a:	b004      	add	sp, #16
    380c:	4770      	bx	lr
    380e:	bf00      	nop
    3810:	000074d4 	.word	0x000074d4
    3814:	40048000 	.word	0x40048000

00003818 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3818:	b084      	sub	sp, #16
    381a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	685b      	ldr	r3, [r3, #4]
    3820:	4a0b      	ldr	r2, [pc, #44]	; (3850 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3822:	5cd3      	ldrb	r3, [r2, r3]
    3824:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3826:	4b0b      	ldr	r3, [pc, #44]	; (3854 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3828:	685b      	ldr	r3, [r3, #4]
    382a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    382c:	9b02      	ldr	r3, [sp, #8]
    382e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3832:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3834:	9b03      	ldr	r3, [sp, #12]
    3836:	031b      	lsls	r3, r3, #12
    3838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    383c:	9a02      	ldr	r2, [sp, #8]
    383e:	4313      	orrs	r3, r2
    3840:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3842:	4a04      	ldr	r2, [pc, #16]	; (3854 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3844:	9b02      	ldr	r3, [sp, #8]
    3846:	6053      	str	r3, [r2, #4]
}
    3848:	bf00      	nop
    384a:	b004      	add	sp, #16
    384c:	4770      	bx	lr
    384e:	bf00      	nop
    3850:	000074d4 	.word	0x000074d4
    3854:	40048000 	.word	0x40048000

00003858 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3858:	b500      	push	{lr}
    385a:	b085      	sub	sp, #20
    385c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    385e:	2300      	movs	r3, #0
    3860:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	2b00      	cmp	r3, #0
    3868:	d037      	beq.n	38da <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    386a:	2300      	movs	r3, #0
    386c:	9303      	str	r3, [sp, #12]
    386e:	e02b      	b.n	38c8 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3870:	4b29      	ldr	r3, [pc, #164]	; (3918 <DisableSafeClock+0xc0>)
    3872:	6819      	ldr	r1, [r3, #0]
    3874:	9a03      	ldr	r2, [sp, #12]
    3876:	4613      	mov	r3, r2
    3878:	005b      	lsls	r3, r3, #1
    387a:	4413      	add	r3, r2
    387c:	009b      	lsls	r3, r3, #2
    387e:	440b      	add	r3, r1
    3880:	3314      	adds	r3, #20
    3882:	681b      	ldr	r3, [r3, #0]
    3884:	2b05      	cmp	r3, #5
    3886:	d11c      	bne.n	38c2 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3888:	2301      	movs	r3, #1
    388a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    388e:	4b22      	ldr	r3, [pc, #136]	; (3918 <DisableSafeClock+0xc0>)
    3890:	6819      	ldr	r1, [r3, #0]
    3892:	9a03      	ldr	r2, [sp, #12]
    3894:	4613      	mov	r3, r2
    3896:	005b      	lsls	r3, r3, #1
    3898:	4413      	add	r3, r2
    389a:	009b      	lsls	r3, r3, #2
    389c:	440b      	add	r3, r1
    389e:	3318      	adds	r3, #24
    38a0:	881b      	ldrh	r3, [r3, #0]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d118      	bne.n	38d8 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    38a6:	4b1d      	ldr	r3, [pc, #116]	; (391c <DisableSafeClock+0xc4>)
    38a8:	791b      	ldrb	r3, [r3, #4]
    38aa:	4619      	mov	r1, r3
    38ac:	4a1c      	ldr	r2, [pc, #112]	; (3920 <DisableSafeClock+0xc8>)
    38ae:	460b      	mov	r3, r1
    38b0:	005b      	lsls	r3, r3, #1
    38b2:	440b      	add	r3, r1
    38b4:	009b      	lsls	r3, r3, #2
    38b6:	4413      	add	r3, r2
    38b8:	3308      	adds	r3, #8
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	2005      	movs	r0, #5
    38be:	4798      	blx	r3
                }
                break;
    38c0:	e00a      	b.n	38d8 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    38c2:	9b03      	ldr	r3, [sp, #12]
    38c4:	3301      	adds	r3, #1
    38c6:	9303      	str	r3, [sp, #12]
    38c8:	4b13      	ldr	r3, [pc, #76]	; (3918 <DisableSafeClock+0xc0>)
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	7a1b      	ldrb	r3, [r3, #8]
    38ce:	461a      	mov	r2, r3
    38d0:	9b03      	ldr	r3, [sp, #12]
    38d2:	4293      	cmp	r3, r2
    38d4:	d3cc      	bcc.n	3870 <DisableSafeClock+0x18>
    38d6:	e000      	b.n	38da <DisableSafeClock+0x82>
                break;
    38d8:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    38da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    38de:	f083 0301 	eor.w	r3, r3, #1
    38e2:	b2db      	uxtb	r3, r3
    38e4:	2b00      	cmp	r3, #0
    38e6:	d013      	beq.n	3910 <DisableSafeClock+0xb8>
    38e8:	4b0e      	ldr	r3, [pc, #56]	; (3924 <DisableSafeClock+0xcc>)
    38ea:	781b      	ldrb	r3, [r3, #0]
    38ec:	f083 0301 	eor.w	r3, r3, #1
    38f0:	b2db      	uxtb	r3, r3
    38f2:	2b00      	cmp	r3, #0
    38f4:	d00c      	beq.n	3910 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    38f6:	4b09      	ldr	r3, [pc, #36]	; (391c <DisableSafeClock+0xc4>)
    38f8:	791b      	ldrb	r3, [r3, #4]
    38fa:	4619      	mov	r1, r3
    38fc:	4a08      	ldr	r2, [pc, #32]	; (3920 <DisableSafeClock+0xc8>)
    38fe:	460b      	mov	r3, r1
    3900:	005b      	lsls	r3, r3, #1
    3902:	440b      	add	r3, r1
    3904:	009b      	lsls	r3, r3, #2
    3906:	4413      	add	r3, r2
    3908:	3308      	adds	r3, #8
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	2005      	movs	r0, #5
    390e:	4798      	blx	r3
    }
}
    3910:	bf00      	nop
    3912:	b005      	add	sp, #20
    3914:	f85d fb04 	ldr.w	pc, [sp], #4
    3918:	1fff8ba8 	.word	0x1fff8ba8
    391c:	00007154 	.word	0x00007154
    3920:	00007784 	.word	0x00007784
    3924:	1fff8b18 	.word	0x1fff8b18

00003928 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3928:	4b06      	ldr	r3, [pc, #24]	; (3944 <SetFircToResetValue_TrustedCall+0x1c>)
    392a:	2200      	movs	r2, #0
    392c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3930:	4b04      	ldr	r3, [pc, #16]	; (3944 <SetFircToResetValue_TrustedCall+0x1c>)
    3932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3936:	4a03      	ldr	r2, [pc, #12]	; (3944 <SetFircToResetValue_TrustedCall+0x1c>)
    3938:	f043 0301 	orr.w	r3, r3, #1
    393c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3940:	bf00      	nop
    3942:	4770      	bx	lr
    3944:	40064000 	.word	0x40064000

00003948 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3948:	b084      	sub	sp, #16
    394a:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    394c:	2303      	movs	r3, #3
    394e:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3950:	2300      	movs	r3, #0
    3952:	9302      	str	r3, [sp, #8]
    3954:	e028      	b.n	39a8 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3956:	9b01      	ldr	r3, [sp, #4]
    3958:	9a02      	ldr	r2, [sp, #8]
    395a:	320d      	adds	r2, #13
    395c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3960:	2b28      	cmp	r3, #40	; 0x28
    3962:	d10b      	bne.n	397c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3964:	9a01      	ldr	r2, [sp, #4]
    3966:	9b02      	ldr	r3, [sp, #8]
    3968:	330d      	adds	r3, #13
    396a:	00db      	lsls	r3, r3, #3
    396c:	4413      	add	r3, r2
    396e:	685b      	ldr	r3, [r3, #4]
    3970:	4a2b      	ldr	r2, [pc, #172]	; (3a20 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3972:	5cd3      	ldrb	r3, [r2, r3]
    3974:	011b      	lsls	r3, r3, #4
    3976:	9a03      	ldr	r2, [sp, #12]
    3978:	4313      	orrs	r3, r2
    397a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    397c:	9b01      	ldr	r3, [sp, #4]
    397e:	9a02      	ldr	r2, [sp, #8]
    3980:	320d      	adds	r2, #13
    3982:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3986:	2b29      	cmp	r3, #41	; 0x29
    3988:	d10b      	bne.n	39a2 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    398a:	9a01      	ldr	r2, [sp, #4]
    398c:	9b02      	ldr	r3, [sp, #8]
    398e:	330d      	adds	r3, #13
    3990:	00db      	lsls	r3, r3, #3
    3992:	4413      	add	r3, r2
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	4a23      	ldr	r2, [pc, #140]	; (3a24 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3998:	5cd3      	ldrb	r3, [r2, r3]
    399a:	009b      	lsls	r3, r3, #2
    399c:	9a03      	ldr	r2, [sp, #12]
    399e:	4313      	orrs	r3, r2
    39a0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    39a2:	9b02      	ldr	r3, [sp, #8]
    39a4:	3301      	adds	r3, #1
    39a6:	9302      	str	r3, [sp, #8]
    39a8:	9b01      	ldr	r3, [sp, #4]
    39aa:	7adb      	ldrb	r3, [r3, #11]
    39ac:	461a      	mov	r2, r3
    39ae:	9b02      	ldr	r3, [sp, #8]
    39b0:	4293      	cmp	r3, r2
    39b2:	d3d0      	bcc.n	3956 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    39b4:	2300      	movs	r3, #0
    39b6:	9302      	str	r3, [sp, #8]
    39b8:	e026      	b.n	3a08 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    39ba:	9a01      	ldr	r2, [sp, #4]
    39bc:	9b02      	ldr	r3, [sp, #8]
    39be:	334e      	adds	r3, #78	; 0x4e
    39c0:	00db      	lsls	r3, r3, #3
    39c2:	4413      	add	r3, r2
    39c4:	685b      	ldr	r3, [r3, #4]
    39c6:	2b12      	cmp	r3, #18
    39c8:	d109      	bne.n	39de <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    39ca:	9a01      	ldr	r2, [sp, #4]
    39cc:	9b02      	ldr	r3, [sp, #8]
    39ce:	334e      	adds	r3, #78	; 0x4e
    39d0:	00db      	lsls	r3, r3, #3
    39d2:	4413      	add	r3, r2
    39d4:	891b      	ldrh	r3, [r3, #8]
    39d6:	005b      	lsls	r3, r3, #1
    39d8:	9a03      	ldr	r2, [sp, #12]
    39da:	4313      	orrs	r3, r2
    39dc:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    39de:	9a01      	ldr	r2, [sp, #4]
    39e0:	9b02      	ldr	r3, [sp, #8]
    39e2:	334e      	adds	r3, #78	; 0x4e
    39e4:	00db      	lsls	r3, r3, #3
    39e6:	4413      	add	r3, r2
    39e8:	685b      	ldr	r3, [r3, #4]
    39ea:	2b13      	cmp	r3, #19
    39ec:	d109      	bne.n	3a02 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    39ee:	9a01      	ldr	r2, [sp, #4]
    39f0:	9b02      	ldr	r3, [sp, #8]
    39f2:	334e      	adds	r3, #78	; 0x4e
    39f4:	00db      	lsls	r3, r3, #3
    39f6:	4413      	add	r3, r2
    39f8:	891b      	ldrh	r3, [r3, #8]
    39fa:	461a      	mov	r2, r3
    39fc:	9b03      	ldr	r3, [sp, #12]
    39fe:	4313      	orrs	r3, r2
    3a00:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3a02:	9b02      	ldr	r3, [sp, #8]
    3a04:	3301      	adds	r3, #1
    3a06:	9302      	str	r3, [sp, #8]
    3a08:	9b01      	ldr	r3, [sp, #4]
    3a0a:	7c1b      	ldrb	r3, [r3, #16]
    3a0c:	461a      	mov	r2, r3
    3a0e:	9b02      	ldr	r3, [sp, #8]
    3a10:	4293      	cmp	r3, r2
    3a12:	d3d2      	bcc.n	39ba <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3a14:	4a04      	ldr	r2, [pc, #16]	; (3a28 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3a16:	9b03      	ldr	r3, [sp, #12]
    3a18:	6113      	str	r3, [r2, #16]
}
    3a1a:	bf00      	nop
    3a1c:	b004      	add	sp, #16
    3a1e:	4770      	bx	lr
    3a20:	000074d4 	.word	0x000074d4
    3a24:	0000758c 	.word	0x0000758c
    3a28:	40048000 	.word	0x40048000

00003a2c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3a2c:	b500      	push	{lr}
    3a2e:	b089      	sub	sp, #36	; 0x24
    3a30:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a32:	2300      	movs	r3, #0
    3a34:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3a38:	4a21      	ldr	r2, [pc, #132]	; (3ac0 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3a3a:	9b01      	ldr	r3, [sp, #4]
    3a3c:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3a3e:	4b21      	ldr	r3, [pc, #132]	; (3ac4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a44:	f003 0301 	and.w	r3, r3, #1
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d12e      	bne.n	3aaa <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3a4c:	4b1e      	ldr	r3, [pc, #120]	; (3ac8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a4e:	2200      	movs	r2, #0
    3a50:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3a52:	f7ff ff69 	bl	3928 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a56:	aa03      	add	r2, sp, #12
    3a58:	a904      	add	r1, sp, #16
    3a5a:	a805      	add	r0, sp, #20
    3a5c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a60:	f7fe f8ae 	bl	1bc0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3a64:	4b17      	ldr	r3, [pc, #92]	; (3ac4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a6a:	0e1b      	lsrs	r3, r3, #24
    3a6c:	f003 0301 	and.w	r3, r3, #1
    3a70:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a72:	9a03      	ldr	r2, [sp, #12]
    3a74:	a904      	add	r1, sp, #16
    3a76:	ab05      	add	r3, sp, #20
    3a78:	4618      	mov	r0, r3
    3a7a:	f7fe f8bb 	bl	1bf4 <Clock_Ip_TimeoutExpired>
    3a7e:	4603      	mov	r3, r0
    3a80:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3a84:	9b06      	ldr	r3, [sp, #24]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d106      	bne.n	3a98 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3a8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a8e:	f083 0301 	eor.w	r3, r3, #1
    3a92:	b2db      	uxtb	r3, r3
    3a94:	2b00      	cmp	r3, #0
    3a96:	d1e5      	bne.n	3a64 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3a98:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d007      	beq.n	3ab0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3aa0:	2105      	movs	r1, #5
    3aa2:	2001      	movs	r0, #1
    3aa4:	f7fe f87c 	bl	1ba0 <Clock_Ip_ReportClockErrors>
    3aa8:	e002      	b.n	3ab0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3aaa:	4b07      	ldr	r3, [pc, #28]	; (3ac8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3aac:	2201      	movs	r2, #1
    3aae:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3ab0:	9801      	ldr	r0, [sp, #4]
    3ab2:	f7ff ff49 	bl	3948 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3ab6:	bf00      	nop
    3ab8:	b009      	add	sp, #36	; 0x24
    3aba:	f85d fb04 	ldr.w	pc, [sp], #4
    3abe:	bf00      	nop
    3ac0:	1fff8ba8 	.word	0x1fff8ba8
    3ac4:	40064000 	.word	0x40064000
    3ac8:	1fff8b18 	.word	0x1fff8b18

00003acc <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3acc:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3ace:	2300      	movs	r3, #0
    3ad0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3ad2:	4b29      	ldr	r3, [pc, #164]	; (3b78 <getFircConfig+0xac>)
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d024      	beq.n	3b24 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3ada:	2300      	movs	r3, #0
    3adc:	9301      	str	r3, [sp, #4]
    3ade:	e01a      	b.n	3b16 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3ae0:	4b25      	ldr	r3, [pc, #148]	; (3b78 <getFircConfig+0xac>)
    3ae2:	6819      	ldr	r1, [r3, #0]
    3ae4:	9a01      	ldr	r2, [sp, #4]
    3ae6:	4613      	mov	r3, r2
    3ae8:	005b      	lsls	r3, r3, #1
    3aea:	4413      	add	r3, r2
    3aec:	009b      	lsls	r3, r3, #2
    3aee:	440b      	add	r3, r1
    3af0:	3314      	adds	r3, #20
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	2b05      	cmp	r3, #5
    3af6:	d10b      	bne.n	3b10 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3af8:	4b1f      	ldr	r3, [pc, #124]	; (3b78 <getFircConfig+0xac>)
    3afa:	6819      	ldr	r1, [r3, #0]
    3afc:	9a01      	ldr	r2, [sp, #4]
    3afe:	4613      	mov	r3, r2
    3b00:	005b      	lsls	r3, r3, #1
    3b02:	4413      	add	r3, r2
    3b04:	009b      	lsls	r3, r3, #2
    3b06:	3310      	adds	r3, #16
    3b08:	440b      	add	r3, r1
    3b0a:	3304      	adds	r3, #4
    3b0c:	9300      	str	r3, [sp, #0]
                break;
    3b0e:	e009      	b.n	3b24 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3b10:	9b01      	ldr	r3, [sp, #4]
    3b12:	3301      	adds	r3, #1
    3b14:	9301      	str	r3, [sp, #4]
    3b16:	4b18      	ldr	r3, [pc, #96]	; (3b78 <getFircConfig+0xac>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	7a1b      	ldrb	r3, [r3, #8]
    3b1c:	461a      	mov	r2, r3
    3b1e:	9b01      	ldr	r3, [sp, #4]
    3b20:	4293      	cmp	r3, r2
    3b22:	d3dd      	bcc.n	3ae0 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3b24:	9b00      	ldr	r3, [sp, #0]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d121      	bne.n	3b6e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3b2a:	4b14      	ldr	r3, [pc, #80]	; (3b7c <getFircConfig+0xb0>)
    3b2c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3b2e:	4b13      	ldr	r3, [pc, #76]	; (3b7c <getFircConfig+0xb0>)
    3b30:	2205      	movs	r2, #5
    3b32:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3b34:	4b12      	ldr	r3, [pc, #72]	; (3b80 <getFircConfig+0xb4>)
    3b36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b3a:	b29b      	uxth	r3, r3
    3b3c:	f003 0301 	and.w	r3, r3, #1
    3b40:	b29a      	uxth	r2, r3
    3b42:	4b0e      	ldr	r3, [pc, #56]	; (3b7c <getFircConfig+0xb0>)
    3b44:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3b46:	4b0e      	ldr	r3, [pc, #56]	; (3b80 <getFircConfig+0xb4>)
    3b48:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3b4c:	b2db      	uxtb	r3, r3
    3b4e:	f003 0303 	and.w	r3, r3, #3
    3b52:	b2da      	uxtb	r2, r3
    3b54:	4b09      	ldr	r3, [pc, #36]	; (3b7c <getFircConfig+0xb0>)
    3b56:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3b58:	4b09      	ldr	r3, [pc, #36]	; (3b80 <getFircConfig+0xb4>)
    3b5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b5e:	b2db      	uxtb	r3, r3
    3b60:	10db      	asrs	r3, r3, #3
    3b62:	b2db      	uxtb	r3, r3
    3b64:	f003 0301 	and.w	r3, r3, #1
    3b68:	b2da      	uxtb	r2, r3
    3b6a:	4b04      	ldr	r3, [pc, #16]	; (3b7c <getFircConfig+0xb0>)
    3b6c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3b6e:	9b00      	ldr	r3, [sp, #0]
}
    3b70:	4618      	mov	r0, r3
    3b72:	b002      	add	sp, #8
    3b74:	4770      	bx	lr
    3b76:	bf00      	nop
    3b78:	1fff8ba8 	.word	0x1fff8ba8
    3b7c:	1fff8c14 	.word	0x1fff8c14
    3b80:	40064000 	.word	0x40064000

00003b84 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3b84:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3b86:	2300      	movs	r3, #0
    3b88:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3b8a:	4b20      	ldr	r3, [pc, #128]	; (3c0c <getSoscConfig+0x88>)
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d024      	beq.n	3bdc <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3b92:	2300      	movs	r3, #0
    3b94:	9301      	str	r3, [sp, #4]
    3b96:	e01a      	b.n	3bce <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3b98:	4b1c      	ldr	r3, [pc, #112]	; (3c0c <getSoscConfig+0x88>)
    3b9a:	6819      	ldr	r1, [r3, #0]
    3b9c:	9a01      	ldr	r2, [sp, #4]
    3b9e:	4613      	mov	r3, r2
    3ba0:	009b      	lsls	r3, r3, #2
    3ba2:	4413      	add	r3, r2
    3ba4:	009b      	lsls	r3, r3, #2
    3ba6:	440b      	add	r3, r1
    3ba8:	332c      	adds	r3, #44	; 0x2c
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	2b08      	cmp	r3, #8
    3bae:	d10b      	bne.n	3bc8 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3bb0:	4b16      	ldr	r3, [pc, #88]	; (3c0c <getSoscConfig+0x88>)
    3bb2:	6819      	ldr	r1, [r3, #0]
    3bb4:	9a01      	ldr	r2, [sp, #4]
    3bb6:	4613      	mov	r3, r2
    3bb8:	009b      	lsls	r3, r3, #2
    3bba:	4413      	add	r3, r2
    3bbc:	009b      	lsls	r3, r3, #2
    3bbe:	3328      	adds	r3, #40	; 0x28
    3bc0:	440b      	add	r3, r1
    3bc2:	3304      	adds	r3, #4
    3bc4:	9300      	str	r3, [sp, #0]
                break;
    3bc6:	e009      	b.n	3bdc <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3bc8:	9b01      	ldr	r3, [sp, #4]
    3bca:	3301      	adds	r3, #1
    3bcc:	9301      	str	r3, [sp, #4]
    3bce:	4b0f      	ldr	r3, [pc, #60]	; (3c0c <getSoscConfig+0x88>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	7a5b      	ldrb	r3, [r3, #9]
    3bd4:	461a      	mov	r2, r3
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	4293      	cmp	r3, r2
    3bda:	d3dd      	bcc.n	3b98 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3bdc:	9b00      	ldr	r3, [sp, #0]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d110      	bne.n	3c04 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3be2:	4b0b      	ldr	r3, [pc, #44]	; (3c10 <getSoscConfig+0x8c>)
    3be4:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3be6:	4b0a      	ldr	r3, [pc, #40]	; (3c10 <getSoscConfig+0x8c>)
    3be8:	2208      	movs	r2, #8
    3bea:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3bec:	4b09      	ldr	r3, [pc, #36]	; (3c14 <getSoscConfig+0x90>)
    3bee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3bf2:	b29b      	uxth	r3, r3
    3bf4:	f003 0301 	and.w	r3, r3, #1
    3bf8:	b29a      	uxth	r2, r3
    3bfa:	4b05      	ldr	r3, [pc, #20]	; (3c10 <getSoscConfig+0x8c>)
    3bfc:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    3bfe:	4b04      	ldr	r3, [pc, #16]	; (3c10 <getSoscConfig+0x8c>)
    3c00:	4a05      	ldr	r2, [pc, #20]	; (3c18 <getSoscConfig+0x94>)
    3c02:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    3c04:	9b00      	ldr	r3, [sp, #0]
}
    3c06:	4618      	mov	r0, r3
    3c08:	b002      	add	sp, #8
    3c0a:	4770      	bx	lr
    3c0c:	1fff8ba8 	.word	0x1fff8ba8
    3c10:	1fff8c20 	.word	0x1fff8c20
    3c14:	40064000 	.word	0x40064000
    3c18:	02625a00 	.word	0x02625a00

00003c1c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    3c1c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    3c1e:	2300      	movs	r3, #0
    3c20:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3c22:	4b28      	ldr	r3, [pc, #160]	; (3cc4 <getSpllConfig+0xa8>)
    3c24:	681b      	ldr	r3, [r3, #0]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d023      	beq.n	3c72 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3c2a:	2300      	movs	r3, #0
    3c2c:	9301      	str	r3, [sp, #4]
    3c2e:	e019      	b.n	3c64 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    3c30:	4b24      	ldr	r3, [pc, #144]	; (3cc4 <getSpllConfig+0xa8>)
    3c32:	6819      	ldr	r1, [r3, #0]
    3c34:	9a01      	ldr	r2, [sp, #4]
    3c36:	4613      	mov	r3, r2
    3c38:	009b      	lsls	r3, r3, #2
    3c3a:	4413      	add	r3, r2
    3c3c:	00db      	lsls	r3, r3, #3
    3c3e:	440b      	add	r3, r1
    3c40:	3340      	adds	r3, #64	; 0x40
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	2b09      	cmp	r3, #9
    3c46:	d10a      	bne.n	3c5e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    3c48:	4b1e      	ldr	r3, [pc, #120]	; (3cc4 <getSpllConfig+0xa8>)
    3c4a:	6819      	ldr	r1, [r3, #0]
    3c4c:	9a01      	ldr	r2, [sp, #4]
    3c4e:	4613      	mov	r3, r2
    3c50:	009b      	lsls	r3, r3, #2
    3c52:	4413      	add	r3, r2
    3c54:	00db      	lsls	r3, r3, #3
    3c56:	3340      	adds	r3, #64	; 0x40
    3c58:	440b      	add	r3, r1
    3c5a:	9300      	str	r3, [sp, #0]
                break;
    3c5c:	e009      	b.n	3c72 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3c5e:	9b01      	ldr	r3, [sp, #4]
    3c60:	3301      	adds	r3, #1
    3c62:	9301      	str	r3, [sp, #4]
    3c64:	4b17      	ldr	r3, [pc, #92]	; (3cc4 <getSpllConfig+0xa8>)
    3c66:	681b      	ldr	r3, [r3, #0]
    3c68:	7a9b      	ldrb	r3, [r3, #10]
    3c6a:	461a      	mov	r2, r3
    3c6c:	9b01      	ldr	r3, [sp, #4]
    3c6e:	4293      	cmp	r3, r2
    3c70:	d3de      	bcc.n	3c30 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3c72:	9b00      	ldr	r3, [sp, #0]
    3c74:	2b00      	cmp	r3, #0
    3c76:	d121      	bne.n	3cbc <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    3c78:	4b13      	ldr	r3, [pc, #76]	; (3cc8 <getSpllConfig+0xac>)
    3c7a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    3c7c:	4b12      	ldr	r3, [pc, #72]	; (3cc8 <getSpllConfig+0xac>)
    3c7e:	2209      	movs	r2, #9
    3c80:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    3c82:	4b12      	ldr	r3, [pc, #72]	; (3ccc <getSpllConfig+0xb0>)
    3c84:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c88:	b29b      	uxth	r3, r3
    3c8a:	f003 0301 	and.w	r3, r3, #1
    3c8e:	b29a      	uxth	r2, r3
    3c90:	4b0d      	ldr	r3, [pc, #52]	; (3cc8 <getSpllConfig+0xac>)
    3c92:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    3c94:	4b0d      	ldr	r3, [pc, #52]	; (3ccc <getSpllConfig+0xb0>)
    3c96:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c9a:	0a1b      	lsrs	r3, r3, #8
    3c9c:	b2db      	uxtb	r3, r3
    3c9e:	f003 0307 	and.w	r3, r3, #7
    3ca2:	b2da      	uxtb	r2, r3
    3ca4:	4b08      	ldr	r3, [pc, #32]	; (3cc8 <getSpllConfig+0xac>)
    3ca6:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    3ca8:	4b08      	ldr	r3, [pc, #32]	; (3ccc <getSpllConfig+0xb0>)
    3caa:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3cae:	0c1b      	lsrs	r3, r3, #16
    3cb0:	b2db      	uxtb	r3, r3
    3cb2:	f003 031f 	and.w	r3, r3, #31
    3cb6:	b2da      	uxtb	r2, r3
    3cb8:	4b03      	ldr	r3, [pc, #12]	; (3cc8 <getSpllConfig+0xac>)
    3cba:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    3cbc:	9b00      	ldr	r3, [sp, #0]
}
    3cbe:	4618      	mov	r0, r3
    3cc0:	b002      	add	sp, #8
    3cc2:	4770      	bx	lr
    3cc4:	1fff8ba8 	.word	0x1fff8ba8
    3cc8:	1fff8c34 	.word	0x1fff8c34
    3ccc:	40064000 	.word	0x40064000

00003cd0 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    3cd0:	b086      	sub	sp, #24
    3cd2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    3cd4:	2300      	movs	r3, #0
    3cd6:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	2b1b      	cmp	r3, #27
    3cdc:	d00f      	beq.n	3cfe <getSelectorConfig+0x2e>
    3cde:	9b01      	ldr	r3, [sp, #4]
    3ce0:	2b1b      	cmp	r3, #27
    3ce2:	d80f      	bhi.n	3d04 <getSelectorConfig+0x34>
    3ce4:	9b01      	ldr	r3, [sp, #4]
    3ce6:	2b19      	cmp	r3, #25
    3ce8:	d003      	beq.n	3cf2 <getSelectorConfig+0x22>
    3cea:	9b01      	ldr	r3, [sp, #4]
    3cec:	2b1a      	cmp	r3, #26
    3cee:	d003      	beq.n	3cf8 <getSelectorConfig+0x28>
    3cf0:	e008      	b.n	3d04 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    3cf2:	2300      	movs	r3, #0
    3cf4:	9304      	str	r3, [sp, #16]
            break;
    3cf6:	e008      	b.n	3d0a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    3cf8:	2301      	movs	r3, #1
    3cfa:	9304      	str	r3, [sp, #16]
            break;
    3cfc:	e005      	b.n	3d0a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    3cfe:	2302      	movs	r3, #2
    3d00:	9304      	str	r3, [sp, #16]
            break;
    3d02:	e002      	b.n	3d0a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    3d04:	2300      	movs	r3, #0
    3d06:	9304      	str	r3, [sp, #16]
            break;
    3d08:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3d0a:	4b36      	ldr	r3, [pc, #216]	; (3de4 <getSelectorConfig+0x114>)
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d01d      	beq.n	3d4e <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3d12:	2300      	movs	r3, #0
    3d14:	9303      	str	r3, [sp, #12]
    3d16:	e013      	b.n	3d40 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    3d18:	4b32      	ldr	r3, [pc, #200]	; (3de4 <getSelectorConfig+0x114>)
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	9a03      	ldr	r2, [sp, #12]
    3d1e:	320d      	adds	r2, #13
    3d20:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3d24:	9a01      	ldr	r2, [sp, #4]
    3d26:	429a      	cmp	r2, r3
    3d28:	d107      	bne.n	3d3a <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    3d2a:	4b2e      	ldr	r3, [pc, #184]	; (3de4 <getSelectorConfig+0x114>)
    3d2c:	681a      	ldr	r2, [r3, #0]
    3d2e:	9b03      	ldr	r3, [sp, #12]
    3d30:	330d      	adds	r3, #13
    3d32:	00db      	lsls	r3, r3, #3
    3d34:	4413      	add	r3, r2
    3d36:	9305      	str	r3, [sp, #20]
                break;
    3d38:	e009      	b.n	3d4e <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3d3a:	9b03      	ldr	r3, [sp, #12]
    3d3c:	3301      	adds	r3, #1
    3d3e:	9303      	str	r3, [sp, #12]
    3d40:	4b28      	ldr	r3, [pc, #160]	; (3de4 <getSelectorConfig+0x114>)
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	7adb      	ldrb	r3, [r3, #11]
    3d46:	461a      	mov	r2, r3
    3d48:	9b03      	ldr	r3, [sp, #12]
    3d4a:	4293      	cmp	r3, r2
    3d4c:	d3e4      	bcc.n	3d18 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3d4e:	9b05      	ldr	r3, [sp, #20]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d140      	bne.n	3dd6 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    3d54:	9b04      	ldr	r3, [sp, #16]
    3d56:	00db      	lsls	r3, r3, #3
    3d58:	4a23      	ldr	r2, [pc, #140]	; (3de8 <getSelectorConfig+0x118>)
    3d5a:	4413      	add	r3, r2
    3d5c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    3d5e:	4922      	ldr	r1, [pc, #136]	; (3de8 <getSelectorConfig+0x118>)
    3d60:	9b04      	ldr	r3, [sp, #16]
    3d62:	9a01      	ldr	r2, [sp, #4]
    3d64:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    3d68:	9b01      	ldr	r3, [sp, #4]
    3d6a:	2b1b      	cmp	r3, #27
    3d6c:	d025      	beq.n	3dba <getSelectorConfig+0xea>
    3d6e:	9b01      	ldr	r3, [sp, #4]
    3d70:	2b1b      	cmp	r3, #27
    3d72:	d832      	bhi.n	3dda <getSelectorConfig+0x10a>
    3d74:	9b01      	ldr	r3, [sp, #4]
    3d76:	2b19      	cmp	r3, #25
    3d78:	d003      	beq.n	3d82 <getSelectorConfig+0xb2>
    3d7a:	9b01      	ldr	r3, [sp, #4]
    3d7c:	2b1a      	cmp	r3, #26
    3d7e:	d00e      	beq.n	3d9e <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3d80:	e02b      	b.n	3dda <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    3d82:	4b1a      	ldr	r3, [pc, #104]	; (3dec <getSelectorConfig+0x11c>)
    3d84:	695b      	ldr	r3, [r3, #20]
    3d86:	0e1b      	lsrs	r3, r3, #24
    3d88:	f003 030f 	and.w	r3, r3, #15
    3d8c:	4a18      	ldr	r2, [pc, #96]	; (3df0 <getSelectorConfig+0x120>)
    3d8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d92:	4915      	ldr	r1, [pc, #84]	; (3de8 <getSelectorConfig+0x118>)
    3d94:	9b04      	ldr	r3, [sp, #16]
    3d96:	00db      	lsls	r3, r3, #3
    3d98:	440b      	add	r3, r1
    3d9a:	605a      	str	r2, [r3, #4]
                break;
    3d9c:	e01e      	b.n	3ddc <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    3d9e:	4b13      	ldr	r3, [pc, #76]	; (3dec <getSelectorConfig+0x11c>)
    3da0:	699b      	ldr	r3, [r3, #24]
    3da2:	0e1b      	lsrs	r3, r3, #24
    3da4:	f003 030f 	and.w	r3, r3, #15
    3da8:	4a11      	ldr	r2, [pc, #68]	; (3df0 <getSelectorConfig+0x120>)
    3daa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3dae:	490e      	ldr	r1, [pc, #56]	; (3de8 <getSelectorConfig+0x118>)
    3db0:	9b04      	ldr	r3, [sp, #16]
    3db2:	00db      	lsls	r3, r3, #3
    3db4:	440b      	add	r3, r1
    3db6:	605a      	str	r2, [r3, #4]
                break;
    3db8:	e010      	b.n	3ddc <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    3dba:	4b0c      	ldr	r3, [pc, #48]	; (3dec <getSelectorConfig+0x11c>)
    3dbc:	69db      	ldr	r3, [r3, #28]
    3dbe:	0e1b      	lsrs	r3, r3, #24
    3dc0:	f003 030f 	and.w	r3, r3, #15
    3dc4:	4a0a      	ldr	r2, [pc, #40]	; (3df0 <getSelectorConfig+0x120>)
    3dc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3dca:	4907      	ldr	r1, [pc, #28]	; (3de8 <getSelectorConfig+0x118>)
    3dcc:	9b04      	ldr	r3, [sp, #16]
    3dce:	00db      	lsls	r3, r3, #3
    3dd0:	440b      	add	r3, r1
    3dd2:	605a      	str	r2, [r3, #4]
                break;
    3dd4:	e002      	b.n	3ddc <getSelectorConfig+0x10c>
        }
    }
    3dd6:	bf00      	nop
    3dd8:	e000      	b.n	3ddc <getSelectorConfig+0x10c>
                break;
    3dda:	bf00      	nop

    return ReturnValue;
    3ddc:	9b05      	ldr	r3, [sp, #20]
}
    3dde:	4618      	mov	r0, r3
    3de0:	b006      	add	sp, #24
    3de2:	4770      	bx	lr
    3de4:	1fff8ba8 	.word	0x1fff8ba8
    3de8:	1fff8c5c 	.word	0x1fff8c5c
    3dec:	40064000 	.word	0x40064000
    3df0:	00007854 	.word	0x00007854

00003df4 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    3df4:	b086      	sub	sp, #24
    3df6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3df8:	2300      	movs	r3, #0
    3dfa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3dfc:	2300      	movs	r3, #0
    3dfe:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3e00:	9b01      	ldr	r3, [sp, #4]
    3e02:	2b1f      	cmp	r3, #31
    3e04:	d00f      	beq.n	3e26 <getCoreDividerConfig+0x32>
    3e06:	9b01      	ldr	r3, [sp, #4]
    3e08:	2b1f      	cmp	r3, #31
    3e0a:	d80f      	bhi.n	3e2c <getCoreDividerConfig+0x38>
    3e0c:	9b01      	ldr	r3, [sp, #4]
    3e0e:	2b1d      	cmp	r3, #29
    3e10:	d003      	beq.n	3e1a <getCoreDividerConfig+0x26>
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	2b1e      	cmp	r3, #30
    3e16:	d003      	beq.n	3e20 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3e18:	e008      	b.n	3e2c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3e1a:	2300      	movs	r3, #0
    3e1c:	9304      	str	r3, [sp, #16]
            break;
    3e1e:	e006      	b.n	3e2e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3e20:	2301      	movs	r3, #1
    3e22:	9304      	str	r3, [sp, #16]
            break;
    3e24:	e003      	b.n	3e2e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3e26:	2302      	movs	r3, #2
    3e28:	9304      	str	r3, [sp, #16]
            break;
    3e2a:	e000      	b.n	3e2e <getCoreDividerConfig+0x3a>
                break;
    3e2c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3e2e:	4b41      	ldr	r3, [pc, #260]	; (3f34 <getCoreDividerConfig+0x140>)
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d026      	beq.n	3e84 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e36:	2300      	movs	r3, #0
    3e38:	9303      	str	r3, [sp, #12]
    3e3a:	e01c      	b.n	3e76 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3e3c:	4b3d      	ldr	r3, [pc, #244]	; (3f34 <getCoreDividerConfig+0x140>)
    3e3e:	6819      	ldr	r1, [r3, #0]
    3e40:	9a03      	ldr	r2, [sp, #12]
    3e42:	4613      	mov	r3, r2
    3e44:	005b      	lsls	r3, r3, #1
    3e46:	4413      	add	r3, r2
    3e48:	009b      	lsls	r3, r3, #2
    3e4a:	440b      	add	r3, r1
    3e4c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e50:	681b      	ldr	r3, [r3, #0]
    3e52:	9a01      	ldr	r2, [sp, #4]
    3e54:	429a      	cmp	r2, r3
    3e56:	d10b      	bne.n	3e70 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3e58:	4b36      	ldr	r3, [pc, #216]	; (3f34 <getCoreDividerConfig+0x140>)
    3e5a:	6819      	ldr	r1, [r3, #0]
    3e5c:	9a03      	ldr	r2, [sp, #12]
    3e5e:	4613      	mov	r3, r2
    3e60:	005b      	lsls	r3, r3, #1
    3e62:	4413      	add	r3, r2
    3e64:	009b      	lsls	r3, r3, #2
    3e66:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e6a:	440b      	add	r3, r1
    3e6c:	9305      	str	r3, [sp, #20]
                break;
    3e6e:	e009      	b.n	3e84 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3e70:	9b03      	ldr	r3, [sp, #12]
    3e72:	3301      	adds	r3, #1
    3e74:	9303      	str	r3, [sp, #12]
    3e76:	4b2f      	ldr	r3, [pc, #188]	; (3f34 <getCoreDividerConfig+0x140>)
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	7b1b      	ldrb	r3, [r3, #12]
    3e7c:	461a      	mov	r2, r3
    3e7e:	9b03      	ldr	r3, [sp, #12]
    3e80:	4293      	cmp	r3, r2
    3e82:	d3db      	bcc.n	3e3c <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3e84:	9b05      	ldr	r3, [sp, #20]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d14d      	bne.n	3f26 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    3e8a:	9a04      	ldr	r2, [sp, #16]
    3e8c:	4613      	mov	r3, r2
    3e8e:	005b      	lsls	r3, r3, #1
    3e90:	4413      	add	r3, r2
    3e92:	009b      	lsls	r3, r3, #2
    3e94:	4a28      	ldr	r2, [pc, #160]	; (3f38 <getCoreDividerConfig+0x144>)
    3e96:	4413      	add	r3, r2
    3e98:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    3e9a:	4927      	ldr	r1, [pc, #156]	; (3f38 <getCoreDividerConfig+0x144>)
    3e9c:	9a04      	ldr	r2, [sp, #16]
    3e9e:	4613      	mov	r3, r2
    3ea0:	005b      	lsls	r3, r3, #1
    3ea2:	4413      	add	r3, r2
    3ea4:	009b      	lsls	r3, r3, #2
    3ea6:	440b      	add	r3, r1
    3ea8:	9a01      	ldr	r2, [sp, #4]
    3eaa:	601a      	str	r2, [r3, #0]
        switch(Name)
    3eac:	9b01      	ldr	r3, [sp, #4]
    3eae:	2b1f      	cmp	r3, #31
    3eb0:	d029      	beq.n	3f06 <getCoreDividerConfig+0x112>
    3eb2:	9b01      	ldr	r3, [sp, #4]
    3eb4:	2b1f      	cmp	r3, #31
    3eb6:	d838      	bhi.n	3f2a <getCoreDividerConfig+0x136>
    3eb8:	9b01      	ldr	r3, [sp, #4]
    3eba:	2b1d      	cmp	r3, #29
    3ebc:	d003      	beq.n	3ec6 <getCoreDividerConfig+0xd2>
    3ebe:	9b01      	ldr	r3, [sp, #4]
    3ec0:	2b1e      	cmp	r3, #30
    3ec2:	d010      	beq.n	3ee6 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3ec4:	e031      	b.n	3f2a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    3ec6:	4b1d      	ldr	r3, [pc, #116]	; (3f3c <getCoreDividerConfig+0x148>)
    3ec8:	695b      	ldr	r3, [r3, #20]
    3eca:	0c1b      	lsrs	r3, r3, #16
    3ecc:	f003 030f 	and.w	r3, r3, #15
    3ed0:	1c59      	adds	r1, r3, #1
    3ed2:	4819      	ldr	r0, [pc, #100]	; (3f38 <getCoreDividerConfig+0x144>)
    3ed4:	9a04      	ldr	r2, [sp, #16]
    3ed6:	4613      	mov	r3, r2
    3ed8:	005b      	lsls	r3, r3, #1
    3eda:	4413      	add	r3, r2
    3edc:	009b      	lsls	r3, r3, #2
    3ede:	4403      	add	r3, r0
    3ee0:	3304      	adds	r3, #4
    3ee2:	6019      	str	r1, [r3, #0]
                break;
    3ee4:	e022      	b.n	3f2c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    3ee6:	4b15      	ldr	r3, [pc, #84]	; (3f3c <getCoreDividerConfig+0x148>)
    3ee8:	699b      	ldr	r3, [r3, #24]
    3eea:	0c1b      	lsrs	r3, r3, #16
    3eec:	f003 030f 	and.w	r3, r3, #15
    3ef0:	1c59      	adds	r1, r3, #1
    3ef2:	4811      	ldr	r0, [pc, #68]	; (3f38 <getCoreDividerConfig+0x144>)
    3ef4:	9a04      	ldr	r2, [sp, #16]
    3ef6:	4613      	mov	r3, r2
    3ef8:	005b      	lsls	r3, r3, #1
    3efa:	4413      	add	r3, r2
    3efc:	009b      	lsls	r3, r3, #2
    3efe:	4403      	add	r3, r0
    3f00:	3304      	adds	r3, #4
    3f02:	6019      	str	r1, [r3, #0]
                break;
    3f04:	e012      	b.n	3f2c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    3f06:	4b0d      	ldr	r3, [pc, #52]	; (3f3c <getCoreDividerConfig+0x148>)
    3f08:	69db      	ldr	r3, [r3, #28]
    3f0a:	0c1b      	lsrs	r3, r3, #16
    3f0c:	f003 030f 	and.w	r3, r3, #15
    3f10:	1c59      	adds	r1, r3, #1
    3f12:	4809      	ldr	r0, [pc, #36]	; (3f38 <getCoreDividerConfig+0x144>)
    3f14:	9a04      	ldr	r2, [sp, #16]
    3f16:	4613      	mov	r3, r2
    3f18:	005b      	lsls	r3, r3, #1
    3f1a:	4413      	add	r3, r2
    3f1c:	009b      	lsls	r3, r3, #2
    3f1e:	4403      	add	r3, r0
    3f20:	3304      	adds	r3, #4
    3f22:	6019      	str	r1, [r3, #0]
                break;
    3f24:	e002      	b.n	3f2c <getCoreDividerConfig+0x138>
        }
    }
    3f26:	bf00      	nop
    3f28:	e000      	b.n	3f2c <getCoreDividerConfig+0x138>
                break;
    3f2a:	bf00      	nop

    return ReturnValue;
    3f2c:	9b05      	ldr	r3, [sp, #20]
}
    3f2e:	4618      	mov	r0, r3
    3f30:	b006      	add	sp, #24
    3f32:	4770      	bx	lr
    3f34:	1fff8ba8 	.word	0x1fff8ba8
    3f38:	1fff8c74 	.word	0x1fff8c74
    3f3c:	40064000 	.word	0x40064000

00003f40 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    3f40:	b086      	sub	sp, #24
    3f42:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3f44:	2300      	movs	r3, #0
    3f46:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3f48:	2300      	movs	r3, #0
    3f4a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3f4c:	9b01      	ldr	r3, [sp, #4]
    3f4e:	2b23      	cmp	r3, #35	; 0x23
    3f50:	d00f      	beq.n	3f72 <getBusDividerConfig+0x32>
    3f52:	9b01      	ldr	r3, [sp, #4]
    3f54:	2b23      	cmp	r3, #35	; 0x23
    3f56:	d80f      	bhi.n	3f78 <getBusDividerConfig+0x38>
    3f58:	9b01      	ldr	r3, [sp, #4]
    3f5a:	2b21      	cmp	r3, #33	; 0x21
    3f5c:	d003      	beq.n	3f66 <getBusDividerConfig+0x26>
    3f5e:	9b01      	ldr	r3, [sp, #4]
    3f60:	2b22      	cmp	r3, #34	; 0x22
    3f62:	d003      	beq.n	3f6c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3f64:	e008      	b.n	3f78 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3f66:	2300      	movs	r3, #0
    3f68:	9304      	str	r3, [sp, #16]
            break;
    3f6a:	e006      	b.n	3f7a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3f6c:	2301      	movs	r3, #1
    3f6e:	9304      	str	r3, [sp, #16]
            break;
    3f70:	e003      	b.n	3f7a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3f72:	2302      	movs	r3, #2
    3f74:	9304      	str	r3, [sp, #16]
            break;
    3f76:	e000      	b.n	3f7a <getBusDividerConfig+0x3a>
                break;
    3f78:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3f7a:	4b41      	ldr	r3, [pc, #260]	; (4080 <getBusDividerConfig+0x140>)
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d026      	beq.n	3fd0 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f82:	2300      	movs	r3, #0
    3f84:	9303      	str	r3, [sp, #12]
    3f86:	e01c      	b.n	3fc2 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3f88:	4b3d      	ldr	r3, [pc, #244]	; (4080 <getBusDividerConfig+0x140>)
    3f8a:	6819      	ldr	r1, [r3, #0]
    3f8c:	9a03      	ldr	r2, [sp, #12]
    3f8e:	4613      	mov	r3, r2
    3f90:	005b      	lsls	r3, r3, #1
    3f92:	4413      	add	r3, r2
    3f94:	009b      	lsls	r3, r3, #2
    3f96:	440b      	add	r3, r1
    3f98:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	9a01      	ldr	r2, [sp, #4]
    3fa0:	429a      	cmp	r2, r3
    3fa2:	d10b      	bne.n	3fbc <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3fa4:	4b36      	ldr	r3, [pc, #216]	; (4080 <getBusDividerConfig+0x140>)
    3fa6:	6819      	ldr	r1, [r3, #0]
    3fa8:	9a03      	ldr	r2, [sp, #12]
    3faa:	4613      	mov	r3, r2
    3fac:	005b      	lsls	r3, r3, #1
    3fae:	4413      	add	r3, r2
    3fb0:	009b      	lsls	r3, r3, #2
    3fb2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3fb6:	440b      	add	r3, r1
    3fb8:	9305      	str	r3, [sp, #20]
                break;
    3fba:	e009      	b.n	3fd0 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3fbc:	9b03      	ldr	r3, [sp, #12]
    3fbe:	3301      	adds	r3, #1
    3fc0:	9303      	str	r3, [sp, #12]
    3fc2:	4b2f      	ldr	r3, [pc, #188]	; (4080 <getBusDividerConfig+0x140>)
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	7b1b      	ldrb	r3, [r3, #12]
    3fc8:	461a      	mov	r2, r3
    3fca:	9b03      	ldr	r3, [sp, #12]
    3fcc:	4293      	cmp	r3, r2
    3fce:	d3db      	bcc.n	3f88 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3fd0:	9b05      	ldr	r3, [sp, #20]
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d14d      	bne.n	4072 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    3fd6:	9a04      	ldr	r2, [sp, #16]
    3fd8:	4613      	mov	r3, r2
    3fda:	005b      	lsls	r3, r3, #1
    3fdc:	4413      	add	r3, r2
    3fde:	009b      	lsls	r3, r3, #2
    3fe0:	4a28      	ldr	r2, [pc, #160]	; (4084 <getBusDividerConfig+0x144>)
    3fe2:	4413      	add	r3, r2
    3fe4:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    3fe6:	4927      	ldr	r1, [pc, #156]	; (4084 <getBusDividerConfig+0x144>)
    3fe8:	9a04      	ldr	r2, [sp, #16]
    3fea:	4613      	mov	r3, r2
    3fec:	005b      	lsls	r3, r3, #1
    3fee:	4413      	add	r3, r2
    3ff0:	009b      	lsls	r3, r3, #2
    3ff2:	440b      	add	r3, r1
    3ff4:	9a01      	ldr	r2, [sp, #4]
    3ff6:	601a      	str	r2, [r3, #0]
        switch(Name)
    3ff8:	9b01      	ldr	r3, [sp, #4]
    3ffa:	2b23      	cmp	r3, #35	; 0x23
    3ffc:	d029      	beq.n	4052 <getBusDividerConfig+0x112>
    3ffe:	9b01      	ldr	r3, [sp, #4]
    4000:	2b23      	cmp	r3, #35	; 0x23
    4002:	d838      	bhi.n	4076 <getBusDividerConfig+0x136>
    4004:	9b01      	ldr	r3, [sp, #4]
    4006:	2b21      	cmp	r3, #33	; 0x21
    4008:	d003      	beq.n	4012 <getBusDividerConfig+0xd2>
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	2b22      	cmp	r3, #34	; 0x22
    400e:	d010      	beq.n	4032 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4010:	e031      	b.n	4076 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4012:	4b1d      	ldr	r3, [pc, #116]	; (4088 <getBusDividerConfig+0x148>)
    4014:	695b      	ldr	r3, [r3, #20]
    4016:	091b      	lsrs	r3, r3, #4
    4018:	f003 030f 	and.w	r3, r3, #15
    401c:	1c59      	adds	r1, r3, #1
    401e:	4819      	ldr	r0, [pc, #100]	; (4084 <getBusDividerConfig+0x144>)
    4020:	9a04      	ldr	r2, [sp, #16]
    4022:	4613      	mov	r3, r2
    4024:	005b      	lsls	r3, r3, #1
    4026:	4413      	add	r3, r2
    4028:	009b      	lsls	r3, r3, #2
    402a:	4403      	add	r3, r0
    402c:	3304      	adds	r3, #4
    402e:	6019      	str	r1, [r3, #0]
                break;
    4030:	e022      	b.n	4078 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4032:	4b15      	ldr	r3, [pc, #84]	; (4088 <getBusDividerConfig+0x148>)
    4034:	699b      	ldr	r3, [r3, #24]
    4036:	091b      	lsrs	r3, r3, #4
    4038:	f003 030f 	and.w	r3, r3, #15
    403c:	1c59      	adds	r1, r3, #1
    403e:	4811      	ldr	r0, [pc, #68]	; (4084 <getBusDividerConfig+0x144>)
    4040:	9a04      	ldr	r2, [sp, #16]
    4042:	4613      	mov	r3, r2
    4044:	005b      	lsls	r3, r3, #1
    4046:	4413      	add	r3, r2
    4048:	009b      	lsls	r3, r3, #2
    404a:	4403      	add	r3, r0
    404c:	3304      	adds	r3, #4
    404e:	6019      	str	r1, [r3, #0]
                break;
    4050:	e012      	b.n	4078 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4052:	4b0d      	ldr	r3, [pc, #52]	; (4088 <getBusDividerConfig+0x148>)
    4054:	69db      	ldr	r3, [r3, #28]
    4056:	091b      	lsrs	r3, r3, #4
    4058:	f003 030f 	and.w	r3, r3, #15
    405c:	1c59      	adds	r1, r3, #1
    405e:	4809      	ldr	r0, [pc, #36]	; (4084 <getBusDividerConfig+0x144>)
    4060:	9a04      	ldr	r2, [sp, #16]
    4062:	4613      	mov	r3, r2
    4064:	005b      	lsls	r3, r3, #1
    4066:	4413      	add	r3, r2
    4068:	009b      	lsls	r3, r3, #2
    406a:	4403      	add	r3, r0
    406c:	3304      	adds	r3, #4
    406e:	6019      	str	r1, [r3, #0]
                break;
    4070:	e002      	b.n	4078 <getBusDividerConfig+0x138>
        }
    }
    4072:	bf00      	nop
    4074:	e000      	b.n	4078 <getBusDividerConfig+0x138>
                break;
    4076:	bf00      	nop

    return ReturnValue;
    4078:	9b05      	ldr	r3, [sp, #20]
}
    407a:	4618      	mov	r0, r3
    407c:	b006      	add	sp, #24
    407e:	4770      	bx	lr
    4080:	1fff8ba8 	.word	0x1fff8ba8
    4084:	1fff8c98 	.word	0x1fff8c98
    4088:	40064000 	.word	0x40064000

0000408c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    408c:	b086      	sub	sp, #24
    408e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4090:	2300      	movs	r3, #0
    4092:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4094:	2300      	movs	r3, #0
    4096:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4098:	9b01      	ldr	r3, [sp, #4]
    409a:	2b27      	cmp	r3, #39	; 0x27
    409c:	d00f      	beq.n	40be <getSlowDividerConfig+0x32>
    409e:	9b01      	ldr	r3, [sp, #4]
    40a0:	2b27      	cmp	r3, #39	; 0x27
    40a2:	d80f      	bhi.n	40c4 <getSlowDividerConfig+0x38>
    40a4:	9b01      	ldr	r3, [sp, #4]
    40a6:	2b25      	cmp	r3, #37	; 0x25
    40a8:	d003      	beq.n	40b2 <getSlowDividerConfig+0x26>
    40aa:	9b01      	ldr	r3, [sp, #4]
    40ac:	2b26      	cmp	r3, #38	; 0x26
    40ae:	d003      	beq.n	40b8 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    40b0:	e008      	b.n	40c4 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    40b2:	2300      	movs	r3, #0
    40b4:	9304      	str	r3, [sp, #16]
            break;
    40b6:	e006      	b.n	40c6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    40b8:	2301      	movs	r3, #1
    40ba:	9304      	str	r3, [sp, #16]
            break;
    40bc:	e003      	b.n	40c6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    40be:	2302      	movs	r3, #2
    40c0:	9304      	str	r3, [sp, #16]
            break;
    40c2:	e000      	b.n	40c6 <getSlowDividerConfig+0x3a>
                break;
    40c4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    40c6:	4b40      	ldr	r3, [pc, #256]	; (41c8 <getSlowDividerConfig+0x13c>)
    40c8:	681b      	ldr	r3, [r3, #0]
    40ca:	2b00      	cmp	r3, #0
    40cc:	d026      	beq.n	411c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    40ce:	2300      	movs	r3, #0
    40d0:	9303      	str	r3, [sp, #12]
    40d2:	e01c      	b.n	410e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    40d4:	4b3c      	ldr	r3, [pc, #240]	; (41c8 <getSlowDividerConfig+0x13c>)
    40d6:	6819      	ldr	r1, [r3, #0]
    40d8:	9a03      	ldr	r2, [sp, #12]
    40da:	4613      	mov	r3, r2
    40dc:	005b      	lsls	r3, r3, #1
    40de:	4413      	add	r3, r2
    40e0:	009b      	lsls	r3, r3, #2
    40e2:	440b      	add	r3, r1
    40e4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40e8:	681b      	ldr	r3, [r3, #0]
    40ea:	9a01      	ldr	r2, [sp, #4]
    40ec:	429a      	cmp	r2, r3
    40ee:	d10b      	bne.n	4108 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    40f0:	4b35      	ldr	r3, [pc, #212]	; (41c8 <getSlowDividerConfig+0x13c>)
    40f2:	6819      	ldr	r1, [r3, #0]
    40f4:	9a03      	ldr	r2, [sp, #12]
    40f6:	4613      	mov	r3, r2
    40f8:	005b      	lsls	r3, r3, #1
    40fa:	4413      	add	r3, r2
    40fc:	009b      	lsls	r3, r3, #2
    40fe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4102:	440b      	add	r3, r1
    4104:	9305      	str	r3, [sp, #20]
                break;
    4106:	e009      	b.n	411c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4108:	9b03      	ldr	r3, [sp, #12]
    410a:	3301      	adds	r3, #1
    410c:	9303      	str	r3, [sp, #12]
    410e:	4b2e      	ldr	r3, [pc, #184]	; (41c8 <getSlowDividerConfig+0x13c>)
    4110:	681b      	ldr	r3, [r3, #0]
    4112:	7b1b      	ldrb	r3, [r3, #12]
    4114:	461a      	mov	r2, r3
    4116:	9b03      	ldr	r3, [sp, #12]
    4118:	4293      	cmp	r3, r2
    411a:	d3db      	bcc.n	40d4 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    411c:	9b05      	ldr	r3, [sp, #20]
    411e:	2b00      	cmp	r3, #0
    4120:	d14a      	bne.n	41b8 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4122:	9a04      	ldr	r2, [sp, #16]
    4124:	4613      	mov	r3, r2
    4126:	005b      	lsls	r3, r3, #1
    4128:	4413      	add	r3, r2
    412a:	009b      	lsls	r3, r3, #2
    412c:	4a27      	ldr	r2, [pc, #156]	; (41cc <getSlowDividerConfig+0x140>)
    412e:	4413      	add	r3, r2
    4130:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4132:	4926      	ldr	r1, [pc, #152]	; (41cc <getSlowDividerConfig+0x140>)
    4134:	9a04      	ldr	r2, [sp, #16]
    4136:	4613      	mov	r3, r2
    4138:	005b      	lsls	r3, r3, #1
    413a:	4413      	add	r3, r2
    413c:	009b      	lsls	r3, r3, #2
    413e:	440b      	add	r3, r1
    4140:	9a01      	ldr	r2, [sp, #4]
    4142:	601a      	str	r2, [r3, #0]
        switch(Name)
    4144:	9b01      	ldr	r3, [sp, #4]
    4146:	2b27      	cmp	r3, #39	; 0x27
    4148:	d027      	beq.n	419a <getSlowDividerConfig+0x10e>
    414a:	9b01      	ldr	r3, [sp, #4]
    414c:	2b27      	cmp	r3, #39	; 0x27
    414e:	d835      	bhi.n	41bc <getSlowDividerConfig+0x130>
    4150:	9b01      	ldr	r3, [sp, #4]
    4152:	2b25      	cmp	r3, #37	; 0x25
    4154:	d003      	beq.n	415e <getSlowDividerConfig+0xd2>
    4156:	9b01      	ldr	r3, [sp, #4]
    4158:	2b26      	cmp	r3, #38	; 0x26
    415a:	d00f      	beq.n	417c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    415c:	e02e      	b.n	41bc <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    415e:	4b1c      	ldr	r3, [pc, #112]	; (41d0 <getSlowDividerConfig+0x144>)
    4160:	695b      	ldr	r3, [r3, #20]
    4162:	f003 030f 	and.w	r3, r3, #15
    4166:	1c59      	adds	r1, r3, #1
    4168:	4818      	ldr	r0, [pc, #96]	; (41cc <getSlowDividerConfig+0x140>)
    416a:	9a04      	ldr	r2, [sp, #16]
    416c:	4613      	mov	r3, r2
    416e:	005b      	lsls	r3, r3, #1
    4170:	4413      	add	r3, r2
    4172:	009b      	lsls	r3, r3, #2
    4174:	4403      	add	r3, r0
    4176:	3304      	adds	r3, #4
    4178:	6019      	str	r1, [r3, #0]
                break;
    417a:	e020      	b.n	41be <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    417c:	4b14      	ldr	r3, [pc, #80]	; (41d0 <getSlowDividerConfig+0x144>)
    417e:	699b      	ldr	r3, [r3, #24]
    4180:	f003 030f 	and.w	r3, r3, #15
    4184:	1c59      	adds	r1, r3, #1
    4186:	4811      	ldr	r0, [pc, #68]	; (41cc <getSlowDividerConfig+0x140>)
    4188:	9a04      	ldr	r2, [sp, #16]
    418a:	4613      	mov	r3, r2
    418c:	005b      	lsls	r3, r3, #1
    418e:	4413      	add	r3, r2
    4190:	009b      	lsls	r3, r3, #2
    4192:	4403      	add	r3, r0
    4194:	3304      	adds	r3, #4
    4196:	6019      	str	r1, [r3, #0]
                break;
    4198:	e011      	b.n	41be <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    419a:	4b0d      	ldr	r3, [pc, #52]	; (41d0 <getSlowDividerConfig+0x144>)
    419c:	69db      	ldr	r3, [r3, #28]
    419e:	f003 030f 	and.w	r3, r3, #15
    41a2:	1c59      	adds	r1, r3, #1
    41a4:	4809      	ldr	r0, [pc, #36]	; (41cc <getSlowDividerConfig+0x140>)
    41a6:	9a04      	ldr	r2, [sp, #16]
    41a8:	4613      	mov	r3, r2
    41aa:	005b      	lsls	r3, r3, #1
    41ac:	4413      	add	r3, r2
    41ae:	009b      	lsls	r3, r3, #2
    41b0:	4403      	add	r3, r0
    41b2:	3304      	adds	r3, #4
    41b4:	6019      	str	r1, [r3, #0]
                break;
    41b6:	e002      	b.n	41be <getSlowDividerConfig+0x132>
        }
    }
    41b8:	bf00      	nop
    41ba:	e000      	b.n	41be <getSlowDividerConfig+0x132>
                break;
    41bc:	bf00      	nop

    return ReturnValue;
    41be:	9b05      	ldr	r3, [sp, #20]
}
    41c0:	4618      	mov	r0, r3
    41c2:	b006      	add	sp, #24
    41c4:	4770      	bx	lr
    41c6:	bf00      	nop
    41c8:	1fff8ba8 	.word	0x1fff8ba8
    41cc:	1fff8cbc 	.word	0x1fff8cbc
    41d0:	40064000 	.word	0x40064000

000041d4 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    41d4:	b500      	push	{lr}
    41d6:	b083      	sub	sp, #12
    41d8:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    41da:	4b64      	ldr	r3, [pc, #400]	; (436c <Clock_Ip_ClockInitializeObjects+0x198>)
    41dc:	781b      	ldrb	r3, [r3, #0]
    41de:	f083 0301 	eor.w	r3, r3, #1
    41e2:	b2db      	uxtb	r3, r3
    41e4:	2b00      	cmp	r3, #0
    41e6:	d05b      	beq.n	42a0 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    41e8:	4b60      	ldr	r3, [pc, #384]	; (436c <Clock_Ip_ClockInitializeObjects+0x198>)
    41ea:	2201      	movs	r2, #1
    41ec:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    41ee:	4b60      	ldr	r3, [pc, #384]	; (4370 <Clock_Ip_ClockInitializeObjects+0x19c>)
    41f0:	785b      	ldrb	r3, [r3, #1]
    41f2:	461a      	mov	r2, r3
    41f4:	4613      	mov	r3, r2
    41f6:	009b      	lsls	r3, r3, #2
    41f8:	4413      	add	r3, r2
    41fa:	009b      	lsls	r3, r3, #2
    41fc:	4a5d      	ldr	r2, [pc, #372]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    41fe:	4413      	add	r3, r2
    4200:	4a5d      	ldr	r2, [pc, #372]	; (4378 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4202:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4204:	4b5d      	ldr	r3, [pc, #372]	; (437c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4206:	785b      	ldrb	r3, [r3, #1]
    4208:	461a      	mov	r2, r3
    420a:	4613      	mov	r3, r2
    420c:	009b      	lsls	r3, r3, #2
    420e:	4413      	add	r3, r2
    4210:	009b      	lsls	r3, r3, #2
    4212:	4a5b      	ldr	r2, [pc, #364]	; (4380 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4214:	4413      	add	r3, r2
    4216:	4a5b      	ldr	r2, [pc, #364]	; (4384 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4218:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    421a:	4b5b      	ldr	r3, [pc, #364]	; (4388 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    421c:	791b      	ldrb	r3, [r3, #4]
    421e:	461a      	mov	r2, r3
    4220:	4613      	mov	r3, r2
    4222:	005b      	lsls	r3, r3, #1
    4224:	4413      	add	r3, r2
    4226:	009b      	lsls	r3, r3, #2
    4228:	4a58      	ldr	r2, [pc, #352]	; (438c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    422a:	4413      	add	r3, r2
    422c:	4a58      	ldr	r2, [pc, #352]	; (4390 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    422e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4230:	4b58      	ldr	r3, [pc, #352]	; (4394 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4232:	795b      	ldrb	r3, [r3, #5]
    4234:	00db      	lsls	r3, r3, #3
    4236:	4a58      	ldr	r2, [pc, #352]	; (4398 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4238:	4413      	add	r3, r2
    423a:	4a58      	ldr	r2, [pc, #352]	; (439c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    423c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    423e:	4b55      	ldr	r3, [pc, #340]	; (4394 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4240:	79db      	ldrb	r3, [r3, #7]
    4242:	00db      	lsls	r3, r3, #3
    4244:	4a54      	ldr	r2, [pc, #336]	; (4398 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4246:	4413      	add	r3, r2
    4248:	4a55      	ldr	r2, [pc, #340]	; (43a0 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    424a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    424c:	4b55      	ldr	r3, [pc, #340]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    424e:	799b      	ldrb	r3, [r3, #6]
    4250:	009b      	lsls	r3, r3, #2
    4252:	4a55      	ldr	r2, [pc, #340]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4254:	4413      	add	r3, r2
    4256:	4a55      	ldr	r2, [pc, #340]	; (43ac <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4258:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    425a:	4b52      	ldr	r3, [pc, #328]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    425c:	7a1b      	ldrb	r3, [r3, #8]
    425e:	009b      	lsls	r3, r3, #2
    4260:	4a51      	ldr	r2, [pc, #324]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4262:	4413      	add	r3, r2
    4264:	4a52      	ldr	r2, [pc, #328]	; (43b0 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4266:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4268:	4b4e      	ldr	r3, [pc, #312]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    426a:	7a5b      	ldrb	r3, [r3, #9]
    426c:	009b      	lsls	r3, r3, #2
    426e:	4a4e      	ldr	r2, [pc, #312]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4270:	4413      	add	r3, r2
    4272:	4a50      	ldr	r2, [pc, #320]	; (43b4 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4274:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4276:	4b4b      	ldr	r3, [pc, #300]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4278:	7adb      	ldrb	r3, [r3, #11]
    427a:	009b      	lsls	r3, r3, #2
    427c:	4a4a      	ldr	r2, [pc, #296]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    427e:	4413      	add	r3, r2
    4280:	4a4d      	ldr	r2, [pc, #308]	; (43b8 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4282:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4284:	4b47      	ldr	r3, [pc, #284]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4286:	7b1b      	ldrb	r3, [r3, #12]
    4288:	009b      	lsls	r3, r3, #2
    428a:	4a47      	ldr	r2, [pc, #284]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    428c:	4413      	add	r3, r2
    428e:	4a4b      	ldr	r2, [pc, #300]	; (43bc <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4290:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4292:	4b44      	ldr	r3, [pc, #272]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4294:	7b9b      	ldrb	r3, [r3, #14]
    4296:	009b      	lsls	r3, r3, #2
    4298:	4a43      	ldr	r2, [pc, #268]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    429a:	4413      	add	r3, r2
    429c:	4a48      	ldr	r2, [pc, #288]	; (43c0 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    429e:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    42a0:	4b48      	ldr	r3, [pc, #288]	; (43c4 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    42a2:	781b      	ldrb	r3, [r3, #0]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d002      	beq.n	42ae <Clock_Ip_ClockInitializeObjects+0xda>
    42a8:	9b01      	ldr	r3, [sp, #4]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d003      	beq.n	42b6 <Clock_Ip_ClockInitializeObjects+0xe2>
    42ae:	4b46      	ldr	r3, [pc, #280]	; (43c8 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    42b0:	781b      	ldrb	r3, [r3, #0]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d056      	beq.n	4364 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    42b6:	f7ff fc09 	bl	3acc <getFircConfig>
    42ba:	4603      	mov	r3, r0
    42bc:	4a43      	ldr	r2, [pc, #268]	; (43cc <Clock_Ip_ClockInitializeObjects+0x1f8>)
    42be:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    42c0:	f7ff fc60 	bl	3b84 <getSoscConfig>
    42c4:	4603      	mov	r3, r0
    42c6:	4a42      	ldr	r2, [pc, #264]	; (43d0 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    42c8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    42ca:	f7ff fca7 	bl	3c1c <getSpllConfig>
    42ce:	4603      	mov	r3, r0
    42d0:	4a40      	ldr	r2, [pc, #256]	; (43d4 <Clock_Ip_ClockInitializeObjects+0x200>)
    42d2:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    42d4:	2019      	movs	r0, #25
    42d6:	f7ff fcfb 	bl	3cd0 <getSelectorConfig>
    42da:	4603      	mov	r3, r0
    42dc:	4a3e      	ldr	r2, [pc, #248]	; (43d8 <Clock_Ip_ClockInitializeObjects+0x204>)
    42de:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    42e0:	201a      	movs	r0, #26
    42e2:	f7ff fcf5 	bl	3cd0 <getSelectorConfig>
    42e6:	4603      	mov	r3, r0
    42e8:	4a3c      	ldr	r2, [pc, #240]	; (43dc <Clock_Ip_ClockInitializeObjects+0x208>)
    42ea:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    42ec:	201b      	movs	r0, #27
    42ee:	f7ff fcef 	bl	3cd0 <getSelectorConfig>
    42f2:	4603      	mov	r3, r0
    42f4:	4a3a      	ldr	r2, [pc, #232]	; (43e0 <Clock_Ip_ClockInitializeObjects+0x20c>)
    42f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    42f8:	201d      	movs	r0, #29
    42fa:	f7ff fd7b 	bl	3df4 <getCoreDividerConfig>
    42fe:	4603      	mov	r3, r0
    4300:	4a38      	ldr	r2, [pc, #224]	; (43e4 <Clock_Ip_ClockInitializeObjects+0x210>)
    4302:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4304:	201e      	movs	r0, #30
    4306:	f7ff fd75 	bl	3df4 <getCoreDividerConfig>
    430a:	4603      	mov	r3, r0
    430c:	4a36      	ldr	r2, [pc, #216]	; (43e8 <Clock_Ip_ClockInitializeObjects+0x214>)
    430e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4310:	201f      	movs	r0, #31
    4312:	f7ff fd6f 	bl	3df4 <getCoreDividerConfig>
    4316:	4603      	mov	r3, r0
    4318:	4a34      	ldr	r2, [pc, #208]	; (43ec <Clock_Ip_ClockInitializeObjects+0x218>)
    431a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    431c:	2021      	movs	r0, #33	; 0x21
    431e:	f7ff fe0f 	bl	3f40 <getBusDividerConfig>
    4322:	4603      	mov	r3, r0
    4324:	4a32      	ldr	r2, [pc, #200]	; (43f0 <Clock_Ip_ClockInitializeObjects+0x21c>)
    4326:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4328:	2022      	movs	r0, #34	; 0x22
    432a:	f7ff fe09 	bl	3f40 <getBusDividerConfig>
    432e:	4603      	mov	r3, r0
    4330:	4a30      	ldr	r2, [pc, #192]	; (43f4 <Clock_Ip_ClockInitializeObjects+0x220>)
    4332:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4334:	2023      	movs	r0, #35	; 0x23
    4336:	f7ff fe03 	bl	3f40 <getBusDividerConfig>
    433a:	4603      	mov	r3, r0
    433c:	4a2e      	ldr	r2, [pc, #184]	; (43f8 <Clock_Ip_ClockInitializeObjects+0x224>)
    433e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4340:	2025      	movs	r0, #37	; 0x25
    4342:	f7ff fea3 	bl	408c <getSlowDividerConfig>
    4346:	4603      	mov	r3, r0
    4348:	4a2c      	ldr	r2, [pc, #176]	; (43fc <Clock_Ip_ClockInitializeObjects+0x228>)
    434a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    434c:	2026      	movs	r0, #38	; 0x26
    434e:	f7ff fe9d 	bl	408c <getSlowDividerConfig>
    4352:	4603      	mov	r3, r0
    4354:	4a2a      	ldr	r2, [pc, #168]	; (4400 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4356:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4358:	2027      	movs	r0, #39	; 0x27
    435a:	f7ff fe97 	bl	408c <getSlowDividerConfig>
    435e:	4603      	mov	r3, r0
    4360:	4a28      	ldr	r2, [pc, #160]	; (4404 <Clock_Ip_ClockInitializeObjects+0x230>)
    4362:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4364:	bf00      	nop
    4366:	b003      	add	sp, #12
    4368:	f85d fb04 	ldr.w	pc, [sp], #4
    436c:	1fff8ce0 	.word	0x1fff8ce0
    4370:	00007184 	.word	0x00007184
    4374:	000077d0 	.word	0x000077d0
    4378:	1fff8bac 	.word	0x1fff8bac
    437c:	00007144 	.word	0x00007144
    4380:	00007718 	.word	0x00007718
    4384:	1fff8bb0 	.word	0x1fff8bb0
    4388:	00007154 	.word	0x00007154
    438c:	00007784 	.word	0x00007784
    4390:	1fff8bb4 	.word	0x1fff8bb4
    4394:	00007194 	.word	0x00007194
    4398:	000077fc 	.word	0x000077fc
    439c:	1fff8bb8 	.word	0x1fff8bb8
    43a0:	1fff8bf4 	.word	0x1fff8bf4
    43a4:	00007124 	.word	0x00007124
    43a8:	000076d4 	.word	0x000076d4
    43ac:	1fff8bbc 	.word	0x1fff8bbc
    43b0:	1fff8bf8 	.word	0x1fff8bf8
    43b4:	1fff8bc0 	.word	0x1fff8bc0
    43b8:	1fff8bfc 	.word	0x1fff8bfc
    43bc:	1fff8bc4 	.word	0x1fff8bc4
    43c0:	1fff8c00 	.word	0x1fff8c00
    43c4:	1fff8b19 	.word	0x1fff8b19
    43c8:	1fff8b10 	.word	0x1fff8b10
    43cc:	1fff8bc8 	.word	0x1fff8bc8
    43d0:	1fff8bcc 	.word	0x1fff8bcc
    43d4:	1fff8bd0 	.word	0x1fff8bd0
    43d8:	1fff8bd4 	.word	0x1fff8bd4
    43dc:	1fff8bd8 	.word	0x1fff8bd8
    43e0:	1fff8c04 	.word	0x1fff8c04
    43e4:	1fff8bdc 	.word	0x1fff8bdc
    43e8:	1fff8be0 	.word	0x1fff8be0
    43ec:	1fff8c08 	.word	0x1fff8c08
    43f0:	1fff8be4 	.word	0x1fff8be4
    43f4:	1fff8be8 	.word	0x1fff8be8
    43f8:	1fff8c0c 	.word	0x1fff8c0c
    43fc:	1fff8bec 	.word	0x1fff8bec
    4400:	1fff8bf0 	.word	0x1fff8bf0
    4404:	1fff8c10 	.word	0x1fff8c10

00004408 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4408:	b500      	push	{lr}
    440a:	b083      	sub	sp, #12
    440c:	9001      	str	r0, [sp, #4]
    440e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4410:	9b01      	ldr	r3, [sp, #4]
    4412:	2b03      	cmp	r3, #3
    4414:	f000 8090 	beq.w	4538 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4418:	9b01      	ldr	r3, [sp, #4]
    441a:	2b03      	cmp	r3, #3
    441c:	f200 80d3 	bhi.w	45c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4420:	9b01      	ldr	r3, [sp, #4]
    4422:	2b00      	cmp	r3, #0
    4424:	d040      	beq.n	44a8 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4426:	9b01      	ldr	r3, [sp, #4]
    4428:	3b01      	subs	r3, #1
    442a:	2b01      	cmp	r3, #1
    442c:	f200 80cb 	bhi.w	45c6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4430:	9b00      	ldr	r3, [sp, #0]
    4432:	2b00      	cmp	r3, #0
    4434:	f040 80c9 	bne.w	45ca <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4438:	4b68      	ldr	r3, [pc, #416]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    443a:	2200      	movs	r2, #0
    443c:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    443e:	4b68      	ldr	r3, [pc, #416]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	685b      	ldr	r3, [r3, #4]
    4444:	4a67      	ldr	r2, [pc, #412]	; (45e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4446:	6812      	ldr	r2, [r2, #0]
    4448:	4610      	mov	r0, r2
    444a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    444c:	4b66      	ldr	r3, [pc, #408]	; (45e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	681b      	ldr	r3, [r3, #0]
    4452:	4a66      	ldr	r2, [pc, #408]	; (45ec <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4454:	6812      	ldr	r2, [r2, #0]
    4456:	4610      	mov	r0, r2
    4458:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    445a:	4b65      	ldr	r3, [pc, #404]	; (45f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	681b      	ldr	r3, [r3, #0]
    4460:	4a64      	ldr	r2, [pc, #400]	; (45f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4462:	6812      	ldr	r2, [r2, #0]
    4464:	4610      	mov	r0, r2
    4466:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4468:	4b63      	ldr	r3, [pc, #396]	; (45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	4a63      	ldr	r2, [pc, #396]	; (45fc <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4470:	6812      	ldr	r2, [r2, #0]
    4472:	4610      	mov	r0, r2
    4474:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4476:	4b62      	ldr	r3, [pc, #392]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	691b      	ldr	r3, [r3, #16]
    447c:	4a61      	ldr	r2, [pc, #388]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    447e:	6812      	ldr	r2, [r2, #0]
    4480:	6812      	ldr	r2, [r2, #0]
    4482:	4610      	mov	r0, r2
    4484:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4486:	4b60      	ldr	r3, [pc, #384]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4488:	681b      	ldr	r3, [r3, #0]
    448a:	68db      	ldr	r3, [r3, #12]
    448c:	4a5f      	ldr	r2, [pc, #380]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    448e:	6812      	ldr	r2, [r2, #0]
    4490:	6812      	ldr	r2, [r2, #0]
    4492:	4610      	mov	r0, r2
    4494:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4496:	4b5e      	ldr	r3, [pc, #376]	; (4610 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	689b      	ldr	r3, [r3, #8]
    449c:	4a5d      	ldr	r2, [pc, #372]	; (4614 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    449e:	6812      	ldr	r2, [r2, #0]
    44a0:	6812      	ldr	r2, [r2, #0]
    44a2:	4610      	mov	r0, r2
    44a4:	4798      	blx	r3
            }
        }
        break;
    44a6:	e090      	b.n	45ca <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    44a8:	9b00      	ldr	r3, [sp, #0]
    44aa:	2b02      	cmp	r3, #2
    44ac:	f040 808f 	bne.w	45ce <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    44b0:	4b4a      	ldr	r3, [pc, #296]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44b2:	2201      	movs	r2, #1
    44b4:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    44b6:	4b56      	ldr	r3, [pc, #344]	; (4610 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    44b8:	681b      	ldr	r3, [r3, #0]
    44ba:	685b      	ldr	r3, [r3, #4]
    44bc:	4a55      	ldr	r2, [pc, #340]	; (4614 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    44be:	6812      	ldr	r2, [r2, #0]
    44c0:	4610      	mov	r0, r2
    44c2:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    44c4:	4b50      	ldr	r3, [pc, #320]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44c6:	681b      	ldr	r3, [r3, #0]
    44c8:	691b      	ldr	r3, [r3, #16]
    44ca:	4a50      	ldr	r2, [pc, #320]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44cc:	6812      	ldr	r2, [r2, #0]
    44ce:	4610      	mov	r0, r2
    44d0:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    44d2:	4b4d      	ldr	r3, [pc, #308]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	689b      	ldr	r3, [r3, #8]
    44d8:	4a4c      	ldr	r2, [pc, #304]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    44da:	6812      	ldr	r2, [r2, #0]
    44dc:	4610      	mov	r0, r2
    44de:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    44e0:	4b47      	ldr	r3, [pc, #284]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44e2:	681b      	ldr	r3, [r3, #0]
    44e4:	68db      	ldr	r3, [r3, #12]
    44e6:	4a47      	ldr	r2, [pc, #284]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44e8:	6812      	ldr	r2, [r2, #0]
    44ea:	4610      	mov	r0, r2
    44ec:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    44ee:	4b44      	ldr	r3, [pc, #272]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	689b      	ldr	r3, [r3, #8]
    44f4:	4a43      	ldr	r2, [pc, #268]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44f6:	6812      	ldr	r2, [r2, #0]
    44f8:	6812      	ldr	r2, [r2, #0]
    44fa:	4610      	mov	r0, r2
    44fc:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    44fe:	4b38      	ldr	r3, [pc, #224]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	685b      	ldr	r3, [r3, #4]
    4504:	4a44      	ldr	r2, [pc, #272]	; (4618 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4506:	6812      	ldr	r2, [r2, #0]
    4508:	4610      	mov	r0, r2
    450a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    450c:	4b36      	ldr	r3, [pc, #216]	; (45e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	4a42      	ldr	r2, [pc, #264]	; (461c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4514:	6812      	ldr	r2, [r2, #0]
    4516:	4610      	mov	r0, r2
    4518:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    451a:	4b35      	ldr	r3, [pc, #212]	; (45f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	4a3f      	ldr	r2, [pc, #252]	; (4620 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4522:	6812      	ldr	r2, [r2, #0]
    4524:	4610      	mov	r0, r2
    4526:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4528:	4b33      	ldr	r3, [pc, #204]	; (45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	4a3d      	ldr	r2, [pc, #244]	; (4624 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4530:	6812      	ldr	r2, [r2, #0]
    4532:	4610      	mov	r0, r2
    4534:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4536:	e04a      	b.n	45ce <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4538:	9b00      	ldr	r3, [sp, #0]
    453a:	2b02      	cmp	r3, #2
    453c:	d149      	bne.n	45d2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    453e:	4b27      	ldr	r3, [pc, #156]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4540:	2201      	movs	r2, #1
    4542:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4544:	4b32      	ldr	r3, [pc, #200]	; (4610 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	685b      	ldr	r3, [r3, #4]
    454a:	4a32      	ldr	r2, [pc, #200]	; (4614 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    454c:	6812      	ldr	r2, [r2, #0]
    454e:	4610      	mov	r0, r2
    4550:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4552:	4b2d      	ldr	r3, [pc, #180]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	691b      	ldr	r3, [r3, #16]
    4558:	4a2c      	ldr	r2, [pc, #176]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    455a:	6812      	ldr	r2, [r2, #0]
    455c:	4610      	mov	r0, r2
    455e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4560:	4b29      	ldr	r3, [pc, #164]	; (4608 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4562:	681b      	ldr	r3, [r3, #0]
    4564:	689b      	ldr	r3, [r3, #8]
    4566:	4a29      	ldr	r2, [pc, #164]	; (460c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4568:	6812      	ldr	r2, [r2, #0]
    456a:	4610      	mov	r0, r2
    456c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    456e:	4b24      	ldr	r3, [pc, #144]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	68db      	ldr	r3, [r3, #12]
    4574:	4a23      	ldr	r2, [pc, #140]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4576:	6812      	ldr	r2, [r2, #0]
    4578:	4610      	mov	r0, r2
    457a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    457c:	4b20      	ldr	r3, [pc, #128]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    457e:	681b      	ldr	r3, [r3, #0]
    4580:	689b      	ldr	r3, [r3, #8]
    4582:	4a20      	ldr	r2, [pc, #128]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4584:	6812      	ldr	r2, [r2, #0]
    4586:	6812      	ldr	r2, [r2, #0]
    4588:	4610      	mov	r0, r2
    458a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    458c:	4b26      	ldr	r3, [pc, #152]	; (4628 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    458e:	681b      	ldr	r3, [r3, #0]
    4590:	685b      	ldr	r3, [r3, #4]
    4592:	4a26      	ldr	r2, [pc, #152]	; (462c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4594:	6812      	ldr	r2, [r2, #0]
    4596:	4610      	mov	r0, r2
    4598:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    459a:	4b25      	ldr	r3, [pc, #148]	; (4630 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    459c:	681b      	ldr	r3, [r3, #0]
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	4a24      	ldr	r2, [pc, #144]	; (4634 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    45a2:	6812      	ldr	r2, [r2, #0]
    45a4:	4610      	mov	r0, r2
    45a6:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    45a8:	4b23      	ldr	r3, [pc, #140]	; (4638 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	681b      	ldr	r3, [r3, #0]
    45ae:	4a23      	ldr	r2, [pc, #140]	; (463c <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    45b0:	6812      	ldr	r2, [r2, #0]
    45b2:	4610      	mov	r0, r2
    45b4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    45b6:	4b22      	ldr	r3, [pc, #136]	; (4640 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	681b      	ldr	r3, [r3, #0]
    45bc:	4a21      	ldr	r2, [pc, #132]	; (4644 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    45be:	6812      	ldr	r2, [r2, #0]
    45c0:	4610      	mov	r0, r2
    45c2:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    45c4:	e005      	b.n	45d2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    45c6:	bf00      	nop
    45c8:	e004      	b.n	45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    45ca:	bf00      	nop
    45cc:	e002      	b.n	45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    45ce:	bf00      	nop
    45d0:	e000      	b.n	45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    45d2:	bf00      	nop
    }

}
    45d4:	bf00      	nop
    45d6:	b003      	add	sp, #12
    45d8:	f85d fb04 	ldr.w	pc, [sp], #4
    45dc:	1fff8b19 	.word	0x1fff8b19
    45e0:	1fff8bb8 	.word	0x1fff8bb8
    45e4:	1fff8bd8 	.word	0x1fff8bd8
    45e8:	1fff8bbc 	.word	0x1fff8bbc
    45ec:	1fff8be0 	.word	0x1fff8be0
    45f0:	1fff8bc0 	.word	0x1fff8bc0
    45f4:	1fff8be8 	.word	0x1fff8be8
    45f8:	1fff8bc4 	.word	0x1fff8bc4
    45fc:	1fff8bf0 	.word	0x1fff8bf0
    4600:	1fff8bac 	.word	0x1fff8bac
    4604:	1fff8bd0 	.word	0x1fff8bd0
    4608:	1fff8bb0 	.word	0x1fff8bb0
    460c:	1fff8bcc 	.word	0x1fff8bcc
    4610:	1fff8bb4 	.word	0x1fff8bb4
    4614:	1fff8bc8 	.word	0x1fff8bc8
    4618:	1fff8bd4 	.word	0x1fff8bd4
    461c:	1fff8bdc 	.word	0x1fff8bdc
    4620:	1fff8be4 	.word	0x1fff8be4
    4624:	1fff8bec 	.word	0x1fff8bec
    4628:	1fff8bf4 	.word	0x1fff8bf4
    462c:	1fff8c04 	.word	0x1fff8c04
    4630:	1fff8bf8 	.word	0x1fff8bf8
    4634:	1fff8c08 	.word	0x1fff8c08
    4638:	1fff8bfc 	.word	0x1fff8bfc
    463c:	1fff8c0c 	.word	0x1fff8c0c
    4640:	1fff8c00 	.word	0x1fff8c00
    4644:	1fff8c10 	.word	0x1fff8c10

00004648 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4648:	b500      	push	{lr}
    464a:	b083      	sub	sp, #12
    464c:	9001      	str	r0, [sp, #4]
    464e:	9100      	str	r1, [sp, #0]
    switch(Command)
    4650:	9b00      	ldr	r3, [sp, #0]
    4652:	2b04      	cmp	r3, #4
    4654:	d010      	beq.n	4678 <Clock_Ip_Command+0x30>
    4656:	9b00      	ldr	r3, [sp, #0]
    4658:	2b04      	cmp	r3, #4
    465a:	d811      	bhi.n	4680 <Clock_Ip_Command+0x38>
    465c:	9b00      	ldr	r3, [sp, #0]
    465e:	2b01      	cmp	r3, #1
    4660:	d006      	beq.n	4670 <Clock_Ip_Command+0x28>
    4662:	9b00      	ldr	r3, [sp, #0]
    4664:	2b02      	cmp	r3, #2
    4666:	d10b      	bne.n	4680 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4668:	9801      	ldr	r0, [sp, #4]
    466a:	f7ff fdb3 	bl	41d4 <Clock_Ip_ClockInitializeObjects>
            break;
    466e:	e008      	b.n	4682 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4670:	9801      	ldr	r0, [sp, #4]
    4672:	f7ff f9db 	bl	3a2c <Clock_Ip_SpecificPlatformInitClock>
            break;
    4676:	e004      	b.n	4682 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4678:	9801      	ldr	r0, [sp, #4]
    467a:	f7ff f8ed 	bl	3858 <DisableSafeClock>
            break;
    467e:	e000      	b.n	4682 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4680:	bf00      	nop
    }
}
    4682:	bf00      	nop
    4684:	b003      	add	sp, #12
    4686:	f85d fb04 	ldr.w	pc, [sp], #4
    468a:	bf00      	nop

0000468c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    468c:	b500      	push	{lr}
    468e:	b085      	sub	sp, #20
    4690:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4692:	4a20      	ldr	r2, [pc, #128]	; (4714 <Mcu_Init+0x88>)
    4694:	9b01      	ldr	r3, [sp, #4]
    4696:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4698:	2300      	movs	r3, #0
    469a:	9303      	str	r3, [sp, #12]
    469c:	e010      	b.n	46c0 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    469e:	4b1d      	ldr	r3, [pc, #116]	; (4714 <Mcu_Init+0x88>)
    46a0:	681b      	ldr	r3, [r3, #0]
    46a2:	6919      	ldr	r1, [r3, #16]
    46a4:	9a03      	ldr	r2, [sp, #12]
    46a6:	4613      	mov	r3, r2
    46a8:	005b      	lsls	r3, r3, #1
    46aa:	4413      	add	r3, r2
    46ac:	009b      	lsls	r3, r3, #2
    46ae:	440b      	add	r3, r1
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	9a03      	ldr	r2, [sp, #12]
    46b4:	b2d1      	uxtb	r1, r2
    46b6:	4a18      	ldr	r2, [pc, #96]	; (4718 <Mcu_Init+0x8c>)
    46b8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    46ba:	9b03      	ldr	r3, [sp, #12]
    46bc:	3301      	adds	r3, #1
    46be:	9303      	str	r3, [sp, #12]
    46c0:	4b14      	ldr	r3, [pc, #80]	; (4714 <Mcu_Init+0x88>)
    46c2:	681b      	ldr	r3, [r3, #0]
    46c4:	689b      	ldr	r3, [r3, #8]
    46c6:	9a03      	ldr	r2, [sp, #12]
    46c8:	429a      	cmp	r2, r3
    46ca:	d3e8      	bcc.n	469e <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    46cc:	2300      	movs	r3, #0
    46ce:	9303      	str	r3, [sp, #12]
    46d0:	e010      	b.n	46f4 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    46d2:	4b10      	ldr	r3, [pc, #64]	; (4714 <Mcu_Init+0x88>)
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	6959      	ldr	r1, [r3, #20]
    46d8:	9a03      	ldr	r2, [sp, #12]
    46da:	4613      	mov	r3, r2
    46dc:	01db      	lsls	r3, r3, #7
    46de:	1a9b      	subs	r3, r3, r2
    46e0:	00db      	lsls	r3, r3, #3
    46e2:	440b      	add	r3, r1
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	9a03      	ldr	r2, [sp, #12]
    46e8:	b2d1      	uxtb	r1, r2
    46ea:	4a0c      	ldr	r2, [pc, #48]	; (471c <Mcu_Init+0x90>)
    46ec:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    46ee:	9b03      	ldr	r3, [sp, #12]
    46f0:	3301      	adds	r3, #1
    46f2:	9303      	str	r3, [sp, #12]
    46f4:	4b07      	ldr	r3, [pc, #28]	; (4714 <Mcu_Init+0x88>)
    46f6:	681b      	ldr	r3, [r3, #0]
    46f8:	68db      	ldr	r3, [r3, #12]
    46fa:	9a03      	ldr	r2, [sp, #12]
    46fc:	429a      	cmp	r2, r3
    46fe:	d3e8      	bcc.n	46d2 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4700:	4b04      	ldr	r3, [pc, #16]	; (4714 <Mcu_Init+0x88>)
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	699b      	ldr	r3, [r3, #24]
    4706:	4618      	mov	r0, r3
    4708:	f000 f88a 	bl	4820 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    470c:	bf00      	nop
    470e:	b005      	add	sp, #20
    4710:	f85d fb04 	ldr.w	pc, [sp], #4
    4714:	1fff8cec 	.word	0x1fff8cec
    4718:	1fff8ce8 	.word	0x1fff8ce8
    471c:	1fff8ce4 	.word	0x1fff8ce4

00004720 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4720:	b084      	sub	sp, #16
    4722:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4724:	2301      	movs	r3, #1
    4726:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    472a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    472e:	4618      	mov	r0, r3
    4730:	b004      	add	sp, #16
    4732:	4770      	bx	lr

00004734 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4734:	b500      	push	{lr}
    4736:	b085      	sub	sp, #20
    4738:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    473a:	4a0e      	ldr	r2, [pc, #56]	; (4774 <Mcu_InitClock+0x40>)
    473c:	9b01      	ldr	r3, [sp, #4]
    473e:	4413      	add	r3, r2
    4740:	781b      	ldrb	r3, [r3, #0]
    4742:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4746:	4b0c      	ldr	r3, [pc, #48]	; (4778 <Mcu_InitClock+0x44>)
    4748:	681b      	ldr	r3, [r3, #0]
    474a:	6959      	ldr	r1, [r3, #20]
    474c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4750:	4613      	mov	r3, r2
    4752:	01db      	lsls	r3, r3, #7
    4754:	1a9b      	subs	r3, r3, r2
    4756:	00db      	lsls	r3, r3, #3
    4758:	440b      	add	r3, r1
    475a:	4618      	mov	r0, r3
    475c:	f000 f86a 	bl	4834 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4760:	2300      	movs	r3, #0
    4762:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4766:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    476a:	4618      	mov	r0, r3
    476c:	b005      	add	sp, #20
    476e:	f85d fb04 	ldr.w	pc, [sp], #4
    4772:	bf00      	nop
    4774:	1fff8ce4 	.word	0x1fff8ce4
    4778:	1fff8cec 	.word	0x1fff8cec

0000477c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    477c:	b500      	push	{lr}
    477e:	b085      	sub	sp, #20
    4780:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4782:	4a0d      	ldr	r2, [pc, #52]	; (47b8 <Mcu_SetMode+0x3c>)
    4784:	9b01      	ldr	r3, [sp, #4]
    4786:	4413      	add	r3, r2
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    478e:	f001 fadb 	bl	5d48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4792:	4b0a      	ldr	r3, [pc, #40]	; (47bc <Mcu_SetMode+0x40>)
    4794:	681b      	ldr	r3, [r3, #0]
    4796:	6919      	ldr	r1, [r3, #16]
    4798:	f89d 200f 	ldrb.w	r2, [sp, #15]
    479c:	4613      	mov	r3, r2
    479e:	005b      	lsls	r3, r3, #1
    47a0:	4413      	add	r3, r2
    47a2:	009b      	lsls	r3, r3, #2
    47a4:	440b      	add	r3, r1
    47a6:	4618      	mov	r0, r3
    47a8:	f000 f84e 	bl	4848 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    47ac:	f001 faf8 	bl	5da0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    47b0:	bf00      	nop
    47b2:	b005      	add	sp, #20
    47b4:	f85d fb04 	ldr.w	pc, [sp], #4
    47b8:	1fff8ce8 	.word	0x1fff8ce8
    47bc:	1fff8cec 	.word	0x1fff8cec

000047c0 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    47c0:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    47c2:	2302      	movs	r3, #2
    47c4:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    47c6:	9b01      	ldr	r3, [sp, #4]
}
    47c8:	4618      	mov	r0, r3
    47ca:	b002      	add	sp, #8
    47cc:	4770      	bx	lr

000047ce <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    47ce:	b500      	push	{lr}
    47d0:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    47d2:	f000 f843 	bl	485c <Mcu_Ipw_GetResetReason>
    47d6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    47d8:	9b01      	ldr	r3, [sp, #4]
}
    47da:	4618      	mov	r0, r3
    47dc:	b003      	add	sp, #12
    47de:	f85d fb04 	ldr.w	pc, [sp], #4

000047e2 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    47e2:	b500      	push	{lr}
    47e4:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    47e6:	f000 f83f 	bl	4868 <Mcu_Ipw_GetResetRawValue>
    47ea:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    47ec:	9b01      	ldr	r3, [sp, #4]
}
    47ee:	4618      	mov	r0, r3
    47f0:	b003      	add	sp, #12
    47f2:	f85d fb04 	ldr.w	pc, [sp], #4

000047f6 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    47f6:	b500      	push	{lr}
    47f8:	b083      	sub	sp, #12
    47fa:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    47fc:	9801      	ldr	r0, [sp, #4]
    47fe:	f000 f839 	bl	4874 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4802:	bf00      	nop
    4804:	b003      	add	sp, #12
    4806:	f85d fb04 	ldr.w	pc, [sp], #4

0000480a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    480a:	b082      	sub	sp, #8
    480c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    480e:	4b03      	ldr	r3, [pc, #12]	; (481c <Mcu_ClkSrcFailureNotification+0x12>)
    4810:	681b      	ldr	r3, [r3, #0]
    4812:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4814:	bf00      	nop
    4816:	b002      	add	sp, #8
    4818:	4770      	bx	lr
    481a:	bf00      	nop
    481c:	1fff8cec 	.word	0x1fff8cec

00004820 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4820:	b500      	push	{lr}
    4822:	b083      	sub	sp, #12
    4824:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4826:	9801      	ldr	r0, [sp, #4]
    4828:	f000 f882 	bl	4930 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    482c:	bf00      	nop
    482e:	b003      	add	sp, #12
    4830:	f85d fb04 	ldr.w	pc, [sp], #4

00004834 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4834:	b500      	push	{lr}
    4836:	b083      	sub	sp, #12
    4838:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    483a:	9801      	ldr	r0, [sp, #4]
    483c:	f7fc fc6a 	bl	1114 <Clock_Ip_InitClock>
}
    4840:	bf00      	nop
    4842:	b003      	add	sp, #12
    4844:	f85d fb04 	ldr.w	pc, [sp], #4

00004848 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4848:	b500      	push	{lr}
    484a:	b083      	sub	sp, #12
    484c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    484e:	9801      	ldr	r0, [sp, #4]
    4850:	f000 f820 	bl	4894 <Power_Ip_SetMode>
}
    4854:	bf00      	nop
    4856:	b003      	add	sp, #12
    4858:	f85d fb04 	ldr.w	pc, [sp], #4

0000485c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    485c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    485e:	f000 f84f 	bl	4900 <Power_Ip_GetResetReason>
    4862:	4603      	mov	r3, r0
}
    4864:	4618      	mov	r0, r3
    4866:	bd08      	pop	{r3, pc}

00004868 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4868:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    486a:	f000 f857 	bl	491c <Power_Ip_GetResetRawValue>
    486e:	4603      	mov	r3, r0
}
    4870:	4618      	mov	r0, r3
    4872:	bd08      	pop	{r3, pc}

00004874 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4874:	b500      	push	{lr}
    4876:	b083      	sub	sp, #12
    4878:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    487a:	9b01      	ldr	r3, [sp, #4]
    487c:	2b00      	cmp	r3, #0
    487e:	d102      	bne.n	4886 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4880:	f000 f86c 	bl	495c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4884:	e001      	b.n	488a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4886:	f000 f86e 	bl	4966 <Power_Ip_EnableSleepOnExit>
}
    488a:	bf00      	nop
    488c:	b003      	add	sp, #12
    488e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004894 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4894:	b500      	push	{lr}
    4896:	b085      	sub	sp, #20
    4898:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    489a:	9b01      	ldr	r3, [sp, #4]
    489c:	685b      	ldr	r3, [r3, #4]
    489e:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    48a0:	9802      	ldr	r0, [sp, #8]
    48a2:	f000 f9f5 	bl	4c90 <Power_Ip_SMC_ModeCheckEntry>
    48a6:	4603      	mov	r3, r0
    48a8:	2b00      	cmp	r3, #0
    48aa:	d002      	beq.n	48b2 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    48ac:	2301      	movs	r3, #1
    48ae:	9303      	str	r3, [sp, #12]
    48b0:	e003      	b.n	48ba <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    48b2:	9801      	ldr	r0, [sp, #4]
    48b4:	f000 fa1e 	bl	4cf4 <Power_Ip_SMC_ModeConfig>
    48b8:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    48ba:	9b03      	ldr	r3, [sp, #12]
    48bc:	2b01      	cmp	r3, #1
    48be:	d103      	bne.n	48c8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    48c0:	21ff      	movs	r1, #255	; 0xff
    48c2:	2003      	movs	r0, #3
    48c4:	f000 f8f4 	bl	4ab0 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    48c8:	bf00      	nop
    48ca:	b005      	add	sp, #20
    48cc:	f85d fb04 	ldr.w	pc, [sp], #4

000048d0 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    48d0:	b084      	sub	sp, #16
    48d2:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    48d4:	230c      	movs	r3, #12
    48d6:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    48d8:	4a08      	ldr	r2, [pc, #32]	; (48fc <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48da:	9b01      	ldr	r3, [sp, #4]
    48dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48e0:	2b0e      	cmp	r3, #14
    48e2:	d805      	bhi.n	48f0 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    48e4:	4a05      	ldr	r2, [pc, #20]	; (48fc <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48e6:	9b01      	ldr	r3, [sp, #4]
    48e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48ec:	9303      	str	r3, [sp, #12]
    48ee:	e001      	b.n	48f4 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    48f0:	230c      	movs	r3, #12
    48f2:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    48f4:	9b03      	ldr	r3, [sp, #12]
}
    48f6:	4618      	mov	r0, r3
    48f8:	b004      	add	sp, #16
    48fa:	4770      	bx	lr
    48fc:	00007870 	.word	0x00007870

00004900 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4900:	b500      	push	{lr}
    4902:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4904:	f000 f940 	bl	4b88 <Power_Ip_RCM_GetResetReason>
    4908:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    490a:	9801      	ldr	r0, [sp, #4]
    490c:	f7ff ffe0 	bl	48d0 <Power_Ip_ConvertIntergeToResetType>
    4910:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4912:	9b00      	ldr	r3, [sp, #0]
}
    4914:	4618      	mov	r0, r3
    4916:	b003      	add	sp, #12
    4918:	f85d fb04 	ldr.w	pc, [sp], #4

0000491c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    491c:	b500      	push	{lr}
    491e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4920:	f000 f98a 	bl	4c38 <Power_Ip_RCM_GetResetRawValue>
    4924:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4926:	9b01      	ldr	r3, [sp, #4]
}
    4928:	4618      	mov	r0, r3
    492a:	b003      	add	sp, #12
    492c:	f85d fb04 	ldr.w	pc, [sp], #4

00004930 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4930:	b500      	push	{lr}
    4932:	b083      	sub	sp, #12
    4934:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4936:	9b01      	ldr	r3, [sp, #4]
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	4618      	mov	r0, r3
    493c:	f000 f90e 	bl	4b5c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4940:	9b01      	ldr	r3, [sp, #4]
    4942:	685b      	ldr	r3, [r3, #4]
    4944:	4618      	mov	r0, r3
    4946:	f000 f86d 	bl	4a24 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    494a:	9b01      	ldr	r3, [sp, #4]
    494c:	689b      	ldr	r3, [r3, #8]
    494e:	4618      	mov	r0, r3
    4950:	f000 f990 	bl	4c74 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4954:	bf00      	nop
    4956:	b003      	add	sp, #12
    4958:	f85d fb04 	ldr.w	pc, [sp], #4

0000495c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    495c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    495e:	f000 f811 	bl	4984 <Power_Ip_CM4_DisableSleepOnExit>
}
    4962:	bf00      	nop
    4964:	bd08      	pop	{r3, pc}

00004966 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4966:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4968:	f000 f820 	bl	49ac <Power_Ip_CM4_EnableSleepOnExit>
}
    496c:	bf00      	nop
    496e:	bd08      	pop	{r3, pc}

00004970 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4970:	b082      	sub	sp, #8
    4972:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4974:	4a02      	ldr	r2, [pc, #8]	; (4980 <Power_Ip_InstallNotificationsCallback+0x10>)
    4976:	9b01      	ldr	r3, [sp, #4]
    4978:	6013      	str	r3, [r2, #0]
}
    497a:	bf00      	nop
    497c:	b002      	add	sp, #8
    497e:	4770      	bx	lr
    4980:	1fff8b1c 	.word	0x1fff8b1c

00004984 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4984:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4986:	2300      	movs	r3, #0
    4988:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    498a:	4b07      	ldr	r3, [pc, #28]	; (49a8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	685b      	ldr	r3, [r3, #4]
    4990:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4992:	9b01      	ldr	r3, [sp, #4]
    4994:	f023 0302 	bic.w	r3, r3, #2
    4998:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    499a:	4b03      	ldr	r3, [pc, #12]	; (49a8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	9a01      	ldr	r2, [sp, #4]
    49a0:	605a      	str	r2, [r3, #4]
}
    49a2:	bf00      	nop
    49a4:	b002      	add	sp, #8
    49a6:	4770      	bx	lr
    49a8:	1fff8b20 	.word	0x1fff8b20

000049ac <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    49ac:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49ae:	2300      	movs	r3, #0
    49b0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49b2:	4b07      	ldr	r3, [pc, #28]	; (49d0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    49b4:	681b      	ldr	r3, [r3, #0]
    49b6:	685b      	ldr	r3, [r3, #4]
    49b8:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    49ba:	9b01      	ldr	r3, [sp, #4]
    49bc:	f043 0302 	orr.w	r3, r3, #2
    49c0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49c2:	4b03      	ldr	r3, [pc, #12]	; (49d0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	9a01      	ldr	r2, [sp, #4]
    49c8:	605a      	str	r2, [r3, #4]
}
    49ca:	bf00      	nop
    49cc:	b002      	add	sp, #8
    49ce:	4770      	bx	lr
    49d0:	1fff8b20 	.word	0x1fff8b20

000049d4 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    49d4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49d6:	2300      	movs	r3, #0
    49d8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    49da:	4b07      	ldr	r3, [pc, #28]	; (49f8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	685b      	ldr	r3, [r3, #4]
    49e0:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    49e2:	9b01      	ldr	r3, [sp, #4]
    49e4:	f043 0304 	orr.w	r3, r3, #4
    49e8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    49ea:	4b03      	ldr	r3, [pc, #12]	; (49f8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49ec:	681b      	ldr	r3, [r3, #0]
    49ee:	9a01      	ldr	r2, [sp, #4]
    49f0:	605a      	str	r2, [r3, #4]
}
    49f2:	bf00      	nop
    49f4:	b002      	add	sp, #8
    49f6:	4770      	bx	lr
    49f8:	1fff8b20 	.word	0x1fff8b20

000049fc <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    49fc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    49fe:	2300      	movs	r3, #0
    4a00:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4a02:	4b07      	ldr	r3, [pc, #28]	; (4a20 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4a04:	681b      	ldr	r3, [r3, #0]
    4a06:	685b      	ldr	r3, [r3, #4]
    4a08:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4a0a:	9b01      	ldr	r3, [sp, #4]
    4a0c:	f023 0304 	bic.w	r3, r3, #4
    4a10:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4a12:	4b03      	ldr	r3, [pc, #12]	; (4a20 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4a14:	681b      	ldr	r3, [r3, #0]
    4a16:	9a01      	ldr	r2, [sp, #4]
    4a18:	605a      	str	r2, [r3, #4]
}
    4a1a:	bf00      	nop
    4a1c:	b002      	add	sp, #8
    4a1e:	4770      	bx	lr
    4a20:	1fff8b20 	.word	0x1fff8b20

00004a24 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4a24:	b084      	sub	sp, #16
    4a26:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4a28:	4b20      	ldr	r3, [pc, #128]	; (4aac <Power_Ip_PMC_PowerInit+0x88>)
    4a2a:	781b      	ldrb	r3, [r3, #0]
    4a2c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4a30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a34:	f003 030f 	and.w	r3, r3, #15
    4a38:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4a3c:	9b01      	ldr	r3, [sp, #4]
    4a3e:	781a      	ldrb	r2, [r3, #0]
    4a40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a44:	4313      	orrs	r3, r2
    4a46:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4a4a:	4a18      	ldr	r2, [pc, #96]	; (4aac <Power_Ip_PMC_PowerInit+0x88>)
    4a4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a50:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4a52:	4b16      	ldr	r3, [pc, #88]	; (4aac <Power_Ip_PMC_PowerInit+0x88>)
    4a54:	785b      	ldrb	r3, [r3, #1]
    4a56:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4a5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a5e:	f003 031f 	and.w	r3, r3, #31
    4a62:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4a66:	9b01      	ldr	r3, [sp, #4]
    4a68:	785a      	ldrb	r2, [r3, #1]
    4a6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a6e:	4313      	orrs	r3, r2
    4a70:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4a74:	4a0d      	ldr	r2, [pc, #52]	; (4aac <Power_Ip_PMC_PowerInit+0x88>)
    4a76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a7a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4a7c:	4b0b      	ldr	r3, [pc, #44]	; (4aac <Power_Ip_PMC_PowerInit+0x88>)
    4a7e:	789b      	ldrb	r3, [r3, #2]
    4a80:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4a84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a8c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4a90:	9b01      	ldr	r3, [sp, #4]
    4a92:	789a      	ldrb	r2, [r3, #2]
    4a94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a98:	4313      	orrs	r3, r2
    4a9a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4a9e:	4a03      	ldr	r2, [pc, #12]	; (4aac <Power_Ip_PMC_PowerInit+0x88>)
    4aa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4aa4:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4aa6:	bf00      	nop
    4aa8:	b004      	add	sp, #16
    4aaa:	4770      	bx	lr
    4aac:	4007d000 	.word	0x4007d000

00004ab0 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4ab0:	b500      	push	{lr}
    4ab2:	b083      	sub	sp, #12
    4ab4:	9001      	str	r0, [sp, #4]
    4ab6:	460b      	mov	r3, r1
    4ab8:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4abc:	4b05      	ldr	r3, [pc, #20]	; (4ad4 <Power_Ip_ReportPowerErrors+0x24>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4ac4:	4611      	mov	r1, r2
    4ac6:	9801      	ldr	r0, [sp, #4]
    4ac8:	4798      	blx	r3
}
    4aca:	bf00      	nop
    4acc:	b003      	add	sp, #12
    4ace:	f85d fb04 	ldr.w	pc, [sp], #4
    4ad2:	bf00      	nop
    4ad4:	1fff8b1c 	.word	0x1fff8b1c

00004ad8 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4ad8:	b082      	sub	sp, #8
    4ada:	9001      	str	r0, [sp, #4]
    4adc:	460b      	mov	r3, r1
    4ade:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4ae2:	bf00      	nop
    4ae4:	b002      	add	sp, #8
    4ae6:	4770      	bx	lr

00004ae8 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4ae8:	b500      	push	{lr}
    4aea:	b085      	sub	sp, #20
    4aec:	9003      	str	r0, [sp, #12]
    4aee:	9102      	str	r1, [sp, #8]
    4af0:	9201      	str	r2, [sp, #4]
    4af2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4af4:	2000      	movs	r0, #0
    4af6:	f7fc f83c 	bl	b72 <OsIf_GetCounter>
    4afa:	4602      	mov	r2, r0
    4afc:	9b03      	ldr	r3, [sp, #12]
    4afe:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4b00:	9b02      	ldr	r3, [sp, #8]
    4b02:	2200      	movs	r2, #0
    4b04:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4b06:	2100      	movs	r1, #0
    4b08:	9800      	ldr	r0, [sp, #0]
    4b0a:	f7fc f87e 	bl	c0a <OsIf_MicrosToTicks>
    4b0e:	4602      	mov	r2, r0
    4b10:	9b01      	ldr	r3, [sp, #4]
    4b12:	601a      	str	r2, [r3, #0]
}
    4b14:	bf00      	nop
    4b16:	b005      	add	sp, #20
    4b18:	f85d fb04 	ldr.w	pc, [sp], #4

00004b1c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4b1c:	b500      	push	{lr}
    4b1e:	b087      	sub	sp, #28
    4b20:	9003      	str	r0, [sp, #12]
    4b22:	9102      	str	r1, [sp, #8]
    4b24:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4b26:	2300      	movs	r3, #0
    4b28:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4b2c:	2100      	movs	r1, #0
    4b2e:	9803      	ldr	r0, [sp, #12]
    4b30:	f7fc f838 	bl	ba4 <OsIf_GetElapsed>
    4b34:	4602      	mov	r2, r0
    4b36:	9b02      	ldr	r3, [sp, #8]
    4b38:	681b      	ldr	r3, [r3, #0]
    4b3a:	441a      	add	r2, r3
    4b3c:	9b02      	ldr	r3, [sp, #8]
    4b3e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4b40:	9b02      	ldr	r3, [sp, #8]
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	9a01      	ldr	r2, [sp, #4]
    4b46:	429a      	cmp	r2, r3
    4b48:	d802      	bhi.n	4b50 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4b4a:	2301      	movs	r3, #1
    4b4c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4b50:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4b54:	4618      	mov	r0, r3
    4b56:	b007      	add	sp, #28
    4b58:	f85d fb04 	ldr.w	pc, [sp], #4

00004b5c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4b5c:	b082      	sub	sp, #8
    4b5e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4b60:	9b01      	ldr	r3, [sp, #4]
    4b62:	681a      	ldr	r2, [r3, #0]
    4b64:	4907      	ldr	r1, [pc, #28]	; (4b84 <Power_Ip_RCM_ResetInit+0x28>)
    4b66:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b6a:	4013      	ands	r3, r2
    4b6c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4b6e:	9b01      	ldr	r3, [sp, #4]
    4b70:	685a      	ldr	r2, [r3, #4]
    4b72:	4904      	ldr	r1, [pc, #16]	; (4b84 <Power_Ip_RCM_ResetInit+0x28>)
    4b74:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b78:	4013      	ands	r3, r2
    4b7a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4b7c:	bf00      	nop
    4b7e:	b002      	add	sp, #8
    4b80:	4770      	bx	lr
    4b82:	bf00      	nop
    4b84:	4007f000 	.word	0x4007f000

00004b88 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4b88:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4b8a:	230c      	movs	r3, #12
    4b8c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4b8e:	2300      	movs	r3, #0
    4b90:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4b92:	2300      	movs	r3, #0
    4b94:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4b96:	2300      	movs	r3, #0
    4b98:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4b9a:	4b25      	ldr	r3, [pc, #148]	; (4c30 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b9c:	699a      	ldr	r2, [r3, #24]
    4b9e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4ba2:	4013      	ands	r3, r2
    4ba4:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4ba6:	9b03      	ldr	r3, [sp, #12]
    4ba8:	2b00      	cmp	r3, #0
    4baa:	d008      	beq.n	4bbe <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4bac:	4920      	ldr	r1, [pc, #128]	; (4c30 <Power_Ip_RCM_GetResetReason+0xa8>)
    4bae:	9a03      	ldr	r2, [sp, #12]
    4bb0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bb4:	4013      	ands	r3, r2
    4bb6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4bb8:	4a1e      	ldr	r2, [pc, #120]	; (4c34 <Power_Ip_RCM_GetResetReason+0xac>)
    4bba:	9b03      	ldr	r3, [sp, #12]
    4bbc:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4bbe:	4b1d      	ldr	r3, [pc, #116]	; (4c34 <Power_Ip_RCM_GetResetReason+0xac>)
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4bc4:	9a02      	ldr	r2, [sp, #8]
    4bc6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4bca:	4013      	ands	r3, r2
    4bcc:	2b82      	cmp	r3, #130	; 0x82
    4bce:	d102      	bne.n	4bd6 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4bd0:	2305      	movs	r3, #5
    4bd2:	9307      	str	r3, [sp, #28]
    4bd4:	e027      	b.n	4c26 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4bd6:	2300      	movs	r3, #0
    4bd8:	9306      	str	r3, [sp, #24]
    4bda:	e021      	b.n	4c20 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4bdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4be0:	9b06      	ldr	r3, [sp, #24]
    4be2:	fa22 f303 	lsr.w	r3, r2, r3
    4be6:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4be8:	9a01      	ldr	r2, [sp, #4]
    4bea:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4bee:	4013      	ands	r3, r2
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	d012      	beq.n	4c1a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    4bf4:	9a01      	ldr	r2, [sp, #4]
    4bf6:	9b02      	ldr	r3, [sp, #8]
    4bf8:	4013      	ands	r3, r2
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d00a      	beq.n	4c14 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    4bfe:	9b05      	ldr	r3, [sp, #20]
    4c00:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    4c02:	9b04      	ldr	r3, [sp, #16]
    4c04:	3301      	adds	r3, #1
    4c06:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    4c08:	9b04      	ldr	r3, [sp, #16]
    4c0a:	2b01      	cmp	r3, #1
    4c0c:	d902      	bls.n	4c14 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    4c0e:	230d      	movs	r3, #13
    4c10:	9307      	str	r3, [sp, #28]
                        break;
    4c12:	e008      	b.n	4c26 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    4c14:	9b05      	ldr	r3, [sp, #20]
    4c16:	3301      	adds	r3, #1
    4c18:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    4c1a:	9b06      	ldr	r3, [sp, #24]
    4c1c:	3301      	adds	r3, #1
    4c1e:	9306      	str	r3, [sp, #24]
    4c20:	9b06      	ldr	r3, [sp, #24]
    4c22:	2b1f      	cmp	r3, #31
    4c24:	d9da      	bls.n	4bdc <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    4c26:	9b07      	ldr	r3, [sp, #28]
}
    4c28:	4618      	mov	r0, r3
    4c2a:	b008      	add	sp, #32
    4c2c:	4770      	bx	lr
    4c2e:	bf00      	nop
    4c30:	4007f000 	.word	0x4007f000
    4c34:	1fff8cf0 	.word	0x1fff8cf0

00004c38 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    4c38:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4c3a:	4b0c      	ldr	r3, [pc, #48]	; (4c6c <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c3c:	699a      	ldr	r2, [r3, #24]
    4c3e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c42:	4013      	ands	r3, r2
    4c44:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    4c46:	9b01      	ldr	r3, [sp, #4]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d008      	beq.n	4c5e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4c4c:	4907      	ldr	r1, [pc, #28]	; (4c6c <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c4e:	9a01      	ldr	r2, [sp, #4]
    4c50:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c54:	4013      	ands	r3, r2
    4c56:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4c58:	4a05      	ldr	r2, [pc, #20]	; (4c70 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c5a:	9b01      	ldr	r3, [sp, #4]
    4c5c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    4c5e:	4b04      	ldr	r3, [pc, #16]	; (4c70 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    4c64:	9b00      	ldr	r3, [sp, #0]
}
    4c66:	4618      	mov	r0, r3
    4c68:	b002      	add	sp, #8
    4c6a:	4770      	bx	lr
    4c6c:	4007f000 	.word	0x4007f000
    4c70:	1fff8cf0 	.word	0x1fff8cf0

00004c74 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    4c74:	b082      	sub	sp, #8
    4c76:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    4c78:	9b01      	ldr	r3, [sp, #4]
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	4a03      	ldr	r2, [pc, #12]	; (4c8c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c82:	6093      	str	r3, [r2, #8]
}
    4c84:	bf00      	nop
    4c86:	b002      	add	sp, #8
    4c88:	4770      	bx	lr
    4c8a:	bf00      	nop
    4c8c:	4007e000 	.word	0x4007e000

00004c90 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    4c90:	b084      	sub	sp, #16
    4c92:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    4c94:	2301      	movs	r3, #1
    4c96:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    4c98:	4b15      	ldr	r3, [pc, #84]	; (4cf0 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c9a:	695b      	ldr	r3, [r3, #20]
    4c9c:	b2db      	uxtb	r3, r3
    4c9e:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    4ca0:	9b01      	ldr	r3, [sp, #4]
    4ca2:	2b02      	cmp	r3, #2
    4ca4:	d012      	beq.n	4ccc <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4ca6:	9b01      	ldr	r3, [sp, #4]
    4ca8:	2b02      	cmp	r3, #2
    4caa:	d818      	bhi.n	4cde <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4cac:	9b01      	ldr	r3, [sp, #4]
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d003      	beq.n	4cba <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4cb2:	9b01      	ldr	r3, [sp, #4]
    4cb4:	2b01      	cmp	r3, #1
    4cb6:	d003      	beq.n	4cc0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    4cb8:	e011      	b.n	4cde <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    4cba:	2300      	movs	r3, #0
    4cbc:	9303      	str	r3, [sp, #12]
            break;
    4cbe:	e013      	b.n	4ce8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    4cc0:	9b02      	ldr	r3, [sp, #8]
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d10d      	bne.n	4ce2 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    4cc6:	2300      	movs	r3, #0
    4cc8:	9303      	str	r3, [sp, #12]
            break;
    4cca:	e00a      	b.n	4ce2 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    4ccc:	9b02      	ldr	r3, [sp, #8]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d002      	beq.n	4cd8 <Power_Ip_SMC_ModeCheckEntry+0x48>
    4cd2:	9b02      	ldr	r3, [sp, #8]
    4cd4:	2b10      	cmp	r3, #16
    4cd6:	d106      	bne.n	4ce6 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    4cd8:	2300      	movs	r3, #0
    4cda:	9303      	str	r3, [sp, #12]
            break;
    4cdc:	e003      	b.n	4ce6 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    4cde:	bf00      	nop
    4ce0:	e002      	b.n	4ce8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4ce2:	bf00      	nop
    4ce4:	e000      	b.n	4ce8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4ce6:	bf00      	nop
        }
    }

    return PowerModeCheck;
    4ce8:	9b03      	ldr	r3, [sp, #12]
}
    4cea:	4618      	mov	r0, r3
    4cec:	b004      	add	sp, #16
    4cee:	4770      	bx	lr
    4cf0:	4007e000 	.word	0x4007e000

00004cf4 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4cf4:	b500      	push	{lr}
    4cf6:	b08b      	sub	sp, #44	; 0x2c
    4cf8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    4cfa:	2300      	movs	r3, #0
    4cfc:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    4cfe:	2300      	movs	r3, #0
    4d00:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    4d02:	2300      	movs	r3, #0
    4d04:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    4d08:	9b01      	ldr	r3, [sp, #4]
    4d0a:	685b      	ldr	r3, [r3, #4]
    4d0c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    4d0e:	9b08      	ldr	r3, [sp, #32]
    4d10:	2b02      	cmp	r3, #2
    4d12:	d076      	beq.n	4e02 <Power_Ip_SMC_ModeConfig+0x10e>
    4d14:	9b08      	ldr	r3, [sp, #32]
    4d16:	2b02      	cmp	r3, #2
    4d18:	f200 80ab 	bhi.w	4e72 <Power_Ip_SMC_ModeConfig+0x17e>
    4d1c:	9b08      	ldr	r3, [sp, #32]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d003      	beq.n	4d2a <Power_Ip_SMC_ModeConfig+0x36>
    4d22:	9b08      	ldr	r3, [sp, #32]
    4d24:	2b01      	cmp	r3, #1
    4d26:	d034      	beq.n	4d92 <Power_Ip_SMC_ModeConfig+0x9e>
    4d28:	e0a3      	b.n	4e72 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    4d2a:	4b58      	ldr	r3, [pc, #352]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4d2c:	68db      	ldr	r3, [r3, #12]
    4d2e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4d30:	9b06      	ldr	r3, [sp, #24]
    4d32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d36:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    4d38:	4a54      	ldr	r2, [pc, #336]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4d3a:	9b06      	ldr	r3, [sp, #24]
    4d3c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4d3e:	aa02      	add	r2, sp, #8
    4d40:	a903      	add	r1, sp, #12
    4d42:	a804      	add	r0, sp, #16
    4d44:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d48:	f7ff fece 	bl	4ae8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d4c:	9a02      	ldr	r2, [sp, #8]
    4d4e:	a903      	add	r1, sp, #12
    4d50:	ab04      	add	r3, sp, #16
    4d52:	4618      	mov	r0, r3
    4d54:	f7ff fee2 	bl	4b1c <Power_Ip_TimeoutExpired>
    4d58:	4603      	mov	r3, r0
    4d5a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    4d5e:	4b4b      	ldr	r3, [pc, #300]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4d60:	695b      	ldr	r3, [r3, #20]
    4d62:	f003 0301 	and.w	r3, r3, #1
    4d66:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4d68:	9b05      	ldr	r3, [sp, #20]
    4d6a:	2b01      	cmp	r3, #1
    4d6c:	d006      	beq.n	4d7c <Power_Ip_SMC_ModeConfig+0x88>
    4d6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d72:	f083 0301 	eor.w	r3, r3, #1
    4d76:	b2db      	uxtb	r3, r3
    4d78:	2b00      	cmp	r3, #0
    4d7a:	d1e7      	bne.n	4d4c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    4d7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d80:	2b00      	cmp	r3, #0
    4d82:	d079      	beq.n	4e78 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4d84:	2301      	movs	r3, #1
    4d86:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4d88:	21ff      	movs	r1, #255	; 0xff
    4d8a:	2000      	movs	r0, #0
    4d8c:	f7ff fe90 	bl	4ab0 <Power_Ip_ReportPowerErrors>
            }

            break;
    4d90:	e072      	b.n	4e78 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    4d92:	4b3e      	ldr	r3, [pc, #248]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4d94:	68db      	ldr	r3, [r3, #12]
    4d96:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4d98:	9b06      	ldr	r3, [sp, #24]
    4d9a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d9e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    4da0:	9b06      	ldr	r3, [sp, #24]
    4da2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4da6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4da8:	4a38      	ldr	r2, [pc, #224]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4daa:	9b06      	ldr	r3, [sp, #24]
    4dac:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4dae:	aa02      	add	r2, sp, #8
    4db0:	a903      	add	r1, sp, #12
    4db2:	a804      	add	r0, sp, #16
    4db4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4db8:	f7ff fe96 	bl	4ae8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4dbc:	9a02      	ldr	r2, [sp, #8]
    4dbe:	a903      	add	r1, sp, #12
    4dc0:	ab04      	add	r3, sp, #16
    4dc2:	4618      	mov	r0, r3
    4dc4:	f7ff feaa 	bl	4b1c <Power_Ip_TimeoutExpired>
    4dc8:	4603      	mov	r3, r0
    4dca:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    4dce:	4b2f      	ldr	r3, [pc, #188]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4dd0:	695b      	ldr	r3, [r3, #20]
    4dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4dd6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4dd8:	9b05      	ldr	r3, [sp, #20]
    4dda:	2b80      	cmp	r3, #128	; 0x80
    4ddc:	d006      	beq.n	4dec <Power_Ip_SMC_ModeConfig+0xf8>
    4dde:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4de2:	f083 0301 	eor.w	r3, r3, #1
    4de6:	b2db      	uxtb	r3, r3
    4de8:	2b00      	cmp	r3, #0
    4dea:	d1e7      	bne.n	4dbc <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    4dec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d043      	beq.n	4e7c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4df4:	2301      	movs	r3, #1
    4df6:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4df8:	21ff      	movs	r1, #255	; 0xff
    4dfa:	2000      	movs	r0, #0
    4dfc:	f7ff fe58 	bl	4ab0 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e00:	e03c      	b.n	4e7c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    4e02:	4b22      	ldr	r3, [pc, #136]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4e04:	68db      	ldr	r3, [r3, #12]
    4e06:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4e08:	9b06      	ldr	r3, [sp, #24]
    4e0a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4e0e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    4e10:	9b06      	ldr	r3, [sp, #24]
    4e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4e16:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4e18:	4a1c      	ldr	r2, [pc, #112]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4e1a:	9b06      	ldr	r3, [sp, #24]
    4e1c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4e1e:	aa02      	add	r2, sp, #8
    4e20:	a903      	add	r1, sp, #12
    4e22:	a804      	add	r0, sp, #16
    4e24:	f24c 3350 	movw	r3, #50000	; 0xc350
    4e28:	f7ff fe5e 	bl	4ae8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4e2c:	9a02      	ldr	r2, [sp, #8]
    4e2e:	a903      	add	r1, sp, #12
    4e30:	ab04      	add	r3, sp, #16
    4e32:	4618      	mov	r0, r3
    4e34:	f7ff fe72 	bl	4b1c <Power_Ip_TimeoutExpired>
    4e38:	4603      	mov	r3, r0
    4e3a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    4e3e:	4b13      	ldr	r3, [pc, #76]	; (4e8c <Power_Ip_SMC_ModeConfig+0x198>)
    4e40:	695b      	ldr	r3, [r3, #20]
    4e42:	f003 0304 	and.w	r3, r3, #4
    4e46:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4e48:	9b05      	ldr	r3, [sp, #20]
    4e4a:	2b04      	cmp	r3, #4
    4e4c:	d006      	beq.n	4e5c <Power_Ip_SMC_ModeConfig+0x168>
    4e4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e52:	f083 0301 	eor.w	r3, r3, #1
    4e56:	b2db      	uxtb	r3, r3
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d1e7      	bne.n	4e2c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    4e5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e60:	2b00      	cmp	r3, #0
    4e62:	d00d      	beq.n	4e80 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e64:	2301      	movs	r3, #1
    4e66:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e68:	21ff      	movs	r1, #255	; 0xff
    4e6a:	2000      	movs	r0, #0
    4e6c:	f7ff fe20 	bl	4ab0 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e70:	e006      	b.n	4e80 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e72:	2301      	movs	r3, #1
    4e74:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    4e76:	e004      	b.n	4e82 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e78:	bf00      	nop
    4e7a:	e002      	b.n	4e82 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e7c:	bf00      	nop
    4e7e:	e000      	b.n	4e82 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4e80:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    4e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    4e84:	4618      	mov	r0, r3
    4e86:	b00b      	add	sp, #44	; 0x2c
    4e88:	f85d fb04 	ldr.w	pc, [sp], #4
    4e8c:	4007e000 	.word	0x4007e000

00004e90 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e90:	b500      	push	{lr}
    4e92:	b085      	sub	sp, #20
    4e94:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e96:	9b01      	ldr	r3, [sp, #4]
    4e98:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e9a:	9803      	ldr	r0, [sp, #12]
    4e9c:	f000 fbc8 	bl	5630 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4ea0:	4a03      	ldr	r2, [pc, #12]	; (4eb0 <Port_Init+0x20>)
    4ea2:	9b03      	ldr	r3, [sp, #12]
    4ea4:	6013      	str	r3, [r2, #0]
        }
    }
}
    4ea6:	bf00      	nop
    4ea8:	b005      	add	sp, #20
    4eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    4eae:	bf00      	nop
    4eb0:	1fff8cf4 	.word	0x1fff8cf4

00004eb4 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4eb4:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4eb6:	4b03      	ldr	r3, [pc, #12]	; (4ec4 <Port_RefreshPortDirection+0x10>)
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	4618      	mov	r0, r3
    4ebc:	f000 fc10 	bl	56e0 <Port_Ipw_RefreshPortDirection>
    }
}
    4ec0:	bf00      	nop
    4ec2:	bd08      	pop	{r3, pc}
    4ec4:	1fff8cf4 	.word	0x1fff8cf4

00004ec8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4ec8:	b086      	sub	sp, #24
    4eca:	9003      	str	r0, [sp, #12]
    4ecc:	9102      	str	r1, [sp, #8]
    4ece:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4ed0:	23ff      	movs	r3, #255	; 0xff
    4ed2:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4ed4:	9b03      	ldr	r3, [sp, #12]
    4ed6:	4a39      	ldr	r2, [pc, #228]	; (4fbc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4ed8:	4293      	cmp	r3, r2
    4eda:	d151      	bne.n	4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4edc:	9b02      	ldr	r3, [sp, #8]
    4ede:	2b10      	cmp	r3, #16
    4ee0:	d867      	bhi.n	4fb2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4ee2:	a201      	add	r2, pc, #4	; (adr r2, 4ee8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4ee8:	00004f2d 	.word	0x00004f2d
    4eec:	00004f3b 	.word	0x00004f3b
    4ef0:	00004fb3 	.word	0x00004fb3
    4ef4:	00004fb3 	.word	0x00004fb3
    4ef8:	00004fb3 	.word	0x00004fb3
    4efc:	00004fb3 	.word	0x00004fb3
    4f00:	00004fb3 	.word	0x00004fb3
    4f04:	00004fb3 	.word	0x00004fb3
    4f08:	00004fb3 	.word	0x00004fb3
    4f0c:	00004fb3 	.word	0x00004fb3
    4f10:	00004fb3 	.word	0x00004fb3
    4f14:	00004fb3 	.word	0x00004fb3
    4f18:	00004fb3 	.word	0x00004fb3
    4f1c:	00004f49 	.word	0x00004f49
    4f20:	00004f57 	.word	0x00004f57
    4f24:	00004f65 	.word	0x00004f65
    4f28:	00004f73 	.word	0x00004f73
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4f2c:	2301      	movs	r3, #1
    4f2e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f30:	9a05      	ldr	r2, [sp, #20]
    4f32:	9b01      	ldr	r3, [sp, #4]
    4f34:	4313      	orrs	r3, r2
    4f36:	9305      	str	r3, [sp, #20]
                break;
    4f38:	e03c      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4f3a:	2302      	movs	r3, #2
    4f3c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f3e:	9a05      	ldr	r2, [sp, #20]
    4f40:	9b01      	ldr	r3, [sp, #4]
    4f42:	4313      	orrs	r3, r2
    4f44:	9305      	str	r3, [sp, #20]
                break;
    4f46:	e035      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4f48:	2304      	movs	r3, #4
    4f4a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f4c:	9a05      	ldr	r2, [sp, #20]
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	4313      	orrs	r3, r2
    4f52:	9305      	str	r3, [sp, #20]
                break;
    4f54:	e02e      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4f56:	2308      	movs	r3, #8
    4f58:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f5a:	9a05      	ldr	r2, [sp, #20]
    4f5c:	9b01      	ldr	r3, [sp, #4]
    4f5e:	4313      	orrs	r3, r2
    4f60:	9305      	str	r3, [sp, #20]
                break;
    4f62:	e027      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f64:	230e      	movs	r3, #14
    4f66:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f68:	9a05      	ldr	r2, [sp, #20]
    4f6a:	9b01      	ldr	r3, [sp, #4]
    4f6c:	4013      	ands	r3, r2
    4f6e:	9305      	str	r3, [sp, #20]
                break;
    4f70:	e020      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f72:	230d      	movs	r3, #13
    4f74:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f76:	9a05      	ldr	r2, [sp, #20]
    4f78:	9b01      	ldr	r3, [sp, #4]
    4f7a:	4013      	ands	r3, r2
    4f7c:	9305      	str	r3, [sp, #20]
                break;
    4f7e:	e019      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f80:	9b03      	ldr	r3, [sp, #12]
    4f82:	4a0f      	ldr	r2, [pc, #60]	; (4fc0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f84:	4293      	cmp	r3, r2
    4f86:	d115      	bne.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f88:	9b02      	ldr	r3, [sp, #8]
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d003      	beq.n	4f96 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f8e:	9b02      	ldr	r3, [sp, #8]
    4f90:	2b01      	cmp	r3, #1
    4f92:	d007      	beq.n	4fa4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f94:	e00e      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f96:	230b      	movs	r3, #11
    4f98:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f9a:	9a05      	ldr	r2, [sp, #20]
    4f9c:	9b01      	ldr	r3, [sp, #4]
    4f9e:	4013      	ands	r3, r2
    4fa0:	9305      	str	r3, [sp, #20]
                break;
    4fa2:	e007      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4fa4:	2307      	movs	r3, #7
    4fa6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4fa8:	9a05      	ldr	r2, [sp, #20]
    4faa:	9b01      	ldr	r3, [sp, #4]
    4fac:	4013      	ands	r3, r2
    4fae:	9305      	str	r3, [sp, #20]
                break;
    4fb0:	e000      	b.n	4fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4fb2:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4fb4:	9b05      	ldr	r3, [sp, #20]
}
    4fb6:	4618      	mov	r0, r3
    4fb8:	b006      	add	sp, #24
    4fba:	4770      	bx	lr
    4fbc:	4004a000 	.word	0x4004a000
    4fc0:	4004b000 	.word	0x4004b000

00004fc4 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4fc4:	b500      	push	{lr}
    4fc6:	b089      	sub	sp, #36	; 0x24
    4fc8:	9003      	str	r0, [sp, #12]
    4fca:	9102      	str	r1, [sp, #8]
    4fcc:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4fce:	9b01      	ldr	r3, [sp, #4]
    4fd0:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	2b08      	cmp	r3, #8
    4fd6:	d121      	bne.n	501c <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4fd8:	4b13      	ldr	r3, [pc, #76]	; (5028 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fda:	685b      	ldr	r3, [r3, #4]
    4fdc:	f003 030f 	and.w	r3, r3, #15
    4fe0:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4fe2:	9a06      	ldr	r2, [sp, #24]
    4fe4:	9902      	ldr	r1, [sp, #8]
    4fe6:	9803      	ldr	r0, [sp, #12]
    4fe8:	f7ff ff6e 	bl	4ec8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4fec:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4fee:	9b05      	ldr	r3, [sp, #20]
    4ff0:	2bff      	cmp	r3, #255	; 0xff
    4ff2:	d011      	beq.n	5018 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4ff4:	f001 f938 	bl	6268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4ff8:	4b0b      	ldr	r3, [pc, #44]	; (5028 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4ffa:	685b      	ldr	r3, [r3, #4]
    4ffc:	4a0a      	ldr	r2, [pc, #40]	; (5028 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4ffe:	f023 030f 	bic.w	r3, r3, #15
    5002:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5004:	4b08      	ldr	r3, [pc, #32]	; (5028 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5006:	685a      	ldr	r2, [r3, #4]
    5008:	9b05      	ldr	r3, [sp, #20]
    500a:	f003 030f 	and.w	r3, r3, #15
    500e:	4906      	ldr	r1, [pc, #24]	; (5028 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5010:	4313      	orrs	r3, r2
    5012:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5014:	f001 f954 	bl	62c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5018:	2300      	movs	r3, #0
    501a:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    501c:	9b07      	ldr	r3, [sp, #28]
}
    501e:	4618      	mov	r0, r3
    5020:	b009      	add	sp, #36	; 0x24
    5022:	f85d fb04 	ldr.w	pc, [sp], #4
    5026:	bf00      	nop
    5028:	40048000 	.word	0x40048000

0000502c <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    502c:	b500      	push	{lr}
    502e:	b087      	sub	sp, #28
    5030:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5032:	2300      	movs	r3, #0
    5034:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5036:	2300      	movs	r3, #0
    5038:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    503a:	2300      	movs	r3, #0
    503c:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    503e:	9b01      	ldr	r3, [sp, #4]
    5040:	68db      	ldr	r3, [r3, #12]
    5042:	2b02      	cmp	r3, #2
    5044:	d00a      	beq.n	505c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5046:	9b05      	ldr	r3, [sp, #20]
    5048:	f043 0302 	orr.w	r3, r3, #2
    504c:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    504e:	9b01      	ldr	r3, [sp, #4]
    5050:	68db      	ldr	r3, [r3, #12]
    5052:	f003 0301 	and.w	r3, r3, #1
    5056:	9a05      	ldr	r2, [sp, #20]
    5058:	4313      	orrs	r3, r2
    505a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    505c:	9b01      	ldr	r3, [sp, #4]
    505e:	699b      	ldr	r3, [r3, #24]
    5060:	019b      	lsls	r3, r3, #6
    5062:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5066:	9a05      	ldr	r2, [sp, #20]
    5068:	4313      	orrs	r3, r2
    506a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    506c:	9b01      	ldr	r3, [sp, #4]
    506e:	6a1b      	ldr	r3, [r3, #32]
    5070:	03db      	lsls	r3, r3, #15
    5072:	b29b      	uxth	r3, r3
    5074:	9a05      	ldr	r2, [sp, #20]
    5076:	4313      	orrs	r3, r2
    5078:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    507a:	9b01      	ldr	r3, [sp, #4]
    507c:	7f1b      	ldrb	r3, [r3, #28]
    507e:	2b00      	cmp	r3, #0
    5080:	d001      	beq.n	5086 <Port_Ci_Port_Ip_PinInit+0x5a>
    5082:	2310      	movs	r3, #16
    5084:	e000      	b.n	5088 <Port_Ci_Port_Ip_PinInit+0x5c>
    5086:	2300      	movs	r3, #0
    5088:	9a05      	ldr	r2, [sp, #20]
    508a:	4313      	orrs	r3, r2
    508c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	691b      	ldr	r3, [r3, #16]
    5092:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5094:	9b01      	ldr	r3, [sp, #4]
    5096:	6818      	ldr	r0, [r3, #0]
    5098:	9b01      	ldr	r3, [sp, #4]
    509a:	689b      	ldr	r3, [r3, #8]
    509c:	9a04      	ldr	r2, [sp, #16]
    509e:	4619      	mov	r1, r3
    50a0:	f7ff ff90 	bl	4fc4 <Port_Ci_Port_Ip_ConfigureInterleave>
    50a4:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    50a6:	9b03      	ldr	r3, [sp, #12]
    50a8:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    50aa:	9b04      	ldr	r3, [sp, #16]
    50ac:	021b      	lsls	r3, r3, #8
    50ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    50b2:	9a05      	ldr	r2, [sp, #20]
    50b4:	4313      	orrs	r3, r2
    50b6:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    50b8:	f000 ff3c 	bl	5f34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	681b      	ldr	r3, [r3, #0]
    50c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    50c4:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    50c6:	9b01      	ldr	r3, [sp, #4]
    50c8:	689b      	ldr	r3, [r3, #8]
    50ca:	2201      	movs	r2, #1
    50cc:	fa02 f303 	lsl.w	r3, r2, r3
    50d0:	43db      	mvns	r3, r3
    50d2:	9a02      	ldr	r2, [sp, #8]
    50d4:	4013      	ands	r3, r2
    50d6:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    50d8:	9b01      	ldr	r3, [sp, #4]
    50da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    50de:	2b00      	cmp	r3, #0
    50e0:	d001      	beq.n	50e6 <Port_Ci_Port_Ip_PinInit+0xba>
    50e2:	2201      	movs	r2, #1
    50e4:	e000      	b.n	50e8 <Port_Ci_Port_Ip_PinInit+0xbc>
    50e6:	2200      	movs	r2, #0
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	689b      	ldr	r3, [r3, #8]
    50ec:	fa02 f303 	lsl.w	r3, r2, r3
    50f0:	9a02      	ldr	r2, [sp, #8]
    50f2:	4313      	orrs	r3, r2
    50f4:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	9a02      	ldr	r2, [sp, #8]
    50fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5100:	f000 ff44 	bl	5f8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5104:	9b04      	ldr	r3, [sp, #16]
    5106:	2b01      	cmp	r3, #1
    5108:	d16d      	bne.n	51e6 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    510a:	9b01      	ldr	r3, [sp, #4]
    510c:	695b      	ldr	r3, [r3, #20]
    510e:	2b02      	cmp	r3, #2
    5110:	d138      	bne.n	5184 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5112:	9b01      	ldr	r3, [sp, #4]
    5114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5118:	2b01      	cmp	r3, #1
    511a:	d10f      	bne.n	513c <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    511c:	f000 ff5c 	bl	5fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5120:	9b01      	ldr	r3, [sp, #4]
    5122:	685b      	ldr	r3, [r3, #4]
    5124:	6859      	ldr	r1, [r3, #4]
    5126:	9b01      	ldr	r3, [sp, #4]
    5128:	689b      	ldr	r3, [r3, #8]
    512a:	2201      	movs	r2, #1
    512c:	409a      	lsls	r2, r3
    512e:	9b01      	ldr	r3, [sp, #4]
    5130:	685b      	ldr	r3, [r3, #4]
    5132:	430a      	orrs	r2, r1
    5134:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5136:	f000 ff7b 	bl	6030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    513a:	e013      	b.n	5164 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    513c:	9b01      	ldr	r3, [sp, #4]
    513e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5142:	2b00      	cmp	r3, #0
    5144:	d10e      	bne.n	5164 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5146:	f000 ff99 	bl	607c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    514a:	9b01      	ldr	r3, [sp, #4]
    514c:	685b      	ldr	r3, [r3, #4]
    514e:	6899      	ldr	r1, [r3, #8]
    5150:	9b01      	ldr	r3, [sp, #4]
    5152:	689b      	ldr	r3, [r3, #8]
    5154:	2201      	movs	r2, #1
    5156:	409a      	lsls	r2, r3
    5158:	9b01      	ldr	r3, [sp, #4]
    515a:	685b      	ldr	r3, [r3, #4]
    515c:	430a      	orrs	r2, r1
    515e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5160:	f000 ffb8 	bl	60d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5164:	f000 ffdc 	bl	6120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5168:	9b01      	ldr	r3, [sp, #4]
    516a:	685b      	ldr	r3, [r3, #4]
    516c:	6959      	ldr	r1, [r3, #20]
    516e:	9b01      	ldr	r3, [sp, #4]
    5170:	689b      	ldr	r3, [r3, #8]
    5172:	2201      	movs	r2, #1
    5174:	409a      	lsls	r2, r3
    5176:	9b01      	ldr	r3, [sp, #4]
    5178:	685b      	ldr	r3, [r3, #4]
    517a:	430a      	orrs	r2, r1
    517c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    517e:	f000 fffb 	bl	6178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5182:	e030      	b.n	51e6 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5184:	f000 ffcc 	bl	6120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	685b      	ldr	r3, [r3, #4]
    518c:	6959      	ldr	r1, [r3, #20]
    518e:	9b01      	ldr	r3, [sp, #4]
    5190:	689b      	ldr	r3, [r3, #8]
    5192:	2201      	movs	r2, #1
    5194:	fa02 f303 	lsl.w	r3, r2, r3
    5198:	43da      	mvns	r2, r3
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	685b      	ldr	r3, [r3, #4]
    519e:	400a      	ands	r2, r1
    51a0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    51a2:	f000 ffe9 	bl	6178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    51a6:	f001 f80d 	bl	61c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    51aa:	9b01      	ldr	r3, [sp, #4]
    51ac:	685b      	ldr	r3, [r3, #4]
    51ae:	6999      	ldr	r1, [r3, #24]
    51b0:	9b01      	ldr	r3, [sp, #4]
    51b2:	689b      	ldr	r3, [r3, #8]
    51b4:	2201      	movs	r2, #1
    51b6:	fa02 f303 	lsl.w	r3, r2, r3
    51ba:	43da      	mvns	r2, r3
    51bc:	9b01      	ldr	r3, [sp, #4]
    51be:	685b      	ldr	r3, [r3, #4]
    51c0:	400a      	ands	r2, r1
    51c2:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    51c4:	9b01      	ldr	r3, [sp, #4]
    51c6:	695b      	ldr	r3, [r3, #20]
    51c8:	2b03      	cmp	r3, #3
    51ca:	d10a      	bne.n	51e2 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    51cc:	9b01      	ldr	r3, [sp, #4]
    51ce:	685b      	ldr	r3, [r3, #4]
    51d0:	6999      	ldr	r1, [r3, #24]
    51d2:	9b01      	ldr	r3, [sp, #4]
    51d4:	689b      	ldr	r3, [r3, #8]
    51d6:	2201      	movs	r2, #1
    51d8:	409a      	lsls	r2, r3
    51da:	9b01      	ldr	r3, [sp, #4]
    51dc:	685b      	ldr	r3, [r3, #4]
    51de:	430a      	orrs	r2, r1
    51e0:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    51e2:	f001 f81b 	bl	621c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    51e6:	9b01      	ldr	r3, [sp, #4]
    51e8:	681b      	ldr	r3, [r3, #0]
    51ea:	9a01      	ldr	r2, [sp, #4]
    51ec:	6892      	ldr	r2, [r2, #8]
    51ee:	9905      	ldr	r1, [sp, #20]
    51f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51f4:	bf00      	nop
    51f6:	b007      	add	sp, #28
    51f8:	f85d fb04 	ldr.w	pc, [sp], #4

000051fc <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    51fc:	b500      	push	{lr}
    51fe:	b085      	sub	sp, #20
    5200:	9001      	str	r0, [sp, #4]
    5202:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5204:	2300      	movs	r3, #0
    5206:	9303      	str	r3, [sp, #12]
    5208:	e00d      	b.n	5226 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    520a:	9a03      	ldr	r2, [sp, #12]
    520c:	4613      	mov	r3, r2
    520e:	009b      	lsls	r3, r3, #2
    5210:	4413      	add	r3, r2
    5212:	00db      	lsls	r3, r3, #3
    5214:	461a      	mov	r2, r3
    5216:	9b00      	ldr	r3, [sp, #0]
    5218:	4413      	add	r3, r2
    521a:	4618      	mov	r0, r3
    521c:	f7ff ff06 	bl	502c <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5220:	9b03      	ldr	r3, [sp, #12]
    5222:	3301      	adds	r3, #1
    5224:	9303      	str	r3, [sp, #12]
    5226:	9a03      	ldr	r2, [sp, #12]
    5228:	9b01      	ldr	r3, [sp, #4]
    522a:	429a      	cmp	r2, r3
    522c:	d3ed      	bcc.n	520a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    522e:	2300      	movs	r3, #0
}
    5230:	4618      	mov	r0, r3
    5232:	b005      	add	sp, #20
    5234:	f85d fb04 	ldr.w	pc, [sp], #4

00005238 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5238:	b500      	push	{lr}
    523a:	b087      	sub	sp, #28
    523c:	9003      	str	r0, [sp, #12]
    523e:	9102      	str	r1, [sp, #8]
    5240:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5242:	9a01      	ldr	r2, [sp, #4]
    5244:	9902      	ldr	r1, [sp, #8]
    5246:	9803      	ldr	r0, [sp, #12]
    5248:	f7ff febc 	bl	4fc4 <Port_Ci_Port_Ip_ConfigureInterleave>
    524c:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    524e:	f001 f85d 	bl	630c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5252:	9b03      	ldr	r3, [sp, #12]
    5254:	9a02      	ldr	r2, [sp, #8]
    5256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    525a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    525c:	9b04      	ldr	r3, [sp, #16]
    525e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5262:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5264:	9b05      	ldr	r3, [sp, #20]
    5266:	021b      	lsls	r3, r3, #8
    5268:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    526c:	9a04      	ldr	r2, [sp, #16]
    526e:	4313      	orrs	r3, r2
    5270:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5272:	9b03      	ldr	r3, [sp, #12]
    5274:	9a02      	ldr	r2, [sp, #8]
    5276:	9904      	ldr	r1, [sp, #16]
    5278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    527c:	f001 f872 	bl	6364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5280:	bf00      	nop
    5282:	b007      	add	sp, #28
    5284:	f85d fb04 	ldr.w	pc, [sp], #4

00005288 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5288:	b500      	push	{lr}
    528a:	b083      	sub	sp, #12
    528c:	9001      	str	r0, [sp, #4]
    528e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5290:	f001 f88e 	bl	63b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    529a:	2101      	movs	r1, #1
    529c:	9b00      	ldr	r3, [sp, #0]
    529e:	fa01 f303 	lsl.w	r3, r1, r3
    52a2:	431a      	orrs	r2, r3
    52a4:	9b01      	ldr	r3, [sp, #4]
    52a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    52aa:	f001 f8ad 	bl	6408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    52ae:	bf00      	nop
    52b0:	b003      	add	sp, #12
    52b2:	f85d fb04 	ldr.w	pc, [sp], #4

000052b6 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    52b6:	b500      	push	{lr}
    52b8:	b083      	sub	sp, #12
    52ba:	9001      	str	r0, [sp, #4]
    52bc:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    52be:	f001 f8c9 	bl	6454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    52c2:	9b01      	ldr	r3, [sp, #4]
    52c4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    52c8:	2101      	movs	r1, #1
    52ca:	9b00      	ldr	r3, [sp, #0]
    52cc:	fa01 f303 	lsl.w	r3, r1, r3
    52d0:	43db      	mvns	r3, r3
    52d2:	401a      	ands	r2, r3
    52d4:	9b01      	ldr	r3, [sp, #4]
    52d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    52da:	f001 f8e7 	bl	64ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    52de:	bf00      	nop
    52e0:	b003      	add	sp, #12
    52e2:	f85d fb04 	ldr.w	pc, [sp], #4

000052e6 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    52e6:	b082      	sub	sp, #8
    52e8:	9001      	str	r0, [sp, #4]
    52ea:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    52ec:	9b00      	ldr	r3, [sp, #0]
    52ee:	785b      	ldrb	r3, [r3, #1]
    52f0:	f003 0201 	and.w	r2, r3, #1
    52f4:	9b01      	ldr	r3, [sp, #4]
    52f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    52fa:	9b00      	ldr	r3, [sp, #0]
    52fc:	789b      	ldrb	r3, [r3, #2]
    52fe:	f003 021f 	and.w	r2, r3, #31
    5302:	9b01      	ldr	r3, [sp, #4]
    5304:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5308:	bf00      	nop
    530a:	b002      	add	sp, #8
    530c:	4770      	bx	lr

0000530e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    530e:	b086      	sub	sp, #24
    5310:	9003      	str	r0, [sp, #12]
    5312:	9301      	str	r3, [sp, #4]
    5314:	460b      	mov	r3, r1
    5316:	f8ad 300a 	strh.w	r3, [sp, #10]
    531a:	4613      	mov	r3, r2
    531c:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5320:	2300      	movs	r3, #0
    5322:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    5326:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    532a:	f043 0301 	orr.w	r3, r3, #1
    532e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5332:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5336:	f043 0302 	orr.w	r3, r3, #2
    533a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    533e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5342:	f043 0310 	orr.w	r3, r3, #16
    5346:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    534a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    534e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5352:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5356:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    535a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    535e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5362:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    536a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    536e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5372:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5376:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    537a:	4013      	ands	r3, r2
    537c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5380:	9b01      	ldr	r3, [sp, #4]
    5382:	2b00      	cmp	r3, #0
    5384:	d003      	beq.n	538e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5386:	9b01      	ldr	r3, [sp, #4]
    5388:	2b01      	cmp	r3, #1
    538a:	d00a      	beq.n	53a2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    538c:	e013      	b.n	53b6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    538e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5392:	041a      	lsls	r2, r3, #16
    5394:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5398:	431a      	orrs	r2, r3
    539a:	9b03      	ldr	r3, [sp, #12]
    539c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    53a0:	e009      	b.n	53b6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    53a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    53a6:	041a      	lsls	r2, r3, #16
    53a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53ac:	431a      	orrs	r2, r3
    53ae:	9b03      	ldr	r3, [sp, #12]
    53b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    53b4:	bf00      	nop
    }
}
    53b6:	bf00      	nop
    53b8:	b006      	add	sp, #24
    53ba:	4770      	bx	lr

000053bc <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    53bc:	b500      	push	{lr}
    53be:	b087      	sub	sp, #28
    53c0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    53c2:	9b01      	ldr	r3, [sp, #4]
    53c4:	885b      	ldrh	r3, [r3, #2]
    53c6:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    53ca:	9b01      	ldr	r3, [sp, #4]
    53cc:	689b      	ldr	r3, [r3, #8]
    53ce:	7a1b      	ldrb	r3, [r3, #8]
    53d0:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    53d4:	9b01      	ldr	r3, [sp, #4]
    53d6:	689b      	ldr	r3, [r3, #8]
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    53dc:	9b01      	ldr	r3, [sp, #4]
    53de:	689b      	ldr	r3, [r3, #8]
    53e0:	685b      	ldr	r3, [r3, #4]
    53e2:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    53e4:	2300      	movs	r3, #0
    53e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    53ea:	e111      	b.n	5610 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    53ec:	9b02      	ldr	r3, [sp, #8]
    53ee:	2b02      	cmp	r3, #2
    53f0:	d169      	bne.n	54c6 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    53f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53f6:	2b01      	cmp	r3, #1
    53f8:	d11a      	bne.n	5430 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53fa:	9b01      	ldr	r3, [sp, #4]
    53fc:	685a      	ldr	r2, [r3, #4]
    53fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5402:	005b      	lsls	r3, r3, #1
    5404:	4413      	add	r3, r2
    5406:	881b      	ldrh	r3, [r3, #0]
    5408:	f003 021f 	and.w	r2, r3, #31
    540c:	9b01      	ldr	r3, [sp, #4]
    540e:	6859      	ldr	r1, [r3, #4]
    5410:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5414:	005b      	lsls	r3, r3, #1
    5416:	440b      	add	r3, r1
    5418:	881b      	ldrh	r3, [r3, #0]
    541a:	095b      	lsrs	r3, r3, #5
    541c:	b29b      	uxth	r3, r3
    541e:	4619      	mov	r1, r3
    5420:	4b81      	ldr	r3, [pc, #516]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    5422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5426:	2101      	movs	r1, #1
    5428:	fa01 f202 	lsl.w	r2, r1, r2
    542c:	605a      	str	r2, [r3, #4]
    542e:	e01d      	b.n	546c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5430:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5434:	2b00      	cmp	r3, #0
    5436:	d119      	bne.n	546c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	685a      	ldr	r2, [r3, #4]
    543c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5440:	005b      	lsls	r3, r3, #1
    5442:	4413      	add	r3, r2
    5444:	881b      	ldrh	r3, [r3, #0]
    5446:	f003 021f 	and.w	r2, r3, #31
    544a:	9b01      	ldr	r3, [sp, #4]
    544c:	6859      	ldr	r1, [r3, #4]
    544e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5452:	005b      	lsls	r3, r3, #1
    5454:	440b      	add	r3, r1
    5456:	881b      	ldrh	r3, [r3, #0]
    5458:	095b      	lsrs	r3, r3, #5
    545a:	b29b      	uxth	r3, r3
    545c:	4619      	mov	r1, r3
    545e:	4b72      	ldr	r3, [pc, #456]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    5460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5464:	2101      	movs	r1, #1
    5466:	fa01 f202 	lsl.w	r2, r1, r2
    546a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    546c:	f001 f844 	bl	64f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5470:	9b01      	ldr	r3, [sp, #4]
    5472:	685a      	ldr	r2, [r3, #4]
    5474:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5478:	005b      	lsls	r3, r3, #1
    547a:	4413      	add	r3, r2
    547c:	881b      	ldrh	r3, [r3, #0]
    547e:	095b      	lsrs	r3, r3, #5
    5480:	b29b      	uxth	r3, r3
    5482:	461a      	mov	r2, r3
    5484:	4b68      	ldr	r3, [pc, #416]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    5486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    548a:	6959      	ldr	r1, [r3, #20]
    548c:	9b01      	ldr	r3, [sp, #4]
    548e:	685a      	ldr	r2, [r3, #4]
    5490:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5494:	005b      	lsls	r3, r3, #1
    5496:	4413      	add	r3, r2
    5498:	881b      	ldrh	r3, [r3, #0]
    549a:	f003 031f 	and.w	r3, r3, #31
    549e:	2201      	movs	r2, #1
    54a0:	409a      	lsls	r2, r3
    54a2:	9b01      	ldr	r3, [sp, #4]
    54a4:	6858      	ldr	r0, [r3, #4]
    54a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54aa:	005b      	lsls	r3, r3, #1
    54ac:	4403      	add	r3, r0
    54ae:	881b      	ldrh	r3, [r3, #0]
    54b0:	095b      	lsrs	r3, r3, #5
    54b2:	b29b      	uxth	r3, r3
    54b4:	4618      	mov	r0, r3
    54b6:	4b5c      	ldr	r3, [pc, #368]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    54b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54bc:	430a      	orrs	r2, r1
    54be:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54c0:	f001 f846 	bl	6550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    54c4:	e086      	b.n	55d4 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    54c6:	f001 f817 	bl	64f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    54ca:	9b01      	ldr	r3, [sp, #4]
    54cc:	685a      	ldr	r2, [r3, #4]
    54ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54d2:	005b      	lsls	r3, r3, #1
    54d4:	4413      	add	r3, r2
    54d6:	881b      	ldrh	r3, [r3, #0]
    54d8:	095b      	lsrs	r3, r3, #5
    54da:	b29b      	uxth	r3, r3
    54dc:	461a      	mov	r2, r3
    54de:	4b52      	ldr	r3, [pc, #328]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    54e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54e4:	6959      	ldr	r1, [r3, #20]
    54e6:	9b01      	ldr	r3, [sp, #4]
    54e8:	685a      	ldr	r2, [r3, #4]
    54ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ee:	005b      	lsls	r3, r3, #1
    54f0:	4413      	add	r3, r2
    54f2:	881b      	ldrh	r3, [r3, #0]
    54f4:	f003 031f 	and.w	r3, r3, #31
    54f8:	2201      	movs	r2, #1
    54fa:	fa02 f303 	lsl.w	r3, r2, r3
    54fe:	43da      	mvns	r2, r3
    5500:	9b01      	ldr	r3, [sp, #4]
    5502:	6858      	ldr	r0, [r3, #4]
    5504:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5508:	005b      	lsls	r3, r3, #1
    550a:	4403      	add	r3, r0
    550c:	881b      	ldrh	r3, [r3, #0]
    550e:	095b      	lsrs	r3, r3, #5
    5510:	b29b      	uxth	r3, r3
    5512:	4618      	mov	r0, r3
    5514:	4b44      	ldr	r3, [pc, #272]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    5516:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    551a:	400a      	ands	r2, r1
    551c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    551e:	f001 f817 	bl	6550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5522:	f001 f83b 	bl	659c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5526:	9b01      	ldr	r3, [sp, #4]
    5528:	685a      	ldr	r2, [r3, #4]
    552a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    552e:	005b      	lsls	r3, r3, #1
    5530:	4413      	add	r3, r2
    5532:	881b      	ldrh	r3, [r3, #0]
    5534:	095b      	lsrs	r3, r3, #5
    5536:	b29b      	uxth	r3, r3
    5538:	461a      	mov	r2, r3
    553a:	4b3b      	ldr	r3, [pc, #236]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    553c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5540:	6999      	ldr	r1, [r3, #24]
    5542:	9b01      	ldr	r3, [sp, #4]
    5544:	685a      	ldr	r2, [r3, #4]
    5546:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    554a:	005b      	lsls	r3, r3, #1
    554c:	4413      	add	r3, r2
    554e:	881b      	ldrh	r3, [r3, #0]
    5550:	f003 031f 	and.w	r3, r3, #31
    5554:	2201      	movs	r2, #1
    5556:	fa02 f303 	lsl.w	r3, r2, r3
    555a:	43da      	mvns	r2, r3
    555c:	9b01      	ldr	r3, [sp, #4]
    555e:	6858      	ldr	r0, [r3, #4]
    5560:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5564:	005b      	lsls	r3, r3, #1
    5566:	4403      	add	r3, r0
    5568:	881b      	ldrh	r3, [r3, #0]
    556a:	095b      	lsrs	r3, r3, #5
    556c:	b29b      	uxth	r3, r3
    556e:	4618      	mov	r0, r3
    5570:	4b2d      	ldr	r3, [pc, #180]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    5572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5576:	400a      	ands	r2, r1
    5578:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    557a:	9b02      	ldr	r3, [sp, #8]
    557c:	2b03      	cmp	r3, #3
    557e:	d127      	bne.n	55d0 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5580:	9b01      	ldr	r3, [sp, #4]
    5582:	685a      	ldr	r2, [r3, #4]
    5584:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5588:	005b      	lsls	r3, r3, #1
    558a:	4413      	add	r3, r2
    558c:	881b      	ldrh	r3, [r3, #0]
    558e:	095b      	lsrs	r3, r3, #5
    5590:	b29b      	uxth	r3, r3
    5592:	461a      	mov	r2, r3
    5594:	4b24      	ldr	r3, [pc, #144]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    5596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    559a:	6999      	ldr	r1, [r3, #24]
    559c:	9b01      	ldr	r3, [sp, #4]
    559e:	685a      	ldr	r2, [r3, #4]
    55a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55a4:	005b      	lsls	r3, r3, #1
    55a6:	4413      	add	r3, r2
    55a8:	881b      	ldrh	r3, [r3, #0]
    55aa:	f003 031f 	and.w	r3, r3, #31
    55ae:	2201      	movs	r2, #1
    55b0:	409a      	lsls	r2, r3
    55b2:	9b01      	ldr	r3, [sp, #4]
    55b4:	6858      	ldr	r0, [r3, #4]
    55b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55ba:	005b      	lsls	r3, r3, #1
    55bc:	4403      	add	r3, r0
    55be:	881b      	ldrh	r3, [r3, #0]
    55c0:	095b      	lsrs	r3, r3, #5
    55c2:	b29b      	uxth	r3, r3
    55c4:	4618      	mov	r0, r3
    55c6:	4b18      	ldr	r3, [pc, #96]	; (5628 <Port_Ipw_Init_UnusedPins+0x26c>)
    55c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    55cc:	430a      	orrs	r2, r1
    55ce:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    55d0:	f001 f810 	bl	65f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    55d4:	9b01      	ldr	r3, [sp, #4]
    55d6:	685a      	ldr	r2, [r3, #4]
    55d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55dc:	005b      	lsls	r3, r3, #1
    55de:	4413      	add	r3, r2
    55e0:	881b      	ldrh	r3, [r3, #0]
    55e2:	095b      	lsrs	r3, r3, #5
    55e4:	b29b      	uxth	r3, r3
    55e6:	461a      	mov	r2, r3
    55e8:	4b10      	ldr	r3, [pc, #64]	; (562c <Port_Ipw_Init_UnusedPins+0x270>)
    55ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    55ee:	9a01      	ldr	r2, [sp, #4]
    55f0:	6851      	ldr	r1, [r2, #4]
    55f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55f6:	0052      	lsls	r2, r2, #1
    55f8:	440a      	add	r2, r1
    55fa:	8812      	ldrh	r2, [r2, #0]
    55fc:	f002 021f 	and.w	r2, r2, #31
    5600:	9903      	ldr	r1, [sp, #12]
    5602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5606:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    560a:	3301      	adds	r3, #1
    560c:	f8ad 3016 	strh.w	r3, [sp, #22]
    5610:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5614:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5618:	429a      	cmp	r2, r3
    561a:	f4ff aee7 	bcc.w	53ec <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    561e:	bf00      	nop
    5620:	bf00      	nop
    5622:	b007      	add	sp, #28
    5624:	f85d fb04 	ldr.w	pc, [sp], #4
    5628:	000078c0 	.word	0x000078c0
    562c:	000078ac 	.word	0x000078ac

00005630 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5630:	b500      	push	{lr}
    5632:	b085      	sub	sp, #20
    5634:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5636:	9b01      	ldr	r3, [sp, #4]
    5638:	7c1b      	ldrb	r3, [r3, #16]
    563a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    563e:	2300      	movs	r3, #0
    5640:	f8ad 300e 	strh.w	r3, [sp, #14]
    5644:	e035      	b.n	56b2 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5646:	9b01      	ldr	r3, [sp, #4]
    5648:	695a      	ldr	r2, [r3, #20]
    564a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    564e:	00db      	lsls	r3, r3, #3
    5650:	4413      	add	r3, r2
    5652:	781b      	ldrb	r3, [r3, #0]
    5654:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5658:	f89d 300c 	ldrb.w	r3, [sp, #12]
    565c:	4a1f      	ldr	r2, [pc, #124]	; (56dc <Port_Ipw_Init+0xac>)
    565e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5662:	9b01      	ldr	r3, [sp, #4]
    5664:	695a      	ldr	r2, [r3, #20]
    5666:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    566a:	00db      	lsls	r3, r3, #3
    566c:	4413      	add	r3, r2
    566e:	4619      	mov	r1, r3
    5670:	f7ff fe39 	bl	52e6 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5674:	f001 f92c 	bl	68d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5678:	f89d 300c 	ldrb.w	r3, [sp, #12]
    567c:	4a17      	ldr	r2, [pc, #92]	; (56dc <Port_Ipw_Init+0xac>)
    567e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5682:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5686:	9b01      	ldr	r3, [sp, #4]
    5688:	695a      	ldr	r2, [r3, #20]
    568a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    568e:	00db      	lsls	r3, r3, #3
    5690:	4413      	add	r3, r2
    5692:	685a      	ldr	r2, [r3, #4]
    5694:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5698:	4810      	ldr	r0, [pc, #64]	; (56dc <Port_Ipw_Init+0xac>)
    569a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    569e:	430a      	orrs	r2, r1
    56a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    56a4:	f001 f940 	bl	6928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    56a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    56ac:	3301      	adds	r3, #1
    56ae:	f8ad 300e 	strh.w	r3, [sp, #14]
    56b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    56b6:	b29b      	uxth	r3, r3
    56b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56bc:	429a      	cmp	r2, r3
    56be:	d3c2      	bcc.n	5646 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	6a1b      	ldr	r3, [r3, #32]
    56c4:	4619      	mov	r1, r3
    56c6:	2004      	movs	r0, #4
    56c8:	f7ff fd98 	bl	51fc <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    56cc:	9801      	ldr	r0, [sp, #4]
    56ce:	f7ff fe75 	bl	53bc <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    56d2:	bf00      	nop
    56d4:	b005      	add	sp, #20
    56d6:	f85d fb04 	ldr.w	pc, [sp], #4
    56da:	bf00      	nop
    56dc:	000078ac 	.word	0x000078ac

000056e0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    56e0:	b500      	push	{lr}
    56e2:	b085      	sub	sp, #20
    56e4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    56e6:	9b01      	ldr	r3, [sp, #4]
    56e8:	881b      	ldrh	r3, [r3, #0]
    56ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    56ee:	2300      	movs	r3, #0
    56f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    56f4:	e0d2      	b.n	589c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    56f6:	9b01      	ldr	r3, [sp, #4]
    56f8:	68d9      	ldr	r1, [r3, #12]
    56fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56fe:	4613      	mov	r3, r2
    5700:	009b      	lsls	r3, r3, #2
    5702:	4413      	add	r3, r2
    5704:	009b      	lsls	r3, r3, #2
    5706:	440b      	add	r3, r1
    5708:	7c5b      	ldrb	r3, [r3, #17]
    570a:	f083 0301 	eor.w	r3, r3, #1
    570e:	b2db      	uxtb	r3, r3
    5710:	2b00      	cmp	r3, #0
    5712:	f000 80be 	beq.w	5892 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5716:	9b01      	ldr	r3, [sp, #4]
    5718:	68d9      	ldr	r1, [r3, #12]
    571a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    571e:	4613      	mov	r3, r2
    5720:	009b      	lsls	r3, r3, #2
    5722:	4413      	add	r3, r2
    5724:	009b      	lsls	r3, r3, #2
    5726:	440b      	add	r3, r1
    5728:	7c1b      	ldrb	r3, [r3, #16]
    572a:	2b00      	cmp	r3, #0
    572c:	f000 80b1 	beq.w	5892 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5730:	9b01      	ldr	r3, [sp, #4]
    5732:	68d9      	ldr	r1, [r3, #12]
    5734:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5738:	4613      	mov	r3, r2
    573a:	009b      	lsls	r3, r3, #2
    573c:	4413      	add	r3, r2
    573e:	009b      	lsls	r3, r3, #2
    5740:	440b      	add	r3, r1
    5742:	881b      	ldrh	r3, [r3, #0]
    5744:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5748:	9b01      	ldr	r3, [sp, #4]
    574a:	68d9      	ldr	r1, [r3, #12]
    574c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5750:	4613      	mov	r3, r2
    5752:	009b      	lsls	r3, r3, #2
    5754:	4413      	add	r3, r2
    5756:	009b      	lsls	r3, r3, #2
    5758:	440b      	add	r3, r1
    575a:	68db      	ldr	r3, [r3, #12]
    575c:	2b02      	cmp	r3, #2
    575e:	d11d      	bne.n	579c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5760:	f001 f9fe 	bl	6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5764:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5768:	095b      	lsrs	r3, r3, #5
    576a:	b29b      	uxth	r3, r3
    576c:	461a      	mov	r2, r3
    576e:	4b51      	ldr	r3, [pc, #324]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5774:	6959      	ldr	r1, [r3, #20]
    5776:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    577a:	f003 031f 	and.w	r3, r3, #31
    577e:	2201      	movs	r2, #1
    5780:	409a      	lsls	r2, r3
    5782:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5786:	095b      	lsrs	r3, r3, #5
    5788:	b29b      	uxth	r3, r3
    578a:	4618      	mov	r0, r3
    578c:	4b49      	ldr	r3, [pc, #292]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    578e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5792:	430a      	orrs	r2, r1
    5794:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5796:	f001 fa0f 	bl	6bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    579a:	e07a      	b.n	5892 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    579c:	9b01      	ldr	r3, [sp, #4]
    579e:	68d9      	ldr	r1, [r3, #12]
    57a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57a4:	4613      	mov	r3, r2
    57a6:	009b      	lsls	r3, r3, #2
    57a8:	4413      	add	r3, r2
    57aa:	009b      	lsls	r3, r3, #2
    57ac:	440b      	add	r3, r1
    57ae:	68db      	ldr	r3, [r3, #12]
    57b0:	2b01      	cmp	r3, #1
    57b2:	d00b      	beq.n	57cc <Port_Ipw_RefreshPortDirection+0xec>
    57b4:	9b01      	ldr	r3, [sp, #4]
    57b6:	68d9      	ldr	r1, [r3, #12]
    57b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57bc:	4613      	mov	r3, r2
    57be:	009b      	lsls	r3, r3, #2
    57c0:	4413      	add	r3, r2
    57c2:	009b      	lsls	r3, r3, #2
    57c4:	440b      	add	r3, r1
    57c6:	68db      	ldr	r3, [r3, #12]
    57c8:	2b03      	cmp	r3, #3
    57ca:	d162      	bne.n	5892 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    57cc:	f001 f9c8 	bl	6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57d4:	095b      	lsrs	r3, r3, #5
    57d6:	b29b      	uxth	r3, r3
    57d8:	461a      	mov	r2, r3
    57da:	4b36      	ldr	r3, [pc, #216]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57e0:	6959      	ldr	r1, [r3, #20]
    57e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57e6:	f003 031f 	and.w	r3, r3, #31
    57ea:	2201      	movs	r2, #1
    57ec:	fa02 f303 	lsl.w	r3, r2, r3
    57f0:	43da      	mvns	r2, r3
    57f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57f6:	095b      	lsrs	r3, r3, #5
    57f8:	b29b      	uxth	r3, r3
    57fa:	4618      	mov	r0, r3
    57fc:	4b2d      	ldr	r3, [pc, #180]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5802:	400a      	ands	r2, r1
    5804:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5806:	f001 f9d7 	bl	6bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    580a:	f001 f9fb 	bl	6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    580e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5812:	095b      	lsrs	r3, r3, #5
    5814:	b29b      	uxth	r3, r3
    5816:	461a      	mov	r2, r3
    5818:	4b26      	ldr	r3, [pc, #152]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    581e:	6999      	ldr	r1, [r3, #24]
    5820:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5824:	f003 031f 	and.w	r3, r3, #31
    5828:	2201      	movs	r2, #1
    582a:	fa02 f303 	lsl.w	r3, r2, r3
    582e:	43da      	mvns	r2, r3
    5830:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5834:	095b      	lsrs	r3, r3, #5
    5836:	b29b      	uxth	r3, r3
    5838:	4618      	mov	r0, r3
    583a:	4b1e      	ldr	r3, [pc, #120]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    583c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5840:	400a      	ands	r2, r1
    5842:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5844:	9b01      	ldr	r3, [sp, #4]
    5846:	68d9      	ldr	r1, [r3, #12]
    5848:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    584c:	4613      	mov	r3, r2
    584e:	009b      	lsls	r3, r3, #2
    5850:	4413      	add	r3, r2
    5852:	009b      	lsls	r3, r3, #2
    5854:	440b      	add	r3, r1
    5856:	68db      	ldr	r3, [r3, #12]
    5858:	2b03      	cmp	r3, #3
    585a:	d118      	bne.n	588e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    585c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5860:	095b      	lsrs	r3, r3, #5
    5862:	b29b      	uxth	r3, r3
    5864:	461a      	mov	r2, r3
    5866:	4b13      	ldr	r3, [pc, #76]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    586c:	6999      	ldr	r1, [r3, #24]
    586e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5872:	f003 031f 	and.w	r3, r3, #31
    5876:	2201      	movs	r2, #1
    5878:	409a      	lsls	r2, r3
    587a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    587e:	095b      	lsrs	r3, r3, #5
    5880:	b29b      	uxth	r3, r3
    5882:	4618      	mov	r0, r3
    5884:	4b0b      	ldr	r3, [pc, #44]	; (58b4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5886:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    588a:	430a      	orrs	r2, r1
    588c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    588e:	f001 f9e5 	bl	6c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5892:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5896:	3301      	adds	r3, #1
    5898:	f8ad 300e 	strh.w	r3, [sp, #14]
    589c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    58a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    58a4:	429a      	cmp	r2, r3
    58a6:	f4ff af26 	bcc.w	56f6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    58aa:	bf00      	nop
    58ac:	bf00      	nop
    58ae:	b005      	add	sp, #20
    58b0:	f85d fb04 	ldr.w	pc, [sp], #4
    58b4:	000078c0 	.word	0x000078c0

000058b8 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    58b8:	b500      	push	{lr}
    58ba:	b085      	sub	sp, #20
    58bc:	4603      	mov	r3, r0
    58be:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    58c2:	2300      	movs	r3, #0
    58c4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    58c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    58cc:	4618      	mov	r0, r3
    58ce:	f000 f85b 	bl	5988 <Dio_Ipw_ReadChannel>
    58d2:	4603      	mov	r3, r0
    58d4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    58d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    58dc:	4618      	mov	r0, r3
    58de:	b005      	add	sp, #20
    58e0:	f85d fb04 	ldr.w	pc, [sp], #4

000058e4 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    58e4:	b500      	push	{lr}
    58e6:	b083      	sub	sp, #12
    58e8:	4603      	mov	r3, r0
    58ea:	460a      	mov	r2, r1
    58ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    58f0:	4613      	mov	r3, r2
    58f2:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    58f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
    58fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    58fe:	4611      	mov	r1, r2
    5900:	4618      	mov	r0, r3
    5902:	f000 f867 	bl	59d4 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5906:	bf00      	nop
    5908:	b003      	add	sp, #12
    590a:	f85d fb04 	ldr.w	pc, [sp], #4

0000590e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    590e:	b500      	push	{lr}
    5910:	b085      	sub	sp, #20
    5912:	4603      	mov	r3, r0
    5914:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5918:	2300      	movs	r3, #0
    591a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    591c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5920:	4618      	mov	r0, r3
    5922:	f000 f87d 	bl	5a20 <Dio_Ipw_ReadPort>
    5926:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5928:	9b03      	ldr	r3, [sp, #12]
}
    592a:	4618      	mov	r0, r3
    592c:	b005      	add	sp, #20
    592e:	f85d fb04 	ldr.w	pc, [sp], #4

00005932 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5932:	b500      	push	{lr}
    5934:	b083      	sub	sp, #12
    5936:	4603      	mov	r3, r0
    5938:	9100      	str	r1, [sp, #0]
    593a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    593e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5942:	9900      	ldr	r1, [sp, #0]
    5944:	4618      	mov	r0, r3
    5946:	f000 f883 	bl	5a50 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    594a:	bf00      	nop
    594c:	b003      	add	sp, #12
    594e:	f85d fb04 	ldr.w	pc, [sp], #4

00005952 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5952:	b500      	push	{lr}
    5954:	b085      	sub	sp, #20
    5956:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5958:	2300      	movs	r3, #0
    595a:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    595c:	9801      	ldr	r0, [sp, #4]
    595e:	f000 f88f 	bl	5a80 <Dio_Ipw_ReadChannelGroup>
    5962:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5964:	9b03      	ldr	r3, [sp, #12]
}
    5966:	4618      	mov	r0, r3
    5968:	b005      	add	sp, #20
    596a:	f85d fb04 	ldr.w	pc, [sp], #4

0000596e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    596e:	b500      	push	{lr}
    5970:	b083      	sub	sp, #12
    5972:	9001      	str	r0, [sp, #4]
    5974:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5976:	9900      	ldr	r1, [sp, #0]
    5978:	9801      	ldr	r0, [sp, #4]
    597a:	f000 f8a1 	bl	5ac0 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    597e:	bf00      	nop
    5980:	b003      	add	sp, #12
    5982:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005988 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5988:	b500      	push	{lr}
    598a:	b087      	sub	sp, #28
    598c:	4603      	mov	r3, r0
    598e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5992:	2300      	movs	r3, #0
    5994:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5998:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    599c:	095b      	lsrs	r3, r3, #5
    599e:	b29b      	uxth	r3, r3
    59a0:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    59a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59a6:	f003 031f 	and.w	r3, r3, #31
    59aa:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    59ac:	4a08      	ldr	r2, [pc, #32]	; (59d0 <Dio_Ipw_ReadChannel+0x48>)
    59ae:	9b04      	ldr	r3, [sp, #16]
    59b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    59b4:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    59b6:	9903      	ldr	r1, [sp, #12]
    59b8:	9802      	ldr	r0, [sp, #8]
    59ba:	f000 f90a 	bl	5bd2 <Gpio_Dio_Ip_ReadPin>
    59be:	4603      	mov	r3, r0
    59c0:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    59c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    59c8:	4618      	mov	r0, r3
    59ca:	b007      	add	sp, #28
    59cc:	f85d fb04 	ldr.w	pc, [sp], #4
    59d0:	1fff8b24 	.word	0x1fff8b24

000059d4 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    59d4:	b500      	push	{lr}
    59d6:	b087      	sub	sp, #28
    59d8:	4603      	mov	r3, r0
    59da:	460a      	mov	r2, r1
    59dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    59e0:	4613      	mov	r3, r2
    59e2:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    59e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59ea:	095b      	lsrs	r3, r3, #5
    59ec:	b29b      	uxth	r3, r3
    59ee:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    59f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    59f4:	f003 031f 	and.w	r3, r3, #31
    59f8:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    59fa:	4a08      	ldr	r2, [pc, #32]	; (5a1c <Dio_Ipw_WriteChannel+0x48>)
    59fc:	9b05      	ldr	r3, [sp, #20]
    59fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a02:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    5a04:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5a08:	461a      	mov	r2, r3
    5a0a:	9904      	ldr	r1, [sp, #16]
    5a0c:	9803      	ldr	r0, [sp, #12]
    5a0e:	f000 f881 	bl	5b14 <Gpio_Dio_Ip_WritePin>
}
    5a12:	bf00      	nop
    5a14:	b007      	add	sp, #28
    5a16:	f85d fb04 	ldr.w	pc, [sp], #4
    5a1a:	bf00      	nop
    5a1c:	1fff8b24 	.word	0x1fff8b24

00005a20 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    5a20:	b500      	push	{lr}
    5a22:	b085      	sub	sp, #20
    5a24:	4603      	mov	r3, r0
    5a26:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5a2a:	2300      	movs	r3, #0
    5a2c:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a32:	4a06      	ldr	r2, [pc, #24]	; (5a4c <Dio_Ipw_ReadPort+0x2c>)
    5a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a38:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5a3a:	9802      	ldr	r0, [sp, #8]
    5a3c:	f000 f8be 	bl	5bbc <Gpio_Dio_Ip_ReadPins>
    5a40:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    5a42:	9b03      	ldr	r3, [sp, #12]
}
    5a44:	4618      	mov	r0, r3
    5a46:	b005      	add	sp, #20
    5a48:	f85d fb04 	ldr.w	pc, [sp], #4
    5a4c:	1fff8b24 	.word	0x1fff8b24

00005a50 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5a50:	b500      	push	{lr}
    5a52:	b085      	sub	sp, #20
    5a54:	4603      	mov	r3, r0
    5a56:	9100      	str	r1, [sp, #0]
    5a58:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    5a5c:	9b00      	ldr	r3, [sp, #0]
    5a5e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5a60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5a64:	4a05      	ldr	r2, [pc, #20]	; (5a7c <Dio_Ipw_WritePort+0x2c>)
    5a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a6a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    5a6c:	9903      	ldr	r1, [sp, #12]
    5a6e:	9802      	ldr	r0, [sp, #8]
    5a70:	f000 f875 	bl	5b5e <Gpio_Dio_Ip_WritePins>
}
    5a74:	bf00      	nop
    5a76:	b005      	add	sp, #20
    5a78:	f85d fb04 	ldr.w	pc, [sp], #4
    5a7c:	1fff8b24 	.word	0x1fff8b24

00005a80 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    5a80:	b500      	push	{lr}
    5a82:	b087      	sub	sp, #28
    5a84:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5a86:	2300      	movs	r3, #0
    5a88:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5a8a:	9b01      	ldr	r3, [sp, #4]
    5a8c:	781b      	ldrb	r3, [r3, #0]
    5a8e:	461a      	mov	r2, r3
    5a90:	4b0a      	ldr	r3, [pc, #40]	; (5abc <Dio_Ipw_ReadChannelGroup+0x3c>)
    5a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a96:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5a98:	9804      	ldr	r0, [sp, #16]
    5a9a:	f000 f88f 	bl	5bbc <Gpio_Dio_Ip_ReadPins>
    5a9e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	685a      	ldr	r2, [r3, #4]
    5aa4:	9b03      	ldr	r3, [sp, #12]
    5aa6:	4013      	ands	r3, r2
    5aa8:	9a01      	ldr	r2, [sp, #4]
    5aaa:	7852      	ldrb	r2, [r2, #1]
    5aac:	40d3      	lsrs	r3, r2
    5aae:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    5ab0:	9b05      	ldr	r3, [sp, #20]
}
    5ab2:	4618      	mov	r0, r3
    5ab4:	b007      	add	sp, #28
    5ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    5aba:	bf00      	nop
    5abc:	1fff8b24 	.word	0x1fff8b24

00005ac0 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    5ac0:	b500      	push	{lr}
    5ac2:	b087      	sub	sp, #28
    5ac4:	9001      	str	r0, [sp, #4]
    5ac6:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5ac8:	9b01      	ldr	r3, [sp, #4]
    5aca:	781b      	ldrb	r3, [r3, #0]
    5acc:	461a      	mov	r2, r3
    5ace:	4b10      	ldr	r3, [pc, #64]	; (5b10 <Dio_Ipw_WriteChannelGroup+0x50>)
    5ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ad4:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    5ad6:	9b01      	ldr	r3, [sp, #4]
    5ad8:	785b      	ldrb	r3, [r3, #1]
    5ada:	461a      	mov	r2, r3
    5adc:	9b00      	ldr	r3, [sp, #0]
    5ade:	fa03 f202 	lsl.w	r2, r3, r2
    5ae2:	9b01      	ldr	r3, [sp, #4]
    5ae4:	685b      	ldr	r3, [r3, #4]
    5ae6:	4013      	ands	r3, r2
    5ae8:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    5aea:	9904      	ldr	r1, [sp, #16]
    5aec:	9805      	ldr	r0, [sp, #20]
    5aee:	f000 f84a 	bl	5b86 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    5af2:	9b04      	ldr	r3, [sp, #16]
    5af4:	43da      	mvns	r2, r3
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	685b      	ldr	r3, [r3, #4]
    5afa:	4013      	ands	r3, r2
    5afc:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    5afe:	9903      	ldr	r1, [sp, #12]
    5b00:	9805      	ldr	r0, [sp, #20]
    5b02:	f000 f849 	bl	5b98 <Gpio_Dio_Ip_ClearPins>

}
    5b06:	bf00      	nop
    5b08:	b007      	add	sp, #28
    5b0a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b0e:	bf00      	nop
    5b10:	1fff8b24 	.word	0x1fff8b24

00005b14 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    5b14:	b500      	push	{lr}
    5b16:	b087      	sub	sp, #28
    5b18:	9003      	str	r0, [sp, #12]
    5b1a:	9102      	str	r1, [sp, #8]
    5b1c:	4613      	mov	r3, r2
    5b1e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    5b22:	f000 f86d 	bl	5c00 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    5b26:	9b03      	ldr	r3, [sp, #12]
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    5b2c:	2201      	movs	r2, #1
    5b2e:	9b02      	ldr	r3, [sp, #8]
    5b30:	fa02 f303 	lsl.w	r3, r2, r3
    5b34:	43db      	mvns	r3, r3
    5b36:	9a05      	ldr	r2, [sp, #20]
    5b38:	4013      	ands	r3, r2
    5b3a:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    5b3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5b40:	9b02      	ldr	r3, [sp, #8]
    5b42:	fa02 f303 	lsl.w	r3, r2, r3
    5b46:	9a05      	ldr	r2, [sp, #20]
    5b48:	4313      	orrs	r3, r2
    5b4a:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    5b4c:	9b03      	ldr	r3, [sp, #12]
    5b4e:	9a05      	ldr	r2, [sp, #20]
    5b50:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    5b52:	f000 f881 	bl	5c58 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    5b56:	bf00      	nop
    5b58:	b007      	add	sp, #28
    5b5a:	f85d fb04 	ldr.w	pc, [sp], #4

00005b5e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5b5e:	b082      	sub	sp, #8
    5b60:	9001      	str	r0, [sp, #4]
    5b62:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    5b64:	9b01      	ldr	r3, [sp, #4]
    5b66:	9a00      	ldr	r2, [sp, #0]
    5b68:	601a      	str	r2, [r3, #0]
}
    5b6a:	bf00      	nop
    5b6c:	b002      	add	sp, #8
    5b6e:	4770      	bx	lr

00005b70 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    5b70:	b084      	sub	sp, #16
    5b72:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    5b74:	2300      	movs	r3, #0
    5b76:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    5b78:	9b01      	ldr	r3, [sp, #4]
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	9303      	str	r3, [sp, #12]
    return returnValue;
    5b7e:	9b03      	ldr	r3, [sp, #12]
}
    5b80:	4618      	mov	r0, r3
    5b82:	b004      	add	sp, #16
    5b84:	4770      	bx	lr

00005b86 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5b86:	b082      	sub	sp, #8
    5b88:	9001      	str	r0, [sp, #4]
    5b8a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    5b8c:	9b01      	ldr	r3, [sp, #4]
    5b8e:	9a00      	ldr	r2, [sp, #0]
    5b90:	605a      	str	r2, [r3, #4]
}
    5b92:	bf00      	nop
    5b94:	b002      	add	sp, #8
    5b96:	4770      	bx	lr

00005b98 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5b98:	b082      	sub	sp, #8
    5b9a:	9001      	str	r0, [sp, #4]
    5b9c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    5b9e:	9b01      	ldr	r3, [sp, #4]
    5ba0:	9a00      	ldr	r2, [sp, #0]
    5ba2:	609a      	str	r2, [r3, #8]
}
    5ba4:	bf00      	nop
    5ba6:	b002      	add	sp, #8
    5ba8:	4770      	bx	lr

00005baa <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    5baa:	b082      	sub	sp, #8
    5bac:	9001      	str	r0, [sp, #4]
    5bae:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    5bb0:	9b01      	ldr	r3, [sp, #4]
    5bb2:	9a00      	ldr	r2, [sp, #0]
    5bb4:	60da      	str	r2, [r3, #12]
}
    5bb6:	bf00      	nop
    5bb8:	b002      	add	sp, #8
    5bba:	4770      	bx	lr

00005bbc <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    5bbc:	b084      	sub	sp, #16
    5bbe:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    5bc0:	2300      	movs	r3, #0
    5bc2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    5bc4:	9b01      	ldr	r3, [sp, #4]
    5bc6:	691b      	ldr	r3, [r3, #16]
    5bc8:	9303      	str	r3, [sp, #12]
    return returnValue;
    5bca:	9b03      	ldr	r3, [sp, #12]
}
    5bcc:	4618      	mov	r0, r3
    5bce:	b004      	add	sp, #16
    5bd0:	4770      	bx	lr

00005bd2 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    5bd2:	b084      	sub	sp, #16
    5bd4:	9001      	str	r0, [sp, #4]
    5bd6:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    5bd8:	2300      	movs	r3, #0
    5bda:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    5bde:	9b01      	ldr	r3, [sp, #4]
    5be0:	691a      	ldr	r2, [r3, #16]
    5be2:	2101      	movs	r1, #1
    5be4:	9b00      	ldr	r3, [sp, #0]
    5be6:	fa01 f303 	lsl.w	r3, r1, r3
    5bea:	401a      	ands	r2, r3
    5bec:	9b00      	ldr	r3, [sp, #0]
    5bee:	fa22 f303 	lsr.w	r3, r2, r3
    5bf2:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    5bf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5bfa:	4618      	mov	r0, r3
    5bfc:	b004      	add	sp, #16
    5bfe:	4770      	bx	lr

00005c00 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    5c00:	b500      	push	{lr}
    5c02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c04:	f7fa ff8c 	bl	b20 <Sys_GetCoreID>
    5c08:	4603      	mov	r3, r0
    5c0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    5c0c:	4a10      	ldr	r2, [pc, #64]	; (5c50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c0e:	9b01      	ldr	r3, [sp, #4]
    5c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c14:	2b00      	cmp	r3, #0
    5c16:	d10d      	bne.n	5c34 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5c18:	f7fa fea0 	bl	95c <Dio_schm_read_msr>
    5c1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5c1e:	9b00      	ldr	r3, [sp, #0]
    5c20:	f003 0301 	and.w	r3, r3, #1
    5c24:	2b00      	cmp	r3, #0
    5c26:	d100      	bne.n	5c2a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5c28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5c2a:	490a      	ldr	r1, [pc, #40]	; (5c54 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    5c2c:	9b01      	ldr	r3, [sp, #4]
    5c2e:	9a00      	ldr	r2, [sp, #0]
    5c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    5c34:	4a06      	ldr	r2, [pc, #24]	; (5c50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c36:	9b01      	ldr	r3, [sp, #4]
    5c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c3c:	1c5a      	adds	r2, r3, #1
    5c3e:	4904      	ldr	r1, [pc, #16]	; (5c50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    5c40:	9b01      	ldr	r3, [sp, #4]
    5c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5c46:	bf00      	nop
    5c48:	b003      	add	sp, #12
    5c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    5c4e:	bf00      	nop
    5c50:	1fff8cfc 	.word	0x1fff8cfc
    5c54:	1fff8cf8 	.word	0x1fff8cf8

00005c58 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    5c58:	b500      	push	{lr}
    5c5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5c5c:	f7fa ff60 	bl	b20 <Sys_GetCoreID>
    5c60:	4603      	mov	r3, r0
    5c62:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    5c64:	4a0d      	ldr	r2, [pc, #52]	; (5c9c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5c66:	9b01      	ldr	r3, [sp, #4]
    5c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c6c:	1e5a      	subs	r2, r3, #1
    5c6e:	490b      	ldr	r1, [pc, #44]	; (5c9c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5c70:	9b01      	ldr	r3, [sp, #4]
    5c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5c76:	4a0a      	ldr	r2, [pc, #40]	; (5ca0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    5c78:	9b01      	ldr	r3, [sp, #4]
    5c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c7e:	f003 0301 	and.w	r3, r3, #1
    5c82:	2b00      	cmp	r3, #0
    5c84:	d106      	bne.n	5c94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    5c86:	4a05      	ldr	r2, [pc, #20]	; (5c9c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    5c88:	9b01      	ldr	r3, [sp, #4]
    5c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	d100      	bne.n	5c94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5c92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5c94:	bf00      	nop
    5c96:	b003      	add	sp, #12
    5c98:	f85d fb04 	ldr.w	pc, [sp], #4
    5c9c:	1fff8cfc 	.word	0x1fff8cfc
    5ca0:	1fff8cf8 	.word	0x1fff8cf8

00005ca4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    5ca4:	b500      	push	{lr}
    5ca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5ca8:	f7fa ff3a 	bl	b20 <Sys_GetCoreID>
    5cac:	4603      	mov	r3, r0
    5cae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    5cb0:	4a10      	ldr	r2, [pc, #64]	; (5cf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5cb2:	9b01      	ldr	r3, [sp, #4]
    5cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d10d      	bne.n	5cd8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5cbc:	f7fa fe4e 	bl	95c <Dio_schm_read_msr>
    5cc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5cc2:	9b00      	ldr	r3, [sp, #0]
    5cc4:	f003 0301 	and.w	r3, r3, #1
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d100      	bne.n	5cce <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5ccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5cce:	490a      	ldr	r1, [pc, #40]	; (5cf8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	9a00      	ldr	r2, [sp, #0]
    5cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    5cd8:	4a06      	ldr	r2, [pc, #24]	; (5cf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5cda:	9b01      	ldr	r3, [sp, #4]
    5cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ce0:	1c5a      	adds	r2, r3, #1
    5ce2:	4904      	ldr	r1, [pc, #16]	; (5cf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    5ce4:	9b01      	ldr	r3, [sp, #4]
    5ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5cea:	bf00      	nop
    5cec:	b003      	add	sp, #12
    5cee:	f85d fb04 	ldr.w	pc, [sp], #4
    5cf2:	bf00      	nop
    5cf4:	1fff8d04 	.word	0x1fff8d04
    5cf8:	1fff8d00 	.word	0x1fff8d00

00005cfc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    5cfc:	b500      	push	{lr}
    5cfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d00:	f7fa ff0e 	bl	b20 <Sys_GetCoreID>
    5d04:	4603      	mov	r3, r0
    5d06:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    5d08:	4a0d      	ldr	r2, [pc, #52]	; (5d40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d0a:	9b01      	ldr	r3, [sp, #4]
    5d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d10:	1e5a      	subs	r2, r3, #1
    5d12:	490b      	ldr	r1, [pc, #44]	; (5d40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d14:	9b01      	ldr	r3, [sp, #4]
    5d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5d1a:	4a0a      	ldr	r2, [pc, #40]	; (5d44 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    5d1c:	9b01      	ldr	r3, [sp, #4]
    5d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d22:	f003 0301 	and.w	r3, r3, #1
    5d26:	2b00      	cmp	r3, #0
    5d28:	d106      	bne.n	5d38 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    5d2a:	4a05      	ldr	r2, [pc, #20]	; (5d40 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    5d2c:	9b01      	ldr	r3, [sp, #4]
    5d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d32:	2b00      	cmp	r3, #0
    5d34:	d100      	bne.n	5d38 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5d36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5d38:	bf00      	nop
    5d3a:	b003      	add	sp, #12
    5d3c:	f85d fb04 	ldr.w	pc, [sp], #4
    5d40:	1fff8d04 	.word	0x1fff8d04
    5d44:	1fff8d00 	.word	0x1fff8d00

00005d48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5d48:	b500      	push	{lr}
    5d4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5d4c:	f7fa fee8 	bl	b20 <Sys_GetCoreID>
    5d50:	4603      	mov	r3, r0
    5d52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    5d54:	4a10      	ldr	r2, [pc, #64]	; (5d98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5d56:	9b01      	ldr	r3, [sp, #4]
    5d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	d10d      	bne.n	5d7c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5d60:	f7fa fe05 	bl	96e <Mcu_schm_read_msr>
    5d64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5d66:	9b00      	ldr	r3, [sp, #0]
    5d68:	f003 0301 	and.w	r3, r3, #1
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d100      	bne.n	5d72 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5d70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5d72:	490a      	ldr	r1, [pc, #40]	; (5d9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    5d74:	9b01      	ldr	r3, [sp, #4]
    5d76:	9a00      	ldr	r2, [sp, #0]
    5d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    5d7c:	4a06      	ldr	r2, [pc, #24]	; (5d98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5d7e:	9b01      	ldr	r3, [sp, #4]
    5d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d84:	1c5a      	adds	r2, r3, #1
    5d86:	4904      	ldr	r1, [pc, #16]	; (5d98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    5d88:	9b01      	ldr	r3, [sp, #4]
    5d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5d8e:	bf00      	nop
    5d90:	b003      	add	sp, #12
    5d92:	f85d fb04 	ldr.w	pc, [sp], #4
    5d96:	bf00      	nop
    5d98:	1fff8d0c 	.word	0x1fff8d0c
    5d9c:	1fff8d08 	.word	0x1fff8d08

00005da0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    5da0:	b500      	push	{lr}
    5da2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5da4:	f7fa febc 	bl	b20 <Sys_GetCoreID>
    5da8:	4603      	mov	r3, r0
    5daa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    5dac:	4a0d      	ldr	r2, [pc, #52]	; (5de4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5dae:	9b01      	ldr	r3, [sp, #4]
    5db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5db4:	1e5a      	subs	r2, r3, #1
    5db6:	490b      	ldr	r1, [pc, #44]	; (5de4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5db8:	9b01      	ldr	r3, [sp, #4]
    5dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5dbe:	4a0a      	ldr	r2, [pc, #40]	; (5de8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    5dc0:	9b01      	ldr	r3, [sp, #4]
    5dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dc6:	f003 0301 	and.w	r3, r3, #1
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d106      	bne.n	5ddc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    5dce:	4a05      	ldr	r2, [pc, #20]	; (5de4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    5dd0:	9b01      	ldr	r3, [sp, #4]
    5dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	d100      	bne.n	5ddc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5dda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5ddc:	bf00      	nop
    5dde:	b003      	add	sp, #12
    5de0:	f85d fb04 	ldr.w	pc, [sp], #4
    5de4:	1fff8d0c 	.word	0x1fff8d0c
    5de8:	1fff8d08 	.word	0x1fff8d08

00005dec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5dec:	b500      	push	{lr}
    5dee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5df0:	f7fa fe96 	bl	b20 <Sys_GetCoreID>
    5df4:	4603      	mov	r3, r0
    5df6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    5df8:	4a10      	ldr	r2, [pc, #64]	; (5e3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5dfa:	9b01      	ldr	r3, [sp, #4]
    5dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e00:	2b00      	cmp	r3, #0
    5e02:	d10d      	bne.n	5e20 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5e04:	f7fa fdb3 	bl	96e <Mcu_schm_read_msr>
    5e08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5e0a:	9b00      	ldr	r3, [sp, #0]
    5e0c:	f003 0301 	and.w	r3, r3, #1
    5e10:	2b00      	cmp	r3, #0
    5e12:	d100      	bne.n	5e16 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5e14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    5e16:	490a      	ldr	r1, [pc, #40]	; (5e40 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    5e18:	9b01      	ldr	r3, [sp, #4]
    5e1a:	9a00      	ldr	r2, [sp, #0]
    5e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    5e20:	4a06      	ldr	r2, [pc, #24]	; (5e3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e28:	1c5a      	adds	r2, r3, #1
    5e2a:	4904      	ldr	r1, [pc, #16]	; (5e3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    5e2c:	9b01      	ldr	r3, [sp, #4]
    5e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5e32:	bf00      	nop
    5e34:	b003      	add	sp, #12
    5e36:	f85d fb04 	ldr.w	pc, [sp], #4
    5e3a:	bf00      	nop
    5e3c:	1fff8d14 	.word	0x1fff8d14
    5e40:	1fff8d10 	.word	0x1fff8d10

00005e44 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    5e44:	b500      	push	{lr}
    5e46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e48:	f7fa fe6a 	bl	b20 <Sys_GetCoreID>
    5e4c:	4603      	mov	r3, r0
    5e4e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    5e50:	4a0d      	ldr	r2, [pc, #52]	; (5e88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5e52:	9b01      	ldr	r3, [sp, #4]
    5e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e58:	1e5a      	subs	r2, r3, #1
    5e5a:	490b      	ldr	r1, [pc, #44]	; (5e88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5e5c:	9b01      	ldr	r3, [sp, #4]
    5e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    5e62:	4a0a      	ldr	r2, [pc, #40]	; (5e8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    5e64:	9b01      	ldr	r3, [sp, #4]
    5e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e6a:	f003 0301 	and.w	r3, r3, #1
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d106      	bne.n	5e80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    5e72:	4a05      	ldr	r2, [pc, #20]	; (5e88 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    5e74:	9b01      	ldr	r3, [sp, #4]
    5e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d100      	bne.n	5e80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5e7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5e80:	bf00      	nop
    5e82:	b003      	add	sp, #12
    5e84:	f85d fb04 	ldr.w	pc, [sp], #4
    5e88:	1fff8d14 	.word	0x1fff8d14
    5e8c:	1fff8d10 	.word	0x1fff8d10

00005e90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5e90:	b500      	push	{lr}
    5e92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5e94:	f7fa fe44 	bl	b20 <Sys_GetCoreID>
    5e98:	4603      	mov	r3, r0
    5e9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    5e9c:	4a10      	ldr	r2, [pc, #64]	; (5ee0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5e9e:	9b01      	ldr	r3, [sp, #4]
    5ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d10d      	bne.n	5ec4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5ea8:	f7fa fd61 	bl	96e <Mcu_schm_read_msr>
    5eac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5eae:	9b00      	ldr	r3, [sp, #0]
    5eb0:	f003 0301 	and.w	r3, r3, #1
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d100      	bne.n	5eba <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5eb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    5eba:	490a      	ldr	r1, [pc, #40]	; (5ee4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    5ebc:	9b01      	ldr	r3, [sp, #4]
    5ebe:	9a00      	ldr	r2, [sp, #0]
    5ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    5ec4:	4a06      	ldr	r2, [pc, #24]	; (5ee0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5ec6:	9b01      	ldr	r3, [sp, #4]
    5ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ecc:	1c5a      	adds	r2, r3, #1
    5ece:	4904      	ldr	r1, [pc, #16]	; (5ee0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    5ed0:	9b01      	ldr	r3, [sp, #4]
    5ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5ed6:	bf00      	nop
    5ed8:	b003      	add	sp, #12
    5eda:	f85d fb04 	ldr.w	pc, [sp], #4
    5ede:	bf00      	nop
    5ee0:	1fff8d1c 	.word	0x1fff8d1c
    5ee4:	1fff8d18 	.word	0x1fff8d18

00005ee8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    5ee8:	b500      	push	{lr}
    5eea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5eec:	f7fa fe18 	bl	b20 <Sys_GetCoreID>
    5ef0:	4603      	mov	r3, r0
    5ef2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    5ef4:	4a0d      	ldr	r2, [pc, #52]	; (5f2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5ef6:	9b01      	ldr	r3, [sp, #4]
    5ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5efc:	1e5a      	subs	r2, r3, #1
    5efe:	490b      	ldr	r1, [pc, #44]	; (5f2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f00:	9b01      	ldr	r3, [sp, #4]
    5f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    5f06:	4a0a      	ldr	r2, [pc, #40]	; (5f30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    5f08:	9b01      	ldr	r3, [sp, #4]
    5f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f0e:	f003 0301 	and.w	r3, r3, #1
    5f12:	2b00      	cmp	r3, #0
    5f14:	d106      	bne.n	5f24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    5f16:	4a05      	ldr	r2, [pc, #20]	; (5f2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    5f18:	9b01      	ldr	r3, [sp, #4]
    5f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d100      	bne.n	5f24 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5f22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5f24:	bf00      	nop
    5f26:	b003      	add	sp, #12
    5f28:	f85d fb04 	ldr.w	pc, [sp], #4
    5f2c:	1fff8d1c 	.word	0x1fff8d1c
    5f30:	1fff8d18 	.word	0x1fff8d18

00005f34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5f34:	b500      	push	{lr}
    5f36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f38:	f7fa fdf2 	bl	b20 <Sys_GetCoreID>
    5f3c:	4603      	mov	r3, r0
    5f3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    5f40:	4a10      	ldr	r2, [pc, #64]	; (5f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5f42:	9b01      	ldr	r3, [sp, #4]
    5f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d10d      	bne.n	5f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5f4c:	f7fa fd18 	bl	980 <Port_schm_read_msr>
    5f50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5f52:	9b00      	ldr	r3, [sp, #0]
    5f54:	f003 0301 	and.w	r3, r3, #1
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d100      	bne.n	5f5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    5f5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    5f5e:	490a      	ldr	r1, [pc, #40]	; (5f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    5f60:	9b01      	ldr	r3, [sp, #4]
    5f62:	9a00      	ldr	r2, [sp, #0]
    5f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    5f68:	4a06      	ldr	r2, [pc, #24]	; (5f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5f6a:	9b01      	ldr	r3, [sp, #4]
    5f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f70:	1c5a      	adds	r2, r3, #1
    5f72:	4904      	ldr	r1, [pc, #16]	; (5f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f7a:	bf00      	nop
    5f7c:	b003      	add	sp, #12
    5f7e:	f85d fb04 	ldr.w	pc, [sp], #4
    5f82:	bf00      	nop
    5f84:	1fff8d24 	.word	0x1fff8d24
    5f88:	1fff8d20 	.word	0x1fff8d20

00005f8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    5f8c:	b500      	push	{lr}
    5f8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5f90:	f7fa fdc6 	bl	b20 <Sys_GetCoreID>
    5f94:	4603      	mov	r3, r0
    5f96:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    5f98:	4a0d      	ldr	r2, [pc, #52]	; (5fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5f9a:	9b01      	ldr	r3, [sp, #4]
    5f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fa0:	1e5a      	subs	r2, r3, #1
    5fa2:	490b      	ldr	r1, [pc, #44]	; (5fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5fa4:	9b01      	ldr	r3, [sp, #4]
    5fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    5faa:	4a0a      	ldr	r2, [pc, #40]	; (5fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    5fac:	9b01      	ldr	r3, [sp, #4]
    5fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fb2:	f003 0301 	and.w	r3, r3, #1
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d106      	bne.n	5fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    5fba:	4a05      	ldr	r2, [pc, #20]	; (5fd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    5fbc:	9b01      	ldr	r3, [sp, #4]
    5fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d100      	bne.n	5fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    5fc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    5fc8:	bf00      	nop
    5fca:	b003      	add	sp, #12
    5fcc:	f85d fb04 	ldr.w	pc, [sp], #4
    5fd0:	1fff8d24 	.word	0x1fff8d24
    5fd4:	1fff8d20 	.word	0x1fff8d20

00005fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    5fd8:	b500      	push	{lr}
    5fda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    5fdc:	f7fa fda0 	bl	b20 <Sys_GetCoreID>
    5fe0:	4603      	mov	r3, r0
    5fe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    5fe4:	4a10      	ldr	r2, [pc, #64]	; (6028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    5fe6:	9b01      	ldr	r3, [sp, #4]
    5fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fec:	2b00      	cmp	r3, #0
    5fee:	d10d      	bne.n	600c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    5ff0:	f7fa fcc6 	bl	980 <Port_schm_read_msr>
    5ff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    5ff6:	9b00      	ldr	r3, [sp, #0]
    5ff8:	f003 0301 	and.w	r3, r3, #1
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	d100      	bne.n	6002 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6002:	490a      	ldr	r1, [pc, #40]	; (602c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	9a00      	ldr	r2, [sp, #0]
    6008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    600c:	4a06      	ldr	r2, [pc, #24]	; (6028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    600e:	9b01      	ldr	r3, [sp, #4]
    6010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6014:	1c5a      	adds	r2, r3, #1
    6016:	4904      	ldr	r1, [pc, #16]	; (6028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6018:	9b01      	ldr	r3, [sp, #4]
    601a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    601e:	bf00      	nop
    6020:	b003      	add	sp, #12
    6022:	f85d fb04 	ldr.w	pc, [sp], #4
    6026:	bf00      	nop
    6028:	1fff8d2c 	.word	0x1fff8d2c
    602c:	1fff8d28 	.word	0x1fff8d28

00006030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6030:	b500      	push	{lr}
    6032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6034:	f7fa fd74 	bl	b20 <Sys_GetCoreID>
    6038:	4603      	mov	r3, r0
    603a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    603c:	4a0d      	ldr	r2, [pc, #52]	; (6074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    603e:	9b01      	ldr	r3, [sp, #4]
    6040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6044:	1e5a      	subs	r2, r3, #1
    6046:	490b      	ldr	r1, [pc, #44]	; (6074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    604e:	4a0a      	ldr	r2, [pc, #40]	; (6078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    6050:	9b01      	ldr	r3, [sp, #4]
    6052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6056:	f003 0301 	and.w	r3, r3, #1
    605a:	2b00      	cmp	r3, #0
    605c:	d106      	bne.n	606c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    605e:	4a05      	ldr	r2, [pc, #20]	; (6074 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6060:	9b01      	ldr	r3, [sp, #4]
    6062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6066:	2b00      	cmp	r3, #0
    6068:	d100      	bne.n	606c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    606a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    606c:	bf00      	nop
    606e:	b003      	add	sp, #12
    6070:	f85d fb04 	ldr.w	pc, [sp], #4
    6074:	1fff8d2c 	.word	0x1fff8d2c
    6078:	1fff8d28 	.word	0x1fff8d28

0000607c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    607c:	b500      	push	{lr}
    607e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6080:	f7fa fd4e 	bl	b20 <Sys_GetCoreID>
    6084:	4603      	mov	r3, r0
    6086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6088:	4a10      	ldr	r2, [pc, #64]	; (60cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6090:	2b00      	cmp	r3, #0
    6092:	d10d      	bne.n	60b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6094:	f7fa fc74 	bl	980 <Port_schm_read_msr>
    6098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    609a:	9b00      	ldr	r3, [sp, #0]
    609c:	f003 0301 	and.w	r3, r3, #1
    60a0:	2b00      	cmp	r3, #0
    60a2:	d100      	bne.n	60a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    60a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    60a6:	490a      	ldr	r1, [pc, #40]	; (60d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    60a8:	9b01      	ldr	r3, [sp, #4]
    60aa:	9a00      	ldr	r2, [sp, #0]
    60ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    60b0:	4a06      	ldr	r2, [pc, #24]	; (60cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60b8:	1c5a      	adds	r2, r3, #1
    60ba:	4904      	ldr	r1, [pc, #16]	; (60cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    60c2:	bf00      	nop
    60c4:	b003      	add	sp, #12
    60c6:	f85d fb04 	ldr.w	pc, [sp], #4
    60ca:	bf00      	nop
    60cc:	1fff8d34 	.word	0x1fff8d34
    60d0:	1fff8d30 	.word	0x1fff8d30

000060d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    60d4:	b500      	push	{lr}
    60d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    60d8:	f7fa fd22 	bl	b20 <Sys_GetCoreID>
    60dc:	4603      	mov	r3, r0
    60de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    60e0:	4a0d      	ldr	r2, [pc, #52]	; (6118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60e8:	1e5a      	subs	r2, r3, #1
    60ea:	490b      	ldr	r1, [pc, #44]	; (6118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    60ec:	9b01      	ldr	r3, [sp, #4]
    60ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    60f2:	4a0a      	ldr	r2, [pc, #40]	; (611c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60fa:	f003 0301 	and.w	r3, r3, #1
    60fe:	2b00      	cmp	r3, #0
    6100:	d106      	bne.n	6110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    6102:	4a05      	ldr	r2, [pc, #20]	; (6118 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6104:	9b01      	ldr	r3, [sp, #4]
    6106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    610a:	2b00      	cmp	r3, #0
    610c:	d100      	bne.n	6110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    610e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6110:	bf00      	nop
    6112:	b003      	add	sp, #12
    6114:	f85d fb04 	ldr.w	pc, [sp], #4
    6118:	1fff8d34 	.word	0x1fff8d34
    611c:	1fff8d30 	.word	0x1fff8d30

00006120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6120:	b500      	push	{lr}
    6122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6124:	f7fa fcfc 	bl	b20 <Sys_GetCoreID>
    6128:	4603      	mov	r3, r0
    612a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    612c:	4a10      	ldr	r2, [pc, #64]	; (6170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6134:	2b00      	cmp	r3, #0
    6136:	d10d      	bne.n	6154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6138:	f7fa fc22 	bl	980 <Port_schm_read_msr>
    613c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    613e:	9b00      	ldr	r3, [sp, #0]
    6140:	f003 0301 	and.w	r3, r3, #1
    6144:	2b00      	cmp	r3, #0
    6146:	d100      	bne.n	614a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    614a:	490a      	ldr	r1, [pc, #40]	; (6174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    614c:	9b01      	ldr	r3, [sp, #4]
    614e:	9a00      	ldr	r2, [sp, #0]
    6150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6154:	4a06      	ldr	r2, [pc, #24]	; (6170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6156:	9b01      	ldr	r3, [sp, #4]
    6158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    615c:	1c5a      	adds	r2, r3, #1
    615e:	4904      	ldr	r1, [pc, #16]	; (6170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6160:	9b01      	ldr	r3, [sp, #4]
    6162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6166:	bf00      	nop
    6168:	b003      	add	sp, #12
    616a:	f85d fb04 	ldr.w	pc, [sp], #4
    616e:	bf00      	nop
    6170:	1fff8d3c 	.word	0x1fff8d3c
    6174:	1fff8d38 	.word	0x1fff8d38

00006178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6178:	b500      	push	{lr}
    617a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    617c:	f7fa fcd0 	bl	b20 <Sys_GetCoreID>
    6180:	4603      	mov	r3, r0
    6182:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6184:	4a0d      	ldr	r2, [pc, #52]	; (61bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6186:	9b01      	ldr	r3, [sp, #4]
    6188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    618c:	1e5a      	subs	r2, r3, #1
    618e:	490b      	ldr	r1, [pc, #44]	; (61bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6190:	9b01      	ldr	r3, [sp, #4]
    6192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    6196:	4a0a      	ldr	r2, [pc, #40]	; (61c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    619e:	f003 0301 	and.w	r3, r3, #1
    61a2:	2b00      	cmp	r3, #0
    61a4:	d106      	bne.n	61b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    61a6:	4a05      	ldr	r2, [pc, #20]	; (61bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d100      	bne.n	61b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    61b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    61b4:	bf00      	nop
    61b6:	b003      	add	sp, #12
    61b8:	f85d fb04 	ldr.w	pc, [sp], #4
    61bc:	1fff8d3c 	.word	0x1fff8d3c
    61c0:	1fff8d38 	.word	0x1fff8d38

000061c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    61c4:	b500      	push	{lr}
    61c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    61c8:	f7fa fcaa 	bl	b20 <Sys_GetCoreID>
    61cc:	4603      	mov	r3, r0
    61ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    61d0:	4a10      	ldr	r2, [pc, #64]	; (6214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    61d2:	9b01      	ldr	r3, [sp, #4]
    61d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61d8:	2b00      	cmp	r3, #0
    61da:	d10d      	bne.n	61f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    61dc:	f7fa fbd0 	bl	980 <Port_schm_read_msr>
    61e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    61e2:	9b00      	ldr	r3, [sp, #0]
    61e4:	f003 0301 	and.w	r3, r3, #1
    61e8:	2b00      	cmp	r3, #0
    61ea:	d100      	bne.n	61ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    61ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    61ee:	490a      	ldr	r1, [pc, #40]	; (6218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    61f0:	9b01      	ldr	r3, [sp, #4]
    61f2:	9a00      	ldr	r2, [sp, #0]
    61f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    61f8:	4a06      	ldr	r2, [pc, #24]	; (6214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    61fa:	9b01      	ldr	r3, [sp, #4]
    61fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6200:	1c5a      	adds	r2, r3, #1
    6202:	4904      	ldr	r1, [pc, #16]	; (6214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6204:	9b01      	ldr	r3, [sp, #4]
    6206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    620a:	bf00      	nop
    620c:	b003      	add	sp, #12
    620e:	f85d fb04 	ldr.w	pc, [sp], #4
    6212:	bf00      	nop
    6214:	1fff8d44 	.word	0x1fff8d44
    6218:	1fff8d40 	.word	0x1fff8d40

0000621c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    621c:	b500      	push	{lr}
    621e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6220:	f7fa fc7e 	bl	b20 <Sys_GetCoreID>
    6224:	4603      	mov	r3, r0
    6226:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    6228:	4a0d      	ldr	r2, [pc, #52]	; (6260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    622a:	9b01      	ldr	r3, [sp, #4]
    622c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6230:	1e5a      	subs	r2, r3, #1
    6232:	490b      	ldr	r1, [pc, #44]	; (6260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6234:	9b01      	ldr	r3, [sp, #4]
    6236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    623a:	4a0a      	ldr	r2, [pc, #40]	; (6264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    623c:	9b01      	ldr	r3, [sp, #4]
    623e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6242:	f003 0301 	and.w	r3, r3, #1
    6246:	2b00      	cmp	r3, #0
    6248:	d106      	bne.n	6258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    624a:	4a05      	ldr	r2, [pc, #20]	; (6260 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    624c:	9b01      	ldr	r3, [sp, #4]
    624e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6252:	2b00      	cmp	r3, #0
    6254:	d100      	bne.n	6258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6258:	bf00      	nop
    625a:	b003      	add	sp, #12
    625c:	f85d fb04 	ldr.w	pc, [sp], #4
    6260:	1fff8d44 	.word	0x1fff8d44
    6264:	1fff8d40 	.word	0x1fff8d40

00006268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6268:	b500      	push	{lr}
    626a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    626c:	f7fa fc58 	bl	b20 <Sys_GetCoreID>
    6270:	4603      	mov	r3, r0
    6272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    6274:	4a10      	ldr	r2, [pc, #64]	; (62b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6276:	9b01      	ldr	r3, [sp, #4]
    6278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    627c:	2b00      	cmp	r3, #0
    627e:	d10d      	bne.n	629c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6280:	f7fa fb7e 	bl	980 <Port_schm_read_msr>
    6284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6286:	9b00      	ldr	r3, [sp, #0]
    6288:	f003 0301 	and.w	r3, r3, #1
    628c:	2b00      	cmp	r3, #0
    628e:	d100      	bne.n	6292 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    6292:	490a      	ldr	r1, [pc, #40]	; (62bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    6294:	9b01      	ldr	r3, [sp, #4]
    6296:	9a00      	ldr	r2, [sp, #0]
    6298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    629c:	4a06      	ldr	r2, [pc, #24]	; (62b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    629e:	9b01      	ldr	r3, [sp, #4]
    62a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62a4:	1c5a      	adds	r2, r3, #1
    62a6:	4904      	ldr	r1, [pc, #16]	; (62b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    62a8:	9b01      	ldr	r3, [sp, #4]
    62aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    62ae:	bf00      	nop
    62b0:	b003      	add	sp, #12
    62b2:	f85d fb04 	ldr.w	pc, [sp], #4
    62b6:	bf00      	nop
    62b8:	1fff8d4c 	.word	0x1fff8d4c
    62bc:	1fff8d48 	.word	0x1fff8d48

000062c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    62c0:	b500      	push	{lr}
    62c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    62c4:	f7fa fc2c 	bl	b20 <Sys_GetCoreID>
    62c8:	4603      	mov	r3, r0
    62ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    62cc:	4a0d      	ldr	r2, [pc, #52]	; (6304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    62ce:	9b01      	ldr	r3, [sp, #4]
    62d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62d4:	1e5a      	subs	r2, r3, #1
    62d6:	490b      	ldr	r1, [pc, #44]	; (6304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    62d8:	9b01      	ldr	r3, [sp, #4]
    62da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    62de:	4a0a      	ldr	r2, [pc, #40]	; (6308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    62e0:	9b01      	ldr	r3, [sp, #4]
    62e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62e6:	f003 0301 	and.w	r3, r3, #1
    62ea:	2b00      	cmp	r3, #0
    62ec:	d106      	bne.n	62fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    62ee:	4a05      	ldr	r2, [pc, #20]	; (6304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    62f0:	9b01      	ldr	r3, [sp, #4]
    62f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62f6:	2b00      	cmp	r3, #0
    62f8:	d100      	bne.n	62fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    62fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    62fc:	bf00      	nop
    62fe:	b003      	add	sp, #12
    6300:	f85d fb04 	ldr.w	pc, [sp], #4
    6304:	1fff8d4c 	.word	0x1fff8d4c
    6308:	1fff8d48 	.word	0x1fff8d48

0000630c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    630c:	b500      	push	{lr}
    630e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6310:	f7fa fc06 	bl	b20 <Sys_GetCoreID>
    6314:	4603      	mov	r3, r0
    6316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6318:	4a10      	ldr	r2, [pc, #64]	; (635c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    631a:	9b01      	ldr	r3, [sp, #4]
    631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6320:	2b00      	cmp	r3, #0
    6322:	d10d      	bne.n	6340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6324:	f7fa fb2c 	bl	980 <Port_schm_read_msr>
    6328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    632a:	9b00      	ldr	r3, [sp, #0]
    632c:	f003 0301 	and.w	r3, r3, #1
    6330:	2b00      	cmp	r3, #0
    6332:	d100      	bne.n	6336 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6336:	490a      	ldr	r1, [pc, #40]	; (6360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	9a00      	ldr	r2, [sp, #0]
    633c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    6340:	4a06      	ldr	r2, [pc, #24]	; (635c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6342:	9b01      	ldr	r3, [sp, #4]
    6344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6348:	1c5a      	adds	r2, r3, #1
    634a:	4904      	ldr	r1, [pc, #16]	; (635c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    634c:	9b01      	ldr	r3, [sp, #4]
    634e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6352:	bf00      	nop
    6354:	b003      	add	sp, #12
    6356:	f85d fb04 	ldr.w	pc, [sp], #4
    635a:	bf00      	nop
    635c:	1fff8d54 	.word	0x1fff8d54
    6360:	1fff8d50 	.word	0x1fff8d50

00006364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6364:	b500      	push	{lr}
    6366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6368:	f7fa fbda 	bl	b20 <Sys_GetCoreID>
    636c:	4603      	mov	r3, r0
    636e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6370:	4a0d      	ldr	r2, [pc, #52]	; (63a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6372:	9b01      	ldr	r3, [sp, #4]
    6374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6378:	1e5a      	subs	r2, r3, #1
    637a:	490b      	ldr	r1, [pc, #44]	; (63a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    637c:	9b01      	ldr	r3, [sp, #4]
    637e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    6382:	4a0a      	ldr	r2, [pc, #40]	; (63ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    6384:	9b01      	ldr	r3, [sp, #4]
    6386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    638a:	f003 0301 	and.w	r3, r3, #1
    638e:	2b00      	cmp	r3, #0
    6390:	d106      	bne.n	63a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    6392:	4a05      	ldr	r2, [pc, #20]	; (63a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6394:	9b01      	ldr	r3, [sp, #4]
    6396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    639a:	2b00      	cmp	r3, #0
    639c:	d100      	bne.n	63a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    639e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    63a0:	bf00      	nop
    63a2:	b003      	add	sp, #12
    63a4:	f85d fb04 	ldr.w	pc, [sp], #4
    63a8:	1fff8d54 	.word	0x1fff8d54
    63ac:	1fff8d50 	.word	0x1fff8d50

000063b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    63b0:	b500      	push	{lr}
    63b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63b4:	f7fa fbb4 	bl	b20 <Sys_GetCoreID>
    63b8:	4603      	mov	r3, r0
    63ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    63bc:	4a10      	ldr	r2, [pc, #64]	; (6400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    63be:	9b01      	ldr	r3, [sp, #4]
    63c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63c4:	2b00      	cmp	r3, #0
    63c6:	d10d      	bne.n	63e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    63c8:	f7fa fada 	bl	980 <Port_schm_read_msr>
    63cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    63ce:	9b00      	ldr	r3, [sp, #0]
    63d0:	f003 0301 	and.w	r3, r3, #1
    63d4:	2b00      	cmp	r3, #0
    63d6:	d100      	bne.n	63da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    63d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    63da:	490a      	ldr	r1, [pc, #40]	; (6404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    63dc:	9b01      	ldr	r3, [sp, #4]
    63de:	9a00      	ldr	r2, [sp, #0]
    63e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    63e4:	4a06      	ldr	r2, [pc, #24]	; (6400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63ec:	1c5a      	adds	r2, r3, #1
    63ee:	4904      	ldr	r1, [pc, #16]	; (6400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    63f0:	9b01      	ldr	r3, [sp, #4]
    63f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63f6:	bf00      	nop
    63f8:	b003      	add	sp, #12
    63fa:	f85d fb04 	ldr.w	pc, [sp], #4
    63fe:	bf00      	nop
    6400:	1fff8d5c 	.word	0x1fff8d5c
    6404:	1fff8d58 	.word	0x1fff8d58

00006408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6408:	b500      	push	{lr}
    640a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    640c:	f7fa fb88 	bl	b20 <Sys_GetCoreID>
    6410:	4603      	mov	r3, r0
    6412:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6414:	4a0d      	ldr	r2, [pc, #52]	; (644c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6416:	9b01      	ldr	r3, [sp, #4]
    6418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    641c:	1e5a      	subs	r2, r3, #1
    641e:	490b      	ldr	r1, [pc, #44]	; (644c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6420:	9b01      	ldr	r3, [sp, #4]
    6422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6426:	4a0a      	ldr	r2, [pc, #40]	; (6450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    642e:	f003 0301 	and.w	r3, r3, #1
    6432:	2b00      	cmp	r3, #0
    6434:	d106      	bne.n	6444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6436:	4a05      	ldr	r2, [pc, #20]	; (644c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6438:	9b01      	ldr	r3, [sp, #4]
    643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    643e:	2b00      	cmp	r3, #0
    6440:	d100      	bne.n	6444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6444:	bf00      	nop
    6446:	b003      	add	sp, #12
    6448:	f85d fb04 	ldr.w	pc, [sp], #4
    644c:	1fff8d5c 	.word	0x1fff8d5c
    6450:	1fff8d58 	.word	0x1fff8d58

00006454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6454:	b500      	push	{lr}
    6456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6458:	f7fa fb62 	bl	b20 <Sys_GetCoreID>
    645c:	4603      	mov	r3, r0
    645e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6460:	4a10      	ldr	r2, [pc, #64]	; (64a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6468:	2b00      	cmp	r3, #0
    646a:	d10d      	bne.n	6488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    646c:	f7fa fa88 	bl	980 <Port_schm_read_msr>
    6470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6472:	9b00      	ldr	r3, [sp, #0]
    6474:	f003 0301 	and.w	r3, r3, #1
    6478:	2b00      	cmp	r3, #0
    647a:	d100      	bne.n	647e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    647c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    647e:	490a      	ldr	r1, [pc, #40]	; (64a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    6480:	9b01      	ldr	r3, [sp, #4]
    6482:	9a00      	ldr	r2, [sp, #0]
    6484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    6488:	4a06      	ldr	r2, [pc, #24]	; (64a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    648a:	9b01      	ldr	r3, [sp, #4]
    648c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6490:	1c5a      	adds	r2, r3, #1
    6492:	4904      	ldr	r1, [pc, #16]	; (64a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6494:	9b01      	ldr	r3, [sp, #4]
    6496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    649a:	bf00      	nop
    649c:	b003      	add	sp, #12
    649e:	f85d fb04 	ldr.w	pc, [sp], #4
    64a2:	bf00      	nop
    64a4:	1fff8d64 	.word	0x1fff8d64
    64a8:	1fff8d60 	.word	0x1fff8d60

000064ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    64ac:	b500      	push	{lr}
    64ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64b0:	f7fa fb36 	bl	b20 <Sys_GetCoreID>
    64b4:	4603      	mov	r3, r0
    64b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    64b8:	4a0d      	ldr	r2, [pc, #52]	; (64f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64c0:	1e5a      	subs	r2, r3, #1
    64c2:	490b      	ldr	r1, [pc, #44]	; (64f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    64ca:	4a0a      	ldr	r2, [pc, #40]	; (64f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    64cc:	9b01      	ldr	r3, [sp, #4]
    64ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64d2:	f003 0301 	and.w	r3, r3, #1
    64d6:	2b00      	cmp	r3, #0
    64d8:	d106      	bne.n	64e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    64da:	4a05      	ldr	r2, [pc, #20]	; (64f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    64dc:	9b01      	ldr	r3, [sp, #4]
    64de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e2:	2b00      	cmp	r3, #0
    64e4:	d100      	bne.n	64e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    64e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    64e8:	bf00      	nop
    64ea:	b003      	add	sp, #12
    64ec:	f85d fb04 	ldr.w	pc, [sp], #4
    64f0:	1fff8d64 	.word	0x1fff8d64
    64f4:	1fff8d60 	.word	0x1fff8d60

000064f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    64f8:	b500      	push	{lr}
    64fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64fc:	f7fa fb10 	bl	b20 <Sys_GetCoreID>
    6500:	4603      	mov	r3, r0
    6502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6504:	4a10      	ldr	r2, [pc, #64]	; (6548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6506:	9b01      	ldr	r3, [sp, #4]
    6508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    650c:	2b00      	cmp	r3, #0
    650e:	d10d      	bne.n	652c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6510:	f7fa fa36 	bl	980 <Port_schm_read_msr>
    6514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6516:	9b00      	ldr	r3, [sp, #0]
    6518:	f003 0301 	and.w	r3, r3, #1
    651c:	2b00      	cmp	r3, #0
    651e:	d100      	bne.n	6522 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    6522:	490a      	ldr	r1, [pc, #40]	; (654c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6524:	9b01      	ldr	r3, [sp, #4]
    6526:	9a00      	ldr	r2, [sp, #0]
    6528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    652c:	4a06      	ldr	r2, [pc, #24]	; (6548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    652e:	9b01      	ldr	r3, [sp, #4]
    6530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6534:	1c5a      	adds	r2, r3, #1
    6536:	4904      	ldr	r1, [pc, #16]	; (6548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6538:	9b01      	ldr	r3, [sp, #4]
    653a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    653e:	bf00      	nop
    6540:	b003      	add	sp, #12
    6542:	f85d fb04 	ldr.w	pc, [sp], #4
    6546:	bf00      	nop
    6548:	1fff8d6c 	.word	0x1fff8d6c
    654c:	1fff8d68 	.word	0x1fff8d68

00006550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6550:	b500      	push	{lr}
    6552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6554:	f7fa fae4 	bl	b20 <Sys_GetCoreID>
    6558:	4603      	mov	r3, r0
    655a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    655c:	4a0d      	ldr	r2, [pc, #52]	; (6594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6564:	1e5a      	subs	r2, r3, #1
    6566:	490b      	ldr	r1, [pc, #44]	; (6594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6568:	9b01      	ldr	r3, [sp, #4]
    656a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    656e:	4a0a      	ldr	r2, [pc, #40]	; (6598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    6570:	9b01      	ldr	r3, [sp, #4]
    6572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6576:	f003 0301 	and.w	r3, r3, #1
    657a:	2b00      	cmp	r3, #0
    657c:	d106      	bne.n	658c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    657e:	4a05      	ldr	r2, [pc, #20]	; (6594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6586:	2b00      	cmp	r3, #0
    6588:	d100      	bne.n	658c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    658a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    658c:	bf00      	nop
    658e:	b003      	add	sp, #12
    6590:	f85d fb04 	ldr.w	pc, [sp], #4
    6594:	1fff8d6c 	.word	0x1fff8d6c
    6598:	1fff8d68 	.word	0x1fff8d68

0000659c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    659c:	b500      	push	{lr}
    659e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65a0:	f7fa fabe 	bl	b20 <Sys_GetCoreID>
    65a4:	4603      	mov	r3, r0
    65a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    65a8:	4a10      	ldr	r2, [pc, #64]	; (65ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d10d      	bne.n	65d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    65b4:	f7fa f9e4 	bl	980 <Port_schm_read_msr>
    65b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    65ba:	9b00      	ldr	r3, [sp, #0]
    65bc:	f003 0301 	and.w	r3, r3, #1
    65c0:	2b00      	cmp	r3, #0
    65c2:	d100      	bne.n	65c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    65c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    65c6:	490a      	ldr	r1, [pc, #40]	; (65f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    65c8:	9b01      	ldr	r3, [sp, #4]
    65ca:	9a00      	ldr	r2, [sp, #0]
    65cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    65d0:	4a06      	ldr	r2, [pc, #24]	; (65ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    65d2:	9b01      	ldr	r3, [sp, #4]
    65d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65d8:	1c5a      	adds	r2, r3, #1
    65da:	4904      	ldr	r1, [pc, #16]	; (65ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    65dc:	9b01      	ldr	r3, [sp, #4]
    65de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65e2:	bf00      	nop
    65e4:	b003      	add	sp, #12
    65e6:	f85d fb04 	ldr.w	pc, [sp], #4
    65ea:	bf00      	nop
    65ec:	1fff8d74 	.word	0x1fff8d74
    65f0:	1fff8d70 	.word	0x1fff8d70

000065f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    65f4:	b500      	push	{lr}
    65f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65f8:	f7fa fa92 	bl	b20 <Sys_GetCoreID>
    65fc:	4603      	mov	r3, r0
    65fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6600:	4a0d      	ldr	r2, [pc, #52]	; (6638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6602:	9b01      	ldr	r3, [sp, #4]
    6604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6608:	1e5a      	subs	r2, r3, #1
    660a:	490b      	ldr	r1, [pc, #44]	; (6638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    660c:	9b01      	ldr	r3, [sp, #4]
    660e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    6612:	4a0a      	ldr	r2, [pc, #40]	; (663c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6614:	9b01      	ldr	r3, [sp, #4]
    6616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    661a:	f003 0301 	and.w	r3, r3, #1
    661e:	2b00      	cmp	r3, #0
    6620:	d106      	bne.n	6630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    6622:	4a05      	ldr	r2, [pc, #20]	; (6638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6624:	9b01      	ldr	r3, [sp, #4]
    6626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    662a:	2b00      	cmp	r3, #0
    662c:	d100      	bne.n	6630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    662e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6630:	bf00      	nop
    6632:	b003      	add	sp, #12
    6634:	f85d fb04 	ldr.w	pc, [sp], #4
    6638:	1fff8d74 	.word	0x1fff8d74
    663c:	1fff8d70 	.word	0x1fff8d70

00006640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6640:	b500      	push	{lr}
    6642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6644:	f7fa fa6c 	bl	b20 <Sys_GetCoreID>
    6648:	4603      	mov	r3, r0
    664a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    664c:	4a10      	ldr	r2, [pc, #64]	; (6690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    664e:	9b01      	ldr	r3, [sp, #4]
    6650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6654:	2b00      	cmp	r3, #0
    6656:	d10d      	bne.n	6674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6658:	f7fa f992 	bl	980 <Port_schm_read_msr>
    665c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    665e:	9b00      	ldr	r3, [sp, #0]
    6660:	f003 0301 	and.w	r3, r3, #1
    6664:	2b00      	cmp	r3, #0
    6666:	d100      	bne.n	666a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    666a:	490a      	ldr	r1, [pc, #40]	; (6694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    666c:	9b01      	ldr	r3, [sp, #4]
    666e:	9a00      	ldr	r2, [sp, #0]
    6670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    6674:	4a06      	ldr	r2, [pc, #24]	; (6690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    667c:	1c5a      	adds	r2, r3, #1
    667e:	4904      	ldr	r1, [pc, #16]	; (6690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6680:	9b01      	ldr	r3, [sp, #4]
    6682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6686:	bf00      	nop
    6688:	b003      	add	sp, #12
    668a:	f85d fb04 	ldr.w	pc, [sp], #4
    668e:	bf00      	nop
    6690:	1fff8d7c 	.word	0x1fff8d7c
    6694:	1fff8d78 	.word	0x1fff8d78

00006698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6698:	b500      	push	{lr}
    669a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    669c:	f7fa fa40 	bl	b20 <Sys_GetCoreID>
    66a0:	4603      	mov	r3, r0
    66a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    66a4:	4a0d      	ldr	r2, [pc, #52]	; (66dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ac:	1e5a      	subs	r2, r3, #1
    66ae:	490b      	ldr	r1, [pc, #44]	; (66dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    66b0:	9b01      	ldr	r3, [sp, #4]
    66b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    66b6:	4a0a      	ldr	r2, [pc, #40]	; (66e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    66b8:	9b01      	ldr	r3, [sp, #4]
    66ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66be:	f003 0301 	and.w	r3, r3, #1
    66c2:	2b00      	cmp	r3, #0
    66c4:	d106      	bne.n	66d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    66c6:	4a05      	ldr	r2, [pc, #20]	; (66dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    66c8:	9b01      	ldr	r3, [sp, #4]
    66ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ce:	2b00      	cmp	r3, #0
    66d0:	d100      	bne.n	66d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    66d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    66d4:	bf00      	nop
    66d6:	b003      	add	sp, #12
    66d8:	f85d fb04 	ldr.w	pc, [sp], #4
    66dc:	1fff8d7c 	.word	0x1fff8d7c
    66e0:	1fff8d78 	.word	0x1fff8d78

000066e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    66e4:	b500      	push	{lr}
    66e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66e8:	f7fa fa1a 	bl	b20 <Sys_GetCoreID>
    66ec:	4603      	mov	r3, r0
    66ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    66f0:	4a10      	ldr	r2, [pc, #64]	; (6734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    66f2:	9b01      	ldr	r3, [sp, #4]
    66f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d10d      	bne.n	6718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    66fc:	f7fa f940 	bl	980 <Port_schm_read_msr>
    6700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6702:	9b00      	ldr	r3, [sp, #0]
    6704:	f003 0301 	and.w	r3, r3, #1
    6708:	2b00      	cmp	r3, #0
    670a:	d100      	bne.n	670e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    670c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    670e:	490a      	ldr	r1, [pc, #40]	; (6738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    6710:	9b01      	ldr	r3, [sp, #4]
    6712:	9a00      	ldr	r2, [sp, #0]
    6714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    6718:	4a06      	ldr	r2, [pc, #24]	; (6734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    671a:	9b01      	ldr	r3, [sp, #4]
    671c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6720:	1c5a      	adds	r2, r3, #1
    6722:	4904      	ldr	r1, [pc, #16]	; (6734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    672a:	bf00      	nop
    672c:	b003      	add	sp, #12
    672e:	f85d fb04 	ldr.w	pc, [sp], #4
    6732:	bf00      	nop
    6734:	1fff8d84 	.word	0x1fff8d84
    6738:	1fff8d80 	.word	0x1fff8d80

0000673c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    673c:	b500      	push	{lr}
    673e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6740:	f7fa f9ee 	bl	b20 <Sys_GetCoreID>
    6744:	4603      	mov	r3, r0
    6746:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    6748:	4a0d      	ldr	r2, [pc, #52]	; (6780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    674a:	9b01      	ldr	r3, [sp, #4]
    674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6750:	1e5a      	subs	r2, r3, #1
    6752:	490b      	ldr	r1, [pc, #44]	; (6780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6754:	9b01      	ldr	r3, [sp, #4]
    6756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    675a:	4a0a      	ldr	r2, [pc, #40]	; (6784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    675c:	9b01      	ldr	r3, [sp, #4]
    675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6762:	f003 0301 	and.w	r3, r3, #1
    6766:	2b00      	cmp	r3, #0
    6768:	d106      	bne.n	6778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    676a:	4a05      	ldr	r2, [pc, #20]	; (6780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    676c:	9b01      	ldr	r3, [sp, #4]
    676e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6772:	2b00      	cmp	r3, #0
    6774:	d100      	bne.n	6778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6778:	bf00      	nop
    677a:	b003      	add	sp, #12
    677c:	f85d fb04 	ldr.w	pc, [sp], #4
    6780:	1fff8d84 	.word	0x1fff8d84
    6784:	1fff8d80 	.word	0x1fff8d80

00006788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6788:	b500      	push	{lr}
    678a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    678c:	f7fa f9c8 	bl	b20 <Sys_GetCoreID>
    6790:	4603      	mov	r3, r0
    6792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    6794:	4a10      	ldr	r2, [pc, #64]	; (67d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6796:	9b01      	ldr	r3, [sp, #4]
    6798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    679c:	2b00      	cmp	r3, #0
    679e:	d10d      	bne.n	67bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67a0:	f7fa f8ee 	bl	980 <Port_schm_read_msr>
    67a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67a6:	9b00      	ldr	r3, [sp, #0]
    67a8:	f003 0301 	and.w	r3, r3, #1
    67ac:	2b00      	cmp	r3, #0
    67ae:	d100      	bne.n	67b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    67b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    67b2:	490a      	ldr	r1, [pc, #40]	; (67dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	9a00      	ldr	r2, [sp, #0]
    67b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    67bc:	4a06      	ldr	r2, [pc, #24]	; (67d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    67be:	9b01      	ldr	r3, [sp, #4]
    67c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67c4:	1c5a      	adds	r2, r3, #1
    67c6:	4904      	ldr	r1, [pc, #16]	; (67d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    67c8:	9b01      	ldr	r3, [sp, #4]
    67ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67ce:	bf00      	nop
    67d0:	b003      	add	sp, #12
    67d2:	f85d fb04 	ldr.w	pc, [sp], #4
    67d6:	bf00      	nop
    67d8:	1fff8d8c 	.word	0x1fff8d8c
    67dc:	1fff8d88 	.word	0x1fff8d88

000067e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    67e0:	b500      	push	{lr}
    67e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67e4:	f7fa f99c 	bl	b20 <Sys_GetCoreID>
    67e8:	4603      	mov	r3, r0
    67ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    67ec:	4a0d      	ldr	r2, [pc, #52]	; (6824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f4:	1e5a      	subs	r2, r3, #1
    67f6:	490b      	ldr	r1, [pc, #44]	; (6824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    67fe:	4a0a      	ldr	r2, [pc, #40]	; (6828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6806:	f003 0301 	and.w	r3, r3, #1
    680a:	2b00      	cmp	r3, #0
    680c:	d106      	bne.n	681c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    680e:	4a05      	ldr	r2, [pc, #20]	; (6824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6816:	2b00      	cmp	r3, #0
    6818:	d100      	bne.n	681c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    681a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    681c:	bf00      	nop
    681e:	b003      	add	sp, #12
    6820:	f85d fb04 	ldr.w	pc, [sp], #4
    6824:	1fff8d8c 	.word	0x1fff8d8c
    6828:	1fff8d88 	.word	0x1fff8d88

0000682c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    682c:	b500      	push	{lr}
    682e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6830:	f7fa f976 	bl	b20 <Sys_GetCoreID>
    6834:	4603      	mov	r3, r0
    6836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    6838:	4a10      	ldr	r2, [pc, #64]	; (687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    683a:	9b01      	ldr	r3, [sp, #4]
    683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6840:	2b00      	cmp	r3, #0
    6842:	d10d      	bne.n	6860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6844:	f7fa f89c 	bl	980 <Port_schm_read_msr>
    6848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    684a:	9b00      	ldr	r3, [sp, #0]
    684c:	f003 0301 	and.w	r3, r3, #1
    6850:	2b00      	cmp	r3, #0
    6852:	d100      	bne.n	6856 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    6856:	490a      	ldr	r1, [pc, #40]	; (6880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	9a00      	ldr	r2, [sp, #0]
    685c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    6860:	4a06      	ldr	r2, [pc, #24]	; (687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6868:	1c5a      	adds	r2, r3, #1
    686a:	4904      	ldr	r1, [pc, #16]	; (687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6872:	bf00      	nop
    6874:	b003      	add	sp, #12
    6876:	f85d fb04 	ldr.w	pc, [sp], #4
    687a:	bf00      	nop
    687c:	1fff8d94 	.word	0x1fff8d94
    6880:	1fff8d90 	.word	0x1fff8d90

00006884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6884:	b500      	push	{lr}
    6886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6888:	f7fa f94a 	bl	b20 <Sys_GetCoreID>
    688c:	4603      	mov	r3, r0
    688e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    6890:	4a0d      	ldr	r2, [pc, #52]	; (68c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6892:	9b01      	ldr	r3, [sp, #4]
    6894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6898:	1e5a      	subs	r2, r3, #1
    689a:	490b      	ldr	r1, [pc, #44]	; (68c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    68a2:	4a0a      	ldr	r2, [pc, #40]	; (68cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    68a4:	9b01      	ldr	r3, [sp, #4]
    68a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68aa:	f003 0301 	and.w	r3, r3, #1
    68ae:	2b00      	cmp	r3, #0
    68b0:	d106      	bne.n	68c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    68b2:	4a05      	ldr	r2, [pc, #20]	; (68c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    68b4:	9b01      	ldr	r3, [sp, #4]
    68b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d100      	bne.n	68c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    68be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    68c0:	bf00      	nop
    68c2:	b003      	add	sp, #12
    68c4:	f85d fb04 	ldr.w	pc, [sp], #4
    68c8:	1fff8d94 	.word	0x1fff8d94
    68cc:	1fff8d90 	.word	0x1fff8d90

000068d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    68d0:	b500      	push	{lr}
    68d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68d4:	f7fa f924 	bl	b20 <Sys_GetCoreID>
    68d8:	4603      	mov	r3, r0
    68da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    68dc:	4a10      	ldr	r2, [pc, #64]	; (6920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    68de:	9b01      	ldr	r3, [sp, #4]
    68e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68e4:	2b00      	cmp	r3, #0
    68e6:	d10d      	bne.n	6904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    68e8:	f7fa f84a 	bl	980 <Port_schm_read_msr>
    68ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    68ee:	9b00      	ldr	r3, [sp, #0]
    68f0:	f003 0301 	and.w	r3, r3, #1
    68f4:	2b00      	cmp	r3, #0
    68f6:	d100      	bne.n	68fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    68fa:	490a      	ldr	r1, [pc, #40]	; (6924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	9a00      	ldr	r2, [sp, #0]
    6900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    6904:	4a06      	ldr	r2, [pc, #24]	; (6920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6906:	9b01      	ldr	r3, [sp, #4]
    6908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    690c:	1c5a      	adds	r2, r3, #1
    690e:	4904      	ldr	r1, [pc, #16]	; (6920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6910:	9b01      	ldr	r3, [sp, #4]
    6912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6916:	bf00      	nop
    6918:	b003      	add	sp, #12
    691a:	f85d fb04 	ldr.w	pc, [sp], #4
    691e:	bf00      	nop
    6920:	1fff8d9c 	.word	0x1fff8d9c
    6924:	1fff8d98 	.word	0x1fff8d98

00006928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6928:	b500      	push	{lr}
    692a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    692c:	f7fa f8f8 	bl	b20 <Sys_GetCoreID>
    6930:	4603      	mov	r3, r0
    6932:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    6934:	4a0d      	ldr	r2, [pc, #52]	; (696c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6936:	9b01      	ldr	r3, [sp, #4]
    6938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    693c:	1e5a      	subs	r2, r3, #1
    693e:	490b      	ldr	r1, [pc, #44]	; (696c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    6946:	4a0a      	ldr	r2, [pc, #40]	; (6970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    6948:	9b01      	ldr	r3, [sp, #4]
    694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    694e:	f003 0301 	and.w	r3, r3, #1
    6952:	2b00      	cmp	r3, #0
    6954:	d106      	bne.n	6964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    6956:	4a05      	ldr	r2, [pc, #20]	; (696c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6958:	9b01      	ldr	r3, [sp, #4]
    695a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    695e:	2b00      	cmp	r3, #0
    6960:	d100      	bne.n	6964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6964:	bf00      	nop
    6966:	b003      	add	sp, #12
    6968:	f85d fb04 	ldr.w	pc, [sp], #4
    696c:	1fff8d9c 	.word	0x1fff8d9c
    6970:	1fff8d98 	.word	0x1fff8d98

00006974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    6974:	b500      	push	{lr}
    6976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6978:	f7fa f8d2 	bl	b20 <Sys_GetCoreID>
    697c:	4603      	mov	r3, r0
    697e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    6980:	4a10      	ldr	r2, [pc, #64]	; (69c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    6982:	9b01      	ldr	r3, [sp, #4]
    6984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6988:	2b00      	cmp	r3, #0
    698a:	d10d      	bne.n	69a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    698c:	f7f9 fff8 	bl	980 <Port_schm_read_msr>
    6990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6992:	9b00      	ldr	r3, [sp, #0]
    6994:	f003 0301 	and.w	r3, r3, #1
    6998:	2b00      	cmp	r3, #0
    699a:	d100      	bne.n	699e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    699c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    699e:	490a      	ldr	r1, [pc, #40]	; (69c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	9a00      	ldr	r2, [sp, #0]
    69a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    69a8:	4a06      	ldr	r2, [pc, #24]	; (69c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b0:	1c5a      	adds	r2, r3, #1
    69b2:	4904      	ldr	r1, [pc, #16]	; (69c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    69b4:	9b01      	ldr	r3, [sp, #4]
    69b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69ba:	bf00      	nop
    69bc:	b003      	add	sp, #12
    69be:	f85d fb04 	ldr.w	pc, [sp], #4
    69c2:	bf00      	nop
    69c4:	1fff8da4 	.word	0x1fff8da4
    69c8:	1fff8da0 	.word	0x1fff8da0

000069cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    69cc:	b500      	push	{lr}
    69ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69d0:	f7fa f8a6 	bl	b20 <Sys_GetCoreID>
    69d4:	4603      	mov	r3, r0
    69d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    69d8:	4a0d      	ldr	r2, [pc, #52]	; (6a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    69da:	9b01      	ldr	r3, [sp, #4]
    69dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e0:	1e5a      	subs	r2, r3, #1
    69e2:	490b      	ldr	r1, [pc, #44]	; (6a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    69e4:	9b01      	ldr	r3, [sp, #4]
    69e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    69ea:	4a0a      	ldr	r2, [pc, #40]	; (6a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    69ec:	9b01      	ldr	r3, [sp, #4]
    69ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69f2:	f003 0301 	and.w	r3, r3, #1
    69f6:	2b00      	cmp	r3, #0
    69f8:	d106      	bne.n	6a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    69fa:	4a05      	ldr	r2, [pc, #20]	; (6a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    69fc:	9b01      	ldr	r3, [sp, #4]
    69fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d100      	bne.n	6a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a08:	bf00      	nop
    6a0a:	b003      	add	sp, #12
    6a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a10:	1fff8da4 	.word	0x1fff8da4
    6a14:	1fff8da0 	.word	0x1fff8da0

00006a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6a18:	b500      	push	{lr}
    6a1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a1c:	f7fa f880 	bl	b20 <Sys_GetCoreID>
    6a20:	4603      	mov	r3, r0
    6a22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    6a24:	4a10      	ldr	r2, [pc, #64]	; (6a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a26:	9b01      	ldr	r3, [sp, #4]
    6a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d10d      	bne.n	6a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a30:	f7f9 ffa6 	bl	980 <Port_schm_read_msr>
    6a34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a36:	9b00      	ldr	r3, [sp, #0]
    6a38:	f003 0301 	and.w	r3, r3, #1
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d100      	bne.n	6a42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    6a42:	490a      	ldr	r1, [pc, #40]	; (6a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	9a00      	ldr	r2, [sp, #0]
    6a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    6a4c:	4a06      	ldr	r2, [pc, #24]	; (6a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a54:	1c5a      	adds	r2, r3, #1
    6a56:	4904      	ldr	r1, [pc, #16]	; (6a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6a58:	9b01      	ldr	r3, [sp, #4]
    6a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a5e:	bf00      	nop
    6a60:	b003      	add	sp, #12
    6a62:	f85d fb04 	ldr.w	pc, [sp], #4
    6a66:	bf00      	nop
    6a68:	1fff8dac 	.word	0x1fff8dac
    6a6c:	1fff8da8 	.word	0x1fff8da8

00006a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6a70:	b500      	push	{lr}
    6a72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a74:	f7fa f854 	bl	b20 <Sys_GetCoreID>
    6a78:	4603      	mov	r3, r0
    6a7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    6a7c:	4a0d      	ldr	r2, [pc, #52]	; (6ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6a7e:	9b01      	ldr	r3, [sp, #4]
    6a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a84:	1e5a      	subs	r2, r3, #1
    6a86:	490b      	ldr	r1, [pc, #44]	; (6ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6a88:	9b01      	ldr	r3, [sp, #4]
    6a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    6a8e:	4a0a      	ldr	r2, [pc, #40]	; (6ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    6a90:	9b01      	ldr	r3, [sp, #4]
    6a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a96:	f003 0301 	and.w	r3, r3, #1
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d106      	bne.n	6aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    6a9e:	4a05      	ldr	r2, [pc, #20]	; (6ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6aa0:	9b01      	ldr	r3, [sp, #4]
    6aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d100      	bne.n	6aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6aaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6aac:	bf00      	nop
    6aae:	b003      	add	sp, #12
    6ab0:	f85d fb04 	ldr.w	pc, [sp], #4
    6ab4:	1fff8dac 	.word	0x1fff8dac
    6ab8:	1fff8da8 	.word	0x1fff8da8

00006abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6abc:	b500      	push	{lr}
    6abe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ac0:	f7fa f82e 	bl	b20 <Sys_GetCoreID>
    6ac4:	4603      	mov	r3, r0
    6ac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    6ac8:	4a10      	ldr	r2, [pc, #64]	; (6b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6aca:	9b01      	ldr	r3, [sp, #4]
    6acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d10d      	bne.n	6af0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ad4:	f7f9 ff54 	bl	980 <Port_schm_read_msr>
    6ad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ada:	9b00      	ldr	r3, [sp, #0]
    6adc:	f003 0301 	and.w	r3, r3, #1
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d100      	bne.n	6ae6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    6ae6:	490a      	ldr	r1, [pc, #40]	; (6b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    6ae8:	9b01      	ldr	r3, [sp, #4]
    6aea:	9a00      	ldr	r2, [sp, #0]
    6aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    6af0:	4a06      	ldr	r2, [pc, #24]	; (6b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6af2:	9b01      	ldr	r3, [sp, #4]
    6af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af8:	1c5a      	adds	r2, r3, #1
    6afa:	4904      	ldr	r1, [pc, #16]	; (6b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6afc:	9b01      	ldr	r3, [sp, #4]
    6afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b02:	bf00      	nop
    6b04:	b003      	add	sp, #12
    6b06:	f85d fb04 	ldr.w	pc, [sp], #4
    6b0a:	bf00      	nop
    6b0c:	1fff8db4 	.word	0x1fff8db4
    6b10:	1fff8db0 	.word	0x1fff8db0

00006b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6b14:	b500      	push	{lr}
    6b16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b18:	f7fa f802 	bl	b20 <Sys_GetCoreID>
    6b1c:	4603      	mov	r3, r0
    6b1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    6b20:	4a0d      	ldr	r2, [pc, #52]	; (6b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b28:	1e5a      	subs	r2, r3, #1
    6b2a:	490b      	ldr	r1, [pc, #44]	; (6b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    6b32:	4a0a      	ldr	r2, [pc, #40]	; (6b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    6b34:	9b01      	ldr	r3, [sp, #4]
    6b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b3a:	f003 0301 	and.w	r3, r3, #1
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d106      	bne.n	6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    6b42:	4a05      	ldr	r2, [pc, #20]	; (6b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6b44:	9b01      	ldr	r3, [sp, #4]
    6b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d100      	bne.n	6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b50:	bf00      	nop
    6b52:	b003      	add	sp, #12
    6b54:	f85d fb04 	ldr.w	pc, [sp], #4
    6b58:	1fff8db4 	.word	0x1fff8db4
    6b5c:	1fff8db0 	.word	0x1fff8db0

00006b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6b60:	b500      	push	{lr}
    6b62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b64:	f7f9 ffdc 	bl	b20 <Sys_GetCoreID>
    6b68:	4603      	mov	r3, r0
    6b6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    6b6c:	4a10      	ldr	r2, [pc, #64]	; (6bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6b6e:	9b01      	ldr	r3, [sp, #4]
    6b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b74:	2b00      	cmp	r3, #0
    6b76:	d10d      	bne.n	6b94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b78:	f7f9 ff02 	bl	980 <Port_schm_read_msr>
    6b7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b7e:	9b00      	ldr	r3, [sp, #0]
    6b80:	f003 0301 	and.w	r3, r3, #1
    6b84:	2b00      	cmp	r3, #0
    6b86:	d100      	bne.n	6b8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    6b8a:	490a      	ldr	r1, [pc, #40]	; (6bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    6b8c:	9b01      	ldr	r3, [sp, #4]
    6b8e:	9a00      	ldr	r2, [sp, #0]
    6b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    6b94:	4a06      	ldr	r2, [pc, #24]	; (6bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6b96:	9b01      	ldr	r3, [sp, #4]
    6b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b9c:	1c5a      	adds	r2, r3, #1
    6b9e:	4904      	ldr	r1, [pc, #16]	; (6bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    6ba0:	9b01      	ldr	r3, [sp, #4]
    6ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ba6:	bf00      	nop
    6ba8:	b003      	add	sp, #12
    6baa:	f85d fb04 	ldr.w	pc, [sp], #4
    6bae:	bf00      	nop
    6bb0:	1fff8dbc 	.word	0x1fff8dbc
    6bb4:	1fff8db8 	.word	0x1fff8db8

00006bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    6bb8:	b500      	push	{lr}
    6bba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bbc:	f7f9 ffb0 	bl	b20 <Sys_GetCoreID>
    6bc0:	4603      	mov	r3, r0
    6bc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    6bc4:	4a0d      	ldr	r2, [pc, #52]	; (6bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bcc:	1e5a      	subs	r2, r3, #1
    6bce:	490b      	ldr	r1, [pc, #44]	; (6bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    6bd6:	4a0a      	ldr	r2, [pc, #40]	; (6c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    6bd8:	9b01      	ldr	r3, [sp, #4]
    6bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bde:	f003 0301 	and.w	r3, r3, #1
    6be2:	2b00      	cmp	r3, #0
    6be4:	d106      	bne.n	6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    6be6:	4a05      	ldr	r2, [pc, #20]	; (6bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    6be8:	9b01      	ldr	r3, [sp, #4]
    6bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d100      	bne.n	6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6bf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6bf4:	bf00      	nop
    6bf6:	b003      	add	sp, #12
    6bf8:	f85d fb04 	ldr.w	pc, [sp], #4
    6bfc:	1fff8dbc 	.word	0x1fff8dbc
    6c00:	1fff8db8 	.word	0x1fff8db8

00006c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6c04:	b500      	push	{lr}
    6c06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c08:	f7f9 ff8a 	bl	b20 <Sys_GetCoreID>
    6c0c:	4603      	mov	r3, r0
    6c0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    6c10:	4a10      	ldr	r2, [pc, #64]	; (6c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c12:	9b01      	ldr	r3, [sp, #4]
    6c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d10d      	bne.n	6c38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c1c:	f7f9 feb0 	bl	980 <Port_schm_read_msr>
    6c20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c22:	9b00      	ldr	r3, [sp, #0]
    6c24:	f003 0301 	and.w	r3, r3, #1
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d100      	bne.n	6c2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    6c2e:	490a      	ldr	r1, [pc, #40]	; (6c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    6c30:	9b01      	ldr	r3, [sp, #4]
    6c32:	9a00      	ldr	r2, [sp, #0]
    6c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    6c38:	4a06      	ldr	r2, [pc, #24]	; (6c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c3a:	9b01      	ldr	r3, [sp, #4]
    6c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c40:	1c5a      	adds	r2, r3, #1
    6c42:	4904      	ldr	r1, [pc, #16]	; (6c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c4a:	bf00      	nop
    6c4c:	b003      	add	sp, #12
    6c4e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c52:	bf00      	nop
    6c54:	1fff8dc4 	.word	0x1fff8dc4
    6c58:	1fff8dc0 	.word	0x1fff8dc0

00006c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    6c5c:	b500      	push	{lr}
    6c5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c60:	f7f9 ff5e 	bl	b20 <Sys_GetCoreID>
    6c64:	4603      	mov	r3, r0
    6c66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    6c68:	4a0d      	ldr	r2, [pc, #52]	; (6ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c70:	1e5a      	subs	r2, r3, #1
    6c72:	490b      	ldr	r1, [pc, #44]	; (6ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    6c7a:	4a0a      	ldr	r2, [pc, #40]	; (6ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    6c7c:	9b01      	ldr	r3, [sp, #4]
    6c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c82:	f003 0301 	and.w	r3, r3, #1
    6c86:	2b00      	cmp	r3, #0
    6c88:	d106      	bne.n	6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    6c8a:	4a05      	ldr	r2, [pc, #20]	; (6ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d100      	bne.n	6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c98:	bf00      	nop
    6c9a:	b003      	add	sp, #12
    6c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ca0:	1fff8dc4 	.word	0x1fff8dc4
    6ca4:	1fff8dc0 	.word	0x1fff8dc0

00006ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6ca8:	b500      	push	{lr}
    6caa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cac:	f7f9 ff38 	bl	b20 <Sys_GetCoreID>
    6cb0:	4603      	mov	r3, r0
    6cb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    6cb4:	4a10      	ldr	r2, [pc, #64]	; (6cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6cb6:	9b01      	ldr	r3, [sp, #4]
    6cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	d10d      	bne.n	6cdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cc0:	f7f9 fe5e 	bl	980 <Port_schm_read_msr>
    6cc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cc6:	9b00      	ldr	r3, [sp, #0]
    6cc8:	f003 0301 	and.w	r3, r3, #1
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d100      	bne.n	6cd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6cd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    6cd2:	490a      	ldr	r1, [pc, #40]	; (6cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    6cd4:	9b01      	ldr	r3, [sp, #4]
    6cd6:	9a00      	ldr	r2, [sp, #0]
    6cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    6cdc:	4a06      	ldr	r2, [pc, #24]	; (6cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6cde:	9b01      	ldr	r3, [sp, #4]
    6ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce4:	1c5a      	adds	r2, r3, #1
    6ce6:	4904      	ldr	r1, [pc, #16]	; (6cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    6ce8:	9b01      	ldr	r3, [sp, #4]
    6cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6cee:	bf00      	nop
    6cf0:	b003      	add	sp, #12
    6cf2:	f85d fb04 	ldr.w	pc, [sp], #4
    6cf6:	bf00      	nop
    6cf8:	1fff8dcc 	.word	0x1fff8dcc
    6cfc:	1fff8dc8 	.word	0x1fff8dc8

00006d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    6d00:	b500      	push	{lr}
    6d02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d04:	f7f9 ff0c 	bl	b20 <Sys_GetCoreID>
    6d08:	4603      	mov	r3, r0
    6d0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    6d0c:	4a0d      	ldr	r2, [pc, #52]	; (6d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d0e:	9b01      	ldr	r3, [sp, #4]
    6d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d14:	1e5a      	subs	r2, r3, #1
    6d16:	490b      	ldr	r1, [pc, #44]	; (6d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d18:	9b01      	ldr	r3, [sp, #4]
    6d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    6d1e:	4a0a      	ldr	r2, [pc, #40]	; (6d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    6d20:	9b01      	ldr	r3, [sp, #4]
    6d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d26:	f003 0301 	and.w	r3, r3, #1
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d106      	bne.n	6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    6d2e:	4a05      	ldr	r2, [pc, #20]	; (6d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    6d30:	9b01      	ldr	r3, [sp, #4]
    6d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d36:	2b00      	cmp	r3, #0
    6d38:	d100      	bne.n	6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d3c:	bf00      	nop
    6d3e:	b003      	add	sp, #12
    6d40:	f85d fb04 	ldr.w	pc, [sp], #4
    6d44:	1fff8dcc 	.word	0x1fff8dcc
    6d48:	1fff8dc8 	.word	0x1fff8dc8

00006d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6d4c:	b500      	push	{lr}
    6d4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d50:	f7f9 fee6 	bl	b20 <Sys_GetCoreID>
    6d54:	4603      	mov	r3, r0
    6d56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    6d58:	4a10      	ldr	r2, [pc, #64]	; (6d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6d5a:	9b01      	ldr	r3, [sp, #4]
    6d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d60:	2b00      	cmp	r3, #0
    6d62:	d10d      	bne.n	6d80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d64:	f7f9 fe0c 	bl	980 <Port_schm_read_msr>
    6d68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d6a:	9b00      	ldr	r3, [sp, #0]
    6d6c:	f003 0301 	and.w	r3, r3, #1
    6d70:	2b00      	cmp	r3, #0
    6d72:	d100      	bne.n	6d76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    6d76:	490a      	ldr	r1, [pc, #40]	; (6da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    6d78:	9b01      	ldr	r3, [sp, #4]
    6d7a:	9a00      	ldr	r2, [sp, #0]
    6d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    6d80:	4a06      	ldr	r2, [pc, #24]	; (6d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d88:	1c5a      	adds	r2, r3, #1
    6d8a:	4904      	ldr	r1, [pc, #16]	; (6d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    6d8c:	9b01      	ldr	r3, [sp, #4]
    6d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d92:	bf00      	nop
    6d94:	b003      	add	sp, #12
    6d96:	f85d fb04 	ldr.w	pc, [sp], #4
    6d9a:	bf00      	nop
    6d9c:	1fff8dd4 	.word	0x1fff8dd4
    6da0:	1fff8dd0 	.word	0x1fff8dd0

00006da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    6da4:	b500      	push	{lr}
    6da6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6da8:	f7f9 feba 	bl	b20 <Sys_GetCoreID>
    6dac:	4603      	mov	r3, r0
    6dae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    6db0:	4a0d      	ldr	r2, [pc, #52]	; (6de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6db2:	9b01      	ldr	r3, [sp, #4]
    6db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db8:	1e5a      	subs	r2, r3, #1
    6dba:	490b      	ldr	r1, [pc, #44]	; (6de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    6dc2:	4a0a      	ldr	r2, [pc, #40]	; (6dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dca:	f003 0301 	and.w	r3, r3, #1
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d106      	bne.n	6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    6dd2:	4a05      	ldr	r2, [pc, #20]	; (6de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    6dd4:	9b01      	ldr	r3, [sp, #4]
    6dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d100      	bne.n	6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6dde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6de0:	bf00      	nop
    6de2:	b003      	add	sp, #12
    6de4:	f85d fb04 	ldr.w	pc, [sp], #4
    6de8:	1fff8dd4 	.word	0x1fff8dd4
    6dec:	1fff8dd0 	.word	0x1fff8dd0

00006df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6df0:	b500      	push	{lr}
    6df2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6df4:	f7f9 fe94 	bl	b20 <Sys_GetCoreID>
    6df8:	4603      	mov	r3, r0
    6dfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    6dfc:	4a10      	ldr	r2, [pc, #64]	; (6e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6dfe:	9b01      	ldr	r3, [sp, #4]
    6e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d10d      	bne.n	6e24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e08:	f7f9 fdba 	bl	980 <Port_schm_read_msr>
    6e0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e0e:	9b00      	ldr	r3, [sp, #0]
    6e10:	f003 0301 	and.w	r3, r3, #1
    6e14:	2b00      	cmp	r3, #0
    6e16:	d100      	bne.n	6e1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    6e1a:	490a      	ldr	r1, [pc, #40]	; (6e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    6e1c:	9b01      	ldr	r3, [sp, #4]
    6e1e:	9a00      	ldr	r2, [sp, #0]
    6e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    6e24:	4a06      	ldr	r2, [pc, #24]	; (6e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e2c:	1c5a      	adds	r2, r3, #1
    6e2e:	4904      	ldr	r1, [pc, #16]	; (6e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    6e30:	9b01      	ldr	r3, [sp, #4]
    6e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e36:	bf00      	nop
    6e38:	b003      	add	sp, #12
    6e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e3e:	bf00      	nop
    6e40:	1fff8ddc 	.word	0x1fff8ddc
    6e44:	1fff8dd8 	.word	0x1fff8dd8

00006e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    6e48:	b500      	push	{lr}
    6e4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e4c:	f7f9 fe68 	bl	b20 <Sys_GetCoreID>
    6e50:	4603      	mov	r3, r0
    6e52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    6e54:	4a0d      	ldr	r2, [pc, #52]	; (6e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6e56:	9b01      	ldr	r3, [sp, #4]
    6e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e5c:	1e5a      	subs	r2, r3, #1
    6e5e:	490b      	ldr	r1, [pc, #44]	; (6e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6e60:	9b01      	ldr	r3, [sp, #4]
    6e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    6e66:	4a0a      	ldr	r2, [pc, #40]	; (6e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    6e68:	9b01      	ldr	r3, [sp, #4]
    6e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e6e:	f003 0301 	and.w	r3, r3, #1
    6e72:	2b00      	cmp	r3, #0
    6e74:	d106      	bne.n	6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    6e76:	4a05      	ldr	r2, [pc, #20]	; (6e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    6e78:	9b01      	ldr	r3, [sp, #4]
    6e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d100      	bne.n	6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e84:	bf00      	nop
    6e86:	b003      	add	sp, #12
    6e88:	f85d fb04 	ldr.w	pc, [sp], #4
    6e8c:	1fff8ddc 	.word	0x1fff8ddc
    6e90:	1fff8dd8 	.word	0x1fff8dd8

00006e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6e94:	b500      	push	{lr}
    6e96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e98:	f7f9 fe42 	bl	b20 <Sys_GetCoreID>
    6e9c:	4603      	mov	r3, r0
    6e9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    6ea0:	4a10      	ldr	r2, [pc, #64]	; (6ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6ea2:	9b01      	ldr	r3, [sp, #4]
    6ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d10d      	bne.n	6ec8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6eac:	f7f9 fd68 	bl	980 <Port_schm_read_msr>
    6eb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6eb2:	9b00      	ldr	r3, [sp, #0]
    6eb4:	f003 0301 	and.w	r3, r3, #1
    6eb8:	2b00      	cmp	r3, #0
    6eba:	d100      	bne.n	6ebe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    6ebe:	490a      	ldr	r1, [pc, #40]	; (6ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    6ec0:	9b01      	ldr	r3, [sp, #4]
    6ec2:	9a00      	ldr	r2, [sp, #0]
    6ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    6ec8:	4a06      	ldr	r2, [pc, #24]	; (6ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6eca:	9b01      	ldr	r3, [sp, #4]
    6ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ed0:	1c5a      	adds	r2, r3, #1
    6ed2:	4904      	ldr	r1, [pc, #16]	; (6ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    6ed4:	9b01      	ldr	r3, [sp, #4]
    6ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6eda:	bf00      	nop
    6edc:	b003      	add	sp, #12
    6ede:	f85d fb04 	ldr.w	pc, [sp], #4
    6ee2:	bf00      	nop
    6ee4:	1fff8de4 	.word	0x1fff8de4
    6ee8:	1fff8de0 	.word	0x1fff8de0

00006eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    6eec:	b500      	push	{lr}
    6eee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ef0:	f7f9 fe16 	bl	b20 <Sys_GetCoreID>
    6ef4:	4603      	mov	r3, r0
    6ef6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    6ef8:	4a0d      	ldr	r2, [pc, #52]	; (6f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6efa:	9b01      	ldr	r3, [sp, #4]
    6efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f00:	1e5a      	subs	r2, r3, #1
    6f02:	490b      	ldr	r1, [pc, #44]	; (6f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f04:	9b01      	ldr	r3, [sp, #4]
    6f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    6f0a:	4a0a      	ldr	r2, [pc, #40]	; (6f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f12:	f003 0301 	and.w	r3, r3, #1
    6f16:	2b00      	cmp	r3, #0
    6f18:	d106      	bne.n	6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    6f1a:	4a05      	ldr	r2, [pc, #20]	; (6f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    6f1c:	9b01      	ldr	r3, [sp, #4]
    6f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f22:	2b00      	cmp	r3, #0
    6f24:	d100      	bne.n	6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f28:	bf00      	nop
    6f2a:	b003      	add	sp, #12
    6f2c:	f85d fb04 	ldr.w	pc, [sp], #4
    6f30:	1fff8de4 	.word	0x1fff8de4
    6f34:	1fff8de0 	.word	0x1fff8de0

00006f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6f38:	b500      	push	{lr}
    6f3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f3c:	f7f9 fdf0 	bl	b20 <Sys_GetCoreID>
    6f40:	4603      	mov	r3, r0
    6f42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    6f44:	4a10      	ldr	r2, [pc, #64]	; (6f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6f46:	9b01      	ldr	r3, [sp, #4]
    6f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d10d      	bne.n	6f6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f50:	f7f9 fd16 	bl	980 <Port_schm_read_msr>
    6f54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f56:	9b00      	ldr	r3, [sp, #0]
    6f58:	f003 0301 	and.w	r3, r3, #1
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d100      	bne.n	6f62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    6f62:	490a      	ldr	r1, [pc, #40]	; (6f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    6f64:	9b01      	ldr	r3, [sp, #4]
    6f66:	9a00      	ldr	r2, [sp, #0]
    6f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    6f6c:	4a06      	ldr	r2, [pc, #24]	; (6f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6f6e:	9b01      	ldr	r3, [sp, #4]
    6f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f74:	1c5a      	adds	r2, r3, #1
    6f76:	4904      	ldr	r1, [pc, #16]	; (6f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    6f78:	9b01      	ldr	r3, [sp, #4]
    6f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f7e:	bf00      	nop
    6f80:	b003      	add	sp, #12
    6f82:	f85d fb04 	ldr.w	pc, [sp], #4
    6f86:	bf00      	nop
    6f88:	1fff8dec 	.word	0x1fff8dec
    6f8c:	1fff8de8 	.word	0x1fff8de8

00006f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    6f90:	b500      	push	{lr}
    6f92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f94:	f7f9 fdc4 	bl	b20 <Sys_GetCoreID>
    6f98:	4603      	mov	r3, r0
    6f9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    6f9c:	4a0d      	ldr	r2, [pc, #52]	; (6fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6f9e:	9b01      	ldr	r3, [sp, #4]
    6fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa4:	1e5a      	subs	r2, r3, #1
    6fa6:	490b      	ldr	r1, [pc, #44]	; (6fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6fa8:	9b01      	ldr	r3, [sp, #4]
    6faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    6fae:	4a0a      	ldr	r2, [pc, #40]	; (6fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    6fb0:	9b01      	ldr	r3, [sp, #4]
    6fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb6:	f003 0301 	and.w	r3, r3, #1
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d106      	bne.n	6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    6fbe:	4a05      	ldr	r2, [pc, #20]	; (6fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    6fc0:	9b01      	ldr	r3, [sp, #4]
    6fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d100      	bne.n	6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6fca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6fcc:	bf00      	nop
    6fce:	b003      	add	sp, #12
    6fd0:	f85d fb04 	ldr.w	pc, [sp], #4
    6fd4:	1fff8dec 	.word	0x1fff8dec
    6fd8:	1fff8de8 	.word	0x1fff8de8

00006fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    6fdc:	b500      	push	{lr}
    6fde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fe0:	f7f9 fd9e 	bl	b20 <Sys_GetCoreID>
    6fe4:	4603      	mov	r3, r0
    6fe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    6fe8:	4a10      	ldr	r2, [pc, #64]	; (702c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d10d      	bne.n	7010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ff4:	f7f9 fcc4 	bl	980 <Port_schm_read_msr>
    6ff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ffa:	9b00      	ldr	r3, [sp, #0]
    6ffc:	f003 0301 	and.w	r3, r3, #1
    7000:	2b00      	cmp	r3, #0
    7002:	d100      	bne.n	7006 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7006:	490a      	ldr	r1, [pc, #40]	; (7030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7008:	9b01      	ldr	r3, [sp, #4]
    700a:	9a00      	ldr	r2, [sp, #0]
    700c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    7010:	4a06      	ldr	r2, [pc, #24]	; (702c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7012:	9b01      	ldr	r3, [sp, #4]
    7014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7018:	1c5a      	adds	r2, r3, #1
    701a:	4904      	ldr	r1, [pc, #16]	; (702c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    701c:	9b01      	ldr	r3, [sp, #4]
    701e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7022:	bf00      	nop
    7024:	b003      	add	sp, #12
    7026:	f85d fb04 	ldr.w	pc, [sp], #4
    702a:	bf00      	nop
    702c:	1fff8df4 	.word	0x1fff8df4
    7030:	1fff8df0 	.word	0x1fff8df0

00007034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7034:	b500      	push	{lr}
    7036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7038:	f7f9 fd72 	bl	b20 <Sys_GetCoreID>
    703c:	4603      	mov	r3, r0
    703e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    7040:	4a0d      	ldr	r2, [pc, #52]	; (7078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7042:	9b01      	ldr	r3, [sp, #4]
    7044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7048:	1e5a      	subs	r2, r3, #1
    704a:	490b      	ldr	r1, [pc, #44]	; (7078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    7052:	4a0a      	ldr	r2, [pc, #40]	; (707c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7054:	9b01      	ldr	r3, [sp, #4]
    7056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705a:	f003 0301 	and.w	r3, r3, #1
    705e:	2b00      	cmp	r3, #0
    7060:	d106      	bne.n	7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    7062:	4a05      	ldr	r2, [pc, #20]	; (7078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7064:	9b01      	ldr	r3, [sp, #4]
    7066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    706a:	2b00      	cmp	r3, #0
    706c:	d100      	bne.n	7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    706e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7070:	bf00      	nop
    7072:	b003      	add	sp, #12
    7074:	f85d fb04 	ldr.w	pc, [sp], #4
    7078:	1fff8df4 	.word	0x1fff8df4
    707c:	1fff8df0 	.word	0x1fff8df0

00007080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7080:	b500      	push	{lr}
    7082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7084:	f7f9 fd4c 	bl	b20 <Sys_GetCoreID>
    7088:	4603      	mov	r3, r0
    708a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    708c:	4a10      	ldr	r2, [pc, #64]	; (70d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    708e:	9b01      	ldr	r3, [sp, #4]
    7090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7094:	2b00      	cmp	r3, #0
    7096:	d10d      	bne.n	70b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7098:	f7f9 fc72 	bl	980 <Port_schm_read_msr>
    709c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    709e:	9b00      	ldr	r3, [sp, #0]
    70a0:	f003 0301 	and.w	r3, r3, #1
    70a4:	2b00      	cmp	r3, #0
    70a6:	d100      	bne.n	70aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    70aa:	490a      	ldr	r1, [pc, #40]	; (70d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    70ac:	9b01      	ldr	r3, [sp, #4]
    70ae:	9a00      	ldr	r2, [sp, #0]
    70b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    70b4:	4a06      	ldr	r2, [pc, #24]	; (70d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    70b6:	9b01      	ldr	r3, [sp, #4]
    70b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70bc:	1c5a      	adds	r2, r3, #1
    70be:	4904      	ldr	r1, [pc, #16]	; (70d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    70c0:	9b01      	ldr	r3, [sp, #4]
    70c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70c6:	bf00      	nop
    70c8:	b003      	add	sp, #12
    70ca:	f85d fb04 	ldr.w	pc, [sp], #4
    70ce:	bf00      	nop
    70d0:	1fff8dfc 	.word	0x1fff8dfc
    70d4:	1fff8df8 	.word	0x1fff8df8

000070d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    70d8:	b500      	push	{lr}
    70da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70dc:	f7f9 fd20 	bl	b20 <Sys_GetCoreID>
    70e0:	4603      	mov	r3, r0
    70e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    70e4:	4a0d      	ldr	r2, [pc, #52]	; (711c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    70e6:	9b01      	ldr	r3, [sp, #4]
    70e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ec:	1e5a      	subs	r2, r3, #1
    70ee:	490b      	ldr	r1, [pc, #44]	; (711c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    70f6:	4a0a      	ldr	r2, [pc, #40]	; (7120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    70f8:	9b01      	ldr	r3, [sp, #4]
    70fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70fe:	f003 0301 	and.w	r3, r3, #1
    7102:	2b00      	cmp	r3, #0
    7104:	d106      	bne.n	7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7106:	4a05      	ldr	r2, [pc, #20]	; (711c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7108:	9b01      	ldr	r3, [sp, #4]
    710a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710e:	2b00      	cmp	r3, #0
    7110:	d100      	bne.n	7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7114:	bf00      	nop
    7116:	b003      	add	sp, #12
    7118:	f85d fb04 	ldr.w	pc, [sp], #4
    711c:	1fff8dfc 	.word	0x1fff8dfc
    7120:	1fff8df8 	.word	0x1fff8df8

00007124 <Clock_Ip_au8DividerCallbackIndex>:
    7124:	0e0d0c00 06030201 0a070409 000b0805     ................

00007134 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007144 <Clock_Ip_au8XoscCallbackIndex>:
    7144:	00000100 00000000 00000000 00000000     ................

00007154 <Clock_Ip_au8IrcoscCallbackIndex>:
    7154:	03020100 00000004 00000000 00000000     ................

00007164 <Clock_Ip_au8GateCallbackIndex>:
    7164:	06010200 01040301 00000500 00000000     ................

00007174 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007184 <Clock_Ip_au8PllCallbackIndex>:
    7184:	00000100 00000000 00000000 00000000     ................

00007194 <Clock_Ip_au8SelectorCallbackIndex>:
    7194:	0a090800 03020109 07060504 00000000     ................

000071a4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000071b4 <Clock_Ip_au8CmuCallbackIndex>:
	...

000071c4 <Clock_Ip_au8ClockFeatures>:
	...
    71d4:	01000000 00000000 00000000 00000002     ................
    71e4:	00000000 00000300 00000000 00040000     ................
    71f4:	00000000 05000000 00000000 00000000     ................
    7204:	00000006 00000000 00000100 00000000     ................
    7214:	00010000 00000000 04000000 00000000     ................
    7224:	00000000 00000005 00000001 00000401     ................
    7234:	00000200 00050100 00030000 04020000     ................
    7244:	04000000 02000000 00000005 00000005     ................
    7254:	00000403 00000600 00050300 00070000     ................
    7264:	05000000 00000000 00000000 00000006     ................
	...
    72a4:	00050000 00000000 06000000 00000100     ................
    72b4:	00000000 00030007 00000000 00000000     ................
    72c4:	00000000 00060000 00000000 07000000     ................
    72d4:	00000100 00000000 00030008 00000000     ................
	...
    72ec:	00090000 00000000 0a000000 00000100     ................
    72fc:	00000000 0003000b 00000000 00000000     ................
    730c:	00000000 000c0000 00000000 0d000000     ................
    731c:	00000100 00000000 0003000e 00000000     ................
    732c:	00000800 00000000 00090000 00000000     ................
    733c:	0a000000 00000000 00000000 0000000b     ................
    734c:	00000000 00000b01 00000000 000b0200     ................
    735c:	00000000 0b030000 00000000 00000000     ................
	...
    7374:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    7384:	01000000 00000000 00000000 00000007     ................
    7394:	00007300 00000700 00320000 00090000     .s........2.....
    73a4:	02000000 07000000 00000000 00000021     ............!...
    73b4:	00000009 00000400 00000900 00030000     ................
    73c4:	00070000 61000000 07000000 00000000     .......a........
    73d4:	00000024 00000007 00002500 00000700     $........%......
    73e4:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    73f4:	00000000 00000020 38000004 00003800     .... ......8.8..
    7404:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7414:	04000000 00260000 00000026 66000004     ......&.&......f
    7424:	00006600 00000400 00370037 00040000     .f......7.7.....
    7434:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7444:	2e000004 00002e00 00000200 00404040     ............@@@.
    7454:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    7464:	0000006b 6c000004 00006c00 00000900     k......l.l......
    7474:	00010000 00090000 00000000 07000000     ................
    7484:	00000000 00000036 00000007 00003100     ....6........1..
    7494:	00000700 00490000 00070000 4a000000     ......I........J
    74a4:	07000000 00000000 0000004b 00000007     ........K.......
    74b4:	00004c00 00000700 004d0000 00070000     .L........M.....
    74c4:	3d000000 03000000 00000000 00000000     ...=............

000074d4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    74d4:	01010a03 01010001 04040002 02000603     ................
    74e4:	00010810 02020100 00000000 00000007     ................
    74f4:	00000009 00000000 00000c0e 00000000     ................
	...

0000752c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    752c:	00020000 00000300 00000601 00000000     ................
	...

0000755c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    755c:	00000700 00000000 02020000 01010303     ................
    756c:	03020606 00000000 00000000 00000000     ................
	...

0000758c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    758c:	00000001 00000000 02020000 01010303     ................
    759c:	03020606 00000000 00000000 00000000     ................
	...

000075bc <Clock_Ip_au8DividerValueHardwareValue>:
    75bc:	00020100 00000003 00000004 00000000     ................
    75cc:	00000005 00000000 00000000 00000000     ................
    75dc:	00000006 00000000 00000000 00000000     ................
	...
    75fc:	00000007                                ....

00007600 <Clock_Ip_apxScgPeriphAsyncDivs>:
    7600:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007610 <Clock_Ip_aeSourceTypeClockName>:
    7610:	00000000 00000001 00000001 00000001     ................
    7620:	00000001 00000001 00000001 00000001     ................
    7630:	00000002 00000003 00000001 00000001     ................
    7640:	00000001 00000001 00000002 00000002     ................
    7650:	00000003 00000003 00000001 00000001     ................
    7660:	00000004 00000004 00000004 00000004     ................
	...

000076cc <Clock_Ip_aeHwPllName>:
    76cc:	00000009                                ....

000076d0 <Clock_Ip_aeHwDfsName>:
    76d0:	00000057                                W...

000076d4 <Clock_Ip_axDividerCallbacks>:
    76d4:	00001c35 00001c3f 00001c59 00001c73     5...?...Y...s...
    76e4:	00001c8d 00001ca7 00001cc1 00001cdb     ................
    76f4:	00001cf5 00001d0f 00001d29 00001d43     ........)...C...
    7704:	00001d5d 00001d77 00001d91              ]...w.......

00007710 <Clock_Ip_axDividerTriggerCallbacks>:
    7710:	00002105 00002105                       .!...!..

00007718 <Clock_Ip_axExtOscCallbacks>:
    7718:	00002111 00002111 00002111 0000211b     .!...!...!...!..
    7728:	00002111 00002125 0000213f 00002159     .!..%!..?!..Y!..
    7738:	000021dd 000021f1                       .!...!..

00007740 <Clock_Ip_axFracDivCallbacks>:
    7740:	000023b1 000023b1 000023bb              .#...#...#..

0000774c <Clock_Ip_axGateCallbacks>:
    774c:	000023d5 000023df 000024df 000024f9     .#...#...$...$..
    775c:	0000248f 000024a9 0000243f 00002459     .$...$..?$..Y$..
    776c:	000023ef 00002409 0000252f 00002549     .#...$../%..I%..
    777c:	0000257f 00002599                       .%...%..

00007784 <Clock_Ip_axIntOscCallbacks>:
    7784:	00002745 00002745 0000274f 00002759     E'..E'..O'..Y'..
    7794:	00002773 0000278d 000027a1 000027bb     s'...'...'...'..
    77a4:	000027d5 000027e9 00002803 0000281d     .'...'...(...(..
    77b4:	000028c5 000028df 000028f9              .(...(...(..

000077c0 <Clock_Ip_axCmuCallbacks>:
    77c0:	00002e95 00002e9f 00002eab 00002e95     ................

000077d0 <Clock_Ip_axPllCallbacks>:
    77d0:	00002eb5 00002eb5 00002ebf 00002eb5     ................
    77e0:	00002ecb 00002ed5 00002eef 00002f09     ............./..
    77f0:	00002fad 00002f99                       ./.../..

000077f8 <Clock_Ip_axPcfsCallbacks>:
    77f8:	00003109                                .1..

000077fc <Clock_Ip_axSelectorCallbacks>:
    77fc:	00003115 00003115 0000311f 00003139     .1...1...1..91..
    780c:	00003115 00003153 0000316d 00003187     .1..S1..m1...1..
    781c:	000031a1 000031bb 000031d5 000031ef     .1...1...1...1..
    782c:	00003209 00003223 0000323d 00003257     .2..#2..=2..W2..
    783c:	00003271 0000328b 000032a5 000032bf     q2...2...2...2..
    784c:	000032d9 000032f3                       .2...2..

00007854 <ClockSource>:
    7854:	00000000 00000008 00000002 00000005     ................
	...
    786c:	00000009                                ....

00007870 <ResetReasonArray>:
    7870:	00000000 00000001 00000002 00000003     ................
    7880:	00000004 00000005 00000006 00000007     ................
    7890:	00000008 00000009 0000000a 0000000b     ................
    78a0:	0000000c 0000000d 0000000e              ............

000078ac <Port_au32PortCiPortBaseAddr>:
    78ac:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    78bc:	4004d000                                ...@

000078c0 <Port_au32PortCiGpioBaseAddr>:
    78c0:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    78d0:	400ff100                                ...@

000078d4 <Mcu_aClockConfigPB>:
	...
    78dc:	1c000101 04000010 01000029 00000005     ........).......
    78ec:	00000001 00000000 00000057 00000000     ........W.......
    78fc:	00000000 00000008 007a1200 00000001     ..........z.....
    790c:	00000001 00000000 00000057 00000000     ........W.......
    791c:	00000057 00000000 00000000 00000000     W...............
	...
    793c:	00000019 00000005 0000001a 00000002     ................
    794c:	0000001b 00000005 0000002a 00000005     ........*.......
    795c:	00000028 0000000e 00000029 00000001     (.......).......
    796c:	00000056 0000001c 00000032 0000002a     V.......2...*...
    797c:	0000002b 00000014 0000002c 00000014     +.......,.......
    798c:	0000002d 00000014 0000002e 00000014     -...............
    799c:	0000003f 00000000 00000040 00000000     ?.......@.......
    79ac:	00000041 00000000 00000042 00000000     A.......B.......
    79bc:	00000031 00000000 00000045 00000000     1.......E.......
    79cc:	00000046 00000000 00000047 00000000     F.......G.......
    79dc:	00000044 00000000 00000030 00000000     D.......0.......
    79ec:	0000003d 00000000 00000043 00000000     =.......C.......
    79fc:	00000049 00000000 0000004a 00000000     I.......J.......
    7a0c:	0000004b 00000000 00000048 00000000     K.......H.......
    7a1c:	0000000c 00000001 00000000 0000000d     ................
    7a2c:	00000002 00000000 0000000e 00000001     ................
    7a3c:	00000000 0000000f 00000001 00000000     ................
    7a4c:	0000001d 00000001 00000000 0000001e     ................
    7a5c:	00000008 00000000 0000001f 00000001     ................
    7a6c:	00000000 00000021 00000001 00000000     ....!...........
    7a7c:	00000022 00000002 00000000 00000023     "...........#...
    7a8c:	00000001 00000000 00000025 00000003     ........%.......
    7a9c:	00000000 00000026 00000004 00000000     ....&...........
    7aac:	00000027 00000002 00000000 00000032     '...........2...
    7abc:	00000001 00000000 00000048 00000001     ........H.......
    7acc:	00000001 00000056 00000001 00000001     ....V...........
    7adc:	00000057 00000000 00000000 00000057     W...........W...
	...
    7af4:	00000057 00000000 00000000 00000057     W...........W...
	...
    7b0c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    7b28:	00000014 00007d00 00000015 00007d00     .....}.......}..
    7b38:	00000016 00007d00 00000017 00008000     .....}..........
    7b48:	00000012 00000001 00000013 00000001     ................
    7b58:	00000030 00000000 00000031 00000000     0.......1.......
    7b68:	00000032 00000000 00000033 00000000     2.......3.......
    7b78:	00000034 00000000 00000035 00000001     4.......5.......
    7b88:	00000036 00000000 00000037 00000001     6.......7.......
    7b98:	00000038 00000001 00000039 00000000     8.......9.......
    7ba8:	0000003a 00000000 0000003b 00000000     :.......;.......
    7bb8:	0000003c 00000000 0000003d 00000000     <.......=.......
    7bc8:	0000003e 00000000 0000003f 00000000     >.......?.......
    7bd8:	00000040 00000000 00000041 00000000     @.......A.......
    7be8:	00000042 00000000 00000043 00000000     B.......C.......
    7bf8:	00000044 00000000 00000045 00000000     D.......E.......
    7c08:	00000046 00000000 00000047 00000000     F.......G.......
    7c18:	00000048 00000000 00000049 00000000     H.......I.......
    7c28:	0000004a 00000000 0000004b 00000000     J.......K.......
    7c38:	0000004c 00000001 0000004d 00000001     L.......M.......
    7c48:	0000004e 00000000 0000004f 00000000     N.......O.......
    7c58:	00000050 00000001 00000051 00000001     P.......Q.......
    7c68:	00000052 00000001 00000053 00000001     R.......S.......
    7c78:	00000054 00000001 00000055 00000000     T.......U.......
    7c88:	00000056 00000001 00000057 00000000     V.......W.......
    7c98:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00007ccc <DioConfig_aChannelGroupList>:
    7ccc:	00000802 00000f00                       ........

00007cd4 <Mcu_Config>:
    7cd4:	0000005a 00000000 00000001 00000001     Z...............
    7ce4:	00007ee0 000078d4 00007eec              .~...x...~..

00007cf0 <OsIf_xPredefinedConfig>:
    7cf0:	00000000 02dc6c00                       .....l..

00007cf8 <OsIf_apxPredefinedConfig>:
    7cf8:	00007cf0                                .|..

00007cfc <g_pin_mux_InitConfigArr>:
    7cfc:	4004b000 400ff080 00000008 00000002     ...@...@........
    7d0c:	00000001 00000002 00000000 00000000     ................
	...
    7d24:	4004b000 400ff080 00000009 00000002     ...@...@........
    7d34:	00000001 00000002 00000000 00000000     ................
	...
    7d4c:	4004b000 400ff080 0000000a 00000002     ...@...@........
    7d5c:	00000001 00000002 00000000 00000000     ................
	...
    7d74:	4004b000 400ff080 0000000b 00000002     ...@...@........
    7d84:	00000001 00000002 00000000 00000000     ................
	...

00007d9c <au8Port_PartitionList>:
    7d9c:	00000001                                ....

00007da0 <au32Port_PinToPartitionMap>:
    7da0:	00000001 00000001 00000001 00000001     ................

00007db0 <Port_au16NoUnUsedPadsArrayDefault>:
    7db0:	00010000 00030002 00070006 00090008     ................
    7dc0:	000c000b 000e000d 0010000f 00200011     .............. .
    7dd0:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    7de0:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    7df0:	00400031 00420041 00460043 004c0047     1.@.A.B.C.F.G.L.
    7e00:	004e004d 0050004f 00600051 00620061     M.N.O.P.Q.`.a.b.
    7e10:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    7e20:	006c006b 006e006d 0070006f 00800071     k.l.m.n.o.p.q...
    7e30:	00820081 00840083 00860085 00880087     ................
    7e40:	008a0089 008c008b 008e008d 0090008f     ................

00007e50 <Port_UnUsedPin>:
    7e50:	00000100 00000001 00000000              ............

00007e5c <Port_aPinConfigDefault>:
    7e5c:	00000048 00000100 00000000 00000002     H...............
    7e6c:	00010001 00000049 00000100 00000000     ....I...........
    7e7c:	00000002 00010001 0000004a 00000100     ........J.......
    7e8c:	00000000 00000002 00010001 0000004b     ............K...
    7e9c:	00000100 00000000 00000002 00010001     ................

00007eac <Port_Config>:
    7eac:	00500004 00007db0 00007e50 00007e5c     ..P..}..P~..\~..
	...
    7ec4:	00007da0 00007d9c 00007cfc              .}...}...|..

00007ed0 <Power_Ip_RCM_ConfigPB>:
	...

00007ed8 <Power_Ip_PMC_ConfigPB>:
    7ed8:	00000000                                ....

00007edc <Power_Ip_SMC_ConfigPB>:
    7edc:	00000000                                ....

00007ee0 <Power_Ip_aModeConfigPB>:
	...

00007eec <Power_Ip_HwIPsConfigPB>:
    7eec:	00007ed0 00007ed8 00007edc              .~...~...~..

00007ef8 <__INIT_TABLE>:
    7ef8:	00000002 	.word	0x00000002
    7efc:	1fff8b10 	.word	0x1fff8b10
    7f00:	00007f20 	.word	0x00007f20
    7f04:	00007f48 	.word	0x00007f48
    7f08:	1fff8800 	.word	0x1fff8800
    7f0c:	00000000 	.word	0x00000000
    7f10:	00000310 	.word	0x00000310

00007f14 <__ZERO_TABLE>:
    7f14:	00000001 	.word	0x00000001
    7f18:	1fff8b40 	.word	0x1fff8b40
    7f1c:	1fff8e10 	.word	0x1fff8e10
