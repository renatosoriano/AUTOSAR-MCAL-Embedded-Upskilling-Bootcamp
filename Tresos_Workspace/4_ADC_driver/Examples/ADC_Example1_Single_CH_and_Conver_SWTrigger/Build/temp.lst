
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000b5f 	.word	0x00000b5f
  10:	00000b61 	.word	0x00000b61
  14:	00000b63 	.word	0x00000b63
  18:	00000b65 	.word	0x00000b65
	...
  2c:	00000b67 	.word	0x00000b67
  30:	00000b69 	.word	0x00000b69
  34:	00000000 	.word	0x00000000
  38:	00000b6b 	.word	0x00000b6b
  3c:	00000b6d 	.word	0x00000b6d
  40:	00000b6f 	.word	0x00000b6f
  44:	00000b6f 	.word	0x00000b6f
  48:	00000b6f 	.word	0x00000b6f
  4c:	00000b6f 	.word	0x00000b6f
  50:	00000b6f 	.word	0x00000b6f
  54:	00000b6f 	.word	0x00000b6f
  58:	00000b6f 	.word	0x00000b6f
  5c:	00000b6f 	.word	0x00000b6f
  60:	00000b6f 	.word	0x00000b6f
  64:	00000b6f 	.word	0x00000b6f
  68:	00000b6f 	.word	0x00000b6f
  6c:	00000b6f 	.word	0x00000b6f
  70:	00000b6f 	.word	0x00000b6f
  74:	00000b6f 	.word	0x00000b6f
  78:	00000b6f 	.word	0x00000b6f
  7c:	00000b6f 	.word	0x00000b6f
  80:	00000b6f 	.word	0x00000b6f
  84:	00000b6f 	.word	0x00000b6f
  88:	00000b6f 	.word	0x00000b6f
  8c:	00000b6f 	.word	0x00000b6f
  90:	00000b6f 	.word	0x00000b6f
  94:	00000b6f 	.word	0x00000b6f
  98:	00000b6f 	.word	0x00000b6f
  9c:	00000b6f 	.word	0x00000b6f
  a0:	00000b6f 	.word	0x00000b6f
  a4:	00000b6f 	.word	0x00000b6f
  a8:	00000b6f 	.word	0x00000b6f
  ac:	00000b6f 	.word	0x00000b6f
  b0:	00000b6f 	.word	0x00000b6f
  b4:	00000b6f 	.word	0x00000b6f
  b8:	00000b6f 	.word	0x00000b6f
  bc:	00000b6f 	.word	0x00000b6f
  c0:	00000b6f 	.word	0x00000b6f
  c4:	00000b6f 	.word	0x00000b6f
  c8:	00000b6f 	.word	0x00000b6f
  cc:	00000b6f 	.word	0x00000b6f
  d0:	00000b6f 	.word	0x00000b6f
  d4:	00000b6f 	.word	0x00000b6f
  d8:	00000b6f 	.word	0x00000b6f
  dc:	00000b6f 	.word	0x00000b6f
  e0:	00000b6f 	.word	0x00000b6f
  e4:	00000b6f 	.word	0x00000b6f
  e8:	00000b6f 	.word	0x00000b6f
  ec:	00000b6f 	.word	0x00000b6f
  f0:	00000b6f 	.word	0x00000b6f
  f4:	00000b6f 	.word	0x00000b6f
  f8:	00000b6f 	.word	0x00000b6f
  fc:	00000b6f 	.word	0x00000b6f
 100:	00000b6f 	.word	0x00000b6f
 104:	00000b6f 	.word	0x00000b6f
 108:	00000b6f 	.word	0x00000b6f
 10c:	00000b6f 	.word	0x00000b6f
 110:	00000b6f 	.word	0x00000b6f
 114:	00000b6f 	.word	0x00000b6f
 118:	00000b6f 	.word	0x00000b6f
 11c:	00000b6f 	.word	0x00000b6f
 120:	00000b6f 	.word	0x00000b6f
 124:	00000b6f 	.word	0x00000b6f
 128:	00000b6f 	.word	0x00000b6f
 12c:	00000b6f 	.word	0x00000b6f
 130:	00000b6f 	.word	0x00000b6f
 134:	00000b6f 	.word	0x00000b6f
 138:	00000b6f 	.word	0x00000b6f
 13c:	00000b6f 	.word	0x00000b6f
 140:	00000b6f 	.word	0x00000b6f
 144:	00000b6f 	.word	0x00000b6f
 148:	00000b6f 	.word	0x00000b6f
 14c:	00000b6f 	.word	0x00000b6f
 150:	00000b6f 	.word	0x00000b6f
 154:	00000b6f 	.word	0x00000b6f
 158:	00000b6f 	.word	0x00000b6f
 15c:	00000b6f 	.word	0x00000b6f
 160:	00000b6f 	.word	0x00000b6f
 164:	00000b6f 	.word	0x00000b6f
 168:	00000b6f 	.word	0x00000b6f
 16c:	00000b6f 	.word	0x00000b6f
 170:	00000b6f 	.word	0x00000b6f
 174:	00000b6f 	.word	0x00000b6f
 178:	00000b6f 	.word	0x00000b6f
 17c:	00000b6f 	.word	0x00000b6f
 180:	00000b6f 	.word	0x00000b6f
 184:	00000b6f 	.word	0x00000b6f
 188:	00000b6f 	.word	0x00000b6f
 18c:	00000b6f 	.word	0x00000b6f
 190:	00000b6f 	.word	0x00000b6f
 194:	00000b6f 	.word	0x00000b6f
 198:	00000b6f 	.word	0x00000b6f
 19c:	00000b6f 	.word	0x00000b6f
 1a0:	00000b6f 	.word	0x00000b6f
 1a4:	00000b6f 	.word	0x00000b6f
 1a8:	00000b6f 	.word	0x00000b6f
 1ac:	00000b6f 	.word	0x00000b6f
 1b0:	00000b6f 	.word	0x00000b6f
 1b4:	00000b6f 	.word	0x00000b6f
 1b8:	00000b6f 	.word	0x00000b6f
 1bc:	00000b6f 	.word	0x00000b6f
 1c0:	00000b6f 	.word	0x00000b6f
 1c4:	00000b6f 	.word	0x00000b6f
 1c8:	00000b6f 	.word	0x00000b6f
 1cc:	00000b6f 	.word	0x00000b6f
 1d0:	00000b6f 	.word	0x00000b6f
 1d4:	00000b6f 	.word	0x00000b6f
 1d8:	00000b6f 	.word	0x00000b6f
 1dc:	00000b6f 	.word	0x00000b6f
 1e0:	00000b6f 	.word	0x00000b6f
 1e4:	00000b6f 	.word	0x00000b6f
 1e8:	00000b6f 	.word	0x00000b6f
 1ec:	00000b6f 	.word	0x00000b6f
 1f0:	00000b6f 	.word	0x00000b6f
 1f4:	00000b6f 	.word	0x00000b6f
 1f8:	00000b6f 	.word	0x00000b6f
 1fc:	00000b6f 	.word	0x00000b6f
 200:	00000b6f 	.word	0x00000b6f
 204:	00000b6f 	.word	0x00000b6f
 208:	00000b6f 	.word	0x00000b6f
 20c:	00000b6f 	.word	0x00000b6f
 210:	00000b6f 	.word	0x00000b6f
 214:	00000b6f 	.word	0x00000b6f
 218:	00000b6f 	.word	0x00000b6f
 21c:	00000b6f 	.word	0x00000b6f
 220:	00000b6f 	.word	0x00000b6f
 224:	00000b6f 	.word	0x00000b6f
 228:	00000b6f 	.word	0x00000b6f
 22c:	00000b6f 	.word	0x00000b6f
 230:	00000b6f 	.word	0x00000b6f
 234:	00000b6f 	.word	0x00000b6f
 238:	00000b6f 	.word	0x00000b6f
 23c:	00000b6f 	.word	0x00000b6f
 240:	00000b6f 	.word	0x00000b6f
 244:	00000b6f 	.word	0x00000b6f
 248:	00000b6f 	.word	0x00000b6f
 24c:	00000b6f 	.word	0x00000b6f
 250:	00000b6f 	.word	0x00000b6f
 254:	00000b6f 	.word	0x00000b6f
 258:	00000b6f 	.word	0x00000b6f
 25c:	00000b6f 	.word	0x00000b6f
 260:	00000b6f 	.word	0x00000b6f
 264:	00000b6f 	.word	0x00000b6f
 268:	00000b6f 	.word	0x00000b6f
 26c:	00000b6f 	.word	0x00000b6f
 270:	00000b6f 	.word	0x00000b6f
 274:	00000b6f 	.word	0x00000b6f
 278:	00000b6f 	.word	0x00000b6f
 27c:	00000b6f 	.word	0x00000b6f
 280:	00000b6f 	.word	0x00000b6f
 284:	00000b6f 	.word	0x00000b6f
 288:	00000b6f 	.word	0x00000b6f
 28c:	00000b6f 	.word	0x00000b6f
 290:	00000b6f 	.word	0x00000b6f
 294:	00000b6f 	.word	0x00000b6f
 298:	00000b6f 	.word	0x00000b6f
 29c:	00000b6f 	.word	0x00000b6f
 2a0:	00000b6f 	.word	0x00000b6f
 2a4:	00000b6f 	.word	0x00000b6f
 2a8:	00000b6f 	.word	0x00000b6f
 2ac:	00000b6f 	.word	0x00000b6f
 2b0:	00000b6f 	.word	0x00000b6f
 2b4:	00000b6f 	.word	0x00000b6f
 2b8:	00000b6f 	.word	0x00000b6f
 2bc:	00000b6f 	.word	0x00000b6f
 2c0:	00000b6f 	.word	0x00000b6f
 2c4:	00000b6f 	.word	0x00000b6f
 2c8:	00000b6f 	.word	0x00000b6f
 2cc:	00000b6f 	.word	0x00000b6f
 2d0:	00000b6f 	.word	0x00000b6f
 2d4:	00000b6f 	.word	0x00000b6f
 2d8:	00000b6f 	.word	0x00000b6f
 2dc:	00000b6f 	.word	0x00000b6f
 2e0:	00000b6f 	.word	0x00000b6f
 2e4:	00000b6f 	.word	0x00000b6f
 2e8:	00000b6f 	.word	0x00000b6f
 2ec:	00000b6f 	.word	0x00000b6f
 2f0:	00000b6f 	.word	0x00000b6f
 2f4:	00000b6f 	.word	0x00000b6f
 2f8:	00000b6f 	.word	0x00000b6f
 2fc:	00000b6f 	.word	0x00000b6f
 300:	00000b6f 	.word	0x00000b6f
 304:	00000b6f 	.word	0x00000b6f
 308:	00000b6f 	.word	0x00000b6f
 30c:	00000b6f 	.word	0x00000b6f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faa3 	bl	9cc <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb62 	bl	b54 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91ec 	.word	0x1fff91ec

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 faad 	bl	af8 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    AdcReadGroupBuffer[1];
    Adc_ValueGroupType    ResultBuffer[1];

    EcuM_Init();
     8b4:	f000 f82a 	bl	90c <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b8:	f000 faec 	bl	e94 <SEGGER_RTT_Init>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8bc:	ab03      	add	r3, sp, #12
     8be:	4619      	mov	r1, r3
     8c0:	2000      	movs	r0, #0
     8c2:	f007 f997 	bl	7bf4 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     8c6:	ab01      	add	r3, sp, #4
     8c8:	4619      	mov	r1, r3
     8ca:	2000      	movs	r0, #0
     8cc:	f006 ff30 	bl	7730 <Adc_SetupResultBuffer>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     8d0:	2000      	movs	r0, #0
     8d2:	f006 ffcb 	bl	786c <Adc_StartGroupConversion>
        /* Wait until the conversion is done */
        while( Adc_GetGroupStatus( AdcGroup_0 ) == ADC_BUSY );
     8d6:	bf00      	nop
     8d8:	2000      	movs	r0, #0
     8da:	f007 f8a4 	bl	7a26 <Adc_GetGroupStatus>
     8de:	4603      	mov	r3, r0
     8e0:	2b01      	cmp	r3, #1
     8e2:	d0f9      	beq.n	8d8 <main+0x28>
        /* Read ready conversion */
        Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );
     8e4:	ab02      	add	r3, sp, #8
     8e6:	4619      	mov	r1, r3
     8e8:	2000      	movs	r0, #0
     8ea:	f007 f857 	bl	799c <Adc_ReadGroup>
        /* Display value */
        SEGGER_RTT_printf( 0, "Adc Channel value: %d\n", AdcReadGroupBuffer[0] );
     8ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     8f2:	461a      	mov	r2, r3
     8f4:	4904      	ldr	r1, [pc, #16]	; (908 <main+0x58>)
     8f6:	2000      	movs	r0, #0
     8f8:	f000 fe34 	bl	1564 <SEGGER_RTT_printf>
        Delay( 2000u );
     8fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     900:	f000 f822 	bl	948 <Delay>
    {
     904:	e7e4      	b.n	8d0 <main+0x20>
     906:	bf00      	nop
     908:	0001005c 	.word	0x0001005c

0000090c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     90c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     90e:	480b      	ldr	r0, [pc, #44]	; (93c <EcuM_Init+0x30>)
     910:	f004 fe6e 	bl	55f0 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     914:	2000      	movs	r0, #0
     916:	f004 febf 	bl	5698 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     91a:	2000      	movs	r0, #0
     91c:	f004 fee0 	bl	56e0 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     920:	2000      	movs	r0, #0
     922:	f001 f8d0 	bl	1ac6 <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     926:	2000      	movs	r0, #0
     928:	f000 ffca 	bl	18c0 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5  (B1) */
    Port_Init( &Port_Config );
     92c:	4804      	ldr	r0, [pc, #16]	; (940 <EcuM_Init+0x34>)
     92e:	f005 fa61 	bl	5df4 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     932:	4804      	ldr	r0, [pc, #16]	; (944 <EcuM_Init+0x38>)
     934:	f006 feae 	bl	7694 <Adc_Init>
}
     938:	bf00      	nop
     93a:	bd08      	pop	{r3, pc}
     93c:	00010d30 	.word	0x00010d30
     940:	00010e80 	.word	0x00010e80
     944:	00010908 	.word	0x00010908

00000948 <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     948:	b500      	push	{lr}
     94a:	b087      	sub	sp, #28
     94c:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     94e:	9b01      	ldr	r3, [sp, #4]
     950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     954:	fb02 f303 	mul.w	r3, r2, r3
     958:	2101      	movs	r1, #1
     95a:	4618      	mov	r0, r3
     95c:	f001 f908 	bl	1b70 <OsIf_MicrosToTicks>
     960:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     962:	2001      	movs	r0, #1
     964:	f001 f8b8 	bl	1ad8 <OsIf_GetCounter>
     968:	4603      	mov	r3, r0
     96a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     96c:	2300      	movs	r3, #0
     96e:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     970:	ab03      	add	r3, sp, #12
     972:	2101      	movs	r1, #1
     974:	4618      	mov	r0, r3
     976:	f001 f8c8 	bl	1b0a <OsIf_GetElapsed>
     97a:	4602      	mov	r2, r0
     97c:	9b05      	ldr	r3, [sp, #20]
     97e:	4413      	add	r3, r2
     980:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     982:	9a05      	ldr	r2, [sp, #20]
     984:	9b04      	ldr	r3, [sp, #16]
     986:	429a      	cmp	r2, r3
     988:	d3f2      	bcc.n	970 <Delay+0x28>
     98a:	bf00      	nop
     98c:	bf00      	nop
     98e:	b007      	add	sp, #28
     990:	f85d fb04 	ldr.w	pc, [sp], #4

00000994 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     994:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     996:	f3ef 8310 	mrs	r3, PRIMASK
     99a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     99c:	4623      	mov	r3, r4
}
     99e:	4618      	mov	r0, r3
     9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
     9a4:	4770      	bx	lr

000009a6 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     9a6:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9a8:	f3ef 8310 	mrs	r3, PRIMASK
     9ac:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9ae:	4623      	mov	r3, r4
}
     9b0:	4618      	mov	r0, r3
     9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
     9b6:	4770      	bx	lr

000009b8 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     9b8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     9ba:	f3ef 8310 	mrs	r3, PRIMASK
     9be:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     9c0:	4623      	mov	r3, r4
}
     9c2:	4618      	mov	r0, r3
     9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9c8:	4770      	bx	lr
	...

000009cc <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     9cc:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     9ce:	2300      	movs	r3, #0
     9d0:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     9d2:	2300      	movs	r3, #0
     9d4:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     9d6:	2300      	movs	r3, #0
     9d8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     9da:	2300      	movs	r3, #0
     9dc:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     9de:	4b44      	ldr	r3, [pc, #272]	; (af0 <init_data_bss+0x124>)
     9e0:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     9e2:	4b44      	ldr	r3, [pc, #272]	; (af4 <init_data_bss+0x128>)
     9e4:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     9e6:	9b05      	ldr	r3, [sp, #20]
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     9ec:	9b05      	ldr	r3, [sp, #20]
     9ee:	3304      	adds	r3, #4
     9f0:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     9f2:	9b05      	ldr	r3, [sp, #20]
     9f4:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     9f6:	2300      	movs	r3, #0
     9f8:	9309      	str	r3, [sp, #36]	; 0x24
     9fa:	e03d      	b.n	a78 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9fe:	4613      	mov	r3, r2
     a00:	005b      	lsls	r3, r3, #1
     a02:	4413      	add	r3, r2
     a04:	009b      	lsls	r3, r3, #2
     a06:	461a      	mov	r2, r3
     a08:	9b03      	ldr	r3, [sp, #12]
     a0a:	4413      	add	r3, r2
     a0c:	685b      	ldr	r3, [r3, #4]
     a0e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a12:	4613      	mov	r3, r2
     a14:	005b      	lsls	r3, r3, #1
     a16:	4413      	add	r3, r2
     a18:	009b      	lsls	r3, r3, #2
     a1a:	461a      	mov	r2, r3
     a1c:	9b03      	ldr	r3, [sp, #12]
     a1e:	4413      	add	r3, r2
     a20:	681b      	ldr	r3, [r3, #0]
     a22:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a26:	4613      	mov	r3, r2
     a28:	005b      	lsls	r3, r3, #1
     a2a:	4413      	add	r3, r2
     a2c:	009b      	lsls	r3, r3, #2
     a2e:	461a      	mov	r2, r3
     a30:	9b03      	ldr	r3, [sp, #12]
     a32:	4413      	add	r3, r2
     a34:	689b      	ldr	r3, [r3, #8]
     a36:	4619      	mov	r1, r3
     a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a3a:	4613      	mov	r3, r2
     a3c:	005b      	lsls	r3, r3, #1
     a3e:	4413      	add	r3, r2
     a40:	009b      	lsls	r3, r3, #2
     a42:	461a      	mov	r2, r3
     a44:	9b03      	ldr	r3, [sp, #12]
     a46:	4413      	add	r3, r2
     a48:	685b      	ldr	r3, [r3, #4]
     a4a:	1acb      	subs	r3, r1, r3
     a4c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     a4e:	2300      	movs	r3, #0
     a50:	9308      	str	r3, [sp, #32]
     a52:	e00a      	b.n	a6a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     a54:	9a00      	ldr	r2, [sp, #0]
     a56:	9b08      	ldr	r3, [sp, #32]
     a58:	441a      	add	r2, r3
     a5a:	9901      	ldr	r1, [sp, #4]
     a5c:	9b08      	ldr	r3, [sp, #32]
     a5e:	440b      	add	r3, r1
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     a64:	9b08      	ldr	r3, [sp, #32]
     a66:	3301      	adds	r3, #1
     a68:	9308      	str	r3, [sp, #32]
     a6a:	9a08      	ldr	r2, [sp, #32]
     a6c:	9b06      	ldr	r3, [sp, #24]
     a6e:	429a      	cmp	r2, r3
     a70:	d3f0      	bcc.n	a54 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a74:	3301      	adds	r3, #1
     a76:	9309      	str	r3, [sp, #36]	; 0x24
     a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a7a:	9b07      	ldr	r3, [sp, #28]
     a7c:	429a      	cmp	r2, r3
     a7e:	d3bd      	bcc.n	9fc <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     a80:	9b04      	ldr	r3, [sp, #16]
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     a86:	9b04      	ldr	r3, [sp, #16]
     a88:	3304      	adds	r3, #4
     a8a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     a8c:	9b04      	ldr	r3, [sp, #16]
     a8e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     a90:	2300      	movs	r3, #0
     a92:	9309      	str	r3, [sp, #36]	; 0x24
     a94:	e024      	b.n	ae0 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a98:	00db      	lsls	r3, r3, #3
     a9a:	9a02      	ldr	r2, [sp, #8]
     a9c:	4413      	add	r3, r2
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     aa4:	00db      	lsls	r3, r3, #3
     aa6:	9a02      	ldr	r2, [sp, #8]
     aa8:	4413      	add	r3, r2
     aaa:	685b      	ldr	r3, [r3, #4]
     aac:	4619      	mov	r1, r3
     aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ab0:	00db      	lsls	r3, r3, #3
     ab2:	9a02      	ldr	r2, [sp, #8]
     ab4:	4413      	add	r3, r2
     ab6:	681b      	ldr	r3, [r3, #0]
     ab8:	1acb      	subs	r3, r1, r3
     aba:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     abc:	2300      	movs	r3, #0
     abe:	9308      	str	r3, [sp, #32]
     ac0:	e007      	b.n	ad2 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     ac2:	9a01      	ldr	r2, [sp, #4]
     ac4:	9b08      	ldr	r3, [sp, #32]
     ac6:	4413      	add	r3, r2
     ac8:	2200      	movs	r2, #0
     aca:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     acc:	9b08      	ldr	r3, [sp, #32]
     ace:	3301      	adds	r3, #1
     ad0:	9308      	str	r3, [sp, #32]
     ad2:	9a08      	ldr	r2, [sp, #32]
     ad4:	9b06      	ldr	r3, [sp, #24]
     ad6:	429a      	cmp	r2, r3
     ad8:	d3f3      	bcc.n	ac2 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
     adc:	3301      	adds	r3, #1
     ade:	9309      	str	r3, [sp, #36]	; 0x24
     ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae2:	9b07      	ldr	r3, [sp, #28]
     ae4:	429a      	cmp	r2, r3
     ae6:	d3d6      	bcc.n	a96 <init_data_bss+0xca>
        }
    }
}
     ae8:	bf00      	nop
     aea:	bf00      	nop
     aec:	b00a      	add	sp, #40	; 0x28
     aee:	4770      	bx	lr
     af0:	00010ef0 	.word	0x00010ef0
     af4:	00010f0c 	.word	0x00010f0c

00000af8 <sys_m4_cache_init>:
{
     af8:	b084      	sub	sp, #16
     afa:	4603      	mov	r3, r0
     afc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b00:	2300      	movs	r3, #0
     b02:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d118      	bne.n	b40 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b0e:	4b10      	ldr	r3, [pc, #64]	; (b50 <sys_m4_cache_init+0x58>)
     b10:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b14:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b16:	4b0e      	ldr	r3, [pc, #56]	; (b50 <sys_m4_cache_init+0x58>)
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	4a0d      	ldr	r2, [pc, #52]	; (b50 <sys_m4_cache_init+0x58>)
     b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b20:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b22:	bf00      	nop
     b24:	4b0a      	ldr	r3, [pc, #40]	; (b50 <sys_m4_cache_init+0x58>)
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b30:	d0f8      	beq.n	b24 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b32:	4b07      	ldr	r3, [pc, #28]	; (b50 <sys_m4_cache_init+0x58>)
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	4a06      	ldr	r2, [pc, #24]	; (b50 <sys_m4_cache_init+0x58>)
     b38:	f043 0301 	orr.w	r3, r3, #1
     b3c:	6013      	str	r3, [r2, #0]
     b3e:	e002      	b.n	b46 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     b40:	2301      	movs	r3, #1
     b42:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     b46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b4a:	4618      	mov	r0, r3
     b4c:	b004      	add	sp, #16
     b4e:	4770      	bx	lr
     b50:	e0082000 	.word	0xe0082000

00000b54 <startup_go_to_user_mode>:
}
     b54:	bf00      	nop
     b56:	4770      	bx	lr

00000b58 <Sys_GetCoreID>:
    return 0U;
     b58:	2300      	movs	r3, #0
}
     b5a:	4618      	mov	r0, r3
     b5c:	4770      	bx	lr

00000b5e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     b5e:	e7fe      	b.n	b5e <HardFault_Handler>

00000b60 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     b60:	e7fe      	b.n	b60 <MemManage_Handler>

00000b62 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     b62:	e7fe      	b.n	b62 <BusFault_Handler>

00000b64 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     b64:	e7fe      	b.n	b64 <UsageFault_Handler>

00000b66 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     b66:	e7fe      	b.n	b66 <SVC_Handler>

00000b68 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     b68:	e7fe      	b.n	b68 <DebugMon_Handler>

00000b6a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     b6a:	e7fe      	b.n	b6a <PendSV_Handler>

00000b6c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     b6c:	e7fe      	b.n	b6c <SysTick_Handler>

00000b6e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     b6e:	e7fe      	b.n	b6e <undefined_handler>

00000b70 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     b70:	b500      	push	{lr}
     b72:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     b74:	4b26      	ldr	r3, [pc, #152]	; (c10 <__BSS_SRAM_SIZE+0x90>)
     b76:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     b78:	22a8      	movs	r2, #168	; 0xa8
     b7a:	2100      	movs	r1, #0
     b7c:	9800      	ldr	r0, [sp, #0]
     b7e:	f000 fd13 	bl	15a8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     b82:	9b00      	ldr	r3, [sp, #0]
     b84:	2203      	movs	r2, #3
     b86:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     b88:	9b00      	ldr	r3, [sp, #0]
     b8a:	2203      	movs	r2, #3
     b8c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     b8e:	9b00      	ldr	r3, [sp, #0]
     b90:	4a20      	ldr	r2, [pc, #128]	; (c14 <__BSS_SRAM_SIZE+0x94>)
     b92:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     b94:	9b00      	ldr	r3, [sp, #0]
     b96:	4a20      	ldr	r2, [pc, #128]	; (c18 <__BSS_SRAM_SIZE+0x98>)
     b98:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     b9a:	9b00      	ldr	r3, [sp, #0]
     b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ba0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     ba2:	9b00      	ldr	r3, [sp, #0]
     ba4:	2200      	movs	r2, #0
     ba6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     ba8:	9b00      	ldr	r3, [sp, #0]
     baa:	2200      	movs	r2, #0
     bac:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bae:	9b00      	ldr	r3, [sp, #0]
     bb0:	2200      	movs	r2, #0
     bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     bb4:	9b00      	ldr	r3, [sp, #0]
     bb6:	4a17      	ldr	r2, [pc, #92]	; (c14 <__BSS_SRAM_SIZE+0x94>)
     bb8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     bba:	9b00      	ldr	r3, [sp, #0]
     bbc:	4a17      	ldr	r2, [pc, #92]	; (c1c <__BSS_SRAM_SIZE+0x9c>)
     bbe:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     bc0:	9b00      	ldr	r3, [sp, #0]
     bc2:	2210      	movs	r2, #16
     bc4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     bc6:	9b00      	ldr	r3, [sp, #0]
     bc8:	2200      	movs	r2, #0
     bca:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     bcc:	9b00      	ldr	r3, [sp, #0]
     bce:	2200      	movs	r2, #0
     bd0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     bd2:	9b00      	ldr	r3, [sp, #0]
     bd4:	2200      	movs	r2, #0
     bd6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     bd8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     bdc:	2300      	movs	r3, #0
     bde:	9301      	str	r3, [sp, #4]
     be0:	e00c      	b.n	bfc <__BSS_SRAM_SIZE+0x7c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     be2:	9b01      	ldr	r3, [sp, #4]
     be4:	f1c3 030f 	rsb	r3, r3, #15
     be8:	4a0d      	ldr	r2, [pc, #52]	; (c20 <__BSS_SRAM_SIZE+0xa0>)
     bea:	5cd1      	ldrb	r1, [r2, r3]
     bec:	9a00      	ldr	r2, [sp, #0]
     bee:	9b01      	ldr	r3, [sp, #4]
     bf0:	4413      	add	r3, r2
     bf2:	460a      	mov	r2, r1
     bf4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     bf6:	9b01      	ldr	r3, [sp, #4]
     bf8:	3301      	adds	r3, #1
     bfa:	9301      	str	r3, [sp, #4]
     bfc:	9b01      	ldr	r3, [sp, #4]
     bfe:	2b0f      	cmp	r3, #15
     c00:	d9ef      	bls.n	be2 <__BSS_SRAM_SIZE+0x62>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c02:	f3bf 8f5f 	dmb	sy
}
     c06:	bf00      	nop
     c08:	b003      	add	sp, #12
     c0a:	f85d fb04 	ldr.w	pc, [sp], #4
     c0e:	bf00      	nop
     c10:	1fff91f0 	.word	0x1fff91f0
     c14:	00010074 	.word	0x00010074
     c18:	1fff9298 	.word	0x1fff9298
     c1c:	1fff9698 	.word	0x1fff9698
     c20:	00010ecc 	.word	0x00010ecc

00000c24 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     c24:	b500      	push	{lr}
     c26:	b08b      	sub	sp, #44	; 0x2c
     c28:	9003      	str	r0, [sp, #12]
     c2a:	9102      	str	r1, [sp, #8]
     c2c:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     c2e:	2300      	movs	r3, #0
     c30:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     c32:	9b03      	ldr	r3, [sp, #12]
     c34:	68db      	ldr	r3, [r3, #12]
     c36:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     c38:	9b03      	ldr	r3, [sp, #12]
     c3a:	691b      	ldr	r3, [r3, #16]
     c3c:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     c3e:	9a06      	ldr	r2, [sp, #24]
     c40:	9b07      	ldr	r3, [sp, #28]
     c42:	429a      	cmp	r2, r3
     c44:	d905      	bls.n	c52 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     c46:	9a06      	ldr	r2, [sp, #24]
     c48:	9b07      	ldr	r3, [sp, #28]
     c4a:	1ad3      	subs	r3, r2, r3
     c4c:	3b01      	subs	r3, #1
     c4e:	9309      	str	r3, [sp, #36]	; 0x24
     c50:	e007      	b.n	c62 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     c52:	9b03      	ldr	r3, [sp, #12]
     c54:	689a      	ldr	r2, [r3, #8]
     c56:	9906      	ldr	r1, [sp, #24]
     c58:	9b07      	ldr	r3, [sp, #28]
     c5a:	1acb      	subs	r3, r1, r3
     c5c:	4413      	add	r3, r2
     c5e:	3b01      	subs	r3, #1
     c60:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     c62:	9b03      	ldr	r3, [sp, #12]
     c64:	689a      	ldr	r2, [r3, #8]
     c66:	9b07      	ldr	r3, [sp, #28]
     c68:	1ad3      	subs	r3, r2, r3
     c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c6c:	4293      	cmp	r3, r2
     c6e:	bf28      	it	cs
     c70:	4613      	movcs	r3, r2
     c72:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c76:	9b01      	ldr	r3, [sp, #4]
     c78:	4293      	cmp	r3, r2
     c7a:	bf28      	it	cs
     c7c:	4613      	movcs	r3, r2
     c7e:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     c80:	9b03      	ldr	r3, [sp, #12]
     c82:	685a      	ldr	r2, [r3, #4]
     c84:	9b07      	ldr	r3, [sp, #28]
     c86:	4413      	add	r3, r2
     c88:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     c8c:	9902      	ldr	r1, [sp, #8]
     c8e:	9805      	ldr	r0, [sp, #20]
     c90:	f000 fc7c 	bl	158c <memcpy>
    NumBytesWritten += NumBytesToWrite;
     c94:	9a08      	ldr	r2, [sp, #32]
     c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c98:	4413      	add	r3, r2
     c9a:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     c9c:	9a02      	ldr	r2, [sp, #8]
     c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca0:	4413      	add	r3, r2
     ca2:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     ca4:	9a01      	ldr	r2, [sp, #4]
     ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca8:	1ad3      	subs	r3, r2, r3
     caa:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     cac:	9a07      	ldr	r2, [sp, #28]
     cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cb0:	4413      	add	r3, r2
     cb2:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     cb4:	9b03      	ldr	r3, [sp, #12]
     cb6:	689b      	ldr	r3, [r3, #8]
     cb8:	9a07      	ldr	r2, [sp, #28]
     cba:	429a      	cmp	r2, r3
     cbc:	d101      	bne.n	cc2 <_WriteBlocking+0x9e>
      WrOff = 0u;
     cbe:	2300      	movs	r3, #0
     cc0:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     cc2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     cc6:	9b03      	ldr	r3, [sp, #12]
     cc8:	9a07      	ldr	r2, [sp, #28]
     cca:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     ccc:	9b01      	ldr	r3, [sp, #4]
     cce:	2b00      	cmp	r3, #0
     cd0:	d1b2      	bne.n	c38 <_WriteBlocking+0x14>
  return NumBytesWritten;
     cd2:	9b08      	ldr	r3, [sp, #32]
}
     cd4:	4618      	mov	r0, r3
     cd6:	b00b      	add	sp, #44	; 0x2c
     cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00000cdc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     cdc:	b500      	push	{lr}
     cde:	b089      	sub	sp, #36	; 0x24
     ce0:	9003      	str	r0, [sp, #12]
     ce2:	9102      	str	r1, [sp, #8]
     ce4:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     ce6:	9b03      	ldr	r3, [sp, #12]
     ce8:	68db      	ldr	r3, [r3, #12]
     cea:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     cec:	9b03      	ldr	r3, [sp, #12]
     cee:	689a      	ldr	r2, [r3, #8]
     cf0:	9b07      	ldr	r3, [sp, #28]
     cf2:	1ad3      	subs	r3, r2, r3
     cf4:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     cf6:	9a06      	ldr	r2, [sp, #24]
     cf8:	9b01      	ldr	r3, [sp, #4]
     cfa:	429a      	cmp	r2, r3
     cfc:	d911      	bls.n	d22 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     cfe:	9b03      	ldr	r3, [sp, #12]
     d00:	685a      	ldr	r2, [r3, #4]
     d02:	9b07      	ldr	r3, [sp, #28]
     d04:	4413      	add	r3, r2
     d06:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     d08:	9a01      	ldr	r2, [sp, #4]
     d0a:	9902      	ldr	r1, [sp, #8]
     d0c:	9804      	ldr	r0, [sp, #16]
     d0e:	f000 fc3d 	bl	158c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d12:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     d16:	9a07      	ldr	r2, [sp, #28]
     d18:	9b01      	ldr	r3, [sp, #4]
     d1a:	441a      	add	r2, r3
     d1c:	9b03      	ldr	r3, [sp, #12]
     d1e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     d20:	e01f      	b.n	d62 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     d22:	9b06      	ldr	r3, [sp, #24]
     d24:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d26:	9b03      	ldr	r3, [sp, #12]
     d28:	685a      	ldr	r2, [r3, #4]
     d2a:	9b07      	ldr	r3, [sp, #28]
     d2c:	4413      	add	r3, r2
     d2e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     d30:	9a05      	ldr	r2, [sp, #20]
     d32:	9902      	ldr	r1, [sp, #8]
     d34:	9804      	ldr	r0, [sp, #16]
     d36:	f000 fc29 	bl	158c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     d3a:	9a01      	ldr	r2, [sp, #4]
     d3c:	9b06      	ldr	r3, [sp, #24]
     d3e:	1ad3      	subs	r3, r2, r3
     d40:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     d42:	9b03      	ldr	r3, [sp, #12]
     d44:	685b      	ldr	r3, [r3, #4]
     d46:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     d48:	9a02      	ldr	r2, [sp, #8]
     d4a:	9b06      	ldr	r3, [sp, #24]
     d4c:	4413      	add	r3, r2
     d4e:	9a05      	ldr	r2, [sp, #20]
     d50:	4619      	mov	r1, r3
     d52:	9804      	ldr	r0, [sp, #16]
     d54:	f000 fc1a 	bl	158c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d58:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     d5c:	9b03      	ldr	r3, [sp, #12]
     d5e:	9a05      	ldr	r2, [sp, #20]
     d60:	60da      	str	r2, [r3, #12]
}
     d62:	bf00      	nop
     d64:	b009      	add	sp, #36	; 0x24
     d66:	f85d fb04 	ldr.w	pc, [sp], #4

00000d6a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     d6a:	b086      	sub	sp, #24
     d6c:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     d6e:	9b01      	ldr	r3, [sp, #4]
     d70:	691b      	ldr	r3, [r3, #16]
     d72:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     d74:	9b01      	ldr	r3, [sp, #4]
     d76:	68db      	ldr	r3, [r3, #12]
     d78:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     d7a:	9a04      	ldr	r2, [sp, #16]
     d7c:	9b03      	ldr	r3, [sp, #12]
     d7e:	429a      	cmp	r2, r3
     d80:	d808      	bhi.n	d94 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     d82:	9b01      	ldr	r3, [sp, #4]
     d84:	689a      	ldr	r2, [r3, #8]
     d86:	9b03      	ldr	r3, [sp, #12]
     d88:	1ad2      	subs	r2, r2, r3
     d8a:	9b04      	ldr	r3, [sp, #16]
     d8c:	4413      	add	r3, r2
     d8e:	3b01      	subs	r3, #1
     d90:	9305      	str	r3, [sp, #20]
     d92:	e004      	b.n	d9e <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     d94:	9a04      	ldr	r2, [sp, #16]
     d96:	9b03      	ldr	r3, [sp, #12]
     d98:	1ad3      	subs	r3, r2, r3
     d9a:	3b01      	subs	r3, #1
     d9c:	9305      	str	r3, [sp, #20]
  }
  return r;
     d9e:	9b05      	ldr	r3, [sp, #20]
}
     da0:	4618      	mov	r0, r3
     da2:	b006      	add	sp, #24
     da4:	4770      	bx	lr
	...

00000da8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     da8:	b500      	push	{lr}
     daa:	b089      	sub	sp, #36	; 0x24
     dac:	9003      	str	r0, [sp, #12]
     dae:	9102      	str	r1, [sp, #8]
     db0:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     db2:	9b02      	ldr	r3, [sp, #8]
     db4:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     db6:	9b03      	ldr	r3, [sp, #12]
     db8:	1c5a      	adds	r2, r3, #1
     dba:	4613      	mov	r3, r2
     dbc:	005b      	lsls	r3, r3, #1
     dbe:	4413      	add	r3, r2
     dc0:	00db      	lsls	r3, r3, #3
     dc2:	4a20      	ldr	r2, [pc, #128]	; (e44 <SEGGER_RTT_WriteNoLock+0x9c>)
     dc4:	4413      	add	r3, r2
     dc6:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     dc8:	9b05      	ldr	r3, [sp, #20]
     dca:	695b      	ldr	r3, [r3, #20]
     dcc:	2b02      	cmp	r3, #2
     dce:	d029      	beq.n	e24 <SEGGER_RTT_WriteNoLock+0x7c>
     dd0:	2b02      	cmp	r3, #2
     dd2:	d82e      	bhi.n	e32 <SEGGER_RTT_WriteNoLock+0x8a>
     dd4:	2b00      	cmp	r3, #0
     dd6:	d002      	beq.n	dde <SEGGER_RTT_WriteNoLock+0x36>
     dd8:	2b01      	cmp	r3, #1
     dda:	d013      	beq.n	e04 <SEGGER_RTT_WriteNoLock+0x5c>
     ddc:	e029      	b.n	e32 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     dde:	9805      	ldr	r0, [sp, #20]
     de0:	f7ff ffc3 	bl	d6a <_GetAvailWriteSpace>
     de4:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     de6:	9a04      	ldr	r2, [sp, #16]
     de8:	9b01      	ldr	r3, [sp, #4]
     dea:	429a      	cmp	r2, r3
     dec:	d202      	bcs.n	df4 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     dee:	2300      	movs	r3, #0
     df0:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     df2:	e021      	b.n	e38 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     df4:	9b01      	ldr	r3, [sp, #4]
     df6:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     df8:	9a01      	ldr	r2, [sp, #4]
     dfa:	9906      	ldr	r1, [sp, #24]
     dfc:	9805      	ldr	r0, [sp, #20]
     dfe:	f7ff ff6d 	bl	cdc <_WriteNoCheck>
    break;
     e02:	e019      	b.n	e38 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e04:	9805      	ldr	r0, [sp, #20]
     e06:	f7ff ffb0 	bl	d6a <_GetAvailWriteSpace>
     e0a:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     e0c:	9a01      	ldr	r2, [sp, #4]
     e0e:	9b04      	ldr	r3, [sp, #16]
     e10:	4293      	cmp	r3, r2
     e12:	bf28      	it	cs
     e14:	4613      	movcs	r3, r2
     e16:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     e18:	9a07      	ldr	r2, [sp, #28]
     e1a:	9906      	ldr	r1, [sp, #24]
     e1c:	9805      	ldr	r0, [sp, #20]
     e1e:	f7ff ff5d 	bl	cdc <_WriteNoCheck>
    break;
     e22:	e009      	b.n	e38 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     e24:	9a01      	ldr	r2, [sp, #4]
     e26:	9906      	ldr	r1, [sp, #24]
     e28:	9805      	ldr	r0, [sp, #20]
     e2a:	f7ff fefb 	bl	c24 <_WriteBlocking>
     e2e:	9007      	str	r0, [sp, #28]
    break;
     e30:	e002      	b.n	e38 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     e32:	2300      	movs	r3, #0
     e34:	9307      	str	r3, [sp, #28]
    break;
     e36:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     e38:	9b07      	ldr	r3, [sp, #28]
}
     e3a:	4618      	mov	r0, r3
     e3c:	b009      	add	sp, #36	; 0x24
     e3e:	f85d fb04 	ldr.w	pc, [sp], #4
     e42:	bf00      	nop
     e44:	1fff91f0 	.word	0x1fff91f0

00000e48 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e48:	b500      	push	{lr}
     e4a:	b089      	sub	sp, #36	; 0x24
     e4c:	9003      	str	r0, [sp, #12]
     e4e:	9102      	str	r1, [sp, #8]
     e50:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     e52:	4b0f      	ldr	r3, [pc, #60]	; (e90 <SEGGER_RTT_Write+0x48>)
     e54:	9307      	str	r3, [sp, #28]
     e56:	9b07      	ldr	r3, [sp, #28]
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	b2db      	uxtb	r3, r3
     e5c:	2b53      	cmp	r3, #83	; 0x53
     e5e:	d001      	beq.n	e64 <SEGGER_RTT_Write+0x1c>
     e60:	f7ff fe86 	bl	b70 <_DoInit>
  SEGGER_RTT_LOCK();
     e64:	f3ef 8311 	mrs	r3, BASEPRI
     e68:	f04f 0120 	mov.w	r1, #32
     e6c:	f381 8811 	msr	BASEPRI, r1
     e70:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     e72:	9a01      	ldr	r2, [sp, #4]
     e74:	9902      	ldr	r1, [sp, #8]
     e76:	9803      	ldr	r0, [sp, #12]
     e78:	f7ff ff96 	bl	da8 <SEGGER_RTT_WriteNoLock>
     e7c:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     e7e:	9b06      	ldr	r3, [sp, #24]
     e80:	f383 8811 	msr	BASEPRI, r3
  return Status;
     e84:	9b05      	ldr	r3, [sp, #20]
}
     e86:	4618      	mov	r0, r3
     e88:	b009      	add	sp, #36	; 0x24
     e8a:	f85d fb04 	ldr.w	pc, [sp], #4
     e8e:	bf00      	nop
     e90:	1fff91f0 	.word	0x1fff91f0

00000e94 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     e94:	b508      	push	{r3, lr}
  _DoInit();
     e96:	f7ff fe6b 	bl	b70 <_DoInit>
}
     e9a:	bf00      	nop
     e9c:	bd08      	pop	{r3, pc}

00000e9e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     e9e:	b500      	push	{lr}
     ea0:	b085      	sub	sp, #20
     ea2:	9001      	str	r0, [sp, #4]
     ea4:	460b      	mov	r3, r1
     ea6:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     eaa:	9b01      	ldr	r3, [sp, #4]
     eac:	689b      	ldr	r3, [r3, #8]
     eae:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     eb0:	9b03      	ldr	r3, [sp, #12]
     eb2:	1c5a      	adds	r2, r3, #1
     eb4:	9b01      	ldr	r3, [sp, #4]
     eb6:	685b      	ldr	r3, [r3, #4]
     eb8:	429a      	cmp	r2, r3
     eba:	d80f      	bhi.n	edc <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     ebc:	9b01      	ldr	r3, [sp, #4]
     ebe:	681a      	ldr	r2, [r3, #0]
     ec0:	9b03      	ldr	r3, [sp, #12]
     ec2:	4413      	add	r3, r2
     ec4:	f89d 2003 	ldrb.w	r2, [sp, #3]
     ec8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     eca:	9b03      	ldr	r3, [sp, #12]
     ecc:	1c5a      	adds	r2, r3, #1
     ece:	9b01      	ldr	r3, [sp, #4]
     ed0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     ed2:	9b01      	ldr	r3, [sp, #4]
     ed4:	68db      	ldr	r3, [r3, #12]
     ed6:	1c5a      	adds	r2, r3, #1
     ed8:	9b01      	ldr	r3, [sp, #4]
     eda:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     edc:	9b01      	ldr	r3, [sp, #4]
     ede:	689a      	ldr	r2, [r3, #8]
     ee0:	9b01      	ldr	r3, [sp, #4]
     ee2:	685b      	ldr	r3, [r3, #4]
     ee4:	429a      	cmp	r2, r3
     ee6:	d115      	bne.n	f14 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     ee8:	9b01      	ldr	r3, [sp, #4]
     eea:	6918      	ldr	r0, [r3, #16]
     eec:	9b01      	ldr	r3, [sp, #4]
     eee:	6819      	ldr	r1, [r3, #0]
     ef0:	9b01      	ldr	r3, [sp, #4]
     ef2:	689b      	ldr	r3, [r3, #8]
     ef4:	461a      	mov	r2, r3
     ef6:	f7ff ffa7 	bl	e48 <SEGGER_RTT_Write>
     efa:	4602      	mov	r2, r0
     efc:	9b01      	ldr	r3, [sp, #4]
     efe:	689b      	ldr	r3, [r3, #8]
     f00:	429a      	cmp	r2, r3
     f02:	d004      	beq.n	f0e <_StoreChar+0x70>
      p->ReturnValue = -1;
     f04:	9b01      	ldr	r3, [sp, #4]
     f06:	f04f 32ff 	mov.w	r2, #4294967295
     f0a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     f0c:	e002      	b.n	f14 <_StoreChar+0x76>
      p->Cnt = 0u;
     f0e:	9b01      	ldr	r3, [sp, #4]
     f10:	2200      	movs	r2, #0
     f12:	609a      	str	r2, [r3, #8]
}
     f14:	bf00      	nop
     f16:	b005      	add	sp, #20
     f18:	f85d fb04 	ldr.w	pc, [sp], #4

00000f1c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     f1c:	b500      	push	{lr}
     f1e:	b08b      	sub	sp, #44	; 0x2c
     f20:	9003      	str	r0, [sp, #12]
     f22:	9102      	str	r1, [sp, #8]
     f24:	9201      	str	r2, [sp, #4]
     f26:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     f28:	9b02      	ldr	r3, [sp, #8]
     f2a:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     f2c:	2301      	movs	r3, #1
     f2e:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     f30:	2301      	movs	r3, #1
     f32:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f34:	e007      	b.n	f46 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     f36:	9a08      	ldr	r2, [sp, #32]
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	fbb2 f3f3 	udiv	r3, r2, r3
     f3e:	9308      	str	r3, [sp, #32]
    Width++;
     f40:	9b07      	ldr	r3, [sp, #28]
     f42:	3301      	adds	r3, #1
     f44:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     f46:	9a08      	ldr	r2, [sp, #32]
     f48:	9b01      	ldr	r3, [sp, #4]
     f4a:	429a      	cmp	r2, r3
     f4c:	d2f3      	bcs.n	f36 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     f4e:	9a00      	ldr	r2, [sp, #0]
     f50:	9b07      	ldr	r3, [sp, #28]
     f52:	429a      	cmp	r2, r3
     f54:	d901      	bls.n	f5a <_PrintUnsigned+0x3e>
    Width = NumDigits;
     f56:	9b00      	ldr	r3, [sp, #0]
     f58:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
     f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f5c:	f003 0301 	and.w	r3, r3, #1
     f60:	2b00      	cmp	r3, #0
     f62:	d128      	bne.n	fb6 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
     f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f66:	2b00      	cmp	r3, #0
     f68:	d025      	beq.n	fb6 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
     f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     f6c:	f003 0302 	and.w	r3, r3, #2
     f70:	2b00      	cmp	r3, #0
     f72:	d006      	beq.n	f82 <_PrintUnsigned+0x66>
     f74:	9b00      	ldr	r3, [sp, #0]
     f76:	2b00      	cmp	r3, #0
     f78:	d103      	bne.n	f82 <_PrintUnsigned+0x66>
        c = '0';
     f7a:	2330      	movs	r3, #48	; 0x30
     f7c:	f88d 301b 	strb.w	r3, [sp, #27]
     f80:	e002      	b.n	f88 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
     f82:	2320      	movs	r3, #32
     f84:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     f88:	e00c      	b.n	fa4 <_PrintUnsigned+0x88>
        FieldWidth--;
     f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f8c:	3b01      	subs	r3, #1
     f8e:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
     f90:	f89d 301b 	ldrb.w	r3, [sp, #27]
     f94:	4619      	mov	r1, r3
     f96:	9803      	ldr	r0, [sp, #12]
     f98:	f7ff ff81 	bl	e9e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
     f9c:	9b03      	ldr	r3, [sp, #12]
     f9e:	68db      	ldr	r3, [r3, #12]
     fa0:	2b00      	cmp	r3, #0
     fa2:	db07      	blt.n	fb4 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
     fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fa6:	2b00      	cmp	r3, #0
     fa8:	d005      	beq.n	fb6 <_PrintUnsigned+0x9a>
     faa:	9a07      	ldr	r2, [sp, #28]
     fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fae:	429a      	cmp	r2, r3
     fb0:	d3eb      	bcc.n	f8a <_PrintUnsigned+0x6e>
     fb2:	e000      	b.n	fb6 <_PrintUnsigned+0x9a>
          break;
     fb4:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
     fb6:	9b03      	ldr	r3, [sp, #12]
     fb8:	68db      	ldr	r3, [r3, #12]
     fba:	2b00      	cmp	r3, #0
     fbc:	db55      	blt.n	106a <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     fbe:	9b00      	ldr	r3, [sp, #0]
     fc0:	2b01      	cmp	r3, #1
     fc2:	d903      	bls.n	fcc <_PrintUnsigned+0xb0>
        NumDigits--;
     fc4:	9b00      	ldr	r3, [sp, #0]
     fc6:	3b01      	subs	r3, #1
     fc8:	9300      	str	r3, [sp, #0]
     fca:	e009      	b.n	fe0 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
     fcc:	9a02      	ldr	r2, [sp, #8]
     fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fd0:	fbb2 f3f3 	udiv	r3, r2, r3
     fd4:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
     fd6:	9a05      	ldr	r2, [sp, #20]
     fd8:	9b01      	ldr	r3, [sp, #4]
     fda:	429a      	cmp	r2, r3
     fdc:	d200      	bcs.n	fe0 <_PrintUnsigned+0xc4>
          break;
     fde:	e005      	b.n	fec <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
     fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe2:	9a01      	ldr	r2, [sp, #4]
     fe4:	fb02 f303 	mul.w	r3, r2, r3
     fe8:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
     fea:	e7e8      	b.n	fbe <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
     fec:	9a02      	ldr	r2, [sp, #8]
     fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ff0:	fbb2 f3f3 	udiv	r3, r2, r3
     ff4:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
     ff6:	9b05      	ldr	r3, [sp, #20]
     ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ffa:	fb02 f303 	mul.w	r3, r2, r3
     ffe:	9a02      	ldr	r2, [sp, #8]
    1000:	1ad3      	subs	r3, r2, r3
    1002:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1004:	4a1b      	ldr	r2, [pc, #108]	; (1074 <_PrintUnsigned+0x158>)
    1006:	9b05      	ldr	r3, [sp, #20]
    1008:	4413      	add	r3, r2
    100a:	781b      	ldrb	r3, [r3, #0]
    100c:	4619      	mov	r1, r3
    100e:	9803      	ldr	r0, [sp, #12]
    1010:	f7ff ff45 	bl	e9e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1014:	9b03      	ldr	r3, [sp, #12]
    1016:	68db      	ldr	r3, [r3, #12]
    1018:	2b00      	cmp	r3, #0
    101a:	db08      	blt.n	102e <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    101c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    101e:	9b01      	ldr	r3, [sp, #4]
    1020:	fbb2 f3f3 	udiv	r3, r2, r3
    1024:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1026:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1028:	2b00      	cmp	r3, #0
    102a:	d1df      	bne.n	fec <_PrintUnsigned+0xd0>
    102c:	e000      	b.n	1030 <_PrintUnsigned+0x114>
        break;
    102e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1032:	f003 0301 	and.w	r3, r3, #1
    1036:	2b00      	cmp	r3, #0
    1038:	d017      	beq.n	106a <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    103a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    103c:	2b00      	cmp	r3, #0
    103e:	d014      	beq.n	106a <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1040:	e00a      	b.n	1058 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1044:	3b01      	subs	r3, #1
    1046:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1048:	2120      	movs	r1, #32
    104a:	9803      	ldr	r0, [sp, #12]
    104c:	f7ff ff27 	bl	e9e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1050:	9b03      	ldr	r3, [sp, #12]
    1052:	68db      	ldr	r3, [r3, #12]
    1054:	2b00      	cmp	r3, #0
    1056:	db07      	blt.n	1068 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    105a:	2b00      	cmp	r3, #0
    105c:	d005      	beq.n	106a <_PrintUnsigned+0x14e>
    105e:	9a07      	ldr	r2, [sp, #28]
    1060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1062:	429a      	cmp	r2, r3
    1064:	d3ed      	bcc.n	1042 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1066:	e000      	b.n	106a <_PrintUnsigned+0x14e>
            break;
    1068:	bf00      	nop
}
    106a:	bf00      	nop
    106c:	b00b      	add	sp, #44	; 0x2c
    106e:	f85d fb04 	ldr.w	pc, [sp], #4
    1072:	bf00      	nop
    1074:	00010ee0 	.word	0x00010ee0

00001078 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1078:	b500      	push	{lr}
    107a:	b089      	sub	sp, #36	; 0x24
    107c:	9005      	str	r0, [sp, #20]
    107e:	9104      	str	r1, [sp, #16]
    1080:	9203      	str	r2, [sp, #12]
    1082:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1084:	9b04      	ldr	r3, [sp, #16]
    1086:	2b00      	cmp	r3, #0
    1088:	bfb8      	it	lt
    108a:	425b      	neglt	r3, r3
    108c:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    108e:	2301      	movs	r3, #1
    1090:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1092:	e007      	b.n	10a4 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1094:	9b03      	ldr	r3, [sp, #12]
    1096:	9a06      	ldr	r2, [sp, #24]
    1098:	fb92 f3f3 	sdiv	r3, r2, r3
    109c:	9306      	str	r3, [sp, #24]
    Width++;
    109e:	9b07      	ldr	r3, [sp, #28]
    10a0:	3301      	adds	r3, #1
    10a2:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    10a4:	9b03      	ldr	r3, [sp, #12]
    10a6:	9a06      	ldr	r2, [sp, #24]
    10a8:	429a      	cmp	r2, r3
    10aa:	daf3      	bge.n	1094 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    10ac:	9a02      	ldr	r2, [sp, #8]
    10ae:	9b07      	ldr	r3, [sp, #28]
    10b0:	429a      	cmp	r2, r3
    10b2:	d901      	bls.n	10b8 <_PrintInt+0x40>
    Width = NumDigits;
    10b4:	9b02      	ldr	r3, [sp, #8]
    10b6:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    10b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10ba:	2b00      	cmp	r3, #0
    10bc:	d00a      	beq.n	10d4 <_PrintInt+0x5c>
    10be:	9b04      	ldr	r3, [sp, #16]
    10c0:	2b00      	cmp	r3, #0
    10c2:	db04      	blt.n	10ce <_PrintInt+0x56>
    10c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10c6:	f003 0304 	and.w	r3, r3, #4
    10ca:	2b00      	cmp	r3, #0
    10cc:	d002      	beq.n	10d4 <_PrintInt+0x5c>
    FieldWidth--;
    10ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10d0:	3b01      	subs	r3, #1
    10d2:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    10d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10d6:	f003 0302 	and.w	r3, r3, #2
    10da:	2b00      	cmp	r3, #0
    10dc:	d002      	beq.n	10e4 <_PrintInt+0x6c>
    10de:	9b02      	ldr	r3, [sp, #8]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d01c      	beq.n	111e <_PrintInt+0xa6>
    10e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    10e6:	f003 0301 	and.w	r3, r3, #1
    10ea:	2b00      	cmp	r3, #0
    10ec:	d117      	bne.n	111e <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    10ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f0:	2b00      	cmp	r3, #0
    10f2:	d014      	beq.n	111e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10f4:	e00a      	b.n	110c <_PrintInt+0x94>
        FieldWidth--;
    10f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f8:	3b01      	subs	r3, #1
    10fa:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    10fc:	2120      	movs	r1, #32
    10fe:	9805      	ldr	r0, [sp, #20]
    1100:	f7ff fecd 	bl	e9e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1104:	9b05      	ldr	r3, [sp, #20]
    1106:	68db      	ldr	r3, [r3, #12]
    1108:	2b00      	cmp	r3, #0
    110a:	db07      	blt.n	111c <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    110c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    110e:	2b00      	cmp	r3, #0
    1110:	d005      	beq.n	111e <_PrintInt+0xa6>
    1112:	9a07      	ldr	r2, [sp, #28]
    1114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1116:	429a      	cmp	r2, r3
    1118:	d3ed      	bcc.n	10f6 <_PrintInt+0x7e>
    111a:	e000      	b.n	111e <_PrintInt+0xa6>
          break;
    111c:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    111e:	9b05      	ldr	r3, [sp, #20]
    1120:	68db      	ldr	r3, [r3, #12]
    1122:	2b00      	cmp	r3, #0
    1124:	db4a      	blt.n	11bc <_PrintInt+0x144>
    if (v < 0) {
    1126:	9b04      	ldr	r3, [sp, #16]
    1128:	2b00      	cmp	r3, #0
    112a:	da07      	bge.n	113c <_PrintInt+0xc4>
      v = -v;
    112c:	9b04      	ldr	r3, [sp, #16]
    112e:	425b      	negs	r3, r3
    1130:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1132:	212d      	movs	r1, #45	; 0x2d
    1134:	9805      	ldr	r0, [sp, #20]
    1136:	f7ff feb2 	bl	e9e <_StoreChar>
    113a:	e008      	b.n	114e <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    113c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    113e:	f003 0304 	and.w	r3, r3, #4
    1142:	2b00      	cmp	r3, #0
    1144:	d003      	beq.n	114e <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1146:	212b      	movs	r1, #43	; 0x2b
    1148:	9805      	ldr	r0, [sp, #20]
    114a:	f7ff fea8 	bl	e9e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    114e:	9b05      	ldr	r3, [sp, #20]
    1150:	68db      	ldr	r3, [r3, #12]
    1152:	2b00      	cmp	r3, #0
    1154:	db32      	blt.n	11bc <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1158:	f003 0302 	and.w	r3, r3, #2
    115c:	2b00      	cmp	r3, #0
    115e:	d01f      	beq.n	11a0 <_PrintInt+0x128>
    1160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1162:	f003 0301 	and.w	r3, r3, #1
    1166:	2b00      	cmp	r3, #0
    1168:	d11a      	bne.n	11a0 <_PrintInt+0x128>
    116a:	9b02      	ldr	r3, [sp, #8]
    116c:	2b00      	cmp	r3, #0
    116e:	d117      	bne.n	11a0 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1172:	2b00      	cmp	r3, #0
    1174:	d014      	beq.n	11a0 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1176:	e00a      	b.n	118e <_PrintInt+0x116>
            FieldWidth--;
    1178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    117a:	3b01      	subs	r3, #1
    117c:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    117e:	2130      	movs	r1, #48	; 0x30
    1180:	9805      	ldr	r0, [sp, #20]
    1182:	f7ff fe8c 	bl	e9e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1186:	9b05      	ldr	r3, [sp, #20]
    1188:	68db      	ldr	r3, [r3, #12]
    118a:	2b00      	cmp	r3, #0
    118c:	db07      	blt.n	119e <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    118e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1190:	2b00      	cmp	r3, #0
    1192:	d005      	beq.n	11a0 <_PrintInt+0x128>
    1194:	9a07      	ldr	r2, [sp, #28]
    1196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1198:	429a      	cmp	r2, r3
    119a:	d3ed      	bcc.n	1178 <_PrintInt+0x100>
    119c:	e000      	b.n	11a0 <_PrintInt+0x128>
              break;
    119e:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    11a0:	9b05      	ldr	r3, [sp, #20]
    11a2:	68db      	ldr	r3, [r3, #12]
    11a4:	2b00      	cmp	r3, #0
    11a6:	db09      	blt.n	11bc <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    11a8:	9904      	ldr	r1, [sp, #16]
    11aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ac:	9301      	str	r3, [sp, #4]
    11ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b0:	9300      	str	r3, [sp, #0]
    11b2:	9b02      	ldr	r3, [sp, #8]
    11b4:	9a03      	ldr	r2, [sp, #12]
    11b6:	9805      	ldr	r0, [sp, #20]
    11b8:	f7ff feb0 	bl	f1c <_PrintUnsigned>
      }
    }
  }
}
    11bc:	bf00      	nop
    11be:	b009      	add	sp, #36	; 0x24
    11c0:	f85d fb04 	ldr.w	pc, [sp], #4

000011c4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    11c4:	b500      	push	{lr}
    11c6:	b0a3      	sub	sp, #140	; 0x8c
    11c8:	9005      	str	r0, [sp, #20]
    11ca:	9104      	str	r1, [sp, #16]
    11cc:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    11ce:	ab06      	add	r3, sp, #24
    11d0:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    11d2:	2340      	movs	r3, #64	; 0x40
    11d4:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    11d6:	2300      	movs	r3, #0
    11d8:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    11da:	9b05      	ldr	r3, [sp, #20]
    11dc:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    11de:	2300      	movs	r3, #0
    11e0:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    11e2:	9b04      	ldr	r3, [sp, #16]
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    11ea:	9b04      	ldr	r3, [sp, #16]
    11ec:	3301      	adds	r3, #1
    11ee:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    11f0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    11f4:	2b00      	cmp	r3, #0
    11f6:	f000 819c 	beq.w	1532 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    11fa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    11fe:	2b25      	cmp	r3, #37	; 0x25
    1200:	f040 818b 	bne.w	151a <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1204:	2300      	movs	r3, #0
    1206:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1208:	2301      	movs	r3, #1
    120a:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    120c:	9b04      	ldr	r3, [sp, #16]
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1214:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1218:	3b23      	subs	r3, #35	; 0x23
    121a:	2b0d      	cmp	r3, #13
    121c:	d83e      	bhi.n	129c <SEGGER_RTT_vprintf+0xd8>
    121e:	a201      	add	r2, pc, #4	; (adr r2, 1224 <SEGGER_RTT_vprintf+0x60>)
    1220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1224:	0000128d 	.word	0x0000128d
    1228:	0000129d 	.word	0x0000129d
    122c:	0000129d 	.word	0x0000129d
    1230:	0000129d 	.word	0x0000129d
    1234:	0000129d 	.word	0x0000129d
    1238:	0000129d 	.word	0x0000129d
    123c:	0000129d 	.word	0x0000129d
    1240:	0000129d 	.word	0x0000129d
    1244:	0000127d 	.word	0x0000127d
    1248:	0000129d 	.word	0x0000129d
    124c:	0000125d 	.word	0x0000125d
    1250:	0000129d 	.word	0x0000129d
    1254:	0000129d 	.word	0x0000129d
    1258:	0000126d 	.word	0x0000126d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    125c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    125e:	f043 0301 	orr.w	r3, r3, #1
    1262:	931e      	str	r3, [sp, #120]	; 0x78
    1264:	9b04      	ldr	r3, [sp, #16]
    1266:	3301      	adds	r3, #1
    1268:	9304      	str	r3, [sp, #16]
    126a:	e01a      	b.n	12a2 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    126c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    126e:	f043 0302 	orr.w	r3, r3, #2
    1272:	931e      	str	r3, [sp, #120]	; 0x78
    1274:	9b04      	ldr	r3, [sp, #16]
    1276:	3301      	adds	r3, #1
    1278:	9304      	str	r3, [sp, #16]
    127a:	e012      	b.n	12a2 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    127c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    127e:	f043 0304 	orr.w	r3, r3, #4
    1282:	931e      	str	r3, [sp, #120]	; 0x78
    1284:	9b04      	ldr	r3, [sp, #16]
    1286:	3301      	adds	r3, #1
    1288:	9304      	str	r3, [sp, #16]
    128a:	e00a      	b.n	12a2 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    128c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    128e:	f043 0308 	orr.w	r3, r3, #8
    1292:	931e      	str	r3, [sp, #120]	; 0x78
    1294:	9b04      	ldr	r3, [sp, #16]
    1296:	3301      	adds	r3, #1
    1298:	9304      	str	r3, [sp, #16]
    129a:	e002      	b.n	12a2 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    129c:	2300      	movs	r3, #0
    129e:	9320      	str	r3, [sp, #128]	; 0x80
    12a0:	bf00      	nop
        }
      } while (v);
    12a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    12a4:	2b00      	cmp	r3, #0
    12a6:	d1b1      	bne.n	120c <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    12a8:	2300      	movs	r3, #0
    12aa:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    12ac:	9b04      	ldr	r3, [sp, #16]
    12ae:	781b      	ldrb	r3, [r3, #0]
    12b0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    12b4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12b8:	2b2f      	cmp	r3, #47	; 0x2f
    12ba:	d912      	bls.n	12e2 <SEGGER_RTT_vprintf+0x11e>
    12bc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12c0:	2b39      	cmp	r3, #57	; 0x39
    12c2:	d80e      	bhi.n	12e2 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    12c4:	9b04      	ldr	r3, [sp, #16]
    12c6:	3301      	adds	r3, #1
    12c8:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    12ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    12cc:	4613      	mov	r3, r2
    12ce:	009b      	lsls	r3, r3, #2
    12d0:	4413      	add	r3, r2
    12d2:	005b      	lsls	r3, r3, #1
    12d4:	461a      	mov	r2, r3
    12d6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12da:	4413      	add	r3, r2
    12dc:	3b30      	subs	r3, #48	; 0x30
    12de:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    12e0:	e7e4      	b.n	12ac <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    12e2:	2300      	movs	r3, #0
    12e4:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    12e6:	9b04      	ldr	r3, [sp, #16]
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    12ee:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12f2:	2b2e      	cmp	r3, #46	; 0x2e
    12f4:	d11d      	bne.n	1332 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    12f6:	9b04      	ldr	r3, [sp, #16]
    12f8:	3301      	adds	r3, #1
    12fa:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    12fc:	9b04      	ldr	r3, [sp, #16]
    12fe:	781b      	ldrb	r3, [r3, #0]
    1300:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1304:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1308:	2b2f      	cmp	r3, #47	; 0x2f
    130a:	d912      	bls.n	1332 <SEGGER_RTT_vprintf+0x16e>
    130c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1310:	2b39      	cmp	r3, #57	; 0x39
    1312:	d80e      	bhi.n	1332 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1314:	9b04      	ldr	r3, [sp, #16]
    1316:	3301      	adds	r3, #1
    1318:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    131a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    131c:	4613      	mov	r3, r2
    131e:	009b      	lsls	r3, r3, #2
    1320:	4413      	add	r3, r2
    1322:	005b      	lsls	r3, r3, #1
    1324:	461a      	mov	r2, r3
    1326:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    132a:	4413      	add	r3, r2
    132c:	3b30      	subs	r3, #48	; 0x30
    132e:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1330:	e7e4      	b.n	12fc <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1332:	9b04      	ldr	r3, [sp, #16]
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    133a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    133e:	2b6c      	cmp	r3, #108	; 0x6c
    1340:	d003      	beq.n	134a <SEGGER_RTT_vprintf+0x186>
    1342:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1346:	2b68      	cmp	r3, #104	; 0x68
    1348:	d107      	bne.n	135a <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    134a:	9b04      	ldr	r3, [sp, #16]
    134c:	3301      	adds	r3, #1
    134e:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1350:	9b04      	ldr	r3, [sp, #16]
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1358:	e7ef      	b.n	133a <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    135a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    135e:	2b25      	cmp	r3, #37	; 0x25
    1360:	f000 80d0 	beq.w	1504 <SEGGER_RTT_vprintf+0x340>
    1364:	2b25      	cmp	r3, #37	; 0x25
    1366:	f2c0 80d3 	blt.w	1510 <SEGGER_RTT_vprintf+0x34c>
    136a:	2b78      	cmp	r3, #120	; 0x78
    136c:	f300 80d0 	bgt.w	1510 <SEGGER_RTT_vprintf+0x34c>
    1370:	2b58      	cmp	r3, #88	; 0x58
    1372:	f2c0 80cd 	blt.w	1510 <SEGGER_RTT_vprintf+0x34c>
    1376:	3b58      	subs	r3, #88	; 0x58
    1378:	2b20      	cmp	r3, #32
    137a:	f200 80c9 	bhi.w	1510 <SEGGER_RTT_vprintf+0x34c>
    137e:	a201      	add	r2, pc, #4	; (adr r2, 1384 <SEGGER_RTT_vprintf+0x1c0>)
    1380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1384:	00001475 	.word	0x00001475
    1388:	00001511 	.word	0x00001511
    138c:	00001511 	.word	0x00001511
    1390:	00001511 	.word	0x00001511
    1394:	00001511 	.word	0x00001511
    1398:	00001511 	.word	0x00001511
    139c:	00001511 	.word	0x00001511
    13a0:	00001511 	.word	0x00001511
    13a4:	00001511 	.word	0x00001511
    13a8:	00001511 	.word	0x00001511
    13ac:	00001511 	.word	0x00001511
    13b0:	00001409 	.word	0x00001409
    13b4:	0000142d 	.word	0x0000142d
    13b8:	00001511 	.word	0x00001511
    13bc:	00001511 	.word	0x00001511
    13c0:	00001511 	.word	0x00001511
    13c4:	00001511 	.word	0x00001511
    13c8:	00001511 	.word	0x00001511
    13cc:	00001511 	.word	0x00001511
    13d0:	00001511 	.word	0x00001511
    13d4:	00001511 	.word	0x00001511
    13d8:	00001511 	.word	0x00001511
    13dc:	00001511 	.word	0x00001511
    13e0:	00001511 	.word	0x00001511
    13e4:	000014e1 	.word	0x000014e1
    13e8:	00001511 	.word	0x00001511
    13ec:	00001511 	.word	0x00001511
    13f0:	00001499 	.word	0x00001499
    13f4:	00001511 	.word	0x00001511
    13f8:	00001451 	.word	0x00001451
    13fc:	00001511 	.word	0x00001511
    1400:	00001511 	.word	0x00001511
    1404:	00001475 	.word	0x00001475
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1408:	9b03      	ldr	r3, [sp, #12]
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	1d19      	adds	r1, r3, #4
    140e:	9a03      	ldr	r2, [sp, #12]
    1410:	6011      	str	r1, [r2, #0]
    1412:	681b      	ldr	r3, [r3, #0]
    1414:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1416:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1418:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    141c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1420:	ab16      	add	r3, sp, #88	; 0x58
    1422:	4611      	mov	r1, r2
    1424:	4618      	mov	r0, r3
    1426:	f7ff fd3a 	bl	e9e <_StoreChar>
        break;
    142a:	e072      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    142c:	9b03      	ldr	r3, [sp, #12]
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	1d19      	adds	r1, r3, #4
    1432:	9a03      	ldr	r2, [sp, #12]
    1434:	6011      	str	r1, [r2, #0]
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    143a:	a816      	add	r0, sp, #88	; 0x58
    143c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    143e:	9301      	str	r3, [sp, #4]
    1440:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1442:	9300      	str	r3, [sp, #0]
    1444:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1446:	220a      	movs	r2, #10
    1448:	9920      	ldr	r1, [sp, #128]	; 0x80
    144a:	f7ff fe15 	bl	1078 <_PrintInt>
        break;
    144e:	e060      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1450:	9b03      	ldr	r3, [sp, #12]
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	1d19      	adds	r1, r3, #4
    1456:	9a03      	ldr	r2, [sp, #12]
    1458:	6011      	str	r1, [r2, #0]
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    145e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1460:	a816      	add	r0, sp, #88	; 0x58
    1462:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1464:	9301      	str	r3, [sp, #4]
    1466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1468:	9300      	str	r3, [sp, #0]
    146a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    146c:	220a      	movs	r2, #10
    146e:	f7ff fd55 	bl	f1c <_PrintUnsigned>
        break;
    1472:	e04e      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1474:	9b03      	ldr	r3, [sp, #12]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	1d19      	adds	r1, r3, #4
    147a:	9a03      	ldr	r2, [sp, #12]
    147c:	6011      	str	r1, [r2, #0]
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1482:	9920      	ldr	r1, [sp, #128]	; 0x80
    1484:	a816      	add	r0, sp, #88	; 0x58
    1486:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1488:	9301      	str	r3, [sp, #4]
    148a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    148c:	9300      	str	r3, [sp, #0]
    148e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1490:	2210      	movs	r2, #16
    1492:	f7ff fd43 	bl	f1c <_PrintUnsigned>
        break;
    1496:	e03c      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1498:	9b03      	ldr	r3, [sp, #12]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	1d19      	adds	r1, r3, #4
    149e:	9a03      	ldr	r2, [sp, #12]
    14a0:	6011      	str	r1, [r2, #0]
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    14a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14a8:	2b00      	cmp	r3, #0
    14aa:	d101      	bne.n	14b0 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    14ac:	4b2c      	ldr	r3, [pc, #176]	; (1560 <SEGGER_RTT_vprintf+0x39c>)
    14ae:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    14b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14b2:	781b      	ldrb	r3, [r3, #0]
    14b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    14b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    14ba:	3301      	adds	r3, #1
    14bc:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    14be:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    14c2:	2b00      	cmp	r3, #0
    14c4:	d00a      	beq.n	14dc <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    14c6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    14ca:	ab16      	add	r3, sp, #88	; 0x58
    14cc:	4611      	mov	r1, r2
    14ce:	4618      	mov	r0, r3
    14d0:	f7ff fce5 	bl	e9e <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    14d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    14d6:	2b00      	cmp	r3, #0
    14d8:	daea      	bge.n	14b0 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    14da:	e01a      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
              break;
    14dc:	bf00      	nop
        break;
    14de:	e018      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    14e0:	9b03      	ldr	r3, [sp, #12]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	1d19      	adds	r1, r3, #4
    14e6:	9a03      	ldr	r2, [sp, #12]
    14e8:	6011      	str	r1, [r2, #0]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    14ee:	9920      	ldr	r1, [sp, #128]	; 0x80
    14f0:	a816      	add	r0, sp, #88	; 0x58
    14f2:	2300      	movs	r3, #0
    14f4:	9301      	str	r3, [sp, #4]
    14f6:	2308      	movs	r3, #8
    14f8:	9300      	str	r3, [sp, #0]
    14fa:	2308      	movs	r3, #8
    14fc:	2210      	movs	r2, #16
    14fe:	f7ff fd0d 	bl	f1c <_PrintUnsigned>
        break;
    1502:	e006      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1504:	ab16      	add	r3, sp, #88	; 0x58
    1506:	2125      	movs	r1, #37	; 0x25
    1508:	4618      	mov	r0, r3
    150a:	f7ff fcc8 	bl	e9e <_StoreChar>
        break;
    150e:	e000      	b.n	1512 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1510:	bf00      	nop
      }
      sFormat++;
    1512:	9b04      	ldr	r3, [sp, #16]
    1514:	3301      	adds	r3, #1
    1516:	9304      	str	r3, [sp, #16]
    1518:	e006      	b.n	1528 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    151a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    151e:	ab16      	add	r3, sp, #88	; 0x58
    1520:	4611      	mov	r1, r2
    1522:	4618      	mov	r0, r3
    1524:	f7ff fcbb 	bl	e9e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1528:	9b19      	ldr	r3, [sp, #100]	; 0x64
    152a:	2b00      	cmp	r3, #0
    152c:	f6bf ae59 	bge.w	11e2 <SEGGER_RTT_vprintf+0x1e>
    1530:	e000      	b.n	1534 <SEGGER_RTT_vprintf+0x370>
      break;
    1532:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1534:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1536:	2b00      	cmp	r3, #0
    1538:	dd0c      	ble.n	1554 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    153a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    153c:	2b00      	cmp	r3, #0
    153e:	d005      	beq.n	154c <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1540:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1542:	ab06      	add	r3, sp, #24
    1544:	4619      	mov	r1, r3
    1546:	9805      	ldr	r0, [sp, #20]
    1548:	f7ff fc7e 	bl	e48 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    154c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    154e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1550:	4413      	add	r3, r2
    1552:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1554:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1556:	4618      	mov	r0, r3
    1558:	b023      	add	sp, #140	; 0x8c
    155a:	f85d fb04 	ldr.w	pc, [sp], #4
    155e:	bf00      	nop
    1560:	00010080 	.word	0x00010080

00001564 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1564:	b40e      	push	{r1, r2, r3}
    1566:	b500      	push	{lr}
    1568:	b084      	sub	sp, #16
    156a:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    156c:	ab06      	add	r3, sp, #24
    156e:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1570:	ab02      	add	r3, sp, #8
    1572:	461a      	mov	r2, r3
    1574:	9905      	ldr	r1, [sp, #20]
    1576:	9801      	ldr	r0, [sp, #4]
    1578:	f7ff fe24 	bl	11c4 <SEGGER_RTT_vprintf>
    157c:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    157e:	9b03      	ldr	r3, [sp, #12]
}
    1580:	4618      	mov	r0, r3
    1582:	b004      	add	sp, #16
    1584:	f85d eb04 	ldr.w	lr, [sp], #4
    1588:	b003      	add	sp, #12
    158a:	4770      	bx	lr

0000158c <memcpy>:
    158c:	440a      	add	r2, r1
    158e:	4291      	cmp	r1, r2
    1590:	f100 33ff 	add.w	r3, r0, #4294967295
    1594:	d100      	bne.n	1598 <memcpy+0xc>
    1596:	4770      	bx	lr
    1598:	b510      	push	{r4, lr}
    159a:	f811 4b01 	ldrb.w	r4, [r1], #1
    159e:	f803 4f01 	strb.w	r4, [r3, #1]!
    15a2:	4291      	cmp	r1, r2
    15a4:	d1f9      	bne.n	159a <memcpy+0xe>
    15a6:	bd10      	pop	{r4, pc}

000015a8 <memset>:
    15a8:	4402      	add	r2, r0
    15aa:	4603      	mov	r3, r0
    15ac:	4293      	cmp	r3, r2
    15ae:	d100      	bne.n	15b2 <memset+0xa>
    15b0:	4770      	bx	lr
    15b2:	f803 1b01 	strb.w	r1, [r3], #1
    15b6:	e7f9      	b.n	15ac <memset+0x4>

000015b8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    15b8:	b086      	sub	sp, #24
    15ba:	9003      	str	r0, [sp, #12]
    15bc:	9102      	str	r1, [sp, #8]
    15be:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    15c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    15c4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    15c8:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    15ca:	9b01      	ldr	r3, [sp, #4]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d007      	beq.n	15e0 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    15d0:	9b03      	ldr	r3, [sp, #12]
    15d2:	3310      	adds	r3, #16
    15d4:	009b      	lsls	r3, r3, #2
    15d6:	9a05      	ldr	r2, [sp, #20]
    15d8:	4413      	add	r3, r2
    15da:	681a      	ldr	r2, [r3, #0]
    15dc:	9b01      	ldr	r3, [sp, #4]
    15de:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    15e0:	9b03      	ldr	r3, [sp, #12]
    15e2:	3310      	adds	r3, #16
    15e4:	009b      	lsls	r3, r3, #2
    15e6:	9a05      	ldr	r2, [sp, #20]
    15e8:	4413      	add	r3, r2
    15ea:	9a02      	ldr	r2, [sp, #8]
    15ec:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    15ee:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    15f2:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    15f6:	bf00      	nop
    15f8:	b006      	add	sp, #24
    15fa:	4770      	bx	lr

000015fc <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    15fc:	b082      	sub	sp, #8
    15fe:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	f003 021f 	and.w	r2, r3, #31
    1606:	4905      	ldr	r1, [pc, #20]	; (161c <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	095b      	lsrs	r3, r3, #5
    160c:	2001      	movs	r0, #1
    160e:	fa00 f202 	lsl.w	r2, r0, r2
    1612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1616:	bf00      	nop
    1618:	b002      	add	sp, #8
    161a:	4770      	bx	lr
    161c:	e000e100 	.word	0xe000e100

00001620 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1620:	b082      	sub	sp, #8
    1622:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	f003 021f 	and.w	r2, r3, #31
    162a:	4906      	ldr	r1, [pc, #24]	; (1644 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    162c:	9b01      	ldr	r3, [sp, #4]
    162e:	095b      	lsrs	r3, r3, #5
    1630:	2001      	movs	r0, #1
    1632:	fa00 f202 	lsl.w	r2, r0, r2
    1636:	3320      	adds	r3, #32
    1638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    163c:	bf00      	nop
    163e:	b002      	add	sp, #8
    1640:	4770      	bx	lr
    1642:	bf00      	nop
    1644:	e000e100 	.word	0xe000e100

00001648 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1648:	b084      	sub	sp, #16
    164a:	9001      	str	r0, [sp, #4]
    164c:	460b      	mov	r3, r1
    164e:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1652:	2304      	movs	r3, #4
    1654:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1658:	f89d 2003 	ldrb.w	r2, [sp, #3]
    165c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1660:	fa02 f103 	lsl.w	r1, r2, r3
    1664:	4a04      	ldr	r2, [pc, #16]	; (1678 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1666:	9b01      	ldr	r3, [sp, #4]
    1668:	b2c9      	uxtb	r1, r1
    166a:	4413      	add	r3, r2
    166c:	460a      	mov	r2, r1
    166e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1672:	bf00      	nop
    1674:	b004      	add	sp, #16
    1676:	4770      	bx	lr
    1678:	e000e100 	.word	0xe000e100

0000167c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    167c:	b084      	sub	sp, #16
    167e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1680:	2304      	movs	r3, #4
    1682:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1686:	4a09      	ldr	r2, [pc, #36]	; (16ac <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1688:	9b01      	ldr	r3, [sp, #4]
    168a:	4413      	add	r3, r2
    168c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1690:	b2db      	uxtb	r3, r3
    1692:	461a      	mov	r2, r3
    1694:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1698:	fa42 f303 	asr.w	r3, r2, r3
    169c:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    16a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    16a4:	4618      	mov	r0, r3
    16a6:	b004      	add	sp, #16
    16a8:	4770      	bx	lr
    16aa:	bf00      	nop
    16ac:	e000e100 	.word	0xe000e100

000016b0 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    16b0:	b082      	sub	sp, #8
    16b2:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	f003 021f 	and.w	r2, r3, #31
    16ba:	4906      	ldr	r1, [pc, #24]	; (16d4 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	095b      	lsrs	r3, r3, #5
    16c0:	2001      	movs	r0, #1
    16c2:	fa00 f202 	lsl.w	r2, r0, r2
    16c6:	3360      	adds	r3, #96	; 0x60
    16c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    16cc:	bf00      	nop
    16ce:	b002      	add	sp, #8
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	e000e100 	.word	0xe000e100

000016d8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    16d8:	b500      	push	{lr}
    16da:	b085      	sub	sp, #20
    16dc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    16de:	2300      	movs	r3, #0
    16e0:	9303      	str	r3, [sp, #12]
    16e2:	e05d      	b.n	17a0 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    16e4:	9b01      	ldr	r3, [sp, #4]
    16e6:	6859      	ldr	r1, [r3, #4]
    16e8:	9a03      	ldr	r2, [sp, #12]
    16ea:	4613      	mov	r3, r2
    16ec:	005b      	lsls	r3, r3, #1
    16ee:	4413      	add	r3, r2
    16f0:	009b      	lsls	r3, r3, #2
    16f2:	440b      	add	r3, r1
    16f4:	681b      	ldr	r3, [r3, #0]
    16f6:	4618      	mov	r0, r3
    16f8:	f000 f899 	bl	182e <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    16fc:	9b01      	ldr	r3, [sp, #4]
    16fe:	6859      	ldr	r1, [r3, #4]
    1700:	9a03      	ldr	r2, [sp, #12]
    1702:	4613      	mov	r3, r2
    1704:	005b      	lsls	r3, r3, #1
    1706:	4413      	add	r3, r2
    1708:	009b      	lsls	r3, r3, #2
    170a:	440b      	add	r3, r1
    170c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    170e:	9b01      	ldr	r3, [sp, #4]
    1710:	6859      	ldr	r1, [r3, #4]
    1712:	9a03      	ldr	r2, [sp, #12]
    1714:	4613      	mov	r3, r2
    1716:	005b      	lsls	r3, r3, #1
    1718:	4413      	add	r3, r2
    171a:	009b      	lsls	r3, r3, #2
    171c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    171e:	795b      	ldrb	r3, [r3, #5]
    1720:	4619      	mov	r1, r3
    1722:	f000 f869 	bl	17f8 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1726:	9b01      	ldr	r3, [sp, #4]
    1728:	6859      	ldr	r1, [r3, #4]
    172a:	9a03      	ldr	r2, [sp, #12]
    172c:	4613      	mov	r3, r2
    172e:	005b      	lsls	r3, r3, #1
    1730:	4413      	add	r3, r2
    1732:	009b      	lsls	r3, r3, #2
    1734:	440b      	add	r3, r1
    1736:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1738:	9b01      	ldr	r3, [sp, #4]
    173a:	6859      	ldr	r1, [r3, #4]
    173c:	9a03      	ldr	r2, [sp, #12]
    173e:	4613      	mov	r3, r2
    1740:	005b      	lsls	r3, r3, #1
    1742:	4413      	add	r3, r2
    1744:	009b      	lsls	r3, r3, #2
    1746:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1748:	689b      	ldr	r3, [r3, #8]
    174a:	2200      	movs	r2, #0
    174c:	4619      	mov	r1, r3
    174e:	f000 f831 	bl	17b4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1752:	9b01      	ldr	r3, [sp, #4]
    1754:	6859      	ldr	r1, [r3, #4]
    1756:	9a03      	ldr	r2, [sp, #12]
    1758:	4613      	mov	r3, r2
    175a:	005b      	lsls	r3, r3, #1
    175c:	4413      	add	r3, r2
    175e:	009b      	lsls	r3, r3, #2
    1760:	440b      	add	r3, r1
    1762:	791b      	ldrb	r3, [r3, #4]
    1764:	2b00      	cmp	r3, #0
    1766:	d00c      	beq.n	1782 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1768:	9b01      	ldr	r3, [sp, #4]
    176a:	6859      	ldr	r1, [r3, #4]
    176c:	9a03      	ldr	r2, [sp, #12]
    176e:	4613      	mov	r3, r2
    1770:	005b      	lsls	r3, r3, #1
    1772:	4413      	add	r3, r2
    1774:	009b      	lsls	r3, r3, #2
    1776:	440b      	add	r3, r1
    1778:	681b      	ldr	r3, [r3, #0]
    177a:	4618      	mov	r0, r3
    177c:	f000 f828 	bl	17d0 <IntCtrl_Ip_EnableIrq>
    1780:	e00b      	b.n	179a <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1782:	9b01      	ldr	r3, [sp, #4]
    1784:	6859      	ldr	r1, [r3, #4]
    1786:	9a03      	ldr	r2, [sp, #12]
    1788:	4613      	mov	r3, r2
    178a:	005b      	lsls	r3, r3, #1
    178c:	4413      	add	r3, r2
    178e:	009b      	lsls	r3, r3, #2
    1790:	440b      	add	r3, r1
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	4618      	mov	r0, r3
    1796:	f000 f825 	bl	17e4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    179a:	9b03      	ldr	r3, [sp, #12]
    179c:	3301      	adds	r3, #1
    179e:	9303      	str	r3, [sp, #12]
    17a0:	9b01      	ldr	r3, [sp, #4]
    17a2:	681b      	ldr	r3, [r3, #0]
    17a4:	9a03      	ldr	r2, [sp, #12]
    17a6:	429a      	cmp	r2, r3
    17a8:	d39c      	bcc.n	16e4 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    17aa:	2300      	movs	r3, #0
}
    17ac:	4618      	mov	r0, r3
    17ae:	b005      	add	sp, #20
    17b0:	f85d fb04 	ldr.w	pc, [sp], #4

000017b4 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    17b4:	b500      	push	{lr}
    17b6:	b085      	sub	sp, #20
    17b8:	9003      	str	r0, [sp, #12]
    17ba:	9102      	str	r1, [sp, #8]
    17bc:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    17be:	9a01      	ldr	r2, [sp, #4]
    17c0:	9902      	ldr	r1, [sp, #8]
    17c2:	9803      	ldr	r0, [sp, #12]
    17c4:	f7ff fef8 	bl	15b8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    17c8:	bf00      	nop
    17ca:	b005      	add	sp, #20
    17cc:	f85d fb04 	ldr.w	pc, [sp], #4

000017d0 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    17d0:	b500      	push	{lr}
    17d2:	b083      	sub	sp, #12
    17d4:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    17d6:	9801      	ldr	r0, [sp, #4]
    17d8:	f7ff ff10 	bl	15fc <IntCtrl_Ip_EnableIrqPrivileged>
}
    17dc:	bf00      	nop
    17de:	b003      	add	sp, #12
    17e0:	f85d fb04 	ldr.w	pc, [sp], #4

000017e4 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    17e4:	b500      	push	{lr}
    17e6:	b083      	sub	sp, #12
    17e8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    17ea:	9801      	ldr	r0, [sp, #4]
    17ec:	f7ff ff18 	bl	1620 <IntCtrl_Ip_DisableIrqPrivileged>
}
    17f0:	bf00      	nop
    17f2:	b003      	add	sp, #12
    17f4:	f85d fb04 	ldr.w	pc, [sp], #4

000017f8 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    17f8:	b500      	push	{lr}
    17fa:	b083      	sub	sp, #12
    17fc:	9001      	str	r0, [sp, #4]
    17fe:	460b      	mov	r3, r1
    1800:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1804:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1808:	4619      	mov	r1, r3
    180a:	9801      	ldr	r0, [sp, #4]
    180c:	f7ff ff1c 	bl	1648 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1810:	bf00      	nop
    1812:	b003      	add	sp, #12
    1814:	f85d fb04 	ldr.w	pc, [sp], #4

00001818 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1818:	b500      	push	{lr}
    181a:	b083      	sub	sp, #12
    181c:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    181e:	9801      	ldr	r0, [sp, #4]
    1820:	f7ff ff2c 	bl	167c <IntCtrl_Ip_GetPriorityPrivileged>
    1824:	4603      	mov	r3, r0
}
    1826:	4618      	mov	r0, r3
    1828:	b003      	add	sp, #12
    182a:	f85d fb04 	ldr.w	pc, [sp], #4

0000182e <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    182e:	b500      	push	{lr}
    1830:	b083      	sub	sp, #12
    1832:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1834:	9801      	ldr	r0, [sp, #4]
    1836:	f7ff ff3b 	bl	16b0 <IntCtrl_Ip_ClearPendingPrivileged>
}
    183a:	bf00      	nop
    183c:	b003      	add	sp, #12
    183e:	f85d fb04 	ldr.w	pc, [sp], #4
    1842:	bf00      	nop

00001844 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1844:	b500      	push	{lr}
    1846:	b083      	sub	sp, #12
    1848:	9001      	str	r0, [sp, #4]
    184a:	460b      	mov	r3, r1
    184c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1850:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1854:	2b00      	cmp	r3, #0
    1856:	d003      	beq.n	1860 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1858:	9801      	ldr	r0, [sp, #4]
    185a:	f7ff ffb9 	bl	17d0 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    185e:	e002      	b.n	1866 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1860:	9801      	ldr	r0, [sp, #4]
    1862:	f7ff ffbf 	bl	17e4 <IntCtrl_Ip_DisableIrq>
}
    1866:	bf00      	nop
    1868:	b003      	add	sp, #12
    186a:	f85d fb04 	ldr.w	pc, [sp], #4

0000186e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    186e:	b500      	push	{lr}
    1870:	b083      	sub	sp, #12
    1872:	9001      	str	r0, [sp, #4]
    1874:	460b      	mov	r3, r1
    1876:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    187a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    187e:	4619      	mov	r1, r3
    1880:	9801      	ldr	r0, [sp, #4]
    1882:	f7ff ffb9 	bl	17f8 <IntCtrl_Ip_SetPriority>
}
    1886:	bf00      	nop
    1888:	b003      	add	sp, #12
    188a:	f85d fb04 	ldr.w	pc, [sp], #4

0000188e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    188e:	b500      	push	{lr}
    1890:	b083      	sub	sp, #12
    1892:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1894:	9801      	ldr	r0, [sp, #4]
    1896:	f7ff ffbf 	bl	1818 <IntCtrl_Ip_GetPriority>
    189a:	4603      	mov	r3, r0
}
    189c:	4618      	mov	r0, r3
    189e:	b003      	add	sp, #12
    18a0:	f85d fb04 	ldr.w	pc, [sp], #4

000018a4 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    18a4:	b500      	push	{lr}
    18a6:	b085      	sub	sp, #20
    18a8:	9003      	str	r0, [sp, #12]
    18aa:	9102      	str	r1, [sp, #8]
    18ac:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    18ae:	9a01      	ldr	r2, [sp, #4]
    18b0:	9902      	ldr	r1, [sp, #8]
    18b2:	9803      	ldr	r0, [sp, #12]
    18b4:	f7ff ff7e 	bl	17b4 <IntCtrl_Ip_InstallHandler>
}
    18b8:	bf00      	nop
    18ba:	b005      	add	sp, #20
    18bc:	f85d fb04 	ldr.w	pc, [sp], #4

000018c0 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    18c0:	b500      	push	{lr}
    18c2:	b085      	sub	sp, #20
    18c4:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    18c6:	2300      	movs	r3, #0
    18c8:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    18cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    18d0:	4a05      	ldr	r2, [pc, #20]	; (18e8 <Platform_Init+0x28>)
    18d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	4618      	mov	r0, r3
    18da:	f000 f8c7 	bl	1a6c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    18de:	bf00      	nop
    18e0:	b005      	add	sp, #20
    18e2:	f85d fb04 	ldr.w	pc, [sp], #4
    18e6:	bf00      	nop
    18e8:	00010d7c 	.word	0x00010d7c

000018ec <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    18ec:	b500      	push	{lr}
    18ee:	b085      	sub	sp, #20
    18f0:	9001      	str	r0, [sp, #4]
    18f2:	460b      	mov	r3, r1
    18f4:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    18f8:	2300      	movs	r3, #0
    18fa:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    18fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1902:	4619      	mov	r1, r3
    1904:	9801      	ldr	r0, [sp, #4]
    1906:	f7ff ff9d 	bl	1844 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    190a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    190e:	4618      	mov	r0, r3
    1910:	b005      	add	sp, #20
    1912:	f85d fb04 	ldr.w	pc, [sp], #4

00001916 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1916:	b500      	push	{lr}
    1918:	b085      	sub	sp, #20
    191a:	9001      	str	r0, [sp, #4]
    191c:	460b      	mov	r3, r1
    191e:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1922:	2300      	movs	r3, #0
    1924:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1928:	f89d 3003 	ldrb.w	r3, [sp, #3]
    192c:	4619      	mov	r1, r3
    192e:	9801      	ldr	r0, [sp, #4]
    1930:	f7ff ff9d 	bl	186e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1934:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1938:	4618      	mov	r0, r3
    193a:	b005      	add	sp, #20
    193c:	f85d fb04 	ldr.w	pc, [sp], #4

00001940 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1940:	b500      	push	{lr}
    1942:	b085      	sub	sp, #20
    1944:	9001      	str	r0, [sp, #4]
    1946:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1948:	2300      	movs	r3, #0
    194a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    194e:	9801      	ldr	r0, [sp, #4]
    1950:	f7ff ff9d 	bl	188e <Platform_Ipw_GetIrqPriority>
    1954:	4603      	mov	r3, r0
    1956:	461a      	mov	r2, r3
    1958:	9b00      	ldr	r3, [sp, #0]
    195a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    195c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1960:	4618      	mov	r0, r3
    1962:	b005      	add	sp, #20
    1964:	f85d fb04 	ldr.w	pc, [sp], #4

00001968 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1968:	b500      	push	{lr}
    196a:	b087      	sub	sp, #28
    196c:	9003      	str	r0, [sp, #12]
    196e:	9102      	str	r1, [sp, #8]
    1970:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1972:	2300      	movs	r3, #0
    1974:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1978:	9a01      	ldr	r2, [sp, #4]
    197a:	9902      	ldr	r1, [sp, #8]
    197c:	9803      	ldr	r0, [sp, #12]
    197e:	f7ff ff91 	bl	18a4 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1982:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1986:	4618      	mov	r0, r3
    1988:	b007      	add	sp, #28
    198a:	f85d fb04 	ldr.w	pc, [sp], #4
    198e:	bf00      	nop

00001990 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1990:	b500      	push	{lr}
    1992:	b085      	sub	sp, #20
    1994:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1996:	2300      	movs	r3, #0
    1998:	9303      	str	r3, [sp, #12]
    199a:	e05d      	b.n	1a58 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    199c:	9b01      	ldr	r3, [sp, #4]
    199e:	6859      	ldr	r1, [r3, #4]
    19a0:	9a03      	ldr	r2, [sp, #12]
    19a2:	4613      	mov	r3, r2
    19a4:	005b      	lsls	r3, r3, #1
    19a6:	4413      	add	r3, r2
    19a8:	009b      	lsls	r3, r3, #2
    19aa:	440b      	add	r3, r1
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	4618      	mov	r0, r3
    19b0:	f7ff ff3d 	bl	182e <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19b4:	9b01      	ldr	r3, [sp, #4]
    19b6:	6859      	ldr	r1, [r3, #4]
    19b8:	9a03      	ldr	r2, [sp, #12]
    19ba:	4613      	mov	r3, r2
    19bc:	005b      	lsls	r3, r3, #1
    19be:	4413      	add	r3, r2
    19c0:	009b      	lsls	r3, r3, #2
    19c2:	440b      	add	r3, r1
    19c4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    19c6:	9b01      	ldr	r3, [sp, #4]
    19c8:	6859      	ldr	r1, [r3, #4]
    19ca:	9a03      	ldr	r2, [sp, #12]
    19cc:	4613      	mov	r3, r2
    19ce:	005b      	lsls	r3, r3, #1
    19d0:	4413      	add	r3, r2
    19d2:	009b      	lsls	r3, r3, #2
    19d4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19d6:	795b      	ldrb	r3, [r3, #5]
    19d8:	4619      	mov	r1, r3
    19da:	f7ff ff0d 	bl	17f8 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    19de:	9b01      	ldr	r3, [sp, #4]
    19e0:	6859      	ldr	r1, [r3, #4]
    19e2:	9a03      	ldr	r2, [sp, #12]
    19e4:	4613      	mov	r3, r2
    19e6:	005b      	lsls	r3, r3, #1
    19e8:	4413      	add	r3, r2
    19ea:	009b      	lsls	r3, r3, #2
    19ec:	440b      	add	r3, r1
    19ee:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    19f0:	9b01      	ldr	r3, [sp, #4]
    19f2:	6859      	ldr	r1, [r3, #4]
    19f4:	9a03      	ldr	r2, [sp, #12]
    19f6:	4613      	mov	r3, r2
    19f8:	005b      	lsls	r3, r3, #1
    19fa:	4413      	add	r3, r2
    19fc:	009b      	lsls	r3, r3, #2
    19fe:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a00:	689b      	ldr	r3, [r3, #8]
    1a02:	2200      	movs	r2, #0
    1a04:	4619      	mov	r1, r3
    1a06:	f7ff fed5 	bl	17b4 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1a0a:	9b01      	ldr	r3, [sp, #4]
    1a0c:	6859      	ldr	r1, [r3, #4]
    1a0e:	9a03      	ldr	r2, [sp, #12]
    1a10:	4613      	mov	r3, r2
    1a12:	005b      	lsls	r3, r3, #1
    1a14:	4413      	add	r3, r2
    1a16:	009b      	lsls	r3, r3, #2
    1a18:	440b      	add	r3, r1
    1a1a:	791b      	ldrb	r3, [r3, #4]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d00c      	beq.n	1a3a <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a20:	9b01      	ldr	r3, [sp, #4]
    1a22:	6859      	ldr	r1, [r3, #4]
    1a24:	9a03      	ldr	r2, [sp, #12]
    1a26:	4613      	mov	r3, r2
    1a28:	005b      	lsls	r3, r3, #1
    1a2a:	4413      	add	r3, r2
    1a2c:	009b      	lsls	r3, r3, #2
    1a2e:	440b      	add	r3, r1
    1a30:	681b      	ldr	r3, [r3, #0]
    1a32:	4618      	mov	r0, r3
    1a34:	f7ff fecc 	bl	17d0 <IntCtrl_Ip_EnableIrq>
    1a38:	e00b      	b.n	1a52 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a3a:	9b01      	ldr	r3, [sp, #4]
    1a3c:	6859      	ldr	r1, [r3, #4]
    1a3e:	9a03      	ldr	r2, [sp, #12]
    1a40:	4613      	mov	r3, r2
    1a42:	005b      	lsls	r3, r3, #1
    1a44:	4413      	add	r3, r2
    1a46:	009b      	lsls	r3, r3, #2
    1a48:	440b      	add	r3, r1
    1a4a:	681b      	ldr	r3, [r3, #0]
    1a4c:	4618      	mov	r0, r3
    1a4e:	f7ff fec9 	bl	17e4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a52:	9b03      	ldr	r3, [sp, #12]
    1a54:	3301      	adds	r3, #1
    1a56:	9303      	str	r3, [sp, #12]
    1a58:	9b01      	ldr	r3, [sp, #4]
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	9a03      	ldr	r2, [sp, #12]
    1a5e:	429a      	cmp	r2, r3
    1a60:	d39c      	bcc.n	199c <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1a62:	2300      	movs	r3, #0
}
    1a64:	4618      	mov	r0, r3
    1a66:	b005      	add	sp, #20
    1a68:	f85d fb04 	ldr.w	pc, [sp], #4

00001a6c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1a6c:	b500      	push	{lr}
    1a6e:	b085      	sub	sp, #20
    1a70:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1a72:	2300      	movs	r3, #0
    1a74:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1a78:	9b01      	ldr	r3, [sp, #4]
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d007      	beq.n	1a90 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1a80:	9b01      	ldr	r3, [sp, #4]
    1a82:	681b      	ldr	r3, [r3, #0]
    1a84:	4618      	mov	r0, r3
    1a86:	f7ff ff83 	bl	1990 <Platform_Ipw_InitIntCtrl>
    1a8a:	4603      	mov	r3, r0
    1a8c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1a90:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1a94:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1a96:	bf00      	nop
    1a98:	b005      	add	sp, #20
    1a9a:	f85d fb04 	ldr.w	pc, [sp], #4

00001a9e <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1a9e:	2300      	movs	r3, #0
}
    1aa0:	4618      	mov	r0, r3
    1aa2:	4770      	bx	lr

00001aa4 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1aa4:	b082      	sub	sp, #8
    1aa6:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1aa8:	2301      	movs	r3, #1
}
    1aaa:	4618      	mov	r0, r3
    1aac:	b002      	add	sp, #8
    1aae:	4770      	bx	lr

00001ab0 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ab0:	b082      	sub	sp, #8
    1ab2:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1ab4:	bf00      	nop
    1ab6:	b002      	add	sp, #8
    1ab8:	4770      	bx	lr

00001aba <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1aba:	b082      	sub	sp, #8
    1abc:	9001      	str	r0, [sp, #4]
    return Micros;
    1abe:	9b01      	ldr	r3, [sp, #4]
}
    1ac0:	4618      	mov	r0, r3
    1ac2:	b002      	add	sp, #8
    1ac4:	4770      	bx	lr

00001ac6 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1ac6:	b500      	push	{lr}
    1ac8:	b083      	sub	sp, #12
    1aca:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1acc:	f000 f86c 	bl	1ba8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1ad0:	bf00      	nop
    1ad2:	b003      	add	sp, #12
    1ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ad8 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1ad8:	b500      	push	{lr}
    1ada:	b085      	sub	sp, #20
    1adc:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1ade:	2300      	movs	r3, #0
    1ae0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ae2:	9b01      	ldr	r3, [sp, #4]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d003      	beq.n	1af0 <OsIf_GetCounter+0x18>
    1ae8:	9b01      	ldr	r3, [sp, #4]
    1aea:	2b01      	cmp	r3, #1
    1aec:	d004      	beq.n	1af8 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1aee:	e007      	b.n	1b00 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1af0:	f7ff ffd5 	bl	1a9e <OsIf_Timer_Dummy_GetCounter>
    1af4:	9003      	str	r0, [sp, #12]
            break;
    1af6:	e003      	b.n	1b00 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1af8:	f000 f872 	bl	1be0 <OsIf_Timer_System_GetCounter>
    1afc:	9003      	str	r0, [sp, #12]
            break;
    1afe:	bf00      	nop
    }

    return Value;
    1b00:	9b03      	ldr	r3, [sp, #12]
}
    1b02:	4618      	mov	r0, r3
    1b04:	b005      	add	sp, #20
    1b06:	f85d fb04 	ldr.w	pc, [sp], #4

00001b0a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1b0a:	b500      	push	{lr}
    1b0c:	b085      	sub	sp, #20
    1b0e:	9001      	str	r0, [sp, #4]
    1b10:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b12:	2300      	movs	r3, #0
    1b14:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b16:	9b00      	ldr	r3, [sp, #0]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d003      	beq.n	1b24 <OsIf_GetElapsed+0x1a>
    1b1c:	9b00      	ldr	r3, [sp, #0]
    1b1e:	2b01      	cmp	r3, #1
    1b20:	d005      	beq.n	1b2e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b22:	e009      	b.n	1b38 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1b24:	9801      	ldr	r0, [sp, #4]
    1b26:	f7ff ffbd 	bl	1aa4 <OsIf_Timer_Dummy_GetElapsed>
    1b2a:	9003      	str	r0, [sp, #12]
            break;
    1b2c:	e004      	b.n	1b38 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1b2e:	9801      	ldr	r0, [sp, #4]
    1b30:	f000 f864 	bl	1bfc <OsIf_Timer_System_GetElapsed>
    1b34:	9003      	str	r0, [sp, #12]
            break;
    1b36:	bf00      	nop
    }

    return Value;
    1b38:	9b03      	ldr	r3, [sp, #12]
}
    1b3a:	4618      	mov	r0, r3
    1b3c:	b005      	add	sp, #20
    1b3e:	f85d fb04 	ldr.w	pc, [sp], #4

00001b42 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1b42:	b500      	push	{lr}
    1b44:	b083      	sub	sp, #12
    1b46:	9001      	str	r0, [sp, #4]
    1b48:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1b4a:	9b00      	ldr	r3, [sp, #0]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d003      	beq.n	1b58 <OsIf_SetTimerFrequency+0x16>
    1b50:	9b00      	ldr	r3, [sp, #0]
    1b52:	2b01      	cmp	r3, #1
    1b54:	d004      	beq.n	1b60 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b56:	e007      	b.n	1b68 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1b58:	9801      	ldr	r0, [sp, #4]
    1b5a:	f7ff ffa9 	bl	1ab0 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1b5e:	e003      	b.n	1b68 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1b60:	9801      	ldr	r0, [sp, #4]
    1b62:	f000 f85b 	bl	1c1c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1b66:	bf00      	nop
    }
}
    1b68:	bf00      	nop
    1b6a:	b003      	add	sp, #12
    1b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b70 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1b70:	b500      	push	{lr}
    1b72:	b085      	sub	sp, #20
    1b74:	9001      	str	r0, [sp, #4]
    1b76:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b78:	2300      	movs	r3, #0
    1b7a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b7c:	9b00      	ldr	r3, [sp, #0]
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d003      	beq.n	1b8a <OsIf_MicrosToTicks+0x1a>
    1b82:	9b00      	ldr	r3, [sp, #0]
    1b84:	2b01      	cmp	r3, #1
    1b86:	d005      	beq.n	1b94 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b88:	e009      	b.n	1b9e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1b8a:	9801      	ldr	r0, [sp, #4]
    1b8c:	f7ff ff95 	bl	1aba <OsIf_Timer_Dummy_MicrosToTicks>
    1b90:	9003      	str	r0, [sp, #12]
            break;
    1b92:	e004      	b.n	1b9e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1b94:	9801      	ldr	r0, [sp, #4]
    1b96:	f000 f84f 	bl	1c38 <OsIf_Timer_System_MicrosToTicks>
    1b9a:	9003      	str	r0, [sp, #12]
            break;
    1b9c:	bf00      	nop
    }

    return Value;
    1b9e:	9b03      	ldr	r3, [sp, #12]
}
    1ba0:	4618      	mov	r0, r3
    1ba2:	b005      	add	sp, #20
    1ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1ba8:	b500      	push	{lr}
    1baa:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1bac:	2300      	movs	r3, #0
    1bae:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1bb0:	4a09      	ldr	r2, [pc, #36]	; (1bd8 <OsIf_Timer_System_Init+0x30>)
    1bb2:	9b01      	ldr	r3, [sp, #4]
    1bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bb8:	685a      	ldr	r2, [r3, #4]
    1bba:	4908      	ldr	r1, [pc, #32]	; (1bdc <OsIf_Timer_System_Init+0x34>)
    1bbc:	9b01      	ldr	r3, [sp, #4]
    1bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1bc2:	4a06      	ldr	r2, [pc, #24]	; (1bdc <OsIf_Timer_System_Init+0x34>)
    1bc4:	9b01      	ldr	r3, [sp, #4]
    1bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bca:	4618      	mov	r0, r3
    1bcc:	f000 f868 	bl	1ca0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1bd0:	bf00      	nop
    1bd2:	b003      	add	sp, #12
    1bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    1bd8:	00010d54 	.word	0x00010d54
    1bdc:	1fff8b30 	.word	0x1fff8b30

00001be0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1be0:	b500      	push	{lr}
    1be2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1be4:	2300      	movs	r3, #0
    1be6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1be8:	2300      	movs	r3, #0
    1bea:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1bec:	f000 f86c 	bl	1cc8 <OsIf_Timer_System_Internal_GetCounter>
    1bf0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1bf2:	9b01      	ldr	r3, [sp, #4]
}
    1bf4:	4618      	mov	r0, r3
    1bf6:	b003      	add	sp, #12
    1bf8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bfc <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1bfc:	b500      	push	{lr}
    1bfe:	b085      	sub	sp, #20
    1c00:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c02:	2300      	movs	r3, #0
    1c04:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c06:	2300      	movs	r3, #0
    1c08:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1c0a:	9801      	ldr	r0, [sp, #4]
    1c0c:	f000 f864 	bl	1cd8 <OsIf_Timer_System_Internal_GetElapsed>
    1c10:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1c12:	9b03      	ldr	r3, [sp, #12]
}
    1c14:	4618      	mov	r0, r3
    1c16:	b005      	add	sp, #20
    1c18:	f85d fb04 	ldr.w	pc, [sp], #4

00001c1c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1c1c:	b084      	sub	sp, #16
    1c1e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c20:	2300      	movs	r3, #0
    1c22:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1c24:	4903      	ldr	r1, [pc, #12]	; (1c34 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1c26:	9b03      	ldr	r3, [sp, #12]
    1c28:	9a01      	ldr	r2, [sp, #4]
    1c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1c2e:	bf00      	nop
    1c30:	b004      	add	sp, #16
    1c32:	4770      	bx	lr
    1c34:	1fff8b30 	.word	0x1fff8b30

00001c38 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	b087      	sub	sp, #28
    1c3c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1c3e:	2100      	movs	r1, #0
    1c40:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1c42:	2100      	movs	r1, #0
    1c44:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1c46:	9901      	ldr	r1, [sp, #4]
    1c48:	2000      	movs	r0, #0
    1c4a:	460e      	mov	r6, r1
    1c4c:	4607      	mov	r7, r0
    1c4e:	4812      	ldr	r0, [pc, #72]	; (1c98 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1c50:	9904      	ldr	r1, [sp, #16]
    1c52:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1c56:	2000      	movs	r0, #0
    1c58:	460c      	mov	r4, r1
    1c5a:	4605      	mov	r5, r0
    1c5c:	fb04 f007 	mul.w	r0, r4, r7
    1c60:	fb06 f105 	mul.w	r1, r6, r5
    1c64:	4401      	add	r1, r0
    1c66:	fba6 2304 	umull	r2, r3, r6, r4
    1c6a:	4419      	add	r1, r3
    1c6c:	460b      	mov	r3, r1
    1c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1c72:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1c7a:	4a08      	ldr	r2, [pc, #32]	; (1c9c <OsIf_Timer_System_MicrosToTicks+0x64>)
    1c7c:	f04f 0300 	mov.w	r3, #0
    1c80:	f7fe fc90 	bl	5a4 <__aeabi_uldivmod>
    1c84:	4602      	mov	r2, r0
    1c86:	460b      	mov	r3, r1
    1c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1c8c:	9b02      	ldr	r3, [sp, #8]
    1c8e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1c90:	9b05      	ldr	r3, [sp, #20]
}
    1c92:	4618      	mov	r0, r3
    1c94:	b007      	add	sp, #28
    1c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c98:	1fff8b30 	.word	0x1fff8b30
    1c9c:	000f4240 	.word	0x000f4240

00001ca0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1ca0:	b082      	sub	sp, #8
    1ca2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1ca4:	4b07      	ldr	r3, [pc, #28]	; (1cc4 <OsIf_Timer_System_Internal_Init+0x24>)
    1ca6:	2200      	movs	r2, #0
    1ca8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cac:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1cb0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1cb2:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cb4:	2200      	movs	r2, #0
    1cb6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1cb8:	4b02      	ldr	r3, [pc, #8]	; (1cc4 <OsIf_Timer_System_Internal_Init+0x24>)
    1cba:	2205      	movs	r2, #5
    1cbc:	601a      	str	r2, [r3, #0]
}
    1cbe:	bf00      	nop
    1cc0:	b002      	add	sp, #8
    1cc2:	4770      	bx	lr
    1cc4:	e000e010 	.word	0xe000e010

00001cc8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1cc8:	4b02      	ldr	r3, [pc, #8]	; (1cd4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1cca:	689b      	ldr	r3, [r3, #8]
    1ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1cd0:	4618      	mov	r0, r3
    1cd2:	4770      	bx	lr
    1cd4:	e000e010 	.word	0xe000e010

00001cd8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1cd8:	b084      	sub	sp, #16
    1cda:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1cdc:	4b10      	ldr	r3, [pc, #64]	; (1d20 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1cde:	689b      	ldr	r3, [r3, #8]
    1ce0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1ce4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1ce6:	2300      	movs	r3, #0
    1ce8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1cea:	9b01      	ldr	r3, [sp, #4]
    1cec:	681b      	ldr	r3, [r3, #0]
    1cee:	9a02      	ldr	r2, [sp, #8]
    1cf0:	429a      	cmp	r2, r3
    1cf2:	d909      	bls.n	1d08 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1cf4:	9b01      	ldr	r3, [sp, #4]
    1cf6:	681a      	ldr	r2, [r3, #0]
    1cf8:	9b02      	ldr	r3, [sp, #8]
    1cfa:	1ad3      	subs	r3, r2, r3
    1cfc:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d00:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d04:	9303      	str	r3, [sp, #12]
    1d06:	e004      	b.n	1d12 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1d08:	9b01      	ldr	r3, [sp, #4]
    1d0a:	681a      	ldr	r2, [r3, #0]
    1d0c:	9b02      	ldr	r3, [sp, #8]
    1d0e:	1ad3      	subs	r3, r2, r3
    1d10:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1d12:	9b01      	ldr	r3, [sp, #4]
    1d14:	9a02      	ldr	r2, [sp, #8]
    1d16:	601a      	str	r2, [r3, #0]

    return dif;
    1d18:	9b03      	ldr	r3, [sp, #12]
}
    1d1a:	4618      	mov	r0, r3
    1d1c:	b004      	add	sp, #16
    1d1e:	4770      	bx	lr
    1d20:	e000e010 	.word	0xe000e010

00001d24 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1d24:	b082      	sub	sp, #8
    1d26:	9001      	str	r0, [sp, #4]
    1d28:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1d2a:	bf00      	nop
    1d2c:	b002      	add	sp, #8
    1d2e:	4770      	bx	lr

00001d30 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1d30:	b500      	push	{lr}
    1d32:	b085      	sub	sp, #20
    1d34:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1d36:	4b24      	ldr	r3, [pc, #144]	; (1dc8 <Clock_Ip_UpdateDriverContext+0x98>)
    1d38:	2201      	movs	r2, #1
    1d3a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1d3c:	4b23      	ldr	r3, [pc, #140]	; (1dcc <Clock_Ip_UpdateDriverContext+0x9c>)
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	2102      	movs	r1, #2
    1d42:	4618      	mov	r0, r3
    1d44:	f003 fc32 	bl	55ac <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d48:	2300      	movs	r3, #0
    1d4a:	f88d 300f 	strb.w	r3, [sp, #15]
    1d4e:	e015      	b.n	1d7c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1d50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d54:	9a01      	ldr	r2, [sp, #4]
    1d56:	334a      	adds	r3, #74	; 0x4a
    1d58:	00db      	lsls	r3, r3, #3
    1d5a:	4413      	add	r3, r2
    1d5c:	6858      	ldr	r0, [r3, #4]
    1d5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d62:	9a01      	ldr	r2, [sp, #4]
    1d64:	334a      	adds	r3, #74	; 0x4a
    1d66:	00db      	lsls	r3, r3, #3
    1d68:	4413      	add	r3, r2
    1d6a:	689b      	ldr	r3, [r3, #8]
    1d6c:	4619      	mov	r1, r3
    1d6e:	f001 fadc 	bl	332a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d76:	3301      	adds	r3, #1
    1d78:	f88d 300f 	strb.w	r3, [sp, #15]
    1d7c:	9b01      	ldr	r3, [sp, #4]
    1d7e:	7bdb      	ldrb	r3, [r3, #15]
    1d80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d84:	429a      	cmp	r2, r3
    1d86:	d3e3      	bcc.n	1d50 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1d88:	f000 f824 	bl	1dd4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1d8c:	2301      	movs	r3, #1
    1d8e:	f88d 300f 	strb.w	r3, [sp, #15]
    1d92:	e00e      	b.n	1db2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1d94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1d98:	9b01      	ldr	r3, [sp, #4]
    1d9a:	327e      	adds	r2, #126	; 0x7e
    1d9c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1da0:	490b      	ldr	r1, [pc, #44]	; (1dd0 <Clock_Ip_UpdateDriverContext+0xa0>)
    1da2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1da6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1da8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dac:	3301      	adds	r3, #1
    1dae:	f88d 300f 	strb.w	r3, [sp, #15]
    1db2:	9b01      	ldr	r3, [sp, #4]
    1db4:	7cdb      	ldrb	r3, [r3, #19]
    1db6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dba:	429a      	cmp	r2, r3
    1dbc:	d3ea      	bcc.n	1d94 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1dbe:	bf00      	nop
    1dc0:	bf00      	nop
    1dc2:	b005      	add	sp, #20
    1dc4:	f85d fb04 	ldr.w	pc, [sp], #4
    1dc8:	1fff8b10 	.word	0x1fff8b10
    1dcc:	1fff8b34 	.word	0x1fff8b34
    1dd0:	1fff8b40 	.word	0x1fff8b40

00001dd4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1dd4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1dd6:	4b23      	ldr	r3, [pc, #140]	; (1e64 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1dd8:	781b      	ldrb	r3, [r3, #0]
    1dda:	f083 0301 	eor.w	r3, r3, #1
    1dde:	b2db      	uxtb	r3, r3
    1de0:	2b00      	cmp	r3, #0
    1de2:	d03d      	beq.n	1e60 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1de4:	4b1f      	ldr	r3, [pc, #124]	; (1e64 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1de6:	2201      	movs	r2, #1
    1de8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1dea:	4b1f      	ldr	r3, [pc, #124]	; (1e68 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1dec:	685b      	ldr	r3, [r3, #4]
    1dee:	2100      	movs	r1, #0
    1df0:	2000      	movs	r0, #0
    1df2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1df4:	4b1c      	ldr	r3, [pc, #112]	; (1e68 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1df6:	689b      	ldr	r3, [r3, #8]
    1df8:	2057      	movs	r0, #87	; 0x57
    1dfa:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1dfc:	4b1b      	ldr	r3, [pc, #108]	; (1e6c <Clock_Ip_CallEmptyCallbacks+0x98>)
    1dfe:	681b      	ldr	r3, [r3, #0]
    1e00:	2000      	movs	r0, #0
    1e02:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e04:	4b1a      	ldr	r3, [pc, #104]	; (1e70 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	2000      	movs	r0, #0
    1e0a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1e0c:	4b19      	ldr	r3, [pc, #100]	; (1e74 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	2000      	movs	r0, #0
    1e12:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e14:	4b18      	ldr	r3, [pc, #96]	; (1e78 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e16:	685b      	ldr	r3, [r3, #4]
    1e18:	2000      	movs	r0, #0
    1e1a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e1c:	4b16      	ldr	r3, [pc, #88]	; (1e78 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e1e:	689b      	ldr	r3, [r3, #8]
    1e20:	2057      	movs	r0, #87	; 0x57
    1e22:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e24:	4b15      	ldr	r3, [pc, #84]	; (1e7c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	2000      	movs	r0, #0
    1e2a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1e2c:	4b13      	ldr	r3, [pc, #76]	; (1e7c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e2e:	685b      	ldr	r3, [r3, #4]
    1e30:	2100      	movs	r1, #0
    1e32:	2057      	movs	r0, #87	; 0x57
    1e34:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e36:	4b12      	ldr	r3, [pc, #72]	; (1e80 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1e38:	681b      	ldr	r3, [r3, #0]
    1e3a:	2000      	movs	r0, #0
    1e3c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e3e:	4b11      	ldr	r3, [pc, #68]	; (1e84 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e40:	685b      	ldr	r3, [r3, #4]
    1e42:	2000      	movs	r0, #0
    1e44:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e46:	4b0f      	ldr	r3, [pc, #60]	; (1e84 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e48:	689b      	ldr	r3, [r3, #8]
    1e4a:	2057      	movs	r0, #87	; 0x57
    1e4c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e4e:	4b0e      	ldr	r3, [pc, #56]	; (1e88 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1e50:	685b      	ldr	r3, [r3, #4]
    1e52:	2000      	movs	r0, #0
    1e54:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e56:	4b0d      	ldr	r3, [pc, #52]	; (1e8c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	2100      	movs	r1, #0
    1e5c:	2000      	movs	r0, #0
    1e5e:	4798      	blx	r3
    }
}
    1e60:	bf00      	nop
    1e62:	bd08      	pop	{r3, pc}
    1e64:	1fff8b38 	.word	0x1fff8b38
    1e68:	00010724 	.word	0x00010724
    1e6c:	00010638 	.word	0x00010638
    1e70:	00010674 	.word	0x00010674
    1e74:	0001067c 	.word	0x0001067c
    1e78:	000106a4 	.word	0x000106a4
    1e7c:	000106b0 	.word	0x000106b0
    1e80:	000106e8 	.word	0x000106e8
    1e84:	00010734 	.word	0x00010734
    1e88:	00010760 	.word	0x00010760
    1e8c:	0001075c 	.word	0x0001075c

00001e90 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1e90:	b500      	push	{lr}
    1e92:	b085      	sub	sp, #20
    1e94:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1e96:	9b01      	ldr	r3, [sp, #4]
    1e98:	7adb      	ldrb	r3, [r3, #11]
    1e9a:	9303      	str	r3, [sp, #12]
    1e9c:	e01f      	b.n	1ede <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1e9e:	9b03      	ldr	r3, [sp, #12]
    1ea0:	1e5a      	subs	r2, r3, #1
    1ea2:	9b01      	ldr	r3, [sp, #4]
    1ea4:	320d      	adds	r2, #13
    1ea6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1eaa:	495a      	ldr	r1, [pc, #360]	; (2014 <Clock_Ip_ResetClockConfiguration+0x184>)
    1eac:	4613      	mov	r3, r2
    1eae:	00db      	lsls	r3, r3, #3
    1eb0:	4413      	add	r3, r2
    1eb2:	440b      	add	r3, r1
    1eb4:	3301      	adds	r3, #1
    1eb6:	781b      	ldrb	r3, [r3, #0]
    1eb8:	461a      	mov	r2, r3
    1eba:	4b57      	ldr	r3, [pc, #348]	; (2018 <Clock_Ip_ResetClockConfiguration+0x188>)
    1ebc:	5c9b      	ldrb	r3, [r3, r2]
    1ebe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1ec0:	4a56      	ldr	r2, [pc, #344]	; (201c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1ec2:	9b02      	ldr	r3, [sp, #8]
    1ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1ec8:	9a03      	ldr	r2, [sp, #12]
    1eca:	3a01      	subs	r2, #1
    1ecc:	320d      	adds	r2, #13
    1ece:	00d2      	lsls	r2, r2, #3
    1ed0:	9901      	ldr	r1, [sp, #4]
    1ed2:	440a      	add	r2, r1
    1ed4:	4610      	mov	r0, r2
    1ed6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1ed8:	9b03      	ldr	r3, [sp, #12]
    1eda:	3b01      	subs	r3, #1
    1edc:	9303      	str	r3, [sp, #12]
    1ede:	9b03      	ldr	r3, [sp, #12]
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d1dc      	bne.n	1e9e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1ee4:	9b01      	ldr	r3, [sp, #4]
    1ee6:	7b9b      	ldrb	r3, [r3, #14]
    1ee8:	9303      	str	r3, [sp, #12]
    1eea:	e026      	b.n	1f3a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1eec:	9b03      	ldr	r3, [sp, #12]
    1eee:	3b01      	subs	r3, #1
    1ef0:	9a01      	ldr	r2, [sp, #4]
    1ef2:	3324      	adds	r3, #36	; 0x24
    1ef4:	011b      	lsls	r3, r3, #4
    1ef6:	4413      	add	r3, r2
    1ef8:	3304      	adds	r3, #4
    1efa:	681a      	ldr	r2, [r3, #0]
    1efc:	4945      	ldr	r1, [pc, #276]	; (2014 <Clock_Ip_ResetClockConfiguration+0x184>)
    1efe:	4613      	mov	r3, r2
    1f00:	00db      	lsls	r3, r3, #3
    1f02:	4413      	add	r3, r2
    1f04:	440b      	add	r3, r1
    1f06:	3301      	adds	r3, #1
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	461a      	mov	r2, r3
    1f0c:	4b44      	ldr	r3, [pc, #272]	; (2020 <Clock_Ip_ResetClockConfiguration+0x190>)
    1f0e:	5c9b      	ldrb	r3, [r3, r2]
    1f10:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1f12:	4944      	ldr	r1, [pc, #272]	; (2024 <Clock_Ip_ResetClockConfiguration+0x194>)
    1f14:	9a02      	ldr	r2, [sp, #8]
    1f16:	4613      	mov	r3, r2
    1f18:	005b      	lsls	r3, r3, #1
    1f1a:	4413      	add	r3, r2
    1f1c:	009b      	lsls	r3, r3, #2
    1f1e:	440b      	add	r3, r1
    1f20:	681b      	ldr	r3, [r3, #0]
    1f22:	9a03      	ldr	r2, [sp, #12]
    1f24:	3a01      	subs	r2, #1
    1f26:	3224      	adds	r2, #36	; 0x24
    1f28:	0112      	lsls	r2, r2, #4
    1f2a:	9901      	ldr	r1, [sp, #4]
    1f2c:	440a      	add	r2, r1
    1f2e:	3204      	adds	r2, #4
    1f30:	4610      	mov	r0, r2
    1f32:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f34:	9b03      	ldr	r3, [sp, #12]
    1f36:	3b01      	subs	r3, #1
    1f38:	9303      	str	r3, [sp, #12]
    1f3a:	9b03      	ldr	r3, [sp, #12]
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d1d5      	bne.n	1eec <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f40:	9b01      	ldr	r3, [sp, #4]
    1f42:	7a9b      	ldrb	r3, [r3, #10]
    1f44:	9303      	str	r3, [sp, #12]
    1f46:	e02a      	b.n	1f9e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f48:	9b03      	ldr	r3, [sp, #12]
    1f4a:	1e5a      	subs	r2, r3, #1
    1f4c:	9901      	ldr	r1, [sp, #4]
    1f4e:	4613      	mov	r3, r2
    1f50:	009b      	lsls	r3, r3, #2
    1f52:	4413      	add	r3, r2
    1f54:	00db      	lsls	r3, r3, #3
    1f56:	440b      	add	r3, r1
    1f58:	3340      	adds	r3, #64	; 0x40
    1f5a:	681a      	ldr	r2, [r3, #0]
    1f5c:	492d      	ldr	r1, [pc, #180]	; (2014 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f5e:	4613      	mov	r3, r2
    1f60:	00db      	lsls	r3, r3, #3
    1f62:	4413      	add	r3, r2
    1f64:	440b      	add	r3, r1
    1f66:	3301      	adds	r3, #1
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	461a      	mov	r2, r3
    1f6c:	4b2e      	ldr	r3, [pc, #184]	; (2028 <Clock_Ip_ResetClockConfiguration+0x198>)
    1f6e:	5c9b      	ldrb	r3, [r3, r2]
    1f70:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1f72:	492e      	ldr	r1, [pc, #184]	; (202c <Clock_Ip_ResetClockConfiguration+0x19c>)
    1f74:	9a02      	ldr	r2, [sp, #8]
    1f76:	4613      	mov	r3, r2
    1f78:	009b      	lsls	r3, r3, #2
    1f7a:	4413      	add	r3, r2
    1f7c:	009b      	lsls	r3, r3, #2
    1f7e:	440b      	add	r3, r1
    1f80:	6819      	ldr	r1, [r3, #0]
    1f82:	9b03      	ldr	r3, [sp, #12]
    1f84:	1e5a      	subs	r2, r3, #1
    1f86:	4613      	mov	r3, r2
    1f88:	009b      	lsls	r3, r3, #2
    1f8a:	4413      	add	r3, r2
    1f8c:	00db      	lsls	r3, r3, #3
    1f8e:	3340      	adds	r3, #64	; 0x40
    1f90:	9a01      	ldr	r2, [sp, #4]
    1f92:	4413      	add	r3, r2
    1f94:	4618      	mov	r0, r3
    1f96:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f98:	9b03      	ldr	r3, [sp, #12]
    1f9a:	3b01      	subs	r3, #1
    1f9c:	9303      	str	r3, [sp, #12]
    1f9e:	9b03      	ldr	r3, [sp, #12]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d1d1      	bne.n	1f48 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1fa4:	9b01      	ldr	r3, [sp, #4]
    1fa6:	7a5b      	ldrb	r3, [r3, #9]
    1fa8:	9303      	str	r3, [sp, #12]
    1faa:	e02b      	b.n	2004 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fac:	9b03      	ldr	r3, [sp, #12]
    1fae:	1e5a      	subs	r2, r3, #1
    1fb0:	9901      	ldr	r1, [sp, #4]
    1fb2:	4613      	mov	r3, r2
    1fb4:	009b      	lsls	r3, r3, #2
    1fb6:	4413      	add	r3, r2
    1fb8:	009b      	lsls	r3, r3, #2
    1fba:	440b      	add	r3, r1
    1fbc:	332c      	adds	r3, #44	; 0x2c
    1fbe:	681a      	ldr	r2, [r3, #0]
    1fc0:	4914      	ldr	r1, [pc, #80]	; (2014 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fc2:	4613      	mov	r3, r2
    1fc4:	00db      	lsls	r3, r3, #3
    1fc6:	4413      	add	r3, r2
    1fc8:	440b      	add	r3, r1
    1fca:	3301      	adds	r3, #1
    1fcc:	781b      	ldrb	r3, [r3, #0]
    1fce:	461a      	mov	r2, r3
    1fd0:	4b17      	ldr	r3, [pc, #92]	; (2030 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1fd2:	5c9b      	ldrb	r3, [r3, r2]
    1fd4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1fd6:	4917      	ldr	r1, [pc, #92]	; (2034 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1fd8:	9a02      	ldr	r2, [sp, #8]
    1fda:	4613      	mov	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	4413      	add	r3, r2
    1fe0:	009b      	lsls	r3, r3, #2
    1fe2:	440b      	add	r3, r1
    1fe4:	6819      	ldr	r1, [r3, #0]
    1fe6:	9b03      	ldr	r3, [sp, #12]
    1fe8:	1e5a      	subs	r2, r3, #1
    1fea:	4613      	mov	r3, r2
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	4413      	add	r3, r2
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	3328      	adds	r3, #40	; 0x28
    1ff4:	9a01      	ldr	r2, [sp, #4]
    1ff6:	4413      	add	r3, r2
    1ff8:	3304      	adds	r3, #4
    1ffa:	4618      	mov	r0, r3
    1ffc:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1ffe:	9b03      	ldr	r3, [sp, #12]
    2000:	3b01      	subs	r3, #1
    2002:	9303      	str	r3, [sp, #12]
    2004:	9b03      	ldr	r3, [sp, #12]
    2006:	2b00      	cmp	r3, #0
    2008:	d1d0      	bne.n	1fac <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    200a:	bf00      	nop
    200c:	bf00      	nop
    200e:	b005      	add	sp, #20
    2010:	f85d fb04 	ldr.w	pc, [sp], #4
    2014:	00010128 	.word	0x00010128
    2018:	000100f8 	.word	0x000100f8
    201c:	00010760 	.word	0x00010760
    2020:	000100d8 	.word	0x000100d8
    2024:	000106a4 	.word	0x000106a4
    2028:	000100e8 	.word	0x000100e8
    202c:	00010734 	.word	0x00010734
    2030:	000100a8 	.word	0x000100a8
    2034:	0001067c 	.word	0x0001067c

00002038 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2038:	b500      	push	{lr}
    203a:	b085      	sub	sp, #20
    203c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    203e:	2301      	movs	r3, #1
    2040:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2042:	9801      	ldr	r0, [sp, #4]
    2044:	f000 f818 	bl	2078 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2048:	4b0a      	ldr	r3, [pc, #40]	; (2074 <Clock_Ip_Init+0x3c>)
    204a:	781b      	ldrb	r3, [r3, #0]
    204c:	2b00      	cmp	r3, #0
    204e:	d00a      	beq.n	2066 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2050:	f000 fb74 	bl	273c <Clock_Ip_GetPllStatus>
    2054:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2056:	9b02      	ldr	r3, [sp, #8]
    2058:	2b00      	cmp	r3, #0
    205a:	d106      	bne.n	206a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    205c:	f000 fbf2 	bl	2844 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2060:	2300      	movs	r3, #0
    2062:	9303      	str	r3, [sp, #12]
    2064:	e001      	b.n	206a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2066:	2300      	movs	r3, #0
    2068:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    206a:	9b03      	ldr	r3, [sp, #12]
}
    206c:	4618      	mov	r0, r3
    206e:	b005      	add	sp, #20
    2070:	f85d fb04 	ldr.w	pc, [sp], #4
    2074:	1fff8b3c 	.word	0x1fff8b3c

00002078 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2078:	b510      	push	{r4, lr}
    207a:	b084      	sub	sp, #16
    207c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    207e:	4a9f      	ldr	r2, [pc, #636]	; (22fc <Clock_Ip_InitClock+0x284>)
    2080:	9b01      	ldr	r3, [sp, #4]
    2082:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2084:	2101      	movs	r1, #1
    2086:	9801      	ldr	r0, [sp, #4]
    2088:	f003 fa90 	bl	55ac <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    208c:	4b9b      	ldr	r3, [pc, #620]	; (22fc <Clock_Ip_InitClock+0x284>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	2b00      	cmp	r3, #0
    2092:	d030      	beq.n	20f6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2094:	2300      	movs	r3, #0
    2096:	9303      	str	r3, [sp, #12]
    2098:	e027      	b.n	20ea <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    209a:	9901      	ldr	r1, [sp, #4]
    209c:	9a03      	ldr	r2, [sp, #12]
    209e:	4613      	mov	r3, r2
    20a0:	009b      	lsls	r3, r3, #2
    20a2:	4413      	add	r3, r2
    20a4:	009b      	lsls	r3, r3, #2
    20a6:	440b      	add	r3, r1
    20a8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20ac:	681a      	ldr	r2, [r3, #0]
    20ae:	4994      	ldr	r1, [pc, #592]	; (2300 <Clock_Ip_InitClock+0x288>)
    20b0:	4613      	mov	r3, r2
    20b2:	00db      	lsls	r3, r3, #3
    20b4:	4413      	add	r3, r2
    20b6:	440b      	add	r3, r1
    20b8:	3301      	adds	r3, #1
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	461a      	mov	r2, r3
    20be:	4b91      	ldr	r3, [pc, #580]	; (2304 <Clock_Ip_InitClock+0x28c>)
    20c0:	5c9b      	ldrb	r3, [r3, r2]
    20c2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    20c4:	4a90      	ldr	r2, [pc, #576]	; (2308 <Clock_Ip_InitClock+0x290>)
    20c6:	9b02      	ldr	r3, [sp, #8]
    20c8:	011b      	lsls	r3, r3, #4
    20ca:	4413      	add	r3, r2
    20cc:	6819      	ldr	r1, [r3, #0]
    20ce:	9a03      	ldr	r2, [sp, #12]
    20d0:	4613      	mov	r3, r2
    20d2:	009b      	lsls	r3, r3, #2
    20d4:	4413      	add	r3, r2
    20d6:	009b      	lsls	r3, r3, #2
    20d8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20dc:	9a01      	ldr	r2, [sp, #4]
    20de:	4413      	add	r3, r2
    20e0:	4618      	mov	r0, r3
    20e2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    20e4:	9b03      	ldr	r3, [sp, #12]
    20e6:	3301      	adds	r3, #1
    20e8:	9303      	str	r3, [sp, #12]
    20ea:	9b01      	ldr	r3, [sp, #4]
    20ec:	7c9b      	ldrb	r3, [r3, #18]
    20ee:	461a      	mov	r2, r3
    20f0:	9b03      	ldr	r3, [sp, #12]
    20f2:	4293      	cmp	r3, r2
    20f4:	d3d1      	bcc.n	209a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    20f6:	9801      	ldr	r0, [sp, #4]
    20f8:	f7ff feca 	bl	1e90 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    20fc:	2300      	movs	r3, #0
    20fe:	9303      	str	r3, [sp, #12]
    2100:	e029      	b.n	2156 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2102:	9901      	ldr	r1, [sp, #4]
    2104:	9a03      	ldr	r2, [sp, #12]
    2106:	4613      	mov	r3, r2
    2108:	005b      	lsls	r3, r3, #1
    210a:	4413      	add	r3, r2
    210c:	009b      	lsls	r3, r3, #2
    210e:	440b      	add	r3, r1
    2110:	3314      	adds	r3, #20
    2112:	681a      	ldr	r2, [r3, #0]
    2114:	497a      	ldr	r1, [pc, #488]	; (2300 <Clock_Ip_InitClock+0x288>)
    2116:	4613      	mov	r3, r2
    2118:	00db      	lsls	r3, r3, #3
    211a:	4413      	add	r3, r2
    211c:	440b      	add	r3, r1
    211e:	3301      	adds	r3, #1
    2120:	781b      	ldrb	r3, [r3, #0]
    2122:	461a      	mov	r2, r3
    2124:	4b79      	ldr	r3, [pc, #484]	; (230c <Clock_Ip_InitClock+0x294>)
    2126:	5c9b      	ldrb	r3, [r3, r2]
    2128:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    212a:	4979      	ldr	r1, [pc, #484]	; (2310 <Clock_Ip_InitClock+0x298>)
    212c:	9a02      	ldr	r2, [sp, #8]
    212e:	4613      	mov	r3, r2
    2130:	005b      	lsls	r3, r3, #1
    2132:	4413      	add	r3, r2
    2134:	009b      	lsls	r3, r3, #2
    2136:	440b      	add	r3, r1
    2138:	6819      	ldr	r1, [r3, #0]
    213a:	9a03      	ldr	r2, [sp, #12]
    213c:	4613      	mov	r3, r2
    213e:	005b      	lsls	r3, r3, #1
    2140:	4413      	add	r3, r2
    2142:	009b      	lsls	r3, r3, #2
    2144:	3310      	adds	r3, #16
    2146:	9a01      	ldr	r2, [sp, #4]
    2148:	4413      	add	r3, r2
    214a:	3304      	adds	r3, #4
    214c:	4618      	mov	r0, r3
    214e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2150:	9b03      	ldr	r3, [sp, #12]
    2152:	3301      	adds	r3, #1
    2154:	9303      	str	r3, [sp, #12]
    2156:	9b01      	ldr	r3, [sp, #4]
    2158:	7a1b      	ldrb	r3, [r3, #8]
    215a:	461a      	mov	r2, r3
    215c:	9b03      	ldr	r3, [sp, #12]
    215e:	4293      	cmp	r3, r2
    2160:	d3cf      	bcc.n	2102 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2162:	2300      	movs	r3, #0
    2164:	9303      	str	r3, [sp, #12]
    2166:	e02a      	b.n	21be <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2168:	9901      	ldr	r1, [sp, #4]
    216a:	9a03      	ldr	r2, [sp, #12]
    216c:	4613      	mov	r3, r2
    216e:	009b      	lsls	r3, r3, #2
    2170:	4413      	add	r3, r2
    2172:	009b      	lsls	r3, r3, #2
    2174:	440b      	add	r3, r1
    2176:	332c      	adds	r3, #44	; 0x2c
    2178:	681a      	ldr	r2, [r3, #0]
    217a:	4961      	ldr	r1, [pc, #388]	; (2300 <Clock_Ip_InitClock+0x288>)
    217c:	4613      	mov	r3, r2
    217e:	00db      	lsls	r3, r3, #3
    2180:	4413      	add	r3, r2
    2182:	440b      	add	r3, r1
    2184:	3301      	adds	r3, #1
    2186:	781b      	ldrb	r3, [r3, #0]
    2188:	461a      	mov	r2, r3
    218a:	4b62      	ldr	r3, [pc, #392]	; (2314 <Clock_Ip_InitClock+0x29c>)
    218c:	5c9b      	ldrb	r3, [r3, r2]
    218e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2190:	4961      	ldr	r1, [pc, #388]	; (2318 <Clock_Ip_InitClock+0x2a0>)
    2192:	9a02      	ldr	r2, [sp, #8]
    2194:	4613      	mov	r3, r2
    2196:	009b      	lsls	r3, r3, #2
    2198:	4413      	add	r3, r2
    219a:	009b      	lsls	r3, r3, #2
    219c:	440b      	add	r3, r1
    219e:	3304      	adds	r3, #4
    21a0:	6819      	ldr	r1, [r3, #0]
    21a2:	9a03      	ldr	r2, [sp, #12]
    21a4:	4613      	mov	r3, r2
    21a6:	009b      	lsls	r3, r3, #2
    21a8:	4413      	add	r3, r2
    21aa:	009b      	lsls	r3, r3, #2
    21ac:	3328      	adds	r3, #40	; 0x28
    21ae:	9a01      	ldr	r2, [sp, #4]
    21b0:	4413      	add	r3, r2
    21b2:	3304      	adds	r3, #4
    21b4:	4618      	mov	r0, r3
    21b6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21b8:	9b03      	ldr	r3, [sp, #12]
    21ba:	3301      	adds	r3, #1
    21bc:	9303      	str	r3, [sp, #12]
    21be:	9b01      	ldr	r3, [sp, #4]
    21c0:	7a5b      	ldrb	r3, [r3, #9]
    21c2:	461a      	mov	r2, r3
    21c4:	9b03      	ldr	r3, [sp, #12]
    21c6:	4293      	cmp	r3, r2
    21c8:	d3ce      	bcc.n	2168 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    21ca:	9801      	ldr	r0, [sp, #4]
    21cc:	f7ff fdb0 	bl	1d30 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    21d0:	2300      	movs	r3, #0
    21d2:	9303      	str	r3, [sp, #12]
    21d4:	e028      	b.n	2228 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    21d6:	9901      	ldr	r1, [sp, #4]
    21d8:	9a03      	ldr	r2, [sp, #12]
    21da:	4613      	mov	r3, r2
    21dc:	009b      	lsls	r3, r3, #2
    21de:	4413      	add	r3, r2
    21e0:	009b      	lsls	r3, r3, #2
    21e2:	440b      	add	r3, r1
    21e4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    21e8:	681a      	ldr	r2, [r3, #0]
    21ea:	4945      	ldr	r1, [pc, #276]	; (2300 <Clock_Ip_InitClock+0x288>)
    21ec:	4613      	mov	r3, r2
    21ee:	00db      	lsls	r3, r3, #3
    21f0:	4413      	add	r3, r2
    21f2:	440b      	add	r3, r1
    21f4:	3301      	adds	r3, #1
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	461a      	mov	r2, r3
    21fa:	4b48      	ldr	r3, [pc, #288]	; (231c <Clock_Ip_InitClock+0x2a4>)
    21fc:	5c9b      	ldrb	r3, [r3, r2]
    21fe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2200:	4a47      	ldr	r2, [pc, #284]	; (2320 <Clock_Ip_InitClock+0x2a8>)
    2202:	9b02      	ldr	r3, [sp, #8]
    2204:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2208:	9a03      	ldr	r2, [sp, #12]
    220a:	4613      	mov	r3, r2
    220c:	009b      	lsls	r3, r3, #2
    220e:	4413      	add	r3, r2
    2210:	009b      	lsls	r3, r3, #2
    2212:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2216:	9a01      	ldr	r2, [sp, #4]
    2218:	4413      	add	r3, r2
    221a:	3304      	adds	r3, #4
    221c:	9903      	ldr	r1, [sp, #12]
    221e:	4618      	mov	r0, r3
    2220:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2222:	9b03      	ldr	r3, [sp, #12]
    2224:	3301      	adds	r3, #1
    2226:	9303      	str	r3, [sp, #12]
    2228:	9b01      	ldr	r3, [sp, #4]
    222a:	7c5b      	ldrb	r3, [r3, #17]
    222c:	461a      	mov	r2, r3
    222e:	9b03      	ldr	r3, [sp, #12]
    2230:	4293      	cmp	r3, r2
    2232:	d3d0      	bcc.n	21d6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2234:	2300      	movs	r3, #0
    2236:	9303      	str	r3, [sp, #12]
    2238:	e026      	b.n	2288 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    223a:	9901      	ldr	r1, [sp, #4]
    223c:	9a03      	ldr	r2, [sp, #12]
    223e:	4613      	mov	r3, r2
    2240:	005b      	lsls	r3, r3, #1
    2242:	4413      	add	r3, r2
    2244:	009b      	lsls	r3, r3, #2
    2246:	440b      	add	r3, r1
    2248:	f503 730e 	add.w	r3, r3, #568	; 0x238
    224c:	681a      	ldr	r2, [r3, #0]
    224e:	492c      	ldr	r1, [pc, #176]	; (2300 <Clock_Ip_InitClock+0x288>)
    2250:	4613      	mov	r3, r2
    2252:	00db      	lsls	r3, r3, #3
    2254:	4413      	add	r3, r2
    2256:	440b      	add	r3, r1
    2258:	3301      	adds	r3, #1
    225a:	781b      	ldrb	r3, [r3, #0]
    225c:	461a      	mov	r2, r3
    225e:	4b31      	ldr	r3, [pc, #196]	; (2324 <Clock_Ip_InitClock+0x2ac>)
    2260:	5c9b      	ldrb	r3, [r3, r2]
    2262:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2264:	4a30      	ldr	r2, [pc, #192]	; (2328 <Clock_Ip_InitClock+0x2b0>)
    2266:	9b02      	ldr	r3, [sp, #8]
    2268:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    226c:	9a03      	ldr	r2, [sp, #12]
    226e:	4613      	mov	r3, r2
    2270:	005b      	lsls	r3, r3, #1
    2272:	4413      	add	r3, r2
    2274:	009b      	lsls	r3, r3, #2
    2276:	f503 730e 	add.w	r3, r3, #568	; 0x238
    227a:	9a01      	ldr	r2, [sp, #4]
    227c:	4413      	add	r3, r2
    227e:	4618      	mov	r0, r3
    2280:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2282:	9b03      	ldr	r3, [sp, #12]
    2284:	3301      	adds	r3, #1
    2286:	9303      	str	r3, [sp, #12]
    2288:	9b01      	ldr	r3, [sp, #4]
    228a:	7b5b      	ldrb	r3, [r3, #13]
    228c:	461a      	mov	r2, r3
    228e:	9b03      	ldr	r3, [sp, #12]
    2290:	4293      	cmp	r3, r2
    2292:	d3d2      	bcc.n	223a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2294:	2300      	movs	r3, #0
    2296:	9303      	str	r3, [sp, #12]
    2298:	e026      	b.n	22e8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    229a:	9901      	ldr	r1, [sp, #4]
    229c:	9a03      	ldr	r2, [sp, #12]
    229e:	4613      	mov	r3, r2
    22a0:	005b      	lsls	r3, r3, #1
    22a2:	4413      	add	r3, r2
    22a4:	009b      	lsls	r3, r3, #2
    22a6:	440b      	add	r3, r1
    22a8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22ac:	681a      	ldr	r2, [r3, #0]
    22ae:	4914      	ldr	r1, [pc, #80]	; (2300 <Clock_Ip_InitClock+0x288>)
    22b0:	4613      	mov	r3, r2
    22b2:	00db      	lsls	r3, r3, #3
    22b4:	4413      	add	r3, r2
    22b6:	440b      	add	r3, r1
    22b8:	3301      	adds	r3, #1
    22ba:	781b      	ldrb	r3, [r3, #0]
    22bc:	461a      	mov	r2, r3
    22be:	4b1b      	ldr	r3, [pc, #108]	; (232c <Clock_Ip_InitClock+0x2b4>)
    22c0:	5c9b      	ldrb	r3, [r3, r2]
    22c2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    22c4:	4a1a      	ldr	r2, [pc, #104]	; (2330 <Clock_Ip_InitClock+0x2b8>)
    22c6:	9b02      	ldr	r3, [sp, #8]
    22c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    22cc:	9a03      	ldr	r2, [sp, #12]
    22ce:	4613      	mov	r3, r2
    22d0:	005b      	lsls	r3, r3, #1
    22d2:	4413      	add	r3, r2
    22d4:	009b      	lsls	r3, r3, #2
    22d6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    22da:	9a01      	ldr	r2, [sp, #4]
    22dc:	4413      	add	r3, r2
    22de:	4618      	mov	r0, r3
    22e0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	3301      	adds	r3, #1
    22e6:	9303      	str	r3, [sp, #12]
    22e8:	9b01      	ldr	r3, [sp, #4]
    22ea:	7b1b      	ldrb	r3, [r3, #12]
    22ec:	461a      	mov	r2, r3
    22ee:	9b03      	ldr	r3, [sp, #12]
    22f0:	4293      	cmp	r3, r2
    22f2:	d3d2      	bcc.n	229a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22f4:	2300      	movs	r3, #0
    22f6:	9303      	str	r3, [sp, #12]
    22f8:	e044      	b.n	2384 <Clock_Ip_InitClock+0x30c>
    22fa:	bf00      	nop
    22fc:	1fff8b34 	.word	0x1fff8b34
    2300:	00010128 	.word	0x00010128
    2304:	00010118 	.word	0x00010118
    2308:	00010724 	.word	0x00010724
    230c:	000100b8 	.word	0x000100b8
    2310:	000106e8 	.word	0x000106e8
    2314:	000100a8 	.word	0x000100a8
    2318:	0001067c 	.word	0x0001067c
    231c:	00010108 	.word	0x00010108
    2320:	0001075c 	.word	0x0001075c
    2324:	00010098 	.word	0x00010098
    2328:	00010674 	.word	0x00010674
    232c:	00010088 	.word	0x00010088
    2330:	00010638 	.word	0x00010638
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2334:	9901      	ldr	r1, [sp, #4]
    2336:	9a03      	ldr	r2, [sp, #12]
    2338:	4613      	mov	r3, r2
    233a:	005b      	lsls	r3, r3, #1
    233c:	4413      	add	r3, r2
    233e:	009b      	lsls	r3, r3, #2
    2340:	440b      	add	r3, r1
    2342:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2346:	681a      	ldr	r2, [r3, #0]
    2348:	49ac      	ldr	r1, [pc, #688]	; (25fc <Clock_Ip_InitClock+0x584>)
    234a:	4613      	mov	r3, r2
    234c:	00db      	lsls	r3, r3, #3
    234e:	4413      	add	r3, r2
    2350:	440b      	add	r3, r1
    2352:	3301      	adds	r3, #1
    2354:	781b      	ldrb	r3, [r3, #0]
    2356:	461a      	mov	r2, r3
    2358:	4ba9      	ldr	r3, [pc, #676]	; (2600 <Clock_Ip_InitClock+0x588>)
    235a:	5c9b      	ldrb	r3, [r3, r2]
    235c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    235e:	4aa9      	ldr	r2, [pc, #676]	; (2604 <Clock_Ip_InitClock+0x58c>)
    2360:	9b02      	ldr	r3, [sp, #8]
    2362:	00db      	lsls	r3, r3, #3
    2364:	4413      	add	r3, r2
    2366:	6859      	ldr	r1, [r3, #4]
    2368:	9a03      	ldr	r2, [sp, #12]
    236a:	4613      	mov	r3, r2
    236c:	005b      	lsls	r3, r3, #1
    236e:	4413      	add	r3, r2
    2370:	009b      	lsls	r3, r3, #2
    2372:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2376:	9a01      	ldr	r2, [sp, #4]
    2378:	4413      	add	r3, r2
    237a:	4618      	mov	r0, r3
    237c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    237e:	9b03      	ldr	r3, [sp, #12]
    2380:	3301      	adds	r3, #1
    2382:	9303      	str	r3, [sp, #12]
    2384:	9b01      	ldr	r3, [sp, #4]
    2386:	7b5b      	ldrb	r3, [r3, #13]
    2388:	461a      	mov	r2, r3
    238a:	9b03      	ldr	r3, [sp, #12]
    238c:	4293      	cmp	r3, r2
    238e:	d3d1      	bcc.n	2334 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2390:	2300      	movs	r3, #0
    2392:	9303      	str	r3, [sp, #12]
    2394:	e029      	b.n	23ea <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2396:	9901      	ldr	r1, [sp, #4]
    2398:	9a03      	ldr	r2, [sp, #12]
    239a:	4613      	mov	r3, r2
    239c:	009b      	lsls	r3, r3, #2
    239e:	4413      	add	r3, r2
    23a0:	00db      	lsls	r3, r3, #3
    23a2:	440b      	add	r3, r1
    23a4:	3340      	adds	r3, #64	; 0x40
    23a6:	681a      	ldr	r2, [r3, #0]
    23a8:	4994      	ldr	r1, [pc, #592]	; (25fc <Clock_Ip_InitClock+0x584>)
    23aa:	4613      	mov	r3, r2
    23ac:	00db      	lsls	r3, r3, #3
    23ae:	4413      	add	r3, r2
    23b0:	440b      	add	r3, r1
    23b2:	3301      	adds	r3, #1
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	461a      	mov	r2, r3
    23b8:	4b93      	ldr	r3, [pc, #588]	; (2608 <Clock_Ip_InitClock+0x590>)
    23ba:	5c9b      	ldrb	r3, [r3, r2]
    23bc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    23be:	4993      	ldr	r1, [pc, #588]	; (260c <Clock_Ip_InitClock+0x594>)
    23c0:	9a02      	ldr	r2, [sp, #8]
    23c2:	4613      	mov	r3, r2
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	4413      	add	r3, r2
    23c8:	009b      	lsls	r3, r3, #2
    23ca:	440b      	add	r3, r1
    23cc:	3304      	adds	r3, #4
    23ce:	6819      	ldr	r1, [r3, #0]
    23d0:	9a03      	ldr	r2, [sp, #12]
    23d2:	4613      	mov	r3, r2
    23d4:	009b      	lsls	r3, r3, #2
    23d6:	4413      	add	r3, r2
    23d8:	00db      	lsls	r3, r3, #3
    23da:	3340      	adds	r3, #64	; 0x40
    23dc:	9a01      	ldr	r2, [sp, #4]
    23de:	4413      	add	r3, r2
    23e0:	4618      	mov	r0, r3
    23e2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    23e4:	9b03      	ldr	r3, [sp, #12]
    23e6:	3301      	adds	r3, #1
    23e8:	9303      	str	r3, [sp, #12]
    23ea:	9b01      	ldr	r3, [sp, #4]
    23ec:	7a9b      	ldrb	r3, [r3, #10]
    23ee:	461a      	mov	r2, r3
    23f0:	9b03      	ldr	r3, [sp, #12]
    23f2:	4293      	cmp	r3, r2
    23f4:	d3cf      	bcc.n	2396 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    23f6:	2300      	movs	r3, #0
    23f8:	9303      	str	r3, [sp, #12]
    23fa:	e029      	b.n	2450 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    23fc:	9901      	ldr	r1, [sp, #4]
    23fe:	9a03      	ldr	r2, [sp, #12]
    2400:	4613      	mov	r3, r2
    2402:	009b      	lsls	r3, r3, #2
    2404:	4413      	add	r3, r2
    2406:	009b      	lsls	r3, r3, #2
    2408:	440b      	add	r3, r1
    240a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    240e:	681a      	ldr	r2, [r3, #0]
    2410:	497a      	ldr	r1, [pc, #488]	; (25fc <Clock_Ip_InitClock+0x584>)
    2412:	4613      	mov	r3, r2
    2414:	00db      	lsls	r3, r3, #3
    2416:	4413      	add	r3, r2
    2418:	440b      	add	r3, r1
    241a:	3301      	adds	r3, #1
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	461a      	mov	r2, r3
    2420:	4b7b      	ldr	r3, [pc, #492]	; (2610 <Clock_Ip_InitClock+0x598>)
    2422:	5c9b      	ldrb	r3, [r3, r2]
    2424:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2426:	4a7b      	ldr	r2, [pc, #492]	; (2614 <Clock_Ip_InitClock+0x59c>)
    2428:	9b02      	ldr	r3, [sp, #8]
    242a:	011b      	lsls	r3, r3, #4
    242c:	4413      	add	r3, r2
    242e:	3304      	adds	r3, #4
    2430:	681c      	ldr	r4, [r3, #0]
    2432:	9a03      	ldr	r2, [sp, #12]
    2434:	4613      	mov	r3, r2
    2436:	009b      	lsls	r3, r3, #2
    2438:	4413      	add	r3, r2
    243a:	009b      	lsls	r3, r3, #2
    243c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2440:	9a01      	ldr	r2, [sp, #4]
    2442:	4413      	add	r3, r2
    2444:	9903      	ldr	r1, [sp, #12]
    2446:	4618      	mov	r0, r3
    2448:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    244a:	9b03      	ldr	r3, [sp, #12]
    244c:	3301      	adds	r3, #1
    244e:	9303      	str	r3, [sp, #12]
    2450:	9b01      	ldr	r3, [sp, #4]
    2452:	7c9b      	ldrb	r3, [r3, #18]
    2454:	461a      	mov	r2, r3
    2456:	9b03      	ldr	r3, [sp, #12]
    2458:	4293      	cmp	r3, r2
    245a:	d3cf      	bcc.n	23fc <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    245c:	2300      	movs	r3, #0
    245e:	9303      	str	r3, [sp, #12]
    2460:	e02a      	b.n	24b8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2462:	9901      	ldr	r1, [sp, #4]
    2464:	9a03      	ldr	r2, [sp, #12]
    2466:	4613      	mov	r3, r2
    2468:	009b      	lsls	r3, r3, #2
    246a:	4413      	add	r3, r2
    246c:	009b      	lsls	r3, r3, #2
    246e:	440b      	add	r3, r1
    2470:	332c      	adds	r3, #44	; 0x2c
    2472:	681a      	ldr	r2, [r3, #0]
    2474:	4961      	ldr	r1, [pc, #388]	; (25fc <Clock_Ip_InitClock+0x584>)
    2476:	4613      	mov	r3, r2
    2478:	00db      	lsls	r3, r3, #3
    247a:	4413      	add	r3, r2
    247c:	440b      	add	r3, r1
    247e:	3301      	adds	r3, #1
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	461a      	mov	r2, r3
    2484:	4b64      	ldr	r3, [pc, #400]	; (2618 <Clock_Ip_InitClock+0x5a0>)
    2486:	5c9b      	ldrb	r3, [r3, r2]
    2488:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    248a:	4964      	ldr	r1, [pc, #400]	; (261c <Clock_Ip_InitClock+0x5a4>)
    248c:	9a02      	ldr	r2, [sp, #8]
    248e:	4613      	mov	r3, r2
    2490:	009b      	lsls	r3, r3, #2
    2492:	4413      	add	r3, r2
    2494:	009b      	lsls	r3, r3, #2
    2496:	440b      	add	r3, r1
    2498:	3308      	adds	r3, #8
    249a:	6819      	ldr	r1, [r3, #0]
    249c:	9a03      	ldr	r2, [sp, #12]
    249e:	4613      	mov	r3, r2
    24a0:	009b      	lsls	r3, r3, #2
    24a2:	4413      	add	r3, r2
    24a4:	009b      	lsls	r3, r3, #2
    24a6:	3328      	adds	r3, #40	; 0x28
    24a8:	9a01      	ldr	r2, [sp, #4]
    24aa:	4413      	add	r3, r2
    24ac:	3304      	adds	r3, #4
    24ae:	4618      	mov	r0, r3
    24b0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24b2:	9b03      	ldr	r3, [sp, #12]
    24b4:	3301      	adds	r3, #1
    24b6:	9303      	str	r3, [sp, #12]
    24b8:	9b01      	ldr	r3, [sp, #4]
    24ba:	7a5b      	ldrb	r3, [r3, #9]
    24bc:	461a      	mov	r2, r3
    24be:	9b03      	ldr	r3, [sp, #12]
    24c0:	4293      	cmp	r3, r2
    24c2:	d3ce      	bcc.n	2462 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    24c4:	2300      	movs	r3, #0
    24c6:	9303      	str	r3, [sp, #12]
    24c8:	e029      	b.n	251e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    24ca:	9901      	ldr	r1, [sp, #4]
    24cc:	9a03      	ldr	r2, [sp, #12]
    24ce:	4613      	mov	r3, r2
    24d0:	009b      	lsls	r3, r3, #2
    24d2:	4413      	add	r3, r2
    24d4:	00db      	lsls	r3, r3, #3
    24d6:	440b      	add	r3, r1
    24d8:	3340      	adds	r3, #64	; 0x40
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	4947      	ldr	r1, [pc, #284]	; (25fc <Clock_Ip_InitClock+0x584>)
    24de:	4613      	mov	r3, r2
    24e0:	00db      	lsls	r3, r3, #3
    24e2:	4413      	add	r3, r2
    24e4:	440b      	add	r3, r1
    24e6:	3301      	adds	r3, #1
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	461a      	mov	r2, r3
    24ec:	4b46      	ldr	r3, [pc, #280]	; (2608 <Clock_Ip_InitClock+0x590>)
    24ee:	5c9b      	ldrb	r3, [r3, r2]
    24f0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    24f2:	4946      	ldr	r1, [pc, #280]	; (260c <Clock_Ip_InitClock+0x594>)
    24f4:	9a02      	ldr	r2, [sp, #8]
    24f6:	4613      	mov	r3, r2
    24f8:	009b      	lsls	r3, r3, #2
    24fa:	4413      	add	r3, r2
    24fc:	009b      	lsls	r3, r3, #2
    24fe:	440b      	add	r3, r1
    2500:	330c      	adds	r3, #12
    2502:	6819      	ldr	r1, [r3, #0]
    2504:	9a03      	ldr	r2, [sp, #12]
    2506:	4613      	mov	r3, r2
    2508:	009b      	lsls	r3, r3, #2
    250a:	4413      	add	r3, r2
    250c:	00db      	lsls	r3, r3, #3
    250e:	3340      	adds	r3, #64	; 0x40
    2510:	9a01      	ldr	r2, [sp, #4]
    2512:	4413      	add	r3, r2
    2514:	4618      	mov	r0, r3
    2516:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2518:	9b03      	ldr	r3, [sp, #12]
    251a:	3301      	adds	r3, #1
    251c:	9303      	str	r3, [sp, #12]
    251e:	9b01      	ldr	r3, [sp, #4]
    2520:	7a9b      	ldrb	r3, [r3, #10]
    2522:	461a      	mov	r2, r3
    2524:	9b03      	ldr	r3, [sp, #12]
    2526:	4293      	cmp	r3, r2
    2528:	d3cf      	bcc.n	24ca <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    252a:	2300      	movs	r3, #0
    252c:	9303      	str	r3, [sp, #12]
    252e:	e025      	b.n	257c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2530:	9a01      	ldr	r2, [sp, #4]
    2532:	9b03      	ldr	r3, [sp, #12]
    2534:	3324      	adds	r3, #36	; 0x24
    2536:	011b      	lsls	r3, r3, #4
    2538:	4413      	add	r3, r2
    253a:	3304      	adds	r3, #4
    253c:	681a      	ldr	r2, [r3, #0]
    253e:	492f      	ldr	r1, [pc, #188]	; (25fc <Clock_Ip_InitClock+0x584>)
    2540:	4613      	mov	r3, r2
    2542:	00db      	lsls	r3, r3, #3
    2544:	4413      	add	r3, r2
    2546:	440b      	add	r3, r1
    2548:	3301      	adds	r3, #1
    254a:	781b      	ldrb	r3, [r3, #0]
    254c:	461a      	mov	r2, r3
    254e:	4b34      	ldr	r3, [pc, #208]	; (2620 <Clock_Ip_InitClock+0x5a8>)
    2550:	5c9b      	ldrb	r3, [r3, r2]
    2552:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2554:	4933      	ldr	r1, [pc, #204]	; (2624 <Clock_Ip_InitClock+0x5ac>)
    2556:	9a02      	ldr	r2, [sp, #8]
    2558:	4613      	mov	r3, r2
    255a:	005b      	lsls	r3, r3, #1
    255c:	4413      	add	r3, r2
    255e:	009b      	lsls	r3, r3, #2
    2560:	440b      	add	r3, r1
    2562:	3304      	adds	r3, #4
    2564:	681b      	ldr	r3, [r3, #0]
    2566:	9a03      	ldr	r2, [sp, #12]
    2568:	3224      	adds	r2, #36	; 0x24
    256a:	0112      	lsls	r2, r2, #4
    256c:	9901      	ldr	r1, [sp, #4]
    256e:	440a      	add	r2, r1
    2570:	3204      	adds	r2, #4
    2572:	4610      	mov	r0, r2
    2574:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	3301      	adds	r3, #1
    257a:	9303      	str	r3, [sp, #12]
    257c:	9b01      	ldr	r3, [sp, #4]
    257e:	7b9b      	ldrb	r3, [r3, #14]
    2580:	461a      	mov	r2, r3
    2582:	9b03      	ldr	r3, [sp, #12]
    2584:	4293      	cmp	r3, r2
    2586:	d3d3      	bcc.n	2530 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2588:	4b27      	ldr	r3, [pc, #156]	; (2628 <Clock_Ip_InitClock+0x5b0>)
    258a:	2200      	movs	r2, #0
    258c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    258e:	4b26      	ldr	r3, [pc, #152]	; (2628 <Clock_Ip_InitClock+0x5b0>)
    2590:	2200      	movs	r2, #0
    2592:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2594:	4b24      	ldr	r3, [pc, #144]	; (2628 <Clock_Ip_InitClock+0x5b0>)
    2596:	2201      	movs	r2, #1
    2598:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    259a:	4b23      	ldr	r3, [pc, #140]	; (2628 <Clock_Ip_InitClock+0x5b0>)
    259c:	2200      	movs	r2, #0
    259e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    25a0:	f000 fa9c 	bl	2adc <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    25a4:	2300      	movs	r3, #0
    25a6:	9303      	str	r3, [sp, #12]
    25a8:	e04c      	b.n	2644 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    25aa:	9a01      	ldr	r2, [sp, #4]
    25ac:	9b03      	ldr	r3, [sp, #12]
    25ae:	330d      	adds	r3, #13
    25b0:	00db      	lsls	r3, r3, #3
    25b2:	4413      	add	r3, r2
    25b4:	685b      	ldr	r3, [r3, #4]
    25b6:	4a1d      	ldr	r2, [pc, #116]	; (262c <Clock_Ip_InitClock+0x5b4>)
    25b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    25bc:	2b03      	cmp	r3, #3
    25be:	d03b      	beq.n	2638 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    25c0:	9b01      	ldr	r3, [sp, #4]
    25c2:	9a03      	ldr	r2, [sp, #12]
    25c4:	320d      	adds	r2, #13
    25c6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    25ca:	490c      	ldr	r1, [pc, #48]	; (25fc <Clock_Ip_InitClock+0x584>)
    25cc:	4613      	mov	r3, r2
    25ce:	00db      	lsls	r3, r3, #3
    25d0:	4413      	add	r3, r2
    25d2:	440b      	add	r3, r1
    25d4:	3301      	adds	r3, #1
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	461a      	mov	r2, r3
    25da:	4b15      	ldr	r3, [pc, #84]	; (2630 <Clock_Ip_InitClock+0x5b8>)
    25dc:	5c9b      	ldrb	r3, [r3, r2]
    25de:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    25e0:	4a14      	ldr	r2, [pc, #80]	; (2634 <Clock_Ip_InitClock+0x5bc>)
    25e2:	9b02      	ldr	r3, [sp, #8]
    25e4:	00db      	lsls	r3, r3, #3
    25e6:	4413      	add	r3, r2
    25e8:	685b      	ldr	r3, [r3, #4]
    25ea:	9a03      	ldr	r2, [sp, #12]
    25ec:	320d      	adds	r2, #13
    25ee:	00d2      	lsls	r2, r2, #3
    25f0:	9901      	ldr	r1, [sp, #4]
    25f2:	440a      	add	r2, r1
    25f4:	4610      	mov	r0, r2
    25f6:	4798      	blx	r3
    25f8:	e021      	b.n	263e <Clock_Ip_InitClock+0x5c6>
    25fa:	bf00      	nop
    25fc:	00010128 	.word	0x00010128
    2600:	00010098 	.word	0x00010098
    2604:	00010674 	.word	0x00010674
    2608:	000100e8 	.word	0x000100e8
    260c:	00010734 	.word	0x00010734
    2610:	00010118 	.word	0x00010118
    2614:	00010724 	.word	0x00010724
    2618:	000100a8 	.word	0x000100a8
    261c:	0001067c 	.word	0x0001067c
    2620:	000100d8 	.word	0x000100d8
    2624:	000106a4 	.word	0x000106a4
    2628:	1fff8b3c 	.word	0x1fff8b3c
    262c:	00010574 	.word	0x00010574
    2630:	000100f8 	.word	0x000100f8
    2634:	00010760 	.word	0x00010760
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2638:	4b3a      	ldr	r3, [pc, #232]	; (2724 <Clock_Ip_InitClock+0x6ac>)
    263a:	2201      	movs	r2, #1
    263c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	3301      	adds	r3, #1
    2642:	9303      	str	r3, [sp, #12]
    2644:	9b01      	ldr	r3, [sp, #4]
    2646:	7adb      	ldrb	r3, [r3, #11]
    2648:	461a      	mov	r2, r3
    264a:	9b03      	ldr	r3, [sp, #12]
    264c:	4293      	cmp	r3, r2
    264e:	d3ac      	bcc.n	25aa <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2650:	4b34      	ldr	r3, [pc, #208]	; (2724 <Clock_Ip_InitClock+0x6ac>)
    2652:	781b      	ldrb	r3, [r3, #0]
    2654:	f083 0301 	eor.w	r3, r3, #1
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d05e      	beq.n	271c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    265e:	2300      	movs	r3, #0
    2660:	9303      	str	r3, [sp, #12]
    2662:	e01f      	b.n	26a4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2664:	9a01      	ldr	r2, [sp, #4]
    2666:	9b03      	ldr	r3, [sp, #12]
    2668:	334e      	adds	r3, #78	; 0x4e
    266a:	00db      	lsls	r3, r3, #3
    266c:	4413      	add	r3, r2
    266e:	685a      	ldr	r2, [r3, #4]
    2670:	492d      	ldr	r1, [pc, #180]	; (2728 <Clock_Ip_InitClock+0x6b0>)
    2672:	4613      	mov	r3, r2
    2674:	00db      	lsls	r3, r3, #3
    2676:	4413      	add	r3, r2
    2678:	440b      	add	r3, r1
    267a:	3301      	adds	r3, #1
    267c:	781b      	ldrb	r3, [r3, #0]
    267e:	461a      	mov	r2, r3
    2680:	4b2a      	ldr	r3, [pc, #168]	; (272c <Clock_Ip_InitClock+0x6b4>)
    2682:	5c9b      	ldrb	r3, [r3, r2]
    2684:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2686:	4a2a      	ldr	r2, [pc, #168]	; (2730 <Clock_Ip_InitClock+0x6b8>)
    2688:	9b02      	ldr	r3, [sp, #8]
    268a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    268e:	9a03      	ldr	r2, [sp, #12]
    2690:	324e      	adds	r2, #78	; 0x4e
    2692:	00d2      	lsls	r2, r2, #3
    2694:	9901      	ldr	r1, [sp, #4]
    2696:	440a      	add	r2, r1
    2698:	3204      	adds	r2, #4
    269a:	4610      	mov	r0, r2
    269c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    269e:	9b03      	ldr	r3, [sp, #12]
    26a0:	3301      	adds	r3, #1
    26a2:	9303      	str	r3, [sp, #12]
    26a4:	9b01      	ldr	r3, [sp, #4]
    26a6:	7c1b      	ldrb	r3, [r3, #16]
    26a8:	461a      	mov	r2, r3
    26aa:	9b03      	ldr	r3, [sp, #12]
    26ac:	4293      	cmp	r3, r2
    26ae:	d3d9      	bcc.n	2664 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    26b0:	2300      	movs	r3, #0
    26b2:	9303      	str	r3, [sp, #12]
    26b4:	e028      	b.n	2708 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    26b6:	9901      	ldr	r1, [sp, #4]
    26b8:	9a03      	ldr	r2, [sp, #12]
    26ba:	4613      	mov	r3, r2
    26bc:	009b      	lsls	r3, r3, #2
    26be:	4413      	add	r3, r2
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	440b      	add	r3, r1
    26c4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26c8:	681a      	ldr	r2, [r3, #0]
    26ca:	4917      	ldr	r1, [pc, #92]	; (2728 <Clock_Ip_InitClock+0x6b0>)
    26cc:	4613      	mov	r3, r2
    26ce:	00db      	lsls	r3, r3, #3
    26d0:	4413      	add	r3, r2
    26d2:	440b      	add	r3, r1
    26d4:	3301      	adds	r3, #1
    26d6:	781b      	ldrb	r3, [r3, #0]
    26d8:	461a      	mov	r2, r3
    26da:	4b16      	ldr	r3, [pc, #88]	; (2734 <Clock_Ip_InitClock+0x6bc>)
    26dc:	5c9b      	ldrb	r3, [r3, r2]
    26de:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    26e0:	4a15      	ldr	r2, [pc, #84]	; (2738 <Clock_Ip_InitClock+0x6c0>)
    26e2:	9b02      	ldr	r3, [sp, #8]
    26e4:	011b      	lsls	r3, r3, #4
    26e6:	4413      	add	r3, r2
    26e8:	330c      	adds	r3, #12
    26ea:	6819      	ldr	r1, [r3, #0]
    26ec:	9a03      	ldr	r2, [sp, #12]
    26ee:	4613      	mov	r3, r2
    26f0:	009b      	lsls	r3, r3, #2
    26f2:	4413      	add	r3, r2
    26f4:	009b      	lsls	r3, r3, #2
    26f6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    26fa:	9a01      	ldr	r2, [sp, #4]
    26fc:	4413      	add	r3, r2
    26fe:	4618      	mov	r0, r3
    2700:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2702:	9b03      	ldr	r3, [sp, #12]
    2704:	3301      	adds	r3, #1
    2706:	9303      	str	r3, [sp, #12]
    2708:	9b01      	ldr	r3, [sp, #4]
    270a:	7c9b      	ldrb	r3, [r3, #18]
    270c:	461a      	mov	r2, r3
    270e:	9b03      	ldr	r3, [sp, #12]
    2710:	4293      	cmp	r3, r2
    2712:	d3d0      	bcc.n	26b6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2714:	2104      	movs	r1, #4
    2716:	9801      	ldr	r0, [sp, #4]
    2718:	f002 ff48 	bl	55ac <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    271c:	bf00      	nop
    271e:	b004      	add	sp, #16
    2720:	bd10      	pop	{r4, pc}
    2722:	bf00      	nop
    2724:	1fff8b3c 	.word	0x1fff8b3c
    2728:	00010128 	.word	0x00010128
    272c:	000100c8 	.word	0x000100c8
    2730:	000106b0 	.word	0x000106b0
    2734:	00010118 	.word	0x00010118
    2738:	00010724 	.word	0x00010724

0000273c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    273c:	b500      	push	{lr}
    273e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2740:	2302      	movs	r3, #2
    2742:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2744:	2300      	movs	r3, #0
    2746:	9304      	str	r3, [sp, #16]
    2748:	e02c      	b.n	27a4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    274a:	4a36      	ldr	r2, [pc, #216]	; (2824 <Clock_Ip_GetPllStatus+0xe8>)
    274c:	9b04      	ldr	r3, [sp, #16]
    274e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2752:	4935      	ldr	r1, [pc, #212]	; (2828 <Clock_Ip_GetPllStatus+0xec>)
    2754:	4613      	mov	r3, r2
    2756:	00db      	lsls	r3, r3, #3
    2758:	4413      	add	r3, r2
    275a:	440b      	add	r3, r1
    275c:	3301      	adds	r3, #1
    275e:	781b      	ldrb	r3, [r3, #0]
    2760:	461a      	mov	r2, r3
    2762:	4b32      	ldr	r3, [pc, #200]	; (282c <Clock_Ip_GetPllStatus+0xf0>)
    2764:	5c9b      	ldrb	r3, [r3, r2]
    2766:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2768:	4931      	ldr	r1, [pc, #196]	; (2830 <Clock_Ip_GetPllStatus+0xf4>)
    276a:	9a03      	ldr	r2, [sp, #12]
    276c:	4613      	mov	r3, r2
    276e:	009b      	lsls	r3, r3, #2
    2770:	4413      	add	r3, r2
    2772:	009b      	lsls	r3, r3, #2
    2774:	440b      	add	r3, r1
    2776:	3308      	adds	r3, #8
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	492a      	ldr	r1, [pc, #168]	; (2824 <Clock_Ip_GetPllStatus+0xe8>)
    277c:	9a04      	ldr	r2, [sp, #16]
    277e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2782:	4610      	mov	r0, r2
    2784:	4798      	blx	r3
    2786:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2788:	9b02      	ldr	r3, [sp, #8]
    278a:	2b01      	cmp	r3, #1
    278c:	d102      	bne.n	2794 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    278e:	2301      	movs	r3, #1
    2790:	9305      	str	r3, [sp, #20]
            break;
    2792:	e00d      	b.n	27b0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2794:	9b02      	ldr	r3, [sp, #8]
    2796:	2b02      	cmp	r3, #2
    2798:	d101      	bne.n	279e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    279a:	2300      	movs	r3, #0
    279c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    279e:	9b04      	ldr	r3, [sp, #16]
    27a0:	3301      	adds	r3, #1
    27a2:	9304      	str	r3, [sp, #16]
    27a4:	4b23      	ldr	r3, [pc, #140]	; (2834 <Clock_Ip_GetPllStatus+0xf8>)
    27a6:	789b      	ldrb	r3, [r3, #2]
    27a8:	461a      	mov	r2, r3
    27aa:	9b04      	ldr	r3, [sp, #16]
    27ac:	4293      	cmp	r3, r2
    27ae:	d3cc      	bcc.n	274a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    27b0:	9b05      	ldr	r3, [sp, #20]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d130      	bne.n	2818 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    27b6:	2300      	movs	r3, #0
    27b8:	9304      	str	r3, [sp, #16]
    27ba:	e027      	b.n	280c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    27bc:	4a1e      	ldr	r2, [pc, #120]	; (2838 <Clock_Ip_GetPllStatus+0xfc>)
    27be:	9b04      	ldr	r3, [sp, #16]
    27c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27c4:	4918      	ldr	r1, [pc, #96]	; (2828 <Clock_Ip_GetPllStatus+0xec>)
    27c6:	4613      	mov	r3, r2
    27c8:	00db      	lsls	r3, r3, #3
    27ca:	4413      	add	r3, r2
    27cc:	440b      	add	r3, r1
    27ce:	3301      	adds	r3, #1
    27d0:	781b      	ldrb	r3, [r3, #0]
    27d2:	461a      	mov	r2, r3
    27d4:	4b19      	ldr	r3, [pc, #100]	; (283c <Clock_Ip_GetPllStatus+0x100>)
    27d6:	5c9b      	ldrb	r3, [r3, r2]
    27d8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    27da:	4919      	ldr	r1, [pc, #100]	; (2840 <Clock_Ip_GetPllStatus+0x104>)
    27dc:	9a03      	ldr	r2, [sp, #12]
    27de:	4613      	mov	r3, r2
    27e0:	005b      	lsls	r3, r3, #1
    27e2:	4413      	add	r3, r2
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	440b      	add	r3, r1
    27e8:	3308      	adds	r3, #8
    27ea:	681b      	ldr	r3, [r3, #0]
    27ec:	4912      	ldr	r1, [pc, #72]	; (2838 <Clock_Ip_GetPllStatus+0xfc>)
    27ee:	9a04      	ldr	r2, [sp, #16]
    27f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    27f4:	4610      	mov	r0, r2
    27f6:	4798      	blx	r3
    27f8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    27fa:	9b01      	ldr	r3, [sp, #4]
    27fc:	2b01      	cmp	r3, #1
    27fe:	d102      	bne.n	2806 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2800:	2301      	movs	r3, #1
    2802:	9305      	str	r3, [sp, #20]
                break;
    2804:	e008      	b.n	2818 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2806:	9b04      	ldr	r3, [sp, #16]
    2808:	3301      	adds	r3, #1
    280a:	9304      	str	r3, [sp, #16]
    280c:	4b09      	ldr	r3, [pc, #36]	; (2834 <Clock_Ip_GetPllStatus+0xf8>)
    280e:	78db      	ldrb	r3, [r3, #3]
    2810:	461a      	mov	r2, r3
    2812:	9b04      	ldr	r3, [sp, #16]
    2814:	4293      	cmp	r3, r2
    2816:	d3d1      	bcc.n	27bc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2818:	9b05      	ldr	r3, [sp, #20]
}
    281a:	4618      	mov	r0, r3
    281c:	b007      	add	sp, #28
    281e:	f85d fb04 	ldr.w	pc, [sp], #4
    2822:	bf00      	nop
    2824:	00010630 	.word	0x00010630
    2828:	00010128 	.word	0x00010128
    282c:	000100e8 	.word	0x000100e8
    2830:	00010734 	.word	0x00010734
    2834:	1fff8b3c 	.word	0x1fff8b3c
    2838:	00010634 	.word	0x00010634
    283c:	000100d8 	.word	0x000100d8
    2840:	000106a4 	.word	0x000106a4

00002844 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2844:	b500      	push	{lr}
    2846:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2848:	4b55      	ldr	r3, [pc, #340]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    284a:	681b      	ldr	r3, [r3, #0]
    284c:	2b00      	cmp	r3, #0
    284e:	f000 80a2 	beq.w	2996 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2852:	2300      	movs	r3, #0
    2854:	9301      	str	r3, [sp, #4]
    2856:	e02c      	b.n	28b2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2858:	4b51      	ldr	r3, [pc, #324]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    285a:	681a      	ldr	r2, [r3, #0]
    285c:	9b01      	ldr	r3, [sp, #4]
    285e:	330d      	adds	r3, #13
    2860:	00db      	lsls	r3, r3, #3
    2862:	4413      	add	r3, r2
    2864:	685b      	ldr	r3, [r3, #4]
    2866:	4a4f      	ldr	r2, [pc, #316]	; (29a4 <Clock_Ip_DistributePll+0x160>)
    2868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    286c:	2b03      	cmp	r3, #3
    286e:	d11d      	bne.n	28ac <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2870:	4b4b      	ldr	r3, [pc, #300]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    2872:	681b      	ldr	r3, [r3, #0]
    2874:	9a01      	ldr	r2, [sp, #4]
    2876:	320d      	adds	r2, #13
    2878:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    287c:	494a      	ldr	r1, [pc, #296]	; (29a8 <Clock_Ip_DistributePll+0x164>)
    287e:	4613      	mov	r3, r2
    2880:	00db      	lsls	r3, r3, #3
    2882:	4413      	add	r3, r2
    2884:	440b      	add	r3, r1
    2886:	3301      	adds	r3, #1
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	461a      	mov	r2, r3
    288c:	4b47      	ldr	r3, [pc, #284]	; (29ac <Clock_Ip_DistributePll+0x168>)
    288e:	5c9b      	ldrb	r3, [r3, r2]
    2890:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2892:	4a47      	ldr	r2, [pc, #284]	; (29b0 <Clock_Ip_DistributePll+0x16c>)
    2894:	9b00      	ldr	r3, [sp, #0]
    2896:	00db      	lsls	r3, r3, #3
    2898:	4413      	add	r3, r2
    289a:	685b      	ldr	r3, [r3, #4]
    289c:	4a40      	ldr	r2, [pc, #256]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    289e:	6811      	ldr	r1, [r2, #0]
    28a0:	9a01      	ldr	r2, [sp, #4]
    28a2:	320d      	adds	r2, #13
    28a4:	00d2      	lsls	r2, r2, #3
    28a6:	440a      	add	r2, r1
    28a8:	4610      	mov	r0, r2
    28aa:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	3301      	adds	r3, #1
    28b0:	9301      	str	r3, [sp, #4]
    28b2:	4b3b      	ldr	r3, [pc, #236]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    28b4:	681b      	ldr	r3, [r3, #0]
    28b6:	7adb      	ldrb	r3, [r3, #11]
    28b8:	461a      	mov	r2, r3
    28ba:	9b01      	ldr	r3, [sp, #4]
    28bc:	4293      	cmp	r3, r2
    28be:	d3cb      	bcc.n	2858 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    28c0:	4b3c      	ldr	r3, [pc, #240]	; (29b4 <Clock_Ip_DistributePll+0x170>)
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d066      	beq.n	2996 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    28c8:	2300      	movs	r3, #0
    28ca:	9301      	str	r3, [sp, #4]
    28cc:	e021      	b.n	2912 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    28ce:	4b34      	ldr	r3, [pc, #208]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    28d0:	681a      	ldr	r2, [r3, #0]
    28d2:	9b01      	ldr	r3, [sp, #4]
    28d4:	334e      	adds	r3, #78	; 0x4e
    28d6:	00db      	lsls	r3, r3, #3
    28d8:	4413      	add	r3, r2
    28da:	685a      	ldr	r2, [r3, #4]
    28dc:	4932      	ldr	r1, [pc, #200]	; (29a8 <Clock_Ip_DistributePll+0x164>)
    28de:	4613      	mov	r3, r2
    28e0:	00db      	lsls	r3, r3, #3
    28e2:	4413      	add	r3, r2
    28e4:	440b      	add	r3, r1
    28e6:	3301      	adds	r3, #1
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	461a      	mov	r2, r3
    28ec:	4b32      	ldr	r3, [pc, #200]	; (29b8 <Clock_Ip_DistributePll+0x174>)
    28ee:	5c9b      	ldrb	r3, [r3, r2]
    28f0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    28f2:	4a32      	ldr	r2, [pc, #200]	; (29bc <Clock_Ip_DistributePll+0x178>)
    28f4:	9b00      	ldr	r3, [sp, #0]
    28f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    28fa:	4a29      	ldr	r2, [pc, #164]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    28fc:	6811      	ldr	r1, [r2, #0]
    28fe:	9a01      	ldr	r2, [sp, #4]
    2900:	324e      	adds	r2, #78	; 0x4e
    2902:	00d2      	lsls	r2, r2, #3
    2904:	440a      	add	r2, r1
    2906:	3204      	adds	r2, #4
    2908:	4610      	mov	r0, r2
    290a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    290c:	9b01      	ldr	r3, [sp, #4]
    290e:	3301      	adds	r3, #1
    2910:	9301      	str	r3, [sp, #4]
    2912:	4b23      	ldr	r3, [pc, #140]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	7c1b      	ldrb	r3, [r3, #16]
    2918:	461a      	mov	r2, r3
    291a:	9b01      	ldr	r3, [sp, #4]
    291c:	4293      	cmp	r3, r2
    291e:	d3d6      	bcc.n	28ce <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2920:	2300      	movs	r3, #0
    2922:	9301      	str	r3, [sp, #4]
    2924:	e02a      	b.n	297c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2926:	4b1e      	ldr	r3, [pc, #120]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    2928:	6819      	ldr	r1, [r3, #0]
    292a:	9a01      	ldr	r2, [sp, #4]
    292c:	4613      	mov	r3, r2
    292e:	009b      	lsls	r3, r3, #2
    2930:	4413      	add	r3, r2
    2932:	009b      	lsls	r3, r3, #2
    2934:	440b      	add	r3, r1
    2936:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    293a:	681a      	ldr	r2, [r3, #0]
    293c:	491a      	ldr	r1, [pc, #104]	; (29a8 <Clock_Ip_DistributePll+0x164>)
    293e:	4613      	mov	r3, r2
    2940:	00db      	lsls	r3, r3, #3
    2942:	4413      	add	r3, r2
    2944:	440b      	add	r3, r1
    2946:	3301      	adds	r3, #1
    2948:	781b      	ldrb	r3, [r3, #0]
    294a:	461a      	mov	r2, r3
    294c:	4b1c      	ldr	r3, [pc, #112]	; (29c0 <Clock_Ip_DistributePll+0x17c>)
    294e:	5c9b      	ldrb	r3, [r3, r2]
    2950:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2952:	4a1c      	ldr	r2, [pc, #112]	; (29c4 <Clock_Ip_DistributePll+0x180>)
    2954:	9b00      	ldr	r3, [sp, #0]
    2956:	011b      	lsls	r3, r3, #4
    2958:	4413      	add	r3, r2
    295a:	330c      	adds	r3, #12
    295c:	6819      	ldr	r1, [r3, #0]
    295e:	4b10      	ldr	r3, [pc, #64]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    2960:	6818      	ldr	r0, [r3, #0]
    2962:	9a01      	ldr	r2, [sp, #4]
    2964:	4613      	mov	r3, r2
    2966:	009b      	lsls	r3, r3, #2
    2968:	4413      	add	r3, r2
    296a:	009b      	lsls	r3, r3, #2
    296c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2970:	4403      	add	r3, r0
    2972:	4618      	mov	r0, r3
    2974:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2976:	9b01      	ldr	r3, [sp, #4]
    2978:	3301      	adds	r3, #1
    297a:	9301      	str	r3, [sp, #4]
    297c:	4b08      	ldr	r3, [pc, #32]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	7c9b      	ldrb	r3, [r3, #18]
    2982:	461a      	mov	r2, r3
    2984:	9b01      	ldr	r3, [sp, #4]
    2986:	4293      	cmp	r3, r2
    2988:	d3cd      	bcc.n	2926 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    298a:	4b05      	ldr	r3, [pc, #20]	; (29a0 <Clock_Ip_DistributePll+0x15c>)
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	2104      	movs	r1, #4
    2990:	4618      	mov	r0, r3
    2992:	f002 fe0b 	bl	55ac <Clock_Ip_Command>
        }
    }
}
    2996:	bf00      	nop
    2998:	b003      	add	sp, #12
    299a:	f85d fb04 	ldr.w	pc, [sp], #4
    299e:	bf00      	nop
    29a0:	1fff8b34 	.word	0x1fff8b34
    29a4:	00010574 	.word	0x00010574
    29a8:	00010128 	.word	0x00010128
    29ac:	000100f8 	.word	0x000100f8
    29b0:	00010760 	.word	0x00010760
    29b4:	1fff8b3c 	.word	0x1fff8b3c
    29b8:	000100c8 	.word	0x000100c8
    29bc:	000106b0 	.word	0x000106b0
    29c0:	00010118 	.word	0x00010118
    29c4:	00010724 	.word	0x00010724

000029c8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    29c8:	b500      	push	{lr}
    29ca:	b085      	sub	sp, #20
    29cc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    29ce:	490c      	ldr	r1, [pc, #48]	; (2a00 <Clock_Ip_DisableClockMonitor+0x38>)
    29d0:	9a01      	ldr	r2, [sp, #4]
    29d2:	4613      	mov	r3, r2
    29d4:	00db      	lsls	r3, r3, #3
    29d6:	4413      	add	r3, r2
    29d8:	440b      	add	r3, r1
    29da:	3301      	adds	r3, #1
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	461a      	mov	r2, r3
    29e0:	4b08      	ldr	r3, [pc, #32]	; (2a04 <Clock_Ip_DisableClockMonitor+0x3c>)
    29e2:	5c9b      	ldrb	r3, [r3, r2]
    29e4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    29e6:	4a08      	ldr	r2, [pc, #32]	; (2a08 <Clock_Ip_DisableClockMonitor+0x40>)
    29e8:	9b03      	ldr	r3, [sp, #12]
    29ea:	011b      	lsls	r3, r3, #4
    29ec:	4413      	add	r3, r2
    29ee:	3308      	adds	r3, #8
    29f0:	681b      	ldr	r3, [r3, #0]
    29f2:	9801      	ldr	r0, [sp, #4]
    29f4:	4798      	blx	r3
}
    29f6:	bf00      	nop
    29f8:	b005      	add	sp, #20
    29fa:	f85d fb04 	ldr.w	pc, [sp], #4
    29fe:	bf00      	nop
    2a00:	00010128 	.word	0x00010128
    2a04:	00010118 	.word	0x00010118
    2a08:	00010724 	.word	0x00010724

00002a0c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2a0c:	b082      	sub	sp, #8
    2a0e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2a10:	4a02      	ldr	r2, [pc, #8]	; (2a1c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2a12:	9b01      	ldr	r3, [sp, #4]
    2a14:	6013      	str	r3, [r2, #0]
}
    2a16:	bf00      	nop
    2a18:	b002      	add	sp, #8
    2a1a:	4770      	bx	lr
    2a1c:	1fff8b14 	.word	0x1fff8b14

00002a20 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2a20:	b500      	push	{lr}
    2a22:	b085      	sub	sp, #20
    2a24:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a26:	490c      	ldr	r1, [pc, #48]	; (2a58 <Clock_Ip_DisableModuleClock+0x38>)
    2a28:	9a01      	ldr	r2, [sp, #4]
    2a2a:	4613      	mov	r3, r2
    2a2c:	00db      	lsls	r3, r3, #3
    2a2e:	4413      	add	r3, r2
    2a30:	440b      	add	r3, r1
    2a32:	3301      	adds	r3, #1
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	461a      	mov	r2, r3
    2a38:	4b08      	ldr	r3, [pc, #32]	; (2a5c <Clock_Ip_DisableModuleClock+0x3c>)
    2a3a:	5c9b      	ldrb	r3, [r3, r2]
    2a3c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2a3e:	4a08      	ldr	r2, [pc, #32]	; (2a60 <Clock_Ip_DisableModuleClock+0x40>)
    2a40:	9b03      	ldr	r3, [sp, #12]
    2a42:	00db      	lsls	r3, r3, #3
    2a44:	4413      	add	r3, r2
    2a46:	685b      	ldr	r3, [r3, #4]
    2a48:	2101      	movs	r1, #1
    2a4a:	9801      	ldr	r0, [sp, #4]
    2a4c:	4798      	blx	r3
}
    2a4e:	bf00      	nop
    2a50:	b005      	add	sp, #20
    2a52:	f85d fb04 	ldr.w	pc, [sp], #4
    2a56:	bf00      	nop
    2a58:	00010128 	.word	0x00010128
    2a5c:	000100c8 	.word	0x000100c8
    2a60:	000106b0 	.word	0x000106b0

00002a64 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2a64:	b500      	push	{lr}
    2a66:	b085      	sub	sp, #20
    2a68:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a6a:	490c      	ldr	r1, [pc, #48]	; (2a9c <Clock_Ip_EnableModuleClock+0x38>)
    2a6c:	9a01      	ldr	r2, [sp, #4]
    2a6e:	4613      	mov	r3, r2
    2a70:	00db      	lsls	r3, r3, #3
    2a72:	4413      	add	r3, r2
    2a74:	440b      	add	r3, r1
    2a76:	3301      	adds	r3, #1
    2a78:	781b      	ldrb	r3, [r3, #0]
    2a7a:	461a      	mov	r2, r3
    2a7c:	4b08      	ldr	r3, [pc, #32]	; (2aa0 <Clock_Ip_EnableModuleClock+0x3c>)
    2a7e:	5c9b      	ldrb	r3, [r3, r2]
    2a80:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2a82:	4a08      	ldr	r2, [pc, #32]	; (2aa4 <Clock_Ip_EnableModuleClock+0x40>)
    2a84:	9b03      	ldr	r3, [sp, #12]
    2a86:	00db      	lsls	r3, r3, #3
    2a88:	4413      	add	r3, r2
    2a8a:	685b      	ldr	r3, [r3, #4]
    2a8c:	2100      	movs	r1, #0
    2a8e:	9801      	ldr	r0, [sp, #4]
    2a90:	4798      	blx	r3
}
    2a92:	bf00      	nop
    2a94:	b005      	add	sp, #20
    2a96:	f85d fb04 	ldr.w	pc, [sp], #4
    2a9a:	bf00      	nop
    2a9c:	00010128 	.word	0x00010128
    2aa0:	000100c8 	.word	0x000100c8
    2aa4:	000106b0 	.word	0x000106b0

00002aa8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2aa8:	b500      	push	{lr}
    2aaa:	b083      	sub	sp, #12
    2aac:	9001      	str	r0, [sp, #4]
    2aae:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ab0:	4b08      	ldr	r3, [pc, #32]	; (2ad4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2ab2:	2200      	movs	r2, #0
    2ab4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2ab6:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2ab8:	681b      	ldr	r3, [r3, #0]
    2aba:	2102      	movs	r1, #2
    2abc:	4618      	mov	r0, r3
    2abe:	f002 fd75 	bl	55ac <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2ac2:	9900      	ldr	r1, [sp, #0]
    2ac4:	9801      	ldr	r0, [sp, #4]
    2ac6:	f002 fc51 	bl	536c <Clock_Ip_ClockPowerModeChangeNotification>
}
    2aca:	bf00      	nop
    2acc:	b003      	add	sp, #12
    2ace:	f85d fb04 	ldr.w	pc, [sp], #4
    2ad2:	bf00      	nop
    2ad4:	1fff8b10 	.word	0x1fff8b10
    2ad8:	1fff8b34 	.word	0x1fff8b34

00002adc <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2adc:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2ade:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2ae2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2ae4:	4b06      	ldr	r3, [pc, #24]	; (2b00 <Clock_Ip_SetWaitStates+0x24>)
    2ae6:	785b      	ldrb	r3, [r3, #1]
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d005      	beq.n	2af8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2aec:	9b01      	ldr	r3, [sp, #4]
    2aee:	3b01      	subs	r3, #1
    2af0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2af2:	9b01      	ldr	r3, [sp, #4]
    2af4:	2b00      	cmp	r3, #0
    2af6:	d1f9      	bne.n	2aec <Clock_Ip_SetWaitStates+0x10>
    }
}
    2af8:	bf00      	nop
    2afa:	b002      	add	sp, #8
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop
    2b00:	1fff8b3c 	.word	0x1fff8b3c

00002b04 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b04:	b500      	push	{lr}
    2b06:	b083      	sub	sp, #12
    2b08:	9001      	str	r0, [sp, #4]
    2b0a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2b0c:	4b04      	ldr	r3, [pc, #16]	; (2b20 <Clock_Ip_ReportClockErrors+0x1c>)
    2b0e:	681b      	ldr	r3, [r3, #0]
    2b10:	9900      	ldr	r1, [sp, #0]
    2b12:	9801      	ldr	r0, [sp, #4]
    2b14:	4798      	blx	r3
}
    2b16:	bf00      	nop
    2b18:	b003      	add	sp, #12
    2b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b1e:	bf00      	nop
    2b20:	1fff8b14 	.word	0x1fff8b14

00002b24 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2b24:	b500      	push	{lr}
    2b26:	b085      	sub	sp, #20
    2b28:	9003      	str	r0, [sp, #12]
    2b2a:	9102      	str	r1, [sp, #8]
    2b2c:	9201      	str	r2, [sp, #4]
    2b2e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2b30:	2000      	movs	r0, #0
    2b32:	f7fe ffd1 	bl	1ad8 <OsIf_GetCounter>
    2b36:	4602      	mov	r2, r0
    2b38:	9b03      	ldr	r3, [sp, #12]
    2b3a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2b3c:	9b02      	ldr	r3, [sp, #8]
    2b3e:	2200      	movs	r2, #0
    2b40:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2b42:	2100      	movs	r1, #0
    2b44:	9800      	ldr	r0, [sp, #0]
    2b46:	f7ff f813 	bl	1b70 <OsIf_MicrosToTicks>
    2b4a:	4602      	mov	r2, r0
    2b4c:	9b01      	ldr	r3, [sp, #4]
    2b4e:	601a      	str	r2, [r3, #0]
}
    2b50:	bf00      	nop
    2b52:	b005      	add	sp, #20
    2b54:	f85d fb04 	ldr.w	pc, [sp], #4

00002b58 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2b58:	b500      	push	{lr}
    2b5a:	b087      	sub	sp, #28
    2b5c:	9003      	str	r0, [sp, #12]
    2b5e:	9102      	str	r1, [sp, #8]
    2b60:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2b62:	2300      	movs	r3, #0
    2b64:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2b68:	2100      	movs	r1, #0
    2b6a:	9803      	ldr	r0, [sp, #12]
    2b6c:	f7fe ffcd 	bl	1b0a <OsIf_GetElapsed>
    2b70:	4602      	mov	r2, r0
    2b72:	9b02      	ldr	r3, [sp, #8]
    2b74:	681b      	ldr	r3, [r3, #0]
    2b76:	441a      	add	r2, r3
    2b78:	9b02      	ldr	r3, [sp, #8]
    2b7a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2b7c:	9b02      	ldr	r3, [sp, #8]
    2b7e:	681b      	ldr	r3, [r3, #0]
    2b80:	9a01      	ldr	r2, [sp, #4]
    2b82:	429a      	cmp	r2, r3
    2b84:	d802      	bhi.n	2b8c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2b86:	2301      	movs	r3, #1
    2b88:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2b8c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2b90:	4618      	mov	r0, r3
    2b92:	b007      	add	sp, #28
    2b94:	f85d fb04 	ldr.w	pc, [sp], #4

00002b98 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2b98:	b082      	sub	sp, #8
    2b9a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2b9c:	bf00      	nop
    2b9e:	b002      	add	sp, #8
    2ba0:	4770      	bx	lr

00002ba2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2ba2:	b500      	push	{lr}
    2ba4:	b083      	sub	sp, #12
    2ba6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ba8:	9b01      	ldr	r3, [sp, #4]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d002      	beq.n	2bb4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2bae:	9801      	ldr	r0, [sp, #4]
    2bb0:	f000 f8ad 	bl	2d0e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bb4:	bf00      	nop
    2bb6:	b003      	add	sp, #12
    2bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bbc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2bbc:	b500      	push	{lr}
    2bbe:	b083      	sub	sp, #12
    2bc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bc2:	9b01      	ldr	r3, [sp, #4]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d002      	beq.n	2bce <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2bc8:	9801      	ldr	r0, [sp, #4]
    2bca:	f000 f8cd 	bl	2d68 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bce:	bf00      	nop
    2bd0:	b003      	add	sp, #12
    2bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00002bd6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2bd6:	b500      	push	{lr}
    2bd8:	b083      	sub	sp, #12
    2bda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bdc:	9b01      	ldr	r3, [sp, #4]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d002      	beq.n	2be8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2be2:	9801      	ldr	r0, [sp, #4]
    2be4:	f000 f8ee 	bl	2dc4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2be8:	bf00      	nop
    2bea:	b003      	add	sp, #12
    2bec:	f85d fb04 	ldr.w	pc, [sp], #4

00002bf0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2bf0:	b500      	push	{lr}
    2bf2:	b083      	sub	sp, #12
    2bf4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bf6:	9b01      	ldr	r3, [sp, #4]
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	d002      	beq.n	2c02 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2bfc:	9801      	ldr	r0, [sp, #4]
    2bfe:	f000 f8f9 	bl	2df4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c02:	bf00      	nop
    2c04:	b003      	add	sp, #12
    2c06:	f85d fb04 	ldr.w	pc, [sp], #4

00002c0a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c0a:	b500      	push	{lr}
    2c0c:	b083      	sub	sp, #12
    2c0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c10:	9b01      	ldr	r3, [sp, #4]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d002      	beq.n	2c1c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2c16:	9801      	ldr	r0, [sp, #4]
    2c18:	f000 f904 	bl	2e24 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c1c:	bf00      	nop
    2c1e:	b003      	add	sp, #12
    2c20:	f85d fb04 	ldr.w	pc, [sp], #4

00002c24 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c24:	b500      	push	{lr}
    2c26:	b083      	sub	sp, #12
    2c28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c2a:	9b01      	ldr	r3, [sp, #4]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d002      	beq.n	2c36 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2c30:	9801      	ldr	r0, [sp, #4]
    2c32:	f000 f90f 	bl	2e54 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c36:	bf00      	nop
    2c38:	b003      	add	sp, #12
    2c3a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c3e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c3e:	b500      	push	{lr}
    2c40:	b083      	sub	sp, #12
    2c42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c44:	9b01      	ldr	r3, [sp, #4]
    2c46:	2b00      	cmp	r3, #0
    2c48:	d002      	beq.n	2c50 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2c4a:	9801      	ldr	r0, [sp, #4]
    2c4c:	f000 f91a 	bl	2e84 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c50:	bf00      	nop
    2c52:	b003      	add	sp, #12
    2c54:	f85d fb04 	ldr.w	pc, [sp], #4

00002c58 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c58:	b500      	push	{lr}
    2c5a:	b083      	sub	sp, #12
    2c5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c5e:	9b01      	ldr	r3, [sp, #4]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d002      	beq.n	2c6a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2c64:	9801      	ldr	r0, [sp, #4]
    2c66:	f000 f925 	bl	2eb4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c6a:	bf00      	nop
    2c6c:	b003      	add	sp, #12
    2c6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c72 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c72:	b500      	push	{lr}
    2c74:	b083      	sub	sp, #12
    2c76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c78:	9b01      	ldr	r3, [sp, #4]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d002      	beq.n	2c84 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2c7e:	9801      	ldr	r0, [sp, #4]
    2c80:	f000 f930 	bl	2ee4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c84:	bf00      	nop
    2c86:	b003      	add	sp, #12
    2c88:	f85d fb04 	ldr.w	pc, [sp], #4

00002c8c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c8c:	b500      	push	{lr}
    2c8e:	b083      	sub	sp, #12
    2c90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c92:	9b01      	ldr	r3, [sp, #4]
    2c94:	2b00      	cmp	r3, #0
    2c96:	d002      	beq.n	2c9e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2c98:	9801      	ldr	r0, [sp, #4]
    2c9a:	f000 f93b 	bl	2f14 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c9e:	bf00      	nop
    2ca0:	b003      	add	sp, #12
    2ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00002ca6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ca6:	b500      	push	{lr}
    2ca8:	b083      	sub	sp, #12
    2caa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cac:	9b01      	ldr	r3, [sp, #4]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d002      	beq.n	2cb8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2cb2:	9801      	ldr	r0, [sp, #4]
    2cb4:	f000 f946 	bl	2f44 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cb8:	bf00      	nop
    2cba:	b003      	add	sp, #12
    2cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00002cc0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2cc0:	b500      	push	{lr}
    2cc2:	b083      	sub	sp, #12
    2cc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cc6:	9b01      	ldr	r3, [sp, #4]
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d002      	beq.n	2cd2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2ccc:	9801      	ldr	r0, [sp, #4]
    2cce:	f000 f951 	bl	2f74 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd2:	bf00      	nop
    2cd4:	b003      	add	sp, #12
    2cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cda <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2cda:	b500      	push	{lr}
    2cdc:	b083      	sub	sp, #12
    2cde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce0:	9b01      	ldr	r3, [sp, #4]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d002      	beq.n	2cec <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2ce6:	9801      	ldr	r0, [sp, #4]
    2ce8:	f000 f95e 	bl	2fa8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cec:	bf00      	nop
    2cee:	b003      	add	sp, #12
    2cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2cf4:	b500      	push	{lr}
    2cf6:	b083      	sub	sp, #12
    2cf8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d002      	beq.n	2d06 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d00:	9801      	ldr	r0, [sp, #4]
    2d02:	f000 f98b 	bl	301c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d06:	bf00      	nop
    2d08:	b003      	add	sp, #12
    2d0a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d0e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d0e:	b086      	sub	sp, #24
    2d10:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	681a      	ldr	r2, [r3, #0]
    2d16:	4911      	ldr	r1, [pc, #68]	; (2d5c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2d18:	4613      	mov	r3, r2
    2d1a:	00db      	lsls	r3, r3, #3
    2d1c:	4413      	add	r3, r2
    2d1e:	440b      	add	r3, r1
    2d20:	781b      	ldrb	r3, [r3, #0]
    2d22:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d24:	9b01      	ldr	r3, [sp, #4]
    2d26:	685b      	ldr	r3, [r3, #4]
    2d28:	4a0d      	ldr	r2, [pc, #52]	; (2d60 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2d2a:	5cd3      	ldrb	r3, [r2, r3]
    2d2c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d2e:	4a0d      	ldr	r2, [pc, #52]	; (2d64 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d30:	9b05      	ldr	r3, [sp, #20]
    2d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2d3a:	9b03      	ldr	r3, [sp, #12]
    2d3c:	f023 0307 	bic.w	r3, r3, #7
    2d40:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2d42:	9a03      	ldr	r2, [sp, #12]
    2d44:	9b04      	ldr	r3, [sp, #16]
    2d46:	4313      	orrs	r3, r2
    2d48:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2d4a:	4a06      	ldr	r2, [pc, #24]	; (2d64 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d4c:	9b05      	ldr	r3, [sp, #20]
    2d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d52:	9a03      	ldr	r2, [sp, #12]
    2d54:	601a      	str	r2, [r3, #0]
}
    2d56:	bf00      	nop
    2d58:	b006      	add	sp, #24
    2d5a:	4770      	bx	lr
    2d5c:	00010128 	.word	0x00010128
    2d60:	00010520 	.word	0x00010520
    2d64:	00010564 	.word	0x00010564

00002d68 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d68:	b086      	sub	sp, #24
    2d6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	681a      	ldr	r2, [r3, #0]
    2d70:	4911      	ldr	r1, [pc, #68]	; (2db8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2d72:	4613      	mov	r3, r2
    2d74:	00db      	lsls	r3, r3, #3
    2d76:	4413      	add	r3, r2
    2d78:	440b      	add	r3, r1
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d7e:	9b01      	ldr	r3, [sp, #4]
    2d80:	685b      	ldr	r3, [r3, #4]
    2d82:	4a0e      	ldr	r2, [pc, #56]	; (2dbc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2d84:	5cd3      	ldrb	r3, [r2, r3]
    2d86:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d88:	4a0d      	ldr	r2, [pc, #52]	; (2dc0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2d8a:	9b05      	ldr	r3, [sp, #20]
    2d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2d94:	9b03      	ldr	r3, [sp, #12]
    2d96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2d9a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2d9c:	9b04      	ldr	r3, [sp, #16]
    2d9e:	021b      	lsls	r3, r3, #8
    2da0:	9a03      	ldr	r2, [sp, #12]
    2da2:	4313      	orrs	r3, r2
    2da4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2da6:	4a06      	ldr	r2, [pc, #24]	; (2dc0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2da8:	9b05      	ldr	r3, [sp, #20]
    2daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dae:	9a03      	ldr	r2, [sp, #12]
    2db0:	601a      	str	r2, [r3, #0]
}
    2db2:	bf00      	nop
    2db4:	b006      	add	sp, #24
    2db6:	4770      	bx	lr
    2db8:	00010128 	.word	0x00010128
    2dbc:	00010520 	.word	0x00010520
    2dc0:	00010564 	.word	0x00010564

00002dc4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dc4:	b084      	sub	sp, #16
    2dc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2dc8:	4b09      	ldr	r3, [pc, #36]	; (2df0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2dca:	695b      	ldr	r3, [r3, #20]
    2dcc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2dce:	9b03      	ldr	r3, [sp, #12]
    2dd0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2dd4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2dd6:	9b01      	ldr	r3, [sp, #4]
    2dd8:	685b      	ldr	r3, [r3, #4]
    2dda:	3b01      	subs	r3, #1
    2ddc:	041b      	lsls	r3, r3, #16
    2dde:	9a03      	ldr	r2, [sp, #12]
    2de0:	4313      	orrs	r3, r2
    2de2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2de4:	4a02      	ldr	r2, [pc, #8]	; (2df0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2de6:	9b03      	ldr	r3, [sp, #12]
    2de8:	6153      	str	r3, [r2, #20]
}
    2dea:	bf00      	nop
    2dec:	b004      	add	sp, #16
    2dee:	4770      	bx	lr
    2df0:	40064000 	.word	0x40064000

00002df4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2df4:	b084      	sub	sp, #16
    2df6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2df8:	4b09      	ldr	r3, [pc, #36]	; (2e20 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2dfa:	695b      	ldr	r3, [r3, #20]
    2dfc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2dfe:	9b03      	ldr	r3, [sp, #12]
    2e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e04:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e06:	9b01      	ldr	r3, [sp, #4]
    2e08:	685b      	ldr	r3, [r3, #4]
    2e0a:	3b01      	subs	r3, #1
    2e0c:	011b      	lsls	r3, r3, #4
    2e0e:	9a03      	ldr	r2, [sp, #12]
    2e10:	4313      	orrs	r3, r2
    2e12:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e14:	4a02      	ldr	r2, [pc, #8]	; (2e20 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e16:	9b03      	ldr	r3, [sp, #12]
    2e18:	6153      	str	r3, [r2, #20]
}
    2e1a:	bf00      	nop
    2e1c:	b004      	add	sp, #16
    2e1e:	4770      	bx	lr
    2e20:	40064000 	.word	0x40064000

00002e24 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e24:	b084      	sub	sp, #16
    2e26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e28:	4b09      	ldr	r3, [pc, #36]	; (2e50 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e2a:	695b      	ldr	r3, [r3, #20]
    2e2c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2e2e:	9b03      	ldr	r3, [sp, #12]
    2e30:	f023 030f 	bic.w	r3, r3, #15
    2e34:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2e36:	9b01      	ldr	r3, [sp, #4]
    2e38:	685b      	ldr	r3, [r3, #4]
    2e3a:	3b01      	subs	r3, #1
    2e3c:	9a03      	ldr	r2, [sp, #12]
    2e3e:	4313      	orrs	r3, r2
    2e40:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e42:	4a03      	ldr	r2, [pc, #12]	; (2e50 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e44:	9b03      	ldr	r3, [sp, #12]
    2e46:	6153      	str	r3, [r2, #20]
}
    2e48:	bf00      	nop
    2e4a:	b004      	add	sp, #16
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop
    2e50:	40064000 	.word	0x40064000

00002e54 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e54:	b084      	sub	sp, #16
    2e56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e58:	4b09      	ldr	r3, [pc, #36]	; (2e80 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e5a:	699b      	ldr	r3, [r3, #24]
    2e5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2e5e:	9b03      	ldr	r3, [sp, #12]
    2e60:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e64:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2e66:	9b01      	ldr	r3, [sp, #4]
    2e68:	685b      	ldr	r3, [r3, #4]
    2e6a:	3b01      	subs	r3, #1
    2e6c:	041b      	lsls	r3, r3, #16
    2e6e:	9a03      	ldr	r2, [sp, #12]
    2e70:	4313      	orrs	r3, r2
    2e72:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2e74:	4a02      	ldr	r2, [pc, #8]	; (2e80 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2e76:	9b03      	ldr	r3, [sp, #12]
    2e78:	6193      	str	r3, [r2, #24]
}
    2e7a:	bf00      	nop
    2e7c:	b004      	add	sp, #16
    2e7e:	4770      	bx	lr
    2e80:	40064000 	.word	0x40064000

00002e84 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e84:	b084      	sub	sp, #16
    2e86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2e88:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2e8a:	699b      	ldr	r3, [r3, #24]
    2e8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2e8e:	9b03      	ldr	r3, [sp, #12]
    2e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e94:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2e96:	9b01      	ldr	r3, [sp, #4]
    2e98:	685b      	ldr	r3, [r3, #4]
    2e9a:	3b01      	subs	r3, #1
    2e9c:	011b      	lsls	r3, r3, #4
    2e9e:	9a03      	ldr	r2, [sp, #12]
    2ea0:	4313      	orrs	r3, r2
    2ea2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ea4:	4a02      	ldr	r2, [pc, #8]	; (2eb0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2ea6:	9b03      	ldr	r3, [sp, #12]
    2ea8:	6193      	str	r3, [r2, #24]
}
    2eaa:	bf00      	nop
    2eac:	b004      	add	sp, #16
    2eae:	4770      	bx	lr
    2eb0:	40064000 	.word	0x40064000

00002eb4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2eb4:	b084      	sub	sp, #16
    2eb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2eb8:	4b09      	ldr	r3, [pc, #36]	; (2ee0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2eba:	699b      	ldr	r3, [r3, #24]
    2ebc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2ebe:	9b03      	ldr	r3, [sp, #12]
    2ec0:	f023 030f 	bic.w	r3, r3, #15
    2ec4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2ec6:	9b01      	ldr	r3, [sp, #4]
    2ec8:	685b      	ldr	r3, [r3, #4]
    2eca:	3b01      	subs	r3, #1
    2ecc:	9a03      	ldr	r2, [sp, #12]
    2ece:	4313      	orrs	r3, r2
    2ed0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ed2:	4a03      	ldr	r2, [pc, #12]	; (2ee0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2ed4:	9b03      	ldr	r3, [sp, #12]
    2ed6:	6193      	str	r3, [r2, #24]
}
    2ed8:	bf00      	nop
    2eda:	b004      	add	sp, #16
    2edc:	4770      	bx	lr
    2ede:	bf00      	nop
    2ee0:	40064000 	.word	0x40064000

00002ee4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ee4:	b084      	sub	sp, #16
    2ee6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2ee8:	4b09      	ldr	r3, [pc, #36]	; (2f10 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2eea:	69db      	ldr	r3, [r3, #28]
    2eec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2eee:	9b03      	ldr	r3, [sp, #12]
    2ef0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2ef4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2ef6:	9b01      	ldr	r3, [sp, #4]
    2ef8:	685b      	ldr	r3, [r3, #4]
    2efa:	3b01      	subs	r3, #1
    2efc:	041b      	lsls	r3, r3, #16
    2efe:	9a03      	ldr	r2, [sp, #12]
    2f00:	4313      	orrs	r3, r2
    2f02:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f04:	4a02      	ldr	r2, [pc, #8]	; (2f10 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f06:	9b03      	ldr	r3, [sp, #12]
    2f08:	61d3      	str	r3, [r2, #28]
}
    2f0a:	bf00      	nop
    2f0c:	b004      	add	sp, #16
    2f0e:	4770      	bx	lr
    2f10:	40064000 	.word	0x40064000

00002f14 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f14:	b084      	sub	sp, #16
    2f16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f18:	4b09      	ldr	r3, [pc, #36]	; (2f40 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f1a:	69db      	ldr	r3, [r3, #28]
    2f1c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2f1e:	9b03      	ldr	r3, [sp, #12]
    2f20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f24:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2f26:	9b01      	ldr	r3, [sp, #4]
    2f28:	685b      	ldr	r3, [r3, #4]
    2f2a:	3b01      	subs	r3, #1
    2f2c:	011b      	lsls	r3, r3, #4
    2f2e:	9a03      	ldr	r2, [sp, #12]
    2f30:	4313      	orrs	r3, r2
    2f32:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f34:	4a02      	ldr	r2, [pc, #8]	; (2f40 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f36:	9b03      	ldr	r3, [sp, #12]
    2f38:	61d3      	str	r3, [r2, #28]
}
    2f3a:	bf00      	nop
    2f3c:	b004      	add	sp, #16
    2f3e:	4770      	bx	lr
    2f40:	40064000 	.word	0x40064000

00002f44 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f44:	b084      	sub	sp, #16
    2f46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f48:	4b09      	ldr	r3, [pc, #36]	; (2f70 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f4a:	69db      	ldr	r3, [r3, #28]
    2f4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2f4e:	9b03      	ldr	r3, [sp, #12]
    2f50:	f023 030f 	bic.w	r3, r3, #15
    2f54:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2f56:	9b01      	ldr	r3, [sp, #4]
    2f58:	685b      	ldr	r3, [r3, #4]
    2f5a:	3b01      	subs	r3, #1
    2f5c:	9a03      	ldr	r2, [sp, #12]
    2f5e:	4313      	orrs	r3, r2
    2f60:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f62:	4a03      	ldr	r2, [pc, #12]	; (2f70 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f64:	9b03      	ldr	r3, [sp, #12]
    2f66:	61d3      	str	r3, [r2, #28]
}
    2f68:	bf00      	nop
    2f6a:	b004      	add	sp, #16
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop
    2f70:	40064000 	.word	0x40064000

00002f74 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2f74:	b084      	sub	sp, #16
    2f76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2f78:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2f7a:	685b      	ldr	r3, [r3, #4]
    2f7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2f7e:	9b03      	ldr	r3, [sp, #12]
    2f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2f84:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2f86:	9b01      	ldr	r3, [sp, #4]
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	3b01      	subs	r3, #1
    2f8c:	021b      	lsls	r3, r3, #8
    2f8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2f92:	9a03      	ldr	r2, [sp, #12]
    2f94:	4313      	orrs	r3, r2
    2f96:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2f98:	4a02      	ldr	r2, [pc, #8]	; (2fa4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2f9a:	9b03      	ldr	r3, [sp, #12]
    2f9c:	6053      	str	r3, [r2, #4]
}
    2f9e:	bf00      	nop
    2fa0:	b004      	add	sp, #16
    2fa2:	4770      	bx	lr
    2fa4:	40048000 	.word	0x40048000

00002fa8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fa8:	b084      	sub	sp, #16
    2faa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2fac:	4919      	ldr	r1, [pc, #100]	; (3014 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2fae:	9b01      	ldr	r3, [sp, #4]
    2fb0:	681a      	ldr	r2, [r3, #0]
    2fb2:	4819      	ldr	r0, [pc, #100]	; (3018 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2fb4:	4613      	mov	r3, r2
    2fb6:	00db      	lsls	r3, r3, #3
    2fb8:	4413      	add	r3, r2
    2fba:	4403      	add	r3, r0
    2fbc:	3305      	adds	r3, #5
    2fbe:	781b      	ldrb	r3, [r3, #0]
    2fc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2fc4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2fc6:	9b03      	ldr	r3, [sp, #12]
    2fc8:	f023 030f 	bic.w	r3, r3, #15
    2fcc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2fce:	9b01      	ldr	r3, [sp, #4]
    2fd0:	685b      	ldr	r3, [r3, #4]
    2fd2:	3b01      	subs	r3, #1
    2fd4:	f003 0307 	and.w	r3, r3, #7
    2fd8:	9a03      	ldr	r2, [sp, #12]
    2fda:	4313      	orrs	r3, r2
    2fdc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2fde:	9b01      	ldr	r3, [sp, #4]
    2fe0:	7a1b      	ldrb	r3, [r3, #8]
    2fe2:	3b01      	subs	r3, #1
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	f003 0308 	and.w	r3, r3, #8
    2fea:	9a03      	ldr	r2, [sp, #12]
    2fec:	4313      	orrs	r3, r2
    2fee:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2ff0:	4908      	ldr	r1, [pc, #32]	; (3014 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2ff2:	9b01      	ldr	r3, [sp, #4]
    2ff4:	681a      	ldr	r2, [r3, #0]
    2ff6:	4808      	ldr	r0, [pc, #32]	; (3018 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2ff8:	4613      	mov	r3, r2
    2ffa:	00db      	lsls	r3, r3, #3
    2ffc:	4413      	add	r3, r2
    2ffe:	4403      	add	r3, r0
    3000:	3305      	adds	r3, #5
    3002:	781b      	ldrb	r3, [r3, #0]
    3004:	461a      	mov	r2, r3
    3006:	9b03      	ldr	r3, [sp, #12]
    3008:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    300c:	bf00      	nop
    300e:	b004      	add	sp, #16
    3010:	4770      	bx	lr
    3012:	bf00      	nop
    3014:	40065000 	.word	0x40065000
    3018:	00010128 	.word	0x00010128

0000301c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    301c:	b084      	sub	sp, #16
    301e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3020:	4b10      	ldr	r3, [pc, #64]	; (3064 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3024:	4a0f      	ldr	r2, [pc, #60]	; (3064 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    302a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    302c:	4b0d      	ldr	r3, [pc, #52]	; (3064 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3030:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3032:	9b03      	ldr	r3, [sp, #12]
    3034:	f023 030f 	bic.w	r3, r3, #15
    3038:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    303a:	9b01      	ldr	r3, [sp, #4]
    303c:	685b      	ldr	r3, [r3, #4]
    303e:	3b01      	subs	r3, #1
    3040:	005b      	lsls	r3, r3, #1
    3042:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	7a1b      	ldrb	r3, [r3, #8]
    304a:	3b01      	subs	r3, #1
    304c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3050:	4313      	orrs	r3, r2
    3052:	9a03      	ldr	r2, [sp, #12]
    3054:	4313      	orrs	r3, r2
    3056:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3058:	4a02      	ldr	r2, [pc, #8]	; (3064 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    305a:	9b03      	ldr	r3, [sp, #12]
    305c:	6693      	str	r3, [r2, #104]	; 0x68
}
    305e:	bf00      	nop
    3060:	b004      	add	sp, #16
    3062:	4770      	bx	lr
    3064:	40048000 	.word	0x40048000

00003068 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3068:	b082      	sub	sp, #8
    306a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    306c:	bf00      	nop
    306e:	b002      	add	sp, #8
    3070:	4770      	bx	lr
	...

00003074 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3074:	b082      	sub	sp, #8
    3076:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3078:	bf00      	nop
    307a:	b002      	add	sp, #8
    307c:	4770      	bx	lr

0000307e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    307e:	b082      	sub	sp, #8
    3080:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3082:	bf00      	nop
    3084:	b002      	add	sp, #8
    3086:	4770      	bx	lr

00003088 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3088:	b500      	push	{lr}
    308a:	b083      	sub	sp, #12
    308c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	2b00      	cmp	r3, #0
    3092:	d002      	beq.n	309a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3094:	9801      	ldr	r0, [sp, #4]
    3096:	f000 f86a 	bl	316e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    309a:	bf00      	nop
    309c:	b003      	add	sp, #12
    309e:	f85d fb04 	ldr.w	pc, [sp], #4

000030a2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30a2:	b500      	push	{lr}
    30a4:	b083      	sub	sp, #12
    30a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30a8:	9b01      	ldr	r3, [sp, #4]
    30aa:	2b00      	cmp	r3, #0
    30ac:	d002      	beq.n	30b4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    30ae:	9801      	ldr	r0, [sp, #4]
    30b0:	f000 f884 	bl	31bc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    30b4:	bf00      	nop
    30b6:	b003      	add	sp, #12
    30b8:	f85d fb04 	ldr.w	pc, [sp], #4

000030bc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30bc:	b500      	push	{lr}
    30be:	b089      	sub	sp, #36	; 0x24
    30c0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    30c2:	2300      	movs	r3, #0
    30c4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    30c8:	9b01      	ldr	r3, [sp, #4]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d031      	beq.n	3132 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    30ce:	4b1b      	ldr	r3, [pc, #108]	; (313c <Clock_Ip_CompleteSOSC+0x80>)
    30d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30d4:	f003 0301 	and.w	r3, r3, #1
    30d8:	2b00      	cmp	r3, #0
    30da:	d02a      	beq.n	3132 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30dc:	aa03      	add	r2, sp, #12
    30de:	a904      	add	r1, sp, #16
    30e0:	a805      	add	r0, sp, #20
    30e2:	f24c 3350 	movw	r3, #50000	; 0xc350
    30e6:	f7ff fd1d 	bl	2b24 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    30ea:	4b14      	ldr	r3, [pc, #80]	; (313c <Clock_Ip_CompleteSOSC+0x80>)
    30ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30f0:	0e1b      	lsrs	r3, r3, #24
    30f2:	f003 0301 	and.w	r3, r3, #1
    30f6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    30f8:	9a03      	ldr	r2, [sp, #12]
    30fa:	a904      	add	r1, sp, #16
    30fc:	ab05      	add	r3, sp, #20
    30fe:	4618      	mov	r0, r3
    3100:	f7ff fd2a 	bl	2b58 <Clock_Ip_TimeoutExpired>
    3104:	4603      	mov	r3, r0
    3106:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    310a:	9b06      	ldr	r3, [sp, #24]
    310c:	2b00      	cmp	r3, #0
    310e:	d106      	bne.n	311e <Clock_Ip_CompleteSOSC+0x62>
    3110:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3114:	f083 0301 	eor.w	r3, r3, #1
    3118:	b2db      	uxtb	r3, r3
    311a:	2b00      	cmp	r3, #0
    311c:	d1e5      	bne.n	30ea <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    311e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3122:	2b00      	cmp	r3, #0
    3124:	d005      	beq.n	3132 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3126:	9b01      	ldr	r3, [sp, #4]
    3128:	681b      	ldr	r3, [r3, #0]
    312a:	4619      	mov	r1, r3
    312c:	2001      	movs	r0, #1
    312e:	f7ff fce9 	bl	2b04 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3132:	bf00      	nop
    3134:	b009      	add	sp, #36	; 0x24
    3136:	f85d fb04 	ldr.w	pc, [sp], #4
    313a:	bf00      	nop
    313c:	40064000 	.word	0x40064000

00003140 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3140:	b500      	push	{lr}
    3142:	b083      	sub	sp, #12
    3144:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3146:	9801      	ldr	r0, [sp, #4]
    3148:	f000 f8c0 	bl	32cc <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    314c:	bf00      	nop
    314e:	b003      	add	sp, #12
    3150:	f85d fb04 	ldr.w	pc, [sp], #4

00003154 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3154:	b500      	push	{lr}
    3156:	b083      	sub	sp, #12
    3158:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	2b00      	cmp	r3, #0
    315e:	d002      	beq.n	3166 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3160:	9801      	ldr	r0, [sp, #4]
    3162:	f000 f8c3 	bl	32ec <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3166:	bf00      	nop
    3168:	b003      	add	sp, #12
    316a:	f85d fb04 	ldr.w	pc, [sp], #4

0000316e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    316e:	b082      	sub	sp, #8
    3170:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3172:	4b11      	ldr	r3, [pc, #68]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3174:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3178:	4a0f      	ldr	r2, [pc, #60]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    317a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    317e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3182:	4b0d      	ldr	r3, [pc, #52]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3184:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3188:	4a0b      	ldr	r2, [pc, #44]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    318e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3192:	4b09      	ldr	r3, [pc, #36]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3194:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3198:	4a07      	ldr	r2, [pc, #28]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    319a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    319e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    31a2:	4b05      	ldr	r3, [pc, #20]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31a8:	4a03      	ldr	r2, [pc, #12]	; (31b8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31aa:	f023 0301 	bic.w	r3, r3, #1
    31ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    31b2:	bf00      	nop
    31b4:	b002      	add	sp, #8
    31b6:	4770      	bx	lr
    31b8:	40064000 	.word	0x40064000

000031bc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    31bc:	b082      	sub	sp, #8
    31be:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    31c0:	9b01      	ldr	r3, [sp, #4]
    31c2:	891b      	ldrh	r3, [r3, #8]
    31c4:	2b01      	cmp	r3, #1
    31c6:	d174      	bne.n	32b2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    31c8:	9b01      	ldr	r3, [sp, #4]
    31ca:	7bdb      	ldrb	r3, [r3, #15]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d002      	beq.n	31d6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    31d0:	2b01      	cmp	r3, #1
    31d2:	d009      	beq.n	31e8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    31d4:	e011      	b.n	31fa <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    31d6:	4b39      	ldr	r3, [pc, #228]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31dc:	4a37      	ldr	r2, [pc, #220]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31de:	f023 0308 	bic.w	r3, r3, #8
    31e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    31e6:	e008      	b.n	31fa <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    31e8:	4b34      	ldr	r3, [pc, #208]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    31ee:	4a33      	ldr	r2, [pc, #204]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31f0:	f043 0308 	orr.w	r3, r3, #8
    31f4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    31f8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    31fa:	4b30      	ldr	r3, [pc, #192]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    31fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3200:	4a2e      	ldr	r2, [pc, #184]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3202:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3206:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    320a:	9b01      	ldr	r3, [sp, #4]
    320c:	685b      	ldr	r3, [r3, #4]
    320e:	4a2c      	ldr	r2, [pc, #176]	; (32c0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3210:	4293      	cmp	r3, r2
    3212:	d90d      	bls.n	3230 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3214:	9b01      	ldr	r3, [sp, #4]
    3216:	685b      	ldr	r3, [r3, #4]
    3218:	4a2a      	ldr	r2, [pc, #168]	; (32c4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    321a:	4293      	cmp	r3, r2
    321c:	d208      	bcs.n	3230 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    321e:	4b27      	ldr	r3, [pc, #156]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3220:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3224:	4a25      	ldr	r2, [pc, #148]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3226:	f043 0320 	orr.w	r3, r3, #32
    322a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    322e:	e007      	b.n	3240 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3230:	4b22      	ldr	r3, [pc, #136]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3232:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3236:	4a21      	ldr	r2, [pc, #132]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3238:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    323c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3240:	9b01      	ldr	r3, [sp, #4]
    3242:	7b1b      	ldrb	r3, [r3, #12]
    3244:	2b00      	cmp	r3, #0
    3246:	d108      	bne.n	325a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3248:	4b1c      	ldr	r3, [pc, #112]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    324a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    324e:	4a1b      	ldr	r2, [pc, #108]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3250:	f043 0304 	orr.w	r3, r3, #4
    3254:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3258:	e007      	b.n	326a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    325a:	4b18      	ldr	r3, [pc, #96]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    325c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3260:	4a16      	ldr	r2, [pc, #88]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3262:	f023 0304 	bic.w	r3, r3, #4
    3266:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	7c1b      	ldrb	r3, [r3, #16]
    326e:	2b02      	cmp	r3, #2
    3270:	d011      	beq.n	3296 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3272:	2b02      	cmp	r3, #2
    3274:	dc14      	bgt.n	32a0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3276:	2b00      	cmp	r3, #0
    3278:	d002      	beq.n	3280 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    327a:	2b01      	cmp	r3, #1
    327c:	d005      	beq.n	328a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    327e:	e00f      	b.n	32a0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3280:	4b0e      	ldr	r3, [pc, #56]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3282:	2201      	movs	r2, #1
    3284:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3288:	e014      	b.n	32b4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    328a:	4b0c      	ldr	r3, [pc, #48]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    328c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3290:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3294:	e00e      	b.n	32b4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3296:	4b09      	ldr	r3, [pc, #36]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3298:	4a0b      	ldr	r2, [pc, #44]	; (32c8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    329a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    329e:	e009      	b.n	32b4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    32a0:	4b06      	ldr	r3, [pc, #24]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32a6:	4a05      	ldr	r2, [pc, #20]	; (32bc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a8:	f043 0301 	orr.w	r3, r3, #1
    32ac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    32b0:	e000      	b.n	32b4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    32b2:	bf00      	nop
}
    32b4:	bf00      	nop
    32b6:	b002      	add	sp, #8
    32b8:	4770      	bx	lr
    32ba:	bf00      	nop
    32bc:	40064000 	.word	0x40064000
    32c0:	003d08ff 	.word	0x003d08ff
    32c4:	007a1200 	.word	0x007a1200
    32c8:	00030001 	.word	0x00030001

000032cc <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    32cc:	b082      	sub	sp, #8
    32ce:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    32d0:	4b05      	ldr	r3, [pc, #20]	; (32e8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32d6:	4a04      	ldr	r2, [pc, #16]	; (32e8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    32d8:	f023 0301 	bic.w	r3, r3, #1
    32dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    32e0:	bf00      	nop
    32e2:	b002      	add	sp, #8
    32e4:	4770      	bx	lr
    32e6:	bf00      	nop
    32e8:	40064000 	.word	0x40064000

000032ec <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    32ec:	b082      	sub	sp, #8
    32ee:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    32f0:	9b01      	ldr	r3, [sp, #4]
    32f2:	891b      	ldrh	r3, [r3, #8]
    32f4:	2b01      	cmp	r3, #1
    32f6:	d107      	bne.n	3308 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    32f8:	4b05      	ldr	r3, [pc, #20]	; (3310 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    32fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32fe:	4a04      	ldr	r2, [pc, #16]	; (3310 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3300:	f043 0301 	orr.w	r3, r3, #1
    3304:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3308:	bf00      	nop
    330a:	b002      	add	sp, #8
    330c:	4770      	bx	lr
    330e:	bf00      	nop
    3310:	40064000 	.word	0x40064000

00003314 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3314:	b082      	sub	sp, #8
    3316:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3318:	bf00      	nop
    331a:	b002      	add	sp, #8
    331c:	4770      	bx	lr

0000331e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    331e:	b082      	sub	sp, #8
    3320:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3322:	2300      	movs	r3, #0
}
    3324:	4618      	mov	r0, r3
    3326:	b002      	add	sp, #8
    3328:	4770      	bx	lr

0000332a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    332a:	b082      	sub	sp, #8
    332c:	9001      	str	r0, [sp, #4]
    332e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3330:	bf00      	nop
    3332:	b002      	add	sp, #8
    3334:	4770      	bx	lr
	...

00003338 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3338:	b082      	sub	sp, #8
    333a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    333c:	bf00      	nop
    333e:	b002      	add	sp, #8
    3340:	4770      	bx	lr

00003342 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3342:	b082      	sub	sp, #8
    3344:	9001      	str	r0, [sp, #4]
    3346:	460b      	mov	r3, r1
    3348:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    334c:	bf00      	nop
    334e:	b002      	add	sp, #8
    3350:	4770      	bx	lr

00003352 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3352:	b500      	push	{lr}
    3354:	b083      	sub	sp, #12
    3356:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3358:	9b01      	ldr	r3, [sp, #4]
    335a:	2b00      	cmp	r3, #0
    335c:	d002      	beq.n	3364 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    335e:	9801      	ldr	r0, [sp, #4]
    3360:	f000 f8e7 	bl	3532 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3364:	bf00      	nop
    3366:	b003      	add	sp, #12
    3368:	f85d fb04 	ldr.w	pc, [sp], #4

0000336c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    336c:	b500      	push	{lr}
    336e:	b085      	sub	sp, #20
    3370:	9001      	str	r0, [sp, #4]
    3372:	460b      	mov	r3, r1
    3374:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3378:	9b01      	ldr	r3, [sp, #4]
    337a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    337c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3380:	2b00      	cmp	r3, #0
    3382:	d003      	beq.n	338c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3384:	2300      	movs	r3, #0
    3386:	f8ad 300c 	strh.w	r3, [sp, #12]
    338a:	e002      	b.n	3392 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    338c:	2301      	movs	r3, #1
    338e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3392:	ab02      	add	r3, sp, #8
    3394:	4618      	mov	r0, r3
    3396:	f7ff ffdc 	bl	3352 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    339a:	bf00      	nop
    339c:	b005      	add	sp, #20
    339e:	f85d fb04 	ldr.w	pc, [sp], #4

000033a2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    33a2:	b500      	push	{lr}
    33a4:	b083      	sub	sp, #12
    33a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33a8:	9b01      	ldr	r3, [sp, #4]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d002      	beq.n	33b4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    33ae:	9801      	ldr	r0, [sp, #4]
    33b0:	f000 f8d6 	bl	3560 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33b4:	bf00      	nop
    33b6:	b003      	add	sp, #12
    33b8:	f85d fb04 	ldr.w	pc, [sp], #4

000033bc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33bc:	b500      	push	{lr}
    33be:	b085      	sub	sp, #20
    33c0:	9001      	str	r0, [sp, #4]
    33c2:	460b      	mov	r3, r1
    33c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33c8:	9b01      	ldr	r3, [sp, #4]
    33ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d003      	beq.n	33dc <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    33d4:	2300      	movs	r3, #0
    33d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    33da:	e002      	b.n	33e2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33dc:	2301      	movs	r3, #1
    33de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    33e2:	ab02      	add	r3, sp, #8
    33e4:	4618      	mov	r0, r3
    33e6:	f7ff ffdc 	bl	33a2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    33ea:	bf00      	nop
    33ec:	b005      	add	sp, #20
    33ee:	f85d fb04 	ldr.w	pc, [sp], #4

000033f2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    33f2:	b500      	push	{lr}
    33f4:	b083      	sub	sp, #12
    33f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33f8:	9b01      	ldr	r3, [sp, #4]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d002      	beq.n	3404 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    33fe:	9801      	ldr	r0, [sp, #4]
    3400:	f000 f8c6 	bl	3590 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3404:	bf00      	nop
    3406:	b003      	add	sp, #12
    3408:	f85d fb04 	ldr.w	pc, [sp], #4

0000340c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    340c:	b500      	push	{lr}
    340e:	b085      	sub	sp, #20
    3410:	9001      	str	r0, [sp, #4]
    3412:	460b      	mov	r3, r1
    3414:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3418:	9b01      	ldr	r3, [sp, #4]
    341a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    341c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3420:	2b00      	cmp	r3, #0
    3422:	d003      	beq.n	342c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3424:	2300      	movs	r3, #0
    3426:	f8ad 300c 	strh.w	r3, [sp, #12]
    342a:	e002      	b.n	3432 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    342c:	2301      	movs	r3, #1
    342e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3432:	ab02      	add	r3, sp, #8
    3434:	4618      	mov	r0, r3
    3436:	f7ff ffdc 	bl	33f2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    343a:	bf00      	nop
    343c:	b005      	add	sp, #20
    343e:	f85d fb04 	ldr.w	pc, [sp], #4

00003442 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3442:	b500      	push	{lr}
    3444:	b083      	sub	sp, #12
    3446:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3448:	9b01      	ldr	r3, [sp, #4]
    344a:	2b00      	cmp	r3, #0
    344c:	d002      	beq.n	3454 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    344e:	9801      	ldr	r0, [sp, #4]
    3450:	f000 f8b6 	bl	35c0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3454:	bf00      	nop
    3456:	b003      	add	sp, #12
    3458:	f85d fb04 	ldr.w	pc, [sp], #4

0000345c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    345c:	b500      	push	{lr}
    345e:	b085      	sub	sp, #20
    3460:	9001      	str	r0, [sp, #4]
    3462:	460b      	mov	r3, r1
    3464:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3468:	9b01      	ldr	r3, [sp, #4]
    346a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    346c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3470:	2b00      	cmp	r3, #0
    3472:	d003      	beq.n	347c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3474:	2300      	movs	r3, #0
    3476:	f8ad 300c 	strh.w	r3, [sp, #12]
    347a:	e002      	b.n	3482 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    347c:	2301      	movs	r3, #1
    347e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3482:	ab02      	add	r3, sp, #8
    3484:	4618      	mov	r0, r3
    3486:	f7ff ffdc 	bl	3442 <Clock_Ip_ClockSetPccCgcEnable>
}
    348a:	bf00      	nop
    348c:	b005      	add	sp, #20
    348e:	f85d fb04 	ldr.w	pc, [sp], #4

00003492 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3492:	b500      	push	{lr}
    3494:	b083      	sub	sp, #12
    3496:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	2b00      	cmp	r3, #0
    349c:	d002      	beq.n	34a4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    349e:	9801      	ldr	r0, [sp, #4]
    34a0:	f000 f8bc 	bl	361c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34a4:	bf00      	nop
    34a6:	b003      	add	sp, #12
    34a8:	f85d fb04 	ldr.w	pc, [sp], #4

000034ac <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    34ac:	b500      	push	{lr}
    34ae:	b085      	sub	sp, #20
    34b0:	9001      	str	r0, [sp, #4]
    34b2:	460b      	mov	r3, r1
    34b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34b8:	9b01      	ldr	r3, [sp, #4]
    34ba:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34c0:	2b00      	cmp	r3, #0
    34c2:	d003      	beq.n	34cc <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    34c4:	2300      	movs	r3, #0
    34c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    34ca:	e002      	b.n	34d2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34cc:	2301      	movs	r3, #1
    34ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    34d2:	ab02      	add	r3, sp, #8
    34d4:	4618      	mov	r0, r3
    34d6:	f7ff ffdc 	bl	3492 <Clock_Ip_ClockSetSimGate>
}
    34da:	bf00      	nop
    34dc:	b005      	add	sp, #20
    34de:	f85d fb04 	ldr.w	pc, [sp], #4

000034e2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    34e2:	b500      	push	{lr}
    34e4:	b083      	sub	sp, #12
    34e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34e8:	9b01      	ldr	r3, [sp, #4]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d002      	beq.n	34f4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    34ee:	9801      	ldr	r0, [sp, #4]
    34f0:	f000 f8c0 	bl	3674 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34f4:	bf00      	nop
    34f6:	b003      	add	sp, #12
    34f8:	f85d fb04 	ldr.w	pc, [sp], #4

000034fc <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34fc:	b500      	push	{lr}
    34fe:	b085      	sub	sp, #20
    3500:	9001      	str	r0, [sp, #4]
    3502:	460b      	mov	r3, r1
    3504:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3508:	9b01      	ldr	r3, [sp, #4]
    350a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    350c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3510:	2b00      	cmp	r3, #0
    3512:	d003      	beq.n	351c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3514:	2300      	movs	r3, #0
    3516:	f8ad 300c 	strh.w	r3, [sp, #12]
    351a:	e002      	b.n	3522 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    351c:	2301      	movs	r3, #1
    351e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3522:	ab02      	add	r3, sp, #8
    3524:	4618      	mov	r0, r3
    3526:	f7ff ffdc 	bl	34e2 <Clock_Ip_ClockSetSimTraceEnable>
}
    352a:	bf00      	nop
    352c:	b005      	add	sp, #20
    352e:	f85d fb04 	ldr.w	pc, [sp], #4

00003532 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3532:	b084      	sub	sp, #16
    3534:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3536:	4b09      	ldr	r3, [pc, #36]	; (355c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3538:	691b      	ldr	r3, [r3, #16]
    353a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    353c:	9b03      	ldr	r3, [sp, #12]
    353e:	f023 0301 	bic.w	r3, r3, #1
    3542:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3544:	9b01      	ldr	r3, [sp, #4]
    3546:	889b      	ldrh	r3, [r3, #4]
    3548:	461a      	mov	r2, r3
    354a:	9b03      	ldr	r3, [sp, #12]
    354c:	4313      	orrs	r3, r2
    354e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3550:	4a02      	ldr	r2, [pc, #8]	; (355c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3552:	9b03      	ldr	r3, [sp, #12]
    3554:	6113      	str	r3, [r2, #16]
}
    3556:	bf00      	nop
    3558:	b004      	add	sp, #16
    355a:	4770      	bx	lr
    355c:	40048000 	.word	0x40048000

00003560 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3560:	b084      	sub	sp, #16
    3562:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3564:	4b09      	ldr	r3, [pc, #36]	; (358c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3566:	691b      	ldr	r3, [r3, #16]
    3568:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    356a:	9b03      	ldr	r3, [sp, #12]
    356c:	f023 0302 	bic.w	r3, r3, #2
    3570:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3572:	9b01      	ldr	r3, [sp, #4]
    3574:	889b      	ldrh	r3, [r3, #4]
    3576:	005b      	lsls	r3, r3, #1
    3578:	9a03      	ldr	r2, [sp, #12]
    357a:	4313      	orrs	r3, r2
    357c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    357e:	4a03      	ldr	r2, [pc, #12]	; (358c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3580:	9b03      	ldr	r3, [sp, #12]
    3582:	6113      	str	r3, [r2, #16]
}
    3584:	bf00      	nop
    3586:	b004      	add	sp, #16
    3588:	4770      	bx	lr
    358a:	bf00      	nop
    358c:	40048000 	.word	0x40048000

00003590 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3590:	b084      	sub	sp, #16
    3592:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3594:	4b09      	ldr	r3, [pc, #36]	; (35bc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3596:	685b      	ldr	r3, [r3, #4]
    3598:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    359a:	9b03      	ldr	r3, [sp, #12]
    359c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    35a0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    35a2:	9b01      	ldr	r3, [sp, #4]
    35a4:	889b      	ldrh	r3, [r3, #4]
    35a6:	02db      	lsls	r3, r3, #11
    35a8:	9a03      	ldr	r2, [sp, #12]
    35aa:	4313      	orrs	r3, r2
    35ac:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    35ae:	4a03      	ldr	r2, [pc, #12]	; (35bc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35b0:	9b03      	ldr	r3, [sp, #12]
    35b2:	6053      	str	r3, [r2, #4]
}
    35b4:	bf00      	nop
    35b6:	b004      	add	sp, #16
    35b8:	4770      	bx	lr
    35ba:	bf00      	nop
    35bc:	40048000 	.word	0x40048000

000035c0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35c0:	b084      	sub	sp, #16
    35c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    35c4:	4913      	ldr	r1, [pc, #76]	; (3614 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    35c6:	9b01      	ldr	r3, [sp, #4]
    35c8:	681a      	ldr	r2, [r3, #0]
    35ca:	4813      	ldr	r0, [pc, #76]	; (3618 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    35cc:	4613      	mov	r3, r2
    35ce:	00db      	lsls	r3, r3, #3
    35d0:	4413      	add	r3, r2
    35d2:	4403      	add	r3, r0
    35d4:	3306      	adds	r3, #6
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    35dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    35de:	9b03      	ldr	r3, [sp, #12]
    35e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    35e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	889b      	ldrh	r3, [r3, #4]
    35ea:	079b      	lsls	r3, r3, #30
    35ec:	9a03      	ldr	r2, [sp, #12]
    35ee:	4313      	orrs	r3, r2
    35f0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    35f2:	4908      	ldr	r1, [pc, #32]	; (3614 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    35f4:	9b01      	ldr	r3, [sp, #4]
    35f6:	681a      	ldr	r2, [r3, #0]
    35f8:	4807      	ldr	r0, [pc, #28]	; (3618 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    35fa:	4613      	mov	r3, r2
    35fc:	00db      	lsls	r3, r3, #3
    35fe:	4413      	add	r3, r2
    3600:	4403      	add	r3, r0
    3602:	3306      	adds	r3, #6
    3604:	781b      	ldrb	r3, [r3, #0]
    3606:	461a      	mov	r2, r3
    3608:	9b03      	ldr	r3, [sp, #12]
    360a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    360e:	bf00      	nop
    3610:	b004      	add	sp, #16
    3612:	4770      	bx	lr
    3614:	40065000 	.word	0x40065000
    3618:	00010128 	.word	0x00010128

0000361c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    361c:	b086      	sub	sp, #24
    361e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3620:	9b01      	ldr	r3, [sp, #4]
    3622:	889b      	ldrh	r3, [r3, #4]
    3624:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3626:	9b01      	ldr	r3, [sp, #4]
    3628:	681a      	ldr	r2, [r3, #0]
    362a:	4910      	ldr	r1, [pc, #64]	; (366c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    362c:	4613      	mov	r3, r2
    362e:	00db      	lsls	r3, r3, #3
    3630:	4413      	add	r3, r2
    3632:	440b      	add	r3, r1
    3634:	3306      	adds	r3, #6
    3636:	781b      	ldrb	r3, [r3, #0]
    3638:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    363a:	4b0d      	ldr	r3, [pc, #52]	; (3670 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    363e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3640:	2201      	movs	r2, #1
    3642:	9b04      	ldr	r3, [sp, #16]
    3644:	fa02 f303 	lsl.w	r3, r2, r3
    3648:	43db      	mvns	r3, r3
    364a:	9a03      	ldr	r2, [sp, #12]
    364c:	4013      	ands	r3, r2
    364e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3650:	9a05      	ldr	r2, [sp, #20]
    3652:	9b04      	ldr	r3, [sp, #16]
    3654:	fa02 f303 	lsl.w	r3, r2, r3
    3658:	9a03      	ldr	r2, [sp, #12]
    365a:	4313      	orrs	r3, r2
    365c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    365e:	4a04      	ldr	r2, [pc, #16]	; (3670 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3660:	9b03      	ldr	r3, [sp, #12]
    3662:	6413      	str	r3, [r2, #64]	; 0x40
}
    3664:	bf00      	nop
    3666:	b006      	add	sp, #24
    3668:	4770      	bx	lr
    366a:	bf00      	nop
    366c:	00010128 	.word	0x00010128
    3670:	40048000 	.word	0x40048000

00003674 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3674:	b084      	sub	sp, #16
    3676:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3678:	4b0a      	ldr	r3, [pc, #40]	; (36a4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    367a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    367c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	889b      	ldrh	r3, [r3, #4]
    3682:	2b01      	cmp	r3, #1
    3684:	d104      	bne.n	3690 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3686:	9b03      	ldr	r3, [sp, #12]
    3688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    368c:	9303      	str	r3, [sp, #12]
    368e:	e003      	b.n	3698 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3690:	9b03      	ldr	r3, [sp, #12]
    3692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3696:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3698:	4a02      	ldr	r2, [pc, #8]	; (36a4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    369a:	9b03      	ldr	r3, [sp, #12]
    369c:	6693      	str	r3, [r2, #104]	; 0x68
}
    369e:	bf00      	nop
    36a0:	b004      	add	sp, #16
    36a2:	4770      	bx	lr
    36a4:	40048000 	.word	0x40048000

000036a8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    36a8:	b082      	sub	sp, #8
    36aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36ac:	bf00      	nop
    36ae:	b002      	add	sp, #8
    36b0:	4770      	bx	lr

000036b2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    36b2:	b082      	sub	sp, #8
    36b4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    36b6:	bf00      	nop
    36b8:	b002      	add	sp, #8
    36ba:	4770      	bx	lr

000036bc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36bc:	b500      	push	{lr}
    36be:	b083      	sub	sp, #12
    36c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36c2:	9b01      	ldr	r3, [sp, #4]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d002      	beq.n	36ce <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    36c8:	9801      	ldr	r0, [sp, #4]
    36ca:	f000 f8d1 	bl	3870 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ce:	bf00      	nop
    36d0:	b003      	add	sp, #12
    36d2:	f85d fb04 	ldr.w	pc, [sp], #4

000036d6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    36d6:	b500      	push	{lr}
    36d8:	b083      	sub	sp, #12
    36da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	2b00      	cmp	r3, #0
    36e0:	d002      	beq.n	36e8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    36e2:	9801      	ldr	r0, [sp, #4]
    36e4:	f000 f950 	bl	3988 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36e8:	bf00      	nop
    36ea:	b003      	add	sp, #12
    36ec:	f85d fb04 	ldr.w	pc, [sp], #4

000036f0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    36f0:	b500      	push	{lr}
    36f2:	b083      	sub	sp, #12
    36f4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    36f6:	9801      	ldr	r0, [sp, #4]
    36f8:	f000 f98e 	bl	3a18 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    36fc:	bf00      	nop
    36fe:	b003      	add	sp, #12
    3700:	f85d fb04 	ldr.w	pc, [sp], #4

00003704 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3704:	b500      	push	{lr}
    3706:	b083      	sub	sp, #12
    3708:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    370a:	9b01      	ldr	r3, [sp, #4]
    370c:	2b00      	cmp	r3, #0
    370e:	d002      	beq.n	3716 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3710:	9801      	ldr	r0, [sp, #4]
    3712:	f000 f999 	bl	3a48 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3716:	bf00      	nop
    3718:	b003      	add	sp, #12
    371a:	f85d fb04 	ldr.w	pc, [sp], #4

0000371e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    371e:	b500      	push	{lr}
    3720:	b083      	sub	sp, #12
    3722:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3724:	9b01      	ldr	r3, [sp, #4]
    3726:	2b00      	cmp	r3, #0
    3728:	d002      	beq.n	3730 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    372a:	9801      	ldr	r0, [sp, #4]
    372c:	f000 f9b0 	bl	3a90 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3730:	bf00      	nop
    3732:	b003      	add	sp, #12
    3734:	f85d fb04 	ldr.w	pc, [sp], #4

00003738 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3738:	b500      	push	{lr}
    373a:	b083      	sub	sp, #12
    373c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    373e:	9801      	ldr	r0, [sp, #4]
    3740:	f000 f9ba 	bl	3ab8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3744:	bf00      	nop
    3746:	b003      	add	sp, #12
    3748:	f85d fb04 	ldr.w	pc, [sp], #4

0000374c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    374c:	b500      	push	{lr}
    374e:	b083      	sub	sp, #12
    3750:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3752:	9b01      	ldr	r3, [sp, #4]
    3754:	2b00      	cmp	r3, #0
    3756:	d002      	beq.n	375e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3758:	9801      	ldr	r0, [sp, #4]
    375a:	f000 f9bd 	bl	3ad8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    375e:	bf00      	nop
    3760:	b003      	add	sp, #12
    3762:	f85d fb04 	ldr.w	pc, [sp], #4

00003766 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3766:	b500      	push	{lr}
    3768:	b083      	sub	sp, #12
    376a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    376c:	9b01      	ldr	r3, [sp, #4]
    376e:	2b00      	cmp	r3, #0
    3770:	d002      	beq.n	3778 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3772:	9801      	ldr	r0, [sp, #4]
    3774:	f000 f9d4 	bl	3b20 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3778:	bf00      	nop
    377a:	b003      	add	sp, #12
    377c:	f85d fb04 	ldr.w	pc, [sp], #4

00003780 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3780:	b500      	push	{lr}
    3782:	b083      	sub	sp, #12
    3784:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3786:	9801      	ldr	r0, [sp, #4]
    3788:	f000 f9de 	bl	3b48 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    378c:	bf00      	nop
    378e:	b003      	add	sp, #12
    3790:	f85d fb04 	ldr.w	pc, [sp], #4

00003794 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3794:	b500      	push	{lr}
    3796:	b089      	sub	sp, #36	; 0x24
    3798:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    379a:	2300      	movs	r3, #0
    379c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    37a0:	4b20      	ldr	r3, [pc, #128]	; (3824 <SetInputSouceSytemClock+0x90>)
    37a2:	695b      	ldr	r3, [r3, #20]
    37a4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    37a6:	9b06      	ldr	r3, [sp, #24]
    37a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    37ac:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    37ae:	9b01      	ldr	r3, [sp, #4]
    37b0:	061b      	lsls	r3, r3, #24
    37b2:	9a06      	ldr	r2, [sp, #24]
    37b4:	4313      	orrs	r3, r2
    37b6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    37b8:	4a1a      	ldr	r2, [pc, #104]	; (3824 <SetInputSouceSytemClock+0x90>)
    37ba:	9b06      	ldr	r3, [sp, #24]
    37bc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37be:	aa02      	add	r2, sp, #8
    37c0:	a903      	add	r1, sp, #12
    37c2:	a804      	add	r0, sp, #16
    37c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    37c8:	f7ff f9ac 	bl	2b24 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    37cc:	4b15      	ldr	r3, [pc, #84]	; (3824 <SetInputSouceSytemClock+0x90>)
    37ce:	691b      	ldr	r3, [r3, #16]
    37d0:	0e1b      	lsrs	r3, r3, #24
    37d2:	f003 030f 	and.w	r3, r3, #15
    37d6:	9a01      	ldr	r2, [sp, #4]
    37d8:	429a      	cmp	r2, r3
    37da:	bf0c      	ite	eq
    37dc:	2301      	moveq	r3, #1
    37de:	2300      	movne	r3, #0
    37e0:	b2db      	uxtb	r3, r3
    37e2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    37e4:	9a02      	ldr	r2, [sp, #8]
    37e6:	a903      	add	r1, sp, #12
    37e8:	ab04      	add	r3, sp, #16
    37ea:	4618      	mov	r0, r3
    37ec:	f7ff f9b4 	bl	2b58 <Clock_Ip_TimeoutExpired>
    37f0:	4603      	mov	r3, r0
    37f2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    37f6:	9b05      	ldr	r3, [sp, #20]
    37f8:	2b00      	cmp	r3, #0
    37fa:	d106      	bne.n	380a <SetInputSouceSytemClock+0x76>
    37fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3800:	f083 0301 	eor.w	r3, r3, #1
    3804:	b2db      	uxtb	r3, r3
    3806:	2b00      	cmp	r3, #0
    3808:	d1e0      	bne.n	37cc <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    380a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    380e:	2b00      	cmp	r3, #0
    3810:	d003      	beq.n	381a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3812:	2105      	movs	r1, #5
    3814:	2001      	movs	r0, #1
    3816:	f7ff f975 	bl	2b04 <Clock_Ip_ReportClockErrors>
    }
}
    381a:	bf00      	nop
    381c:	b009      	add	sp, #36	; 0x24
    381e:	f85d fb04 	ldr.w	pc, [sp], #4
    3822:	bf00      	nop
    3824:	40064000 	.word	0x40064000

00003828 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3828:	b500      	push	{lr}
    382a:	b083      	sub	sp, #12
    382c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382e:	9b01      	ldr	r3, [sp, #4]
    3830:	2b00      	cmp	r3, #0
    3832:	d002      	beq.n	383a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3834:	9801      	ldr	r0, [sp, #4]
    3836:	f000 f997 	bl	3b68 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383a:	bf00      	nop
    383c:	b003      	add	sp, #12
    383e:	f85d fb04 	ldr.w	pc, [sp], #4

00003842 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3842:	b500      	push	{lr}
    3844:	b083      	sub	sp, #12
    3846:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3848:	9b01      	ldr	r3, [sp, #4]
    384a:	2b00      	cmp	r3, #0
    384c:	d002      	beq.n	3854 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    384e:	9801      	ldr	r0, [sp, #4]
    3850:	f000 fa7e 	bl	3d50 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3854:	bf00      	nop
    3856:	b003      	add	sp, #12
    3858:	f85d fb04 	ldr.w	pc, [sp], #4

0000385c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    385c:	b500      	push	{lr}
    385e:	b083      	sub	sp, #12
    3860:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3862:	9801      	ldr	r0, [sp, #4]
    3864:	f000 fab8 	bl	3dd8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3868:	bf00      	nop
    386a:	b003      	add	sp, #12
    386c:	f85d fb04 	ldr.w	pc, [sp], #4

00003870 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3870:	b500      	push	{lr}
    3872:	b08b      	sub	sp, #44	; 0x2c
    3874:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3876:	2300      	movs	r3, #0
    3878:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    387c:	9b01      	ldr	r3, [sp, #4]
    387e:	2b00      	cmp	r3, #0
    3880:	d10b      	bne.n	389a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3882:	2305      	movs	r3, #5
    3884:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3886:	2301      	movs	r3, #1
    3888:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    388c:	2301      	movs	r3, #1
    388e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3892:	2301      	movs	r3, #1
    3894:	f88d 3010 	strb.w	r3, [sp, #16]
    3898:	e00e      	b.n	38b8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    389a:	9b01      	ldr	r3, [sp, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    38a0:	9b01      	ldr	r3, [sp, #4]
    38a2:	79db      	ldrb	r3, [r3, #7]
    38a4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    38a8:	9b01      	ldr	r3, [sp, #4]
    38aa:	889b      	ldrh	r3, [r3, #4]
    38ac:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    38b0:	9b01      	ldr	r3, [sp, #4]
    38b2:	7a1b      	ldrb	r3, [r3, #8]
    38b4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    38b8:	4b32      	ldr	r3, [pc, #200]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38be:	4a31      	ldr	r2, [pc, #196]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    38c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    38c8:	4b2e      	ldr	r3, [pc, #184]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38ce:	4a2d      	ldr	r2, [pc, #180]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38d0:	f023 0301 	bic.w	r3, r3, #1
    38d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    38d8:	4b2a      	ldr	r3, [pc, #168]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38de:	4a29      	ldr	r2, [pc, #164]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38e0:	f023 0304 	bic.w	r3, r3, #4
    38e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    38e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    38ec:	2b01      	cmp	r3, #1
    38ee:	d144      	bne.n	397a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    38f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    38f4:	4a23      	ldr	r2, [pc, #140]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    38f6:	f003 0301 	and.w	r3, r3, #1
    38fa:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    38fe:	4b21      	ldr	r3, [pc, #132]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3904:	4a1f      	ldr	r2, [pc, #124]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3906:	f043 0301 	orr.w	r3, r3, #1
    390a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    390e:	4b1d      	ldr	r3, [pc, #116]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3910:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3914:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3918:	009b      	lsls	r3, r3, #2
    391a:	f003 0304 	and.w	r3, r3, #4
    391e:	4919      	ldr	r1, [pc, #100]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3920:	4313      	orrs	r3, r2
    3922:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3926:	aa05      	add	r2, sp, #20
    3928:	a906      	add	r1, sp, #24
    392a:	a807      	add	r0, sp, #28
    392c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3930:	f7ff f8f8 	bl	2b24 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3934:	4b13      	ldr	r3, [pc, #76]	; (3984 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    393a:	0e1b      	lsrs	r3, r3, #24
    393c:	f003 0301 	and.w	r3, r3, #1
    3940:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3942:	9a05      	ldr	r2, [sp, #20]
    3944:	a906      	add	r1, sp, #24
    3946:	ab07      	add	r3, sp, #28
    3948:	4618      	mov	r0, r3
    394a:	f7ff f905 	bl	2b58 <Clock_Ip_TimeoutExpired>
    394e:	4603      	mov	r3, r0
    3950:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3954:	9b08      	ldr	r3, [sp, #32]
    3956:	2b00      	cmp	r3, #0
    3958:	d106      	bne.n	3968 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    395a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    395e:	f083 0301 	eor.w	r3, r3, #1
    3962:	b2db      	uxtb	r3, r3
    3964:	2b00      	cmp	r3, #0
    3966:	d1e5      	bne.n	3934 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3968:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    396c:	2b00      	cmp	r3, #0
    396e:	d004      	beq.n	397a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3970:	9b02      	ldr	r3, [sp, #8]
    3972:	4619      	mov	r1, r3
    3974:	2001      	movs	r0, #1
    3976:	f7ff f8c5 	bl	2b04 <Clock_Ip_ReportClockErrors>
        }
    }
}
    397a:	bf00      	nop
    397c:	b00b      	add	sp, #44	; 0x2c
    397e:	f85d fb04 	ldr.w	pc, [sp], #4
    3982:	bf00      	nop
    3984:	40064000 	.word	0x40064000

00003988 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3988:	b500      	push	{lr}
    398a:	b089      	sub	sp, #36	; 0x24
    398c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    398e:	2300      	movs	r3, #0
    3990:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3994:	4b1f      	ldr	r3, [pc, #124]	; (3a14 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399a:	4a1e      	ldr	r2, [pc, #120]	; (3a14 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    399c:	f043 0301 	orr.w	r3, r3, #1
    39a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    39a4:	4b1b      	ldr	r3, [pc, #108]	; (3a14 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39aa:	4a1a      	ldr	r2, [pc, #104]	; (3a14 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39ac:	f043 0304 	orr.w	r3, r3, #4
    39b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39b4:	aa03      	add	r2, sp, #12
    39b6:	a904      	add	r1, sp, #16
    39b8:	a805      	add	r0, sp, #20
    39ba:	f24c 3350 	movw	r3, #50000	; 0xc350
    39be:	f7ff f8b1 	bl	2b24 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39c2:	4b14      	ldr	r3, [pc, #80]	; (3a14 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39c8:	0e1b      	lsrs	r3, r3, #24
    39ca:	f003 0301 	and.w	r3, r3, #1
    39ce:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39d0:	9a03      	ldr	r2, [sp, #12]
    39d2:	a904      	add	r1, sp, #16
    39d4:	ab05      	add	r3, sp, #20
    39d6:	4618      	mov	r0, r3
    39d8:	f7ff f8be 	bl	2b58 <Clock_Ip_TimeoutExpired>
    39dc:	4603      	mov	r3, r0
    39de:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    39e2:	9b06      	ldr	r3, [sp, #24]
    39e4:	2b00      	cmp	r3, #0
    39e6:	d106      	bne.n	39f6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    39e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    39ec:	f083 0301 	eor.w	r3, r3, #1
    39f0:	b2db      	uxtb	r3, r3
    39f2:	2b00      	cmp	r3, #0
    39f4:	d1e5      	bne.n	39c2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    39f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d005      	beq.n	3a0a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    39fe:	9b01      	ldr	r3, [sp, #4]
    3a00:	681b      	ldr	r3, [r3, #0]
    3a02:	4619      	mov	r1, r3
    3a04:	2001      	movs	r0, #1
    3a06:	f7ff f87d 	bl	2b04 <Clock_Ip_ReportClockErrors>
    }
}
    3a0a:	bf00      	nop
    3a0c:	b009      	add	sp, #36	; 0x24
    3a0e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a12:	bf00      	nop
    3a14:	40064000 	.word	0x40064000

00003a18 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3a18:	b082      	sub	sp, #8
    3a1a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3a1c:	4b09      	ldr	r3, [pc, #36]	; (3a44 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a22:	4a08      	ldr	r2, [pc, #32]	; (3a44 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a24:	f023 0301 	bic.w	r3, r3, #1
    3a28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a32:	4a04      	ldr	r2, [pc, #16]	; (3a44 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a34:	f023 0304 	bic.w	r3, r3, #4
    3a38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a3c:	bf00      	nop
    3a3e:	b002      	add	sp, #8
    3a40:	4770      	bx	lr
    3a42:	bf00      	nop
    3a44:	40064000 	.word	0x40064000

00003a48 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a48:	b082      	sub	sp, #8
    3a4a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3a4c:	4b0f      	ldr	r3, [pc, #60]	; (3a8c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a52:	4a0e      	ldr	r2, [pc, #56]	; (3a8c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3a58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a5c:	4b0b      	ldr	r3, [pc, #44]	; (3a8c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a62:	4a0a      	ldr	r2, [pc, #40]	; (3a8c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a64:	f023 0304 	bic.w	r3, r3, #4
    3a68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3a6c:	4b07      	ldr	r3, [pc, #28]	; (3a8c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a72:	9b01      	ldr	r3, [sp, #4]
    3a74:	7a1b      	ldrb	r3, [r3, #8]
    3a76:	009b      	lsls	r3, r3, #2
    3a78:	f003 0304 	and.w	r3, r3, #4
    3a7c:	4903      	ldr	r1, [pc, #12]	; (3a8c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3a7e:	4313      	orrs	r3, r2
    3a80:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3a84:	bf00      	nop
    3a86:	b002      	add	sp, #8
    3a88:	4770      	bx	lr
    3a8a:	bf00      	nop
    3a8c:	40064000 	.word	0x40064000

00003a90 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a90:	b082      	sub	sp, #8
    3a92:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3a94:	9b01      	ldr	r3, [sp, #4]
    3a96:	889b      	ldrh	r3, [r3, #4]
    3a98:	2b01      	cmp	r3, #1
    3a9a:	d107      	bne.n	3aac <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3a9c:	4b05      	ldr	r3, [pc, #20]	; (3ab4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aa2:	4a04      	ldr	r2, [pc, #16]	; (3ab4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3aa4:	f043 0304 	orr.w	r3, r3, #4
    3aa8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3aac:	bf00      	nop
    3aae:	b002      	add	sp, #8
    3ab0:	4770      	bx	lr
    3ab2:	bf00      	nop
    3ab4:	40064000 	.word	0x40064000

00003ab8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3ab8:	b082      	sub	sp, #8
    3aba:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3abc:	4b05      	ldr	r3, [pc, #20]	; (3ad4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ac2:	4a04      	ldr	r2, [pc, #16]	; (3ad4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3ac4:	f023 0304 	bic.w	r3, r3, #4
    3ac8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3acc:	bf00      	nop
    3ace:	b002      	add	sp, #8
    3ad0:	4770      	bx	lr
    3ad2:	bf00      	nop
    3ad4:	40064000 	.word	0x40064000

00003ad8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ad8:	b082      	sub	sp, #8
    3ada:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3adc:	4b0f      	ldr	r3, [pc, #60]	; (3b1c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ae2:	4a0e      	ldr	r2, [pc, #56]	; (3b1c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ae4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3aec:	4b0b      	ldr	r3, [pc, #44]	; (3b1c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3af2:	4a0a      	ldr	r2, [pc, #40]	; (3b1c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3af4:	f023 0302 	bic.w	r3, r3, #2
    3af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3afc:	4b07      	ldr	r3, [pc, #28]	; (3b1c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3afe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b02:	9b01      	ldr	r3, [sp, #4]
    3b04:	7a5b      	ldrb	r3, [r3, #9]
    3b06:	005b      	lsls	r3, r3, #1
    3b08:	f003 0302 	and.w	r3, r3, #2
    3b0c:	4903      	ldr	r1, [pc, #12]	; (3b1c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b0e:	4313      	orrs	r3, r2
    3b10:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b14:	bf00      	nop
    3b16:	b002      	add	sp, #8
    3b18:	4770      	bx	lr
    3b1a:	bf00      	nop
    3b1c:	40064000 	.word	0x40064000

00003b20 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b20:	b082      	sub	sp, #8
    3b22:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b24:	9b01      	ldr	r3, [sp, #4]
    3b26:	889b      	ldrh	r3, [r3, #4]
    3b28:	2b01      	cmp	r3, #1
    3b2a:	d107      	bne.n	3b3c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3b2c:	4b05      	ldr	r3, [pc, #20]	; (3b44 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b32:	4a04      	ldr	r2, [pc, #16]	; (3b44 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b34:	f043 0302 	orr.w	r3, r3, #2
    3b38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b3c:	bf00      	nop
    3b3e:	b002      	add	sp, #8
    3b40:	4770      	bx	lr
    3b42:	bf00      	nop
    3b44:	40064000 	.word	0x40064000

00003b48 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3b48:	b082      	sub	sp, #8
    3b4a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b4c:	4b05      	ldr	r3, [pc, #20]	; (3b64 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b52:	4a04      	ldr	r2, [pc, #16]	; (3b64 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3b54:	f023 0302 	bic.w	r3, r3, #2
    3b58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b5c:	bf00      	nop
    3b5e:	b002      	add	sp, #8
    3b60:	4770      	bx	lr
    3b62:	bf00      	nop
    3b64:	40064000 	.word	0x40064000

00003b68 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b68:	b500      	push	{lr}
    3b6a:	b08b      	sub	sp, #44	; 0x2c
    3b6c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b6e:	9b01      	ldr	r3, [sp, #4]
    3b70:	681a      	ldr	r2, [r3, #0]
    3b72:	4975      	ldr	r1, [pc, #468]	; (3d48 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3b74:	4613      	mov	r3, r2
    3b76:	00db      	lsls	r3, r3, #3
    3b78:	4413      	add	r3, r2
    3b7a:	440b      	add	r3, r1
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3b80:	2300      	movs	r3, #0
    3b82:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3b86:	2300      	movs	r3, #0
    3b88:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3b8c:	4b6f      	ldr	r3, [pc, #444]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b92:	4a6e      	ldr	r2, [pc, #440]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b98:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3b9c:	4b6b      	ldr	r3, [pc, #428]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d07d      	beq.n	3ca6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3baa:	9b01      	ldr	r3, [sp, #4]
    3bac:	79db      	ldrb	r3, [r3, #7]
    3bae:	461a      	mov	r2, r3
    3bb0:	4b66      	ldr	r3, [pc, #408]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bb2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3bb6:	f003 0303 	and.w	r3, r3, #3
    3bba:	429a      	cmp	r2, r3
    3bbc:	d10b      	bne.n	3bd6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	799b      	ldrb	r3, [r3, #6]
    3bc2:	461a      	mov	r2, r3
    3bc4:	4b61      	ldr	r3, [pc, #388]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bca:	08db      	lsrs	r3, r3, #3
    3bcc:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bd0:	429a      	cmp	r2, r3
    3bd2:	f000 80b4 	beq.w	3d3e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3bd6:	4b5d      	ldr	r3, [pc, #372]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bdc:	f003 0301 	and.w	r3, r3, #1
    3be0:	2b00      	cmp	r3, #0
    3be2:	d105      	bne.n	3bf0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3be4:	2301      	movs	r3, #1
    3be6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3bea:	2000      	movs	r0, #0
    3bec:	f7ff fd66 	bl	36bc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3bf0:	2002      	movs	r0, #2
    3bf2:	f7ff fdcf 	bl	3794 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3bf6:	4b55      	ldr	r3, [pc, #340]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bf8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bfc:	4a53      	ldr	r2, [pc, #332]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bfe:	f023 0301 	bic.w	r3, r3, #1
    3c02:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c06:	9b01      	ldr	r3, [sp, #4]
    3c08:	889b      	ldrh	r3, [r3, #4]
    3c0a:	2b01      	cmp	r3, #1
    3c0c:	f040 8097 	bne.w	3d3e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c10:	9b01      	ldr	r3, [sp, #4]
    3c12:	79db      	ldrb	r3, [r3, #7]
    3c14:	4a4d      	ldr	r2, [pc, #308]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c16:	f003 0303 	and.w	r3, r3, #3
    3c1a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c1e:	4b4b      	ldr	r3, [pc, #300]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c20:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c24:	9b01      	ldr	r3, [sp, #4]
    3c26:	799b      	ldrb	r3, [r3, #6]
    3c28:	00db      	lsls	r3, r3, #3
    3c2a:	f003 0308 	and.w	r3, r3, #8
    3c2e:	4313      	orrs	r3, r2
    3c30:	4a46      	ldr	r2, [pc, #280]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c32:	f043 0301 	orr.w	r3, r3, #1
    3c36:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c3a:	aa03      	add	r2, sp, #12
    3c3c:	a904      	add	r1, sp, #16
    3c3e:	a805      	add	r0, sp, #20
    3c40:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c44:	f7fe ff6e 	bl	2b24 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c48:	4b40      	ldr	r3, [pc, #256]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c4e:	0e1b      	lsrs	r3, r3, #24
    3c50:	f003 0301 	and.w	r3, r3, #1
    3c54:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c56:	9a03      	ldr	r2, [sp, #12]
    3c58:	a904      	add	r1, sp, #16
    3c5a:	ab05      	add	r3, sp, #20
    3c5c:	4618      	mov	r0, r3
    3c5e:	f7fe ff7b 	bl	2b58 <Clock_Ip_TimeoutExpired>
    3c62:	4603      	mov	r3, r0
    3c64:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3c68:	9b06      	ldr	r3, [sp, #24]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d106      	bne.n	3c7c <Clock_Ip_SetFirc_TrustedCall+0x114>
    3c6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c72:	f083 0301 	eor.w	r3, r3, #1
    3c76:	b2db      	uxtb	r3, r3
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d1e5      	bne.n	3c48 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3c7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3c80:	2b00      	cmp	r3, #0
    3c82:	d005      	beq.n	3c90 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3c84:	9b01      	ldr	r3, [sp, #4]
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	4619      	mov	r1, r3
    3c8a:	2001      	movs	r0, #1
    3c8c:	f7fe ff3a 	bl	2b04 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3c90:	2003      	movs	r0, #3
    3c92:	f7ff fd7f 	bl	3794 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3c96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d04f      	beq.n	3d3e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3c9e:	2002      	movs	r0, #2
    3ca0:	f7ff fd26 	bl	36f0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3ca4:	e04b      	b.n	3d3e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3ca6:	4b29      	ldr	r3, [pc, #164]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ca8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cac:	4a27      	ldr	r2, [pc, #156]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cae:	f023 0301 	bic.w	r3, r3, #1
    3cb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	889b      	ldrh	r3, [r3, #4]
    3cba:	2b01      	cmp	r3, #1
    3cbc:	d13f      	bne.n	3d3e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	79db      	ldrb	r3, [r3, #7]
    3cc2:	4a22      	ldr	r2, [pc, #136]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cc4:	f003 0303 	and.w	r3, r3, #3
    3cc8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3ccc:	4b1f      	ldr	r3, [pc, #124]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cce:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cd2:	9b01      	ldr	r3, [sp, #4]
    3cd4:	799b      	ldrb	r3, [r3, #6]
    3cd6:	00db      	lsls	r3, r3, #3
    3cd8:	f003 0308 	and.w	r3, r3, #8
    3cdc:	4313      	orrs	r3, r2
    3cde:	4a1b      	ldr	r2, [pc, #108]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ce0:	f043 0301 	orr.w	r3, r3, #1
    3ce4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ce8:	aa03      	add	r2, sp, #12
    3cea:	a904      	add	r1, sp, #16
    3cec:	a805      	add	r0, sp, #20
    3cee:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cf2:	f7fe ff17 	bl	2b24 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3cf6:	4b15      	ldr	r3, [pc, #84]	; (3d4c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cfc:	0e1b      	lsrs	r3, r3, #24
    3cfe:	f003 0301 	and.w	r3, r3, #1
    3d02:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d04:	9a03      	ldr	r2, [sp, #12]
    3d06:	a904      	add	r1, sp, #16
    3d08:	ab05      	add	r3, sp, #20
    3d0a:	4618      	mov	r0, r3
    3d0c:	f7fe ff24 	bl	2b58 <Clock_Ip_TimeoutExpired>
    3d10:	4603      	mov	r3, r0
    3d12:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d16:	9b06      	ldr	r3, [sp, #24]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d106      	bne.n	3d2a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3d1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d20:	f083 0301 	eor.w	r3, r3, #1
    3d24:	b2db      	uxtb	r3, r3
    3d26:	2b00      	cmp	r3, #0
    3d28:	d1e5      	bne.n	3cf6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3d2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d005      	beq.n	3d3e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d32:	9b01      	ldr	r3, [sp, #4]
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	4619      	mov	r1, r3
    3d38:	2001      	movs	r0, #1
    3d3a:	f7fe fee3 	bl	2b04 <Clock_Ip_ReportClockErrors>
}
    3d3e:	bf00      	nop
    3d40:	b00b      	add	sp, #44	; 0x2c
    3d42:	f85d fb04 	ldr.w	pc, [sp], #4
    3d46:	bf00      	nop
    3d48:	00010128 	.word	0x00010128
    3d4c:	40064000 	.word	0x40064000

00003d50 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d50:	b500      	push	{lr}
    3d52:	b089      	sub	sp, #36	; 0x24
    3d54:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d56:	2300      	movs	r3, #0
    3d58:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3d5c:	9b01      	ldr	r3, [sp, #4]
    3d5e:	889b      	ldrh	r3, [r3, #4]
    3d60:	2b01      	cmp	r3, #1
    3d62:	d132      	bne.n	3dca <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3d64:	4b1b      	ldr	r3, [pc, #108]	; (3dd4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d6a:	4a1a      	ldr	r2, [pc, #104]	; (3dd4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d6c:	f043 0301 	orr.w	r3, r3, #1
    3d70:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d74:	aa03      	add	r2, sp, #12
    3d76:	a904      	add	r1, sp, #16
    3d78:	a805      	add	r0, sp, #20
    3d7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d7e:	f7fe fed1 	bl	2b24 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d82:	4b14      	ldr	r3, [pc, #80]	; (3dd4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3d84:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d88:	0e1b      	lsrs	r3, r3, #24
    3d8a:	f003 0301 	and.w	r3, r3, #1
    3d8e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d90:	9a03      	ldr	r2, [sp, #12]
    3d92:	a904      	add	r1, sp, #16
    3d94:	ab05      	add	r3, sp, #20
    3d96:	4618      	mov	r0, r3
    3d98:	f7fe fede 	bl	2b58 <Clock_Ip_TimeoutExpired>
    3d9c:	4603      	mov	r3, r0
    3d9e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3da2:	9b06      	ldr	r3, [sp, #24]
    3da4:	2b00      	cmp	r3, #0
    3da6:	d106      	bne.n	3db6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3da8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dac:	f083 0301 	eor.w	r3, r3, #1
    3db0:	b2db      	uxtb	r3, r3
    3db2:	2b00      	cmp	r3, #0
    3db4:	d1e5      	bne.n	3d82 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3db6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d005      	beq.n	3dca <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dbe:	9b01      	ldr	r3, [sp, #4]
    3dc0:	681b      	ldr	r3, [r3, #0]
    3dc2:	4619      	mov	r1, r3
    3dc4:	2001      	movs	r0, #1
    3dc6:	f7fe fe9d 	bl	2b04 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3dca:	bf00      	nop
    3dcc:	b009      	add	sp, #36	; 0x24
    3dce:	f85d fb04 	ldr.w	pc, [sp], #4
    3dd2:	bf00      	nop
    3dd4:	40064000 	.word	0x40064000

00003dd8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3dd8:	b082      	sub	sp, #8
    3dda:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3ddc:	4b05      	ldr	r3, [pc, #20]	; (3df4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3dde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3de2:	4a04      	ldr	r2, [pc, #16]	; (3df4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3de4:	f023 0301 	bic.w	r3, r3, #1
    3de8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3dec:	bf00      	nop
    3dee:	b002      	add	sp, #8
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	40064000 	.word	0x40064000

00003df8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3df8:	b082      	sub	sp, #8
    3dfa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3dfc:	bf00      	nop
    3dfe:	b002      	add	sp, #8
    3e00:	4770      	bx	lr

00003e02 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e02:	b082      	sub	sp, #8
    3e04:	9001      	str	r0, [sp, #4]
    3e06:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e08:	bf00      	nop
    3e0a:	b002      	add	sp, #8
    3e0c:	4770      	bx	lr

00003e0e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3e0e:	b082      	sub	sp, #8
    3e10:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3e12:	bf00      	nop
    3e14:	b002      	add	sp, #8
    3e16:	4770      	bx	lr

00003e18 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3e18:	b082      	sub	sp, #8
    3e1a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e1c:	bf00      	nop
    3e1e:	b002      	add	sp, #8
    3e20:	4770      	bx	lr

00003e22 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3e22:	b082      	sub	sp, #8
    3e24:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3e26:	2302      	movs	r3, #2
}
    3e28:	4618      	mov	r0, r3
    3e2a:	b002      	add	sp, #8
    3e2c:	4770      	bx	lr

00003e2e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3e2e:	b082      	sub	sp, #8
    3e30:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3e32:	bf00      	nop
    3e34:	b002      	add	sp, #8
    3e36:	4770      	bx	lr

00003e38 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e38:	b500      	push	{lr}
    3e3a:	b083      	sub	sp, #12
    3e3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e3e:	9b01      	ldr	r3, [sp, #4]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d002      	beq.n	3e4a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3e44:	9801      	ldr	r0, [sp, #4]
    3e46:	f000 f870 	bl	3f2a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e4a:	bf00      	nop
    3e4c:	b003      	add	sp, #12
    3e4e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e52 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e52:	b500      	push	{lr}
    3e54:	b083      	sub	sp, #12
    3e56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e58:	9b01      	ldr	r3, [sp, #4]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d002      	beq.n	3e64 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3e5e:	9801      	ldr	r0, [sp, #4]
    3e60:	f000 f89a 	bl	3f98 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e64:	bf00      	nop
    3e66:	b003      	add	sp, #12
    3e68:	f85d fb04 	ldr.w	pc, [sp], #4

00003e6c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3e6c:	b500      	push	{lr}
    3e6e:	b089      	sub	sp, #36	; 0x24
    3e70:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3e72:	2301      	movs	r3, #1
    3e74:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3e76:	2300      	movs	r3, #0
    3e78:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3e7c:	4b1e      	ldr	r3, [pc, #120]	; (3ef8 <Clock_Ip_CompleteSpll+0x8c>)
    3e7e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e82:	f003 0301 	and.w	r3, r3, #1
    3e86:	2b00      	cmp	r3, #0
    3e88:	d02f      	beq.n	3eea <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e8a:	aa02      	add	r2, sp, #8
    3e8c:	a903      	add	r1, sp, #12
    3e8e:	a804      	add	r0, sp, #16
    3e90:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e94:	f7fe fe46 	bl	2b24 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3e98:	4b17      	ldr	r3, [pc, #92]	; (3ef8 <Clock_Ip_CompleteSpll+0x8c>)
    3e9a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e9e:	0e1b      	lsrs	r3, r3, #24
    3ea0:	f003 0301 	and.w	r3, r3, #1
    3ea4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ea6:	9a02      	ldr	r2, [sp, #8]
    3ea8:	a903      	add	r1, sp, #12
    3eaa:	ab04      	add	r3, sp, #16
    3eac:	4618      	mov	r0, r3
    3eae:	f7fe fe53 	bl	2b58 <Clock_Ip_TimeoutExpired>
    3eb2:	4603      	mov	r3, r0
    3eb4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3eb8:	9b05      	ldr	r3, [sp, #20]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d106      	bne.n	3ecc <Clock_Ip_CompleteSpll+0x60>
    3ebe:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ec2:	f083 0301 	eor.w	r3, r3, #1
    3ec6:	b2db      	uxtb	r3, r3
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d1e5      	bne.n	3e98 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3ecc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ed0:	f083 0301 	eor.w	r3, r3, #1
    3ed4:	b2db      	uxtb	r3, r3
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d002      	beq.n	3ee0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3eda:	2302      	movs	r3, #2
    3edc:	9307      	str	r3, [sp, #28]
    3ede:	e006      	b.n	3eee <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3ee0:	9901      	ldr	r1, [sp, #4]
    3ee2:	2001      	movs	r0, #1
    3ee4:	f7fe fe0e 	bl	2b04 <Clock_Ip_ReportClockErrors>
    3ee8:	e001      	b.n	3eee <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3eea:	2300      	movs	r3, #0
    3eec:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3eee:	9b07      	ldr	r3, [sp, #28]
}
    3ef0:	4618      	mov	r0, r3
    3ef2:	b009      	add	sp, #36	; 0x24
    3ef4:	f85d fb04 	ldr.w	pc, [sp], #4
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3efc:	b500      	push	{lr}
    3efe:	b083      	sub	sp, #12
    3f00:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f02:	9801      	ldr	r0, [sp, #4]
    3f04:	f000 f886 	bl	4014 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f08:	bf00      	nop
    3f0a:	b003      	add	sp, #12
    3f0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f10 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3f10:	b500      	push	{lr}
    3f12:	b083      	sub	sp, #12
    3f14:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f16:	9b01      	ldr	r3, [sp, #4]
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d002      	beq.n	3f22 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3f1c:	9801      	ldr	r0, [sp, #4]
    3f1e:	f000 f891 	bl	4044 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f22:	bf00      	nop
    3f24:	b003      	add	sp, #12
    3f26:	f85d fb04 	ldr.w	pc, [sp], #4

00003f2a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f2a:	b082      	sub	sp, #8
    3f2c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f2e:	4b19      	ldr	r3, [pc, #100]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f30:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f34:	4a17      	ldr	r2, [pc, #92]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f3a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3f3e:	4b15      	ldr	r3, [pc, #84]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f40:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f44:	4a13      	ldr	r2, [pc, #76]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3f4a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3f4e:	4b11      	ldr	r3, [pc, #68]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f50:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f54:	4a0f      	ldr	r2, [pc, #60]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3f5a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3f5e:	4b0d      	ldr	r3, [pc, #52]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f60:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f64:	4a0b      	ldr	r2, [pc, #44]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f66:	f023 0301 	bic.w	r3, r3, #1
    3f6a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3f6e:	4b09      	ldr	r3, [pc, #36]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f70:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f74:	4a07      	ldr	r2, [pc, #28]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3f7a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3f7e:	4b05      	ldr	r3, [pc, #20]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f80:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3f84:	4a03      	ldr	r2, [pc, #12]	; (3f94 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3f8a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3f8e:	bf00      	nop
    3f90:	b002      	add	sp, #8
    3f92:	4770      	bx	lr
    3f94:	40064000 	.word	0x40064000

00003f98 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f98:	b082      	sub	sp, #8
    3f9a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3f9c:	9b01      	ldr	r3, [sp, #4]
    3f9e:	889b      	ldrh	r3, [r3, #4]
    3fa0:	2b01      	cmp	r3, #1
    3fa2:	d12f      	bne.n	4004 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fa4:	4b1a      	ldr	r3, [pc, #104]	; (4010 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fa6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3faa:	9b01      	ldr	r3, [sp, #4]
    3fac:	7b5b      	ldrb	r3, [r3, #13]
    3fae:	3b01      	subs	r3, #1
    3fb0:	021b      	lsls	r3, r3, #8
    3fb2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3fb6:	9b01      	ldr	r3, [sp, #4]
    3fb8:	7d1b      	ldrb	r3, [r3, #20]
    3fba:	3b10      	subs	r3, #16
    3fbc:	041b      	lsls	r3, r3, #16
    3fbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3fc2:	430b      	orrs	r3, r1
    3fc4:	4912      	ldr	r1, [pc, #72]	; (4010 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fc6:	4313      	orrs	r3, r2
    3fc8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3fcc:	9b01      	ldr	r3, [sp, #4]
    3fce:	7fdb      	ldrb	r3, [r3, #31]
    3fd0:	2b02      	cmp	r3, #2
    3fd2:	d011      	beq.n	3ff8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3fd4:	2b02      	cmp	r3, #2
    3fd6:	dc17      	bgt.n	4008 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d002      	beq.n	3fe2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3fdc:	2b01      	cmp	r3, #1
    3fde:	d005      	beq.n	3fec <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3fe0:	e012      	b.n	4008 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3fe2:	4b0b      	ldr	r3, [pc, #44]	; (4010 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fe4:	2200      	movs	r2, #0
    3fe6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3fea:	e00e      	b.n	400a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3fec:	4b08      	ldr	r3, [pc, #32]	; (4010 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3ff2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3ff6:	e008      	b.n	400a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3ff8:	4b05      	ldr	r3, [pc, #20]	; (4010 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3ffe:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4002:	e002      	b.n	400a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4004:	bf00      	nop
    4006:	e000      	b.n	400a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4008:	bf00      	nop
}
    400a:	bf00      	nop
    400c:	b002      	add	sp, #8
    400e:	4770      	bx	lr
    4010:	40064000 	.word	0x40064000

00004014 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4014:	b082      	sub	sp, #8
    4016:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4018:	4b09      	ldr	r3, [pc, #36]	; (4040 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    401a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    401e:	4a08      	ldr	r2, [pc, #32]	; (4040 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4024:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4028:	4b05      	ldr	r3, [pc, #20]	; (4040 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    402a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    402e:	4a04      	ldr	r2, [pc, #16]	; (4040 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4030:	f023 0301 	bic.w	r3, r3, #1
    4034:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4038:	bf00      	nop
    403a:	b002      	add	sp, #8
    403c:	4770      	bx	lr
    403e:	bf00      	nop
    4040:	40064000 	.word	0x40064000

00004044 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4044:	b082      	sub	sp, #8
    4046:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	889b      	ldrh	r3, [r3, #4]
    404c:	2b01      	cmp	r3, #1
    404e:	d107      	bne.n	4060 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4050:	4b05      	ldr	r3, [pc, #20]	; (4068 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4052:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4056:	4a04      	ldr	r2, [pc, #16]	; (4068 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4058:	f043 0301 	orr.w	r3, r3, #1
    405c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4060:	bf00      	nop
    4062:	b002      	add	sp, #8
    4064:	4770      	bx	lr
    4066:	bf00      	nop
    4068:	40064000 	.word	0x40064000

0000406c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    406c:	b082      	sub	sp, #8
    406e:	9001      	str	r0, [sp, #4]
    4070:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4072:	bf00      	nop
    4074:	b002      	add	sp, #8
    4076:	4770      	bx	lr

00004078 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4078:	b082      	sub	sp, #8
    407a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    407c:	bf00      	nop
    407e:	b002      	add	sp, #8
    4080:	4770      	bx	lr

00004082 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4082:	b500      	push	{lr}
    4084:	b083      	sub	sp, #12
    4086:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4088:	9b01      	ldr	r3, [sp, #4]
    408a:	2b00      	cmp	r3, #0
    408c:	d002      	beq.n	4094 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    408e:	9801      	ldr	r0, [sp, #4]
    4090:	f000 f8ee 	bl	4270 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4094:	bf00      	nop
    4096:	b003      	add	sp, #12
    4098:	f85d fb04 	ldr.w	pc, [sp], #4

0000409c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    409c:	b500      	push	{lr}
    409e:	b083      	sub	sp, #12
    40a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40a2:	9b01      	ldr	r3, [sp, #4]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d002      	beq.n	40ae <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    40a8:	9801      	ldr	r0, [sp, #4]
    40aa:	f000 f8ff 	bl	42ac <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40ae:	bf00      	nop
    40b0:	b003      	add	sp, #12
    40b2:	f85d fb04 	ldr.w	pc, [sp], #4

000040b6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    40b6:	b500      	push	{lr}
    40b8:	b083      	sub	sp, #12
    40ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40bc:	9b01      	ldr	r3, [sp, #4]
    40be:	2b00      	cmp	r3, #0
    40c0:	d002      	beq.n	40c8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    40c2:	9801      	ldr	r0, [sp, #4]
    40c4:	f000 f912 	bl	42ec <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40c8:	bf00      	nop
    40ca:	b003      	add	sp, #12
    40cc:	f85d fb04 	ldr.w	pc, [sp], #4

000040d0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40d0:	b500      	push	{lr}
    40d2:	b083      	sub	sp, #12
    40d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40d6:	9b01      	ldr	r3, [sp, #4]
    40d8:	2b00      	cmp	r3, #0
    40da:	d002      	beq.n	40e2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    40dc:	9801      	ldr	r0, [sp, #4]
    40de:	f000 f925 	bl	432c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40e2:	bf00      	nop
    40e4:	b003      	add	sp, #12
    40e6:	f85d fb04 	ldr.w	pc, [sp], #4

000040ea <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40ea:	b500      	push	{lr}
    40ec:	b083      	sub	sp, #12
    40ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40f0:	9b01      	ldr	r3, [sp, #4]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d002      	beq.n	40fc <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    40f6:	9801      	ldr	r0, [sp, #4]
    40f8:	f000 f936 	bl	4368 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40fc:	bf00      	nop
    40fe:	b003      	add	sp, #12
    4100:	f85d fb04 	ldr.w	pc, [sp], #4

00004104 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4104:	b500      	push	{lr}
    4106:	b083      	sub	sp, #12
    4108:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    410a:	9b01      	ldr	r3, [sp, #4]
    410c:	2b00      	cmp	r3, #0
    410e:	d002      	beq.n	4116 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4110:	9801      	ldr	r0, [sp, #4]
    4112:	f000 f949 	bl	43a8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4116:	bf00      	nop
    4118:	b003      	add	sp, #12
    411a:	f85d fb04 	ldr.w	pc, [sp], #4

0000411e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    411e:	b500      	push	{lr}
    4120:	b083      	sub	sp, #12
    4122:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4124:	9b01      	ldr	r3, [sp, #4]
    4126:	2b00      	cmp	r3, #0
    4128:	d002      	beq.n	4130 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    412a:	9801      	ldr	r0, [sp, #4]
    412c:	f000 f958 	bl	43e0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4130:	bf00      	nop
    4132:	b003      	add	sp, #12
    4134:	f85d fb04 	ldr.w	pc, [sp], #4

00004138 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4138:	b500      	push	{lr}
    413a:	b083      	sub	sp, #12
    413c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    413e:	9b01      	ldr	r3, [sp, #4]
    4140:	2b00      	cmp	r3, #0
    4142:	d002      	beq.n	414a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4144:	9801      	ldr	r0, [sp, #4]
    4146:	f000 f969 	bl	441c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    414a:	bf00      	nop
    414c:	b003      	add	sp, #12
    414e:	f85d fb04 	ldr.w	pc, [sp], #4

00004152 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4152:	b500      	push	{lr}
    4154:	b083      	sub	sp, #12
    4156:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4158:	9b01      	ldr	r3, [sp, #4]
    415a:	2b00      	cmp	r3, #0
    415c:	d002      	beq.n	4164 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    415e:	9801      	ldr	r0, [sp, #4]
    4160:	f000 f978 	bl	4454 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4164:	bf00      	nop
    4166:	b003      	add	sp, #12
    4168:	f85d fb04 	ldr.w	pc, [sp], #4

0000416c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    416c:	b500      	push	{lr}
    416e:	b083      	sub	sp, #12
    4170:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4172:	9b01      	ldr	r3, [sp, #4]
    4174:	2b00      	cmp	r3, #0
    4176:	d002      	beq.n	417e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4178:	9801      	ldr	r0, [sp, #4]
    417a:	f000 f989 	bl	4490 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    417e:	bf00      	nop
    4180:	b003      	add	sp, #12
    4182:	f85d fb04 	ldr.w	pc, [sp], #4

00004186 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4186:	b500      	push	{lr}
    4188:	b083      	sub	sp, #12
    418a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    418c:	9b01      	ldr	r3, [sp, #4]
    418e:	2b00      	cmp	r3, #0
    4190:	d002      	beq.n	4198 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4192:	9801      	ldr	r0, [sp, #4]
    4194:	f000 f998 	bl	44c8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4198:	bf00      	nop
    419a:	b003      	add	sp, #12
    419c:	f85d fb04 	ldr.w	pc, [sp], #4

000041a0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41a0:	b500      	push	{lr}
    41a2:	b083      	sub	sp, #12
    41a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a6:	9b01      	ldr	r3, [sp, #4]
    41a8:	2b00      	cmp	r3, #0
    41aa:	d002      	beq.n	41b2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    41ac:	9801      	ldr	r0, [sp, #4]
    41ae:	f000 f9a9 	bl	4504 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b2:	bf00      	nop
    41b4:	b003      	add	sp, #12
    41b6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ba <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ba:	b500      	push	{lr}
    41bc:	b083      	sub	sp, #12
    41be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41c0:	9b01      	ldr	r3, [sp, #4]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d002      	beq.n	41cc <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    41c6:	9801      	ldr	r0, [sp, #4]
    41c8:	f000 f9e6 	bl	4598 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41cc:	bf00      	nop
    41ce:	b003      	add	sp, #12
    41d0:	f85d fb04 	ldr.w	pc, [sp], #4

000041d4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41d4:	b500      	push	{lr}
    41d6:	b083      	sub	sp, #12
    41d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41da:	9b01      	ldr	r3, [sp, #4]
    41dc:	2b00      	cmp	r3, #0
    41de:	d002      	beq.n	41e6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    41e0:	9801      	ldr	r0, [sp, #4]
    41e2:	f000 fa25 	bl	4630 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e6:	bf00      	nop
    41e8:	b003      	add	sp, #12
    41ea:	f85d fb04 	ldr.w	pc, [sp], #4

000041ee <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ee:	b500      	push	{lr}
    41f0:	b083      	sub	sp, #12
    41f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	2b00      	cmp	r3, #0
    41f8:	d002      	beq.n	4200 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    41fa:	9801      	ldr	r0, [sp, #4]
    41fc:	f000 fa2a 	bl	4654 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4200:	bf00      	nop
    4202:	b003      	add	sp, #12
    4204:	f85d fb04 	ldr.w	pc, [sp], #4

00004208 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4208:	b500      	push	{lr}
    420a:	b083      	sub	sp, #12
    420c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    420e:	9b01      	ldr	r3, [sp, #4]
    4210:	2b00      	cmp	r3, #0
    4212:	d002      	beq.n	421a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4214:	9801      	ldr	r0, [sp, #4]
    4216:	f000 fa3b 	bl	4690 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    421a:	bf00      	nop
    421c:	b003      	add	sp, #12
    421e:	f85d fb04 	ldr.w	pc, [sp], #4

00004222 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4222:	b500      	push	{lr}
    4224:	b083      	sub	sp, #12
    4226:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4228:	9b01      	ldr	r3, [sp, #4]
    422a:	2b00      	cmp	r3, #0
    422c:	d002      	beq.n	4234 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    422e:	9801      	ldr	r0, [sp, #4]
    4230:	f000 fa56 	bl	46e0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4234:	bf00      	nop
    4236:	b003      	add	sp, #12
    4238:	f85d fb04 	ldr.w	pc, [sp], #4

0000423c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    423c:	b500      	push	{lr}
    423e:	b083      	sub	sp, #12
    4240:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4242:	9b01      	ldr	r3, [sp, #4]
    4244:	2b00      	cmp	r3, #0
    4246:	d002      	beq.n	424e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4248:	9801      	ldr	r0, [sp, #4]
    424a:	f000 fa79 	bl	4740 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    424e:	bf00      	nop
    4250:	b003      	add	sp, #12
    4252:	f85d fb04 	ldr.w	pc, [sp], #4

00004256 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4256:	b500      	push	{lr}
    4258:	b083      	sub	sp, #12
    425a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    425c:	9b01      	ldr	r3, [sp, #4]
    425e:	2b00      	cmp	r3, #0
    4260:	d002      	beq.n	4268 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4262:	9801      	ldr	r0, [sp, #4]
    4264:	f000 fa8a 	bl	477c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4268:	bf00      	nop
    426a:	b003      	add	sp, #12
    426c:	f85d fb04 	ldr.w	pc, [sp], #4

00004270 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4270:	b084      	sub	sp, #16
    4272:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4274:	4b0b      	ldr	r3, [pc, #44]	; (42a4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4276:	795b      	ldrb	r3, [r3, #5]
    4278:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    427a:	4b0b      	ldr	r3, [pc, #44]	; (42a8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    427c:	695b      	ldr	r3, [r3, #20]
    427e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4280:	9b02      	ldr	r3, [sp, #8]
    4282:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4286:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4288:	9b03      	ldr	r3, [sp, #12]
    428a:	061b      	lsls	r3, r3, #24
    428c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4290:	9a02      	ldr	r2, [sp, #8]
    4292:	4313      	orrs	r3, r2
    4294:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4296:	4a04      	ldr	r2, [pc, #16]	; (42a8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4298:	9b02      	ldr	r3, [sp, #8]
    429a:	6153      	str	r3, [r2, #20]
}
    429c:	bf00      	nop
    429e:	b004      	add	sp, #16
    42a0:	4770      	bx	lr
    42a2:	bf00      	nop
    42a4:	00010490 	.word	0x00010490
    42a8:	40064000 	.word	0x40064000

000042ac <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42ac:	b084      	sub	sp, #16
    42ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42b0:	9b01      	ldr	r3, [sp, #4]
    42b2:	685b      	ldr	r3, [r3, #4]
    42b4:	4a0b      	ldr	r2, [pc, #44]	; (42e4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    42b6:	5cd3      	ldrb	r3, [r2, r3]
    42b8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    42ba:	4b0b      	ldr	r3, [pc, #44]	; (42e8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42bc:	695b      	ldr	r3, [r3, #20]
    42be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42c0:	9b02      	ldr	r3, [sp, #8]
    42c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42c6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42c8:	9b03      	ldr	r3, [sp, #12]
    42ca:	061b      	lsls	r3, r3, #24
    42cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42d0:	9a02      	ldr	r2, [sp, #8]
    42d2:	4313      	orrs	r3, r2
    42d4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42d6:	4a04      	ldr	r2, [pc, #16]	; (42e8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    42d8:	9b02      	ldr	r3, [sp, #8]
    42da:	6153      	str	r3, [r2, #20]
}
    42dc:	bf00      	nop
    42de:	b004      	add	sp, #16
    42e0:	4770      	bx	lr
    42e2:	bf00      	nop
    42e4:	00010490 	.word	0x00010490
    42e8:	40064000 	.word	0x40064000

000042ec <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42ec:	b084      	sub	sp, #16
    42ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	685b      	ldr	r3, [r3, #4]
    42f4:	4a0b      	ldr	r2, [pc, #44]	; (4324 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    42f6:	5cd3      	ldrb	r3, [r2, r3]
    42f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    42fa:	4b0b      	ldr	r3, [pc, #44]	; (4328 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    42fc:	699b      	ldr	r3, [r3, #24]
    42fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4300:	9b02      	ldr	r3, [sp, #8]
    4302:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4306:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4308:	9b03      	ldr	r3, [sp, #12]
    430a:	061b      	lsls	r3, r3, #24
    430c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4310:	9a02      	ldr	r2, [sp, #8]
    4312:	4313      	orrs	r3, r2
    4314:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4316:	4a04      	ldr	r2, [pc, #16]	; (4328 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4318:	9b02      	ldr	r3, [sp, #8]
    431a:	6193      	str	r3, [r2, #24]
}
    431c:	bf00      	nop
    431e:	b004      	add	sp, #16
    4320:	4770      	bx	lr
    4322:	bf00      	nop
    4324:	00010490 	.word	0x00010490
    4328:	40064000 	.word	0x40064000

0000432c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    432c:	b084      	sub	sp, #16
    432e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4330:	4b0b      	ldr	r3, [pc, #44]	; (4360 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4332:	795b      	ldrb	r3, [r3, #5]
    4334:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4336:	4b0b      	ldr	r3, [pc, #44]	; (4364 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4338:	69db      	ldr	r3, [r3, #28]
    433a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    433c:	9b02      	ldr	r3, [sp, #8]
    433e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4342:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4344:	9b03      	ldr	r3, [sp, #12]
    4346:	061b      	lsls	r3, r3, #24
    4348:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    434c:	9a02      	ldr	r2, [sp, #8]
    434e:	4313      	orrs	r3, r2
    4350:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4352:	4a04      	ldr	r2, [pc, #16]	; (4364 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4354:	9b02      	ldr	r3, [sp, #8]
    4356:	61d3      	str	r3, [r2, #28]
}
    4358:	bf00      	nop
    435a:	b004      	add	sp, #16
    435c:	4770      	bx	lr
    435e:	bf00      	nop
    4360:	00010490 	.word	0x00010490
    4364:	40064000 	.word	0x40064000

00004368 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4368:	b084      	sub	sp, #16
    436a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    436c:	9b01      	ldr	r3, [sp, #4]
    436e:	685b      	ldr	r3, [r3, #4]
    4370:	4a0b      	ldr	r2, [pc, #44]	; (43a0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4372:	5cd3      	ldrb	r3, [r2, r3]
    4374:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4376:	4b0b      	ldr	r3, [pc, #44]	; (43a4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4378:	69db      	ldr	r3, [r3, #28]
    437a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    437c:	9b02      	ldr	r3, [sp, #8]
    437e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4382:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4384:	9b03      	ldr	r3, [sp, #12]
    4386:	061b      	lsls	r3, r3, #24
    4388:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    438c:	9a02      	ldr	r2, [sp, #8]
    438e:	4313      	orrs	r3, r2
    4390:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4392:	4a04      	ldr	r2, [pc, #16]	; (43a4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4394:	9b02      	ldr	r3, [sp, #8]
    4396:	61d3      	str	r3, [r2, #28]
}
    4398:	bf00      	nop
    439a:	b004      	add	sp, #16
    439c:	4770      	bx	lr
    439e:	bf00      	nop
    43a0:	00010490 	.word	0x00010490
    43a4:	40064000 	.word	0x40064000

000043a8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43a8:	b084      	sub	sp, #16
    43aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43ac:	4b0a      	ldr	r3, [pc, #40]	; (43d8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    43ae:	7b9b      	ldrb	r3, [r3, #14]
    43b0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    43b2:	4b0a      	ldr	r3, [pc, #40]	; (43dc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43b4:	691b      	ldr	r3, [r3, #16]
    43b6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    43b8:	9b02      	ldr	r3, [sp, #8]
    43ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    43be:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    43c0:	9b03      	ldr	r3, [sp, #12]
    43c2:	011b      	lsls	r3, r3, #4
    43c4:	9a02      	ldr	r2, [sp, #8]
    43c6:	4313      	orrs	r3, r2
    43c8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    43ca:	4a04      	ldr	r2, [pc, #16]	; (43dc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    43cc:	9b02      	ldr	r3, [sp, #8]
    43ce:	6113      	str	r3, [r2, #16]
}
    43d0:	bf00      	nop
    43d2:	b004      	add	sp, #16
    43d4:	4770      	bx	lr
    43d6:	bf00      	nop
    43d8:	00010438 	.word	0x00010438
    43dc:	40048000 	.word	0x40048000

000043e0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43e0:	b084      	sub	sp, #16
    43e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43e4:	9b01      	ldr	r3, [sp, #4]
    43e6:	685b      	ldr	r3, [r3, #4]
    43e8:	4a0a      	ldr	r2, [pc, #40]	; (4414 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    43ea:	5cd3      	ldrb	r3, [r2, r3]
    43ec:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    43ee:	4b0a      	ldr	r3, [pc, #40]	; (4418 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    43f0:	691b      	ldr	r3, [r3, #16]
    43f2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    43f4:	9b02      	ldr	r3, [sp, #8]
    43f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    43fa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    43fc:	9b03      	ldr	r3, [sp, #12]
    43fe:	011b      	lsls	r3, r3, #4
    4400:	9a02      	ldr	r2, [sp, #8]
    4402:	4313      	orrs	r3, r2
    4404:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4406:	4a04      	ldr	r2, [pc, #16]	; (4418 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4408:	9b02      	ldr	r3, [sp, #8]
    440a:	6113      	str	r3, [r2, #16]
}
    440c:	bf00      	nop
    440e:	b004      	add	sp, #16
    4410:	4770      	bx	lr
    4412:	bf00      	nop
    4414:	00010438 	.word	0x00010438
    4418:	40048000 	.word	0x40048000

0000441c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    441c:	b084      	sub	sp, #16
    441e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4420:	4b0a      	ldr	r3, [pc, #40]	; (444c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4422:	785b      	ldrb	r3, [r3, #1]
    4424:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4426:	4b0a      	ldr	r3, [pc, #40]	; (4450 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4428:	691b      	ldr	r3, [r3, #16]
    442a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    442c:	9b02      	ldr	r3, [sp, #8]
    442e:	f023 030c 	bic.w	r3, r3, #12
    4432:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4434:	9b03      	ldr	r3, [sp, #12]
    4436:	009b      	lsls	r3, r3, #2
    4438:	9a02      	ldr	r2, [sp, #8]
    443a:	4313      	orrs	r3, r2
    443c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    443e:	4a04      	ldr	r2, [pc, #16]	; (4450 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4440:	9b02      	ldr	r3, [sp, #8]
    4442:	6113      	str	r3, [r2, #16]
}
    4444:	bf00      	nop
    4446:	b004      	add	sp, #16
    4448:	4770      	bx	lr
    444a:	bf00      	nop
    444c:	000104f0 	.word	0x000104f0
    4450:	40048000 	.word	0x40048000

00004454 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4454:	b084      	sub	sp, #16
    4456:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4458:	9b01      	ldr	r3, [sp, #4]
    445a:	685b      	ldr	r3, [r3, #4]
    445c:	4a0a      	ldr	r2, [pc, #40]	; (4488 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    445e:	5cd3      	ldrb	r3, [r2, r3]
    4460:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4462:	4b0a      	ldr	r3, [pc, #40]	; (448c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4464:	691b      	ldr	r3, [r3, #16]
    4466:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4468:	9b02      	ldr	r3, [sp, #8]
    446a:	f023 030c 	bic.w	r3, r3, #12
    446e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4470:	9b03      	ldr	r3, [sp, #12]
    4472:	009b      	lsls	r3, r3, #2
    4474:	9a02      	ldr	r2, [sp, #8]
    4476:	4313      	orrs	r3, r2
    4478:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    447a:	4a04      	ldr	r2, [pc, #16]	; (448c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    447c:	9b02      	ldr	r3, [sp, #8]
    447e:	6113      	str	r3, [r2, #16]
}
    4480:	bf00      	nop
    4482:	b004      	add	sp, #16
    4484:	4770      	bx	lr
    4486:	bf00      	nop
    4488:	000104f0 	.word	0x000104f0
    448c:	40048000 	.word	0x40048000

00004490 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4490:	b084      	sub	sp, #16
    4492:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4494:	4b0a      	ldr	r3, [pc, #40]	; (44c0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4496:	795b      	ldrb	r3, [r3, #5]
    4498:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    449a:	4b0a      	ldr	r3, [pc, #40]	; (44c4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    449c:	6a1b      	ldr	r3, [r3, #32]
    449e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44a0:	9b02      	ldr	r3, [sp, #8]
    44a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44a6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44a8:	9b03      	ldr	r3, [sp, #12]
    44aa:	061b      	lsls	r3, r3, #24
    44ac:	9a02      	ldr	r2, [sp, #8]
    44ae:	4313      	orrs	r3, r2
    44b0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    44b2:	4a04      	ldr	r2, [pc, #16]	; (44c4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44b4:	9b02      	ldr	r3, [sp, #8]
    44b6:	6213      	str	r3, [r2, #32]
}
    44b8:	bf00      	nop
    44ba:	b004      	add	sp, #16
    44bc:	4770      	bx	lr
    44be:	bf00      	nop
    44c0:	00010490 	.word	0x00010490
    44c4:	40064000 	.word	0x40064000

000044c8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44c8:	b084      	sub	sp, #16
    44ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	685b      	ldr	r3, [r3, #4]
    44d0:	4a0a      	ldr	r2, [pc, #40]	; (44fc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    44d2:	5cd3      	ldrb	r3, [r2, r3]
    44d4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    44d6:	4b0a      	ldr	r3, [pc, #40]	; (4500 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    44d8:	6a1b      	ldr	r3, [r3, #32]
    44da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44dc:	9b02      	ldr	r3, [sp, #8]
    44de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44e2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44e4:	9b03      	ldr	r3, [sp, #12]
    44e6:	061b      	lsls	r3, r3, #24
    44e8:	9a02      	ldr	r2, [sp, #8]
    44ea:	4313      	orrs	r3, r2
    44ec:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    44ee:	4a04      	ldr	r2, [pc, #16]	; (4500 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    44f0:	9b02      	ldr	r3, [sp, #8]
    44f2:	6213      	str	r3, [r2, #32]
}
    44f4:	bf00      	nop
    44f6:	b004      	add	sp, #16
    44f8:	4770      	bx	lr
    44fa:	bf00      	nop
    44fc:	00010490 	.word	0x00010490
    4500:	40064000 	.word	0x40064000

00004504 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4504:	b086      	sub	sp, #24
    4506:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4508:	4b20      	ldr	r3, [pc, #128]	; (458c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    450a:	795b      	ldrb	r3, [r3, #5]
    450c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    450e:	9b01      	ldr	r3, [sp, #4]
    4510:	681a      	ldr	r2, [r3, #0]
    4512:	491f      	ldr	r1, [pc, #124]	; (4590 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4514:	4613      	mov	r3, r2
    4516:	00db      	lsls	r3, r3, #3
    4518:	4413      	add	r3, r2
    451a:	440b      	add	r3, r1
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4520:	4b1c      	ldr	r3, [pc, #112]	; (4594 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4522:	68db      	ldr	r3, [r3, #12]
    4524:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4526:	9b03      	ldr	r3, [sp, #12]
    4528:	2b03      	cmp	r3, #3
    452a:	d813      	bhi.n	4554 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    452c:	9b03      	ldr	r3, [sp, #12]
    452e:	005b      	lsls	r3, r3, #1
    4530:	3318      	adds	r3, #24
    4532:	2203      	movs	r2, #3
    4534:	fa02 f303 	lsl.w	r3, r2, r3
    4538:	43db      	mvns	r3, r3
    453a:	9a05      	ldr	r2, [sp, #20]
    453c:	4013      	ands	r3, r2
    453e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4540:	9b03      	ldr	r3, [sp, #12]
    4542:	005b      	lsls	r3, r3, #1
    4544:	3318      	adds	r3, #24
    4546:	9a04      	ldr	r2, [sp, #16]
    4548:	fa02 f303 	lsl.w	r3, r2, r3
    454c:	9a05      	ldr	r2, [sp, #20]
    454e:	4313      	orrs	r3, r2
    4550:	9305      	str	r3, [sp, #20]
    4552:	e014      	b.n	457e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4554:	9b03      	ldr	r3, [sp, #12]
    4556:	3b04      	subs	r3, #4
    4558:	005b      	lsls	r3, r3, #1
    455a:	3310      	adds	r3, #16
    455c:	2203      	movs	r2, #3
    455e:	fa02 f303 	lsl.w	r3, r2, r3
    4562:	43db      	mvns	r3, r3
    4564:	9a05      	ldr	r2, [sp, #20]
    4566:	4013      	ands	r3, r2
    4568:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    456a:	9b03      	ldr	r3, [sp, #12]
    456c:	3b04      	subs	r3, #4
    456e:	005b      	lsls	r3, r3, #1
    4570:	3310      	adds	r3, #16
    4572:	9a04      	ldr	r2, [sp, #16]
    4574:	fa02 f303 	lsl.w	r3, r2, r3
    4578:	9a05      	ldr	r2, [sp, #20]
    457a:	4313      	orrs	r3, r2
    457c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    457e:	4a05      	ldr	r2, [pc, #20]	; (4594 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4580:	9b05      	ldr	r3, [sp, #20]
    4582:	60d3      	str	r3, [r2, #12]
}
    4584:	bf00      	nop
    4586:	b006      	add	sp, #24
    4588:	4770      	bx	lr
    458a:	bf00      	nop
    458c:	00010438 	.word	0x00010438
    4590:	00010128 	.word	0x00010128
    4594:	40048000 	.word	0x40048000

00004598 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4598:	b086      	sub	sp, #24
    459a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    459c:	9b01      	ldr	r3, [sp, #4]
    459e:	685b      	ldr	r3, [r3, #4]
    45a0:	4a20      	ldr	r2, [pc, #128]	; (4624 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    45a2:	5cd3      	ldrb	r3, [r2, r3]
    45a4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45a6:	9b01      	ldr	r3, [sp, #4]
    45a8:	681a      	ldr	r2, [r3, #0]
    45aa:	491f      	ldr	r1, [pc, #124]	; (4628 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    45ac:	4613      	mov	r3, r2
    45ae:	00db      	lsls	r3, r3, #3
    45b0:	4413      	add	r3, r2
    45b2:	440b      	add	r3, r1
    45b4:	781b      	ldrb	r3, [r3, #0]
    45b6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45b8:	4b1c      	ldr	r3, [pc, #112]	; (462c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    45ba:	68db      	ldr	r3, [r3, #12]
    45bc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45be:	9b03      	ldr	r3, [sp, #12]
    45c0:	2b03      	cmp	r3, #3
    45c2:	d813      	bhi.n	45ec <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45c4:	9b03      	ldr	r3, [sp, #12]
    45c6:	005b      	lsls	r3, r3, #1
    45c8:	3318      	adds	r3, #24
    45ca:	2203      	movs	r2, #3
    45cc:	fa02 f303 	lsl.w	r3, r2, r3
    45d0:	43db      	mvns	r3, r3
    45d2:	9a05      	ldr	r2, [sp, #20]
    45d4:	4013      	ands	r3, r2
    45d6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45d8:	9b03      	ldr	r3, [sp, #12]
    45da:	005b      	lsls	r3, r3, #1
    45dc:	3318      	adds	r3, #24
    45de:	9a04      	ldr	r2, [sp, #16]
    45e0:	fa02 f303 	lsl.w	r3, r2, r3
    45e4:	9a05      	ldr	r2, [sp, #20]
    45e6:	4313      	orrs	r3, r2
    45e8:	9305      	str	r3, [sp, #20]
    45ea:	e014      	b.n	4616 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    45ec:	9b03      	ldr	r3, [sp, #12]
    45ee:	3b04      	subs	r3, #4
    45f0:	005b      	lsls	r3, r3, #1
    45f2:	3310      	adds	r3, #16
    45f4:	2203      	movs	r2, #3
    45f6:	fa02 f303 	lsl.w	r3, r2, r3
    45fa:	43db      	mvns	r3, r3
    45fc:	9a05      	ldr	r2, [sp, #20]
    45fe:	4013      	ands	r3, r2
    4600:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4602:	9b03      	ldr	r3, [sp, #12]
    4604:	3b04      	subs	r3, #4
    4606:	005b      	lsls	r3, r3, #1
    4608:	3310      	adds	r3, #16
    460a:	9a04      	ldr	r2, [sp, #16]
    460c:	fa02 f303 	lsl.w	r3, r2, r3
    4610:	9a05      	ldr	r2, [sp, #20]
    4612:	4313      	orrs	r3, r2
    4614:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4616:	4a05      	ldr	r2, [pc, #20]	; (462c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4618:	9b05      	ldr	r3, [sp, #20]
    461a:	60d3      	str	r3, [r2, #12]
}
    461c:	bf00      	nop
    461e:	b006      	add	sp, #24
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	00010438 	.word	0x00010438
    4628:	00010128 	.word	0x00010128
    462c:	40048000 	.word	0x40048000

00004630 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4630:	b084      	sub	sp, #16
    4632:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4634:	4b06      	ldr	r3, [pc, #24]	; (4650 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4636:	685b      	ldr	r3, [r3, #4]
    4638:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    463a:	9b03      	ldr	r3, [sp, #12]
    463c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4640:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4642:	4a03      	ldr	r2, [pc, #12]	; (4650 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4644:	9b03      	ldr	r3, [sp, #12]
    4646:	6053      	str	r3, [r2, #4]
}
    4648:	bf00      	nop
    464a:	b004      	add	sp, #16
    464c:	4770      	bx	lr
    464e:	bf00      	nop
    4650:	40048000 	.word	0x40048000

00004654 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4654:	b084      	sub	sp, #16
    4656:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4658:	9b01      	ldr	r3, [sp, #4]
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	4a0a      	ldr	r2, [pc, #40]	; (4688 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    465e:	5cd3      	ldrb	r3, [r2, r3]
    4660:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4662:	4b0a      	ldr	r3, [pc, #40]	; (468c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4664:	685b      	ldr	r3, [r3, #4]
    4666:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4668:	9b02      	ldr	r3, [sp, #8]
    466a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    466e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4670:	9b03      	ldr	r3, [sp, #12]
    4672:	011b      	lsls	r3, r3, #4
    4674:	9a02      	ldr	r2, [sp, #8]
    4676:	4313      	orrs	r3, r2
    4678:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    467a:	4a04      	ldr	r2, [pc, #16]	; (468c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    467c:	9b02      	ldr	r3, [sp, #8]
    467e:	6053      	str	r3, [r2, #4]
}
    4680:	bf00      	nop
    4682:	b004      	add	sp, #16
    4684:	4770      	bx	lr
    4686:	bf00      	nop
    4688:	00010438 	.word	0x00010438
    468c:	40048000 	.word	0x40048000

00004690 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4690:	b084      	sub	sp, #16
    4692:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4694:	9b01      	ldr	r3, [sp, #4]
    4696:	681a      	ldr	r2, [r3, #0]
    4698:	490f      	ldr	r1, [pc, #60]	; (46d8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    469a:	4613      	mov	r3, r2
    469c:	00db      	lsls	r3, r3, #3
    469e:	4413      	add	r3, r2
    46a0:	440b      	add	r3, r1
    46a2:	3304      	adds	r3, #4
    46a4:	781b      	ldrb	r3, [r3, #0]
    46a6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    46a8:	4a0c      	ldr	r2, [pc, #48]	; (46dc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46aa:	9b03      	ldr	r3, [sp, #12]
    46ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46b0:	490a      	ldr	r1, [pc, #40]	; (46dc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    46b6:	9b03      	ldr	r3, [sp, #12]
    46b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    46bc:	4a07      	ldr	r2, [pc, #28]	; (46dc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46be:	9b03      	ldr	r3, [sp, #12]
    46c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46c4:	4905      	ldr	r1, [pc, #20]	; (46dc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    46ca:	9b03      	ldr	r3, [sp, #12]
    46cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    46d0:	bf00      	nop
    46d2:	b004      	add	sp, #16
    46d4:	4770      	bx	lr
    46d6:	bf00      	nop
    46d8:	00010128 	.word	0x00010128
    46dc:	40065000 	.word	0x40065000

000046e0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46e0:	b086      	sub	sp, #24
    46e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    46e4:	9b01      	ldr	r3, [sp, #4]
    46e6:	681a      	ldr	r2, [r3, #0]
    46e8:	4912      	ldr	r1, [pc, #72]	; (4734 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    46ea:	4613      	mov	r3, r2
    46ec:	00db      	lsls	r3, r3, #3
    46ee:	4413      	add	r3, r2
    46f0:	440b      	add	r3, r1
    46f2:	3304      	adds	r3, #4
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46f8:	9b01      	ldr	r3, [sp, #4]
    46fa:	685b      	ldr	r3, [r3, #4]
    46fc:	4a0e      	ldr	r2, [pc, #56]	; (4738 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    46fe:	5cd3      	ldrb	r3, [r2, r3]
    4700:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4702:	4a0e      	ldr	r2, [pc, #56]	; (473c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4704:	9b05      	ldr	r3, [sp, #20]
    4706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    470a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    470c:	9b03      	ldr	r3, [sp, #12]
    470e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4712:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4714:	9b04      	ldr	r3, [sp, #16]
    4716:	061b      	lsls	r3, r3, #24
    4718:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    471c:	9a03      	ldr	r2, [sp, #12]
    471e:	4313      	orrs	r3, r2
    4720:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4722:	4906      	ldr	r1, [pc, #24]	; (473c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4724:	9b05      	ldr	r3, [sp, #20]
    4726:	9a03      	ldr	r2, [sp, #12]
    4728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    472c:	bf00      	nop
    472e:	b006      	add	sp, #24
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	00010128 	.word	0x00010128
    4738:	000104c0 	.word	0x000104c0
    473c:	40065000 	.word	0x40065000

00004740 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4740:	b084      	sub	sp, #16
    4742:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4744:	4b0b      	ldr	r3, [pc, #44]	; (4774 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4746:	7f1b      	ldrb	r3, [r3, #28]
    4748:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    474a:	4b0b      	ldr	r3, [pc, #44]	; (4778 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    474c:	685b      	ldr	r3, [r3, #4]
    474e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4750:	9b02      	ldr	r3, [sp, #8]
    4752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4756:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4758:	9b03      	ldr	r3, [sp, #12]
    475a:	031b      	lsls	r3, r3, #12
    475c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4760:	9a02      	ldr	r2, [sp, #8]
    4762:	4313      	orrs	r3, r2
    4764:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4766:	4a04      	ldr	r2, [pc, #16]	; (4778 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4768:	9b02      	ldr	r3, [sp, #8]
    476a:	6053      	str	r3, [r2, #4]
}
    476c:	bf00      	nop
    476e:	b004      	add	sp, #16
    4770:	4770      	bx	lr
    4772:	bf00      	nop
    4774:	00010438 	.word	0x00010438
    4778:	40048000 	.word	0x40048000

0000477c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    477c:	b084      	sub	sp, #16
    477e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4780:	9b01      	ldr	r3, [sp, #4]
    4782:	685b      	ldr	r3, [r3, #4]
    4784:	4a0b      	ldr	r2, [pc, #44]	; (47b4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4786:	5cd3      	ldrb	r3, [r2, r3]
    4788:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    478a:	4b0b      	ldr	r3, [pc, #44]	; (47b8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    478c:	685b      	ldr	r3, [r3, #4]
    478e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4790:	9b02      	ldr	r3, [sp, #8]
    4792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4796:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4798:	9b03      	ldr	r3, [sp, #12]
    479a:	031b      	lsls	r3, r3, #12
    479c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47a0:	9a02      	ldr	r2, [sp, #8]
    47a2:	4313      	orrs	r3, r2
    47a4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47a6:	4a04      	ldr	r2, [pc, #16]	; (47b8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47a8:	9b02      	ldr	r3, [sp, #8]
    47aa:	6053      	str	r3, [r2, #4]
}
    47ac:	bf00      	nop
    47ae:	b004      	add	sp, #16
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop
    47b4:	00010438 	.word	0x00010438
    47b8:	40048000 	.word	0x40048000

000047bc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    47bc:	b500      	push	{lr}
    47be:	b085      	sub	sp, #20
    47c0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    47c2:	2300      	movs	r3, #0
    47c4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    47c8:	9b01      	ldr	r3, [sp, #4]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d037      	beq.n	483e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    47ce:	2300      	movs	r3, #0
    47d0:	9303      	str	r3, [sp, #12]
    47d2:	e02b      	b.n	482c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    47d4:	4b29      	ldr	r3, [pc, #164]	; (487c <DisableSafeClock+0xc0>)
    47d6:	6819      	ldr	r1, [r3, #0]
    47d8:	9a03      	ldr	r2, [sp, #12]
    47da:	4613      	mov	r3, r2
    47dc:	005b      	lsls	r3, r3, #1
    47de:	4413      	add	r3, r2
    47e0:	009b      	lsls	r3, r3, #2
    47e2:	440b      	add	r3, r1
    47e4:	3314      	adds	r3, #20
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	2b05      	cmp	r3, #5
    47ea:	d11c      	bne.n	4826 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    47ec:	2301      	movs	r3, #1
    47ee:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    47f2:	4b22      	ldr	r3, [pc, #136]	; (487c <DisableSafeClock+0xc0>)
    47f4:	6819      	ldr	r1, [r3, #0]
    47f6:	9a03      	ldr	r2, [sp, #12]
    47f8:	4613      	mov	r3, r2
    47fa:	005b      	lsls	r3, r3, #1
    47fc:	4413      	add	r3, r2
    47fe:	009b      	lsls	r3, r3, #2
    4800:	440b      	add	r3, r1
    4802:	3318      	adds	r3, #24
    4804:	881b      	ldrh	r3, [r3, #0]
    4806:	2b00      	cmp	r3, #0
    4808:	d118      	bne.n	483c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    480a:	4b1d      	ldr	r3, [pc, #116]	; (4880 <DisableSafeClock+0xc4>)
    480c:	791b      	ldrb	r3, [r3, #4]
    480e:	4619      	mov	r1, r3
    4810:	4a1c      	ldr	r2, [pc, #112]	; (4884 <DisableSafeClock+0xc8>)
    4812:	460b      	mov	r3, r1
    4814:	005b      	lsls	r3, r3, #1
    4816:	440b      	add	r3, r1
    4818:	009b      	lsls	r3, r3, #2
    481a:	4413      	add	r3, r2
    481c:	3308      	adds	r3, #8
    481e:	681b      	ldr	r3, [r3, #0]
    4820:	2005      	movs	r0, #5
    4822:	4798      	blx	r3
                }
                break;
    4824:	e00a      	b.n	483c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4826:	9b03      	ldr	r3, [sp, #12]
    4828:	3301      	adds	r3, #1
    482a:	9303      	str	r3, [sp, #12]
    482c:	4b13      	ldr	r3, [pc, #76]	; (487c <DisableSafeClock+0xc0>)
    482e:	681b      	ldr	r3, [r3, #0]
    4830:	7a1b      	ldrb	r3, [r3, #8]
    4832:	461a      	mov	r2, r3
    4834:	9b03      	ldr	r3, [sp, #12]
    4836:	4293      	cmp	r3, r2
    4838:	d3cc      	bcc.n	47d4 <DisableSafeClock+0x18>
    483a:	e000      	b.n	483e <DisableSafeClock+0x82>
                break;
    483c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    483e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4842:	f083 0301 	eor.w	r3, r3, #1
    4846:	b2db      	uxtb	r3, r3
    4848:	2b00      	cmp	r3, #0
    484a:	d013      	beq.n	4874 <DisableSafeClock+0xb8>
    484c:	4b0e      	ldr	r3, [pc, #56]	; (4888 <DisableSafeClock+0xcc>)
    484e:	781b      	ldrb	r3, [r3, #0]
    4850:	f083 0301 	eor.w	r3, r3, #1
    4854:	b2db      	uxtb	r3, r3
    4856:	2b00      	cmp	r3, #0
    4858:	d00c      	beq.n	4874 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    485a:	4b09      	ldr	r3, [pc, #36]	; (4880 <DisableSafeClock+0xc4>)
    485c:	791b      	ldrb	r3, [r3, #4]
    485e:	4619      	mov	r1, r3
    4860:	4a08      	ldr	r2, [pc, #32]	; (4884 <DisableSafeClock+0xc8>)
    4862:	460b      	mov	r3, r1
    4864:	005b      	lsls	r3, r3, #1
    4866:	440b      	add	r3, r1
    4868:	009b      	lsls	r3, r3, #2
    486a:	4413      	add	r3, r2
    486c:	3308      	adds	r3, #8
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	2005      	movs	r0, #5
    4872:	4798      	blx	r3
    }
}
    4874:	bf00      	nop
    4876:	b005      	add	sp, #20
    4878:	f85d fb04 	ldr.w	pc, [sp], #4
    487c:	1fff8b98 	.word	0x1fff8b98
    4880:	000100b8 	.word	0x000100b8
    4884:	000106e8 	.word	0x000106e8
    4888:	1fff8b18 	.word	0x1fff8b18

0000488c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    488c:	4b06      	ldr	r3, [pc, #24]	; (48a8 <SetFircToResetValue_TrustedCall+0x1c>)
    488e:	2200      	movs	r2, #0
    4890:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4894:	4b04      	ldr	r3, [pc, #16]	; (48a8 <SetFircToResetValue_TrustedCall+0x1c>)
    4896:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    489a:	4a03      	ldr	r2, [pc, #12]	; (48a8 <SetFircToResetValue_TrustedCall+0x1c>)
    489c:	f043 0301 	orr.w	r3, r3, #1
    48a0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    48a4:	bf00      	nop
    48a6:	4770      	bx	lr
    48a8:	40064000 	.word	0x40064000

000048ac <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    48ac:	b084      	sub	sp, #16
    48ae:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    48b0:	2303      	movs	r3, #3
    48b2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    48b4:	2300      	movs	r3, #0
    48b6:	9302      	str	r3, [sp, #8]
    48b8:	e028      	b.n	490c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    48ba:	9b01      	ldr	r3, [sp, #4]
    48bc:	9a02      	ldr	r2, [sp, #8]
    48be:	320d      	adds	r2, #13
    48c0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    48c4:	2b28      	cmp	r3, #40	; 0x28
    48c6:	d10b      	bne.n	48e0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    48c8:	9a01      	ldr	r2, [sp, #4]
    48ca:	9b02      	ldr	r3, [sp, #8]
    48cc:	330d      	adds	r3, #13
    48ce:	00db      	lsls	r3, r3, #3
    48d0:	4413      	add	r3, r2
    48d2:	685b      	ldr	r3, [r3, #4]
    48d4:	4a2b      	ldr	r2, [pc, #172]	; (4984 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    48d6:	5cd3      	ldrb	r3, [r2, r3]
    48d8:	011b      	lsls	r3, r3, #4
    48da:	9a03      	ldr	r2, [sp, #12]
    48dc:	4313      	orrs	r3, r2
    48de:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    48e0:	9b01      	ldr	r3, [sp, #4]
    48e2:	9a02      	ldr	r2, [sp, #8]
    48e4:	320d      	adds	r2, #13
    48e6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    48ea:	2b29      	cmp	r3, #41	; 0x29
    48ec:	d10b      	bne.n	4906 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    48ee:	9a01      	ldr	r2, [sp, #4]
    48f0:	9b02      	ldr	r3, [sp, #8]
    48f2:	330d      	adds	r3, #13
    48f4:	00db      	lsls	r3, r3, #3
    48f6:	4413      	add	r3, r2
    48f8:	685b      	ldr	r3, [r3, #4]
    48fa:	4a23      	ldr	r2, [pc, #140]	; (4988 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    48fc:	5cd3      	ldrb	r3, [r2, r3]
    48fe:	009b      	lsls	r3, r3, #2
    4900:	9a03      	ldr	r2, [sp, #12]
    4902:	4313      	orrs	r3, r2
    4904:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4906:	9b02      	ldr	r3, [sp, #8]
    4908:	3301      	adds	r3, #1
    490a:	9302      	str	r3, [sp, #8]
    490c:	9b01      	ldr	r3, [sp, #4]
    490e:	7adb      	ldrb	r3, [r3, #11]
    4910:	461a      	mov	r2, r3
    4912:	9b02      	ldr	r3, [sp, #8]
    4914:	4293      	cmp	r3, r2
    4916:	d3d0      	bcc.n	48ba <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4918:	2300      	movs	r3, #0
    491a:	9302      	str	r3, [sp, #8]
    491c:	e026      	b.n	496c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    491e:	9a01      	ldr	r2, [sp, #4]
    4920:	9b02      	ldr	r3, [sp, #8]
    4922:	334e      	adds	r3, #78	; 0x4e
    4924:	00db      	lsls	r3, r3, #3
    4926:	4413      	add	r3, r2
    4928:	685b      	ldr	r3, [r3, #4]
    492a:	2b12      	cmp	r3, #18
    492c:	d109      	bne.n	4942 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    492e:	9a01      	ldr	r2, [sp, #4]
    4930:	9b02      	ldr	r3, [sp, #8]
    4932:	334e      	adds	r3, #78	; 0x4e
    4934:	00db      	lsls	r3, r3, #3
    4936:	4413      	add	r3, r2
    4938:	891b      	ldrh	r3, [r3, #8]
    493a:	005b      	lsls	r3, r3, #1
    493c:	9a03      	ldr	r2, [sp, #12]
    493e:	4313      	orrs	r3, r2
    4940:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4942:	9a01      	ldr	r2, [sp, #4]
    4944:	9b02      	ldr	r3, [sp, #8]
    4946:	334e      	adds	r3, #78	; 0x4e
    4948:	00db      	lsls	r3, r3, #3
    494a:	4413      	add	r3, r2
    494c:	685b      	ldr	r3, [r3, #4]
    494e:	2b13      	cmp	r3, #19
    4950:	d109      	bne.n	4966 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4952:	9a01      	ldr	r2, [sp, #4]
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	334e      	adds	r3, #78	; 0x4e
    4958:	00db      	lsls	r3, r3, #3
    495a:	4413      	add	r3, r2
    495c:	891b      	ldrh	r3, [r3, #8]
    495e:	461a      	mov	r2, r3
    4960:	9b03      	ldr	r3, [sp, #12]
    4962:	4313      	orrs	r3, r2
    4964:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4966:	9b02      	ldr	r3, [sp, #8]
    4968:	3301      	adds	r3, #1
    496a:	9302      	str	r3, [sp, #8]
    496c:	9b01      	ldr	r3, [sp, #4]
    496e:	7c1b      	ldrb	r3, [r3, #16]
    4970:	461a      	mov	r2, r3
    4972:	9b02      	ldr	r3, [sp, #8]
    4974:	4293      	cmp	r3, r2
    4976:	d3d2      	bcc.n	491e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4978:	4a04      	ldr	r2, [pc, #16]	; (498c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    497a:	9b03      	ldr	r3, [sp, #12]
    497c:	6113      	str	r3, [r2, #16]
}
    497e:	bf00      	nop
    4980:	b004      	add	sp, #16
    4982:	4770      	bx	lr
    4984:	00010438 	.word	0x00010438
    4988:	000104f0 	.word	0x000104f0
    498c:	40048000 	.word	0x40048000

00004990 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4990:	b500      	push	{lr}
    4992:	b089      	sub	sp, #36	; 0x24
    4994:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4996:	2300      	movs	r3, #0
    4998:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    499c:	4a21      	ldr	r2, [pc, #132]	; (4a24 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    499e:	9b01      	ldr	r3, [sp, #4]
    49a0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    49a2:	4b21      	ldr	r3, [pc, #132]	; (4a28 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49a4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49a8:	f003 0301 	and.w	r3, r3, #1
    49ac:	2b00      	cmp	r3, #0
    49ae:	d12e      	bne.n	4a0e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    49b0:	4b1e      	ldr	r3, [pc, #120]	; (4a2c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    49b2:	2200      	movs	r2, #0
    49b4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    49b6:	f7ff ff69 	bl	488c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49ba:	aa03      	add	r2, sp, #12
    49bc:	a904      	add	r1, sp, #16
    49be:	a805      	add	r0, sp, #20
    49c0:	f24c 3350 	movw	r3, #50000	; 0xc350
    49c4:	f7fe f8ae 	bl	2b24 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49c8:	4b17      	ldr	r3, [pc, #92]	; (4a28 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49ce:	0e1b      	lsrs	r3, r3, #24
    49d0:	f003 0301 	and.w	r3, r3, #1
    49d4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49d6:	9a03      	ldr	r2, [sp, #12]
    49d8:	a904      	add	r1, sp, #16
    49da:	ab05      	add	r3, sp, #20
    49dc:	4618      	mov	r0, r3
    49de:	f7fe f8bb 	bl	2b58 <Clock_Ip_TimeoutExpired>
    49e2:	4603      	mov	r3, r0
    49e4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    49e8:	9b06      	ldr	r3, [sp, #24]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d106      	bne.n	49fc <Clock_Ip_SpecificPlatformInitClock+0x6c>
    49ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49f2:	f083 0301 	eor.w	r3, r3, #1
    49f6:	b2db      	uxtb	r3, r3
    49f8:	2b00      	cmp	r3, #0
    49fa:	d1e5      	bne.n	49c8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    49fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a00:	2b00      	cmp	r3, #0
    4a02:	d007      	beq.n	4a14 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a04:	2105      	movs	r1, #5
    4a06:	2001      	movs	r0, #1
    4a08:	f7fe f87c 	bl	2b04 <Clock_Ip_ReportClockErrors>
    4a0c:	e002      	b.n	4a14 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4a0e:	4b07      	ldr	r3, [pc, #28]	; (4a2c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a10:	2201      	movs	r2, #1
    4a12:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4a14:	9801      	ldr	r0, [sp, #4]
    4a16:	f7ff ff49 	bl	48ac <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4a1a:	bf00      	nop
    4a1c:	b009      	add	sp, #36	; 0x24
    4a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a22:	bf00      	nop
    4a24:	1fff8b98 	.word	0x1fff8b98
    4a28:	40064000 	.word	0x40064000
    4a2c:	1fff8b18 	.word	0x1fff8b18

00004a30 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4a30:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4a32:	2300      	movs	r3, #0
    4a34:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a36:	4b29      	ldr	r3, [pc, #164]	; (4adc <getFircConfig+0xac>)
    4a38:	681b      	ldr	r3, [r3, #0]
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	d024      	beq.n	4a88 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a3e:	2300      	movs	r3, #0
    4a40:	9301      	str	r3, [sp, #4]
    4a42:	e01a      	b.n	4a7a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4a44:	4b25      	ldr	r3, [pc, #148]	; (4adc <getFircConfig+0xac>)
    4a46:	6819      	ldr	r1, [r3, #0]
    4a48:	9a01      	ldr	r2, [sp, #4]
    4a4a:	4613      	mov	r3, r2
    4a4c:	005b      	lsls	r3, r3, #1
    4a4e:	4413      	add	r3, r2
    4a50:	009b      	lsls	r3, r3, #2
    4a52:	440b      	add	r3, r1
    4a54:	3314      	adds	r3, #20
    4a56:	681b      	ldr	r3, [r3, #0]
    4a58:	2b05      	cmp	r3, #5
    4a5a:	d10b      	bne.n	4a74 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4a5c:	4b1f      	ldr	r3, [pc, #124]	; (4adc <getFircConfig+0xac>)
    4a5e:	6819      	ldr	r1, [r3, #0]
    4a60:	9a01      	ldr	r2, [sp, #4]
    4a62:	4613      	mov	r3, r2
    4a64:	005b      	lsls	r3, r3, #1
    4a66:	4413      	add	r3, r2
    4a68:	009b      	lsls	r3, r3, #2
    4a6a:	3310      	adds	r3, #16
    4a6c:	440b      	add	r3, r1
    4a6e:	3304      	adds	r3, #4
    4a70:	9300      	str	r3, [sp, #0]
                break;
    4a72:	e009      	b.n	4a88 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a74:	9b01      	ldr	r3, [sp, #4]
    4a76:	3301      	adds	r3, #1
    4a78:	9301      	str	r3, [sp, #4]
    4a7a:	4b18      	ldr	r3, [pc, #96]	; (4adc <getFircConfig+0xac>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	7a1b      	ldrb	r3, [r3, #8]
    4a80:	461a      	mov	r2, r3
    4a82:	9b01      	ldr	r3, [sp, #4]
    4a84:	4293      	cmp	r3, r2
    4a86:	d3dd      	bcc.n	4a44 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4a88:	9b00      	ldr	r3, [sp, #0]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d121      	bne.n	4ad2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4a8e:	4b14      	ldr	r3, [pc, #80]	; (4ae0 <getFircConfig+0xb0>)
    4a90:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4a92:	4b13      	ldr	r3, [pc, #76]	; (4ae0 <getFircConfig+0xb0>)
    4a94:	2205      	movs	r2, #5
    4a96:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4a98:	4b12      	ldr	r3, [pc, #72]	; (4ae4 <getFircConfig+0xb4>)
    4a9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a9e:	b29b      	uxth	r3, r3
    4aa0:	f003 0301 	and.w	r3, r3, #1
    4aa4:	b29a      	uxth	r2, r3
    4aa6:	4b0e      	ldr	r3, [pc, #56]	; (4ae0 <getFircConfig+0xb0>)
    4aa8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4aaa:	4b0e      	ldr	r3, [pc, #56]	; (4ae4 <getFircConfig+0xb4>)
    4aac:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ab0:	b2db      	uxtb	r3, r3
    4ab2:	f003 0303 	and.w	r3, r3, #3
    4ab6:	b2da      	uxtb	r2, r3
    4ab8:	4b09      	ldr	r3, [pc, #36]	; (4ae0 <getFircConfig+0xb0>)
    4aba:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4abc:	4b09      	ldr	r3, [pc, #36]	; (4ae4 <getFircConfig+0xb4>)
    4abe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ac2:	b2db      	uxtb	r3, r3
    4ac4:	10db      	asrs	r3, r3, #3
    4ac6:	b2db      	uxtb	r3, r3
    4ac8:	f003 0301 	and.w	r3, r3, #1
    4acc:	b2da      	uxtb	r2, r3
    4ace:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <getFircConfig+0xb0>)
    4ad0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4ad2:	9b00      	ldr	r3, [sp, #0]
}
    4ad4:	4618      	mov	r0, r3
    4ad6:	b002      	add	sp, #8
    4ad8:	4770      	bx	lr
    4ada:	bf00      	nop
    4adc:	1fff8b98 	.word	0x1fff8b98
    4ae0:	1fff8c04 	.word	0x1fff8c04
    4ae4:	40064000 	.word	0x40064000

00004ae8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4ae8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4aea:	2300      	movs	r3, #0
    4aec:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4aee:	4b20      	ldr	r3, [pc, #128]	; (4b70 <getSoscConfig+0x88>)
    4af0:	681b      	ldr	r3, [r3, #0]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d024      	beq.n	4b40 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4af6:	2300      	movs	r3, #0
    4af8:	9301      	str	r3, [sp, #4]
    4afa:	e01a      	b.n	4b32 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4afc:	4b1c      	ldr	r3, [pc, #112]	; (4b70 <getSoscConfig+0x88>)
    4afe:	6819      	ldr	r1, [r3, #0]
    4b00:	9a01      	ldr	r2, [sp, #4]
    4b02:	4613      	mov	r3, r2
    4b04:	009b      	lsls	r3, r3, #2
    4b06:	4413      	add	r3, r2
    4b08:	009b      	lsls	r3, r3, #2
    4b0a:	440b      	add	r3, r1
    4b0c:	332c      	adds	r3, #44	; 0x2c
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	2b08      	cmp	r3, #8
    4b12:	d10b      	bne.n	4b2c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4b14:	4b16      	ldr	r3, [pc, #88]	; (4b70 <getSoscConfig+0x88>)
    4b16:	6819      	ldr	r1, [r3, #0]
    4b18:	9a01      	ldr	r2, [sp, #4]
    4b1a:	4613      	mov	r3, r2
    4b1c:	009b      	lsls	r3, r3, #2
    4b1e:	4413      	add	r3, r2
    4b20:	009b      	lsls	r3, r3, #2
    4b22:	3328      	adds	r3, #40	; 0x28
    4b24:	440b      	add	r3, r1
    4b26:	3304      	adds	r3, #4
    4b28:	9300      	str	r3, [sp, #0]
                break;
    4b2a:	e009      	b.n	4b40 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b2c:	9b01      	ldr	r3, [sp, #4]
    4b2e:	3301      	adds	r3, #1
    4b30:	9301      	str	r3, [sp, #4]
    4b32:	4b0f      	ldr	r3, [pc, #60]	; (4b70 <getSoscConfig+0x88>)
    4b34:	681b      	ldr	r3, [r3, #0]
    4b36:	7a5b      	ldrb	r3, [r3, #9]
    4b38:	461a      	mov	r2, r3
    4b3a:	9b01      	ldr	r3, [sp, #4]
    4b3c:	4293      	cmp	r3, r2
    4b3e:	d3dd      	bcc.n	4afc <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b40:	9b00      	ldr	r3, [sp, #0]
    4b42:	2b00      	cmp	r3, #0
    4b44:	d110      	bne.n	4b68 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4b46:	4b0b      	ldr	r3, [pc, #44]	; (4b74 <getSoscConfig+0x8c>)
    4b48:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4b4a:	4b0a      	ldr	r3, [pc, #40]	; (4b74 <getSoscConfig+0x8c>)
    4b4c:	2208      	movs	r2, #8
    4b4e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4b50:	4b09      	ldr	r3, [pc, #36]	; (4b78 <getSoscConfig+0x90>)
    4b52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4b56:	b29b      	uxth	r3, r3
    4b58:	f003 0301 	and.w	r3, r3, #1
    4b5c:	b29a      	uxth	r2, r3
    4b5e:	4b05      	ldr	r3, [pc, #20]	; (4b74 <getSoscConfig+0x8c>)
    4b60:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4b62:	4b04      	ldr	r3, [pc, #16]	; (4b74 <getSoscConfig+0x8c>)
    4b64:	4a05      	ldr	r2, [pc, #20]	; (4b7c <getSoscConfig+0x94>)
    4b66:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4b68:	9b00      	ldr	r3, [sp, #0]
}
    4b6a:	4618      	mov	r0, r3
    4b6c:	b002      	add	sp, #8
    4b6e:	4770      	bx	lr
    4b70:	1fff8b98 	.word	0x1fff8b98
    4b74:	1fff8c10 	.word	0x1fff8c10
    4b78:	40064000 	.word	0x40064000
    4b7c:	02625a00 	.word	0x02625a00

00004b80 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4b80:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4b82:	2300      	movs	r3, #0
    4b84:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b86:	4b28      	ldr	r3, [pc, #160]	; (4c28 <getSpllConfig+0xa8>)
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d023      	beq.n	4bd6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4b8e:	2300      	movs	r3, #0
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	e019      	b.n	4bc8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4b94:	4b24      	ldr	r3, [pc, #144]	; (4c28 <getSpllConfig+0xa8>)
    4b96:	6819      	ldr	r1, [r3, #0]
    4b98:	9a01      	ldr	r2, [sp, #4]
    4b9a:	4613      	mov	r3, r2
    4b9c:	009b      	lsls	r3, r3, #2
    4b9e:	4413      	add	r3, r2
    4ba0:	00db      	lsls	r3, r3, #3
    4ba2:	440b      	add	r3, r1
    4ba4:	3340      	adds	r3, #64	; 0x40
    4ba6:	681b      	ldr	r3, [r3, #0]
    4ba8:	2b09      	cmp	r3, #9
    4baa:	d10a      	bne.n	4bc2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4bac:	4b1e      	ldr	r3, [pc, #120]	; (4c28 <getSpllConfig+0xa8>)
    4bae:	6819      	ldr	r1, [r3, #0]
    4bb0:	9a01      	ldr	r2, [sp, #4]
    4bb2:	4613      	mov	r3, r2
    4bb4:	009b      	lsls	r3, r3, #2
    4bb6:	4413      	add	r3, r2
    4bb8:	00db      	lsls	r3, r3, #3
    4bba:	3340      	adds	r3, #64	; 0x40
    4bbc:	440b      	add	r3, r1
    4bbe:	9300      	str	r3, [sp, #0]
                break;
    4bc0:	e009      	b.n	4bd6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4bc2:	9b01      	ldr	r3, [sp, #4]
    4bc4:	3301      	adds	r3, #1
    4bc6:	9301      	str	r3, [sp, #4]
    4bc8:	4b17      	ldr	r3, [pc, #92]	; (4c28 <getSpllConfig+0xa8>)
    4bca:	681b      	ldr	r3, [r3, #0]
    4bcc:	7a9b      	ldrb	r3, [r3, #10]
    4bce:	461a      	mov	r2, r3
    4bd0:	9b01      	ldr	r3, [sp, #4]
    4bd2:	4293      	cmp	r3, r2
    4bd4:	d3de      	bcc.n	4b94 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bd6:	9b00      	ldr	r3, [sp, #0]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d121      	bne.n	4c20 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4bdc:	4b13      	ldr	r3, [pc, #76]	; (4c2c <getSpllConfig+0xac>)
    4bde:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4be0:	4b12      	ldr	r3, [pc, #72]	; (4c2c <getSpllConfig+0xac>)
    4be2:	2209      	movs	r2, #9
    4be4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4be6:	4b12      	ldr	r3, [pc, #72]	; (4c30 <getSpllConfig+0xb0>)
    4be8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4bec:	b29b      	uxth	r3, r3
    4bee:	f003 0301 	and.w	r3, r3, #1
    4bf2:	b29a      	uxth	r2, r3
    4bf4:	4b0d      	ldr	r3, [pc, #52]	; (4c2c <getSpllConfig+0xac>)
    4bf6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4bf8:	4b0d      	ldr	r3, [pc, #52]	; (4c30 <getSpllConfig+0xb0>)
    4bfa:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4bfe:	0a1b      	lsrs	r3, r3, #8
    4c00:	b2db      	uxtb	r3, r3
    4c02:	f003 0307 	and.w	r3, r3, #7
    4c06:	b2da      	uxtb	r2, r3
    4c08:	4b08      	ldr	r3, [pc, #32]	; (4c2c <getSpllConfig+0xac>)
    4c0a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4c0c:	4b08      	ldr	r3, [pc, #32]	; (4c30 <getSpllConfig+0xb0>)
    4c0e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c12:	0c1b      	lsrs	r3, r3, #16
    4c14:	b2db      	uxtb	r3, r3
    4c16:	f003 031f 	and.w	r3, r3, #31
    4c1a:	b2da      	uxtb	r2, r3
    4c1c:	4b03      	ldr	r3, [pc, #12]	; (4c2c <getSpllConfig+0xac>)
    4c1e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4c20:	9b00      	ldr	r3, [sp, #0]
}
    4c22:	4618      	mov	r0, r3
    4c24:	b002      	add	sp, #8
    4c26:	4770      	bx	lr
    4c28:	1fff8b98 	.word	0x1fff8b98
    4c2c:	1fff8c24 	.word	0x1fff8c24
    4c30:	40064000 	.word	0x40064000

00004c34 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4c34:	b086      	sub	sp, #24
    4c36:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4c38:	2300      	movs	r3, #0
    4c3a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4c3c:	9b01      	ldr	r3, [sp, #4]
    4c3e:	2b1b      	cmp	r3, #27
    4c40:	d00f      	beq.n	4c62 <getSelectorConfig+0x2e>
    4c42:	9b01      	ldr	r3, [sp, #4]
    4c44:	2b1b      	cmp	r3, #27
    4c46:	d80f      	bhi.n	4c68 <getSelectorConfig+0x34>
    4c48:	9b01      	ldr	r3, [sp, #4]
    4c4a:	2b19      	cmp	r3, #25
    4c4c:	d003      	beq.n	4c56 <getSelectorConfig+0x22>
    4c4e:	9b01      	ldr	r3, [sp, #4]
    4c50:	2b1a      	cmp	r3, #26
    4c52:	d003      	beq.n	4c5c <getSelectorConfig+0x28>
    4c54:	e008      	b.n	4c68 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4c56:	2300      	movs	r3, #0
    4c58:	9304      	str	r3, [sp, #16]
            break;
    4c5a:	e008      	b.n	4c6e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4c5c:	2301      	movs	r3, #1
    4c5e:	9304      	str	r3, [sp, #16]
            break;
    4c60:	e005      	b.n	4c6e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4c62:	2302      	movs	r3, #2
    4c64:	9304      	str	r3, [sp, #16]
            break;
    4c66:	e002      	b.n	4c6e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4c68:	2300      	movs	r3, #0
    4c6a:	9304      	str	r3, [sp, #16]
            break;
    4c6c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4c6e:	4b36      	ldr	r3, [pc, #216]	; (4d48 <getSelectorConfig+0x114>)
    4c70:	681b      	ldr	r3, [r3, #0]
    4c72:	2b00      	cmp	r3, #0
    4c74:	d01d      	beq.n	4cb2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4c76:	2300      	movs	r3, #0
    4c78:	9303      	str	r3, [sp, #12]
    4c7a:	e013      	b.n	4ca4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4c7c:	4b32      	ldr	r3, [pc, #200]	; (4d48 <getSelectorConfig+0x114>)
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	9a03      	ldr	r2, [sp, #12]
    4c82:	320d      	adds	r2, #13
    4c84:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4c88:	9a01      	ldr	r2, [sp, #4]
    4c8a:	429a      	cmp	r2, r3
    4c8c:	d107      	bne.n	4c9e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4c8e:	4b2e      	ldr	r3, [pc, #184]	; (4d48 <getSelectorConfig+0x114>)
    4c90:	681a      	ldr	r2, [r3, #0]
    4c92:	9b03      	ldr	r3, [sp, #12]
    4c94:	330d      	adds	r3, #13
    4c96:	00db      	lsls	r3, r3, #3
    4c98:	4413      	add	r3, r2
    4c9a:	9305      	str	r3, [sp, #20]
                break;
    4c9c:	e009      	b.n	4cb2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4c9e:	9b03      	ldr	r3, [sp, #12]
    4ca0:	3301      	adds	r3, #1
    4ca2:	9303      	str	r3, [sp, #12]
    4ca4:	4b28      	ldr	r3, [pc, #160]	; (4d48 <getSelectorConfig+0x114>)
    4ca6:	681b      	ldr	r3, [r3, #0]
    4ca8:	7adb      	ldrb	r3, [r3, #11]
    4caa:	461a      	mov	r2, r3
    4cac:	9b03      	ldr	r3, [sp, #12]
    4cae:	4293      	cmp	r3, r2
    4cb0:	d3e4      	bcc.n	4c7c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cb2:	9b05      	ldr	r3, [sp, #20]
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	d140      	bne.n	4d3a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4cb8:	9b04      	ldr	r3, [sp, #16]
    4cba:	00db      	lsls	r3, r3, #3
    4cbc:	4a23      	ldr	r2, [pc, #140]	; (4d4c <getSelectorConfig+0x118>)
    4cbe:	4413      	add	r3, r2
    4cc0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4cc2:	4922      	ldr	r1, [pc, #136]	; (4d4c <getSelectorConfig+0x118>)
    4cc4:	9b04      	ldr	r3, [sp, #16]
    4cc6:	9a01      	ldr	r2, [sp, #4]
    4cc8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4ccc:	9b01      	ldr	r3, [sp, #4]
    4cce:	2b1b      	cmp	r3, #27
    4cd0:	d025      	beq.n	4d1e <getSelectorConfig+0xea>
    4cd2:	9b01      	ldr	r3, [sp, #4]
    4cd4:	2b1b      	cmp	r3, #27
    4cd6:	d832      	bhi.n	4d3e <getSelectorConfig+0x10a>
    4cd8:	9b01      	ldr	r3, [sp, #4]
    4cda:	2b19      	cmp	r3, #25
    4cdc:	d003      	beq.n	4ce6 <getSelectorConfig+0xb2>
    4cde:	9b01      	ldr	r3, [sp, #4]
    4ce0:	2b1a      	cmp	r3, #26
    4ce2:	d00e      	beq.n	4d02 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ce4:	e02b      	b.n	4d3e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4ce6:	4b1a      	ldr	r3, [pc, #104]	; (4d50 <getSelectorConfig+0x11c>)
    4ce8:	695b      	ldr	r3, [r3, #20]
    4cea:	0e1b      	lsrs	r3, r3, #24
    4cec:	f003 030f 	and.w	r3, r3, #15
    4cf0:	4a18      	ldr	r2, [pc, #96]	; (4d54 <getSelectorConfig+0x120>)
    4cf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4cf6:	4915      	ldr	r1, [pc, #84]	; (4d4c <getSelectorConfig+0x118>)
    4cf8:	9b04      	ldr	r3, [sp, #16]
    4cfa:	00db      	lsls	r3, r3, #3
    4cfc:	440b      	add	r3, r1
    4cfe:	605a      	str	r2, [r3, #4]
                break;
    4d00:	e01e      	b.n	4d40 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d02:	4b13      	ldr	r3, [pc, #76]	; (4d50 <getSelectorConfig+0x11c>)
    4d04:	699b      	ldr	r3, [r3, #24]
    4d06:	0e1b      	lsrs	r3, r3, #24
    4d08:	f003 030f 	and.w	r3, r3, #15
    4d0c:	4a11      	ldr	r2, [pc, #68]	; (4d54 <getSelectorConfig+0x120>)
    4d0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d12:	490e      	ldr	r1, [pc, #56]	; (4d4c <getSelectorConfig+0x118>)
    4d14:	9b04      	ldr	r3, [sp, #16]
    4d16:	00db      	lsls	r3, r3, #3
    4d18:	440b      	add	r3, r1
    4d1a:	605a      	str	r2, [r3, #4]
                break;
    4d1c:	e010      	b.n	4d40 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4d1e:	4b0c      	ldr	r3, [pc, #48]	; (4d50 <getSelectorConfig+0x11c>)
    4d20:	69db      	ldr	r3, [r3, #28]
    4d22:	0e1b      	lsrs	r3, r3, #24
    4d24:	f003 030f 	and.w	r3, r3, #15
    4d28:	4a0a      	ldr	r2, [pc, #40]	; (4d54 <getSelectorConfig+0x120>)
    4d2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d2e:	4907      	ldr	r1, [pc, #28]	; (4d4c <getSelectorConfig+0x118>)
    4d30:	9b04      	ldr	r3, [sp, #16]
    4d32:	00db      	lsls	r3, r3, #3
    4d34:	440b      	add	r3, r1
    4d36:	605a      	str	r2, [r3, #4]
                break;
    4d38:	e002      	b.n	4d40 <getSelectorConfig+0x10c>
        }
    }
    4d3a:	bf00      	nop
    4d3c:	e000      	b.n	4d40 <getSelectorConfig+0x10c>
                break;
    4d3e:	bf00      	nop

    return ReturnValue;
    4d40:	9b05      	ldr	r3, [sp, #20]
}
    4d42:	4618      	mov	r0, r3
    4d44:	b006      	add	sp, #24
    4d46:	4770      	bx	lr
    4d48:	1fff8b98 	.word	0x1fff8b98
    4d4c:	1fff8c4c 	.word	0x1fff8c4c
    4d50:	40064000 	.word	0x40064000
    4d54:	000107b8 	.word	0x000107b8

00004d58 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4d58:	b086      	sub	sp, #24
    4d5a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4d5c:	2300      	movs	r3, #0
    4d5e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4d60:	2300      	movs	r3, #0
    4d62:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4d64:	9b01      	ldr	r3, [sp, #4]
    4d66:	2b1f      	cmp	r3, #31
    4d68:	d00f      	beq.n	4d8a <getCoreDividerConfig+0x32>
    4d6a:	9b01      	ldr	r3, [sp, #4]
    4d6c:	2b1f      	cmp	r3, #31
    4d6e:	d80f      	bhi.n	4d90 <getCoreDividerConfig+0x38>
    4d70:	9b01      	ldr	r3, [sp, #4]
    4d72:	2b1d      	cmp	r3, #29
    4d74:	d003      	beq.n	4d7e <getCoreDividerConfig+0x26>
    4d76:	9b01      	ldr	r3, [sp, #4]
    4d78:	2b1e      	cmp	r3, #30
    4d7a:	d003      	beq.n	4d84 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d7c:	e008      	b.n	4d90 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4d7e:	2300      	movs	r3, #0
    4d80:	9304      	str	r3, [sp, #16]
            break;
    4d82:	e006      	b.n	4d92 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4d84:	2301      	movs	r3, #1
    4d86:	9304      	str	r3, [sp, #16]
            break;
    4d88:	e003      	b.n	4d92 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4d8a:	2302      	movs	r3, #2
    4d8c:	9304      	str	r3, [sp, #16]
            break;
    4d8e:	e000      	b.n	4d92 <getCoreDividerConfig+0x3a>
                break;
    4d90:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d92:	4b41      	ldr	r3, [pc, #260]	; (4e98 <getCoreDividerConfig+0x140>)
    4d94:	681b      	ldr	r3, [r3, #0]
    4d96:	2b00      	cmp	r3, #0
    4d98:	d026      	beq.n	4de8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4d9a:	2300      	movs	r3, #0
    4d9c:	9303      	str	r3, [sp, #12]
    4d9e:	e01c      	b.n	4dda <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4da0:	4b3d      	ldr	r3, [pc, #244]	; (4e98 <getCoreDividerConfig+0x140>)
    4da2:	6819      	ldr	r1, [r3, #0]
    4da4:	9a03      	ldr	r2, [sp, #12]
    4da6:	4613      	mov	r3, r2
    4da8:	005b      	lsls	r3, r3, #1
    4daa:	4413      	add	r3, r2
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	440b      	add	r3, r1
    4db0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4db4:	681b      	ldr	r3, [r3, #0]
    4db6:	9a01      	ldr	r2, [sp, #4]
    4db8:	429a      	cmp	r2, r3
    4dba:	d10b      	bne.n	4dd4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4dbc:	4b36      	ldr	r3, [pc, #216]	; (4e98 <getCoreDividerConfig+0x140>)
    4dbe:	6819      	ldr	r1, [r3, #0]
    4dc0:	9a03      	ldr	r2, [sp, #12]
    4dc2:	4613      	mov	r3, r2
    4dc4:	005b      	lsls	r3, r3, #1
    4dc6:	4413      	add	r3, r2
    4dc8:	009b      	lsls	r3, r3, #2
    4dca:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4dce:	440b      	add	r3, r1
    4dd0:	9305      	str	r3, [sp, #20]
                break;
    4dd2:	e009      	b.n	4de8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4dd4:	9b03      	ldr	r3, [sp, #12]
    4dd6:	3301      	adds	r3, #1
    4dd8:	9303      	str	r3, [sp, #12]
    4dda:	4b2f      	ldr	r3, [pc, #188]	; (4e98 <getCoreDividerConfig+0x140>)
    4ddc:	681b      	ldr	r3, [r3, #0]
    4dde:	7b1b      	ldrb	r3, [r3, #12]
    4de0:	461a      	mov	r2, r3
    4de2:	9b03      	ldr	r3, [sp, #12]
    4de4:	4293      	cmp	r3, r2
    4de6:	d3db      	bcc.n	4da0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4de8:	9b05      	ldr	r3, [sp, #20]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d14d      	bne.n	4e8a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4dee:	9a04      	ldr	r2, [sp, #16]
    4df0:	4613      	mov	r3, r2
    4df2:	005b      	lsls	r3, r3, #1
    4df4:	4413      	add	r3, r2
    4df6:	009b      	lsls	r3, r3, #2
    4df8:	4a28      	ldr	r2, [pc, #160]	; (4e9c <getCoreDividerConfig+0x144>)
    4dfa:	4413      	add	r3, r2
    4dfc:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4dfe:	4927      	ldr	r1, [pc, #156]	; (4e9c <getCoreDividerConfig+0x144>)
    4e00:	9a04      	ldr	r2, [sp, #16]
    4e02:	4613      	mov	r3, r2
    4e04:	005b      	lsls	r3, r3, #1
    4e06:	4413      	add	r3, r2
    4e08:	009b      	lsls	r3, r3, #2
    4e0a:	440b      	add	r3, r1
    4e0c:	9a01      	ldr	r2, [sp, #4]
    4e0e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4e10:	9b01      	ldr	r3, [sp, #4]
    4e12:	2b1f      	cmp	r3, #31
    4e14:	d029      	beq.n	4e6a <getCoreDividerConfig+0x112>
    4e16:	9b01      	ldr	r3, [sp, #4]
    4e18:	2b1f      	cmp	r3, #31
    4e1a:	d838      	bhi.n	4e8e <getCoreDividerConfig+0x136>
    4e1c:	9b01      	ldr	r3, [sp, #4]
    4e1e:	2b1d      	cmp	r3, #29
    4e20:	d003      	beq.n	4e2a <getCoreDividerConfig+0xd2>
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	2b1e      	cmp	r3, #30
    4e26:	d010      	beq.n	4e4a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e28:	e031      	b.n	4e8e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4e2a:	4b1d      	ldr	r3, [pc, #116]	; (4ea0 <getCoreDividerConfig+0x148>)
    4e2c:	695b      	ldr	r3, [r3, #20]
    4e2e:	0c1b      	lsrs	r3, r3, #16
    4e30:	f003 030f 	and.w	r3, r3, #15
    4e34:	1c59      	adds	r1, r3, #1
    4e36:	4819      	ldr	r0, [pc, #100]	; (4e9c <getCoreDividerConfig+0x144>)
    4e38:	9a04      	ldr	r2, [sp, #16]
    4e3a:	4613      	mov	r3, r2
    4e3c:	005b      	lsls	r3, r3, #1
    4e3e:	4413      	add	r3, r2
    4e40:	009b      	lsls	r3, r3, #2
    4e42:	4403      	add	r3, r0
    4e44:	3304      	adds	r3, #4
    4e46:	6019      	str	r1, [r3, #0]
                break;
    4e48:	e022      	b.n	4e90 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4e4a:	4b15      	ldr	r3, [pc, #84]	; (4ea0 <getCoreDividerConfig+0x148>)
    4e4c:	699b      	ldr	r3, [r3, #24]
    4e4e:	0c1b      	lsrs	r3, r3, #16
    4e50:	f003 030f 	and.w	r3, r3, #15
    4e54:	1c59      	adds	r1, r3, #1
    4e56:	4811      	ldr	r0, [pc, #68]	; (4e9c <getCoreDividerConfig+0x144>)
    4e58:	9a04      	ldr	r2, [sp, #16]
    4e5a:	4613      	mov	r3, r2
    4e5c:	005b      	lsls	r3, r3, #1
    4e5e:	4413      	add	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	4403      	add	r3, r0
    4e64:	3304      	adds	r3, #4
    4e66:	6019      	str	r1, [r3, #0]
                break;
    4e68:	e012      	b.n	4e90 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4e6a:	4b0d      	ldr	r3, [pc, #52]	; (4ea0 <getCoreDividerConfig+0x148>)
    4e6c:	69db      	ldr	r3, [r3, #28]
    4e6e:	0c1b      	lsrs	r3, r3, #16
    4e70:	f003 030f 	and.w	r3, r3, #15
    4e74:	1c59      	adds	r1, r3, #1
    4e76:	4809      	ldr	r0, [pc, #36]	; (4e9c <getCoreDividerConfig+0x144>)
    4e78:	9a04      	ldr	r2, [sp, #16]
    4e7a:	4613      	mov	r3, r2
    4e7c:	005b      	lsls	r3, r3, #1
    4e7e:	4413      	add	r3, r2
    4e80:	009b      	lsls	r3, r3, #2
    4e82:	4403      	add	r3, r0
    4e84:	3304      	adds	r3, #4
    4e86:	6019      	str	r1, [r3, #0]
                break;
    4e88:	e002      	b.n	4e90 <getCoreDividerConfig+0x138>
        }
    }
    4e8a:	bf00      	nop
    4e8c:	e000      	b.n	4e90 <getCoreDividerConfig+0x138>
                break;
    4e8e:	bf00      	nop

    return ReturnValue;
    4e90:	9b05      	ldr	r3, [sp, #20]
}
    4e92:	4618      	mov	r0, r3
    4e94:	b006      	add	sp, #24
    4e96:	4770      	bx	lr
    4e98:	1fff8b98 	.word	0x1fff8b98
    4e9c:	1fff8c64 	.word	0x1fff8c64
    4ea0:	40064000 	.word	0x40064000

00004ea4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4ea4:	b086      	sub	sp, #24
    4ea6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4ea8:	2300      	movs	r3, #0
    4eaa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4eac:	2300      	movs	r3, #0
    4eae:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4eb0:	9b01      	ldr	r3, [sp, #4]
    4eb2:	2b23      	cmp	r3, #35	; 0x23
    4eb4:	d00f      	beq.n	4ed6 <getBusDividerConfig+0x32>
    4eb6:	9b01      	ldr	r3, [sp, #4]
    4eb8:	2b23      	cmp	r3, #35	; 0x23
    4eba:	d80f      	bhi.n	4edc <getBusDividerConfig+0x38>
    4ebc:	9b01      	ldr	r3, [sp, #4]
    4ebe:	2b21      	cmp	r3, #33	; 0x21
    4ec0:	d003      	beq.n	4eca <getBusDividerConfig+0x26>
    4ec2:	9b01      	ldr	r3, [sp, #4]
    4ec4:	2b22      	cmp	r3, #34	; 0x22
    4ec6:	d003      	beq.n	4ed0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ec8:	e008      	b.n	4edc <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4eca:	2300      	movs	r3, #0
    4ecc:	9304      	str	r3, [sp, #16]
            break;
    4ece:	e006      	b.n	4ede <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ed0:	2301      	movs	r3, #1
    4ed2:	9304      	str	r3, [sp, #16]
            break;
    4ed4:	e003      	b.n	4ede <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4ed6:	2302      	movs	r3, #2
    4ed8:	9304      	str	r3, [sp, #16]
            break;
    4eda:	e000      	b.n	4ede <getBusDividerConfig+0x3a>
                break;
    4edc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4ede:	4b41      	ldr	r3, [pc, #260]	; (4fe4 <getBusDividerConfig+0x140>)
    4ee0:	681b      	ldr	r3, [r3, #0]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d026      	beq.n	4f34 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4ee6:	2300      	movs	r3, #0
    4ee8:	9303      	str	r3, [sp, #12]
    4eea:	e01c      	b.n	4f26 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4eec:	4b3d      	ldr	r3, [pc, #244]	; (4fe4 <getBusDividerConfig+0x140>)
    4eee:	6819      	ldr	r1, [r3, #0]
    4ef0:	9a03      	ldr	r2, [sp, #12]
    4ef2:	4613      	mov	r3, r2
    4ef4:	005b      	lsls	r3, r3, #1
    4ef6:	4413      	add	r3, r2
    4ef8:	009b      	lsls	r3, r3, #2
    4efa:	440b      	add	r3, r1
    4efc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	9a01      	ldr	r2, [sp, #4]
    4f04:	429a      	cmp	r2, r3
    4f06:	d10b      	bne.n	4f20 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4f08:	4b36      	ldr	r3, [pc, #216]	; (4fe4 <getBusDividerConfig+0x140>)
    4f0a:	6819      	ldr	r1, [r3, #0]
    4f0c:	9a03      	ldr	r2, [sp, #12]
    4f0e:	4613      	mov	r3, r2
    4f10:	005b      	lsls	r3, r3, #1
    4f12:	4413      	add	r3, r2
    4f14:	009b      	lsls	r3, r3, #2
    4f16:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f1a:	440b      	add	r3, r1
    4f1c:	9305      	str	r3, [sp, #20]
                break;
    4f1e:	e009      	b.n	4f34 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f20:	9b03      	ldr	r3, [sp, #12]
    4f22:	3301      	adds	r3, #1
    4f24:	9303      	str	r3, [sp, #12]
    4f26:	4b2f      	ldr	r3, [pc, #188]	; (4fe4 <getBusDividerConfig+0x140>)
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	7b1b      	ldrb	r3, [r3, #12]
    4f2c:	461a      	mov	r2, r3
    4f2e:	9b03      	ldr	r3, [sp, #12]
    4f30:	4293      	cmp	r3, r2
    4f32:	d3db      	bcc.n	4eec <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f34:	9b05      	ldr	r3, [sp, #20]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d14d      	bne.n	4fd6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4f3a:	9a04      	ldr	r2, [sp, #16]
    4f3c:	4613      	mov	r3, r2
    4f3e:	005b      	lsls	r3, r3, #1
    4f40:	4413      	add	r3, r2
    4f42:	009b      	lsls	r3, r3, #2
    4f44:	4a28      	ldr	r2, [pc, #160]	; (4fe8 <getBusDividerConfig+0x144>)
    4f46:	4413      	add	r3, r2
    4f48:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4f4a:	4927      	ldr	r1, [pc, #156]	; (4fe8 <getBusDividerConfig+0x144>)
    4f4c:	9a04      	ldr	r2, [sp, #16]
    4f4e:	4613      	mov	r3, r2
    4f50:	005b      	lsls	r3, r3, #1
    4f52:	4413      	add	r3, r2
    4f54:	009b      	lsls	r3, r3, #2
    4f56:	440b      	add	r3, r1
    4f58:	9a01      	ldr	r2, [sp, #4]
    4f5a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4f5c:	9b01      	ldr	r3, [sp, #4]
    4f5e:	2b23      	cmp	r3, #35	; 0x23
    4f60:	d029      	beq.n	4fb6 <getBusDividerConfig+0x112>
    4f62:	9b01      	ldr	r3, [sp, #4]
    4f64:	2b23      	cmp	r3, #35	; 0x23
    4f66:	d838      	bhi.n	4fda <getBusDividerConfig+0x136>
    4f68:	9b01      	ldr	r3, [sp, #4]
    4f6a:	2b21      	cmp	r3, #33	; 0x21
    4f6c:	d003      	beq.n	4f76 <getBusDividerConfig+0xd2>
    4f6e:	9b01      	ldr	r3, [sp, #4]
    4f70:	2b22      	cmp	r3, #34	; 0x22
    4f72:	d010      	beq.n	4f96 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f74:	e031      	b.n	4fda <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4f76:	4b1d      	ldr	r3, [pc, #116]	; (4fec <getBusDividerConfig+0x148>)
    4f78:	695b      	ldr	r3, [r3, #20]
    4f7a:	091b      	lsrs	r3, r3, #4
    4f7c:	f003 030f 	and.w	r3, r3, #15
    4f80:	1c59      	adds	r1, r3, #1
    4f82:	4819      	ldr	r0, [pc, #100]	; (4fe8 <getBusDividerConfig+0x144>)
    4f84:	9a04      	ldr	r2, [sp, #16]
    4f86:	4613      	mov	r3, r2
    4f88:	005b      	lsls	r3, r3, #1
    4f8a:	4413      	add	r3, r2
    4f8c:	009b      	lsls	r3, r3, #2
    4f8e:	4403      	add	r3, r0
    4f90:	3304      	adds	r3, #4
    4f92:	6019      	str	r1, [r3, #0]
                break;
    4f94:	e022      	b.n	4fdc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4f96:	4b15      	ldr	r3, [pc, #84]	; (4fec <getBusDividerConfig+0x148>)
    4f98:	699b      	ldr	r3, [r3, #24]
    4f9a:	091b      	lsrs	r3, r3, #4
    4f9c:	f003 030f 	and.w	r3, r3, #15
    4fa0:	1c59      	adds	r1, r3, #1
    4fa2:	4811      	ldr	r0, [pc, #68]	; (4fe8 <getBusDividerConfig+0x144>)
    4fa4:	9a04      	ldr	r2, [sp, #16]
    4fa6:	4613      	mov	r3, r2
    4fa8:	005b      	lsls	r3, r3, #1
    4faa:	4413      	add	r3, r2
    4fac:	009b      	lsls	r3, r3, #2
    4fae:	4403      	add	r3, r0
    4fb0:	3304      	adds	r3, #4
    4fb2:	6019      	str	r1, [r3, #0]
                break;
    4fb4:	e012      	b.n	4fdc <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4fb6:	4b0d      	ldr	r3, [pc, #52]	; (4fec <getBusDividerConfig+0x148>)
    4fb8:	69db      	ldr	r3, [r3, #28]
    4fba:	091b      	lsrs	r3, r3, #4
    4fbc:	f003 030f 	and.w	r3, r3, #15
    4fc0:	1c59      	adds	r1, r3, #1
    4fc2:	4809      	ldr	r0, [pc, #36]	; (4fe8 <getBusDividerConfig+0x144>)
    4fc4:	9a04      	ldr	r2, [sp, #16]
    4fc6:	4613      	mov	r3, r2
    4fc8:	005b      	lsls	r3, r3, #1
    4fca:	4413      	add	r3, r2
    4fcc:	009b      	lsls	r3, r3, #2
    4fce:	4403      	add	r3, r0
    4fd0:	3304      	adds	r3, #4
    4fd2:	6019      	str	r1, [r3, #0]
                break;
    4fd4:	e002      	b.n	4fdc <getBusDividerConfig+0x138>
        }
    }
    4fd6:	bf00      	nop
    4fd8:	e000      	b.n	4fdc <getBusDividerConfig+0x138>
                break;
    4fda:	bf00      	nop

    return ReturnValue;
    4fdc:	9b05      	ldr	r3, [sp, #20]
}
    4fde:	4618      	mov	r0, r3
    4fe0:	b006      	add	sp, #24
    4fe2:	4770      	bx	lr
    4fe4:	1fff8b98 	.word	0x1fff8b98
    4fe8:	1fff8c88 	.word	0x1fff8c88
    4fec:	40064000 	.word	0x40064000

00004ff0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4ff0:	b086      	sub	sp, #24
    4ff2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4ff4:	2300      	movs	r3, #0
    4ff6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4ff8:	2300      	movs	r3, #0
    4ffa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	2b27      	cmp	r3, #39	; 0x27
    5000:	d00f      	beq.n	5022 <getSlowDividerConfig+0x32>
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	2b27      	cmp	r3, #39	; 0x27
    5006:	d80f      	bhi.n	5028 <getSlowDividerConfig+0x38>
    5008:	9b01      	ldr	r3, [sp, #4]
    500a:	2b25      	cmp	r3, #37	; 0x25
    500c:	d003      	beq.n	5016 <getSlowDividerConfig+0x26>
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	2b26      	cmp	r3, #38	; 0x26
    5012:	d003      	beq.n	501c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5014:	e008      	b.n	5028 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5016:	2300      	movs	r3, #0
    5018:	9304      	str	r3, [sp, #16]
            break;
    501a:	e006      	b.n	502a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    501c:	2301      	movs	r3, #1
    501e:	9304      	str	r3, [sp, #16]
            break;
    5020:	e003      	b.n	502a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5022:	2302      	movs	r3, #2
    5024:	9304      	str	r3, [sp, #16]
            break;
    5026:	e000      	b.n	502a <getSlowDividerConfig+0x3a>
                break;
    5028:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    502a:	4b40      	ldr	r3, [pc, #256]	; (512c <getSlowDividerConfig+0x13c>)
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	2b00      	cmp	r3, #0
    5030:	d026      	beq.n	5080 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5032:	2300      	movs	r3, #0
    5034:	9303      	str	r3, [sp, #12]
    5036:	e01c      	b.n	5072 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5038:	4b3c      	ldr	r3, [pc, #240]	; (512c <getSlowDividerConfig+0x13c>)
    503a:	6819      	ldr	r1, [r3, #0]
    503c:	9a03      	ldr	r2, [sp, #12]
    503e:	4613      	mov	r3, r2
    5040:	005b      	lsls	r3, r3, #1
    5042:	4413      	add	r3, r2
    5044:	009b      	lsls	r3, r3, #2
    5046:	440b      	add	r3, r1
    5048:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    504c:	681b      	ldr	r3, [r3, #0]
    504e:	9a01      	ldr	r2, [sp, #4]
    5050:	429a      	cmp	r2, r3
    5052:	d10b      	bne.n	506c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5054:	4b35      	ldr	r3, [pc, #212]	; (512c <getSlowDividerConfig+0x13c>)
    5056:	6819      	ldr	r1, [r3, #0]
    5058:	9a03      	ldr	r2, [sp, #12]
    505a:	4613      	mov	r3, r2
    505c:	005b      	lsls	r3, r3, #1
    505e:	4413      	add	r3, r2
    5060:	009b      	lsls	r3, r3, #2
    5062:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5066:	440b      	add	r3, r1
    5068:	9305      	str	r3, [sp, #20]
                break;
    506a:	e009      	b.n	5080 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    506c:	9b03      	ldr	r3, [sp, #12]
    506e:	3301      	adds	r3, #1
    5070:	9303      	str	r3, [sp, #12]
    5072:	4b2e      	ldr	r3, [pc, #184]	; (512c <getSlowDividerConfig+0x13c>)
    5074:	681b      	ldr	r3, [r3, #0]
    5076:	7b1b      	ldrb	r3, [r3, #12]
    5078:	461a      	mov	r2, r3
    507a:	9b03      	ldr	r3, [sp, #12]
    507c:	4293      	cmp	r3, r2
    507e:	d3db      	bcc.n	5038 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5080:	9b05      	ldr	r3, [sp, #20]
    5082:	2b00      	cmp	r3, #0
    5084:	d14a      	bne.n	511c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5086:	9a04      	ldr	r2, [sp, #16]
    5088:	4613      	mov	r3, r2
    508a:	005b      	lsls	r3, r3, #1
    508c:	4413      	add	r3, r2
    508e:	009b      	lsls	r3, r3, #2
    5090:	4a27      	ldr	r2, [pc, #156]	; (5130 <getSlowDividerConfig+0x140>)
    5092:	4413      	add	r3, r2
    5094:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5096:	4926      	ldr	r1, [pc, #152]	; (5130 <getSlowDividerConfig+0x140>)
    5098:	9a04      	ldr	r2, [sp, #16]
    509a:	4613      	mov	r3, r2
    509c:	005b      	lsls	r3, r3, #1
    509e:	4413      	add	r3, r2
    50a0:	009b      	lsls	r3, r3, #2
    50a2:	440b      	add	r3, r1
    50a4:	9a01      	ldr	r2, [sp, #4]
    50a6:	601a      	str	r2, [r3, #0]
        switch(Name)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b27      	cmp	r3, #39	; 0x27
    50ac:	d027      	beq.n	50fe <getSlowDividerConfig+0x10e>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	2b27      	cmp	r3, #39	; 0x27
    50b2:	d835      	bhi.n	5120 <getSlowDividerConfig+0x130>
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	2b25      	cmp	r3, #37	; 0x25
    50b8:	d003      	beq.n	50c2 <getSlowDividerConfig+0xd2>
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	2b26      	cmp	r3, #38	; 0x26
    50be:	d00f      	beq.n	50e0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    50c0:	e02e      	b.n	5120 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    50c2:	4b1c      	ldr	r3, [pc, #112]	; (5134 <getSlowDividerConfig+0x144>)
    50c4:	695b      	ldr	r3, [r3, #20]
    50c6:	f003 030f 	and.w	r3, r3, #15
    50ca:	1c59      	adds	r1, r3, #1
    50cc:	4818      	ldr	r0, [pc, #96]	; (5130 <getSlowDividerConfig+0x140>)
    50ce:	9a04      	ldr	r2, [sp, #16]
    50d0:	4613      	mov	r3, r2
    50d2:	005b      	lsls	r3, r3, #1
    50d4:	4413      	add	r3, r2
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	4403      	add	r3, r0
    50da:	3304      	adds	r3, #4
    50dc:	6019      	str	r1, [r3, #0]
                break;
    50de:	e020      	b.n	5122 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    50e0:	4b14      	ldr	r3, [pc, #80]	; (5134 <getSlowDividerConfig+0x144>)
    50e2:	699b      	ldr	r3, [r3, #24]
    50e4:	f003 030f 	and.w	r3, r3, #15
    50e8:	1c59      	adds	r1, r3, #1
    50ea:	4811      	ldr	r0, [pc, #68]	; (5130 <getSlowDividerConfig+0x140>)
    50ec:	9a04      	ldr	r2, [sp, #16]
    50ee:	4613      	mov	r3, r2
    50f0:	005b      	lsls	r3, r3, #1
    50f2:	4413      	add	r3, r2
    50f4:	009b      	lsls	r3, r3, #2
    50f6:	4403      	add	r3, r0
    50f8:	3304      	adds	r3, #4
    50fa:	6019      	str	r1, [r3, #0]
                break;
    50fc:	e011      	b.n	5122 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    50fe:	4b0d      	ldr	r3, [pc, #52]	; (5134 <getSlowDividerConfig+0x144>)
    5100:	69db      	ldr	r3, [r3, #28]
    5102:	f003 030f 	and.w	r3, r3, #15
    5106:	1c59      	adds	r1, r3, #1
    5108:	4809      	ldr	r0, [pc, #36]	; (5130 <getSlowDividerConfig+0x140>)
    510a:	9a04      	ldr	r2, [sp, #16]
    510c:	4613      	mov	r3, r2
    510e:	005b      	lsls	r3, r3, #1
    5110:	4413      	add	r3, r2
    5112:	009b      	lsls	r3, r3, #2
    5114:	4403      	add	r3, r0
    5116:	3304      	adds	r3, #4
    5118:	6019      	str	r1, [r3, #0]
                break;
    511a:	e002      	b.n	5122 <getSlowDividerConfig+0x132>
        }
    }
    511c:	bf00      	nop
    511e:	e000      	b.n	5122 <getSlowDividerConfig+0x132>
                break;
    5120:	bf00      	nop

    return ReturnValue;
    5122:	9b05      	ldr	r3, [sp, #20]
}
    5124:	4618      	mov	r0, r3
    5126:	b006      	add	sp, #24
    5128:	4770      	bx	lr
    512a:	bf00      	nop
    512c:	1fff8b98 	.word	0x1fff8b98
    5130:	1fff8cac 	.word	0x1fff8cac
    5134:	40064000 	.word	0x40064000

00005138 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5138:	b500      	push	{lr}
    513a:	b083      	sub	sp, #12
    513c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    513e:	4b64      	ldr	r3, [pc, #400]	; (52d0 <Clock_Ip_ClockInitializeObjects+0x198>)
    5140:	781b      	ldrb	r3, [r3, #0]
    5142:	f083 0301 	eor.w	r3, r3, #1
    5146:	b2db      	uxtb	r3, r3
    5148:	2b00      	cmp	r3, #0
    514a:	d05b      	beq.n	5204 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    514c:	4b60      	ldr	r3, [pc, #384]	; (52d0 <Clock_Ip_ClockInitializeObjects+0x198>)
    514e:	2201      	movs	r2, #1
    5150:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5152:	4b60      	ldr	r3, [pc, #384]	; (52d4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5154:	785b      	ldrb	r3, [r3, #1]
    5156:	461a      	mov	r2, r3
    5158:	4613      	mov	r3, r2
    515a:	009b      	lsls	r3, r3, #2
    515c:	4413      	add	r3, r2
    515e:	009b      	lsls	r3, r3, #2
    5160:	4a5d      	ldr	r2, [pc, #372]	; (52d8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5162:	4413      	add	r3, r2
    5164:	4a5d      	ldr	r2, [pc, #372]	; (52dc <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5166:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5168:	4b5d      	ldr	r3, [pc, #372]	; (52e0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    516a:	785b      	ldrb	r3, [r3, #1]
    516c:	461a      	mov	r2, r3
    516e:	4613      	mov	r3, r2
    5170:	009b      	lsls	r3, r3, #2
    5172:	4413      	add	r3, r2
    5174:	009b      	lsls	r3, r3, #2
    5176:	4a5b      	ldr	r2, [pc, #364]	; (52e4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5178:	4413      	add	r3, r2
    517a:	4a5b      	ldr	r2, [pc, #364]	; (52e8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    517c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    517e:	4b5b      	ldr	r3, [pc, #364]	; (52ec <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5180:	791b      	ldrb	r3, [r3, #4]
    5182:	461a      	mov	r2, r3
    5184:	4613      	mov	r3, r2
    5186:	005b      	lsls	r3, r3, #1
    5188:	4413      	add	r3, r2
    518a:	009b      	lsls	r3, r3, #2
    518c:	4a58      	ldr	r2, [pc, #352]	; (52f0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    518e:	4413      	add	r3, r2
    5190:	4a58      	ldr	r2, [pc, #352]	; (52f4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5192:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5194:	4b58      	ldr	r3, [pc, #352]	; (52f8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5196:	795b      	ldrb	r3, [r3, #5]
    5198:	00db      	lsls	r3, r3, #3
    519a:	4a58      	ldr	r2, [pc, #352]	; (52fc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    519c:	4413      	add	r3, r2
    519e:	4a58      	ldr	r2, [pc, #352]	; (5300 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    51a0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    51a2:	4b55      	ldr	r3, [pc, #340]	; (52f8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51a4:	79db      	ldrb	r3, [r3, #7]
    51a6:	00db      	lsls	r3, r3, #3
    51a8:	4a54      	ldr	r2, [pc, #336]	; (52fc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51aa:	4413      	add	r3, r2
    51ac:	4a55      	ldr	r2, [pc, #340]	; (5304 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    51ae:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    51b0:	4b55      	ldr	r3, [pc, #340]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51b2:	799b      	ldrb	r3, [r3, #6]
    51b4:	009b      	lsls	r3, r3, #2
    51b6:	4a55      	ldr	r2, [pc, #340]	; (530c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51b8:	4413      	add	r3, r2
    51ba:	4a55      	ldr	r2, [pc, #340]	; (5310 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    51bc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    51be:	4b52      	ldr	r3, [pc, #328]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51c0:	7a1b      	ldrb	r3, [r3, #8]
    51c2:	009b      	lsls	r3, r3, #2
    51c4:	4a51      	ldr	r2, [pc, #324]	; (530c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51c6:	4413      	add	r3, r2
    51c8:	4a52      	ldr	r2, [pc, #328]	; (5314 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    51ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    51cc:	4b4e      	ldr	r3, [pc, #312]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51ce:	7a5b      	ldrb	r3, [r3, #9]
    51d0:	009b      	lsls	r3, r3, #2
    51d2:	4a4e      	ldr	r2, [pc, #312]	; (530c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51d4:	4413      	add	r3, r2
    51d6:	4a50      	ldr	r2, [pc, #320]	; (5318 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    51d8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    51da:	4b4b      	ldr	r3, [pc, #300]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51dc:	7adb      	ldrb	r3, [r3, #11]
    51de:	009b      	lsls	r3, r3, #2
    51e0:	4a4a      	ldr	r2, [pc, #296]	; (530c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51e2:	4413      	add	r3, r2
    51e4:	4a4d      	ldr	r2, [pc, #308]	; (531c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    51e6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    51e8:	4b47      	ldr	r3, [pc, #284]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51ea:	7b1b      	ldrb	r3, [r3, #12]
    51ec:	009b      	lsls	r3, r3, #2
    51ee:	4a47      	ldr	r2, [pc, #284]	; (530c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51f0:	4413      	add	r3, r2
    51f2:	4a4b      	ldr	r2, [pc, #300]	; (5320 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    51f4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    51f6:	4b44      	ldr	r3, [pc, #272]	; (5308 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    51f8:	7b9b      	ldrb	r3, [r3, #14]
    51fa:	009b      	lsls	r3, r3, #2
    51fc:	4a43      	ldr	r2, [pc, #268]	; (530c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    51fe:	4413      	add	r3, r2
    5200:	4a48      	ldr	r2, [pc, #288]	; (5324 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5202:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5204:	4b48      	ldr	r3, [pc, #288]	; (5328 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5206:	781b      	ldrb	r3, [r3, #0]
    5208:	2b00      	cmp	r3, #0
    520a:	d002      	beq.n	5212 <Clock_Ip_ClockInitializeObjects+0xda>
    520c:	9b01      	ldr	r3, [sp, #4]
    520e:	2b00      	cmp	r3, #0
    5210:	d003      	beq.n	521a <Clock_Ip_ClockInitializeObjects+0xe2>
    5212:	4b46      	ldr	r3, [pc, #280]	; (532c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5214:	781b      	ldrb	r3, [r3, #0]
    5216:	2b00      	cmp	r3, #0
    5218:	d056      	beq.n	52c8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    521a:	f7ff fc09 	bl	4a30 <getFircConfig>
    521e:	4603      	mov	r3, r0
    5220:	4a43      	ldr	r2, [pc, #268]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5222:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5224:	f7ff fc60 	bl	4ae8 <getSoscConfig>
    5228:	4603      	mov	r3, r0
    522a:	4a42      	ldr	r2, [pc, #264]	; (5334 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    522c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    522e:	f7ff fca7 	bl	4b80 <getSpllConfig>
    5232:	4603      	mov	r3, r0
    5234:	4a40      	ldr	r2, [pc, #256]	; (5338 <Clock_Ip_ClockInitializeObjects+0x200>)
    5236:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5238:	2019      	movs	r0, #25
    523a:	f7ff fcfb 	bl	4c34 <getSelectorConfig>
    523e:	4603      	mov	r3, r0
    5240:	4a3e      	ldr	r2, [pc, #248]	; (533c <Clock_Ip_ClockInitializeObjects+0x204>)
    5242:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5244:	201a      	movs	r0, #26
    5246:	f7ff fcf5 	bl	4c34 <getSelectorConfig>
    524a:	4603      	mov	r3, r0
    524c:	4a3c      	ldr	r2, [pc, #240]	; (5340 <Clock_Ip_ClockInitializeObjects+0x208>)
    524e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5250:	201b      	movs	r0, #27
    5252:	f7ff fcef 	bl	4c34 <getSelectorConfig>
    5256:	4603      	mov	r3, r0
    5258:	4a3a      	ldr	r2, [pc, #232]	; (5344 <Clock_Ip_ClockInitializeObjects+0x20c>)
    525a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    525c:	201d      	movs	r0, #29
    525e:	f7ff fd7b 	bl	4d58 <getCoreDividerConfig>
    5262:	4603      	mov	r3, r0
    5264:	4a38      	ldr	r2, [pc, #224]	; (5348 <Clock_Ip_ClockInitializeObjects+0x210>)
    5266:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5268:	201e      	movs	r0, #30
    526a:	f7ff fd75 	bl	4d58 <getCoreDividerConfig>
    526e:	4603      	mov	r3, r0
    5270:	4a36      	ldr	r2, [pc, #216]	; (534c <Clock_Ip_ClockInitializeObjects+0x214>)
    5272:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5274:	201f      	movs	r0, #31
    5276:	f7ff fd6f 	bl	4d58 <getCoreDividerConfig>
    527a:	4603      	mov	r3, r0
    527c:	4a34      	ldr	r2, [pc, #208]	; (5350 <Clock_Ip_ClockInitializeObjects+0x218>)
    527e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5280:	2021      	movs	r0, #33	; 0x21
    5282:	f7ff fe0f 	bl	4ea4 <getBusDividerConfig>
    5286:	4603      	mov	r3, r0
    5288:	4a32      	ldr	r2, [pc, #200]	; (5354 <Clock_Ip_ClockInitializeObjects+0x21c>)
    528a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    528c:	2022      	movs	r0, #34	; 0x22
    528e:	f7ff fe09 	bl	4ea4 <getBusDividerConfig>
    5292:	4603      	mov	r3, r0
    5294:	4a30      	ldr	r2, [pc, #192]	; (5358 <Clock_Ip_ClockInitializeObjects+0x220>)
    5296:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5298:	2023      	movs	r0, #35	; 0x23
    529a:	f7ff fe03 	bl	4ea4 <getBusDividerConfig>
    529e:	4603      	mov	r3, r0
    52a0:	4a2e      	ldr	r2, [pc, #184]	; (535c <Clock_Ip_ClockInitializeObjects+0x224>)
    52a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    52a4:	2025      	movs	r0, #37	; 0x25
    52a6:	f7ff fea3 	bl	4ff0 <getSlowDividerConfig>
    52aa:	4603      	mov	r3, r0
    52ac:	4a2c      	ldr	r2, [pc, #176]	; (5360 <Clock_Ip_ClockInitializeObjects+0x228>)
    52ae:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    52b0:	2026      	movs	r0, #38	; 0x26
    52b2:	f7ff fe9d 	bl	4ff0 <getSlowDividerConfig>
    52b6:	4603      	mov	r3, r0
    52b8:	4a2a      	ldr	r2, [pc, #168]	; (5364 <Clock_Ip_ClockInitializeObjects+0x22c>)
    52ba:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    52bc:	2027      	movs	r0, #39	; 0x27
    52be:	f7ff fe97 	bl	4ff0 <getSlowDividerConfig>
    52c2:	4603      	mov	r3, r0
    52c4:	4a28      	ldr	r2, [pc, #160]	; (5368 <Clock_Ip_ClockInitializeObjects+0x230>)
    52c6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    52c8:	bf00      	nop
    52ca:	b003      	add	sp, #12
    52cc:	f85d fb04 	ldr.w	pc, [sp], #4
    52d0:	1fff8cd0 	.word	0x1fff8cd0
    52d4:	000100e8 	.word	0x000100e8
    52d8:	00010734 	.word	0x00010734
    52dc:	1fff8b9c 	.word	0x1fff8b9c
    52e0:	000100a8 	.word	0x000100a8
    52e4:	0001067c 	.word	0x0001067c
    52e8:	1fff8ba0 	.word	0x1fff8ba0
    52ec:	000100b8 	.word	0x000100b8
    52f0:	000106e8 	.word	0x000106e8
    52f4:	1fff8ba4 	.word	0x1fff8ba4
    52f8:	000100f8 	.word	0x000100f8
    52fc:	00010760 	.word	0x00010760
    5300:	1fff8ba8 	.word	0x1fff8ba8
    5304:	1fff8be4 	.word	0x1fff8be4
    5308:	00010088 	.word	0x00010088
    530c:	00010638 	.word	0x00010638
    5310:	1fff8bac 	.word	0x1fff8bac
    5314:	1fff8be8 	.word	0x1fff8be8
    5318:	1fff8bb0 	.word	0x1fff8bb0
    531c:	1fff8bec 	.word	0x1fff8bec
    5320:	1fff8bb4 	.word	0x1fff8bb4
    5324:	1fff8bf0 	.word	0x1fff8bf0
    5328:	1fff8b19 	.word	0x1fff8b19
    532c:	1fff8b10 	.word	0x1fff8b10
    5330:	1fff8bb8 	.word	0x1fff8bb8
    5334:	1fff8bbc 	.word	0x1fff8bbc
    5338:	1fff8bc0 	.word	0x1fff8bc0
    533c:	1fff8bc4 	.word	0x1fff8bc4
    5340:	1fff8bc8 	.word	0x1fff8bc8
    5344:	1fff8bf4 	.word	0x1fff8bf4
    5348:	1fff8bcc 	.word	0x1fff8bcc
    534c:	1fff8bd0 	.word	0x1fff8bd0
    5350:	1fff8bf8 	.word	0x1fff8bf8
    5354:	1fff8bd4 	.word	0x1fff8bd4
    5358:	1fff8bd8 	.word	0x1fff8bd8
    535c:	1fff8bfc 	.word	0x1fff8bfc
    5360:	1fff8bdc 	.word	0x1fff8bdc
    5364:	1fff8be0 	.word	0x1fff8be0
    5368:	1fff8c00 	.word	0x1fff8c00

0000536c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    536c:	b500      	push	{lr}
    536e:	b083      	sub	sp, #12
    5370:	9001      	str	r0, [sp, #4]
    5372:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5374:	9b01      	ldr	r3, [sp, #4]
    5376:	2b03      	cmp	r3, #3
    5378:	f000 8090 	beq.w	549c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    537c:	9b01      	ldr	r3, [sp, #4]
    537e:	2b03      	cmp	r3, #3
    5380:	f200 80d3 	bhi.w	552a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	2b00      	cmp	r3, #0
    5388:	d040      	beq.n	540c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	3b01      	subs	r3, #1
    538e:	2b01      	cmp	r3, #1
    5390:	f200 80cb 	bhi.w	552a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5394:	9b00      	ldr	r3, [sp, #0]
    5396:	2b00      	cmp	r3, #0
    5398:	f040 80c9 	bne.w	552e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    539c:	4b68      	ldr	r3, [pc, #416]	; (5540 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    539e:	2200      	movs	r2, #0
    53a0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    53a2:	4b68      	ldr	r3, [pc, #416]	; (5544 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53a4:	681b      	ldr	r3, [r3, #0]
    53a6:	685b      	ldr	r3, [r3, #4]
    53a8:	4a67      	ldr	r2, [pc, #412]	; (5548 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    53aa:	6812      	ldr	r2, [r2, #0]
    53ac:	4610      	mov	r0, r2
    53ae:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    53b0:	4b66      	ldr	r3, [pc, #408]	; (554c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    53b2:	681b      	ldr	r3, [r3, #0]
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	4a66      	ldr	r2, [pc, #408]	; (5550 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    53b8:	6812      	ldr	r2, [r2, #0]
    53ba:	4610      	mov	r0, r2
    53bc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    53be:	4b65      	ldr	r3, [pc, #404]	; (5554 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	4a64      	ldr	r2, [pc, #400]	; (5558 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    53c6:	6812      	ldr	r2, [r2, #0]
    53c8:	4610      	mov	r0, r2
    53ca:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    53cc:	4b63      	ldr	r3, [pc, #396]	; (555c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	4a63      	ldr	r2, [pc, #396]	; (5560 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    53d4:	6812      	ldr	r2, [r2, #0]
    53d6:	4610      	mov	r0, r2
    53d8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    53da:	4b62      	ldr	r3, [pc, #392]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	691b      	ldr	r3, [r3, #16]
    53e0:	4a61      	ldr	r2, [pc, #388]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    53e2:	6812      	ldr	r2, [r2, #0]
    53e4:	6812      	ldr	r2, [r2, #0]
    53e6:	4610      	mov	r0, r2
    53e8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    53ea:	4b60      	ldr	r3, [pc, #384]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    53ec:	681b      	ldr	r3, [r3, #0]
    53ee:	68db      	ldr	r3, [r3, #12]
    53f0:	4a5f      	ldr	r2, [pc, #380]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    53f2:	6812      	ldr	r2, [r2, #0]
    53f4:	6812      	ldr	r2, [r2, #0]
    53f6:	4610      	mov	r0, r2
    53f8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    53fa:	4b5e      	ldr	r3, [pc, #376]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	689b      	ldr	r3, [r3, #8]
    5400:	4a5d      	ldr	r2, [pc, #372]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5402:	6812      	ldr	r2, [r2, #0]
    5404:	6812      	ldr	r2, [r2, #0]
    5406:	4610      	mov	r0, r2
    5408:	4798      	blx	r3
            }
        }
        break;
    540a:	e090      	b.n	552e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    540c:	9b00      	ldr	r3, [sp, #0]
    540e:	2b02      	cmp	r3, #2
    5410:	f040 808f 	bne.w	5532 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5414:	4b4a      	ldr	r3, [pc, #296]	; (5540 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5416:	2201      	movs	r2, #1
    5418:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    541a:	4b56      	ldr	r3, [pc, #344]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	685b      	ldr	r3, [r3, #4]
    5420:	4a55      	ldr	r2, [pc, #340]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5422:	6812      	ldr	r2, [r2, #0]
    5424:	4610      	mov	r0, r2
    5426:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5428:	4b50      	ldr	r3, [pc, #320]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    542a:	681b      	ldr	r3, [r3, #0]
    542c:	691b      	ldr	r3, [r3, #16]
    542e:	4a50      	ldr	r2, [pc, #320]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5430:	6812      	ldr	r2, [r2, #0]
    5432:	4610      	mov	r0, r2
    5434:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5436:	4b4d      	ldr	r3, [pc, #308]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	689b      	ldr	r3, [r3, #8]
    543c:	4a4c      	ldr	r2, [pc, #304]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    543e:	6812      	ldr	r2, [r2, #0]
    5440:	4610      	mov	r0, r2
    5442:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5444:	4b47      	ldr	r3, [pc, #284]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	68db      	ldr	r3, [r3, #12]
    544a:	4a47      	ldr	r2, [pc, #284]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    544c:	6812      	ldr	r2, [r2, #0]
    544e:	4610      	mov	r0, r2
    5450:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5452:	4b44      	ldr	r3, [pc, #272]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	689b      	ldr	r3, [r3, #8]
    5458:	4a43      	ldr	r2, [pc, #268]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    545a:	6812      	ldr	r2, [r2, #0]
    545c:	6812      	ldr	r2, [r2, #0]
    545e:	4610      	mov	r0, r2
    5460:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5462:	4b38      	ldr	r3, [pc, #224]	; (5544 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	685b      	ldr	r3, [r3, #4]
    5468:	4a44      	ldr	r2, [pc, #272]	; (557c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    546a:	6812      	ldr	r2, [r2, #0]
    546c:	4610      	mov	r0, r2
    546e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5470:	4b36      	ldr	r3, [pc, #216]	; (554c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	4a42      	ldr	r2, [pc, #264]	; (5580 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5478:	6812      	ldr	r2, [r2, #0]
    547a:	4610      	mov	r0, r2
    547c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    547e:	4b35      	ldr	r3, [pc, #212]	; (5554 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	4a3f      	ldr	r2, [pc, #252]	; (5584 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5486:	6812      	ldr	r2, [r2, #0]
    5488:	4610      	mov	r0, r2
    548a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    548c:	4b33      	ldr	r3, [pc, #204]	; (555c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    548e:	681b      	ldr	r3, [r3, #0]
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	4a3d      	ldr	r2, [pc, #244]	; (5588 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5494:	6812      	ldr	r2, [r2, #0]
    5496:	4610      	mov	r0, r2
    5498:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    549a:	e04a      	b.n	5532 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    549c:	9b00      	ldr	r3, [sp, #0]
    549e:	2b02      	cmp	r3, #2
    54a0:	d149      	bne.n	5536 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54a2:	4b27      	ldr	r3, [pc, #156]	; (5540 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54a4:	2201      	movs	r2, #1
    54a6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54a8:	4b32      	ldr	r3, [pc, #200]	; (5574 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54aa:	681b      	ldr	r3, [r3, #0]
    54ac:	685b      	ldr	r3, [r3, #4]
    54ae:	4a32      	ldr	r2, [pc, #200]	; (5578 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54b0:	6812      	ldr	r2, [r2, #0]
    54b2:	4610      	mov	r0, r2
    54b4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54b6:	4b2d      	ldr	r3, [pc, #180]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	691b      	ldr	r3, [r3, #16]
    54bc:	4a2c      	ldr	r2, [pc, #176]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54be:	6812      	ldr	r2, [r2, #0]
    54c0:	4610      	mov	r0, r2
    54c2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54c4:	4b29      	ldr	r3, [pc, #164]	; (556c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	689b      	ldr	r3, [r3, #8]
    54ca:	4a29      	ldr	r2, [pc, #164]	; (5570 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54cc:	6812      	ldr	r2, [r2, #0]
    54ce:	4610      	mov	r0, r2
    54d0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54d2:	4b24      	ldr	r3, [pc, #144]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	68db      	ldr	r3, [r3, #12]
    54d8:	4a23      	ldr	r2, [pc, #140]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54da:	6812      	ldr	r2, [r2, #0]
    54dc:	4610      	mov	r0, r2
    54de:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    54e0:	4b20      	ldr	r3, [pc, #128]	; (5564 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	689b      	ldr	r3, [r3, #8]
    54e6:	4a20      	ldr	r2, [pc, #128]	; (5568 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54e8:	6812      	ldr	r2, [r2, #0]
    54ea:	6812      	ldr	r2, [r2, #0]
    54ec:	4610      	mov	r0, r2
    54ee:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    54f0:	4b26      	ldr	r3, [pc, #152]	; (558c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	685b      	ldr	r3, [r3, #4]
    54f6:	4a26      	ldr	r2, [pc, #152]	; (5590 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    54f8:	6812      	ldr	r2, [r2, #0]
    54fa:	4610      	mov	r0, r2
    54fc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    54fe:	4b25      	ldr	r3, [pc, #148]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	4a24      	ldr	r2, [pc, #144]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5506:	6812      	ldr	r2, [r2, #0]
    5508:	4610      	mov	r0, r2
    550a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    550c:	4b23      	ldr	r3, [pc, #140]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    550e:	681b      	ldr	r3, [r3, #0]
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	4a23      	ldr	r2, [pc, #140]	; (55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5514:	6812      	ldr	r2, [r2, #0]
    5516:	4610      	mov	r0, r2
    5518:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    551a:	4b22      	ldr	r3, [pc, #136]	; (55a4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	4a21      	ldr	r2, [pc, #132]	; (55a8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5522:	6812      	ldr	r2, [r2, #0]
    5524:	4610      	mov	r0, r2
    5526:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5528:	e005      	b.n	5536 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    552a:	bf00      	nop
    552c:	e004      	b.n	5538 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    552e:	bf00      	nop
    5530:	e002      	b.n	5538 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5532:	bf00      	nop
    5534:	e000      	b.n	5538 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5536:	bf00      	nop
    }

}
    5538:	bf00      	nop
    553a:	b003      	add	sp, #12
    553c:	f85d fb04 	ldr.w	pc, [sp], #4
    5540:	1fff8b19 	.word	0x1fff8b19
    5544:	1fff8ba8 	.word	0x1fff8ba8
    5548:	1fff8bc8 	.word	0x1fff8bc8
    554c:	1fff8bac 	.word	0x1fff8bac
    5550:	1fff8bd0 	.word	0x1fff8bd0
    5554:	1fff8bb0 	.word	0x1fff8bb0
    5558:	1fff8bd8 	.word	0x1fff8bd8
    555c:	1fff8bb4 	.word	0x1fff8bb4
    5560:	1fff8be0 	.word	0x1fff8be0
    5564:	1fff8b9c 	.word	0x1fff8b9c
    5568:	1fff8bc0 	.word	0x1fff8bc0
    556c:	1fff8ba0 	.word	0x1fff8ba0
    5570:	1fff8bbc 	.word	0x1fff8bbc
    5574:	1fff8ba4 	.word	0x1fff8ba4
    5578:	1fff8bb8 	.word	0x1fff8bb8
    557c:	1fff8bc4 	.word	0x1fff8bc4
    5580:	1fff8bcc 	.word	0x1fff8bcc
    5584:	1fff8bd4 	.word	0x1fff8bd4
    5588:	1fff8bdc 	.word	0x1fff8bdc
    558c:	1fff8be4 	.word	0x1fff8be4
    5590:	1fff8bf4 	.word	0x1fff8bf4
    5594:	1fff8be8 	.word	0x1fff8be8
    5598:	1fff8bf8 	.word	0x1fff8bf8
    559c:	1fff8bec 	.word	0x1fff8bec
    55a0:	1fff8bfc 	.word	0x1fff8bfc
    55a4:	1fff8bf0 	.word	0x1fff8bf0
    55a8:	1fff8c00 	.word	0x1fff8c00

000055ac <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    55ac:	b500      	push	{lr}
    55ae:	b083      	sub	sp, #12
    55b0:	9001      	str	r0, [sp, #4]
    55b2:	9100      	str	r1, [sp, #0]
    switch(Command)
    55b4:	9b00      	ldr	r3, [sp, #0]
    55b6:	2b04      	cmp	r3, #4
    55b8:	d010      	beq.n	55dc <Clock_Ip_Command+0x30>
    55ba:	9b00      	ldr	r3, [sp, #0]
    55bc:	2b04      	cmp	r3, #4
    55be:	d811      	bhi.n	55e4 <Clock_Ip_Command+0x38>
    55c0:	9b00      	ldr	r3, [sp, #0]
    55c2:	2b01      	cmp	r3, #1
    55c4:	d006      	beq.n	55d4 <Clock_Ip_Command+0x28>
    55c6:	9b00      	ldr	r3, [sp, #0]
    55c8:	2b02      	cmp	r3, #2
    55ca:	d10b      	bne.n	55e4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    55cc:	9801      	ldr	r0, [sp, #4]
    55ce:	f7ff fdb3 	bl	5138 <Clock_Ip_ClockInitializeObjects>
            break;
    55d2:	e008      	b.n	55e6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    55d4:	9801      	ldr	r0, [sp, #4]
    55d6:	f7ff f9db 	bl	4990 <Clock_Ip_SpecificPlatformInitClock>
            break;
    55da:	e004      	b.n	55e6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    55dc:	9801      	ldr	r0, [sp, #4]
    55de:	f7ff f8ed 	bl	47bc <DisableSafeClock>
            break;
    55e2:	e000      	b.n	55e6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    55e4:	bf00      	nop
    }
}
    55e6:	bf00      	nop
    55e8:	b003      	add	sp, #12
    55ea:	f85d fb04 	ldr.w	pc, [sp], #4
    55ee:	bf00      	nop

000055f0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    55f0:	b500      	push	{lr}
    55f2:	b085      	sub	sp, #20
    55f4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    55f6:	4a20      	ldr	r2, [pc, #128]	; (5678 <Mcu_Init+0x88>)
    55f8:	9b01      	ldr	r3, [sp, #4]
    55fa:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    55fc:	2300      	movs	r3, #0
    55fe:	9303      	str	r3, [sp, #12]
    5600:	e010      	b.n	5624 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5602:	4b1d      	ldr	r3, [pc, #116]	; (5678 <Mcu_Init+0x88>)
    5604:	681b      	ldr	r3, [r3, #0]
    5606:	6919      	ldr	r1, [r3, #16]
    5608:	9a03      	ldr	r2, [sp, #12]
    560a:	4613      	mov	r3, r2
    560c:	005b      	lsls	r3, r3, #1
    560e:	4413      	add	r3, r2
    5610:	009b      	lsls	r3, r3, #2
    5612:	440b      	add	r3, r1
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	9a03      	ldr	r2, [sp, #12]
    5618:	b2d1      	uxtb	r1, r2
    561a:	4a18      	ldr	r2, [pc, #96]	; (567c <Mcu_Init+0x8c>)
    561c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    561e:	9b03      	ldr	r3, [sp, #12]
    5620:	3301      	adds	r3, #1
    5622:	9303      	str	r3, [sp, #12]
    5624:	4b14      	ldr	r3, [pc, #80]	; (5678 <Mcu_Init+0x88>)
    5626:	681b      	ldr	r3, [r3, #0]
    5628:	689b      	ldr	r3, [r3, #8]
    562a:	9a03      	ldr	r2, [sp, #12]
    562c:	429a      	cmp	r2, r3
    562e:	d3e8      	bcc.n	5602 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5630:	2300      	movs	r3, #0
    5632:	9303      	str	r3, [sp, #12]
    5634:	e010      	b.n	5658 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5636:	4b10      	ldr	r3, [pc, #64]	; (5678 <Mcu_Init+0x88>)
    5638:	681b      	ldr	r3, [r3, #0]
    563a:	6959      	ldr	r1, [r3, #20]
    563c:	9a03      	ldr	r2, [sp, #12]
    563e:	4613      	mov	r3, r2
    5640:	01db      	lsls	r3, r3, #7
    5642:	1a9b      	subs	r3, r3, r2
    5644:	00db      	lsls	r3, r3, #3
    5646:	440b      	add	r3, r1
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	9a03      	ldr	r2, [sp, #12]
    564c:	b2d1      	uxtb	r1, r2
    564e:	4a0c      	ldr	r2, [pc, #48]	; (5680 <Mcu_Init+0x90>)
    5650:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5652:	9b03      	ldr	r3, [sp, #12]
    5654:	3301      	adds	r3, #1
    5656:	9303      	str	r3, [sp, #12]
    5658:	4b07      	ldr	r3, [pc, #28]	; (5678 <Mcu_Init+0x88>)
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	68db      	ldr	r3, [r3, #12]
    565e:	9a03      	ldr	r2, [sp, #12]
    5660:	429a      	cmp	r2, r3
    5662:	d3e8      	bcc.n	5636 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5664:	4b04      	ldr	r3, [pc, #16]	; (5678 <Mcu_Init+0x88>)
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	699b      	ldr	r3, [r3, #24]
    566a:	4618      	mov	r0, r3
    566c:	f000 f88a 	bl	5784 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5670:	bf00      	nop
    5672:	b005      	add	sp, #20
    5674:	f85d fb04 	ldr.w	pc, [sp], #4
    5678:	1fff8cdc 	.word	0x1fff8cdc
    567c:	1fff8cd8 	.word	0x1fff8cd8
    5680:	1fff8cd4 	.word	0x1fff8cd4

00005684 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5684:	b084      	sub	sp, #16
    5686:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5688:	2301      	movs	r3, #1
    568a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    568e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5692:	4618      	mov	r0, r3
    5694:	b004      	add	sp, #16
    5696:	4770      	bx	lr

00005698 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5698:	b500      	push	{lr}
    569a:	b085      	sub	sp, #20
    569c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    569e:	4a0e      	ldr	r2, [pc, #56]	; (56d8 <Mcu_InitClock+0x40>)
    56a0:	9b01      	ldr	r3, [sp, #4]
    56a2:	4413      	add	r3, r2
    56a4:	781b      	ldrb	r3, [r3, #0]
    56a6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    56aa:	4b0c      	ldr	r3, [pc, #48]	; (56dc <Mcu_InitClock+0x44>)
    56ac:	681b      	ldr	r3, [r3, #0]
    56ae:	6959      	ldr	r1, [r3, #20]
    56b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    56b4:	4613      	mov	r3, r2
    56b6:	01db      	lsls	r3, r3, #7
    56b8:	1a9b      	subs	r3, r3, r2
    56ba:	00db      	lsls	r3, r3, #3
    56bc:	440b      	add	r3, r1
    56be:	4618      	mov	r0, r3
    56c0:	f000 f86a 	bl	5798 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    56c4:	2300      	movs	r3, #0
    56c6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    56ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    56ce:	4618      	mov	r0, r3
    56d0:	b005      	add	sp, #20
    56d2:	f85d fb04 	ldr.w	pc, [sp], #4
    56d6:	bf00      	nop
    56d8:	1fff8cd4 	.word	0x1fff8cd4
    56dc:	1fff8cdc 	.word	0x1fff8cdc

000056e0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    56e0:	b500      	push	{lr}
    56e2:	b085      	sub	sp, #20
    56e4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    56e6:	4a0d      	ldr	r2, [pc, #52]	; (571c <Mcu_SetMode+0x3c>)
    56e8:	9b01      	ldr	r3, [sp, #4]
    56ea:	4413      	add	r3, r2
    56ec:	781b      	ldrb	r3, [r3, #0]
    56ee:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    56f2:	f009 fa13 	bl	eb1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    56f6:	4b0a      	ldr	r3, [pc, #40]	; (5720 <Mcu_SetMode+0x40>)
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	6919      	ldr	r1, [r3, #16]
    56fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5700:	4613      	mov	r3, r2
    5702:	005b      	lsls	r3, r3, #1
    5704:	4413      	add	r3, r2
    5706:	009b      	lsls	r3, r3, #2
    5708:	440b      	add	r3, r1
    570a:	4618      	mov	r0, r3
    570c:	f000 f84e 	bl	57ac <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5710:	f009 fa30 	bl	eb74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5714:	bf00      	nop
    5716:	b005      	add	sp, #20
    5718:	f85d fb04 	ldr.w	pc, [sp], #4
    571c:	1fff8cd8 	.word	0x1fff8cd8
    5720:	1fff8cdc 	.word	0x1fff8cdc

00005724 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5724:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5726:	2302      	movs	r3, #2
    5728:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    572a:	9b01      	ldr	r3, [sp, #4]
}
    572c:	4618      	mov	r0, r3
    572e:	b002      	add	sp, #8
    5730:	4770      	bx	lr

00005732 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5732:	b500      	push	{lr}
    5734:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5736:	f000 f843 	bl	57c0 <Mcu_Ipw_GetResetReason>
    573a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    573c:	9b01      	ldr	r3, [sp, #4]
}
    573e:	4618      	mov	r0, r3
    5740:	b003      	add	sp, #12
    5742:	f85d fb04 	ldr.w	pc, [sp], #4

00005746 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5746:	b500      	push	{lr}
    5748:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    574a:	f000 f83f 	bl	57cc <Mcu_Ipw_GetResetRawValue>
    574e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5750:	9b01      	ldr	r3, [sp, #4]
}
    5752:	4618      	mov	r0, r3
    5754:	b003      	add	sp, #12
    5756:	f85d fb04 	ldr.w	pc, [sp], #4

0000575a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    575a:	b500      	push	{lr}
    575c:	b083      	sub	sp, #12
    575e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5760:	9801      	ldr	r0, [sp, #4]
    5762:	f000 f839 	bl	57d8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5766:	bf00      	nop
    5768:	b003      	add	sp, #12
    576a:	f85d fb04 	ldr.w	pc, [sp], #4

0000576e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    576e:	b082      	sub	sp, #8
    5770:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5772:	4b03      	ldr	r3, [pc, #12]	; (5780 <Mcu_ClkSrcFailureNotification+0x12>)
    5774:	681b      	ldr	r3, [r3, #0]
    5776:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5778:	bf00      	nop
    577a:	b002      	add	sp, #8
    577c:	4770      	bx	lr
    577e:	bf00      	nop
    5780:	1fff8cdc 	.word	0x1fff8cdc

00005784 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5784:	b500      	push	{lr}
    5786:	b083      	sub	sp, #12
    5788:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    578a:	9801      	ldr	r0, [sp, #4]
    578c:	f000 f882 	bl	5894 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5790:	bf00      	nop
    5792:	b003      	add	sp, #12
    5794:	f85d fb04 	ldr.w	pc, [sp], #4

00005798 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5798:	b500      	push	{lr}
    579a:	b083      	sub	sp, #12
    579c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    579e:	9801      	ldr	r0, [sp, #4]
    57a0:	f7fc fc6a 	bl	2078 <Clock_Ip_InitClock>
}
    57a4:	bf00      	nop
    57a6:	b003      	add	sp, #12
    57a8:	f85d fb04 	ldr.w	pc, [sp], #4

000057ac <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    57ac:	b500      	push	{lr}
    57ae:	b083      	sub	sp, #12
    57b0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    57b2:	9801      	ldr	r0, [sp, #4]
    57b4:	f000 f820 	bl	57f8 <Power_Ip_SetMode>
}
    57b8:	bf00      	nop
    57ba:	b003      	add	sp, #12
    57bc:	f85d fb04 	ldr.w	pc, [sp], #4

000057c0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    57c0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    57c2:	f000 f84f 	bl	5864 <Power_Ip_GetResetReason>
    57c6:	4603      	mov	r3, r0
}
    57c8:	4618      	mov	r0, r3
    57ca:	bd08      	pop	{r3, pc}

000057cc <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    57cc:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    57ce:	f000 f857 	bl	5880 <Power_Ip_GetResetRawValue>
    57d2:	4603      	mov	r3, r0
}
    57d4:	4618      	mov	r0, r3
    57d6:	bd08      	pop	{r3, pc}

000057d8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57d8:	b500      	push	{lr}
    57da:	b083      	sub	sp, #12
    57dc:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    57de:	9b01      	ldr	r3, [sp, #4]
    57e0:	2b00      	cmp	r3, #0
    57e2:	d102      	bne.n	57ea <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    57e4:	f000 f86c 	bl	58c0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    57e8:	e001      	b.n	57ee <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    57ea:	f000 f86e 	bl	58ca <Power_Ip_EnableSleepOnExit>
}
    57ee:	bf00      	nop
    57f0:	b003      	add	sp, #12
    57f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000057f8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    57f8:	b500      	push	{lr}
    57fa:	b085      	sub	sp, #20
    57fc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    57fe:	9b01      	ldr	r3, [sp, #4]
    5800:	685b      	ldr	r3, [r3, #4]
    5802:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5804:	9802      	ldr	r0, [sp, #8]
    5806:	f000 f9f5 	bl	5bf4 <Power_Ip_SMC_ModeCheckEntry>
    580a:	4603      	mov	r3, r0
    580c:	2b00      	cmp	r3, #0
    580e:	d002      	beq.n	5816 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5810:	2301      	movs	r3, #1
    5812:	9303      	str	r3, [sp, #12]
    5814:	e003      	b.n	581e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5816:	9801      	ldr	r0, [sp, #4]
    5818:	f000 fa1e 	bl	5c58 <Power_Ip_SMC_ModeConfig>
    581c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    581e:	9b03      	ldr	r3, [sp, #12]
    5820:	2b01      	cmp	r3, #1
    5822:	d103      	bne.n	582c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5824:	21ff      	movs	r1, #255	; 0xff
    5826:	2003      	movs	r0, #3
    5828:	f000 f8f4 	bl	5a14 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    582c:	bf00      	nop
    582e:	b005      	add	sp, #20
    5830:	f85d fb04 	ldr.w	pc, [sp], #4

00005834 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5834:	b084      	sub	sp, #16
    5836:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5838:	230c      	movs	r3, #12
    583a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    583c:	4a08      	ldr	r2, [pc, #32]	; (5860 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    583e:	9b01      	ldr	r3, [sp, #4]
    5840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5844:	2b0e      	cmp	r3, #14
    5846:	d805      	bhi.n	5854 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5848:	4a05      	ldr	r2, [pc, #20]	; (5860 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    584a:	9b01      	ldr	r3, [sp, #4]
    584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5850:	9303      	str	r3, [sp, #12]
    5852:	e001      	b.n	5858 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5854:	230c      	movs	r3, #12
    5856:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5858:	9b03      	ldr	r3, [sp, #12]
}
    585a:	4618      	mov	r0, r3
    585c:	b004      	add	sp, #16
    585e:	4770      	bx	lr
    5860:	000107d4 	.word	0x000107d4

00005864 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5864:	b500      	push	{lr}
    5866:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5868:	f000 f940 	bl	5aec <Power_Ip_RCM_GetResetReason>
    586c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    586e:	9801      	ldr	r0, [sp, #4]
    5870:	f7ff ffe0 	bl	5834 <Power_Ip_ConvertIntergeToResetType>
    5874:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5876:	9b00      	ldr	r3, [sp, #0]
}
    5878:	4618      	mov	r0, r3
    587a:	b003      	add	sp, #12
    587c:	f85d fb04 	ldr.w	pc, [sp], #4

00005880 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5880:	b500      	push	{lr}
    5882:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5884:	f000 f98a 	bl	5b9c <Power_Ip_RCM_GetResetRawValue>
    5888:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    588a:	9b01      	ldr	r3, [sp, #4]
}
    588c:	4618      	mov	r0, r3
    588e:	b003      	add	sp, #12
    5890:	f85d fb04 	ldr.w	pc, [sp], #4

00005894 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5894:	b500      	push	{lr}
    5896:	b083      	sub	sp, #12
    5898:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    589a:	9b01      	ldr	r3, [sp, #4]
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	4618      	mov	r0, r3
    58a0:	f000 f90e 	bl	5ac0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    58a4:	9b01      	ldr	r3, [sp, #4]
    58a6:	685b      	ldr	r3, [r3, #4]
    58a8:	4618      	mov	r0, r3
    58aa:	f000 f86d 	bl	5988 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    58ae:	9b01      	ldr	r3, [sp, #4]
    58b0:	689b      	ldr	r3, [r3, #8]
    58b2:	4618      	mov	r0, r3
    58b4:	f000 f990 	bl	5bd8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    58b8:	bf00      	nop
    58ba:	b003      	add	sp, #12
    58bc:	f85d fb04 	ldr.w	pc, [sp], #4

000058c0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    58c0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    58c2:	f000 f811 	bl	58e8 <Power_Ip_CM4_DisableSleepOnExit>
}
    58c6:	bf00      	nop
    58c8:	bd08      	pop	{r3, pc}

000058ca <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    58ca:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    58cc:	f000 f820 	bl	5910 <Power_Ip_CM4_EnableSleepOnExit>
}
    58d0:	bf00      	nop
    58d2:	bd08      	pop	{r3, pc}

000058d4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    58d4:	b082      	sub	sp, #8
    58d6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    58d8:	4a02      	ldr	r2, [pc, #8]	; (58e4 <Power_Ip_InstallNotificationsCallback+0x10>)
    58da:	9b01      	ldr	r3, [sp, #4]
    58dc:	6013      	str	r3, [r2, #0]
}
    58de:	bf00      	nop
    58e0:	b002      	add	sp, #8
    58e2:	4770      	bx	lr
    58e4:	1fff8b1c 	.word	0x1fff8b1c

000058e8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    58e8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    58ea:	2300      	movs	r3, #0
    58ec:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    58ee:	4b07      	ldr	r3, [pc, #28]	; (590c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	685b      	ldr	r3, [r3, #4]
    58f4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	f023 0302 	bic.w	r3, r3, #2
    58fc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    58fe:	4b03      	ldr	r3, [pc, #12]	; (590c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5900:	681b      	ldr	r3, [r3, #0]
    5902:	9a01      	ldr	r2, [sp, #4]
    5904:	605a      	str	r2, [r3, #4]
}
    5906:	bf00      	nop
    5908:	b002      	add	sp, #8
    590a:	4770      	bx	lr
    590c:	1fff8b20 	.word	0x1fff8b20

00005910 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5910:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5912:	2300      	movs	r3, #0
    5914:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5916:	4b07      	ldr	r3, [pc, #28]	; (5934 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	685b      	ldr	r3, [r3, #4]
    591c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    591e:	9b01      	ldr	r3, [sp, #4]
    5920:	f043 0302 	orr.w	r3, r3, #2
    5924:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5926:	4b03      	ldr	r3, [pc, #12]	; (5934 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	9a01      	ldr	r2, [sp, #4]
    592c:	605a      	str	r2, [r3, #4]
}
    592e:	bf00      	nop
    5930:	b002      	add	sp, #8
    5932:	4770      	bx	lr
    5934:	1fff8b20 	.word	0x1fff8b20

00005938 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5938:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    593a:	2300      	movs	r3, #0
    593c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    593e:	4b07      	ldr	r3, [pc, #28]	; (595c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5940:	681b      	ldr	r3, [r3, #0]
    5942:	685b      	ldr	r3, [r3, #4]
    5944:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	f043 0304 	orr.w	r3, r3, #4
    594c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    594e:	4b03      	ldr	r3, [pc, #12]	; (595c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	9a01      	ldr	r2, [sp, #4]
    5954:	605a      	str	r2, [r3, #4]
}
    5956:	bf00      	nop
    5958:	b002      	add	sp, #8
    595a:	4770      	bx	lr
    595c:	1fff8b20 	.word	0x1fff8b20

00005960 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5960:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5962:	2300      	movs	r3, #0
    5964:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5966:	4b07      	ldr	r3, [pc, #28]	; (5984 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	685b      	ldr	r3, [r3, #4]
    596c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    596e:	9b01      	ldr	r3, [sp, #4]
    5970:	f023 0304 	bic.w	r3, r3, #4
    5974:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5976:	4b03      	ldr	r3, [pc, #12]	; (5984 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	9a01      	ldr	r2, [sp, #4]
    597c:	605a      	str	r2, [r3, #4]
}
    597e:	bf00      	nop
    5980:	b002      	add	sp, #8
    5982:	4770      	bx	lr
    5984:	1fff8b20 	.word	0x1fff8b20

00005988 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5988:	b084      	sub	sp, #16
    598a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    598c:	4b20      	ldr	r3, [pc, #128]	; (5a10 <Power_Ip_PMC_PowerInit+0x88>)
    598e:	781b      	ldrb	r3, [r3, #0]
    5990:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5994:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5998:	f003 030f 	and.w	r3, r3, #15
    599c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    59a0:	9b01      	ldr	r3, [sp, #4]
    59a2:	781a      	ldrb	r2, [r3, #0]
    59a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59a8:	4313      	orrs	r3, r2
    59aa:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    59ae:	4a18      	ldr	r2, [pc, #96]	; (5a10 <Power_Ip_PMC_PowerInit+0x88>)
    59b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59b4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    59b6:	4b16      	ldr	r3, [pc, #88]	; (5a10 <Power_Ip_PMC_PowerInit+0x88>)
    59b8:	785b      	ldrb	r3, [r3, #1]
    59ba:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    59be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59c2:	f003 031f 	and.w	r3, r3, #31
    59c6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    59ca:	9b01      	ldr	r3, [sp, #4]
    59cc:	785a      	ldrb	r2, [r3, #1]
    59ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59d2:	4313      	orrs	r3, r2
    59d4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    59d8:	4a0d      	ldr	r2, [pc, #52]	; (5a10 <Power_Ip_PMC_PowerInit+0x88>)
    59da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59de:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    59e0:	4b0b      	ldr	r3, [pc, #44]	; (5a10 <Power_Ip_PMC_PowerInit+0x88>)
    59e2:	789b      	ldrb	r3, [r3, #2]
    59e4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    59e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
    59f0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	789a      	ldrb	r2, [r3, #2]
    59f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59fc:	4313      	orrs	r3, r2
    59fe:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a02:	4a03      	ldr	r2, [pc, #12]	; (5a10 <Power_Ip_PMC_PowerInit+0x88>)
    5a04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a08:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5a0a:	bf00      	nop
    5a0c:	b004      	add	sp, #16
    5a0e:	4770      	bx	lr
    5a10:	4007d000 	.word	0x4007d000

00005a14 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a14:	b500      	push	{lr}
    5a16:	b083      	sub	sp, #12
    5a18:	9001      	str	r0, [sp, #4]
    5a1a:	460b      	mov	r3, r1
    5a1c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5a20:	4b05      	ldr	r3, [pc, #20]	; (5a38 <Power_Ip_ReportPowerErrors+0x24>)
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5a28:	4611      	mov	r1, r2
    5a2a:	9801      	ldr	r0, [sp, #4]
    5a2c:	4798      	blx	r3
}
    5a2e:	bf00      	nop
    5a30:	b003      	add	sp, #12
    5a32:	f85d fb04 	ldr.w	pc, [sp], #4
    5a36:	bf00      	nop
    5a38:	1fff8b1c 	.word	0x1fff8b1c

00005a3c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a3c:	b082      	sub	sp, #8
    5a3e:	9001      	str	r0, [sp, #4]
    5a40:	460b      	mov	r3, r1
    5a42:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5a46:	bf00      	nop
    5a48:	b002      	add	sp, #8
    5a4a:	4770      	bx	lr

00005a4c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5a4c:	b500      	push	{lr}
    5a4e:	b085      	sub	sp, #20
    5a50:	9003      	str	r0, [sp, #12]
    5a52:	9102      	str	r1, [sp, #8]
    5a54:	9201      	str	r2, [sp, #4]
    5a56:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5a58:	2000      	movs	r0, #0
    5a5a:	f7fc f83d 	bl	1ad8 <OsIf_GetCounter>
    5a5e:	4602      	mov	r2, r0
    5a60:	9b03      	ldr	r3, [sp, #12]
    5a62:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5a64:	9b02      	ldr	r3, [sp, #8]
    5a66:	2200      	movs	r2, #0
    5a68:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5a6a:	2100      	movs	r1, #0
    5a6c:	9800      	ldr	r0, [sp, #0]
    5a6e:	f7fc f87f 	bl	1b70 <OsIf_MicrosToTicks>
    5a72:	4602      	mov	r2, r0
    5a74:	9b01      	ldr	r3, [sp, #4]
    5a76:	601a      	str	r2, [r3, #0]
}
    5a78:	bf00      	nop
    5a7a:	b005      	add	sp, #20
    5a7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005a80 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5a80:	b500      	push	{lr}
    5a82:	b087      	sub	sp, #28
    5a84:	9003      	str	r0, [sp, #12]
    5a86:	9102      	str	r1, [sp, #8]
    5a88:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5a8a:	2300      	movs	r3, #0
    5a8c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5a90:	2100      	movs	r1, #0
    5a92:	9803      	ldr	r0, [sp, #12]
    5a94:	f7fc f839 	bl	1b0a <OsIf_GetElapsed>
    5a98:	4602      	mov	r2, r0
    5a9a:	9b02      	ldr	r3, [sp, #8]
    5a9c:	681b      	ldr	r3, [r3, #0]
    5a9e:	441a      	add	r2, r3
    5aa0:	9b02      	ldr	r3, [sp, #8]
    5aa2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5aa4:	9b02      	ldr	r3, [sp, #8]
    5aa6:	681b      	ldr	r3, [r3, #0]
    5aa8:	9a01      	ldr	r2, [sp, #4]
    5aaa:	429a      	cmp	r2, r3
    5aac:	d802      	bhi.n	5ab4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5aae:	2301      	movs	r3, #1
    5ab0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5ab4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5ab8:	4618      	mov	r0, r3
    5aba:	b007      	add	sp, #28
    5abc:	f85d fb04 	ldr.w	pc, [sp], #4

00005ac0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5ac0:	b082      	sub	sp, #8
    5ac2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5ac4:	9b01      	ldr	r3, [sp, #4]
    5ac6:	681a      	ldr	r2, [r3, #0]
    5ac8:	4907      	ldr	r1, [pc, #28]	; (5ae8 <Power_Ip_RCM_ResetInit+0x28>)
    5aca:	f641 7307 	movw	r3, #7943	; 0x1f07
    5ace:	4013      	ands	r3, r2
    5ad0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5ad2:	9b01      	ldr	r3, [sp, #4]
    5ad4:	685a      	ldr	r2, [r3, #4]
    5ad6:	4904      	ldr	r1, [pc, #16]	; (5ae8 <Power_Ip_RCM_ResetInit+0x28>)
    5ad8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5adc:	4013      	ands	r3, r2
    5ade:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5ae0:	bf00      	nop
    5ae2:	b002      	add	sp, #8
    5ae4:	4770      	bx	lr
    5ae6:	bf00      	nop
    5ae8:	4007f000 	.word	0x4007f000

00005aec <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5aec:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5aee:	230c      	movs	r3, #12
    5af0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5af2:	2300      	movs	r3, #0
    5af4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5af6:	2300      	movs	r3, #0
    5af8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5afa:	2300      	movs	r3, #0
    5afc:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5afe:	4b25      	ldr	r3, [pc, #148]	; (5b94 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b00:	699a      	ldr	r2, [r3, #24]
    5b02:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b06:	4013      	ands	r3, r2
    5b08:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5b0a:	9b03      	ldr	r3, [sp, #12]
    5b0c:	2b00      	cmp	r3, #0
    5b0e:	d008      	beq.n	5b22 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5b10:	4920      	ldr	r1, [pc, #128]	; (5b94 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b12:	9a03      	ldr	r2, [sp, #12]
    5b14:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b18:	4013      	ands	r3, r2
    5b1a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b1c:	4a1e      	ldr	r2, [pc, #120]	; (5b98 <Power_Ip_RCM_GetResetReason+0xac>)
    5b1e:	9b03      	ldr	r3, [sp, #12]
    5b20:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5b22:	4b1d      	ldr	r3, [pc, #116]	; (5b98 <Power_Ip_RCM_GetResetReason+0xac>)
    5b24:	681b      	ldr	r3, [r3, #0]
    5b26:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5b28:	9a02      	ldr	r2, [sp, #8]
    5b2a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b2e:	4013      	ands	r3, r2
    5b30:	2b82      	cmp	r3, #130	; 0x82
    5b32:	d102      	bne.n	5b3a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5b34:	2305      	movs	r3, #5
    5b36:	9307      	str	r3, [sp, #28]
    5b38:	e027      	b.n	5b8a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b3a:	2300      	movs	r3, #0
    5b3c:	9306      	str	r3, [sp, #24]
    5b3e:	e021      	b.n	5b84 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5b40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b44:	9b06      	ldr	r3, [sp, #24]
    5b46:	fa22 f303 	lsr.w	r3, r2, r3
    5b4a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5b4c:	9a01      	ldr	r2, [sp, #4]
    5b4e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5b52:	4013      	ands	r3, r2
    5b54:	2b00      	cmp	r3, #0
    5b56:	d012      	beq.n	5b7e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5b58:	9a01      	ldr	r2, [sp, #4]
    5b5a:	9b02      	ldr	r3, [sp, #8]
    5b5c:	4013      	ands	r3, r2
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d00a      	beq.n	5b78 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5b62:	9b05      	ldr	r3, [sp, #20]
    5b64:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5b66:	9b04      	ldr	r3, [sp, #16]
    5b68:	3301      	adds	r3, #1
    5b6a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5b6c:	9b04      	ldr	r3, [sp, #16]
    5b6e:	2b01      	cmp	r3, #1
    5b70:	d902      	bls.n	5b78 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5b72:	230d      	movs	r3, #13
    5b74:	9307      	str	r3, [sp, #28]
                        break;
    5b76:	e008      	b.n	5b8a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5b78:	9b05      	ldr	r3, [sp, #20]
    5b7a:	3301      	adds	r3, #1
    5b7c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b7e:	9b06      	ldr	r3, [sp, #24]
    5b80:	3301      	adds	r3, #1
    5b82:	9306      	str	r3, [sp, #24]
    5b84:	9b06      	ldr	r3, [sp, #24]
    5b86:	2b1f      	cmp	r3, #31
    5b88:	d9da      	bls.n	5b40 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5b8a:	9b07      	ldr	r3, [sp, #28]
}
    5b8c:	4618      	mov	r0, r3
    5b8e:	b008      	add	sp, #32
    5b90:	4770      	bx	lr
    5b92:	bf00      	nop
    5b94:	4007f000 	.word	0x4007f000
    5b98:	1fff8ce0 	.word	0x1fff8ce0

00005b9c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5b9c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b9e:	4b0c      	ldr	r3, [pc, #48]	; (5bd0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5ba0:	699a      	ldr	r2, [r3, #24]
    5ba2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5ba6:	4013      	ands	r3, r2
    5ba8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5baa:	9b01      	ldr	r3, [sp, #4]
    5bac:	2b00      	cmp	r3, #0
    5bae:	d008      	beq.n	5bc2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bb0:	4907      	ldr	r1, [pc, #28]	; (5bd0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bb2:	9a01      	ldr	r2, [sp, #4]
    5bb4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bb8:	4013      	ands	r3, r2
    5bba:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bbc:	4a05      	ldr	r2, [pc, #20]	; (5bd4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5bbe:	9b01      	ldr	r3, [sp, #4]
    5bc0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5bc2:	4b04      	ldr	r3, [pc, #16]	; (5bd4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5bc8:	9b00      	ldr	r3, [sp, #0]
}
    5bca:	4618      	mov	r0, r3
    5bcc:	b002      	add	sp, #8
    5bce:	4770      	bx	lr
    5bd0:	4007f000 	.word	0x4007f000
    5bd4:	1fff8ce0 	.word	0x1fff8ce0

00005bd8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5bd8:	b082      	sub	sp, #8
    5bda:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5bdc:	9b01      	ldr	r3, [sp, #4]
    5bde:	681b      	ldr	r3, [r3, #0]
    5be0:	4a03      	ldr	r2, [pc, #12]	; (5bf0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5be2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5be6:	6093      	str	r3, [r2, #8]
}
    5be8:	bf00      	nop
    5bea:	b002      	add	sp, #8
    5bec:	4770      	bx	lr
    5bee:	bf00      	nop
    5bf0:	4007e000 	.word	0x4007e000

00005bf4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5bf4:	b084      	sub	sp, #16
    5bf6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5bf8:	2301      	movs	r3, #1
    5bfa:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5bfc:	4b15      	ldr	r3, [pc, #84]	; (5c54 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5bfe:	695b      	ldr	r3, [r3, #20]
    5c00:	b2db      	uxtb	r3, r3
    5c02:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c04:	9b01      	ldr	r3, [sp, #4]
    5c06:	2b02      	cmp	r3, #2
    5c08:	d012      	beq.n	5c30 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5c0a:	9b01      	ldr	r3, [sp, #4]
    5c0c:	2b02      	cmp	r3, #2
    5c0e:	d818      	bhi.n	5c42 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5c10:	9b01      	ldr	r3, [sp, #4]
    5c12:	2b00      	cmp	r3, #0
    5c14:	d003      	beq.n	5c1e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5c16:	9b01      	ldr	r3, [sp, #4]
    5c18:	2b01      	cmp	r3, #1
    5c1a:	d003      	beq.n	5c24 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5c1c:	e011      	b.n	5c42 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5c1e:	2300      	movs	r3, #0
    5c20:	9303      	str	r3, [sp, #12]
            break;
    5c22:	e013      	b.n	5c4c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5c24:	9b02      	ldr	r3, [sp, #8]
    5c26:	2b01      	cmp	r3, #1
    5c28:	d10d      	bne.n	5c46 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c2a:	2300      	movs	r3, #0
    5c2c:	9303      	str	r3, [sp, #12]
            break;
    5c2e:	e00a      	b.n	5c46 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5c30:	9b02      	ldr	r3, [sp, #8]
    5c32:	2b01      	cmp	r3, #1
    5c34:	d002      	beq.n	5c3c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5c36:	9b02      	ldr	r3, [sp, #8]
    5c38:	2b10      	cmp	r3, #16
    5c3a:	d106      	bne.n	5c4a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c3c:	2300      	movs	r3, #0
    5c3e:	9303      	str	r3, [sp, #12]
            break;
    5c40:	e003      	b.n	5c4a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5c42:	bf00      	nop
    5c44:	e002      	b.n	5c4c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c46:	bf00      	nop
    5c48:	e000      	b.n	5c4c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c4a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5c4c:	9b03      	ldr	r3, [sp, #12]
}
    5c4e:	4618      	mov	r0, r3
    5c50:	b004      	add	sp, #16
    5c52:	4770      	bx	lr
    5c54:	4007e000 	.word	0x4007e000

00005c58 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5c58:	b500      	push	{lr}
    5c5a:	b08b      	sub	sp, #44	; 0x2c
    5c5c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5c5e:	2300      	movs	r3, #0
    5c60:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5c62:	2300      	movs	r3, #0
    5c64:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5c66:	2300      	movs	r3, #0
    5c68:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5c6c:	9b01      	ldr	r3, [sp, #4]
    5c6e:	685b      	ldr	r3, [r3, #4]
    5c70:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5c72:	9b08      	ldr	r3, [sp, #32]
    5c74:	2b02      	cmp	r3, #2
    5c76:	d076      	beq.n	5d66 <Power_Ip_SMC_ModeConfig+0x10e>
    5c78:	9b08      	ldr	r3, [sp, #32]
    5c7a:	2b02      	cmp	r3, #2
    5c7c:	f200 80ab 	bhi.w	5dd6 <Power_Ip_SMC_ModeConfig+0x17e>
    5c80:	9b08      	ldr	r3, [sp, #32]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d003      	beq.n	5c8e <Power_Ip_SMC_ModeConfig+0x36>
    5c86:	9b08      	ldr	r3, [sp, #32]
    5c88:	2b01      	cmp	r3, #1
    5c8a:	d034      	beq.n	5cf6 <Power_Ip_SMC_ModeConfig+0x9e>
    5c8c:	e0a3      	b.n	5dd6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5c8e:	4b58      	ldr	r3, [pc, #352]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5c90:	68db      	ldr	r3, [r3, #12]
    5c92:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5c94:	9b06      	ldr	r3, [sp, #24]
    5c96:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5c9a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5c9c:	4a54      	ldr	r2, [pc, #336]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5c9e:	9b06      	ldr	r3, [sp, #24]
    5ca0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5ca2:	aa02      	add	r2, sp, #8
    5ca4:	a903      	add	r1, sp, #12
    5ca6:	a804      	add	r0, sp, #16
    5ca8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5cac:	f7ff fece 	bl	5a4c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5cb0:	9a02      	ldr	r2, [sp, #8]
    5cb2:	a903      	add	r1, sp, #12
    5cb4:	ab04      	add	r3, sp, #16
    5cb6:	4618      	mov	r0, r3
    5cb8:	f7ff fee2 	bl	5a80 <Power_Ip_TimeoutExpired>
    5cbc:	4603      	mov	r3, r0
    5cbe:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5cc2:	4b4b      	ldr	r3, [pc, #300]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5cc4:	695b      	ldr	r3, [r3, #20]
    5cc6:	f003 0301 	and.w	r3, r3, #1
    5cca:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5ccc:	9b05      	ldr	r3, [sp, #20]
    5cce:	2b01      	cmp	r3, #1
    5cd0:	d006      	beq.n	5ce0 <Power_Ip_SMC_ModeConfig+0x88>
    5cd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5cd6:	f083 0301 	eor.w	r3, r3, #1
    5cda:	b2db      	uxtb	r3, r3
    5cdc:	2b00      	cmp	r3, #0
    5cde:	d1e7      	bne.n	5cb0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5ce0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d079      	beq.n	5ddc <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ce8:	2301      	movs	r3, #1
    5cea:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5cec:	21ff      	movs	r1, #255	; 0xff
    5cee:	2000      	movs	r0, #0
    5cf0:	f7ff fe90 	bl	5a14 <Power_Ip_ReportPowerErrors>
            }

            break;
    5cf4:	e072      	b.n	5ddc <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5cf6:	4b3e      	ldr	r3, [pc, #248]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5cf8:	68db      	ldr	r3, [r3, #12]
    5cfa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5cfc:	9b06      	ldr	r3, [sp, #24]
    5cfe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d02:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d04:	9b06      	ldr	r3, [sp, #24]
    5d06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5d0a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d0c:	4a38      	ldr	r2, [pc, #224]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d0e:	9b06      	ldr	r3, [sp, #24]
    5d10:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d12:	aa02      	add	r2, sp, #8
    5d14:	a903      	add	r1, sp, #12
    5d16:	a804      	add	r0, sp, #16
    5d18:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d1c:	f7ff fe96 	bl	5a4c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d20:	9a02      	ldr	r2, [sp, #8]
    5d22:	a903      	add	r1, sp, #12
    5d24:	ab04      	add	r3, sp, #16
    5d26:	4618      	mov	r0, r3
    5d28:	f7ff feaa 	bl	5a80 <Power_Ip_TimeoutExpired>
    5d2c:	4603      	mov	r3, r0
    5d2e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5d32:	4b2f      	ldr	r3, [pc, #188]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d34:	695b      	ldr	r3, [r3, #20]
    5d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d3a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d3c:	9b05      	ldr	r3, [sp, #20]
    5d3e:	2b80      	cmp	r3, #128	; 0x80
    5d40:	d006      	beq.n	5d50 <Power_Ip_SMC_ModeConfig+0xf8>
    5d42:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d46:	f083 0301 	eor.w	r3, r3, #1
    5d4a:	b2db      	uxtb	r3, r3
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d1e7      	bne.n	5d20 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5d50:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d54:	2b00      	cmp	r3, #0
    5d56:	d043      	beq.n	5de0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d58:	2301      	movs	r3, #1
    5d5a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d5c:	21ff      	movs	r1, #255	; 0xff
    5d5e:	2000      	movs	r0, #0
    5d60:	f7ff fe58 	bl	5a14 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d64:	e03c      	b.n	5de0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5d66:	4b22      	ldr	r3, [pc, #136]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d68:	68db      	ldr	r3, [r3, #12]
    5d6a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d6c:	9b06      	ldr	r3, [sp, #24]
    5d6e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d72:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5d74:	9b06      	ldr	r3, [sp, #24]
    5d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d7a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d7c:	4a1c      	ldr	r2, [pc, #112]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d7e:	9b06      	ldr	r3, [sp, #24]
    5d80:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d82:	aa02      	add	r2, sp, #8
    5d84:	a903      	add	r1, sp, #12
    5d86:	a804      	add	r0, sp, #16
    5d88:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d8c:	f7ff fe5e 	bl	5a4c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d90:	9a02      	ldr	r2, [sp, #8]
    5d92:	a903      	add	r1, sp, #12
    5d94:	ab04      	add	r3, sp, #16
    5d96:	4618      	mov	r0, r3
    5d98:	f7ff fe72 	bl	5a80 <Power_Ip_TimeoutExpired>
    5d9c:	4603      	mov	r3, r0
    5d9e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5da2:	4b13      	ldr	r3, [pc, #76]	; (5df0 <Power_Ip_SMC_ModeConfig+0x198>)
    5da4:	695b      	ldr	r3, [r3, #20]
    5da6:	f003 0304 	and.w	r3, r3, #4
    5daa:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dac:	9b05      	ldr	r3, [sp, #20]
    5dae:	2b04      	cmp	r3, #4
    5db0:	d006      	beq.n	5dc0 <Power_Ip_SMC_ModeConfig+0x168>
    5db2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5db6:	f083 0301 	eor.w	r3, r3, #1
    5dba:	b2db      	uxtb	r3, r3
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d1e7      	bne.n	5d90 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5dc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d00d      	beq.n	5de4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dc8:	2301      	movs	r3, #1
    5dca:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5dcc:	21ff      	movs	r1, #255	; 0xff
    5dce:	2000      	movs	r0, #0
    5dd0:	f7ff fe20 	bl	5a14 <Power_Ip_ReportPowerErrors>
            }

            break;
    5dd4:	e006      	b.n	5de4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dd6:	2301      	movs	r3, #1
    5dd8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5dda:	e004      	b.n	5de6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ddc:	bf00      	nop
    5dde:	e002      	b.n	5de6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5de0:	bf00      	nop
    5de2:	e000      	b.n	5de6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5de4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5de8:	4618      	mov	r0, r3
    5dea:	b00b      	add	sp, #44	; 0x2c
    5dec:	f85d fb04 	ldr.w	pc, [sp], #4
    5df0:	4007e000 	.word	0x4007e000

00005df4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5df4:	b500      	push	{lr}
    5df6:	b085      	sub	sp, #20
    5df8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5dfa:	9b01      	ldr	r3, [sp, #4]
    5dfc:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5dfe:	9803      	ldr	r0, [sp, #12]
    5e00:	f000 fbc8 	bl	6594 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e04:	4a03      	ldr	r2, [pc, #12]	; (5e14 <Port_Init+0x20>)
    5e06:	9b03      	ldr	r3, [sp, #12]
    5e08:	6013      	str	r3, [r2, #0]
        }
    }
}
    5e0a:	bf00      	nop
    5e0c:	b005      	add	sp, #20
    5e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    5e12:	bf00      	nop
    5e14:	1fff8ce4 	.word	0x1fff8ce4

00005e18 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5e18:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5e1a:	4b03      	ldr	r3, [pc, #12]	; (5e28 <Port_RefreshPortDirection+0x10>)
    5e1c:	681b      	ldr	r3, [r3, #0]
    5e1e:	4618      	mov	r0, r3
    5e20:	f000 fc10 	bl	6644 <Port_Ipw_RefreshPortDirection>
    }
}
    5e24:	bf00      	nop
    5e26:	bd08      	pop	{r3, pc}
    5e28:	1fff8ce4 	.word	0x1fff8ce4

00005e2c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5e2c:	b086      	sub	sp, #24
    5e2e:	9003      	str	r0, [sp, #12]
    5e30:	9102      	str	r1, [sp, #8]
    5e32:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5e34:	23ff      	movs	r3, #255	; 0xff
    5e36:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5e38:	9b03      	ldr	r3, [sp, #12]
    5e3a:	4a39      	ldr	r2, [pc, #228]	; (5f20 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5e3c:	4293      	cmp	r3, r2
    5e3e:	d151      	bne.n	5ee4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5e40:	9b02      	ldr	r3, [sp, #8]
    5e42:	2b10      	cmp	r3, #16
    5e44:	d867      	bhi.n	5f16 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5e46:	a201      	add	r2, pc, #4	; (adr r2, 5e4c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5e4c:	00005e91 	.word	0x00005e91
    5e50:	00005e9f 	.word	0x00005e9f
    5e54:	00005f17 	.word	0x00005f17
    5e58:	00005f17 	.word	0x00005f17
    5e5c:	00005f17 	.word	0x00005f17
    5e60:	00005f17 	.word	0x00005f17
    5e64:	00005f17 	.word	0x00005f17
    5e68:	00005f17 	.word	0x00005f17
    5e6c:	00005f17 	.word	0x00005f17
    5e70:	00005f17 	.word	0x00005f17
    5e74:	00005f17 	.word	0x00005f17
    5e78:	00005f17 	.word	0x00005f17
    5e7c:	00005f17 	.word	0x00005f17
    5e80:	00005ead 	.word	0x00005ead
    5e84:	00005ebb 	.word	0x00005ebb
    5e88:	00005ec9 	.word	0x00005ec9
    5e8c:	00005ed7 	.word	0x00005ed7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5e90:	2301      	movs	r3, #1
    5e92:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5e94:	9a05      	ldr	r2, [sp, #20]
    5e96:	9b01      	ldr	r3, [sp, #4]
    5e98:	4313      	orrs	r3, r2
    5e9a:	9305      	str	r3, [sp, #20]
                break;
    5e9c:	e03c      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5e9e:	2302      	movs	r3, #2
    5ea0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ea2:	9a05      	ldr	r2, [sp, #20]
    5ea4:	9b01      	ldr	r3, [sp, #4]
    5ea6:	4313      	orrs	r3, r2
    5ea8:	9305      	str	r3, [sp, #20]
                break;
    5eaa:	e035      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5eac:	2304      	movs	r3, #4
    5eae:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5eb0:	9a05      	ldr	r2, [sp, #20]
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	4313      	orrs	r3, r2
    5eb6:	9305      	str	r3, [sp, #20]
                break;
    5eb8:	e02e      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5eba:	2308      	movs	r3, #8
    5ebc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ebe:	9a05      	ldr	r2, [sp, #20]
    5ec0:	9b01      	ldr	r3, [sp, #4]
    5ec2:	4313      	orrs	r3, r2
    5ec4:	9305      	str	r3, [sp, #20]
                break;
    5ec6:	e027      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5ec8:	230e      	movs	r3, #14
    5eca:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5ecc:	9a05      	ldr	r2, [sp, #20]
    5ece:	9b01      	ldr	r3, [sp, #4]
    5ed0:	4013      	ands	r3, r2
    5ed2:	9305      	str	r3, [sp, #20]
                break;
    5ed4:	e020      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5ed6:	230d      	movs	r3, #13
    5ed8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5eda:	9a05      	ldr	r2, [sp, #20]
    5edc:	9b01      	ldr	r3, [sp, #4]
    5ede:	4013      	ands	r3, r2
    5ee0:	9305      	str	r3, [sp, #20]
                break;
    5ee2:	e019      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5ee4:	9b03      	ldr	r3, [sp, #12]
    5ee6:	4a0f      	ldr	r2, [pc, #60]	; (5f24 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5ee8:	4293      	cmp	r3, r2
    5eea:	d115      	bne.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5eec:	9b02      	ldr	r3, [sp, #8]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d003      	beq.n	5efa <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5ef2:	9b02      	ldr	r3, [sp, #8]
    5ef4:	2b01      	cmp	r3, #1
    5ef6:	d007      	beq.n	5f08 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5ef8:	e00e      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5efa:	230b      	movs	r3, #11
    5efc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5efe:	9a05      	ldr	r2, [sp, #20]
    5f00:	9b01      	ldr	r3, [sp, #4]
    5f02:	4013      	ands	r3, r2
    5f04:	9305      	str	r3, [sp, #20]
                break;
    5f06:	e007      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5f08:	2307      	movs	r3, #7
    5f0a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f0c:	9a05      	ldr	r2, [sp, #20]
    5f0e:	9b01      	ldr	r3, [sp, #4]
    5f10:	4013      	ands	r3, r2
    5f12:	9305      	str	r3, [sp, #20]
                break;
    5f14:	e000      	b.n	5f18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5f16:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5f18:	9b05      	ldr	r3, [sp, #20]
}
    5f1a:	4618      	mov	r0, r3
    5f1c:	b006      	add	sp, #24
    5f1e:	4770      	bx	lr
    5f20:	4004a000 	.word	0x4004a000
    5f24:	4004b000 	.word	0x4004b000

00005f28 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5f28:	b500      	push	{lr}
    5f2a:	b089      	sub	sp, #36	; 0x24
    5f2c:	9003      	str	r0, [sp, #12]
    5f2e:	9102      	str	r1, [sp, #8]
    5f30:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5f32:	9b01      	ldr	r3, [sp, #4]
    5f34:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5f36:	9b01      	ldr	r3, [sp, #4]
    5f38:	2b08      	cmp	r3, #8
    5f3a:	d121      	bne.n	5f80 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5f3c:	4b13      	ldr	r3, [pc, #76]	; (5f8c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f3e:	685b      	ldr	r3, [r3, #4]
    5f40:	f003 030f 	and.w	r3, r3, #15
    5f44:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5f46:	9a06      	ldr	r2, [sp, #24]
    5f48:	9902      	ldr	r1, [sp, #8]
    5f4a:	9803      	ldr	r0, [sp, #12]
    5f4c:	f7ff ff6e 	bl	5e2c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5f50:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5f52:	9b05      	ldr	r3, [sp, #20]
    5f54:	2bff      	cmp	r3, #255	; 0xff
    5f56:	d011      	beq.n	5f7c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5f58:	f009 f870 	bl	f03c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5f5c:	4b0b      	ldr	r3, [pc, #44]	; (5f8c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f5e:	685b      	ldr	r3, [r3, #4]
    5f60:	4a0a      	ldr	r2, [pc, #40]	; (5f8c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f62:	f023 030f 	bic.w	r3, r3, #15
    5f66:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5f68:	4b08      	ldr	r3, [pc, #32]	; (5f8c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f6a:	685a      	ldr	r2, [r3, #4]
    5f6c:	9b05      	ldr	r3, [sp, #20]
    5f6e:	f003 030f 	and.w	r3, r3, #15
    5f72:	4906      	ldr	r1, [pc, #24]	; (5f8c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f74:	4313      	orrs	r3, r2
    5f76:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5f78:	f009 f88c 	bl	f094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5f7c:	2300      	movs	r3, #0
    5f7e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5f80:	9b07      	ldr	r3, [sp, #28]
}
    5f82:	4618      	mov	r0, r3
    5f84:	b009      	add	sp, #36	; 0x24
    5f86:	f85d fb04 	ldr.w	pc, [sp], #4
    5f8a:	bf00      	nop
    5f8c:	40048000 	.word	0x40048000

00005f90 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5f90:	b500      	push	{lr}
    5f92:	b087      	sub	sp, #28
    5f94:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5f96:	2300      	movs	r3, #0
    5f98:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5f9a:	2300      	movs	r3, #0
    5f9c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5f9e:	2300      	movs	r3, #0
    5fa0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5fa2:	9b01      	ldr	r3, [sp, #4]
    5fa4:	68db      	ldr	r3, [r3, #12]
    5fa6:	2b02      	cmp	r3, #2
    5fa8:	d00a      	beq.n	5fc0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5faa:	9b05      	ldr	r3, [sp, #20]
    5fac:	f043 0302 	orr.w	r3, r3, #2
    5fb0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	68db      	ldr	r3, [r3, #12]
    5fb6:	f003 0301 	and.w	r3, r3, #1
    5fba:	9a05      	ldr	r2, [sp, #20]
    5fbc:	4313      	orrs	r3, r2
    5fbe:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	699b      	ldr	r3, [r3, #24]
    5fc4:	019b      	lsls	r3, r3, #6
    5fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fca:	9a05      	ldr	r2, [sp, #20]
    5fcc:	4313      	orrs	r3, r2
    5fce:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5fd0:	9b01      	ldr	r3, [sp, #4]
    5fd2:	6a1b      	ldr	r3, [r3, #32]
    5fd4:	03db      	lsls	r3, r3, #15
    5fd6:	b29b      	uxth	r3, r3
    5fd8:	9a05      	ldr	r2, [sp, #20]
    5fda:	4313      	orrs	r3, r2
    5fdc:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	7f1b      	ldrb	r3, [r3, #28]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d001      	beq.n	5fea <Port_Ci_Port_Ip_PinInit+0x5a>
    5fe6:	2310      	movs	r3, #16
    5fe8:	e000      	b.n	5fec <Port_Ci_Port_Ip_PinInit+0x5c>
    5fea:	2300      	movs	r3, #0
    5fec:	9a05      	ldr	r2, [sp, #20]
    5fee:	4313      	orrs	r3, r2
    5ff0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	691b      	ldr	r3, [r3, #16]
    5ff6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5ff8:	9b01      	ldr	r3, [sp, #4]
    5ffa:	6818      	ldr	r0, [r3, #0]
    5ffc:	9b01      	ldr	r3, [sp, #4]
    5ffe:	689b      	ldr	r3, [r3, #8]
    6000:	9a04      	ldr	r2, [sp, #16]
    6002:	4619      	mov	r1, r3
    6004:	f7ff ff90 	bl	5f28 <Port_Ci_Port_Ip_ConfigureInterleave>
    6008:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    600a:	9b03      	ldr	r3, [sp, #12]
    600c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    600e:	9b04      	ldr	r3, [sp, #16]
    6010:	021b      	lsls	r3, r3, #8
    6012:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6016:	9a05      	ldr	r2, [sp, #20]
    6018:	4313      	orrs	r3, r2
    601a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    601c:	f008 fe74 	bl	ed08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6020:	9b01      	ldr	r3, [sp, #4]
    6022:	681b      	ldr	r3, [r3, #0]
    6024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6028:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	689b      	ldr	r3, [r3, #8]
    602e:	2201      	movs	r2, #1
    6030:	fa02 f303 	lsl.w	r3, r2, r3
    6034:	43db      	mvns	r3, r3
    6036:	9a02      	ldr	r2, [sp, #8]
    6038:	4013      	ands	r3, r2
    603a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    603c:	9b01      	ldr	r3, [sp, #4]
    603e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6042:	2b00      	cmp	r3, #0
    6044:	d001      	beq.n	604a <Port_Ci_Port_Ip_PinInit+0xba>
    6046:	2201      	movs	r2, #1
    6048:	e000      	b.n	604c <Port_Ci_Port_Ip_PinInit+0xbc>
    604a:	2200      	movs	r2, #0
    604c:	9b01      	ldr	r3, [sp, #4]
    604e:	689b      	ldr	r3, [r3, #8]
    6050:	fa02 f303 	lsl.w	r3, r2, r3
    6054:	9a02      	ldr	r2, [sp, #8]
    6056:	4313      	orrs	r3, r2
    6058:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    605a:	9b01      	ldr	r3, [sp, #4]
    605c:	681b      	ldr	r3, [r3, #0]
    605e:	9a02      	ldr	r2, [sp, #8]
    6060:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6064:	f008 fe7c 	bl	ed60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6068:	9b04      	ldr	r3, [sp, #16]
    606a:	2b01      	cmp	r3, #1
    606c:	d16d      	bne.n	614a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    606e:	9b01      	ldr	r3, [sp, #4]
    6070:	695b      	ldr	r3, [r3, #20]
    6072:	2b02      	cmp	r3, #2
    6074:	d138      	bne.n	60e8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6076:	9b01      	ldr	r3, [sp, #4]
    6078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    607c:	2b01      	cmp	r3, #1
    607e:	d10f      	bne.n	60a0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6080:	f008 fe94 	bl	edac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6084:	9b01      	ldr	r3, [sp, #4]
    6086:	685b      	ldr	r3, [r3, #4]
    6088:	6859      	ldr	r1, [r3, #4]
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	689b      	ldr	r3, [r3, #8]
    608e:	2201      	movs	r2, #1
    6090:	409a      	lsls	r2, r3
    6092:	9b01      	ldr	r3, [sp, #4]
    6094:	685b      	ldr	r3, [r3, #4]
    6096:	430a      	orrs	r2, r1
    6098:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    609a:	f008 feb3 	bl	ee04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    609e:	e013      	b.n	60c8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    60a0:	9b01      	ldr	r3, [sp, #4]
    60a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60a6:	2b00      	cmp	r3, #0
    60a8:	d10e      	bne.n	60c8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    60aa:	f008 fed1 	bl	ee50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    60ae:	9b01      	ldr	r3, [sp, #4]
    60b0:	685b      	ldr	r3, [r3, #4]
    60b2:	6899      	ldr	r1, [r3, #8]
    60b4:	9b01      	ldr	r3, [sp, #4]
    60b6:	689b      	ldr	r3, [r3, #8]
    60b8:	2201      	movs	r2, #1
    60ba:	409a      	lsls	r2, r3
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	685b      	ldr	r3, [r3, #4]
    60c0:	430a      	orrs	r2, r1
    60c2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    60c4:	f008 fef0 	bl	eea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    60c8:	f008 ff14 	bl	eef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    60cc:	9b01      	ldr	r3, [sp, #4]
    60ce:	685b      	ldr	r3, [r3, #4]
    60d0:	6959      	ldr	r1, [r3, #20]
    60d2:	9b01      	ldr	r3, [sp, #4]
    60d4:	689b      	ldr	r3, [r3, #8]
    60d6:	2201      	movs	r2, #1
    60d8:	409a      	lsls	r2, r3
    60da:	9b01      	ldr	r3, [sp, #4]
    60dc:	685b      	ldr	r3, [r3, #4]
    60de:	430a      	orrs	r2, r1
    60e0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    60e2:	f008 ff33 	bl	ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    60e6:	e030      	b.n	614a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    60e8:	f008 ff04 	bl	eef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    60ec:	9b01      	ldr	r3, [sp, #4]
    60ee:	685b      	ldr	r3, [r3, #4]
    60f0:	6959      	ldr	r1, [r3, #20]
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	689b      	ldr	r3, [r3, #8]
    60f6:	2201      	movs	r2, #1
    60f8:	fa02 f303 	lsl.w	r3, r2, r3
    60fc:	43da      	mvns	r2, r3
    60fe:	9b01      	ldr	r3, [sp, #4]
    6100:	685b      	ldr	r3, [r3, #4]
    6102:	400a      	ands	r2, r1
    6104:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6106:	f008 ff21 	bl	ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    610a:	f008 ff45 	bl	ef98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    610e:	9b01      	ldr	r3, [sp, #4]
    6110:	685b      	ldr	r3, [r3, #4]
    6112:	6999      	ldr	r1, [r3, #24]
    6114:	9b01      	ldr	r3, [sp, #4]
    6116:	689b      	ldr	r3, [r3, #8]
    6118:	2201      	movs	r2, #1
    611a:	fa02 f303 	lsl.w	r3, r2, r3
    611e:	43da      	mvns	r2, r3
    6120:	9b01      	ldr	r3, [sp, #4]
    6122:	685b      	ldr	r3, [r3, #4]
    6124:	400a      	ands	r2, r1
    6126:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6128:	9b01      	ldr	r3, [sp, #4]
    612a:	695b      	ldr	r3, [r3, #20]
    612c:	2b03      	cmp	r3, #3
    612e:	d10a      	bne.n	6146 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6130:	9b01      	ldr	r3, [sp, #4]
    6132:	685b      	ldr	r3, [r3, #4]
    6134:	6999      	ldr	r1, [r3, #24]
    6136:	9b01      	ldr	r3, [sp, #4]
    6138:	689b      	ldr	r3, [r3, #8]
    613a:	2201      	movs	r2, #1
    613c:	409a      	lsls	r2, r3
    613e:	9b01      	ldr	r3, [sp, #4]
    6140:	685b      	ldr	r3, [r3, #4]
    6142:	430a      	orrs	r2, r1
    6144:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6146:	f008 ff53 	bl	eff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	9a01      	ldr	r2, [sp, #4]
    6150:	6892      	ldr	r2, [r2, #8]
    6152:	9905      	ldr	r1, [sp, #20]
    6154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6158:	bf00      	nop
    615a:	b007      	add	sp, #28
    615c:	f85d fb04 	ldr.w	pc, [sp], #4

00006160 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6160:	b500      	push	{lr}
    6162:	b085      	sub	sp, #20
    6164:	9001      	str	r0, [sp, #4]
    6166:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6168:	2300      	movs	r3, #0
    616a:	9303      	str	r3, [sp, #12]
    616c:	e00d      	b.n	618a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    616e:	9a03      	ldr	r2, [sp, #12]
    6170:	4613      	mov	r3, r2
    6172:	009b      	lsls	r3, r3, #2
    6174:	4413      	add	r3, r2
    6176:	00db      	lsls	r3, r3, #3
    6178:	461a      	mov	r2, r3
    617a:	9b00      	ldr	r3, [sp, #0]
    617c:	4413      	add	r3, r2
    617e:	4618      	mov	r0, r3
    6180:	f7ff ff06 	bl	5f90 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6184:	9b03      	ldr	r3, [sp, #12]
    6186:	3301      	adds	r3, #1
    6188:	9303      	str	r3, [sp, #12]
    618a:	9a03      	ldr	r2, [sp, #12]
    618c:	9b01      	ldr	r3, [sp, #4]
    618e:	429a      	cmp	r2, r3
    6190:	d3ed      	bcc.n	616e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6192:	2300      	movs	r3, #0
}
    6194:	4618      	mov	r0, r3
    6196:	b005      	add	sp, #20
    6198:	f85d fb04 	ldr.w	pc, [sp], #4

0000619c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    619c:	b500      	push	{lr}
    619e:	b087      	sub	sp, #28
    61a0:	9003      	str	r0, [sp, #12]
    61a2:	9102      	str	r1, [sp, #8]
    61a4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    61a6:	9a01      	ldr	r2, [sp, #4]
    61a8:	9902      	ldr	r1, [sp, #8]
    61aa:	9803      	ldr	r0, [sp, #12]
    61ac:	f7ff febc 	bl	5f28 <Port_Ci_Port_Ip_ConfigureInterleave>
    61b0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    61b2:	f008 ff95 	bl	f0e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    61b6:	9b03      	ldr	r3, [sp, #12]
    61b8:	9a02      	ldr	r2, [sp, #8]
    61ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61be:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    61c0:	9b04      	ldr	r3, [sp, #16]
    61c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    61c6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    61c8:	9b05      	ldr	r3, [sp, #20]
    61ca:	021b      	lsls	r3, r3, #8
    61cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    61d0:	9a04      	ldr	r2, [sp, #16]
    61d2:	4313      	orrs	r3, r2
    61d4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    61d6:	9b03      	ldr	r3, [sp, #12]
    61d8:	9a02      	ldr	r2, [sp, #8]
    61da:	9904      	ldr	r1, [sp, #16]
    61dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    61e0:	f008 ffaa 	bl	f138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    61e4:	bf00      	nop
    61e6:	b007      	add	sp, #28
    61e8:	f85d fb04 	ldr.w	pc, [sp], #4

000061ec <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    61ec:	b500      	push	{lr}
    61ee:	b083      	sub	sp, #12
    61f0:	9001      	str	r0, [sp, #4]
    61f2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    61f4:	f008 ffc6 	bl	f184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    61f8:	9b01      	ldr	r3, [sp, #4]
    61fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    61fe:	2101      	movs	r1, #1
    6200:	9b00      	ldr	r3, [sp, #0]
    6202:	fa01 f303 	lsl.w	r3, r1, r3
    6206:	431a      	orrs	r2, r3
    6208:	9b01      	ldr	r3, [sp, #4]
    620a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    620e:	f008 ffe5 	bl	f1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6212:	bf00      	nop
    6214:	b003      	add	sp, #12
    6216:	f85d fb04 	ldr.w	pc, [sp], #4

0000621a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    621a:	b500      	push	{lr}
    621c:	b083      	sub	sp, #12
    621e:	9001      	str	r0, [sp, #4]
    6220:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6222:	f009 f801 	bl	f228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6226:	9b01      	ldr	r3, [sp, #4]
    6228:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    622c:	2101      	movs	r1, #1
    622e:	9b00      	ldr	r3, [sp, #0]
    6230:	fa01 f303 	lsl.w	r3, r1, r3
    6234:	43db      	mvns	r3, r3
    6236:	401a      	ands	r2, r3
    6238:	9b01      	ldr	r3, [sp, #4]
    623a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    623e:	f009 f81f 	bl	f280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6242:	bf00      	nop
    6244:	b003      	add	sp, #12
    6246:	f85d fb04 	ldr.w	pc, [sp], #4

0000624a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    624a:	b082      	sub	sp, #8
    624c:	9001      	str	r0, [sp, #4]
    624e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6250:	9b00      	ldr	r3, [sp, #0]
    6252:	785b      	ldrb	r3, [r3, #1]
    6254:	f003 0201 	and.w	r2, r3, #1
    6258:	9b01      	ldr	r3, [sp, #4]
    625a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    625e:	9b00      	ldr	r3, [sp, #0]
    6260:	789b      	ldrb	r3, [r3, #2]
    6262:	f003 021f 	and.w	r2, r3, #31
    6266:	9b01      	ldr	r3, [sp, #4]
    6268:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    626c:	bf00      	nop
    626e:	b002      	add	sp, #8
    6270:	4770      	bx	lr

00006272 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6272:	b086      	sub	sp, #24
    6274:	9003      	str	r0, [sp, #12]
    6276:	9301      	str	r3, [sp, #4]
    6278:	460b      	mov	r3, r1
    627a:	f8ad 300a 	strh.w	r3, [sp, #10]
    627e:	4613      	mov	r3, r2
    6280:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6284:	2300      	movs	r3, #0
    6286:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    628a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    628e:	f043 0301 	orr.w	r3, r3, #1
    6292:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6296:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    629a:	f043 0302 	orr.w	r3, r3, #2
    629e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    62a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62a6:	f043 0310 	orr.w	r3, r3, #16
    62aa:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    62ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62b6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    62ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    62c2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    62c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    62ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    62d2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    62d6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    62da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    62de:	4013      	ands	r3, r2
    62e0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    62e4:	9b01      	ldr	r3, [sp, #4]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d003      	beq.n	62f2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    62ea:	9b01      	ldr	r3, [sp, #4]
    62ec:	2b01      	cmp	r3, #1
    62ee:	d00a      	beq.n	6306 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    62f0:	e013      	b.n	631a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    62f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    62f6:	041a      	lsls	r2, r3, #16
    62f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62fc:	431a      	orrs	r2, r3
    62fe:	9b03      	ldr	r3, [sp, #12]
    6300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6304:	e009      	b.n	631a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6306:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    630a:	041a      	lsls	r2, r3, #16
    630c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6310:	431a      	orrs	r2, r3
    6312:	9b03      	ldr	r3, [sp, #12]
    6314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6318:	bf00      	nop
    }
}
    631a:	bf00      	nop
    631c:	b006      	add	sp, #24
    631e:	4770      	bx	lr

00006320 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6320:	b500      	push	{lr}
    6322:	b087      	sub	sp, #28
    6324:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	885b      	ldrh	r3, [r3, #2]
    632a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    632e:	9b01      	ldr	r3, [sp, #4]
    6330:	689b      	ldr	r3, [r3, #8]
    6332:	7a1b      	ldrb	r3, [r3, #8]
    6334:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	689b      	ldr	r3, [r3, #8]
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6340:	9b01      	ldr	r3, [sp, #4]
    6342:	689b      	ldr	r3, [r3, #8]
    6344:	685b      	ldr	r3, [r3, #4]
    6346:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6348:	2300      	movs	r3, #0
    634a:	f8ad 3016 	strh.w	r3, [sp, #22]
    634e:	e111      	b.n	6574 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6350:	9b02      	ldr	r3, [sp, #8]
    6352:	2b02      	cmp	r3, #2
    6354:	d169      	bne.n	642a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6356:	f89d 3013 	ldrb.w	r3, [sp, #19]
    635a:	2b01      	cmp	r3, #1
    635c:	d11a      	bne.n	6394 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    635e:	9b01      	ldr	r3, [sp, #4]
    6360:	685a      	ldr	r2, [r3, #4]
    6362:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6366:	005b      	lsls	r3, r3, #1
    6368:	4413      	add	r3, r2
    636a:	881b      	ldrh	r3, [r3, #0]
    636c:	f003 021f 	and.w	r2, r3, #31
    6370:	9b01      	ldr	r3, [sp, #4]
    6372:	6859      	ldr	r1, [r3, #4]
    6374:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6378:	005b      	lsls	r3, r3, #1
    637a:	440b      	add	r3, r1
    637c:	881b      	ldrh	r3, [r3, #0]
    637e:	095b      	lsrs	r3, r3, #5
    6380:	b29b      	uxth	r3, r3
    6382:	4619      	mov	r1, r3
    6384:	4b81      	ldr	r3, [pc, #516]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    6386:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    638a:	2101      	movs	r1, #1
    638c:	fa01 f202 	lsl.w	r2, r1, r2
    6390:	605a      	str	r2, [r3, #4]
    6392:	e01d      	b.n	63d0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6394:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6398:	2b00      	cmp	r3, #0
    639a:	d119      	bne.n	63d0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    639c:	9b01      	ldr	r3, [sp, #4]
    639e:	685a      	ldr	r2, [r3, #4]
    63a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63a4:	005b      	lsls	r3, r3, #1
    63a6:	4413      	add	r3, r2
    63a8:	881b      	ldrh	r3, [r3, #0]
    63aa:	f003 021f 	and.w	r2, r3, #31
    63ae:	9b01      	ldr	r3, [sp, #4]
    63b0:	6859      	ldr	r1, [r3, #4]
    63b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b6:	005b      	lsls	r3, r3, #1
    63b8:	440b      	add	r3, r1
    63ba:	881b      	ldrh	r3, [r3, #0]
    63bc:	095b      	lsrs	r3, r3, #5
    63be:	b29b      	uxth	r3, r3
    63c0:	4619      	mov	r1, r3
    63c2:	4b72      	ldr	r3, [pc, #456]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    63c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63c8:	2101      	movs	r1, #1
    63ca:	fa01 f202 	lsl.w	r2, r1, r2
    63ce:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    63d0:	f008 ff7c 	bl	f2cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63d4:	9b01      	ldr	r3, [sp, #4]
    63d6:	685a      	ldr	r2, [r3, #4]
    63d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63dc:	005b      	lsls	r3, r3, #1
    63de:	4413      	add	r3, r2
    63e0:	881b      	ldrh	r3, [r3, #0]
    63e2:	095b      	lsrs	r3, r3, #5
    63e4:	b29b      	uxth	r3, r3
    63e6:	461a      	mov	r2, r3
    63e8:	4b68      	ldr	r3, [pc, #416]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    63ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63ee:	6959      	ldr	r1, [r3, #20]
    63f0:	9b01      	ldr	r3, [sp, #4]
    63f2:	685a      	ldr	r2, [r3, #4]
    63f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63f8:	005b      	lsls	r3, r3, #1
    63fa:	4413      	add	r3, r2
    63fc:	881b      	ldrh	r3, [r3, #0]
    63fe:	f003 031f 	and.w	r3, r3, #31
    6402:	2201      	movs	r2, #1
    6404:	409a      	lsls	r2, r3
    6406:	9b01      	ldr	r3, [sp, #4]
    6408:	6858      	ldr	r0, [r3, #4]
    640a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    640e:	005b      	lsls	r3, r3, #1
    6410:	4403      	add	r3, r0
    6412:	881b      	ldrh	r3, [r3, #0]
    6414:	095b      	lsrs	r3, r3, #5
    6416:	b29b      	uxth	r3, r3
    6418:	4618      	mov	r0, r3
    641a:	4b5c      	ldr	r3, [pc, #368]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    641c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6420:	430a      	orrs	r2, r1
    6422:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6424:	f008 ff7e 	bl	f324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6428:	e086      	b.n	6538 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    642a:	f008 ff4f 	bl	f2cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    642e:	9b01      	ldr	r3, [sp, #4]
    6430:	685a      	ldr	r2, [r3, #4]
    6432:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6436:	005b      	lsls	r3, r3, #1
    6438:	4413      	add	r3, r2
    643a:	881b      	ldrh	r3, [r3, #0]
    643c:	095b      	lsrs	r3, r3, #5
    643e:	b29b      	uxth	r3, r3
    6440:	461a      	mov	r2, r3
    6442:	4b52      	ldr	r3, [pc, #328]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    6444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6448:	6959      	ldr	r1, [r3, #20]
    644a:	9b01      	ldr	r3, [sp, #4]
    644c:	685a      	ldr	r2, [r3, #4]
    644e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6452:	005b      	lsls	r3, r3, #1
    6454:	4413      	add	r3, r2
    6456:	881b      	ldrh	r3, [r3, #0]
    6458:	f003 031f 	and.w	r3, r3, #31
    645c:	2201      	movs	r2, #1
    645e:	fa02 f303 	lsl.w	r3, r2, r3
    6462:	43da      	mvns	r2, r3
    6464:	9b01      	ldr	r3, [sp, #4]
    6466:	6858      	ldr	r0, [r3, #4]
    6468:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    646c:	005b      	lsls	r3, r3, #1
    646e:	4403      	add	r3, r0
    6470:	881b      	ldrh	r3, [r3, #0]
    6472:	095b      	lsrs	r3, r3, #5
    6474:	b29b      	uxth	r3, r3
    6476:	4618      	mov	r0, r3
    6478:	4b44      	ldr	r3, [pc, #272]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    647a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    647e:	400a      	ands	r2, r1
    6480:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6482:	f008 ff4f 	bl	f324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6486:	f008 ff73 	bl	f370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    648a:	9b01      	ldr	r3, [sp, #4]
    648c:	685a      	ldr	r2, [r3, #4]
    648e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6492:	005b      	lsls	r3, r3, #1
    6494:	4413      	add	r3, r2
    6496:	881b      	ldrh	r3, [r3, #0]
    6498:	095b      	lsrs	r3, r3, #5
    649a:	b29b      	uxth	r3, r3
    649c:	461a      	mov	r2, r3
    649e:	4b3b      	ldr	r3, [pc, #236]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    64a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64a4:	6999      	ldr	r1, [r3, #24]
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	685a      	ldr	r2, [r3, #4]
    64aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ae:	005b      	lsls	r3, r3, #1
    64b0:	4413      	add	r3, r2
    64b2:	881b      	ldrh	r3, [r3, #0]
    64b4:	f003 031f 	and.w	r3, r3, #31
    64b8:	2201      	movs	r2, #1
    64ba:	fa02 f303 	lsl.w	r3, r2, r3
    64be:	43da      	mvns	r2, r3
    64c0:	9b01      	ldr	r3, [sp, #4]
    64c2:	6858      	ldr	r0, [r3, #4]
    64c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64c8:	005b      	lsls	r3, r3, #1
    64ca:	4403      	add	r3, r0
    64cc:	881b      	ldrh	r3, [r3, #0]
    64ce:	095b      	lsrs	r3, r3, #5
    64d0:	b29b      	uxth	r3, r3
    64d2:	4618      	mov	r0, r3
    64d4:	4b2d      	ldr	r3, [pc, #180]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    64d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64da:	400a      	ands	r2, r1
    64dc:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    64de:	9b02      	ldr	r3, [sp, #8]
    64e0:	2b03      	cmp	r3, #3
    64e2:	d127      	bne.n	6534 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64e4:	9b01      	ldr	r3, [sp, #4]
    64e6:	685a      	ldr	r2, [r3, #4]
    64e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ec:	005b      	lsls	r3, r3, #1
    64ee:	4413      	add	r3, r2
    64f0:	881b      	ldrh	r3, [r3, #0]
    64f2:	095b      	lsrs	r3, r3, #5
    64f4:	b29b      	uxth	r3, r3
    64f6:	461a      	mov	r2, r3
    64f8:	4b24      	ldr	r3, [pc, #144]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    64fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64fe:	6999      	ldr	r1, [r3, #24]
    6500:	9b01      	ldr	r3, [sp, #4]
    6502:	685a      	ldr	r2, [r3, #4]
    6504:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6508:	005b      	lsls	r3, r3, #1
    650a:	4413      	add	r3, r2
    650c:	881b      	ldrh	r3, [r3, #0]
    650e:	f003 031f 	and.w	r3, r3, #31
    6512:	2201      	movs	r2, #1
    6514:	409a      	lsls	r2, r3
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	6858      	ldr	r0, [r3, #4]
    651a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    651e:	005b      	lsls	r3, r3, #1
    6520:	4403      	add	r3, r0
    6522:	881b      	ldrh	r3, [r3, #0]
    6524:	095b      	lsrs	r3, r3, #5
    6526:	b29b      	uxth	r3, r3
    6528:	4618      	mov	r0, r3
    652a:	4b18      	ldr	r3, [pc, #96]	; (658c <Port_Ipw_Init_UnusedPins+0x26c>)
    652c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6530:	430a      	orrs	r2, r1
    6532:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6534:	f008 ff48 	bl	f3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6538:	9b01      	ldr	r3, [sp, #4]
    653a:	685a      	ldr	r2, [r3, #4]
    653c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6540:	005b      	lsls	r3, r3, #1
    6542:	4413      	add	r3, r2
    6544:	881b      	ldrh	r3, [r3, #0]
    6546:	095b      	lsrs	r3, r3, #5
    6548:	b29b      	uxth	r3, r3
    654a:	461a      	mov	r2, r3
    654c:	4b10      	ldr	r3, [pc, #64]	; (6590 <Port_Ipw_Init_UnusedPins+0x270>)
    654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6552:	9a01      	ldr	r2, [sp, #4]
    6554:	6851      	ldr	r1, [r2, #4]
    6556:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    655a:	0052      	lsls	r2, r2, #1
    655c:	440a      	add	r2, r1
    655e:	8812      	ldrh	r2, [r2, #0]
    6560:	f002 021f 	and.w	r2, r2, #31
    6564:	9903      	ldr	r1, [sp, #12]
    6566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    656a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    656e:	3301      	adds	r3, #1
    6570:	f8ad 3016 	strh.w	r3, [sp, #22]
    6574:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6578:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    657c:	429a      	cmp	r2, r3
    657e:	f4ff aee7 	bcc.w	6350 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6582:	bf00      	nop
    6584:	bf00      	nop
    6586:	b007      	add	sp, #28
    6588:	f85d fb04 	ldr.w	pc, [sp], #4
    658c:	00010824 	.word	0x00010824
    6590:	00010810 	.word	0x00010810

00006594 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6594:	b500      	push	{lr}
    6596:	b085      	sub	sp, #20
    6598:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	7c1b      	ldrb	r3, [r3, #16]
    659e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    65a2:	2300      	movs	r3, #0
    65a4:	f8ad 300e 	strh.w	r3, [sp, #14]
    65a8:	e035      	b.n	6616 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	695a      	ldr	r2, [r3, #20]
    65ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65b2:	00db      	lsls	r3, r3, #3
    65b4:	4413      	add	r3, r2
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    65bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65c0:	4a1f      	ldr	r2, [pc, #124]	; (6640 <Port_Ipw_Init+0xac>)
    65c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	695a      	ldr	r2, [r3, #20]
    65ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65ce:	00db      	lsls	r3, r3, #3
    65d0:	4413      	add	r3, r2
    65d2:	4619      	mov	r1, r3
    65d4:	f7ff fe39 	bl	624a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    65d8:	f009 f864 	bl	f6a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    65dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65e0:	4a17      	ldr	r2, [pc, #92]	; (6640 <Port_Ipw_Init+0xac>)
    65e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65e6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    65ea:	9b01      	ldr	r3, [sp, #4]
    65ec:	695a      	ldr	r2, [r3, #20]
    65ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    65f2:	00db      	lsls	r3, r3, #3
    65f4:	4413      	add	r3, r2
    65f6:	685a      	ldr	r2, [r3, #4]
    65f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    65fc:	4810      	ldr	r0, [pc, #64]	; (6640 <Port_Ipw_Init+0xac>)
    65fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6602:	430a      	orrs	r2, r1
    6604:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6608:	f009 f878 	bl	f6fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    660c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6610:	3301      	adds	r3, #1
    6612:	f8ad 300e 	strh.w	r3, [sp, #14]
    6616:	f89d 300d 	ldrb.w	r3, [sp, #13]
    661a:	b29b      	uxth	r3, r3
    661c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6620:	429a      	cmp	r2, r3
    6622:	d3c2      	bcc.n	65aa <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6624:	9b01      	ldr	r3, [sp, #4]
    6626:	6a1b      	ldr	r3, [r3, #32]
    6628:	4619      	mov	r1, r3
    662a:	2001      	movs	r0, #1
    662c:	f7ff fd98 	bl	6160 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6630:	9801      	ldr	r0, [sp, #4]
    6632:	f7ff fe75 	bl	6320 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6636:	bf00      	nop
    6638:	b005      	add	sp, #20
    663a:	f85d fb04 	ldr.w	pc, [sp], #4
    663e:	bf00      	nop
    6640:	00010810 	.word	0x00010810

00006644 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6644:	b500      	push	{lr}
    6646:	b085      	sub	sp, #20
    6648:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    664a:	9b01      	ldr	r3, [sp, #4]
    664c:	881b      	ldrh	r3, [r3, #0]
    664e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6652:	2300      	movs	r3, #0
    6654:	f8ad 300e 	strh.w	r3, [sp, #14]
    6658:	e0d2      	b.n	6800 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	68d9      	ldr	r1, [r3, #12]
    665e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6662:	4613      	mov	r3, r2
    6664:	009b      	lsls	r3, r3, #2
    6666:	4413      	add	r3, r2
    6668:	009b      	lsls	r3, r3, #2
    666a:	440b      	add	r3, r1
    666c:	7c5b      	ldrb	r3, [r3, #17]
    666e:	f083 0301 	eor.w	r3, r3, #1
    6672:	b2db      	uxtb	r3, r3
    6674:	2b00      	cmp	r3, #0
    6676:	f000 80be 	beq.w	67f6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	68d9      	ldr	r1, [r3, #12]
    667e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6682:	4613      	mov	r3, r2
    6684:	009b      	lsls	r3, r3, #2
    6686:	4413      	add	r3, r2
    6688:	009b      	lsls	r3, r3, #2
    668a:	440b      	add	r3, r1
    668c:	7c1b      	ldrb	r3, [r3, #16]
    668e:	2b00      	cmp	r3, #0
    6690:	f000 80b1 	beq.w	67f6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6694:	9b01      	ldr	r3, [sp, #4]
    6696:	68d9      	ldr	r1, [r3, #12]
    6698:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    669c:	4613      	mov	r3, r2
    669e:	009b      	lsls	r3, r3, #2
    66a0:	4413      	add	r3, r2
    66a2:	009b      	lsls	r3, r3, #2
    66a4:	440b      	add	r3, r1
    66a6:	881b      	ldrh	r3, [r3, #0]
    66a8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    66ac:	9b01      	ldr	r3, [sp, #4]
    66ae:	68d9      	ldr	r1, [r3, #12]
    66b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66b4:	4613      	mov	r3, r2
    66b6:	009b      	lsls	r3, r3, #2
    66b8:	4413      	add	r3, r2
    66ba:	009b      	lsls	r3, r3, #2
    66bc:	440b      	add	r3, r1
    66be:	68db      	ldr	r3, [r3, #12]
    66c0:	2b02      	cmp	r3, #2
    66c2:	d11d      	bne.n	6700 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    66c4:	f009 f936 	bl	f934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    66c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66cc:	095b      	lsrs	r3, r3, #5
    66ce:	b29b      	uxth	r3, r3
    66d0:	461a      	mov	r2, r3
    66d2:	4b51      	ldr	r3, [pc, #324]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    66d8:	6959      	ldr	r1, [r3, #20]
    66da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66de:	f003 031f 	and.w	r3, r3, #31
    66e2:	2201      	movs	r2, #1
    66e4:	409a      	lsls	r2, r3
    66e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    66ea:	095b      	lsrs	r3, r3, #5
    66ec:	b29b      	uxth	r3, r3
    66ee:	4618      	mov	r0, r3
    66f0:	4b49      	ldr	r3, [pc, #292]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    66f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    66f6:	430a      	orrs	r2, r1
    66f8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    66fa:	f009 f947 	bl	f98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    66fe:	e07a      	b.n	67f6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6700:	9b01      	ldr	r3, [sp, #4]
    6702:	68d9      	ldr	r1, [r3, #12]
    6704:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6708:	4613      	mov	r3, r2
    670a:	009b      	lsls	r3, r3, #2
    670c:	4413      	add	r3, r2
    670e:	009b      	lsls	r3, r3, #2
    6710:	440b      	add	r3, r1
    6712:	68db      	ldr	r3, [r3, #12]
    6714:	2b01      	cmp	r3, #1
    6716:	d00b      	beq.n	6730 <Port_Ipw_RefreshPortDirection+0xec>
    6718:	9b01      	ldr	r3, [sp, #4]
    671a:	68d9      	ldr	r1, [r3, #12]
    671c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6720:	4613      	mov	r3, r2
    6722:	009b      	lsls	r3, r3, #2
    6724:	4413      	add	r3, r2
    6726:	009b      	lsls	r3, r3, #2
    6728:	440b      	add	r3, r1
    672a:	68db      	ldr	r3, [r3, #12]
    672c:	2b03      	cmp	r3, #3
    672e:	d162      	bne.n	67f6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6730:	f009 f900 	bl	f934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6734:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6738:	095b      	lsrs	r3, r3, #5
    673a:	b29b      	uxth	r3, r3
    673c:	461a      	mov	r2, r3
    673e:	4b36      	ldr	r3, [pc, #216]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6744:	6959      	ldr	r1, [r3, #20]
    6746:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    674a:	f003 031f 	and.w	r3, r3, #31
    674e:	2201      	movs	r2, #1
    6750:	fa02 f303 	lsl.w	r3, r2, r3
    6754:	43da      	mvns	r2, r3
    6756:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    675a:	095b      	lsrs	r3, r3, #5
    675c:	b29b      	uxth	r3, r3
    675e:	4618      	mov	r0, r3
    6760:	4b2d      	ldr	r3, [pc, #180]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6762:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6766:	400a      	ands	r2, r1
    6768:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    676a:	f009 f90f 	bl	f98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    676e:	f009 f933 	bl	f9d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6772:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6776:	095b      	lsrs	r3, r3, #5
    6778:	b29b      	uxth	r3, r3
    677a:	461a      	mov	r2, r3
    677c:	4b26      	ldr	r3, [pc, #152]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6782:	6999      	ldr	r1, [r3, #24]
    6784:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6788:	f003 031f 	and.w	r3, r3, #31
    678c:	2201      	movs	r2, #1
    678e:	fa02 f303 	lsl.w	r3, r2, r3
    6792:	43da      	mvns	r2, r3
    6794:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6798:	095b      	lsrs	r3, r3, #5
    679a:	b29b      	uxth	r3, r3
    679c:	4618      	mov	r0, r3
    679e:	4b1e      	ldr	r3, [pc, #120]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67a4:	400a      	ands	r2, r1
    67a6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67a8:	9b01      	ldr	r3, [sp, #4]
    67aa:	68d9      	ldr	r1, [r3, #12]
    67ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67b0:	4613      	mov	r3, r2
    67b2:	009b      	lsls	r3, r3, #2
    67b4:	4413      	add	r3, r2
    67b6:	009b      	lsls	r3, r3, #2
    67b8:	440b      	add	r3, r1
    67ba:	68db      	ldr	r3, [r3, #12]
    67bc:	2b03      	cmp	r3, #3
    67be:	d118      	bne.n	67f2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67c4:	095b      	lsrs	r3, r3, #5
    67c6:	b29b      	uxth	r3, r3
    67c8:	461a      	mov	r2, r3
    67ca:	4b13      	ldr	r3, [pc, #76]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67d0:	6999      	ldr	r1, [r3, #24]
    67d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67d6:	f003 031f 	and.w	r3, r3, #31
    67da:	2201      	movs	r2, #1
    67dc:	409a      	lsls	r2, r3
    67de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e2:	095b      	lsrs	r3, r3, #5
    67e4:	b29b      	uxth	r3, r3
    67e6:	4618      	mov	r0, r3
    67e8:	4b0b      	ldr	r3, [pc, #44]	; (6818 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67ee:	430a      	orrs	r2, r1
    67f0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    67f2:	f009 f91d 	bl	fa30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    67f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    67fa:	3301      	adds	r3, #1
    67fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    6800:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6804:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6808:	429a      	cmp	r2, r3
    680a:	f4ff af26 	bcc.w	665a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    680e:	bf00      	nop
    6810:	bf00      	nop
    6812:	b005      	add	sp, #20
    6814:	f85d fb04 	ldr.w	pc, [sp], #4
    6818:	00010824 	.word	0x00010824

0000681c <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    681c:	b500      	push	{lr}
    681e:	b083      	sub	sp, #12
    6820:	4603      	mov	r3, r0
    6822:	460a      	mov	r2, r1
    6824:	f88d 3007 	strb.w	r3, [sp, #7]
    6828:	4613      	mov	r3, r2
    682a:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    682e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6832:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6836:	2100      	movs	r1, #0
    6838:	207b      	movs	r0, #123	; 0x7b
    683a:	f009 fb99 	bl	ff70 <Det_ReportRuntimeError>
}
    683e:	bf00      	nop
    6840:	b003      	add	sp, #12
    6842:	f85d fb04 	ldr.w	pc, [sp], #4

00006846 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6846:	b500      	push	{lr}
    6848:	b085      	sub	sp, #20
    684a:	4603      	mov	r3, r0
    684c:	460a      	mov	r2, r1
    684e:	f88d 3007 	strb.w	r3, [sp, #7]
    6852:	4613      	mov	r3, r2
    6854:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6858:	2300      	movs	r3, #0
    685a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    685e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6862:	490e      	ldr	r1, [pc, #56]	; (689c <Adc_ValidateNotBusyNoQueue+0x56>)
    6864:	4613      	mov	r3, r2
    6866:	005b      	lsls	r3, r3, #1
    6868:	4413      	add	r3, r2
    686a:	005b      	lsls	r3, r3, #1
    686c:	440b      	add	r3, r1
    686e:	881b      	ldrh	r3, [r3, #0]
    6870:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    6874:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6878:	2b00      	cmp	r3, #0
    687a:	d008      	beq.n	688e <Adc_ValidateNotBusyNoQueue+0x48>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    687c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6880:	210b      	movs	r1, #11
    6882:	4618      	mov	r0, r3
    6884:	f7ff ffca 	bl	681c <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6888:	2301      	movs	r3, #1
    688a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    688e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6892:	4618      	mov	r0, r3
    6894:	b005      	add	sp, #20
    6896:	f85d fb04 	ldr.w	pc, [sp], #4
    689a:	bf00      	nop
    689c:	1fff8d00 	.word	0x1fff8d00

000068a0 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    68a0:	b500      	push	{lr}
    68a2:	b085      	sub	sp, #20
    68a4:	4603      	mov	r3, r0
    68a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    68aa:	460b      	mov	r3, r1
    68ac:	f88d 3005 	strb.w	r3, [sp, #5]
    68b0:	4613      	mov	r3, r2
    68b2:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    68b6:	2301      	movs	r3, #1
    68b8:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    68bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    68c0:	4917      	ldr	r1, [pc, #92]	; (6920 <Adc_ValidateNotBusyNoPrio+0x80>)
    68c2:	4613      	mov	r3, r2
    68c4:	009b      	lsls	r3, r3, #2
    68c6:	4413      	add	r3, r2
    68c8:	009b      	lsls	r3, r3, #2
    68ca:	440b      	add	r3, r1
    68cc:	681b      	ldr	r3, [r3, #0]
    68ce:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    68d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68d4:	f083 0301 	eor.w	r3, r3, #1
    68d8:	b2db      	uxtb	r3, r3
    68da:	2b00      	cmp	r3, #0
    68dc:	d007      	beq.n	68ee <Adc_ValidateNotBusyNoPrio+0x4e>
    68de:	9b02      	ldr	r3, [sp, #8]
    68e0:	2b00      	cmp	r3, #0
    68e2:	d004      	beq.n	68ee <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    68e4:	210b      	movs	r1, #11
    68e6:	2002      	movs	r0, #2
    68e8:	f7ff ff98 	bl	681c <Adc_ReportDetRuntimeError>
    68ec:	e011      	b.n	6912 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    68ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68f2:	2b00      	cmp	r3, #0
    68f4:	d00a      	beq.n	690c <Adc_ValidateNotBusyNoPrio+0x6c>
    68f6:	9b02      	ldr	r3, [sp, #8]
    68f8:	2b00      	cmp	r3, #0
    68fa:	d007      	beq.n	690c <Adc_ValidateNotBusyNoPrio+0x6c>
    68fc:	9b02      	ldr	r3, [sp, #8]
    68fe:	2b03      	cmp	r3, #3
    6900:	d004      	beq.n	690c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6902:	210b      	movs	r1, #11
    6904:	2002      	movs	r0, #2
    6906:	f7ff ff89 	bl	681c <Adc_ReportDetRuntimeError>
    690a:	e002      	b.n	6912 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    690c:	2300      	movs	r3, #0
    690e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    6912:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6916:	4618      	mov	r0, r3
    6918:	b005      	add	sp, #20
    691a:	f85d fb04 	ldr.w	pc, [sp], #4
    691e:	bf00      	nop
    6920:	1fff8cec 	.word	0x1fff8cec

00006924 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    6924:	b500      	push	{lr}
    6926:	b087      	sub	sp, #28
    6928:	4603      	mov	r3, r0
    692a:	460a      	mov	r2, r1
    692c:	f88d 3007 	strb.w	r3, [sp, #7]
    6930:	4613      	mov	r3, r2
    6932:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6936:	2300      	movs	r3, #0
    6938:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    693c:	2300      	movs	r3, #0
    693e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6942:	e02c      	b.n	699e <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    6944:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6948:	4a1d      	ldr	r2, [pc, #116]	; (69c0 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    694e:	685a      	ldr	r2, [r3, #4]
    6950:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6954:	2134      	movs	r1, #52	; 0x34
    6956:	fb01 f303 	mul.w	r3, r1, r3
    695a:	4413      	add	r3, r2
    695c:	881b      	ldrh	r3, [r3, #0]
    695e:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6962:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6966:	4917      	ldr	r1, [pc, #92]	; (69c4 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6968:	4613      	mov	r3, r2
    696a:	009b      	lsls	r3, r3, #2
    696c:	4413      	add	r3, r2
    696e:	009b      	lsls	r3, r3, #2
    6970:	440b      	add	r3, r1
    6972:	681b      	ldr	r3, [r3, #0]
    6974:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6976:	9b03      	ldr	r3, [sp, #12]
    6978:	2b00      	cmp	r3, #0
    697a:	d00b      	beq.n	6994 <Adc_ValidateCheckGroupNotConversion+0x70>
    697c:	9b03      	ldr	r3, [sp, #12]
    697e:	2b03      	cmp	r3, #3
    6980:	d008      	beq.n	6994 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6986:	210b      	movs	r1, #11
    6988:	4618      	mov	r0, r3
    698a:	f7ff ff47 	bl	681c <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    698e:	2301      	movs	r3, #1
    6990:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6994:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6998:	3301      	adds	r3, #1
    699a:	f8ad 3016 	strh.w	r3, [sp, #22]
    699e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    69a2:	4a07      	ldr	r2, [pc, #28]	; (69c0 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    69a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69a8:	891b      	ldrh	r3, [r3, #8]
    69aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69ae:	429a      	cmp	r2, r3
    69b0:	d3c8      	bcc.n	6944 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    69b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    69b6:	4618      	mov	r0, r3
    69b8:	b007      	add	sp, #28
    69ba:	f85d fb04 	ldr.w	pc, [sp], #4
    69be:	bf00      	nop
    69c0:	1fff8ce8 	.word	0x1fff8ce8
    69c4:	1fff8cec 	.word	0x1fff8cec

000069c8 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    69c8:	b500      	push	{lr}
    69ca:	b085      	sub	sp, #20
    69cc:	4603      	mov	r3, r0
    69ce:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    69d2:	2300      	movs	r3, #0
    69d4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    69d8:	2301      	movs	r3, #1
    69da:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    69de:	2300      	movs	r3, #0
    69e0:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    69e4:	2300      	movs	r3, #0
    69e6:	f88d 300d 	strb.w	r3, [sp, #13]
    69ea:	e01d      	b.n	6a28 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    69ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    69f0:	4a1b      	ldr	r2, [pc, #108]	; (6a60 <Adc_ValidateDeInitNotBusy+0x98>)
    69f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69f6:	681a      	ldr	r2, [r3, #0]
    69f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    69fc:	4413      	add	r3, r2
    69fe:	7f9b      	ldrb	r3, [r3, #30]
    6a00:	2b01      	cmp	r3, #1
    6a02:	d10c      	bne.n	6a1e <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6a04:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a08:	2101      	movs	r1, #1
    6a0a:	4618      	mov	r0, r3
    6a0c:	f7ff ff1b 	bl	6846 <Adc_ValidateNotBusyNoQueue>
    6a10:	4603      	mov	r3, r0
    6a12:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a1a:	2b01      	cmp	r3, #1
    6a1c:	d009      	beq.n	6a32 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a1e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a22:	3301      	adds	r3, #1
    6a24:	f88d 300d 	strb.w	r3, [sp, #13]
    6a28:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6a2c:	2b01      	cmp	r3, #1
    6a2e:	d9dd      	bls.n	69ec <Adc_ValidateDeInitNotBusy+0x24>
    6a30:	e000      	b.n	6a34 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6a32:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6a34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d10b      	bne.n	6a54 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a40:	4619      	mov	r1, r3
    6a42:	2001      	movs	r0, #1
    6a44:	f7ff ff6e 	bl	6924 <Adc_ValidateCheckGroupNotConversion>
    6a48:	4603      	mov	r3, r0
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d102      	bne.n	6a54 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6a4e:	2300      	movs	r3, #0
    6a50:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6a54:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6a58:	4618      	mov	r0, r3
    6a5a:	b005      	add	sp, #20
    6a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a60:	1fff8ce8 	.word	0x1fff8ce8

00006a64 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6a64:	b500      	push	{lr}
    6a66:	b085      	sub	sp, #20
    6a68:	4603      	mov	r3, r0
    6a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6a6e:	2301      	movs	r3, #1
    6a70:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6a74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6a78:	490b      	ldr	r1, [pc, #44]	; (6aa8 <Adc_ValidateSetupBufferNotBusy+0x44>)
    6a7a:	4613      	mov	r3, r2
    6a7c:	009b      	lsls	r3, r3, #2
    6a7e:	4413      	add	r3, r2
    6a80:	009b      	lsls	r3, r3, #2
    6a82:	440b      	add	r3, r1
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	2b00      	cmp	r3, #0
    6a88:	d004      	beq.n	6a94 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6a8a:	210b      	movs	r1, #11
    6a8c:	200c      	movs	r0, #12
    6a8e:	f7ff fec5 	bl	681c <Adc_ReportDetRuntimeError>
    6a92:	e002      	b.n	6a9a <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6a94:	2300      	movs	r3, #0
    6a96:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6a9e:	4618      	mov	r0, r3
    6aa0:	b005      	add	sp, #20
    6aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa6:	bf00      	nop
    6aa8:	1fff8cec 	.word	0x1fff8cec

00006aac <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6aac:	b500      	push	{lr}
    6aae:	b085      	sub	sp, #20
    6ab0:	4603      	mov	r3, r0
    6ab2:	460a      	mov	r2, r1
    6ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
    6ab8:	4613      	mov	r3, r2
    6aba:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6abe:	2300      	movs	r3, #0
    6ac0:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6ac4:	2300      	movs	r3, #0
    6ac6:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6aca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ace:	4a32      	ldr	r2, [pc, #200]	; (6b98 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad4:	68da      	ldr	r2, [r3, #12]
    6ad6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ada:	005b      	lsls	r3, r3, #1
    6adc:	4413      	add	r3, r2
    6ade:	881b      	ldrh	r3, [r3, #0]
    6ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6ae4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ae8:	4a2b      	ldr	r2, [pc, #172]	; (6b98 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aee:	685a      	ldr	r2, [r3, #4]
    6af0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6af4:	2134      	movs	r1, #52	; 0x34
    6af6:	fb01 f303 	mul.w	r3, r1, r3
    6afa:	4413      	add	r3, r2
    6afc:	689b      	ldr	r3, [r3, #8]
    6afe:	2b00      	cmp	r3, #0
    6b00:	d02c      	beq.n	6b5c <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b02:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b06:	4a24      	ldr	r2, [pc, #144]	; (6b98 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b0c:	685a      	ldr	r2, [r3, #4]
    6b0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b12:	2134      	movs	r1, #52	; 0x34
    6b14:	fb01 f303 	mul.w	r3, r1, r3
    6b18:	4413      	add	r3, r2
    6b1a:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b1c:	2b01      	cmp	r3, #1
    6b1e:	d120      	bne.n	6b62 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b20:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b24:	4a1c      	ldr	r2, [pc, #112]	; (6b98 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b2a:	685a      	ldr	r2, [r3, #4]
    6b2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b30:	2134      	movs	r1, #52	; 0x34
    6b32:	fb01 f303 	mul.w	r3, r1, r3
    6b36:	4413      	add	r3, r2
    6b38:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6b3a:	2b01      	cmp	r3, #1
    6b3c:	d111      	bne.n	6b62 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6b3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b42:	4a15      	ldr	r2, [pc, #84]	; (6b98 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b48:	685a      	ldr	r2, [r3, #4]
    6b4a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6b4e:	2134      	movs	r1, #52	; 0x34
    6b50:	fb01 f303 	mul.w	r3, r1, r3
    6b54:	4413      	add	r3, r2
    6b56:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d102      	bne.n	6b62 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6b5c:	2301      	movs	r3, #1
    6b5e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b66:	2b01      	cmp	r3, #1
    6b68:	d104      	bne.n	6b74 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6b6a:	210b      	movs	r1, #11
    6b6c:	2002      	movs	r0, #2
    6b6e:	f7ff fe55 	bl	681c <Adc_ReportDetRuntimeError>
    6b72:	e00b      	b.n	6b8c <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6b74:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6b78:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6b7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b80:	4618      	mov	r0, r3
    6b82:	f7ff fe8d 	bl	68a0 <Adc_ValidateNotBusyNoPrio>
    6b86:	4603      	mov	r3, r0
    6b88:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b90:	4618      	mov	r0, r3
    6b92:	b005      	add	sp, #20
    6b94:	f85d fb04 	ldr.w	pc, [sp], #4
    6b98:	1fff8ce8 	.word	0x1fff8ce8

00006b9c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6b9c:	b500      	push	{lr}
    6b9e:	b085      	sub	sp, #20
    6ba0:	4603      	mov	r3, r0
    6ba2:	f88d 3007 	strb.w	r3, [sp, #7]
    6ba6:	460b      	mov	r3, r1
    6ba8:	f8ad 3004 	strh.w	r3, [sp, #4]
    6bac:	4613      	mov	r3, r2
    6bae:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6bb2:	2300      	movs	r3, #0
    6bb4:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bbc:	2b0b      	cmp	r3, #11
    6bbe:	d03b      	beq.n	6c38 <Adc_ValidateStateNotIdle+0x9c>
    6bc0:	2b0b      	cmp	r3, #11
    6bc2:	dc4e      	bgt.n	6c62 <Adc_ValidateStateNotIdle+0xc6>
    6bc4:	2b03      	cmp	r3, #3
    6bc6:	d022      	beq.n	6c0e <Adc_ValidateStateNotIdle+0x72>
    6bc8:	2b04      	cmp	r3, #4
    6bca:	d14a      	bne.n	6c62 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6bcc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bd0:	492a      	ldr	r1, [pc, #168]	; (6c7c <Adc_ValidateStateNotIdle+0xe0>)
    6bd2:	4613      	mov	r3, r2
    6bd4:	009b      	lsls	r3, r3, #2
    6bd6:	4413      	add	r3, r2
    6bd8:	009b      	lsls	r3, r3, #2
    6bda:	440b      	add	r3, r1
    6bdc:	681b      	ldr	r3, [r3, #0]
    6bde:	2b00      	cmp	r3, #0
    6be0:	d141      	bne.n	6c66 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6be2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6be6:	4925      	ldr	r1, [pc, #148]	; (6c7c <Adc_ValidateStateNotIdle+0xe0>)
    6be8:	4613      	mov	r3, r2
    6bea:	009b      	lsls	r3, r3, #2
    6bec:	4413      	add	r3, r2
    6bee:	009b      	lsls	r3, r3, #2
    6bf0:	440b      	add	r3, r1
    6bf2:	3304      	adds	r3, #4
    6bf4:	681b      	ldr	r3, [r3, #0]
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d135      	bne.n	6c66 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bfe:	210c      	movs	r1, #12
    6c00:	4618      	mov	r0, r3
    6c02:	f7ff fe0b 	bl	681c <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6c06:	2301      	movs	r3, #1
    6c08:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6c0c:	e02b      	b.n	6c66 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c0e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c12:	491a      	ldr	r1, [pc, #104]	; (6c7c <Adc_ValidateStateNotIdle+0xe0>)
    6c14:	4613      	mov	r3, r2
    6c16:	009b      	lsls	r3, r3, #2
    6c18:	4413      	add	r3, r2
    6c1a:	009b      	lsls	r3, r3, #2
    6c1c:	440b      	add	r3, r1
    6c1e:	681b      	ldr	r3, [r3, #0]
    6c20:	2b00      	cmp	r3, #0
    6c22:	d122      	bne.n	6c6a <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c28:	210c      	movs	r1, #12
    6c2a:	4618      	mov	r0, r3
    6c2c:	f7ff fdf6 	bl	681c <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6c30:	2301      	movs	r3, #1
    6c32:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6c36:	e018      	b.n	6c6a <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c38:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c3c:	490f      	ldr	r1, [pc, #60]	; (6c7c <Adc_ValidateStateNotIdle+0xe0>)
    6c3e:	4613      	mov	r3, r2
    6c40:	009b      	lsls	r3, r3, #2
    6c42:	4413      	add	r3, r2
    6c44:	009b      	lsls	r3, r3, #2
    6c46:	440b      	add	r3, r1
    6c48:	681b      	ldr	r3, [r3, #0]
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d10f      	bne.n	6c6e <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6c4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c52:	210c      	movs	r1, #12
    6c54:	4618      	mov	r0, r3
    6c56:	f7ff fde1 	bl	681c <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6c5a:	2301      	movs	r3, #1
    6c5c:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6c60:	e005      	b.n	6c6e <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6c62:	bf00      	nop
    6c64:	e004      	b.n	6c70 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c66:	bf00      	nop
    6c68:	e002      	b.n	6c70 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c6a:	bf00      	nop
    6c6c:	e000      	b.n	6c70 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6c6e:	bf00      	nop
        }
    }

    return ValidState;
    6c70:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c74:	4618      	mov	r0, r3
    6c76:	b005      	add	sp, #20
    6c78:	f85d fb04 	ldr.w	pc, [sp], #4
    6c7c:	1fff8cec 	.word	0x1fff8cec

00006c80 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6c80:	b084      	sub	sp, #16
    6c82:	4603      	mov	r3, r0
    6c84:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6c88:	2300      	movs	r3, #0
    6c8a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6c8e:	2300      	movs	r3, #0
    6c90:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6c94:	2300      	movs	r3, #0
    6c96:	f8ad 300e 	strh.w	r3, [sp, #14]
    6c9a:	e049      	b.n	6d30 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca0:	4a2a      	ldr	r2, [pc, #168]	; (6d4c <Adc_InitGroupsStatus+0xcc>)
    6ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ca6:	685a      	ldr	r2, [r3, #4]
    6ca8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cac:	2134      	movs	r1, #52	; 0x34
    6cae:	fb01 f303 	mul.w	r3, r1, r3
    6cb2:	4413      	add	r3, r2
    6cb4:	881b      	ldrh	r3, [r3, #0]
    6cb6:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6cba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cbe:	4924      	ldr	r1, [pc, #144]	; (6d50 <Adc_InitGroupsStatus+0xd0>)
    6cc0:	4613      	mov	r3, r2
    6cc2:	009b      	lsls	r3, r3, #2
    6cc4:	4413      	add	r3, r2
    6cc6:	009b      	lsls	r3, r3, #2
    6cc8:	440b      	add	r3, r1
    6cca:	2200      	movs	r2, #0
    6ccc:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6cce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cd2:	491f      	ldr	r1, [pc, #124]	; (6d50 <Adc_InitGroupsStatus+0xd0>)
    6cd4:	4613      	mov	r3, r2
    6cd6:	009b      	lsls	r3, r3, #2
    6cd8:	4413      	add	r3, r2
    6cda:	009b      	lsls	r3, r3, #2
    6cdc:	440b      	add	r3, r1
    6cde:	3304      	adds	r3, #4
    6ce0:	2200      	movs	r2, #0
    6ce2:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    6ce4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6ce8:	4919      	ldr	r1, [pc, #100]	; (6d50 <Adc_InitGroupsStatus+0xd0>)
    6cea:	4613      	mov	r3, r2
    6cec:	009b      	lsls	r3, r3, #2
    6cee:	4413      	add	r3, r2
    6cf0:	009b      	lsls	r3, r3, #2
    6cf2:	440b      	add	r3, r1
    6cf4:	3308      	adds	r3, #8
    6cf6:	2200      	movs	r2, #0
    6cf8:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    6cfa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6cfe:	4914      	ldr	r1, [pc, #80]	; (6d50 <Adc_InitGroupsStatus+0xd0>)
    6d00:	4613      	mov	r3, r2
    6d02:	009b      	lsls	r3, r3, #2
    6d04:	4413      	add	r3, r2
    6d06:	009b      	lsls	r3, r3, #2
    6d08:	440b      	add	r3, r1
    6d0a:	330c      	adds	r3, #12
    6d0c:	2200      	movs	r2, #0
    6d0e:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    6d10:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d14:	490e      	ldr	r1, [pc, #56]	; (6d50 <Adc_InitGroupsStatus+0xd0>)
    6d16:	4613      	mov	r3, r2
    6d18:	009b      	lsls	r3, r3, #2
    6d1a:	4413      	add	r3, r2
    6d1c:	009b      	lsls	r3, r3, #2
    6d1e:	440b      	add	r3, r1
    6d20:	3310      	adds	r3, #16
    6d22:	2200      	movs	r2, #0
    6d24:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6d26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d2a:	3301      	adds	r3, #1
    6d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d34:	4a05      	ldr	r2, [pc, #20]	; (6d4c <Adc_InitGroupsStatus+0xcc>)
    6d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d3a:	891b      	ldrh	r3, [r3, #8]
    6d3c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d40:	429a      	cmp	r2, r3
    6d42:	d3ab      	bcc.n	6c9c <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    6d44:	bf00      	nop
    6d46:	bf00      	nop
    6d48:	b004      	add	sp, #16
    6d4a:	4770      	bx	lr
    6d4c:	1fff8ce8 	.word	0x1fff8ce8
    6d50:	1fff8cec 	.word	0x1fff8cec

00006d54 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    6d54:	b084      	sub	sp, #16
    6d56:	4603      	mov	r3, r0
    6d58:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6d5c:	2300      	movs	r3, #0
    6d5e:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    6d62:	2300      	movs	r3, #0
    6d64:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6d68:	2300      	movs	r3, #0
    6d6a:	f88d 300f 	strb.w	r3, [sp, #15]
    6d6e:	e03f      	b.n	6df0 <Adc_InitUnitStatus+0x9c>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d74:	4a22      	ldr	r2, [pc, #136]	; (6e00 <Adc_InitUnitStatus+0xac>)
    6d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d7a:	681a      	ldr	r2, [r3, #0]
    6d7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d80:	4413      	add	r3, r2
    6d82:	7f9b      	ldrb	r3, [r3, #30]
    6d84:	2b01      	cmp	r3, #1
    6d86:	d12e      	bne.n	6de6 <Adc_InitUnitStatus+0x92>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    6d88:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6d8c:	491d      	ldr	r1, [pc, #116]	; (6e04 <Adc_InitUnitStatus+0xb0>)
    6d8e:	4613      	mov	r3, r2
    6d90:	005b      	lsls	r3, r3, #1
    6d92:	4413      	add	r3, r2
    6d94:	005b      	lsls	r3, r3, #1
    6d96:	440b      	add	r3, r1
    6d98:	2200      	movs	r2, #0
    6d9a:	801a      	strh	r2, [r3, #0]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6d9c:	2300      	movs	r3, #0
    6d9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    6da2:	e011      	b.n	6dc8 <Adc_InitUnitStatus+0x74>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    6da4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6da8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6dac:	4815      	ldr	r0, [pc, #84]	; (6e04 <Adc_InitUnitStatus+0xb0>)
    6dae:	4613      	mov	r3, r2
    6db0:	005b      	lsls	r3, r3, #1
    6db2:	4413      	add	r3, r2
    6db4:	440b      	add	r3, r1
    6db6:	005b      	lsls	r3, r3, #1
    6db8:	4403      	add	r3, r0
    6dba:	2200      	movs	r2, #0
    6dbc:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6dbe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6dc2:	3301      	adds	r3, #1
    6dc4:	f8ad 300c 	strh.w	r3, [sp, #12]
    6dc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6dcc:	2b00      	cmp	r3, #0
    6dce:	d0e9      	beq.n	6da4 <Adc_InitUnitStatus+0x50>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    6dd0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6dd4:	490b      	ldr	r1, [pc, #44]	; (6e04 <Adc_InitUnitStatus+0xb0>)
    6dd6:	4613      	mov	r3, r2
    6dd8:	005b      	lsls	r3, r3, #1
    6dda:	4413      	add	r3, r2
    6ddc:	005b      	lsls	r3, r3, #1
    6dde:	440b      	add	r3, r1
    6de0:	3304      	adds	r3, #4
    6de2:	2200      	movs	r2, #0
    6de4:	701a      	strb	r2, [r3, #0]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6de6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dea:	3301      	adds	r3, #1
    6dec:	f88d 300f 	strb.w	r3, [sp, #15]
    6df0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6df4:	2b01      	cmp	r3, #1
    6df6:	d9bb      	bls.n	6d70 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    6df8:	bf00      	nop
    6dfa:	bf00      	nop
    6dfc:	b004      	add	sp, #16
    6dfe:	4770      	bx	lr
    6e00:	1fff8ce8 	.word	0x1fff8ce8
    6e04:	1fff8d00 	.word	0x1fff8d00

00006e08 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    6e08:	b084      	sub	sp, #16
    6e0a:	9001      	str	r0, [sp, #4]
    6e0c:	460b      	mov	r3, r1
    6e0e:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    6e12:	2300      	movs	r3, #0
    6e14:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    6e18:	2301      	movs	r3, #1
    6e1a:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    6e1e:	9b01      	ldr	r3, [sp, #4]
    6e20:	7c1b      	ldrb	r3, [r3, #16]
    6e22:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e26:	429a      	cmp	r2, r3
    6e28:	d11c      	bne.n	6e64 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e2a:	2300      	movs	r3, #0
    6e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    6e30:	e012      	b.n	6e58 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    6e32:	9b01      	ldr	r3, [sp, #4]
    6e34:	695a      	ldr	r2, [r3, #20]
    6e36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e3a:	4413      	add	r3, r2
    6e3c:	781b      	ldrb	r3, [r3, #0]
    6e3e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e42:	429a      	cmp	r2, r3
    6e44:	d103      	bne.n	6e4e <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    6e46:	2300      	movs	r3, #0
    6e48:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    6e4c:	e00a      	b.n	6e64 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6e4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e52:	3301      	adds	r3, #1
    6e54:	f88d 300f 	strb.w	r3, [sp, #15]
    6e58:	9b01      	ldr	r3, [sp, #4]
    6e5a:	7e1b      	ldrb	r3, [r3, #24]
    6e5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6e60:	429a      	cmp	r2, r3
    6e62:	d3e6      	bcc.n	6e32 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    6e64:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6e68:	4618      	mov	r0, r3
    6e6a:	b004      	add	sp, #16
    6e6c:	4770      	bx	lr

00006e6e <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    6e6e:	b500      	push	{lr}
    6e70:	b085      	sub	sp, #20
    6e72:	4603      	mov	r3, r0
    6e74:	f8ad 3006 	strh.w	r3, [sp, #6]
    6e78:	460b      	mov	r3, r1
    6e7a:	f88d 3005 	strb.w	r3, [sp, #5]
    6e7e:	4613      	mov	r3, r2
    6e80:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_QueueIndexType QueueIndex = 0U;
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6e84:	2300      	movs	r3, #0
    6e86:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    6e8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6e8e:	4938      	ldr	r1, [pc, #224]	; (6f70 <Adc_UpdateStatusStartConversion+0x102>)
    6e90:	4613      	mov	r3, r2
    6e92:	009b      	lsls	r3, r3, #2
    6e94:	4413      	add	r3, r2
    6e96:	009b      	lsls	r3, r3, #2
    6e98:	440b      	add	r3, r1
    6e9a:	2201      	movs	r2, #1
    6e9c:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    6e9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ea2:	4933      	ldr	r1, [pc, #204]	; (6f70 <Adc_UpdateStatusStartConversion+0x102>)
    6ea4:	4613      	mov	r3, r2
    6ea6:	009b      	lsls	r3, r3, #2
    6ea8:	4413      	add	r3, r2
    6eaa:	009b      	lsls	r3, r3, #2
    6eac:	440b      	add	r3, r1
    6eae:	3308      	adds	r3, #8
    6eb0:	2200      	movs	r2, #0
    6eb2:	801a      	strh	r2, [r3, #0]
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6eb4:	f003 ff20 	bl	acf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6eb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ebc:	492d      	ldr	r1, [pc, #180]	; (6f74 <Adc_UpdateStatusStartConversion+0x106>)
    6ebe:	4613      	mov	r3, r2
    6ec0:	005b      	lsls	r3, r3, #1
    6ec2:	4413      	add	r3, r2
    6ec4:	005b      	lsls	r3, r3, #1
    6ec6:	440b      	add	r3, r1
    6ec8:	881b      	ldrh	r3, [r3, #0]
    6eca:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    6ece:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ed2:	4928      	ldr	r1, [pc, #160]	; (6f74 <Adc_UpdateStatusStartConversion+0x106>)
    6ed4:	4613      	mov	r3, r2
    6ed6:	005b      	lsls	r3, r3, #1
    6ed8:	4413      	add	r3, r2
    6eda:	005b      	lsls	r3, r3, #1
    6edc:	440b      	add	r3, r1
    6ede:	3302      	adds	r3, #2
    6ee0:	881b      	ldrh	r3, [r3, #0]
    6ee2:	b29b      	uxth	r3, r3
    6ee4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ee8:	429a      	cmp	r2, r3
    6eea:	d003      	beq.n	6ef4 <Adc_UpdateStatusStartConversion+0x86>
    6eec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d136      	bne.n	6f62 <Adc_UpdateStatusStartConversion+0xf4>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    6ef4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6ef8:	491e      	ldr	r1, [pc, #120]	; (6f74 <Adc_UpdateStatusStartConversion+0x106>)
    6efa:	4613      	mov	r3, r2
    6efc:	005b      	lsls	r3, r3, #1
    6efe:	4413      	add	r3, r2
    6f00:	005b      	lsls	r3, r3, #1
    6f02:	440b      	add	r3, r1
    6f04:	881b      	ldrh	r3, [r3, #0]
    6f06:	b29b      	uxth	r3, r3
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d11f      	bne.n	6f4c <Adc_UpdateStatusStartConversion+0xde>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    6f0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f10:	4918      	ldr	r1, [pc, #96]	; (6f74 <Adc_UpdateStatusStartConversion+0x106>)
    6f12:	4613      	mov	r3, r2
    6f14:	005b      	lsls	r3, r3, #1
    6f16:	4413      	add	r3, r2
    6f18:	005b      	lsls	r3, r3, #1
    6f1a:	440b      	add	r3, r1
    6f1c:	3302      	adds	r3, #2
    6f1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f22:	801a      	strh	r2, [r3, #0]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6f24:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f28:	4912      	ldr	r1, [pc, #72]	; (6f74 <Adc_UpdateStatusStartConversion+0x106>)
    6f2a:	4613      	mov	r3, r2
    6f2c:	005b      	lsls	r3, r3, #1
    6f2e:	4413      	add	r3, r2
    6f30:	005b      	lsls	r3, r3, #1
    6f32:	440b      	add	r3, r1
    6f34:	881b      	ldrh	r3, [r3, #0]
    6f36:	b29b      	uxth	r3, r3
    6f38:	3301      	adds	r3, #1
    6f3a:	b298      	uxth	r0, r3
    6f3c:	490d      	ldr	r1, [pc, #52]	; (6f74 <Adc_UpdateStatusStartConversion+0x106>)
    6f3e:	4613      	mov	r3, r2
    6f40:	005b      	lsls	r3, r3, #1
    6f42:	4413      	add	r3, r2
    6f44:	005b      	lsls	r3, r3, #1
    6f46:	440b      	add	r3, r1
    6f48:	4602      	mov	r2, r0
    6f4a:	801a      	strh	r2, [r3, #0]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6f4c:	f003 ff00 	bl	ad50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    6f50:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6f54:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f58:	4611      	mov	r1, r2
    6f5a:	4618      	mov	r0, r3
    6f5c:	f002 fc2e 	bl	97bc <Adc_Ipw_StartNormalConversion>
    6f60:	e002      	b.n	6f68 <Adc_UpdateStatusStartConversion+0xfa>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6f62:	f003 fef5 	bl	ad50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    6f66:	bf00      	nop
    6f68:	bf00      	nop
    6f6a:	b005      	add	sp, #20
    6f6c:	f85d fb04 	ldr.w	pc, [sp], #4
    6f70:	1fff8cec 	.word	0x1fff8cec
    6f74:	1fff8d00 	.word	0x1fff8d00

00006f78 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    6f78:	b500      	push	{lr}
    6f7a:	b085      	sub	sp, #20
    6f7c:	9001      	str	r0, [sp, #4]
    6f7e:	4608      	mov	r0, r1
    6f80:	4611      	mov	r1, r2
    6f82:	461a      	mov	r2, r3
    6f84:	4603      	mov	r3, r0
    6f86:	f8ad 3002 	strh.w	r3, [sp, #2]
    6f8a:	460b      	mov	r3, r1
    6f8c:	f88d 3001 	strb.w	r3, [sp, #1]
    6f90:	4613      	mov	r3, r2
    6f92:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6f96:	2300      	movs	r3, #0
    6f98:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    6f9c:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6fa0:	492b      	ldr	r1, [pc, #172]	; (7050 <Adc_StopSwGroupConversion+0xd8>)
    6fa2:	4613      	mov	r3, r2
    6fa4:	005b      	lsls	r3, r3, #1
    6fa6:	4413      	add	r3, r2
    6fa8:	005b      	lsls	r3, r3, #1
    6faa:	440b      	add	r3, r1
    6fac:	881b      	ldrh	r3, [r3, #0]
    6fae:	b29a      	uxth	r2, r3
    6fb0:	9b01      	ldr	r3, [sp, #4]
    6fb2:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6fb4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6fb8:	4925      	ldr	r1, [pc, #148]	; (7050 <Adc_StopSwGroupConversion+0xd8>)
    6fba:	4613      	mov	r3, r2
    6fbc:	005b      	lsls	r3, r3, #1
    6fbe:	4413      	add	r3, r2
    6fc0:	005b      	lsls	r3, r3, #1
    6fc2:	440b      	add	r3, r1
    6fc4:	881b      	ldrh	r3, [r3, #0]
    6fc6:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    6fca:	2300      	movs	r3, #0
    6fcc:	f8ad 300c 	strh.w	r3, [sp, #12]
    6fd0:	e031      	b.n	7036 <Adc_StopSwGroupConversion+0xbe>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    6fd2:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6fd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6fda:	481d      	ldr	r0, [pc, #116]	; (7050 <Adc_StopSwGroupConversion+0xd8>)
    6fdc:	4613      	mov	r3, r2
    6fde:	005b      	lsls	r3, r3, #1
    6fe0:	4413      	add	r3, r2
    6fe2:	440b      	add	r3, r1
    6fe4:	005b      	lsls	r3, r3, #1
    6fe6:	4403      	add	r3, r0
    6fe8:	885b      	ldrh	r3, [r3, #2]
    6fea:	b29b      	uxth	r3, r3
    6fec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6ff0:	429a      	cmp	r2, r3
    6ff2:	d11b      	bne.n	702c <Adc_StopSwGroupConversion+0xb4>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    6ff4:	9b01      	ldr	r3, [sp, #4]
    6ff6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6ffa:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    6ffc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7000:	2b00      	cmp	r3, #0
    7002:	d10b      	bne.n	701c <Adc_StopSwGroupConversion+0xa4>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    7004:	f89d 2000 	ldrb.w	r2, [sp]
    7008:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    700c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7010:	4618      	mov	r0, r3
    7012:	f002 fc91 	bl	9938 <Adc_Ipw_StopCurrentConversion>
    7016:	4603      	mov	r3, r0
    7018:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    701c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7020:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7024:	4611      	mov	r1, r2
    7026:	4618      	mov	r0, r3
    7028:	f001 fd9e 	bl	8b68 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    702c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7030:	3301      	adds	r3, #1
    7032:	f8ad 300c 	strh.w	r3, [sp, #12]
    7036:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    703a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    703e:	429a      	cmp	r2, r3
    7040:	d3c7      	bcc.n	6fd2 <Adc_StopSwGroupConversion+0x5a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    7042:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7046:	4618      	mov	r0, r3
    7048:	b005      	add	sp, #20
    704a:	f85d fb04 	ldr.w	pc, [sp], #4
    704e:	bf00      	nop
    7050:	1fff8d00 	.word	0x1fff8d00

00007054 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7054:	b500      	push	{lr}
    7056:	b089      	sub	sp, #36	; 0x24
    7058:	4603      	mov	r3, r0
    705a:	f8ad 3006 	strh.w	r3, [sp, #6]
    705e:	460b      	mov	r3, r1
    7060:	f88d 3005 	strb.w	r3, [sp, #5]
    7064:	4613      	mov	r3, r2
    7066:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    706a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    706e:	4a51      	ldr	r2, [pc, #324]	; (71b4 <Adc_UpdateStatusStopConversion+0x160>)
    7070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7074:	68da      	ldr	r2, [r3, #12]
    7076:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    707a:	005b      	lsls	r3, r3, #1
    707c:	4413      	add	r3, r2
    707e:	881b      	ldrh	r3, [r3, #0]
    7080:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7084:	2300      	movs	r3, #0
    7086:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    708a:	2300      	movs	r3, #0
    708c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    7090:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7094:	4a47      	ldr	r2, [pc, #284]	; (71b4 <Adc_UpdateStatusStopConversion+0x160>)
    7096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709a:	685a      	ldr	r2, [r3, #4]
    709c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    70a0:	2134      	movs	r1, #52	; 0x34
    70a2:	fb01 f303 	mul.w	r3, r1, r3
    70a6:	4413      	add	r3, r2
    70a8:	689b      	ldr	r3, [r3, #8]
    70aa:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    70ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70b0:	4a40      	ldr	r2, [pc, #256]	; (71b4 <Adc_UpdateStatusStopConversion+0x160>)
    70b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b6:	685a      	ldr	r2, [r3, #4]
    70b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    70bc:	2134      	movs	r1, #52	; 0x34
    70be:	fb01 f303 	mul.w	r3, r1, r3
    70c2:	4413      	add	r3, r2
    70c4:	685b      	ldr	r3, [r3, #4]
    70c6:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    70c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    70cc:	4a39      	ldr	r2, [pc, #228]	; (71b4 <Adc_UpdateStatusStopConversion+0x160>)
    70ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70d2:	685a      	ldr	r2, [r3, #4]
    70d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    70d8:	2134      	movs	r1, #52	; 0x34
    70da:	fb01 f303 	mul.w	r3, r1, r3
    70de:	4413      	add	r3, r2
    70e0:	699b      	ldr	r3, [r3, #24]
    70e2:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    70e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    70e8:	4933      	ldr	r1, [pc, #204]	; (71b8 <Adc_UpdateStatusStopConversion+0x164>)
    70ea:	4613      	mov	r3, r2
    70ec:	009b      	lsls	r3, r3, #2
    70ee:	4413      	add	r3, r2
    70f0:	009b      	lsls	r3, r3, #2
    70f2:	440b      	add	r3, r1
    70f4:	681b      	ldr	r3, [r3, #0]
    70f6:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    70f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    70fc:	492e      	ldr	r1, [pc, #184]	; (71b8 <Adc_UpdateStatusStopConversion+0x164>)
    70fe:	4613      	mov	r3, r2
    7100:	009b      	lsls	r3, r3, #2
    7102:	4413      	add	r3, r2
    7104:	009b      	lsls	r3, r3, #2
    7106:	440b      	add	r3, r1
    7108:	3308      	adds	r3, #8
    710a:	2200      	movs	r2, #0
    710c:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    710e:	9b06      	ldr	r3, [sp, #24]
    7110:	2b00      	cmp	r3, #0
    7112:	d005      	beq.n	7120 <Adc_UpdateStatusStopConversion+0xcc>
    7114:	9b05      	ldr	r3, [sp, #20]
    7116:	2b01      	cmp	r3, #1
    7118:	d110      	bne.n	713c <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    711a:	9b04      	ldr	r3, [sp, #16]
    711c:	2b00      	cmp	r3, #0
    711e:	d10d      	bne.n	713c <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    7120:	9b03      	ldr	r3, [sp, #12]
    7122:	2b03      	cmp	r3, #3
    7124:	d10a      	bne.n	713c <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7126:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    712a:	4923      	ldr	r1, [pc, #140]	; (71b8 <Adc_UpdateStatusStopConversion+0x164>)
    712c:	4613      	mov	r3, r2
    712e:	009b      	lsls	r3, r3, #2
    7130:	4413      	add	r3, r2
    7132:	009b      	lsls	r3, r3, #2
    7134:	440b      	add	r3, r1
    7136:	2200      	movs	r2, #0
    7138:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    713a:	e036      	b.n	71aa <Adc_UpdateStatusStopConversion+0x156>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    713c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7140:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7144:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7148:	f10d 000a 	add.w	r0, sp, #10
    714c:	f7ff ff14 	bl	6f78 <Adc_StopSwGroupConversion>
    7150:	4603      	mov	r3, r0
    7152:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7156:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    715a:	4917      	ldr	r1, [pc, #92]	; (71b8 <Adc_UpdateStatusStopConversion+0x164>)
    715c:	4613      	mov	r3, r2
    715e:	009b      	lsls	r3, r3, #2
    7160:	4413      	add	r3, r2
    7162:	009b      	lsls	r3, r3, #2
    7164:	440b      	add	r3, r1
    7166:	2200      	movs	r2, #0
    7168:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    716a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    716e:	2b00      	cmp	r3, #0
    7170:	d113      	bne.n	719a <Adc_UpdateStatusStopConversion+0x146>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7172:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7176:	4911      	ldr	r1, [pc, #68]	; (71bc <Adc_UpdateStatusStopConversion+0x168>)
    7178:	4613      	mov	r3, r2
    717a:	005b      	lsls	r3, r3, #1
    717c:	4413      	add	r3, r2
    717e:	005b      	lsls	r3, r3, #1
    7180:	440b      	add	r3, r1
    7182:	881b      	ldrh	r3, [r3, #0]
    7184:	b29b      	uxth	r3, r3
    7186:	2b00      	cmp	r3, #0
    7188:	d007      	beq.n	719a <Adc_UpdateStatusStopConversion+0x146>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    718a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    718e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7192:	4611      	mov	r1, r2
    7194:	4618      	mov	r0, r3
    7196:	f002 fb11 	bl	97bc <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    719a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    719e:	2b01      	cmp	r3, #1
    71a0:	d103      	bne.n	71aa <Adc_UpdateStatusStopConversion+0x156>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    71a2:	212b      	movs	r1, #43	; 0x2b
    71a4:	2003      	movs	r0, #3
    71a6:	f7ff fb39 	bl	681c <Adc_ReportDetRuntimeError>
}
    71aa:	bf00      	nop
    71ac:	b009      	add	sp, #36	; 0x24
    71ae:	f85d fb04 	ldr.w	pc, [sp], #4
    71b2:	bf00      	nop
    71b4:	1fff8ce8 	.word	0x1fff8ce8
    71b8:	1fff8cec 	.word	0x1fff8cec
    71bc:	1fff8d00 	.word	0x1fff8d00

000071c0 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    71c0:	b500      	push	{lr}
    71c2:	b085      	sub	sp, #20
    71c4:	4603      	mov	r3, r0
    71c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    71ca:	460b      	mov	r3, r1
    71cc:	f88d 3005 	strb.w	r3, [sp, #5]
    71d0:	4613      	mov	r3, r2
    71d2:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    71d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71da:	4a18      	ldr	r2, [pc, #96]	; (723c <Adc_UpdateStatusReadGroup+0x7c>)
    71dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e0:	68da      	ldr	r2, [r3, #12]
    71e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    71e6:	005b      	lsls	r3, r3, #1
    71e8:	4413      	add	r3, r2
    71ea:	881b      	ldrh	r3, [r3, #0]
    71ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    71f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71f4:	4a11      	ldr	r2, [pc, #68]	; (723c <Adc_UpdateStatusReadGroup+0x7c>)
    71f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71fa:	685a      	ldr	r2, [r3, #4]
    71fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7200:	2134      	movs	r1, #52	; 0x34
    7202:	fb01 f303 	mul.w	r3, r1, r3
    7206:	4413      	add	r3, r2
    7208:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    720c:	2b01      	cmp	r3, #1
    720e:	d109      	bne.n	7224 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    7210:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7214:	f89d 1005 	ldrb.w	r1, [sp, #5]
    7218:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    721c:	4618      	mov	r0, r3
    721e:	f000 f80f 	bl	7240 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    7222:	e007      	b.n	7234 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    7224:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7228:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    722c:	4611      	mov	r1, r2
    722e:	4618      	mov	r0, r3
    7230:	f000 f8f6 	bl	7420 <Adc_UpdateStatusReadGroupInt>
}
    7234:	bf00      	nop
    7236:	b005      	add	sp, #20
    7238:	f85d fb04 	ldr.w	pc, [sp], #4
    723c:	1fff8ce8 	.word	0x1fff8ce8

00007240 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    7240:	b500      	push	{lr}
    7242:	b085      	sub	sp, #20
    7244:	4603      	mov	r3, r0
    7246:	f8ad 3006 	strh.w	r3, [sp, #6]
    724a:	460b      	mov	r3, r1
    724c:	f88d 3005 	strb.w	r3, [sp, #5]
    7250:	4613      	mov	r3, r2
    7252:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7256:	f89d 3004 	ldrb.w	r3, [sp, #4]
    725a:	4a2c      	ldr	r2, [pc, #176]	; (730c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7260:	68da      	ldr	r2, [r3, #12]
    7262:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7266:	005b      	lsls	r3, r3, #1
    7268:	4413      	add	r3, r2
    726a:	881b      	ldrh	r3, [r3, #0]
    726c:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7274:	4926      	ldr	r1, [pc, #152]	; (7310 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    7276:	4613      	mov	r3, r2
    7278:	009b      	lsls	r3, r3, #2
    727a:	4413      	add	r3, r2
    727c:	009b      	lsls	r3, r3, #2
    727e:	440b      	add	r3, r1
    7280:	3304      	adds	r3, #4
    7282:	2201      	movs	r2, #1
    7284:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    7286:	f89d 3005 	ldrb.w	r3, [sp, #5]
    728a:	2b00      	cmp	r3, #0
    728c:	d03a      	beq.n	7304 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    728e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7292:	4a1e      	ldr	r2, [pc, #120]	; (730c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7298:	685a      	ldr	r2, [r3, #4]
    729a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    729e:	2134      	movs	r1, #52	; 0x34
    72a0:	fb01 f303 	mul.w	r3, r1, r3
    72a4:	4413      	add	r3, r2
    72a6:	689b      	ldr	r3, [r3, #8]
    72a8:	2b01      	cmp	r3, #1
    72aa:	d10a      	bne.n	72c2 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    72ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    72b0:	4917      	ldr	r1, [pc, #92]	; (7310 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    72b2:	4613      	mov	r3, r2
    72b4:	009b      	lsls	r3, r3, #2
    72b6:	4413      	add	r3, r2
    72b8:	009b      	lsls	r3, r3, #2
    72ba:	440b      	add	r3, r1
    72bc:	2201      	movs	r2, #1
    72be:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    72c0:	e020      	b.n	7304 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    72c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    72c6:	4a11      	ldr	r2, [pc, #68]	; (730c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    72c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72cc:	685a      	ldr	r2, [r3, #4]
    72ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72d2:	2134      	movs	r1, #52	; 0x34
    72d4:	fb01 f303 	mul.w	r3, r1, r3
    72d8:	4413      	add	r3, r2
    72da:	695b      	ldr	r3, [r3, #20]
    72dc:	2b00      	cmp	r3, #0
    72de:	d111      	bne.n	7304 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    72e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    72e4:	490a      	ldr	r1, [pc, #40]	; (7310 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    72e6:	4613      	mov	r3, r2
    72e8:	009b      	lsls	r3, r3, #2
    72ea:	4413      	add	r3, r2
    72ec:	009b      	lsls	r3, r3, #2
    72ee:	440b      	add	r3, r1
    72f0:	2200      	movs	r2, #0
    72f2:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    72f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72fc:	4611      	mov	r1, r2
    72fe:	4618      	mov	r0, r3
    7300:	f000 f808 	bl	7314 <Adc_UpdateSwQueueIndexNoInt>
}
    7304:	bf00      	nop
    7306:	b005      	add	sp, #20
    7308:	f85d fb04 	ldr.w	pc, [sp], #4
    730c:	1fff8ce8 	.word	0x1fff8ce8
    7310:	1fff8cec 	.word	0x1fff8cec

00007314 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    7314:	b500      	push	{lr}
    7316:	b085      	sub	sp, #20
    7318:	4603      	mov	r3, r0
    731a:	460a      	mov	r2, r1
    731c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7320:	4613      	mov	r3, r2
    7322:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7326:	f89d 3005 	ldrb.w	r3, [sp, #5]
    732a:	4a3b      	ldr	r2, [pc, #236]	; (7418 <Adc_UpdateSwQueueIndexNoInt+0x104>)
    732c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7330:	68da      	ldr	r2, [r3, #12]
    7332:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7336:	005b      	lsls	r3, r3, #1
    7338:	4413      	add	r3, r2
    733a:	881b      	ldrh	r3, [r3, #0]
    733c:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    7340:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7344:	4a34      	ldr	r2, [pc, #208]	; (7418 <Adc_UpdateSwQueueIndexNoInt+0x104>)
    7346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    734a:	685a      	ldr	r2, [r3, #4]
    734c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7350:	2134      	movs	r1, #52	; 0x34
    7352:	fb01 f303 	mul.w	r3, r1, r3
    7356:	4413      	add	r3, r2
    7358:	789b      	ldrb	r3, [r3, #2]
    735a:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    735e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7362:	492e      	ldr	r1, [pc, #184]	; (741c <Adc_UpdateSwQueueIndexNoInt+0x108>)
    7364:	4613      	mov	r3, r2
    7366:	005b      	lsls	r3, r3, #1
    7368:	4413      	add	r3, r2
    736a:	005b      	lsls	r3, r3, #1
    736c:	440b      	add	r3, r1
    736e:	881b      	ldrh	r3, [r3, #0]
    7370:	b29b      	uxth	r3, r3
    7372:	2b00      	cmp	r3, #0
    7374:	d04b      	beq.n	740e <Adc_UpdateSwQueueIndexNoInt+0xfa>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7376:	f89d 200b 	ldrb.w	r2, [sp, #11]
    737a:	4928      	ldr	r1, [pc, #160]	; (741c <Adc_UpdateSwQueueIndexNoInt+0x108>)
    737c:	4613      	mov	r3, r2
    737e:	005b      	lsls	r3, r3, #1
    7380:	4413      	add	r3, r2
    7382:	005b      	lsls	r3, r3, #1
    7384:	440b      	add	r3, r1
    7386:	881b      	ldrh	r3, [r3, #0]
    7388:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    738c:	2300      	movs	r3, #0
    738e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7392:	e01e      	b.n	73d2 <Adc_UpdateSwQueueIndexNoInt+0xbe>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    7394:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7398:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    739c:	481f      	ldr	r0, [pc, #124]	; (741c <Adc_UpdateSwQueueIndexNoInt+0x108>)
    739e:	4613      	mov	r3, r2
    73a0:	005b      	lsls	r3, r3, #1
    73a2:	4413      	add	r3, r2
    73a4:	440b      	add	r3, r1
    73a6:	005b      	lsls	r3, r3, #1
    73a8:	4403      	add	r3, r0
    73aa:	885b      	ldrh	r3, [r3, #2]
    73ac:	b29b      	uxth	r3, r3
    73ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    73b2:	429a      	cmp	r2, r3
    73b4:	d108      	bne.n	73c8 <Adc_UpdateSwQueueIndexNoInt+0xb4>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    73b6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    73be:	4611      	mov	r1, r2
    73c0:	4618      	mov	r0, r3
    73c2:	f001 fbd1 	bl	8b68 <Adc_Ipw_RemoveFromQueue>
                    break;
    73c6:	e00a      	b.n	73de <Adc_UpdateSwQueueIndexNoInt+0xca>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    73c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    73cc:	3301      	adds	r3, #1
    73ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    73d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    73da:	429a      	cmp	r2, r3
    73dc:	d3da      	bcc.n	7394 <Adc_UpdateSwQueueIndexNoInt+0x80>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    73de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    73e2:	2b00      	cmp	r3, #0
    73e4:	d113      	bne.n	740e <Adc_UpdateSwQueueIndexNoInt+0xfa>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    73e6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    73ea:	490c      	ldr	r1, [pc, #48]	; (741c <Adc_UpdateSwQueueIndexNoInt+0x108>)
    73ec:	4613      	mov	r3, r2
    73ee:	005b      	lsls	r3, r3, #1
    73f0:	4413      	add	r3, r2
    73f2:	005b      	lsls	r3, r3, #1
    73f4:	440b      	add	r3, r1
    73f6:	881b      	ldrh	r3, [r3, #0]
    73f8:	b29b      	uxth	r3, r3
    73fa:	2b00      	cmp	r3, #0
    73fc:	d007      	beq.n	740e <Adc_UpdateSwQueueIndexNoInt+0xfa>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    73fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7402:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7406:	4611      	mov	r1, r2
    7408:	4618      	mov	r0, r3
    740a:	f002 f9d7 	bl	97bc <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    740e:	bf00      	nop
    7410:	b005      	add	sp, #20
    7412:	f85d fb04 	ldr.w	pc, [sp], #4
    7416:	bf00      	nop
    7418:	1fff8ce8 	.word	0x1fff8ce8
    741c:	1fff8d00 	.word	0x1fff8d00

00007420 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    7420:	b084      	sub	sp, #16
    7422:	4603      	mov	r3, r0
    7424:	460a      	mov	r2, r1
    7426:	f8ad 3006 	strh.w	r3, [sp, #6]
    742a:	4613      	mov	r3, r2
    742c:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7430:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7434:	4a47      	ldr	r2, [pc, #284]	; (7554 <Adc_UpdateStatusReadGroupInt+0x134>)
    7436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    743a:	68da      	ldr	r2, [r3, #12]
    743c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7440:	005b      	lsls	r3, r3, #1
    7442:	4413      	add	r3, r2
    7444:	881b      	ldrh	r3, [r3, #0]
    7446:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    744a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    744e:	4942      	ldr	r1, [pc, #264]	; (7558 <Adc_UpdateStatusReadGroupInt+0x138>)
    7450:	4613      	mov	r3, r2
    7452:	009b      	lsls	r3, r3, #2
    7454:	4413      	add	r3, r2
    7456:	009b      	lsls	r3, r3, #2
    7458:	440b      	add	r3, r1
    745a:	681b      	ldr	r3, [r3, #0]
    745c:	2b02      	cmp	r3, #2
    745e:	d10a      	bne.n	7476 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7460:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7464:	493c      	ldr	r1, [pc, #240]	; (7558 <Adc_UpdateStatusReadGroupInt+0x138>)
    7466:	4613      	mov	r3, r2
    7468:	009b      	lsls	r3, r3, #2
    746a:	4413      	add	r3, r2
    746c:	009b      	lsls	r3, r3, #2
    746e:	440b      	add	r3, r1
    7470:	2201      	movs	r2, #1
    7472:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    7474:	e06a      	b.n	754c <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7476:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    747a:	4937      	ldr	r1, [pc, #220]	; (7558 <Adc_UpdateStatusReadGroupInt+0x138>)
    747c:	4613      	mov	r3, r2
    747e:	009b      	lsls	r3, r3, #2
    7480:	4413      	add	r3, r2
    7482:	009b      	lsls	r3, r3, #2
    7484:	440b      	add	r3, r1
    7486:	681b      	ldr	r3, [r3, #0]
    7488:	2b03      	cmp	r3, #3
    748a:	d15f      	bne.n	754c <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    748c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7490:	4a30      	ldr	r2, [pc, #192]	; (7554 <Adc_UpdateStatusReadGroupInt+0x134>)
    7492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7496:	685a      	ldr	r2, [r3, #4]
    7498:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    749c:	2134      	movs	r1, #52	; 0x34
    749e:	fb01 f303 	mul.w	r3, r1, r3
    74a2:	4413      	add	r3, r2
    74a4:	695b      	ldr	r3, [r3, #20]
    74a6:	2b00      	cmp	r3, #0
    74a8:	d150      	bne.n	754c <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    74aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74ae:	4a29      	ldr	r2, [pc, #164]	; (7554 <Adc_UpdateStatusReadGroupInt+0x134>)
    74b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74b4:	685a      	ldr	r2, [r3, #4]
    74b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74ba:	2134      	movs	r1, #52	; 0x34
    74bc:	fb01 f303 	mul.w	r3, r1, r3
    74c0:	4413      	add	r3, r2
    74c2:	689b      	ldr	r3, [r3, #8]
    74c4:	2b00      	cmp	r3, #0
    74c6:	d02c      	beq.n	7522 <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    74c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74cc:	4a21      	ldr	r2, [pc, #132]	; (7554 <Adc_UpdateStatusReadGroupInt+0x134>)
    74ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74d2:	685a      	ldr	r2, [r3, #4]
    74d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74d8:	2134      	movs	r1, #52	; 0x34
    74da:	fb01 f303 	mul.w	r3, r1, r3
    74de:	4413      	add	r3, r2
    74e0:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    74e2:	2b01      	cmp	r3, #1
    74e4:	d128      	bne.n	7538 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    74e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74ea:	4a1a      	ldr	r2, [pc, #104]	; (7554 <Adc_UpdateStatusReadGroupInt+0x134>)
    74ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f0:	685a      	ldr	r2, [r3, #4]
    74f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74f6:	2134      	movs	r1, #52	; 0x34
    74f8:	fb01 f303 	mul.w	r3, r1, r3
    74fc:	4413      	add	r3, r2
    74fe:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7500:	2b01      	cmp	r3, #1
    7502:	d119      	bne.n	7538 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7504:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7508:	4a12      	ldr	r2, [pc, #72]	; (7554 <Adc_UpdateStatusReadGroupInt+0x134>)
    750a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    750e:	685a      	ldr	r2, [r3, #4]
    7510:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7514:	2134      	movs	r1, #52	; 0x34
    7516:	fb01 f303 	mul.w	r3, r1, r3
    751a:	4413      	add	r3, r2
    751c:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    751e:	2b00      	cmp	r3, #0
    7520:	d10a      	bne.n	7538 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7522:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7526:	490c      	ldr	r1, [pc, #48]	; (7558 <Adc_UpdateStatusReadGroupInt+0x138>)
    7528:	4613      	mov	r3, r2
    752a:	009b      	lsls	r3, r3, #2
    752c:	4413      	add	r3, r2
    752e:	009b      	lsls	r3, r3, #2
    7530:	440b      	add	r3, r1
    7532:	2200      	movs	r2, #0
    7534:	601a      	str	r2, [r3, #0]
}
    7536:	e009      	b.n	754c <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7538:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    753c:	4906      	ldr	r1, [pc, #24]	; (7558 <Adc_UpdateStatusReadGroupInt+0x138>)
    753e:	4613      	mov	r3, r2
    7540:	009b      	lsls	r3, r3, #2
    7542:	4413      	add	r3, r2
    7544:	009b      	lsls	r3, r3, #2
    7546:	440b      	add	r3, r1
    7548:	2201      	movs	r2, #1
    754a:	601a      	str	r2, [r3, #0]
}
    754c:	bf00      	nop
    754e:	b004      	add	sp, #16
    7550:	4770      	bx	lr
    7552:	bf00      	nop
    7554:	1fff8ce8 	.word	0x1fff8ce8
    7558:	1fff8cec 	.word	0x1fff8cec

0000755c <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    755c:	b084      	sub	sp, #16
    755e:	4603      	mov	r3, r0
    7560:	460a      	mov	r2, r1
    7562:	f8ad 3006 	strh.w	r3, [sp, #6]
    7566:	4613      	mov	r3, r2
    7568:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    756c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7570:	4a46      	ldr	r2, [pc, #280]	; (768c <Adc_UpdateStatusAfterGetStream+0x130>)
    7572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7576:	68da      	ldr	r2, [r3, #12]
    7578:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    757c:	005b      	lsls	r3, r3, #1
    757e:	4413      	add	r3, r2
    7580:	881b      	ldrh	r3, [r3, #0]
    7582:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7586:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    758a:	4941      	ldr	r1, [pc, #260]	; (7690 <Adc_UpdateStatusAfterGetStream+0x134>)
    758c:	4613      	mov	r3, r2
    758e:	009b      	lsls	r3, r3, #2
    7590:	4413      	add	r3, r2
    7592:	009b      	lsls	r3, r3, #2
    7594:	440b      	add	r3, r1
    7596:	681b      	ldr	r3, [r3, #0]
    7598:	2b02      	cmp	r3, #2
    759a:	d109      	bne.n	75b0 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    759c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75a0:	493b      	ldr	r1, [pc, #236]	; (7690 <Adc_UpdateStatusAfterGetStream+0x134>)
    75a2:	4613      	mov	r3, r2
    75a4:	009b      	lsls	r3, r3, #2
    75a6:	4413      	add	r3, r2
    75a8:	009b      	lsls	r3, r3, #2
    75aa:	440b      	add	r3, r1
    75ac:	2201      	movs	r2, #1
    75ae:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    75b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75b4:	4936      	ldr	r1, [pc, #216]	; (7690 <Adc_UpdateStatusAfterGetStream+0x134>)
    75b6:	4613      	mov	r3, r2
    75b8:	009b      	lsls	r3, r3, #2
    75ba:	4413      	add	r3, r2
    75bc:	009b      	lsls	r3, r3, #2
    75be:	440b      	add	r3, r1
    75c0:	681b      	ldr	r3, [r3, #0]
    75c2:	2b03      	cmp	r3, #3
    75c4:	d15f      	bne.n	7686 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    75c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75ca:	4a30      	ldr	r2, [pc, #192]	; (768c <Adc_UpdateStatusAfterGetStream+0x130>)
    75cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d0:	685a      	ldr	r2, [r3, #4]
    75d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75d6:	2134      	movs	r1, #52	; 0x34
    75d8:	fb01 f303 	mul.w	r3, r1, r3
    75dc:	4413      	add	r3, r2
    75de:	695b      	ldr	r3, [r3, #20]
    75e0:	2b00      	cmp	r3, #0
    75e2:	d150      	bne.n	7686 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    75e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75e8:	4a28      	ldr	r2, [pc, #160]	; (768c <Adc_UpdateStatusAfterGetStream+0x130>)
    75ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ee:	685a      	ldr	r2, [r3, #4]
    75f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75f4:	2134      	movs	r1, #52	; 0x34
    75f6:	fb01 f303 	mul.w	r3, r1, r3
    75fa:	4413      	add	r3, r2
    75fc:	689b      	ldr	r3, [r3, #8]
    75fe:	2b00      	cmp	r3, #0
    7600:	d02c      	beq.n	765c <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7602:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7606:	4a21      	ldr	r2, [pc, #132]	; (768c <Adc_UpdateStatusAfterGetStream+0x130>)
    7608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    760c:	685a      	ldr	r2, [r3, #4]
    760e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7612:	2134      	movs	r1, #52	; 0x34
    7614:	fb01 f303 	mul.w	r3, r1, r3
    7618:	4413      	add	r3, r2
    761a:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    761c:	2b01      	cmp	r3, #1
    761e:	d128      	bne.n	7672 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7620:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7624:	4a19      	ldr	r2, [pc, #100]	; (768c <Adc_UpdateStatusAfterGetStream+0x130>)
    7626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    762a:	685a      	ldr	r2, [r3, #4]
    762c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7630:	2134      	movs	r1, #52	; 0x34
    7632:	fb01 f303 	mul.w	r3, r1, r3
    7636:	4413      	add	r3, r2
    7638:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    763a:	2b01      	cmp	r3, #1
    763c:	d119      	bne.n	7672 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    763e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7642:	4a12      	ldr	r2, [pc, #72]	; (768c <Adc_UpdateStatusAfterGetStream+0x130>)
    7644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7648:	685a      	ldr	r2, [r3, #4]
    764a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    764e:	2134      	movs	r1, #52	; 0x34
    7650:	fb01 f303 	mul.w	r3, r1, r3
    7654:	4413      	add	r3, r2
    7656:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7658:	2b00      	cmp	r3, #0
    765a:	d10a      	bne.n	7672 <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    765c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7660:	490b      	ldr	r1, [pc, #44]	; (7690 <Adc_UpdateStatusAfterGetStream+0x134>)
    7662:	4613      	mov	r3, r2
    7664:	009b      	lsls	r3, r3, #2
    7666:	4413      	add	r3, r2
    7668:	009b      	lsls	r3, r3, #2
    766a:	440b      	add	r3, r1
    766c:	2200      	movs	r2, #0
    766e:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    7670:	e009      	b.n	7686 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7672:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7676:	4906      	ldr	r1, [pc, #24]	; (7690 <Adc_UpdateStatusAfterGetStream+0x134>)
    7678:	4613      	mov	r3, r2
    767a:	009b      	lsls	r3, r3, #2
    767c:	4413      	add	r3, r2
    767e:	009b      	lsls	r3, r3, #2
    7680:	440b      	add	r3, r1
    7682:	2201      	movs	r2, #1
    7684:	601a      	str	r2, [r3, #0]
}
    7686:	bf00      	nop
    7688:	b004      	add	sp, #16
    768a:	4770      	bx	lr
    768c:	1fff8ce8 	.word	0x1fff8ce8
    7690:	1fff8cec 	.word	0x1fff8cec

00007694 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    7694:	b500      	push	{lr}
    7696:	b085      	sub	sp, #20
    7698:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    769a:	f002 fa97 	bl	9bcc <Adc_GetCoreID>
    769e:	4603      	mov	r3, r0
    76a0:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    76a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76a8:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    76ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76b0:	b2db      	uxtb	r3, r3
    76b2:	4619      	mov	r1, r3
    76b4:	9801      	ldr	r0, [sp, #4]
    76b6:	f7ff fba7 	bl	6e08 <Adc_CheckCurrentCoreId>
    76ba:	4603      	mov	r3, r0
    76bc:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    76c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    76c4:	2b00      	cmp	r3, #0
    76c6:	d12c      	bne.n	7722 <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    76c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76cc:	b2db      	uxtb	r3, r3
    76ce:	4619      	mov	r1, r3
    76d0:	4a16      	ldr	r2, [pc, #88]	; (772c <Adc_Init+0x98>)
    76d2:	9b01      	ldr	r3, [sp, #4]
    76d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    76d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76dc:	b2db      	uxtb	r3, r3
    76de:	4618      	mov	r0, r3
    76e0:	f7ff fb38 	bl	6d54 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    76e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76e8:	b2db      	uxtb	r3, r3
    76ea:	4618      	mov	r0, r3
    76ec:	f7ff fac8 	bl	6c80 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    76f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    76f4:	b2db      	uxtb	r3, r3
    76f6:	461a      	mov	r2, r3
    76f8:	4b0c      	ldr	r3, [pc, #48]	; (772c <Adc_Init+0x98>)
    76fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7704:	4611      	mov	r1, r2
    7706:	4618      	mov	r0, r3
    7708:	f001 ff98 	bl	963c <Adc_Ipw_Init>
    770c:	4603      	mov	r3, r0
    770e:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7712:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7716:	2b01      	cmp	r3, #1
    7718:	d103      	bne.n	7722 <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    771a:	212b      	movs	r1, #43	; 0x2b
    771c:	2000      	movs	r0, #0
    771e:	f7ff f87d 	bl	681c <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    7722:	bf00      	nop
    7724:	b005      	add	sp, #20
    7726:	f85d fb04 	ldr.w	pc, [sp], #4
    772a:	bf00      	nop
    772c:	1fff8ce8 	.word	0x1fff8ce8

00007730 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    7730:	b500      	push	{lr}
    7732:	b085      	sub	sp, #20
    7734:	4603      	mov	r3, r0
    7736:	9100      	str	r1, [sp, #0]
    7738:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    773c:	2301      	movs	r3, #1
    773e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    7742:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7746:	4618      	mov	r0, r3
    7748:	f7ff f98c 	bl	6a64 <Adc_ValidateSetupBufferNotBusy>
    774c:	4603      	mov	r3, r0
    774e:	2b00      	cmp	r3, #0
    7750:	d10d      	bne.n	776e <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    7752:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7756:	4909      	ldr	r1, [pc, #36]	; (777c <Adc_SetupResultBuffer+0x4c>)
    7758:	4613      	mov	r3, r2
    775a:	009b      	lsls	r3, r3, #2
    775c:	4413      	add	r3, r2
    775e:	009b      	lsls	r3, r3, #2
    7760:	440b      	add	r3, r1
    7762:	330c      	adds	r3, #12
    7764:	9a00      	ldr	r2, [sp, #0]
    7766:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    7768:	2300      	movs	r3, #0
    776a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    776e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7772:	4618      	mov	r0, r3
    7774:	b005      	add	sp, #20
    7776:	f85d fb04 	ldr.w	pc, [sp], #4
    777a:	bf00      	nop
    777c:	1fff8cec 	.word	0x1fff8cec

00007780 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    7780:	b500      	push	{lr}
    7782:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7784:	2300      	movs	r3, #0
    7786:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    778a:	f002 fa1f 	bl	9bcc <Adc_GetCoreID>
    778e:	4603      	mov	r3, r0
    7790:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7794:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7798:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    779c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77a0:	b2db      	uxtb	r3, r3
    77a2:	461a      	mov	r2, r3
    77a4:	4b2f      	ldr	r3, [pc, #188]	; (7864 <Adc_DeInit+0xe4>)
    77a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
    77ae:	4611      	mov	r1, r2
    77b0:	4618      	mov	r0, r3
    77b2:	f7ff fb29 	bl	6e08 <Adc_CheckCurrentCoreId>
    77b6:	4603      	mov	r3, r0
    77b8:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    77bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    77c0:	2b00      	cmp	r3, #0
    77c2:	d14b      	bne.n	785c <Adc_DeInit+0xdc>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    77c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77c8:	b2db      	uxtb	r3, r3
    77ca:	4618      	mov	r0, r3
    77cc:	f7ff f8fc 	bl	69c8 <Adc_ValidateDeInitNotBusy>
    77d0:	4603      	mov	r3, r0
    77d2:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    77d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    77da:	2b00      	cmp	r3, #0
    77dc:	d13e      	bne.n	785c <Adc_DeInit+0xdc>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    77de:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77e2:	b2db      	uxtb	r3, r3
    77e4:	4618      	mov	r0, r3
    77e6:	f001 ff6e 	bl	96c6 <Adc_Ipw_DeInit>
    77ea:	4603      	mov	r3, r0
    77ec:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    77f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    77f4:	2b01      	cmp	r3, #1
    77f6:	d103      	bne.n	7800 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    77f8:	212b      	movs	r1, #43	; 0x2b
    77fa:	2001      	movs	r0, #1
    77fc:	f7ff f80e 	bl	681c <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7800:	2300      	movs	r3, #0
    7802:	f88d 3007 	strb.w	r3, [sp, #7]
    7806:	e01d      	b.n	7844 <Adc_DeInit+0xc4>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7808:	f89d 3002 	ldrb.w	r3, [sp, #2]
    780c:	b2db      	uxtb	r3, r3
    780e:	461a      	mov	r2, r3
    7810:	4b14      	ldr	r3, [pc, #80]	; (7864 <Adc_DeInit+0xe4>)
    7812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7816:	681a      	ldr	r2, [r3, #0]
    7818:	f89d 3007 	ldrb.w	r3, [sp, #7]
    781c:	4413      	add	r3, r2
    781e:	7f9b      	ldrb	r3, [r3, #30]
    7820:	2b01      	cmp	r3, #1
    7822:	d10a      	bne.n	783a <Adc_DeInit+0xba>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7824:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7828:	490f      	ldr	r1, [pc, #60]	; (7868 <Adc_DeInit+0xe8>)
    782a:	4613      	mov	r3, r2
    782c:	005b      	lsls	r3, r3, #1
    782e:	4413      	add	r3, r2
    7830:	005b      	lsls	r3, r3, #1
    7832:	440b      	add	r3, r1
    7834:	3304      	adds	r3, #4
    7836:	2200      	movs	r2, #0
    7838:	701a      	strb	r2, [r3, #0]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    783a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    783e:	3301      	adds	r3, #1
    7840:	f88d 3007 	strb.w	r3, [sp, #7]
    7844:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7848:	2b01      	cmp	r3, #1
    784a:	d9dd      	bls.n	7808 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    784c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7850:	b2db      	uxtb	r3, r3
    7852:	4619      	mov	r1, r3
    7854:	4b03      	ldr	r3, [pc, #12]	; (7864 <Adc_DeInit+0xe4>)
    7856:	2200      	movs	r2, #0
    7858:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    785c:	bf00      	nop
    785e:	b003      	add	sp, #12
    7860:	f85d fb04 	ldr.w	pc, [sp], #4
    7864:	1fff8ce8 	.word	0x1fff8ce8
    7868:	1fff8d00 	.word	0x1fff8d00

0000786c <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    786c:	b500      	push	{lr}
    786e:	b085      	sub	sp, #20
    7870:	4603      	mov	r3, r0
    7872:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7876:	2300      	movs	r3, #0
    7878:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    787c:	2300      	movs	r3, #0
    787e:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7882:	f002 f9a3 	bl	9bcc <Adc_GetCoreID>
    7886:	4603      	mov	r3, r0
    7888:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    788c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7890:	b2db      	uxtb	r3, r3
    7892:	461a      	mov	r2, r3
    7894:	4b1a      	ldr	r3, [pc, #104]	; (7900 <Adc_StartGroupConversion+0x94>)
    7896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    789a:	68da      	ldr	r2, [r3, #12]
    789c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78a0:	005b      	lsls	r3, r3, #1
    78a2:	4413      	add	r3, r2
    78a4:	881b      	ldrh	r3, [r3, #0]
    78a6:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    78aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78ae:	b2da      	uxtb	r2, r3
    78b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78b4:	4611      	mov	r1, r2
    78b6:	4618      	mov	r0, r3
    78b8:	f7ff f8f8 	bl	6aac <Adc_ValidateStateStartGroupConvNotBusy>
    78bc:	4603      	mov	r3, r0
    78be:	2b00      	cmp	r3, #0
    78c0:	d11a      	bne.n	78f8 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    78c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78c6:	b2db      	uxtb	r3, r3
    78c8:	461a      	mov	r2, r3
    78ca:	4b0d      	ldr	r3, [pc, #52]	; (7900 <Adc_StartGroupConversion+0x94>)
    78cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78d0:	685a      	ldr	r2, [r3, #4]
    78d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78d6:	2134      	movs	r1, #52	; 0x34
    78d8:	fb01 f303 	mul.w	r3, r1, r3
    78dc:	4413      	add	r3, r2
    78de:	789b      	ldrb	r3, [r3, #2]
    78e0:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    78e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78e8:	b2da      	uxtb	r2, r3
    78ea:	f89d 100d 	ldrb.w	r1, [sp, #13]
    78ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78f2:	4618      	mov	r0, r3
    78f4:	f7ff fabb 	bl	6e6e <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    78f8:	bf00      	nop
    78fa:	b005      	add	sp, #20
    78fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7900:	1fff8ce8 	.word	0x1fff8ce8

00007904 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7904:	b500      	push	{lr}
    7906:	b085      	sub	sp, #20
    7908:	4603      	mov	r3, r0
    790a:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    790e:	2300      	movs	r3, #0
    7910:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7914:	2300      	movs	r3, #0
    7916:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    791a:	f002 f957 	bl	9bcc <Adc_GetCoreID>
    791e:	4603      	mov	r3, r0
    7920:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    7924:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7928:	b2da      	uxtb	r2, r3
    792a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    792e:	4619      	mov	r1, r3
    7930:	2003      	movs	r0, #3
    7932:	f7ff f933 	bl	6b9c <Adc_ValidateStateNotIdle>
    7936:	4603      	mov	r3, r0
    7938:	2b00      	cmp	r3, #0
    793a:	d129      	bne.n	7990 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    793c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7940:	b2db      	uxtb	r3, r3
    7942:	461a      	mov	r2, r3
    7944:	4b14      	ldr	r3, [pc, #80]	; (7998 <Adc_StopGroupConversion+0x94>)
    7946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    794a:	68da      	ldr	r2, [r3, #12]
    794c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7950:	005b      	lsls	r3, r3, #1
    7952:	4413      	add	r3, r2
    7954:	881b      	ldrh	r3, [r3, #0]
    7956:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    795a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    795e:	b2db      	uxtb	r3, r3
    7960:	461a      	mov	r2, r3
    7962:	4b0d      	ldr	r3, [pc, #52]	; (7998 <Adc_StopGroupConversion+0x94>)
    7964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7968:	685a      	ldr	r2, [r3, #4]
    796a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    796e:	2134      	movs	r1, #52	; 0x34
    7970:	fb01 f303 	mul.w	r3, r1, r3
    7974:	4413      	add	r3, r2
    7976:	789b      	ldrb	r3, [r3, #2]
    7978:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    797c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7980:	b2da      	uxtb	r2, r3
    7982:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7986:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    798a:	4618      	mov	r0, r3
    798c:	f7ff fb62 	bl	7054 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7990:	bf00      	nop
    7992:	b005      	add	sp, #20
    7994:	f85d fb04 	ldr.w	pc, [sp], #4
    7998:	1fff8ce8 	.word	0x1fff8ce8

0000799c <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    799c:	b500      	push	{lr}
    799e:	b085      	sub	sp, #20
    79a0:	4603      	mov	r3, r0
    79a2:	9100      	str	r1, [sp, #0]
    79a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    79a8:	2301      	movs	r3, #1
    79aa:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    79ae:	2301      	movs	r3, #1
    79b0:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    79b4:	f002 f90a 	bl	9bcc <Adc_GetCoreID>
    79b8:	4603      	mov	r3, r0
    79ba:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    79be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    79c2:	b2da      	uxtb	r2, r3
    79c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79c8:	4619      	mov	r1, r3
    79ca:	2004      	movs	r0, #4
    79cc:	f7ff f8e6 	bl	6b9c <Adc_ValidateStateNotIdle>
    79d0:	4603      	mov	r3, r0
    79d2:	2b00      	cmp	r3, #0
    79d4:	d121      	bne.n	7a1a <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    79d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    79da:	b2db      	uxtb	r3, r3
    79dc:	f10d 020d 	add.w	r2, sp, #13
    79e0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    79e4:	9900      	ldr	r1, [sp, #0]
    79e6:	f002 f846 	bl	9a76 <Adc_Ipw_ReadGroup>
    79ea:	4603      	mov	r3, r0
    79ec:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    79f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79f4:	2b00      	cmp	r3, #0
    79f6:	d006      	beq.n	7a06 <Adc_ReadGroup+0x6a>
    79f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    79fc:	f083 0301 	eor.w	r3, r3, #1
    7a00:	b2db      	uxtb	r3, r3
    7a02:	2b00      	cmp	r3, #0
    7a04:	d009      	beq.n	7a1a <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7a06:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a0e:	b2da      	uxtb	r2, r3
    7a10:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a14:	4618      	mov	r0, r3
    7a16:	f7ff fbd3 	bl	71c0 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7a1e:	4618      	mov	r0, r3
    7a20:	b005      	add	sp, #20
    7a22:	f85d fb04 	ldr.w	pc, [sp], #4

00007a26 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7a26:	b084      	sub	sp, #16
    7a28:	4603      	mov	r3, r0
    7a2a:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7a2e:	2300      	movs	r3, #0
    7a30:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7a32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7a36:	4906      	ldr	r1, [pc, #24]	; (7a50 <Adc_GetGroupStatus+0x2a>)
    7a38:	4613      	mov	r3, r2
    7a3a:	009b      	lsls	r3, r3, #2
    7a3c:	4413      	add	r3, r2
    7a3e:	009b      	lsls	r3, r3, #2
    7a40:	440b      	add	r3, r1
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7a46:	9b03      	ldr	r3, [sp, #12]
}
    7a48:	4618      	mov	r0, r3
    7a4a:	b004      	add	sp, #16
    7a4c:	4770      	bx	lr
    7a4e:	bf00      	nop
    7a50:	1fff8cec 	.word	0x1fff8cec

00007a54 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7a54:	b500      	push	{lr}
    7a56:	b085      	sub	sp, #20
    7a58:	4603      	mov	r3, r0
    7a5a:	9100      	str	r1, [sp, #0]
    7a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7a60:	f002 f8b4 	bl	9bcc <Adc_GetCoreID>
    7a64:	4603      	mov	r3, r0
    7a66:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7a6a:	2300      	movs	r3, #0
    7a6c:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7a70:	2300      	movs	r3, #0
    7a72:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7a76:	2300      	movs	r3, #0
    7a78:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7a7c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7a80:	b2da      	uxtb	r2, r3
    7a82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a86:	4619      	mov	r1, r3
    7a88:	200b      	movs	r0, #11
    7a8a:	f7ff f887 	bl	6b9c <Adc_ValidateStateNotIdle>
    7a8e:	4603      	mov	r3, r0
    7a90:	2b00      	cmp	r3, #0
    7a92:	f040 808e 	bne.w	7bb2 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7a96:	9b00      	ldr	r3, [sp, #0]
    7a98:	2200      	movs	r2, #0
    7a9a:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7a9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7aa0:	4948      	ldr	r1, [pc, #288]	; (7bc4 <Adc_GetStreamLastPointer+0x170>)
    7aa2:	4613      	mov	r3, r2
    7aa4:	009b      	lsls	r3, r3, #2
    7aa6:	4413      	add	r3, r2
    7aa8:	009b      	lsls	r3, r3, #2
    7aaa:	440b      	add	r3, r1
    7aac:	681b      	ldr	r3, [r3, #0]
    7aae:	2b00      	cmp	r3, #0
    7ab0:	f000 8082 	beq.w	7bb8 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7ab4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7ab8:	4942      	ldr	r1, [pc, #264]	; (7bc4 <Adc_GetStreamLastPointer+0x170>)
    7aba:	4613      	mov	r3, r2
    7abc:	009b      	lsls	r3, r3, #2
    7abe:	4413      	add	r3, r2
    7ac0:	009b      	lsls	r3, r3, #2
    7ac2:	440b      	add	r3, r1
    7ac4:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7ac6:	2b01      	cmp	r3, #1
    7ac8:	d076      	beq.n	7bb8 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7aca:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ace:	b2db      	uxtb	r3, r3
    7ad0:	461a      	mov	r2, r3
    7ad2:	4b3d      	ldr	r3, [pc, #244]	; (7bc8 <Adc_GetStreamLastPointer+0x174>)
    7ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ad8:	68da      	ldr	r2, [r3, #12]
    7ada:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ade:	005b      	lsls	r3, r3, #1
    7ae0:	4413      	add	r3, r2
    7ae2:	881b      	ldrh	r3, [r3, #0]
    7ae4:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7ae8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7aec:	4935      	ldr	r1, [pc, #212]	; (7bc4 <Adc_GetStreamLastPointer+0x170>)
    7aee:	4613      	mov	r3, r2
    7af0:	009b      	lsls	r3, r3, #2
    7af2:	4413      	add	r3, r2
    7af4:	009b      	lsls	r3, r3, #2
    7af6:	440b      	add	r3, r1
    7af8:	3308      	adds	r3, #8
    7afa:	881b      	ldrh	r3, [r3, #0]
    7afc:	b29b      	uxth	r3, r3
    7afe:	2b00      	cmp	r3, #0
    7b00:	d123      	bne.n	7b4a <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7b02:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b06:	b2db      	uxtb	r3, r3
    7b08:	461a      	mov	r2, r3
    7b0a:	4b2f      	ldr	r3, [pc, #188]	; (7bc8 <Adc_GetStreamLastPointer+0x174>)
    7b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b10:	685a      	ldr	r2, [r3, #4]
    7b12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7b16:	2134      	movs	r1, #52	; 0x34
    7b18:	fb01 f303 	mul.w	r3, r1, r3
    7b1c:	4413      	add	r3, r2
    7b1e:	8b9b      	ldrh	r3, [r3, #28]
    7b20:	3b01      	subs	r3, #1
    7b22:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7b26:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b2a:	b2db      	uxtb	r3, r3
    7b2c:	461a      	mov	r2, r3
    7b2e:	4b26      	ldr	r3, [pc, #152]	; (7bc8 <Adc_GetStreamLastPointer+0x174>)
    7b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b34:	685a      	ldr	r2, [r3, #4]
    7b36:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7b3a:	2134      	movs	r1, #52	; 0x34
    7b3c:	fb01 f303 	mul.w	r3, r1, r3
    7b40:	4413      	add	r3, r2
    7b42:	8b9b      	ldrh	r3, [r3, #28]
    7b44:	f8ad 300e 	strh.w	r3, [sp, #14]
    7b48:	e019      	b.n	7b7e <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7b4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b4e:	491d      	ldr	r1, [pc, #116]	; (7bc4 <Adc_GetStreamLastPointer+0x170>)
    7b50:	4613      	mov	r3, r2
    7b52:	009b      	lsls	r3, r3, #2
    7b54:	4413      	add	r3, r2
    7b56:	009b      	lsls	r3, r3, #2
    7b58:	440b      	add	r3, r1
    7b5a:	3308      	adds	r3, #8
    7b5c:	881b      	ldrh	r3, [r3, #0]
    7b5e:	b29b      	uxth	r3, r3
    7b60:	3b01      	subs	r3, #1
    7b62:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7b66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b6a:	4916      	ldr	r1, [pc, #88]	; (7bc4 <Adc_GetStreamLastPointer+0x170>)
    7b6c:	4613      	mov	r3, r2
    7b6e:	009b      	lsls	r3, r3, #2
    7b70:	4413      	add	r3, r2
    7b72:	009b      	lsls	r3, r3, #2
    7b74:	440b      	add	r3, r1
    7b76:	3308      	adds	r3, #8
    7b78:	881b      	ldrh	r3, [r3, #0]
    7b7a:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7b7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b82:	4910      	ldr	r1, [pc, #64]	; (7bc4 <Adc_GetStreamLastPointer+0x170>)
    7b84:	4613      	mov	r3, r2
    7b86:	009b      	lsls	r3, r3, #2
    7b88:	4413      	add	r3, r2
    7b8a:	009b      	lsls	r3, r3, #2
    7b8c:	440b      	add	r3, r1
    7b8e:	330c      	adds	r3, #12
    7b90:	681a      	ldr	r2, [r3, #0]
    7b92:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7b96:	005b      	lsls	r3, r3, #1
    7b98:	441a      	add	r2, r3
    7b9a:	9b00      	ldr	r3, [sp, #0]
    7b9c:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7b9e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ba2:	b2da      	uxtb	r2, r3
    7ba4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7ba8:	4611      	mov	r1, r2
    7baa:	4618      	mov	r0, r3
    7bac:	f7ff fcd6 	bl	755c <Adc_UpdateStatusAfterGetStream>
    7bb0:	e002      	b.n	7bb8 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7bb2:	9b00      	ldr	r3, [sp, #0]
    7bb4:	2200      	movs	r2, #0
    7bb6:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7bb8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7bbc:	4618      	mov	r0, r3
    7bbe:	b005      	add	sp, #20
    7bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    7bc4:	1fff8cec 	.word	0x1fff8cec
    7bc8:	1fff8ce8 	.word	0x1fff8ce8

00007bcc <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7bcc:	b082      	sub	sp, #8
    7bce:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7bd0:	9b01      	ldr	r3, [sp, #4]
    7bd2:	222b      	movs	r2, #43	; 0x2b
    7bd4:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7bd6:	9b01      	ldr	r3, [sp, #4]
    7bd8:	227b      	movs	r2, #123	; 0x7b
    7bda:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7bdc:	9b01      	ldr	r3, [sp, #4]
    7bde:	2202      	movs	r2, #2
    7be0:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7be2:	9b01      	ldr	r3, [sp, #4]
    7be4:	2200      	movs	r2, #0
    7be6:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7be8:	9b01      	ldr	r3, [sp, #4]
    7bea:	2200      	movs	r2, #0
    7bec:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7bee:	bf00      	nop
    7bf0:	b002      	add	sp, #8
    7bf2:	4770      	bx	lr

00007bf4 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7bf4:	b500      	push	{lr}
    7bf6:	b085      	sub	sp, #20
    7bf8:	4603      	mov	r3, r0
    7bfa:	9100      	str	r1, [sp, #0]
    7bfc:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7c00:	2300      	movs	r3, #0
    7c02:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7c06:	f001 ffe1 	bl	9bcc <Adc_GetCoreID>
    7c0a:	4603      	mov	r3, r0
    7c0c:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7c10:	9b00      	ldr	r3, [sp, #0]
    7c12:	2201      	movs	r2, #1
    7c14:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c1a:	2129      	movs	r1, #41	; 0x29
    7c1c:	4618      	mov	r0, r3
    7c1e:	f7fe fe12 	bl	6846 <Adc_ValidateNotBusyNoQueue>
    7c22:	4603      	mov	r3, r0
    7c24:	2b00      	cmp	r3, #0
    7c26:	d115      	bne.n	7c54 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7c28:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7c2c:	b2db      	uxtb	r3, r3
    7c2e:	4619      	mov	r1, r3
    7c30:	2029      	movs	r0, #41	; 0x29
    7c32:	f7fe fe77 	bl	6924 <Adc_ValidateCheckGroupNotConversion>
    7c36:	4603      	mov	r3, r0
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d10b      	bne.n	7c54 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7c3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7c40:	b2da      	uxtb	r2, r3
    7c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c46:	9900      	ldr	r1, [sp, #0]
    7c48:	4618      	mov	r0, r3
    7c4a:	f001 ff95 	bl	9b78 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7c4e:	2301      	movs	r3, #1
    7c50:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7c54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d007      	beq.n	7c6c <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7c5c:	9b00      	ldr	r3, [sp, #0]
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	2b01      	cmp	r3, #1
    7c62:	d103      	bne.n	7c6c <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7c64:	212b      	movs	r1, #43	; 0x2b
    7c66:	2029      	movs	r0, #41	; 0x29
    7c68:	f7fe fdd8 	bl	681c <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7c6c:	bf00      	nop
    7c6e:	b005      	add	sp, #20
    7c70:	f85d fb04 	ldr.w	pc, [sp], #4

00007c74 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7c74:	b086      	sub	sp, #24
    7c76:	9003      	str	r0, [sp, #12]
    7c78:	9102      	str	r1, [sp, #8]
    7c7a:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7c7c:	9b03      	ldr	r3, [sp, #12]
    7c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7c82:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7c84:	9b02      	ldr	r3, [sp, #8]
    7c86:	43db      	mvns	r3, r3
    7c88:	9a05      	ldr	r2, [sp, #20]
    7c8a:	4013      	ands	r3, r2
    7c8c:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7c8e:	9a05      	ldr	r2, [sp, #20]
    7c90:	9b01      	ldr	r3, [sp, #4]
    7c92:	4313      	orrs	r3, r2
    7c94:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7c96:	9b03      	ldr	r3, [sp, #12]
    7c98:	9a05      	ldr	r2, [sp, #20]
    7c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7c9e:	bf00      	nop
    7ca0:	b006      	add	sp, #24
    7ca2:	4770      	bx	lr

00007ca4 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7ca4:	b086      	sub	sp, #24
    7ca6:	9003      	str	r0, [sp, #12]
    7ca8:	9102      	str	r1, [sp, #8]
    7caa:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7cac:	9b03      	ldr	r3, [sp, #12]
    7cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7cb0:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7cb2:	9b05      	ldr	r3, [sp, #20]
    7cb4:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7cb8:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7cba:	9b02      	ldr	r3, [sp, #8]
    7cbc:	015b      	lsls	r3, r3, #5
    7cbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7cc2:	9a05      	ldr	r2, [sp, #20]
    7cc4:	4313      	orrs	r3, r2
    7cc6:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7cc8:	9b01      	ldr	r3, [sp, #4]
    7cca:	f003 0303 	and.w	r3, r3, #3
    7cce:	9a05      	ldr	r2, [sp, #20]
    7cd0:	4313      	orrs	r3, r2
    7cd2:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7cd4:	9b03      	ldr	r3, [sp, #12]
    7cd6:	9a05      	ldr	r2, [sp, #20]
    7cd8:	641a      	str	r2, [r3, #64]	; 0x40
}
    7cda:	bf00      	nop
    7cdc:	b006      	add	sp, #24
    7cde:	4770      	bx	lr

00007ce0 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7ce0:	b084      	sub	sp, #16
    7ce2:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7ce4:	2300      	movs	r3, #0
    7ce6:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7ce8:	9b01      	ldr	r3, [sp, #4]
    7cea:	095b      	lsrs	r3, r3, #5
    7cec:	f003 0303 	and.w	r3, r3, #3
    7cf0:	2b03      	cmp	r3, #3
    7cf2:	d00c      	beq.n	7d0e <Adc_HwAcc_GetClockDivide+0x2e>
    7cf4:	2b03      	cmp	r3, #3
    7cf6:	d80d      	bhi.n	7d14 <Adc_HwAcc_GetClockDivide+0x34>
    7cf8:	2b01      	cmp	r3, #1
    7cfa:	d002      	beq.n	7d02 <Adc_HwAcc_GetClockDivide+0x22>
    7cfc:	2b02      	cmp	r3, #2
    7cfe:	d003      	beq.n	7d08 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7d00:	e008      	b.n	7d14 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7d02:	2301      	movs	r3, #1
    7d04:	9303      	str	r3, [sp, #12]
            break;
    7d06:	e006      	b.n	7d16 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7d08:	2302      	movs	r3, #2
    7d0a:	9303      	str	r3, [sp, #12]
            break;
    7d0c:	e003      	b.n	7d16 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7d0e:	2303      	movs	r3, #3
    7d10:	9303      	str	r3, [sp, #12]
            break;
    7d12:	e000      	b.n	7d16 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7d14:	bf00      	nop
    }
    return ReturnValue;
    7d16:	9b03      	ldr	r3, [sp, #12]
}
    7d18:	4618      	mov	r0, r3
    7d1a:	b004      	add	sp, #16
    7d1c:	4770      	bx	lr

00007d1e <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7d1e:	b084      	sub	sp, #16
    7d20:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7d22:	2300      	movs	r3, #0
    7d24:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7d26:	9b01      	ldr	r3, [sp, #4]
    7d28:	f003 0303 	and.w	r3, r3, #3
    7d2c:	2b03      	cmp	r3, #3
    7d2e:	d00c      	beq.n	7d4a <Adc_HwAcc_GetInputClock+0x2c>
    7d30:	2b03      	cmp	r3, #3
    7d32:	d80d      	bhi.n	7d50 <Adc_HwAcc_GetInputClock+0x32>
    7d34:	2b01      	cmp	r3, #1
    7d36:	d002      	beq.n	7d3e <Adc_HwAcc_GetInputClock+0x20>
    7d38:	2b02      	cmp	r3, #2
    7d3a:	d003      	beq.n	7d44 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7d3c:	e008      	b.n	7d50 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7d3e:	2301      	movs	r3, #1
    7d40:	9303      	str	r3, [sp, #12]
            break;
    7d42:	e006      	b.n	7d52 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7d44:	2302      	movs	r3, #2
    7d46:	9303      	str	r3, [sp, #12]
            break;
    7d48:	e003      	b.n	7d52 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7d4a:	2303      	movs	r3, #3
    7d4c:	9303      	str	r3, [sp, #12]
            break;
    7d4e:	e000      	b.n	7d52 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7d50:	bf00      	nop
    }
    return ReturnValue;
    7d52:	9b03      	ldr	r3, [sp, #12]
}
    7d54:	4618      	mov	r0, r3
    7d56:	b004      	add	sp, #16
    7d58:	4770      	bx	lr

00007d5a <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7d5a:	b084      	sub	sp, #16
    7d5c:	9001      	str	r0, [sp, #4]
    7d5e:	460b      	mov	r3, r1
    7d60:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7d64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d002      	beq.n	7d72 <Adc_HwAcc_SetSampleTime+0x18>
    7d6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7d70:	e000      	b.n	7d74 <Adc_HwAcc_SetSampleTime+0x1a>
    7d72:	2301      	movs	r3, #1
    7d74:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7d78:	9b01      	ldr	r3, [sp, #4]
    7d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7d7c:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7d7e:	9b02      	ldr	r3, [sp, #8]
    7d80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7d84:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7d86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d8a:	9a02      	ldr	r2, [sp, #8]
    7d8c:	4313      	orrs	r3, r2
    7d8e:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7d90:	9b01      	ldr	r3, [sp, #4]
    7d92:	9a02      	ldr	r2, [sp, #8]
    7d94:	645a      	str	r2, [r3, #68]	; 0x44
}
    7d96:	bf00      	nop
    7d98:	b004      	add	sp, #16
    7d9a:	4770      	bx	lr

00007d9c <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7d9c:	b086      	sub	sp, #24
    7d9e:	9003      	str	r0, [sp, #12]
    7da0:	460b      	mov	r3, r1
    7da2:	9201      	str	r2, [sp, #4]
    7da4:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7da8:	9b03      	ldr	r3, [sp, #12]
    7daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7dae:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7db0:	9b05      	ldr	r3, [sp, #20]
    7db2:	f023 0307 	bic.w	r3, r3, #7
    7db6:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7db8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	d001      	beq.n	7dc4 <Adc_HwAcc_SetAveraging+0x28>
    7dc0:	2304      	movs	r3, #4
    7dc2:	e000      	b.n	7dc6 <Adc_HwAcc_SetAveraging+0x2a>
    7dc4:	2300      	movs	r3, #0
    7dc6:	9a05      	ldr	r2, [sp, #20]
    7dc8:	4313      	orrs	r3, r2
    7dca:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7dcc:	9b01      	ldr	r3, [sp, #4]
    7dce:	f003 0303 	and.w	r3, r3, #3
    7dd2:	9a05      	ldr	r2, [sp, #20]
    7dd4:	4313      	orrs	r3, r2
    7dd6:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7dd8:	9b03      	ldr	r3, [sp, #12]
    7dda:	9a05      	ldr	r2, [sp, #20]
    7ddc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7de0:	bf00      	nop
    7de2:	b006      	add	sp, #24
    7de4:	4770      	bx	lr

00007de6 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    7de6:	b084      	sub	sp, #16
    7de8:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    7dea:	2300      	movs	r3, #0
    7dec:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7dee:	9b01      	ldr	r3, [sp, #4]
    7df0:	f003 0303 	and.w	r3, r3, #3
    7df4:	2b03      	cmp	r3, #3
    7df6:	d00c      	beq.n	7e12 <Adc_HwAcc_GetAverageSelect+0x2c>
    7df8:	2b03      	cmp	r3, #3
    7dfa:	d80d      	bhi.n	7e18 <Adc_HwAcc_GetAverageSelect+0x32>
    7dfc:	2b01      	cmp	r3, #1
    7dfe:	d002      	beq.n	7e06 <Adc_HwAcc_GetAverageSelect+0x20>
    7e00:	2b02      	cmp	r3, #2
    7e02:	d003      	beq.n	7e0c <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7e04:	e008      	b.n	7e18 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    7e06:	2301      	movs	r3, #1
    7e08:	9303      	str	r3, [sp, #12]
            break;
    7e0a:	e006      	b.n	7e1a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7e0c:	2302      	movs	r3, #2
    7e0e:	9303      	str	r3, [sp, #12]
            break;
    7e10:	e003      	b.n	7e1a <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7e12:	2303      	movs	r3, #3
    7e14:	9303      	str	r3, [sp, #12]
            break;
    7e16:	e000      	b.n	7e1a <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7e18:	bf00      	nop
    }
    return ReturnValue;
    7e1a:	9b03      	ldr	r3, [sp, #12]
}
    7e1c:	4618      	mov	r0, r3
    7e1e:	b004      	add	sp, #16
    7e20:	4770      	bx	lr

00007e22 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7e22:	b084      	sub	sp, #16
    7e24:	9001      	str	r0, [sp, #4]
    7e26:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7e28:	9b01      	ldr	r3, [sp, #4]
    7e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7e2e:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7e30:	9b03      	ldr	r3, [sp, #12]
    7e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7e36:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7e38:	9b00      	ldr	r3, [sp, #0]
    7e3a:	019b      	lsls	r3, r3, #6
    7e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7e40:	9a03      	ldr	r2, [sp, #12]
    7e42:	4313      	orrs	r3, r2
    7e44:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7e46:	9b01      	ldr	r3, [sp, #4]
    7e48:	9a03      	ldr	r2, [sp, #12]
    7e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7e4e:	bf00      	nop
    7e50:	b004      	add	sp, #16
    7e52:	4770      	bx	lr

00007e54 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7e54:	b084      	sub	sp, #16
    7e56:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7e58:	2300      	movs	r3, #0
    7e5a:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7e5c:	9b01      	ldr	r3, [sp, #4]
    7e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7e62:	2b00      	cmp	r3, #0
    7e64:	d001      	beq.n	7e6a <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7e66:	2301      	movs	r3, #1
    7e68:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7e6a:	9b03      	ldr	r3, [sp, #12]
}
    7e6c:	4618      	mov	r0, r3
    7e6e:	b004      	add	sp, #16
    7e70:	4770      	bx	lr

00007e72 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7e72:	b086      	sub	sp, #24
    7e74:	9003      	str	r0, [sp, #12]
    7e76:	9201      	str	r2, [sp, #4]
    7e78:	461a      	mov	r2, r3
    7e7a:	460b      	mov	r3, r1
    7e7c:	f88d 300b 	strb.w	r3, [sp, #11]
    7e80:	4613      	mov	r3, r2
    7e82:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7e86:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7e8a:	9b03      	ldr	r3, [sp, #12]
    7e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e90:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7e92:	9b05      	ldr	r3, [sp, #20]
    7e94:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7e98:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7e9a:	9b01      	ldr	r3, [sp, #4]
    7e9c:	f003 031f 	and.w	r3, r3, #31
    7ea0:	9a05      	ldr	r2, [sp, #20]
    7ea2:	4313      	orrs	r3, r2
    7ea4:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7ea6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7eaa:	2b00      	cmp	r3, #0
    7eac:	d001      	beq.n	7eb2 <Adc_HwAcc_SetChannel+0x40>
    7eae:	2340      	movs	r3, #64	; 0x40
    7eb0:	e000      	b.n	7eb4 <Adc_HwAcc_SetChannel+0x42>
    7eb2:	2300      	movs	r3, #0
    7eb4:	9a05      	ldr	r2, [sp, #20]
    7eb6:	4313      	orrs	r3, r2
    7eb8:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7eba:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7ebe:	9b03      	ldr	r3, [sp, #12]
    7ec0:	9905      	ldr	r1, [sp, #20]
    7ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7ec6:	bf00      	nop
    7ec8:	b006      	add	sp, #24
    7eca:	4770      	bx	lr

00007ecc <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7ecc:	b082      	sub	sp, #8
    7ece:	9001      	str	r0, [sp, #4]
    7ed0:	460b      	mov	r3, r1
    7ed2:	f8ad 3002 	strh.w	r3, [sp, #2]
    7ed6:	4613      	mov	r3, r2
    7ed8:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7edc:	f8bd 3000 	ldrh.w	r3, [sp]
    7ee0:	b2da      	uxtb	r2, r3
    7ee2:	9b01      	ldr	r3, [sp, #4]
    7ee4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    7ee8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7ef0:	9b01      	ldr	r3, [sp, #4]
    7ef2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    7ef6:	bf00      	nop
    7ef8:	b002      	add	sp, #8
    7efa:	4770      	bx	lr

00007efc <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7efc:	b082      	sub	sp, #8
    7efe:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7f00:	9b01      	ldr	r3, [sp, #4]
    7f02:	099b      	lsrs	r3, r3, #6
    7f04:	f003 0301 	and.w	r3, r3, #1
    7f08:	2b00      	cmp	r3, #0
    7f0a:	bf14      	ite	ne
    7f0c:	2301      	movne	r3, #1
    7f0e:	2300      	moveq	r3, #0
    7f10:	b2db      	uxtb	r3, r3
}
    7f12:	4618      	mov	r0, r3
    7f14:	b002      	add	sp, #8
    7f16:	4770      	bx	lr

00007f18 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7f18:	b082      	sub	sp, #8
    7f1a:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7f1c:	9b01      	ldr	r3, [sp, #4]
    7f1e:	09db      	lsrs	r3, r3, #7
    7f20:	f003 0301 	and.w	r3, r3, #1
    7f24:	2b00      	cmp	r3, #0
    7f26:	bf14      	ite	ne
    7f28:	2301      	movne	r3, #1
    7f2a:	2300      	moveq	r3, #0
    7f2c:	b2db      	uxtb	r3, r3
}
    7f2e:	4618      	mov	r0, r3
    7f30:	b002      	add	sp, #8
    7f32:	4770      	bx	lr

00007f34 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7f34:	b084      	sub	sp, #16
    7f36:	9001      	str	r0, [sp, #4]
    7f38:	460b      	mov	r3, r1
    7f3a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7f3e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7f42:	9b01      	ldr	r3, [sp, #4]
    7f44:	3212      	adds	r2, #18
    7f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7f4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7f56:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7f5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7f5e:	4618      	mov	r0, r3
    7f60:	b004      	add	sp, #16
    7f62:	4770      	bx	lr

00007f64 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7f64:	b500      	push	{lr}
    7f66:	b085      	sub	sp, #20
    7f68:	9003      	str	r0, [sp, #12]
    7f6a:	9102      	str	r1, [sp, #8]
    7f6c:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7f6e:	f003 ffbb 	bl	bee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7f72:	9b02      	ldr	r3, [sp, #8]
    7f74:	7a59      	ldrb	r1, [r3, #9]
    7f76:	9b02      	ldr	r3, [sp, #8]
    7f78:	68db      	ldr	r3, [r3, #12]
    7f7a:	461a      	mov	r2, r3
    7f7c:	9803      	ldr	r0, [sp, #12]
    7f7e:	f7ff ff0d 	bl	7d9c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    7f82:	f003 ffdd 	bl	bf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    7f86:	f003 fe15 	bl	bbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    7f8a:	9901      	ldr	r1, [sp, #4]
    7f8c:	9803      	ldr	r0, [sp, #12]
    7f8e:	f7ff ff48 	bl	7e22 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    7f92:	f003 fe3b 	bl	bc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    7f96:	f003 fb2b 	bl	b5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7f9a:	9b02      	ldr	r3, [sp, #8]
    7f9c:	7a1b      	ldrb	r3, [r3, #8]
    7f9e:	4619      	mov	r1, r3
    7fa0:	9803      	ldr	r0, [sp, #12]
    7fa2:	f7ff feda 	bl	7d5a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    7fa6:	f003 fb4f 	bl	b648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    7faa:	f003 fa7d 	bl	b4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7fae:	9b02      	ldr	r3, [sp, #8]
    7fb0:	6819      	ldr	r1, [r3, #0]
    7fb2:	9b02      	ldr	r3, [sp, #8]
    7fb4:	685b      	ldr	r3, [r3, #4]
    7fb6:	461a      	mov	r2, r3
    7fb8:	9803      	ldr	r0, [sp, #12]
    7fba:	f7ff fe73 	bl	7ca4 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    7fbe:	f003 fa9f 	bl	b500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    7fc2:	bf00      	nop
    7fc4:	b005      	add	sp, #20
    7fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00007fca <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    7fca:	b500      	push	{lr}
    7fcc:	b087      	sub	sp, #28
    7fce:	9001      	str	r0, [sp, #4]
    7fd0:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    7fd2:	4a67      	ldr	r2, [pc, #412]	; (8170 <Adc_Ip_Init+0x1a6>)
    7fd4:	9b01      	ldr	r3, [sp, #4]
    7fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fda:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    7fdc:	2300      	movs	r3, #0
    7fde:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    7fe0:	2300      	movs	r3, #0
    7fe2:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    7fe4:	9b00      	ldr	r3, [sp, #0]
    7fe6:	6819      	ldr	r1, [r3, #0]
    7fe8:	9b00      	ldr	r3, [sp, #0]
    7fea:	689b      	ldr	r3, [r3, #8]
    7fec:	461a      	mov	r2, r3
    7fee:	9802      	ldr	r0, [sp, #8]
    7ff0:	f7ff fe58 	bl	7ca4 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    7ff4:	9b00      	ldr	r3, [sp, #0]
    7ff6:	7b1b      	ldrb	r3, [r3, #12]
    7ff8:	4619      	mov	r1, r3
    7ffa:	9802      	ldr	r0, [sp, #8]
    7ffc:	f7ff fead 	bl	7d5a <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8000:	9b00      	ldr	r3, [sp, #0]
    8002:	7b59      	ldrb	r1, [r3, #13]
    8004:	9b00      	ldr	r3, [sp, #0]
    8006:	691b      	ldr	r3, [r3, #16]
    8008:	461a      	mov	r2, r3
    800a:	9802      	ldr	r0, [sp, #8]
    800c:	f7ff fec6 	bl	7d9c <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    8010:	9b00      	ldr	r3, [sp, #0]
    8012:	695b      	ldr	r3, [r3, #20]
    8014:	4619      	mov	r1, r3
    8016:	9801      	ldr	r0, [sp, #4]
    8018:	f000 f9ea 	bl	83f0 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    801c:	9b04      	ldr	r3, [sp, #16]
    801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8022:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    8024:	9b00      	ldr	r3, [sp, #0]
    8026:	699b      	ldr	r3, [r3, #24]
    8028:	019b      	lsls	r3, r3, #6
    802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    802e:	9a05      	ldr	r2, [sp, #20]
    8030:	4313      	orrs	r3, r2
    8032:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    8034:	9b00      	ldr	r3, [sp, #0]
    8036:	7f1b      	ldrb	r3, [r3, #28]
    8038:	2b00      	cmp	r3, #0
    803a:	d004      	beq.n	8046 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    803c:	9b05      	ldr	r3, [sp, #20]
    803e:	f043 0304 	orr.w	r3, r3, #4
    8042:	9305      	str	r3, [sp, #20]
    8044:	e003      	b.n	804e <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    8046:	9b04      	ldr	r3, [sp, #16]
    8048:	f043 0304 	orr.w	r3, r3, #4
    804c:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    804e:	9b04      	ldr	r3, [sp, #16]
    8050:	f043 0303 	orr.w	r3, r3, #3
    8054:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    8056:	9b00      	ldr	r3, [sp, #0]
    8058:	6a1b      	ldr	r3, [r3, #32]
    805a:	f003 0303 	and.w	r3, r3, #3
    805e:	9a05      	ldr	r2, [sp, #20]
    8060:	4313      	orrs	r3, r2
    8062:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    8064:	9b04      	ldr	r3, [sp, #16]
    8066:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    806a:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    806c:	9b00      	ldr	r3, [sp, #0]
    806e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8072:	2b00      	cmp	r3, #0
    8074:	d001      	beq.n	807a <Adc_Ip_Init+0xb0>
    8076:	2320      	movs	r3, #32
    8078:	e000      	b.n	807c <Adc_Ip_Init+0xb2>
    807a:	2300      	movs	r3, #0
    807c:	9a05      	ldr	r2, [sp, #20]
    807e:	4313      	orrs	r3, r2
    8080:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8082:	9b00      	ldr	r3, [sp, #0]
    8084:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    8088:	2b00      	cmp	r3, #0
    808a:	d001      	beq.n	8090 <Adc_Ip_Init+0xc6>
    808c:	2310      	movs	r3, #16
    808e:	e000      	b.n	8092 <Adc_Ip_Init+0xc8>
    8090:	2300      	movs	r3, #0
    8092:	9a05      	ldr	r2, [sp, #20]
    8094:	4313      	orrs	r3, r2
    8096:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    8098:	9b00      	ldr	r3, [sp, #0]
    809a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    809e:	2b00      	cmp	r3, #0
    80a0:	d001      	beq.n	80a6 <Adc_Ip_Init+0xdc>
    80a2:	2308      	movs	r3, #8
    80a4:	e000      	b.n	80a8 <Adc_Ip_Init+0xde>
    80a6:	2300      	movs	r3, #0
    80a8:	9a05      	ldr	r2, [sp, #20]
    80aa:	4313      	orrs	r3, r2
    80ac:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    80ae:	9b00      	ldr	r3, [sp, #0]
    80b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    80b2:	461a      	mov	r2, r3
    80b4:	9b02      	ldr	r3, [sp, #8]
    80b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    80ba:	9b00      	ldr	r3, [sp, #0]
    80bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    80be:	461a      	mov	r2, r3
    80c0:	9b02      	ldr	r3, [sp, #8]
    80c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    80c6:	9a05      	ldr	r2, [sp, #20]
    80c8:	9904      	ldr	r1, [sp, #16]
    80ca:	9802      	ldr	r0, [sp, #8]
    80cc:	f7ff fdd2 	bl	7c74 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    80d0:	9b00      	ldr	r3, [sp, #0]
    80d2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    80d4:	9b00      	ldr	r3, [sp, #0]
    80d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    80d8:	461a      	mov	r2, r3
    80da:	9802      	ldr	r0, [sp, #8]
    80dc:	f7ff fef6 	bl	7ecc <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    80e0:	9b00      	ldr	r3, [sp, #0]
    80e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    80e6:	4619      	mov	r1, r3
    80e8:	9801      	ldr	r0, [sp, #4]
    80ea:	f000 f955 	bl	8398 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    80ee:	9b00      	ldr	r3, [sp, #0]
    80f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    80f2:	2b00      	cmp	r3, #0
    80f4:	d01c      	beq.n	8130 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    80f6:	2300      	movs	r3, #0
    80f8:	f88d 300f 	strb.w	r3, [sp, #15]
    80fc:	e011      	b.n	8122 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    80fe:	9b00      	ldr	r3, [sp, #0]
    8100:	6b59      	ldr	r1, [r3, #52]	; 0x34
    8102:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8106:	4613      	mov	r3, r2
    8108:	005b      	lsls	r3, r3, #1
    810a:	4413      	add	r3, r2
    810c:	009b      	lsls	r3, r3, #2
    810e:	440b      	add	r3, r1
    8110:	4619      	mov	r1, r3
    8112:	9801      	ldr	r0, [sp, #4]
    8114:	f000 f9c2 	bl	849c <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    8118:	f89d 300f 	ldrb.w	r3, [sp, #15]
    811c:	3301      	adds	r3, #1
    811e:	f88d 300f 	strb.w	r3, [sp, #15]
    8122:	9b00      	ldr	r3, [sp, #0]
    8124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8128:	f89d 200f 	ldrb.w	r2, [sp, #15]
    812c:	429a      	cmp	r2, r3
    812e:	d3e6      	bcc.n	80fe <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    8130:	9b00      	ldr	r3, [sp, #0]
    8132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8134:	490f      	ldr	r1, [pc, #60]	; (8174 <Adc_Ip_Init+0x1aa>)
    8136:	9b01      	ldr	r3, [sp, #4]
    8138:	204c      	movs	r0, #76	; 0x4c
    813a:	fb00 f303 	mul.w	r3, r0, r3
    813e:	440b      	add	r3, r1
    8140:	3308      	adds	r3, #8
    8142:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    8144:	9b00      	ldr	r3, [sp, #0]
    8146:	685a      	ldr	r2, [r3, #4]
    8148:	490a      	ldr	r1, [pc, #40]	; (8174 <Adc_Ip_Init+0x1aa>)
    814a:	9b01      	ldr	r3, [sp, #4]
    814c:	204c      	movs	r0, #76	; 0x4c
    814e:	fb00 f303 	mul.w	r3, r0, r3
    8152:	440b      	add	r3, r1
    8154:	3304      	adds	r3, #4
    8156:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    8158:	4a06      	ldr	r2, [pc, #24]	; (8174 <Adc_Ip_Init+0x1aa>)
    815a:	9b01      	ldr	r3, [sp, #4]
    815c:	214c      	movs	r1, #76	; 0x4c
    815e:	fb01 f303 	mul.w	r3, r1, r3
    8162:	4413      	add	r3, r2
    8164:	2201      	movs	r2, #1
    8166:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    8168:	bf00      	nop
    816a:	b007      	add	sp, #28
    816c:	f85d fb04 	ldr.w	pc, [sp], #4
    8170:	00010838 	.word	0x00010838
    8174:	1fff8d0c 	.word	0x1fff8d0c

00008178 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    8178:	b500      	push	{lr}
    817a:	b0c3      	sub	sp, #268	; 0x10c
    817c:	ab42      	add	r3, sp, #264	; 0x108
    817e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8182:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8184:	2300      	movs	r3, #0
    8186:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    8188:	2303      	movs	r3, #3
    818a:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    818c:	2300      	movs	r3, #0
    818e:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8190:	230c      	movs	r3, #12
    8192:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    8196:	2300      	movs	r3, #0
    8198:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    819c:	2300      	movs	r3, #0
    819e:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    81a0:	2300      	movs	r3, #0
    81a2:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    81a4:	2300      	movs	r3, #0
    81a6:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    81a8:	2300      	movs	r3, #0
    81aa:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    81ae:	2300      	movs	r3, #0
    81b0:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    81b2:	2300      	movs	r3, #0
    81b4:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    81b8:	2300      	movs	r3, #0
    81ba:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    81be:	2300      	movs	r3, #0
    81c0:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    81c4:	2300      	movs	r3, #0
    81c6:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    81ca:	2300      	movs	r3, #0
    81cc:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    81d0:	2300      	movs	r3, #0
    81d2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    81d6:	2304      	movs	r3, #4
    81d8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    81dc:	2300      	movs	r3, #0
    81de:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    81e2:	2310      	movs	r3, #16
    81e4:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    81e8:	2300      	movs	r3, #0
    81ea:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    81ee:	e02b      	b.n	8248 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    81f0:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    81f4:	ab42      	add	r3, sp, #264	; 0x108
    81f6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    81fa:	4613      	mov	r3, r2
    81fc:	005b      	lsls	r3, r3, #1
    81fe:	4413      	add	r3, r2
    8200:	009b      	lsls	r3, r3, #2
    8202:	440b      	add	r3, r1
    8204:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8208:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    820a:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    820e:	ab42      	add	r3, sp, #264	; 0x108
    8210:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8214:	4613      	mov	r3, r2
    8216:	005b      	lsls	r3, r3, #1
    8218:	4413      	add	r3, r2
    821a:	009b      	lsls	r3, r3, #2
    821c:	440b      	add	r3, r1
    821e:	3304      	adds	r3, #4
    8220:	221f      	movs	r2, #31
    8222:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    8224:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8228:	ab42      	add	r3, sp, #264	; 0x108
    822a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    822e:	4613      	mov	r3, r2
    8230:	005b      	lsls	r3, r3, #1
    8232:	4413      	add	r3, r2
    8234:	009b      	lsls	r3, r3, #2
    8236:	440b      	add	r3, r1
    8238:	3308      	adds	r3, #8
    823a:	2200      	movs	r2, #0
    823c:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    823e:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    8242:	3301      	adds	r3, #1
    8244:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    8248:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    824c:	2b0f      	cmp	r3, #15
    824e:	d9cf      	bls.n	81f0 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    8250:	ab02      	add	r3, sp, #8
    8252:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    8254:	2300      	movs	r3, #0
    8256:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    8258:	aa32      	add	r2, sp, #200	; 0xc8
    825a:	ab42      	add	r3, sp, #264	; 0x108
    825c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8260:	4611      	mov	r1, r2
    8262:	6818      	ldr	r0, [r3, #0]
    8264:	f7ff feb1 	bl	7fca <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    8268:	4a07      	ldr	r2, [pc, #28]	; (8288 <Adc_Ip_DeInit+0x110>)
    826a:	ab42      	add	r3, sp, #264	; 0x108
    826c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8270:	681b      	ldr	r3, [r3, #0]
    8272:	214c      	movs	r1, #76	; 0x4c
    8274:	fb01 f303 	mul.w	r3, r1, r3
    8278:	4413      	add	r3, r2
    827a:	2200      	movs	r2, #0
    827c:	701a      	strb	r2, [r3, #0]
}
    827e:	bf00      	nop
    8280:	b043      	add	sp, #268	; 0x10c
    8282:	f85d fb04 	ldr.w	pc, [sp], #4
    8286:	bf00      	nop
    8288:	1fff8d0c 	.word	0x1fff8d0c

0000828c <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    828c:	b500      	push	{lr}
    828e:	b087      	sub	sp, #28
    8290:	9003      	str	r0, [sp, #12]
    8292:	460b      	mov	r3, r1
    8294:	9201      	str	r2, [sp, #4]
    8296:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    829a:	4a0a      	ldr	r2, [pc, #40]	; (82c4 <Adc_Ip_SetAveraging+0x38>)
    829c:	9b03      	ldr	r3, [sp, #12]
    829e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82a2:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    82a4:	f003 fd7c 	bl	bda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    82a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    82ac:	9a01      	ldr	r2, [sp, #4]
    82ae:	4619      	mov	r1, r3
    82b0:	9805      	ldr	r0, [sp, #20]
    82b2:	f7ff fd73 	bl	7d9c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    82b6:	f003 fd9f 	bl	bdf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    82ba:	bf00      	nop
    82bc:	b007      	add	sp, #28
    82be:	f85d fb04 	ldr.w	pc, [sp], #4
    82c2:	bf00      	nop
    82c4:	00010838 	.word	0x00010838

000082c8 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    82c8:	b500      	push	{lr}
    82ca:	b085      	sub	sp, #20
    82cc:	9001      	str	r0, [sp, #4]
    82ce:	460b      	mov	r3, r1
    82d0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    82d4:	4a09      	ldr	r2, [pc, #36]	; (82fc <Adc_Ip_SetSampleTime+0x34>)
    82d6:	9b01      	ldr	r3, [sp, #4]
    82d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82dc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    82de:	f003 f9d9 	bl	b694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    82e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    82e6:	4619      	mov	r1, r3
    82e8:	9803      	ldr	r0, [sp, #12]
    82ea:	f7ff fd36 	bl	7d5a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    82ee:	f003 f9fd 	bl	b6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    82f2:	bf00      	nop
    82f4:	b005      	add	sp, #20
    82f6:	f85d fb04 	ldr.w	pc, [sp], #4
    82fa:	bf00      	nop
    82fc:	00010838 	.word	0x00010838

00008300 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    8300:	b500      	push	{lr}
    8302:	b085      	sub	sp, #20
    8304:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8306:	4a0a      	ldr	r2, [pc, #40]	; (8330 <Adc_Ip_EnableDma+0x30>)
    8308:	9b01      	ldr	r3, [sp, #4]
    830a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    830e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    8310:	f003 fcf4 	bl	bcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    8314:	9b03      	ldr	r3, [sp, #12]
    8316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    831a:	f043 0204 	orr.w	r2, r3, #4
    831e:	9b03      	ldr	r3, [sp, #12]
    8320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    8324:	f003 fd16 	bl	bd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    8328:	bf00      	nop
    832a:	b005      	add	sp, #20
    832c:	f85d fb04 	ldr.w	pc, [sp], #4
    8330:	00010838 	.word	0x00010838

00008334 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    8334:	b500      	push	{lr}
    8336:	b085      	sub	sp, #20
    8338:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    833a:	4a0a      	ldr	r2, [pc, #40]	; (8364 <Adc_Ip_DisableDma+0x30>)
    833c:	9b01      	ldr	r3, [sp, #4]
    833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8342:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    8344:	f003 fb92 	bl	ba6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    8348:	9b03      	ldr	r3, [sp, #12]
    834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    834e:	f023 0204 	bic.w	r2, r3, #4
    8352:	9b03      	ldr	r3, [sp, #12]
    8354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    8358:	f003 fbb4 	bl	bac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    835c:	bf00      	nop
    835e:	b005      	add	sp, #20
    8360:	f85d fb04 	ldr.w	pc, [sp], #4
    8364:	00010838 	.word	0x00010838

00008368 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    8368:	b500      	push	{lr}
    836a:	b085      	sub	sp, #20
    836c:	9001      	str	r0, [sp, #4]
    836e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8370:	4a08      	ldr	r2, [pc, #32]	; (8394 <Adc_Ip_SetTriggerMode+0x2c>)
    8372:	9b01      	ldr	r3, [sp, #4]
    8374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8378:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    837a:	f003 fbc9 	bl	bb10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    837e:	9900      	ldr	r1, [sp, #0]
    8380:	9803      	ldr	r0, [sp, #12]
    8382:	f7ff fd4e 	bl	7e22 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    8386:	f003 fbef 	bl	bb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    838a:	bf00      	nop
    838c:	b005      	add	sp, #20
    838e:	f85d fb04 	ldr.w	pc, [sp], #4
    8392:	bf00      	nop
    8394:	00010838 	.word	0x00010838

00008398 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    8398:	b500      	push	{lr}
    839a:	b085      	sub	sp, #20
    839c:	9001      	str	r0, [sp, #4]
    839e:	460b      	mov	r3, r1
    83a0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83a4:	4a11      	ldr	r2, [pc, #68]	; (83ec <Adc_Ip_SetContinuousMode+0x54>)
    83a6:	9b01      	ldr	r3, [sp, #4]
    83a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83ac:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    83ae:	f003 fded 	bl	bf8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    83b2:	9b03      	ldr	r3, [sp, #12]
    83b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    83b8:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    83ba:	9b02      	ldr	r3, [sp, #8]
    83bc:	f023 0308 	bic.w	r3, r3, #8
    83c0:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    83c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    83c6:	2b00      	cmp	r3, #0
    83c8:	d001      	beq.n	83ce <Adc_Ip_SetContinuousMode+0x36>
    83ca:	2308      	movs	r3, #8
    83cc:	e000      	b.n	83d0 <Adc_Ip_SetContinuousMode+0x38>
    83ce:	2300      	movs	r3, #0
    83d0:	9a02      	ldr	r2, [sp, #8]
    83d2:	4313      	orrs	r3, r2
    83d4:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    83d6:	9b03      	ldr	r3, [sp, #12]
    83d8:	9a02      	ldr	r2, [sp, #8]
    83da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    83de:	f003 fe01 	bl	bfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    83e2:	bf00      	nop
    83e4:	b005      	add	sp, #20
    83e6:	f85d fb04 	ldr.w	pc, [sp], #4
    83ea:	bf00      	nop
    83ec:	00010838 	.word	0x00010838

000083f0 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    83f0:	b500      	push	{lr}
    83f2:	b085      	sub	sp, #20
    83f4:	9001      	str	r0, [sp, #4]
    83f6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83f8:	4a0e      	ldr	r2, [pc, #56]	; (8434 <Adc_Ip_SetResolution+0x44>)
    83fa:	9b01      	ldr	r3, [sp, #4]
    83fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8400:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    8402:	f002 fe13 	bl	b02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    8406:	9b03      	ldr	r3, [sp, #12]
    8408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    840a:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    840c:	9b02      	ldr	r3, [sp, #8]
    840e:	f023 030c 	bic.w	r3, r3, #12
    8412:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8414:	9b00      	ldr	r3, [sp, #0]
    8416:	009b      	lsls	r3, r3, #2
    8418:	f003 030c 	and.w	r3, r3, #12
    841c:	9a02      	ldr	r2, [sp, #8]
    841e:	4313      	orrs	r3, r2
    8420:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    8422:	9b03      	ldr	r3, [sp, #12]
    8424:	9a02      	ldr	r2, [sp, #8]
    8426:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    8428:	f002 fe2c 	bl	b084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    842c:	bf00      	nop
    842e:	b005      	add	sp, #20
    8430:	f85d fb04 	ldr.w	pc, [sp], #4
    8434:	00010838 	.word	0x00010838

00008438 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    8438:	b500      	push	{lr}
    843a:	b085      	sub	sp, #20
    843c:	9001      	str	r0, [sp, #4]
    843e:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8440:	4a15      	ldr	r2, [pc, #84]	; (8498 <Adc_Ip_SetClockMode+0x60>)
    8442:	9b01      	ldr	r3, [sp, #4]
    8444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8448:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    844a:	f002 ff89 	bl	b360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    844e:	9b00      	ldr	r3, [sp, #0]
    8450:	6819      	ldr	r1, [r3, #0]
    8452:	9b00      	ldr	r3, [sp, #0]
    8454:	685b      	ldr	r3, [r3, #4]
    8456:	461a      	mov	r2, r3
    8458:	9803      	ldr	r0, [sp, #12]
    845a:	f7ff fc23 	bl	7ca4 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    845e:	f002 ffab 	bl	b3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    8462:	f003 f873 	bl	b54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8466:	9b00      	ldr	r3, [sp, #0]
    8468:	7a1b      	ldrb	r3, [r3, #8]
    846a:	4619      	mov	r1, r3
    846c:	9803      	ldr	r0, [sp, #12]
    846e:	f7ff fc74 	bl	7d5a <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    8472:	f003 f897 	bl	b5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    8476:	f003 fce5 	bl	be44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    847a:	9b00      	ldr	r3, [sp, #0]
    847c:	7a59      	ldrb	r1, [r3, #9]
    847e:	9b00      	ldr	r3, [sp, #0]
    8480:	68db      	ldr	r3, [r3, #12]
    8482:	461a      	mov	r2, r3
    8484:	9803      	ldr	r0, [sp, #12]
    8486:	f7ff fc89 	bl	7d9c <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    848a:	f003 fd07 	bl	be9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    848e:	bf00      	nop
    8490:	b005      	add	sp, #20
    8492:	f85d fb04 	ldr.w	pc, [sp], #4
    8496:	bf00      	nop
    8498:	00010838 	.word	0x00010838

0000849c <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    849c:	b510      	push	{r4, lr}
    849e:	b084      	sub	sp, #16
    84a0:	9001      	str	r0, [sp, #4]
    84a2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84a4:	4a13      	ldr	r2, [pc, #76]	; (84f4 <Adc_Ip_ConfigChannel+0x58>)
    84a6:	9b01      	ldr	r3, [sp, #4]
    84a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ac:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    84ae:	9b00      	ldr	r3, [sp, #0]
    84b0:	685b      	ldr	r3, [r3, #4]
    84b2:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    84b4:	f003 fa88 	bl	b9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    84b8:	9b00      	ldr	r3, [sp, #0]
    84ba:	7819      	ldrb	r1, [r3, #0]
    84bc:	9b00      	ldr	r3, [sp, #0]
    84be:	7a1b      	ldrb	r3, [r3, #8]
    84c0:	9a02      	ldr	r2, [sp, #8]
    84c2:	9803      	ldr	r0, [sp, #12]
    84c4:	f7ff fcd5 	bl	7e72 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    84c8:	f003 faaa 	bl	ba20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    84cc:	9b00      	ldr	r3, [sp, #0]
    84ce:	781b      	ldrb	r3, [r3, #0]
    84d0:	461c      	mov	r4, r3
    84d2:	9b00      	ldr	r3, [sp, #0]
    84d4:	6859      	ldr	r1, [r3, #4]
    84d6:	4808      	ldr	r0, [pc, #32]	; (84f8 <Adc_Ip_ConfigChannel+0x5c>)
    84d8:	9a01      	ldr	r2, [sp, #4]
    84da:	4613      	mov	r3, r2
    84dc:	00db      	lsls	r3, r3, #3
    84de:	4413      	add	r3, r2
    84e0:	005b      	lsls	r3, r3, #1
    84e2:	4413      	add	r3, r2
    84e4:	4423      	add	r3, r4
    84e6:	3302      	adds	r3, #2
    84e8:	009b      	lsls	r3, r3, #2
    84ea:	4403      	add	r3, r0
    84ec:	6059      	str	r1, [r3, #4]
}
    84ee:	bf00      	nop
    84f0:	b004      	add	sp, #16
    84f2:	bd10      	pop	{r4, pc}
    84f4:	00010838 	.word	0x00010838
    84f8:	1fff8d0c 	.word	0x1fff8d0c

000084fc <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    84fc:	b500      	push	{lr}
    84fe:	b089      	sub	sp, #36	; 0x24
    8500:	9001      	str	r0, [sp, #4]
    8502:	460b      	mov	r3, r1
    8504:	f88d 3003 	strb.w	r3, [sp, #3]
    8508:	4613      	mov	r3, r2
    850a:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    850e:	4a24      	ldr	r2, [pc, #144]	; (85a0 <Adc_Ip_SetDisabledChannel+0xa4>)
    8510:	9b01      	ldr	r3, [sp, #4]
    8512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8516:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8518:	2300      	movs	r3, #0
    851a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    851c:	2100      	movs	r1, #0
    851e:	4821      	ldr	r0, [pc, #132]	; (85a4 <Adc_Ip_SetDisabledChannel+0xa8>)
    8520:	f7f9 fb26 	bl	1b70 <OsIf_MicrosToTicks>
    8524:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8526:	2000      	movs	r0, #0
    8528:	f7f9 fad6 	bl	1ad8 <OsIf_GetCounter>
    852c:	4603      	mov	r3, r0
    852e:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8530:	2300      	movs	r3, #0
    8532:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    8534:	f003 f900 	bl	b738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    8538:	f89d 2003 	ldrb.w	r2, [sp, #3]
    853c:	9b05      	ldr	r3, [sp, #20]
    853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8542:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8546:	f043 011f 	orr.w	r1, r3, #31
    854a:	9b05      	ldr	r3, [sp, #20]
    854c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    8550:	f003 f91e 	bl	b790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    8554:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8558:	2b00      	cmp	r3, #0
    855a:	d01c      	beq.n	8596 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    855c:	e008      	b.n	8570 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    855e:	ab03      	add	r3, sp, #12
    8560:	2100      	movs	r1, #0
    8562:	4618      	mov	r0, r3
    8564:	f7f9 fad1 	bl	1b0a <OsIf_GetElapsed>
    8568:	4602      	mov	r2, r0
    856a:	9b06      	ldr	r3, [sp, #24]
    856c:	4413      	add	r3, r2
    856e:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    8570:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8574:	9b05      	ldr	r3, [sp, #20]
    8576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    857a:	f003 031f 	and.w	r3, r3, #31
    857e:	2b1f      	cmp	r3, #31
    8580:	d003      	beq.n	858a <Adc_Ip_SetDisabledChannel+0x8e>
    8582:	9a06      	ldr	r2, [sp, #24]
    8584:	9b04      	ldr	r3, [sp, #16]
    8586:	429a      	cmp	r2, r3
    8588:	d3e9      	bcc.n	855e <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    858a:	9a06      	ldr	r2, [sp, #24]
    858c:	9b04      	ldr	r3, [sp, #16]
    858e:	429a      	cmp	r2, r3
    8590:	d301      	bcc.n	8596 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8592:	2302      	movs	r3, #2
    8594:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    8596:	9b07      	ldr	r3, [sp, #28]
}
    8598:	4618      	mov	r0, r3
    859a:	b009      	add	sp, #36	; 0x24
    859c:	f85d fb04 	ldr.w	pc, [sp], #4
    85a0:	00010838 	.word	0x00010838
    85a4:	000186a0 	.word	0x000186a0

000085a8 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    85a8:	b500      	push	{lr}
    85aa:	b087      	sub	sp, #28
    85ac:	9003      	str	r0, [sp, #12]
    85ae:	9102      	str	r1, [sp, #8]
    85b0:	4613      	mov	r3, r2
    85b2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85b6:	4a0a      	ldr	r2, [pc, #40]	; (85e0 <Adc_Ip_StartConversion+0x38>)
    85b8:	9b03      	ldr	r3, [sp, #12]
    85ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85be:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    85c0:	f003 f90c 	bl	b7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    85c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85c8:	9a02      	ldr	r2, [sp, #8]
    85ca:	2100      	movs	r1, #0
    85cc:	9805      	ldr	r0, [sp, #20]
    85ce:	f7ff fc50 	bl	7e72 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    85d2:	f003 f92f 	bl	b834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    85d6:	bf00      	nop
    85d8:	b007      	add	sp, #28
    85da:	f85d fb04 	ldr.w	pc, [sp], #4
    85de:	bf00      	nop
    85e0:	00010838 	.word	0x00010838

000085e4 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    85e4:	b084      	sub	sp, #16
    85e6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    85e8:	4a0b      	ldr	r2, [pc, #44]	; (8618 <Adc_Ip_GetConvActiveFlag+0x34>)
    85ea:	9b01      	ldr	r3, [sp, #4]
    85ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85f0:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    85f2:	9b03      	ldr	r3, [sp, #12]
    85f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    85f8:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    85fa:	9b02      	ldr	r3, [sp, #8]
    85fc:	09db      	lsrs	r3, r3, #7
    85fe:	f003 0301 	and.w	r3, r3, #1
    8602:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    8604:	9b02      	ldr	r3, [sp, #8]
    8606:	2b00      	cmp	r3, #0
    8608:	bf14      	ite	ne
    860a:	2301      	movne	r3, #1
    860c:	2300      	moveq	r3, #0
    860e:	b2db      	uxtb	r3, r3
}
    8610:	4618      	mov	r0, r3
    8612:	b004      	add	sp, #16
    8614:	4770      	bx	lr
    8616:	bf00      	nop
    8618:	00010838 	.word	0x00010838

0000861c <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    861c:	b500      	push	{lr}
    861e:	b085      	sub	sp, #20
    8620:	9001      	str	r0, [sp, #4]
    8622:	460b      	mov	r3, r1
    8624:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8628:	4a08      	ldr	r2, [pc, #32]	; (864c <Adc_Ip_GetChanInterrupt+0x30>)
    862a:	9b01      	ldr	r3, [sp, #4]
    862c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8630:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8638:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    863a:	9803      	ldr	r0, [sp, #12]
    863c:	f7ff fc5e 	bl	7efc <Adc_HwAcc_GetAIEN>
    8640:	4603      	mov	r3, r0
}
    8642:	4618      	mov	r0, r3
    8644:	b005      	add	sp, #20
    8646:	f85d fb04 	ldr.w	pc, [sp], #4
    864a:	bf00      	nop
    864c:	00010838 	.word	0x00010838

00008650 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    8650:	b500      	push	{lr}
    8652:	b085      	sub	sp, #20
    8654:	9001      	str	r0, [sp, #4]
    8656:	460b      	mov	r3, r1
    8658:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    865c:	4a08      	ldr	r2, [pc, #32]	; (8680 <Adc_Ip_GetConvCompleteFlag+0x30>)
    865e:	9b01      	ldr	r3, [sp, #4]
    8660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8664:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    866c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    866e:	9803      	ldr	r0, [sp, #12]
    8670:	f7ff fc52 	bl	7f18 <Adc_HwAcc_GetCOCO>
    8674:	4603      	mov	r3, r0
}
    8676:	4618      	mov	r0, r3
    8678:	b005      	add	sp, #20
    867a:	f85d fb04 	ldr.w	pc, [sp], #4
    867e:	bf00      	nop
    8680:	00010838 	.word	0x00010838

00008684 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8684:	b500      	push	{lr}
    8686:	b085      	sub	sp, #20
    8688:	9001      	str	r0, [sp, #4]
    868a:	460b      	mov	r3, r1
    868c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8690:	4a07      	ldr	r2, [pc, #28]	; (86b0 <Adc_Ip_GetConvData+0x2c>)
    8692:	9b01      	ldr	r3, [sp, #4]
    8694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8698:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    869a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    869e:	4619      	mov	r1, r3
    86a0:	9803      	ldr	r0, [sp, #12]
    86a2:	f7ff fc47 	bl	7f34 <Adc_HwAcc_GetData>
    86a6:	4603      	mov	r3, r0
}
    86a8:	4618      	mov	r0, r3
    86aa:	b005      	add	sp, #20
    86ac:	f85d fb04 	ldr.w	pc, [sp], #4
    86b0:	00010838 	.word	0x00010838

000086b4 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    86b4:	b500      	push	{lr}
    86b6:	b093      	sub	sp, #76	; 0x4c
    86b8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    86ba:	4a59      	ldr	r2, [pc, #356]	; (8820 <Adc_Ip_DoCalibration+0x16c>)
    86bc:	9b01      	ldr	r3, [sp, #4]
    86be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86c2:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    86c4:	2300      	movs	r3, #0
    86c6:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    86c8:	2100      	movs	r1, #0
    86ca:	4856      	ldr	r0, [pc, #344]	; (8824 <Adc_Ip_DoCalibration+0x170>)
    86cc:	f7f9 fa50 	bl	1b70 <OsIf_MicrosToTicks>
    86d0:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    86d2:	2000      	movs	r0, #0
    86d4:	f7f9 fa00 	bl	1ad8 <OsIf_GetCounter>
    86d8:	4603      	mov	r3, r0
    86da:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    86dc:	2300      	movs	r3, #0
    86de:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    86e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    86e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    86e6:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    86e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86ea:	089b      	lsrs	r3, r3, #2
    86ec:	f003 0301 	and.w	r3, r3, #1
    86f0:	2b00      	cmp	r3, #0
    86f2:	bf14      	ite	ne
    86f4:	2301      	movne	r3, #1
    86f6:	2300      	moveq	r3, #0
    86f8:	b2db      	uxtb	r3, r3
    86fa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    86fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8700:	f7ff fb71 	bl	7de6 <Adc_HwAcc_GetAverageSelect>
    8704:	4603      	mov	r3, r0
    8706:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    8708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    870a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    870c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    870e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8710:	b2db      	uxtb	r3, r3
    8712:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    8716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    871c:	4618      	mov	r0, r3
    871e:	f7ff fb99 	bl	7e54 <Adc_HwAcc_GetTriggerMode>
    8722:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    8724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8728:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    872a:	980d      	ldr	r0, [sp, #52]	; 0x34
    872c:	f7ff fad8 	bl	7ce0 <Adc_HwAcc_GetClockDivide>
    8730:	4603      	mov	r3, r0
    8732:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    8734:	980d      	ldr	r0, [sp, #52]	; 0x34
    8736:	f7ff faf2 	bl	7d1e <Adc_HwAcc_GetInputClock>
    873a:	4603      	mov	r3, r0
    873c:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    873e:	2301      	movs	r3, #1
    8740:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    8744:	2303      	movs	r3, #3
    8746:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8748:	230c      	movs	r3, #12
    874a:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    874e:	4a36      	ldr	r2, [pc, #216]	; (8828 <Adc_Ip_DoCalibration+0x174>)
    8750:	9b01      	ldr	r3, [sp, #4]
    8752:	214c      	movs	r1, #76	; 0x4c
    8754:	fb01 f303 	mul.w	r3, r1, r3
    8758:	4413      	add	r3, r2
    875a:	3304      	adds	r3, #4
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    8760:	9b08      	ldr	r3, [sp, #32]
    8762:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    8764:	ab03      	add	r3, sp, #12
    8766:	2200      	movs	r2, #0
    8768:	4619      	mov	r1, r3
    876a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    876c:	f7ff fbfa 	bl	7f64 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    8770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8772:	2200      	movs	r2, #0
    8774:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    8778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    877a:	2200      	movs	r2, #0
    877c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8782:	2200      	movs	r2, #0
    8784:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    8788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    878a:	2200      	movs	r2, #0
    878c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8792:	2200      	movs	r2, #0
    8794:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    8798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    879a:	2200      	movs	r2, #0
    879c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    87a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87a2:	2200      	movs	r2, #0
    87a4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    87a8:	f003 fb9e 	bl	bee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    87ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    87b2:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    87b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    87ba:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    87bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    87be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    87c2:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    87c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    87c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    87cc:	f003 fbb8 	bl	bf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    87d0:	e008      	b.n	87e4 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    87d2:	ab0b      	add	r3, sp, #44	; 0x2c
    87d4:	2100      	movs	r1, #0
    87d6:	4618      	mov	r0, r3
    87d8:	f7f9 f997 	bl	1b0a <OsIf_GetElapsed>
    87dc:	4602      	mov	r2, r0
    87de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    87e0:	4413      	add	r3, r2
    87e2:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    87e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    87ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    87ee:	2b00      	cmp	r3, #0
    87f0:	d003      	beq.n	87fa <Adc_Ip_DoCalibration+0x146>
    87f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    87f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    87f6:	429a      	cmp	r2, r3
    87f8:	d3eb      	bcc.n	87d2 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    87fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    87fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    87fe:	429a      	cmp	r2, r3
    8800:	d301      	bcc.n	8806 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8802:	2302      	movs	r3, #2
    8804:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    8806:	ab07      	add	r3, sp, #28
    8808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    880a:	4619      	mov	r1, r3
    880c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    880e:	f7ff fba9 	bl	7f64 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8814:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    8816:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    8818:	4618      	mov	r0, r3
    881a:	b013      	add	sp, #76	; 0x4c
    881c:	f85d fb04 	ldr.w	pc, [sp], #4
    8820:	00010838 	.word	0x00010838
    8824:	000186a0 	.word	0x000186a0
    8828:	1fff8d0c 	.word	0x1fff8d0c

0000882c <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    882c:	b500      	push	{lr}
    882e:	b089      	sub	sp, #36	; 0x24
    8830:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8832:	4a1e      	ldr	r2, [pc, #120]	; (88ac <Adc_Ip_ClearLatchedTriggers+0x80>)
    8834:	9b01      	ldr	r3, [sp, #4]
    8836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    883a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    883c:	2300      	movs	r3, #0
    883e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    8840:	2100      	movs	r1, #0
    8842:	481b      	ldr	r0, [pc, #108]	; (88b0 <Adc_Ip_ClearLatchedTriggers+0x84>)
    8844:	f7f9 f994 	bl	1b70 <OsIf_MicrosToTicks>
    8848:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    884a:	2000      	movs	r0, #0
    884c:	f7f9 f944 	bl	1ad8 <OsIf_GetCounter>
    8850:	4603      	mov	r3, r0
    8852:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    8854:	2300      	movs	r3, #0
    8856:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    8858:	f002 fdd4 	bl	b404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    885c:	9b05      	ldr	r3, [sp, #20]
    885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8864:	9b05      	ldr	r3, [sp, #20]
    8866:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    8868:	f002 fdf8 	bl	b45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    886c:	e008      	b.n	8880 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    886e:	ab03      	add	r3, sp, #12
    8870:	2100      	movs	r1, #0
    8872:	4618      	mov	r0, r3
    8874:	f7f9 f949 	bl	1b0a <OsIf_GetElapsed>
    8878:	4602      	mov	r2, r0
    887a:	9b06      	ldr	r3, [sp, #24]
    887c:	4413      	add	r3, r2
    887e:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8880:	9b05      	ldr	r3, [sp, #20]
    8882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8886:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    888a:	2b00      	cmp	r3, #0
    888c:	d003      	beq.n	8896 <Adc_Ip_ClearLatchedTriggers+0x6a>
    888e:	9a06      	ldr	r2, [sp, #24]
    8890:	9b04      	ldr	r3, [sp, #16]
    8892:	429a      	cmp	r2, r3
    8894:	d3eb      	bcc.n	886e <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    8896:	9a06      	ldr	r2, [sp, #24]
    8898:	9b04      	ldr	r3, [sp, #16]
    889a:	429a      	cmp	r2, r3
    889c:	d301      	bcc.n	88a2 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    889e:	2302      	movs	r3, #2
    88a0:	9307      	str	r3, [sp, #28]
    }

    return Status;
    88a2:	9b07      	ldr	r3, [sp, #28]
}
    88a4:	4618      	mov	r0, r3
    88a6:	b009      	add	sp, #36	; 0x24
    88a8:	f85d fb04 	ldr.w	pc, [sp], #4
    88ac:	00010838 	.word	0x00010838
    88b0:	000186a0 	.word	0x000186a0

000088b4 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    88b4:	b500      	push	{lr}
    88b6:	b085      	sub	sp, #20
    88b8:	9001      	str	r0, [sp, #4]
    88ba:	460b      	mov	r3, r1
    88bc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88c0:	4a0c      	ldr	r2, [pc, #48]	; (88f4 <Adc_Ip_EnableChannelNotification+0x40>)
    88c2:	9b01      	ldr	r3, [sp, #4]
    88c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88c8:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    88ca:	f002 ffd9 	bl	b880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    88ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88d2:	9b03      	ldr	r3, [sp, #12]
    88d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88dc:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    88e0:	9b03      	ldr	r3, [sp, #12]
    88e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    88e6:	f002 fff7 	bl	b8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    88ea:	bf00      	nop
    88ec:	b005      	add	sp, #20
    88ee:	f85d fb04 	ldr.w	pc, [sp], #4
    88f2:	bf00      	nop
    88f4:	00010838 	.word	0x00010838

000088f8 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    88f8:	b500      	push	{lr}
    88fa:	b085      	sub	sp, #20
    88fc:	9001      	str	r0, [sp, #4]
    88fe:	460b      	mov	r3, r1
    8900:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8904:	4a0c      	ldr	r2, [pc, #48]	; (8938 <Adc_Ip_DisableChannelNotification+0x40>)
    8906:	9b01      	ldr	r3, [sp, #4]
    8908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    890c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    890e:	f003 f809 	bl	b924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8912:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8916:	9b03      	ldr	r3, [sp, #12]
    8918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    891c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8920:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    8924:	9b03      	ldr	r3, [sp, #12]
    8926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    892a:	f003 f827 	bl	b97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    892e:	bf00      	nop
    8930:	b005      	add	sp, #20
    8932:	f85d fb04 	ldr.w	pc, [sp], #4
    8936:	bf00      	nop
    8938:	00010838 	.word	0x00010838

0000893c <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    893c:	b500      	push	{lr}
    893e:	b085      	sub	sp, #20
    8940:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8942:	4a0a      	ldr	r2, [pc, #40]	; (896c <Adc_Ip_ClearTrigErrReg+0x30>)
    8944:	9b01      	ldr	r3, [sp, #4]
    8946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    894a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    894c:	f003 f984 	bl	bc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    8950:	9b03      	ldr	r3, [sp, #12]
    8952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8956:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    895a:	9b03      	ldr	r3, [sp, #12]
    895c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    8960:	f003 f9a6 	bl	bcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    8964:	bf00      	nop
    8966:	b005      	add	sp, #20
    8968:	f85d fb04 	ldr.w	pc, [sp], #4
    896c:	00010838 	.word	0x00010838

00008970 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    8970:	b084      	sub	sp, #16
    8972:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8974:	4a06      	ldr	r2, [pc, #24]	; (8990 <Adc_Ip_GetTrigErrReg+0x20>)
    8976:	9b01      	ldr	r3, [sp, #4]
    8978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    897c:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    897e:	9b03      	ldr	r3, [sp, #12]
    8980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8984:	0e1b      	lsrs	r3, r3, #24
    8986:	f003 030f 	and.w	r3, r3, #15
}
    898a:	4618      	mov	r0, r3
    898c:	b004      	add	sp, #16
    898e:	4770      	bx	lr
    8990:	00010838 	.word	0x00010838

00008994 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8994:	b082      	sub	sp, #8
    8996:	9001      	str	r0, [sp, #4]
    8998:	460b      	mov	r3, r1
    899a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    899e:	4a06      	ldr	r2, [pc, #24]	; (89b8 <Adc_Ip_GetDataAddress+0x24>)
    89a0:	9b01      	ldr	r3, [sp, #4]
    89a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    89a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    89aa:	3312      	adds	r3, #18
    89ac:	009b      	lsls	r3, r3, #2
    89ae:	4413      	add	r3, r2
}
    89b0:	4618      	mov	r0, r3
    89b2:	b002      	add	sp, #8
    89b4:	4770      	bx	lr
    89b6:	bf00      	nop
    89b8:	00010838 	.word	0x00010838

000089bc <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    89bc:	b088      	sub	sp, #32
    89be:	9003      	str	r0, [sp, #12]
    89c0:	9102      	str	r1, [sp, #8]
    89c2:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89c4:	4a25      	ldr	r2, [pc, #148]	; (8a5c <Adc_Ip_GetChanData+0xa0>)
    89c6:	9b03      	ldr	r3, [sp, #12]
    89c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89cc:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    89ce:	2300      	movs	r3, #0
    89d0:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    89d2:	2300      	movs	r3, #0
    89d4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    89d8:	2300      	movs	r3, #0
    89da:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    89de:	2300      	movs	r3, #0
    89e0:	f88d 3019 	strb.w	r3, [sp, #25]
    89e4:	e019      	b.n	8a1a <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    89e6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    89ea:	481d      	ldr	r0, [pc, #116]	; (8a60 <Adc_Ip_GetChanData+0xa4>)
    89ec:	9a03      	ldr	r2, [sp, #12]
    89ee:	4613      	mov	r3, r2
    89f0:	00db      	lsls	r3, r3, #3
    89f2:	4413      	add	r3, r2
    89f4:	005b      	lsls	r3, r3, #1
    89f6:	4413      	add	r3, r2
    89f8:	440b      	add	r3, r1
    89fa:	3302      	adds	r3, #2
    89fc:	009b      	lsls	r3, r3, #2
    89fe:	4403      	add	r3, r0
    8a00:	685b      	ldr	r3, [r3, #4]
    8a02:	9a02      	ldr	r2, [sp, #8]
    8a04:	429a      	cmp	r2, r3
    8a06:	d103      	bne.n	8a10 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8a08:	2301      	movs	r3, #1
    8a0a:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8a0e:	e008      	b.n	8a22 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a10:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8a14:	3301      	adds	r3, #1
    8a16:	f88d 3019 	strb.w	r3, [sp, #25]
    8a1a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8a1e:	2b0f      	cmp	r3, #15
    8a20:	d9e1      	bls.n	89e6 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8a22:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8a26:	2b00      	cmp	r3, #0
    8a28:	d00e      	beq.n	8a48 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8a2a:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8a2e:	9b05      	ldr	r3, [sp, #20]
    8a30:	3212      	adds	r2, #18
    8a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a36:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8a3a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8a42:	f8ad 301a 	strh.w	r3, [sp, #26]
    8a46:	e001      	b.n	8a4c <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8a48:	2301      	movs	r3, #1
    8a4a:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8a4c:	9b01      	ldr	r3, [sp, #4]
    8a4e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8a52:	801a      	strh	r2, [r3, #0]

    return Status;
    8a54:	9b07      	ldr	r3, [sp, #28]
}
    8a56:	4618      	mov	r0, r3
    8a58:	b008      	add	sp, #32
    8a5a:	4770      	bx	lr
    8a5c:	00010838 	.word	0x00010838
    8a60:	1fff8d0c 	.word	0x1fff8d0c

00008a64 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8a64:	b500      	push	{lr}
    8a66:	b085      	sub	sp, #20
    8a68:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8a6a:	2300      	movs	r3, #0
    8a6c:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8a70:	2300      	movs	r3, #0
    8a72:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8a76:	4a32      	ldr	r2, [pc, #200]	; (8b40 <Adc_Ip_IRQHandler+0xdc>)
    8a78:	9b01      	ldr	r3, [sp, #4]
    8a7a:	214c      	movs	r1, #76	; 0x4c
    8a7c:	fb01 f303 	mul.w	r3, r1, r3
    8a80:	4413      	add	r3, r2
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d040      	beq.n	8b0a <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8a88:	4a2d      	ldr	r2, [pc, #180]	; (8b40 <Adc_Ip_IRQHandler+0xdc>)
    8a8a:	9b01      	ldr	r3, [sp, #4]
    8a8c:	214c      	movs	r1, #76	; 0x4c
    8a8e:	fb01 f303 	mul.w	r3, r1, r3
    8a92:	4413      	add	r3, r2
    8a94:	3308      	adds	r3, #8
    8a96:	681b      	ldr	r3, [r3, #0]
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d04d      	beq.n	8b38 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a9c:	2300      	movs	r3, #0
    8a9e:	f88d 300f 	strb.w	r3, [sp, #15]
    8aa2:	e02d      	b.n	8b00 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8aa4:	4a27      	ldr	r2, [pc, #156]	; (8b44 <Adc_Ip_IRQHandler+0xe0>)
    8aa6:	9b01      	ldr	r3, [sp, #4]
    8aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8aac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ab4:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8ab6:	9802      	ldr	r0, [sp, #8]
    8ab8:	f7ff fa20 	bl	7efc <Adc_HwAcc_GetAIEN>
    8abc:	4603      	mov	r3, r0
    8abe:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8ac2:	9802      	ldr	r0, [sp, #8]
    8ac4:	f7ff fa28 	bl	7f18 <Adc_HwAcc_GetCOCO>
    8ac8:	4603      	mov	r3, r0
    8aca:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8ace:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8ad2:	2b00      	cmp	r3, #0
    8ad4:	d00f      	beq.n	8af6 <Adc_Ip_IRQHandler+0x92>
    8ad6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8ada:	2b00      	cmp	r3, #0
    8adc:	d00b      	beq.n	8af6 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8ade:	4a18      	ldr	r2, [pc, #96]	; (8b40 <Adc_Ip_IRQHandler+0xdc>)
    8ae0:	9b01      	ldr	r3, [sp, #4]
    8ae2:	214c      	movs	r1, #76	; 0x4c
    8ae4:	fb01 f303 	mul.w	r3, r1, r3
    8ae8:	4413      	add	r3, r2
    8aea:	3308      	adds	r3, #8
    8aec:	681b      	ldr	r3, [r3, #0]
    8aee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8af2:	4610      	mov	r0, r2
    8af4:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8af6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8afa:	3301      	adds	r3, #1
    8afc:	f88d 300f 	strb.w	r3, [sp, #15]
    8b00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b04:	2b0f      	cmp	r3, #15
    8b06:	d9cd      	bls.n	8aa4 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8b08:	e016      	b.n	8b38 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b0a:	2300      	movs	r3, #0
    8b0c:	f88d 300f 	strb.w	r3, [sp, #15]
    8b10:	e00e      	b.n	8b30 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b12:	4a0c      	ldr	r2, [pc, #48]	; (8b44 <Adc_Ip_IRQHandler+0xe0>)
    8b14:	9b01      	ldr	r3, [sp, #4]
    8b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b1a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b1e:	4611      	mov	r1, r2
    8b20:	4618      	mov	r0, r3
    8b22:	f7ff fa07 	bl	7f34 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b2a:	3301      	adds	r3, #1
    8b2c:	f88d 300f 	strb.w	r3, [sp, #15]
    8b30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b34:	2b0f      	cmp	r3, #15
    8b36:	d9ec      	bls.n	8b12 <Adc_Ip_IRQHandler+0xae>
}
    8b38:	bf00      	nop
    8b3a:	b005      	add	sp, #20
    8b3c:	f85d fb04 	ldr.w	pc, [sp], #4
    8b40:	1fff8d0c 	.word	0x1fff8d0c
    8b44:	00010838 	.word	0x00010838

00008b48 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8b48:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8b4a:	2000      	movs	r0, #0
    8b4c:	f7ff ff8a 	bl	8a64 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8b50:	f3bf 8f4f 	dsb	sy
}
    8b54:	bf00      	nop
    8b56:	bd08      	pop	{r3, pc}

00008b58 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8b58:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8b5a:	2001      	movs	r0, #1
    8b5c:	f7ff ff82 	bl	8a64 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8b60:	f3bf 8f4f 	dsb	sy
}
    8b64:	bf00      	nop
    8b66:	bd08      	pop	{r3, pc}

00008b68 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8b68:	b530      	push	{r4, r5, lr}
    8b6a:	b085      	sub	sp, #20
    8b6c:	4603      	mov	r3, r0
    8b6e:	460a      	mov	r2, r1
    8b70:	f88d 3007 	strb.w	r3, [sp, #7]
    8b74:	4613      	mov	r3, r2
    8b76:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8b7a:	2300      	movs	r3, #0
    8b7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8b80:	2300      	movs	r3, #0
    8b82:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8b86:	f002 f865 	bl	ac54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8b8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8b8e:	492e      	ldr	r1, [pc, #184]	; (8c48 <Adc_Ipw_RemoveFromQueue+0xe0>)
    8b90:	4613      	mov	r3, r2
    8b92:	005b      	lsls	r3, r3, #1
    8b94:	4413      	add	r3, r2
    8b96:	005b      	lsls	r3, r3, #1
    8b98:	440b      	add	r3, r1
    8b9a:	881b      	ldrh	r3, [r3, #0]
    8b9c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8ba0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8ba4:	2b01      	cmp	r3, #1
    8ba6:	d80a      	bhi.n	8bbe <Adc_Ipw_RemoveFromQueue+0x56>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8ba8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8bac:	4926      	ldr	r1, [pc, #152]	; (8c48 <Adc_Ipw_RemoveFromQueue+0xe0>)
    8bae:	4613      	mov	r3, r2
    8bb0:	005b      	lsls	r3, r3, #1
    8bb2:	4413      	add	r3, r2
    8bb4:	005b      	lsls	r3, r3, #1
    8bb6:	440b      	add	r3, r1
    8bb8:	2200      	movs	r2, #0
    8bba:	801a      	strh	r2, [r3, #0]
    8bbc:	e03f      	b.n	8c3e <Adc_Ipw_RemoveFromQueue+0xd6>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8bbe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8bc2:	3301      	adds	r3, #1
    8bc4:	f8ad 300e 	strh.w	r3, [sp, #14]
    8bc8:	e01f      	b.n	8c0a <Adc_Ipw_RemoveFromQueue+0xa2>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8bca:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8bce:	f8bd 400e 	ldrh.w	r4, [sp, #14]
    8bd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8bd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8bda:	1e58      	subs	r0, r3, #1
    8bdc:	4d1a      	ldr	r5, [pc, #104]	; (8c48 <Adc_Ipw_RemoveFromQueue+0xe0>)
    8bde:	460b      	mov	r3, r1
    8be0:	005b      	lsls	r3, r3, #1
    8be2:	440b      	add	r3, r1
    8be4:	4423      	add	r3, r4
    8be6:	005b      	lsls	r3, r3, #1
    8be8:	442b      	add	r3, r5
    8bea:	885b      	ldrh	r3, [r3, #2]
    8bec:	b29c      	uxth	r4, r3
    8bee:	4916      	ldr	r1, [pc, #88]	; (8c48 <Adc_Ipw_RemoveFromQueue+0xe0>)
    8bf0:	4613      	mov	r3, r2
    8bf2:	005b      	lsls	r3, r3, #1
    8bf4:	4413      	add	r3, r2
    8bf6:	4403      	add	r3, r0
    8bf8:	005b      	lsls	r3, r3, #1
    8bfa:	440b      	add	r3, r1
    8bfc:	4622      	mov	r2, r4
    8bfe:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c00:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8c04:	3301      	adds	r3, #1
    8c06:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c0a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8c0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c12:	429a      	cmp	r2, r3
    8c14:	d3d9      	bcc.n	8bca <Adc_Ipw_RemoveFromQueue+0x62>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8c16:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8c1a:	490b      	ldr	r1, [pc, #44]	; (8c48 <Adc_Ipw_RemoveFromQueue+0xe0>)
    8c1c:	4613      	mov	r3, r2
    8c1e:	005b      	lsls	r3, r3, #1
    8c20:	4413      	add	r3, r2
    8c22:	005b      	lsls	r3, r3, #1
    8c24:	440b      	add	r3, r1
    8c26:	881b      	ldrh	r3, [r3, #0]
    8c28:	b29b      	uxth	r3, r3
    8c2a:	3b01      	subs	r3, #1
    8c2c:	b298      	uxth	r0, r3
    8c2e:	4906      	ldr	r1, [pc, #24]	; (8c48 <Adc_Ipw_RemoveFromQueue+0xe0>)
    8c30:	4613      	mov	r3, r2
    8c32:	005b      	lsls	r3, r3, #1
    8c34:	4413      	add	r3, r2
    8c36:	005b      	lsls	r3, r3, #1
    8c38:	440b      	add	r3, r1
    8c3a:	4602      	mov	r2, r0
    8c3c:	801a      	strh	r2, [r3, #0]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8c3e:	f002 f835 	bl	acac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8c42:	bf00      	nop
    8c44:	b005      	add	sp, #20
    8c46:	bd30      	pop	{r4, r5, pc}
    8c48:	1fff8d00 	.word	0x1fff8d00

00008c4c <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8c4c:	b500      	push	{lr}
    8c4e:	b087      	sub	sp, #28
    8c50:	9003      	str	r0, [sp, #12]
    8c52:	9102      	str	r1, [sp, #8]
    8c54:	9201      	str	r2, [sp, #4]
    8c56:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8c5a:	2300      	movs	r3, #0
    8c5c:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8c60:	9b03      	ldr	r3, [sp, #12]
    8c62:	789b      	ldrb	r3, [r3, #2]
    8c64:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8c68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c6c:	4a29      	ldr	r2, [pc, #164]	; (8d14 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c72:	681a      	ldr	r2, [r3, #0]
    8c74:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8c78:	4413      	add	r3, r2
    8c7a:	7c1b      	ldrb	r3, [r3, #16]
    8c7c:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8c80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c84:	4a23      	ldr	r2, [pc, #140]	; (8d14 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c8a:	681b      	ldr	r3, [r3, #0]
    8c8c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c94:	695b      	ldr	r3, [r3, #20]
    8c96:	4618      	mov	r0, r3
    8c98:	f000 fbd2 	bl	9440 <Adc_Ipw_CalculateNumsBitShift>
    8c9c:	4603      	mov	r3, r0
    8c9e:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8ca2:	9b03      	ldr	r3, [sp, #12]
    8ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8ca8:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8cac:	2300      	movs	r3, #0
    8cae:	f88d 3017 	strb.w	r3, [sp, #23]
    8cb2:	e022      	b.n	8cfa <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8cb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8cb8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8cbc:	4611      	mov	r1, r2
    8cbe:	4618      	mov	r0, r3
    8cc0:	f7ff fce0 	bl	8684 <Adc_Ip_GetConvData>
    8cc4:	4603      	mov	r3, r0
    8cc6:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8cca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8cce:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8cd2:	fa02 f303 	lsl.w	r3, r2, r3
    8cd6:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8cda:	9b01      	ldr	r3, [sp, #4]
    8cdc:	2201      	movs	r2, #1
    8cde:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8ce0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8ce4:	005b      	lsls	r3, r3, #1
    8ce6:	9a02      	ldr	r2, [sp, #8]
    8ce8:	4413      	add	r3, r2
    8cea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8cee:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8cf0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8cf4:	3301      	adds	r3, #1
    8cf6:	f88d 3017 	strb.w	r3, [sp, #23]
    8cfa:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8cfe:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8d02:	429a      	cmp	r2, r3
    8d04:	d3d6      	bcc.n	8cb4 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8d06:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8d0a:	4618      	mov	r0, r3
    8d0c:	b007      	add	sp, #28
    8d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d12:	bf00      	nop
    8d14:	1fff8ce8 	.word	0x1fff8ce8

00008d18 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8d18:	b500      	push	{lr}
    8d1a:	b087      	sub	sp, #28
    8d1c:	9003      	str	r0, [sp, #12]
    8d1e:	9102      	str	r1, [sp, #8]
    8d20:	9201      	str	r2, [sp, #4]
    8d22:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8d26:	2301      	movs	r3, #1
    8d28:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8d2c:	2300      	movs	r3, #0
    8d2e:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8d32:	9b03      	ldr	r3, [sp, #12]
    8d34:	789b      	ldrb	r3, [r3, #2]
    8d36:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8d3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d3e:	4a19      	ldr	r2, [pc, #100]	; (8da4 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    8d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d44:	681a      	ldr	r2, [r3, #0]
    8d46:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8d4a:	4413      	add	r3, r2
    8d4c:	7c1b      	ldrb	r3, [r3, #16]
    8d4e:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    8d52:	9b03      	ldr	r3, [sp, #12]
    8d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8d58:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    8d5c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    8d60:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d64:	2100      	movs	r1, #0
    8d66:	4618      	mov	r0, r3
    8d68:	f000 fe4a 	bl	9a00 <Adc_Ipw_CheckValidConversion>
    8d6c:	4603      	mov	r3, r0
    8d6e:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    8d72:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8d76:	2b00      	cmp	r3, #0
    8d78:	d00a      	beq.n	8d90 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    8d7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d7e:	9a01      	ldr	r2, [sp, #4]
    8d80:	9902      	ldr	r1, [sp, #8]
    8d82:	9803      	ldr	r0, [sp, #12]
    8d84:	f7ff ff62 	bl	8c4c <Adc_Ipw_ReadGroupConvData>
    8d88:	4603      	mov	r3, r0
    8d8a:	f88d 3017 	strb.w	r3, [sp, #23]
    8d8e:	e002      	b.n	8d96 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    8d90:	2301      	movs	r3, #1
    8d92:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    8d96:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8d9a:	4618      	mov	r0, r3
    8d9c:	b007      	add	sp, #28
    8d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    8da2:	bf00      	nop
    8da4:	1fff8ce8 	.word	0x1fff8ce8

00008da8 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    8da8:	b088      	sub	sp, #32
    8daa:	4603      	mov	r3, r0
    8dac:	9100      	str	r1, [sp, #0]
    8dae:	f8ad 3006 	strh.w	r3, [sp, #6]
    8db2:	4613      	mov	r3, r2
    8db4:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8db8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8dbc:	4a3a      	ldr	r2, [pc, #232]	; (8ea8 <Adc_Ipw_WriteDataBuffer+0x100>)
    8dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc2:	68da      	ldr	r2, [r3, #12]
    8dc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8dc8:	005b      	lsls	r3, r3, #1
    8dca:	4413      	add	r3, r2
    8dcc:	881b      	ldrh	r3, [r3, #0]
    8dce:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    8dd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8dd6:	4a34      	ldr	r2, [pc, #208]	; (8ea8 <Adc_Ipw_WriteDataBuffer+0x100>)
    8dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ddc:	685a      	ldr	r2, [r3, #4]
    8dde:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8de2:	2134      	movs	r1, #52	; 0x34
    8de4:	fb01 f303 	mul.w	r3, r1, r3
    8de8:	4413      	add	r3, r2
    8dea:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8dec:	9b04      	ldr	r3, [sp, #16]
    8dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8df2:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    8df6:	2300      	movs	r3, #0
    8df8:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8dfa:	2300      	movs	r3, #0
    8dfc:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8e00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e04:	4929      	ldr	r1, [pc, #164]	; (8eac <Adc_Ipw_WriteDataBuffer+0x104>)
    8e06:	4613      	mov	r3, r2
    8e08:	009b      	lsls	r3, r3, #2
    8e0a:	4413      	add	r3, r2
    8e0c:	009b      	lsls	r3, r3, #2
    8e0e:	440b      	add	r3, r1
    8e10:	3308      	adds	r3, #8
    8e12:	881b      	ldrh	r3, [r3, #0]
    8e14:	b29b      	uxth	r3, r3
    8e16:	3b01      	subs	r3, #1
    8e18:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8e1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e20:	4922      	ldr	r1, [pc, #136]	; (8eac <Adc_Ipw_WriteDataBuffer+0x104>)
    8e22:	4613      	mov	r3, r2
    8e24:	009b      	lsls	r3, r3, #2
    8e26:	4413      	add	r3, r2
    8e28:	009b      	lsls	r3, r3, #2
    8e2a:	440b      	add	r3, r1
    8e2c:	3308      	adds	r3, #8
    8e2e:	881b      	ldrh	r3, [r3, #0]
    8e30:	b29b      	uxth	r3, r3
    8e32:	2b00      	cmp	r3, #0
    8e34:	d104      	bne.n	8e40 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    8e36:	9b04      	ldr	r3, [sp, #16]
    8e38:	8b9b      	ldrh	r3, [r3, #28]
    8e3a:	3b01      	subs	r3, #1
    8e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8e40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e44:	4919      	ldr	r1, [pc, #100]	; (8eac <Adc_Ipw_WriteDataBuffer+0x104>)
    8e46:	4613      	mov	r3, r2
    8e48:	009b      	lsls	r3, r3, #2
    8e4a:	4413      	add	r3, r2
    8e4c:	009b      	lsls	r3, r3, #2
    8e4e:	440b      	add	r3, r1
    8e50:	330c      	adds	r3, #12
    8e52:	681a      	ldr	r2, [r3, #0]
    8e54:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8e58:	005b      	lsls	r3, r3, #1
    8e5a:	4413      	add	r3, r2
    8e5c:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    8e5e:	9b04      	ldr	r3, [sp, #16]
    8e60:	8b9b      	ldrh	r3, [r3, #28]
    8e62:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    8e66:	2300      	movs	r3, #0
    8e68:	f88d 301f 	strb.w	r3, [sp, #31]
    8e6c:	e012      	b.n	8e94 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    8e6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8e72:	005b      	lsls	r3, r3, #1
    8e74:	9a00      	ldr	r2, [sp, #0]
    8e76:	4413      	add	r3, r2
    8e78:	9a06      	ldr	r2, [sp, #24]
    8e7a:	8812      	ldrh	r2, [r2, #0]
    8e7c:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    8e7e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8e82:	005b      	lsls	r3, r3, #1
    8e84:	9a06      	ldr	r2, [sp, #24]
    8e86:	4413      	add	r3, r2
    8e88:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    8e8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8e8e:	3301      	adds	r3, #1
    8e90:	f88d 301f 	strb.w	r3, [sp, #31]
    8e94:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8e98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e9c:	429a      	cmp	r2, r3
    8e9e:	d3e6      	bcc.n	8e6e <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    8ea0:	bf00      	nop
    8ea2:	bf00      	nop
    8ea4:	b008      	add	sp, #32
    8ea6:	4770      	bx	lr
    8ea8:	1fff8ce8 	.word	0x1fff8ce8
    8eac:	1fff8cec 	.word	0x1fff8cec

00008eb0 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    8eb0:	b500      	push	{lr}
    8eb2:	b089      	sub	sp, #36	; 0x24
    8eb4:	9200      	str	r2, [sp, #0]
    8eb6:	461a      	mov	r2, r3
    8eb8:	4603      	mov	r3, r0
    8eba:	f88d 3007 	strb.w	r3, [sp, #7]
    8ebe:	460b      	mov	r3, r1
    8ec0:	f8ad 3004 	strh.w	r3, [sp, #4]
    8ec4:	4613      	mov	r3, r2
    8ec6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    8eca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ece:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    8ed2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ed6:	f003 0307 	and.w	r3, r3, #7
    8eda:	b2db      	uxtb	r3, r3
    8edc:	2b00      	cmp	r3, #0
    8ede:	d006      	beq.n	8eee <Adc_Ipw_ConfigurePdbChannels+0x3e>
    8ee0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ee4:	08db      	lsrs	r3, r3, #3
    8ee6:	b2db      	uxtb	r3, r3
    8ee8:	3301      	adds	r3, #1
    8eea:	b2db      	uxtb	r3, r3
    8eec:	e003      	b.n	8ef6 <Adc_Ipw_ConfigurePdbChannels+0x46>
    8eee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ef2:	08db      	lsrs	r3, r3, #3
    8ef4:	b2db      	uxtb	r3, r3
    8ef6:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    8efa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8efe:	4987      	ldr	r1, [pc, #540]	; (911c <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    8f00:	4613      	mov	r3, r2
    8f02:	009b      	lsls	r3, r3, #2
    8f04:	4413      	add	r3, r2
    8f06:	009b      	lsls	r3, r3, #2
    8f08:	440b      	add	r3, r1
    8f0a:	3310      	adds	r3, #16
    8f0c:	781b      	ldrb	r3, [r3, #0]
    8f0e:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    8f12:	4b83      	ldr	r3, [pc, #524]	; (9120 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    8f14:	681b      	ldr	r3, [r3, #0]
    8f16:	681a      	ldr	r2, [r3, #0]
    8f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f1c:	4413      	add	r3, r2
    8f1e:	7c1b      	ldrb	r3, [r3, #16]
    8f20:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    8f24:	9b00      	ldr	r3, [sp, #0]
    8f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f28:	691b      	ldr	r3, [r3, #16]
    8f2a:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    8f2c:	2300      	movs	r3, #0
    8f2e:	f88d 301f 	strb.w	r3, [sp, #31]
    8f32:	e0e6      	b.n	9102 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    8f34:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8f38:	08db      	lsrs	r3, r3, #3
    8f3a:	b2db      	uxtb	r3, r3
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d102      	bne.n	8f46 <Adc_Ipw_ConfigurePdbChannels+0x96>
    8f40:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8f44:	e000      	b.n	8f48 <Adc_Ipw_ConfigurePdbChannels+0x98>
    8f46:	2308      	movs	r3, #8
    8f48:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    8f4c:	9b00      	ldr	r3, [sp, #0]
    8f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f50:	7bdb      	ldrb	r3, [r3, #15]
    8f52:	2b00      	cmp	r3, #0
    8f54:	d05e      	beq.n	9014 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    8f56:	9b00      	ldr	r3, [sp, #0]
    8f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f5a:	7b9b      	ldrb	r3, [r3, #14]
    8f5c:	f083 0301 	eor.w	r3, r3, #1
    8f60:	b2db      	uxtb	r3, r3
    8f62:	2b00      	cmp	r3, #0
    8f64:	d02a      	beq.n	8fbc <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    8f66:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8f6a:	f1c3 0308 	rsb	r3, r3, #8
    8f6e:	22ff      	movs	r2, #255	; 0xff
    8f70:	fa22 f303 	lsr.w	r3, r2, r3
    8f74:	b2db      	uxtb	r3, r3
    8f76:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8f7a:	2300      	movs	r3, #0
    8f7c:	f88d 301e 	strb.w	r3, [sp, #30]
    8f80:	e015      	b.n	8fae <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    8f82:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8f86:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8f8a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    8f8e:	4413      	add	r3, r2
    8f90:	005b      	lsls	r3, r3, #1
    8f92:	9a05      	ldr	r2, [sp, #20]
    8f94:	4413      	add	r3, r2
    8f96:	881b      	ldrh	r3, [r3, #0]
    8f98:	f89d 201e 	ldrb.w	r2, [sp, #30]
    8f9c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8fa0:	f001 fd36 	bl	aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8fa4:	f89d 301e 	ldrb.w	r3, [sp, #30]
    8fa8:	3301      	adds	r3, #1
    8faa:	f88d 301e 	strb.w	r3, [sp, #30]
    8fae:	f89d 201e 	ldrb.w	r2, [sp, #30]
    8fb2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8fb6:	429a      	cmp	r2, r3
    8fb8:	d3e3      	bcc.n	8f82 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    8fba:	e051      	b.n	9060 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    8fbc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d110      	bne.n	8fe6 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    8fc4:	2301      	movs	r3, #1
    8fc6:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    8fca:	9b05      	ldr	r3, [sp, #20]
    8fcc:	881b      	ldrh	r3, [r3, #0]
    8fce:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    8fd2:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8fd6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8fda:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8fde:	2200      	movs	r2, #0
    8fe0:	f001 fd16 	bl	aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    8fe4:	e03c      	b.n	9060 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    8fe6:	2301      	movs	r3, #1
    8fe8:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    8fec:	9b00      	ldr	r3, [sp, #0]
    8fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8ff0:	899a      	ldrh	r2, [r3, #12]
    8ff2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8ff6:	b29b      	uxth	r3, r3
    8ff8:	fb12 f303 	smulbb	r3, r2, r3
    8ffc:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9000:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9004:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9008:	f89d 101f 	ldrb.w	r1, [sp, #31]
    900c:	2200      	movs	r2, #0
    900e:	f001 fcff 	bl	aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9012:	e025      	b.n	9060 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    9014:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9018:	2b00      	cmp	r3, #0
    901a:	d10b      	bne.n	9034 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    901c:	2301      	movs	r3, #1
    901e:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    9022:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9026:	f89d 101f 	ldrb.w	r1, [sp, #31]
    902a:	2300      	movs	r3, #0
    902c:	2200      	movs	r2, #0
    902e:	f001 fcef 	bl	aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9032:	e015      	b.n	9060 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9034:	2301      	movs	r3, #1
    9036:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    903a:	9b00      	ldr	r3, [sp, #0]
    903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    903e:	899a      	ldrh	r2, [r3, #12]
    9040:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9044:	b29b      	uxth	r3, r3
    9046:	fb12 f303 	smulbb	r3, r2, r3
    904a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    904e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9052:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9056:	f89d 101f 	ldrb.w	r1, [sp, #31]
    905a:	2200      	movs	r2, #0
    905c:	f001 fcd8 	bl	aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    9060:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9064:	4618      	mov	r0, r3
    9066:	f001 fba7 	bl	a7b8 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    906a:	f89d 201d 	ldrb.w	r2, [sp, #29]
    906e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9072:	1ad3      	subs	r3, r2, r3
    9074:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    9078:	f89d 3013 	ldrb.w	r3, [sp, #19]
    907c:	b29a      	uxth	r2, r3
    907e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9082:	4413      	add	r3, r2
    9084:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9088:	9b00      	ldr	r3, [sp, #0]
    908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    908c:	7b9b      	ldrb	r3, [r3, #14]
    908e:	2b00      	cmp	r3, #0
    9090:	d01d      	beq.n	90ce <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    9092:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9096:	2b00      	cmp	r3, #0
    9098:	d10c      	bne.n	90b4 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    909a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    909e:	f1c3 0308 	rsb	r3, r3, #8
    90a2:	22ff      	movs	r2, #255	; 0xff
    90a4:	fa22 f303 	lsr.w	r3, r2, r3
    90a8:	b2db      	uxtb	r3, r3
    90aa:	3b01      	subs	r3, #1
    90ac:	b2db      	uxtb	r3, r3
    90ae:	f88d 300e 	strb.w	r3, [sp, #14]
    90b2:	e00f      	b.n	90d4 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    90b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90b8:	f1c3 0308 	rsb	r3, r3, #8
    90bc:	22ff      	movs	r2, #255	; 0xff
    90be:	fa22 f303 	lsr.w	r3, r2, r3
    90c2:	b2db      	uxtb	r3, r3
    90c4:	3b01      	subs	r3, #1
    90c6:	b2db      	uxtb	r3, r3
    90c8:	f88d 300e 	strb.w	r3, [sp, #14]
    90cc:	e002      	b.n	90d4 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    90ce:	2300      	movs	r3, #0
    90d0:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    90d4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90d8:	f1c3 0308 	rsb	r3, r3, #8
    90dc:	22ff      	movs	r2, #255	; 0xff
    90de:	fa22 f303 	lsr.w	r3, r2, r3
    90e2:	b2db      	uxtb	r3, r3
    90e4:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    90e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    90ec:	aa03      	add	r2, sp, #12
    90ee:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90f2:	4618      	mov	r0, r3
    90f4:	f001 fb9c 	bl	a830 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    90f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90fc:	3301      	adds	r3, #1
    90fe:	f88d 301f 	strb.w	r3, [sp, #31]
    9102:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9106:	f89d 3019 	ldrb.w	r3, [sp, #25]
    910a:	429a      	cmp	r2, r3
    910c:	f4ff af12 	bcc.w	8f34 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    9110:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9114:	4618      	mov	r0, r3
    9116:	b009      	add	sp, #36	; 0x24
    9118:	f85d fb04 	ldr.w	pc, [sp], #4
    911c:	1fff8cec 	.word	0x1fff8cec
    9120:	1fff8ce8 	.word	0x1fff8ce8

00009124 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    9124:	b500      	push	{lr}
    9126:	b089      	sub	sp, #36	; 0x24
    9128:	9202      	str	r2, [sp, #8]
    912a:	9301      	str	r3, [sp, #4]
    912c:	4603      	mov	r3, r0
    912e:	f88d 300f 	strb.w	r3, [sp, #15]
    9132:	460b      	mov	r3, r1
    9134:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9138:	2300      	movs	r3, #0
    913a:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    913e:	4b62      	ldr	r3, [pc, #392]	; (92c8 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    9140:	681b      	ldr	r3, [r3, #0]
    9142:	681a      	ldr	r2, [r3, #0]
    9144:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9148:	4413      	add	r3, r2
    914a:	7c1b      	ldrb	r3, [r3, #16]
    914c:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9150:	9b02      	ldr	r3, [sp, #8]
    9152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9154:	691b      	ldr	r3, [r3, #16]
    9156:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9158:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    915c:	f003 0307 	and.w	r3, r3, #7
    9160:	b2db      	uxtb	r3, r3
    9162:	2b00      	cmp	r3, #0
    9164:	d006      	beq.n	9174 <Adc_Ipw_ConfigurePdbConversion+0x50>
    9166:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    916a:	08db      	lsrs	r3, r3, #3
    916c:	b2db      	uxtb	r3, r3
    916e:	3301      	adds	r3, #1
    9170:	b2db      	uxtb	r3, r3
    9172:	e003      	b.n	917c <Adc_Ipw_ConfigurePdbConversion+0x58>
    9174:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9178:	08db      	lsrs	r3, r3, #3
    917a:	b2db      	uxtb	r3, r3
    917c:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    9180:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9184:	4618      	mov	r0, r3
    9186:	f001 fa81 	bl	a68c <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    918a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    918e:	9901      	ldr	r1, [sp, #4]
    9190:	4618      	mov	r0, r3
    9192:	f001 faa9 	bl	a6e8 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    9196:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    919a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    919e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    91a2:	9a02      	ldr	r2, [sp, #8]
    91a4:	f7ff fe84 	bl	8eb0 <Adc_Ipw_ConfigurePdbChannels>
    91a8:	4603      	mov	r3, r0
    91aa:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    91ae:	9b02      	ldr	r3, [sp, #8]
    91b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91b2:	7bdb      	ldrb	r3, [r3, #15]
    91b4:	2b00      	cmp	r3, #0
    91b6:	d02f      	beq.n	9218 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    91b8:	9b02      	ldr	r3, [sp, #8]
    91ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91bc:	7b9b      	ldrb	r3, [r3, #14]
    91be:	f083 0301 	eor.w	r3, r3, #1
    91c2:	b2db      	uxtb	r3, r3
    91c4:	2b00      	cmp	r3, #0
    91c6:	d017      	beq.n	91f8 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    91c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    91cc:	493f      	ldr	r1, [pc, #252]	; (92cc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    91ce:	4613      	mov	r3, r2
    91d0:	009b      	lsls	r3, r3, #2
    91d2:	4413      	add	r3, r2
    91d4:	009b      	lsls	r3, r3, #2
    91d6:	440b      	add	r3, r1
    91d8:	3310      	adds	r3, #16
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	461a      	mov	r2, r3
    91de:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91e2:	4413      	add	r3, r2
    91e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    91e8:	3b01      	subs	r3, #1
    91ea:	005b      	lsls	r3, r3, #1
    91ec:	9a05      	ldr	r2, [sp, #20]
    91ee:	4413      	add	r3, r2
    91f0:	881b      	ldrh	r3, [r3, #0]
    91f2:	f8ad 301c 	strh.w	r3, [sp, #28]
    91f6:	e01a      	b.n	922e <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    91f8:	9b05      	ldr	r3, [sp, #20]
    91fa:	881a      	ldrh	r2, [r3, #0]
    91fc:	9b02      	ldr	r3, [sp, #8]
    91fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9200:	8999      	ldrh	r1, [r3, #12]
    9202:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9206:	3b01      	subs	r3, #1
    9208:	b29b      	uxth	r3, r3
    920a:	fb11 f303 	smulbb	r3, r1, r3
    920e:	b29b      	uxth	r3, r3
    9210:	4413      	add	r3, r2
    9212:	f8ad 301c 	strh.w	r3, [sp, #28]
    9216:	e00a      	b.n	922e <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    9218:	9b02      	ldr	r3, [sp, #8]
    921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    921c:	899a      	ldrh	r2, [r3, #12]
    921e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9222:	3b01      	subs	r3, #1
    9224:	b29b      	uxth	r3, r3
    9226:	fb12 f303 	smulbb	r3, r2, r3
    922a:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    922e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9232:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9236:	4611      	mov	r1, r2
    9238:	4618      	mov	r0, r3
    923a:	f001 fad5 	bl	a7e8 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    923e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9242:	4618      	mov	r0, r3
    9244:	f001 fab8 	bl	a7b8 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    9248:	2300      	movs	r3, #0
    924a:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    924e:	2300      	movs	r3, #0
    9250:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    9254:	2300      	movs	r3, #0
    9256:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    925a:	e00c      	b.n	9276 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    925c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9260:	aa04      	add	r2, sp, #16
    9262:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9266:	4618      	mov	r0, r3
    9268:	f001 fae2 	bl	a830 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    926c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9270:	3301      	adds	r3, #1
    9272:	f88d 301f 	strb.w	r3, [sp, #31]
    9276:	f89d 301f 	ldrb.w	r3, [sp, #31]
    927a:	2b01      	cmp	r3, #1
    927c:	d9ee      	bls.n	925c <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    927e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9282:	4912      	ldr	r1, [pc, #72]	; (92cc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    9284:	4613      	mov	r3, r2
    9286:	009b      	lsls	r3, r3, #2
    9288:	4413      	add	r3, r2
    928a:	009b      	lsls	r3, r3, #2
    928c:	440b      	add	r3, r1
    928e:	3310      	adds	r3, #16
    9290:	7819      	ldrb	r1, [r3, #0]
    9292:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9296:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    929a:	440b      	add	r3, r1
    929c:	b2d8      	uxtb	r0, r3
    929e:	490b      	ldr	r1, [pc, #44]	; (92cc <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    92a0:	4613      	mov	r3, r2
    92a2:	009b      	lsls	r3, r3, #2
    92a4:	4413      	add	r3, r2
    92a6:	009b      	lsls	r3, r3, #2
    92a8:	440b      	add	r3, r1
    92aa:	3310      	adds	r3, #16
    92ac:	4602      	mov	r2, r0
    92ae:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	2b0f      	cmp	r3, #15
    92b4:	d104      	bne.n	92c0 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    92b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    92ba:	4618      	mov	r0, r3
    92bc:	f001 fa54 	bl	a768 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    92c0:	bf00      	nop
    92c2:	b009      	add	sp, #36	; 0x24
    92c4:	f85d fb04 	ldr.w	pc, [sp], #4
    92c8:	1fff8ce8 	.word	0x1fff8ce8
    92cc:	1fff8cec 	.word	0x1fff8cec

000092d0 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    92d0:	b500      	push	{lr}
    92d2:	b087      	sub	sp, #28
    92d4:	4603      	mov	r3, r0
    92d6:	f88d 3007 	strb.w	r3, [sp, #7]
    92da:	460b      	mov	r3, r1
    92dc:	f8ad 3004 	strh.w	r3, [sp, #4]
    92e0:	4613      	mov	r3, r2
    92e2:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    92e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    92ea:	4a38      	ldr	r2, [pc, #224]	; (93cc <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    92ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f0:	68da      	ldr	r2, [r3, #12]
    92f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    92f6:	005b      	lsls	r3, r3, #1
    92f8:	4413      	add	r3, r2
    92fa:	881b      	ldrh	r3, [r3, #0]
    92fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9300:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9304:	4a31      	ldr	r2, [pc, #196]	; (93cc <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    9306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    930a:	681a      	ldr	r2, [r3, #0]
    930c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9310:	4413      	add	r3, r2
    9312:	7c1b      	ldrb	r3, [r3, #16]
    9314:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    9318:	2300      	movs	r3, #0
    931a:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    931e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9322:	4618      	mov	r0, r3
    9324:	f001 fb9e 	bl	aa64 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    9328:	f89d 3006 	ldrb.w	r3, [sp, #6]
    932c:	4a27      	ldr	r2, [pc, #156]	; (93cc <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    932e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9332:	685a      	ldr	r2, [r3, #4]
    9334:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9338:	2134      	movs	r1, #52	; 0x34
    933a:	fb01 f303 	mul.w	r3, r1, r3
    933e:	4413      	add	r3, r2
    9340:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9344:	2b01      	cmp	r3, #1
    9346:	d114      	bne.n	9372 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    9348:	f89d 3006 	ldrb.w	r3, [sp, #6]
    934c:	4a1f      	ldr	r2, [pc, #124]	; (93cc <Adc_Ipw_StopConversionCheckTimeout+0xfc>)
    934e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9352:	685a      	ldr	r2, [r3, #4]
    9354:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9358:	2134      	movs	r1, #52	; 0x34
    935a:	fb01 f303 	mul.w	r3, r1, r3
    935e:	4413      	add	r3, r2
    9360:	689b      	ldr	r3, [r3, #8]
    9362:	2b01      	cmp	r3, #1
    9364:	d105      	bne.n	9372 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    9366:	f89d 3013 	ldrb.w	r3, [sp, #19]
    936a:	2100      	movs	r1, #0
    936c:	4618      	mov	r0, r3
    936e:	f7ff f813 	bl	8398 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9372:	2300      	movs	r3, #0
    9374:	f88d 3016 	strb.w	r3, [sp, #22]
    9378:	e013      	b.n	93a2 <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    937a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    937e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9382:	2201      	movs	r2, #1
    9384:	4618      	mov	r0, r3
    9386:	f7ff f8b9 	bl	84fc <Adc_Ip_SetDisabledChannel>
    938a:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    938c:	9b03      	ldr	r3, [sp, #12]
    938e:	2b02      	cmp	r3, #2
    9390:	d102      	bne.n	9398 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    9392:	2301      	movs	r3, #1
    9394:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9398:	f89d 3016 	ldrb.w	r3, [sp, #22]
    939c:	3301      	adds	r3, #1
    939e:	f88d 3016 	strb.w	r3, [sp, #22]
    93a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    93a6:	490a      	ldr	r1, [pc, #40]	; (93d0 <Adc_Ipw_StopConversionCheckTimeout+0x100>)
    93a8:	4613      	mov	r3, r2
    93aa:	005b      	lsls	r3, r3, #1
    93ac:	4413      	add	r3, r2
    93ae:	005b      	lsls	r3, r3, #1
    93b0:	440b      	add	r3, r1
    93b2:	3304      	adds	r3, #4
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    93ba:	429a      	cmp	r2, r3
    93bc:	d3dd      	bcc.n	937a <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    93be:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    93c2:	4618      	mov	r0, r3
    93c4:	b007      	add	sp, #28
    93c6:	f85d fb04 	ldr.w	pc, [sp], #4
    93ca:	bf00      	nop
    93cc:	1fff8ce8 	.word	0x1fff8ce8
    93d0:	1fff8d00 	.word	0x1fff8d00

000093d4 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    93d4:	b500      	push	{lr}
    93d6:	b085      	sub	sp, #20
    93d8:	4603      	mov	r3, r0
    93da:	9100      	str	r1, [sp, #0]
    93dc:	f88d 3007 	strb.w	r3, [sp, #7]
    93e0:	4613      	mov	r3, r2
    93e2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    93e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93ea:	4a14      	ldr	r2, [pc, #80]	; (943c <Adc_Ipw_PrepareGroupStart+0x68>)
    93ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93f0:	681a      	ldr	r2, [r3, #0]
    93f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93f6:	4413      	add	r3, r2
    93f8:	7c1b      	ldrb	r3, [r3, #16]
    93fa:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    93fe:	9b00      	ldr	r3, [sp, #0]
    9400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	2b01      	cmp	r3, #1
    9406:	d108      	bne.n	941a <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    9408:	f89d 000f 	ldrb.w	r0, [sp, #15]
    940c:	9b00      	ldr	r3, [sp, #0]
    940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9410:	685b      	ldr	r3, [r3, #4]
    9412:	461a      	mov	r2, r3
    9414:	2101      	movs	r1, #1
    9416:	f7fe ff39 	bl	828c <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    941a:	9b00      	ldr	r3, [sp, #0]
    941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    941e:	7a1b      	ldrb	r3, [r3, #8]
    9420:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9424:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9428:	f89d 200e 	ldrb.w	r2, [sp, #14]
    942c:	4611      	mov	r1, r2
    942e:	4618      	mov	r0, r3
    9430:	f7fe ff4a 	bl	82c8 <Adc_Ip_SetSampleTime>
}
    9434:	bf00      	nop
    9436:	b005      	add	sp, #20
    9438:	f85d fb04 	ldr.w	pc, [sp], #4
    943c:	1fff8ce8 	.word	0x1fff8ce8

00009440 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9440:	b084      	sub	sp, #16
    9442:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9444:	2300      	movs	r3, #0
    9446:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    944a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    944e:	4618      	mov	r0, r3
    9450:	b004      	add	sp, #16
    9452:	4770      	bx	lr

00009454 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    9454:	b500      	push	{lr}
    9456:	b08f      	sub	sp, #60	; 0x3c
    9458:	9202      	str	r2, [sp, #8]
    945a:	461a      	mov	r2, r3
    945c:	4603      	mov	r3, r0
    945e:	f88d 300f 	strb.w	r3, [sp, #15]
    9462:	460b      	mov	r3, r1
    9464:	f8ad 300c 	strh.w	r3, [sp, #12]
    9468:	4613      	mov	r3, r2
    946a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    946e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9472:	4a6f      	ldr	r2, [pc, #444]	; (9630 <Adc_Ipw_ConfigureConversion+0x1dc>)
    9474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9478:	68da      	ldr	r2, [r3, #12]
    947a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    947e:	005b      	lsls	r3, r3, #1
    9480:	4413      	add	r3, r2
    9482:	881b      	ldrh	r3, [r3, #0]
    9484:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9488:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    948c:	4a68      	ldr	r2, [pc, #416]	; (9630 <Adc_Ipw_ConfigureConversion+0x1dc>)
    948e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9492:	685a      	ldr	r2, [r3, #4]
    9494:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    9498:	2134      	movs	r1, #52	; 0x34
    949a:	fb01 f303 	mul.w	r3, r1, r3
    949e:	4413      	add	r3, r2
    94a0:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    94a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94a6:	4a62      	ldr	r2, [pc, #392]	; (9630 <Adc_Ipw_ConfigureConversion+0x1dc>)
    94a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ac:	681a      	ldr	r2, [r3, #0]
    94ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94b2:	4413      	add	r3, r2
    94b4:	7c1b      	ldrb	r3, [r3, #16]
    94b6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    94ba:	2300      	movs	r3, #0
    94bc:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    94be:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    94c2:	495c      	ldr	r1, [pc, #368]	; (9634 <Adc_Ipw_ConfigureConversion+0x1e0>)
    94c4:	4613      	mov	r3, r2
    94c6:	009b      	lsls	r3, r3, #2
    94c8:	4413      	add	r3, r2
    94ca:	009b      	lsls	r3, r3, #2
    94cc:	440b      	add	r3, r1
    94ce:	3310      	adds	r3, #16
    94d0:	781b      	ldrb	r3, [r3, #0]
    94d2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    94d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    94d8:	6a1b      	ldr	r3, [r3, #32]
    94da:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    94dc:	2300      	movs	r3, #0
    94de:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    94e2:	e030      	b.n	9546 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    94e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94e8:	4a51      	ldr	r2, [pc, #324]	; (9630 <Adc_Ipw_ConfigureConversion+0x1dc>)
    94ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ee:	681b      	ldr	r3, [r3, #0]
    94f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    94f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    94f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    94fa:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    94fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9502:	440b      	add	r3, r1
    9504:	005b      	lsls	r3, r3, #1
    9506:	990a      	ldr	r1, [sp, #40]	; 0x28
    9508:	440b      	add	r3, r1
    950a:	881b      	ldrh	r3, [r3, #0]
    950c:	4619      	mov	r1, r3
    950e:	460b      	mov	r3, r1
    9510:	005b      	lsls	r3, r3, #1
    9512:	440b      	add	r3, r1
    9514:	009b      	lsls	r3, r3, #2
    9516:	4413      	add	r3, r2
    9518:	685b      	ldr	r3, [r3, #4]
    951a:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    951c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9520:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9524:	9b08      	ldr	r3, [sp, #32]
    9526:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    9528:	2300      	movs	r3, #0
    952a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    952e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9532:	aa05      	add	r2, sp, #20
    9534:	4611      	mov	r1, r2
    9536:	4618      	mov	r0, r3
    9538:	f7fe ffb0 	bl	849c <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    953c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9540:	3301      	adds	r3, #1
    9542:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9546:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    954a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    954e:	3b01      	subs	r3, #1
    9550:	429a      	cmp	r2, r3
    9552:	d3c7      	bcc.n	94e4 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9554:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9558:	4a35      	ldr	r2, [pc, #212]	; (9630 <Adc_Ipw_ConfigureConversion+0x1dc>)
    955a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    955e:	681b      	ldr	r3, [r3, #0]
    9560:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    956a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    956e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9572:	440b      	add	r3, r1
    9574:	005b      	lsls	r3, r3, #1
    9576:	990a      	ldr	r1, [sp, #40]	; 0x28
    9578:	440b      	add	r3, r1
    957a:	881b      	ldrh	r3, [r3, #0]
    957c:	4619      	mov	r1, r3
    957e:	460b      	mov	r3, r1
    9580:	005b      	lsls	r3, r3, #1
    9582:	440b      	add	r3, r1
    9584:	009b      	lsls	r3, r3, #2
    9586:	4413      	add	r3, r2
    9588:	685b      	ldr	r3, [r3, #4]
    958a:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    958c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9590:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    9594:	9b08      	ldr	r3, [sp, #32]
    9596:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    9598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    959a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    959e:	2b00      	cmp	r3, #0
    95a0:	d103      	bne.n	95aa <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    95a2:	2301      	movs	r3, #1
    95a4:	f88d 301c 	strb.w	r3, [sp, #28]
    95a8:	e002      	b.n	95b0 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    95aa:	2300      	movs	r3, #0
    95ac:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    95b0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    95b4:	aa05      	add	r2, sp, #20
    95b6:	4611      	mov	r1, r2
    95b8:	4618      	mov	r0, r3
    95ba:	f7fe ff6f 	bl	849c <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    95be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    95c2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    95c6:	e014      	b.n	95f2 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    95c8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95cc:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    95d0:	231f      	movs	r3, #31
    95d2:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    95d4:	2300      	movs	r3, #0
    95d6:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    95da:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    95de:	aa05      	add	r2, sp, #20
    95e0:	4611      	mov	r1, r2
    95e2:	4618      	mov	r0, r3
    95e4:	f7fe ff5a 	bl	849c <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    95e8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95ec:	3301      	adds	r3, #1
    95ee:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    95f2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95f6:	2b0f      	cmp	r3, #15
    95f8:	d9e6      	bls.n	95c8 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    95fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    95fe:	490e      	ldr	r1, [pc, #56]	; (9638 <Adc_Ipw_ConfigureConversion+0x1e4>)
    9600:	4613      	mov	r3, r2
    9602:	005b      	lsls	r3, r3, #1
    9604:	4413      	add	r3, r2
    9606:	005b      	lsls	r3, r3, #1
    9608:	440b      	add	r3, r1
    960a:	3304      	adds	r3, #4
    960c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9610:	701a      	strb	r2, [r3, #0]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    9612:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9616:	f89d 000f 	ldrb.w	r0, [sp, #15]
    961a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    961e:	9300      	str	r3, [sp, #0]
    9620:	9b02      	ldr	r3, [sp, #8]
    9622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9624:	f7ff fd7e 	bl	9124 <Adc_Ipw_ConfigurePdbConversion>
}
    9628:	bf00      	nop
    962a:	b00f      	add	sp, #60	; 0x3c
    962c:	f85d fb04 	ldr.w	pc, [sp], #4
    9630:	1fff8ce8 	.word	0x1fff8ce8
    9634:	1fff8cec 	.word	0x1fff8cec
    9638:	1fff8d00 	.word	0x1fff8d00

0000963c <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    963c:	b500      	push	{lr}
    963e:	b085      	sub	sp, #20
    9640:	9001      	str	r0, [sp, #4]
    9642:	460b      	mov	r3, r1
    9644:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9648:	2300      	movs	r3, #0
    964a:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    964e:	2300      	movs	r3, #0
    9650:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    9654:	2300      	movs	r3, #0
    9656:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    965a:	2300      	movs	r3, #0
    965c:	f88d 300f 	strb.w	r3, [sp, #15]
    9660:	e027      	b.n	96b2 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    9662:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9666:	9a01      	ldr	r2, [sp, #4]
    9668:	4413      	add	r3, r2
    966a:	7f9b      	ldrb	r3, [r3, #30]
    966c:	2b01      	cmp	r3, #1
    966e:	d11b      	bne.n	96a8 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9670:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9674:	9a01      	ldr	r2, [sp, #4]
    9676:	4413      	add	r3, r2
    9678:	7c1b      	ldrb	r3, [r3, #16]
    967a:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    967e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9682:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9686:	9b01      	ldr	r3, [sp, #4]
    9688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    968c:	4619      	mov	r1, r3
    968e:	f7fe fc9c 	bl	7fca <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    9692:	f89d 000e 	ldrb.w	r0, [sp, #14]
    9696:	f89d 200f 	ldrb.w	r2, [sp, #15]
    969a:	9b01      	ldr	r3, [sp, #4]
    969c:	3202      	adds	r2, #2
    969e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96a2:	4619      	mov	r1, r3
    96a4:	f000 fec5 	bl	a432 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96ac:	3301      	adds	r3, #1
    96ae:	f88d 300f 	strb.w	r3, [sp, #15]
    96b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96b6:	2b00      	cmp	r3, #0
    96b8:	d0d3      	beq.n	9662 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    96ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    96be:	4618      	mov	r0, r3
    96c0:	b005      	add	sp, #20
    96c2:	f85d fb04 	ldr.w	pc, [sp], #4

000096c6 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    96c6:	b500      	push	{lr}
    96c8:	b087      	sub	sp, #28
    96ca:	4603      	mov	r3, r0
    96cc:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    96d0:	2300      	movs	r3, #0
    96d2:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    96d6:	2300      	movs	r3, #0
    96d8:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    96dc:	2300      	movs	r3, #0
    96de:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    96e2:	2300      	movs	r3, #0
    96e4:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    96e8:	2300      	movs	r3, #0
    96ea:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96ee:	2300      	movs	r3, #0
    96f0:	f88d 3017 	strb.w	r3, [sp, #23]
    96f4:	e026      	b.n	9744 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    96f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96fa:	4a2e      	ldr	r2, [pc, #184]	; (97b4 <Adc_Ipw_DeInit+0xee>)
    96fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9700:	681a      	ldr	r2, [r3, #0]
    9702:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9706:	4413      	add	r3, r2
    9708:	7f9b      	ldrb	r3, [r3, #30]
    970a:	2b01      	cmp	r3, #1
    970c:	d115      	bne.n	973a <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    970e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9712:	4a28      	ldr	r2, [pc, #160]	; (97b4 <Adc_Ipw_DeInit+0xee>)
    9714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9718:	681a      	ldr	r2, [r3, #0]
    971a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    971e:	4413      	add	r3, r2
    9720:	7c1b      	ldrb	r3, [r3, #16]
    9722:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    9726:	f89d 3013 	ldrb.w	r3, [sp, #19]
    972a:	4618      	mov	r0, r3
    972c:	f7fe fd24 	bl	8178 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    9730:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9734:	4618      	mov	r0, r3
    9736:	f000 ff25 	bl	a584 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    973a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    973e:	3301      	adds	r3, #1
    9740:	f88d 3017 	strb.w	r3, [sp, #23]
    9744:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9748:	2b00      	cmp	r3, #0
    974a:	d0d4      	beq.n	96f6 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    974c:	2300      	movs	r3, #0
    974e:	f8ad 3014 	strh.w	r3, [sp, #20]
    9752:	e01e      	b.n	9792 <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9754:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9758:	4a16      	ldr	r2, [pc, #88]	; (97b4 <Adc_Ipw_DeInit+0xee>)
    975a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    975e:	685a      	ldr	r2, [r3, #4]
    9760:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9764:	2134      	movs	r1, #52	; 0x34
    9766:	fb01 f303 	mul.w	r3, r1, r3
    976a:	4413      	add	r3, r2
    976c:	881b      	ldrh	r3, [r3, #0]
    976e:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9772:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9776:	4910      	ldr	r1, [pc, #64]	; (97b8 <Adc_Ipw_DeInit+0xf2>)
    9778:	4613      	mov	r3, r2
    977a:	009b      	lsls	r3, r3, #2
    977c:	4413      	add	r3, r2
    977e:	009b      	lsls	r3, r3, #2
    9780:	440b      	add	r3, r1
    9782:	330c      	adds	r3, #12
    9784:	2200      	movs	r2, #0
    9786:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9788:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    978c:	3301      	adds	r3, #1
    978e:	f8ad 3014 	strh.w	r3, [sp, #20]
    9792:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9796:	4a07      	ldr	r2, [pc, #28]	; (97b4 <Adc_Ipw_DeInit+0xee>)
    9798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    979c:	891b      	ldrh	r3, [r3, #8]
    979e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    97a2:	429a      	cmp	r2, r3
    97a4:	d3d6      	bcc.n	9754 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    97a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    97aa:	4618      	mov	r0, r3
    97ac:	b007      	add	sp, #28
    97ae:	f85d fb04 	ldr.w	pc, [sp], #4
    97b2:	bf00      	nop
    97b4:	1fff8ce8 	.word	0x1fff8ce8
    97b8:	1fff8cec 	.word	0x1fff8cec

000097bc <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    97bc:	b500      	push	{lr}
    97be:	b089      	sub	sp, #36	; 0x24
    97c0:	4603      	mov	r3, r0
    97c2:	460a      	mov	r2, r1
    97c4:	f88d 300f 	strb.w	r3, [sp, #15]
    97c8:	4613      	mov	r3, r2
    97ca:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    97ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    97d2:	4956      	ldr	r1, [pc, #344]	; (992c <Adc_Ipw_StartNormalConversion+0x170>)
    97d4:	4613      	mov	r3, r2
    97d6:	005b      	lsls	r3, r3, #1
    97d8:	4413      	add	r3, r2
    97da:	005b      	lsls	r3, r3, #1
    97dc:	440b      	add	r3, r1
    97de:	3302      	adds	r3, #2
    97e0:	881b      	ldrh	r3, [r3, #0]
    97e2:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    97e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    97ea:	4a51      	ldr	r2, [pc, #324]	; (9930 <Adc_Ipw_StartNormalConversion+0x174>)
    97ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97f0:	68da      	ldr	r2, [r3, #12]
    97f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    97f6:	005b      	lsls	r3, r3, #1
    97f8:	4413      	add	r3, r2
    97fa:	881b      	ldrh	r3, [r3, #0]
    97fc:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9800:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9804:	4a4a      	ldr	r2, [pc, #296]	; (9930 <Adc_Ipw_StartNormalConversion+0x174>)
    9806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    980a:	685a      	ldr	r2, [r3, #4]
    980c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9810:	2134      	movs	r1, #52	; 0x34
    9812:	fb01 f303 	mul.w	r3, r1, r3
    9816:	4413      	add	r3, r2
    9818:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    981a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    981e:	4a44      	ldr	r2, [pc, #272]	; (9930 <Adc_Ipw_StartNormalConversion+0x174>)
    9820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9824:	681a      	ldr	r2, [r3, #0]
    9826:	f89d 300f 	ldrb.w	r3, [sp, #15]
    982a:	4413      	add	r3, r2
    982c:	7c1b      	ldrb	r3, [r3, #16]
    982e:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9832:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9836:	493d      	ldr	r1, [pc, #244]	; (992c <Adc_Ipw_StartNormalConversion+0x170>)
    9838:	4613      	mov	r3, r2
    983a:	005b      	lsls	r3, r3, #1
    983c:	4413      	add	r3, r2
    983e:	005b      	lsls	r3, r3, #1
    9840:	440b      	add	r3, r1
    9842:	881b      	ldrh	r3, [r3, #0]
    9844:	b29b      	uxth	r3, r3
    9846:	2b00      	cmp	r3, #0
    9848:	d06b      	beq.n	9922 <Adc_Ipw_StartNormalConversion+0x166>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    984a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    984e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9852:	9905      	ldr	r1, [sp, #20]
    9854:	4618      	mov	r0, r3
    9856:	f7ff fdbd 	bl	93d4 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    985a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    985e:	4935      	ldr	r1, [pc, #212]	; (9934 <Adc_Ipw_StartNormalConversion+0x178>)
    9860:	4613      	mov	r3, r2
    9862:	009b      	lsls	r3, r3, #2
    9864:	4413      	add	r3, r2
    9866:	009b      	lsls	r3, r3, #2
    9868:	440b      	add	r3, r1
    986a:	3310      	adds	r3, #16
    986c:	2200      	movs	r2, #0
    986e:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    9870:	9b05      	ldr	r3, [sp, #20]
    9872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9876:	2b0f      	cmp	r3, #15
    9878:	d806      	bhi.n	9888 <Adc_Ipw_StartNormalConversion+0xcc>
    987a:	9b05      	ldr	r3, [sp, #20]
    987c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9880:	f003 030f 	and.w	r3, r3, #15
    9884:	b2db      	uxtb	r3, r3
    9886:	e000      	b.n	988a <Adc_Ipw_StartNormalConversion+0xce>
    9888:	2310      	movs	r3, #16
    988a:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    988e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9892:	4926      	ldr	r1, [pc, #152]	; (992c <Adc_Ipw_StartNormalConversion+0x170>)
    9894:	4613      	mov	r3, r2
    9896:	005b      	lsls	r3, r3, #1
    9898:	4413      	add	r3, r2
    989a:	005b      	lsls	r3, r3, #1
    989c:	440b      	add	r3, r1
    989e:	3304      	adds	r3, #4
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	2b00      	cmp	r3, #0
    98a4:	d10b      	bne.n	98be <Adc_Ipw_StartNormalConversion+0x102>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    98a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    98aa:	4920      	ldr	r1, [pc, #128]	; (992c <Adc_Ipw_StartNormalConversion+0x170>)
    98ac:	4613      	mov	r3, r2
    98ae:	005b      	lsls	r3, r3, #1
    98b0:	4413      	add	r3, r2
    98b2:	005b      	lsls	r3, r3, #1
    98b4:	440b      	add	r3, r1
    98b6:	3304      	adds	r3, #4
    98b8:	f89d 2012 	ldrb.w	r2, [sp, #18]
    98bc:	701a      	strb	r2, [r3, #0]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98be:	2300      	movs	r3, #0
    98c0:	f88d 301f 	strb.w	r3, [sp, #31]
    98c4:	e00c      	b.n	98e0 <Adc_Ipw_StartNormalConversion+0x124>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    98c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    98ca:	f89d 201f 	ldrb.w	r2, [sp, #31]
    98ce:	4611      	mov	r1, r2
    98d0:	4618      	mov	r0, r3
    98d2:	f7fe fed7 	bl	8684 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    98da:	3301      	adds	r3, #1
    98dc:	f88d 301f 	strb.w	r3, [sp, #31]
    98e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    98e4:	4911      	ldr	r1, [pc, #68]	; (992c <Adc_Ipw_StartNormalConversion+0x170>)
    98e6:	4613      	mov	r3, r2
    98e8:	005b      	lsls	r3, r3, #1
    98ea:	4413      	add	r3, r2
    98ec:	005b      	lsls	r3, r3, #1
    98ee:	440b      	add	r3, r1
    98f0:	3304      	adds	r3, #4
    98f2:	781b      	ldrb	r3, [r3, #0]
    98f4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    98f8:	429a      	cmp	r2, r3
    98fa:	d3e4      	bcc.n	98c6 <Adc_Ipw_StartNormalConversion+0x10a>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    98fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9900:	2101      	movs	r1, #1
    9902:	4618      	mov	r0, r3
    9904:	f7fe fd30 	bl	8368 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9908:	f89d 2012 	ldrb.w	r2, [sp, #18]
    990c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9910:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9914:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9918:	9300      	str	r3, [sp, #0]
    991a:	4613      	mov	r3, r2
    991c:	220f      	movs	r2, #15
    991e:	f7ff fd99 	bl	9454 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9922:	bf00      	nop
    9924:	b009      	add	sp, #36	; 0x24
    9926:	f85d fb04 	ldr.w	pc, [sp], #4
    992a:	bf00      	nop
    992c:	1fff8d00 	.word	0x1fff8d00
    9930:	1fff8ce8 	.word	0x1fff8ce8
    9934:	1fff8cec 	.word	0x1fff8cec

00009938 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9938:	b500      	push	{lr}
    993a:	b085      	sub	sp, #20
    993c:	4603      	mov	r3, r0
    993e:	f88d 3007 	strb.w	r3, [sp, #7]
    9942:	460b      	mov	r3, r1
    9944:	f8ad 3004 	strh.w	r3, [sp, #4]
    9948:	4613      	mov	r3, r2
    994a:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    994e:	2300      	movs	r3, #0
    9950:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9954:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9958:	4a26      	ldr	r2, [pc, #152]	; (99f4 <Adc_Ipw_StopCurrentConversion+0xbc>)
    995a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    995e:	681a      	ldr	r2, [r3, #0]
    9960:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9964:	4413      	add	r3, r2
    9966:	7c1b      	ldrb	r3, [r3, #16]
    9968:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    996c:	2300      	movs	r3, #0
    996e:	f88d 300f 	strb.w	r3, [sp, #15]
    9972:	e014      	b.n	999e <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9974:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9978:	f89d 100f 	ldrb.w	r1, [sp, #15]
    997c:	2200      	movs	r2, #0
    997e:	4618      	mov	r0, r3
    9980:	f7fe fdbc 	bl	84fc <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    9984:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9988:	f89d 200f 	ldrb.w	r2, [sp, #15]
    998c:	4611      	mov	r1, r2
    998e:	4618      	mov	r0, r3
    9990:	f7fe fe78 	bl	8684 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9994:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9998:	3301      	adds	r3, #1
    999a:	f88d 300f 	strb.w	r3, [sp, #15]
    999e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    99a2:	4915      	ldr	r1, [pc, #84]	; (99f8 <Adc_Ipw_StopCurrentConversion+0xc0>)
    99a4:	4613      	mov	r3, r2
    99a6:	005b      	lsls	r3, r3, #1
    99a8:	4413      	add	r3, r2
    99aa:	005b      	lsls	r3, r3, #1
    99ac:	440b      	add	r3, r1
    99ae:	3304      	adds	r3, #4
    99b0:	781b      	ldrb	r3, [r3, #0]
    99b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99b6:	429a      	cmp	r2, r3
    99b8:	d3dc      	bcc.n	9974 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    99ba:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    99be:	490f      	ldr	r1, [pc, #60]	; (99fc <Adc_Ipw_StopCurrentConversion+0xc4>)
    99c0:	4613      	mov	r3, r2
    99c2:	009b      	lsls	r3, r3, #2
    99c4:	4413      	add	r3, r2
    99c6:	009b      	lsls	r3, r3, #2
    99c8:	440b      	add	r3, r1
    99ca:	3310      	adds	r3, #16
    99cc:	2200      	movs	r2, #0
    99ce:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    99d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    99d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    99d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99dc:	4618      	mov	r0, r3
    99de:	f7ff fc77 	bl	92d0 <Adc_Ipw_StopConversionCheckTimeout>
    99e2:	4603      	mov	r3, r0
    99e4:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    99e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    99ec:	4618      	mov	r0, r3
    99ee:	b005      	add	sp, #20
    99f0:	f85d fb04 	ldr.w	pc, [sp], #4
    99f4:	1fff8ce8 	.word	0x1fff8ce8
    99f8:	1fff8d00 	.word	0x1fff8d00
    99fc:	1fff8cec 	.word	0x1fff8cec

00009a00 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9a00:	b500      	push	{lr}
    9a02:	b085      	sub	sp, #20
    9a04:	4603      	mov	r3, r0
    9a06:	f88d 3007 	strb.w	r3, [sp, #7]
    9a0a:	460b      	mov	r3, r1
    9a0c:	f88d 3006 	strb.w	r3, [sp, #6]
    9a10:	4613      	mov	r3, r2
    9a12:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9a16:	2301      	movs	r3, #1
    9a18:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9a1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a20:	f88d 300f 	strb.w	r3, [sp, #15]
    9a24:	e019      	b.n	9a5a <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9a26:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9a2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a32:	1ad3      	subs	r3, r2, r3
    9a34:	b2db      	uxtb	r3, r3
    9a36:	4619      	mov	r1, r3
    9a38:	f7fe fe0a 	bl	8650 <Adc_Ip_GetConvCompleteFlag>
    9a3c:	4603      	mov	r3, r0
    9a3e:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9a42:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a46:	f083 0301 	eor.w	r3, r3, #1
    9a4a:	b2db      	uxtb	r3, r3
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	d10b      	bne.n	9a68 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a54:	3301      	adds	r3, #1
    9a56:	f88d 300f 	strb.w	r3, [sp, #15]
    9a5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a62:	429a      	cmp	r2, r3
    9a64:	d3df      	bcc.n	9a26 <Adc_Ipw_CheckValidConversion+0x26>
    9a66:	e000      	b.n	9a6a <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9a68:	bf00      	nop
        }
    }

    return ValidConversion;
    9a6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9a6e:	4618      	mov	r0, r3
    9a70:	b005      	add	sp, #20
    9a72:	f85d fb04 	ldr.w	pc, [sp], #4

00009a76 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9a76:	b500      	push	{lr}
    9a78:	b089      	sub	sp, #36	; 0x24
    9a7a:	9102      	str	r1, [sp, #8]
    9a7c:	9201      	str	r2, [sp, #4]
    9a7e:	461a      	mov	r2, r3
    9a80:	4603      	mov	r3, r0
    9a82:	f8ad 300e 	strh.w	r3, [sp, #14]
    9a86:	4613      	mov	r3, r2
    9a88:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9a8c:	2300      	movs	r3, #0
    9a8e:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9a92:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9a96:	4a35      	ldr	r2, [pc, #212]	; (9b6c <Adc_Ipw_ReadGroup+0xf6>)
    9a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a9c:	68da      	ldr	r2, [r3, #12]
    9a9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9aa2:	005b      	lsls	r3, r3, #1
    9aa4:	4413      	add	r3, r2
    9aa6:	881b      	ldrh	r3, [r3, #0]
    9aa8:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9aac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ab0:	4a2e      	ldr	r2, [pc, #184]	; (9b6c <Adc_Ipw_ReadGroup+0xf6>)
    9ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab6:	685a      	ldr	r2, [r3, #4]
    9ab8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9abc:	2134      	movs	r1, #52	; 0x34
    9abe:	fb01 f303 	mul.w	r3, r1, r3
    9ac2:	4413      	add	r3, r2
    9ac4:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9ac6:	9b06      	ldr	r3, [sp, #24]
    9ac8:	789b      	ldrb	r3, [r3, #2]
    9aca:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9ace:	9b06      	ldr	r3, [sp, #24]
    9ad0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9ad4:	2b01      	cmp	r3, #1
    9ad6:	d128      	bne.n	9b2a <Adc_Ipw_ReadGroup+0xb4>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9ad8:	9b06      	ldr	r3, [sp, #24]
    9ada:	68db      	ldr	r3, [r3, #12]
    9adc:	2b00      	cmp	r3, #0
    9ade:	d115      	bne.n	9b0c <Adc_Ipw_ReadGroup+0x96>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9ae0:	9b06      	ldr	r3, [sp, #24]
    9ae2:	695b      	ldr	r3, [r3, #20]
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d111      	bne.n	9b0c <Adc_Ipw_ReadGroup+0x96>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9ae8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9aec:	4920      	ldr	r1, [pc, #128]	; (9b70 <Adc_Ipw_ReadGroup+0xfa>)
    9aee:	4613      	mov	r3, r2
    9af0:	005b      	lsls	r3, r3, #1
    9af2:	4413      	add	r3, r2
    9af4:	005b      	lsls	r3, r3, #1
    9af6:	440b      	add	r3, r1
    9af8:	3302      	adds	r3, #2
    9afa:	881b      	ldrh	r3, [r3, #0]
    9afc:	b29b      	uxth	r3, r3
    9afe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9b02:	429a      	cmp	r2, r3
    9b04:	d002      	beq.n	9b0c <Adc_Ipw_ReadGroup+0x96>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9b06:	2301      	movs	r3, #1
    9b08:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9b0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d124      	bne.n	9b5e <Adc_Ipw_ReadGroup+0xe8>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9b14:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b18:	9a01      	ldr	r2, [sp, #4]
    9b1a:	9902      	ldr	r1, [sp, #8]
    9b1c:	9806      	ldr	r0, [sp, #24]
    9b1e:	f7ff f8fb 	bl	8d18 <Adc_Ipw_ReadGroupNoInt>
    9b22:	4603      	mov	r3, r0
    9b24:	f88d 301f 	strb.w	r3, [sp, #31]
    9b28:	e019      	b.n	9b5e <Adc_Ipw_ReadGroup+0xe8>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9b2a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9b2e:	4911      	ldr	r1, [pc, #68]	; (9b74 <Adc_Ipw_ReadGroup+0xfe>)
    9b30:	4613      	mov	r3, r2
    9b32:	009b      	lsls	r3, r3, #2
    9b34:	4413      	add	r3, r2
    9b36:	009b      	lsls	r3, r3, #2
    9b38:	440b      	add	r3, r1
    9b3a:	681b      	ldr	r3, [r3, #0]
    9b3c:	2b01      	cmp	r3, #1
    9b3e:	d102      	bne.n	9b46 <Adc_Ipw_ReadGroup+0xd0>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9b40:	2301      	movs	r3, #1
    9b42:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9b46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d107      	bne.n	9b5e <Adc_Ipw_ReadGroup+0xe8>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9b4e:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9b52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b56:	9902      	ldr	r1, [sp, #8]
    9b58:	4618      	mov	r0, r3
    9b5a:	f7ff f925 	bl	8da8 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9b5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9b62:	4618      	mov	r0, r3
    9b64:	b009      	add	sp, #36	; 0x24
    9b66:	f85d fb04 	ldr.w	pc, [sp], #4
    9b6a:	bf00      	nop
    9b6c:	1fff8ce8 	.word	0x1fff8ce8
    9b70:	1fff8d00 	.word	0x1fff8d00
    9b74:	1fff8cec 	.word	0x1fff8cec

00009b78 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9b78:	b500      	push	{lr}
    9b7a:	b085      	sub	sp, #20
    9b7c:	4603      	mov	r3, r0
    9b7e:	9100      	str	r1, [sp, #0]
    9b80:	f88d 3007 	strb.w	r3, [sp, #7]
    9b84:	4613      	mov	r3, r2
    9b86:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9b8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b8e:	4a0e      	ldr	r2, [pc, #56]	; (9bc8 <Adc_Ipw_Calibrate+0x50>)
    9b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b94:	681a      	ldr	r2, [r3, #0]
    9b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b9a:	4413      	add	r3, r2
    9b9c:	7c1b      	ldrb	r3, [r3, #16]
    9b9e:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9ba2:	9b00      	ldr	r3, [sp, #0]
    9ba4:	2200      	movs	r2, #0
    9ba6:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9ba8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bac:	4618      	mov	r0, r3
    9bae:	f7fe fd81 	bl	86b4 <Adc_Ip_DoCalibration>
    9bb2:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9bb4:	9b02      	ldr	r3, [sp, #8]
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d002      	beq.n	9bc0 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9bba:	9b00      	ldr	r3, [sp, #0]
    9bbc:	2201      	movs	r2, #1
    9bbe:	701a      	strb	r2, [r3, #0]
    }
}
    9bc0:	bf00      	nop
    9bc2:	b005      	add	sp, #20
    9bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    9bc8:	1fff8ce8 	.word	0x1fff8ce8

00009bcc <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9bcc:	2300      	movs	r3, #0
}
    9bce:	4618      	mov	r0, r3
    9bd0:	4770      	bx	lr
    9bd2:	bf00      	nop

00009bd4 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9bd4:	b500      	push	{lr}
    9bd6:	b083      	sub	sp, #12
    9bd8:	4603      	mov	r3, r0
    9bda:	460a      	mov	r2, r1
    9bdc:	f88d 3007 	strb.w	r3, [sp, #7]
    9be0:	4613      	mov	r3, r2
    9be2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bea:	2100      	movs	r1, #0
    9bec:	4618      	mov	r0, r3
    9bee:	f7fe ffbb 	bl	8b68 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9bf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9bf6:	490b      	ldr	r1, [pc, #44]	; (9c24 <Adc_Ipw_UpdateQueue+0x50>)
    9bf8:	4613      	mov	r3, r2
    9bfa:	005b      	lsls	r3, r3, #1
    9bfc:	4413      	add	r3, r2
    9bfe:	005b      	lsls	r3, r3, #1
    9c00:	440b      	add	r3, r1
    9c02:	881b      	ldrh	r3, [r3, #0]
    9c04:	b29b      	uxth	r3, r3
    9c06:	2b00      	cmp	r3, #0
    9c08:	d007      	beq.n	9c1a <Adc_Ipw_UpdateQueue+0x46>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9c0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c12:	4611      	mov	r1, r2
    9c14:	4618      	mov	r0, r3
    9c16:	f7ff fdd1 	bl	97bc <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9c1a:	bf00      	nop
    9c1c:	b003      	add	sp, #12
    9c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c22:	bf00      	nop
    9c24:	1fff8d00 	.word	0x1fff8d00

00009c28 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9c28:	b510      	push	{r4, lr}
    9c2a:	b08a      	sub	sp, #40	; 0x28
    9c2c:	4604      	mov	r4, r0
    9c2e:	4608      	mov	r0, r1
    9c30:	4611      	mov	r1, r2
    9c32:	461a      	mov	r2, r3
    9c34:	4623      	mov	r3, r4
    9c36:	f88d 300f 	strb.w	r3, [sp, #15]
    9c3a:	4603      	mov	r3, r0
    9c3c:	f8ad 300c 	strh.w	r3, [sp, #12]
    9c40:	460b      	mov	r3, r1
    9c42:	f8ad 300a 	strh.w	r3, [sp, #10]
    9c46:	4613      	mov	r3, r2
    9c48:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9c4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c50:	4a68      	ldr	r2, [pc, #416]	; (9df4 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c56:	68da      	ldr	r2, [r3, #12]
    9c58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c5c:	005b      	lsls	r3, r3, #1
    9c5e:	4413      	add	r3, r2
    9c60:	881b      	ldrh	r3, [r3, #0]
    9c62:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9c66:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9c6a:	4963      	ldr	r1, [pc, #396]	; (9df8 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9c6c:	4613      	mov	r3, r2
    9c6e:	009b      	lsls	r3, r3, #2
    9c70:	4413      	add	r3, r2
    9c72:	009b      	lsls	r3, r3, #2
    9c74:	440b      	add	r3, r1
    9c76:	3310      	adds	r3, #16
    9c78:	781b      	ldrb	r3, [r3, #0]
    9c7a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9c7e:	2300      	movs	r3, #0
    9c80:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9c82:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c86:	4a5b      	ldr	r2, [pc, #364]	; (9df4 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8c:	681a      	ldr	r2, [r3, #0]
    9c8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c92:	4413      	add	r3, r2
    9c94:	7c1b      	ldrb	r3, [r3, #16]
    9c96:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9c9a:	2300      	movs	r3, #0
    9c9c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9ca0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ca4:	4a53      	ldr	r2, [pc, #332]	; (9df4 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9caa:	681b      	ldr	r3, [r3, #0]
    9cac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9cb4:	695b      	ldr	r3, [r3, #20]
    9cb6:	4618      	mov	r0, r3
    9cb8:	f7ff fbc2 	bl	9440 <Adc_Ipw_CalculateNumsBitShift>
    9cbc:	4603      	mov	r3, r0
    9cbe:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9cc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cc6:	4a4b      	ldr	r2, [pc, #300]	; (9df4 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ccc:	685a      	ldr	r2, [r3, #4]
    9cce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cd2:	2134      	movs	r1, #52	; 0x34
    9cd4:	fb01 f303 	mul.w	r3, r1, r3
    9cd8:	4413      	add	r3, r2
    9cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9cde:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9ce2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ce6:	4a43      	ldr	r2, [pc, #268]	; (9df4 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cec:	685a      	ldr	r2, [r3, #4]
    9cee:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cf2:	2134      	movs	r1, #52	; 0x34
    9cf4:	fb01 f303 	mul.w	r3, r1, r3
    9cf8:	4413      	add	r3, r2
    9cfa:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9cfc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9d00:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9d04:	429a      	cmp	r2, r3
    9d06:	d870      	bhi.n	9dea <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9d08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d0c:	f003 030f 	and.w	r3, r3, #15
    9d10:	b2db      	uxtb	r3, r3
    9d12:	2b00      	cmp	r3, #0
    9d14:	d104      	bne.n	9d20 <Adc_Ipw_CheckConversionChannels+0xf8>
    9d16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d1a:	3b10      	subs	r3, #16
    9d1c:	b2db      	uxtb	r3, r3
    9d1e:	e004      	b.n	9d2a <Adc_Ipw_CheckConversionChannels+0x102>
    9d20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d24:	f023 030f 	bic.w	r3, r3, #15
    9d28:	b2db      	uxtb	r3, r3
    9d2a:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9d2e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d32:	4931      	ldr	r1, [pc, #196]	; (9df8 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d34:	4613      	mov	r3, r2
    9d36:	009b      	lsls	r3, r3, #2
    9d38:	4413      	add	r3, r2
    9d3a:	009b      	lsls	r3, r3, #2
    9d3c:	440b      	add	r3, r1
    9d3e:	330c      	adds	r3, #12
    9d40:	6819      	ldr	r1, [r3, #0]
    9d42:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d46:	482c      	ldr	r0, [pc, #176]	; (9df8 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d48:	4613      	mov	r3, r2
    9d4a:	009b      	lsls	r3, r3, #2
    9d4c:	4413      	add	r3, r2
    9d4e:	009b      	lsls	r3, r3, #2
    9d50:	4403      	add	r3, r0
    9d52:	3308      	adds	r3, #8
    9d54:	881b      	ldrh	r3, [r3, #0]
    9d56:	b29b      	uxth	r3, r3
    9d58:	005b      	lsls	r3, r3, #1
    9d5a:	440b      	add	r3, r1
    9d5c:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9d5e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9d62:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9d66:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9d6a:	4618      	mov	r0, r3
    9d6c:	f7ff fe48 	bl	9a00 <Adc_Ipw_CheckValidConversion>
    9d70:	4603      	mov	r3, r0
    9d72:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9d76:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d032      	beq.n	9de4 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9d7e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d82:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9d86:	e026      	b.n	9dd6 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    9d88:	f89d 001b 	ldrb.w	r0, [sp, #27]
    9d8c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9d90:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d94:	1ad3      	subs	r3, r2, r3
    9d96:	b2db      	uxtb	r3, r3
    9d98:	4619      	mov	r1, r3
    9d9a:	f7fe fc73 	bl	8684 <Adc_Ip_GetConvData>
    9d9e:	4603      	mov	r3, r0
    9da0:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    9da4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9da8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9dac:	fa02 f303 	lsl.w	r3, r2, r3
    9db0:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    9db4:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9db8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    9dbc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9dc0:	9300      	str	r3, [sp, #0]
    9dc2:	460b      	mov	r3, r1
    9dc4:	9907      	ldr	r1, [sp, #28]
    9dc6:	9805      	ldr	r0, [sp, #20]
    9dc8:	f000 fa02 	bl	a1d0 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    9dcc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9dd0:	3301      	adds	r3, #1
    9dd2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9dd6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9dda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9dde:	429a      	cmp	r2, r3
    9de0:	d3d2      	bcc.n	9d88 <Adc_Ipw_CheckConversionChannels+0x160>
    9de2:	e002      	b.n	9dea <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    9de4:	2301      	movs	r3, #1
    9de6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    9dea:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    9dee:	4618      	mov	r0, r3
    9df0:	b00a      	add	sp, #40	; 0x28
    9df2:	bd10      	pop	{r4, pc}
    9df4:	1fff8ce8 	.word	0x1fff8ce8
    9df8:	1fff8cec 	.word	0x1fff8cec

00009dfc <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9dfc:	b500      	push	{lr}
    9dfe:	b087      	sub	sp, #28
    9e00:	4603      	mov	r3, r0
    9e02:	f88d 300f 	strb.w	r3, [sp, #15]
    9e06:	460b      	mov	r3, r1
    9e08:	f8ad 300c 	strh.w	r3, [sp, #12]
    9e0c:	4613      	mov	r3, r2
    9e0e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9e12:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e16:	4a33      	ldr	r2, [pc, #204]	; (9ee4 <Adc_Ipw_RestartConversion+0xe8>)
    9e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1c:	68da      	ldr	r2, [r3, #12]
    9e1e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9e22:	005b      	lsls	r3, r3, #1
    9e24:	4413      	add	r3, r2
    9e26:	881b      	ldrh	r3, [r3, #0]
    9e28:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9e2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e30:	4a2c      	ldr	r2, [pc, #176]	; (9ee4 <Adc_Ipw_RestartConversion+0xe8>)
    9e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e36:	681a      	ldr	r2, [r3, #0]
    9e38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e3c:	4413      	add	r3, r2
    9e3e:	7c1b      	ldrb	r3, [r3, #16]
    9e40:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9e44:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e48:	4a26      	ldr	r2, [pc, #152]	; (9ee4 <Adc_Ipw_RestartConversion+0xe8>)
    9e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4e:	685a      	ldr	r2, [r3, #4]
    9e50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9e54:	2134      	movs	r1, #52	; 0x34
    9e56:	fb01 f303 	mul.w	r3, r1, r3
    9e5a:	4413      	add	r3, r2
    9e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e60:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    9e64:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e68:	2b0f      	cmp	r3, #15
    9e6a:	d805      	bhi.n	9e78 <Adc_Ipw_RestartConversion+0x7c>
    9e6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e70:	f003 030f 	and.w	r3, r3, #15
    9e74:	b2db      	uxtb	r3, r3
    9e76:	e000      	b.n	9e7a <Adc_Ipw_RestartConversion+0x7e>
    9e78:	2310      	movs	r3, #16
    9e7a:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    9e7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e82:	2b10      	cmp	r3, #16
    9e84:	d811      	bhi.n	9eaa <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    9e86:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9e8a:	4917      	ldr	r1, [pc, #92]	; (9ee8 <Adc_Ipw_RestartConversion+0xec>)
    9e8c:	4613      	mov	r3, r2
    9e8e:	009b      	lsls	r3, r3, #2
    9e90:	4413      	add	r3, r2
    9e92:	009b      	lsls	r3, r3, #2
    9e94:	440b      	add	r3, r1
    9e96:	3310      	adds	r3, #16
    9e98:	f89d 2014 	ldrb.w	r2, [sp, #20]
    9e9c:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9e9e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9ea2:	4618      	mov	r0, r3
    9ea4:	f000 fc60 	bl	a768 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    9ea8:	e017      	b.n	9eda <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9eaa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9eae:	490e      	ldr	r1, [pc, #56]	; (9ee8 <Adc_Ipw_RestartConversion+0xec>)
    9eb0:	4613      	mov	r3, r2
    9eb2:	009b      	lsls	r3, r3, #2
    9eb4:	4413      	add	r3, r2
    9eb6:	009b      	lsls	r3, r3, #2
    9eb8:	440b      	add	r3, r1
    9eba:	3310      	adds	r3, #16
    9ebc:	2200      	movs	r2, #0
    9ebe:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9ec0:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9ec4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9ec8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9ecc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9ed0:	9300      	str	r3, [sp, #0]
    9ed2:	4613      	mov	r3, r2
    9ed4:	220f      	movs	r2, #15
    9ed6:	f7ff fabd 	bl	9454 <Adc_Ipw_ConfigureConversion>
}
    9eda:	bf00      	nop
    9edc:	b007      	add	sp, #28
    9ede:	f85d fb04 	ldr.w	pc, [sp], #4
    9ee2:	bf00      	nop
    9ee4:	1fff8ce8 	.word	0x1fff8ce8
    9ee8:	1fff8cec 	.word	0x1fff8cec

00009eec <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    9eec:	b084      	sub	sp, #16
    9eee:	4603      	mov	r3, r0
    9ef0:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    9ef4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9ef8:	4907      	ldr	r1, [pc, #28]	; (9f18 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    9efa:	4613      	mov	r3, r2
    9efc:	009b      	lsls	r3, r3, #2
    9efe:	4413      	add	r3, r2
    9f00:	009b      	lsls	r3, r3, #2
    9f02:	440b      	add	r3, r1
    9f04:	3308      	adds	r3, #8
    9f06:	881b      	ldrh	r3, [r3, #0]
    9f08:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    9f0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    9f10:	4618      	mov	r0, r3
    9f12:	b004      	add	sp, #16
    9f14:	4770      	bx	lr
    9f16:	bf00      	nop
    9f18:	1fff8cec 	.word	0x1fff8cec

00009f1c <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    9f1c:	b510      	push	{r4, lr}
    9f1e:	b084      	sub	sp, #16
    9f20:	4604      	mov	r4, r0
    9f22:	4608      	mov	r0, r1
    9f24:	4611      	mov	r1, r2
    9f26:	461a      	mov	r2, r3
    9f28:	4623      	mov	r3, r4
    9f2a:	f88d 3007 	strb.w	r3, [sp, #7]
    9f2e:	4603      	mov	r3, r0
    9f30:	f8ad 3004 	strh.w	r3, [sp, #4]
    9f34:	460b      	mov	r3, r1
    9f36:	f8ad 3002 	strh.w	r3, [sp, #2]
    9f3a:	4613      	mov	r3, r2
    9f3c:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9f40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f44:	4a4f      	ldr	r2, [pc, #316]	; (a084 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f4a:	68da      	ldr	r2, [r3, #12]
    9f4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9f50:	005b      	lsls	r3, r3, #1
    9f52:	4413      	add	r3, r2
    9f54:	881b      	ldrh	r3, [r3, #0]
    9f56:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9f5a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f5e:	494a      	ldr	r1, [pc, #296]	; (a088 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f60:	4613      	mov	r3, r2
    9f62:	009b      	lsls	r3, r3, #2
    9f64:	4413      	add	r3, r2
    9f66:	009b      	lsls	r3, r3, #2
    9f68:	440b      	add	r3, r1
    9f6a:	3304      	adds	r3, #4
    9f6c:	2201      	movs	r2, #1
    9f6e:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9f70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f74:	4944      	ldr	r1, [pc, #272]	; (a088 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f76:	4613      	mov	r3, r2
    9f78:	009b      	lsls	r3, r3, #2
    9f7a:	4413      	add	r3, r2
    9f7c:	009b      	lsls	r3, r3, #2
    9f7e:	440b      	add	r3, r1
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	2b01      	cmp	r3, #1
    9f84:	d109      	bne.n	9f9a <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    9f86:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f8a:	493f      	ldr	r1, [pc, #252]	; (a088 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f8c:	4613      	mov	r3, r2
    9f8e:	009b      	lsls	r3, r3, #2
    9f90:	4413      	add	r3, r2
    9f92:	009b      	lsls	r3, r3, #2
    9f94:	440b      	add	r3, r1
    9f96:	2202      	movs	r2, #2
    9f98:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    9f9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9f9e:	4618      	mov	r0, r3
    9fa0:	f7ff ffa4 	bl	9eec <Adc_Ipw_GetCurrentSampleCount>
    9fa4:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    9fa6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    9faa:	9a02      	ldr	r2, [sp, #8]
    9fac:	429a      	cmp	r2, r3
    9fae:	d35d      	bcc.n	a06c <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    9fb0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9fb4:	4934      	ldr	r1, [pc, #208]	; (a088 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9fb6:	4613      	mov	r3, r2
    9fb8:	009b      	lsls	r3, r3, #2
    9fba:	4413      	add	r3, r2
    9fbc:	009b      	lsls	r3, r3, #2
    9fbe:	440b      	add	r3, r1
    9fc0:	2203      	movs	r2, #3
    9fc2:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    9fc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fc8:	4a2e      	ldr	r2, [pc, #184]	; (a084 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fce:	685a      	ldr	r2, [r3, #4]
    9fd0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9fd4:	2134      	movs	r1, #52	; 0x34
    9fd6:	fb01 f303 	mul.w	r3, r1, r3
    9fda:	4413      	add	r3, r2
    9fdc:	699b      	ldr	r3, [r3, #24]
    9fde:	2b00      	cmp	r3, #0
    9fe0:	d117      	bne.n	a012 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    9fe2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fe6:	4a27      	ldr	r2, [pc, #156]	; (a084 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fec:	685a      	ldr	r2, [r3, #4]
    9fee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ff2:	2134      	movs	r1, #52	; 0x34
    9ff4:	fb01 f303 	mul.w	r3, r1, r3
    9ff8:	4413      	add	r3, r2
    9ffa:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    9ffc:	2b01      	cmp	r3, #1
    9ffe:	d108      	bne.n	a012 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a000:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a004:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a008:	4611      	mov	r1, r2
    a00a:	4618      	mov	r0, r3
    a00c:	f7ff fde2 	bl	9bd4 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a010:	e035      	b.n	a07e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a012:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a016:	4a1b      	ldr	r2, [pc, #108]	; (a084 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a01c:	685a      	ldr	r2, [r3, #4]
    a01e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a022:	2134      	movs	r1, #52	; 0x34
    a024:	fb01 f303 	mul.w	r3, r1, r3
    a028:	4413      	add	r3, r2
    a02a:	689b      	ldr	r3, [r3, #8]
    a02c:	2b01      	cmp	r3, #1
    a02e:	d114      	bne.n	a05a <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a030:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a034:	4914      	ldr	r1, [pc, #80]	; (a088 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a036:	4613      	mov	r3, r2
    a038:	009b      	lsls	r3, r3, #2
    a03a:	4413      	add	r3, r2
    a03c:	009b      	lsls	r3, r3, #2
    a03e:	440b      	add	r3, r1
    a040:	3308      	adds	r3, #8
    a042:	2200      	movs	r2, #0
    a044:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a046:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a04a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a04e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a052:	4618      	mov	r0, r3
    a054:	f7ff fed2 	bl	9dfc <Adc_Ipw_RestartConversion>
}
    a058:	e011      	b.n	a07e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a05a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a05e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a062:	4611      	mov	r1, r2
    a064:	4618      	mov	r0, r3
    a066:	f7ff fdb5 	bl	9bd4 <Adc_Ipw_UpdateQueue>
}
    a06a:	e008      	b.n	a07e <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a06c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a070:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a074:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a078:	4618      	mov	r0, r3
    a07a:	f7ff febf 	bl	9dfc <Adc_Ipw_RestartConversion>
}
    a07e:	bf00      	nop
    a080:	b004      	add	sp, #16
    a082:	bd10      	pop	{r4, pc}
    a084:	1fff8ce8 	.word	0x1fff8ce8
    a088:	1fff8cec 	.word	0x1fff8cec

0000a08c <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a08c:	b510      	push	{r4, lr}
    a08e:	b088      	sub	sp, #32
    a090:	4604      	mov	r4, r0
    a092:	4608      	mov	r0, r1
    a094:	4611      	mov	r1, r2
    a096:	461a      	mov	r2, r3
    a098:	4623      	mov	r3, r4
    a09a:	f88d 300f 	strb.w	r3, [sp, #15]
    a09e:	4603      	mov	r3, r0
    a0a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    a0a4:	460b      	mov	r3, r1
    a0a6:	f88d 300e 	strb.w	r3, [sp, #14]
    a0aa:	4613      	mov	r3, r2
    a0ac:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0b4:	4a44      	ldr	r2, [pc, #272]	; (a1c8 <Adc_Ipw_EndConversion+0x13c>)
    a0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ba:	68da      	ldr	r2, [r3, #12]
    a0bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a0c0:	005b      	lsls	r3, r3, #1
    a0c2:	4413      	add	r3, r2
    a0c4:	881b      	ldrh	r3, [r3, #0]
    a0c6:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a0ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0ce:	4a3e      	ldr	r2, [pc, #248]	; (a1c8 <Adc_Ipw_EndConversion+0x13c>)
    a0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0d4:	685a      	ldr	r2, [r3, #4]
    a0d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a0da:	2134      	movs	r1, #52	; 0x34
    a0dc:	fb01 f303 	mul.w	r3, r1, r3
    a0e0:	4413      	add	r3, r2
    a0e2:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a0e4:	9b06      	ldr	r3, [sp, #24]
    a0e6:	8b9a      	ldrh	r2, [r3, #28]
    a0e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0ec:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a0f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a0f4:	f7ff fd98 	bl	9c28 <Adc_Ipw_CheckConversionChannels>
    a0f8:	4603      	mov	r3, r0
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d160      	bne.n	a1c0 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a0fe:	9b06      	ldr	r3, [sp, #24]
    a100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a104:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a108:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a10c:	492f      	ldr	r1, [pc, #188]	; (a1cc <Adc_Ipw_EndConversion+0x140>)
    a10e:	4613      	mov	r3, r2
    a110:	009b      	lsls	r3, r3, #2
    a112:	4413      	add	r3, r2
    a114:	009b      	lsls	r3, r3, #2
    a116:	440b      	add	r3, r1
    a118:	3310      	adds	r3, #16
    a11a:	781b      	ldrb	r3, [r3, #0]
    a11c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a120:	429a      	cmp	r2, r3
    a122:	d929      	bls.n	a178 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a124:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a128:	4928      	ldr	r1, [pc, #160]	; (a1cc <Adc_Ipw_EndConversion+0x140>)
    a12a:	4613      	mov	r3, r2
    a12c:	009b      	lsls	r3, r3, #2
    a12e:	4413      	add	r3, r2
    a130:	009b      	lsls	r3, r3, #2
    a132:	440b      	add	r3, r1
    a134:	3310      	adds	r3, #16
    a136:	781b      	ldrb	r3, [r3, #0]
    a138:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a13c:	1ad3      	subs	r3, r2, r3
    a13e:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a142:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a146:	2b0f      	cmp	r3, #15
    a148:	d805      	bhi.n	a156 <Adc_Ipw_EndConversion+0xca>
    a14a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a14e:	f003 030f 	and.w	r3, r3, #15
    a152:	b2db      	uxtb	r3, r3
    a154:	e000      	b.n	a158 <Adc_Ipw_EndConversion+0xcc>
    a156:	2310      	movs	r3, #16
    a158:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a15c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a160:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a164:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a168:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a16c:	9300      	str	r3, [sp, #0]
    a16e:	4613      	mov	r3, r2
    a170:	220f      	movs	r2, #15
    a172:	f7ff f96f 	bl	9454 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a176:	e023      	b.n	a1c0 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a178:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a17c:	4913      	ldr	r1, [pc, #76]	; (a1cc <Adc_Ipw_EndConversion+0x140>)
    a17e:	4613      	mov	r3, r2
    a180:	009b      	lsls	r3, r3, #2
    a182:	4413      	add	r3, r2
    a184:	009b      	lsls	r3, r3, #2
    a186:	440b      	add	r3, r1
    a188:	3308      	adds	r3, #8
    a18a:	881b      	ldrh	r3, [r3, #0]
    a18c:	b29b      	uxth	r3, r3
    a18e:	3301      	adds	r3, #1
    a190:	b298      	uxth	r0, r3
    a192:	490e      	ldr	r1, [pc, #56]	; (a1cc <Adc_Ipw_EndConversion+0x140>)
    a194:	4613      	mov	r3, r2
    a196:	009b      	lsls	r3, r3, #2
    a198:	4413      	add	r3, r2
    a19a:	009b      	lsls	r3, r3, #2
    a19c:	440b      	add	r3, r1
    a19e:	3308      	adds	r3, #8
    a1a0:	4602      	mov	r2, r0
    a1a2:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a1a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d009      	beq.n	a1c0 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a1ac:	9b06      	ldr	r3, [sp, #24]
    a1ae:	8b9a      	ldrh	r2, [r3, #28]
    a1b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1b4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a1b8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a1bc:	f7ff feae 	bl	9f1c <Adc_Ipw_UpdateSoftwareGroupState>
}
    a1c0:	bf00      	nop
    a1c2:	b008      	add	sp, #32
    a1c4:	bd10      	pop	{r4, pc}
    a1c6:	bf00      	nop
    a1c8:	1fff8ce8 	.word	0x1fff8ce8
    a1cc:	1fff8cec 	.word	0x1fff8cec

0000a1d0 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a1d0:	b084      	sub	sp, #16
    a1d2:	9003      	str	r0, [sp, #12]
    a1d4:	9102      	str	r1, [sp, #8]
    a1d6:	4611      	mov	r1, r2
    a1d8:	461a      	mov	r2, r3
    a1da:	460b      	mov	r3, r1
    a1dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    a1e0:	4613      	mov	r3, r2
    a1e2:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a1e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a1ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a1ee:	fb02 f303 	mul.w	r3, r2, r3
    a1f2:	005b      	lsls	r3, r3, #1
    a1f4:	9a02      	ldr	r2, [sp, #8]
    a1f6:	4413      	add	r3, r2
    a1f8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a1fc:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a1fe:	bf00      	nop
    a200:	b004      	add	sp, #16
    a202:	4770      	bx	lr

0000a204 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a204:	b500      	push	{lr}
    a206:	b085      	sub	sp, #20
    a208:	4603      	mov	r3, r0
    a20a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a20e:	f7ff fcdd 	bl	9bcc <Adc_GetCoreID>
    a212:	4603      	mov	r3, r0
    a214:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a218:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a21c:	b2db      	uxtb	r3, r3
    a21e:	461a      	mov	r2, r3
    a220:	4b18      	ldr	r3, [pc, #96]	; (a284 <Adc_Ipw_EndConversionNotification+0x80>)
    a222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a226:	681a      	ldr	r2, [r3, #0]
    a228:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a22c:	4413      	add	r3, r2
    a22e:	f893 3020 	ldrb.w	r3, [r3, #32]
    a232:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a236:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a23a:	4913      	ldr	r1, [pc, #76]	; (a288 <Adc_Ipw_EndConversionNotification+0x84>)
    a23c:	4613      	mov	r3, r2
    a23e:	005b      	lsls	r3, r3, #1
    a240:	4413      	add	r3, r2
    a242:	005b      	lsls	r3, r3, #1
    a244:	440b      	add	r3, r1
    a246:	3302      	adds	r3, #2
    a248:	881b      	ldrh	r3, [r3, #0]
    a24a:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a24e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a252:	490d      	ldr	r1, [pc, #52]	; (a288 <Adc_Ipw_EndConversionNotification+0x84>)
    a254:	4613      	mov	r3, r2
    a256:	005b      	lsls	r3, r3, #1
    a258:	4413      	add	r3, r2
    a25a:	005b      	lsls	r3, r3, #1
    a25c:	440b      	add	r3, r1
    a25e:	881b      	ldrh	r3, [r3, #0]
    a260:	b29b      	uxth	r3, r3
    a262:	2b00      	cmp	r3, #0
    a264:	d009      	beq.n	a27a <Adc_Ipw_EndConversionNotification+0x76>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a266:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a26a:	b2db      	uxtb	r3, r3
    a26c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a270:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a274:	2201      	movs	r2, #1
    a276:	f7ff ff09 	bl	a08c <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a27a:	bf00      	nop
    a27c:	b005      	add	sp, #20
    a27e:	f85d fb04 	ldr.w	pc, [sp], #4
    a282:	bf00      	nop
    a284:	1fff8ce8 	.word	0x1fff8ce8
    a288:	1fff8d00 	.word	0x1fff8d00

0000a28c <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a28c:	b500      	push	{lr}
    a28e:	b085      	sub	sp, #20
    a290:	4603      	mov	r3, r0
    a292:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a296:	2300      	movs	r3, #0
    a298:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a29c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a2a0:	4618      	mov	r0, r3
    a2a2:	f7ff ffaf 	bl	a204 <Adc_Ipw_EndConversionNotification>
}
    a2a6:	bf00      	nop
    a2a8:	b005      	add	sp, #20
    a2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a2ae:	bf00      	nop

0000a2b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a2b0:	b084      	sub	sp, #16
    a2b2:	9003      	str	r0, [sp, #12]
    a2b4:	9201      	str	r2, [sp, #4]
    a2b6:	461a      	mov	r2, r3
    a2b8:	460b      	mov	r3, r1
    a2ba:	f88d 300b 	strb.w	r3, [sp, #11]
    a2be:	4613      	mov	r3, r2
    a2c0:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a2c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a2c8:	2b00      	cmp	r3, #0
    a2ca:	d016      	beq.n	a2fa <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a2cc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2d0:	9903      	ldr	r1, [sp, #12]
    a2d2:	4613      	mov	r3, r2
    a2d4:	009b      	lsls	r3, r3, #2
    a2d6:	4413      	add	r3, r2
    a2d8:	00db      	lsls	r3, r3, #3
    a2da:	440b      	add	r3, r1
    a2dc:	3310      	adds	r3, #16
    a2de:	6819      	ldr	r1, [r3, #0]
    a2e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2e4:	9b01      	ldr	r3, [sp, #4]
    a2e6:	4319      	orrs	r1, r3
    a2e8:	9803      	ldr	r0, [sp, #12]
    a2ea:	4613      	mov	r3, r2
    a2ec:	009b      	lsls	r3, r3, #2
    a2ee:	4413      	add	r3, r2
    a2f0:	00db      	lsls	r3, r3, #3
    a2f2:	4403      	add	r3, r0
    a2f4:	3310      	adds	r3, #16
    a2f6:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a2f8:	e016      	b.n	a328 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a2fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2fe:	9903      	ldr	r1, [sp, #12]
    a300:	4613      	mov	r3, r2
    a302:	009b      	lsls	r3, r3, #2
    a304:	4413      	add	r3, r2
    a306:	00db      	lsls	r3, r3, #3
    a308:	440b      	add	r3, r1
    a30a:	3310      	adds	r3, #16
    a30c:	6819      	ldr	r1, [r3, #0]
    a30e:	9b01      	ldr	r3, [sp, #4]
    a310:	43db      	mvns	r3, r3
    a312:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a316:	4019      	ands	r1, r3
    a318:	9803      	ldr	r0, [sp, #12]
    a31a:	4613      	mov	r3, r2
    a31c:	009b      	lsls	r3, r3, #2
    a31e:	4413      	add	r3, r2
    a320:	00db      	lsls	r3, r3, #3
    a322:	4403      	add	r3, r0
    a324:	3310      	adds	r3, #16
    a326:	6019      	str	r1, [r3, #0]
}
    a328:	bf00      	nop
    a32a:	b004      	add	sp, #16
    a32c:	4770      	bx	lr

0000a32e <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a32e:	b082      	sub	sp, #8
    a330:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a332:	9b01      	ldr	r3, [sp, #4]
    a334:	681b      	ldr	r3, [r3, #0]
    a336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a33a:	9b01      	ldr	r3, [sp, #4]
    a33c:	601a      	str	r2, [r3, #0]
}
    a33e:	bf00      	nop
    a340:	b002      	add	sp, #8
    a342:	4770      	bx	lr

0000a344 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a344:	b082      	sub	sp, #8
    a346:	9001      	str	r0, [sp, #4]
    a348:	460b      	mov	r3, r1
    a34a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a34e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a352:	2b00      	cmp	r3, #0
    a354:	d006      	beq.n	a364 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a356:	9b01      	ldr	r3, [sp, #4]
    a358:	681b      	ldr	r3, [r3, #0]
    a35a:	f043 0202 	orr.w	r2, r3, #2
    a35e:	9b01      	ldr	r3, [sp, #4]
    a360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a362:	e005      	b.n	a370 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a364:	9b01      	ldr	r3, [sp, #4]
    a366:	681b      	ldr	r3, [r3, #0]
    a368:	f023 0202 	bic.w	r2, r3, #2
    a36c:	9b01      	ldr	r3, [sp, #4]
    a36e:	601a      	str	r2, [r3, #0]
}
    a370:	bf00      	nop
    a372:	b002      	add	sp, #8
    a374:	4770      	bx	lr

0000a376 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a376:	b086      	sub	sp, #24
    a378:	9003      	str	r0, [sp, #12]
    a37a:	460b      	mov	r3, r1
    a37c:	9201      	str	r2, [sp, #4]
    a37e:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a382:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a386:	9903      	ldr	r1, [sp, #12]
    a388:	4613      	mov	r3, r2
    a38a:	009b      	lsls	r3, r3, #2
    a38c:	4413      	add	r3, r2
    a38e:	00db      	lsls	r3, r3, #3
    a390:	440b      	add	r3, r1
    a392:	3310      	adds	r3, #16
    a394:	681b      	ldr	r3, [r3, #0]
    a396:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a398:	9b05      	ldr	r3, [sp, #20]
    a39a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a39e:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a3a0:	9b01      	ldr	r3, [sp, #4]
    a3a2:	781b      	ldrb	r3, [r3, #0]
    a3a4:	461a      	mov	r2, r3
    a3a6:	9b05      	ldr	r3, [sp, #20]
    a3a8:	4313      	orrs	r3, r2
    a3aa:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a3ac:	9b01      	ldr	r3, [sp, #4]
    a3ae:	785b      	ldrb	r3, [r3, #1]
    a3b0:	021b      	lsls	r3, r3, #8
    a3b2:	b29b      	uxth	r3, r3
    a3b4:	9a05      	ldr	r2, [sp, #20]
    a3b6:	4313      	orrs	r3, r2
    a3b8:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a3ba:	9b01      	ldr	r3, [sp, #4]
    a3bc:	789b      	ldrb	r3, [r3, #2]
    a3be:	041b      	lsls	r3, r3, #16
    a3c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a3c4:	9a05      	ldr	r2, [sp, #20]
    a3c6:	4313      	orrs	r3, r2
    a3c8:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a3ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a3ce:	9903      	ldr	r1, [sp, #12]
    a3d0:	4613      	mov	r3, r2
    a3d2:	009b      	lsls	r3, r3, #2
    a3d4:	4413      	add	r3, r2
    a3d6:	00db      	lsls	r3, r3, #3
    a3d8:	440b      	add	r3, r1
    a3da:	3310      	adds	r3, #16
    a3dc:	9a05      	ldr	r2, [sp, #20]
    a3de:	601a      	str	r2, [r3, #0]
}
    a3e0:	bf00      	nop
    a3e2:	b006      	add	sp, #24
    a3e4:	4770      	bx	lr

0000a3e6 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a3e6:	b082      	sub	sp, #8
    a3e8:	9001      	str	r0, [sp, #4]
    a3ea:	460b      	mov	r3, r1
    a3ec:	f88d 3003 	strb.w	r3, [sp, #3]
    a3f0:	4613      	mov	r3, r2
    a3f2:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a3f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3fa:	9901      	ldr	r1, [sp, #4]
    a3fc:	4613      	mov	r3, r2
    a3fe:	009b      	lsls	r3, r3, #2
    a400:	4413      	add	r3, r2
    a402:	00db      	lsls	r3, r3, #3
    a404:	440b      	add	r3, r1
    a406:	3314      	adds	r3, #20
    a408:	6819      	ldr	r1, [r3, #0]
    a40a:	f8bd 3000 	ldrh.w	r3, [sp]
    a40e:	041b      	lsls	r3, r3, #16
    a410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a414:	43db      	mvns	r3, r3
    a416:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a41a:	4019      	ands	r1, r3
    a41c:	9801      	ldr	r0, [sp, #4]
    a41e:	4613      	mov	r3, r2
    a420:	009b      	lsls	r3, r3, #2
    a422:	4413      	add	r3, r2
    a424:	00db      	lsls	r3, r3, #3
    a426:	4403      	add	r3, r0
    a428:	3314      	adds	r3, #20
    a42a:	6019      	str	r1, [r3, #0]
}
    a42c:	bf00      	nop
    a42e:	b002      	add	sp, #8
    a430:	4770      	bx	lr

0000a432 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a432:	b500      	push	{lr}
    a434:	b087      	sub	sp, #28
    a436:	9001      	str	r0, [sp, #4]
    a438:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a43a:	4a50      	ldr	r2, [pc, #320]	; (a57c <Pdb_Adc_Ip_Init+0x14a>)
    a43c:	9b01      	ldr	r3, [sp, #4]
    a43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a442:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a444:	2300      	movs	r3, #0
    a446:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a448:	9b00      	ldr	r3, [sp, #0]
    a44a:	681b      	ldr	r3, [r3, #0]
    a44c:	049b      	lsls	r3, r3, #18
    a44e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a452:	9a04      	ldr	r2, [sp, #16]
    a454:	4313      	orrs	r3, r2
    a456:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a458:	9b00      	ldr	r3, [sp, #0]
    a45a:	685b      	ldr	r3, [r3, #4]
    a45c:	031b      	lsls	r3, r3, #12
    a45e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a462:	9a04      	ldr	r2, [sp, #16]
    a464:	4313      	orrs	r3, r2
    a466:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a468:	9b00      	ldr	r3, [sp, #0]
    a46a:	689b      	ldr	r3, [r3, #8]
    a46c:	009b      	lsls	r3, r3, #2
    a46e:	f003 030c 	and.w	r3, r3, #12
    a472:	9a04      	ldr	r2, [sp, #16]
    a474:	4313      	orrs	r3, r2
    a476:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a478:	9b00      	ldr	r3, [sp, #0]
    a47a:	68db      	ldr	r3, [r3, #12]
    a47c:	021b      	lsls	r3, r3, #8
    a47e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a482:	9a04      	ldr	r2, [sp, #16]
    a484:	4313      	orrs	r3, r2
    a486:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a488:	9b00      	ldr	r3, [sp, #0]
    a48a:	7c1b      	ldrb	r3, [r3, #16]
    a48c:	2b00      	cmp	r3, #0
    a48e:	d003      	beq.n	a498 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a490:	9b04      	ldr	r3, [sp, #16]
    a492:	f043 0302 	orr.w	r3, r3, #2
    a496:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a498:	9b00      	ldr	r3, [sp, #0]
    a49a:	7c5b      	ldrb	r3, [r3, #17]
    a49c:	2b00      	cmp	r3, #0
    a49e:	d003      	beq.n	a4a8 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a4a0:	9b04      	ldr	r3, [sp, #16]
    a4a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a4a6:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a4a8:	9b00      	ldr	r3, [sp, #0]
    a4aa:	69db      	ldr	r3, [r3, #28]
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	d003      	beq.n	a4b8 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a4b0:	9b04      	ldr	r3, [sp, #16]
    a4b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a4b6:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a4b8:	9b03      	ldr	r3, [sp, #12]
    a4ba:	9a04      	ldr	r2, [sp, #16]
    a4bc:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a4be:	9b00      	ldr	r3, [sp, #0]
    a4c0:	8a5b      	ldrh	r3, [r3, #18]
    a4c2:	4619      	mov	r1, r3
    a4c4:	9801      	ldr	r0, [sp, #4]
    a4c6:	f000 f98f 	bl	a7e8 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a4ca:	9b00      	ldr	r3, [sp, #0]
    a4cc:	7d1b      	ldrb	r3, [r3, #20]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d03e      	beq.n	a550 <Pdb_Adc_Ip_Init+0x11e>
    a4d2:	9b00      	ldr	r3, [sp, #0]
    a4d4:	699b      	ldr	r3, [r3, #24]
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d03a      	beq.n	a550 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a4da:	2300      	movs	r3, #0
    a4dc:	f88d 3017 	strb.w	r3, [sp, #23]
    a4e0:	e030      	b.n	a544 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a4e2:	9b00      	ldr	r3, [sp, #0]
    a4e4:	6999      	ldr	r1, [r3, #24]
    a4e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a4ea:	4613      	mov	r3, r2
    a4ec:	009b      	lsls	r3, r3, #2
    a4ee:	4413      	add	r3, r2
    a4f0:	009b      	lsls	r3, r3, #2
    a4f2:	440b      	add	r3, r1
    a4f4:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a4f6:	9b02      	ldr	r3, [sp, #8]
    a4f8:	7819      	ldrb	r1, [r3, #0]
    a4fa:	9b02      	ldr	r3, [sp, #8]
    a4fc:	3301      	adds	r3, #1
    a4fe:	461a      	mov	r2, r3
    a500:	9803      	ldr	r0, [sp, #12]
    a502:	f7ff ff38 	bl	a376 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a506:	2300      	movs	r3, #0
    a508:	f88d 3016 	strb.w	r3, [sp, #22]
    a50c:	e011      	b.n	a532 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a50e:	9b02      	ldr	r3, [sp, #8]
    a510:	7819      	ldrb	r1, [r3, #0]
    a512:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a516:	9a02      	ldr	r2, [sp, #8]
    a518:	005b      	lsls	r3, r3, #1
    a51a:	4413      	add	r3, r2
    a51c:	889b      	ldrh	r3, [r3, #4]
    a51e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a522:	9801      	ldr	r0, [sp, #4]
    a524:	f000 fa74 	bl	aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a528:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a52c:	3301      	adds	r3, #1
    a52e:	f88d 3016 	strb.w	r3, [sp, #22]
    a532:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a536:	2b07      	cmp	r3, #7
    a538:	d9e9      	bls.n	a50e <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a53a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a53e:	3301      	adds	r3, #1
    a540:	f88d 3017 	strb.w	r3, [sp, #23]
    a544:	9b00      	ldr	r3, [sp, #0]
    a546:	7d1b      	ldrb	r3, [r3, #20]
    a548:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a54c:	429a      	cmp	r2, r3
    a54e:	d3c8      	bcc.n	a4e2 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a550:	9801      	ldr	r0, [sp, #4]
    a552:	f000 f89b 	bl	a68c <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a556:	9801      	ldr	r0, [sp, #4]
    a558:	f000 f92e 	bl	a7b8 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a55c:	9b00      	ldr	r3, [sp, #0]
    a55e:	69da      	ldr	r2, [r3, #28]
    a560:	4907      	ldr	r1, [pc, #28]	; (a580 <Pdb_Adc_Ip_Init+0x14e>)
    a562:	9b01      	ldr	r3, [sp, #4]
    a564:	00db      	lsls	r3, r3, #3
    a566:	440b      	add	r3, r1
    a568:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a56a:	4a05      	ldr	r2, [pc, #20]	; (a580 <Pdb_Adc_Ip_Init+0x14e>)
    a56c:	9b01      	ldr	r3, [sp, #4]
    a56e:	2101      	movs	r1, #1
    a570:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a574:	bf00      	nop
    a576:	b007      	add	sp, #28
    a578:	f85d fb04 	ldr.w	pc, [sp], #4
    a57c:	00010840 	.word	0x00010840
    a580:	1fff8da4 	.word	0x1fff8da4

0000a584 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a584:	b500      	push	{lr}
    a586:	b097      	sub	sp, #92	; 0x5c
    a588:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a58a:	2300      	movs	r3, #0
    a58c:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a58e:	2300      	movs	r3, #0
    a590:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a592:	2300      	movs	r3, #0
    a594:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a596:	2300      	movs	r3, #0
    a598:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a59a:	2300      	movs	r3, #0
    a59c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a5a0:	2300      	movs	r3, #0
    a5a2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a5a6:	2300      	movs	r3, #0
    a5a8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a5ac:	2302      	movs	r3, #2
    a5ae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a5b2:	2300      	movs	r3, #0
    a5b4:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a5b8:	e04d      	b.n	a656 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a5ba:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5be:	4613      	mov	r3, r2
    a5c0:	009b      	lsls	r3, r3, #2
    a5c2:	4413      	add	r3, r2
    a5c4:	009b      	lsls	r3, r3, #2
    a5c6:	aa16      	add	r2, sp, #88	; 0x58
    a5c8:	4413      	add	r3, r2
    a5ca:	3b4c      	subs	r3, #76	; 0x4c
    a5cc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5d0:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a5d2:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5d6:	4613      	mov	r3, r2
    a5d8:	009b      	lsls	r3, r3, #2
    a5da:	4413      	add	r3, r2
    a5dc:	009b      	lsls	r3, r3, #2
    a5de:	aa16      	add	r2, sp, #88	; 0x58
    a5e0:	4413      	add	r3, r2
    a5e2:	3b4b      	subs	r3, #75	; 0x4b
    a5e4:	2200      	movs	r2, #0
    a5e6:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a5e8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5ec:	4613      	mov	r3, r2
    a5ee:	009b      	lsls	r3, r3, #2
    a5f0:	4413      	add	r3, r2
    a5f2:	009b      	lsls	r3, r3, #2
    a5f4:	aa16      	add	r2, sp, #88	; 0x58
    a5f6:	4413      	add	r3, r2
    a5f8:	3b4a      	subs	r3, #74	; 0x4a
    a5fa:	2200      	movs	r2, #0
    a5fc:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a5fe:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a602:	4613      	mov	r3, r2
    a604:	009b      	lsls	r3, r3, #2
    a606:	4413      	add	r3, r2
    a608:	009b      	lsls	r3, r3, #2
    a60a:	aa16      	add	r2, sp, #88	; 0x58
    a60c:	4413      	add	r3, r2
    a60e:	3b49      	subs	r3, #73	; 0x49
    a610:	2200      	movs	r2, #0
    a612:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a614:	2300      	movs	r3, #0
    a616:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a61a:	e013      	b.n	a644 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a61c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a620:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a624:	4613      	mov	r3, r2
    a626:	009b      	lsls	r3, r3, #2
    a628:	4413      	add	r3, r2
    a62a:	005b      	lsls	r3, r3, #1
    a62c:	440b      	add	r3, r1
    a62e:	005b      	lsls	r3, r3, #1
    a630:	aa16      	add	r2, sp, #88	; 0x58
    a632:	4413      	add	r3, r2
    a634:	2200      	movs	r2, #0
    a636:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a63a:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a63e:	3301      	adds	r3, #1
    a640:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a644:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a648:	2b07      	cmp	r3, #7
    a64a:	d9e7      	bls.n	a61c <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a64c:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a650:	3301      	adds	r3, #1
    a652:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a656:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a65a:	2b01      	cmp	r3, #1
    a65c:	d9ad      	bls.n	a5ba <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a65e:	ab03      	add	r3, sp, #12
    a660:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a662:	2300      	movs	r3, #0
    a664:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a666:	ab0d      	add	r3, sp, #52	; 0x34
    a668:	4619      	mov	r1, r3
    a66a:	9801      	ldr	r0, [sp, #4]
    a66c:	f7ff fee1 	bl	a432 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a670:	9801      	ldr	r0, [sp, #4]
    a672:	f000 f823 	bl	a6bc <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a676:	4a04      	ldr	r2, [pc, #16]	; (a688 <Pdb_Adc_Ip_DeInit+0x104>)
    a678:	9b01      	ldr	r3, [sp, #4]
    a67a:	2100      	movs	r1, #0
    a67c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a680:	bf00      	nop
    a682:	b017      	add	sp, #92	; 0x5c
    a684:	f85d fb04 	ldr.w	pc, [sp], #4
    a688:	1fff8da4 	.word	0x1fff8da4

0000a68c <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a68c:	b500      	push	{lr}
    a68e:	b085      	sub	sp, #20
    a690:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a692:	4a09      	ldr	r2, [pc, #36]	; (a6b8 <Pdb_Adc_Ip_Enable+0x2c>)
    a694:	9b01      	ldr	r3, [sp, #4]
    a696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a69a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a69c:	f001 fdbe 	bl	c21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a6a0:	9b03      	ldr	r3, [sp, #12]
    a6a2:	681b      	ldr	r3, [r3, #0]
    a6a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a6a8:	9b03      	ldr	r3, [sp, #12]
    a6aa:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a6ac:	f001 fde2 	bl	c274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a6b0:	bf00      	nop
    a6b2:	b005      	add	sp, #20
    a6b4:	f85d fb04 	ldr.w	pc, [sp], #4
    a6b8:	00010840 	.word	0x00010840

0000a6bc <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a6bc:	b500      	push	{lr}
    a6be:	b085      	sub	sp, #20
    a6c0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6c2:	4a08      	ldr	r2, [pc, #32]	; (a6e4 <Pdb_Adc_Ip_Disable+0x28>)
    a6c4:	9b01      	ldr	r3, [sp, #4]
    a6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ca:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a6cc:	f001 fdf8 	bl	c2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a6d0:	9803      	ldr	r0, [sp, #12]
    a6d2:	f7ff fe2c 	bl	a32e <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a6d6:	f001 fe1f 	bl	c318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a6da:	bf00      	nop
    a6dc:	b005      	add	sp, #20
    a6de:	f85d fb04 	ldr.w	pc, [sp], #4
    a6e2:	bf00      	nop
    a6e4:	00010840 	.word	0x00010840

0000a6e8 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a6e8:	b500      	push	{lr}
    a6ea:	b085      	sub	sp, #20
    a6ec:	9001      	str	r0, [sp, #4]
    a6ee:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6f0:	4a0e      	ldr	r2, [pc, #56]	; (a72c <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a6f2:	9b01      	ldr	r3, [sp, #4]
    a6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f8:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a6fa:	f001 fe33 	bl	c364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a6fe:	9b03      	ldr	r3, [sp, #12]
    a700:	681b      	ldr	r3, [r3, #0]
    a702:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a704:	9b02      	ldr	r3, [sp, #8]
    a706:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a70a:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a70c:	9b00      	ldr	r3, [sp, #0]
    a70e:	021b      	lsls	r3, r3, #8
    a710:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a714:	9a02      	ldr	r2, [sp, #8]
    a716:	4313      	orrs	r3, r2
    a718:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a71a:	9b03      	ldr	r3, [sp, #12]
    a71c:	9a02      	ldr	r2, [sp, #8]
    a71e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a720:	f001 fe4c 	bl	c3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a724:	bf00      	nop
    a726:	b005      	add	sp, #20
    a728:	f85d fb04 	ldr.w	pc, [sp], #4
    a72c:	00010840 	.word	0x00010840

0000a730 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a730:	b500      	push	{lr}
    a732:	b085      	sub	sp, #20
    a734:	9001      	str	r0, [sp, #4]
    a736:	460b      	mov	r3, r1
    a738:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a73c:	4a09      	ldr	r2, [pc, #36]	; (a764 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a73e:	9b01      	ldr	r3, [sp, #4]
    a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a744:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a746:	f001 fe5f 	bl	c408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a74a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a74e:	4619      	mov	r1, r3
    a750:	9803      	ldr	r0, [sp, #12]
    a752:	f7ff fdf7 	bl	a344 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a756:	f001 fe83 	bl	c460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a75a:	bf00      	nop
    a75c:	b005      	add	sp, #20
    a75e:	f85d fb04 	ldr.w	pc, [sp], #4
    a762:	bf00      	nop
    a764:	00010840 	.word	0x00010840

0000a768 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a768:	b500      	push	{lr}
    a76a:	b085      	sub	sp, #20
    a76c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a76e:	4a09      	ldr	r2, [pc, #36]	; (a794 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a770:	9b01      	ldr	r3, [sp, #4]
    a772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a776:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    a778:	f001 fe98 	bl	c4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    a77c:	9b03      	ldr	r3, [sp, #12]
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    a784:	9b03      	ldr	r3, [sp, #12]
    a786:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    a788:	f001 febc 	bl	c504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    a78c:	bf00      	nop
    a78e:	b005      	add	sp, #20
    a790:	f85d fb04 	ldr.w	pc, [sp], #4
    a794:	00010840 	.word	0x00010840

0000a798 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    a798:	b084      	sub	sp, #16
    a79a:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a79c:	4a05      	ldr	r2, [pc, #20]	; (a7b4 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    a79e:	9b01      	ldr	r3, [sp, #4]
    a7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7a4:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    a7a6:	9b03      	ldr	r3, [sp, #12]
    a7a8:	689b      	ldr	r3, [r3, #8]
    a7aa:	b29b      	uxth	r3, r3
}
    a7ac:	4618      	mov	r0, r3
    a7ae:	b004      	add	sp, #16
    a7b0:	4770      	bx	lr
    a7b2:	bf00      	nop
    a7b4:	00010840 	.word	0x00010840

0000a7b8 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    a7b8:	b500      	push	{lr}
    a7ba:	b085      	sub	sp, #20
    a7bc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7be:	4a09      	ldr	r2, [pc, #36]	; (a7e4 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    a7c0:	9b01      	ldr	r3, [sp, #4]
    a7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c6:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    a7c8:	f001 fec2 	bl	c550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    a7cc:	9b03      	ldr	r3, [sp, #12]
    a7ce:	681b      	ldr	r3, [r3, #0]
    a7d0:	f043 0201 	orr.w	r2, r3, #1
    a7d4:	9b03      	ldr	r3, [sp, #12]
    a7d6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    a7d8:	f001 fee6 	bl	c5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    a7dc:	bf00      	nop
    a7de:	b005      	add	sp, #20
    a7e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a7e4:	00010840 	.word	0x00010840

0000a7e8 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    a7e8:	b500      	push	{lr}
    a7ea:	b085      	sub	sp, #20
    a7ec:	9001      	str	r0, [sp, #4]
    a7ee:	460b      	mov	r3, r1
    a7f0:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7f4:	4a0d      	ldr	r2, [pc, #52]	; (a82c <Pdb_Adc_Ip_SetModulus+0x44>)
    a7f6:	9b01      	ldr	r3, [sp, #4]
    a7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7fc:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    a7fe:	f002 f989 	bl	cb14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    a802:	9b03      	ldr	r3, [sp, #12]
    a804:	685b      	ldr	r3, [r3, #4]
    a806:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    a808:	9b02      	ldr	r3, [sp, #8]
    a80a:	0c1b      	lsrs	r3, r3, #16
    a80c:	041b      	lsls	r3, r3, #16
    a80e:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    a810:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a814:	9a02      	ldr	r2, [sp, #8]
    a816:	4313      	orrs	r3, r2
    a818:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    a81a:	9b03      	ldr	r3, [sp, #12]
    a81c:	9a02      	ldr	r2, [sp, #8]
    a81e:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    a820:	f002 f9a4 	bl	cb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    a824:	bf00      	nop
    a826:	b005      	add	sp, #20
    a828:	f85d fb04 	ldr.w	pc, [sp], #4
    a82c:	00010840 	.word	0x00010840

0000a830 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a830:	b500      	push	{lr}
    a832:	b087      	sub	sp, #28
    a834:	9003      	str	r0, [sp, #12]
    a836:	460b      	mov	r3, r1
    a838:	9201      	str	r2, [sp, #4]
    a83a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a83e:	4a0a      	ldr	r2, [pc, #40]	; (a868 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    a840:	9b03      	ldr	r3, [sp, #12]
    a842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a846:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    a848:	f001 ff26 	bl	c698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    a84c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a850:	9a01      	ldr	r2, [sp, #4]
    a852:	4619      	mov	r1, r3
    a854:	9805      	ldr	r0, [sp, #20]
    a856:	f7ff fd8e 	bl	a376 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    a85a:	f001 ff49 	bl	c6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    a85e:	bf00      	nop
    a860:	b007      	add	sp, #28
    a862:	f85d fb04 	ldr.w	pc, [sp], #4
    a866:	bf00      	nop
    a868:	00010840 	.word	0x00010840

0000a86c <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    a86c:	b084      	sub	sp, #16
    a86e:	9001      	str	r0, [sp, #4]
    a870:	460b      	mov	r3, r1
    a872:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a876:	4a0c      	ldr	r2, [pc, #48]	; (a8a8 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    a878:	9b01      	ldr	r3, [sp, #4]
    a87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a87e:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    a880:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a884:	9903      	ldr	r1, [sp, #12]
    a886:	4613      	mov	r3, r2
    a888:	009b      	lsls	r3, r3, #2
    a88a:	4413      	add	r3, r2
    a88c:	00db      	lsls	r3, r3, #3
    a88e:	440b      	add	r3, r1
    a890:	3314      	adds	r3, #20
    a892:	681b      	ldr	r3, [r3, #0]
    a894:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    a896:	9b02      	ldr	r3, [sp, #8]
    a898:	0c1b      	lsrs	r3, r3, #16
    a89a:	b2db      	uxtb	r3, r3
    a89c:	9302      	str	r3, [sp, #8]

    return Result;
    a89e:	9b02      	ldr	r3, [sp, #8]
}
    a8a0:	4618      	mov	r0, r3
    a8a2:	b004      	add	sp, #16
    a8a4:	4770      	bx	lr
    a8a6:	bf00      	nop
    a8a8:	00010840 	.word	0x00010840

0000a8ac <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    a8ac:	b500      	push	{lr}
    a8ae:	b085      	sub	sp, #20
    a8b0:	9001      	str	r0, [sp, #4]
    a8b2:	460b      	mov	r3, r1
    a8b4:	f88d 3003 	strb.w	r3, [sp, #3]
    a8b8:	4613      	mov	r3, r2
    a8ba:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a8be:	4a0a      	ldr	r2, [pc, #40]	; (a8e8 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    a8c0:	9b01      	ldr	r3, [sp, #4]
    a8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8c6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    a8c8:	f002 f880 	bl	c9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    a8cc:	f8bd 2000 	ldrh.w	r2, [sp]
    a8d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a8d4:	4619      	mov	r1, r3
    a8d6:	9803      	ldr	r0, [sp, #12]
    a8d8:	f7ff fd85 	bl	a3e6 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    a8dc:	f002 f8a2 	bl	ca24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    a8e0:	bf00      	nop
    a8e2:	b005      	add	sp, #20
    a8e4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8e8:	00010840 	.word	0x00010840

0000a8ec <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    a8ec:	b500      	push	{lr}
    a8ee:	b085      	sub	sp, #20
    a8f0:	9001      	str	r0, [sp, #4]
    a8f2:	4608      	mov	r0, r1
    a8f4:	4611      	mov	r1, r2
    a8f6:	461a      	mov	r2, r3
    a8f8:	4603      	mov	r3, r0
    a8fa:	f88d 3003 	strb.w	r3, [sp, #3]
    a8fe:	460b      	mov	r3, r1
    a900:	f88d 3002 	strb.w	r3, [sp, #2]
    a904:	4613      	mov	r3, r2
    a906:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a90a:	4a10      	ldr	r2, [pc, #64]	; (a94c <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    a90c:	9b01      	ldr	r3, [sp, #4]
    a90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a912:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a914:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a918:	2201      	movs	r2, #1
    a91a:	fa02 f303 	lsl.w	r3, r2, r3
    a91e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    a920:	9b02      	ldr	r3, [sp, #8]
    a922:	041b      	lsls	r3, r3, #16
    a924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a928:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    a92a:	f001 ff07 	bl	c73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a92e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a932:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a936:	9a02      	ldr	r2, [sp, #8]
    a938:	9803      	ldr	r0, [sp, #12]
    a93a:	f7ff fcb9 	bl	a2b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    a93e:	f001 ff29 	bl	c794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    a942:	bf00      	nop
    a944:	b005      	add	sp, #20
    a946:	f85d fb04 	ldr.w	pc, [sp], #4
    a94a:	bf00      	nop
    a94c:	00010840 	.word	0x00010840

0000a950 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    a950:	b500      	push	{lr}
    a952:	b085      	sub	sp, #20
    a954:	9001      	str	r0, [sp, #4]
    a956:	4608      	mov	r0, r1
    a958:	4611      	mov	r1, r2
    a95a:	461a      	mov	r2, r3
    a95c:	4603      	mov	r3, r0
    a95e:	f88d 3003 	strb.w	r3, [sp, #3]
    a962:	460b      	mov	r3, r1
    a964:	f88d 3002 	strb.w	r3, [sp, #2]
    a968:	4613      	mov	r3, r2
    a96a:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a96e:	4a0f      	ldr	r2, [pc, #60]	; (a9ac <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    a970:	9b01      	ldr	r3, [sp, #4]
    a972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a976:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a978:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a97c:	2201      	movs	r2, #1
    a97e:	fa02 f303 	lsl.w	r3, r2, r3
    a982:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    a984:	9b02      	ldr	r3, [sp, #8]
    a986:	b2db      	uxtb	r3, r3
    a988:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    a98a:	f001 ff29 	bl	c7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a98e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a992:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a996:	9a02      	ldr	r2, [sp, #8]
    a998:	9803      	ldr	r0, [sp, #12]
    a99a:	f7ff fc89 	bl	a2b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    a99e:	f001 ff4b 	bl	c838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    a9a2:	bf00      	nop
    a9a4:	b005      	add	sp, #20
    a9a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a9aa:	bf00      	nop
    a9ac:	00010840 	.word	0x00010840

0000a9b0 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    a9b0:	b500      	push	{lr}
    a9b2:	b085      	sub	sp, #20
    a9b4:	9001      	str	r0, [sp, #4]
    a9b6:	4608      	mov	r0, r1
    a9b8:	4611      	mov	r1, r2
    a9ba:	461a      	mov	r2, r3
    a9bc:	4603      	mov	r3, r0
    a9be:	f88d 3003 	strb.w	r3, [sp, #3]
    a9c2:	460b      	mov	r3, r1
    a9c4:	f88d 3002 	strb.w	r3, [sp, #2]
    a9c8:	4613      	mov	r3, r2
    a9ca:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9ce:	4a0f      	ldr	r2, [pc, #60]	; (aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    a9d0:	9b01      	ldr	r3, [sp, #4]
    a9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d6:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a9d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a9dc:	2201      	movs	r2, #1
    a9de:	fa02 f303 	lsl.w	r3, r2, r3
    a9e2:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    a9e4:	9b02      	ldr	r3, [sp, #8]
    a9e6:	021b      	lsls	r3, r3, #8
    a9e8:	b29b      	uxth	r3, r3
    a9ea:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    a9ec:	f001 ff4a 	bl	c884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a9f0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a9f4:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a9f8:	9a02      	ldr	r2, [sp, #8]
    a9fa:	9803      	ldr	r0, [sp, #12]
    a9fc:	f7ff fc58 	bl	a2b0 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    aa00:	f001 ff6c 	bl	c8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    aa04:	bf00      	nop
    aa06:	b005      	add	sp, #20
    aa08:	f85d fb04 	ldr.w	pc, [sp], #4
    aa0c:	00010840 	.word	0x00010840

0000aa10 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    aa10:	b410      	push	{r4}
    aa12:	b085      	sub	sp, #20
    aa14:	9001      	str	r0, [sp, #4]
    aa16:	4608      	mov	r0, r1
    aa18:	4611      	mov	r1, r2
    aa1a:	461a      	mov	r2, r3
    aa1c:	4603      	mov	r3, r0
    aa1e:	f88d 3003 	strb.w	r3, [sp, #3]
    aa22:	460b      	mov	r3, r1
    aa24:	f88d 3002 	strb.w	r3, [sp, #2]
    aa28:	4613      	mov	r3, r2
    aa2a:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa2e:	4a0c      	ldr	r2, [pc, #48]	; (aa60 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    aa30:	9b01      	ldr	r3, [sp, #4]
    aa32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa36:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    aa38:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa3c:	f89d 4002 	ldrb.w	r4, [sp, #2]
    aa40:	f8bd 0000 	ldrh.w	r0, [sp]
    aa44:	9903      	ldr	r1, [sp, #12]
    aa46:	4613      	mov	r3, r2
    aa48:	009b      	lsls	r3, r3, #2
    aa4a:	4413      	add	r3, r2
    aa4c:	005b      	lsls	r3, r3, #1
    aa4e:	4423      	add	r3, r4
    aa50:	3306      	adds	r3, #6
    aa52:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    aa56:	bf00      	nop
    aa58:	b005      	add	sp, #20
    aa5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa5e:	4770      	bx	lr
    aa60:	00010840 	.word	0x00010840

0000aa64 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    aa64:	b500      	push	{lr}
    aa66:	b087      	sub	sp, #28
    aa68:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa6a:	4a19      	ldr	r2, [pc, #100]	; (aad0 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    aa6c:	9b01      	ldr	r3, [sp, #4]
    aa6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa72:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    aa74:	2300      	movs	r3, #0
    aa76:	f88d 300c 	strb.w	r3, [sp, #12]
    aa7a:	2300      	movs	r3, #0
    aa7c:	f88d 300d 	strb.w	r3, [sp, #13]
    aa80:	2300      	movs	r3, #0
    aa82:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    aa86:	f001 fdb5 	bl	c5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    aa8a:	9804      	ldr	r0, [sp, #16]
    aa8c:	f7ff fc4f 	bl	a32e <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    aa90:	2100      	movs	r1, #0
    aa92:	9804      	ldr	r0, [sp, #16]
    aa94:	f7ff fc56 	bl	a344 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    aa98:	f001 fdd8 	bl	c64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aa9c:	2300      	movs	r3, #0
    aa9e:	f88d 3017 	strb.w	r3, [sp, #23]
    aaa2:	e00b      	b.n	aabc <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    aaa4:	aa03      	add	r2, sp, #12
    aaa6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aaaa:	4619      	mov	r1, r3
    aaac:	9804      	ldr	r0, [sp, #16]
    aaae:	f000 f899 	bl	abe4 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aab2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aab6:	3301      	adds	r3, #1
    aab8:	f88d 3017 	strb.w	r3, [sp, #23]
    aabc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aac0:	2b01      	cmp	r3, #1
    aac2:	d9ef      	bls.n	aaa4 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    aac4:	bf00      	nop
    aac6:	bf00      	nop
    aac8:	b007      	add	sp, #28
    aaca:	f85d fb04 	ldr.w	pc, [sp], #4
    aace:	bf00      	nop
    aad0:	00010840 	.word	0x00010840

0000aad4 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    aad4:	b500      	push	{lr}
    aad6:	b087      	sub	sp, #28
    aad8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aada:	4a40      	ldr	r2, [pc, #256]	; (abdc <Pdb_Adc_Ip_IRQHandler+0x108>)
    aadc:	9b01      	ldr	r3, [sp, #4]
    aade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aae2:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    aae4:	4a3e      	ldr	r2, [pc, #248]	; (abe0 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aae6:	9b01      	ldr	r3, [sp, #4]
    aae8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    aaec:	2b00      	cmp	r3, #0
    aaee:	d04d      	beq.n	ab8c <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    aaf0:	9b04      	ldr	r3, [sp, #16]
    aaf2:	681b      	ldr	r3, [r3, #0]
    aaf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    aaf8:	2b00      	cmp	r3, #0
    aafa:	d06a      	beq.n	abd2 <Pdb_Adc_Ip_IRQHandler+0xfe>
    aafc:	4a38      	ldr	r2, [pc, #224]	; (abe0 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aafe:	9b01      	ldr	r3, [sp, #4]
    ab00:	00db      	lsls	r3, r3, #3
    ab02:	4413      	add	r3, r2
    ab04:	685b      	ldr	r3, [r3, #4]
    ab06:	2b00      	cmp	r3, #0
    ab08:	d063      	beq.n	abd2 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab0a:	2300      	movs	r3, #0
    ab0c:	f88d 3017 	strb.w	r3, [sp, #23]
    ab10:	e037      	b.n	ab82 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    ab12:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab16:	9904      	ldr	r1, [sp, #16]
    ab18:	4613      	mov	r3, r2
    ab1a:	009b      	lsls	r3, r3, #2
    ab1c:	4413      	add	r3, r2
    ab1e:	00db      	lsls	r3, r3, #3
    ab20:	440b      	add	r3, r1
    ab22:	3314      	adds	r3, #20
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	b29b      	uxth	r3, r3
    ab28:	b2db      	uxtb	r3, r3
    ab2a:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    ab2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab32:	2b00      	cmp	r3, #0
    ab34:	d020      	beq.n	ab78 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab36:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab3a:	9904      	ldr	r1, [sp, #16]
    ab3c:	4613      	mov	r3, r2
    ab3e:	009b      	lsls	r3, r3, #2
    ab40:	4413      	add	r3, r2
    ab42:	00db      	lsls	r3, r3, #3
    ab44:	440b      	add	r3, r1
    ab46:	3314      	adds	r3, #20
    ab48:	681b      	ldr	r3, [r3, #0]
    ab4a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ab52:	9804      	ldr	r0, [sp, #16]
    ab54:	4613      	mov	r3, r2
    ab56:	009b      	lsls	r3, r3, #2
    ab58:	4413      	add	r3, r2
    ab5a:	00db      	lsls	r3, r3, #3
    ab5c:	4403      	add	r3, r0
    ab5e:	3314      	adds	r3, #20
    ab60:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    ab62:	4a1f      	ldr	r2, [pc, #124]	; (abe0 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ab64:	9b01      	ldr	r3, [sp, #4]
    ab66:	00db      	lsls	r3, r3, #3
    ab68:	4413      	add	r3, r2
    ab6a:	685b      	ldr	r3, [r3, #4]
    ab6c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ab70:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab74:	4610      	mov	r0, r2
    ab76:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab78:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab7c:	3301      	adds	r3, #1
    ab7e:	f88d 3017 	strb.w	r3, [sp, #23]
    ab82:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab86:	2b01      	cmp	r3, #1
    ab88:	d9c3      	bls.n	ab12 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ab8a:	e022      	b.n	abd2 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab8c:	2300      	movs	r3, #0
    ab8e:	f88d 3017 	strb.w	r3, [sp, #23]
    ab92:	e01a      	b.n	abca <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab94:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab98:	9904      	ldr	r1, [sp, #16]
    ab9a:	4613      	mov	r3, r2
    ab9c:	009b      	lsls	r3, r3, #2
    ab9e:	4413      	add	r3, r2
    aba0:	00db      	lsls	r3, r3, #3
    aba2:	440b      	add	r3, r1
    aba4:	3314      	adds	r3, #20
    aba6:	681b      	ldr	r3, [r3, #0]
    aba8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    abac:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    abb0:	9804      	ldr	r0, [sp, #16]
    abb2:	4613      	mov	r3, r2
    abb4:	009b      	lsls	r3, r3, #2
    abb6:	4413      	add	r3, r2
    abb8:	00db      	lsls	r3, r3, #3
    abba:	4403      	add	r3, r0
    abbc:	3314      	adds	r3, #20
    abbe:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    abc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abc4:	3301      	adds	r3, #1
    abc6:	f88d 3017 	strb.w	r3, [sp, #23]
    abca:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abce:	2b01      	cmp	r3, #1
    abd0:	d9e0      	bls.n	ab94 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    abd2:	bf00      	nop
    abd4:	b007      	add	sp, #28
    abd6:	f85d fb04 	ldr.w	pc, [sp], #4
    abda:	bf00      	nop
    abdc:	00010840 	.word	0x00010840
    abe0:	1fff8da4 	.word	0x1fff8da4

0000abe4 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    abe4:	b500      	push	{lr}
    abe6:	b085      	sub	sp, #20
    abe8:	9003      	str	r0, [sp, #12]
    abea:	460b      	mov	r3, r1
    abec:	9201      	str	r2, [sp, #4]
    abee:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    abf2:	f001 fe99 	bl	c928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    abf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    abfa:	9a01      	ldr	r2, [sp, #4]
    abfc:	4619      	mov	r1, r3
    abfe:	9803      	ldr	r0, [sp, #12]
    ac00:	f7ff fbb9 	bl	a376 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    ac04:	f001 febc 	bl	c980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    ac08:	f001 ff32 	bl	ca70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    ac0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac10:	22ff      	movs	r2, #255	; 0xff
    ac12:	4619      	mov	r1, r3
    ac14:	9803      	ldr	r0, [sp, #12]
    ac16:	f7ff fbe6 	bl	a3e6 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ac1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ac1e:	9903      	ldr	r1, [sp, #12]
    ac20:	4613      	mov	r3, r2
    ac22:	009b      	lsls	r3, r3, #2
    ac24:	4413      	add	r3, r2
    ac26:	00db      	lsls	r3, r3, #3
    ac28:	440b      	add	r3, r1
    ac2a:	3314      	adds	r3, #20
    ac2c:	681b      	ldr	r3, [r3, #0]
    ac2e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ac32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ac36:	9803      	ldr	r0, [sp, #12]
    ac38:	4613      	mov	r3, r2
    ac3a:	009b      	lsls	r3, r3, #2
    ac3c:	4413      	add	r3, r2
    ac3e:	00db      	lsls	r3, r3, #3
    ac40:	4403      	add	r3, r0
    ac42:	3314      	adds	r3, #20
    ac44:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    ac46:	f001 ff3f 	bl	cac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    ac4a:	bf00      	nop
    ac4c:	b005      	add	sp, #20
    ac4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac52:	bf00      	nop

0000ac54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    ac54:	b500      	push	{lr}
    ac56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac58:	f7f5 ff7e 	bl	b58 <Sys_GetCoreID>
    ac5c:	4603      	mov	r3, r0
    ac5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    ac60:	4a10      	ldr	r2, [pc, #64]	; (aca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ac62:	9b01      	ldr	r3, [sp, #4]
    ac64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac68:	2b00      	cmp	r3, #0
    ac6a:	d10d      	bne.n	ac88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac6c:	f7f5 fe92 	bl	994 <Adc_schm_read_msr>
    ac70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac72:	9b00      	ldr	r3, [sp, #0]
    ac74:	f003 0301 	and.w	r3, r3, #1
    ac78:	2b00      	cmp	r3, #0
    ac7a:	d100      	bne.n	ac7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ac7e:	490a      	ldr	r1, [pc, #40]	; (aca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    ac80:	9b01      	ldr	r3, [sp, #4]
    ac82:	9a00      	ldr	r2, [sp, #0]
    ac84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    ac88:	4a06      	ldr	r2, [pc, #24]	; (aca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ac8a:	9b01      	ldr	r3, [sp, #4]
    ac8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac90:	1c5a      	adds	r2, r3, #1
    ac92:	4904      	ldr	r1, [pc, #16]	; (aca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    ac94:	9b01      	ldr	r3, [sp, #4]
    ac96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac9a:	bf00      	nop
    ac9c:	b003      	add	sp, #12
    ac9e:	f85d fb04 	ldr.w	pc, [sp], #4
    aca2:	bf00      	nop
    aca4:	1fff8db8 	.word	0x1fff8db8
    aca8:	1fff8db4 	.word	0x1fff8db4

0000acac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    acac:	b500      	push	{lr}
    acae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acb0:	f7f5 ff52 	bl	b58 <Sys_GetCoreID>
    acb4:	4603      	mov	r3, r0
    acb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    acb8:	4a0d      	ldr	r2, [pc, #52]	; (acf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    acba:	9b01      	ldr	r3, [sp, #4]
    acbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc0:	1e5a      	subs	r2, r3, #1
    acc2:	490b      	ldr	r1, [pc, #44]	; (acf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    acc4:	9b01      	ldr	r3, [sp, #4]
    acc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    acca:	4a0a      	ldr	r2, [pc, #40]	; (acf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    accc:	9b01      	ldr	r3, [sp, #4]
    acce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd2:	f003 0301 	and.w	r3, r3, #1
    acd6:	2b00      	cmp	r3, #0
    acd8:	d106      	bne.n	ace8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    acda:	4a05      	ldr	r2, [pc, #20]	; (acf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    acdc:	9b01      	ldr	r3, [sp, #4]
    acde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace2:	2b00      	cmp	r3, #0
    ace4:	d100      	bne.n	ace8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ace6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ace8:	bf00      	nop
    acea:	b003      	add	sp, #12
    acec:	f85d fb04 	ldr.w	pc, [sp], #4
    acf0:	1fff8db8 	.word	0x1fff8db8
    acf4:	1fff8db4 	.word	0x1fff8db4

0000acf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    acf8:	b500      	push	{lr}
    acfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acfc:	f7f5 ff2c 	bl	b58 <Sys_GetCoreID>
    ad00:	4603      	mov	r3, r0
    ad02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    ad04:	4a10      	ldr	r2, [pc, #64]	; (ad48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ad06:	9b01      	ldr	r3, [sp, #4]
    ad08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d10d      	bne.n	ad2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad10:	f7f5 fe40 	bl	994 <Adc_schm_read_msr>
    ad14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad16:	9b00      	ldr	r3, [sp, #0]
    ad18:	f003 0301 	and.w	r3, r3, #1
    ad1c:	2b00      	cmp	r3, #0
    ad1e:	d100      	bne.n	ad22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ad22:	490a      	ldr	r1, [pc, #40]	; (ad4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    ad24:	9b01      	ldr	r3, [sp, #4]
    ad26:	9a00      	ldr	r2, [sp, #0]
    ad28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    ad2c:	4a06      	ldr	r2, [pc, #24]	; (ad48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ad2e:	9b01      	ldr	r3, [sp, #4]
    ad30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad34:	1c5a      	adds	r2, r3, #1
    ad36:	4904      	ldr	r1, [pc, #16]	; (ad48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    ad38:	9b01      	ldr	r3, [sp, #4]
    ad3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad3e:	bf00      	nop
    ad40:	b003      	add	sp, #12
    ad42:	f85d fb04 	ldr.w	pc, [sp], #4
    ad46:	bf00      	nop
    ad48:	1fff8dc0 	.word	0x1fff8dc0
    ad4c:	1fff8dbc 	.word	0x1fff8dbc

0000ad50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    ad50:	b500      	push	{lr}
    ad52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad54:	f7f5 ff00 	bl	b58 <Sys_GetCoreID>
    ad58:	4603      	mov	r3, r0
    ad5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    ad5c:	4a0d      	ldr	r2, [pc, #52]	; (ad94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ad5e:	9b01      	ldr	r3, [sp, #4]
    ad60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad64:	1e5a      	subs	r2, r3, #1
    ad66:	490b      	ldr	r1, [pc, #44]	; (ad94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ad68:	9b01      	ldr	r3, [sp, #4]
    ad6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ad6e:	4a0a      	ldr	r2, [pc, #40]	; (ad98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    ad70:	9b01      	ldr	r3, [sp, #4]
    ad72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad76:	f003 0301 	and.w	r3, r3, #1
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d106      	bne.n	ad8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    ad7e:	4a05      	ldr	r2, [pc, #20]	; (ad94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    ad80:	9b01      	ldr	r3, [sp, #4]
    ad82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad86:	2b00      	cmp	r3, #0
    ad88:	d100      	bne.n	ad8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad8c:	bf00      	nop
    ad8e:	b003      	add	sp, #12
    ad90:	f85d fb04 	ldr.w	pc, [sp], #4
    ad94:	1fff8dc0 	.word	0x1fff8dc0
    ad98:	1fff8dbc 	.word	0x1fff8dbc

0000ad9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    ad9c:	b500      	push	{lr}
    ad9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ada0:	f7f5 feda 	bl	b58 <Sys_GetCoreID>
    ada4:	4603      	mov	r3, r0
    ada6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    ada8:	4a10      	ldr	r2, [pc, #64]	; (adec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    adaa:	9b01      	ldr	r3, [sp, #4]
    adac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adb0:	2b00      	cmp	r3, #0
    adb2:	d10d      	bne.n	add0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    adb4:	f7f5 fdee 	bl	994 <Adc_schm_read_msr>
    adb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adba:	9b00      	ldr	r3, [sp, #0]
    adbc:	f003 0301 	and.w	r3, r3, #1
    adc0:	2b00      	cmp	r3, #0
    adc2:	d100      	bne.n	adc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    adc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    adc6:	490a      	ldr	r1, [pc, #40]	; (adf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    adc8:	9b01      	ldr	r3, [sp, #4]
    adca:	9a00      	ldr	r2, [sp, #0]
    adcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    add0:	4a06      	ldr	r2, [pc, #24]	; (adec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    add2:	9b01      	ldr	r3, [sp, #4]
    add4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add8:	1c5a      	adds	r2, r3, #1
    adda:	4904      	ldr	r1, [pc, #16]	; (adec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    addc:	9b01      	ldr	r3, [sp, #4]
    adde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ade2:	bf00      	nop
    ade4:	b003      	add	sp, #12
    ade6:	f85d fb04 	ldr.w	pc, [sp], #4
    adea:	bf00      	nop
    adec:	1fff8dc8 	.word	0x1fff8dc8
    adf0:	1fff8dc4 	.word	0x1fff8dc4

0000adf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    adf4:	b500      	push	{lr}
    adf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adf8:	f7f5 feae 	bl	b58 <Sys_GetCoreID>
    adfc:	4603      	mov	r3, r0
    adfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    ae00:	4a0d      	ldr	r2, [pc, #52]	; (ae38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ae02:	9b01      	ldr	r3, [sp, #4]
    ae04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae08:	1e5a      	subs	r2, r3, #1
    ae0a:	490b      	ldr	r1, [pc, #44]	; (ae38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ae0c:	9b01      	ldr	r3, [sp, #4]
    ae0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ae12:	4a0a      	ldr	r2, [pc, #40]	; (ae3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    ae14:	9b01      	ldr	r3, [sp, #4]
    ae16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1a:	f003 0301 	and.w	r3, r3, #1
    ae1e:	2b00      	cmp	r3, #0
    ae20:	d106      	bne.n	ae30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    ae22:	4a05      	ldr	r2, [pc, #20]	; (ae38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    ae24:	9b01      	ldr	r3, [sp, #4]
    ae26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d100      	bne.n	ae30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae30:	bf00      	nop
    ae32:	b003      	add	sp, #12
    ae34:	f85d fb04 	ldr.w	pc, [sp], #4
    ae38:	1fff8dc8 	.word	0x1fff8dc8
    ae3c:	1fff8dc4 	.word	0x1fff8dc4

0000ae40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ae40:	b500      	push	{lr}
    ae42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae44:	f7f5 fe88 	bl	b58 <Sys_GetCoreID>
    ae48:	4603      	mov	r3, r0
    ae4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    ae4c:	4a10      	ldr	r2, [pc, #64]	; (ae90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ae4e:	9b01      	ldr	r3, [sp, #4]
    ae50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae54:	2b00      	cmp	r3, #0
    ae56:	d10d      	bne.n	ae74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae58:	f7f5 fd9c 	bl	994 <Adc_schm_read_msr>
    ae5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae5e:	9b00      	ldr	r3, [sp, #0]
    ae60:	f003 0301 	and.w	r3, r3, #1
    ae64:	2b00      	cmp	r3, #0
    ae66:	d100      	bne.n	ae6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ae6a:	490a      	ldr	r1, [pc, #40]	; (ae94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    ae6c:	9b01      	ldr	r3, [sp, #4]
    ae6e:	9a00      	ldr	r2, [sp, #0]
    ae70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    ae74:	4a06      	ldr	r2, [pc, #24]	; (ae90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ae76:	9b01      	ldr	r3, [sp, #4]
    ae78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7c:	1c5a      	adds	r2, r3, #1
    ae7e:	4904      	ldr	r1, [pc, #16]	; (ae90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    ae80:	9b01      	ldr	r3, [sp, #4]
    ae82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae86:	bf00      	nop
    ae88:	b003      	add	sp, #12
    ae8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae8e:	bf00      	nop
    ae90:	1fff8dd0 	.word	0x1fff8dd0
    ae94:	1fff8dcc 	.word	0x1fff8dcc

0000ae98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    ae98:	b500      	push	{lr}
    ae9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae9c:	f7f5 fe5c 	bl	b58 <Sys_GetCoreID>
    aea0:	4603      	mov	r3, r0
    aea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    aea4:	4a0d      	ldr	r2, [pc, #52]	; (aedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    aea6:	9b01      	ldr	r3, [sp, #4]
    aea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeac:	1e5a      	subs	r2, r3, #1
    aeae:	490b      	ldr	r1, [pc, #44]	; (aedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    aeb0:	9b01      	ldr	r3, [sp, #4]
    aeb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    aeb6:	4a0a      	ldr	r2, [pc, #40]	; (aee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    aeb8:	9b01      	ldr	r3, [sp, #4]
    aeba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aebe:	f003 0301 	and.w	r3, r3, #1
    aec2:	2b00      	cmp	r3, #0
    aec4:	d106      	bne.n	aed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    aec6:	4a05      	ldr	r2, [pc, #20]	; (aedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    aec8:	9b01      	ldr	r3, [sp, #4]
    aeca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aece:	2b00      	cmp	r3, #0
    aed0:	d100      	bne.n	aed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aed4:	bf00      	nop
    aed6:	b003      	add	sp, #12
    aed8:	f85d fb04 	ldr.w	pc, [sp], #4
    aedc:	1fff8dd0 	.word	0x1fff8dd0
    aee0:	1fff8dcc 	.word	0x1fff8dcc

0000aee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    aee4:	b500      	push	{lr}
    aee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aee8:	f7f5 fe36 	bl	b58 <Sys_GetCoreID>
    aeec:	4603      	mov	r3, r0
    aeee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    aef0:	4a10      	ldr	r2, [pc, #64]	; (af34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    aef2:	9b01      	ldr	r3, [sp, #4]
    aef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef8:	2b00      	cmp	r3, #0
    aefa:	d10d      	bne.n	af18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aefc:	f7f5 fd4a 	bl	994 <Adc_schm_read_msr>
    af00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af02:	9b00      	ldr	r3, [sp, #0]
    af04:	f003 0301 	and.w	r3, r3, #1
    af08:	2b00      	cmp	r3, #0
    af0a:	d100      	bne.n	af0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    af0e:	490a      	ldr	r1, [pc, #40]	; (af38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    af10:	9b01      	ldr	r3, [sp, #4]
    af12:	9a00      	ldr	r2, [sp, #0]
    af14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    af18:	4a06      	ldr	r2, [pc, #24]	; (af34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    af1a:	9b01      	ldr	r3, [sp, #4]
    af1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af20:	1c5a      	adds	r2, r3, #1
    af22:	4904      	ldr	r1, [pc, #16]	; (af34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    af24:	9b01      	ldr	r3, [sp, #4]
    af26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af2a:	bf00      	nop
    af2c:	b003      	add	sp, #12
    af2e:	f85d fb04 	ldr.w	pc, [sp], #4
    af32:	bf00      	nop
    af34:	1fff8dd8 	.word	0x1fff8dd8
    af38:	1fff8dd4 	.word	0x1fff8dd4

0000af3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    af3c:	b500      	push	{lr}
    af3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af40:	f7f5 fe0a 	bl	b58 <Sys_GetCoreID>
    af44:	4603      	mov	r3, r0
    af46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    af48:	4a0d      	ldr	r2, [pc, #52]	; (af80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    af4a:	9b01      	ldr	r3, [sp, #4]
    af4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af50:	1e5a      	subs	r2, r3, #1
    af52:	490b      	ldr	r1, [pc, #44]	; (af80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    af54:	9b01      	ldr	r3, [sp, #4]
    af56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    af5a:	4a0a      	ldr	r2, [pc, #40]	; (af84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    af5c:	9b01      	ldr	r3, [sp, #4]
    af5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af62:	f003 0301 	and.w	r3, r3, #1
    af66:	2b00      	cmp	r3, #0
    af68:	d106      	bne.n	af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    af6a:	4a05      	ldr	r2, [pc, #20]	; (af80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    af6c:	9b01      	ldr	r3, [sp, #4]
    af6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af72:	2b00      	cmp	r3, #0
    af74:	d100      	bne.n	af78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af78:	bf00      	nop
    af7a:	b003      	add	sp, #12
    af7c:	f85d fb04 	ldr.w	pc, [sp], #4
    af80:	1fff8dd8 	.word	0x1fff8dd8
    af84:	1fff8dd4 	.word	0x1fff8dd4

0000af88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    af88:	b500      	push	{lr}
    af8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af8c:	f7f5 fde4 	bl	b58 <Sys_GetCoreID>
    af90:	4603      	mov	r3, r0
    af92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    af94:	4a10      	ldr	r2, [pc, #64]	; (afd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    af96:	9b01      	ldr	r3, [sp, #4]
    af98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d10d      	bne.n	afbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    afa0:	f7f5 fcf8 	bl	994 <Adc_schm_read_msr>
    afa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    afa6:	9b00      	ldr	r3, [sp, #0]
    afa8:	f003 0301 	and.w	r3, r3, #1
    afac:	2b00      	cmp	r3, #0
    afae:	d100      	bne.n	afb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    afb2:	490a      	ldr	r1, [pc, #40]	; (afdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    afb4:	9b01      	ldr	r3, [sp, #4]
    afb6:	9a00      	ldr	r2, [sp, #0]
    afb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    afbc:	4a06      	ldr	r2, [pc, #24]	; (afd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    afbe:	9b01      	ldr	r3, [sp, #4]
    afc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc4:	1c5a      	adds	r2, r3, #1
    afc6:	4904      	ldr	r1, [pc, #16]	; (afd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    afc8:	9b01      	ldr	r3, [sp, #4]
    afca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afce:	bf00      	nop
    afd0:	b003      	add	sp, #12
    afd2:	f85d fb04 	ldr.w	pc, [sp], #4
    afd6:	bf00      	nop
    afd8:	1fff8de0 	.word	0x1fff8de0
    afdc:	1fff8ddc 	.word	0x1fff8ddc

0000afe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    afe0:	b500      	push	{lr}
    afe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afe4:	f7f5 fdb8 	bl	b58 <Sys_GetCoreID>
    afe8:	4603      	mov	r3, r0
    afea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    afec:	4a0d      	ldr	r2, [pc, #52]	; (b024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    afee:	9b01      	ldr	r3, [sp, #4]
    aff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aff4:	1e5a      	subs	r2, r3, #1
    aff6:	490b      	ldr	r1, [pc, #44]	; (b024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    aff8:	9b01      	ldr	r3, [sp, #4]
    affa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    affe:	4a0a      	ldr	r2, [pc, #40]	; (b028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    b000:	9b01      	ldr	r3, [sp, #4]
    b002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b006:	f003 0301 	and.w	r3, r3, #1
    b00a:	2b00      	cmp	r3, #0
    b00c:	d106      	bne.n	b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    b00e:	4a05      	ldr	r2, [pc, #20]	; (b024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    b010:	9b01      	ldr	r3, [sp, #4]
    b012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b016:	2b00      	cmp	r3, #0
    b018:	d100      	bne.n	b01c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b01a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b01c:	bf00      	nop
    b01e:	b003      	add	sp, #12
    b020:	f85d fb04 	ldr.w	pc, [sp], #4
    b024:	1fff8de0 	.word	0x1fff8de0
    b028:	1fff8ddc 	.word	0x1fff8ddc

0000b02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b02c:	b500      	push	{lr}
    b02e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b030:	f7f5 fd92 	bl	b58 <Sys_GetCoreID>
    b034:	4603      	mov	r3, r0
    b036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    b038:	4a10      	ldr	r2, [pc, #64]	; (b07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b03a:	9b01      	ldr	r3, [sp, #4]
    b03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b040:	2b00      	cmp	r3, #0
    b042:	d10d      	bne.n	b060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b044:	f7f5 fca6 	bl	994 <Adc_schm_read_msr>
    b048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b04a:	9b00      	ldr	r3, [sp, #0]
    b04c:	f003 0301 	and.w	r3, r3, #1
    b050:	2b00      	cmp	r3, #0
    b052:	d100      	bne.n	b056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b056:	490a      	ldr	r1, [pc, #40]	; (b080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    b058:	9b01      	ldr	r3, [sp, #4]
    b05a:	9a00      	ldr	r2, [sp, #0]
    b05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    b060:	4a06      	ldr	r2, [pc, #24]	; (b07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b062:	9b01      	ldr	r3, [sp, #4]
    b064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b068:	1c5a      	adds	r2, r3, #1
    b06a:	4904      	ldr	r1, [pc, #16]	; (b07c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    b06c:	9b01      	ldr	r3, [sp, #4]
    b06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b072:	bf00      	nop
    b074:	b003      	add	sp, #12
    b076:	f85d fb04 	ldr.w	pc, [sp], #4
    b07a:	bf00      	nop
    b07c:	1fff8de8 	.word	0x1fff8de8
    b080:	1fff8de4 	.word	0x1fff8de4

0000b084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    b084:	b500      	push	{lr}
    b086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b088:	f7f5 fd66 	bl	b58 <Sys_GetCoreID>
    b08c:	4603      	mov	r3, r0
    b08e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    b090:	4a0d      	ldr	r2, [pc, #52]	; (b0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b092:	9b01      	ldr	r3, [sp, #4]
    b094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b098:	1e5a      	subs	r2, r3, #1
    b09a:	490b      	ldr	r1, [pc, #44]	; (b0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b0a2:	4a0a      	ldr	r2, [pc, #40]	; (b0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    b0a4:	9b01      	ldr	r3, [sp, #4]
    b0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0aa:	f003 0301 	and.w	r3, r3, #1
    b0ae:	2b00      	cmp	r3, #0
    b0b0:	d106      	bne.n	b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    b0b2:	4a05      	ldr	r2, [pc, #20]	; (b0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    b0b4:	9b01      	ldr	r3, [sp, #4]
    b0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ba:	2b00      	cmp	r3, #0
    b0bc:	d100      	bne.n	b0c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0c0:	bf00      	nop
    b0c2:	b003      	add	sp, #12
    b0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c8:	1fff8de8 	.word	0x1fff8de8
    b0cc:	1fff8de4 	.word	0x1fff8de4

0000b0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b0d0:	b500      	push	{lr}
    b0d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0d4:	f7f5 fd40 	bl	b58 <Sys_GetCoreID>
    b0d8:	4603      	mov	r3, r0
    b0da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    b0dc:	4a10      	ldr	r2, [pc, #64]	; (b120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b0de:	9b01      	ldr	r3, [sp, #4]
    b0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d10d      	bne.n	b104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b0e8:	f7f5 fc54 	bl	994 <Adc_schm_read_msr>
    b0ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b0ee:	9b00      	ldr	r3, [sp, #0]
    b0f0:	f003 0301 	and.w	r3, r3, #1
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d100      	bne.n	b0fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b0f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    b0fa:	490a      	ldr	r1, [pc, #40]	; (b124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    b0fc:	9b01      	ldr	r3, [sp, #4]
    b0fe:	9a00      	ldr	r2, [sp, #0]
    b100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    b104:	4a06      	ldr	r2, [pc, #24]	; (b120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10c:	1c5a      	adds	r2, r3, #1
    b10e:	4904      	ldr	r1, [pc, #16]	; (b120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    b110:	9b01      	ldr	r3, [sp, #4]
    b112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b116:	bf00      	nop
    b118:	b003      	add	sp, #12
    b11a:	f85d fb04 	ldr.w	pc, [sp], #4
    b11e:	bf00      	nop
    b120:	1fff8df0 	.word	0x1fff8df0
    b124:	1fff8dec 	.word	0x1fff8dec

0000b128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    b128:	b500      	push	{lr}
    b12a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b12c:	f7f5 fd14 	bl	b58 <Sys_GetCoreID>
    b130:	4603      	mov	r3, r0
    b132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    b134:	4a0d      	ldr	r2, [pc, #52]	; (b16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b136:	9b01      	ldr	r3, [sp, #4]
    b138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b13c:	1e5a      	subs	r2, r3, #1
    b13e:	490b      	ldr	r1, [pc, #44]	; (b16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b140:	9b01      	ldr	r3, [sp, #4]
    b142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    b146:	4a0a      	ldr	r2, [pc, #40]	; (b170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    b148:	9b01      	ldr	r3, [sp, #4]
    b14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b14e:	f003 0301 	and.w	r3, r3, #1
    b152:	2b00      	cmp	r3, #0
    b154:	d106      	bne.n	b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    b156:	4a05      	ldr	r2, [pc, #20]	; (b16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    b158:	9b01      	ldr	r3, [sp, #4]
    b15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b15e:	2b00      	cmp	r3, #0
    b160:	d100      	bne.n	b164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b164:	bf00      	nop
    b166:	b003      	add	sp, #12
    b168:	f85d fb04 	ldr.w	pc, [sp], #4
    b16c:	1fff8df0 	.word	0x1fff8df0
    b170:	1fff8dec 	.word	0x1fff8dec

0000b174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b174:	b500      	push	{lr}
    b176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b178:	f7f5 fcee 	bl	b58 <Sys_GetCoreID>
    b17c:	4603      	mov	r3, r0
    b17e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    b180:	4a10      	ldr	r2, [pc, #64]	; (b1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b182:	9b01      	ldr	r3, [sp, #4]
    b184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b188:	2b00      	cmp	r3, #0
    b18a:	d10d      	bne.n	b1a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b18c:	f7f5 fc02 	bl	994 <Adc_schm_read_msr>
    b190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b192:	9b00      	ldr	r3, [sp, #0]
    b194:	f003 0301 	and.w	r3, r3, #1
    b198:	2b00      	cmp	r3, #0
    b19a:	d100      	bne.n	b19e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b19c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    b19e:	490a      	ldr	r1, [pc, #40]	; (b1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    b1a0:	9b01      	ldr	r3, [sp, #4]
    b1a2:	9a00      	ldr	r2, [sp, #0]
    b1a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    b1a8:	4a06      	ldr	r2, [pc, #24]	; (b1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b1aa:	9b01      	ldr	r3, [sp, #4]
    b1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b0:	1c5a      	adds	r2, r3, #1
    b1b2:	4904      	ldr	r1, [pc, #16]	; (b1c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    b1b4:	9b01      	ldr	r3, [sp, #4]
    b1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1ba:	bf00      	nop
    b1bc:	b003      	add	sp, #12
    b1be:	f85d fb04 	ldr.w	pc, [sp], #4
    b1c2:	bf00      	nop
    b1c4:	1fff8df8 	.word	0x1fff8df8
    b1c8:	1fff8df4 	.word	0x1fff8df4

0000b1cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    b1cc:	b500      	push	{lr}
    b1ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1d0:	f7f5 fcc2 	bl	b58 <Sys_GetCoreID>
    b1d4:	4603      	mov	r3, r0
    b1d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    b1d8:	4a0d      	ldr	r2, [pc, #52]	; (b210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b1da:	9b01      	ldr	r3, [sp, #4]
    b1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1e0:	1e5a      	subs	r2, r3, #1
    b1e2:	490b      	ldr	r1, [pc, #44]	; (b210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b1e4:	9b01      	ldr	r3, [sp, #4]
    b1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    b1ea:	4a0a      	ldr	r2, [pc, #40]	; (b214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    b1ec:	9b01      	ldr	r3, [sp, #4]
    b1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1f2:	f003 0301 	and.w	r3, r3, #1
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d106      	bne.n	b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    b1fa:	4a05      	ldr	r2, [pc, #20]	; (b210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    b1fc:	9b01      	ldr	r3, [sp, #4]
    b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b202:	2b00      	cmp	r3, #0
    b204:	d100      	bne.n	b208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b208:	bf00      	nop
    b20a:	b003      	add	sp, #12
    b20c:	f85d fb04 	ldr.w	pc, [sp], #4
    b210:	1fff8df8 	.word	0x1fff8df8
    b214:	1fff8df4 	.word	0x1fff8df4

0000b218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b218:	b500      	push	{lr}
    b21a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b21c:	f7f5 fc9c 	bl	b58 <Sys_GetCoreID>
    b220:	4603      	mov	r3, r0
    b222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    b224:	4a10      	ldr	r2, [pc, #64]	; (b268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b226:	9b01      	ldr	r3, [sp, #4]
    b228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b22c:	2b00      	cmp	r3, #0
    b22e:	d10d      	bne.n	b24c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b230:	f7f5 fbb0 	bl	994 <Adc_schm_read_msr>
    b234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b236:	9b00      	ldr	r3, [sp, #0]
    b238:	f003 0301 	and.w	r3, r3, #1
    b23c:	2b00      	cmp	r3, #0
    b23e:	d100      	bne.n	b242 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    b242:	490a      	ldr	r1, [pc, #40]	; (b26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    b244:	9b01      	ldr	r3, [sp, #4]
    b246:	9a00      	ldr	r2, [sp, #0]
    b248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    b24c:	4a06      	ldr	r2, [pc, #24]	; (b268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b24e:	9b01      	ldr	r3, [sp, #4]
    b250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b254:	1c5a      	adds	r2, r3, #1
    b256:	4904      	ldr	r1, [pc, #16]	; (b268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    b258:	9b01      	ldr	r3, [sp, #4]
    b25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b25e:	bf00      	nop
    b260:	b003      	add	sp, #12
    b262:	f85d fb04 	ldr.w	pc, [sp], #4
    b266:	bf00      	nop
    b268:	1fff8e00 	.word	0x1fff8e00
    b26c:	1fff8dfc 	.word	0x1fff8dfc

0000b270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    b270:	b500      	push	{lr}
    b272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b274:	f7f5 fc70 	bl	b58 <Sys_GetCoreID>
    b278:	4603      	mov	r3, r0
    b27a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    b27c:	4a0d      	ldr	r2, [pc, #52]	; (b2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b27e:	9b01      	ldr	r3, [sp, #4]
    b280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b284:	1e5a      	subs	r2, r3, #1
    b286:	490b      	ldr	r1, [pc, #44]	; (b2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b288:	9b01      	ldr	r3, [sp, #4]
    b28a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    b28e:	4a0a      	ldr	r2, [pc, #40]	; (b2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    b290:	9b01      	ldr	r3, [sp, #4]
    b292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b296:	f003 0301 	and.w	r3, r3, #1
    b29a:	2b00      	cmp	r3, #0
    b29c:	d106      	bne.n	b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    b29e:	4a05      	ldr	r2, [pc, #20]	; (b2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    b2a0:	9b01      	ldr	r3, [sp, #4]
    b2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d100      	bne.n	b2ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2ac:	bf00      	nop
    b2ae:	b003      	add	sp, #12
    b2b0:	f85d fb04 	ldr.w	pc, [sp], #4
    b2b4:	1fff8e00 	.word	0x1fff8e00
    b2b8:	1fff8dfc 	.word	0x1fff8dfc

0000b2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b2bc:	b500      	push	{lr}
    b2be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2c0:	f7f5 fc4a 	bl	b58 <Sys_GetCoreID>
    b2c4:	4603      	mov	r3, r0
    b2c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    b2c8:	4a10      	ldr	r2, [pc, #64]	; (b30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b2ca:	9b01      	ldr	r3, [sp, #4]
    b2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d10d      	bne.n	b2f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2d4:	f7f5 fb5e 	bl	994 <Adc_schm_read_msr>
    b2d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2da:	9b00      	ldr	r3, [sp, #0]
    b2dc:	f003 0301 	and.w	r3, r3, #1
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	d100      	bne.n	b2e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b2e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    b2e6:	490a      	ldr	r1, [pc, #40]	; (b310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    b2e8:	9b01      	ldr	r3, [sp, #4]
    b2ea:	9a00      	ldr	r2, [sp, #0]
    b2ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    b2f0:	4a06      	ldr	r2, [pc, #24]	; (b30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b2f2:	9b01      	ldr	r3, [sp, #4]
    b2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f8:	1c5a      	adds	r2, r3, #1
    b2fa:	4904      	ldr	r1, [pc, #16]	; (b30c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    b2fc:	9b01      	ldr	r3, [sp, #4]
    b2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b302:	bf00      	nop
    b304:	b003      	add	sp, #12
    b306:	f85d fb04 	ldr.w	pc, [sp], #4
    b30a:	bf00      	nop
    b30c:	1fff8e08 	.word	0x1fff8e08
    b310:	1fff8e04 	.word	0x1fff8e04

0000b314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    b314:	b500      	push	{lr}
    b316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b318:	f7f5 fc1e 	bl	b58 <Sys_GetCoreID>
    b31c:	4603      	mov	r3, r0
    b31e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    b320:	4a0d      	ldr	r2, [pc, #52]	; (b358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b322:	9b01      	ldr	r3, [sp, #4]
    b324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b328:	1e5a      	subs	r2, r3, #1
    b32a:	490b      	ldr	r1, [pc, #44]	; (b358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    b332:	4a0a      	ldr	r2, [pc, #40]	; (b35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    b334:	9b01      	ldr	r3, [sp, #4]
    b336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b33a:	f003 0301 	and.w	r3, r3, #1
    b33e:	2b00      	cmp	r3, #0
    b340:	d106      	bne.n	b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    b342:	4a05      	ldr	r2, [pc, #20]	; (b358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    b344:	9b01      	ldr	r3, [sp, #4]
    b346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b34a:	2b00      	cmp	r3, #0
    b34c:	d100      	bne.n	b350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b34e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b350:	bf00      	nop
    b352:	b003      	add	sp, #12
    b354:	f85d fb04 	ldr.w	pc, [sp], #4
    b358:	1fff8e08 	.word	0x1fff8e08
    b35c:	1fff8e04 	.word	0x1fff8e04

0000b360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b360:	b500      	push	{lr}
    b362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b364:	f7f5 fbf8 	bl	b58 <Sys_GetCoreID>
    b368:	4603      	mov	r3, r0
    b36a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    b36c:	4a10      	ldr	r2, [pc, #64]	; (b3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b36e:	9b01      	ldr	r3, [sp, #4]
    b370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b374:	2b00      	cmp	r3, #0
    b376:	d10d      	bne.n	b394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b378:	f7f5 fb0c 	bl	994 <Adc_schm_read_msr>
    b37c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b37e:	9b00      	ldr	r3, [sp, #0]
    b380:	f003 0301 	and.w	r3, r3, #1
    b384:	2b00      	cmp	r3, #0
    b386:	d100      	bne.n	b38a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b38a:	490a      	ldr	r1, [pc, #40]	; (b3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    b38c:	9b01      	ldr	r3, [sp, #4]
    b38e:	9a00      	ldr	r2, [sp, #0]
    b390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    b394:	4a06      	ldr	r2, [pc, #24]	; (b3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b396:	9b01      	ldr	r3, [sp, #4]
    b398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b39c:	1c5a      	adds	r2, r3, #1
    b39e:	4904      	ldr	r1, [pc, #16]	; (b3b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    b3a0:	9b01      	ldr	r3, [sp, #4]
    b3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3a6:	bf00      	nop
    b3a8:	b003      	add	sp, #12
    b3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ae:	bf00      	nop
    b3b0:	1fff8e10 	.word	0x1fff8e10
    b3b4:	1fff8e0c 	.word	0x1fff8e0c

0000b3b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    b3b8:	b500      	push	{lr}
    b3ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3bc:	f7f5 fbcc 	bl	b58 <Sys_GetCoreID>
    b3c0:	4603      	mov	r3, r0
    b3c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    b3c4:	4a0d      	ldr	r2, [pc, #52]	; (b3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b3c6:	9b01      	ldr	r3, [sp, #4]
    b3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3cc:	1e5a      	subs	r2, r3, #1
    b3ce:	490b      	ldr	r1, [pc, #44]	; (b3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b3d0:	9b01      	ldr	r3, [sp, #4]
    b3d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b3d6:	4a0a      	ldr	r2, [pc, #40]	; (b400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    b3d8:	9b01      	ldr	r3, [sp, #4]
    b3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3de:	f003 0301 	and.w	r3, r3, #1
    b3e2:	2b00      	cmp	r3, #0
    b3e4:	d106      	bne.n	b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    b3e6:	4a05      	ldr	r2, [pc, #20]	; (b3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    b3e8:	9b01      	ldr	r3, [sp, #4]
    b3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ee:	2b00      	cmp	r3, #0
    b3f0:	d100      	bne.n	b3f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b3f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b3f4:	bf00      	nop
    b3f6:	b003      	add	sp, #12
    b3f8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3fc:	1fff8e10 	.word	0x1fff8e10
    b400:	1fff8e0c 	.word	0x1fff8e0c

0000b404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b404:	b500      	push	{lr}
    b406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b408:	f7f5 fba6 	bl	b58 <Sys_GetCoreID>
    b40c:	4603      	mov	r3, r0
    b40e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    b410:	4a10      	ldr	r2, [pc, #64]	; (b454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b412:	9b01      	ldr	r3, [sp, #4]
    b414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b418:	2b00      	cmp	r3, #0
    b41a:	d10d      	bne.n	b438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b41c:	f7f5 faba 	bl	994 <Adc_schm_read_msr>
    b420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b422:	9b00      	ldr	r3, [sp, #0]
    b424:	f003 0301 	and.w	r3, r3, #1
    b428:	2b00      	cmp	r3, #0
    b42a:	d100      	bne.n	b42e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b42c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b42e:	490a      	ldr	r1, [pc, #40]	; (b458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    b430:	9b01      	ldr	r3, [sp, #4]
    b432:	9a00      	ldr	r2, [sp, #0]
    b434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    b438:	4a06      	ldr	r2, [pc, #24]	; (b454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b43a:	9b01      	ldr	r3, [sp, #4]
    b43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b440:	1c5a      	adds	r2, r3, #1
    b442:	4904      	ldr	r1, [pc, #16]	; (b454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    b444:	9b01      	ldr	r3, [sp, #4]
    b446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b44a:	bf00      	nop
    b44c:	b003      	add	sp, #12
    b44e:	f85d fb04 	ldr.w	pc, [sp], #4
    b452:	bf00      	nop
    b454:	1fff8e18 	.word	0x1fff8e18
    b458:	1fff8e14 	.word	0x1fff8e14

0000b45c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    b45c:	b500      	push	{lr}
    b45e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b460:	f7f5 fb7a 	bl	b58 <Sys_GetCoreID>
    b464:	4603      	mov	r3, r0
    b466:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    b468:	4a0d      	ldr	r2, [pc, #52]	; (b4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b46a:	9b01      	ldr	r3, [sp, #4]
    b46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b470:	1e5a      	subs	r2, r3, #1
    b472:	490b      	ldr	r1, [pc, #44]	; (b4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b474:	9b01      	ldr	r3, [sp, #4]
    b476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b47a:	4a0a      	ldr	r2, [pc, #40]	; (b4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    b47c:	9b01      	ldr	r3, [sp, #4]
    b47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b482:	f003 0301 	and.w	r3, r3, #1
    b486:	2b00      	cmp	r3, #0
    b488:	d106      	bne.n	b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    b48a:	4a05      	ldr	r2, [pc, #20]	; (b4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    b48c:	9b01      	ldr	r3, [sp, #4]
    b48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b492:	2b00      	cmp	r3, #0
    b494:	d100      	bne.n	b498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b498:	bf00      	nop
    b49a:	b003      	add	sp, #12
    b49c:	f85d fb04 	ldr.w	pc, [sp], #4
    b4a0:	1fff8e18 	.word	0x1fff8e18
    b4a4:	1fff8e14 	.word	0x1fff8e14

0000b4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b4a8:	b500      	push	{lr}
    b4aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4ac:	f7f5 fb54 	bl	b58 <Sys_GetCoreID>
    b4b0:	4603      	mov	r3, r0
    b4b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    b4b4:	4a10      	ldr	r2, [pc, #64]	; (b4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b4b6:	9b01      	ldr	r3, [sp, #4]
    b4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d10d      	bne.n	b4dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4c0:	f7f5 fa68 	bl	994 <Adc_schm_read_msr>
    b4c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4c6:	9b00      	ldr	r3, [sp, #0]
    b4c8:	f003 0301 	and.w	r3, r3, #1
    b4cc:	2b00      	cmp	r3, #0
    b4ce:	d100      	bne.n	b4d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b4d2:	490a      	ldr	r1, [pc, #40]	; (b4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    b4d4:	9b01      	ldr	r3, [sp, #4]
    b4d6:	9a00      	ldr	r2, [sp, #0]
    b4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    b4dc:	4a06      	ldr	r2, [pc, #24]	; (b4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b4de:	9b01      	ldr	r3, [sp, #4]
    b4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e4:	1c5a      	adds	r2, r3, #1
    b4e6:	4904      	ldr	r1, [pc, #16]	; (b4f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    b4e8:	9b01      	ldr	r3, [sp, #4]
    b4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b4ee:	bf00      	nop
    b4f0:	b003      	add	sp, #12
    b4f2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4f6:	bf00      	nop
    b4f8:	1fff8e20 	.word	0x1fff8e20
    b4fc:	1fff8e1c 	.word	0x1fff8e1c

0000b500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    b500:	b500      	push	{lr}
    b502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b504:	f7f5 fb28 	bl	b58 <Sys_GetCoreID>
    b508:	4603      	mov	r3, r0
    b50a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    b50c:	4a0d      	ldr	r2, [pc, #52]	; (b544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b50e:	9b01      	ldr	r3, [sp, #4]
    b510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b514:	1e5a      	subs	r2, r3, #1
    b516:	490b      	ldr	r1, [pc, #44]	; (b544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b518:	9b01      	ldr	r3, [sp, #4]
    b51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b51e:	4a0a      	ldr	r2, [pc, #40]	; (b548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    b520:	9b01      	ldr	r3, [sp, #4]
    b522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b526:	f003 0301 	and.w	r3, r3, #1
    b52a:	2b00      	cmp	r3, #0
    b52c:	d106      	bne.n	b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    b52e:	4a05      	ldr	r2, [pc, #20]	; (b544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    b530:	9b01      	ldr	r3, [sp, #4]
    b532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b536:	2b00      	cmp	r3, #0
    b538:	d100      	bne.n	b53c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b53a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b53c:	bf00      	nop
    b53e:	b003      	add	sp, #12
    b540:	f85d fb04 	ldr.w	pc, [sp], #4
    b544:	1fff8e20 	.word	0x1fff8e20
    b548:	1fff8e1c 	.word	0x1fff8e1c

0000b54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b54c:	b500      	push	{lr}
    b54e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b550:	f7f5 fb02 	bl	b58 <Sys_GetCoreID>
    b554:	4603      	mov	r3, r0
    b556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    b558:	4a10      	ldr	r2, [pc, #64]	; (b59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b55a:	9b01      	ldr	r3, [sp, #4]
    b55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b560:	2b00      	cmp	r3, #0
    b562:	d10d      	bne.n	b580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b564:	f7f5 fa16 	bl	994 <Adc_schm_read_msr>
    b568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b56a:	9b00      	ldr	r3, [sp, #0]
    b56c:	f003 0301 	and.w	r3, r3, #1
    b570:	2b00      	cmp	r3, #0
    b572:	d100      	bne.n	b576 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b576:	490a      	ldr	r1, [pc, #40]	; (b5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    b578:	9b01      	ldr	r3, [sp, #4]
    b57a:	9a00      	ldr	r2, [sp, #0]
    b57c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    b580:	4a06      	ldr	r2, [pc, #24]	; (b59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b582:	9b01      	ldr	r3, [sp, #4]
    b584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b588:	1c5a      	adds	r2, r3, #1
    b58a:	4904      	ldr	r1, [pc, #16]	; (b59c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    b58c:	9b01      	ldr	r3, [sp, #4]
    b58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b592:	bf00      	nop
    b594:	b003      	add	sp, #12
    b596:	f85d fb04 	ldr.w	pc, [sp], #4
    b59a:	bf00      	nop
    b59c:	1fff8e28 	.word	0x1fff8e28
    b5a0:	1fff8e24 	.word	0x1fff8e24

0000b5a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    b5a4:	b500      	push	{lr}
    b5a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5a8:	f7f5 fad6 	bl	b58 <Sys_GetCoreID>
    b5ac:	4603      	mov	r3, r0
    b5ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    b5b0:	4a0d      	ldr	r2, [pc, #52]	; (b5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b5b2:	9b01      	ldr	r3, [sp, #4]
    b5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5b8:	1e5a      	subs	r2, r3, #1
    b5ba:	490b      	ldr	r1, [pc, #44]	; (b5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b5bc:	9b01      	ldr	r3, [sp, #4]
    b5be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b5c2:	4a0a      	ldr	r2, [pc, #40]	; (b5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    b5c4:	9b01      	ldr	r3, [sp, #4]
    b5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ca:	f003 0301 	and.w	r3, r3, #1
    b5ce:	2b00      	cmp	r3, #0
    b5d0:	d106      	bne.n	b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    b5d2:	4a05      	ldr	r2, [pc, #20]	; (b5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    b5d4:	9b01      	ldr	r3, [sp, #4]
    b5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d100      	bne.n	b5e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b5e0:	bf00      	nop
    b5e2:	b003      	add	sp, #12
    b5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5e8:	1fff8e28 	.word	0x1fff8e28
    b5ec:	1fff8e24 	.word	0x1fff8e24

0000b5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b5f0:	b500      	push	{lr}
    b5f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5f4:	f7f5 fab0 	bl	b58 <Sys_GetCoreID>
    b5f8:	4603      	mov	r3, r0
    b5fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    b5fc:	4a10      	ldr	r2, [pc, #64]	; (b640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b5fe:	9b01      	ldr	r3, [sp, #4]
    b600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b604:	2b00      	cmp	r3, #0
    b606:	d10d      	bne.n	b624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b608:	f7f5 f9c4 	bl	994 <Adc_schm_read_msr>
    b60c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b60e:	9b00      	ldr	r3, [sp, #0]
    b610:	f003 0301 	and.w	r3, r3, #1
    b614:	2b00      	cmp	r3, #0
    b616:	d100      	bne.n	b61a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b61a:	490a      	ldr	r1, [pc, #40]	; (b644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    b61c:	9b01      	ldr	r3, [sp, #4]
    b61e:	9a00      	ldr	r2, [sp, #0]
    b620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    b624:	4a06      	ldr	r2, [pc, #24]	; (b640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b626:	9b01      	ldr	r3, [sp, #4]
    b628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b62c:	1c5a      	adds	r2, r3, #1
    b62e:	4904      	ldr	r1, [pc, #16]	; (b640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    b630:	9b01      	ldr	r3, [sp, #4]
    b632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b636:	bf00      	nop
    b638:	b003      	add	sp, #12
    b63a:	f85d fb04 	ldr.w	pc, [sp], #4
    b63e:	bf00      	nop
    b640:	1fff8e30 	.word	0x1fff8e30
    b644:	1fff8e2c 	.word	0x1fff8e2c

0000b648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    b648:	b500      	push	{lr}
    b64a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b64c:	f7f5 fa84 	bl	b58 <Sys_GetCoreID>
    b650:	4603      	mov	r3, r0
    b652:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    b654:	4a0d      	ldr	r2, [pc, #52]	; (b68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b656:	9b01      	ldr	r3, [sp, #4]
    b658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b65c:	1e5a      	subs	r2, r3, #1
    b65e:	490b      	ldr	r1, [pc, #44]	; (b68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b660:	9b01      	ldr	r3, [sp, #4]
    b662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b666:	4a0a      	ldr	r2, [pc, #40]	; (b690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    b668:	9b01      	ldr	r3, [sp, #4]
    b66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b66e:	f003 0301 	and.w	r3, r3, #1
    b672:	2b00      	cmp	r3, #0
    b674:	d106      	bne.n	b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    b676:	4a05      	ldr	r2, [pc, #20]	; (b68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    b678:	9b01      	ldr	r3, [sp, #4]
    b67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b67e:	2b00      	cmp	r3, #0
    b680:	d100      	bne.n	b684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b684:	bf00      	nop
    b686:	b003      	add	sp, #12
    b688:	f85d fb04 	ldr.w	pc, [sp], #4
    b68c:	1fff8e30 	.word	0x1fff8e30
    b690:	1fff8e2c 	.word	0x1fff8e2c

0000b694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b694:	b500      	push	{lr}
    b696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b698:	f7f5 fa5e 	bl	b58 <Sys_GetCoreID>
    b69c:	4603      	mov	r3, r0
    b69e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    b6a0:	4a10      	ldr	r2, [pc, #64]	; (b6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b6a2:	9b01      	ldr	r3, [sp, #4]
    b6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d10d      	bne.n	b6c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6ac:	f7f5 f972 	bl	994 <Adc_schm_read_msr>
    b6b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6b2:	9b00      	ldr	r3, [sp, #0]
    b6b4:	f003 0301 	and.w	r3, r3, #1
    b6b8:	2b00      	cmp	r3, #0
    b6ba:	d100      	bne.n	b6be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b6be:	490a      	ldr	r1, [pc, #40]	; (b6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    b6c0:	9b01      	ldr	r3, [sp, #4]
    b6c2:	9a00      	ldr	r2, [sp, #0]
    b6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    b6c8:	4a06      	ldr	r2, [pc, #24]	; (b6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b6ca:	9b01      	ldr	r3, [sp, #4]
    b6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6d0:	1c5a      	adds	r2, r3, #1
    b6d2:	4904      	ldr	r1, [pc, #16]	; (b6e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    b6d4:	9b01      	ldr	r3, [sp, #4]
    b6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6da:	bf00      	nop
    b6dc:	b003      	add	sp, #12
    b6de:	f85d fb04 	ldr.w	pc, [sp], #4
    b6e2:	bf00      	nop
    b6e4:	1fff8e38 	.word	0x1fff8e38
    b6e8:	1fff8e34 	.word	0x1fff8e34

0000b6ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    b6ec:	b500      	push	{lr}
    b6ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6f0:	f7f5 fa32 	bl	b58 <Sys_GetCoreID>
    b6f4:	4603      	mov	r3, r0
    b6f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    b6f8:	4a0d      	ldr	r2, [pc, #52]	; (b730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b6fa:	9b01      	ldr	r3, [sp, #4]
    b6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b700:	1e5a      	subs	r2, r3, #1
    b702:	490b      	ldr	r1, [pc, #44]	; (b730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b704:	9b01      	ldr	r3, [sp, #4]
    b706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b70a:	4a0a      	ldr	r2, [pc, #40]	; (b734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    b70c:	9b01      	ldr	r3, [sp, #4]
    b70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b712:	f003 0301 	and.w	r3, r3, #1
    b716:	2b00      	cmp	r3, #0
    b718:	d106      	bne.n	b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    b71a:	4a05      	ldr	r2, [pc, #20]	; (b730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    b71c:	9b01      	ldr	r3, [sp, #4]
    b71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b722:	2b00      	cmp	r3, #0
    b724:	d100      	bne.n	b728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b728:	bf00      	nop
    b72a:	b003      	add	sp, #12
    b72c:	f85d fb04 	ldr.w	pc, [sp], #4
    b730:	1fff8e38 	.word	0x1fff8e38
    b734:	1fff8e34 	.word	0x1fff8e34

0000b738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b738:	b500      	push	{lr}
    b73a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b73c:	f7f5 fa0c 	bl	b58 <Sys_GetCoreID>
    b740:	4603      	mov	r3, r0
    b742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    b744:	4a10      	ldr	r2, [pc, #64]	; (b788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b746:	9b01      	ldr	r3, [sp, #4]
    b748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b74c:	2b00      	cmp	r3, #0
    b74e:	d10d      	bne.n	b76c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b750:	f7f5 f920 	bl	994 <Adc_schm_read_msr>
    b754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b756:	9b00      	ldr	r3, [sp, #0]
    b758:	f003 0301 	and.w	r3, r3, #1
    b75c:	2b00      	cmp	r3, #0
    b75e:	d100      	bne.n	b762 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b762:	490a      	ldr	r1, [pc, #40]	; (b78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    b764:	9b01      	ldr	r3, [sp, #4]
    b766:	9a00      	ldr	r2, [sp, #0]
    b768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    b76c:	4a06      	ldr	r2, [pc, #24]	; (b788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b76e:	9b01      	ldr	r3, [sp, #4]
    b770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b774:	1c5a      	adds	r2, r3, #1
    b776:	4904      	ldr	r1, [pc, #16]	; (b788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    b778:	9b01      	ldr	r3, [sp, #4]
    b77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b77e:	bf00      	nop
    b780:	b003      	add	sp, #12
    b782:	f85d fb04 	ldr.w	pc, [sp], #4
    b786:	bf00      	nop
    b788:	1fff8e40 	.word	0x1fff8e40
    b78c:	1fff8e3c 	.word	0x1fff8e3c

0000b790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    b790:	b500      	push	{lr}
    b792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b794:	f7f5 f9e0 	bl	b58 <Sys_GetCoreID>
    b798:	4603      	mov	r3, r0
    b79a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    b79c:	4a0d      	ldr	r2, [pc, #52]	; (b7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b79e:	9b01      	ldr	r3, [sp, #4]
    b7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7a4:	1e5a      	subs	r2, r3, #1
    b7a6:	490b      	ldr	r1, [pc, #44]	; (b7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b7a8:	9b01      	ldr	r3, [sp, #4]
    b7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b7ae:	4a0a      	ldr	r2, [pc, #40]	; (b7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    b7b0:	9b01      	ldr	r3, [sp, #4]
    b7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b6:	f003 0301 	and.w	r3, r3, #1
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	d106      	bne.n	b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    b7be:	4a05      	ldr	r2, [pc, #20]	; (b7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    b7c0:	9b01      	ldr	r3, [sp, #4]
    b7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7c6:	2b00      	cmp	r3, #0
    b7c8:	d100      	bne.n	b7cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7cc:	bf00      	nop
    b7ce:	b003      	add	sp, #12
    b7d0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7d4:	1fff8e40 	.word	0x1fff8e40
    b7d8:	1fff8e3c 	.word	0x1fff8e3c

0000b7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b7dc:	b500      	push	{lr}
    b7de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7e0:	f7f5 f9ba 	bl	b58 <Sys_GetCoreID>
    b7e4:	4603      	mov	r3, r0
    b7e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    b7e8:	4a10      	ldr	r2, [pc, #64]	; (b82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b7ea:	9b01      	ldr	r3, [sp, #4]
    b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f0:	2b00      	cmp	r3, #0
    b7f2:	d10d      	bne.n	b810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b7f4:	f7f5 f8ce 	bl	994 <Adc_schm_read_msr>
    b7f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b7fa:	9b00      	ldr	r3, [sp, #0]
    b7fc:	f003 0301 	and.w	r3, r3, #1
    b800:	2b00      	cmp	r3, #0
    b802:	d100      	bne.n	b806 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b806:	490a      	ldr	r1, [pc, #40]	; (b830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    b808:	9b01      	ldr	r3, [sp, #4]
    b80a:	9a00      	ldr	r2, [sp, #0]
    b80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    b810:	4a06      	ldr	r2, [pc, #24]	; (b82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b812:	9b01      	ldr	r3, [sp, #4]
    b814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b818:	1c5a      	adds	r2, r3, #1
    b81a:	4904      	ldr	r1, [pc, #16]	; (b82c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    b81c:	9b01      	ldr	r3, [sp, #4]
    b81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b822:	bf00      	nop
    b824:	b003      	add	sp, #12
    b826:	f85d fb04 	ldr.w	pc, [sp], #4
    b82a:	bf00      	nop
    b82c:	1fff8e48 	.word	0x1fff8e48
    b830:	1fff8e44 	.word	0x1fff8e44

0000b834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    b834:	b500      	push	{lr}
    b836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b838:	f7f5 f98e 	bl	b58 <Sys_GetCoreID>
    b83c:	4603      	mov	r3, r0
    b83e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    b840:	4a0d      	ldr	r2, [pc, #52]	; (b878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b842:	9b01      	ldr	r3, [sp, #4]
    b844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b848:	1e5a      	subs	r2, r3, #1
    b84a:	490b      	ldr	r1, [pc, #44]	; (b878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b84c:	9b01      	ldr	r3, [sp, #4]
    b84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b852:	4a0a      	ldr	r2, [pc, #40]	; (b87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    b854:	9b01      	ldr	r3, [sp, #4]
    b856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b85a:	f003 0301 	and.w	r3, r3, #1
    b85e:	2b00      	cmp	r3, #0
    b860:	d106      	bne.n	b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    b862:	4a05      	ldr	r2, [pc, #20]	; (b878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    b864:	9b01      	ldr	r3, [sp, #4]
    b866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b86a:	2b00      	cmp	r3, #0
    b86c:	d100      	bne.n	b870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b86e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b870:	bf00      	nop
    b872:	b003      	add	sp, #12
    b874:	f85d fb04 	ldr.w	pc, [sp], #4
    b878:	1fff8e48 	.word	0x1fff8e48
    b87c:	1fff8e44 	.word	0x1fff8e44

0000b880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b880:	b500      	push	{lr}
    b882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b884:	f7f5 f968 	bl	b58 <Sys_GetCoreID>
    b888:	4603      	mov	r3, r0
    b88a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    b88c:	4a10      	ldr	r2, [pc, #64]	; (b8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b88e:	9b01      	ldr	r3, [sp, #4]
    b890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b894:	2b00      	cmp	r3, #0
    b896:	d10d      	bne.n	b8b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b898:	f7f5 f87c 	bl	994 <Adc_schm_read_msr>
    b89c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b89e:	9b00      	ldr	r3, [sp, #0]
    b8a0:	f003 0301 	and.w	r3, r3, #1
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d100      	bne.n	b8aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b8aa:	490a      	ldr	r1, [pc, #40]	; (b8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    b8ac:	9b01      	ldr	r3, [sp, #4]
    b8ae:	9a00      	ldr	r2, [sp, #0]
    b8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    b8b4:	4a06      	ldr	r2, [pc, #24]	; (b8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b8b6:	9b01      	ldr	r3, [sp, #4]
    b8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8bc:	1c5a      	adds	r2, r3, #1
    b8be:	4904      	ldr	r1, [pc, #16]	; (b8d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    b8c0:	9b01      	ldr	r3, [sp, #4]
    b8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8c6:	bf00      	nop
    b8c8:	b003      	add	sp, #12
    b8ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b8ce:	bf00      	nop
    b8d0:	1fff8e50 	.word	0x1fff8e50
    b8d4:	1fff8e4c 	.word	0x1fff8e4c

0000b8d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    b8d8:	b500      	push	{lr}
    b8da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8dc:	f7f5 f93c 	bl	b58 <Sys_GetCoreID>
    b8e0:	4603      	mov	r3, r0
    b8e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    b8e4:	4a0d      	ldr	r2, [pc, #52]	; (b91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b8e6:	9b01      	ldr	r3, [sp, #4]
    b8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ec:	1e5a      	subs	r2, r3, #1
    b8ee:	490b      	ldr	r1, [pc, #44]	; (b91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b8f0:	9b01      	ldr	r3, [sp, #4]
    b8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b8f6:	4a0a      	ldr	r2, [pc, #40]	; (b920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    b8f8:	9b01      	ldr	r3, [sp, #4]
    b8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8fe:	f003 0301 	and.w	r3, r3, #1
    b902:	2b00      	cmp	r3, #0
    b904:	d106      	bne.n	b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    b906:	4a05      	ldr	r2, [pc, #20]	; (b91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    b908:	9b01      	ldr	r3, [sp, #4]
    b90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b90e:	2b00      	cmp	r3, #0
    b910:	d100      	bne.n	b914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b914:	bf00      	nop
    b916:	b003      	add	sp, #12
    b918:	f85d fb04 	ldr.w	pc, [sp], #4
    b91c:	1fff8e50 	.word	0x1fff8e50
    b920:	1fff8e4c 	.word	0x1fff8e4c

0000b924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b924:	b500      	push	{lr}
    b926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b928:	f7f5 f916 	bl	b58 <Sys_GetCoreID>
    b92c:	4603      	mov	r3, r0
    b92e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    b930:	4a10      	ldr	r2, [pc, #64]	; (b974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b932:	9b01      	ldr	r3, [sp, #4]
    b934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b938:	2b00      	cmp	r3, #0
    b93a:	d10d      	bne.n	b958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b93c:	f7f5 f82a 	bl	994 <Adc_schm_read_msr>
    b940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b942:	9b00      	ldr	r3, [sp, #0]
    b944:	f003 0301 	and.w	r3, r3, #1
    b948:	2b00      	cmp	r3, #0
    b94a:	d100      	bne.n	b94e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b94c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b94e:	490a      	ldr	r1, [pc, #40]	; (b978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    b950:	9b01      	ldr	r3, [sp, #4]
    b952:	9a00      	ldr	r2, [sp, #0]
    b954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    b958:	4a06      	ldr	r2, [pc, #24]	; (b974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b95a:	9b01      	ldr	r3, [sp, #4]
    b95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b960:	1c5a      	adds	r2, r3, #1
    b962:	4904      	ldr	r1, [pc, #16]	; (b974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    b964:	9b01      	ldr	r3, [sp, #4]
    b966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b96a:	bf00      	nop
    b96c:	b003      	add	sp, #12
    b96e:	f85d fb04 	ldr.w	pc, [sp], #4
    b972:	bf00      	nop
    b974:	1fff8e58 	.word	0x1fff8e58
    b978:	1fff8e54 	.word	0x1fff8e54

0000b97c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    b97c:	b500      	push	{lr}
    b97e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b980:	f7f5 f8ea 	bl	b58 <Sys_GetCoreID>
    b984:	4603      	mov	r3, r0
    b986:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    b988:	4a0d      	ldr	r2, [pc, #52]	; (b9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b98a:	9b01      	ldr	r3, [sp, #4]
    b98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b990:	1e5a      	subs	r2, r3, #1
    b992:	490b      	ldr	r1, [pc, #44]	; (b9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b994:	9b01      	ldr	r3, [sp, #4]
    b996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b99a:	4a0a      	ldr	r2, [pc, #40]	; (b9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    b99c:	9b01      	ldr	r3, [sp, #4]
    b99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9a2:	f003 0301 	and.w	r3, r3, #1
    b9a6:	2b00      	cmp	r3, #0
    b9a8:	d106      	bne.n	b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    b9aa:	4a05      	ldr	r2, [pc, #20]	; (b9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    b9ac:	9b01      	ldr	r3, [sp, #4]
    b9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d100      	bne.n	b9b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b9b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b9b8:	bf00      	nop
    b9ba:	b003      	add	sp, #12
    b9bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b9c0:	1fff8e58 	.word	0x1fff8e58
    b9c4:	1fff8e54 	.word	0x1fff8e54

0000b9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    b9c8:	b500      	push	{lr}
    b9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9cc:	f7f5 f8c4 	bl	b58 <Sys_GetCoreID>
    b9d0:	4603      	mov	r3, r0
    b9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    b9d4:	4a10      	ldr	r2, [pc, #64]	; (ba18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b9d6:	9b01      	ldr	r3, [sp, #4]
    b9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d10d      	bne.n	b9fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b9e0:	f7f4 ffd8 	bl	994 <Adc_schm_read_msr>
    b9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b9e6:	9b00      	ldr	r3, [sp, #0]
    b9e8:	f003 0301 	and.w	r3, r3, #1
    b9ec:	2b00      	cmp	r3, #0
    b9ee:	d100      	bne.n	b9f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    b9f2:	490a      	ldr	r1, [pc, #40]	; (ba1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    b9f4:	9b01      	ldr	r3, [sp, #4]
    b9f6:	9a00      	ldr	r2, [sp, #0]
    b9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    b9fc:	4a06      	ldr	r2, [pc, #24]	; (ba18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    b9fe:	9b01      	ldr	r3, [sp, #4]
    ba00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba04:	1c5a      	adds	r2, r3, #1
    ba06:	4904      	ldr	r1, [pc, #16]	; (ba18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ba08:	9b01      	ldr	r3, [sp, #4]
    ba0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ba0e:	bf00      	nop
    ba10:	b003      	add	sp, #12
    ba12:	f85d fb04 	ldr.w	pc, [sp], #4
    ba16:	bf00      	nop
    ba18:	1fff8e60 	.word	0x1fff8e60
    ba1c:	1fff8e5c 	.word	0x1fff8e5c

0000ba20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ba20:	b500      	push	{lr}
    ba22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba24:	f7f5 f898 	bl	b58 <Sys_GetCoreID>
    ba28:	4603      	mov	r3, r0
    ba2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    ba2c:	4a0d      	ldr	r2, [pc, #52]	; (ba64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ba2e:	9b01      	ldr	r3, [sp, #4]
    ba30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba34:	1e5a      	subs	r2, r3, #1
    ba36:	490b      	ldr	r1, [pc, #44]	; (ba64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ba38:	9b01      	ldr	r3, [sp, #4]
    ba3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    ba3e:	4a0a      	ldr	r2, [pc, #40]	; (ba68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    ba40:	9b01      	ldr	r3, [sp, #4]
    ba42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba46:	f003 0301 	and.w	r3, r3, #1
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d106      	bne.n	ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    ba4e:	4a05      	ldr	r2, [pc, #20]	; (ba64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ba50:	9b01      	ldr	r3, [sp, #4]
    ba52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba56:	2b00      	cmp	r3, #0
    ba58:	d100      	bne.n	ba5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ba5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ba5c:	bf00      	nop
    ba5e:	b003      	add	sp, #12
    ba60:	f85d fb04 	ldr.w	pc, [sp], #4
    ba64:	1fff8e60 	.word	0x1fff8e60
    ba68:	1fff8e5c 	.word	0x1fff8e5c

0000ba6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    ba6c:	b500      	push	{lr}
    ba6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba70:	f7f5 f872 	bl	b58 <Sys_GetCoreID>
    ba74:	4603      	mov	r3, r0
    ba76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    ba78:	4a10      	ldr	r2, [pc, #64]	; (babc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    ba7a:	9b01      	ldr	r3, [sp, #4]
    ba7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba80:	2b00      	cmp	r3, #0
    ba82:	d10d      	bne.n	baa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ba84:	f7f4 ff86 	bl	994 <Adc_schm_read_msr>
    ba88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ba8a:	9b00      	ldr	r3, [sp, #0]
    ba8c:	f003 0301 	and.w	r3, r3, #1
    ba90:	2b00      	cmp	r3, #0
    ba92:	d100      	bne.n	ba96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ba94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ba96:	490a      	ldr	r1, [pc, #40]	; (bac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    ba98:	9b01      	ldr	r3, [sp, #4]
    ba9a:	9a00      	ldr	r2, [sp, #0]
    ba9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    baa0:	4a06      	ldr	r2, [pc, #24]	; (babc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    baa2:	9b01      	ldr	r3, [sp, #4]
    baa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baa8:	1c5a      	adds	r2, r3, #1
    baaa:	4904      	ldr	r1, [pc, #16]	; (babc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    baac:	9b01      	ldr	r3, [sp, #4]
    baae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bab2:	bf00      	nop
    bab4:	b003      	add	sp, #12
    bab6:	f85d fb04 	ldr.w	pc, [sp], #4
    baba:	bf00      	nop
    babc:	1fff8e68 	.word	0x1fff8e68
    bac0:	1fff8e64 	.word	0x1fff8e64

0000bac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    bac4:	b500      	push	{lr}
    bac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bac8:	f7f5 f846 	bl	b58 <Sys_GetCoreID>
    bacc:	4603      	mov	r3, r0
    bace:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    bad0:	4a0d      	ldr	r2, [pc, #52]	; (bb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    bad2:	9b01      	ldr	r3, [sp, #4]
    bad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bad8:	1e5a      	subs	r2, r3, #1
    bada:	490b      	ldr	r1, [pc, #44]	; (bb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    badc:	9b01      	ldr	r3, [sp, #4]
    bade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    bae2:	4a0a      	ldr	r2, [pc, #40]	; (bb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    bae4:	9b01      	ldr	r3, [sp, #4]
    bae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baea:	f003 0301 	and.w	r3, r3, #1
    baee:	2b00      	cmp	r3, #0
    baf0:	d106      	bne.n	bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    baf2:	4a05      	ldr	r2, [pc, #20]	; (bb08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    baf4:	9b01      	ldr	r3, [sp, #4]
    baf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bafa:	2b00      	cmp	r3, #0
    bafc:	d100      	bne.n	bb00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bb00:	bf00      	nop
    bb02:	b003      	add	sp, #12
    bb04:	f85d fb04 	ldr.w	pc, [sp], #4
    bb08:	1fff8e68 	.word	0x1fff8e68
    bb0c:	1fff8e64 	.word	0x1fff8e64

0000bb10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bb10:	b500      	push	{lr}
    bb12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb14:	f7f5 f820 	bl	b58 <Sys_GetCoreID>
    bb18:	4603      	mov	r3, r0
    bb1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    bb1c:	4a10      	ldr	r2, [pc, #64]	; (bb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bb1e:	9b01      	ldr	r3, [sp, #4]
    bb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb24:	2b00      	cmp	r3, #0
    bb26:	d10d      	bne.n	bb44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bb28:	f7f4 ff34 	bl	994 <Adc_schm_read_msr>
    bb2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bb2e:	9b00      	ldr	r3, [sp, #0]
    bb30:	f003 0301 	and.w	r3, r3, #1
    bb34:	2b00      	cmp	r3, #0
    bb36:	d100      	bne.n	bb3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bb38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    bb3a:	490a      	ldr	r1, [pc, #40]	; (bb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    bb3c:	9b01      	ldr	r3, [sp, #4]
    bb3e:	9a00      	ldr	r2, [sp, #0]
    bb40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    bb44:	4a06      	ldr	r2, [pc, #24]	; (bb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bb46:	9b01      	ldr	r3, [sp, #4]
    bb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb4c:	1c5a      	adds	r2, r3, #1
    bb4e:	4904      	ldr	r1, [pc, #16]	; (bb60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    bb50:	9b01      	ldr	r3, [sp, #4]
    bb52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb56:	bf00      	nop
    bb58:	b003      	add	sp, #12
    bb5a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb5e:	bf00      	nop
    bb60:	1fff8e70 	.word	0x1fff8e70
    bb64:	1fff8e6c 	.word	0x1fff8e6c

0000bb68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    bb68:	b500      	push	{lr}
    bb6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bb6c:	f7f4 fff4 	bl	b58 <Sys_GetCoreID>
    bb70:	4603      	mov	r3, r0
    bb72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    bb74:	4a0d      	ldr	r2, [pc, #52]	; (bbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bb76:	9b01      	ldr	r3, [sp, #4]
    bb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb7c:	1e5a      	subs	r2, r3, #1
    bb7e:	490b      	ldr	r1, [pc, #44]	; (bbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bb80:	9b01      	ldr	r3, [sp, #4]
    bb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    bb86:	4a0a      	ldr	r2, [pc, #40]	; (bbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    bb88:	9b01      	ldr	r3, [sp, #4]
    bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb8e:	f003 0301 	and.w	r3, r3, #1
    bb92:	2b00      	cmp	r3, #0
    bb94:	d106      	bne.n	bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    bb96:	4a05      	ldr	r2, [pc, #20]	; (bbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    bb98:	9b01      	ldr	r3, [sp, #4]
    bb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb9e:	2b00      	cmp	r3, #0
    bba0:	d100      	bne.n	bba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bba4:	bf00      	nop
    bba6:	b003      	add	sp, #12
    bba8:	f85d fb04 	ldr.w	pc, [sp], #4
    bbac:	1fff8e70 	.word	0x1fff8e70
    bbb0:	1fff8e6c 	.word	0x1fff8e6c

0000bbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bbb4:	b500      	push	{lr}
    bbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bbb8:	f7f4 ffce 	bl	b58 <Sys_GetCoreID>
    bbbc:	4603      	mov	r3, r0
    bbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    bbc0:	4a10      	ldr	r2, [pc, #64]	; (bc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bbc2:	9b01      	ldr	r3, [sp, #4]
    bbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d10d      	bne.n	bbe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bbcc:	f7f4 fee2 	bl	994 <Adc_schm_read_msr>
    bbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bbd2:	9b00      	ldr	r3, [sp, #0]
    bbd4:	f003 0301 	and.w	r3, r3, #1
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d100      	bne.n	bbde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    bbde:	490a      	ldr	r1, [pc, #40]	; (bc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    bbe0:	9b01      	ldr	r3, [sp, #4]
    bbe2:	9a00      	ldr	r2, [sp, #0]
    bbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    bbe8:	4a06      	ldr	r2, [pc, #24]	; (bc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bbea:	9b01      	ldr	r3, [sp, #4]
    bbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbf0:	1c5a      	adds	r2, r3, #1
    bbf2:	4904      	ldr	r1, [pc, #16]	; (bc04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    bbf4:	9b01      	ldr	r3, [sp, #4]
    bbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bbfa:	bf00      	nop
    bbfc:	b003      	add	sp, #12
    bbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    bc02:	bf00      	nop
    bc04:	1fff8e78 	.word	0x1fff8e78
    bc08:	1fff8e74 	.word	0x1fff8e74

0000bc0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    bc0c:	b500      	push	{lr}
    bc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc10:	f7f4 ffa2 	bl	b58 <Sys_GetCoreID>
    bc14:	4603      	mov	r3, r0
    bc16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    bc18:	4a0d      	ldr	r2, [pc, #52]	; (bc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bc1a:	9b01      	ldr	r3, [sp, #4]
    bc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc20:	1e5a      	subs	r2, r3, #1
    bc22:	490b      	ldr	r1, [pc, #44]	; (bc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bc24:	9b01      	ldr	r3, [sp, #4]
    bc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    bc2a:	4a0a      	ldr	r2, [pc, #40]	; (bc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    bc2c:	9b01      	ldr	r3, [sp, #4]
    bc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc32:	f003 0301 	and.w	r3, r3, #1
    bc36:	2b00      	cmp	r3, #0
    bc38:	d106      	bne.n	bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    bc3a:	4a05      	ldr	r2, [pc, #20]	; (bc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    bc3c:	9b01      	ldr	r3, [sp, #4]
    bc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc42:	2b00      	cmp	r3, #0
    bc44:	d100      	bne.n	bc48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc48:	bf00      	nop
    bc4a:	b003      	add	sp, #12
    bc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    bc50:	1fff8e78 	.word	0x1fff8e78
    bc54:	1fff8e74 	.word	0x1fff8e74

0000bc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bc58:	b500      	push	{lr}
    bc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc5c:	f7f4 ff7c 	bl	b58 <Sys_GetCoreID>
    bc60:	4603      	mov	r3, r0
    bc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    bc64:	4a10      	ldr	r2, [pc, #64]	; (bca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bc66:	9b01      	ldr	r3, [sp, #4]
    bc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d10d      	bne.n	bc8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc70:	f7f4 fe90 	bl	994 <Adc_schm_read_msr>
    bc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc76:	9b00      	ldr	r3, [sp, #0]
    bc78:	f003 0301 	and.w	r3, r3, #1
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d100      	bne.n	bc82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    bc82:	490a      	ldr	r1, [pc, #40]	; (bcac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    bc84:	9b01      	ldr	r3, [sp, #4]
    bc86:	9a00      	ldr	r2, [sp, #0]
    bc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    bc8c:	4a06      	ldr	r2, [pc, #24]	; (bca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bc8e:	9b01      	ldr	r3, [sp, #4]
    bc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc94:	1c5a      	adds	r2, r3, #1
    bc96:	4904      	ldr	r1, [pc, #16]	; (bca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    bc98:	9b01      	ldr	r3, [sp, #4]
    bc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc9e:	bf00      	nop
    bca0:	b003      	add	sp, #12
    bca2:	f85d fb04 	ldr.w	pc, [sp], #4
    bca6:	bf00      	nop
    bca8:	1fff8e80 	.word	0x1fff8e80
    bcac:	1fff8e7c 	.word	0x1fff8e7c

0000bcb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    bcb0:	b500      	push	{lr}
    bcb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bcb4:	f7f4 ff50 	bl	b58 <Sys_GetCoreID>
    bcb8:	4603      	mov	r3, r0
    bcba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    bcbc:	4a0d      	ldr	r2, [pc, #52]	; (bcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bcbe:	9b01      	ldr	r3, [sp, #4]
    bcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcc4:	1e5a      	subs	r2, r3, #1
    bcc6:	490b      	ldr	r1, [pc, #44]	; (bcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    bcce:	4a0a      	ldr	r2, [pc, #40]	; (bcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcd6:	f003 0301 	and.w	r3, r3, #1
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d106      	bne.n	bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    bcde:	4a05      	ldr	r2, [pc, #20]	; (bcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    bce0:	9b01      	ldr	r3, [sp, #4]
    bce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d100      	bne.n	bcec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bcea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bcec:	bf00      	nop
    bcee:	b003      	add	sp, #12
    bcf0:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf4:	1fff8e80 	.word	0x1fff8e80
    bcf8:	1fff8e7c 	.word	0x1fff8e7c

0000bcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bcfc:	b500      	push	{lr}
    bcfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd00:	f7f4 ff2a 	bl	b58 <Sys_GetCoreID>
    bd04:	4603      	mov	r3, r0
    bd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    bd08:	4a10      	ldr	r2, [pc, #64]	; (bd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bd0a:	9b01      	ldr	r3, [sp, #4]
    bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d10d      	bne.n	bd30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd14:	f7f4 fe3e 	bl	994 <Adc_schm_read_msr>
    bd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd1a:	9b00      	ldr	r3, [sp, #0]
    bd1c:	f003 0301 	and.w	r3, r3, #1
    bd20:	2b00      	cmp	r3, #0
    bd22:	d100      	bne.n	bd26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    bd26:	490a      	ldr	r1, [pc, #40]	; (bd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    bd28:	9b01      	ldr	r3, [sp, #4]
    bd2a:	9a00      	ldr	r2, [sp, #0]
    bd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    bd30:	4a06      	ldr	r2, [pc, #24]	; (bd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bd32:	9b01      	ldr	r3, [sp, #4]
    bd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd38:	1c5a      	adds	r2, r3, #1
    bd3a:	4904      	ldr	r1, [pc, #16]	; (bd4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    bd3c:	9b01      	ldr	r3, [sp, #4]
    bd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd42:	bf00      	nop
    bd44:	b003      	add	sp, #12
    bd46:	f85d fb04 	ldr.w	pc, [sp], #4
    bd4a:	bf00      	nop
    bd4c:	1fff8e88 	.word	0x1fff8e88
    bd50:	1fff8e84 	.word	0x1fff8e84

0000bd54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    bd54:	b500      	push	{lr}
    bd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd58:	f7f4 fefe 	bl	b58 <Sys_GetCoreID>
    bd5c:	4603      	mov	r3, r0
    bd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    bd60:	4a0d      	ldr	r2, [pc, #52]	; (bd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bd62:	9b01      	ldr	r3, [sp, #4]
    bd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd68:	1e5a      	subs	r2, r3, #1
    bd6a:	490b      	ldr	r1, [pc, #44]	; (bd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bd6c:	9b01      	ldr	r3, [sp, #4]
    bd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    bd72:	4a0a      	ldr	r2, [pc, #40]	; (bd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    bd74:	9b01      	ldr	r3, [sp, #4]
    bd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd7a:	f003 0301 	and.w	r3, r3, #1
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d106      	bne.n	bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    bd82:	4a05      	ldr	r2, [pc, #20]	; (bd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    bd84:	9b01      	ldr	r3, [sp, #4]
    bd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d100      	bne.n	bd90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd90:	bf00      	nop
    bd92:	b003      	add	sp, #12
    bd94:	f85d fb04 	ldr.w	pc, [sp], #4
    bd98:	1fff8e88 	.word	0x1fff8e88
    bd9c:	1fff8e84 	.word	0x1fff8e84

0000bda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bda0:	b500      	push	{lr}
    bda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bda4:	f7f4 fed8 	bl	b58 <Sys_GetCoreID>
    bda8:	4603      	mov	r3, r0
    bdaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    bdac:	4a10      	ldr	r2, [pc, #64]	; (bdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bdae:	9b01      	ldr	r3, [sp, #4]
    bdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	d10d      	bne.n	bdd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bdb8:	f7f4 fdec 	bl	994 <Adc_schm_read_msr>
    bdbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bdbe:	9b00      	ldr	r3, [sp, #0]
    bdc0:	f003 0301 	and.w	r3, r3, #1
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d100      	bne.n	bdca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bdc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    bdca:	490a      	ldr	r1, [pc, #40]	; (bdf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    bdcc:	9b01      	ldr	r3, [sp, #4]
    bdce:	9a00      	ldr	r2, [sp, #0]
    bdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    bdd4:	4a06      	ldr	r2, [pc, #24]	; (bdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bdd6:	9b01      	ldr	r3, [sp, #4]
    bdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bddc:	1c5a      	adds	r2, r3, #1
    bdde:	4904      	ldr	r1, [pc, #16]	; (bdf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    bde0:	9b01      	ldr	r3, [sp, #4]
    bde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bde6:	bf00      	nop
    bde8:	b003      	add	sp, #12
    bdea:	f85d fb04 	ldr.w	pc, [sp], #4
    bdee:	bf00      	nop
    bdf0:	1fff8e90 	.word	0x1fff8e90
    bdf4:	1fff8e8c 	.word	0x1fff8e8c

0000bdf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    bdf8:	b500      	push	{lr}
    bdfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdfc:	f7f4 feac 	bl	b58 <Sys_GetCoreID>
    be00:	4603      	mov	r3, r0
    be02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    be04:	4a0d      	ldr	r2, [pc, #52]	; (be3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    be06:	9b01      	ldr	r3, [sp, #4]
    be08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be0c:	1e5a      	subs	r2, r3, #1
    be0e:	490b      	ldr	r1, [pc, #44]	; (be3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    be10:	9b01      	ldr	r3, [sp, #4]
    be12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    be16:	4a0a      	ldr	r2, [pc, #40]	; (be40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be1e:	f003 0301 	and.w	r3, r3, #1
    be22:	2b00      	cmp	r3, #0
    be24:	d106      	bne.n	be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    be26:	4a05      	ldr	r2, [pc, #20]	; (be3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    be28:	9b01      	ldr	r3, [sp, #4]
    be2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be2e:	2b00      	cmp	r3, #0
    be30:	d100      	bne.n	be34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be34:	bf00      	nop
    be36:	b003      	add	sp, #12
    be38:	f85d fb04 	ldr.w	pc, [sp], #4
    be3c:	1fff8e90 	.word	0x1fff8e90
    be40:	1fff8e8c 	.word	0x1fff8e8c

0000be44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    be44:	b500      	push	{lr}
    be46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be48:	f7f4 fe86 	bl	b58 <Sys_GetCoreID>
    be4c:	4603      	mov	r3, r0
    be4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    be50:	4a10      	ldr	r2, [pc, #64]	; (be94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    be52:	9b01      	ldr	r3, [sp, #4]
    be54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be58:	2b00      	cmp	r3, #0
    be5a:	d10d      	bne.n	be78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be5c:	f7f4 fd9a 	bl	994 <Adc_schm_read_msr>
    be60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be62:	9b00      	ldr	r3, [sp, #0]
    be64:	f003 0301 	and.w	r3, r3, #1
    be68:	2b00      	cmp	r3, #0
    be6a:	d100      	bne.n	be6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    be6e:	490a      	ldr	r1, [pc, #40]	; (be98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    be70:	9b01      	ldr	r3, [sp, #4]
    be72:	9a00      	ldr	r2, [sp, #0]
    be74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    be78:	4a06      	ldr	r2, [pc, #24]	; (be94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    be7a:	9b01      	ldr	r3, [sp, #4]
    be7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be80:	1c5a      	adds	r2, r3, #1
    be82:	4904      	ldr	r1, [pc, #16]	; (be94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    be84:	9b01      	ldr	r3, [sp, #4]
    be86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be8a:	bf00      	nop
    be8c:	b003      	add	sp, #12
    be8e:	f85d fb04 	ldr.w	pc, [sp], #4
    be92:	bf00      	nop
    be94:	1fff8e98 	.word	0x1fff8e98
    be98:	1fff8e94 	.word	0x1fff8e94

0000be9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    be9c:	b500      	push	{lr}
    be9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bea0:	f7f4 fe5a 	bl	b58 <Sys_GetCoreID>
    bea4:	4603      	mov	r3, r0
    bea6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    bea8:	4a0d      	ldr	r2, [pc, #52]	; (bee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    beaa:	9b01      	ldr	r3, [sp, #4]
    beac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beb0:	1e5a      	subs	r2, r3, #1
    beb2:	490b      	ldr	r1, [pc, #44]	; (bee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    beb4:	9b01      	ldr	r3, [sp, #4]
    beb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    beba:	4a0a      	ldr	r2, [pc, #40]	; (bee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bec2:	f003 0301 	and.w	r3, r3, #1
    bec6:	2b00      	cmp	r3, #0
    bec8:	d106      	bne.n	bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    beca:	4a05      	ldr	r2, [pc, #20]	; (bee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    becc:	9b01      	ldr	r3, [sp, #4]
    bece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bed2:	2b00      	cmp	r3, #0
    bed4:	d100      	bne.n	bed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bed8:	bf00      	nop
    beda:	b003      	add	sp, #12
    bedc:	f85d fb04 	ldr.w	pc, [sp], #4
    bee0:	1fff8e98 	.word	0x1fff8e98
    bee4:	1fff8e94 	.word	0x1fff8e94

0000bee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    bee8:	b500      	push	{lr}
    beea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    beec:	f7f4 fe34 	bl	b58 <Sys_GetCoreID>
    bef0:	4603      	mov	r3, r0
    bef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    bef4:	4a10      	ldr	r2, [pc, #64]	; (bf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    befc:	2b00      	cmp	r3, #0
    befe:	d10d      	bne.n	bf1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf00:	f7f4 fd48 	bl	994 <Adc_schm_read_msr>
    bf04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf06:	9b00      	ldr	r3, [sp, #0]
    bf08:	f003 0301 	and.w	r3, r3, #1
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	d100      	bne.n	bf12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    bf12:	490a      	ldr	r1, [pc, #40]	; (bf3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    bf14:	9b01      	ldr	r3, [sp, #4]
    bf16:	9a00      	ldr	r2, [sp, #0]
    bf18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    bf1c:	4a06      	ldr	r2, [pc, #24]	; (bf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bf1e:	9b01      	ldr	r3, [sp, #4]
    bf20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf24:	1c5a      	adds	r2, r3, #1
    bf26:	4904      	ldr	r1, [pc, #16]	; (bf38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    bf28:	9b01      	ldr	r3, [sp, #4]
    bf2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf2e:	bf00      	nop
    bf30:	b003      	add	sp, #12
    bf32:	f85d fb04 	ldr.w	pc, [sp], #4
    bf36:	bf00      	nop
    bf38:	1fff8ea0 	.word	0x1fff8ea0
    bf3c:	1fff8e9c 	.word	0x1fff8e9c

0000bf40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    bf40:	b500      	push	{lr}
    bf42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf44:	f7f4 fe08 	bl	b58 <Sys_GetCoreID>
    bf48:	4603      	mov	r3, r0
    bf4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    bf4c:	4a0d      	ldr	r2, [pc, #52]	; (bf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bf4e:	9b01      	ldr	r3, [sp, #4]
    bf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf54:	1e5a      	subs	r2, r3, #1
    bf56:	490b      	ldr	r1, [pc, #44]	; (bf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    bf5e:	4a0a      	ldr	r2, [pc, #40]	; (bf88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf66:	f003 0301 	and.w	r3, r3, #1
    bf6a:	2b00      	cmp	r3, #0
    bf6c:	d106      	bne.n	bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    bf6e:	4a05      	ldr	r2, [pc, #20]	; (bf84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    bf70:	9b01      	ldr	r3, [sp, #4]
    bf72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf76:	2b00      	cmp	r3, #0
    bf78:	d100      	bne.n	bf7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf7c:	bf00      	nop
    bf7e:	b003      	add	sp, #12
    bf80:	f85d fb04 	ldr.w	pc, [sp], #4
    bf84:	1fff8ea0 	.word	0x1fff8ea0
    bf88:	1fff8e9c 	.word	0x1fff8e9c

0000bf8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    bf8c:	b500      	push	{lr}
    bf8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf90:	f7f4 fde2 	bl	b58 <Sys_GetCoreID>
    bf94:	4603      	mov	r3, r0
    bf96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    bf98:	4a10      	ldr	r2, [pc, #64]	; (bfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bf9a:	9b01      	ldr	r3, [sp, #4]
    bf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfa0:	2b00      	cmp	r3, #0
    bfa2:	d10d      	bne.n	bfc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bfa4:	f7f4 fcf6 	bl	994 <Adc_schm_read_msr>
    bfa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bfaa:	9b00      	ldr	r3, [sp, #0]
    bfac:	f003 0301 	and.w	r3, r3, #1
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d100      	bne.n	bfb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bfb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    bfb6:	490a      	ldr	r1, [pc, #40]	; (bfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    bfb8:	9b01      	ldr	r3, [sp, #4]
    bfba:	9a00      	ldr	r2, [sp, #0]
    bfbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    bfc0:	4a06      	ldr	r2, [pc, #24]	; (bfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bfc2:	9b01      	ldr	r3, [sp, #4]
    bfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc8:	1c5a      	adds	r2, r3, #1
    bfca:	4904      	ldr	r1, [pc, #16]	; (bfdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    bfcc:	9b01      	ldr	r3, [sp, #4]
    bfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bfd2:	bf00      	nop
    bfd4:	b003      	add	sp, #12
    bfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    bfda:	bf00      	nop
    bfdc:	1fff8ea8 	.word	0x1fff8ea8
    bfe0:	1fff8ea4 	.word	0x1fff8ea4

0000bfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    bfe4:	b500      	push	{lr}
    bfe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfe8:	f7f4 fdb6 	bl	b58 <Sys_GetCoreID>
    bfec:	4603      	mov	r3, r0
    bfee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    bff0:	4a0d      	ldr	r2, [pc, #52]	; (c028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bff2:	9b01      	ldr	r3, [sp, #4]
    bff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bff8:	1e5a      	subs	r2, r3, #1
    bffa:	490b      	ldr	r1, [pc, #44]	; (c028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    bffc:	9b01      	ldr	r3, [sp, #4]
    bffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    c002:	4a0a      	ldr	r2, [pc, #40]	; (c02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    c004:	9b01      	ldr	r3, [sp, #4]
    c006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c00a:	f003 0301 	and.w	r3, r3, #1
    c00e:	2b00      	cmp	r3, #0
    c010:	d106      	bne.n	c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    c012:	4a05      	ldr	r2, [pc, #20]	; (c028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    c014:	9b01      	ldr	r3, [sp, #4]
    c016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c01a:	2b00      	cmp	r3, #0
    c01c:	d100      	bne.n	c020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c020:	bf00      	nop
    c022:	b003      	add	sp, #12
    c024:	f85d fb04 	ldr.w	pc, [sp], #4
    c028:	1fff8ea8 	.word	0x1fff8ea8
    c02c:	1fff8ea4 	.word	0x1fff8ea4

0000c030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c030:	b500      	push	{lr}
    c032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c034:	f7f4 fd90 	bl	b58 <Sys_GetCoreID>
    c038:	4603      	mov	r3, r0
    c03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    c03c:	4a10      	ldr	r2, [pc, #64]	; (c080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c03e:	9b01      	ldr	r3, [sp, #4]
    c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c044:	2b00      	cmp	r3, #0
    c046:	d10d      	bne.n	c064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c048:	f7f4 fca4 	bl	994 <Adc_schm_read_msr>
    c04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c04e:	9b00      	ldr	r3, [sp, #0]
    c050:	f003 0301 	and.w	r3, r3, #1
    c054:	2b00      	cmp	r3, #0
    c056:	d100      	bne.n	c05a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    c05a:	490a      	ldr	r1, [pc, #40]	; (c084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    c05c:	9b01      	ldr	r3, [sp, #4]
    c05e:	9a00      	ldr	r2, [sp, #0]
    c060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    c064:	4a06      	ldr	r2, [pc, #24]	; (c080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c066:	9b01      	ldr	r3, [sp, #4]
    c068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c06c:	1c5a      	adds	r2, r3, #1
    c06e:	4904      	ldr	r1, [pc, #16]	; (c080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    c070:	9b01      	ldr	r3, [sp, #4]
    c072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c076:	bf00      	nop
    c078:	b003      	add	sp, #12
    c07a:	f85d fb04 	ldr.w	pc, [sp], #4
    c07e:	bf00      	nop
    c080:	1fff8eb0 	.word	0x1fff8eb0
    c084:	1fff8eac 	.word	0x1fff8eac

0000c088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    c088:	b500      	push	{lr}
    c08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c08c:	f7f4 fd64 	bl	b58 <Sys_GetCoreID>
    c090:	4603      	mov	r3, r0
    c092:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    c094:	4a0d      	ldr	r2, [pc, #52]	; (c0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c096:	9b01      	ldr	r3, [sp, #4]
    c098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c09c:	1e5a      	subs	r2, r3, #1
    c09e:	490b      	ldr	r1, [pc, #44]	; (c0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    c0a6:	4a0a      	ldr	r2, [pc, #40]	; (c0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0ae:	f003 0301 	and.w	r3, r3, #1
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d106      	bne.n	c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    c0b6:	4a05      	ldr	r2, [pc, #20]	; (c0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    c0b8:	9b01      	ldr	r3, [sp, #4]
    c0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0be:	2b00      	cmp	r3, #0
    c0c0:	d100      	bne.n	c0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c0c4:	bf00      	nop
    c0c6:	b003      	add	sp, #12
    c0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    c0cc:	1fff8eb0 	.word	0x1fff8eb0
    c0d0:	1fff8eac 	.word	0x1fff8eac

0000c0d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c0d4:	b500      	push	{lr}
    c0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0d8:	f7f4 fd3e 	bl	b58 <Sys_GetCoreID>
    c0dc:	4603      	mov	r3, r0
    c0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    c0e0:	4a10      	ldr	r2, [pc, #64]	; (c124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c0e2:	9b01      	ldr	r3, [sp, #4]
    c0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d10d      	bne.n	c108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c0ec:	f7f4 fc52 	bl	994 <Adc_schm_read_msr>
    c0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c0f2:	9b00      	ldr	r3, [sp, #0]
    c0f4:	f003 0301 	and.w	r3, r3, #1
    c0f8:	2b00      	cmp	r3, #0
    c0fa:	d100      	bne.n	c0fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    c0fe:	490a      	ldr	r1, [pc, #40]	; (c128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    c100:	9b01      	ldr	r3, [sp, #4]
    c102:	9a00      	ldr	r2, [sp, #0]
    c104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    c108:	4a06      	ldr	r2, [pc, #24]	; (c124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c10a:	9b01      	ldr	r3, [sp, #4]
    c10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c110:	1c5a      	adds	r2, r3, #1
    c112:	4904      	ldr	r1, [pc, #16]	; (c124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    c114:	9b01      	ldr	r3, [sp, #4]
    c116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c11a:	bf00      	nop
    c11c:	b003      	add	sp, #12
    c11e:	f85d fb04 	ldr.w	pc, [sp], #4
    c122:	bf00      	nop
    c124:	1fff8eb8 	.word	0x1fff8eb8
    c128:	1fff8eb4 	.word	0x1fff8eb4

0000c12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    c12c:	b500      	push	{lr}
    c12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c130:	f7f4 fd12 	bl	b58 <Sys_GetCoreID>
    c134:	4603      	mov	r3, r0
    c136:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    c138:	4a0d      	ldr	r2, [pc, #52]	; (c170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c13a:	9b01      	ldr	r3, [sp, #4]
    c13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c140:	1e5a      	subs	r2, r3, #1
    c142:	490b      	ldr	r1, [pc, #44]	; (c170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c144:	9b01      	ldr	r3, [sp, #4]
    c146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    c14a:	4a0a      	ldr	r2, [pc, #40]	; (c174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c152:	f003 0301 	and.w	r3, r3, #1
    c156:	2b00      	cmp	r3, #0
    c158:	d106      	bne.n	c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    c15a:	4a05      	ldr	r2, [pc, #20]	; (c170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    c15c:	9b01      	ldr	r3, [sp, #4]
    c15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c162:	2b00      	cmp	r3, #0
    c164:	d100      	bne.n	c168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c168:	bf00      	nop
    c16a:	b003      	add	sp, #12
    c16c:	f85d fb04 	ldr.w	pc, [sp], #4
    c170:	1fff8eb8 	.word	0x1fff8eb8
    c174:	1fff8eb4 	.word	0x1fff8eb4

0000c178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c178:	b500      	push	{lr}
    c17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c17c:	f7f4 fcec 	bl	b58 <Sys_GetCoreID>
    c180:	4603      	mov	r3, r0
    c182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    c184:	4a10      	ldr	r2, [pc, #64]	; (c1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c186:	9b01      	ldr	r3, [sp, #4]
    c188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c18c:	2b00      	cmp	r3, #0
    c18e:	d10d      	bne.n	c1ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c190:	f7f4 fc00 	bl	994 <Adc_schm_read_msr>
    c194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c196:	9b00      	ldr	r3, [sp, #0]
    c198:	f003 0301 	and.w	r3, r3, #1
    c19c:	2b00      	cmp	r3, #0
    c19e:	d100      	bne.n	c1a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    c1a2:	490a      	ldr	r1, [pc, #40]	; (c1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    c1a4:	9b01      	ldr	r3, [sp, #4]
    c1a6:	9a00      	ldr	r2, [sp, #0]
    c1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    c1ac:	4a06      	ldr	r2, [pc, #24]	; (c1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c1ae:	9b01      	ldr	r3, [sp, #4]
    c1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1b4:	1c5a      	adds	r2, r3, #1
    c1b6:	4904      	ldr	r1, [pc, #16]	; (c1c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    c1b8:	9b01      	ldr	r3, [sp, #4]
    c1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c1be:	bf00      	nop
    c1c0:	b003      	add	sp, #12
    c1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    c1c6:	bf00      	nop
    c1c8:	1fff8ec0 	.word	0x1fff8ec0
    c1cc:	1fff8ebc 	.word	0x1fff8ebc

0000c1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    c1d0:	b500      	push	{lr}
    c1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1d4:	f7f4 fcc0 	bl	b58 <Sys_GetCoreID>
    c1d8:	4603      	mov	r3, r0
    c1da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    c1dc:	4a0d      	ldr	r2, [pc, #52]	; (c214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c1de:	9b01      	ldr	r3, [sp, #4]
    c1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1e4:	1e5a      	subs	r2, r3, #1
    c1e6:	490b      	ldr	r1, [pc, #44]	; (c214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c1e8:	9b01      	ldr	r3, [sp, #4]
    c1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    c1ee:	4a0a      	ldr	r2, [pc, #40]	; (c218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    c1f0:	9b01      	ldr	r3, [sp, #4]
    c1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1f6:	f003 0301 	and.w	r3, r3, #1
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d106      	bne.n	c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    c1fe:	4a05      	ldr	r2, [pc, #20]	; (c214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    c200:	9b01      	ldr	r3, [sp, #4]
    c202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c206:	2b00      	cmp	r3, #0
    c208:	d100      	bne.n	c20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c20c:	bf00      	nop
    c20e:	b003      	add	sp, #12
    c210:	f85d fb04 	ldr.w	pc, [sp], #4
    c214:	1fff8ec0 	.word	0x1fff8ec0
    c218:	1fff8ebc 	.word	0x1fff8ebc

0000c21c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c21c:	b500      	push	{lr}
    c21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c220:	f7f4 fc9a 	bl	b58 <Sys_GetCoreID>
    c224:	4603      	mov	r3, r0
    c226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    c228:	4a10      	ldr	r2, [pc, #64]	; (c26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c230:	2b00      	cmp	r3, #0
    c232:	d10d      	bne.n	c250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c234:	f7f4 fbae 	bl	994 <Adc_schm_read_msr>
    c238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c23a:	9b00      	ldr	r3, [sp, #0]
    c23c:	f003 0301 	and.w	r3, r3, #1
    c240:	2b00      	cmp	r3, #0
    c242:	d100      	bne.n	c246 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    c246:	490a      	ldr	r1, [pc, #40]	; (c270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    c248:	9b01      	ldr	r3, [sp, #4]
    c24a:	9a00      	ldr	r2, [sp, #0]
    c24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    c250:	4a06      	ldr	r2, [pc, #24]	; (c26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c252:	9b01      	ldr	r3, [sp, #4]
    c254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c258:	1c5a      	adds	r2, r3, #1
    c25a:	4904      	ldr	r1, [pc, #16]	; (c26c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    c25c:	9b01      	ldr	r3, [sp, #4]
    c25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c262:	bf00      	nop
    c264:	b003      	add	sp, #12
    c266:	f85d fb04 	ldr.w	pc, [sp], #4
    c26a:	bf00      	nop
    c26c:	1fff8ec8 	.word	0x1fff8ec8
    c270:	1fff8ec4 	.word	0x1fff8ec4

0000c274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    c274:	b500      	push	{lr}
    c276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c278:	f7f4 fc6e 	bl	b58 <Sys_GetCoreID>
    c27c:	4603      	mov	r3, r0
    c27e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    c280:	4a0d      	ldr	r2, [pc, #52]	; (c2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c282:	9b01      	ldr	r3, [sp, #4]
    c284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c288:	1e5a      	subs	r2, r3, #1
    c28a:	490b      	ldr	r1, [pc, #44]	; (c2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c28c:	9b01      	ldr	r3, [sp, #4]
    c28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    c292:	4a0a      	ldr	r2, [pc, #40]	; (c2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c29a:	f003 0301 	and.w	r3, r3, #1
    c29e:	2b00      	cmp	r3, #0
    c2a0:	d106      	bne.n	c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    c2a2:	4a05      	ldr	r2, [pc, #20]	; (c2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    c2a4:	9b01      	ldr	r3, [sp, #4]
    c2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2aa:	2b00      	cmp	r3, #0
    c2ac:	d100      	bne.n	c2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2b0:	bf00      	nop
    c2b2:	b003      	add	sp, #12
    c2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b8:	1fff8ec8 	.word	0x1fff8ec8
    c2bc:	1fff8ec4 	.word	0x1fff8ec4

0000c2c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c2c0:	b500      	push	{lr}
    c2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2c4:	f7f4 fc48 	bl	b58 <Sys_GetCoreID>
    c2c8:	4603      	mov	r3, r0
    c2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    c2cc:	4a10      	ldr	r2, [pc, #64]	; (c310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c2ce:	9b01      	ldr	r3, [sp, #4]
    c2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d10d      	bne.n	c2f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c2d8:	f7f4 fb5c 	bl	994 <Adc_schm_read_msr>
    c2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c2de:	9b00      	ldr	r3, [sp, #0]
    c2e0:	f003 0301 	and.w	r3, r3, #1
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d100      	bne.n	c2ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    c2ea:	490a      	ldr	r1, [pc, #40]	; (c314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    c2ec:	9b01      	ldr	r3, [sp, #4]
    c2ee:	9a00      	ldr	r2, [sp, #0]
    c2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    c2f4:	4a06      	ldr	r2, [pc, #24]	; (c310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c2f6:	9b01      	ldr	r3, [sp, #4]
    c2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2fc:	1c5a      	adds	r2, r3, #1
    c2fe:	4904      	ldr	r1, [pc, #16]	; (c310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    c300:	9b01      	ldr	r3, [sp, #4]
    c302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c306:	bf00      	nop
    c308:	b003      	add	sp, #12
    c30a:	f85d fb04 	ldr.w	pc, [sp], #4
    c30e:	bf00      	nop
    c310:	1fff8ed0 	.word	0x1fff8ed0
    c314:	1fff8ecc 	.word	0x1fff8ecc

0000c318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    c318:	b500      	push	{lr}
    c31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c31c:	f7f4 fc1c 	bl	b58 <Sys_GetCoreID>
    c320:	4603      	mov	r3, r0
    c322:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    c324:	4a0d      	ldr	r2, [pc, #52]	; (c35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c326:	9b01      	ldr	r3, [sp, #4]
    c328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c32c:	1e5a      	subs	r2, r3, #1
    c32e:	490b      	ldr	r1, [pc, #44]	; (c35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c330:	9b01      	ldr	r3, [sp, #4]
    c332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    c336:	4a0a      	ldr	r2, [pc, #40]	; (c360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    c338:	9b01      	ldr	r3, [sp, #4]
    c33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33e:	f003 0301 	and.w	r3, r3, #1
    c342:	2b00      	cmp	r3, #0
    c344:	d106      	bne.n	c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    c346:	4a05      	ldr	r2, [pc, #20]	; (c35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    c348:	9b01      	ldr	r3, [sp, #4]
    c34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c34e:	2b00      	cmp	r3, #0
    c350:	d100      	bne.n	c354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c354:	bf00      	nop
    c356:	b003      	add	sp, #12
    c358:	f85d fb04 	ldr.w	pc, [sp], #4
    c35c:	1fff8ed0 	.word	0x1fff8ed0
    c360:	1fff8ecc 	.word	0x1fff8ecc

0000c364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c364:	b500      	push	{lr}
    c366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c368:	f7f4 fbf6 	bl	b58 <Sys_GetCoreID>
    c36c:	4603      	mov	r3, r0
    c36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    c370:	4a10      	ldr	r2, [pc, #64]	; (c3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c372:	9b01      	ldr	r3, [sp, #4]
    c374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c378:	2b00      	cmp	r3, #0
    c37a:	d10d      	bne.n	c398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c37c:	f7f4 fb0a 	bl	994 <Adc_schm_read_msr>
    c380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c382:	9b00      	ldr	r3, [sp, #0]
    c384:	f003 0301 	and.w	r3, r3, #1
    c388:	2b00      	cmp	r3, #0
    c38a:	d100      	bne.n	c38e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    c38e:	490a      	ldr	r1, [pc, #40]	; (c3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    c390:	9b01      	ldr	r3, [sp, #4]
    c392:	9a00      	ldr	r2, [sp, #0]
    c394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    c398:	4a06      	ldr	r2, [pc, #24]	; (c3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c39a:	9b01      	ldr	r3, [sp, #4]
    c39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3a0:	1c5a      	adds	r2, r3, #1
    c3a2:	4904      	ldr	r1, [pc, #16]	; (c3b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    c3a4:	9b01      	ldr	r3, [sp, #4]
    c3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3aa:	bf00      	nop
    c3ac:	b003      	add	sp, #12
    c3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    c3b2:	bf00      	nop
    c3b4:	1fff8ed8 	.word	0x1fff8ed8
    c3b8:	1fff8ed4 	.word	0x1fff8ed4

0000c3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    c3bc:	b500      	push	{lr}
    c3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3c0:	f7f4 fbca 	bl	b58 <Sys_GetCoreID>
    c3c4:	4603      	mov	r3, r0
    c3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    c3c8:	4a0d      	ldr	r2, [pc, #52]	; (c400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c3ca:	9b01      	ldr	r3, [sp, #4]
    c3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d0:	1e5a      	subs	r2, r3, #1
    c3d2:	490b      	ldr	r1, [pc, #44]	; (c400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c3d4:	9b01      	ldr	r3, [sp, #4]
    c3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    c3da:	4a0a      	ldr	r2, [pc, #40]	; (c404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    c3dc:	9b01      	ldr	r3, [sp, #4]
    c3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3e2:	f003 0301 	and.w	r3, r3, #1
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d106      	bne.n	c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    c3ea:	4a05      	ldr	r2, [pc, #20]	; (c400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    c3ec:	9b01      	ldr	r3, [sp, #4]
    c3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d100      	bne.n	c3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3f8:	bf00      	nop
    c3fa:	b003      	add	sp, #12
    c3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    c400:	1fff8ed8 	.word	0x1fff8ed8
    c404:	1fff8ed4 	.word	0x1fff8ed4

0000c408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c408:	b500      	push	{lr}
    c40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c40c:	f7f4 fba4 	bl	b58 <Sys_GetCoreID>
    c410:	4603      	mov	r3, r0
    c412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    c414:	4a10      	ldr	r2, [pc, #64]	; (c458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c416:	9b01      	ldr	r3, [sp, #4]
    c418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d10d      	bne.n	c43c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c420:	f7f4 fab8 	bl	994 <Adc_schm_read_msr>
    c424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c426:	9b00      	ldr	r3, [sp, #0]
    c428:	f003 0301 	and.w	r3, r3, #1
    c42c:	2b00      	cmp	r3, #0
    c42e:	d100      	bne.n	c432 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    c432:	490a      	ldr	r1, [pc, #40]	; (c45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    c434:	9b01      	ldr	r3, [sp, #4]
    c436:	9a00      	ldr	r2, [sp, #0]
    c438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    c43c:	4a06      	ldr	r2, [pc, #24]	; (c458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c43e:	9b01      	ldr	r3, [sp, #4]
    c440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c444:	1c5a      	adds	r2, r3, #1
    c446:	4904      	ldr	r1, [pc, #16]	; (c458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    c448:	9b01      	ldr	r3, [sp, #4]
    c44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c44e:	bf00      	nop
    c450:	b003      	add	sp, #12
    c452:	f85d fb04 	ldr.w	pc, [sp], #4
    c456:	bf00      	nop
    c458:	1fff8ee0 	.word	0x1fff8ee0
    c45c:	1fff8edc 	.word	0x1fff8edc

0000c460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    c460:	b500      	push	{lr}
    c462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c464:	f7f4 fb78 	bl	b58 <Sys_GetCoreID>
    c468:	4603      	mov	r3, r0
    c46a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    c46c:	4a0d      	ldr	r2, [pc, #52]	; (c4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c46e:	9b01      	ldr	r3, [sp, #4]
    c470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c474:	1e5a      	subs	r2, r3, #1
    c476:	490b      	ldr	r1, [pc, #44]	; (c4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c478:	9b01      	ldr	r3, [sp, #4]
    c47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    c47e:	4a0a      	ldr	r2, [pc, #40]	; (c4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    c480:	9b01      	ldr	r3, [sp, #4]
    c482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c486:	f003 0301 	and.w	r3, r3, #1
    c48a:	2b00      	cmp	r3, #0
    c48c:	d106      	bne.n	c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    c48e:	4a05      	ldr	r2, [pc, #20]	; (c4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    c490:	9b01      	ldr	r3, [sp, #4]
    c492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c496:	2b00      	cmp	r3, #0
    c498:	d100      	bne.n	c49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c49c:	bf00      	nop
    c49e:	b003      	add	sp, #12
    c4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    c4a4:	1fff8ee0 	.word	0x1fff8ee0
    c4a8:	1fff8edc 	.word	0x1fff8edc

0000c4ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c4ac:	b500      	push	{lr}
    c4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4b0:	f7f4 fb52 	bl	b58 <Sys_GetCoreID>
    c4b4:	4603      	mov	r3, r0
    c4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    c4b8:	4a10      	ldr	r2, [pc, #64]	; (c4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d10d      	bne.n	c4e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c4c4:	f7f4 fa66 	bl	994 <Adc_schm_read_msr>
    c4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c4ca:	9b00      	ldr	r3, [sp, #0]
    c4cc:	f003 0301 	and.w	r3, r3, #1
    c4d0:	2b00      	cmp	r3, #0
    c4d2:	d100      	bne.n	c4d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    c4d6:	490a      	ldr	r1, [pc, #40]	; (c500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    c4d8:	9b01      	ldr	r3, [sp, #4]
    c4da:	9a00      	ldr	r2, [sp, #0]
    c4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    c4e0:	4a06      	ldr	r2, [pc, #24]	; (c4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c4e2:	9b01      	ldr	r3, [sp, #4]
    c4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e8:	1c5a      	adds	r2, r3, #1
    c4ea:	4904      	ldr	r1, [pc, #16]	; (c4fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    c4ec:	9b01      	ldr	r3, [sp, #4]
    c4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c4f2:	bf00      	nop
    c4f4:	b003      	add	sp, #12
    c4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    c4fa:	bf00      	nop
    c4fc:	1fff8ee8 	.word	0x1fff8ee8
    c500:	1fff8ee4 	.word	0x1fff8ee4

0000c504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    c504:	b500      	push	{lr}
    c506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c508:	f7f4 fb26 	bl	b58 <Sys_GetCoreID>
    c50c:	4603      	mov	r3, r0
    c50e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    c510:	4a0d      	ldr	r2, [pc, #52]	; (c548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c512:	9b01      	ldr	r3, [sp, #4]
    c514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c518:	1e5a      	subs	r2, r3, #1
    c51a:	490b      	ldr	r1, [pc, #44]	; (c548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c51c:	9b01      	ldr	r3, [sp, #4]
    c51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    c522:	4a0a      	ldr	r2, [pc, #40]	; (c54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    c524:	9b01      	ldr	r3, [sp, #4]
    c526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c52a:	f003 0301 	and.w	r3, r3, #1
    c52e:	2b00      	cmp	r3, #0
    c530:	d106      	bne.n	c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    c532:	4a05      	ldr	r2, [pc, #20]	; (c548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    c534:	9b01      	ldr	r3, [sp, #4]
    c536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d100      	bne.n	c540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c540:	bf00      	nop
    c542:	b003      	add	sp, #12
    c544:	f85d fb04 	ldr.w	pc, [sp], #4
    c548:	1fff8ee8 	.word	0x1fff8ee8
    c54c:	1fff8ee4 	.word	0x1fff8ee4

0000c550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c550:	b500      	push	{lr}
    c552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c554:	f7f4 fb00 	bl	b58 <Sys_GetCoreID>
    c558:	4603      	mov	r3, r0
    c55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    c55c:	4a10      	ldr	r2, [pc, #64]	; (c5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c55e:	9b01      	ldr	r3, [sp, #4]
    c560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c564:	2b00      	cmp	r3, #0
    c566:	d10d      	bne.n	c584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c568:	f7f4 fa14 	bl	994 <Adc_schm_read_msr>
    c56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c56e:	9b00      	ldr	r3, [sp, #0]
    c570:	f003 0301 	and.w	r3, r3, #1
    c574:	2b00      	cmp	r3, #0
    c576:	d100      	bne.n	c57a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    c57a:	490a      	ldr	r1, [pc, #40]	; (c5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    c57c:	9b01      	ldr	r3, [sp, #4]
    c57e:	9a00      	ldr	r2, [sp, #0]
    c580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    c584:	4a06      	ldr	r2, [pc, #24]	; (c5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c586:	9b01      	ldr	r3, [sp, #4]
    c588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c58c:	1c5a      	adds	r2, r3, #1
    c58e:	4904      	ldr	r1, [pc, #16]	; (c5a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    c590:	9b01      	ldr	r3, [sp, #4]
    c592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c596:	bf00      	nop
    c598:	b003      	add	sp, #12
    c59a:	f85d fb04 	ldr.w	pc, [sp], #4
    c59e:	bf00      	nop
    c5a0:	1fff8ef0 	.word	0x1fff8ef0
    c5a4:	1fff8eec 	.word	0x1fff8eec

0000c5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    c5a8:	b500      	push	{lr}
    c5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5ac:	f7f4 fad4 	bl	b58 <Sys_GetCoreID>
    c5b0:	4603      	mov	r3, r0
    c5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    c5b4:	4a0d      	ldr	r2, [pc, #52]	; (c5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c5b6:	9b01      	ldr	r3, [sp, #4]
    c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5bc:	1e5a      	subs	r2, r3, #1
    c5be:	490b      	ldr	r1, [pc, #44]	; (c5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c5c0:	9b01      	ldr	r3, [sp, #4]
    c5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    c5c6:	4a0a      	ldr	r2, [pc, #40]	; (c5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    c5c8:	9b01      	ldr	r3, [sp, #4]
    c5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5ce:	f003 0301 	and.w	r3, r3, #1
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d106      	bne.n	c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    c5d6:	4a05      	ldr	r2, [pc, #20]	; (c5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    c5d8:	9b01      	ldr	r3, [sp, #4]
    c5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5de:	2b00      	cmp	r3, #0
    c5e0:	d100      	bne.n	c5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c5e4:	bf00      	nop
    c5e6:	b003      	add	sp, #12
    c5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    c5ec:	1fff8ef0 	.word	0x1fff8ef0
    c5f0:	1fff8eec 	.word	0x1fff8eec

0000c5f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c5f4:	b500      	push	{lr}
    c5f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5f8:	f7f4 faae 	bl	b58 <Sys_GetCoreID>
    c5fc:	4603      	mov	r3, r0
    c5fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    c600:	4a10      	ldr	r2, [pc, #64]	; (c644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c602:	9b01      	ldr	r3, [sp, #4]
    c604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c608:	2b00      	cmp	r3, #0
    c60a:	d10d      	bne.n	c628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c60c:	f7f4 f9c2 	bl	994 <Adc_schm_read_msr>
    c610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c612:	9b00      	ldr	r3, [sp, #0]
    c614:	f003 0301 	and.w	r3, r3, #1
    c618:	2b00      	cmp	r3, #0
    c61a:	d100      	bne.n	c61e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c61c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    c61e:	490a      	ldr	r1, [pc, #40]	; (c648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    c620:	9b01      	ldr	r3, [sp, #4]
    c622:	9a00      	ldr	r2, [sp, #0]
    c624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    c628:	4a06      	ldr	r2, [pc, #24]	; (c644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c62a:	9b01      	ldr	r3, [sp, #4]
    c62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c630:	1c5a      	adds	r2, r3, #1
    c632:	4904      	ldr	r1, [pc, #16]	; (c644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    c634:	9b01      	ldr	r3, [sp, #4]
    c636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c63a:	bf00      	nop
    c63c:	b003      	add	sp, #12
    c63e:	f85d fb04 	ldr.w	pc, [sp], #4
    c642:	bf00      	nop
    c644:	1fff8ef8 	.word	0x1fff8ef8
    c648:	1fff8ef4 	.word	0x1fff8ef4

0000c64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    c64c:	b500      	push	{lr}
    c64e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c650:	f7f4 fa82 	bl	b58 <Sys_GetCoreID>
    c654:	4603      	mov	r3, r0
    c656:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    c658:	4a0d      	ldr	r2, [pc, #52]	; (c690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c65a:	9b01      	ldr	r3, [sp, #4]
    c65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c660:	1e5a      	subs	r2, r3, #1
    c662:	490b      	ldr	r1, [pc, #44]	; (c690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c664:	9b01      	ldr	r3, [sp, #4]
    c666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    c66a:	4a0a      	ldr	r2, [pc, #40]	; (c694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    c66c:	9b01      	ldr	r3, [sp, #4]
    c66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c672:	f003 0301 	and.w	r3, r3, #1
    c676:	2b00      	cmp	r3, #0
    c678:	d106      	bne.n	c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    c67a:	4a05      	ldr	r2, [pc, #20]	; (c690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    c67c:	9b01      	ldr	r3, [sp, #4]
    c67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c682:	2b00      	cmp	r3, #0
    c684:	d100      	bne.n	c688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c688:	bf00      	nop
    c68a:	b003      	add	sp, #12
    c68c:	f85d fb04 	ldr.w	pc, [sp], #4
    c690:	1fff8ef8 	.word	0x1fff8ef8
    c694:	1fff8ef4 	.word	0x1fff8ef4

0000c698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c698:	b500      	push	{lr}
    c69a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c69c:	f7f4 fa5c 	bl	b58 <Sys_GetCoreID>
    c6a0:	4603      	mov	r3, r0
    c6a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    c6a4:	4a10      	ldr	r2, [pc, #64]	; (c6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c6a6:	9b01      	ldr	r3, [sp, #4]
    c6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d10d      	bne.n	c6cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6b0:	f7f4 f970 	bl	994 <Adc_schm_read_msr>
    c6b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c6b6:	9b00      	ldr	r3, [sp, #0]
    c6b8:	f003 0301 	and.w	r3, r3, #1
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d100      	bne.n	c6c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c6c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    c6c2:	490a      	ldr	r1, [pc, #40]	; (c6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    c6c4:	9b01      	ldr	r3, [sp, #4]
    c6c6:	9a00      	ldr	r2, [sp, #0]
    c6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    c6cc:	4a06      	ldr	r2, [pc, #24]	; (c6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c6ce:	9b01      	ldr	r3, [sp, #4]
    c6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6d4:	1c5a      	adds	r2, r3, #1
    c6d6:	4904      	ldr	r1, [pc, #16]	; (c6e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    c6d8:	9b01      	ldr	r3, [sp, #4]
    c6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6de:	bf00      	nop
    c6e0:	b003      	add	sp, #12
    c6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    c6e6:	bf00      	nop
    c6e8:	1fff8f00 	.word	0x1fff8f00
    c6ec:	1fff8efc 	.word	0x1fff8efc

0000c6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    c6f0:	b500      	push	{lr}
    c6f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6f4:	f7f4 fa30 	bl	b58 <Sys_GetCoreID>
    c6f8:	4603      	mov	r3, r0
    c6fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    c6fc:	4a0d      	ldr	r2, [pc, #52]	; (c734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c6fe:	9b01      	ldr	r3, [sp, #4]
    c700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c704:	1e5a      	subs	r2, r3, #1
    c706:	490b      	ldr	r1, [pc, #44]	; (c734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c708:	9b01      	ldr	r3, [sp, #4]
    c70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    c70e:	4a0a      	ldr	r2, [pc, #40]	; (c738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c716:	f003 0301 	and.w	r3, r3, #1
    c71a:	2b00      	cmp	r3, #0
    c71c:	d106      	bne.n	c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    c71e:	4a05      	ldr	r2, [pc, #20]	; (c734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    c720:	9b01      	ldr	r3, [sp, #4]
    c722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c726:	2b00      	cmp	r3, #0
    c728:	d100      	bne.n	c72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c72a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c72c:	bf00      	nop
    c72e:	b003      	add	sp, #12
    c730:	f85d fb04 	ldr.w	pc, [sp], #4
    c734:	1fff8f00 	.word	0x1fff8f00
    c738:	1fff8efc 	.word	0x1fff8efc

0000c73c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c73c:	b500      	push	{lr}
    c73e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c740:	f7f4 fa0a 	bl	b58 <Sys_GetCoreID>
    c744:	4603      	mov	r3, r0
    c746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    c748:	4a10      	ldr	r2, [pc, #64]	; (c78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c74a:	9b01      	ldr	r3, [sp, #4]
    c74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c750:	2b00      	cmp	r3, #0
    c752:	d10d      	bne.n	c770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c754:	f7f4 f91e 	bl	994 <Adc_schm_read_msr>
    c758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c75a:	9b00      	ldr	r3, [sp, #0]
    c75c:	f003 0301 	and.w	r3, r3, #1
    c760:	2b00      	cmp	r3, #0
    c762:	d100      	bne.n	c766 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    c766:	490a      	ldr	r1, [pc, #40]	; (c790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    c768:	9b01      	ldr	r3, [sp, #4]
    c76a:	9a00      	ldr	r2, [sp, #0]
    c76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    c770:	4a06      	ldr	r2, [pc, #24]	; (c78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c772:	9b01      	ldr	r3, [sp, #4]
    c774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c778:	1c5a      	adds	r2, r3, #1
    c77a:	4904      	ldr	r1, [pc, #16]	; (c78c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    c77c:	9b01      	ldr	r3, [sp, #4]
    c77e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c782:	bf00      	nop
    c784:	b003      	add	sp, #12
    c786:	f85d fb04 	ldr.w	pc, [sp], #4
    c78a:	bf00      	nop
    c78c:	1fff8f08 	.word	0x1fff8f08
    c790:	1fff8f04 	.word	0x1fff8f04

0000c794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    c794:	b500      	push	{lr}
    c796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c798:	f7f4 f9de 	bl	b58 <Sys_GetCoreID>
    c79c:	4603      	mov	r3, r0
    c79e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    c7a0:	4a0d      	ldr	r2, [pc, #52]	; (c7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c7a2:	9b01      	ldr	r3, [sp, #4]
    c7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7a8:	1e5a      	subs	r2, r3, #1
    c7aa:	490b      	ldr	r1, [pc, #44]	; (c7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c7ac:	9b01      	ldr	r3, [sp, #4]
    c7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    c7b2:	4a0a      	ldr	r2, [pc, #40]	; (c7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ba:	f003 0301 	and.w	r3, r3, #1
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d106      	bne.n	c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    c7c2:	4a05      	ldr	r2, [pc, #20]	; (c7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    c7c4:	9b01      	ldr	r3, [sp, #4]
    c7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d100      	bne.n	c7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c7ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c7d0:	bf00      	nop
    c7d2:	b003      	add	sp, #12
    c7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d8:	1fff8f08 	.word	0x1fff8f08
    c7dc:	1fff8f04 	.word	0x1fff8f04

0000c7e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c7e0:	b500      	push	{lr}
    c7e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7e4:	f7f4 f9b8 	bl	b58 <Sys_GetCoreID>
    c7e8:	4603      	mov	r3, r0
    c7ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    c7ec:	4a10      	ldr	r2, [pc, #64]	; (c830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c7ee:	9b01      	ldr	r3, [sp, #4]
    c7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d10d      	bne.n	c814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7f8:	f7f4 f8cc 	bl	994 <Adc_schm_read_msr>
    c7fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7fe:	9b00      	ldr	r3, [sp, #0]
    c800:	f003 0301 	and.w	r3, r3, #1
    c804:	2b00      	cmp	r3, #0
    c806:	d100      	bne.n	c80a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    c80a:	490a      	ldr	r1, [pc, #40]	; (c834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    c80c:	9b01      	ldr	r3, [sp, #4]
    c80e:	9a00      	ldr	r2, [sp, #0]
    c810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    c814:	4a06      	ldr	r2, [pc, #24]	; (c830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c816:	9b01      	ldr	r3, [sp, #4]
    c818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c81c:	1c5a      	adds	r2, r3, #1
    c81e:	4904      	ldr	r1, [pc, #16]	; (c830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    c820:	9b01      	ldr	r3, [sp, #4]
    c822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c826:	bf00      	nop
    c828:	b003      	add	sp, #12
    c82a:	f85d fb04 	ldr.w	pc, [sp], #4
    c82e:	bf00      	nop
    c830:	1fff8f10 	.word	0x1fff8f10
    c834:	1fff8f0c 	.word	0x1fff8f0c

0000c838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    c838:	b500      	push	{lr}
    c83a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c83c:	f7f4 f98c 	bl	b58 <Sys_GetCoreID>
    c840:	4603      	mov	r3, r0
    c842:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    c844:	4a0d      	ldr	r2, [pc, #52]	; (c87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c846:	9b01      	ldr	r3, [sp, #4]
    c848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c84c:	1e5a      	subs	r2, r3, #1
    c84e:	490b      	ldr	r1, [pc, #44]	; (c87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c850:	9b01      	ldr	r3, [sp, #4]
    c852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    c856:	4a0a      	ldr	r2, [pc, #40]	; (c880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    c858:	9b01      	ldr	r3, [sp, #4]
    c85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c85e:	f003 0301 	and.w	r3, r3, #1
    c862:	2b00      	cmp	r3, #0
    c864:	d106      	bne.n	c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    c866:	4a05      	ldr	r2, [pc, #20]	; (c87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    c868:	9b01      	ldr	r3, [sp, #4]
    c86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c86e:	2b00      	cmp	r3, #0
    c870:	d100      	bne.n	c874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c874:	bf00      	nop
    c876:	b003      	add	sp, #12
    c878:	f85d fb04 	ldr.w	pc, [sp], #4
    c87c:	1fff8f10 	.word	0x1fff8f10
    c880:	1fff8f0c 	.word	0x1fff8f0c

0000c884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c884:	b500      	push	{lr}
    c886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c888:	f7f4 f966 	bl	b58 <Sys_GetCoreID>
    c88c:	4603      	mov	r3, r0
    c88e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    c890:	4a10      	ldr	r2, [pc, #64]	; (c8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c892:	9b01      	ldr	r3, [sp, #4]
    c894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c898:	2b00      	cmp	r3, #0
    c89a:	d10d      	bne.n	c8b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c89c:	f7f4 f87a 	bl	994 <Adc_schm_read_msr>
    c8a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c8a2:	9b00      	ldr	r3, [sp, #0]
    c8a4:	f003 0301 	and.w	r3, r3, #1
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d100      	bne.n	c8ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    c8ae:	490a      	ldr	r1, [pc, #40]	; (c8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    c8b0:	9b01      	ldr	r3, [sp, #4]
    c8b2:	9a00      	ldr	r2, [sp, #0]
    c8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    c8b8:	4a06      	ldr	r2, [pc, #24]	; (c8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c8ba:	9b01      	ldr	r3, [sp, #4]
    c8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8c0:	1c5a      	adds	r2, r3, #1
    c8c2:	4904      	ldr	r1, [pc, #16]	; (c8d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    c8c4:	9b01      	ldr	r3, [sp, #4]
    c8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c8ca:	bf00      	nop
    c8cc:	b003      	add	sp, #12
    c8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    c8d2:	bf00      	nop
    c8d4:	1fff8f18 	.word	0x1fff8f18
    c8d8:	1fff8f14 	.word	0x1fff8f14

0000c8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    c8dc:	b500      	push	{lr}
    c8de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8e0:	f7f4 f93a 	bl	b58 <Sys_GetCoreID>
    c8e4:	4603      	mov	r3, r0
    c8e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    c8e8:	4a0d      	ldr	r2, [pc, #52]	; (c920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c8ea:	9b01      	ldr	r3, [sp, #4]
    c8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8f0:	1e5a      	subs	r2, r3, #1
    c8f2:	490b      	ldr	r1, [pc, #44]	; (c920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c8f4:	9b01      	ldr	r3, [sp, #4]
    c8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    c8fa:	4a0a      	ldr	r2, [pc, #40]	; (c924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c902:	f003 0301 	and.w	r3, r3, #1
    c906:	2b00      	cmp	r3, #0
    c908:	d106      	bne.n	c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    c90a:	4a05      	ldr	r2, [pc, #20]	; (c920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    c90c:	9b01      	ldr	r3, [sp, #4]
    c90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c912:	2b00      	cmp	r3, #0
    c914:	d100      	bne.n	c918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c918:	bf00      	nop
    c91a:	b003      	add	sp, #12
    c91c:	f85d fb04 	ldr.w	pc, [sp], #4
    c920:	1fff8f18 	.word	0x1fff8f18
    c924:	1fff8f14 	.word	0x1fff8f14

0000c928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c928:	b500      	push	{lr}
    c92a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c92c:	f7f4 f914 	bl	b58 <Sys_GetCoreID>
    c930:	4603      	mov	r3, r0
    c932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    c934:	4a10      	ldr	r2, [pc, #64]	; (c978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c936:	9b01      	ldr	r3, [sp, #4]
    c938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c93c:	2b00      	cmp	r3, #0
    c93e:	d10d      	bne.n	c95c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c940:	f7f4 f828 	bl	994 <Adc_schm_read_msr>
    c944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c946:	9b00      	ldr	r3, [sp, #0]
    c948:	f003 0301 	and.w	r3, r3, #1
    c94c:	2b00      	cmp	r3, #0
    c94e:	d100      	bne.n	c952 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    c952:	490a      	ldr	r1, [pc, #40]	; (c97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    c954:	9b01      	ldr	r3, [sp, #4]
    c956:	9a00      	ldr	r2, [sp, #0]
    c958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    c95c:	4a06      	ldr	r2, [pc, #24]	; (c978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c95e:	9b01      	ldr	r3, [sp, #4]
    c960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c964:	1c5a      	adds	r2, r3, #1
    c966:	4904      	ldr	r1, [pc, #16]	; (c978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    c968:	9b01      	ldr	r3, [sp, #4]
    c96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c96e:	bf00      	nop
    c970:	b003      	add	sp, #12
    c972:	f85d fb04 	ldr.w	pc, [sp], #4
    c976:	bf00      	nop
    c978:	1fff8f20 	.word	0x1fff8f20
    c97c:	1fff8f1c 	.word	0x1fff8f1c

0000c980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    c980:	b500      	push	{lr}
    c982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c984:	f7f4 f8e8 	bl	b58 <Sys_GetCoreID>
    c988:	4603      	mov	r3, r0
    c98a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    c98c:	4a0d      	ldr	r2, [pc, #52]	; (c9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c98e:	9b01      	ldr	r3, [sp, #4]
    c990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c994:	1e5a      	subs	r2, r3, #1
    c996:	490b      	ldr	r1, [pc, #44]	; (c9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c998:	9b01      	ldr	r3, [sp, #4]
    c99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    c99e:	4a0a      	ldr	r2, [pc, #40]	; (c9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9a6:	f003 0301 	and.w	r3, r3, #1
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d106      	bne.n	c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    c9ae:	4a05      	ldr	r2, [pc, #20]	; (c9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    c9b0:	9b01      	ldr	r3, [sp, #4]
    c9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d100      	bne.n	c9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c9ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c9bc:	bf00      	nop
    c9be:	b003      	add	sp, #12
    c9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c4:	1fff8f20 	.word	0x1fff8f20
    c9c8:	1fff8f1c 	.word	0x1fff8f1c

0000c9cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    c9cc:	b500      	push	{lr}
    c9ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9d0:	f7f4 f8c2 	bl	b58 <Sys_GetCoreID>
    c9d4:	4603      	mov	r3, r0
    c9d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    c9d8:	4a10      	ldr	r2, [pc, #64]	; (ca1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    c9da:	9b01      	ldr	r3, [sp, #4]
    c9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	d10d      	bne.n	ca00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9e4:	f7f3 ffd6 	bl	994 <Adc_schm_read_msr>
    c9e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9ea:	9b00      	ldr	r3, [sp, #0]
    c9ec:	f003 0301 	and.w	r3, r3, #1
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d100      	bne.n	c9f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    c9f6:	490a      	ldr	r1, [pc, #40]	; (ca20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    c9f8:	9b01      	ldr	r3, [sp, #4]
    c9fa:	9a00      	ldr	r2, [sp, #0]
    c9fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    ca00:	4a06      	ldr	r2, [pc, #24]	; (ca1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    ca02:	9b01      	ldr	r3, [sp, #4]
    ca04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca08:	1c5a      	adds	r2, r3, #1
    ca0a:	4904      	ldr	r1, [pc, #16]	; (ca1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    ca0c:	9b01      	ldr	r3, [sp, #4]
    ca0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca12:	bf00      	nop
    ca14:	b003      	add	sp, #12
    ca16:	f85d fb04 	ldr.w	pc, [sp], #4
    ca1a:	bf00      	nop
    ca1c:	1fff8f28 	.word	0x1fff8f28
    ca20:	1fff8f24 	.word	0x1fff8f24

0000ca24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    ca24:	b500      	push	{lr}
    ca26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca28:	f7f4 f896 	bl	b58 <Sys_GetCoreID>
    ca2c:	4603      	mov	r3, r0
    ca2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    ca30:	4a0d      	ldr	r2, [pc, #52]	; (ca68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ca32:	9b01      	ldr	r3, [sp, #4]
    ca34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca38:	1e5a      	subs	r2, r3, #1
    ca3a:	490b      	ldr	r1, [pc, #44]	; (ca68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ca3c:	9b01      	ldr	r3, [sp, #4]
    ca3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    ca42:	4a0a      	ldr	r2, [pc, #40]	; (ca6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    ca44:	9b01      	ldr	r3, [sp, #4]
    ca46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca4a:	f003 0301 	and.w	r3, r3, #1
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d106      	bne.n	ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    ca52:	4a05      	ldr	r2, [pc, #20]	; (ca68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    ca54:	9b01      	ldr	r3, [sp, #4]
    ca56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d100      	bne.n	ca60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca60:	bf00      	nop
    ca62:	b003      	add	sp, #12
    ca64:	f85d fb04 	ldr.w	pc, [sp], #4
    ca68:	1fff8f28 	.word	0x1fff8f28
    ca6c:	1fff8f24 	.word	0x1fff8f24

0000ca70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    ca70:	b500      	push	{lr}
    ca72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca74:	f7f4 f870 	bl	b58 <Sys_GetCoreID>
    ca78:	4603      	mov	r3, r0
    ca7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    ca7c:	4a10      	ldr	r2, [pc, #64]	; (cac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    ca7e:	9b01      	ldr	r3, [sp, #4]
    ca80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca84:	2b00      	cmp	r3, #0
    ca86:	d10d      	bne.n	caa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca88:	f7f3 ff84 	bl	994 <Adc_schm_read_msr>
    ca8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca8e:	9b00      	ldr	r3, [sp, #0]
    ca90:	f003 0301 	and.w	r3, r3, #1
    ca94:	2b00      	cmp	r3, #0
    ca96:	d100      	bne.n	ca9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    ca9a:	490a      	ldr	r1, [pc, #40]	; (cac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    ca9c:	9b01      	ldr	r3, [sp, #4]
    ca9e:	9a00      	ldr	r2, [sp, #0]
    caa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    caa4:	4a06      	ldr	r2, [pc, #24]	; (cac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    caa6:	9b01      	ldr	r3, [sp, #4]
    caa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caac:	1c5a      	adds	r2, r3, #1
    caae:	4904      	ldr	r1, [pc, #16]	; (cac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    cab0:	9b01      	ldr	r3, [sp, #4]
    cab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cab6:	bf00      	nop
    cab8:	b003      	add	sp, #12
    caba:	f85d fb04 	ldr.w	pc, [sp], #4
    cabe:	bf00      	nop
    cac0:	1fff8f30 	.word	0x1fff8f30
    cac4:	1fff8f2c 	.word	0x1fff8f2c

0000cac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    cac8:	b500      	push	{lr}
    caca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cacc:	f7f4 f844 	bl	b58 <Sys_GetCoreID>
    cad0:	4603      	mov	r3, r0
    cad2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    cad4:	4a0d      	ldr	r2, [pc, #52]	; (cb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cad6:	9b01      	ldr	r3, [sp, #4]
    cad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cadc:	1e5a      	subs	r2, r3, #1
    cade:	490b      	ldr	r1, [pc, #44]	; (cb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    cae0:	9b01      	ldr	r3, [sp, #4]
    cae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    cae6:	4a0a      	ldr	r2, [pc, #40]	; (cb10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    cae8:	9b01      	ldr	r3, [sp, #4]
    caea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caee:	f003 0301 	and.w	r3, r3, #1
    caf2:	2b00      	cmp	r3, #0
    caf4:	d106      	bne.n	cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    caf6:	4a05      	ldr	r2, [pc, #20]	; (cb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    caf8:	9b01      	ldr	r3, [sp, #4]
    cafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d100      	bne.n	cb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb04:	bf00      	nop
    cb06:	b003      	add	sp, #12
    cb08:	f85d fb04 	ldr.w	pc, [sp], #4
    cb0c:	1fff8f30 	.word	0x1fff8f30
    cb10:	1fff8f2c 	.word	0x1fff8f2c

0000cb14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cb14:	b500      	push	{lr}
    cb16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb18:	f7f4 f81e 	bl	b58 <Sys_GetCoreID>
    cb1c:	4603      	mov	r3, r0
    cb1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    cb20:	4a10      	ldr	r2, [pc, #64]	; (cb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cb22:	9b01      	ldr	r3, [sp, #4]
    cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d10d      	bne.n	cb48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb2c:	f7f3 ff32 	bl	994 <Adc_schm_read_msr>
    cb30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb32:	9b00      	ldr	r3, [sp, #0]
    cb34:	f003 0301 	and.w	r3, r3, #1
    cb38:	2b00      	cmp	r3, #0
    cb3a:	d100      	bne.n	cb3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    cb3e:	490a      	ldr	r1, [pc, #40]	; (cb68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    cb40:	9b01      	ldr	r3, [sp, #4]
    cb42:	9a00      	ldr	r2, [sp, #0]
    cb44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    cb48:	4a06      	ldr	r2, [pc, #24]	; (cb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cb4a:	9b01      	ldr	r3, [sp, #4]
    cb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb50:	1c5a      	adds	r2, r3, #1
    cb52:	4904      	ldr	r1, [pc, #16]	; (cb64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    cb54:	9b01      	ldr	r3, [sp, #4]
    cb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb5a:	bf00      	nop
    cb5c:	b003      	add	sp, #12
    cb5e:	f85d fb04 	ldr.w	pc, [sp], #4
    cb62:	bf00      	nop
    cb64:	1fff8f38 	.word	0x1fff8f38
    cb68:	1fff8f34 	.word	0x1fff8f34

0000cb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    cb6c:	b500      	push	{lr}
    cb6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb70:	f7f3 fff2 	bl	b58 <Sys_GetCoreID>
    cb74:	4603      	mov	r3, r0
    cb76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    cb78:	4a0d      	ldr	r2, [pc, #52]	; (cbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cb7a:	9b01      	ldr	r3, [sp, #4]
    cb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb80:	1e5a      	subs	r2, r3, #1
    cb82:	490b      	ldr	r1, [pc, #44]	; (cbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cb84:	9b01      	ldr	r3, [sp, #4]
    cb86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    cb8a:	4a0a      	ldr	r2, [pc, #40]	; (cbb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb92:	f003 0301 	and.w	r3, r3, #1
    cb96:	2b00      	cmp	r3, #0
    cb98:	d106      	bne.n	cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    cb9a:	4a05      	ldr	r2, [pc, #20]	; (cbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    cb9c:	9b01      	ldr	r3, [sp, #4]
    cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cba2:	2b00      	cmp	r3, #0
    cba4:	d100      	bne.n	cba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cba8:	bf00      	nop
    cbaa:	b003      	add	sp, #12
    cbac:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb0:	1fff8f38 	.word	0x1fff8f38
    cbb4:	1fff8f34 	.word	0x1fff8f34

0000cbb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cbb8:	b500      	push	{lr}
    cbba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbbc:	f7f3 ffcc 	bl	b58 <Sys_GetCoreID>
    cbc0:	4603      	mov	r3, r0
    cbc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    cbc4:	4a10      	ldr	r2, [pc, #64]	; (cc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cbc6:	9b01      	ldr	r3, [sp, #4]
    cbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d10d      	bne.n	cbec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbd0:	f7f3 fee0 	bl	994 <Adc_schm_read_msr>
    cbd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbd6:	9b00      	ldr	r3, [sp, #0]
    cbd8:	f003 0301 	and.w	r3, r3, #1
    cbdc:	2b00      	cmp	r3, #0
    cbde:	d100      	bne.n	cbe2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    cbe2:	490a      	ldr	r1, [pc, #40]	; (cc0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    cbe4:	9b01      	ldr	r3, [sp, #4]
    cbe6:	9a00      	ldr	r2, [sp, #0]
    cbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    cbec:	4a06      	ldr	r2, [pc, #24]	; (cc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cbee:	9b01      	ldr	r3, [sp, #4]
    cbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbf4:	1c5a      	adds	r2, r3, #1
    cbf6:	4904      	ldr	r1, [pc, #16]	; (cc08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    cbf8:	9b01      	ldr	r3, [sp, #4]
    cbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbfe:	bf00      	nop
    cc00:	b003      	add	sp, #12
    cc02:	f85d fb04 	ldr.w	pc, [sp], #4
    cc06:	bf00      	nop
    cc08:	1fff8f40 	.word	0x1fff8f40
    cc0c:	1fff8f3c 	.word	0x1fff8f3c

0000cc10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    cc10:	b500      	push	{lr}
    cc12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc14:	f7f3 ffa0 	bl	b58 <Sys_GetCoreID>
    cc18:	4603      	mov	r3, r0
    cc1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    cc1c:	4a0d      	ldr	r2, [pc, #52]	; (cc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cc1e:	9b01      	ldr	r3, [sp, #4]
    cc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc24:	1e5a      	subs	r2, r3, #1
    cc26:	490b      	ldr	r1, [pc, #44]	; (cc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cc28:	9b01      	ldr	r3, [sp, #4]
    cc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    cc2e:	4a0a      	ldr	r2, [pc, #40]	; (cc58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    cc30:	9b01      	ldr	r3, [sp, #4]
    cc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc36:	f003 0301 	and.w	r3, r3, #1
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	d106      	bne.n	cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    cc3e:	4a05      	ldr	r2, [pc, #20]	; (cc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    cc40:	9b01      	ldr	r3, [sp, #4]
    cc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc46:	2b00      	cmp	r3, #0
    cc48:	d100      	bne.n	cc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc4c:	bf00      	nop
    cc4e:	b003      	add	sp, #12
    cc50:	f85d fb04 	ldr.w	pc, [sp], #4
    cc54:	1fff8f40 	.word	0x1fff8f40
    cc58:	1fff8f3c 	.word	0x1fff8f3c

0000cc5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    cc5c:	b500      	push	{lr}
    cc5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc60:	f7f3 ff7a 	bl	b58 <Sys_GetCoreID>
    cc64:	4603      	mov	r3, r0
    cc66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    cc68:	4a10      	ldr	r2, [pc, #64]	; (ccac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cc6a:	9b01      	ldr	r3, [sp, #4]
    cc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc70:	2b00      	cmp	r3, #0
    cc72:	d10d      	bne.n	cc90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc74:	f7f3 fe8e 	bl	994 <Adc_schm_read_msr>
    cc78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc7a:	9b00      	ldr	r3, [sp, #0]
    cc7c:	f003 0301 	and.w	r3, r3, #1
    cc80:	2b00      	cmp	r3, #0
    cc82:	d100      	bne.n	cc86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    cc86:	490a      	ldr	r1, [pc, #40]	; (ccb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    cc88:	9b01      	ldr	r3, [sp, #4]
    cc8a:	9a00      	ldr	r2, [sp, #0]
    cc8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    cc90:	4a06      	ldr	r2, [pc, #24]	; (ccac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cc92:	9b01      	ldr	r3, [sp, #4]
    cc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc98:	1c5a      	adds	r2, r3, #1
    cc9a:	4904      	ldr	r1, [pc, #16]	; (ccac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    cc9c:	9b01      	ldr	r3, [sp, #4]
    cc9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cca2:	bf00      	nop
    cca4:	b003      	add	sp, #12
    cca6:	f85d fb04 	ldr.w	pc, [sp], #4
    ccaa:	bf00      	nop
    ccac:	1fff8f48 	.word	0x1fff8f48
    ccb0:	1fff8f44 	.word	0x1fff8f44

0000ccb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ccb4:	b500      	push	{lr}
    ccb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccb8:	f7f3 ff4e 	bl	b58 <Sys_GetCoreID>
    ccbc:	4603      	mov	r3, r0
    ccbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    ccc0:	4a0d      	ldr	r2, [pc, #52]	; (ccf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ccc2:	9b01      	ldr	r3, [sp, #4]
    ccc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccc8:	1e5a      	subs	r2, r3, #1
    ccca:	490b      	ldr	r1, [pc, #44]	; (ccf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cccc:	9b01      	ldr	r3, [sp, #4]
    ccce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    ccd2:	4a0a      	ldr	r2, [pc, #40]	; (ccfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccda:	f003 0301 	and.w	r3, r3, #1
    ccde:	2b00      	cmp	r3, #0
    cce0:	d106      	bne.n	ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    cce2:	4a05      	ldr	r2, [pc, #20]	; (ccf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    cce4:	9b01      	ldr	r3, [sp, #4]
    cce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccea:	2b00      	cmp	r3, #0
    ccec:	d100      	bne.n	ccf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ccf0:	bf00      	nop
    ccf2:	b003      	add	sp, #12
    ccf4:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf8:	1fff8f48 	.word	0x1fff8f48
    ccfc:	1fff8f44 	.word	0x1fff8f44

0000cd00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cd00:	b500      	push	{lr}
    cd02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd04:	f7f3 ff28 	bl	b58 <Sys_GetCoreID>
    cd08:	4603      	mov	r3, r0
    cd0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
    cd0c:	4a10      	ldr	r2, [pc, #64]	; (cd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cd0e:	9b01      	ldr	r3, [sp, #4]
    cd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd14:	2b00      	cmp	r3, #0
    cd16:	d10d      	bne.n	cd34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd18:	f7f3 fe3c 	bl	994 <Adc_schm_read_msr>
    cd1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd1e:	9b00      	ldr	r3, [sp, #0]
    cd20:	f003 0301 	and.w	r3, r3, #1
    cd24:	2b00      	cmp	r3, #0
    cd26:	d100      	bne.n	cd2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
    cd2a:	490a      	ldr	r1, [pc, #40]	; (cd54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
    cd2c:	9b01      	ldr	r3, [sp, #4]
    cd2e:	9a00      	ldr	r2, [sp, #0]
    cd30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
    cd34:	4a06      	ldr	r2, [pc, #24]	; (cd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cd36:	9b01      	ldr	r3, [sp, #4]
    cd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd3c:	1c5a      	adds	r2, r3, #1
    cd3e:	4904      	ldr	r1, [pc, #16]	; (cd50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
    cd40:	9b01      	ldr	r3, [sp, #4]
    cd42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd46:	bf00      	nop
    cd48:	b003      	add	sp, #12
    cd4a:	f85d fb04 	ldr.w	pc, [sp], #4
    cd4e:	bf00      	nop
    cd50:	1fff8f50 	.word	0x1fff8f50
    cd54:	1fff8f4c 	.word	0x1fff8f4c

0000cd58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    cd58:	b500      	push	{lr}
    cd5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd5c:	f7f3 fefc 	bl	b58 <Sys_GetCoreID>
    cd60:	4603      	mov	r3, r0
    cd62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
    cd64:	4a0d      	ldr	r2, [pc, #52]	; (cd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cd66:	9b01      	ldr	r3, [sp, #4]
    cd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd6c:	1e5a      	subs	r2, r3, #1
    cd6e:	490b      	ldr	r1, [pc, #44]	; (cd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cd70:	9b01      	ldr	r3, [sp, #4]
    cd72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
    cd76:	4a0a      	ldr	r2, [pc, #40]	; (cda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
    cd78:	9b01      	ldr	r3, [sp, #4]
    cd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd7e:	f003 0301 	and.w	r3, r3, #1
    cd82:	2b00      	cmp	r3, #0
    cd84:	d106      	bne.n	cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    cd86:	4a05      	ldr	r2, [pc, #20]	; (cd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
    cd88:	9b01      	ldr	r3, [sp, #4]
    cd8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d100      	bne.n	cd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd94:	bf00      	nop
    cd96:	b003      	add	sp, #12
    cd98:	f85d fb04 	ldr.w	pc, [sp], #4
    cd9c:	1fff8f50 	.word	0x1fff8f50
    cda0:	1fff8f4c 	.word	0x1fff8f4c

0000cda4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cda4:	b500      	push	{lr}
    cda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda8:	f7f3 fed6 	bl	b58 <Sys_GetCoreID>
    cdac:	4603      	mov	r3, r0
    cdae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
    cdb0:	4a10      	ldr	r2, [pc, #64]	; (cdf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cdb2:	9b01      	ldr	r3, [sp, #4]
    cdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d10d      	bne.n	cdd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdbc:	f7f3 fdea 	bl	994 <Adc_schm_read_msr>
    cdc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdc2:	9b00      	ldr	r3, [sp, #0]
    cdc4:	f003 0301 	and.w	r3, r3, #1
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d100      	bne.n	cdce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
    cdce:	490a      	ldr	r1, [pc, #40]	; (cdf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
    cdd0:	9b01      	ldr	r3, [sp, #4]
    cdd2:	9a00      	ldr	r2, [sp, #0]
    cdd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
    cdd8:	4a06      	ldr	r2, [pc, #24]	; (cdf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cdda:	9b01      	ldr	r3, [sp, #4]
    cddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cde0:	1c5a      	adds	r2, r3, #1
    cde2:	4904      	ldr	r1, [pc, #16]	; (cdf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
    cde4:	9b01      	ldr	r3, [sp, #4]
    cde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cdea:	bf00      	nop
    cdec:	b003      	add	sp, #12
    cdee:	f85d fb04 	ldr.w	pc, [sp], #4
    cdf2:	bf00      	nop
    cdf4:	1fff8f58 	.word	0x1fff8f58
    cdf8:	1fff8f54 	.word	0x1fff8f54

0000cdfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
    cdfc:	b500      	push	{lr}
    cdfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce00:	f7f3 feaa 	bl	b58 <Sys_GetCoreID>
    ce04:	4603      	mov	r3, r0
    ce06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
    ce08:	4a0d      	ldr	r2, [pc, #52]	; (ce40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ce0a:	9b01      	ldr	r3, [sp, #4]
    ce0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce10:	1e5a      	subs	r2, r3, #1
    ce12:	490b      	ldr	r1, [pc, #44]	; (ce40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ce14:	9b01      	ldr	r3, [sp, #4]
    ce16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
    ce1a:	4a0a      	ldr	r2, [pc, #40]	; (ce44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
    ce1c:	9b01      	ldr	r3, [sp, #4]
    ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce22:	f003 0301 	and.w	r3, r3, #1
    ce26:	2b00      	cmp	r3, #0
    ce28:	d106      	bne.n	ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    ce2a:	4a05      	ldr	r2, [pc, #20]	; (ce40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
    ce2c:	9b01      	ldr	r3, [sp, #4]
    ce2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce32:	2b00      	cmp	r3, #0
    ce34:	d100      	bne.n	ce38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce38:	bf00      	nop
    ce3a:	b003      	add	sp, #12
    ce3c:	f85d fb04 	ldr.w	pc, [sp], #4
    ce40:	1fff8f58 	.word	0x1fff8f58
    ce44:	1fff8f54 	.word	0x1fff8f54

0000ce48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    ce48:	b500      	push	{lr}
    ce4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce4c:	f7f3 fe84 	bl	b58 <Sys_GetCoreID>
    ce50:	4603      	mov	r3, r0
    ce52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
    ce54:	4a10      	ldr	r2, [pc, #64]	; (ce98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ce56:	9b01      	ldr	r3, [sp, #4]
    ce58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d10d      	bne.n	ce7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce60:	f7f3 fd98 	bl	994 <Adc_schm_read_msr>
    ce64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce66:	9b00      	ldr	r3, [sp, #0]
    ce68:	f003 0301 	and.w	r3, r3, #1
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d100      	bne.n	ce72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
    ce72:	490a      	ldr	r1, [pc, #40]	; (ce9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
    ce74:	9b01      	ldr	r3, [sp, #4]
    ce76:	9a00      	ldr	r2, [sp, #0]
    ce78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
    ce7c:	4a06      	ldr	r2, [pc, #24]	; (ce98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ce7e:	9b01      	ldr	r3, [sp, #4]
    ce80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce84:	1c5a      	adds	r2, r3, #1
    ce86:	4904      	ldr	r1, [pc, #16]	; (ce98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
    ce88:	9b01      	ldr	r3, [sp, #4]
    ce8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce8e:	bf00      	nop
    ce90:	b003      	add	sp, #12
    ce92:	f85d fb04 	ldr.w	pc, [sp], #4
    ce96:	bf00      	nop
    ce98:	1fff8f60 	.word	0x1fff8f60
    ce9c:	1fff8f5c 	.word	0x1fff8f5c

0000cea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
    cea0:	b500      	push	{lr}
    cea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cea4:	f7f3 fe58 	bl	b58 <Sys_GetCoreID>
    cea8:	4603      	mov	r3, r0
    ceaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
    ceac:	4a0d      	ldr	r2, [pc, #52]	; (cee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    ceae:	9b01      	ldr	r3, [sp, #4]
    ceb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb4:	1e5a      	subs	r2, r3, #1
    ceb6:	490b      	ldr	r1, [pc, #44]	; (cee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    ceb8:	9b01      	ldr	r3, [sp, #4]
    ceba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
    cebe:	4a0a      	ldr	r2, [pc, #40]	; (cee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec6:	f003 0301 	and.w	r3, r3, #1
    ceca:	2b00      	cmp	r3, #0
    cecc:	d106      	bne.n	cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    cece:	4a05      	ldr	r2, [pc, #20]	; (cee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
    ced0:	9b01      	ldr	r3, [sp, #4]
    ced2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ced6:	2b00      	cmp	r3, #0
    ced8:	d100      	bne.n	cedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ceda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cedc:	bf00      	nop
    cede:	b003      	add	sp, #12
    cee0:	f85d fb04 	ldr.w	pc, [sp], #4
    cee4:	1fff8f60 	.word	0x1fff8f60
    cee8:	1fff8f5c 	.word	0x1fff8f5c

0000ceec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    ceec:	b500      	push	{lr}
    ceee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cef0:	f7f3 fe32 	bl	b58 <Sys_GetCoreID>
    cef4:	4603      	mov	r3, r0
    cef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
    cef8:	4a10      	ldr	r2, [pc, #64]	; (cf3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cefa:	9b01      	ldr	r3, [sp, #4]
    cefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf00:	2b00      	cmp	r3, #0
    cf02:	d10d      	bne.n	cf20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf04:	f7f3 fd46 	bl	994 <Adc_schm_read_msr>
    cf08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf0a:	9b00      	ldr	r3, [sp, #0]
    cf0c:	f003 0301 	and.w	r3, r3, #1
    cf10:	2b00      	cmp	r3, #0
    cf12:	d100      	bne.n	cf16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
    cf16:	490a      	ldr	r1, [pc, #40]	; (cf40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
    cf18:	9b01      	ldr	r3, [sp, #4]
    cf1a:	9a00      	ldr	r2, [sp, #0]
    cf1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
    cf20:	4a06      	ldr	r2, [pc, #24]	; (cf3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cf22:	9b01      	ldr	r3, [sp, #4]
    cf24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf28:	1c5a      	adds	r2, r3, #1
    cf2a:	4904      	ldr	r1, [pc, #16]	; (cf3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
    cf2c:	9b01      	ldr	r3, [sp, #4]
    cf2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf32:	bf00      	nop
    cf34:	b003      	add	sp, #12
    cf36:	f85d fb04 	ldr.w	pc, [sp], #4
    cf3a:	bf00      	nop
    cf3c:	1fff8f68 	.word	0x1fff8f68
    cf40:	1fff8f64 	.word	0x1fff8f64

0000cf44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
    cf44:	b500      	push	{lr}
    cf46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf48:	f7f3 fe06 	bl	b58 <Sys_GetCoreID>
    cf4c:	4603      	mov	r3, r0
    cf4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
    cf50:	4a0d      	ldr	r2, [pc, #52]	; (cf88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cf52:	9b01      	ldr	r3, [sp, #4]
    cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf58:	1e5a      	subs	r2, r3, #1
    cf5a:	490b      	ldr	r1, [pc, #44]	; (cf88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cf5c:	9b01      	ldr	r3, [sp, #4]
    cf5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
    cf62:	4a0a      	ldr	r2, [pc, #40]	; (cf8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
    cf64:	9b01      	ldr	r3, [sp, #4]
    cf66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf6a:	f003 0301 	and.w	r3, r3, #1
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d106      	bne.n	cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    cf72:	4a05      	ldr	r2, [pc, #20]	; (cf88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
    cf74:	9b01      	ldr	r3, [sp, #4]
    cf76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf7a:	2b00      	cmp	r3, #0
    cf7c:	d100      	bne.n	cf80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf80:	bf00      	nop
    cf82:	b003      	add	sp, #12
    cf84:	f85d fb04 	ldr.w	pc, [sp], #4
    cf88:	1fff8f68 	.word	0x1fff8f68
    cf8c:	1fff8f64 	.word	0x1fff8f64

0000cf90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    cf90:	b500      	push	{lr}
    cf92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf94:	f7f3 fde0 	bl	b58 <Sys_GetCoreID>
    cf98:	4603      	mov	r3, r0
    cf9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
    cf9c:	4a10      	ldr	r2, [pc, #64]	; (cfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cf9e:	9b01      	ldr	r3, [sp, #4]
    cfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d10d      	bne.n	cfc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfa8:	f7f3 fcf4 	bl	994 <Adc_schm_read_msr>
    cfac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfae:	9b00      	ldr	r3, [sp, #0]
    cfb0:	f003 0301 	and.w	r3, r3, #1
    cfb4:	2b00      	cmp	r3, #0
    cfb6:	d100      	bne.n	cfba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
    cfba:	490a      	ldr	r1, [pc, #40]	; (cfe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
    cfbc:	9b01      	ldr	r3, [sp, #4]
    cfbe:	9a00      	ldr	r2, [sp, #0]
    cfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
    cfc4:	4a06      	ldr	r2, [pc, #24]	; (cfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cfc6:	9b01      	ldr	r3, [sp, #4]
    cfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfcc:	1c5a      	adds	r2, r3, #1
    cfce:	4904      	ldr	r1, [pc, #16]	; (cfe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
    cfd0:	9b01      	ldr	r3, [sp, #4]
    cfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfd6:	bf00      	nop
    cfd8:	b003      	add	sp, #12
    cfda:	f85d fb04 	ldr.w	pc, [sp], #4
    cfde:	bf00      	nop
    cfe0:	1fff8f70 	.word	0x1fff8f70
    cfe4:	1fff8f6c 	.word	0x1fff8f6c

0000cfe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
    cfe8:	b500      	push	{lr}
    cfea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfec:	f7f3 fdb4 	bl	b58 <Sys_GetCoreID>
    cff0:	4603      	mov	r3, r0
    cff2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
    cff4:	4a0d      	ldr	r2, [pc, #52]	; (d02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    cff6:	9b01      	ldr	r3, [sp, #4]
    cff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cffc:	1e5a      	subs	r2, r3, #1
    cffe:	490b      	ldr	r1, [pc, #44]	; (d02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d000:	9b01      	ldr	r3, [sp, #4]
    d002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
    d006:	4a0a      	ldr	r2, [pc, #40]	; (d030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
    d008:	9b01      	ldr	r3, [sp, #4]
    d00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d00e:	f003 0301 	and.w	r3, r3, #1
    d012:	2b00      	cmp	r3, #0
    d014:	d106      	bne.n	d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    d016:	4a05      	ldr	r2, [pc, #20]	; (d02c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
    d018:	9b01      	ldr	r3, [sp, #4]
    d01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d01e:	2b00      	cmp	r3, #0
    d020:	d100      	bne.n	d024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d024:	bf00      	nop
    d026:	b003      	add	sp, #12
    d028:	f85d fb04 	ldr.w	pc, [sp], #4
    d02c:	1fff8f70 	.word	0x1fff8f70
    d030:	1fff8f6c 	.word	0x1fff8f6c

0000d034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d034:	b500      	push	{lr}
    d036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d038:	f7f3 fd8e 	bl	b58 <Sys_GetCoreID>
    d03c:	4603      	mov	r3, r0
    d03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
    d040:	4a10      	ldr	r2, [pc, #64]	; (d084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d042:	9b01      	ldr	r3, [sp, #4]
    d044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d048:	2b00      	cmp	r3, #0
    d04a:	d10d      	bne.n	d068 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d04c:	f7f3 fca2 	bl	994 <Adc_schm_read_msr>
    d050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d052:	9b00      	ldr	r3, [sp, #0]
    d054:	f003 0301 	and.w	r3, r3, #1
    d058:	2b00      	cmp	r3, #0
    d05a:	d100      	bne.n	d05e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
    d05e:	490a      	ldr	r1, [pc, #40]	; (d088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
    d060:	9b01      	ldr	r3, [sp, #4]
    d062:	9a00      	ldr	r2, [sp, #0]
    d064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
    d068:	4a06      	ldr	r2, [pc, #24]	; (d084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d06a:	9b01      	ldr	r3, [sp, #4]
    d06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d070:	1c5a      	adds	r2, r3, #1
    d072:	4904      	ldr	r1, [pc, #16]	; (d084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
    d074:	9b01      	ldr	r3, [sp, #4]
    d076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d07a:	bf00      	nop
    d07c:	b003      	add	sp, #12
    d07e:	f85d fb04 	ldr.w	pc, [sp], #4
    d082:	bf00      	nop
    d084:	1fff8f78 	.word	0x1fff8f78
    d088:	1fff8f74 	.word	0x1fff8f74

0000d08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
    d08c:	b500      	push	{lr}
    d08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d090:	f7f3 fd62 	bl	b58 <Sys_GetCoreID>
    d094:	4603      	mov	r3, r0
    d096:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
    d098:	4a0d      	ldr	r2, [pc, #52]	; (d0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d09a:	9b01      	ldr	r3, [sp, #4]
    d09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a0:	1e5a      	subs	r2, r3, #1
    d0a2:	490b      	ldr	r1, [pc, #44]	; (d0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d0a4:	9b01      	ldr	r3, [sp, #4]
    d0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
    d0aa:	4a0a      	ldr	r2, [pc, #40]	; (d0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
    d0ac:	9b01      	ldr	r3, [sp, #4]
    d0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0b2:	f003 0301 	and.w	r3, r3, #1
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d106      	bne.n	d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    d0ba:	4a05      	ldr	r2, [pc, #20]	; (d0d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
    d0bc:	9b01      	ldr	r3, [sp, #4]
    d0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	d100      	bne.n	d0c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0c8:	bf00      	nop
    d0ca:	b003      	add	sp, #12
    d0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    d0d0:	1fff8f78 	.word	0x1fff8f78
    d0d4:	1fff8f74 	.word	0x1fff8f74

0000d0d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d0d8:	b500      	push	{lr}
    d0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0dc:	f7f3 fd3c 	bl	b58 <Sys_GetCoreID>
    d0e0:	4603      	mov	r3, r0
    d0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
    d0e4:	4a10      	ldr	r2, [pc, #64]	; (d128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d0e6:	9b01      	ldr	r3, [sp, #4]
    d0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d10d      	bne.n	d10c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0f0:	f7f3 fc50 	bl	994 <Adc_schm_read_msr>
    d0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0f6:	9b00      	ldr	r3, [sp, #0]
    d0f8:	f003 0301 	and.w	r3, r3, #1
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d100      	bne.n	d102 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
    d102:	490a      	ldr	r1, [pc, #40]	; (d12c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
    d104:	9b01      	ldr	r3, [sp, #4]
    d106:	9a00      	ldr	r2, [sp, #0]
    d108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
    d10c:	4a06      	ldr	r2, [pc, #24]	; (d128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d10e:	9b01      	ldr	r3, [sp, #4]
    d110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d114:	1c5a      	adds	r2, r3, #1
    d116:	4904      	ldr	r1, [pc, #16]	; (d128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
    d118:	9b01      	ldr	r3, [sp, #4]
    d11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d11e:	bf00      	nop
    d120:	b003      	add	sp, #12
    d122:	f85d fb04 	ldr.w	pc, [sp], #4
    d126:	bf00      	nop
    d128:	1fff8f80 	.word	0x1fff8f80
    d12c:	1fff8f7c 	.word	0x1fff8f7c

0000d130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
    d130:	b500      	push	{lr}
    d132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d134:	f7f3 fd10 	bl	b58 <Sys_GetCoreID>
    d138:	4603      	mov	r3, r0
    d13a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
    d13c:	4a0d      	ldr	r2, [pc, #52]	; (d174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d13e:	9b01      	ldr	r3, [sp, #4]
    d140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d144:	1e5a      	subs	r2, r3, #1
    d146:	490b      	ldr	r1, [pc, #44]	; (d174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d148:	9b01      	ldr	r3, [sp, #4]
    d14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
    d14e:	4a0a      	ldr	r2, [pc, #40]	; (d178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
    d150:	9b01      	ldr	r3, [sp, #4]
    d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d156:	f003 0301 	and.w	r3, r3, #1
    d15a:	2b00      	cmp	r3, #0
    d15c:	d106      	bne.n	d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    d15e:	4a05      	ldr	r2, [pc, #20]	; (d174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
    d160:	9b01      	ldr	r3, [sp, #4]
    d162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d166:	2b00      	cmp	r3, #0
    d168:	d100      	bne.n	d16c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d16c:	bf00      	nop
    d16e:	b003      	add	sp, #12
    d170:	f85d fb04 	ldr.w	pc, [sp], #4
    d174:	1fff8f80 	.word	0x1fff8f80
    d178:	1fff8f7c 	.word	0x1fff8f7c

0000d17c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d17c:	b500      	push	{lr}
    d17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d180:	f7f3 fcea 	bl	b58 <Sys_GetCoreID>
    d184:	4603      	mov	r3, r0
    d186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
    d188:	4a10      	ldr	r2, [pc, #64]	; (d1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d18a:	9b01      	ldr	r3, [sp, #4]
    d18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d190:	2b00      	cmp	r3, #0
    d192:	d10d      	bne.n	d1b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d194:	f7f3 fbfe 	bl	994 <Adc_schm_read_msr>
    d198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d19a:	9b00      	ldr	r3, [sp, #0]
    d19c:	f003 0301 	and.w	r3, r3, #1
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d100      	bne.n	d1a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
    d1a6:	490a      	ldr	r1, [pc, #40]	; (d1d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
    d1a8:	9b01      	ldr	r3, [sp, #4]
    d1aa:	9a00      	ldr	r2, [sp, #0]
    d1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
    d1b0:	4a06      	ldr	r2, [pc, #24]	; (d1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d1b2:	9b01      	ldr	r3, [sp, #4]
    d1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b8:	1c5a      	adds	r2, r3, #1
    d1ba:	4904      	ldr	r1, [pc, #16]	; (d1cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
    d1bc:	9b01      	ldr	r3, [sp, #4]
    d1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1c2:	bf00      	nop
    d1c4:	b003      	add	sp, #12
    d1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    d1ca:	bf00      	nop
    d1cc:	1fff8f88 	.word	0x1fff8f88
    d1d0:	1fff8f84 	.word	0x1fff8f84

0000d1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
    d1d4:	b500      	push	{lr}
    d1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1d8:	f7f3 fcbe 	bl	b58 <Sys_GetCoreID>
    d1dc:	4603      	mov	r3, r0
    d1de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
    d1e0:	4a0d      	ldr	r2, [pc, #52]	; (d218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d1e2:	9b01      	ldr	r3, [sp, #4]
    d1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e8:	1e5a      	subs	r2, r3, #1
    d1ea:	490b      	ldr	r1, [pc, #44]	; (d218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d1ec:	9b01      	ldr	r3, [sp, #4]
    d1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
    d1f2:	4a0a      	ldr	r2, [pc, #40]	; (d21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1fa:	f003 0301 	and.w	r3, r3, #1
    d1fe:	2b00      	cmp	r3, #0
    d200:	d106      	bne.n	d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    d202:	4a05      	ldr	r2, [pc, #20]	; (d218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
    d204:	9b01      	ldr	r3, [sp, #4]
    d206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d20a:	2b00      	cmp	r3, #0
    d20c:	d100      	bne.n	d210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d210:	bf00      	nop
    d212:	b003      	add	sp, #12
    d214:	f85d fb04 	ldr.w	pc, [sp], #4
    d218:	1fff8f88 	.word	0x1fff8f88
    d21c:	1fff8f84 	.word	0x1fff8f84

0000d220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d220:	b500      	push	{lr}
    d222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d224:	f7f3 fc98 	bl	b58 <Sys_GetCoreID>
    d228:	4603      	mov	r3, r0
    d22a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
    d22c:	4a10      	ldr	r2, [pc, #64]	; (d270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d22e:	9b01      	ldr	r3, [sp, #4]
    d230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d234:	2b00      	cmp	r3, #0
    d236:	d10d      	bne.n	d254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d238:	f7f3 fbac 	bl	994 <Adc_schm_read_msr>
    d23c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d23e:	9b00      	ldr	r3, [sp, #0]
    d240:	f003 0301 	and.w	r3, r3, #1
    d244:	2b00      	cmp	r3, #0
    d246:	d100      	bne.n	d24a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
    d24a:	490a      	ldr	r1, [pc, #40]	; (d274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
    d24c:	9b01      	ldr	r3, [sp, #4]
    d24e:	9a00      	ldr	r2, [sp, #0]
    d250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
    d254:	4a06      	ldr	r2, [pc, #24]	; (d270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d256:	9b01      	ldr	r3, [sp, #4]
    d258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d25c:	1c5a      	adds	r2, r3, #1
    d25e:	4904      	ldr	r1, [pc, #16]	; (d270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
    d260:	9b01      	ldr	r3, [sp, #4]
    d262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d266:	bf00      	nop
    d268:	b003      	add	sp, #12
    d26a:	f85d fb04 	ldr.w	pc, [sp], #4
    d26e:	bf00      	nop
    d270:	1fff8f90 	.word	0x1fff8f90
    d274:	1fff8f8c 	.word	0x1fff8f8c

0000d278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
    d278:	b500      	push	{lr}
    d27a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d27c:	f7f3 fc6c 	bl	b58 <Sys_GetCoreID>
    d280:	4603      	mov	r3, r0
    d282:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
    d284:	4a0d      	ldr	r2, [pc, #52]	; (d2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d286:	9b01      	ldr	r3, [sp, #4]
    d288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d28c:	1e5a      	subs	r2, r3, #1
    d28e:	490b      	ldr	r1, [pc, #44]	; (d2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d290:	9b01      	ldr	r3, [sp, #4]
    d292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
    d296:	4a0a      	ldr	r2, [pc, #40]	; (d2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
    d298:	9b01      	ldr	r3, [sp, #4]
    d29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d29e:	f003 0301 	and.w	r3, r3, #1
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	d106      	bne.n	d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    d2a6:	4a05      	ldr	r2, [pc, #20]	; (d2bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
    d2a8:	9b01      	ldr	r3, [sp, #4]
    d2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d100      	bne.n	d2b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2b4:	bf00      	nop
    d2b6:	b003      	add	sp, #12
    d2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    d2bc:	1fff8f90 	.word	0x1fff8f90
    d2c0:	1fff8f8c 	.word	0x1fff8f8c

0000d2c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d2c4:	b500      	push	{lr}
    d2c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c8:	f7f3 fc46 	bl	b58 <Sys_GetCoreID>
    d2cc:	4603      	mov	r3, r0
    d2ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
    d2d0:	4a10      	ldr	r2, [pc, #64]	; (d314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d2d2:	9b01      	ldr	r3, [sp, #4]
    d2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d8:	2b00      	cmp	r3, #0
    d2da:	d10d      	bne.n	d2f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2dc:	f7f3 fb5a 	bl	994 <Adc_schm_read_msr>
    d2e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2e2:	9b00      	ldr	r3, [sp, #0]
    d2e4:	f003 0301 	and.w	r3, r3, #1
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d100      	bne.n	d2ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
    d2ee:	490a      	ldr	r1, [pc, #40]	; (d318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
    d2f0:	9b01      	ldr	r3, [sp, #4]
    d2f2:	9a00      	ldr	r2, [sp, #0]
    d2f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
    d2f8:	4a06      	ldr	r2, [pc, #24]	; (d314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d2fa:	9b01      	ldr	r3, [sp, #4]
    d2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d300:	1c5a      	adds	r2, r3, #1
    d302:	4904      	ldr	r1, [pc, #16]	; (d314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
    d304:	9b01      	ldr	r3, [sp, #4]
    d306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d30a:	bf00      	nop
    d30c:	b003      	add	sp, #12
    d30e:	f85d fb04 	ldr.w	pc, [sp], #4
    d312:	bf00      	nop
    d314:	1fff8f98 	.word	0x1fff8f98
    d318:	1fff8f94 	.word	0x1fff8f94

0000d31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
    d31c:	b500      	push	{lr}
    d31e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d320:	f7f3 fc1a 	bl	b58 <Sys_GetCoreID>
    d324:	4603      	mov	r3, r0
    d326:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
    d328:	4a0d      	ldr	r2, [pc, #52]	; (d360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d32a:	9b01      	ldr	r3, [sp, #4]
    d32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d330:	1e5a      	subs	r2, r3, #1
    d332:	490b      	ldr	r1, [pc, #44]	; (d360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d334:	9b01      	ldr	r3, [sp, #4]
    d336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
    d33a:	4a0a      	ldr	r2, [pc, #40]	; (d364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d342:	f003 0301 	and.w	r3, r3, #1
    d346:	2b00      	cmp	r3, #0
    d348:	d106      	bne.n	d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    d34a:	4a05      	ldr	r2, [pc, #20]	; (d360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
    d34c:	9b01      	ldr	r3, [sp, #4]
    d34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d352:	2b00      	cmp	r3, #0
    d354:	d100      	bne.n	d358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d358:	bf00      	nop
    d35a:	b003      	add	sp, #12
    d35c:	f85d fb04 	ldr.w	pc, [sp], #4
    d360:	1fff8f98 	.word	0x1fff8f98
    d364:	1fff8f94 	.word	0x1fff8f94

0000d368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d368:	b500      	push	{lr}
    d36a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d36c:	f7f3 fbf4 	bl	b58 <Sys_GetCoreID>
    d370:	4603      	mov	r3, r0
    d372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
    d374:	4a10      	ldr	r2, [pc, #64]	; (d3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d376:	9b01      	ldr	r3, [sp, #4]
    d378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d10d      	bne.n	d39c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d380:	f7f3 fb08 	bl	994 <Adc_schm_read_msr>
    d384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d386:	9b00      	ldr	r3, [sp, #0]
    d388:	f003 0301 	and.w	r3, r3, #1
    d38c:	2b00      	cmp	r3, #0
    d38e:	d100      	bne.n	d392 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
    d392:	490a      	ldr	r1, [pc, #40]	; (d3bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
    d394:	9b01      	ldr	r3, [sp, #4]
    d396:	9a00      	ldr	r2, [sp, #0]
    d398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
    d39c:	4a06      	ldr	r2, [pc, #24]	; (d3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d39e:	9b01      	ldr	r3, [sp, #4]
    d3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3a4:	1c5a      	adds	r2, r3, #1
    d3a6:	4904      	ldr	r1, [pc, #16]	; (d3b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
    d3a8:	9b01      	ldr	r3, [sp, #4]
    d3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3ae:	bf00      	nop
    d3b0:	b003      	add	sp, #12
    d3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d3b6:	bf00      	nop
    d3b8:	1fff8fa0 	.word	0x1fff8fa0
    d3bc:	1fff8f9c 	.word	0x1fff8f9c

0000d3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
    d3c0:	b500      	push	{lr}
    d3c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3c4:	f7f3 fbc8 	bl	b58 <Sys_GetCoreID>
    d3c8:	4603      	mov	r3, r0
    d3ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
    d3cc:	4a0d      	ldr	r2, [pc, #52]	; (d404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d3ce:	9b01      	ldr	r3, [sp, #4]
    d3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d4:	1e5a      	subs	r2, r3, #1
    d3d6:	490b      	ldr	r1, [pc, #44]	; (d404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d3d8:	9b01      	ldr	r3, [sp, #4]
    d3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
    d3de:	4a0a      	ldr	r2, [pc, #40]	; (d408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3e6:	f003 0301 	and.w	r3, r3, #1
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	d106      	bne.n	d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    d3ee:	4a05      	ldr	r2, [pc, #20]	; (d404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
    d3f0:	9b01      	ldr	r3, [sp, #4]
    d3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d100      	bne.n	d3fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3fc:	bf00      	nop
    d3fe:	b003      	add	sp, #12
    d400:	f85d fb04 	ldr.w	pc, [sp], #4
    d404:	1fff8fa0 	.word	0x1fff8fa0
    d408:	1fff8f9c 	.word	0x1fff8f9c

0000d40c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d40c:	b500      	push	{lr}
    d40e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d410:	f7f3 fba2 	bl	b58 <Sys_GetCoreID>
    d414:	4603      	mov	r3, r0
    d416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
    d418:	4a10      	ldr	r2, [pc, #64]	; (d45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d41a:	9b01      	ldr	r3, [sp, #4]
    d41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d420:	2b00      	cmp	r3, #0
    d422:	d10d      	bne.n	d440 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d424:	f7f3 fab6 	bl	994 <Adc_schm_read_msr>
    d428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d42a:	9b00      	ldr	r3, [sp, #0]
    d42c:	f003 0301 	and.w	r3, r3, #1
    d430:	2b00      	cmp	r3, #0
    d432:	d100      	bne.n	d436 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
    d436:	490a      	ldr	r1, [pc, #40]	; (d460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
    d438:	9b01      	ldr	r3, [sp, #4]
    d43a:	9a00      	ldr	r2, [sp, #0]
    d43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
    d440:	4a06      	ldr	r2, [pc, #24]	; (d45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d442:	9b01      	ldr	r3, [sp, #4]
    d444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d448:	1c5a      	adds	r2, r3, #1
    d44a:	4904      	ldr	r1, [pc, #16]	; (d45c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
    d44c:	9b01      	ldr	r3, [sp, #4]
    d44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d452:	bf00      	nop
    d454:	b003      	add	sp, #12
    d456:	f85d fb04 	ldr.w	pc, [sp], #4
    d45a:	bf00      	nop
    d45c:	1fff8fa8 	.word	0x1fff8fa8
    d460:	1fff8fa4 	.word	0x1fff8fa4

0000d464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
    d464:	b500      	push	{lr}
    d466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d468:	f7f3 fb76 	bl	b58 <Sys_GetCoreID>
    d46c:	4603      	mov	r3, r0
    d46e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
    d470:	4a0d      	ldr	r2, [pc, #52]	; (d4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d472:	9b01      	ldr	r3, [sp, #4]
    d474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d478:	1e5a      	subs	r2, r3, #1
    d47a:	490b      	ldr	r1, [pc, #44]	; (d4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d47c:	9b01      	ldr	r3, [sp, #4]
    d47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
    d482:	4a0a      	ldr	r2, [pc, #40]	; (d4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d48a:	f003 0301 	and.w	r3, r3, #1
    d48e:	2b00      	cmp	r3, #0
    d490:	d106      	bne.n	d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    d492:	4a05      	ldr	r2, [pc, #20]	; (d4a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
    d494:	9b01      	ldr	r3, [sp, #4]
    d496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d49a:	2b00      	cmp	r3, #0
    d49c:	d100      	bne.n	d4a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d49e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4a0:	bf00      	nop
    d4a2:	b003      	add	sp, #12
    d4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a8:	1fff8fa8 	.word	0x1fff8fa8
    d4ac:	1fff8fa4 	.word	0x1fff8fa4

0000d4b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d4b0:	b500      	push	{lr}
    d4b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b4:	f7f3 fb50 	bl	b58 <Sys_GetCoreID>
    d4b8:	4603      	mov	r3, r0
    d4ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
    d4bc:	4a10      	ldr	r2, [pc, #64]	; (d500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d4be:	9b01      	ldr	r3, [sp, #4]
    d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d10d      	bne.n	d4e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4c8:	f7f3 fa64 	bl	994 <Adc_schm_read_msr>
    d4cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4ce:	9b00      	ldr	r3, [sp, #0]
    d4d0:	f003 0301 	and.w	r3, r3, #1
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d100      	bne.n	d4da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
    d4da:	490a      	ldr	r1, [pc, #40]	; (d504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
    d4dc:	9b01      	ldr	r3, [sp, #4]
    d4de:	9a00      	ldr	r2, [sp, #0]
    d4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
    d4e4:	4a06      	ldr	r2, [pc, #24]	; (d500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d4e6:	9b01      	ldr	r3, [sp, #4]
    d4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4ec:	1c5a      	adds	r2, r3, #1
    d4ee:	4904      	ldr	r1, [pc, #16]	; (d500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
    d4f0:	9b01      	ldr	r3, [sp, #4]
    d4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4f6:	bf00      	nop
    d4f8:	b003      	add	sp, #12
    d4fa:	f85d fb04 	ldr.w	pc, [sp], #4
    d4fe:	bf00      	nop
    d500:	1fff8fb0 	.word	0x1fff8fb0
    d504:	1fff8fac 	.word	0x1fff8fac

0000d508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
    d508:	b500      	push	{lr}
    d50a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d50c:	f7f3 fb24 	bl	b58 <Sys_GetCoreID>
    d510:	4603      	mov	r3, r0
    d512:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
    d514:	4a0d      	ldr	r2, [pc, #52]	; (d54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d516:	9b01      	ldr	r3, [sp, #4]
    d518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d51c:	1e5a      	subs	r2, r3, #1
    d51e:	490b      	ldr	r1, [pc, #44]	; (d54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d520:	9b01      	ldr	r3, [sp, #4]
    d522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
    d526:	4a0a      	ldr	r2, [pc, #40]	; (d550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d52e:	f003 0301 	and.w	r3, r3, #1
    d532:	2b00      	cmp	r3, #0
    d534:	d106      	bne.n	d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    d536:	4a05      	ldr	r2, [pc, #20]	; (d54c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
    d538:	9b01      	ldr	r3, [sp, #4]
    d53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d53e:	2b00      	cmp	r3, #0
    d540:	d100      	bne.n	d544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d544:	bf00      	nop
    d546:	b003      	add	sp, #12
    d548:	f85d fb04 	ldr.w	pc, [sp], #4
    d54c:	1fff8fb0 	.word	0x1fff8fb0
    d550:	1fff8fac 	.word	0x1fff8fac

0000d554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d554:	b500      	push	{lr}
    d556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d558:	f7f3 fafe 	bl	b58 <Sys_GetCoreID>
    d55c:	4603      	mov	r3, r0
    d55e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
    d560:	4a10      	ldr	r2, [pc, #64]	; (d5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d562:	9b01      	ldr	r3, [sp, #4]
    d564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d568:	2b00      	cmp	r3, #0
    d56a:	d10d      	bne.n	d588 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d56c:	f7f3 fa12 	bl	994 <Adc_schm_read_msr>
    d570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d572:	9b00      	ldr	r3, [sp, #0]
    d574:	f003 0301 	and.w	r3, r3, #1
    d578:	2b00      	cmp	r3, #0
    d57a:	d100      	bne.n	d57e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d57c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
    d57e:	490a      	ldr	r1, [pc, #40]	; (d5a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
    d580:	9b01      	ldr	r3, [sp, #4]
    d582:	9a00      	ldr	r2, [sp, #0]
    d584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
    d588:	4a06      	ldr	r2, [pc, #24]	; (d5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d58a:	9b01      	ldr	r3, [sp, #4]
    d58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d590:	1c5a      	adds	r2, r3, #1
    d592:	4904      	ldr	r1, [pc, #16]	; (d5a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
    d594:	9b01      	ldr	r3, [sp, #4]
    d596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d59a:	bf00      	nop
    d59c:	b003      	add	sp, #12
    d59e:	f85d fb04 	ldr.w	pc, [sp], #4
    d5a2:	bf00      	nop
    d5a4:	1fff8fb8 	.word	0x1fff8fb8
    d5a8:	1fff8fb4 	.word	0x1fff8fb4

0000d5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
    d5ac:	b500      	push	{lr}
    d5ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5b0:	f7f3 fad2 	bl	b58 <Sys_GetCoreID>
    d5b4:	4603      	mov	r3, r0
    d5b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
    d5b8:	4a0d      	ldr	r2, [pc, #52]	; (d5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d5ba:	9b01      	ldr	r3, [sp, #4]
    d5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c0:	1e5a      	subs	r2, r3, #1
    d5c2:	490b      	ldr	r1, [pc, #44]	; (d5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d5c4:	9b01      	ldr	r3, [sp, #4]
    d5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
    d5ca:	4a0a      	ldr	r2, [pc, #40]	; (d5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5d2:	f003 0301 	and.w	r3, r3, #1
    d5d6:	2b00      	cmp	r3, #0
    d5d8:	d106      	bne.n	d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    d5da:	4a05      	ldr	r2, [pc, #20]	; (d5f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
    d5dc:	9b01      	ldr	r3, [sp, #4]
    d5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5e2:	2b00      	cmp	r3, #0
    d5e4:	d100      	bne.n	d5e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5e8:	bf00      	nop
    d5ea:	b003      	add	sp, #12
    d5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    d5f0:	1fff8fb8 	.word	0x1fff8fb8
    d5f4:	1fff8fb4 	.word	0x1fff8fb4

0000d5f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d5f8:	b500      	push	{lr}
    d5fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5fc:	f7f3 faac 	bl	b58 <Sys_GetCoreID>
    d600:	4603      	mov	r3, r0
    d602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
    d604:	4a10      	ldr	r2, [pc, #64]	; (d648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d606:	9b01      	ldr	r3, [sp, #4]
    d608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d60c:	2b00      	cmp	r3, #0
    d60e:	d10d      	bne.n	d62c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d610:	f7f3 f9c0 	bl	994 <Adc_schm_read_msr>
    d614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d616:	9b00      	ldr	r3, [sp, #0]
    d618:	f003 0301 	and.w	r3, r3, #1
    d61c:	2b00      	cmp	r3, #0
    d61e:	d100      	bne.n	d622 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
    d622:	490a      	ldr	r1, [pc, #40]	; (d64c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
    d624:	9b01      	ldr	r3, [sp, #4]
    d626:	9a00      	ldr	r2, [sp, #0]
    d628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
    d62c:	4a06      	ldr	r2, [pc, #24]	; (d648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d62e:	9b01      	ldr	r3, [sp, #4]
    d630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d634:	1c5a      	adds	r2, r3, #1
    d636:	4904      	ldr	r1, [pc, #16]	; (d648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
    d638:	9b01      	ldr	r3, [sp, #4]
    d63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d63e:	bf00      	nop
    d640:	b003      	add	sp, #12
    d642:	f85d fb04 	ldr.w	pc, [sp], #4
    d646:	bf00      	nop
    d648:	1fff8fc0 	.word	0x1fff8fc0
    d64c:	1fff8fbc 	.word	0x1fff8fbc

0000d650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
    d650:	b500      	push	{lr}
    d652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d654:	f7f3 fa80 	bl	b58 <Sys_GetCoreID>
    d658:	4603      	mov	r3, r0
    d65a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
    d65c:	4a0d      	ldr	r2, [pc, #52]	; (d694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d65e:	9b01      	ldr	r3, [sp, #4]
    d660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d664:	1e5a      	subs	r2, r3, #1
    d666:	490b      	ldr	r1, [pc, #44]	; (d694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d668:	9b01      	ldr	r3, [sp, #4]
    d66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
    d66e:	4a0a      	ldr	r2, [pc, #40]	; (d698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d676:	f003 0301 	and.w	r3, r3, #1
    d67a:	2b00      	cmp	r3, #0
    d67c:	d106      	bne.n	d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    d67e:	4a05      	ldr	r2, [pc, #20]	; (d694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
    d680:	9b01      	ldr	r3, [sp, #4]
    d682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d686:	2b00      	cmp	r3, #0
    d688:	d100      	bne.n	d68c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d68a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d68c:	bf00      	nop
    d68e:	b003      	add	sp, #12
    d690:	f85d fb04 	ldr.w	pc, [sp], #4
    d694:	1fff8fc0 	.word	0x1fff8fc0
    d698:	1fff8fbc 	.word	0x1fff8fbc

0000d69c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d69c:	b500      	push	{lr}
    d69e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6a0:	f7f3 fa5a 	bl	b58 <Sys_GetCoreID>
    d6a4:	4603      	mov	r3, r0
    d6a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
    d6a8:	4a10      	ldr	r2, [pc, #64]	; (d6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d6aa:	9b01      	ldr	r3, [sp, #4]
    d6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b0:	2b00      	cmp	r3, #0
    d6b2:	d10d      	bne.n	d6d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6b4:	f7f3 f96e 	bl	994 <Adc_schm_read_msr>
    d6b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6ba:	9b00      	ldr	r3, [sp, #0]
    d6bc:	f003 0301 	and.w	r3, r3, #1
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d100      	bne.n	d6c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
    d6c6:	490a      	ldr	r1, [pc, #40]	; (d6f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
    d6c8:	9b01      	ldr	r3, [sp, #4]
    d6ca:	9a00      	ldr	r2, [sp, #0]
    d6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
    d6d0:	4a06      	ldr	r2, [pc, #24]	; (d6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d6d2:	9b01      	ldr	r3, [sp, #4]
    d6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d8:	1c5a      	adds	r2, r3, #1
    d6da:	4904      	ldr	r1, [pc, #16]	; (d6ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
    d6dc:	9b01      	ldr	r3, [sp, #4]
    d6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6e2:	bf00      	nop
    d6e4:	b003      	add	sp, #12
    d6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d6ea:	bf00      	nop
    d6ec:	1fff8fc8 	.word	0x1fff8fc8
    d6f0:	1fff8fc4 	.word	0x1fff8fc4

0000d6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
    d6f4:	b500      	push	{lr}
    d6f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6f8:	f7f3 fa2e 	bl	b58 <Sys_GetCoreID>
    d6fc:	4603      	mov	r3, r0
    d6fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
    d700:	4a0d      	ldr	r2, [pc, #52]	; (d738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d702:	9b01      	ldr	r3, [sp, #4]
    d704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d708:	1e5a      	subs	r2, r3, #1
    d70a:	490b      	ldr	r1, [pc, #44]	; (d738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d70c:	9b01      	ldr	r3, [sp, #4]
    d70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
    d712:	4a0a      	ldr	r2, [pc, #40]	; (d73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d71a:	f003 0301 	and.w	r3, r3, #1
    d71e:	2b00      	cmp	r3, #0
    d720:	d106      	bne.n	d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    d722:	4a05      	ldr	r2, [pc, #20]	; (d738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
    d724:	9b01      	ldr	r3, [sp, #4]
    d726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d72a:	2b00      	cmp	r3, #0
    d72c:	d100      	bne.n	d730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d72e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d730:	bf00      	nop
    d732:	b003      	add	sp, #12
    d734:	f85d fb04 	ldr.w	pc, [sp], #4
    d738:	1fff8fc8 	.word	0x1fff8fc8
    d73c:	1fff8fc4 	.word	0x1fff8fc4

0000d740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d740:	b500      	push	{lr}
    d742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d744:	f7f3 fa08 	bl	b58 <Sys_GetCoreID>
    d748:	4603      	mov	r3, r0
    d74a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
    d74c:	4a10      	ldr	r2, [pc, #64]	; (d790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d74e:	9b01      	ldr	r3, [sp, #4]
    d750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d754:	2b00      	cmp	r3, #0
    d756:	d10d      	bne.n	d774 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d758:	f7f3 f91c 	bl	994 <Adc_schm_read_msr>
    d75c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d75e:	9b00      	ldr	r3, [sp, #0]
    d760:	f003 0301 	and.w	r3, r3, #1
    d764:	2b00      	cmp	r3, #0
    d766:	d100      	bne.n	d76a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
    d76a:	490a      	ldr	r1, [pc, #40]	; (d794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
    d76c:	9b01      	ldr	r3, [sp, #4]
    d76e:	9a00      	ldr	r2, [sp, #0]
    d770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
    d774:	4a06      	ldr	r2, [pc, #24]	; (d790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d776:	9b01      	ldr	r3, [sp, #4]
    d778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d77c:	1c5a      	adds	r2, r3, #1
    d77e:	4904      	ldr	r1, [pc, #16]	; (d790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
    d780:	9b01      	ldr	r3, [sp, #4]
    d782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d786:	bf00      	nop
    d788:	b003      	add	sp, #12
    d78a:	f85d fb04 	ldr.w	pc, [sp], #4
    d78e:	bf00      	nop
    d790:	1fff8fd0 	.word	0x1fff8fd0
    d794:	1fff8fcc 	.word	0x1fff8fcc

0000d798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
    d798:	b500      	push	{lr}
    d79a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d79c:	f7f3 f9dc 	bl	b58 <Sys_GetCoreID>
    d7a0:	4603      	mov	r3, r0
    d7a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
    d7a4:	4a0d      	ldr	r2, [pc, #52]	; (d7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d7a6:	9b01      	ldr	r3, [sp, #4]
    d7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ac:	1e5a      	subs	r2, r3, #1
    d7ae:	490b      	ldr	r1, [pc, #44]	; (d7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d7b0:	9b01      	ldr	r3, [sp, #4]
    d7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
    d7b6:	4a0a      	ldr	r2, [pc, #40]	; (d7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7be:	f003 0301 	and.w	r3, r3, #1
    d7c2:	2b00      	cmp	r3, #0
    d7c4:	d106      	bne.n	d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    d7c6:	4a05      	ldr	r2, [pc, #20]	; (d7dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
    d7c8:	9b01      	ldr	r3, [sp, #4]
    d7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ce:	2b00      	cmp	r3, #0
    d7d0:	d100      	bne.n	d7d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7d4:	bf00      	nop
    d7d6:	b003      	add	sp, #12
    d7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    d7dc:	1fff8fd0 	.word	0x1fff8fd0
    d7e0:	1fff8fcc 	.word	0x1fff8fcc

0000d7e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d7e4:	b500      	push	{lr}
    d7e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e8:	f7f3 f9b6 	bl	b58 <Sys_GetCoreID>
    d7ec:	4603      	mov	r3, r0
    d7ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
    d7f0:	4a10      	ldr	r2, [pc, #64]	; (d834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d7f2:	9b01      	ldr	r3, [sp, #4]
    d7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	d10d      	bne.n	d818 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7fc:	f7f3 f8ca 	bl	994 <Adc_schm_read_msr>
    d800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d802:	9b00      	ldr	r3, [sp, #0]
    d804:	f003 0301 	and.w	r3, r3, #1
    d808:	2b00      	cmp	r3, #0
    d80a:	d100      	bne.n	d80e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d80c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
    d80e:	490a      	ldr	r1, [pc, #40]	; (d838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
    d810:	9b01      	ldr	r3, [sp, #4]
    d812:	9a00      	ldr	r2, [sp, #0]
    d814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
    d818:	4a06      	ldr	r2, [pc, #24]	; (d834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d81a:	9b01      	ldr	r3, [sp, #4]
    d81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d820:	1c5a      	adds	r2, r3, #1
    d822:	4904      	ldr	r1, [pc, #16]	; (d834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
    d824:	9b01      	ldr	r3, [sp, #4]
    d826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d82a:	bf00      	nop
    d82c:	b003      	add	sp, #12
    d82e:	f85d fb04 	ldr.w	pc, [sp], #4
    d832:	bf00      	nop
    d834:	1fff8fd8 	.word	0x1fff8fd8
    d838:	1fff8fd4 	.word	0x1fff8fd4

0000d83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
    d83c:	b500      	push	{lr}
    d83e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d840:	f7f3 f98a 	bl	b58 <Sys_GetCoreID>
    d844:	4603      	mov	r3, r0
    d846:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
    d848:	4a0d      	ldr	r2, [pc, #52]	; (d880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d84a:	9b01      	ldr	r3, [sp, #4]
    d84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d850:	1e5a      	subs	r2, r3, #1
    d852:	490b      	ldr	r1, [pc, #44]	; (d880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d854:	9b01      	ldr	r3, [sp, #4]
    d856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
    d85a:	4a0a      	ldr	r2, [pc, #40]	; (d884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d862:	f003 0301 	and.w	r3, r3, #1
    d866:	2b00      	cmp	r3, #0
    d868:	d106      	bne.n	d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    d86a:	4a05      	ldr	r2, [pc, #20]	; (d880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
    d86c:	9b01      	ldr	r3, [sp, #4]
    d86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d872:	2b00      	cmp	r3, #0
    d874:	d100      	bne.n	d878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d878:	bf00      	nop
    d87a:	b003      	add	sp, #12
    d87c:	f85d fb04 	ldr.w	pc, [sp], #4
    d880:	1fff8fd8 	.word	0x1fff8fd8
    d884:	1fff8fd4 	.word	0x1fff8fd4

0000d888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d888:	b500      	push	{lr}
    d88a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d88c:	f7f3 f964 	bl	b58 <Sys_GetCoreID>
    d890:	4603      	mov	r3, r0
    d892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
    d894:	4a10      	ldr	r2, [pc, #64]	; (d8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d896:	9b01      	ldr	r3, [sp, #4]
    d898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d89c:	2b00      	cmp	r3, #0
    d89e:	d10d      	bne.n	d8bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8a0:	f7f3 f878 	bl	994 <Adc_schm_read_msr>
    d8a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8a6:	9b00      	ldr	r3, [sp, #0]
    d8a8:	f003 0301 	and.w	r3, r3, #1
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d100      	bne.n	d8b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
    d8b2:	490a      	ldr	r1, [pc, #40]	; (d8dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
    d8b4:	9b01      	ldr	r3, [sp, #4]
    d8b6:	9a00      	ldr	r2, [sp, #0]
    d8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
    d8bc:	4a06      	ldr	r2, [pc, #24]	; (d8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d8be:	9b01      	ldr	r3, [sp, #4]
    d8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c4:	1c5a      	adds	r2, r3, #1
    d8c6:	4904      	ldr	r1, [pc, #16]	; (d8d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
    d8c8:	9b01      	ldr	r3, [sp, #4]
    d8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8ce:	bf00      	nop
    d8d0:	b003      	add	sp, #12
    d8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    d8d6:	bf00      	nop
    d8d8:	1fff8fe0 	.word	0x1fff8fe0
    d8dc:	1fff8fdc 	.word	0x1fff8fdc

0000d8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
    d8e0:	b500      	push	{lr}
    d8e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8e4:	f7f3 f938 	bl	b58 <Sys_GetCoreID>
    d8e8:	4603      	mov	r3, r0
    d8ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
    d8ec:	4a0d      	ldr	r2, [pc, #52]	; (d924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d8ee:	9b01      	ldr	r3, [sp, #4]
    d8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f4:	1e5a      	subs	r2, r3, #1
    d8f6:	490b      	ldr	r1, [pc, #44]	; (d924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d8f8:	9b01      	ldr	r3, [sp, #4]
    d8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
    d8fe:	4a0a      	ldr	r2, [pc, #40]	; (d928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d906:	f003 0301 	and.w	r3, r3, #1
    d90a:	2b00      	cmp	r3, #0
    d90c:	d106      	bne.n	d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    d90e:	4a05      	ldr	r2, [pc, #20]	; (d924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
    d910:	9b01      	ldr	r3, [sp, #4]
    d912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d916:	2b00      	cmp	r3, #0
    d918:	d100      	bne.n	d91c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d91a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d91c:	bf00      	nop
    d91e:	b003      	add	sp, #12
    d920:	f85d fb04 	ldr.w	pc, [sp], #4
    d924:	1fff8fe0 	.word	0x1fff8fe0
    d928:	1fff8fdc 	.word	0x1fff8fdc

0000d92c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d92c:	b500      	push	{lr}
    d92e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d930:	f7f3 f912 	bl	b58 <Sys_GetCoreID>
    d934:	4603      	mov	r3, r0
    d936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
    d938:	4a10      	ldr	r2, [pc, #64]	; (d97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d93a:	9b01      	ldr	r3, [sp, #4]
    d93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d940:	2b00      	cmp	r3, #0
    d942:	d10d      	bne.n	d960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d944:	f7f3 f826 	bl	994 <Adc_schm_read_msr>
    d948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d94a:	9b00      	ldr	r3, [sp, #0]
    d94c:	f003 0301 	and.w	r3, r3, #1
    d950:	2b00      	cmp	r3, #0
    d952:	d100      	bne.n	d956 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
    d956:	490a      	ldr	r1, [pc, #40]	; (d980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
    d958:	9b01      	ldr	r3, [sp, #4]
    d95a:	9a00      	ldr	r2, [sp, #0]
    d95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
    d960:	4a06      	ldr	r2, [pc, #24]	; (d97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d962:	9b01      	ldr	r3, [sp, #4]
    d964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d968:	1c5a      	adds	r2, r3, #1
    d96a:	4904      	ldr	r1, [pc, #16]	; (d97c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
    d96c:	9b01      	ldr	r3, [sp, #4]
    d96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d972:	bf00      	nop
    d974:	b003      	add	sp, #12
    d976:	f85d fb04 	ldr.w	pc, [sp], #4
    d97a:	bf00      	nop
    d97c:	1fff8fe8 	.word	0x1fff8fe8
    d980:	1fff8fe4 	.word	0x1fff8fe4

0000d984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
    d984:	b500      	push	{lr}
    d986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d988:	f7f3 f8e6 	bl	b58 <Sys_GetCoreID>
    d98c:	4603      	mov	r3, r0
    d98e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
    d990:	4a0d      	ldr	r2, [pc, #52]	; (d9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d992:	9b01      	ldr	r3, [sp, #4]
    d994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d998:	1e5a      	subs	r2, r3, #1
    d99a:	490b      	ldr	r1, [pc, #44]	; (d9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d99c:	9b01      	ldr	r3, [sp, #4]
    d99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
    d9a2:	4a0a      	ldr	r2, [pc, #40]	; (d9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9aa:	f003 0301 	and.w	r3, r3, #1
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	d106      	bne.n	d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    d9b2:	4a05      	ldr	r2, [pc, #20]	; (d9c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
    d9b4:	9b01      	ldr	r3, [sp, #4]
    d9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d100      	bne.n	d9c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9c0:	bf00      	nop
    d9c2:	b003      	add	sp, #12
    d9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c8:	1fff8fe8 	.word	0x1fff8fe8
    d9cc:	1fff8fe4 	.word	0x1fff8fe4

0000d9d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    d9d0:	b500      	push	{lr}
    d9d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d4:	f7f3 f8c0 	bl	b58 <Sys_GetCoreID>
    d9d8:	4603      	mov	r3, r0
    d9da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
    d9dc:	4a10      	ldr	r2, [pc, #64]	; (da20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    d9de:	9b01      	ldr	r3, [sp, #4]
    d9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	d10d      	bne.n	da04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9e8:	f7f2 ffd4 	bl	994 <Adc_schm_read_msr>
    d9ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9ee:	9b00      	ldr	r3, [sp, #0]
    d9f0:	f003 0301 	and.w	r3, r3, #1
    d9f4:	2b00      	cmp	r3, #0
    d9f6:	d100      	bne.n	d9fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
    d9fa:	490a      	ldr	r1, [pc, #40]	; (da24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
    d9fc:	9b01      	ldr	r3, [sp, #4]
    d9fe:	9a00      	ldr	r2, [sp, #0]
    da00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
    da04:	4a06      	ldr	r2, [pc, #24]	; (da20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    da06:	9b01      	ldr	r3, [sp, #4]
    da08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da0c:	1c5a      	adds	r2, r3, #1
    da0e:	4904      	ldr	r1, [pc, #16]	; (da20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
    da10:	9b01      	ldr	r3, [sp, #4]
    da12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da16:	bf00      	nop
    da18:	b003      	add	sp, #12
    da1a:	f85d fb04 	ldr.w	pc, [sp], #4
    da1e:	bf00      	nop
    da20:	1fff8ff0 	.word	0x1fff8ff0
    da24:	1fff8fec 	.word	0x1fff8fec

0000da28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
    da28:	b500      	push	{lr}
    da2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da2c:	f7f3 f894 	bl	b58 <Sys_GetCoreID>
    da30:	4603      	mov	r3, r0
    da32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
    da34:	4a0d      	ldr	r2, [pc, #52]	; (da6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    da36:	9b01      	ldr	r3, [sp, #4]
    da38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da3c:	1e5a      	subs	r2, r3, #1
    da3e:	490b      	ldr	r1, [pc, #44]	; (da6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    da40:	9b01      	ldr	r3, [sp, #4]
    da42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
    da46:	4a0a      	ldr	r2, [pc, #40]	; (da70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da4e:	f003 0301 	and.w	r3, r3, #1
    da52:	2b00      	cmp	r3, #0
    da54:	d106      	bne.n	da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    da56:	4a05      	ldr	r2, [pc, #20]	; (da6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
    da58:	9b01      	ldr	r3, [sp, #4]
    da5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da5e:	2b00      	cmp	r3, #0
    da60:	d100      	bne.n	da64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da64:	bf00      	nop
    da66:	b003      	add	sp, #12
    da68:	f85d fb04 	ldr.w	pc, [sp], #4
    da6c:	1fff8ff0 	.word	0x1fff8ff0
    da70:	1fff8fec 	.word	0x1fff8fec

0000da74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    da74:	b500      	push	{lr}
    da76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da78:	f7f3 f86e 	bl	b58 <Sys_GetCoreID>
    da7c:	4603      	mov	r3, r0
    da7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
    da80:	4a10      	ldr	r2, [pc, #64]	; (dac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    da82:	9b01      	ldr	r3, [sp, #4]
    da84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da88:	2b00      	cmp	r3, #0
    da8a:	d10d      	bne.n	daa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da8c:	f7f2 ff82 	bl	994 <Adc_schm_read_msr>
    da90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da92:	9b00      	ldr	r3, [sp, #0]
    da94:	f003 0301 	and.w	r3, r3, #1
    da98:	2b00      	cmp	r3, #0
    da9a:	d100      	bne.n	da9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
    da9e:	490a      	ldr	r1, [pc, #40]	; (dac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
    daa0:	9b01      	ldr	r3, [sp, #4]
    daa2:	9a00      	ldr	r2, [sp, #0]
    daa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
    daa8:	4a06      	ldr	r2, [pc, #24]	; (dac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    daaa:	9b01      	ldr	r3, [sp, #4]
    daac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dab0:	1c5a      	adds	r2, r3, #1
    dab2:	4904      	ldr	r1, [pc, #16]	; (dac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
    dab4:	9b01      	ldr	r3, [sp, #4]
    dab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    daba:	bf00      	nop
    dabc:	b003      	add	sp, #12
    dabe:	f85d fb04 	ldr.w	pc, [sp], #4
    dac2:	bf00      	nop
    dac4:	1fff8ff8 	.word	0x1fff8ff8
    dac8:	1fff8ff4 	.word	0x1fff8ff4

0000dacc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
    dacc:	b500      	push	{lr}
    dace:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dad0:	f7f3 f842 	bl	b58 <Sys_GetCoreID>
    dad4:	4603      	mov	r3, r0
    dad6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
    dad8:	4a0d      	ldr	r2, [pc, #52]	; (db10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dada:	9b01      	ldr	r3, [sp, #4]
    dadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae0:	1e5a      	subs	r2, r3, #1
    dae2:	490b      	ldr	r1, [pc, #44]	; (db10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dae4:	9b01      	ldr	r3, [sp, #4]
    dae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
    daea:	4a0a      	ldr	r2, [pc, #40]	; (db14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daf2:	f003 0301 	and.w	r3, r3, #1
    daf6:	2b00      	cmp	r3, #0
    daf8:	d106      	bne.n	db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    dafa:	4a05      	ldr	r2, [pc, #20]	; (db10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
    dafc:	9b01      	ldr	r3, [sp, #4]
    dafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db02:	2b00      	cmp	r3, #0
    db04:	d100      	bne.n	db08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db08:	bf00      	nop
    db0a:	b003      	add	sp, #12
    db0c:	f85d fb04 	ldr.w	pc, [sp], #4
    db10:	1fff8ff8 	.word	0x1fff8ff8
    db14:	1fff8ff4 	.word	0x1fff8ff4

0000db18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    db18:	b500      	push	{lr}
    db1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db1c:	f7f3 f81c 	bl	b58 <Sys_GetCoreID>
    db20:	4603      	mov	r3, r0
    db22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
    db24:	4a10      	ldr	r2, [pc, #64]	; (db68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d10d      	bne.n	db4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db30:	f7f2 ff30 	bl	994 <Adc_schm_read_msr>
    db34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db36:	9b00      	ldr	r3, [sp, #0]
    db38:	f003 0301 	and.w	r3, r3, #1
    db3c:	2b00      	cmp	r3, #0
    db3e:	d100      	bne.n	db42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
    db42:	490a      	ldr	r1, [pc, #40]	; (db6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
    db44:	9b01      	ldr	r3, [sp, #4]
    db46:	9a00      	ldr	r2, [sp, #0]
    db48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
    db4c:	4a06      	ldr	r2, [pc, #24]	; (db68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    db4e:	9b01      	ldr	r3, [sp, #4]
    db50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db54:	1c5a      	adds	r2, r3, #1
    db56:	4904      	ldr	r1, [pc, #16]	; (db68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
    db58:	9b01      	ldr	r3, [sp, #4]
    db5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db5e:	bf00      	nop
    db60:	b003      	add	sp, #12
    db62:	f85d fb04 	ldr.w	pc, [sp], #4
    db66:	bf00      	nop
    db68:	1fff9000 	.word	0x1fff9000
    db6c:	1fff8ffc 	.word	0x1fff8ffc

0000db70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
    db70:	b500      	push	{lr}
    db72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db74:	f7f2 fff0 	bl	b58 <Sys_GetCoreID>
    db78:	4603      	mov	r3, r0
    db7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
    db7c:	4a0d      	ldr	r2, [pc, #52]	; (dbb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    db7e:	9b01      	ldr	r3, [sp, #4]
    db80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db84:	1e5a      	subs	r2, r3, #1
    db86:	490b      	ldr	r1, [pc, #44]	; (dbb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    db88:	9b01      	ldr	r3, [sp, #4]
    db8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
    db8e:	4a0a      	ldr	r2, [pc, #40]	; (dbb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db96:	f003 0301 	and.w	r3, r3, #1
    db9a:	2b00      	cmp	r3, #0
    db9c:	d106      	bne.n	dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    db9e:	4a05      	ldr	r2, [pc, #20]	; (dbb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
    dba0:	9b01      	ldr	r3, [sp, #4]
    dba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba6:	2b00      	cmp	r3, #0
    dba8:	d100      	bne.n	dbac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbac:	bf00      	nop
    dbae:	b003      	add	sp, #12
    dbb0:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb4:	1fff9000 	.word	0x1fff9000
    dbb8:	1fff8ffc 	.word	0x1fff8ffc

0000dbbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dbbc:	b500      	push	{lr}
    dbbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbc0:	f7f2 ffca 	bl	b58 <Sys_GetCoreID>
    dbc4:	4603      	mov	r3, r0
    dbc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
    dbc8:	4a10      	ldr	r2, [pc, #64]	; (dc0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	d10d      	bne.n	dbf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbd4:	f7f2 fede 	bl	994 <Adc_schm_read_msr>
    dbd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbda:	9b00      	ldr	r3, [sp, #0]
    dbdc:	f003 0301 	and.w	r3, r3, #1
    dbe0:	2b00      	cmp	r3, #0
    dbe2:	d100      	bne.n	dbe6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
    dbe6:	490a      	ldr	r1, [pc, #40]	; (dc10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
    dbe8:	9b01      	ldr	r3, [sp, #4]
    dbea:	9a00      	ldr	r2, [sp, #0]
    dbec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
    dbf0:	4a06      	ldr	r2, [pc, #24]	; (dc0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dbf2:	9b01      	ldr	r3, [sp, #4]
    dbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf8:	1c5a      	adds	r2, r3, #1
    dbfa:	4904      	ldr	r1, [pc, #16]	; (dc0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
    dbfc:	9b01      	ldr	r3, [sp, #4]
    dbfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc02:	bf00      	nop
    dc04:	b003      	add	sp, #12
    dc06:	f85d fb04 	ldr.w	pc, [sp], #4
    dc0a:	bf00      	nop
    dc0c:	1fff9008 	.word	0x1fff9008
    dc10:	1fff9004 	.word	0x1fff9004

0000dc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
    dc14:	b500      	push	{lr}
    dc16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc18:	f7f2 ff9e 	bl	b58 <Sys_GetCoreID>
    dc1c:	4603      	mov	r3, r0
    dc1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
    dc20:	4a0d      	ldr	r2, [pc, #52]	; (dc58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dc22:	9b01      	ldr	r3, [sp, #4]
    dc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc28:	1e5a      	subs	r2, r3, #1
    dc2a:	490b      	ldr	r1, [pc, #44]	; (dc58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dc2c:	9b01      	ldr	r3, [sp, #4]
    dc2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
    dc32:	4a0a      	ldr	r2, [pc, #40]	; (dc5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc3a:	f003 0301 	and.w	r3, r3, #1
    dc3e:	2b00      	cmp	r3, #0
    dc40:	d106      	bne.n	dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    dc42:	4a05      	ldr	r2, [pc, #20]	; (dc58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
    dc44:	9b01      	ldr	r3, [sp, #4]
    dc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d100      	bne.n	dc50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc50:	bf00      	nop
    dc52:	b003      	add	sp, #12
    dc54:	f85d fb04 	ldr.w	pc, [sp], #4
    dc58:	1fff9008 	.word	0x1fff9008
    dc5c:	1fff9004 	.word	0x1fff9004

0000dc60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dc60:	b500      	push	{lr}
    dc62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc64:	f7f2 ff78 	bl	b58 <Sys_GetCoreID>
    dc68:	4603      	mov	r3, r0
    dc6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
    dc6c:	4a10      	ldr	r2, [pc, #64]	; (dcb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dc6e:	9b01      	ldr	r3, [sp, #4]
    dc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc74:	2b00      	cmp	r3, #0
    dc76:	d10d      	bne.n	dc94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc78:	f7f2 fe8c 	bl	994 <Adc_schm_read_msr>
    dc7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc7e:	9b00      	ldr	r3, [sp, #0]
    dc80:	f003 0301 	and.w	r3, r3, #1
    dc84:	2b00      	cmp	r3, #0
    dc86:	d100      	bne.n	dc8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
    dc8a:	490a      	ldr	r1, [pc, #40]	; (dcb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
    dc8c:	9b01      	ldr	r3, [sp, #4]
    dc8e:	9a00      	ldr	r2, [sp, #0]
    dc90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
    dc94:	4a06      	ldr	r2, [pc, #24]	; (dcb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dc96:	9b01      	ldr	r3, [sp, #4]
    dc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc9c:	1c5a      	adds	r2, r3, #1
    dc9e:	4904      	ldr	r1, [pc, #16]	; (dcb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
    dca0:	9b01      	ldr	r3, [sp, #4]
    dca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dca6:	bf00      	nop
    dca8:	b003      	add	sp, #12
    dcaa:	f85d fb04 	ldr.w	pc, [sp], #4
    dcae:	bf00      	nop
    dcb0:	1fff9010 	.word	0x1fff9010
    dcb4:	1fff900c 	.word	0x1fff900c

0000dcb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
    dcb8:	b500      	push	{lr}
    dcba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcbc:	f7f2 ff4c 	bl	b58 <Sys_GetCoreID>
    dcc0:	4603      	mov	r3, r0
    dcc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
    dcc4:	4a0d      	ldr	r2, [pc, #52]	; (dcfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dcc6:	9b01      	ldr	r3, [sp, #4]
    dcc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dccc:	1e5a      	subs	r2, r3, #1
    dcce:	490b      	ldr	r1, [pc, #44]	; (dcfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dcd0:	9b01      	ldr	r3, [sp, #4]
    dcd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
    dcd6:	4a0a      	ldr	r2, [pc, #40]	; (dd00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcde:	f003 0301 	and.w	r3, r3, #1
    dce2:	2b00      	cmp	r3, #0
    dce4:	d106      	bne.n	dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    dce6:	4a05      	ldr	r2, [pc, #20]	; (dcfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
    dce8:	9b01      	ldr	r3, [sp, #4]
    dcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcee:	2b00      	cmp	r3, #0
    dcf0:	d100      	bne.n	dcf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcf4:	bf00      	nop
    dcf6:	b003      	add	sp, #12
    dcf8:	f85d fb04 	ldr.w	pc, [sp], #4
    dcfc:	1fff9010 	.word	0x1fff9010
    dd00:	1fff900c 	.word	0x1fff900c

0000dd04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dd04:	b500      	push	{lr}
    dd06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd08:	f7f2 ff26 	bl	b58 <Sys_GetCoreID>
    dd0c:	4603      	mov	r3, r0
    dd0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
    dd10:	4a10      	ldr	r2, [pc, #64]	; (dd54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dd12:	9b01      	ldr	r3, [sp, #4]
    dd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d10d      	bne.n	dd38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd1c:	f7f2 fe3a 	bl	994 <Adc_schm_read_msr>
    dd20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd22:	9b00      	ldr	r3, [sp, #0]
    dd24:	f003 0301 	and.w	r3, r3, #1
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d100      	bne.n	dd2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
    dd2e:	490a      	ldr	r1, [pc, #40]	; (dd58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
    dd30:	9b01      	ldr	r3, [sp, #4]
    dd32:	9a00      	ldr	r2, [sp, #0]
    dd34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
    dd38:	4a06      	ldr	r2, [pc, #24]	; (dd54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dd3a:	9b01      	ldr	r3, [sp, #4]
    dd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd40:	1c5a      	adds	r2, r3, #1
    dd42:	4904      	ldr	r1, [pc, #16]	; (dd54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
    dd44:	9b01      	ldr	r3, [sp, #4]
    dd46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd4a:	bf00      	nop
    dd4c:	b003      	add	sp, #12
    dd4e:	f85d fb04 	ldr.w	pc, [sp], #4
    dd52:	bf00      	nop
    dd54:	1fff9018 	.word	0x1fff9018
    dd58:	1fff9014 	.word	0x1fff9014

0000dd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
    dd5c:	b500      	push	{lr}
    dd5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd60:	f7f2 fefa 	bl	b58 <Sys_GetCoreID>
    dd64:	4603      	mov	r3, r0
    dd66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
    dd68:	4a0d      	ldr	r2, [pc, #52]	; (dda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dd6a:	9b01      	ldr	r3, [sp, #4]
    dd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd70:	1e5a      	subs	r2, r3, #1
    dd72:	490b      	ldr	r1, [pc, #44]	; (dda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dd74:	9b01      	ldr	r3, [sp, #4]
    dd76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
    dd7a:	4a0a      	ldr	r2, [pc, #40]	; (dda4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
    dd7c:	9b01      	ldr	r3, [sp, #4]
    dd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd82:	f003 0301 	and.w	r3, r3, #1
    dd86:	2b00      	cmp	r3, #0
    dd88:	d106      	bne.n	dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    dd8a:	4a05      	ldr	r2, [pc, #20]	; (dda0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
    dd8c:	9b01      	ldr	r3, [sp, #4]
    dd8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd92:	2b00      	cmp	r3, #0
    dd94:	d100      	bne.n	dd98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd98:	bf00      	nop
    dd9a:	b003      	add	sp, #12
    dd9c:	f85d fb04 	ldr.w	pc, [sp], #4
    dda0:	1fff9018 	.word	0x1fff9018
    dda4:	1fff9014 	.word	0x1fff9014

0000dda8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    dda8:	b500      	push	{lr}
    ddaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddac:	f7f2 fed4 	bl	b58 <Sys_GetCoreID>
    ddb0:	4603      	mov	r3, r0
    ddb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
    ddb4:	4a10      	ldr	r2, [pc, #64]	; (ddf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ddb6:	9b01      	ldr	r3, [sp, #4]
    ddb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d10d      	bne.n	dddc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddc0:	f7f2 fde8 	bl	994 <Adc_schm_read_msr>
    ddc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddc6:	9b00      	ldr	r3, [sp, #0]
    ddc8:	f003 0301 	and.w	r3, r3, #1
    ddcc:	2b00      	cmp	r3, #0
    ddce:	d100      	bne.n	ddd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
    ddd2:	490a      	ldr	r1, [pc, #40]	; (ddfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
    ddd4:	9b01      	ldr	r3, [sp, #4]
    ddd6:	9a00      	ldr	r2, [sp, #0]
    ddd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
    dddc:	4a06      	ldr	r2, [pc, #24]	; (ddf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    ddde:	9b01      	ldr	r3, [sp, #4]
    dde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dde4:	1c5a      	adds	r2, r3, #1
    dde6:	4904      	ldr	r1, [pc, #16]	; (ddf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
    dde8:	9b01      	ldr	r3, [sp, #4]
    ddea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddee:	bf00      	nop
    ddf0:	b003      	add	sp, #12
    ddf2:	f85d fb04 	ldr.w	pc, [sp], #4
    ddf6:	bf00      	nop
    ddf8:	1fff9020 	.word	0x1fff9020
    ddfc:	1fff901c 	.word	0x1fff901c

0000de00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
    de00:	b500      	push	{lr}
    de02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de04:	f7f2 fea8 	bl	b58 <Sys_GetCoreID>
    de08:	4603      	mov	r3, r0
    de0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
    de0c:	4a0d      	ldr	r2, [pc, #52]	; (de44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    de0e:	9b01      	ldr	r3, [sp, #4]
    de10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de14:	1e5a      	subs	r2, r3, #1
    de16:	490b      	ldr	r1, [pc, #44]	; (de44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    de18:	9b01      	ldr	r3, [sp, #4]
    de1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
    de1e:	4a0a      	ldr	r2, [pc, #40]	; (de48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de26:	f003 0301 	and.w	r3, r3, #1
    de2a:	2b00      	cmp	r3, #0
    de2c:	d106      	bne.n	de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    de2e:	4a05      	ldr	r2, [pc, #20]	; (de44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
    de30:	9b01      	ldr	r3, [sp, #4]
    de32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de36:	2b00      	cmp	r3, #0
    de38:	d100      	bne.n	de3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de3c:	bf00      	nop
    de3e:	b003      	add	sp, #12
    de40:	f85d fb04 	ldr.w	pc, [sp], #4
    de44:	1fff9020 	.word	0x1fff9020
    de48:	1fff901c 	.word	0x1fff901c

0000de4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    de4c:	b500      	push	{lr}
    de4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de50:	f7f2 fe82 	bl	b58 <Sys_GetCoreID>
    de54:	4603      	mov	r3, r0
    de56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
    de58:	4a10      	ldr	r2, [pc, #64]	; (de9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    de5a:	9b01      	ldr	r3, [sp, #4]
    de5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de60:	2b00      	cmp	r3, #0
    de62:	d10d      	bne.n	de80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de64:	f7f2 fd96 	bl	994 <Adc_schm_read_msr>
    de68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de6a:	9b00      	ldr	r3, [sp, #0]
    de6c:	f003 0301 	and.w	r3, r3, #1
    de70:	2b00      	cmp	r3, #0
    de72:	d100      	bne.n	de76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
    de76:	490a      	ldr	r1, [pc, #40]	; (dea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
    de78:	9b01      	ldr	r3, [sp, #4]
    de7a:	9a00      	ldr	r2, [sp, #0]
    de7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
    de80:	4a06      	ldr	r2, [pc, #24]	; (de9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    de82:	9b01      	ldr	r3, [sp, #4]
    de84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de88:	1c5a      	adds	r2, r3, #1
    de8a:	4904      	ldr	r1, [pc, #16]	; (de9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
    de8c:	9b01      	ldr	r3, [sp, #4]
    de8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de92:	bf00      	nop
    de94:	b003      	add	sp, #12
    de96:	f85d fb04 	ldr.w	pc, [sp], #4
    de9a:	bf00      	nop
    de9c:	1fff9028 	.word	0x1fff9028
    dea0:	1fff9024 	.word	0x1fff9024

0000dea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
    dea4:	b500      	push	{lr}
    dea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dea8:	f7f2 fe56 	bl	b58 <Sys_GetCoreID>
    deac:	4603      	mov	r3, r0
    deae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
    deb0:	4a0d      	ldr	r2, [pc, #52]	; (dee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    deb2:	9b01      	ldr	r3, [sp, #4]
    deb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deb8:	1e5a      	subs	r2, r3, #1
    deba:	490b      	ldr	r1, [pc, #44]	; (dee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    debc:	9b01      	ldr	r3, [sp, #4]
    debe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
    dec2:	4a0a      	ldr	r2, [pc, #40]	; (deec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
    dec4:	9b01      	ldr	r3, [sp, #4]
    dec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deca:	f003 0301 	and.w	r3, r3, #1
    dece:	2b00      	cmp	r3, #0
    ded0:	d106      	bne.n	dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    ded2:	4a05      	ldr	r2, [pc, #20]	; (dee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
    ded4:	9b01      	ldr	r3, [sp, #4]
    ded6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deda:	2b00      	cmp	r3, #0
    dedc:	d100      	bne.n	dee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dee0:	bf00      	nop
    dee2:	b003      	add	sp, #12
    dee4:	f85d fb04 	ldr.w	pc, [sp], #4
    dee8:	1fff9028 	.word	0x1fff9028
    deec:	1fff9024 	.word	0x1fff9024

0000def0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    def0:	b500      	push	{lr}
    def2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    def4:	f7f2 fe30 	bl	b58 <Sys_GetCoreID>
    def8:	4603      	mov	r3, r0
    defa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
    defc:	4a10      	ldr	r2, [pc, #64]	; (df40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    defe:	9b01      	ldr	r3, [sp, #4]
    df00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df04:	2b00      	cmp	r3, #0
    df06:	d10d      	bne.n	df24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df08:	f7f2 fd44 	bl	994 <Adc_schm_read_msr>
    df0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df0e:	9b00      	ldr	r3, [sp, #0]
    df10:	f003 0301 	and.w	r3, r3, #1
    df14:	2b00      	cmp	r3, #0
    df16:	d100      	bne.n	df1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
    df1a:	490a      	ldr	r1, [pc, #40]	; (df44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
    df1c:	9b01      	ldr	r3, [sp, #4]
    df1e:	9a00      	ldr	r2, [sp, #0]
    df20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
    df24:	4a06      	ldr	r2, [pc, #24]	; (df40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    df26:	9b01      	ldr	r3, [sp, #4]
    df28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df2c:	1c5a      	adds	r2, r3, #1
    df2e:	4904      	ldr	r1, [pc, #16]	; (df40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
    df30:	9b01      	ldr	r3, [sp, #4]
    df32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df36:	bf00      	nop
    df38:	b003      	add	sp, #12
    df3a:	f85d fb04 	ldr.w	pc, [sp], #4
    df3e:	bf00      	nop
    df40:	1fff9030 	.word	0x1fff9030
    df44:	1fff902c 	.word	0x1fff902c

0000df48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
    df48:	b500      	push	{lr}
    df4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df4c:	f7f2 fe04 	bl	b58 <Sys_GetCoreID>
    df50:	4603      	mov	r3, r0
    df52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
    df54:	4a0d      	ldr	r2, [pc, #52]	; (df8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    df56:	9b01      	ldr	r3, [sp, #4]
    df58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df5c:	1e5a      	subs	r2, r3, #1
    df5e:	490b      	ldr	r1, [pc, #44]	; (df8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    df60:	9b01      	ldr	r3, [sp, #4]
    df62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
    df66:	4a0a      	ldr	r2, [pc, #40]	; (df90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
    df68:	9b01      	ldr	r3, [sp, #4]
    df6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df6e:	f003 0301 	and.w	r3, r3, #1
    df72:	2b00      	cmp	r3, #0
    df74:	d106      	bne.n	df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    df76:	4a05      	ldr	r2, [pc, #20]	; (df8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
    df78:	9b01      	ldr	r3, [sp, #4]
    df7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df7e:	2b00      	cmp	r3, #0
    df80:	d100      	bne.n	df84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df84:	bf00      	nop
    df86:	b003      	add	sp, #12
    df88:	f85d fb04 	ldr.w	pc, [sp], #4
    df8c:	1fff9030 	.word	0x1fff9030
    df90:	1fff902c 	.word	0x1fff902c

0000df94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    df94:	b500      	push	{lr}
    df96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df98:	f7f2 fdde 	bl	b58 <Sys_GetCoreID>
    df9c:	4603      	mov	r3, r0
    df9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
    dfa0:	4a10      	ldr	r2, [pc, #64]	; (dfe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    dfa2:	9b01      	ldr	r3, [sp, #4]
    dfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d10d      	bne.n	dfc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfac:	f7f2 fcf2 	bl	994 <Adc_schm_read_msr>
    dfb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfb2:	9b00      	ldr	r3, [sp, #0]
    dfb4:	f003 0301 	and.w	r3, r3, #1
    dfb8:	2b00      	cmp	r3, #0
    dfba:	d100      	bne.n	dfbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
    dfbe:	490a      	ldr	r1, [pc, #40]	; (dfe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
    dfc0:	9b01      	ldr	r3, [sp, #4]
    dfc2:	9a00      	ldr	r2, [sp, #0]
    dfc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
    dfc8:	4a06      	ldr	r2, [pc, #24]	; (dfe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    dfca:	9b01      	ldr	r3, [sp, #4]
    dfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfd0:	1c5a      	adds	r2, r3, #1
    dfd2:	4904      	ldr	r1, [pc, #16]	; (dfe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
    dfd4:	9b01      	ldr	r3, [sp, #4]
    dfd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfda:	bf00      	nop
    dfdc:	b003      	add	sp, #12
    dfde:	f85d fb04 	ldr.w	pc, [sp], #4
    dfe2:	bf00      	nop
    dfe4:	1fff9038 	.word	0x1fff9038
    dfe8:	1fff9034 	.word	0x1fff9034

0000dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
    dfec:	b500      	push	{lr}
    dfee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dff0:	f7f2 fdb2 	bl	b58 <Sys_GetCoreID>
    dff4:	4603      	mov	r3, r0
    dff6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
    dff8:	4a0d      	ldr	r2, [pc, #52]	; (e030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    dffa:	9b01      	ldr	r3, [sp, #4]
    dffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e000:	1e5a      	subs	r2, r3, #1
    e002:	490b      	ldr	r1, [pc, #44]	; (e030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
    e00a:	4a0a      	ldr	r2, [pc, #40]	; (e034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e012:	f003 0301 	and.w	r3, r3, #1
    e016:	2b00      	cmp	r3, #0
    e018:	d106      	bne.n	e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    e01a:	4a05      	ldr	r2, [pc, #20]	; (e030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
    e01c:	9b01      	ldr	r3, [sp, #4]
    e01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e022:	2b00      	cmp	r3, #0
    e024:	d100      	bne.n	e028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e026:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e028:	bf00      	nop
    e02a:	b003      	add	sp, #12
    e02c:	f85d fb04 	ldr.w	pc, [sp], #4
    e030:	1fff9038 	.word	0x1fff9038
    e034:	1fff9034 	.word	0x1fff9034

0000e038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e038:	b500      	push	{lr}
    e03a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e03c:	f7f2 fd8c 	bl	b58 <Sys_GetCoreID>
    e040:	4603      	mov	r3, r0
    e042:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
    e044:	4a10      	ldr	r2, [pc, #64]	; (e088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e046:	9b01      	ldr	r3, [sp, #4]
    e048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e04c:	2b00      	cmp	r3, #0
    e04e:	d10d      	bne.n	e06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e050:	f7f2 fca0 	bl	994 <Adc_schm_read_msr>
    e054:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e056:	9b00      	ldr	r3, [sp, #0]
    e058:	f003 0301 	and.w	r3, r3, #1
    e05c:	2b00      	cmp	r3, #0
    e05e:	d100      	bne.n	e062 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e060:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
    e062:	490a      	ldr	r1, [pc, #40]	; (e08c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
    e064:	9b01      	ldr	r3, [sp, #4]
    e066:	9a00      	ldr	r2, [sp, #0]
    e068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
    e06c:	4a06      	ldr	r2, [pc, #24]	; (e088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e06e:	9b01      	ldr	r3, [sp, #4]
    e070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e074:	1c5a      	adds	r2, r3, #1
    e076:	4904      	ldr	r1, [pc, #16]	; (e088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
    e078:	9b01      	ldr	r3, [sp, #4]
    e07a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e07e:	bf00      	nop
    e080:	b003      	add	sp, #12
    e082:	f85d fb04 	ldr.w	pc, [sp], #4
    e086:	bf00      	nop
    e088:	1fff9040 	.word	0x1fff9040
    e08c:	1fff903c 	.word	0x1fff903c

0000e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
    e090:	b500      	push	{lr}
    e092:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e094:	f7f2 fd60 	bl	b58 <Sys_GetCoreID>
    e098:	4603      	mov	r3, r0
    e09a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
    e09c:	4a0d      	ldr	r2, [pc, #52]	; (e0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e09e:	9b01      	ldr	r3, [sp, #4]
    e0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a4:	1e5a      	subs	r2, r3, #1
    e0a6:	490b      	ldr	r1, [pc, #44]	; (e0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e0a8:	9b01      	ldr	r3, [sp, #4]
    e0aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
    e0ae:	4a0a      	ldr	r2, [pc, #40]	; (e0d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b6:	f003 0301 	and.w	r3, r3, #1
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	d106      	bne.n	e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    e0be:	4a05      	ldr	r2, [pc, #20]	; (e0d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
    e0c0:	9b01      	ldr	r3, [sp, #4]
    e0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d100      	bne.n	e0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0cc:	bf00      	nop
    e0ce:	b003      	add	sp, #12
    e0d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e0d4:	1fff9040 	.word	0x1fff9040
    e0d8:	1fff903c 	.word	0x1fff903c

0000e0dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e0dc:	b500      	push	{lr}
    e0de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0e0:	f7f2 fd3a 	bl	b58 <Sys_GetCoreID>
    e0e4:	4603      	mov	r3, r0
    e0e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
    e0e8:	4a10      	ldr	r2, [pc, #64]	; (e12c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e0ea:	9b01      	ldr	r3, [sp, #4]
    e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d10d      	bne.n	e110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0f4:	f7f2 fc4e 	bl	994 <Adc_schm_read_msr>
    e0f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0fa:	9b00      	ldr	r3, [sp, #0]
    e0fc:	f003 0301 	and.w	r3, r3, #1
    e100:	2b00      	cmp	r3, #0
    e102:	d100      	bne.n	e106 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e104:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
    e106:	490a      	ldr	r1, [pc, #40]	; (e130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
    e108:	9b01      	ldr	r3, [sp, #4]
    e10a:	9a00      	ldr	r2, [sp, #0]
    e10c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
    e110:	4a06      	ldr	r2, [pc, #24]	; (e12c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e112:	9b01      	ldr	r3, [sp, #4]
    e114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e118:	1c5a      	adds	r2, r3, #1
    e11a:	4904      	ldr	r1, [pc, #16]	; (e12c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
    e11c:	9b01      	ldr	r3, [sp, #4]
    e11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e122:	bf00      	nop
    e124:	b003      	add	sp, #12
    e126:	f85d fb04 	ldr.w	pc, [sp], #4
    e12a:	bf00      	nop
    e12c:	1fff9048 	.word	0x1fff9048
    e130:	1fff9044 	.word	0x1fff9044

0000e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
    e134:	b500      	push	{lr}
    e136:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e138:	f7f2 fd0e 	bl	b58 <Sys_GetCoreID>
    e13c:	4603      	mov	r3, r0
    e13e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
    e140:	4a0d      	ldr	r2, [pc, #52]	; (e178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e142:	9b01      	ldr	r3, [sp, #4]
    e144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e148:	1e5a      	subs	r2, r3, #1
    e14a:	490b      	ldr	r1, [pc, #44]	; (e178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e14c:	9b01      	ldr	r3, [sp, #4]
    e14e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
    e152:	4a0a      	ldr	r2, [pc, #40]	; (e17c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e15a:	f003 0301 	and.w	r3, r3, #1
    e15e:	2b00      	cmp	r3, #0
    e160:	d106      	bne.n	e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    e162:	4a05      	ldr	r2, [pc, #20]	; (e178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
    e164:	9b01      	ldr	r3, [sp, #4]
    e166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e16a:	2b00      	cmp	r3, #0
    e16c:	d100      	bne.n	e170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e16e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e170:	bf00      	nop
    e172:	b003      	add	sp, #12
    e174:	f85d fb04 	ldr.w	pc, [sp], #4
    e178:	1fff9048 	.word	0x1fff9048
    e17c:	1fff9044 	.word	0x1fff9044

0000e180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e180:	b500      	push	{lr}
    e182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e184:	f7f2 fce8 	bl	b58 <Sys_GetCoreID>
    e188:	4603      	mov	r3, r0
    e18a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
    e18c:	4a10      	ldr	r2, [pc, #64]	; (e1d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e18e:	9b01      	ldr	r3, [sp, #4]
    e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e194:	2b00      	cmp	r3, #0
    e196:	d10d      	bne.n	e1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e198:	f7f2 fbfc 	bl	994 <Adc_schm_read_msr>
    e19c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e19e:	9b00      	ldr	r3, [sp, #0]
    e1a0:	f003 0301 	and.w	r3, r3, #1
    e1a4:	2b00      	cmp	r3, #0
    e1a6:	d100      	bne.n	e1aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
    e1aa:	490a      	ldr	r1, [pc, #40]	; (e1d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
    e1ac:	9b01      	ldr	r3, [sp, #4]
    e1ae:	9a00      	ldr	r2, [sp, #0]
    e1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
    e1b4:	4a06      	ldr	r2, [pc, #24]	; (e1d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e1b6:	9b01      	ldr	r3, [sp, #4]
    e1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1bc:	1c5a      	adds	r2, r3, #1
    e1be:	4904      	ldr	r1, [pc, #16]	; (e1d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
    e1c0:	9b01      	ldr	r3, [sp, #4]
    e1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1c6:	bf00      	nop
    e1c8:	b003      	add	sp, #12
    e1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    e1ce:	bf00      	nop
    e1d0:	1fff9050 	.word	0x1fff9050
    e1d4:	1fff904c 	.word	0x1fff904c

0000e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
    e1d8:	b500      	push	{lr}
    e1da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1dc:	f7f2 fcbc 	bl	b58 <Sys_GetCoreID>
    e1e0:	4603      	mov	r3, r0
    e1e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
    e1e4:	4a0d      	ldr	r2, [pc, #52]	; (e21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e1e6:	9b01      	ldr	r3, [sp, #4]
    e1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ec:	1e5a      	subs	r2, r3, #1
    e1ee:	490b      	ldr	r1, [pc, #44]	; (e21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e1f0:	9b01      	ldr	r3, [sp, #4]
    e1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
    e1f6:	4a0a      	ldr	r2, [pc, #40]	; (e220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1fe:	f003 0301 	and.w	r3, r3, #1
    e202:	2b00      	cmp	r3, #0
    e204:	d106      	bne.n	e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    e206:	4a05      	ldr	r2, [pc, #20]	; (e21c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
    e208:	9b01      	ldr	r3, [sp, #4]
    e20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e20e:	2b00      	cmp	r3, #0
    e210:	d100      	bne.n	e214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e214:	bf00      	nop
    e216:	b003      	add	sp, #12
    e218:	f85d fb04 	ldr.w	pc, [sp], #4
    e21c:	1fff9050 	.word	0x1fff9050
    e220:	1fff904c 	.word	0x1fff904c

0000e224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e224:	b500      	push	{lr}
    e226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e228:	f7f2 fc96 	bl	b58 <Sys_GetCoreID>
    e22c:	4603      	mov	r3, r0
    e22e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
    e230:	4a10      	ldr	r2, [pc, #64]	; (e274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e232:	9b01      	ldr	r3, [sp, #4]
    e234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e238:	2b00      	cmp	r3, #0
    e23a:	d10d      	bne.n	e258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e23c:	f7f2 fbaa 	bl	994 <Adc_schm_read_msr>
    e240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e242:	9b00      	ldr	r3, [sp, #0]
    e244:	f003 0301 	and.w	r3, r3, #1
    e248:	2b00      	cmp	r3, #0
    e24a:	d100      	bne.n	e24e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e24c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
    e24e:	490a      	ldr	r1, [pc, #40]	; (e278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
    e250:	9b01      	ldr	r3, [sp, #4]
    e252:	9a00      	ldr	r2, [sp, #0]
    e254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
    e258:	4a06      	ldr	r2, [pc, #24]	; (e274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e25a:	9b01      	ldr	r3, [sp, #4]
    e25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e260:	1c5a      	adds	r2, r3, #1
    e262:	4904      	ldr	r1, [pc, #16]	; (e274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
    e264:	9b01      	ldr	r3, [sp, #4]
    e266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e26a:	bf00      	nop
    e26c:	b003      	add	sp, #12
    e26e:	f85d fb04 	ldr.w	pc, [sp], #4
    e272:	bf00      	nop
    e274:	1fff9058 	.word	0x1fff9058
    e278:	1fff9054 	.word	0x1fff9054

0000e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
    e27c:	b500      	push	{lr}
    e27e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e280:	f7f2 fc6a 	bl	b58 <Sys_GetCoreID>
    e284:	4603      	mov	r3, r0
    e286:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
    e288:	4a0d      	ldr	r2, [pc, #52]	; (e2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e28a:	9b01      	ldr	r3, [sp, #4]
    e28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e290:	1e5a      	subs	r2, r3, #1
    e292:	490b      	ldr	r1, [pc, #44]	; (e2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e294:	9b01      	ldr	r3, [sp, #4]
    e296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
    e29a:	4a0a      	ldr	r2, [pc, #40]	; (e2c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2a2:	f003 0301 	and.w	r3, r3, #1
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d106      	bne.n	e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    e2aa:	4a05      	ldr	r2, [pc, #20]	; (e2c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
    e2ac:	9b01      	ldr	r3, [sp, #4]
    e2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	d100      	bne.n	e2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2b8:	bf00      	nop
    e2ba:	b003      	add	sp, #12
    e2bc:	f85d fb04 	ldr.w	pc, [sp], #4
    e2c0:	1fff9058 	.word	0x1fff9058
    e2c4:	1fff9054 	.word	0x1fff9054

0000e2c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e2c8:	b500      	push	{lr}
    e2ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2cc:	f7f2 fc44 	bl	b58 <Sys_GetCoreID>
    e2d0:	4603      	mov	r3, r0
    e2d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
    e2d4:	4a10      	ldr	r2, [pc, #64]	; (e318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e2d6:	9b01      	ldr	r3, [sp, #4]
    e2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d10d      	bne.n	e2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2e0:	f7f2 fb58 	bl	994 <Adc_schm_read_msr>
    e2e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2e6:	9b00      	ldr	r3, [sp, #0]
    e2e8:	f003 0301 	and.w	r3, r3, #1
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	d100      	bne.n	e2f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
    e2f2:	490a      	ldr	r1, [pc, #40]	; (e31c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
    e2f4:	9b01      	ldr	r3, [sp, #4]
    e2f6:	9a00      	ldr	r2, [sp, #0]
    e2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
    e2fc:	4a06      	ldr	r2, [pc, #24]	; (e318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e2fe:	9b01      	ldr	r3, [sp, #4]
    e300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e304:	1c5a      	adds	r2, r3, #1
    e306:	4904      	ldr	r1, [pc, #16]	; (e318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
    e308:	9b01      	ldr	r3, [sp, #4]
    e30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e30e:	bf00      	nop
    e310:	b003      	add	sp, #12
    e312:	f85d fb04 	ldr.w	pc, [sp], #4
    e316:	bf00      	nop
    e318:	1fff9060 	.word	0x1fff9060
    e31c:	1fff905c 	.word	0x1fff905c

0000e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
    e320:	b500      	push	{lr}
    e322:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e324:	f7f2 fc18 	bl	b58 <Sys_GetCoreID>
    e328:	4603      	mov	r3, r0
    e32a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
    e32c:	4a0d      	ldr	r2, [pc, #52]	; (e364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e32e:	9b01      	ldr	r3, [sp, #4]
    e330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e334:	1e5a      	subs	r2, r3, #1
    e336:	490b      	ldr	r1, [pc, #44]	; (e364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e338:	9b01      	ldr	r3, [sp, #4]
    e33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
    e33e:	4a0a      	ldr	r2, [pc, #40]	; (e368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
    e340:	9b01      	ldr	r3, [sp, #4]
    e342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e346:	f003 0301 	and.w	r3, r3, #1
    e34a:	2b00      	cmp	r3, #0
    e34c:	d106      	bne.n	e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    e34e:	4a05      	ldr	r2, [pc, #20]	; (e364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
    e350:	9b01      	ldr	r3, [sp, #4]
    e352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e356:	2b00      	cmp	r3, #0
    e358:	d100      	bne.n	e35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e35a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e35c:	bf00      	nop
    e35e:	b003      	add	sp, #12
    e360:	f85d fb04 	ldr.w	pc, [sp], #4
    e364:	1fff9060 	.word	0x1fff9060
    e368:	1fff905c 	.word	0x1fff905c

0000e36c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e36c:	b500      	push	{lr}
    e36e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e370:	f7f2 fbf2 	bl	b58 <Sys_GetCoreID>
    e374:	4603      	mov	r3, r0
    e376:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
    e378:	4a10      	ldr	r2, [pc, #64]	; (e3bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e37a:	9b01      	ldr	r3, [sp, #4]
    e37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e380:	2b00      	cmp	r3, #0
    e382:	d10d      	bne.n	e3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e384:	f7f2 fb06 	bl	994 <Adc_schm_read_msr>
    e388:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e38a:	9b00      	ldr	r3, [sp, #0]
    e38c:	f003 0301 	and.w	r3, r3, #1
    e390:	2b00      	cmp	r3, #0
    e392:	d100      	bne.n	e396 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e394:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
    e396:	490a      	ldr	r1, [pc, #40]	; (e3c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
    e398:	9b01      	ldr	r3, [sp, #4]
    e39a:	9a00      	ldr	r2, [sp, #0]
    e39c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
    e3a0:	4a06      	ldr	r2, [pc, #24]	; (e3bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e3a2:	9b01      	ldr	r3, [sp, #4]
    e3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a8:	1c5a      	adds	r2, r3, #1
    e3aa:	4904      	ldr	r1, [pc, #16]	; (e3bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
    e3ac:	9b01      	ldr	r3, [sp, #4]
    e3ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3b2:	bf00      	nop
    e3b4:	b003      	add	sp, #12
    e3b6:	f85d fb04 	ldr.w	pc, [sp], #4
    e3ba:	bf00      	nop
    e3bc:	1fff9068 	.word	0x1fff9068
    e3c0:	1fff9064 	.word	0x1fff9064

0000e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
    e3c4:	b500      	push	{lr}
    e3c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3c8:	f7f2 fbc6 	bl	b58 <Sys_GetCoreID>
    e3cc:	4603      	mov	r3, r0
    e3ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
    e3d0:	4a0d      	ldr	r2, [pc, #52]	; (e408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e3d2:	9b01      	ldr	r3, [sp, #4]
    e3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d8:	1e5a      	subs	r2, r3, #1
    e3da:	490b      	ldr	r1, [pc, #44]	; (e408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e3dc:	9b01      	ldr	r3, [sp, #4]
    e3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
    e3e2:	4a0a      	ldr	r2, [pc, #40]	; (e40c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
    e3e4:	9b01      	ldr	r3, [sp, #4]
    e3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3ea:	f003 0301 	and.w	r3, r3, #1
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	d106      	bne.n	e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    e3f2:	4a05      	ldr	r2, [pc, #20]	; (e408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
    e3f4:	9b01      	ldr	r3, [sp, #4]
    e3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3fa:	2b00      	cmp	r3, #0
    e3fc:	d100      	bne.n	e400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e400:	bf00      	nop
    e402:	b003      	add	sp, #12
    e404:	f85d fb04 	ldr.w	pc, [sp], #4
    e408:	1fff9068 	.word	0x1fff9068
    e40c:	1fff9064 	.word	0x1fff9064

0000e410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e410:	b500      	push	{lr}
    e412:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e414:	f7f2 fba0 	bl	b58 <Sys_GetCoreID>
    e418:	4603      	mov	r3, r0
    e41a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
    e41c:	4a10      	ldr	r2, [pc, #64]	; (e460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e41e:	9b01      	ldr	r3, [sp, #4]
    e420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e424:	2b00      	cmp	r3, #0
    e426:	d10d      	bne.n	e444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e428:	f7f2 fab4 	bl	994 <Adc_schm_read_msr>
    e42c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e42e:	9b00      	ldr	r3, [sp, #0]
    e430:	f003 0301 	and.w	r3, r3, #1
    e434:	2b00      	cmp	r3, #0
    e436:	d100      	bne.n	e43a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e438:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
    e43a:	490a      	ldr	r1, [pc, #40]	; (e464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
    e43c:	9b01      	ldr	r3, [sp, #4]
    e43e:	9a00      	ldr	r2, [sp, #0]
    e440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
    e444:	4a06      	ldr	r2, [pc, #24]	; (e460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e446:	9b01      	ldr	r3, [sp, #4]
    e448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e44c:	1c5a      	adds	r2, r3, #1
    e44e:	4904      	ldr	r1, [pc, #16]	; (e460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
    e450:	9b01      	ldr	r3, [sp, #4]
    e452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e456:	bf00      	nop
    e458:	b003      	add	sp, #12
    e45a:	f85d fb04 	ldr.w	pc, [sp], #4
    e45e:	bf00      	nop
    e460:	1fff9070 	.word	0x1fff9070
    e464:	1fff906c 	.word	0x1fff906c

0000e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
    e468:	b500      	push	{lr}
    e46a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e46c:	f7f2 fb74 	bl	b58 <Sys_GetCoreID>
    e470:	4603      	mov	r3, r0
    e472:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
    e474:	4a0d      	ldr	r2, [pc, #52]	; (e4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e476:	9b01      	ldr	r3, [sp, #4]
    e478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e47c:	1e5a      	subs	r2, r3, #1
    e47e:	490b      	ldr	r1, [pc, #44]	; (e4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e480:	9b01      	ldr	r3, [sp, #4]
    e482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
    e486:	4a0a      	ldr	r2, [pc, #40]	; (e4b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48e:	f003 0301 	and.w	r3, r3, #1
    e492:	2b00      	cmp	r3, #0
    e494:	d106      	bne.n	e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    e496:	4a05      	ldr	r2, [pc, #20]	; (e4ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
    e498:	9b01      	ldr	r3, [sp, #4]
    e49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e49e:	2b00      	cmp	r3, #0
    e4a0:	d100      	bne.n	e4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4a4:	bf00      	nop
    e4a6:	b003      	add	sp, #12
    e4a8:	f85d fb04 	ldr.w	pc, [sp], #4
    e4ac:	1fff9070 	.word	0x1fff9070
    e4b0:	1fff906c 	.word	0x1fff906c

0000e4b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e4b4:	b500      	push	{lr}
    e4b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b8:	f7f2 fb4e 	bl	b58 <Sys_GetCoreID>
    e4bc:	4603      	mov	r3, r0
    e4be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
    e4c0:	4a10      	ldr	r2, [pc, #64]	; (e504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e4c2:	9b01      	ldr	r3, [sp, #4]
    e4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d10d      	bne.n	e4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4cc:	f7f2 fa62 	bl	994 <Adc_schm_read_msr>
    e4d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4d2:	9b00      	ldr	r3, [sp, #0]
    e4d4:	f003 0301 	and.w	r3, r3, #1
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d100      	bne.n	e4de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
    e4de:	490a      	ldr	r1, [pc, #40]	; (e508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
    e4e0:	9b01      	ldr	r3, [sp, #4]
    e4e2:	9a00      	ldr	r2, [sp, #0]
    e4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
    e4e8:	4a06      	ldr	r2, [pc, #24]	; (e504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e4ea:	9b01      	ldr	r3, [sp, #4]
    e4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4f0:	1c5a      	adds	r2, r3, #1
    e4f2:	4904      	ldr	r1, [pc, #16]	; (e504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
    e4f4:	9b01      	ldr	r3, [sp, #4]
    e4f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4fa:	bf00      	nop
    e4fc:	b003      	add	sp, #12
    e4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    e502:	bf00      	nop
    e504:	1fff9078 	.word	0x1fff9078
    e508:	1fff9074 	.word	0x1fff9074

0000e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
    e50c:	b500      	push	{lr}
    e50e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e510:	f7f2 fb22 	bl	b58 <Sys_GetCoreID>
    e514:	4603      	mov	r3, r0
    e516:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
    e518:	4a0d      	ldr	r2, [pc, #52]	; (e550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e51a:	9b01      	ldr	r3, [sp, #4]
    e51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e520:	1e5a      	subs	r2, r3, #1
    e522:	490b      	ldr	r1, [pc, #44]	; (e550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e524:	9b01      	ldr	r3, [sp, #4]
    e526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
    e52a:	4a0a      	ldr	r2, [pc, #40]	; (e554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e532:	f003 0301 	and.w	r3, r3, #1
    e536:	2b00      	cmp	r3, #0
    e538:	d106      	bne.n	e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    e53a:	4a05      	ldr	r2, [pc, #20]	; (e550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
    e53c:	9b01      	ldr	r3, [sp, #4]
    e53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e542:	2b00      	cmp	r3, #0
    e544:	d100      	bne.n	e548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e546:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e548:	bf00      	nop
    e54a:	b003      	add	sp, #12
    e54c:	f85d fb04 	ldr.w	pc, [sp], #4
    e550:	1fff9078 	.word	0x1fff9078
    e554:	1fff9074 	.word	0x1fff9074

0000e558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e558:	b500      	push	{lr}
    e55a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e55c:	f7f2 fafc 	bl	b58 <Sys_GetCoreID>
    e560:	4603      	mov	r3, r0
    e562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
    e564:	4a10      	ldr	r2, [pc, #64]	; (e5a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e566:	9b01      	ldr	r3, [sp, #4]
    e568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e56c:	2b00      	cmp	r3, #0
    e56e:	d10d      	bne.n	e58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e570:	f7f2 fa10 	bl	994 <Adc_schm_read_msr>
    e574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e576:	9b00      	ldr	r3, [sp, #0]
    e578:	f003 0301 	and.w	r3, r3, #1
    e57c:	2b00      	cmp	r3, #0
    e57e:	d100      	bne.n	e582 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
    e582:	490a      	ldr	r1, [pc, #40]	; (e5ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
    e584:	9b01      	ldr	r3, [sp, #4]
    e586:	9a00      	ldr	r2, [sp, #0]
    e588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
    e58c:	4a06      	ldr	r2, [pc, #24]	; (e5a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e58e:	9b01      	ldr	r3, [sp, #4]
    e590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e594:	1c5a      	adds	r2, r3, #1
    e596:	4904      	ldr	r1, [pc, #16]	; (e5a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
    e598:	9b01      	ldr	r3, [sp, #4]
    e59a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e59e:	bf00      	nop
    e5a0:	b003      	add	sp, #12
    e5a2:	f85d fb04 	ldr.w	pc, [sp], #4
    e5a6:	bf00      	nop
    e5a8:	1fff9080 	.word	0x1fff9080
    e5ac:	1fff907c 	.word	0x1fff907c

0000e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
    e5b0:	b500      	push	{lr}
    e5b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5b4:	f7f2 fad0 	bl	b58 <Sys_GetCoreID>
    e5b8:	4603      	mov	r3, r0
    e5ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
    e5bc:	4a0d      	ldr	r2, [pc, #52]	; (e5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e5be:	9b01      	ldr	r3, [sp, #4]
    e5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5c4:	1e5a      	subs	r2, r3, #1
    e5c6:	490b      	ldr	r1, [pc, #44]	; (e5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e5c8:	9b01      	ldr	r3, [sp, #4]
    e5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
    e5ce:	4a0a      	ldr	r2, [pc, #40]	; (e5f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
    e5d0:	9b01      	ldr	r3, [sp, #4]
    e5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5d6:	f003 0301 	and.w	r3, r3, #1
    e5da:	2b00      	cmp	r3, #0
    e5dc:	d106      	bne.n	e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    e5de:	4a05      	ldr	r2, [pc, #20]	; (e5f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
    e5e0:	9b01      	ldr	r3, [sp, #4]
    e5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d100      	bne.n	e5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5ec:	bf00      	nop
    e5ee:	b003      	add	sp, #12
    e5f0:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f4:	1fff9080 	.word	0x1fff9080
    e5f8:	1fff907c 	.word	0x1fff907c

0000e5fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e5fc:	b500      	push	{lr}
    e5fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e600:	f7f2 faaa 	bl	b58 <Sys_GetCoreID>
    e604:	4603      	mov	r3, r0
    e606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
    e608:	4a10      	ldr	r2, [pc, #64]	; (e64c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e60a:	9b01      	ldr	r3, [sp, #4]
    e60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e610:	2b00      	cmp	r3, #0
    e612:	d10d      	bne.n	e630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e614:	f7f2 f9be 	bl	994 <Adc_schm_read_msr>
    e618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e61a:	9b00      	ldr	r3, [sp, #0]
    e61c:	f003 0301 	and.w	r3, r3, #1
    e620:	2b00      	cmp	r3, #0
    e622:	d100      	bne.n	e626 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
    e626:	490a      	ldr	r1, [pc, #40]	; (e650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
    e628:	9b01      	ldr	r3, [sp, #4]
    e62a:	9a00      	ldr	r2, [sp, #0]
    e62c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
    e630:	4a06      	ldr	r2, [pc, #24]	; (e64c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e632:	9b01      	ldr	r3, [sp, #4]
    e634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e638:	1c5a      	adds	r2, r3, #1
    e63a:	4904      	ldr	r1, [pc, #16]	; (e64c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
    e63c:	9b01      	ldr	r3, [sp, #4]
    e63e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e642:	bf00      	nop
    e644:	b003      	add	sp, #12
    e646:	f85d fb04 	ldr.w	pc, [sp], #4
    e64a:	bf00      	nop
    e64c:	1fff9088 	.word	0x1fff9088
    e650:	1fff9084 	.word	0x1fff9084

0000e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
    e654:	b500      	push	{lr}
    e656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e658:	f7f2 fa7e 	bl	b58 <Sys_GetCoreID>
    e65c:	4603      	mov	r3, r0
    e65e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
    e660:	4a0d      	ldr	r2, [pc, #52]	; (e698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e662:	9b01      	ldr	r3, [sp, #4]
    e664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e668:	1e5a      	subs	r2, r3, #1
    e66a:	490b      	ldr	r1, [pc, #44]	; (e698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e66c:	9b01      	ldr	r3, [sp, #4]
    e66e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
    e672:	4a0a      	ldr	r2, [pc, #40]	; (e69c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e67a:	f003 0301 	and.w	r3, r3, #1
    e67e:	2b00      	cmp	r3, #0
    e680:	d106      	bne.n	e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    e682:	4a05      	ldr	r2, [pc, #20]	; (e698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
    e684:	9b01      	ldr	r3, [sp, #4]
    e686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e68a:	2b00      	cmp	r3, #0
    e68c:	d100      	bne.n	e690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e68e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e690:	bf00      	nop
    e692:	b003      	add	sp, #12
    e694:	f85d fb04 	ldr.w	pc, [sp], #4
    e698:	1fff9088 	.word	0x1fff9088
    e69c:	1fff9084 	.word	0x1fff9084

0000e6a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e6a0:	b500      	push	{lr}
    e6a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6a4:	f7f2 fa58 	bl	b58 <Sys_GetCoreID>
    e6a8:	4603      	mov	r3, r0
    e6aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
    e6ac:	4a10      	ldr	r2, [pc, #64]	; (e6f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e6ae:	9b01      	ldr	r3, [sp, #4]
    e6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b4:	2b00      	cmp	r3, #0
    e6b6:	d10d      	bne.n	e6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6b8:	f7f2 f96c 	bl	994 <Adc_schm_read_msr>
    e6bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6be:	9b00      	ldr	r3, [sp, #0]
    e6c0:	f003 0301 	and.w	r3, r3, #1
    e6c4:	2b00      	cmp	r3, #0
    e6c6:	d100      	bne.n	e6ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
    e6ca:	490a      	ldr	r1, [pc, #40]	; (e6f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
    e6cc:	9b01      	ldr	r3, [sp, #4]
    e6ce:	9a00      	ldr	r2, [sp, #0]
    e6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
    e6d4:	4a06      	ldr	r2, [pc, #24]	; (e6f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e6d6:	9b01      	ldr	r3, [sp, #4]
    e6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6dc:	1c5a      	adds	r2, r3, #1
    e6de:	4904      	ldr	r1, [pc, #16]	; (e6f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
    e6e0:	9b01      	ldr	r3, [sp, #4]
    e6e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6e6:	bf00      	nop
    e6e8:	b003      	add	sp, #12
    e6ea:	f85d fb04 	ldr.w	pc, [sp], #4
    e6ee:	bf00      	nop
    e6f0:	1fff9090 	.word	0x1fff9090
    e6f4:	1fff908c 	.word	0x1fff908c

0000e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
    e6f8:	b500      	push	{lr}
    e6fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6fc:	f7f2 fa2c 	bl	b58 <Sys_GetCoreID>
    e700:	4603      	mov	r3, r0
    e702:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
    e704:	4a0d      	ldr	r2, [pc, #52]	; (e73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e706:	9b01      	ldr	r3, [sp, #4]
    e708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e70c:	1e5a      	subs	r2, r3, #1
    e70e:	490b      	ldr	r1, [pc, #44]	; (e73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e710:	9b01      	ldr	r3, [sp, #4]
    e712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
    e716:	4a0a      	ldr	r2, [pc, #40]	; (e740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
    e718:	9b01      	ldr	r3, [sp, #4]
    e71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e71e:	f003 0301 	and.w	r3, r3, #1
    e722:	2b00      	cmp	r3, #0
    e724:	d106      	bne.n	e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    e726:	4a05      	ldr	r2, [pc, #20]	; (e73c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
    e728:	9b01      	ldr	r3, [sp, #4]
    e72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e72e:	2b00      	cmp	r3, #0
    e730:	d100      	bne.n	e734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e734:	bf00      	nop
    e736:	b003      	add	sp, #12
    e738:	f85d fb04 	ldr.w	pc, [sp], #4
    e73c:	1fff9090 	.word	0x1fff9090
    e740:	1fff908c 	.word	0x1fff908c

0000e744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e744:	b500      	push	{lr}
    e746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e748:	f7f2 fa06 	bl	b58 <Sys_GetCoreID>
    e74c:	4603      	mov	r3, r0
    e74e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
    e750:	4a10      	ldr	r2, [pc, #64]	; (e794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e752:	9b01      	ldr	r3, [sp, #4]
    e754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e758:	2b00      	cmp	r3, #0
    e75a:	d10d      	bne.n	e778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e75c:	f7f2 f91a 	bl	994 <Adc_schm_read_msr>
    e760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e762:	9b00      	ldr	r3, [sp, #0]
    e764:	f003 0301 	and.w	r3, r3, #1
    e768:	2b00      	cmp	r3, #0
    e76a:	d100      	bne.n	e76e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e76c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
    e76e:	490a      	ldr	r1, [pc, #40]	; (e798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
    e770:	9b01      	ldr	r3, [sp, #4]
    e772:	9a00      	ldr	r2, [sp, #0]
    e774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
    e778:	4a06      	ldr	r2, [pc, #24]	; (e794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e77a:	9b01      	ldr	r3, [sp, #4]
    e77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e780:	1c5a      	adds	r2, r3, #1
    e782:	4904      	ldr	r1, [pc, #16]	; (e794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
    e784:	9b01      	ldr	r3, [sp, #4]
    e786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e78a:	bf00      	nop
    e78c:	b003      	add	sp, #12
    e78e:	f85d fb04 	ldr.w	pc, [sp], #4
    e792:	bf00      	nop
    e794:	1fff9098 	.word	0x1fff9098
    e798:	1fff9094 	.word	0x1fff9094

0000e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
    e79c:	b500      	push	{lr}
    e79e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7a0:	f7f2 f9da 	bl	b58 <Sys_GetCoreID>
    e7a4:	4603      	mov	r3, r0
    e7a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
    e7a8:	4a0d      	ldr	r2, [pc, #52]	; (e7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e7aa:	9b01      	ldr	r3, [sp, #4]
    e7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b0:	1e5a      	subs	r2, r3, #1
    e7b2:	490b      	ldr	r1, [pc, #44]	; (e7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e7b4:	9b01      	ldr	r3, [sp, #4]
    e7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
    e7ba:	4a0a      	ldr	r2, [pc, #40]	; (e7e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
    e7bc:	9b01      	ldr	r3, [sp, #4]
    e7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7c2:	f003 0301 	and.w	r3, r3, #1
    e7c6:	2b00      	cmp	r3, #0
    e7c8:	d106      	bne.n	e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    e7ca:	4a05      	ldr	r2, [pc, #20]	; (e7e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
    e7cc:	9b01      	ldr	r3, [sp, #4]
    e7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7d2:	2b00      	cmp	r3, #0
    e7d4:	d100      	bne.n	e7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7d8:	bf00      	nop
    e7da:	b003      	add	sp, #12
    e7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    e7e0:	1fff9098 	.word	0x1fff9098
    e7e4:	1fff9094 	.word	0x1fff9094

0000e7e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e7e8:	b500      	push	{lr}
    e7ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7ec:	f7f2 f9b4 	bl	b58 <Sys_GetCoreID>
    e7f0:	4603      	mov	r3, r0
    e7f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
    e7f4:	4a10      	ldr	r2, [pc, #64]	; (e838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e7f6:	9b01      	ldr	r3, [sp, #4]
    e7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	d10d      	bne.n	e81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e800:	f7f2 f8c8 	bl	994 <Adc_schm_read_msr>
    e804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e806:	9b00      	ldr	r3, [sp, #0]
    e808:	f003 0301 	and.w	r3, r3, #1
    e80c:	2b00      	cmp	r3, #0
    e80e:	d100      	bne.n	e812 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
    e812:	490a      	ldr	r1, [pc, #40]	; (e83c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
    e814:	9b01      	ldr	r3, [sp, #4]
    e816:	9a00      	ldr	r2, [sp, #0]
    e818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
    e81c:	4a06      	ldr	r2, [pc, #24]	; (e838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e81e:	9b01      	ldr	r3, [sp, #4]
    e820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e824:	1c5a      	adds	r2, r3, #1
    e826:	4904      	ldr	r1, [pc, #16]	; (e838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
    e828:	9b01      	ldr	r3, [sp, #4]
    e82a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e82e:	bf00      	nop
    e830:	b003      	add	sp, #12
    e832:	f85d fb04 	ldr.w	pc, [sp], #4
    e836:	bf00      	nop
    e838:	1fff90a0 	.word	0x1fff90a0
    e83c:	1fff909c 	.word	0x1fff909c

0000e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
    e840:	b500      	push	{lr}
    e842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e844:	f7f2 f988 	bl	b58 <Sys_GetCoreID>
    e848:	4603      	mov	r3, r0
    e84a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
    e84c:	4a0d      	ldr	r2, [pc, #52]	; (e884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e84e:	9b01      	ldr	r3, [sp, #4]
    e850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e854:	1e5a      	subs	r2, r3, #1
    e856:	490b      	ldr	r1, [pc, #44]	; (e884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e858:	9b01      	ldr	r3, [sp, #4]
    e85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
    e85e:	4a0a      	ldr	r2, [pc, #40]	; (e888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
    e860:	9b01      	ldr	r3, [sp, #4]
    e862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e866:	f003 0301 	and.w	r3, r3, #1
    e86a:	2b00      	cmp	r3, #0
    e86c:	d106      	bne.n	e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    e86e:	4a05      	ldr	r2, [pc, #20]	; (e884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
    e870:	9b01      	ldr	r3, [sp, #4]
    e872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e876:	2b00      	cmp	r3, #0
    e878:	d100      	bne.n	e87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e87a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e87c:	bf00      	nop
    e87e:	b003      	add	sp, #12
    e880:	f85d fb04 	ldr.w	pc, [sp], #4
    e884:	1fff90a0 	.word	0x1fff90a0
    e888:	1fff909c 	.word	0x1fff909c

0000e88c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e88c:	b500      	push	{lr}
    e88e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e890:	f7f2 f962 	bl	b58 <Sys_GetCoreID>
    e894:	4603      	mov	r3, r0
    e896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
    e898:	4a10      	ldr	r2, [pc, #64]	; (e8dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e89a:	9b01      	ldr	r3, [sp, #4]
    e89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d10d      	bne.n	e8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8a4:	f7f2 f876 	bl	994 <Adc_schm_read_msr>
    e8a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8aa:	9b00      	ldr	r3, [sp, #0]
    e8ac:	f003 0301 	and.w	r3, r3, #1
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	d100      	bne.n	e8b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
    e8b6:	490a      	ldr	r1, [pc, #40]	; (e8e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
    e8b8:	9b01      	ldr	r3, [sp, #4]
    e8ba:	9a00      	ldr	r2, [sp, #0]
    e8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
    e8c0:	4a06      	ldr	r2, [pc, #24]	; (e8dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e8c2:	9b01      	ldr	r3, [sp, #4]
    e8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c8:	1c5a      	adds	r2, r3, #1
    e8ca:	4904      	ldr	r1, [pc, #16]	; (e8dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
    e8cc:	9b01      	ldr	r3, [sp, #4]
    e8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8d2:	bf00      	nop
    e8d4:	b003      	add	sp, #12
    e8d6:	f85d fb04 	ldr.w	pc, [sp], #4
    e8da:	bf00      	nop
    e8dc:	1fff90a8 	.word	0x1fff90a8
    e8e0:	1fff90a4 	.word	0x1fff90a4

0000e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
    e8e4:	b500      	push	{lr}
    e8e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8e8:	f7f2 f936 	bl	b58 <Sys_GetCoreID>
    e8ec:	4603      	mov	r3, r0
    e8ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
    e8f0:	4a0d      	ldr	r2, [pc, #52]	; (e928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e8f2:	9b01      	ldr	r3, [sp, #4]
    e8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8f8:	1e5a      	subs	r2, r3, #1
    e8fa:	490b      	ldr	r1, [pc, #44]	; (e928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e8fc:	9b01      	ldr	r3, [sp, #4]
    e8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
    e902:	4a0a      	ldr	r2, [pc, #40]	; (e92c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e90a:	f003 0301 	and.w	r3, r3, #1
    e90e:	2b00      	cmp	r3, #0
    e910:	d106      	bne.n	e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    e912:	4a05      	ldr	r2, [pc, #20]	; (e928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
    e914:	9b01      	ldr	r3, [sp, #4]
    e916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e91a:	2b00      	cmp	r3, #0
    e91c:	d100      	bne.n	e920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e91e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e920:	bf00      	nop
    e922:	b003      	add	sp, #12
    e924:	f85d fb04 	ldr.w	pc, [sp], #4
    e928:	1fff90a8 	.word	0x1fff90a8
    e92c:	1fff90a4 	.word	0x1fff90a4

0000e930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e930:	b500      	push	{lr}
    e932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e934:	f7f2 f910 	bl	b58 <Sys_GetCoreID>
    e938:	4603      	mov	r3, r0
    e93a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
    e93c:	4a10      	ldr	r2, [pc, #64]	; (e980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e93e:	9b01      	ldr	r3, [sp, #4]
    e940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e944:	2b00      	cmp	r3, #0
    e946:	d10d      	bne.n	e964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e948:	f7f2 f824 	bl	994 <Adc_schm_read_msr>
    e94c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e94e:	9b00      	ldr	r3, [sp, #0]
    e950:	f003 0301 	and.w	r3, r3, #1
    e954:	2b00      	cmp	r3, #0
    e956:	d100      	bne.n	e95a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
    e95a:	490a      	ldr	r1, [pc, #40]	; (e984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
    e95c:	9b01      	ldr	r3, [sp, #4]
    e95e:	9a00      	ldr	r2, [sp, #0]
    e960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
    e964:	4a06      	ldr	r2, [pc, #24]	; (e980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e966:	9b01      	ldr	r3, [sp, #4]
    e968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e96c:	1c5a      	adds	r2, r3, #1
    e96e:	4904      	ldr	r1, [pc, #16]	; (e980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
    e970:	9b01      	ldr	r3, [sp, #4]
    e972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e976:	bf00      	nop
    e978:	b003      	add	sp, #12
    e97a:	f85d fb04 	ldr.w	pc, [sp], #4
    e97e:	bf00      	nop
    e980:	1fff90b0 	.word	0x1fff90b0
    e984:	1fff90ac 	.word	0x1fff90ac

0000e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
    e988:	b500      	push	{lr}
    e98a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e98c:	f7f2 f8e4 	bl	b58 <Sys_GetCoreID>
    e990:	4603      	mov	r3, r0
    e992:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
    e994:	4a0d      	ldr	r2, [pc, #52]	; (e9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e996:	9b01      	ldr	r3, [sp, #4]
    e998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e99c:	1e5a      	subs	r2, r3, #1
    e99e:	490b      	ldr	r1, [pc, #44]	; (e9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e9a0:	9b01      	ldr	r3, [sp, #4]
    e9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
    e9a6:	4a0a      	ldr	r2, [pc, #40]	; (e9d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ae:	f003 0301 	and.w	r3, r3, #1
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d106      	bne.n	e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    e9b6:	4a05      	ldr	r2, [pc, #20]	; (e9cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
    e9b8:	9b01      	ldr	r3, [sp, #4]
    e9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9be:	2b00      	cmp	r3, #0
    e9c0:	d100      	bne.n	e9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9c4:	bf00      	nop
    e9c6:	b003      	add	sp, #12
    e9c8:	f85d fb04 	ldr.w	pc, [sp], #4
    e9cc:	1fff90b0 	.word	0x1fff90b0
    e9d0:	1fff90ac 	.word	0x1fff90ac

0000e9d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    e9d4:	b500      	push	{lr}
    e9d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d8:	f7f2 f8be 	bl	b58 <Sys_GetCoreID>
    e9dc:	4603      	mov	r3, r0
    e9de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
    e9e0:	4a10      	ldr	r2, [pc, #64]	; (ea24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    e9e2:	9b01      	ldr	r3, [sp, #4]
    e9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e8:	2b00      	cmp	r3, #0
    e9ea:	d10d      	bne.n	ea08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9ec:	f7f1 ffd2 	bl	994 <Adc_schm_read_msr>
    e9f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9f2:	9b00      	ldr	r3, [sp, #0]
    e9f4:	f003 0301 	and.w	r3, r3, #1
    e9f8:	2b00      	cmp	r3, #0
    e9fa:	d100      	bne.n	e9fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
    e9fe:	490a      	ldr	r1, [pc, #40]	; (ea28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
    ea00:	9b01      	ldr	r3, [sp, #4]
    ea02:	9a00      	ldr	r2, [sp, #0]
    ea04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
    ea08:	4a06      	ldr	r2, [pc, #24]	; (ea24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ea0a:	9b01      	ldr	r3, [sp, #4]
    ea0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea10:	1c5a      	adds	r2, r3, #1
    ea12:	4904      	ldr	r1, [pc, #16]	; (ea24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
    ea14:	9b01      	ldr	r3, [sp, #4]
    ea16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea1a:	bf00      	nop
    ea1c:	b003      	add	sp, #12
    ea1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea22:	bf00      	nop
    ea24:	1fff90b8 	.word	0x1fff90b8
    ea28:	1fff90b4 	.word	0x1fff90b4

0000ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
    ea2c:	b500      	push	{lr}
    ea2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea30:	f7f2 f892 	bl	b58 <Sys_GetCoreID>
    ea34:	4603      	mov	r3, r0
    ea36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
    ea38:	4a0d      	ldr	r2, [pc, #52]	; (ea70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ea3a:	9b01      	ldr	r3, [sp, #4]
    ea3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea40:	1e5a      	subs	r2, r3, #1
    ea42:	490b      	ldr	r1, [pc, #44]	; (ea70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ea44:	9b01      	ldr	r3, [sp, #4]
    ea46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
    ea4a:	4a0a      	ldr	r2, [pc, #40]	; (ea74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea52:	f003 0301 	and.w	r3, r3, #1
    ea56:	2b00      	cmp	r3, #0
    ea58:	d106      	bne.n	ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    ea5a:	4a05      	ldr	r2, [pc, #20]	; (ea70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
    ea5c:	9b01      	ldr	r3, [sp, #4]
    ea5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea62:	2b00      	cmp	r3, #0
    ea64:	d100      	bne.n	ea68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea68:	bf00      	nop
    ea6a:	b003      	add	sp, #12
    ea6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ea70:	1fff90b8 	.word	0x1fff90b8
    ea74:	1fff90b4 	.word	0x1fff90b4

0000ea78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ea78:	b500      	push	{lr}
    ea7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea7c:	f7f2 f86c 	bl	b58 <Sys_GetCoreID>
    ea80:	4603      	mov	r3, r0
    ea82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
    ea84:	4a10      	ldr	r2, [pc, #64]	; (eac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    ea86:	9b01      	ldr	r3, [sp, #4]
    ea88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d10d      	bne.n	eaac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea90:	f7f1 ff80 	bl	994 <Adc_schm_read_msr>
    ea94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea96:	9b00      	ldr	r3, [sp, #0]
    ea98:	f003 0301 	and.w	r3, r3, #1
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	d100      	bne.n	eaa2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eaa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
    eaa2:	490a      	ldr	r1, [pc, #40]	; (eacc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
    eaa4:	9b01      	ldr	r3, [sp, #4]
    eaa6:	9a00      	ldr	r2, [sp, #0]
    eaa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
    eaac:	4a06      	ldr	r2, [pc, #24]	; (eac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eaae:	9b01      	ldr	r3, [sp, #4]
    eab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eab4:	1c5a      	adds	r2, r3, #1
    eab6:	4904      	ldr	r1, [pc, #16]	; (eac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
    eab8:	9b01      	ldr	r3, [sp, #4]
    eaba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eabe:	bf00      	nop
    eac0:	b003      	add	sp, #12
    eac2:	f85d fb04 	ldr.w	pc, [sp], #4
    eac6:	bf00      	nop
    eac8:	1fff90c0 	.word	0x1fff90c0
    eacc:	1fff90bc 	.word	0x1fff90bc

0000ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
    ead0:	b500      	push	{lr}
    ead2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ead4:	f7f2 f840 	bl	b58 <Sys_GetCoreID>
    ead8:	4603      	mov	r3, r0
    eada:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
    eadc:	4a0d      	ldr	r2, [pc, #52]	; (eb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eade:	9b01      	ldr	r3, [sp, #4]
    eae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eae4:	1e5a      	subs	r2, r3, #1
    eae6:	490b      	ldr	r1, [pc, #44]	; (eb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eae8:	9b01      	ldr	r3, [sp, #4]
    eaea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
    eaee:	4a0a      	ldr	r2, [pc, #40]	; (eb18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
    eaf0:	9b01      	ldr	r3, [sp, #4]
    eaf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaf6:	f003 0301 	and.w	r3, r3, #1
    eafa:	2b00      	cmp	r3, #0
    eafc:	d106      	bne.n	eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    eafe:	4a05      	ldr	r2, [pc, #20]	; (eb14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
    eb00:	9b01      	ldr	r3, [sp, #4]
    eb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb06:	2b00      	cmp	r3, #0
    eb08:	d100      	bne.n	eb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb0c:	bf00      	nop
    eb0e:	b003      	add	sp, #12
    eb10:	f85d fb04 	ldr.w	pc, [sp], #4
    eb14:	1fff90c0 	.word	0x1fff90c0
    eb18:	1fff90bc 	.word	0x1fff90bc

0000eb1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    eb1c:	b500      	push	{lr}
    eb1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb20:	f7f2 f81a 	bl	b58 <Sys_GetCoreID>
    eb24:	4603      	mov	r3, r0
    eb26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    eb28:	4a10      	ldr	r2, [pc, #64]	; (eb6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eb2a:	9b01      	ldr	r3, [sp, #4]
    eb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb30:	2b00      	cmp	r3, #0
    eb32:	d10d      	bne.n	eb50 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb34:	f7f1 ff37 	bl	9a6 <Mcu_schm_read_msr>
    eb38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb3a:	9b00      	ldr	r3, [sp, #0]
    eb3c:	f003 0301 	and.w	r3, r3, #1
    eb40:	2b00      	cmp	r3, #0
    eb42:	d100      	bne.n	eb46 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    eb46:	490a      	ldr	r1, [pc, #40]	; (eb70 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    eb48:	9b01      	ldr	r3, [sp, #4]
    eb4a:	9a00      	ldr	r2, [sp, #0]
    eb4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    eb50:	4a06      	ldr	r2, [pc, #24]	; (eb6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eb52:	9b01      	ldr	r3, [sp, #4]
    eb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb58:	1c5a      	adds	r2, r3, #1
    eb5a:	4904      	ldr	r1, [pc, #16]	; (eb6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    eb5c:	9b01      	ldr	r3, [sp, #4]
    eb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb62:	bf00      	nop
    eb64:	b003      	add	sp, #12
    eb66:	f85d fb04 	ldr.w	pc, [sp], #4
    eb6a:	bf00      	nop
    eb6c:	1fff90c8 	.word	0x1fff90c8
    eb70:	1fff90c4 	.word	0x1fff90c4

0000eb74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    eb74:	b500      	push	{lr}
    eb76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb78:	f7f1 ffee 	bl	b58 <Sys_GetCoreID>
    eb7c:	4603      	mov	r3, r0
    eb7e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    eb80:	4a0d      	ldr	r2, [pc, #52]	; (ebb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eb82:	9b01      	ldr	r3, [sp, #4]
    eb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb88:	1e5a      	subs	r2, r3, #1
    eb8a:	490b      	ldr	r1, [pc, #44]	; (ebb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eb8c:	9b01      	ldr	r3, [sp, #4]
    eb8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    eb92:	4a0a      	ldr	r2, [pc, #40]	; (ebbc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    eb94:	9b01      	ldr	r3, [sp, #4]
    eb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb9a:	f003 0301 	and.w	r3, r3, #1
    eb9e:	2b00      	cmp	r3, #0
    eba0:	d106      	bne.n	ebb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    eba2:	4a05      	ldr	r2, [pc, #20]	; (ebb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    eba4:	9b01      	ldr	r3, [sp, #4]
    eba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebaa:	2b00      	cmp	r3, #0
    ebac:	d100      	bne.n	ebb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ebae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ebb0:	bf00      	nop
    ebb2:	b003      	add	sp, #12
    ebb4:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb8:	1fff90c8 	.word	0x1fff90c8
    ebbc:	1fff90c4 	.word	0x1fff90c4

0000ebc0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ebc0:	b500      	push	{lr}
    ebc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebc4:	f7f1 ffc8 	bl	b58 <Sys_GetCoreID>
    ebc8:	4603      	mov	r3, r0
    ebca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    ebcc:	4a10      	ldr	r2, [pc, #64]	; (ec10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ebce:	9b01      	ldr	r3, [sp, #4]
    ebd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d10d      	bne.n	ebf4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ebd8:	f7f1 fee5 	bl	9a6 <Mcu_schm_read_msr>
    ebdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ebde:	9b00      	ldr	r3, [sp, #0]
    ebe0:	f003 0301 	and.w	r3, r3, #1
    ebe4:	2b00      	cmp	r3, #0
    ebe6:	d100      	bne.n	ebea <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ebe8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ebea:	490a      	ldr	r1, [pc, #40]	; (ec14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    ebec:	9b01      	ldr	r3, [sp, #4]
    ebee:	9a00      	ldr	r2, [sp, #0]
    ebf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    ebf4:	4a06      	ldr	r2, [pc, #24]	; (ec10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ebf6:	9b01      	ldr	r3, [sp, #4]
    ebf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebfc:	1c5a      	adds	r2, r3, #1
    ebfe:	4904      	ldr	r1, [pc, #16]	; (ec10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ec00:	9b01      	ldr	r3, [sp, #4]
    ec02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec06:	bf00      	nop
    ec08:	b003      	add	sp, #12
    ec0a:	f85d fb04 	ldr.w	pc, [sp], #4
    ec0e:	bf00      	nop
    ec10:	1fff90d0 	.word	0x1fff90d0
    ec14:	1fff90cc 	.word	0x1fff90cc

0000ec18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ec18:	b500      	push	{lr}
    ec1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec1c:	f7f1 ff9c 	bl	b58 <Sys_GetCoreID>
    ec20:	4603      	mov	r3, r0
    ec22:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    ec24:	4a0d      	ldr	r2, [pc, #52]	; (ec5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ec26:	9b01      	ldr	r3, [sp, #4]
    ec28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec2c:	1e5a      	subs	r2, r3, #1
    ec2e:	490b      	ldr	r1, [pc, #44]	; (ec5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ec30:	9b01      	ldr	r3, [sp, #4]
    ec32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ec36:	4a0a      	ldr	r2, [pc, #40]	; (ec60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec3e:	f003 0301 	and.w	r3, r3, #1
    ec42:	2b00      	cmp	r3, #0
    ec44:	d106      	bne.n	ec54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    ec46:	4a05      	ldr	r2, [pc, #20]	; (ec5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ec48:	9b01      	ldr	r3, [sp, #4]
    ec4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec4e:	2b00      	cmp	r3, #0
    ec50:	d100      	bne.n	ec54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec54:	bf00      	nop
    ec56:	b003      	add	sp, #12
    ec58:	f85d fb04 	ldr.w	pc, [sp], #4
    ec5c:	1fff90d0 	.word	0x1fff90d0
    ec60:	1fff90cc 	.word	0x1fff90cc

0000ec64 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ec64:	b500      	push	{lr}
    ec66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec68:	f7f1 ff76 	bl	b58 <Sys_GetCoreID>
    ec6c:	4603      	mov	r3, r0
    ec6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    ec70:	4a10      	ldr	r2, [pc, #64]	; (ecb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ec72:	9b01      	ldr	r3, [sp, #4]
    ec74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d10d      	bne.n	ec98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec7c:	f7f1 fe93 	bl	9a6 <Mcu_schm_read_msr>
    ec80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec82:	9b00      	ldr	r3, [sp, #0]
    ec84:	f003 0301 	and.w	r3, r3, #1
    ec88:	2b00      	cmp	r3, #0
    ec8a:	d100      	bne.n	ec8e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ec8e:	490a      	ldr	r1, [pc, #40]	; (ecb8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    ec90:	9b01      	ldr	r3, [sp, #4]
    ec92:	9a00      	ldr	r2, [sp, #0]
    ec94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    ec98:	4a06      	ldr	r2, [pc, #24]	; (ecb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    ec9a:	9b01      	ldr	r3, [sp, #4]
    ec9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eca0:	1c5a      	adds	r2, r3, #1
    eca2:	4904      	ldr	r1, [pc, #16]	; (ecb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    eca4:	9b01      	ldr	r3, [sp, #4]
    eca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ecaa:	bf00      	nop
    ecac:	b003      	add	sp, #12
    ecae:	f85d fb04 	ldr.w	pc, [sp], #4
    ecb2:	bf00      	nop
    ecb4:	1fff90d8 	.word	0x1fff90d8
    ecb8:	1fff90d4 	.word	0x1fff90d4

0000ecbc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    ecbc:	b500      	push	{lr}
    ecbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecc0:	f7f1 ff4a 	bl	b58 <Sys_GetCoreID>
    ecc4:	4603      	mov	r3, r0
    ecc6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    ecc8:	4a0d      	ldr	r2, [pc, #52]	; (ed00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ecca:	9b01      	ldr	r3, [sp, #4]
    eccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecd0:	1e5a      	subs	r2, r3, #1
    ecd2:	490b      	ldr	r1, [pc, #44]	; (ed00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    ecda:	4a0a      	ldr	r2, [pc, #40]	; (ed04 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    ecdc:	9b01      	ldr	r3, [sp, #4]
    ecde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ece2:	f003 0301 	and.w	r3, r3, #1
    ece6:	2b00      	cmp	r3, #0
    ece8:	d106      	bne.n	ecf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    ecea:	4a05      	ldr	r2, [pc, #20]	; (ed00 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    ecec:	9b01      	ldr	r3, [sp, #4]
    ecee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d100      	bne.n	ecf8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecf8:	bf00      	nop
    ecfa:	b003      	add	sp, #12
    ecfc:	f85d fb04 	ldr.w	pc, [sp], #4
    ed00:	1fff90d8 	.word	0x1fff90d8
    ed04:	1fff90d4 	.word	0x1fff90d4

0000ed08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ed08:	b500      	push	{lr}
    ed0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed0c:	f7f1 ff24 	bl	b58 <Sys_GetCoreID>
    ed10:	4603      	mov	r3, r0
    ed12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    ed14:	4a10      	ldr	r2, [pc, #64]	; (ed58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ed16:	9b01      	ldr	r3, [sp, #4]
    ed18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d10d      	bne.n	ed3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed20:	f7f1 fe4a 	bl	9b8 <Port_schm_read_msr>
    ed24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed26:	9b00      	ldr	r3, [sp, #0]
    ed28:	f003 0301 	and.w	r3, r3, #1
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	d100      	bne.n	ed32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    ed32:	490a      	ldr	r1, [pc, #40]	; (ed5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    ed34:	9b01      	ldr	r3, [sp, #4]
    ed36:	9a00      	ldr	r2, [sp, #0]
    ed38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    ed3c:	4a06      	ldr	r2, [pc, #24]	; (ed58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ed3e:	9b01      	ldr	r3, [sp, #4]
    ed40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed44:	1c5a      	adds	r2, r3, #1
    ed46:	4904      	ldr	r1, [pc, #16]	; (ed58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    ed48:	9b01      	ldr	r3, [sp, #4]
    ed4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed4e:	bf00      	nop
    ed50:	b003      	add	sp, #12
    ed52:	f85d fb04 	ldr.w	pc, [sp], #4
    ed56:	bf00      	nop
    ed58:	1fff90e0 	.word	0x1fff90e0
    ed5c:	1fff90dc 	.word	0x1fff90dc

0000ed60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    ed60:	b500      	push	{lr}
    ed62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed64:	f7f1 fef8 	bl	b58 <Sys_GetCoreID>
    ed68:	4603      	mov	r3, r0
    ed6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    ed6c:	4a0d      	ldr	r2, [pc, #52]	; (eda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ed6e:	9b01      	ldr	r3, [sp, #4]
    ed70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed74:	1e5a      	subs	r2, r3, #1
    ed76:	490b      	ldr	r1, [pc, #44]	; (eda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ed78:	9b01      	ldr	r3, [sp, #4]
    ed7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ed7e:	4a0a      	ldr	r2, [pc, #40]	; (eda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    ed80:	9b01      	ldr	r3, [sp, #4]
    ed82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed86:	f003 0301 	and.w	r3, r3, #1
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	d106      	bne.n	ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    ed8e:	4a05      	ldr	r2, [pc, #20]	; (eda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    ed90:	9b01      	ldr	r3, [sp, #4]
    ed92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed96:	2b00      	cmp	r3, #0
    ed98:	d100      	bne.n	ed9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed9c:	bf00      	nop
    ed9e:	b003      	add	sp, #12
    eda0:	f85d fb04 	ldr.w	pc, [sp], #4
    eda4:	1fff90e0 	.word	0x1fff90e0
    eda8:	1fff90dc 	.word	0x1fff90dc

0000edac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    edac:	b500      	push	{lr}
    edae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edb0:	f7f1 fed2 	bl	b58 <Sys_GetCoreID>
    edb4:	4603      	mov	r3, r0
    edb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    edb8:	4a10      	ldr	r2, [pc, #64]	; (edfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    edba:	9b01      	ldr	r3, [sp, #4]
    edbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edc0:	2b00      	cmp	r3, #0
    edc2:	d10d      	bne.n	ede0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    edc4:	f7f1 fdf8 	bl	9b8 <Port_schm_read_msr>
    edc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    edca:	9b00      	ldr	r3, [sp, #0]
    edcc:	f003 0301 	and.w	r3, r3, #1
    edd0:	2b00      	cmp	r3, #0
    edd2:	d100      	bne.n	edd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    edd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    edd6:	490a      	ldr	r1, [pc, #40]	; (ee00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    edd8:	9b01      	ldr	r3, [sp, #4]
    edda:	9a00      	ldr	r2, [sp, #0]
    eddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    ede0:	4a06      	ldr	r2, [pc, #24]	; (edfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    ede2:	9b01      	ldr	r3, [sp, #4]
    ede4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede8:	1c5a      	adds	r2, r3, #1
    edea:	4904      	ldr	r1, [pc, #16]	; (edfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    edec:	9b01      	ldr	r3, [sp, #4]
    edee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edf2:	bf00      	nop
    edf4:	b003      	add	sp, #12
    edf6:	f85d fb04 	ldr.w	pc, [sp], #4
    edfa:	bf00      	nop
    edfc:	1fff90e8 	.word	0x1fff90e8
    ee00:	1fff90e4 	.word	0x1fff90e4

0000ee04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    ee04:	b500      	push	{lr}
    ee06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee08:	f7f1 fea6 	bl	b58 <Sys_GetCoreID>
    ee0c:	4603      	mov	r3, r0
    ee0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    ee10:	4a0d      	ldr	r2, [pc, #52]	; (ee48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ee12:	9b01      	ldr	r3, [sp, #4]
    ee14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee18:	1e5a      	subs	r2, r3, #1
    ee1a:	490b      	ldr	r1, [pc, #44]	; (ee48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ee1c:	9b01      	ldr	r3, [sp, #4]
    ee1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ee22:	4a0a      	ldr	r2, [pc, #40]	; (ee4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee2a:	f003 0301 	and.w	r3, r3, #1
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d106      	bne.n	ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    ee32:	4a05      	ldr	r2, [pc, #20]	; (ee48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    ee34:	9b01      	ldr	r3, [sp, #4]
    ee36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d100      	bne.n	ee40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee40:	bf00      	nop
    ee42:	b003      	add	sp, #12
    ee44:	f85d fb04 	ldr.w	pc, [sp], #4
    ee48:	1fff90e8 	.word	0x1fff90e8
    ee4c:	1fff90e4 	.word	0x1fff90e4

0000ee50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    ee50:	b500      	push	{lr}
    ee52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee54:	f7f1 fe80 	bl	b58 <Sys_GetCoreID>
    ee58:	4603      	mov	r3, r0
    ee5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    ee5c:	4a10      	ldr	r2, [pc, #64]	; (eea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ee5e:	9b01      	ldr	r3, [sp, #4]
    ee60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee64:	2b00      	cmp	r3, #0
    ee66:	d10d      	bne.n	ee84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee68:	f7f1 fda6 	bl	9b8 <Port_schm_read_msr>
    ee6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee6e:	9b00      	ldr	r3, [sp, #0]
    ee70:	f003 0301 	and.w	r3, r3, #1
    ee74:	2b00      	cmp	r3, #0
    ee76:	d100      	bne.n	ee7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ee7a:	490a      	ldr	r1, [pc, #40]	; (eea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    ee7c:	9b01      	ldr	r3, [sp, #4]
    ee7e:	9a00      	ldr	r2, [sp, #0]
    ee80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    ee84:	4a06      	ldr	r2, [pc, #24]	; (eea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ee86:	9b01      	ldr	r3, [sp, #4]
    ee88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee8c:	1c5a      	adds	r2, r3, #1
    ee8e:	4904      	ldr	r1, [pc, #16]	; (eea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ee90:	9b01      	ldr	r3, [sp, #4]
    ee92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee96:	bf00      	nop
    ee98:	b003      	add	sp, #12
    ee9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ee9e:	bf00      	nop
    eea0:	1fff90f0 	.word	0x1fff90f0
    eea4:	1fff90ec 	.word	0x1fff90ec

0000eea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    eea8:	b500      	push	{lr}
    eeaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eeac:	f7f1 fe54 	bl	b58 <Sys_GetCoreID>
    eeb0:	4603      	mov	r3, r0
    eeb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    eeb4:	4a0d      	ldr	r2, [pc, #52]	; (eeec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    eeb6:	9b01      	ldr	r3, [sp, #4]
    eeb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eebc:	1e5a      	subs	r2, r3, #1
    eebe:	490b      	ldr	r1, [pc, #44]	; (eeec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    eec0:	9b01      	ldr	r3, [sp, #4]
    eec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    eec6:	4a0a      	ldr	r2, [pc, #40]	; (eef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    eec8:	9b01      	ldr	r3, [sp, #4]
    eeca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eece:	f003 0301 	and.w	r3, r3, #1
    eed2:	2b00      	cmp	r3, #0
    eed4:	d106      	bne.n	eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    eed6:	4a05      	ldr	r2, [pc, #20]	; (eeec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    eed8:	9b01      	ldr	r3, [sp, #4]
    eeda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eede:	2b00      	cmp	r3, #0
    eee0:	d100      	bne.n	eee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eee4:	bf00      	nop
    eee6:	b003      	add	sp, #12
    eee8:	f85d fb04 	ldr.w	pc, [sp], #4
    eeec:	1fff90f0 	.word	0x1fff90f0
    eef0:	1fff90ec 	.word	0x1fff90ec

0000eef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    eef4:	b500      	push	{lr}
    eef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef8:	f7f1 fe2e 	bl	b58 <Sys_GetCoreID>
    eefc:	4603      	mov	r3, r0
    eefe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    ef00:	4a10      	ldr	r2, [pc, #64]	; (ef44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ef02:	9b01      	ldr	r3, [sp, #4]
    ef04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef08:	2b00      	cmp	r3, #0
    ef0a:	d10d      	bne.n	ef28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef0c:	f7f1 fd54 	bl	9b8 <Port_schm_read_msr>
    ef10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef12:	9b00      	ldr	r3, [sp, #0]
    ef14:	f003 0301 	and.w	r3, r3, #1
    ef18:	2b00      	cmp	r3, #0
    ef1a:	d100      	bne.n	ef1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    ef1e:	490a      	ldr	r1, [pc, #40]	; (ef48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    ef20:	9b01      	ldr	r3, [sp, #4]
    ef22:	9a00      	ldr	r2, [sp, #0]
    ef24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    ef28:	4a06      	ldr	r2, [pc, #24]	; (ef44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ef2a:	9b01      	ldr	r3, [sp, #4]
    ef2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef30:	1c5a      	adds	r2, r3, #1
    ef32:	4904      	ldr	r1, [pc, #16]	; (ef44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    ef34:	9b01      	ldr	r3, [sp, #4]
    ef36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef3a:	bf00      	nop
    ef3c:	b003      	add	sp, #12
    ef3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ef42:	bf00      	nop
    ef44:	1fff90f8 	.word	0x1fff90f8
    ef48:	1fff90f4 	.word	0x1fff90f4

0000ef4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    ef4c:	b500      	push	{lr}
    ef4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef50:	f7f1 fe02 	bl	b58 <Sys_GetCoreID>
    ef54:	4603      	mov	r3, r0
    ef56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    ef58:	4a0d      	ldr	r2, [pc, #52]	; (ef90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    ef5a:	9b01      	ldr	r3, [sp, #4]
    ef5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef60:	1e5a      	subs	r2, r3, #1
    ef62:	490b      	ldr	r1, [pc, #44]	; (ef90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    ef64:	9b01      	ldr	r3, [sp, #4]
    ef66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    ef6a:	4a0a      	ldr	r2, [pc, #40]	; (ef94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    ef6c:	9b01      	ldr	r3, [sp, #4]
    ef6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef72:	f003 0301 	and.w	r3, r3, #1
    ef76:	2b00      	cmp	r3, #0
    ef78:	d106      	bne.n	ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    ef7a:	4a05      	ldr	r2, [pc, #20]	; (ef90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    ef7c:	9b01      	ldr	r3, [sp, #4]
    ef7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef82:	2b00      	cmp	r3, #0
    ef84:	d100      	bne.n	ef88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef88:	bf00      	nop
    ef8a:	b003      	add	sp, #12
    ef8c:	f85d fb04 	ldr.w	pc, [sp], #4
    ef90:	1fff90f8 	.word	0x1fff90f8
    ef94:	1fff90f4 	.word	0x1fff90f4

0000ef98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    ef98:	b500      	push	{lr}
    ef9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef9c:	f7f1 fddc 	bl	b58 <Sys_GetCoreID>
    efa0:	4603      	mov	r3, r0
    efa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    efa4:	4a10      	ldr	r2, [pc, #64]	; (efe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    efa6:	9b01      	ldr	r3, [sp, #4]
    efa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efac:	2b00      	cmp	r3, #0
    efae:	d10d      	bne.n	efcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    efb0:	f7f1 fd02 	bl	9b8 <Port_schm_read_msr>
    efb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    efb6:	9b00      	ldr	r3, [sp, #0]
    efb8:	f003 0301 	and.w	r3, r3, #1
    efbc:	2b00      	cmp	r3, #0
    efbe:	d100      	bne.n	efc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    efc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    efc2:	490a      	ldr	r1, [pc, #40]	; (efec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    efc4:	9b01      	ldr	r3, [sp, #4]
    efc6:	9a00      	ldr	r2, [sp, #0]
    efc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    efcc:	4a06      	ldr	r2, [pc, #24]	; (efe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    efce:	9b01      	ldr	r3, [sp, #4]
    efd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efd4:	1c5a      	adds	r2, r3, #1
    efd6:	4904      	ldr	r1, [pc, #16]	; (efe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    efd8:	9b01      	ldr	r3, [sp, #4]
    efda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    efde:	bf00      	nop
    efe0:	b003      	add	sp, #12
    efe2:	f85d fb04 	ldr.w	pc, [sp], #4
    efe6:	bf00      	nop
    efe8:	1fff9100 	.word	0x1fff9100
    efec:	1fff90fc 	.word	0x1fff90fc

0000eff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    eff0:	b500      	push	{lr}
    eff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eff4:	f7f1 fdb0 	bl	b58 <Sys_GetCoreID>
    eff8:	4603      	mov	r3, r0
    effa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    effc:	4a0d      	ldr	r2, [pc, #52]	; (f034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    effe:	9b01      	ldr	r3, [sp, #4]
    f000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f004:	1e5a      	subs	r2, r3, #1
    f006:	490b      	ldr	r1, [pc, #44]	; (f034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f008:	9b01      	ldr	r3, [sp, #4]
    f00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f00e:	4a0a      	ldr	r2, [pc, #40]	; (f038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    f010:	9b01      	ldr	r3, [sp, #4]
    f012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f016:	f003 0301 	and.w	r3, r3, #1
    f01a:	2b00      	cmp	r3, #0
    f01c:	d106      	bne.n	f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    f01e:	4a05      	ldr	r2, [pc, #20]	; (f034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    f020:	9b01      	ldr	r3, [sp, #4]
    f022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f026:	2b00      	cmp	r3, #0
    f028:	d100      	bne.n	f02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f02a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f02c:	bf00      	nop
    f02e:	b003      	add	sp, #12
    f030:	f85d fb04 	ldr.w	pc, [sp], #4
    f034:	1fff9100 	.word	0x1fff9100
    f038:	1fff90fc 	.word	0x1fff90fc

0000f03c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f03c:	b500      	push	{lr}
    f03e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f040:	f7f1 fd8a 	bl	b58 <Sys_GetCoreID>
    f044:	4603      	mov	r3, r0
    f046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    f048:	4a10      	ldr	r2, [pc, #64]	; (f08c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f04a:	9b01      	ldr	r3, [sp, #4]
    f04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f050:	2b00      	cmp	r3, #0
    f052:	d10d      	bne.n	f070 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f054:	f7f1 fcb0 	bl	9b8 <Port_schm_read_msr>
    f058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f05a:	9b00      	ldr	r3, [sp, #0]
    f05c:	f003 0301 	and.w	r3, r3, #1
    f060:	2b00      	cmp	r3, #0
    f062:	d100      	bne.n	f066 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f066:	490a      	ldr	r1, [pc, #40]	; (f090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    f068:	9b01      	ldr	r3, [sp, #4]
    f06a:	9a00      	ldr	r2, [sp, #0]
    f06c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    f070:	4a06      	ldr	r2, [pc, #24]	; (f08c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f072:	9b01      	ldr	r3, [sp, #4]
    f074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f078:	1c5a      	adds	r2, r3, #1
    f07a:	4904      	ldr	r1, [pc, #16]	; (f08c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    f07c:	9b01      	ldr	r3, [sp, #4]
    f07e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f082:	bf00      	nop
    f084:	b003      	add	sp, #12
    f086:	f85d fb04 	ldr.w	pc, [sp], #4
    f08a:	bf00      	nop
    f08c:	1fff9108 	.word	0x1fff9108
    f090:	1fff9104 	.word	0x1fff9104

0000f094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    f094:	b500      	push	{lr}
    f096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f098:	f7f1 fd5e 	bl	b58 <Sys_GetCoreID>
    f09c:	4603      	mov	r3, r0
    f09e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    f0a0:	4a0d      	ldr	r2, [pc, #52]	; (f0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f0a2:	9b01      	ldr	r3, [sp, #4]
    f0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a8:	1e5a      	subs	r2, r3, #1
    f0aa:	490b      	ldr	r1, [pc, #44]	; (f0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f0ac:	9b01      	ldr	r3, [sp, #4]
    f0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f0b2:	4a0a      	ldr	r2, [pc, #40]	; (f0dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    f0b4:	9b01      	ldr	r3, [sp, #4]
    f0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ba:	f003 0301 	and.w	r3, r3, #1
    f0be:	2b00      	cmp	r3, #0
    f0c0:	d106      	bne.n	f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    f0c2:	4a05      	ldr	r2, [pc, #20]	; (f0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    f0c4:	9b01      	ldr	r3, [sp, #4]
    f0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ca:	2b00      	cmp	r3, #0
    f0cc:	d100      	bne.n	f0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f0d0:	bf00      	nop
    f0d2:	b003      	add	sp, #12
    f0d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d8:	1fff9108 	.word	0x1fff9108
    f0dc:	1fff9104 	.word	0x1fff9104

0000f0e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f0e0:	b500      	push	{lr}
    f0e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0e4:	f7f1 fd38 	bl	b58 <Sys_GetCoreID>
    f0e8:	4603      	mov	r3, r0
    f0ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    f0ec:	4a10      	ldr	r2, [pc, #64]	; (f130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f0ee:	9b01      	ldr	r3, [sp, #4]
    f0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d10d      	bne.n	f114 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0f8:	f7f1 fc5e 	bl	9b8 <Port_schm_read_msr>
    f0fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0fe:	9b00      	ldr	r3, [sp, #0]
    f100:	f003 0301 	and.w	r3, r3, #1
    f104:	2b00      	cmp	r3, #0
    f106:	d100      	bne.n	f10a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    f10a:	490a      	ldr	r1, [pc, #40]	; (f134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    f10c:	9b01      	ldr	r3, [sp, #4]
    f10e:	9a00      	ldr	r2, [sp, #0]
    f110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    f114:	4a06      	ldr	r2, [pc, #24]	; (f130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f116:	9b01      	ldr	r3, [sp, #4]
    f118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f11c:	1c5a      	adds	r2, r3, #1
    f11e:	4904      	ldr	r1, [pc, #16]	; (f130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    f120:	9b01      	ldr	r3, [sp, #4]
    f122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f126:	bf00      	nop
    f128:	b003      	add	sp, #12
    f12a:	f85d fb04 	ldr.w	pc, [sp], #4
    f12e:	bf00      	nop
    f130:	1fff9110 	.word	0x1fff9110
    f134:	1fff910c 	.word	0x1fff910c

0000f138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    f138:	b500      	push	{lr}
    f13a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f13c:	f7f1 fd0c 	bl	b58 <Sys_GetCoreID>
    f140:	4603      	mov	r3, r0
    f142:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    f144:	4a0d      	ldr	r2, [pc, #52]	; (f17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f146:	9b01      	ldr	r3, [sp, #4]
    f148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f14c:	1e5a      	subs	r2, r3, #1
    f14e:	490b      	ldr	r1, [pc, #44]	; (f17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f150:	9b01      	ldr	r3, [sp, #4]
    f152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    f156:	4a0a      	ldr	r2, [pc, #40]	; (f180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f15e:	f003 0301 	and.w	r3, r3, #1
    f162:	2b00      	cmp	r3, #0
    f164:	d106      	bne.n	f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    f166:	4a05      	ldr	r2, [pc, #20]	; (f17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    f168:	9b01      	ldr	r3, [sp, #4]
    f16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f16e:	2b00      	cmp	r3, #0
    f170:	d100      	bne.n	f174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f174:	bf00      	nop
    f176:	b003      	add	sp, #12
    f178:	f85d fb04 	ldr.w	pc, [sp], #4
    f17c:	1fff9110 	.word	0x1fff9110
    f180:	1fff910c 	.word	0x1fff910c

0000f184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f184:	b500      	push	{lr}
    f186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f188:	f7f1 fce6 	bl	b58 <Sys_GetCoreID>
    f18c:	4603      	mov	r3, r0
    f18e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    f190:	4a10      	ldr	r2, [pc, #64]	; (f1d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f192:	9b01      	ldr	r3, [sp, #4]
    f194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f198:	2b00      	cmp	r3, #0
    f19a:	d10d      	bne.n	f1b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f19c:	f7f1 fc0c 	bl	9b8 <Port_schm_read_msr>
    f1a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1a2:	9b00      	ldr	r3, [sp, #0]
    f1a4:	f003 0301 	and.w	r3, r3, #1
    f1a8:	2b00      	cmp	r3, #0
    f1aa:	d100      	bne.n	f1ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    f1ae:	490a      	ldr	r1, [pc, #40]	; (f1d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    f1b0:	9b01      	ldr	r3, [sp, #4]
    f1b2:	9a00      	ldr	r2, [sp, #0]
    f1b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    f1b8:	4a06      	ldr	r2, [pc, #24]	; (f1d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f1ba:	9b01      	ldr	r3, [sp, #4]
    f1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1c0:	1c5a      	adds	r2, r3, #1
    f1c2:	4904      	ldr	r1, [pc, #16]	; (f1d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    f1c4:	9b01      	ldr	r3, [sp, #4]
    f1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1ca:	bf00      	nop
    f1cc:	b003      	add	sp, #12
    f1ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f1d2:	bf00      	nop
    f1d4:	1fff9118 	.word	0x1fff9118
    f1d8:	1fff9114 	.word	0x1fff9114

0000f1dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    f1dc:	b500      	push	{lr}
    f1de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1e0:	f7f1 fcba 	bl	b58 <Sys_GetCoreID>
    f1e4:	4603      	mov	r3, r0
    f1e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    f1e8:	4a0d      	ldr	r2, [pc, #52]	; (f220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f1ea:	9b01      	ldr	r3, [sp, #4]
    f1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f0:	1e5a      	subs	r2, r3, #1
    f1f2:	490b      	ldr	r1, [pc, #44]	; (f220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f1f4:	9b01      	ldr	r3, [sp, #4]
    f1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    f1fa:	4a0a      	ldr	r2, [pc, #40]	; (f224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    f1fc:	9b01      	ldr	r3, [sp, #4]
    f1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f202:	f003 0301 	and.w	r3, r3, #1
    f206:	2b00      	cmp	r3, #0
    f208:	d106      	bne.n	f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    f20a:	4a05      	ldr	r2, [pc, #20]	; (f220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    f20c:	9b01      	ldr	r3, [sp, #4]
    f20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f212:	2b00      	cmp	r3, #0
    f214:	d100      	bne.n	f218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f218:	bf00      	nop
    f21a:	b003      	add	sp, #12
    f21c:	f85d fb04 	ldr.w	pc, [sp], #4
    f220:	1fff9118 	.word	0x1fff9118
    f224:	1fff9114 	.word	0x1fff9114

0000f228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f228:	b500      	push	{lr}
    f22a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f22c:	f7f1 fc94 	bl	b58 <Sys_GetCoreID>
    f230:	4603      	mov	r3, r0
    f232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    f234:	4a10      	ldr	r2, [pc, #64]	; (f278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f236:	9b01      	ldr	r3, [sp, #4]
    f238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f23c:	2b00      	cmp	r3, #0
    f23e:	d10d      	bne.n	f25c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f240:	f7f1 fbba 	bl	9b8 <Port_schm_read_msr>
    f244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f246:	9b00      	ldr	r3, [sp, #0]
    f248:	f003 0301 	and.w	r3, r3, #1
    f24c:	2b00      	cmp	r3, #0
    f24e:	d100      	bne.n	f252 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    f252:	490a      	ldr	r1, [pc, #40]	; (f27c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    f254:	9b01      	ldr	r3, [sp, #4]
    f256:	9a00      	ldr	r2, [sp, #0]
    f258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    f25c:	4a06      	ldr	r2, [pc, #24]	; (f278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f25e:	9b01      	ldr	r3, [sp, #4]
    f260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f264:	1c5a      	adds	r2, r3, #1
    f266:	4904      	ldr	r1, [pc, #16]	; (f278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    f268:	9b01      	ldr	r3, [sp, #4]
    f26a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f26e:	bf00      	nop
    f270:	b003      	add	sp, #12
    f272:	f85d fb04 	ldr.w	pc, [sp], #4
    f276:	bf00      	nop
    f278:	1fff9120 	.word	0x1fff9120
    f27c:	1fff911c 	.word	0x1fff911c

0000f280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    f280:	b500      	push	{lr}
    f282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f284:	f7f1 fc68 	bl	b58 <Sys_GetCoreID>
    f288:	4603      	mov	r3, r0
    f28a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    f28c:	4a0d      	ldr	r2, [pc, #52]	; (f2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f28e:	9b01      	ldr	r3, [sp, #4]
    f290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f294:	1e5a      	subs	r2, r3, #1
    f296:	490b      	ldr	r1, [pc, #44]	; (f2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f298:	9b01      	ldr	r3, [sp, #4]
    f29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    f29e:	4a0a      	ldr	r2, [pc, #40]	; (f2c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2a6:	f003 0301 	and.w	r3, r3, #1
    f2aa:	2b00      	cmp	r3, #0
    f2ac:	d106      	bne.n	f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    f2ae:	4a05      	ldr	r2, [pc, #20]	; (f2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    f2b0:	9b01      	ldr	r3, [sp, #4]
    f2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	d100      	bne.n	f2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2bc:	bf00      	nop
    f2be:	b003      	add	sp, #12
    f2c0:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c4:	1fff9120 	.word	0x1fff9120
    f2c8:	1fff911c 	.word	0x1fff911c

0000f2cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f2cc:	b500      	push	{lr}
    f2ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2d0:	f7f1 fc42 	bl	b58 <Sys_GetCoreID>
    f2d4:	4603      	mov	r3, r0
    f2d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    f2d8:	4a10      	ldr	r2, [pc, #64]	; (f31c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f2da:	9b01      	ldr	r3, [sp, #4]
    f2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2e0:	2b00      	cmp	r3, #0
    f2e2:	d10d      	bne.n	f300 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2e4:	f7f1 fb68 	bl	9b8 <Port_schm_read_msr>
    f2e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2ea:	9b00      	ldr	r3, [sp, #0]
    f2ec:	f003 0301 	and.w	r3, r3, #1
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d100      	bne.n	f2f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    f2f6:	490a      	ldr	r1, [pc, #40]	; (f320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    f2f8:	9b01      	ldr	r3, [sp, #4]
    f2fa:	9a00      	ldr	r2, [sp, #0]
    f2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    f300:	4a06      	ldr	r2, [pc, #24]	; (f31c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f302:	9b01      	ldr	r3, [sp, #4]
    f304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f308:	1c5a      	adds	r2, r3, #1
    f30a:	4904      	ldr	r1, [pc, #16]	; (f31c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    f30c:	9b01      	ldr	r3, [sp, #4]
    f30e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f312:	bf00      	nop
    f314:	b003      	add	sp, #12
    f316:	f85d fb04 	ldr.w	pc, [sp], #4
    f31a:	bf00      	nop
    f31c:	1fff9128 	.word	0x1fff9128
    f320:	1fff9124 	.word	0x1fff9124

0000f324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    f324:	b500      	push	{lr}
    f326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f328:	f7f1 fc16 	bl	b58 <Sys_GetCoreID>
    f32c:	4603      	mov	r3, r0
    f32e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    f330:	4a0d      	ldr	r2, [pc, #52]	; (f368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f332:	9b01      	ldr	r3, [sp, #4]
    f334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f338:	1e5a      	subs	r2, r3, #1
    f33a:	490b      	ldr	r1, [pc, #44]	; (f368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f33c:	9b01      	ldr	r3, [sp, #4]
    f33e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    f342:	4a0a      	ldr	r2, [pc, #40]	; (f36c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    f344:	9b01      	ldr	r3, [sp, #4]
    f346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f34a:	f003 0301 	and.w	r3, r3, #1
    f34e:	2b00      	cmp	r3, #0
    f350:	d106      	bne.n	f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    f352:	4a05      	ldr	r2, [pc, #20]	; (f368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    f354:	9b01      	ldr	r3, [sp, #4]
    f356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f35a:	2b00      	cmp	r3, #0
    f35c:	d100      	bne.n	f360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f35e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f360:	bf00      	nop
    f362:	b003      	add	sp, #12
    f364:	f85d fb04 	ldr.w	pc, [sp], #4
    f368:	1fff9128 	.word	0x1fff9128
    f36c:	1fff9124 	.word	0x1fff9124

0000f370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f370:	b500      	push	{lr}
    f372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f374:	f7f1 fbf0 	bl	b58 <Sys_GetCoreID>
    f378:	4603      	mov	r3, r0
    f37a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    f37c:	4a10      	ldr	r2, [pc, #64]	; (f3c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f37e:	9b01      	ldr	r3, [sp, #4]
    f380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f384:	2b00      	cmp	r3, #0
    f386:	d10d      	bne.n	f3a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f388:	f7f1 fb16 	bl	9b8 <Port_schm_read_msr>
    f38c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f38e:	9b00      	ldr	r3, [sp, #0]
    f390:	f003 0301 	and.w	r3, r3, #1
    f394:	2b00      	cmp	r3, #0
    f396:	d100      	bne.n	f39a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f39a:	490a      	ldr	r1, [pc, #40]	; (f3c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    f39c:	9b01      	ldr	r3, [sp, #4]
    f39e:	9a00      	ldr	r2, [sp, #0]
    f3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    f3a4:	4a06      	ldr	r2, [pc, #24]	; (f3c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f3a6:	9b01      	ldr	r3, [sp, #4]
    f3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ac:	1c5a      	adds	r2, r3, #1
    f3ae:	4904      	ldr	r1, [pc, #16]	; (f3c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    f3b0:	9b01      	ldr	r3, [sp, #4]
    f3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3b6:	bf00      	nop
    f3b8:	b003      	add	sp, #12
    f3ba:	f85d fb04 	ldr.w	pc, [sp], #4
    f3be:	bf00      	nop
    f3c0:	1fff9130 	.word	0x1fff9130
    f3c4:	1fff912c 	.word	0x1fff912c

0000f3c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    f3c8:	b500      	push	{lr}
    f3ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3cc:	f7f1 fbc4 	bl	b58 <Sys_GetCoreID>
    f3d0:	4603      	mov	r3, r0
    f3d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    f3d4:	4a0d      	ldr	r2, [pc, #52]	; (f40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f3d6:	9b01      	ldr	r3, [sp, #4]
    f3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3dc:	1e5a      	subs	r2, r3, #1
    f3de:	490b      	ldr	r1, [pc, #44]	; (f40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f3e0:	9b01      	ldr	r3, [sp, #4]
    f3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f3e6:	4a0a      	ldr	r2, [pc, #40]	; (f410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    f3e8:	9b01      	ldr	r3, [sp, #4]
    f3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ee:	f003 0301 	and.w	r3, r3, #1
    f3f2:	2b00      	cmp	r3, #0
    f3f4:	d106      	bne.n	f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    f3f6:	4a05      	ldr	r2, [pc, #20]	; (f40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    f3f8:	9b01      	ldr	r3, [sp, #4]
    f3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3fe:	2b00      	cmp	r3, #0
    f400:	d100      	bne.n	f404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f404:	bf00      	nop
    f406:	b003      	add	sp, #12
    f408:	f85d fb04 	ldr.w	pc, [sp], #4
    f40c:	1fff9130 	.word	0x1fff9130
    f410:	1fff912c 	.word	0x1fff912c

0000f414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f414:	b500      	push	{lr}
    f416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f418:	f7f1 fb9e 	bl	b58 <Sys_GetCoreID>
    f41c:	4603      	mov	r3, r0
    f41e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    f420:	4a10      	ldr	r2, [pc, #64]	; (f464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f422:	9b01      	ldr	r3, [sp, #4]
    f424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f428:	2b00      	cmp	r3, #0
    f42a:	d10d      	bne.n	f448 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f42c:	f7f1 fac4 	bl	9b8 <Port_schm_read_msr>
    f430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f432:	9b00      	ldr	r3, [sp, #0]
    f434:	f003 0301 	and.w	r3, r3, #1
    f438:	2b00      	cmp	r3, #0
    f43a:	d100      	bne.n	f43e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f43c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f43e:	490a      	ldr	r1, [pc, #40]	; (f468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    f440:	9b01      	ldr	r3, [sp, #4]
    f442:	9a00      	ldr	r2, [sp, #0]
    f444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    f448:	4a06      	ldr	r2, [pc, #24]	; (f464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f44a:	9b01      	ldr	r3, [sp, #4]
    f44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f450:	1c5a      	adds	r2, r3, #1
    f452:	4904      	ldr	r1, [pc, #16]	; (f464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    f454:	9b01      	ldr	r3, [sp, #4]
    f456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f45a:	bf00      	nop
    f45c:	b003      	add	sp, #12
    f45e:	f85d fb04 	ldr.w	pc, [sp], #4
    f462:	bf00      	nop
    f464:	1fff9138 	.word	0x1fff9138
    f468:	1fff9134 	.word	0x1fff9134

0000f46c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    f46c:	b500      	push	{lr}
    f46e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f470:	f7f1 fb72 	bl	b58 <Sys_GetCoreID>
    f474:	4603      	mov	r3, r0
    f476:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    f478:	4a0d      	ldr	r2, [pc, #52]	; (f4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f47a:	9b01      	ldr	r3, [sp, #4]
    f47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f480:	1e5a      	subs	r2, r3, #1
    f482:	490b      	ldr	r1, [pc, #44]	; (f4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f484:	9b01      	ldr	r3, [sp, #4]
    f486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f48a:	4a0a      	ldr	r2, [pc, #40]	; (f4b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f492:	f003 0301 	and.w	r3, r3, #1
    f496:	2b00      	cmp	r3, #0
    f498:	d106      	bne.n	f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    f49a:	4a05      	ldr	r2, [pc, #20]	; (f4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    f49c:	9b01      	ldr	r3, [sp, #4]
    f49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4a2:	2b00      	cmp	r3, #0
    f4a4:	d100      	bne.n	f4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4a8:	bf00      	nop
    f4aa:	b003      	add	sp, #12
    f4ac:	f85d fb04 	ldr.w	pc, [sp], #4
    f4b0:	1fff9138 	.word	0x1fff9138
    f4b4:	1fff9134 	.word	0x1fff9134

0000f4b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f4b8:	b500      	push	{lr}
    f4ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4bc:	f7f1 fb4c 	bl	b58 <Sys_GetCoreID>
    f4c0:	4603      	mov	r3, r0
    f4c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    f4c4:	4a10      	ldr	r2, [pc, #64]	; (f508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f4c6:	9b01      	ldr	r3, [sp, #4]
    f4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4cc:	2b00      	cmp	r3, #0
    f4ce:	d10d      	bne.n	f4ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f4d0:	f7f1 fa72 	bl	9b8 <Port_schm_read_msr>
    f4d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f4d6:	9b00      	ldr	r3, [sp, #0]
    f4d8:	f003 0301 	and.w	r3, r3, #1
    f4dc:	2b00      	cmp	r3, #0
    f4de:	d100      	bne.n	f4e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f4e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f4e2:	490a      	ldr	r1, [pc, #40]	; (f50c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    f4e4:	9b01      	ldr	r3, [sp, #4]
    f4e6:	9a00      	ldr	r2, [sp, #0]
    f4e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    f4ec:	4a06      	ldr	r2, [pc, #24]	; (f508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f4ee:	9b01      	ldr	r3, [sp, #4]
    f4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f4:	1c5a      	adds	r2, r3, #1
    f4f6:	4904      	ldr	r1, [pc, #16]	; (f508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    f4f8:	9b01      	ldr	r3, [sp, #4]
    f4fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4fe:	bf00      	nop
    f500:	b003      	add	sp, #12
    f502:	f85d fb04 	ldr.w	pc, [sp], #4
    f506:	bf00      	nop
    f508:	1fff9140 	.word	0x1fff9140
    f50c:	1fff913c 	.word	0x1fff913c

0000f510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    f510:	b500      	push	{lr}
    f512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f514:	f7f1 fb20 	bl	b58 <Sys_GetCoreID>
    f518:	4603      	mov	r3, r0
    f51a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    f51c:	4a0d      	ldr	r2, [pc, #52]	; (f554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f51e:	9b01      	ldr	r3, [sp, #4]
    f520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f524:	1e5a      	subs	r2, r3, #1
    f526:	490b      	ldr	r1, [pc, #44]	; (f554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f528:	9b01      	ldr	r3, [sp, #4]
    f52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f52e:	4a0a      	ldr	r2, [pc, #40]	; (f558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    f530:	9b01      	ldr	r3, [sp, #4]
    f532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f536:	f003 0301 	and.w	r3, r3, #1
    f53a:	2b00      	cmp	r3, #0
    f53c:	d106      	bne.n	f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    f53e:	4a05      	ldr	r2, [pc, #20]	; (f554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    f540:	9b01      	ldr	r3, [sp, #4]
    f542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f546:	2b00      	cmp	r3, #0
    f548:	d100      	bne.n	f54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f54a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f54c:	bf00      	nop
    f54e:	b003      	add	sp, #12
    f550:	f85d fb04 	ldr.w	pc, [sp], #4
    f554:	1fff9140 	.word	0x1fff9140
    f558:	1fff913c 	.word	0x1fff913c

0000f55c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f55c:	b500      	push	{lr}
    f55e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f560:	f7f1 fafa 	bl	b58 <Sys_GetCoreID>
    f564:	4603      	mov	r3, r0
    f566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    f568:	4a10      	ldr	r2, [pc, #64]	; (f5ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f56a:	9b01      	ldr	r3, [sp, #4]
    f56c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f570:	2b00      	cmp	r3, #0
    f572:	d10d      	bne.n	f590 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f574:	f7f1 fa20 	bl	9b8 <Port_schm_read_msr>
    f578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f57a:	9b00      	ldr	r3, [sp, #0]
    f57c:	f003 0301 	and.w	r3, r3, #1
    f580:	2b00      	cmp	r3, #0
    f582:	d100      	bne.n	f586 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f586:	490a      	ldr	r1, [pc, #40]	; (f5b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    f588:	9b01      	ldr	r3, [sp, #4]
    f58a:	9a00      	ldr	r2, [sp, #0]
    f58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    f590:	4a06      	ldr	r2, [pc, #24]	; (f5ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f592:	9b01      	ldr	r3, [sp, #4]
    f594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f598:	1c5a      	adds	r2, r3, #1
    f59a:	4904      	ldr	r1, [pc, #16]	; (f5ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    f59c:	9b01      	ldr	r3, [sp, #4]
    f59e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5a2:	bf00      	nop
    f5a4:	b003      	add	sp, #12
    f5a6:	f85d fb04 	ldr.w	pc, [sp], #4
    f5aa:	bf00      	nop
    f5ac:	1fff9148 	.word	0x1fff9148
    f5b0:	1fff9144 	.word	0x1fff9144

0000f5b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    f5b4:	b500      	push	{lr}
    f5b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5b8:	f7f1 face 	bl	b58 <Sys_GetCoreID>
    f5bc:	4603      	mov	r3, r0
    f5be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    f5c0:	4a0d      	ldr	r2, [pc, #52]	; (f5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f5c2:	9b01      	ldr	r3, [sp, #4]
    f5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5c8:	1e5a      	subs	r2, r3, #1
    f5ca:	490b      	ldr	r1, [pc, #44]	; (f5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f5cc:	9b01      	ldr	r3, [sp, #4]
    f5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f5d2:	4a0a      	ldr	r2, [pc, #40]	; (f5fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    f5d4:	9b01      	ldr	r3, [sp, #4]
    f5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5da:	f003 0301 	and.w	r3, r3, #1
    f5de:	2b00      	cmp	r3, #0
    f5e0:	d106      	bne.n	f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    f5e2:	4a05      	ldr	r2, [pc, #20]	; (f5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    f5e4:	9b01      	ldr	r3, [sp, #4]
    f5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5ea:	2b00      	cmp	r3, #0
    f5ec:	d100      	bne.n	f5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5f0:	bf00      	nop
    f5f2:	b003      	add	sp, #12
    f5f4:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f8:	1fff9148 	.word	0x1fff9148
    f5fc:	1fff9144 	.word	0x1fff9144

0000f600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f600:	b500      	push	{lr}
    f602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f604:	f7f1 faa8 	bl	b58 <Sys_GetCoreID>
    f608:	4603      	mov	r3, r0
    f60a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    f60c:	4a10      	ldr	r2, [pc, #64]	; (f650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f60e:	9b01      	ldr	r3, [sp, #4]
    f610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f614:	2b00      	cmp	r3, #0
    f616:	d10d      	bne.n	f634 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f618:	f7f1 f9ce 	bl	9b8 <Port_schm_read_msr>
    f61c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f61e:	9b00      	ldr	r3, [sp, #0]
    f620:	f003 0301 	and.w	r3, r3, #1
    f624:	2b00      	cmp	r3, #0
    f626:	d100      	bne.n	f62a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f62a:	490a      	ldr	r1, [pc, #40]	; (f654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    f62c:	9b01      	ldr	r3, [sp, #4]
    f62e:	9a00      	ldr	r2, [sp, #0]
    f630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    f634:	4a06      	ldr	r2, [pc, #24]	; (f650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f636:	9b01      	ldr	r3, [sp, #4]
    f638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f63c:	1c5a      	adds	r2, r3, #1
    f63e:	4904      	ldr	r1, [pc, #16]	; (f650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    f640:	9b01      	ldr	r3, [sp, #4]
    f642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f646:	bf00      	nop
    f648:	b003      	add	sp, #12
    f64a:	f85d fb04 	ldr.w	pc, [sp], #4
    f64e:	bf00      	nop
    f650:	1fff9150 	.word	0x1fff9150
    f654:	1fff914c 	.word	0x1fff914c

0000f658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    f658:	b500      	push	{lr}
    f65a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f65c:	f7f1 fa7c 	bl	b58 <Sys_GetCoreID>
    f660:	4603      	mov	r3, r0
    f662:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    f664:	4a0d      	ldr	r2, [pc, #52]	; (f69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f666:	9b01      	ldr	r3, [sp, #4]
    f668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f66c:	1e5a      	subs	r2, r3, #1
    f66e:	490b      	ldr	r1, [pc, #44]	; (f69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f670:	9b01      	ldr	r3, [sp, #4]
    f672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f676:	4a0a      	ldr	r2, [pc, #40]	; (f6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f67e:	f003 0301 	and.w	r3, r3, #1
    f682:	2b00      	cmp	r3, #0
    f684:	d106      	bne.n	f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    f686:	4a05      	ldr	r2, [pc, #20]	; (f69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    f688:	9b01      	ldr	r3, [sp, #4]
    f68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f68e:	2b00      	cmp	r3, #0
    f690:	d100      	bne.n	f694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f694:	bf00      	nop
    f696:	b003      	add	sp, #12
    f698:	f85d fb04 	ldr.w	pc, [sp], #4
    f69c:	1fff9150 	.word	0x1fff9150
    f6a0:	1fff914c 	.word	0x1fff914c

0000f6a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f6a4:	b500      	push	{lr}
    f6a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6a8:	f7f1 fa56 	bl	b58 <Sys_GetCoreID>
    f6ac:	4603      	mov	r3, r0
    f6ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    f6b0:	4a10      	ldr	r2, [pc, #64]	; (f6f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f6b2:	9b01      	ldr	r3, [sp, #4]
    f6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	d10d      	bne.n	f6d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6bc:	f7f1 f97c 	bl	9b8 <Port_schm_read_msr>
    f6c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6c2:	9b00      	ldr	r3, [sp, #0]
    f6c4:	f003 0301 	and.w	r3, r3, #1
    f6c8:	2b00      	cmp	r3, #0
    f6ca:	d100      	bne.n	f6ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    f6ce:	490a      	ldr	r1, [pc, #40]	; (f6f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    f6d0:	9b01      	ldr	r3, [sp, #4]
    f6d2:	9a00      	ldr	r2, [sp, #0]
    f6d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    f6d8:	4a06      	ldr	r2, [pc, #24]	; (f6f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f6da:	9b01      	ldr	r3, [sp, #4]
    f6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6e0:	1c5a      	adds	r2, r3, #1
    f6e2:	4904      	ldr	r1, [pc, #16]	; (f6f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    f6e4:	9b01      	ldr	r3, [sp, #4]
    f6e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6ea:	bf00      	nop
    f6ec:	b003      	add	sp, #12
    f6ee:	f85d fb04 	ldr.w	pc, [sp], #4
    f6f2:	bf00      	nop
    f6f4:	1fff9158 	.word	0x1fff9158
    f6f8:	1fff9154 	.word	0x1fff9154

0000f6fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    f6fc:	b500      	push	{lr}
    f6fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f700:	f7f1 fa2a 	bl	b58 <Sys_GetCoreID>
    f704:	4603      	mov	r3, r0
    f706:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    f708:	4a0d      	ldr	r2, [pc, #52]	; (f740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f70a:	9b01      	ldr	r3, [sp, #4]
    f70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f710:	1e5a      	subs	r2, r3, #1
    f712:	490b      	ldr	r1, [pc, #44]	; (f740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f714:	9b01      	ldr	r3, [sp, #4]
    f716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    f71a:	4a0a      	ldr	r2, [pc, #40]	; (f744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    f71c:	9b01      	ldr	r3, [sp, #4]
    f71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f722:	f003 0301 	and.w	r3, r3, #1
    f726:	2b00      	cmp	r3, #0
    f728:	d106      	bne.n	f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    f72a:	4a05      	ldr	r2, [pc, #20]	; (f740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    f72c:	9b01      	ldr	r3, [sp, #4]
    f72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f732:	2b00      	cmp	r3, #0
    f734:	d100      	bne.n	f738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f738:	bf00      	nop
    f73a:	b003      	add	sp, #12
    f73c:	f85d fb04 	ldr.w	pc, [sp], #4
    f740:	1fff9158 	.word	0x1fff9158
    f744:	1fff9154 	.word	0x1fff9154

0000f748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f748:	b500      	push	{lr}
    f74a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f74c:	f7f1 fa04 	bl	b58 <Sys_GetCoreID>
    f750:	4603      	mov	r3, r0
    f752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    f754:	4a10      	ldr	r2, [pc, #64]	; (f798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f756:	9b01      	ldr	r3, [sp, #4]
    f758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f75c:	2b00      	cmp	r3, #0
    f75e:	d10d      	bne.n	f77c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f760:	f7f1 f92a 	bl	9b8 <Port_schm_read_msr>
    f764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f766:	9b00      	ldr	r3, [sp, #0]
    f768:	f003 0301 	and.w	r3, r3, #1
    f76c:	2b00      	cmp	r3, #0
    f76e:	d100      	bne.n	f772 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    f772:	490a      	ldr	r1, [pc, #40]	; (f79c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    f774:	9b01      	ldr	r3, [sp, #4]
    f776:	9a00      	ldr	r2, [sp, #0]
    f778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    f77c:	4a06      	ldr	r2, [pc, #24]	; (f798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f77e:	9b01      	ldr	r3, [sp, #4]
    f780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f784:	1c5a      	adds	r2, r3, #1
    f786:	4904      	ldr	r1, [pc, #16]	; (f798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    f788:	9b01      	ldr	r3, [sp, #4]
    f78a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f78e:	bf00      	nop
    f790:	b003      	add	sp, #12
    f792:	f85d fb04 	ldr.w	pc, [sp], #4
    f796:	bf00      	nop
    f798:	1fff9160 	.word	0x1fff9160
    f79c:	1fff915c 	.word	0x1fff915c

0000f7a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    f7a0:	b500      	push	{lr}
    f7a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7a4:	f7f1 f9d8 	bl	b58 <Sys_GetCoreID>
    f7a8:	4603      	mov	r3, r0
    f7aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    f7ac:	4a0d      	ldr	r2, [pc, #52]	; (f7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f7ae:	9b01      	ldr	r3, [sp, #4]
    f7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7b4:	1e5a      	subs	r2, r3, #1
    f7b6:	490b      	ldr	r1, [pc, #44]	; (f7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f7b8:	9b01      	ldr	r3, [sp, #4]
    f7ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    f7be:	4a0a      	ldr	r2, [pc, #40]	; (f7e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    f7c0:	9b01      	ldr	r3, [sp, #4]
    f7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7c6:	f003 0301 	and.w	r3, r3, #1
    f7ca:	2b00      	cmp	r3, #0
    f7cc:	d106      	bne.n	f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    f7ce:	4a05      	ldr	r2, [pc, #20]	; (f7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    f7d0:	9b01      	ldr	r3, [sp, #4]
    f7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d100      	bne.n	f7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f7da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f7dc:	bf00      	nop
    f7de:	b003      	add	sp, #12
    f7e0:	f85d fb04 	ldr.w	pc, [sp], #4
    f7e4:	1fff9160 	.word	0x1fff9160
    f7e8:	1fff915c 	.word	0x1fff915c

0000f7ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f7ec:	b500      	push	{lr}
    f7ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7f0:	f7f1 f9b2 	bl	b58 <Sys_GetCoreID>
    f7f4:	4603      	mov	r3, r0
    f7f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    f7f8:	4a10      	ldr	r2, [pc, #64]	; (f83c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f7fa:	9b01      	ldr	r3, [sp, #4]
    f7fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f800:	2b00      	cmp	r3, #0
    f802:	d10d      	bne.n	f820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f804:	f7f1 f8d8 	bl	9b8 <Port_schm_read_msr>
    f808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f80a:	9b00      	ldr	r3, [sp, #0]
    f80c:	f003 0301 	and.w	r3, r3, #1
    f810:	2b00      	cmp	r3, #0
    f812:	d100      	bne.n	f816 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    f816:	490a      	ldr	r1, [pc, #40]	; (f840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    f818:	9b01      	ldr	r3, [sp, #4]
    f81a:	9a00      	ldr	r2, [sp, #0]
    f81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    f820:	4a06      	ldr	r2, [pc, #24]	; (f83c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f822:	9b01      	ldr	r3, [sp, #4]
    f824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f828:	1c5a      	adds	r2, r3, #1
    f82a:	4904      	ldr	r1, [pc, #16]	; (f83c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    f82c:	9b01      	ldr	r3, [sp, #4]
    f82e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f832:	bf00      	nop
    f834:	b003      	add	sp, #12
    f836:	f85d fb04 	ldr.w	pc, [sp], #4
    f83a:	bf00      	nop
    f83c:	1fff9168 	.word	0x1fff9168
    f840:	1fff9164 	.word	0x1fff9164

0000f844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    f844:	b500      	push	{lr}
    f846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f848:	f7f1 f986 	bl	b58 <Sys_GetCoreID>
    f84c:	4603      	mov	r3, r0
    f84e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    f850:	4a0d      	ldr	r2, [pc, #52]	; (f888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f852:	9b01      	ldr	r3, [sp, #4]
    f854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f858:	1e5a      	subs	r2, r3, #1
    f85a:	490b      	ldr	r1, [pc, #44]	; (f888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f85c:	9b01      	ldr	r3, [sp, #4]
    f85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    f862:	4a0a      	ldr	r2, [pc, #40]	; (f88c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f86a:	f003 0301 	and.w	r3, r3, #1
    f86e:	2b00      	cmp	r3, #0
    f870:	d106      	bne.n	f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    f872:	4a05      	ldr	r2, [pc, #20]	; (f888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    f874:	9b01      	ldr	r3, [sp, #4]
    f876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f87a:	2b00      	cmp	r3, #0
    f87c:	d100      	bne.n	f880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f87e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f880:	bf00      	nop
    f882:	b003      	add	sp, #12
    f884:	f85d fb04 	ldr.w	pc, [sp], #4
    f888:	1fff9168 	.word	0x1fff9168
    f88c:	1fff9164 	.word	0x1fff9164

0000f890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f890:	b500      	push	{lr}
    f892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f894:	f7f1 f960 	bl	b58 <Sys_GetCoreID>
    f898:	4603      	mov	r3, r0
    f89a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    f89c:	4a10      	ldr	r2, [pc, #64]	; (f8e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f89e:	9b01      	ldr	r3, [sp, #4]
    f8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8a4:	2b00      	cmp	r3, #0
    f8a6:	d10d      	bne.n	f8c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8a8:	f7f1 f886 	bl	9b8 <Port_schm_read_msr>
    f8ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8ae:	9b00      	ldr	r3, [sp, #0]
    f8b0:	f003 0301 	and.w	r3, r3, #1
    f8b4:	2b00      	cmp	r3, #0
    f8b6:	d100      	bne.n	f8ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    f8ba:	490a      	ldr	r1, [pc, #40]	; (f8e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    f8bc:	9b01      	ldr	r3, [sp, #4]
    f8be:	9a00      	ldr	r2, [sp, #0]
    f8c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    f8c4:	4a06      	ldr	r2, [pc, #24]	; (f8e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f8c6:	9b01      	ldr	r3, [sp, #4]
    f8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8cc:	1c5a      	adds	r2, r3, #1
    f8ce:	4904      	ldr	r1, [pc, #16]	; (f8e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f8d0:	9b01      	ldr	r3, [sp, #4]
    f8d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f8d6:	bf00      	nop
    f8d8:	b003      	add	sp, #12
    f8da:	f85d fb04 	ldr.w	pc, [sp], #4
    f8de:	bf00      	nop
    f8e0:	1fff9170 	.word	0x1fff9170
    f8e4:	1fff916c 	.word	0x1fff916c

0000f8e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f8e8:	b500      	push	{lr}
    f8ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8ec:	f7f1 f934 	bl	b58 <Sys_GetCoreID>
    f8f0:	4603      	mov	r3, r0
    f8f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    f8f4:	4a0d      	ldr	r2, [pc, #52]	; (f92c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f8f6:	9b01      	ldr	r3, [sp, #4]
    f8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8fc:	1e5a      	subs	r2, r3, #1
    f8fe:	490b      	ldr	r1, [pc, #44]	; (f92c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f900:	9b01      	ldr	r3, [sp, #4]
    f902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    f906:	4a0a      	ldr	r2, [pc, #40]	; (f930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    f908:	9b01      	ldr	r3, [sp, #4]
    f90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f90e:	f003 0301 	and.w	r3, r3, #1
    f912:	2b00      	cmp	r3, #0
    f914:	d106      	bne.n	f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    f916:	4a05      	ldr	r2, [pc, #20]	; (f92c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f918:	9b01      	ldr	r3, [sp, #4]
    f91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f91e:	2b00      	cmp	r3, #0
    f920:	d100      	bne.n	f924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f924:	bf00      	nop
    f926:	b003      	add	sp, #12
    f928:	f85d fb04 	ldr.w	pc, [sp], #4
    f92c:	1fff9170 	.word	0x1fff9170
    f930:	1fff916c 	.word	0x1fff916c

0000f934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f934:	b500      	push	{lr}
    f936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f938:	f7f1 f90e 	bl	b58 <Sys_GetCoreID>
    f93c:	4603      	mov	r3, r0
    f93e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    f940:	4a10      	ldr	r2, [pc, #64]	; (f984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f942:	9b01      	ldr	r3, [sp, #4]
    f944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f948:	2b00      	cmp	r3, #0
    f94a:	d10d      	bne.n	f968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f94c:	f7f1 f834 	bl	9b8 <Port_schm_read_msr>
    f950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f952:	9b00      	ldr	r3, [sp, #0]
    f954:	f003 0301 	and.w	r3, r3, #1
    f958:	2b00      	cmp	r3, #0
    f95a:	d100      	bne.n	f95e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f95c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    f95e:	490a      	ldr	r1, [pc, #40]	; (f988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    f960:	9b01      	ldr	r3, [sp, #4]
    f962:	9a00      	ldr	r2, [sp, #0]
    f964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    f968:	4a06      	ldr	r2, [pc, #24]	; (f984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f96a:	9b01      	ldr	r3, [sp, #4]
    f96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f970:	1c5a      	adds	r2, r3, #1
    f972:	4904      	ldr	r1, [pc, #16]	; (f984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f974:	9b01      	ldr	r3, [sp, #4]
    f976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f97a:	bf00      	nop
    f97c:	b003      	add	sp, #12
    f97e:	f85d fb04 	ldr.w	pc, [sp], #4
    f982:	bf00      	nop
    f984:	1fff9178 	.word	0x1fff9178
    f988:	1fff9174 	.word	0x1fff9174

0000f98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f98c:	b500      	push	{lr}
    f98e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f990:	f7f1 f8e2 	bl	b58 <Sys_GetCoreID>
    f994:	4603      	mov	r3, r0
    f996:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    f998:	4a0d      	ldr	r2, [pc, #52]	; (f9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f99a:	9b01      	ldr	r3, [sp, #4]
    f99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a0:	1e5a      	subs	r2, r3, #1
    f9a2:	490b      	ldr	r1, [pc, #44]	; (f9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f9a4:	9b01      	ldr	r3, [sp, #4]
    f9a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    f9aa:	4a0a      	ldr	r2, [pc, #40]	; (f9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    f9ac:	9b01      	ldr	r3, [sp, #4]
    f9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b2:	f003 0301 	and.w	r3, r3, #1
    f9b6:	2b00      	cmp	r3, #0
    f9b8:	d106      	bne.n	f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    f9ba:	4a05      	ldr	r2, [pc, #20]	; (f9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f9bc:	9b01      	ldr	r3, [sp, #4]
    f9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9c2:	2b00      	cmp	r3, #0
    f9c4:	d100      	bne.n	f9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9c8:	bf00      	nop
    f9ca:	b003      	add	sp, #12
    f9cc:	f85d fb04 	ldr.w	pc, [sp], #4
    f9d0:	1fff9178 	.word	0x1fff9178
    f9d4:	1fff9174 	.word	0x1fff9174

0000f9d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f9d8:	b500      	push	{lr}
    f9da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9dc:	f7f1 f8bc 	bl	b58 <Sys_GetCoreID>
    f9e0:	4603      	mov	r3, r0
    f9e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    f9e4:	4a10      	ldr	r2, [pc, #64]	; (fa28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f9e6:	9b01      	ldr	r3, [sp, #4]
    f9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d10d      	bne.n	fa0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9f0:	f7f0 ffe2 	bl	9b8 <Port_schm_read_msr>
    f9f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9f6:	9b00      	ldr	r3, [sp, #0]
    f9f8:	f003 0301 	and.w	r3, r3, #1
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	d100      	bne.n	fa02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fa02:	490a      	ldr	r1, [pc, #40]	; (fa2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    fa04:	9b01      	ldr	r3, [sp, #4]
    fa06:	9a00      	ldr	r2, [sp, #0]
    fa08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    fa0c:	4a06      	ldr	r2, [pc, #24]	; (fa28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fa0e:	9b01      	ldr	r3, [sp, #4]
    fa10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa14:	1c5a      	adds	r2, r3, #1
    fa16:	4904      	ldr	r1, [pc, #16]	; (fa28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    fa18:	9b01      	ldr	r3, [sp, #4]
    fa1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa1e:	bf00      	nop
    fa20:	b003      	add	sp, #12
    fa22:	f85d fb04 	ldr.w	pc, [sp], #4
    fa26:	bf00      	nop
    fa28:	1fff9180 	.word	0x1fff9180
    fa2c:	1fff917c 	.word	0x1fff917c

0000fa30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    fa30:	b500      	push	{lr}
    fa32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa34:	f7f1 f890 	bl	b58 <Sys_GetCoreID>
    fa38:	4603      	mov	r3, r0
    fa3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    fa3c:	4a0d      	ldr	r2, [pc, #52]	; (fa74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fa3e:	9b01      	ldr	r3, [sp, #4]
    fa40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa44:	1e5a      	subs	r2, r3, #1
    fa46:	490b      	ldr	r1, [pc, #44]	; (fa74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fa48:	9b01      	ldr	r3, [sp, #4]
    fa4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fa4e:	4a0a      	ldr	r2, [pc, #40]	; (fa78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    fa50:	9b01      	ldr	r3, [sp, #4]
    fa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa56:	f003 0301 	and.w	r3, r3, #1
    fa5a:	2b00      	cmp	r3, #0
    fa5c:	d106      	bne.n	fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    fa5e:	4a05      	ldr	r2, [pc, #20]	; (fa74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    fa60:	9b01      	ldr	r3, [sp, #4]
    fa62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa66:	2b00      	cmp	r3, #0
    fa68:	d100      	bne.n	fa6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa6c:	bf00      	nop
    fa6e:	b003      	add	sp, #12
    fa70:	f85d fb04 	ldr.w	pc, [sp], #4
    fa74:	1fff9180 	.word	0x1fff9180
    fa78:	1fff917c 	.word	0x1fff917c

0000fa7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fa7c:	b500      	push	{lr}
    fa7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa80:	f7f1 f86a 	bl	b58 <Sys_GetCoreID>
    fa84:	4603      	mov	r3, r0
    fa86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    fa88:	4a10      	ldr	r2, [pc, #64]	; (facc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fa8a:	9b01      	ldr	r3, [sp, #4]
    fa8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa90:	2b00      	cmp	r3, #0
    fa92:	d10d      	bne.n	fab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa94:	f7f0 ff90 	bl	9b8 <Port_schm_read_msr>
    fa98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa9a:	9b00      	ldr	r3, [sp, #0]
    fa9c:	f003 0301 	and.w	r3, r3, #1
    faa0:	2b00      	cmp	r3, #0
    faa2:	d100      	bne.n	faa6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    faa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    faa6:	490a      	ldr	r1, [pc, #40]	; (fad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    faa8:	9b01      	ldr	r3, [sp, #4]
    faaa:	9a00      	ldr	r2, [sp, #0]
    faac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    fab0:	4a06      	ldr	r2, [pc, #24]	; (facc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fab2:	9b01      	ldr	r3, [sp, #4]
    fab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab8:	1c5a      	adds	r2, r3, #1
    faba:	4904      	ldr	r1, [pc, #16]	; (facc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    fabc:	9b01      	ldr	r3, [sp, #4]
    fabe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fac2:	bf00      	nop
    fac4:	b003      	add	sp, #12
    fac6:	f85d fb04 	ldr.w	pc, [sp], #4
    faca:	bf00      	nop
    facc:	1fff9188 	.word	0x1fff9188
    fad0:	1fff9184 	.word	0x1fff9184

0000fad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    fad4:	b500      	push	{lr}
    fad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fad8:	f7f1 f83e 	bl	b58 <Sys_GetCoreID>
    fadc:	4603      	mov	r3, r0
    fade:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    fae0:	4a0d      	ldr	r2, [pc, #52]	; (fb18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fae2:	9b01      	ldr	r3, [sp, #4]
    fae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fae8:	1e5a      	subs	r2, r3, #1
    faea:	490b      	ldr	r1, [pc, #44]	; (fb18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    faec:	9b01      	ldr	r3, [sp, #4]
    faee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    faf2:	4a0a      	ldr	r2, [pc, #40]	; (fb1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    faf4:	9b01      	ldr	r3, [sp, #4]
    faf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fafa:	f003 0301 	and.w	r3, r3, #1
    fafe:	2b00      	cmp	r3, #0
    fb00:	d106      	bne.n	fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    fb02:	4a05      	ldr	r2, [pc, #20]	; (fb18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    fb04:	9b01      	ldr	r3, [sp, #4]
    fb06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb0a:	2b00      	cmp	r3, #0
    fb0c:	d100      	bne.n	fb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb10:	bf00      	nop
    fb12:	b003      	add	sp, #12
    fb14:	f85d fb04 	ldr.w	pc, [sp], #4
    fb18:	1fff9188 	.word	0x1fff9188
    fb1c:	1fff9184 	.word	0x1fff9184

0000fb20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fb20:	b500      	push	{lr}
    fb22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb24:	f7f1 f818 	bl	b58 <Sys_GetCoreID>
    fb28:	4603      	mov	r3, r0
    fb2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    fb2c:	4a10      	ldr	r2, [pc, #64]	; (fb70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fb2e:	9b01      	ldr	r3, [sp, #4]
    fb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb34:	2b00      	cmp	r3, #0
    fb36:	d10d      	bne.n	fb54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb38:	f7f0 ff3e 	bl	9b8 <Port_schm_read_msr>
    fb3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb3e:	9b00      	ldr	r3, [sp, #0]
    fb40:	f003 0301 	and.w	r3, r3, #1
    fb44:	2b00      	cmp	r3, #0
    fb46:	d100      	bne.n	fb4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    fb4a:	490a      	ldr	r1, [pc, #40]	; (fb74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    fb4c:	9b01      	ldr	r3, [sp, #4]
    fb4e:	9a00      	ldr	r2, [sp, #0]
    fb50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    fb54:	4a06      	ldr	r2, [pc, #24]	; (fb70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fb56:	9b01      	ldr	r3, [sp, #4]
    fb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb5c:	1c5a      	adds	r2, r3, #1
    fb5e:	4904      	ldr	r1, [pc, #16]	; (fb70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    fb60:	9b01      	ldr	r3, [sp, #4]
    fb62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb66:	bf00      	nop
    fb68:	b003      	add	sp, #12
    fb6a:	f85d fb04 	ldr.w	pc, [sp], #4
    fb6e:	bf00      	nop
    fb70:	1fff9190 	.word	0x1fff9190
    fb74:	1fff918c 	.word	0x1fff918c

0000fb78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    fb78:	b500      	push	{lr}
    fb7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb7c:	f7f0 ffec 	bl	b58 <Sys_GetCoreID>
    fb80:	4603      	mov	r3, r0
    fb82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    fb84:	4a0d      	ldr	r2, [pc, #52]	; (fbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fb86:	9b01      	ldr	r3, [sp, #4]
    fb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb8c:	1e5a      	subs	r2, r3, #1
    fb8e:	490b      	ldr	r1, [pc, #44]	; (fbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fb90:	9b01      	ldr	r3, [sp, #4]
    fb92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fb96:	4a0a      	ldr	r2, [pc, #40]	; (fbc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    fb98:	9b01      	ldr	r3, [sp, #4]
    fb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb9e:	f003 0301 	and.w	r3, r3, #1
    fba2:	2b00      	cmp	r3, #0
    fba4:	d106      	bne.n	fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    fba6:	4a05      	ldr	r2, [pc, #20]	; (fbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    fba8:	9b01      	ldr	r3, [sp, #4]
    fbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbae:	2b00      	cmp	r3, #0
    fbb0:	d100      	bne.n	fbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbb4:	bf00      	nop
    fbb6:	b003      	add	sp, #12
    fbb8:	f85d fb04 	ldr.w	pc, [sp], #4
    fbbc:	1fff9190 	.word	0x1fff9190
    fbc0:	1fff918c 	.word	0x1fff918c

0000fbc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fbc4:	b500      	push	{lr}
    fbc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbc8:	f7f0 ffc6 	bl	b58 <Sys_GetCoreID>
    fbcc:	4603      	mov	r3, r0
    fbce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    fbd0:	4a10      	ldr	r2, [pc, #64]	; (fc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fbd2:	9b01      	ldr	r3, [sp, #4]
    fbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbd8:	2b00      	cmp	r3, #0
    fbda:	d10d      	bne.n	fbf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fbdc:	f7f0 feec 	bl	9b8 <Port_schm_read_msr>
    fbe0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fbe2:	9b00      	ldr	r3, [sp, #0]
    fbe4:	f003 0301 	and.w	r3, r3, #1
    fbe8:	2b00      	cmp	r3, #0
    fbea:	d100      	bne.n	fbee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fbec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    fbee:	490a      	ldr	r1, [pc, #40]	; (fc18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    fbf0:	9b01      	ldr	r3, [sp, #4]
    fbf2:	9a00      	ldr	r2, [sp, #0]
    fbf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    fbf8:	4a06      	ldr	r2, [pc, #24]	; (fc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fbfa:	9b01      	ldr	r3, [sp, #4]
    fbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc00:	1c5a      	adds	r2, r3, #1
    fc02:	4904      	ldr	r1, [pc, #16]	; (fc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    fc04:	9b01      	ldr	r3, [sp, #4]
    fc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc0a:	bf00      	nop
    fc0c:	b003      	add	sp, #12
    fc0e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc12:	bf00      	nop
    fc14:	1fff9198 	.word	0x1fff9198
    fc18:	1fff9194 	.word	0x1fff9194

0000fc1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    fc1c:	b500      	push	{lr}
    fc1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc20:	f7f0 ff9a 	bl	b58 <Sys_GetCoreID>
    fc24:	4603      	mov	r3, r0
    fc26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    fc28:	4a0d      	ldr	r2, [pc, #52]	; (fc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fc2a:	9b01      	ldr	r3, [sp, #4]
    fc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc30:	1e5a      	subs	r2, r3, #1
    fc32:	490b      	ldr	r1, [pc, #44]	; (fc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fc34:	9b01      	ldr	r3, [sp, #4]
    fc36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    fc3a:	4a0a      	ldr	r2, [pc, #40]	; (fc64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    fc3c:	9b01      	ldr	r3, [sp, #4]
    fc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc42:	f003 0301 	and.w	r3, r3, #1
    fc46:	2b00      	cmp	r3, #0
    fc48:	d106      	bne.n	fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    fc4a:	4a05      	ldr	r2, [pc, #20]	; (fc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    fc4c:	9b01      	ldr	r3, [sp, #4]
    fc4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc52:	2b00      	cmp	r3, #0
    fc54:	d100      	bne.n	fc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc58:	bf00      	nop
    fc5a:	b003      	add	sp, #12
    fc5c:	f85d fb04 	ldr.w	pc, [sp], #4
    fc60:	1fff9198 	.word	0x1fff9198
    fc64:	1fff9194 	.word	0x1fff9194

0000fc68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fc68:	b500      	push	{lr}
    fc6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc6c:	f7f0 ff74 	bl	b58 <Sys_GetCoreID>
    fc70:	4603      	mov	r3, r0
    fc72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    fc74:	4a10      	ldr	r2, [pc, #64]	; (fcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fc76:	9b01      	ldr	r3, [sp, #4]
    fc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc7c:	2b00      	cmp	r3, #0
    fc7e:	d10d      	bne.n	fc9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc80:	f7f0 fe9a 	bl	9b8 <Port_schm_read_msr>
    fc84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc86:	9b00      	ldr	r3, [sp, #0]
    fc88:	f003 0301 	and.w	r3, r3, #1
    fc8c:	2b00      	cmp	r3, #0
    fc8e:	d100      	bne.n	fc92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fc92:	490a      	ldr	r1, [pc, #40]	; (fcbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    fc94:	9b01      	ldr	r3, [sp, #4]
    fc96:	9a00      	ldr	r2, [sp, #0]
    fc98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    fc9c:	4a06      	ldr	r2, [pc, #24]	; (fcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fc9e:	9b01      	ldr	r3, [sp, #4]
    fca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca4:	1c5a      	adds	r2, r3, #1
    fca6:	4904      	ldr	r1, [pc, #16]	; (fcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    fca8:	9b01      	ldr	r3, [sp, #4]
    fcaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fcae:	bf00      	nop
    fcb0:	b003      	add	sp, #12
    fcb2:	f85d fb04 	ldr.w	pc, [sp], #4
    fcb6:	bf00      	nop
    fcb8:	1fff91a0 	.word	0x1fff91a0
    fcbc:	1fff919c 	.word	0x1fff919c

0000fcc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    fcc0:	b500      	push	{lr}
    fcc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcc4:	f7f0 ff48 	bl	b58 <Sys_GetCoreID>
    fcc8:	4603      	mov	r3, r0
    fcca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    fccc:	4a0d      	ldr	r2, [pc, #52]	; (fd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fcce:	9b01      	ldr	r3, [sp, #4]
    fcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcd4:	1e5a      	subs	r2, r3, #1
    fcd6:	490b      	ldr	r1, [pc, #44]	; (fd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fcd8:	9b01      	ldr	r3, [sp, #4]
    fcda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    fcde:	4a0a      	ldr	r2, [pc, #40]	; (fd08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    fce0:	9b01      	ldr	r3, [sp, #4]
    fce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fce6:	f003 0301 	and.w	r3, r3, #1
    fcea:	2b00      	cmp	r3, #0
    fcec:	d106      	bne.n	fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    fcee:	4a05      	ldr	r2, [pc, #20]	; (fd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    fcf0:	9b01      	ldr	r3, [sp, #4]
    fcf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcf6:	2b00      	cmp	r3, #0
    fcf8:	d100      	bne.n	fcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcfc:	bf00      	nop
    fcfe:	b003      	add	sp, #12
    fd00:	f85d fb04 	ldr.w	pc, [sp], #4
    fd04:	1fff91a0 	.word	0x1fff91a0
    fd08:	1fff919c 	.word	0x1fff919c

0000fd0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fd0c:	b500      	push	{lr}
    fd0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd10:	f7f0 ff22 	bl	b58 <Sys_GetCoreID>
    fd14:	4603      	mov	r3, r0
    fd16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    fd18:	4a10      	ldr	r2, [pc, #64]	; (fd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fd1a:	9b01      	ldr	r3, [sp, #4]
    fd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d10d      	bne.n	fd40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd24:	f7f0 fe48 	bl	9b8 <Port_schm_read_msr>
    fd28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd2a:	9b00      	ldr	r3, [sp, #0]
    fd2c:	f003 0301 	and.w	r3, r3, #1
    fd30:	2b00      	cmp	r3, #0
    fd32:	d100      	bne.n	fd36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    fd36:	490a      	ldr	r1, [pc, #40]	; (fd60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    fd38:	9b01      	ldr	r3, [sp, #4]
    fd3a:	9a00      	ldr	r2, [sp, #0]
    fd3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    fd40:	4a06      	ldr	r2, [pc, #24]	; (fd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fd42:	9b01      	ldr	r3, [sp, #4]
    fd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd48:	1c5a      	adds	r2, r3, #1
    fd4a:	4904      	ldr	r1, [pc, #16]	; (fd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    fd4c:	9b01      	ldr	r3, [sp, #4]
    fd4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd52:	bf00      	nop
    fd54:	b003      	add	sp, #12
    fd56:	f85d fb04 	ldr.w	pc, [sp], #4
    fd5a:	bf00      	nop
    fd5c:	1fff91a8 	.word	0x1fff91a8
    fd60:	1fff91a4 	.word	0x1fff91a4

0000fd64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    fd64:	b500      	push	{lr}
    fd66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd68:	f7f0 fef6 	bl	b58 <Sys_GetCoreID>
    fd6c:	4603      	mov	r3, r0
    fd6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    fd70:	4a0d      	ldr	r2, [pc, #52]	; (fda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fd72:	9b01      	ldr	r3, [sp, #4]
    fd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd78:	1e5a      	subs	r2, r3, #1
    fd7a:	490b      	ldr	r1, [pc, #44]	; (fda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fd7c:	9b01      	ldr	r3, [sp, #4]
    fd7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    fd82:	4a0a      	ldr	r2, [pc, #40]	; (fdac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    fd84:	9b01      	ldr	r3, [sp, #4]
    fd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd8a:	f003 0301 	and.w	r3, r3, #1
    fd8e:	2b00      	cmp	r3, #0
    fd90:	d106      	bne.n	fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    fd92:	4a05      	ldr	r2, [pc, #20]	; (fda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    fd94:	9b01      	ldr	r3, [sp, #4]
    fd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d100      	bne.n	fda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fda0:	bf00      	nop
    fda2:	b003      	add	sp, #12
    fda4:	f85d fb04 	ldr.w	pc, [sp], #4
    fda8:	1fff91a8 	.word	0x1fff91a8
    fdac:	1fff91a4 	.word	0x1fff91a4

0000fdb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fdb0:	b500      	push	{lr}
    fdb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdb4:	f7f0 fed0 	bl	b58 <Sys_GetCoreID>
    fdb8:	4603      	mov	r3, r0
    fdba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    fdbc:	4a10      	ldr	r2, [pc, #64]	; (fe00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fdbe:	9b01      	ldr	r3, [sp, #4]
    fdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdc4:	2b00      	cmp	r3, #0
    fdc6:	d10d      	bne.n	fde4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdc8:	f7f0 fdf6 	bl	9b8 <Port_schm_read_msr>
    fdcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdce:	9b00      	ldr	r3, [sp, #0]
    fdd0:	f003 0301 	and.w	r3, r3, #1
    fdd4:	2b00      	cmp	r3, #0
    fdd6:	d100      	bne.n	fdda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fdd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    fdda:	490a      	ldr	r1, [pc, #40]	; (fe04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    fddc:	9b01      	ldr	r3, [sp, #4]
    fdde:	9a00      	ldr	r2, [sp, #0]
    fde0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    fde4:	4a06      	ldr	r2, [pc, #24]	; (fe00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fde6:	9b01      	ldr	r3, [sp, #4]
    fde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdec:	1c5a      	adds	r2, r3, #1
    fdee:	4904      	ldr	r1, [pc, #16]	; (fe00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    fdf0:	9b01      	ldr	r3, [sp, #4]
    fdf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdf6:	bf00      	nop
    fdf8:	b003      	add	sp, #12
    fdfa:	f85d fb04 	ldr.w	pc, [sp], #4
    fdfe:	bf00      	nop
    fe00:	1fff91b0 	.word	0x1fff91b0
    fe04:	1fff91ac 	.word	0x1fff91ac

0000fe08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    fe08:	b500      	push	{lr}
    fe0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe0c:	f7f0 fea4 	bl	b58 <Sys_GetCoreID>
    fe10:	4603      	mov	r3, r0
    fe12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    fe14:	4a0d      	ldr	r2, [pc, #52]	; (fe4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fe16:	9b01      	ldr	r3, [sp, #4]
    fe18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe1c:	1e5a      	subs	r2, r3, #1
    fe1e:	490b      	ldr	r1, [pc, #44]	; (fe4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fe20:	9b01      	ldr	r3, [sp, #4]
    fe22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    fe26:	4a0a      	ldr	r2, [pc, #40]	; (fe50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe2e:	f003 0301 	and.w	r3, r3, #1
    fe32:	2b00      	cmp	r3, #0
    fe34:	d106      	bne.n	fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    fe36:	4a05      	ldr	r2, [pc, #20]	; (fe4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    fe38:	9b01      	ldr	r3, [sp, #4]
    fe3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe3e:	2b00      	cmp	r3, #0
    fe40:	d100      	bne.n	fe44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe44:	bf00      	nop
    fe46:	b003      	add	sp, #12
    fe48:	f85d fb04 	ldr.w	pc, [sp], #4
    fe4c:	1fff91b0 	.word	0x1fff91b0
    fe50:	1fff91ac 	.word	0x1fff91ac

0000fe54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    fe54:	b500      	push	{lr}
    fe56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe58:	f7f0 fe7e 	bl	b58 <Sys_GetCoreID>
    fe5c:	4603      	mov	r3, r0
    fe5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    fe60:	4a10      	ldr	r2, [pc, #64]	; (fea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fe62:	9b01      	ldr	r3, [sp, #4]
    fe64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d10d      	bne.n	fe88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe6c:	f7f0 fda4 	bl	9b8 <Port_schm_read_msr>
    fe70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe72:	9b00      	ldr	r3, [sp, #0]
    fe74:	f003 0301 	and.w	r3, r3, #1
    fe78:	2b00      	cmp	r3, #0
    fe7a:	d100      	bne.n	fe7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    fe7e:	490a      	ldr	r1, [pc, #40]	; (fea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    fe80:	9b01      	ldr	r3, [sp, #4]
    fe82:	9a00      	ldr	r2, [sp, #0]
    fe84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    fe88:	4a06      	ldr	r2, [pc, #24]	; (fea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fe8a:	9b01      	ldr	r3, [sp, #4]
    fe8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe90:	1c5a      	adds	r2, r3, #1
    fe92:	4904      	ldr	r1, [pc, #16]	; (fea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    fe94:	9b01      	ldr	r3, [sp, #4]
    fe96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe9a:	bf00      	nop
    fe9c:	b003      	add	sp, #12
    fe9e:	f85d fb04 	ldr.w	pc, [sp], #4
    fea2:	bf00      	nop
    fea4:	1fff91b8 	.word	0x1fff91b8
    fea8:	1fff91b4 	.word	0x1fff91b4

0000feac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    feac:	b500      	push	{lr}
    feae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feb0:	f7f0 fe52 	bl	b58 <Sys_GetCoreID>
    feb4:	4603      	mov	r3, r0
    feb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    feb8:	4a0d      	ldr	r2, [pc, #52]	; (fef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec0:	1e5a      	subs	r2, r3, #1
    fec2:	490b      	ldr	r1, [pc, #44]	; (fef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    feca:	4a0a      	ldr	r2, [pc, #40]	; (fef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    fecc:	9b01      	ldr	r3, [sp, #4]
    fece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fed2:	f003 0301 	and.w	r3, r3, #1
    fed6:	2b00      	cmp	r3, #0
    fed8:	d106      	bne.n	fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    feda:	4a05      	ldr	r2, [pc, #20]	; (fef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    fedc:	9b01      	ldr	r3, [sp, #4]
    fede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fee2:	2b00      	cmp	r3, #0
    fee4:	d100      	bne.n	fee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fee8:	bf00      	nop
    feea:	b003      	add	sp, #12
    feec:	f85d fb04 	ldr.w	pc, [sp], #4
    fef0:	1fff91b8 	.word	0x1fff91b8
    fef4:	1fff91b4 	.word	0x1fff91b4

0000fef8 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    fef8:	bf00      	nop
    fefa:	4770      	bx	lr

0000fefc <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    fefc:	b510      	push	{r4, lr}
    fefe:	b084      	sub	sp, #16
    ff00:	4604      	mov	r4, r0
    ff02:	4608      	mov	r0, r1
    ff04:	4611      	mov	r1, r2
    ff06:	461a      	mov	r2, r3
    ff08:	4623      	mov	r3, r4
    ff0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    ff0e:	4603      	mov	r3, r0
    ff10:	f88d 3005 	strb.w	r3, [sp, #5]
    ff14:	460b      	mov	r3, r1
    ff16:	f88d 3004 	strb.w	r3, [sp, #4]
    ff1a:	4613      	mov	r3, r2
    ff1c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff20:	f7f0 fe1a 	bl	b58 <Sys_GetCoreID>
    ff24:	4603      	mov	r3, r0
    ff26:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    ff28:	490d      	ldr	r1, [pc, #52]	; (ff60 <Det_ReportError+0x64>)
    ff2a:	9b03      	ldr	r3, [sp, #12]
    ff2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ff30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    ff34:	4a0b      	ldr	r2, [pc, #44]	; (ff64 <Det_ReportError+0x68>)
    ff36:	9b03      	ldr	r3, [sp, #12]
    ff38:	4413      	add	r3, r2
    ff3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ff3e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    ff40:	4a09      	ldr	r2, [pc, #36]	; (ff68 <Det_ReportError+0x6c>)
    ff42:	9b03      	ldr	r3, [sp, #12]
    ff44:	4413      	add	r3, r2
    ff46:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ff4a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    ff4c:	4a07      	ldr	r2, [pc, #28]	; (ff6c <Det_ReportError+0x70>)
    ff4e:	9b03      	ldr	r3, [sp, #12]
    ff50:	4413      	add	r3, r2
    ff52:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ff56:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ff58:	2300      	movs	r3, #0
}
    ff5a:	4618      	mov	r0, r3
    ff5c:	b004      	add	sp, #16
    ff5e:	bd10      	pop	{r4, pc}
    ff60:	1fff91e4 	.word	0x1fff91e4
    ff64:	1fff91bc 	.word	0x1fff91bc
    ff68:	1fff91c0 	.word	0x1fff91c0
    ff6c:	1fff91c4 	.word	0x1fff91c4

0000ff70 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    ff70:	b510      	push	{r4, lr}
    ff72:	b084      	sub	sp, #16
    ff74:	4604      	mov	r4, r0
    ff76:	4608      	mov	r0, r1
    ff78:	4611      	mov	r1, r2
    ff7a:	461a      	mov	r2, r3
    ff7c:	4623      	mov	r3, r4
    ff7e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ff82:	4603      	mov	r3, r0
    ff84:	f88d 3005 	strb.w	r3, [sp, #5]
    ff88:	460b      	mov	r3, r1
    ff8a:	f88d 3004 	strb.w	r3, [sp, #4]
    ff8e:	4613      	mov	r3, r2
    ff90:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff94:	f7f0 fde0 	bl	b58 <Sys_GetCoreID>
    ff98:	4603      	mov	r3, r0
    ff9a:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    ff9c:	490d      	ldr	r1, [pc, #52]	; (ffd4 <Det_ReportRuntimeError+0x64>)
    ff9e:	9b03      	ldr	r3, [sp, #12]
    ffa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ffa4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    ffa8:	4a0b      	ldr	r2, [pc, #44]	; (ffd8 <Det_ReportRuntimeError+0x68>)
    ffaa:	9b03      	ldr	r3, [sp, #12]
    ffac:	4413      	add	r3, r2
    ffae:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ffb2:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ffb4:	4a09      	ldr	r2, [pc, #36]	; (ffdc <Det_ReportRuntimeError+0x6c>)
    ffb6:	9b03      	ldr	r3, [sp, #12]
    ffb8:	4413      	add	r3, r2
    ffba:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ffbe:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ffc0:	4a07      	ldr	r2, [pc, #28]	; (ffe0 <Det_ReportRuntimeError+0x70>)
    ffc2:	9b03      	ldr	r3, [sp, #12]
    ffc4:	4413      	add	r3, r2
    ffc6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ffca:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ffcc:	2300      	movs	r3, #0
}
    ffce:	4618      	mov	r0, r3
    ffd0:	b004      	add	sp, #16
    ffd2:	bd10      	pop	{r4, pc}
    ffd4:	1fff91e8 	.word	0x1fff91e8
    ffd8:	1fff91c8 	.word	0x1fff91c8
    ffdc:	1fff91cc 	.word	0x1fff91cc
    ffe0:	1fff91d0 	.word	0x1fff91d0

0000ffe4 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ffe4:	b510      	push	{r4, lr}
    ffe6:	b084      	sub	sp, #16
    ffe8:	4604      	mov	r4, r0
    ffea:	4608      	mov	r0, r1
    ffec:	4611      	mov	r1, r2
    ffee:	461a      	mov	r2, r3
    fff0:	4623      	mov	r3, r4
    fff2:	f8ad 3006 	strh.w	r3, [sp, #6]
    fff6:	4603      	mov	r3, r0
    fff8:	f88d 3005 	strb.w	r3, [sp, #5]
    fffc:	460b      	mov	r3, r1
    fffe:	f88d 3004 	strb.w	r3, [sp, #4]
   10002:	4613      	mov	r3, r2
   10004:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10008:	f7f0 fda6 	bl	b58 <Sys_GetCoreID>
   1000c:	4603      	mov	r3, r0
   1000e:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   10010:	490d      	ldr	r1, [pc, #52]	; (10048 <Det_ReportTransientFault+0x64>)
   10012:	9b03      	ldr	r3, [sp, #12]
   10014:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10018:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   1001c:	4a0b      	ldr	r2, [pc, #44]	; (1004c <Det_ReportTransientFault+0x68>)
   1001e:	9b03      	ldr	r3, [sp, #12]
   10020:	4413      	add	r3, r2
   10022:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10026:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   10028:	4a09      	ldr	r2, [pc, #36]	; (10050 <Det_ReportTransientFault+0x6c>)
   1002a:	9b03      	ldr	r3, [sp, #12]
   1002c:	4413      	add	r3, r2
   1002e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   10032:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   10034:	4a07      	ldr	r2, [pc, #28]	; (10054 <Det_ReportTransientFault+0x70>)
   10036:	9b03      	ldr	r3, [sp, #12]
   10038:	4413      	add	r3, r2
   1003a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1003e:	701a      	strb	r2, [r3, #0]

    return E_OK;
   10040:	2300      	movs	r3, #0
}
   10042:	4618      	mov	r0, r3
   10044:	b004      	add	sp, #16
   10046:	bd10      	pop	{r4, pc}
   10048:	1fff91e0 	.word	0x1fff91e0
   1004c:	1fff91d4 	.word	0x1fff91d4
   10050:	1fff91d8 	.word	0x1fff91d8
   10054:	1fff91dc 	.word	0x1fff91dc

00010058 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   10058:	bf00      	nop
   1005a:	4770      	bx	lr

0001005c <Fls_ACEraseRomEnd>:
   1005c:	20636441 	.word	0x20636441
   10060:	6e616843 	.word	0x6e616843
   10064:	206c656e 	.word	0x206c656e
   10068:	756c6176 	.word	0x756c6176
   1006c:	25203a65 	.word	0x25203a65
   10070:	00000a64 	.word	0x00000a64
   10074:	6d726554 	.word	0x6d726554
   10078:	6c616e69 	.word	0x6c616e69
   1007c:	00000000 	.word	0x00000000
   10080:	4c554e28 	.word	0x4c554e28
   10084:	0000294c 	.word	0x0000294c

00010088 <Clock_Ip_au8DividerCallbackIndex>:
   10088:	0e0d0c00 06030201 0a070409 000b0805     ................

00010098 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000100a8 <Clock_Ip_au8XoscCallbackIndex>:
   100a8:	00000100 00000000 00000000 00000000     ................

000100b8 <Clock_Ip_au8IrcoscCallbackIndex>:
   100b8:	03020100 00000004 00000000 00000000     ................

000100c8 <Clock_Ip_au8GateCallbackIndex>:
   100c8:	06010200 01040301 00000500 00000000     ................

000100d8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000100e8 <Clock_Ip_au8PllCallbackIndex>:
   100e8:	00000100 00000000 00000000 00000000     ................

000100f8 <Clock_Ip_au8SelectorCallbackIndex>:
   100f8:	0a090800 03020109 07060504 00000000     ................

00010108 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00010118 <Clock_Ip_au8CmuCallbackIndex>:
	...

00010128 <Clock_Ip_au8ClockFeatures>:
	...
   10138:	01000000 00000000 00000000 00000002     ................
   10148:	00000000 00000300 00000000 00040000     ................
   10158:	00000000 05000000 00000000 00000000     ................
   10168:	00000006 00000000 00000100 00000000     ................
   10178:	00010000 00000000 04000000 00000000     ................
   10188:	00000000 00000005 00000001 00000401     ................
   10198:	00000200 00050100 00030000 04020000     ................
   101a8:	04000000 02000000 00000005 00000005     ................
   101b8:	00000403 00000600 00050300 00070000     ................
   101c8:	05000000 00000000 00000000 00000006     ................
	...
   10208:	00050000 00000000 06000000 00000100     ................
   10218:	00000000 00030007 00000000 00000000     ................
   10228:	00000000 00060000 00000000 07000000     ................
   10238:	00000100 00000000 00030008 00000000     ................
	...
   10250:	00090000 00000000 0a000000 00000100     ................
   10260:	00000000 0003000b 00000000 00000000     ................
   10270:	00000000 000c0000 00000000 0d000000     ................
   10280:	00000100 00000000 0003000e 00000000     ................
   10290:	00000800 00000000 00090000 00000000     ................
   102a0:	0a000000 00000000 00000000 0000000b     ................
   102b0:	00000000 00000b01 00000000 000b0200     ................
   102c0:	00000000 0b030000 00000000 00000000     ................
	...
   102d8:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   102e8:	01000000 00000000 00000000 00000007     ................
   102f8:	00007300 00000700 00320000 00090000     .s........2.....
   10308:	02000000 07000000 00000000 00000021     ............!...
   10318:	00000009 00000400 00000900 00030000     ................
   10328:	00070000 61000000 07000000 00000000     .......a........
   10338:	00000024 00000007 00002500 00000700     $........%......
   10348:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   10358:	00000000 00000020 38000004 00003800     .... ......8.8..
   10368:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   10378:	04000000 00260000 00000026 66000004     ......&.&......f
   10388:	00006600 00000400 00370037 00040000     .f......7.7.....
   10398:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   103a8:	2e000004 00002e00 00000200 00404040     ............@@@.
   103b8:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   103c8:	0000006b 6c000004 00006c00 00000900     k......l.l......
   103d8:	00010000 00090000 00000000 07000000     ................
   103e8:	00000000 00000036 00000007 00003100     ....6........1..
   103f8:	00000700 00490000 00070000 4a000000     ......I........J
   10408:	07000000 00000000 0000004b 00000007     ........K.......
   10418:	00004c00 00000700 004d0000 00070000     .L........M.....
   10428:	3d000000 03000000 00000000 00000000     ...=............

00010438 <Clock_Ip_au16SelectorEntryHardwareValue>:
   10438:	01010a03 01010001 04040002 02000603     ................
   10448:	00010810 02020100 00000000 00000007     ................
   10458:	00000009 00000000 00000c0e 00000000     ................
	...

00010490 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   10490:	00020000 00000300 00000601 00000000     ................
	...

000104c0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   104c0:	00000700 00000000 02020000 01010303     ................
   104d0:	03020606 00000000 00000000 00000000     ................
	...

000104f0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   104f0:	00000001 00000000 02020000 01010303     ................
   10500:	03020606 00000000 00000000 00000000     ................
	...

00010520 <Clock_Ip_au8DividerValueHardwareValue>:
   10520:	00020100 00000003 00000004 00000000     ................
   10530:	00000005 00000000 00000000 00000000     ................
   10540:	00000006 00000000 00000000 00000000     ................
	...
   10560:	00000007                                ....

00010564 <Clock_Ip_apxScgPeriphAsyncDivs>:
   10564:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00010574 <Clock_Ip_aeSourceTypeClockName>:
   10574:	00000000 00000001 00000001 00000001     ................
   10584:	00000001 00000001 00000001 00000001     ................
   10594:	00000002 00000003 00000001 00000001     ................
   105a4:	00000001 00000001 00000002 00000002     ................
   105b4:	00000003 00000003 00000001 00000001     ................
   105c4:	00000004 00000004 00000004 00000004     ................
	...

00010630 <Clock_Ip_aeHwPllName>:
   10630:	00000009                                ....

00010634 <Clock_Ip_aeHwDfsName>:
   10634:	00000057                                W...

00010638 <Clock_Ip_axDividerCallbacks>:
   10638:	00002b99 00002ba3 00002bbd 00002bd7     .+...+...+...+..
   10648:	00002bf1 00002c0b 00002c25 00002c3f     .+...,..%,..?,..
   10658:	00002c59 00002c73 00002c8d 00002ca7     Y,..s,...,...,..
   10668:	00002cc1 00002cdb 00002cf5              .,...,...,..

00010674 <Clock_Ip_axDividerTriggerCallbacks>:
   10674:	00003069 00003069                       i0..i0..

0001067c <Clock_Ip_axExtOscCallbacks>:
   1067c:	00003075 00003075 00003075 0000307f     u0..u0..u0...0..
   1068c:	00003075 00003089 000030a3 000030bd     u0...0...0...0..
   1069c:	00003141 00003155                       A1..U1..

000106a4 <Clock_Ip_axFracDivCallbacks>:
   106a4:	00003315 00003315 0000331f              .3...3...3..

000106b0 <Clock_Ip_axGateCallbacks>:
   106b0:	00003339 00003343 00003443 0000345d     93..C3..C4..]4..
   106c0:	000033f3 0000340d 000033a3 000033bd     .3...4...3...3..
   106d0:	00003353 0000336d 00003493 000034ad     S3..m3...4...4..
   106e0:	000034e3 000034fd                       .4...4..

000106e8 <Clock_Ip_axIntOscCallbacks>:
   106e8:	000036a9 000036a9 000036b3 000036bd     .6...6...6...6..
   106f8:	000036d7 000036f1 00003705 0000371f     .6...6...7...7..
   10708:	00003739 0000374d 00003767 00003781     97..M7..g7...7..
   10718:	00003829 00003843 0000385d              )8..C8..]8..

00010724 <Clock_Ip_axCmuCallbacks>:
   10724:	00003df9 00003e03 00003e0f 00003df9     .=...>...>...=..

00010734 <Clock_Ip_axPllCallbacks>:
   10734:	00003e19 00003e19 00003e23 00003e19     .>...>..#>...>..
   10744:	00003e2f 00003e39 00003e53 00003e6d     />..9>..S>..m>..
   10754:	00003f11 00003efd                       .?...>..

0001075c <Clock_Ip_axPcfsCallbacks>:
   1075c:	0000406d                                m@..

00010760 <Clock_Ip_axSelectorCallbacks>:
   10760:	00004079 00004079 00004083 0000409d     y@..y@...@...@..
   10770:	00004079 000040b7 000040d1 000040eb     y@...@...@...@..
   10780:	00004105 0000411f 00004139 00004153     .A...A..9A..SA..
   10790:	0000416d 00004187 000041a1 000041bb     mA...A...A...A..
   107a0:	000041d5 000041ef 00004209 00004223     .A...A...B..#B..
   107b0:	0000423d 00004257                       =B..WB..

000107b8 <ClockSource>:
   107b8:	00000000 00000008 00000002 00000005     ................
	...
   107d0:	00000009                                ....

000107d4 <ResetReasonArray>:
   107d4:	00000000 00000001 00000002 00000003     ................
   107e4:	00000004 00000005 00000006 00000007     ................
   107f4:	00000008 00000009 0000000a 0000000b     ................
   10804:	0000000c 0000000d 0000000e              ............

00010810 <Port_au32PortCiPortBaseAddr>:
   10810:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   10820:	4004d000                                ...@

00010824 <Port_au32PortCiGpioBaseAddr>:
   10824:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   10834:	400ff100                                ...@

00010838 <Adc_Ip_apxBase>:
   10838:	4003b000 40027000                       ...@.p.@

00010840 <Pdb_Adc_Ip_apxBase>:
   10840:	40036000 40031000                       .`.@...@

00010848 <AdcIpChansConfig_0>:
   10848:	00000000 00000005 00000000              ............

00010854 <AdcIpConfig_0>:
   10854:	00000000 00000003 00000000 0000000c     ................
   10864:	00000000 00000001 00000001 00000000     ................
	...
   1087c:	00ff0000 00000000 00000000 00010848     ............H...
   1088c:	0000a28d                                ....

00010890 <AdcIpwCfg>:
   10890:	00010854 00000000 00010d58 00000000     T.......X.......
   108a0:	ff01ff00 00000001 00000001 0001ffff     ................
   108b0:	0000ff00                                ....

000108b4 <AdcIpwGroupConfig_0>:
	...
   108bc:	000000c8 00010000 00000000              ............

000108c8 <Adc_Group0_Assignment_0>:
   108c8:	00000000                                ....

000108cc <Adc_GroupsCfg>:
	...
   108e8:	00000001 000108c8 00050001 00000005     ................
   108f8:	00000000 000108b4                       ........

00010900 <Adc_au16GroupIdToIndexMap>:
   10900:	00000000                                ....

00010904 <Adc_Partition_Assignment>:
   10904:	00000000                                ....

00010908 <Adc_Config>:
   10908:	00010890 000108cc 00000001 00010900     ................
   10918:	00000000 00010904 00000001              ............

00010924 <Mcu_aClockConfigPB>:
	...
   1092c:	1c000101 04000010 01000029 00000005     ........).......
   1093c:	00000001 00000000 00000057 00000000     ........W.......
   1094c:	00000000 00000008 007a1200 00000001     ..........z.....
   1095c:	00000001 00000000 00000057 00000000     ........W.......
   1096c:	00000057 00000000 00000000 00000000     W...............
	...
   1098c:	00000019 00000005 0000001a 00000002     ................
   1099c:	0000001b 00000005 0000002a 00000005     ........*.......
   109ac:	00000028 0000000e 00000029 00000001     (.......).......
   109bc:	00000056 0000001c 00000032 0000002a     V.......2...*...
   109cc:	0000002b 00000014 0000002c 00000014     +.......,.......
   109dc:	0000002d 00000014 0000002e 00000014     -...............
   109ec:	0000003f 00000000 00000040 00000000     ?.......@.......
   109fc:	00000041 00000000 00000042 00000000     A.......B.......
   10a0c:	00000031 00000000 00000045 00000000     1.......E.......
   10a1c:	00000046 00000000 00000047 00000000     F.......G.......
   10a2c:	00000044 00000000 00000030 0000000d     D.......0.......
   10a3c:	0000003d 00000000 00000043 00000000     =.......C.......
   10a4c:	00000049 00000000 0000004a 00000000     I.......J.......
   10a5c:	0000004b 00000000 00000048 00000000     K.......H.......
   10a6c:	0000000c 00000001 00000000 0000000d     ................
   10a7c:	00000002 00000000 0000000e 00000001     ................
   10a8c:	00000000 0000000f 00000001 00000000     ................
   10a9c:	0000001d 00000001 00000000 0000001e     ................
   10aac:	00000008 00000000 0000001f 00000001     ................
   10abc:	00000000 00000021 00000001 00000000     ....!...........
   10acc:	00000022 00000002 00000000 00000023     "...........#...
   10adc:	00000001 00000000 00000025 00000003     ........%.......
   10aec:	00000000 00000026 00000004 00000000     ....&...........
   10afc:	00000027 00000002 00000000 00000032     '...........2...
   10b0c:	00000001 00000000 00000048 00000001     ........H.......
   10b1c:	00000001 00000056 00000001 00000001     ....V...........
   10b2c:	00000057 00000000 00000000 00000057     W...........W...
	...
   10b44:	00000057 00000000 00000000 00000057     W...........W...
	...
   10b5c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   10b78:	00000014 00007d00 00000015 00007d00     .....}.......}..
   10b88:	00000016 00007d00 00000017 00008000     .....}..........
   10b98:	00000012 00000001 00000013 00000001     ................
   10ba8:	00000030 00000001 00000031 00000000     0.......1.......
   10bb8:	00000032 00000000 00000033 00000000     2.......3.......
   10bc8:	00000034 00000000 00000035 00000001     4.......5.......
   10bd8:	00000036 00000000 00000037 00000001     6.......7.......
   10be8:	00000038 00000001 00000039 00000000     8.......9.......
   10bf8:	0000003a 00000000 0000003b 00000000     :.......;.......
   10c08:	0000003c 00000000 0000003d 00000000     <.......=.......
   10c18:	0000003e 00000000 0000003f 00000000     >.......?.......
   10c28:	00000040 00000000 00000041 00000000     @.......A.......
   10c38:	00000042 00000000 00000043 00000000     B.......C.......
   10c48:	00000044 00000000 00000045 00000000     D.......E.......
   10c58:	00000046 00000000 00000047 00000000     F.......G.......
   10c68:	00000048 00000000 00000049 00000000     H.......I.......
   10c78:	0000004a 00000000 0000004b 00000000     J.......K.......
   10c88:	0000004c 00000001 0000004d 00000001     L.......M.......
   10c98:	0000004e 00000001 0000004f 00000000     N.......O.......
   10ca8:	00000050 00000001 00000051 00000001     P.......Q.......
   10cb8:	00000052 00000001 00000053 00000001     R.......S.......
   10cc8:	00000054 00000001 00000055 00000000     T.......U.......
   10cd8:	00000056 00000001 00000057 00000000     V.......W.......
   10ce8:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00010d1c <aIrqConfiguration>:
   10d1c:	00000027 00000f01 00008b49              '.......I...

00010d28 <intCtrlConfig>:
   10d28:	00000001 00010d1c                       ........

00010d30 <Mcu_Config>:
   10d30:	0000005a 00000000 00000001 00000001     Z...............
   10d40:	00010eb4 00010924 00010ec0              ....$.......

00010d4c <OsIf_xPredefinedConfig>:
   10d4c:	00000000 02dc6c00                       .....l..

00010d54 <OsIf_apxPredefinedConfig>:
   10d54:	00010d4c                                L...

00010d58 <PdbAdcIpConfig_0>:
	...
   10d64:	0000000f ffff0000 00000000 00000000     ................
   10d74:	00000000                                ....

00010d78 <Platform_uConfiguration>:
   10d78:	00010d80                                ....

00010d7c <Platform_Config>:
   10d7c:	00010d78                                x...

00010d80 <ipwConfig>:
   10d80:	00010d28 00000000                       (.......

00010d88 <g_pin_mux_InitConfigArr>:
   10d88:	4004a000 00000000 00000001 00000002     ...@............
   10d98:	00000000 00000002 00000000 00000000     ................
	...

00010db0 <au8Port_PartitionList>:
   10db0:	00000001                                ....

00010db4 <au32Port_PinToPartitionMap>:
   10db4:	00000001                                ....

00010db8 <Port_au16NoUnUsedPadsArrayDefault>:
   10db8:	00010000 00030002 00070006 00090008     ................
   10dc8:	000c000b 000e000d 0010000f 00200011     .............. .
   10dd8:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10de8:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   10df8:	00410040 00430042 00470046 00490048     @.A.B.C.F.G.H.I.
   10e08:	004b004a 004d004c 004f004e 00510050     J.K.L.M.N.O.P.Q.
   10e18:	00610060 00630062 00650064 00670066     `.a.b.c.d.e.f.g.
   10e28:	00690068 006b006a 006d006c 006f006e     h.i.j.k.l.m.n.o.
   10e38:	00710070 00810080 00830082 00850084     p.q.............
   10e48:	00870086 00890088 008b008a 008d008c     ................
   10e58:	008f008e 00000090                       ........

00010e60 <Port_UnUsedPin>:
   10e60:	00000100 00000001 00000000              ............

00010e6c <Port_aPinConfigDefault>:
   10e6c:	00000021 00000000 00000002 00000000     !...............
   10e7c:	00010000                                ....

00010e80 <Port_Config>:
   10e80:	00530001 00010db8 00010e60 00010e6c     ..S.....`...l...
	...
   10e98:	00010db4 00010db0 00010d88              ............

00010ea4 <Power_Ip_RCM_ConfigPB>:
	...

00010eac <Power_Ip_PMC_ConfigPB>:
   10eac:	00000000                                ....

00010eb0 <Power_Ip_SMC_ConfigPB>:
   10eb0:	00000000                                ....

00010eb4 <Power_Ip_aModeConfigPB>:
	...

00010ec0 <Power_Ip_HwIPsConfigPB>:
   10ec0:	00010ea4 00010eac 00010eb0              ............

00010ecc <_aInitStr.0>:
   10ecc:	00000000 54540000 45522052 53454747     ......TTR REGGES
   10edc:	00000000                                ....

00010ee0 <_aV2C.0>:
   10ee0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00010ef0 <__INIT_TABLE>:
   10ef0:	00000002 	.word	0x00000002
   10ef4:	1fff8b10 	.word	0x1fff8b10
   10ef8:	00010f18 	.word	0x00010f18
   10efc:	00010f2c 	.word	0x00010f2c
   10f00:	1fff8800 	.word	0x1fff8800
   10f04:	00000000 	.word	0x00000000
   10f08:	00000310 	.word	0x00000310

00010f0c <__ZERO_TABLE>:
   10f0c:	00000001 	.word	0x00000001
   10f10:	1fff8b30 	.word	0x1fff8b30
   10f14:	1fff96b0 	.word	0x1fff96b0
