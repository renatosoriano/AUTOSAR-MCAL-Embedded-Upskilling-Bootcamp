
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000014f7 	.word	0x000014f7
  10:	000014f9 	.word	0x000014f9
  14:	000014fb 	.word	0x000014fb
  18:	000014fd 	.word	0x000014fd
	...
  2c:	000014ff 	.word	0x000014ff
  30:	00001501 	.word	0x00001501
  34:	00000000 	.word	0x00000000
  38:	00001503 	.word	0x00001503
  3c:	00001505 	.word	0x00001505
  40:	00001507 	.word	0x00001507
  44:	00001507 	.word	0x00001507
  48:	00001507 	.word	0x00001507
  4c:	00001507 	.word	0x00001507
  50:	00001507 	.word	0x00001507
  54:	00001507 	.word	0x00001507
  58:	00001507 	.word	0x00001507
  5c:	00001507 	.word	0x00001507
  60:	00001507 	.word	0x00001507
  64:	00001507 	.word	0x00001507
  68:	00001507 	.word	0x00001507
  6c:	00001507 	.word	0x00001507
  70:	00001507 	.word	0x00001507
  74:	00001507 	.word	0x00001507
  78:	00001507 	.word	0x00001507
  7c:	00001507 	.word	0x00001507
  80:	00001507 	.word	0x00001507
  84:	00001507 	.word	0x00001507
  88:	00001507 	.word	0x00001507
  8c:	00001507 	.word	0x00001507
  90:	00001507 	.word	0x00001507
  94:	00001507 	.word	0x00001507
  98:	00001507 	.word	0x00001507
  9c:	00001507 	.word	0x00001507
  a0:	00001507 	.word	0x00001507
  a4:	00001507 	.word	0x00001507
  a8:	00001507 	.word	0x00001507
  ac:	00001507 	.word	0x00001507
  b0:	00001507 	.word	0x00001507
  b4:	00001507 	.word	0x00001507
  b8:	00001507 	.word	0x00001507
  bc:	00001507 	.word	0x00001507
  c0:	00001507 	.word	0x00001507
  c4:	00001507 	.word	0x00001507
  c8:	00001507 	.word	0x00001507
  cc:	00001507 	.word	0x00001507
  d0:	00001507 	.word	0x00001507
  d4:	00001507 	.word	0x00001507
  d8:	00001507 	.word	0x00001507
  dc:	00001507 	.word	0x00001507
  e0:	00001507 	.word	0x00001507
  e4:	00001507 	.word	0x00001507
  e8:	00001507 	.word	0x00001507
  ec:	00001507 	.word	0x00001507
  f0:	00001507 	.word	0x00001507
  f4:	00001507 	.word	0x00001507
  f8:	00001507 	.word	0x00001507
  fc:	00001507 	.word	0x00001507
 100:	00001507 	.word	0x00001507
 104:	00001507 	.word	0x00001507
 108:	00001507 	.word	0x00001507
 10c:	00001507 	.word	0x00001507
 110:	00001507 	.word	0x00001507
 114:	00001507 	.word	0x00001507
 118:	00001507 	.word	0x00001507
 11c:	00001507 	.word	0x00001507
 120:	00001507 	.word	0x00001507
 124:	00001507 	.word	0x00001507
 128:	00001507 	.word	0x00001507
 12c:	00001507 	.word	0x00001507
 130:	00001507 	.word	0x00001507
 134:	00001507 	.word	0x00001507
 138:	00001507 	.word	0x00001507
 13c:	00001507 	.word	0x00001507
 140:	00001507 	.word	0x00001507
 144:	00001507 	.word	0x00001507
 148:	00001507 	.word	0x00001507
 14c:	00001507 	.word	0x00001507
 150:	00001507 	.word	0x00001507
 154:	00001507 	.word	0x00001507
 158:	00001507 	.word	0x00001507
 15c:	00001507 	.word	0x00001507
 160:	00001507 	.word	0x00001507
 164:	00001507 	.word	0x00001507
 168:	00001507 	.word	0x00001507
 16c:	00001507 	.word	0x00001507
 170:	00001507 	.word	0x00001507
 174:	00001507 	.word	0x00001507
 178:	00001507 	.word	0x00001507
 17c:	00001507 	.word	0x00001507
 180:	00001507 	.word	0x00001507
 184:	00001507 	.word	0x00001507
 188:	00001507 	.word	0x00001507
 18c:	00001507 	.word	0x00001507
 190:	00001507 	.word	0x00001507
 194:	00001507 	.word	0x00001507
 198:	00001507 	.word	0x00001507
 19c:	00001507 	.word	0x00001507
 1a0:	00001507 	.word	0x00001507
 1a4:	00001507 	.word	0x00001507
 1a8:	00001507 	.word	0x00001507
 1ac:	00001507 	.word	0x00001507
 1b0:	00001507 	.word	0x00001507
 1b4:	00001507 	.word	0x00001507
 1b8:	00001507 	.word	0x00001507
 1bc:	00001507 	.word	0x00001507
 1c0:	00001507 	.word	0x00001507
 1c4:	00001507 	.word	0x00001507
 1c8:	00001507 	.word	0x00001507
 1cc:	00001507 	.word	0x00001507
 1d0:	00001507 	.word	0x00001507
 1d4:	00001507 	.word	0x00001507
 1d8:	00001507 	.word	0x00001507
 1dc:	00001507 	.word	0x00001507
 1e0:	00001507 	.word	0x00001507
 1e4:	00001507 	.word	0x00001507
 1e8:	00001507 	.word	0x00001507
 1ec:	00001507 	.word	0x00001507
 1f0:	00001507 	.word	0x00001507
 1f4:	00001507 	.word	0x00001507
 1f8:	00001507 	.word	0x00001507
 1fc:	00001507 	.word	0x00001507
 200:	00001507 	.word	0x00001507
 204:	00001507 	.word	0x00001507
 208:	00001507 	.word	0x00001507
 20c:	00001507 	.word	0x00001507
 210:	00001507 	.word	0x00001507
 214:	00001507 	.word	0x00001507
 218:	00001507 	.word	0x00001507
 21c:	00001507 	.word	0x00001507
 220:	00001507 	.word	0x00001507
 224:	00001507 	.word	0x00001507
 228:	00001507 	.word	0x00001507
 22c:	00001507 	.word	0x00001507
 230:	00001507 	.word	0x00001507
 234:	00001507 	.word	0x00001507
 238:	00001507 	.word	0x00001507
 23c:	00001507 	.word	0x00001507
 240:	00001507 	.word	0x00001507
 244:	00001507 	.word	0x00001507
 248:	00001507 	.word	0x00001507
 24c:	00001507 	.word	0x00001507
 250:	00001507 	.word	0x00001507
 254:	00001507 	.word	0x00001507
 258:	00001507 	.word	0x00001507
 25c:	00001507 	.word	0x00001507
 260:	00001507 	.word	0x00001507
 264:	00001507 	.word	0x00001507
 268:	00001507 	.word	0x00001507
 26c:	00001507 	.word	0x00001507
 270:	00001507 	.word	0x00001507
 274:	00001507 	.word	0x00001507
 278:	00001507 	.word	0x00001507
 27c:	00001507 	.word	0x00001507
 280:	00001507 	.word	0x00001507
 284:	00001507 	.word	0x00001507
 288:	00001507 	.word	0x00001507
 28c:	00001507 	.word	0x00001507
 290:	00001507 	.word	0x00001507
 294:	00001507 	.word	0x00001507
 298:	00001507 	.word	0x00001507
 29c:	00001507 	.word	0x00001507
 2a0:	00001507 	.word	0x00001507
 2a4:	00001507 	.word	0x00001507
 2a8:	00001507 	.word	0x00001507
 2ac:	00001507 	.word	0x00001507
 2b0:	00001507 	.word	0x00001507
 2b4:	00001507 	.word	0x00001507
 2b8:	00001507 	.word	0x00001507
 2bc:	00001507 	.word	0x00001507
 2c0:	00001507 	.word	0x00001507
 2c4:	00001507 	.word	0x00001507
 2c8:	00001507 	.word	0x00001507
 2cc:	00001507 	.word	0x00001507
 2d0:	00001507 	.word	0x00001507
 2d4:	00001507 	.word	0x00001507
 2d8:	00001507 	.word	0x00001507
 2dc:	00001507 	.word	0x00001507
 2e0:	00001507 	.word	0x00001507
 2e4:	00001507 	.word	0x00001507
 2e8:	00001507 	.word	0x00001507
 2ec:	00001507 	.word	0x00001507
 2f0:	00001507 	.word	0x00001507
 2f4:	00001507 	.word	0x00001507
 2f8:	00001507 	.word	0x00001507
 2fc:	00001507 	.word	0x00001507
 300:	00001507 	.word	0x00001507
 304:	00001507 	.word	0x00001507
 308:	00001507 	.word	0x00001507
 30c:	00001507 	.word	0x00001507

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ff6f 	bl	1364 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f82e 	bl	14ec <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e7c 	.word	0x1fff8e7c

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ff79 	bl	1490 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x6c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x6c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x70>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x70>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x66>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xa4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x9c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x96>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x92>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x92>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x8a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x8a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x78>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x74>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xa8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x30>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x8e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x8e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x5e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x86>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x86>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x5e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x30>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f80b 	bl	8cc <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8b6:	f000 ffb9 	bl	182c <SEGGER_RTT_Init>

    /* Init the scheduler with two tasks and a tick time of 100ms and run for 10 seconds only */
    Scheduler_Init( &Scheduler_Config );
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <main+0x18>)
     8bc:	f000 fbb6 	bl	102c <Scheduler_Init>

    while( 1u ) 
    {
        /* Run the scheduler forever */
        Scheduler_MainFunction( );
     8c0:	f000 fc70 	bl	11a4 <Scheduler_MainFunction>
     8c4:	e7fc      	b.n	8c0 <main+0x10>
     8c6:	bf00      	nop
     8c8:	00008f90 	.word	0x00008f90

000008cc <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8cc:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     8ce:	480b      	ldr	r0, [pc, #44]	; (8fc <EcuM_Init+0x30>)
     8d0:	f005 f8e8 	bl	5aa4 <Mcu_Init>
    Mcu_SetMode( McuModeSettingConf_0 );
     8d4:	2000      	movs	r0, #0
     8d6:	f005 f95d 	bl	5b94 <Mcu_SetMode>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8da:	2000      	movs	r0, #0
     8dc:	f005 f936 	bl	5b4c <Mcu_InitClock>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     8e0:	2000      	movs	r0, #0
     8e2:	f001 fb49 	bl	1f78 <OsIf_Init>

    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     8e6:	4806      	ldr	r0, [pc, #24]	; (900 <EcuM_Init+0x34>)
     8e8:	f005 fcde 	bl	62a8 <Port_Init>

    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     8ec:	4805      	ldr	r0, [pc, #20]	; (904 <EcuM_Init+0x38>)
     8ee:	f000 f92b 	bl	b48 <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
     8f2:	4805      	ldr	r0, [pc, #20]	; (908 <EcuM_Init+0x3c>)
     8f4:	f000 faee 	bl	ed4 <HwIoAb_Leds_Init>
}
     8f8:	bf00      	nop
     8fa:	bd08      	pop	{r3, pc}
     8fc:	000093a4 	.word	0x000093a4
     900:	000095f8 	.word	0x000095f8
     904:	00008f0c 	.word	0x00008f0c
     908:	00008f24 	.word	0x00008f24

0000090c <Os_50ms_Task>:
 * @brief This is the function for the 50ms task.
 *
 * This function executes the state machine every 50ms.
 */
void Os_50ms_Task( void )
{
     90c:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     90e:	f000 f96b 	bl	be8 <HwIoAb_Buttons_MainFunction>
}
     912:	bf00      	nop
     914:	bd08      	pop	{r3, pc}
	...

00000918 <Os_100ms_Task>:
 * @note Button 1, Single click toggle only RGB_LED_BLUE (D0), double click toggle only RGB_LED_RED (D15), hold click toggle only RGB_LED_GREEN (D16), release turns OFF all RGB LEDs.
 * @note Button 2, Single click toggle only RGB_LED_BLUE (D0), double click toggle only RGB_LED_RED (D15), hold click toggle only RGB_LED_GREEN (D16), release turns OFF all RGB LEDs.
 * @note Button 3, Single click toggle only RGB_LED_BLUE (D0), double click toggle only RGB_LED_RED (D15), hold click toggle only RGB_LED_GREEN (D16), release turns OFF all RGB LEDs.
 */
void Os_100ms_Task( void )
{
     918:	b500      	push	{lr}
     91a:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     91c:	2300      	movs	r3, #0
     91e:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     922:	2300      	movs	r3, #0
     924:	f88d 3007 	strb.w	r3, [sp, #7]
     928:	e0c8      	b.n	abc <Os_100ms_Task+0x1a4>
    {  
        RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     92a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     92e:	4618      	mov	r0, r3
     930:	f000 f93c 	bl	bac <HwIoAb_Buttons_GetEvent>
     934:	4603      	mov	r3, r0
     936:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     93a:	f89d 3006 	ldrb.w	r3, [sp, #6]
     93e:	2b00      	cmp	r3, #0
     940:	f000 80b4 	beq.w	aac <Os_100ms_Task+0x194>
        {
            switch( CurrentButton )
     944:	f89d 3007 	ldrb.w	r3, [sp, #7]
     948:	2b02      	cmp	r3, #2
     94a:	d077      	beq.n	a3c <Os_100ms_Task+0x124>
     94c:	2b02      	cmp	r3, #2
     94e:	f300 80af 	bgt.w	ab0 <Os_100ms_Task+0x198>
     952:	2b00      	cmp	r3, #0
     954:	d002      	beq.n	95c <Os_100ms_Task+0x44>
     956:	2b01      	cmp	r3, #1
     958:	d038      	beq.n	9cc <Os_100ms_Task+0xb4>
                        break;
                    }
                break;
                default :
                  // If jump here is an error
                break;
     95a:	e0a9      	b.n	ab0 <Os_100ms_Task+0x198>
                    switch( RealEvent )
     95c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     960:	3b01      	subs	r3, #1
     962:	2b03      	cmp	r3, #3
     964:	d830      	bhi.n	9c8 <Os_100ms_Task+0xb0>
     966:	a201      	add	r2, pc, #4	; (adr r2, 96c <Os_100ms_Task+0x54>)
     968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     96c:	0000097d 	.word	0x0000097d
     970:	0000098d 	.word	0x0000098d
     974:	0000099d 	.word	0x0000099d
     978:	000009ad 	.word	0x000009ad
                            HwIoAb_Leds_TurnToggle( HWI0AB_LED_BLUE_ID );
     97c:	2000      	movs	r0, #0
     97e:	f000 fae1 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     982:	4953      	ldr	r1, [pc, #332]	; (ad0 <Os_100ms_Task+0x1b8>)
     984:	2000      	movs	r0, #0
     986:	f001 fab9 	bl	1efc <SEGGER_RTT_printf>
                        break;
     98a:	e01e      	b.n	9ca <Os_100ms_Task+0xb2>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     98c:	2001      	movs	r0, #1
     98e:	f000 fad9 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     992:	4950      	ldr	r1, [pc, #320]	; (ad4 <Os_100ms_Task+0x1bc>)
     994:	2000      	movs	r0, #0
     996:	f001 fab1 	bl	1efc <SEGGER_RTT_printf>
                        break;
     99a:	e016      	b.n	9ca <Os_100ms_Task+0xb2>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     99c:	2002      	movs	r0, #2
     99e:	f000 fad1 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     9a2:	494d      	ldr	r1, [pc, #308]	; (ad8 <Os_100ms_Task+0x1c0>)
     9a4:	2000      	movs	r0, #0
     9a6:	f001 faa9 	bl	1efc <SEGGER_RTT_printf>
                        break;
     9aa:	e00e      	b.n	9ca <Os_100ms_Task+0xb2>
                            HwIoAb_Leds_TurnOff( HWI0AB_LED_BLUE_ID );
     9ac:	2000      	movs	r0, #0
     9ae:	f000 faa5 	bl	efc <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     9b2:	2001      	movs	r0, #1
     9b4:	f000 faa2 	bl	efc <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     9b8:	2002      	movs	r0, #2
     9ba:	f000 fa9f 	bl	efc <HwIoAb_Leds_TurnOff>
                            SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     9be:	4947      	ldr	r1, [pc, #284]	; (adc <Os_100ms_Task+0x1c4>)
     9c0:	2000      	movs	r0, #0
     9c2:	f001 fa9b 	bl	1efc <SEGGER_RTT_printf>
                        break;
     9c6:	e000      	b.n	9ca <Os_100ms_Task+0xb2>
                        break;
     9c8:	bf00      	nop
                break;
     9ca:	e072      	b.n	ab2 <Os_100ms_Task+0x19a>
                    switch( RealEvent )
     9cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
     9d0:	3b01      	subs	r3, #1
     9d2:	2b03      	cmp	r3, #3
     9d4:	d830      	bhi.n	a38 <Os_100ms_Task+0x120>
     9d6:	a201      	add	r2, pc, #4	; (adr r2, 9dc <Os_100ms_Task+0xc4>)
     9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9dc:	000009ed 	.word	0x000009ed
     9e0:	000009fd 	.word	0x000009fd
     9e4:	00000a0d 	.word	0x00000a0d
     9e8:	00000a1d 	.word	0x00000a1d
                            HwIoAb_Leds_TurnToggle( HWI0AB_LED_BLUE_ID );
     9ec:	2000      	movs	r0, #0
     9ee:	f000 faa9 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     9f2:	493b      	ldr	r1, [pc, #236]	; (ae0 <Os_100ms_Task+0x1c8>)
     9f4:	2000      	movs	r0, #0
     9f6:	f001 fa81 	bl	1efc <SEGGER_RTT_printf>
                        break;
     9fa:	e01e      	b.n	a3a <Os_100ms_Task+0x122>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     9fc:	2001      	movs	r0, #1
     9fe:	f000 faa1 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     a02:	4938      	ldr	r1, [pc, #224]	; (ae4 <Os_100ms_Task+0x1cc>)
     a04:	2000      	movs	r0, #0
     a06:	f001 fa79 	bl	1efc <SEGGER_RTT_printf>
                        break;
     a0a:	e016      	b.n	a3a <Os_100ms_Task+0x122>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     a0c:	2002      	movs	r0, #2
     a0e:	f000 fa99 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     a12:	4935      	ldr	r1, [pc, #212]	; (ae8 <Os_100ms_Task+0x1d0>)
     a14:	2000      	movs	r0, #0
     a16:	f001 fa71 	bl	1efc <SEGGER_RTT_printf>
                        break;
     a1a:	e00e      	b.n	a3a <Os_100ms_Task+0x122>
                            HwIoAb_Leds_TurnOff( HWI0AB_LED_BLUE_ID );
     a1c:	2000      	movs	r0, #0
     a1e:	f000 fa6d 	bl	efc <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     a22:	2001      	movs	r0, #1
     a24:	f000 fa6a 	bl	efc <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     a28:	2002      	movs	r0, #2
     a2a:	f000 fa67 	bl	efc <HwIoAb_Leds_TurnOff>
                            SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     a2e:	492f      	ldr	r1, [pc, #188]	; (aec <Os_100ms_Task+0x1d4>)
     a30:	2000      	movs	r0, #0
     a32:	f001 fa63 	bl	1efc <SEGGER_RTT_printf>
                        break;
     a36:	e000      	b.n	a3a <Os_100ms_Task+0x122>
                        break;
     a38:	bf00      	nop
                break;
     a3a:	e03a      	b.n	ab2 <Os_100ms_Task+0x19a>
                    switch( RealEvent )
     a3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a40:	3b01      	subs	r3, #1
     a42:	2b03      	cmp	r3, #3
     a44:	d830      	bhi.n	aa8 <Os_100ms_Task+0x190>
     a46:	a201      	add	r2, pc, #4	; (adr r2, a4c <Os_100ms_Task+0x134>)
     a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a4c:	00000a5d 	.word	0x00000a5d
     a50:	00000a6d 	.word	0x00000a6d
     a54:	00000a7d 	.word	0x00000a7d
     a58:	00000a8d 	.word	0x00000a8d
                            HwIoAb_Leds_TurnToggle( HWI0AB_LED_BLUE_ID );
     a5c:	2000      	movs	r0, #0
     a5e:	f000 fa71 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     a62:	4923      	ldr	r1, [pc, #140]	; (af0 <Os_100ms_Task+0x1d8>)
     a64:	2000      	movs	r0, #0
     a66:	f001 fa49 	bl	1efc <SEGGER_RTT_printf>
                        break;
     a6a:	e01e      	b.n	aaa <Os_100ms_Task+0x192>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     a6c:	2001      	movs	r0, #1
     a6e:	f000 fa69 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     a72:	4920      	ldr	r1, [pc, #128]	; (af4 <Os_100ms_Task+0x1dc>)
     a74:	2000      	movs	r0, #0
     a76:	f001 fa41 	bl	1efc <SEGGER_RTT_printf>
                        break;
     a7a:	e016      	b.n	aaa <Os_100ms_Task+0x192>
                            HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     a7c:	2002      	movs	r0, #2
     a7e:	f000 fa61 	bl	f44 <HwIoAb_Leds_TurnToggle>
                            SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     a82:	491d      	ldr	r1, [pc, #116]	; (af8 <Os_100ms_Task+0x1e0>)
     a84:	2000      	movs	r0, #0
     a86:	f001 fa39 	bl	1efc <SEGGER_RTT_printf>
                        break;
     a8a:	e00e      	b.n	aaa <Os_100ms_Task+0x192>
                            HwIoAb_Leds_TurnOff( HWI0AB_LED_BLUE_ID );
     a8c:	2000      	movs	r0, #0
     a8e:	f000 fa35 	bl	efc <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_RED_ID );
     a92:	2001      	movs	r0, #1
     a94:	f000 fa32 	bl	efc <HwIoAb_Leds_TurnOff>
                            HwIoAb_Leds_TurnOff( HWIOAB_LED_GREEN_ID );
     a98:	2002      	movs	r0, #2
     a9a:	f000 fa2f 	bl	efc <HwIoAb_Leds_TurnOff>
                            SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     a9e:	4917      	ldr	r1, [pc, #92]	; (afc <Os_100ms_Task+0x1e4>)
     aa0:	2000      	movs	r0, #0
     aa2:	f001 fa2b 	bl	1efc <SEGGER_RTT_printf>
                        break;
     aa6:	e000      	b.n	aaa <Os_100ms_Task+0x192>
                        break;
     aa8:	bf00      	nop
                break;
     aaa:	e002      	b.n	ab2 <Os_100ms_Task+0x19a>
            }  
        }
     aac:	bf00      	nop
     aae:	e000      	b.n	ab2 <Os_100ms_Task+0x19a>
                break;
     ab0:	bf00      	nop
    for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ab6:	3301      	adds	r3, #1
     ab8:	f88d 3007 	strb.w	r3, [sp, #7]
     abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ac0:	2b02      	cmp	r3, #2
     ac2:	f67f af32 	bls.w	92a <Os_100ms_Task+0x12>
    }   
}
     ac6:	bf00      	nop
     ac8:	bf00      	nop
     aca:	b003      	add	sp, #12
     acc:	f85d fb04 	ldr.w	pc, [sp], #4
     ad0:	000085d4 	.word	0x000085d4
     ad4:	000085f4 	.word	0x000085f4
     ad8:	00008614 	.word	0x00008614
     adc:	00008634 	.word	0x00008634
     ae0:	00008650 	.word	0x00008650
     ae4:	00008670 	.word	0x00008670
     ae8:	00008690 	.word	0x00008690
     aec:	000086b0 	.word	0x000086b0
     af0:	000086cc 	.word	0x000086cc
     af4:	000086ec 	.word	0x000086ec
     af8:	0000870c 	.word	0x0000870c
     afc:	0000872c 	.word	0x0000872c

00000b00 <Os_PotsTask>:

void Os_LedsTask( void ){}
void Os_ButtonsTask( void ){}
void Os_PotsTask( void ){}
     b00:	bf00      	nop
     b02:	4770      	bx	lr

00000b04 <Os_EepromsTask>:
void Os_EepromsTask( void ){}
     b04:	bf00      	nop
     b06:	4770      	bx	lr

00000b08 <Os_CanTask>:
void Os_CanTask( void ){}
     b08:	bf00      	nop
     b0a:	4770      	bx	lr

00000b0c <Os_BuzzerTask>:
     b0c:	bf00      	nop
     b0e:	4770      	bx	lr

00000b10 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     b10:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b12:	f3ef 8310 	mrs	r3, PRIMASK
     b16:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b18:	4623      	mov	r3, r4
}
     b1a:	4618      	mov	r0, r3
     b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
     b20:	4770      	bx	lr

00000b22 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     b22:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b24:	f3ef 8310 	mrs	r3, PRIMASK
     b28:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b2a:	4623      	mov	r3, r4
}
     b2c:	4618      	mov	r0, r3
     b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
     b32:	4770      	bx	lr

00000b34 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     b34:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b36:	f3ef 8310 	mrs	r3, PRIMASK
     b3a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b3c:	4623      	mov	r3, r4
}
     b3e:	4618      	mov	r0, r3
     b40:	f85d 4b04 	ldr.w	r4, [sp], #4
     b44:	4770      	bx	lr
	...

00000b48 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     b48:	b084      	sub	sp, #16
     b4a:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     b4c:	4b16      	ldr	r3, [pc, #88]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	2203      	movs	r2, #3
     b52:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     b54:	4b14      	ldr	r3, [pc, #80]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	9a01      	ldr	r2, [sp, #4]
     b5a:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b5c:	2300      	movs	r3, #0
     b5e:	f88d 300f 	strb.w	r3, [sp, #15]
     b62:	e012      	b.n	b8a <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     b64:	4b10      	ldr	r3, [pc, #64]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b66:	681a      	ldr	r2, [r3, #0]
     b68:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b6c:	4413      	add	r3, r2
     b6e:	2200      	movs	r2, #0
     b70:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     b72:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b74:	681a      	ldr	r2, [r3, #0]
     b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b7a:	4413      	add	r3, r2
     b7c:	2200      	movs	r2, #0
     b7e:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b80:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b84:	3301      	adds	r3, #1
     b86:	f88d 300f 	strb.w	r3, [sp, #15]
     b8a:	4b07      	ldr	r3, [pc, #28]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b94:	429a      	cmp	r2, r3
     b96:	d3e5      	bcc.n	b64 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     b98:	4b03      	ldr	r3, [pc, #12]	; (ba8 <HwIoAb_Buttons_Init+0x60>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	2201      	movs	r2, #1
     b9e:	739a      	strb	r2, [r3, #14]
}
     ba0:	bf00      	nop
     ba2:	b004      	add	sp, #16
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop
     ba8:	1fff8b38 	.word	0x1fff8b38

00000bac <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     bac:	b084      	sub	sp, #16
     bae:	4603      	mov	r3, r0
     bb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     bb4:	2300      	movs	r3, #0
     bb6:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     bba:	4b0a      	ldr	r3, [pc, #40]	; (be4 <HwIoAb_Buttons_GetEvent+0x38>)
     bbc:	681a      	ldr	r2, [r3, #0]
     bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc2:	4413      	add	r3, r2
     bc4:	7adb      	ldrb	r3, [r3, #11]
     bc6:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     bca:	4b06      	ldr	r3, [pc, #24]	; (be4 <HwIoAb_Buttons_GetEvent+0x38>)
     bcc:	681a      	ldr	r2, [r3, #0]
     bce:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bd2:	4413      	add	r3, r2
     bd4:	2200      	movs	r2, #0
     bd6:	72da      	strb	r2, [r3, #11]
    return temp;
     bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bdc:	4618      	mov	r0, r3
     bde:	b004      	add	sp, #16
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	1fff8b38 	.word	0x1fff8b38

00000be8 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 */
void HwIoAb_Buttons_MainFunction( void )
{
     be8:	b500      	push	{lr}
     bea:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     bec:	2300      	movs	r3, #0
     bee:	f88d 3007 	strb.w	r3, [sp, #7]
     bf2:	e15d      	b.n	eb0 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     bf4:	4bb5      	ldr	r3, [pc, #724]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     bf6:	681a      	ldr	r2, [r3, #0]
     bf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bfc:	4413      	add	r3, r2
     bfe:	7a1b      	ldrb	r3, [r3, #8]
     c00:	2b04      	cmp	r3, #4
     c02:	f200 8145 	bhi.w	e90 <HwIoAb_Buttons_MainFunction+0x2a8>
     c06:	a201      	add	r2, pc, #4	; (adr r2, c0c <HwIoAb_Buttons_MainFunction+0x24>)
     c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c0c:	00000c21 	.word	0x00000c21
     c10:	00000c6d 	.word	0x00000c6d
     c14:	00000d95 	.word	0x00000d95
     c18:	00000e2d 	.word	0x00000e2d
     c1c:	00000cf9 	.word	0x00000cf9
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     c20:	4baa      	ldr	r3, [pc, #680]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	685a      	ldr	r2, [r3, #4]
     c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c2a:	00db      	lsls	r3, r3, #3
     c2c:	4413      	add	r3, r2
     c2e:	881b      	ldrh	r3, [r3, #0]
     c30:	4618      	mov	r0, r3
     c32:	f006 f84d 	bl	6cd0 <Dio_ReadChannel>
     c36:	4603      	mov	r3, r0
     c38:	4619      	mov	r1, r3
     c3a:	4ba4      	ldr	r3, [pc, #656]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	685a      	ldr	r2, [r3, #4]
     c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c44:	00db      	lsls	r3, r3, #3
     c46:	4413      	add	r3, r2
     c48:	789b      	ldrb	r3, [r3, #2]
     c4a:	4299      	cmp	r1, r3
     c4c:	f040 8122 	bne.w	e94 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     c50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c54:	4a9e      	ldr	r2, [pc, #632]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c56:	2100      	movs	r1, #0
     c58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     c5c:	4b9b      	ldr	r3, [pc, #620]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c64:	4413      	add	r3, r2
     c66:	2201      	movs	r2, #1
     c68:	721a      	strb	r2, [r3, #8]

                }
            break;
     c6a:	e113      	b.n	e94 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     c6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c70:	4a97      	ldr	r2, [pc, #604]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c7a:	3232      	adds	r2, #50	; 0x32
     c7c:	4994      	ldr	r1, [pc, #592]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c86:	4a92      	ldr	r2, [pc, #584]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     c8c:	4b8f      	ldr	r3, [pc, #572]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	6859      	ldr	r1, [r3, #4]
     c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c96:	00db      	lsls	r3, r3, #3
     c98:	440b      	add	r3, r1
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	429a      	cmp	r2, r3
     c9e:	d106      	bne.n	cae <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     ca0:	4b8a      	ldr	r3, [pc, #552]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     ca2:	681a      	ldr	r2, [r3, #0]
     ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ca8:	4413      	add	r3, r2
     caa:	2203      	movs	r2, #3
     cac:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     cae:	4b87      	ldr	r3, [pc, #540]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	685a      	ldr	r2, [r3, #4]
     cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cb8:	00db      	lsls	r3, r3, #3
     cba:	4413      	add	r3, r2
     cbc:	881b      	ldrh	r3, [r3, #0]
     cbe:	4618      	mov	r0, r3
     cc0:	f006 f806 	bl	6cd0 <Dio_ReadChannel>
     cc4:	4603      	mov	r3, r0
     cc6:	4619      	mov	r1, r3
     cc8:	4b80      	ldr	r3, [pc, #512]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cca:	681b      	ldr	r3, [r3, #0]
     ccc:	685a      	ldr	r2, [r3, #4]
     cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd2:	00db      	lsls	r3, r3, #3
     cd4:	4413      	add	r3, r2
     cd6:	789b      	ldrb	r3, [r3, #2]
     cd8:	2b00      	cmp	r3, #0
     cda:	bf0c      	ite	eq
     cdc:	2301      	moveq	r3, #1
     cde:	2300      	movne	r3, #0
     ce0:	b2db      	uxtb	r3, r3
     ce2:	4299      	cmp	r1, r3
     ce4:	f040 80d8 	bne.w	e98 <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     ce8:	4b78      	ldr	r3, [pc, #480]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cf0:	4413      	add	r3, r2
     cf2:	2204      	movs	r2, #4
     cf4:	721a      	strb	r2, [r3, #8]
                }    
            break;
     cf6:	e0cf      	b.n	e98 <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cfc:	4a74      	ldr	r2, [pc, #464]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d06:	3232      	adds	r2, #50	; 0x32
     d08:	4971      	ldr	r1, [pc, #452]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d12:	4a6f      	ldr	r2, [pc, #444]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d18:	4b6c      	ldr	r3, [pc, #432]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	6859      	ldr	r1, [r3, #4]
     d1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d22:	00db      	lsls	r3, r3, #3
     d24:	440b      	add	r3, r1
     d26:	685b      	ldr	r3, [r3, #4]
     d28:	429a      	cmp	r2, r3
     d2a:	d10d      	bne.n	d48 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     d2c:	4b67      	ldr	r3, [pc, #412]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d2e:	681a      	ldr	r2, [r3, #0]
     d30:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d34:	4413      	add	r3, r2
     d36:	2201      	movs	r2, #1
     d38:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     d3a:	4b64      	ldr	r3, [pc, #400]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d3c:	681a      	ldr	r2, [r3, #0]
     d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d42:	4413      	add	r3, r2
     d44:	2200      	movs	r2, #0
     d46:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     d48:	4b60      	ldr	r3, [pc, #384]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	685a      	ldr	r2, [r3, #4]
     d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d52:	00db      	lsls	r3, r3, #3
     d54:	4413      	add	r3, r2
     d56:	881b      	ldrh	r3, [r3, #0]
     d58:	4618      	mov	r0, r3
     d5a:	f005 ffb9 	bl	6cd0 <Dio_ReadChannel>
     d5e:	4603      	mov	r3, r0
     d60:	4619      	mov	r1, r3
     d62:	4b5a      	ldr	r3, [pc, #360]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	685a      	ldr	r2, [r3, #4]
     d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d6c:	00db      	lsls	r3, r3, #3
     d6e:	4413      	add	r3, r2
     d70:	789b      	ldrb	r3, [r3, #2]
     d72:	4299      	cmp	r1, r3
     d74:	f040 8092 	bne.w	e9c <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     d78:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d7c:	4a54      	ldr	r2, [pc, #336]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d7e:	2100      	movs	r1, #0
     d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     d84:	4b51      	ldr	r3, [pc, #324]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d86:	681a      	ldr	r2, [r3, #0]
     d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d8c:	4413      	add	r3, r2
     d8e:	2202      	movs	r2, #2
     d90:	721a      	strb	r2, [r3, #8]
                } 
            break;
     d92:	e083      	b.n	e9c <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d98:	4a4d      	ldr	r2, [pc, #308]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     da2:	3232      	adds	r2, #50	; 0x32
     da4:	494a      	ldr	r1, [pc, #296]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dae:	4a48      	ldr	r2, [pc, #288]	; (ed0 <HwIoAb_Buttons_MainFunction+0x2e8>)
     db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     db4:	4b45      	ldr	r3, [pc, #276]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	6859      	ldr	r1, [r3, #4]
     dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dbe:	00db      	lsls	r3, r3, #3
     dc0:	440b      	add	r3, r1
     dc2:	685b      	ldr	r3, [r3, #4]
     dc4:	429a      	cmp	r2, r3
     dc6:	d106      	bne.n	dd6 <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     dc8:	4b40      	ldr	r3, [pc, #256]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     dca:	681a      	ldr	r2, [r3, #0]
     dcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dd0:	4413      	add	r3, r2
     dd2:	2203      	movs	r2, #3
     dd4:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     dd6:	4b3d      	ldr	r3, [pc, #244]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     dd8:	681b      	ldr	r3, [r3, #0]
     dda:	685a      	ldr	r2, [r3, #4]
     ddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     de0:	00db      	lsls	r3, r3, #3
     de2:	4413      	add	r3, r2
     de4:	881b      	ldrh	r3, [r3, #0]
     de6:	4618      	mov	r0, r3
     de8:	f005 ff72 	bl	6cd0 <Dio_ReadChannel>
     dec:	4603      	mov	r3, r0
     dee:	4619      	mov	r1, r3
     df0:	4b36      	ldr	r3, [pc, #216]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	685a      	ldr	r2, [r3, #4]
     df6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dfa:	00db      	lsls	r3, r3, #3
     dfc:	4413      	add	r3, r2
     dfe:	789b      	ldrb	r3, [r3, #2]
     e00:	2b00      	cmp	r3, #0
     e02:	bf0c      	ite	eq
     e04:	2301      	moveq	r3, #1
     e06:	2300      	movne	r3, #0
     e08:	b2db      	uxtb	r3, r3
     e0a:	4299      	cmp	r1, r3
     e0c:	d148      	bne.n	ea0 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     e0e:	4b2f      	ldr	r3, [pc, #188]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e10:	681a      	ldr	r2, [r3, #0]
     e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e16:	4413      	add	r3, r2
     e18:	2202      	movs	r2, #2
     e1a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e1c:	4b2b      	ldr	r3, [pc, #172]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e1e:	681a      	ldr	r2, [r3, #0]
     e20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e24:	4413      	add	r3, r2
     e26:	2200      	movs	r2, #0
     e28:	721a      	strb	r2, [r3, #8]
                } 
            break;
     e2a:	e039      	b.n	ea0 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     e2c:	4b27      	ldr	r3, [pc, #156]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e2e:	681a      	ldr	r2, [r3, #0]
     e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e34:	4413      	add	r3, r2
     e36:	2203      	movs	r2, #3
     e38:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e3a:	4b24      	ldr	r3, [pc, #144]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	685a      	ldr	r2, [r3, #4]
     e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e44:	00db      	lsls	r3, r3, #3
     e46:	4413      	add	r3, r2
     e48:	881b      	ldrh	r3, [r3, #0]
     e4a:	4618      	mov	r0, r3
     e4c:	f005 ff40 	bl	6cd0 <Dio_ReadChannel>
     e50:	4603      	mov	r3, r0
     e52:	4619      	mov	r1, r3
     e54:	4b1d      	ldr	r3, [pc, #116]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	685a      	ldr	r2, [r3, #4]
     e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e5e:	00db      	lsls	r3, r3, #3
     e60:	4413      	add	r3, r2
     e62:	789b      	ldrb	r3, [r3, #2]
     e64:	2b00      	cmp	r3, #0
     e66:	bf0c      	ite	eq
     e68:	2301      	moveq	r3, #1
     e6a:	2300      	movne	r3, #0
     e6c:	b2db      	uxtb	r3, r3
     e6e:	4299      	cmp	r1, r3
     e70:	d118      	bne.n	ea4 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     e72:	4b16      	ldr	r3, [pc, #88]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e74:	681a      	ldr	r2, [r3, #0]
     e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e7a:	4413      	add	r3, r2
     e7c:	2204      	movs	r2, #4
     e7e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e80:	4b12      	ldr	r3, [pc, #72]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e88:	4413      	add	r3, r2
     e8a:	2200      	movs	r2, #0
     e8c:	721a      	strb	r2, [r3, #8]
                }
            break;
     e8e:	e009      	b.n	ea4 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
     e90:	bf00      	nop
     e92:	e008      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     e94:	bf00      	nop
     e96:	e006      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     e98:	bf00      	nop
     e9a:	e004      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     e9c:	bf00      	nop
     e9e:	e002      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ea0:	bf00      	nop
     ea2:	e000      	b.n	ea6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ea4:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eaa:	3301      	adds	r3, #1
     eac:	f88d 3007 	strb.w	r3, [sp, #7]
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <HwIoAb_Buttons_MainFunction+0x2e4>)
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     eba:	429a      	cmp	r2, r3
     ebc:	f4ff ae9a 	bcc.w	bf4 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
     ec0:	bf00      	nop
     ec2:	bf00      	nop
     ec4:	b003      	add	sp, #12
     ec6:	f85d fb04 	ldr.w	pc, [sp], #4
     eca:	bf00      	nop
     ecc:	1fff8b38 	.word	0x1fff8b38
     ed0:	1fff8e10 	.word	0x1fff8e10

00000ed4 <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
     ed4:	b082      	sub	sp, #8
     ed6:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
     ed8:	4b07      	ldr	r3, [pc, #28]	; (ef8 <HwIoAb_Leds_Init+0x24>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	2203      	movs	r2, #3
     ede:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
     ee0:	4b05      	ldr	r3, [pc, #20]	; (ef8 <HwIoAb_Leds_Init+0x24>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	9a01      	ldr	r2, [sp, #4]
     ee6:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
     ee8:	4b03      	ldr	r3, [pc, #12]	; (ef8 <HwIoAb_Leds_Init+0x24>)
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	2201      	movs	r2, #1
     eee:	721a      	strb	r2, [r3, #8]
}
     ef0:	bf00      	nop
     ef2:	b002      	add	sp, #8
     ef4:	4770      	bx	lr
     ef6:	bf00      	nop
     ef8:	1fff8b3c 	.word	0x1fff8b3c

00000efc <HwIoAb_Leds_TurnOff>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnOff( uint8 Led ) 
{
     efc:	b500      	push	{lr}
     efe:	b083      	sub	sp, #12
     f00:	4603      	mov	r3, r0
     f02:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_WriteChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led, !LedsControl_Ptr->LedsConfig_Ptr[ Led ].Active );
     f06:	4b0e      	ldr	r3, [pc, #56]	; (f40 <HwIoAb_Leds_TurnOff+0x44>)
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	685a      	ldr	r2, [r3, #4]
     f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f10:	009b      	lsls	r3, r3, #2
     f12:	4413      	add	r3, r2
     f14:	8818      	ldrh	r0, [r3, #0]
     f16:	4b0a      	ldr	r3, [pc, #40]	; (f40 <HwIoAb_Leds_TurnOff+0x44>)
     f18:	681b      	ldr	r3, [r3, #0]
     f1a:	685a      	ldr	r2, [r3, #4]
     f1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f20:	009b      	lsls	r3, r3, #2
     f22:	4413      	add	r3, r2
     f24:	789b      	ldrb	r3, [r3, #2]
     f26:	2b00      	cmp	r3, #0
     f28:	bf0c      	ite	eq
     f2a:	2301      	moveq	r3, #1
     f2c:	2300      	movne	r3, #0
     f2e:	b2db      	uxtb	r3, r3
     f30:	4619      	mov	r1, r3
     f32:	f005 fee3 	bl	6cfc <Dio_WriteChannel>
}
     f36:	bf00      	nop
     f38:	b003      	add	sp, #12
     f3a:	f85d fb04 	ldr.w	pc, [sp], #4
     f3e:	bf00      	nop
     f40:	1fff8b3c 	.word	0x1fff8b3c

00000f44 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
     f44:	b500      	push	{lr}
     f46:	b083      	sub	sp, #12
     f48:	4603      	mov	r3, r0
     f4a:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
     f4e:	4b07      	ldr	r3, [pc, #28]	; (f6c <HwIoAb_Leds_TurnToggle+0x28>)
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	685a      	ldr	r2, [r3, #4]
     f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f58:	009b      	lsls	r3, r3, #2
     f5a:	4413      	add	r3, r2
     f5c:	881b      	ldrh	r3, [r3, #0]
     f5e:	4618      	mov	r0, r3
     f60:	f005 fee1 	bl	6d26 <Dio_FlipChannel>
}
     f64:	bf00      	nop
     f66:	b003      	add	sp, #12
     f68:	f85d fb04 	ldr.w	pc, [sp], #4
     f6c:	1fff8b3c 	.word	0x1fff8b3c

00000f70 <Bfx_SetBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00001, SWS_Bfx_00002, SWS_Bfx_00008
 */
void Bfx_SetBit_u32u8( uint32 *Data, uint8 BitPn )
{
     f70:	b082      	sub	sp, #8
     f72:	9001      	str	r0, [sp, #4]
     f74:	460b      	mov	r3, r1
     f76:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1u << BitPn );
     f7a:	9b01      	ldr	r3, [sp, #4]
     f7c:	681a      	ldr	r2, [r3, #0]
     f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f82:	2101      	movs	r1, #1
     f84:	fa01 f303 	lsl.w	r3, r1, r3
     f88:	431a      	orrs	r2, r3
     f8a:	9b01      	ldr	r3, [sp, #4]
     f8c:	601a      	str	r2, [r3, #0]
}
     f8e:	bf00      	nop
     f90:	b002      	add	sp, #8
     f92:	4770      	bx	lr

00000f94 <Bfx_ClrBit_u32u8>:
 * @param[in]  BitPn Bit position
 *
 * @reqs    SWS_Bfx_00010, SWS_Bfx_00011, SWS_Bfx_00015
 */
void Bfx_ClrBit_u32u8( uint32 *Data, uint8 BitPn )
{
     f94:	b082      	sub	sp, #8
     f96:	9001      	str	r0, [sp, #4]
     f98:	460b      	mov	r3, r1
     f9a:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1u << BitPn );
     f9e:	9b01      	ldr	r3, [sp, #4]
     fa0:	681a      	ldr	r2, [r3, #0]
     fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
     fa6:	2101      	movs	r1, #1
     fa8:	fa01 f303 	lsl.w	r3, r1, r3
     fac:	43db      	mvns	r3, r3
     fae:	401a      	ands	r2, r3
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	601a      	str	r2, [r3, #0]
}
     fb4:	bf00      	nop
     fb6:	b002      	add	sp, #8
     fb8:	4770      	bx	lr

00000fba <Bfx_GetBit_u32u8_u8>:
 * @retval Boolean Bit status
 *
 * @reqs    SWS_Bfx_00016, SWS_Bfx_00017, SWS_Bfx_00020
 */
boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn )
{
     fba:	b082      	sub	sp, #8
     fbc:	9001      	str	r0, [sp, #4]
     fbe:	460b      	mov	r3, r1
     fc0:	f88d 3003 	strb.w	r3, [sp, #3]
    return ( ( Data & ( 1u << BitPn ) ) != 0u );
     fc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
     fc8:	2201      	movs	r2, #1
     fca:	409a      	lsls	r2, r3
     fcc:	9b01      	ldr	r3, [sp, #4]
     fce:	4013      	ands	r3, r2
     fd0:	2b00      	cmp	r3, #0
     fd2:	bf14      	ite	ne
     fd4:	2301      	movne	r3, #1
     fd6:	2300      	moveq	r3, #0
     fd8:	b2db      	uxtb	r3, r3
}
     fda:	4618      	mov	r0, r3
     fdc:	b002      	add	sp, #8
     fde:	4770      	bx	lr

00000fe0 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Source data
 *
 * @reqs    SWS_Bfx_00130, SWS_Bfx_00132
 */
void Bfx_PutBit_u32u8u8( uint32 *Data, uint8 BitPn, boolean Status )
{
     fe0:	b082      	sub	sp, #8
     fe2:	9001      	str	r0, [sp, #4]
     fe4:	460b      	mov	r3, r1
     fe6:	f88d 3003 	strb.w	r3, [sp, #3]
     fea:	4613      	mov	r3, r2
     fec:	f88d 3002 	strb.w	r3, [sp, #2]
    if( Status == TRUE )
     ff0:	f89d 3002 	ldrb.w	r3, [sp, #2]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d00a      	beq.n	100e <Bfx_PutBit_u32u8u8+0x2e>
    {
        *Data |= ( 1u << BitPn );
     ff8:	9b01      	ldr	r3, [sp, #4]
     ffa:	681a      	ldr	r2, [r3, #0]
     ffc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1000:	2101      	movs	r1, #1
    1002:	fa01 f303 	lsl.w	r3, r1, r3
    1006:	431a      	orrs	r2, r3
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *Data &= ~( 1u << BitPn );
    }
}
    100c:	e00a      	b.n	1024 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1u << BitPn );
    100e:	9b01      	ldr	r3, [sp, #4]
    1010:	681a      	ldr	r2, [r3, #0]
    1012:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1016:	2101      	movs	r1, #1
    1018:	fa01 f303 	lsl.w	r3, r1, r3
    101c:	43db      	mvns	r3, r3
    101e:	401a      	ands	r2, r3
    1020:	9b01      	ldr	r3, [sp, #4]
    1022:	601a      	str	r2, [r3, #0]
}
    1024:	bf00      	nop
    1026:	b002      	add	sp, #8
    1028:	4770      	bx	lr
	...

0000102c <Scheduler_Init>:
 * value for the arguments.
 *
 * @param   scheduler  Scheduler control structure
 */
void Scheduler_Init( const Scheduler_ConfigType *SchedulerPtr )
{
    102c:	b500      	push	{lr}
    102e:	b085      	sub	sp, #20
    1030:	9001      	str	r0, [sp, #4]
    SchedulerControl.TaskFlags = 0u;
    1032:	4b56      	ldr	r3, [pc, #344]	; (118c <Scheduler_Init+0x160>)
    1034:	2200      	movs	r2, #0
    1036:	641a      	str	r2, [r3, #64]	; 0x40
    SchedulerControl.TimerFlags = 0u;
    1038:	4b54      	ldr	r3, [pc, #336]	; (118c <Scheduler_Init+0x160>)
    103a:	2200      	movs	r2, #0
    103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    103e:	2300      	movs	r3, #0
    1040:	f88d 300f 	strb.w	r3, [sp, #15]
    1044:	e02f      	b.n	10a6 <Scheduler_Init+0x7a>
    {
        SchedulerControl.TaskElapsed[ i ] = 0u;
    1046:	f89d 300f 	ldrb.w	r3, [sp, #15]
    104a:	4a50      	ldr	r2, [pc, #320]	; (118c <Scheduler_Init+0x160>)
    104c:	2100      	movs	r1, #0
    104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TaskPeriod[ i ] = SchedulerPtr->TaskPtr[ i ].InitPeriod;
    1052:	9b01      	ldr	r3, [sp, #4]
    1054:	6899      	ldr	r1, [r3, #8]
    1056:	f89d 200f 	ldrb.w	r2, [sp, #15]
    105a:	4613      	mov	r3, r2
    105c:	005b      	lsls	r3, r3, #1
    105e:	4413      	add	r3, r2
    1060:	009b      	lsls	r3, r3, #2
    1062:	18ca      	adds	r2, r1, r3
    1064:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1068:	6812      	ldr	r2, [r2, #0]
    106a:	4948      	ldr	r1, [pc, #288]	; (118c <Scheduler_Init+0x160>)
    106c:	3306      	adds	r3, #6
    106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TaskFlags, i, SchedulerPtr->TaskPtr[ i ].InitFlag );
    1072:	9b01      	ldr	r3, [sp, #4]
    1074:	6899      	ldr	r1, [r3, #8]
    1076:	f89d 200f 	ldrb.w	r2, [sp, #15]
    107a:	4613      	mov	r3, r2
    107c:	005b      	lsls	r3, r3, #1
    107e:	4413      	add	r3, r2
    1080:	009b      	lsls	r3, r3, #2
    1082:	440b      	add	r3, r1
    1084:	791b      	ldrb	r3, [r3, #4]
    1086:	2b00      	cmp	r3, #0
    1088:	bf14      	ite	ne
    108a:	2301      	movne	r3, #1
    108c:	2300      	moveq	r3, #0
    108e:	b2da      	uxtb	r2, r3
    1090:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1094:	4619      	mov	r1, r3
    1096:	483e      	ldr	r0, [pc, #248]	; (1190 <Scheduler_Init+0x164>)
    1098:	f7ff ffa2 	bl	fe0 <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Tasks; i++ )
    109c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10a0:	3301      	adds	r3, #1
    10a2:	f88d 300f 	strb.w	r3, [sp, #15]
    10a6:	9b01      	ldr	r3, [sp, #4]
    10a8:	791b      	ldrb	r3, [r3, #4]
    10aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    10ae:	429a      	cmp	r2, r3
    10b0:	d3c9      	bcc.n	1046 <Scheduler_Init+0x1a>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    10b2:	2300      	movs	r3, #0
    10b4:	f88d 300e 	strb.w	r3, [sp, #14]
    10b8:	e031      	b.n	111e <Scheduler_Init+0xf2>
    {
        SchedulerControl.TimerCount[ i ] = 0u;
    10ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    10be:	4a33      	ldr	r2, [pc, #204]	; (118c <Scheduler_Init+0x160>)
    10c0:	330c      	adds	r3, #12
    10c2:	2100      	movs	r1, #0
    10c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.TimerTimeout[ i ] = SchedulerPtr->TimerPtr[ i ].InitTimeout;
    10c8:	9b01      	ldr	r3, [sp, #4]
    10ca:	6919      	ldr	r1, [r3, #16]
    10cc:	f89d 200e 	ldrb.w	r2, [sp, #14]
    10d0:	4613      	mov	r3, r2
    10d2:	005b      	lsls	r3, r3, #1
    10d4:	4413      	add	r3, r2
    10d6:	009b      	lsls	r3, r3, #2
    10d8:	18ca      	adds	r2, r1, r3
    10da:	f89d 300e 	ldrb.w	r3, [sp, #14]
    10de:	6812      	ldr	r2, [r2, #0]
    10e0:	492a      	ldr	r1, [pc, #168]	; (118c <Scheduler_Init+0x160>)
    10e2:	330c      	adds	r3, #12
    10e4:	009b      	lsls	r3, r3, #2
    10e6:	440b      	add	r3, r1
    10e8:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerControl.TimerFlags, i, SchedulerPtr->TimerPtr[ i ].InitFlag );
    10ea:	9b01      	ldr	r3, [sp, #4]
    10ec:	6919      	ldr	r1, [r3, #16]
    10ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
    10f2:	4613      	mov	r3, r2
    10f4:	005b      	lsls	r3, r3, #1
    10f6:	4413      	add	r3, r2
    10f8:	009b      	lsls	r3, r3, #2
    10fa:	440b      	add	r3, r1
    10fc:	791b      	ldrb	r3, [r3, #4]
    10fe:	2b00      	cmp	r3, #0
    1100:	bf14      	ite	ne
    1102:	2301      	movne	r3, #1
    1104:	2300      	moveq	r3, #0
    1106:	b2da      	uxtb	r2, r3
    1108:	f89d 300e 	ldrb.w	r3, [sp, #14]
    110c:	4619      	mov	r1, r3
    110e:	4821      	ldr	r0, [pc, #132]	; (1194 <Scheduler_Init+0x168>)
    1110:	f7ff ff66 	bl	fe0 <Bfx_PutBit_u32u8u8>
    for( uint8 i = 0u; i < SchedulerPtr->Timers; i++ )
    1114:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1118:	3301      	adds	r3, #1
    111a:	f88d 300e 	strb.w	r3, [sp, #14]
    111e:	9b01      	ldr	r3, [sp, #4]
    1120:	7b1b      	ldrb	r3, [r3, #12]
    1122:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1126:	429a      	cmp	r2, r3
    1128:	d3c7      	bcc.n	10ba <Scheduler_Init+0x8e>
    }

    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    112a:	2300      	movs	r3, #0
    112c:	f88d 300d 	strb.w	r3, [sp, #13]
    1130:	e01f      	b.n	1172 <Scheduler_Init+0x146>
    {
        SchedulerControl.QueueHeads[ i ] = 0u;
    1132:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1136:	4a15      	ldr	r2, [pc, #84]	; (118c <Scheduler_Init+0x160>)
    1138:	330e      	adds	r3, #14
    113a:	2100      	movs	r1, #0
    113c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        SchedulerControl.QueueTails[ i ] = 0u;
    1140:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1144:	4a11      	ldr	r2, [pc, #68]	; (118c <Scheduler_Init+0x160>)
    1146:	330e      	adds	r3, #14
    1148:	009b      	lsls	r3, r3, #2
    114a:	4413      	add	r3, r2
    114c:	2200      	movs	r2, #0
    114e:	605a      	str	r2, [r3, #4]
        Bfx_SetBit_u32u8( &SchedulerControl.QueueEmpties, i );
    1150:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1154:	4619      	mov	r1, r3
    1156:	4810      	ldr	r0, [pc, #64]	; (1198 <Scheduler_Init+0x16c>)
    1158:	f7ff ff0a 	bl	f70 <Bfx_SetBit_u32u8>
        Bfx_ClrBit_u32u8( &SchedulerControl.QueueFulls, i );
    115c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1160:	4619      	mov	r1, r3
    1162:	480e      	ldr	r0, [pc, #56]	; (119c <Scheduler_Init+0x170>)
    1164:	f7ff ff16 	bl	f94 <Bfx_ClrBit_u32u8>
    for( uint8 i = 0u; i < SchedulerPtr->Queues; i++ )
    1168:	f89d 300d 	ldrb.w	r3, [sp, #13]
    116c:	3301      	adds	r3, #1
    116e:	f88d 300d 	strb.w	r3, [sp, #13]
    1172:	9b01      	ldr	r3, [sp, #4]
    1174:	7d1b      	ldrb	r3, [r3, #20]
    1176:	f89d 200d 	ldrb.w	r2, [sp, #13]
    117a:	429a      	cmp	r2, r3
    117c:	d3d9      	bcc.n	1132 <Scheduler_Init+0x106>
    }
    
    SchedulerLocal = SchedulerPtr;
    117e:	4a08      	ldr	r2, [pc, #32]	; (11a0 <Scheduler_Init+0x174>)
    1180:	9b01      	ldr	r3, [sp, #4]
    1182:	6013      	str	r3, [r2, #0]
}
    1184:	bf00      	nop
    1186:	b005      	add	sp, #20
    1188:	f85d fb04 	ldr.w	pc, [sp], #4
    118c:	1fff8e2c 	.word	0x1fff8e2c
    1190:	1fff8e6c 	.word	0x1fff8e6c
    1194:	1fff8e70 	.word	0x1fff8e70
    1198:	1fff8e74 	.word	0x1fff8e74
    119c:	1fff8e78 	.word	0x1fff8e78
    11a0:	1fff8e28 	.word	0x1fff8e28

000011a4 <Scheduler_MainFunction>:
 * if it is time to run accordingly to the period registered on each of them. The function won't return
 * by any means since it is looping inside a __while(1u)__ forever. The algorithm is pretty simple since
 * first task to dispatch will be the first registered in the **Scheduler_ConfigType** array
 */
void Scheduler_MainFunction( void )
{
    11a4:	b500      	push	{lr}
    11a6:	b085      	sub	sp, #20
    uint32 Timeout = OsIf_MicrosToTicks( ( SchedulerLocal->Tick * 1000 ), OSIF_COUNTER_SYSTEM );
    11a8:	4b13      	ldr	r3, [pc, #76]	; (11f8 <Scheduler_MainFunction+0x54>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    11b2:	fb02 f303 	mul.w	r3, r2, r3
    11b6:	2101      	movs	r1, #1
    11b8:	4618      	mov	r0, r3
    11ba:	f000 ff32 	bl	2022 <OsIf_MicrosToTicks>
    11be:	9002      	str	r0, [sp, #8]
    /*get the Systic Timer count for the first time*/
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
    11c0:	2001      	movs	r0, #1
    11c2:	f000 fee2 	bl	1f8a <OsIf_GetCounter>
    11c6:	4603      	mov	r3, r0
    11c8:	9301      	str	r3, [sp, #4]
    /*We need to count the elapsed time from zero*/
    uint32 ElapsedTime = 0u;
    11ca:	2300      	movs	r3, #0
    11cc:	9303      	str	r3, [sp, #12]
    
    do /* cppcheck-suppress misra-c2012-14.4 ; this is an infinite loop */
    {
        /* get the elapsed time count from the seed tick value*/
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    11ce:	ab01      	add	r3, sp, #4
    11d0:	2101      	movs	r1, #1
    11d2:	4618      	mov	r0, r3
    11d4:	f000 fef2 	bl	1fbc <OsIf_GetElapsed>
    11d8:	4602      	mov	r2, r0
    11da:	9b03      	ldr	r3, [sp, #12]
    11dc:	4413      	add	r3, r2
    11de:	9303      	str	r3, [sp, #12]
        /*query if the elapsed time is already equal or bigger than the timeout*/
        if( ElapsedTime >= Timeout )
    11e0:	9a03      	ldr	r2, [sp, #12]
    11e2:	9b02      	ldr	r3, [sp, #8]
    11e4:	429a      	cmp	r2, r3
    11e6:	d3f2      	bcc.n	11ce <Scheduler_MainFunction+0x2a>
        {
            /*reset the elapsed time */
            ElapsedTime = 0u;
    11e8:	2300      	movs	r3, #0
    11ea:	9303      	str	r3, [sp, #12]
            /*Scan all registered timers*/
            Timers_Dispatch( );
    11ec:	f000 f85a 	bl	12a4 <Timers_Dispatch>
            /*Scan all registered task*/
            Tasks_Dispatch( );
    11f0:	f000 f804 	bl	11fc <Tasks_Dispatch>
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
    11f4:	e7eb      	b.n	11ce <Scheduler_MainFunction+0x2a>
    11f6:	bf00      	nop
    11f8:	1fff8e28 	.word	0x1fff8e28

000011fc <Tasks_Dispatch>:
 * This is the only mechanism to stop a timer. The function only set the flag startFlag to FALSE.
 *
 * @param   scheduler  Scheduler control structure
 */
STATIC void Tasks_Dispatch( void )
{
    11fc:	b500      	push	{lr}
    11fe:	b083      	sub	sp, #12
    /*Scan all registered task*/
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    1200:	2300      	movs	r3, #0
    1202:	f88d 3007 	strb.w	r3, [sp, #7]
    1206:	e03c      	b.n	1282 <Tasks_Dispatch+0x86>
    {
        /*Only run those tasks that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TaskFlags, i ) == TRUE )
    1208:	4b24      	ldr	r3, [pc, #144]	; (129c <Tasks_Dispatch+0xa0>)
    120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    120c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1210:	4611      	mov	r1, r2
    1212:	4618      	mov	r0, r3
    1214:	f7ff fed1 	bl	fba <Bfx_GetBit_u32u8_u8>
    1218:	4603      	mov	r3, r0
    121a:	2b00      	cmp	r3, #0
    121c:	d01e      	beq.n	125c <Tasks_Dispatch+0x60>
        {
            /*Only run those tasks that already has its elapsed time*/
            if( SchedulerControl.TaskElapsed[ i ] >= SchedulerControl.TaskPeriod[ i ] )
    121e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1222:	4a1e      	ldr	r2, [pc, #120]	; (129c <Tasks_Dispatch+0xa0>)
    1224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1228:	f89d 3007 	ldrb.w	r3, [sp, #7]
    122c:	491b      	ldr	r1, [pc, #108]	; (129c <Tasks_Dispatch+0xa0>)
    122e:	3306      	adds	r3, #6
    1230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1234:	429a      	cmp	r2, r3
    1236:	d311      	bcc.n	125c <Tasks_Dispatch+0x60>
            {
                SchedulerControl.TaskElapsed[ i ] = 0u;
    1238:	f89d 3007 	ldrb.w	r3, [sp, #7]
    123c:	4a17      	ldr	r2, [pc, #92]	; (129c <Tasks_Dispatch+0xa0>)
    123e:	2100      	movs	r1, #0
    1240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                /*Run task*/
                SchedulerLocal->TaskPtr[ i ].TaskFunc( );
    1244:	4b16      	ldr	r3, [pc, #88]	; (12a0 <Tasks_Dispatch+0xa4>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	6899      	ldr	r1, [r3, #8]
    124a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    124e:	4613      	mov	r3, r2
    1250:	005b      	lsls	r3, r3, #1
    1252:	4413      	add	r3, r2
    1254:	009b      	lsls	r3, r3, #2
    1256:	440b      	add	r3, r1
    1258:	689b      	ldr	r3, [r3, #8]
    125a:	4798      	blx	r3
            }
        }
        /*Increment the task elapsed time in ticks*/
        SchedulerControl.TaskElapsed[ i ] += SchedulerLocal->Tick;
    125c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1260:	4a0e      	ldr	r2, [pc, #56]	; (129c <Tasks_Dispatch+0xa0>)
    1262:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1266:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <Tasks_Dispatch+0xa4>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	681a      	ldr	r2, [r3, #0]
    126c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1270:	440a      	add	r2, r1
    1272:	490a      	ldr	r1, [pc, #40]	; (129c <Tasks_Dispatch+0xa0>)
    1274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( uint8 i = 0u; i < SchedulerLocal->Tasks; i++ )
    1278:	f89d 3007 	ldrb.w	r3, [sp, #7]
    127c:	3301      	adds	r3, #1
    127e:	f88d 3007 	strb.w	r3, [sp, #7]
    1282:	4b07      	ldr	r3, [pc, #28]	; (12a0 <Tasks_Dispatch+0xa4>)
    1284:	681b      	ldr	r3, [r3, #0]
    1286:	791b      	ldrb	r3, [r3, #4]
    1288:	f89d 2007 	ldrb.w	r2, [sp, #7]
    128c:	429a      	cmp	r2, r3
    128e:	d3bb      	bcc.n	1208 <Tasks_Dispatch+0xc>
    }
}
    1290:	bf00      	nop
    1292:	bf00      	nop
    1294:	b003      	add	sp, #12
    1296:	f85d fb04 	ldr.w	pc, [sp], #4
    129a:	bf00      	nop
    129c:	1fff8e2c 	.word	0x1fff8e2c
    12a0:	1fff8e28 	.word	0x1fff8e28

000012a4 <Timers_Dispatch>:

STATIC void Timers_Dispatch( void )
{
    12a4:	b500      	push	{lr}
    12a6:	b083      	sub	sp, #12
    /*Scan all registered timers*/
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    12a8:	2300      	movs	r3, #0
    12aa:	f88d 3007 	strb.w	r3, [sp, #7]
    12ae:	e046      	b.n	133e <Timers_Dispatch+0x9a>
    {
        /*Only run those timers that are started*/
        if( Bfx_GetBit_u32u8_u8( SchedulerControl.TimerFlags, i ) == TRUE )
    12b0:	4b29      	ldr	r3, [pc, #164]	; (1358 <Timers_Dispatch+0xb4>)
    12b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    12b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    12b8:	4611      	mov	r1, r2
    12ba:	4618      	mov	r0, r3
    12bc:	f7ff fe7d 	bl	fba <Bfx_GetBit_u32u8_u8>
    12c0:	4603      	mov	r3, r0
    12c2:	2b00      	cmp	r3, #0
    12c4:	d036      	beq.n	1334 <Timers_Dispatch+0x90>
        {
            /*Decrement timer count by one tick*/
            SchedulerControl.TimerCount[ i ] -= SchedulerLocal->Tick;
    12c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12ca:	4a23      	ldr	r2, [pc, #140]	; (1358 <Timers_Dispatch+0xb4>)
    12cc:	330c      	adds	r3, #12
    12ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    12d2:	4b22      	ldr	r3, [pc, #136]	; (135c <Timers_Dispatch+0xb8>)
    12d4:	681b      	ldr	r3, [r3, #0]
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12dc:	1a8a      	subs	r2, r1, r2
    12de:	491e      	ldr	r1, [pc, #120]	; (1358 <Timers_Dispatch+0xb4>)
    12e0:	330c      	adds	r3, #12
    12e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            /*Only run those timers that already has its elapsed time*/
            if( SchedulerControl.TimerCount[ i ] == 0u )
    12e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12ea:	4a1b      	ldr	r2, [pc, #108]	; (1358 <Timers_Dispatch+0xb4>)
    12ec:	330c      	adds	r3, #12
    12ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d11e      	bne.n	1334 <Timers_Dispatch+0x90>
            {
                /*Prevent timer from running again*/
                Bfx_ClrBit_u32u8( &SchedulerControl.TimerFlags, i );
    12f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12fa:	4619      	mov	r1, r3
    12fc:	4818      	ldr	r0, [pc, #96]	; (1360 <Timers_Dispatch+0xbc>)
    12fe:	f7ff fe49 	bl	f94 <Bfx_ClrBit_u32u8>
                /*Check if the timer has a callback assosiate*/
                if( SchedulerLocal->TimerPtr[ i ].CallbackFunc != NULL )
    1302:	4b16      	ldr	r3, [pc, #88]	; (135c <Timers_Dispatch+0xb8>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	6919      	ldr	r1, [r3, #16]
    1308:	f89d 2007 	ldrb.w	r2, [sp, #7]
    130c:	4613      	mov	r3, r2
    130e:	005b      	lsls	r3, r3, #1
    1310:	4413      	add	r3, r2
    1312:	009b      	lsls	r3, r3, #2
    1314:	440b      	add	r3, r1
    1316:	689b      	ldr	r3, [r3, #8]
    1318:	2b00      	cmp	r3, #0
    131a:	d00b      	beq.n	1334 <Timers_Dispatch+0x90>
                {
                    /*Run callback*/
                    SchedulerLocal->TimerPtr[ i ].CallbackFunc( );
    131c:	4b0f      	ldr	r3, [pc, #60]	; (135c <Timers_Dispatch+0xb8>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	6919      	ldr	r1, [r3, #16]
    1322:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1326:	4613      	mov	r3, r2
    1328:	005b      	lsls	r3, r3, #1
    132a:	4413      	add	r3, r2
    132c:	009b      	lsls	r3, r3, #2
    132e:	440b      	add	r3, r1
    1330:	689b      	ldr	r3, [r3, #8]
    1332:	4798      	blx	r3
    for( uint8 i = 0u; i < SchedulerLocal->Timers; i++ )
    1334:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1338:	3301      	adds	r3, #1
    133a:	f88d 3007 	strb.w	r3, [sp, #7]
    133e:	4b07      	ldr	r3, [pc, #28]	; (135c <Timers_Dispatch+0xb8>)
    1340:	681b      	ldr	r3, [r3, #0]
    1342:	7b1b      	ldrb	r3, [r3, #12]
    1344:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1348:	429a      	cmp	r2, r3
    134a:	d3b1      	bcc.n	12b0 <Timers_Dispatch+0xc>
                }
            }
        }
    }
}
    134c:	bf00      	nop
    134e:	bf00      	nop
    1350:	b003      	add	sp, #12
    1352:	f85d fb04 	ldr.w	pc, [sp], #4
    1356:	bf00      	nop
    1358:	1fff8e2c 	.word	0x1fff8e2c
    135c:	1fff8e28 	.word	0x1fff8e28
    1360:	1fff8e70 	.word	0x1fff8e70

00001364 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1364:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1366:	2300      	movs	r3, #0
    1368:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    136a:	2300      	movs	r3, #0
    136c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    136e:	2300      	movs	r3, #0
    1370:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    1372:	2300      	movs	r3, #0
    1374:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1376:	4b44      	ldr	r3, [pc, #272]	; (1488 <init_data_bss+0x124>)
    1378:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    137a:	4b44      	ldr	r3, [pc, #272]	; (148c <init_data_bss+0x128>)
    137c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    137e:	9b05      	ldr	r3, [sp, #20]
    1380:	681b      	ldr	r3, [r3, #0]
    1382:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1384:	9b05      	ldr	r3, [sp, #20]
    1386:	3304      	adds	r3, #4
    1388:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    138a:	9b05      	ldr	r3, [sp, #20]
    138c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    138e:	2300      	movs	r3, #0
    1390:	9309      	str	r3, [sp, #36]	; 0x24
    1392:	e03d      	b.n	1410 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1394:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1396:	4613      	mov	r3, r2
    1398:	005b      	lsls	r3, r3, #1
    139a:	4413      	add	r3, r2
    139c:	009b      	lsls	r3, r3, #2
    139e:	461a      	mov	r2, r3
    13a0:	9b03      	ldr	r3, [sp, #12]
    13a2:	4413      	add	r3, r2
    13a4:	685b      	ldr	r3, [r3, #4]
    13a6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    13a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13aa:	4613      	mov	r3, r2
    13ac:	005b      	lsls	r3, r3, #1
    13ae:	4413      	add	r3, r2
    13b0:	009b      	lsls	r3, r3, #2
    13b2:	461a      	mov	r2, r3
    13b4:	9b03      	ldr	r3, [sp, #12]
    13b6:	4413      	add	r3, r2
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    13bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13be:	4613      	mov	r3, r2
    13c0:	005b      	lsls	r3, r3, #1
    13c2:	4413      	add	r3, r2
    13c4:	009b      	lsls	r3, r3, #2
    13c6:	461a      	mov	r2, r3
    13c8:	9b03      	ldr	r3, [sp, #12]
    13ca:	4413      	add	r3, r2
    13cc:	689b      	ldr	r3, [r3, #8]
    13ce:	4619      	mov	r1, r3
    13d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13d2:	4613      	mov	r3, r2
    13d4:	005b      	lsls	r3, r3, #1
    13d6:	4413      	add	r3, r2
    13d8:	009b      	lsls	r3, r3, #2
    13da:	461a      	mov	r2, r3
    13dc:	9b03      	ldr	r3, [sp, #12]
    13de:	4413      	add	r3, r2
    13e0:	685b      	ldr	r3, [r3, #4]
    13e2:	1acb      	subs	r3, r1, r3
    13e4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    13e6:	2300      	movs	r3, #0
    13e8:	9308      	str	r3, [sp, #32]
    13ea:	e00a      	b.n	1402 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    13ec:	9a00      	ldr	r2, [sp, #0]
    13ee:	9b08      	ldr	r3, [sp, #32]
    13f0:	441a      	add	r2, r3
    13f2:	9901      	ldr	r1, [sp, #4]
    13f4:	9b08      	ldr	r3, [sp, #32]
    13f6:	440b      	add	r3, r1
    13f8:	7812      	ldrb	r2, [r2, #0]
    13fa:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    13fc:	9b08      	ldr	r3, [sp, #32]
    13fe:	3301      	adds	r3, #1
    1400:	9308      	str	r3, [sp, #32]
    1402:	9a08      	ldr	r2, [sp, #32]
    1404:	9b06      	ldr	r3, [sp, #24]
    1406:	429a      	cmp	r2, r3
    1408:	d3f0      	bcc.n	13ec <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    140a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    140c:	3301      	adds	r3, #1
    140e:	9309      	str	r3, [sp, #36]	; 0x24
    1410:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1412:	9b07      	ldr	r3, [sp, #28]
    1414:	429a      	cmp	r2, r3
    1416:	d3bd      	bcc.n	1394 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1418:	9b04      	ldr	r3, [sp, #16]
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    141e:	9b04      	ldr	r3, [sp, #16]
    1420:	3304      	adds	r3, #4
    1422:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1424:	9b04      	ldr	r3, [sp, #16]
    1426:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1428:	2300      	movs	r3, #0
    142a:	9309      	str	r3, [sp, #36]	; 0x24
    142c:	e024      	b.n	1478 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    142e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1430:	00db      	lsls	r3, r3, #3
    1432:	9a02      	ldr	r2, [sp, #8]
    1434:	4413      	add	r3, r2
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    143a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    143c:	00db      	lsls	r3, r3, #3
    143e:	9a02      	ldr	r2, [sp, #8]
    1440:	4413      	add	r3, r2
    1442:	685b      	ldr	r3, [r3, #4]
    1444:	4619      	mov	r1, r3
    1446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1448:	00db      	lsls	r3, r3, #3
    144a:	9a02      	ldr	r2, [sp, #8]
    144c:	4413      	add	r3, r2
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	1acb      	subs	r3, r1, r3
    1452:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1454:	2300      	movs	r3, #0
    1456:	9308      	str	r3, [sp, #32]
    1458:	e007      	b.n	146a <init_data_bss+0x106>
        {
            ram[j] = 0U;
    145a:	9a01      	ldr	r2, [sp, #4]
    145c:	9b08      	ldr	r3, [sp, #32]
    145e:	4413      	add	r3, r2
    1460:	2200      	movs	r2, #0
    1462:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1464:	9b08      	ldr	r3, [sp, #32]
    1466:	3301      	adds	r3, #1
    1468:	9308      	str	r3, [sp, #32]
    146a:	9a08      	ldr	r2, [sp, #32]
    146c:	9b06      	ldr	r3, [sp, #24]
    146e:	429a      	cmp	r2, r3
    1470:	d3f3      	bcc.n	145a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1472:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1474:	3301      	adds	r3, #1
    1476:	9309      	str	r3, [sp, #36]	; 0x24
    1478:	9a09      	ldr	r2, [sp, #36]	; 0x24
    147a:	9b07      	ldr	r3, [sp, #28]
    147c:	429a      	cmp	r2, r3
    147e:	d3d6      	bcc.n	142e <init_data_bss+0xca>
        }
    }
}
    1480:	bf00      	nop
    1482:	bf00      	nop
    1484:	b00a      	add	sp, #40	; 0x28
    1486:	4770      	bx	lr
    1488:	00009668 	.word	0x00009668
    148c:	00009684 	.word	0x00009684

00001490 <sys_m4_cache_init>:
{
    1490:	b084      	sub	sp, #16
    1492:	4603      	mov	r3, r0
    1494:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1498:	2300      	movs	r3, #0
    149a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    149e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d118      	bne.n	14d8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    14a6:	4b10      	ldr	r3, [pc, #64]	; (14e8 <sys_m4_cache_init+0x58>)
    14a8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    14ac:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    14ae:	4b0e      	ldr	r3, [pc, #56]	; (14e8 <sys_m4_cache_init+0x58>)
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	4a0d      	ldr	r2, [pc, #52]	; (14e8 <sys_m4_cache_init+0x58>)
    14b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    14b8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    14ba:	bf00      	nop
    14bc:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <sys_m4_cache_init+0x58>)
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    14c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    14c8:	d0f8      	beq.n	14bc <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    14ca:	4b07      	ldr	r3, [pc, #28]	; (14e8 <sys_m4_cache_init+0x58>)
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	4a06      	ldr	r2, [pc, #24]	; (14e8 <sys_m4_cache_init+0x58>)
    14d0:	f043 0301 	orr.w	r3, r3, #1
    14d4:	6013      	str	r3, [r2, #0]
    14d6:	e002      	b.n	14de <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    14d8:	2301      	movs	r3, #1
    14da:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    14de:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    14e2:	4618      	mov	r0, r3
    14e4:	b004      	add	sp, #16
    14e6:	4770      	bx	lr
    14e8:	e0082000 	.word	0xe0082000

000014ec <startup_go_to_user_mode>:
}
    14ec:	bf00      	nop
    14ee:	4770      	bx	lr

000014f0 <Sys_GetCoreID>:
    return 0U;
    14f0:	2300      	movs	r3, #0
}
    14f2:	4618      	mov	r0, r3
    14f4:	4770      	bx	lr

000014f6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    14f6:	e7fe      	b.n	14f6 <HardFault_Handler>

000014f8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    14f8:	e7fe      	b.n	14f8 <MemManage_Handler>

000014fa <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    14fa:	e7fe      	b.n	14fa <BusFault_Handler>

000014fc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    14fc:	e7fe      	b.n	14fc <UsageFault_Handler>

000014fe <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    14fe:	e7fe      	b.n	14fe <SVC_Handler>

00001500 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1500:	e7fe      	b.n	1500 <DebugMon_Handler>

00001502 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1502:	e7fe      	b.n	1502 <PendSV_Handler>

00001504 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1504:	e7fe      	b.n	1504 <SysTick_Handler>

00001506 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1506:	e7fe      	b.n	1506 <undefined_handler>

00001508 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1508:	b500      	push	{lr}
    150a:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    150c:	4b26      	ldr	r3, [pc, #152]	; (15a8 <_DoInit+0xa0>)
    150e:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1510:	22a8      	movs	r2, #168	; 0xa8
    1512:	2100      	movs	r1, #0
    1514:	9800      	ldr	r0, [sp, #0]
    1516:	f000 fd13 	bl	1f40 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    151a:	9b00      	ldr	r3, [sp, #0]
    151c:	2203      	movs	r2, #3
    151e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1520:	9b00      	ldr	r3, [sp, #0]
    1522:	2203      	movs	r2, #3
    1524:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1526:	9b00      	ldr	r3, [sp, #0]
    1528:	4a20      	ldr	r2, [pc, #128]	; (15ac <_DoInit+0xa4>)
    152a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    152c:	9b00      	ldr	r3, [sp, #0]
    152e:	4a20      	ldr	r2, [pc, #128]	; (15b0 <_DoInit+0xa8>)
    1530:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    1532:	9b00      	ldr	r3, [sp, #0]
    1534:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1538:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    153a:	9b00      	ldr	r3, [sp, #0]
    153c:	2200      	movs	r2, #0
    153e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1540:	9b00      	ldr	r3, [sp, #0]
    1542:	2200      	movs	r2, #0
    1544:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1546:	9b00      	ldr	r3, [sp, #0]
    1548:	2200      	movs	r2, #0
    154a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    154c:	9b00      	ldr	r3, [sp, #0]
    154e:	4a17      	ldr	r2, [pc, #92]	; (15ac <_DoInit+0xa4>)
    1550:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    1552:	9b00      	ldr	r3, [sp, #0]
    1554:	4a17      	ldr	r2, [pc, #92]	; (15b4 <_DoInit+0xac>)
    1556:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1558:	9b00      	ldr	r3, [sp, #0]
    155a:	2210      	movs	r2, #16
    155c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    155e:	9b00      	ldr	r3, [sp, #0]
    1560:	2200      	movs	r2, #0
    1562:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1564:	9b00      	ldr	r3, [sp, #0]
    1566:	2200      	movs	r2, #0
    1568:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    156a:	9b00      	ldr	r3, [sp, #0]
    156c:	2200      	movs	r2, #0
    156e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1570:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1574:	2300      	movs	r3, #0
    1576:	9301      	str	r3, [sp, #4]
    1578:	e00c      	b.n	1594 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    157a:	9b01      	ldr	r3, [sp, #4]
    157c:	f1c3 030f 	rsb	r3, r3, #15
    1580:	4a0d      	ldr	r2, [pc, #52]	; (15b8 <_DoInit+0xb0>)
    1582:	5cd1      	ldrb	r1, [r2, r3]
    1584:	9a00      	ldr	r2, [sp, #0]
    1586:	9b01      	ldr	r3, [sp, #4]
    1588:	4413      	add	r3, r2
    158a:	460a      	mov	r2, r1
    158c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    158e:	9b01      	ldr	r3, [sp, #4]
    1590:	3301      	adds	r3, #1
    1592:	9301      	str	r3, [sp, #4]
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	2b0f      	cmp	r3, #15
    1598:	d9ef      	bls.n	157a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    159a:	f3bf 8f5f 	dmb	sy
}
    159e:	bf00      	nop
    15a0:	b003      	add	sp, #12
    15a2:	f85d fb04 	ldr.w	pc, [sp], #4
    15a6:	bf00      	nop
    15a8:	1fff8e80 	.word	0x1fff8e80
    15ac:	00008748 	.word	0x00008748
    15b0:	1fff8f28 	.word	0x1fff8f28
    15b4:	1fff9328 	.word	0x1fff9328
    15b8:	00009644 	.word	0x00009644

000015bc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    15bc:	b500      	push	{lr}
    15be:	b08b      	sub	sp, #44	; 0x2c
    15c0:	9003      	str	r0, [sp, #12]
    15c2:	9102      	str	r1, [sp, #8]
    15c4:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    15c6:	2300      	movs	r3, #0
    15c8:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	68db      	ldr	r3, [r3, #12]
    15ce:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    15d0:	9b03      	ldr	r3, [sp, #12]
    15d2:	691b      	ldr	r3, [r3, #16]
    15d4:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    15d6:	9a06      	ldr	r2, [sp, #24]
    15d8:	9b07      	ldr	r3, [sp, #28]
    15da:	429a      	cmp	r2, r3
    15dc:	d905      	bls.n	15ea <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    15de:	9a06      	ldr	r2, [sp, #24]
    15e0:	9b07      	ldr	r3, [sp, #28]
    15e2:	1ad3      	subs	r3, r2, r3
    15e4:	3b01      	subs	r3, #1
    15e6:	9309      	str	r3, [sp, #36]	; 0x24
    15e8:	e007      	b.n	15fa <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    15ea:	9b03      	ldr	r3, [sp, #12]
    15ec:	689a      	ldr	r2, [r3, #8]
    15ee:	9906      	ldr	r1, [sp, #24]
    15f0:	9b07      	ldr	r3, [sp, #28]
    15f2:	1acb      	subs	r3, r1, r3
    15f4:	4413      	add	r3, r2
    15f6:	3b01      	subs	r3, #1
    15f8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    15fa:	9b03      	ldr	r3, [sp, #12]
    15fc:	689a      	ldr	r2, [r3, #8]
    15fe:	9b07      	ldr	r3, [sp, #28]
    1600:	1ad3      	subs	r3, r2, r3
    1602:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1604:	4293      	cmp	r3, r2
    1606:	bf28      	it	cs
    1608:	4613      	movcs	r3, r2
    160a:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    160c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    160e:	9b01      	ldr	r3, [sp, #4]
    1610:	4293      	cmp	r3, r2
    1612:	bf28      	it	cs
    1614:	4613      	movcs	r3, r2
    1616:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1618:	9b03      	ldr	r3, [sp, #12]
    161a:	685a      	ldr	r2, [r3, #4]
    161c:	9b07      	ldr	r3, [sp, #28]
    161e:	4413      	add	r3, r2
    1620:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1622:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1624:	9902      	ldr	r1, [sp, #8]
    1626:	9805      	ldr	r0, [sp, #20]
    1628:	f000 fc7c 	bl	1f24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    162c:	9a08      	ldr	r2, [sp, #32]
    162e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1630:	4413      	add	r3, r2
    1632:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1634:	9a02      	ldr	r2, [sp, #8]
    1636:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1638:	4413      	add	r3, r2
    163a:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    163c:	9a01      	ldr	r2, [sp, #4]
    163e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1640:	1ad3      	subs	r3, r2, r3
    1642:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1644:	9a07      	ldr	r2, [sp, #28]
    1646:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1648:	4413      	add	r3, r2
    164a:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    164c:	9b03      	ldr	r3, [sp, #12]
    164e:	689b      	ldr	r3, [r3, #8]
    1650:	9a07      	ldr	r2, [sp, #28]
    1652:	429a      	cmp	r2, r3
    1654:	d101      	bne.n	165a <_WriteBlocking+0x9e>
      WrOff = 0u;
    1656:	2300      	movs	r3, #0
    1658:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    165a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    165e:	9b03      	ldr	r3, [sp, #12]
    1660:	9a07      	ldr	r2, [sp, #28]
    1662:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1664:	9b01      	ldr	r3, [sp, #4]
    1666:	2b00      	cmp	r3, #0
    1668:	d1b2      	bne.n	15d0 <_WriteBlocking+0x14>
  return NumBytesWritten;
    166a:	9b08      	ldr	r3, [sp, #32]
}
    166c:	4618      	mov	r0, r3
    166e:	b00b      	add	sp, #44	; 0x2c
    1670:	f85d fb04 	ldr.w	pc, [sp], #4

00001674 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1674:	b500      	push	{lr}
    1676:	b089      	sub	sp, #36	; 0x24
    1678:	9003      	str	r0, [sp, #12]
    167a:	9102      	str	r1, [sp, #8]
    167c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    167e:	9b03      	ldr	r3, [sp, #12]
    1680:	68db      	ldr	r3, [r3, #12]
    1682:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1684:	9b03      	ldr	r3, [sp, #12]
    1686:	689a      	ldr	r2, [r3, #8]
    1688:	9b07      	ldr	r3, [sp, #28]
    168a:	1ad3      	subs	r3, r2, r3
    168c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    168e:	9a06      	ldr	r2, [sp, #24]
    1690:	9b01      	ldr	r3, [sp, #4]
    1692:	429a      	cmp	r2, r3
    1694:	d911      	bls.n	16ba <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1696:	9b03      	ldr	r3, [sp, #12]
    1698:	685a      	ldr	r2, [r3, #4]
    169a:	9b07      	ldr	r3, [sp, #28]
    169c:	4413      	add	r3, r2
    169e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    16a0:	9a01      	ldr	r2, [sp, #4]
    16a2:	9902      	ldr	r1, [sp, #8]
    16a4:	9804      	ldr	r0, [sp, #16]
    16a6:	f000 fc3d 	bl	1f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    16aa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    16ae:	9a07      	ldr	r2, [sp, #28]
    16b0:	9b01      	ldr	r3, [sp, #4]
    16b2:	441a      	add	r2, r3
    16b4:	9b03      	ldr	r3, [sp, #12]
    16b6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    16b8:	e01f      	b.n	16fa <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    16ba:	9b06      	ldr	r3, [sp, #24]
    16bc:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    16be:	9b03      	ldr	r3, [sp, #12]
    16c0:	685a      	ldr	r2, [r3, #4]
    16c2:	9b07      	ldr	r3, [sp, #28]
    16c4:	4413      	add	r3, r2
    16c6:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    16c8:	9a05      	ldr	r2, [sp, #20]
    16ca:	9902      	ldr	r1, [sp, #8]
    16cc:	9804      	ldr	r0, [sp, #16]
    16ce:	f000 fc29 	bl	1f24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    16d2:	9a01      	ldr	r2, [sp, #4]
    16d4:	9b06      	ldr	r3, [sp, #24]
    16d6:	1ad3      	subs	r3, r2, r3
    16d8:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    16da:	9b03      	ldr	r3, [sp, #12]
    16dc:	685b      	ldr	r3, [r3, #4]
    16de:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    16e0:	9a02      	ldr	r2, [sp, #8]
    16e2:	9b06      	ldr	r3, [sp, #24]
    16e4:	4413      	add	r3, r2
    16e6:	9a05      	ldr	r2, [sp, #20]
    16e8:	4619      	mov	r1, r3
    16ea:	9804      	ldr	r0, [sp, #16]
    16ec:	f000 fc1a 	bl	1f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    16f0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    16f4:	9b03      	ldr	r3, [sp, #12]
    16f6:	9a05      	ldr	r2, [sp, #20]
    16f8:	60da      	str	r2, [r3, #12]
}
    16fa:	bf00      	nop
    16fc:	b009      	add	sp, #36	; 0x24
    16fe:	f85d fb04 	ldr.w	pc, [sp], #4

00001702 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1702:	b086      	sub	sp, #24
    1704:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1706:	9b01      	ldr	r3, [sp, #4]
    1708:	691b      	ldr	r3, [r3, #16]
    170a:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	68db      	ldr	r3, [r3, #12]
    1710:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1712:	9a04      	ldr	r2, [sp, #16]
    1714:	9b03      	ldr	r3, [sp, #12]
    1716:	429a      	cmp	r2, r3
    1718:	d808      	bhi.n	172c <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    171a:	9b01      	ldr	r3, [sp, #4]
    171c:	689a      	ldr	r2, [r3, #8]
    171e:	9b03      	ldr	r3, [sp, #12]
    1720:	1ad2      	subs	r2, r2, r3
    1722:	9b04      	ldr	r3, [sp, #16]
    1724:	4413      	add	r3, r2
    1726:	3b01      	subs	r3, #1
    1728:	9305      	str	r3, [sp, #20]
    172a:	e004      	b.n	1736 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    172c:	9a04      	ldr	r2, [sp, #16]
    172e:	9b03      	ldr	r3, [sp, #12]
    1730:	1ad3      	subs	r3, r2, r3
    1732:	3b01      	subs	r3, #1
    1734:	9305      	str	r3, [sp, #20]
  }
  return r;
    1736:	9b05      	ldr	r3, [sp, #20]
}
    1738:	4618      	mov	r0, r3
    173a:	b006      	add	sp, #24
    173c:	4770      	bx	lr
	...

00001740 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1740:	b500      	push	{lr}
    1742:	b089      	sub	sp, #36	; 0x24
    1744:	9003      	str	r0, [sp, #12]
    1746:	9102      	str	r1, [sp, #8]
    1748:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    174a:	9b02      	ldr	r3, [sp, #8]
    174c:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    174e:	9b03      	ldr	r3, [sp, #12]
    1750:	1c5a      	adds	r2, r3, #1
    1752:	4613      	mov	r3, r2
    1754:	005b      	lsls	r3, r3, #1
    1756:	4413      	add	r3, r2
    1758:	00db      	lsls	r3, r3, #3
    175a:	4a20      	ldr	r2, [pc, #128]	; (17dc <SEGGER_RTT_WriteNoLock+0x9c>)
    175c:	4413      	add	r3, r2
    175e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1760:	9b05      	ldr	r3, [sp, #20]
    1762:	695b      	ldr	r3, [r3, #20]
    1764:	2b02      	cmp	r3, #2
    1766:	d029      	beq.n	17bc <SEGGER_RTT_WriteNoLock+0x7c>
    1768:	2b02      	cmp	r3, #2
    176a:	d82e      	bhi.n	17ca <SEGGER_RTT_WriteNoLock+0x8a>
    176c:	2b00      	cmp	r3, #0
    176e:	d002      	beq.n	1776 <SEGGER_RTT_WriteNoLock+0x36>
    1770:	2b01      	cmp	r3, #1
    1772:	d013      	beq.n	179c <SEGGER_RTT_WriteNoLock+0x5c>
    1774:	e029      	b.n	17ca <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1776:	9805      	ldr	r0, [sp, #20]
    1778:	f7ff ffc3 	bl	1702 <_GetAvailWriteSpace>
    177c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    177e:	9a04      	ldr	r2, [sp, #16]
    1780:	9b01      	ldr	r3, [sp, #4]
    1782:	429a      	cmp	r2, r3
    1784:	d202      	bcs.n	178c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1786:	2300      	movs	r3, #0
    1788:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    178a:	e021      	b.n	17d0 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    178c:	9b01      	ldr	r3, [sp, #4]
    178e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1790:	9a01      	ldr	r2, [sp, #4]
    1792:	9906      	ldr	r1, [sp, #24]
    1794:	9805      	ldr	r0, [sp, #20]
    1796:	f7ff ff6d 	bl	1674 <_WriteNoCheck>
    break;
    179a:	e019      	b.n	17d0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    179c:	9805      	ldr	r0, [sp, #20]
    179e:	f7ff ffb0 	bl	1702 <_GetAvailWriteSpace>
    17a2:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    17a4:	9a01      	ldr	r2, [sp, #4]
    17a6:	9b04      	ldr	r3, [sp, #16]
    17a8:	4293      	cmp	r3, r2
    17aa:	bf28      	it	cs
    17ac:	4613      	movcs	r3, r2
    17ae:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    17b0:	9a07      	ldr	r2, [sp, #28]
    17b2:	9906      	ldr	r1, [sp, #24]
    17b4:	9805      	ldr	r0, [sp, #20]
    17b6:	f7ff ff5d 	bl	1674 <_WriteNoCheck>
    break;
    17ba:	e009      	b.n	17d0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    17bc:	9a01      	ldr	r2, [sp, #4]
    17be:	9906      	ldr	r1, [sp, #24]
    17c0:	9805      	ldr	r0, [sp, #20]
    17c2:	f7ff fefb 	bl	15bc <_WriteBlocking>
    17c6:	9007      	str	r0, [sp, #28]
    break;
    17c8:	e002      	b.n	17d0 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    17ca:	2300      	movs	r3, #0
    17cc:	9307      	str	r3, [sp, #28]
    break;
    17ce:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    17d0:	9b07      	ldr	r3, [sp, #28]
}
    17d2:	4618      	mov	r0, r3
    17d4:	b009      	add	sp, #36	; 0x24
    17d6:	f85d fb04 	ldr.w	pc, [sp], #4
    17da:	bf00      	nop
    17dc:	1fff8e80 	.word	0x1fff8e80

000017e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    17e0:	b500      	push	{lr}
    17e2:	b089      	sub	sp, #36	; 0x24
    17e4:	9003      	str	r0, [sp, #12]
    17e6:	9102      	str	r1, [sp, #8]
    17e8:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    17ea:	4b0f      	ldr	r3, [pc, #60]	; (1828 <SEGGER_RTT_Write+0x48>)
    17ec:	9307      	str	r3, [sp, #28]
    17ee:	9b07      	ldr	r3, [sp, #28]
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	b2db      	uxtb	r3, r3
    17f4:	2b53      	cmp	r3, #83	; 0x53
    17f6:	d001      	beq.n	17fc <SEGGER_RTT_Write+0x1c>
    17f8:	f7ff fe86 	bl	1508 <_DoInit>
  SEGGER_RTT_LOCK();
    17fc:	f3ef 8311 	mrs	r3, BASEPRI
    1800:	f04f 0120 	mov.w	r1, #32
    1804:	f381 8811 	msr	BASEPRI, r1
    1808:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    180a:	9a01      	ldr	r2, [sp, #4]
    180c:	9902      	ldr	r1, [sp, #8]
    180e:	9803      	ldr	r0, [sp, #12]
    1810:	f7ff ff96 	bl	1740 <SEGGER_RTT_WriteNoLock>
    1814:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1816:	9b06      	ldr	r3, [sp, #24]
    1818:	f383 8811 	msr	BASEPRI, r3
  return Status;
    181c:	9b05      	ldr	r3, [sp, #20]
}
    181e:	4618      	mov	r0, r3
    1820:	b009      	add	sp, #36	; 0x24
    1822:	f85d fb04 	ldr.w	pc, [sp], #4
    1826:	bf00      	nop
    1828:	1fff8e80 	.word	0x1fff8e80

0000182c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    182c:	b508      	push	{r3, lr}
  _DoInit();
    182e:	f7ff fe6b 	bl	1508 <_DoInit>
}
    1832:	bf00      	nop
    1834:	bd08      	pop	{r3, pc}

00001836 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1836:	b500      	push	{lr}
    1838:	b085      	sub	sp, #20
    183a:	9001      	str	r0, [sp, #4]
    183c:	460b      	mov	r3, r1
    183e:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1842:	9b01      	ldr	r3, [sp, #4]
    1844:	689b      	ldr	r3, [r3, #8]
    1846:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1848:	9b03      	ldr	r3, [sp, #12]
    184a:	1c5a      	adds	r2, r3, #1
    184c:	9b01      	ldr	r3, [sp, #4]
    184e:	685b      	ldr	r3, [r3, #4]
    1850:	429a      	cmp	r2, r3
    1852:	d80f      	bhi.n	1874 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1854:	9b01      	ldr	r3, [sp, #4]
    1856:	681a      	ldr	r2, [r3, #0]
    1858:	9b03      	ldr	r3, [sp, #12]
    185a:	4413      	add	r3, r2
    185c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1860:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1862:	9b03      	ldr	r3, [sp, #12]
    1864:	1c5a      	adds	r2, r3, #1
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    186a:	9b01      	ldr	r3, [sp, #4]
    186c:	68db      	ldr	r3, [r3, #12]
    186e:	1c5a      	adds	r2, r3, #1
    1870:	9b01      	ldr	r3, [sp, #4]
    1872:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1874:	9b01      	ldr	r3, [sp, #4]
    1876:	689a      	ldr	r2, [r3, #8]
    1878:	9b01      	ldr	r3, [sp, #4]
    187a:	685b      	ldr	r3, [r3, #4]
    187c:	429a      	cmp	r2, r3
    187e:	d115      	bne.n	18ac <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1880:	9b01      	ldr	r3, [sp, #4]
    1882:	6918      	ldr	r0, [r3, #16]
    1884:	9b01      	ldr	r3, [sp, #4]
    1886:	6819      	ldr	r1, [r3, #0]
    1888:	9b01      	ldr	r3, [sp, #4]
    188a:	689b      	ldr	r3, [r3, #8]
    188c:	461a      	mov	r2, r3
    188e:	f7ff ffa7 	bl	17e0 <SEGGER_RTT_Write>
    1892:	4602      	mov	r2, r0
    1894:	9b01      	ldr	r3, [sp, #4]
    1896:	689b      	ldr	r3, [r3, #8]
    1898:	429a      	cmp	r2, r3
    189a:	d004      	beq.n	18a6 <_StoreChar+0x70>
      p->ReturnValue = -1;
    189c:	9b01      	ldr	r3, [sp, #4]
    189e:	f04f 32ff 	mov.w	r2, #4294967295
    18a2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    18a4:	e002      	b.n	18ac <_StoreChar+0x76>
      p->Cnt = 0u;
    18a6:	9b01      	ldr	r3, [sp, #4]
    18a8:	2200      	movs	r2, #0
    18aa:	609a      	str	r2, [r3, #8]
}
    18ac:	bf00      	nop
    18ae:	b005      	add	sp, #20
    18b0:	f85d fb04 	ldr.w	pc, [sp], #4

000018b4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    18b4:	b500      	push	{lr}
    18b6:	b08b      	sub	sp, #44	; 0x2c
    18b8:	9003      	str	r0, [sp, #12]
    18ba:	9102      	str	r1, [sp, #8]
    18bc:	9201      	str	r2, [sp, #4]
    18be:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    18c0:	9b02      	ldr	r3, [sp, #8]
    18c2:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    18c4:	2301      	movs	r3, #1
    18c6:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    18c8:	2301      	movs	r3, #1
    18ca:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    18cc:	e007      	b.n	18de <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    18ce:	9a08      	ldr	r2, [sp, #32]
    18d0:	9b01      	ldr	r3, [sp, #4]
    18d2:	fbb2 f3f3 	udiv	r3, r2, r3
    18d6:	9308      	str	r3, [sp, #32]
    Width++;
    18d8:	9b07      	ldr	r3, [sp, #28]
    18da:	3301      	adds	r3, #1
    18dc:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    18de:	9a08      	ldr	r2, [sp, #32]
    18e0:	9b01      	ldr	r3, [sp, #4]
    18e2:	429a      	cmp	r2, r3
    18e4:	d2f3      	bcs.n	18ce <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    18e6:	9a00      	ldr	r2, [sp, #0]
    18e8:	9b07      	ldr	r3, [sp, #28]
    18ea:	429a      	cmp	r2, r3
    18ec:	d901      	bls.n	18f2 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    18ee:	9b00      	ldr	r3, [sp, #0]
    18f0:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    18f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18f4:	f003 0301 	and.w	r3, r3, #1
    18f8:	2b00      	cmp	r3, #0
    18fa:	d128      	bne.n	194e <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    18fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    18fe:	2b00      	cmp	r3, #0
    1900:	d025      	beq.n	194e <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1904:	f003 0302 	and.w	r3, r3, #2
    1908:	2b00      	cmp	r3, #0
    190a:	d006      	beq.n	191a <_PrintUnsigned+0x66>
    190c:	9b00      	ldr	r3, [sp, #0]
    190e:	2b00      	cmp	r3, #0
    1910:	d103      	bne.n	191a <_PrintUnsigned+0x66>
        c = '0';
    1912:	2330      	movs	r3, #48	; 0x30
    1914:	f88d 301b 	strb.w	r3, [sp, #27]
    1918:	e002      	b.n	1920 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    191a:	2320      	movs	r3, #32
    191c:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1920:	e00c      	b.n	193c <_PrintUnsigned+0x88>
        FieldWidth--;
    1922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1924:	3b01      	subs	r3, #1
    1926:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1928:	f89d 301b 	ldrb.w	r3, [sp, #27]
    192c:	4619      	mov	r1, r3
    192e:	9803      	ldr	r0, [sp, #12]
    1930:	f7ff ff81 	bl	1836 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1934:	9b03      	ldr	r3, [sp, #12]
    1936:	68db      	ldr	r3, [r3, #12]
    1938:	2b00      	cmp	r3, #0
    193a:	db07      	blt.n	194c <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    193c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    193e:	2b00      	cmp	r3, #0
    1940:	d005      	beq.n	194e <_PrintUnsigned+0x9a>
    1942:	9a07      	ldr	r2, [sp, #28]
    1944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1946:	429a      	cmp	r2, r3
    1948:	d3eb      	bcc.n	1922 <_PrintUnsigned+0x6e>
    194a:	e000      	b.n	194e <_PrintUnsigned+0x9a>
          break;
    194c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    194e:	9b03      	ldr	r3, [sp, #12]
    1950:	68db      	ldr	r3, [r3, #12]
    1952:	2b00      	cmp	r3, #0
    1954:	db55      	blt.n	1a02 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1956:	9b00      	ldr	r3, [sp, #0]
    1958:	2b01      	cmp	r3, #1
    195a:	d903      	bls.n	1964 <_PrintUnsigned+0xb0>
        NumDigits--;
    195c:	9b00      	ldr	r3, [sp, #0]
    195e:	3b01      	subs	r3, #1
    1960:	9300      	str	r3, [sp, #0]
    1962:	e009      	b.n	1978 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1964:	9a02      	ldr	r2, [sp, #8]
    1966:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1968:	fbb2 f3f3 	udiv	r3, r2, r3
    196c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    196e:	9a05      	ldr	r2, [sp, #20]
    1970:	9b01      	ldr	r3, [sp, #4]
    1972:	429a      	cmp	r2, r3
    1974:	d200      	bcs.n	1978 <_PrintUnsigned+0xc4>
          break;
    1976:	e005      	b.n	1984 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1978:	9b09      	ldr	r3, [sp, #36]	; 0x24
    197a:	9a01      	ldr	r2, [sp, #4]
    197c:	fb02 f303 	mul.w	r3, r2, r3
    1980:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1982:	e7e8      	b.n	1956 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1984:	9a02      	ldr	r2, [sp, #8]
    1986:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1988:	fbb2 f3f3 	udiv	r3, r2, r3
    198c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    198e:	9b05      	ldr	r3, [sp, #20]
    1990:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1992:	fb02 f303 	mul.w	r3, r2, r3
    1996:	9a02      	ldr	r2, [sp, #8]
    1998:	1ad3      	subs	r3, r2, r3
    199a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    199c:	4a1b      	ldr	r2, [pc, #108]	; (1a0c <_PrintUnsigned+0x158>)
    199e:	9b05      	ldr	r3, [sp, #20]
    19a0:	4413      	add	r3, r2
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	4619      	mov	r1, r3
    19a6:	9803      	ldr	r0, [sp, #12]
    19a8:	f7ff ff45 	bl	1836 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    19ac:	9b03      	ldr	r3, [sp, #12]
    19ae:	68db      	ldr	r3, [r3, #12]
    19b0:	2b00      	cmp	r3, #0
    19b2:	db08      	blt.n	19c6 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    19b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19b6:	9b01      	ldr	r3, [sp, #4]
    19b8:	fbb2 f3f3 	udiv	r3, r2, r3
    19bc:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    19be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19c0:	2b00      	cmp	r3, #0
    19c2:	d1df      	bne.n	1984 <_PrintUnsigned+0xd0>
    19c4:	e000      	b.n	19c8 <_PrintUnsigned+0x114>
        break;
    19c6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    19c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    19ca:	f003 0301 	and.w	r3, r3, #1
    19ce:	2b00      	cmp	r3, #0
    19d0:	d017      	beq.n	1a02 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    19d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19d4:	2b00      	cmp	r3, #0
    19d6:	d014      	beq.n	1a02 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    19d8:	e00a      	b.n	19f0 <_PrintUnsigned+0x13c>
          FieldWidth--;
    19da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19dc:	3b01      	subs	r3, #1
    19de:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    19e0:	2120      	movs	r1, #32
    19e2:	9803      	ldr	r0, [sp, #12]
    19e4:	f7ff ff27 	bl	1836 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    19e8:	9b03      	ldr	r3, [sp, #12]
    19ea:	68db      	ldr	r3, [r3, #12]
    19ec:	2b00      	cmp	r3, #0
    19ee:	db07      	blt.n	1a00 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    19f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19f2:	2b00      	cmp	r3, #0
    19f4:	d005      	beq.n	1a02 <_PrintUnsigned+0x14e>
    19f6:	9a07      	ldr	r2, [sp, #28]
    19f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19fa:	429a      	cmp	r2, r3
    19fc:	d3ed      	bcc.n	19da <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    19fe:	e000      	b.n	1a02 <_PrintUnsigned+0x14e>
            break;
    1a00:	bf00      	nop
}
    1a02:	bf00      	nop
    1a04:	b00b      	add	sp, #44	; 0x2c
    1a06:	f85d fb04 	ldr.w	pc, [sp], #4
    1a0a:	bf00      	nop
    1a0c:	00009658 	.word	0x00009658

00001a10 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1a10:	b500      	push	{lr}
    1a12:	b089      	sub	sp, #36	; 0x24
    1a14:	9005      	str	r0, [sp, #20]
    1a16:	9104      	str	r1, [sp, #16]
    1a18:	9203      	str	r2, [sp, #12]
    1a1a:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1a1c:	9b04      	ldr	r3, [sp, #16]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	bfb8      	it	lt
    1a22:	425b      	neglt	r3, r3
    1a24:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1a26:	2301      	movs	r3, #1
    1a28:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1a2a:	e007      	b.n	1a3c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1a2c:	9b03      	ldr	r3, [sp, #12]
    1a2e:	9a06      	ldr	r2, [sp, #24]
    1a30:	fb92 f3f3 	sdiv	r3, r2, r3
    1a34:	9306      	str	r3, [sp, #24]
    Width++;
    1a36:	9b07      	ldr	r3, [sp, #28]
    1a38:	3301      	adds	r3, #1
    1a3a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1a3c:	9b03      	ldr	r3, [sp, #12]
    1a3e:	9a06      	ldr	r2, [sp, #24]
    1a40:	429a      	cmp	r2, r3
    1a42:	daf3      	bge.n	1a2c <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1a44:	9a02      	ldr	r2, [sp, #8]
    1a46:	9b07      	ldr	r3, [sp, #28]
    1a48:	429a      	cmp	r2, r3
    1a4a:	d901      	bls.n	1a50 <_PrintInt+0x40>
    Width = NumDigits;
    1a4c:	9b02      	ldr	r3, [sp, #8]
    1a4e:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a52:	2b00      	cmp	r3, #0
    1a54:	d00a      	beq.n	1a6c <_PrintInt+0x5c>
    1a56:	9b04      	ldr	r3, [sp, #16]
    1a58:	2b00      	cmp	r3, #0
    1a5a:	db04      	blt.n	1a66 <_PrintInt+0x56>
    1a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a5e:	f003 0304 	and.w	r3, r3, #4
    1a62:	2b00      	cmp	r3, #0
    1a64:	d002      	beq.n	1a6c <_PrintInt+0x5c>
    FieldWidth--;
    1a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a68:	3b01      	subs	r3, #1
    1a6a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a6e:	f003 0302 	and.w	r3, r3, #2
    1a72:	2b00      	cmp	r3, #0
    1a74:	d002      	beq.n	1a7c <_PrintInt+0x6c>
    1a76:	9b02      	ldr	r3, [sp, #8]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d01c      	beq.n	1ab6 <_PrintInt+0xa6>
    1a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a7e:	f003 0301 	and.w	r3, r3, #1
    1a82:	2b00      	cmp	r3, #0
    1a84:	d117      	bne.n	1ab6 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d014      	beq.n	1ab6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1a8c:	e00a      	b.n	1aa4 <_PrintInt+0x94>
        FieldWidth--;
    1a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a90:	3b01      	subs	r3, #1
    1a92:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1a94:	2120      	movs	r1, #32
    1a96:	9805      	ldr	r0, [sp, #20]
    1a98:	f7ff fecd 	bl	1836 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1a9c:	9b05      	ldr	r3, [sp, #20]
    1a9e:	68db      	ldr	r3, [r3, #12]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	db07      	blt.n	1ab4 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d005      	beq.n	1ab6 <_PrintInt+0xa6>
    1aaa:	9a07      	ldr	r2, [sp, #28]
    1aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1aae:	429a      	cmp	r2, r3
    1ab0:	d3ed      	bcc.n	1a8e <_PrintInt+0x7e>
    1ab2:	e000      	b.n	1ab6 <_PrintInt+0xa6>
          break;
    1ab4:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1ab6:	9b05      	ldr	r3, [sp, #20]
    1ab8:	68db      	ldr	r3, [r3, #12]
    1aba:	2b00      	cmp	r3, #0
    1abc:	db4a      	blt.n	1b54 <_PrintInt+0x144>
    if (v < 0) {
    1abe:	9b04      	ldr	r3, [sp, #16]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	da07      	bge.n	1ad4 <_PrintInt+0xc4>
      v = -v;
    1ac4:	9b04      	ldr	r3, [sp, #16]
    1ac6:	425b      	negs	r3, r3
    1ac8:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1aca:	212d      	movs	r1, #45	; 0x2d
    1acc:	9805      	ldr	r0, [sp, #20]
    1ace:	f7ff feb2 	bl	1836 <_StoreChar>
    1ad2:	e008      	b.n	1ae6 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ad6:	f003 0304 	and.w	r3, r3, #4
    1ada:	2b00      	cmp	r3, #0
    1adc:	d003      	beq.n	1ae6 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1ade:	212b      	movs	r1, #43	; 0x2b
    1ae0:	9805      	ldr	r0, [sp, #20]
    1ae2:	f7ff fea8 	bl	1836 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1ae6:	9b05      	ldr	r3, [sp, #20]
    1ae8:	68db      	ldr	r3, [r3, #12]
    1aea:	2b00      	cmp	r3, #0
    1aec:	db32      	blt.n	1b54 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1af0:	f003 0302 	and.w	r3, r3, #2
    1af4:	2b00      	cmp	r3, #0
    1af6:	d01f      	beq.n	1b38 <_PrintInt+0x128>
    1af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1afa:	f003 0301 	and.w	r3, r3, #1
    1afe:	2b00      	cmp	r3, #0
    1b00:	d11a      	bne.n	1b38 <_PrintInt+0x128>
    1b02:	9b02      	ldr	r3, [sp, #8]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d117      	bne.n	1b38 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d014      	beq.n	1b38 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1b0e:	e00a      	b.n	1b26 <_PrintInt+0x116>
            FieldWidth--;
    1b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b12:	3b01      	subs	r3, #1
    1b14:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1b16:	2130      	movs	r1, #48	; 0x30
    1b18:	9805      	ldr	r0, [sp, #20]
    1b1a:	f7ff fe8c 	bl	1836 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1b1e:	9b05      	ldr	r3, [sp, #20]
    1b20:	68db      	ldr	r3, [r3, #12]
    1b22:	2b00      	cmp	r3, #0
    1b24:	db07      	blt.n	1b36 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d005      	beq.n	1b38 <_PrintInt+0x128>
    1b2c:	9a07      	ldr	r2, [sp, #28]
    1b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b30:	429a      	cmp	r2, r3
    1b32:	d3ed      	bcc.n	1b10 <_PrintInt+0x100>
    1b34:	e000      	b.n	1b38 <_PrintInt+0x128>
              break;
    1b36:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1b38:	9b05      	ldr	r3, [sp, #20]
    1b3a:	68db      	ldr	r3, [r3, #12]
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	db09      	blt.n	1b54 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1b40:	9904      	ldr	r1, [sp, #16]
    1b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b44:	9301      	str	r3, [sp, #4]
    1b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b48:	9300      	str	r3, [sp, #0]
    1b4a:	9b02      	ldr	r3, [sp, #8]
    1b4c:	9a03      	ldr	r2, [sp, #12]
    1b4e:	9805      	ldr	r0, [sp, #20]
    1b50:	f7ff feb0 	bl	18b4 <_PrintUnsigned>
      }
    }
  }
}
    1b54:	bf00      	nop
    1b56:	b009      	add	sp, #36	; 0x24
    1b58:	f85d fb04 	ldr.w	pc, [sp], #4

00001b5c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1b5c:	b500      	push	{lr}
    1b5e:	b0a3      	sub	sp, #140	; 0x8c
    1b60:	9005      	str	r0, [sp, #20]
    1b62:	9104      	str	r1, [sp, #16]
    1b64:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1b66:	ab06      	add	r3, sp, #24
    1b68:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1b6a:	2340      	movs	r3, #64	; 0x40
    1b6c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1b6e:	2300      	movs	r3, #0
    1b70:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1b72:	9b05      	ldr	r3, [sp, #20]
    1b74:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1b76:	2300      	movs	r3, #0
    1b78:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1b7a:	9b04      	ldr	r3, [sp, #16]
    1b7c:	781b      	ldrb	r3, [r3, #0]
    1b7e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1b82:	9b04      	ldr	r3, [sp, #16]
    1b84:	3301      	adds	r3, #1
    1b86:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1b88:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	f000 819c 	beq.w	1eca <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1b92:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1b96:	2b25      	cmp	r3, #37	; 0x25
    1b98:	f040 818b 	bne.w	1eb2 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1b9c:	2300      	movs	r3, #0
    1b9e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1ba0:	2301      	movs	r3, #1
    1ba2:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1ba4:	9b04      	ldr	r3, [sp, #16]
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1bac:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1bb0:	3b23      	subs	r3, #35	; 0x23
    1bb2:	2b0d      	cmp	r3, #13
    1bb4:	d83e      	bhi.n	1c34 <SEGGER_RTT_vprintf+0xd8>
    1bb6:	a201      	add	r2, pc, #4	; (adr r2, 1bbc <SEGGER_RTT_vprintf+0x60>)
    1bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1bbc:	00001c25 	.word	0x00001c25
    1bc0:	00001c35 	.word	0x00001c35
    1bc4:	00001c35 	.word	0x00001c35
    1bc8:	00001c35 	.word	0x00001c35
    1bcc:	00001c35 	.word	0x00001c35
    1bd0:	00001c35 	.word	0x00001c35
    1bd4:	00001c35 	.word	0x00001c35
    1bd8:	00001c35 	.word	0x00001c35
    1bdc:	00001c15 	.word	0x00001c15
    1be0:	00001c35 	.word	0x00001c35
    1be4:	00001bf5 	.word	0x00001bf5
    1be8:	00001c35 	.word	0x00001c35
    1bec:	00001c35 	.word	0x00001c35
    1bf0:	00001c05 	.word	0x00001c05
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1bf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1bf6:	f043 0301 	orr.w	r3, r3, #1
    1bfa:	931e      	str	r3, [sp, #120]	; 0x78
    1bfc:	9b04      	ldr	r3, [sp, #16]
    1bfe:	3301      	adds	r3, #1
    1c00:	9304      	str	r3, [sp, #16]
    1c02:	e01a      	b.n	1c3a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1c04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1c06:	f043 0302 	orr.w	r3, r3, #2
    1c0a:	931e      	str	r3, [sp, #120]	; 0x78
    1c0c:	9b04      	ldr	r3, [sp, #16]
    1c0e:	3301      	adds	r3, #1
    1c10:	9304      	str	r3, [sp, #16]
    1c12:	e012      	b.n	1c3a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1c14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1c16:	f043 0304 	orr.w	r3, r3, #4
    1c1a:	931e      	str	r3, [sp, #120]	; 0x78
    1c1c:	9b04      	ldr	r3, [sp, #16]
    1c1e:	3301      	adds	r3, #1
    1c20:	9304      	str	r3, [sp, #16]
    1c22:	e00a      	b.n	1c3a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1c24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1c26:	f043 0308 	orr.w	r3, r3, #8
    1c2a:	931e      	str	r3, [sp, #120]	; 0x78
    1c2c:	9b04      	ldr	r3, [sp, #16]
    1c2e:	3301      	adds	r3, #1
    1c30:	9304      	str	r3, [sp, #16]
    1c32:	e002      	b.n	1c3a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1c34:	2300      	movs	r3, #0
    1c36:	9320      	str	r3, [sp, #128]	; 0x80
    1c38:	bf00      	nop
        }
      } while (v);
    1c3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d1b1      	bne.n	1ba4 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1c40:	2300      	movs	r3, #0
    1c42:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1c44:	9b04      	ldr	r3, [sp, #16]
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1c4c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c50:	2b2f      	cmp	r3, #47	; 0x2f
    1c52:	d912      	bls.n	1c7a <SEGGER_RTT_vprintf+0x11e>
    1c54:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c58:	2b39      	cmp	r3, #57	; 0x39
    1c5a:	d80e      	bhi.n	1c7a <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1c5c:	9b04      	ldr	r3, [sp, #16]
    1c5e:	3301      	adds	r3, #1
    1c60:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1c62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1c64:	4613      	mov	r3, r2
    1c66:	009b      	lsls	r3, r3, #2
    1c68:	4413      	add	r3, r2
    1c6a:	005b      	lsls	r3, r3, #1
    1c6c:	461a      	mov	r2, r3
    1c6e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c72:	4413      	add	r3, r2
    1c74:	3b30      	subs	r3, #48	; 0x30
    1c76:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1c78:	e7e4      	b.n	1c44 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1c7a:	2300      	movs	r3, #0
    1c7c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1c7e:	9b04      	ldr	r3, [sp, #16]
    1c80:	781b      	ldrb	r3, [r3, #0]
    1c82:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1c86:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1c8a:	2b2e      	cmp	r3, #46	; 0x2e
    1c8c:	d11d      	bne.n	1cca <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1c8e:	9b04      	ldr	r3, [sp, #16]
    1c90:	3301      	adds	r3, #1
    1c92:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1c94:	9b04      	ldr	r3, [sp, #16]
    1c96:	781b      	ldrb	r3, [r3, #0]
    1c98:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1c9c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ca0:	2b2f      	cmp	r3, #47	; 0x2f
    1ca2:	d912      	bls.n	1cca <SEGGER_RTT_vprintf+0x16e>
    1ca4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ca8:	2b39      	cmp	r3, #57	; 0x39
    1caa:	d80e      	bhi.n	1cca <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1cac:	9b04      	ldr	r3, [sp, #16]
    1cae:	3301      	adds	r3, #1
    1cb0:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1cb2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1cb4:	4613      	mov	r3, r2
    1cb6:	009b      	lsls	r3, r3, #2
    1cb8:	4413      	add	r3, r2
    1cba:	005b      	lsls	r3, r3, #1
    1cbc:	461a      	mov	r2, r3
    1cbe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1cc2:	4413      	add	r3, r2
    1cc4:	3b30      	subs	r3, #48	; 0x30
    1cc6:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1cc8:	e7e4      	b.n	1c94 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1cca:	9b04      	ldr	r3, [sp, #16]
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1cd2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1cd6:	2b6c      	cmp	r3, #108	; 0x6c
    1cd8:	d003      	beq.n	1ce2 <SEGGER_RTT_vprintf+0x186>
    1cda:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1cde:	2b68      	cmp	r3, #104	; 0x68
    1ce0:	d107      	bne.n	1cf2 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1ce2:	9b04      	ldr	r3, [sp, #16]
    1ce4:	3301      	adds	r3, #1
    1ce6:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1ce8:	9b04      	ldr	r3, [sp, #16]
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1cf0:	e7ef      	b.n	1cd2 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1cf2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1cf6:	2b25      	cmp	r3, #37	; 0x25
    1cf8:	f000 80d0 	beq.w	1e9c <SEGGER_RTT_vprintf+0x340>
    1cfc:	2b25      	cmp	r3, #37	; 0x25
    1cfe:	f2c0 80d3 	blt.w	1ea8 <SEGGER_RTT_vprintf+0x34c>
    1d02:	2b78      	cmp	r3, #120	; 0x78
    1d04:	f300 80d0 	bgt.w	1ea8 <SEGGER_RTT_vprintf+0x34c>
    1d08:	2b58      	cmp	r3, #88	; 0x58
    1d0a:	f2c0 80cd 	blt.w	1ea8 <SEGGER_RTT_vprintf+0x34c>
    1d0e:	3b58      	subs	r3, #88	; 0x58
    1d10:	2b20      	cmp	r3, #32
    1d12:	f200 80c9 	bhi.w	1ea8 <SEGGER_RTT_vprintf+0x34c>
    1d16:	a201      	add	r2, pc, #4	; (adr r2, 1d1c <SEGGER_RTT_vprintf+0x1c0>)
    1d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d1c:	00001e0d 	.word	0x00001e0d
    1d20:	00001ea9 	.word	0x00001ea9
    1d24:	00001ea9 	.word	0x00001ea9
    1d28:	00001ea9 	.word	0x00001ea9
    1d2c:	00001ea9 	.word	0x00001ea9
    1d30:	00001ea9 	.word	0x00001ea9
    1d34:	00001ea9 	.word	0x00001ea9
    1d38:	00001ea9 	.word	0x00001ea9
    1d3c:	00001ea9 	.word	0x00001ea9
    1d40:	00001ea9 	.word	0x00001ea9
    1d44:	00001ea9 	.word	0x00001ea9
    1d48:	00001da1 	.word	0x00001da1
    1d4c:	00001dc5 	.word	0x00001dc5
    1d50:	00001ea9 	.word	0x00001ea9
    1d54:	00001ea9 	.word	0x00001ea9
    1d58:	00001ea9 	.word	0x00001ea9
    1d5c:	00001ea9 	.word	0x00001ea9
    1d60:	00001ea9 	.word	0x00001ea9
    1d64:	00001ea9 	.word	0x00001ea9
    1d68:	00001ea9 	.word	0x00001ea9
    1d6c:	00001ea9 	.word	0x00001ea9
    1d70:	00001ea9 	.word	0x00001ea9
    1d74:	00001ea9 	.word	0x00001ea9
    1d78:	00001ea9 	.word	0x00001ea9
    1d7c:	00001e79 	.word	0x00001e79
    1d80:	00001ea9 	.word	0x00001ea9
    1d84:	00001ea9 	.word	0x00001ea9
    1d88:	00001e31 	.word	0x00001e31
    1d8c:	00001ea9 	.word	0x00001ea9
    1d90:	00001de9 	.word	0x00001de9
    1d94:	00001ea9 	.word	0x00001ea9
    1d98:	00001ea9 	.word	0x00001ea9
    1d9c:	00001e0d 	.word	0x00001e0d
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1da0:	9b03      	ldr	r3, [sp, #12]
    1da2:	681b      	ldr	r3, [r3, #0]
    1da4:	1d19      	adds	r1, r3, #4
    1da6:	9a03      	ldr	r2, [sp, #12]
    1da8:	6011      	str	r1, [r2, #0]
    1daa:	681b      	ldr	r3, [r3, #0]
    1dac:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1dae:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1db0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1db4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1db8:	ab16      	add	r3, sp, #88	; 0x58
    1dba:	4611      	mov	r1, r2
    1dbc:	4618      	mov	r0, r3
    1dbe:	f7ff fd3a 	bl	1836 <_StoreChar>
        break;
    1dc2:	e072      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1dc4:	9b03      	ldr	r3, [sp, #12]
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	1d19      	adds	r1, r3, #4
    1dca:	9a03      	ldr	r2, [sp, #12]
    1dcc:	6011      	str	r1, [r2, #0]
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1dd2:	a816      	add	r0, sp, #88	; 0x58
    1dd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1dd6:	9301      	str	r3, [sp, #4]
    1dd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1dda:	9300      	str	r3, [sp, #0]
    1ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1dde:	220a      	movs	r2, #10
    1de0:	9920      	ldr	r1, [sp, #128]	; 0x80
    1de2:	f7ff fe15 	bl	1a10 <_PrintInt>
        break;
    1de6:	e060      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1de8:	9b03      	ldr	r3, [sp, #12]
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	1d19      	adds	r1, r3, #4
    1dee:	9a03      	ldr	r2, [sp, #12]
    1df0:	6011      	str	r1, [r2, #0]
    1df2:	681b      	ldr	r3, [r3, #0]
    1df4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1df6:	9920      	ldr	r1, [sp, #128]	; 0x80
    1df8:	a816      	add	r0, sp, #88	; 0x58
    1dfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1dfc:	9301      	str	r3, [sp, #4]
    1dfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1e00:	9300      	str	r3, [sp, #0]
    1e02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1e04:	220a      	movs	r2, #10
    1e06:	f7ff fd55 	bl	18b4 <_PrintUnsigned>
        break;
    1e0a:	e04e      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1e0c:	9b03      	ldr	r3, [sp, #12]
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	1d19      	adds	r1, r3, #4
    1e12:	9a03      	ldr	r2, [sp, #12]
    1e14:	6011      	str	r1, [r2, #0]
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1e1a:	9920      	ldr	r1, [sp, #128]	; 0x80
    1e1c:	a816      	add	r0, sp, #88	; 0x58
    1e1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1e20:	9301      	str	r3, [sp, #4]
    1e22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1e24:	9300      	str	r3, [sp, #0]
    1e26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1e28:	2210      	movs	r2, #16
    1e2a:	f7ff fd43 	bl	18b4 <_PrintUnsigned>
        break;
    1e2e:	e03c      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1e30:	9b03      	ldr	r3, [sp, #12]
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	1d19      	adds	r1, r3, #4
    1e36:	9a03      	ldr	r2, [sp, #12]
    1e38:	6011      	str	r1, [r2, #0]
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1e3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1e40:	2b00      	cmp	r3, #0
    1e42:	d101      	bne.n	1e48 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1e44:	4b2c      	ldr	r3, [pc, #176]	; (1ef8 <SEGGER_RTT_vprintf+0x39c>)
    1e46:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1e48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1e4a:	781b      	ldrb	r3, [r3, #0]
    1e4c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1e50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1e52:	3301      	adds	r3, #1
    1e54:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1e56:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d00a      	beq.n	1e74 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1e5e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1e62:	ab16      	add	r3, sp, #88	; 0x58
    1e64:	4611      	mov	r1, r2
    1e66:	4618      	mov	r0, r3
    1e68:	f7ff fce5 	bl	1836 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1e6e:	2b00      	cmp	r3, #0
    1e70:	daea      	bge.n	1e48 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1e72:	e01a      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
              break;
    1e74:	bf00      	nop
        break;
    1e76:	e018      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1e78:	9b03      	ldr	r3, [sp, #12]
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	1d19      	adds	r1, r3, #4
    1e7e:	9a03      	ldr	r2, [sp, #12]
    1e80:	6011      	str	r1, [r2, #0]
    1e82:	681b      	ldr	r3, [r3, #0]
    1e84:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1e86:	9920      	ldr	r1, [sp, #128]	; 0x80
    1e88:	a816      	add	r0, sp, #88	; 0x58
    1e8a:	2300      	movs	r3, #0
    1e8c:	9301      	str	r3, [sp, #4]
    1e8e:	2308      	movs	r3, #8
    1e90:	9300      	str	r3, [sp, #0]
    1e92:	2308      	movs	r3, #8
    1e94:	2210      	movs	r2, #16
    1e96:	f7ff fd0d 	bl	18b4 <_PrintUnsigned>
        break;
    1e9a:	e006      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1e9c:	ab16      	add	r3, sp, #88	; 0x58
    1e9e:	2125      	movs	r1, #37	; 0x25
    1ea0:	4618      	mov	r0, r3
    1ea2:	f7ff fcc8 	bl	1836 <_StoreChar>
        break;
    1ea6:	e000      	b.n	1eaa <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1ea8:	bf00      	nop
      }
      sFormat++;
    1eaa:	9b04      	ldr	r3, [sp, #16]
    1eac:	3301      	adds	r3, #1
    1eae:	9304      	str	r3, [sp, #16]
    1eb0:	e006      	b.n	1ec0 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1eb2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1eb6:	ab16      	add	r3, sp, #88	; 0x58
    1eb8:	4611      	mov	r1, r2
    1eba:	4618      	mov	r0, r3
    1ebc:	f7ff fcbb 	bl	1836 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1ec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	f6bf ae59 	bge.w	1b7a <SEGGER_RTT_vprintf+0x1e>
    1ec8:	e000      	b.n	1ecc <SEGGER_RTT_vprintf+0x370>
      break;
    1eca:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1ece:	2b00      	cmp	r3, #0
    1ed0:	dd0c      	ble.n	1eec <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1ed2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d005      	beq.n	1ee4 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1ed8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1eda:	ab06      	add	r3, sp, #24
    1edc:	4619      	mov	r1, r3
    1ede:	9805      	ldr	r0, [sp, #20]
    1ee0:	f7ff fc7e 	bl	17e0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1ee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1ee6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ee8:	4413      	add	r3, r2
    1eea:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1eec:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1eee:	4618      	mov	r0, r3
    1ef0:	b023      	add	sp, #140	; 0x8c
    1ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    1ef6:	bf00      	nop
    1ef8:	00008754 	.word	0x00008754

00001efc <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1efc:	b40e      	push	{r1, r2, r3}
    1efe:	b500      	push	{lr}
    1f00:	b084      	sub	sp, #16
    1f02:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1f04:	ab06      	add	r3, sp, #24
    1f06:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1f08:	ab02      	add	r3, sp, #8
    1f0a:	461a      	mov	r2, r3
    1f0c:	9905      	ldr	r1, [sp, #20]
    1f0e:	9801      	ldr	r0, [sp, #4]
    1f10:	f7ff fe24 	bl	1b5c <SEGGER_RTT_vprintf>
    1f14:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1f16:	9b03      	ldr	r3, [sp, #12]
}
    1f18:	4618      	mov	r0, r3
    1f1a:	b004      	add	sp, #16
    1f1c:	f85d eb04 	ldr.w	lr, [sp], #4
    1f20:	b003      	add	sp, #12
    1f22:	4770      	bx	lr

00001f24 <memcpy>:
    1f24:	440a      	add	r2, r1
    1f26:	4291      	cmp	r1, r2
    1f28:	f100 33ff 	add.w	r3, r0, #4294967295
    1f2c:	d100      	bne.n	1f30 <memcpy+0xc>
    1f2e:	4770      	bx	lr
    1f30:	b510      	push	{r4, lr}
    1f32:	f811 4b01 	ldrb.w	r4, [r1], #1
    1f36:	f803 4f01 	strb.w	r4, [r3, #1]!
    1f3a:	4291      	cmp	r1, r2
    1f3c:	d1f9      	bne.n	1f32 <memcpy+0xe>
    1f3e:	bd10      	pop	{r4, pc}

00001f40 <memset>:
    1f40:	4402      	add	r2, r0
    1f42:	4603      	mov	r3, r0
    1f44:	4293      	cmp	r3, r2
    1f46:	d100      	bne.n	1f4a <memset+0xa>
    1f48:	4770      	bx	lr
    1f4a:	f803 1b01 	strb.w	r1, [r3], #1
    1f4e:	e7f9      	b.n	1f44 <memset+0x4>

00001f50 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1f50:	2300      	movs	r3, #0
}
    1f52:	4618      	mov	r0, r3
    1f54:	4770      	bx	lr

00001f56 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1f56:	b082      	sub	sp, #8
    1f58:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1f5a:	2301      	movs	r3, #1
}
    1f5c:	4618      	mov	r0, r3
    1f5e:	b002      	add	sp, #8
    1f60:	4770      	bx	lr

00001f62 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1f62:	b082      	sub	sp, #8
    1f64:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1f66:	bf00      	nop
    1f68:	b002      	add	sp, #8
    1f6a:	4770      	bx	lr

00001f6c <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1f6c:	b082      	sub	sp, #8
    1f6e:	9001      	str	r0, [sp, #4]
    return Micros;
    1f70:	9b01      	ldr	r3, [sp, #4]
}
    1f72:	4618      	mov	r0, r3
    1f74:	b002      	add	sp, #8
    1f76:	4770      	bx	lr

00001f78 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1f78:	b500      	push	{lr}
    1f7a:	b083      	sub	sp, #12
    1f7c:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1f7e:	f000 f86d 	bl	205c <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1f82:	bf00      	nop
    1f84:	b003      	add	sp, #12
    1f86:	f85d fb04 	ldr.w	pc, [sp], #4

00001f8a <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1f8a:	b500      	push	{lr}
    1f8c:	b085      	sub	sp, #20
    1f8e:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1f90:	2300      	movs	r3, #0
    1f92:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1f94:	9b01      	ldr	r3, [sp, #4]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d003      	beq.n	1fa2 <OsIf_GetCounter+0x18>
    1f9a:	9b01      	ldr	r3, [sp, #4]
    1f9c:	2b01      	cmp	r3, #1
    1f9e:	d004      	beq.n	1faa <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1fa0:	e007      	b.n	1fb2 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1fa2:	f7ff ffd5 	bl	1f50 <OsIf_Timer_Dummy_GetCounter>
    1fa6:	9003      	str	r0, [sp, #12]
            break;
    1fa8:	e003      	b.n	1fb2 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1faa:	f000 f873 	bl	2094 <OsIf_Timer_System_GetCounter>
    1fae:	9003      	str	r0, [sp, #12]
            break;
    1fb0:	bf00      	nop
    }

    return Value;
    1fb2:	9b03      	ldr	r3, [sp, #12]
}
    1fb4:	4618      	mov	r0, r3
    1fb6:	b005      	add	sp, #20
    1fb8:	f85d fb04 	ldr.w	pc, [sp], #4

00001fbc <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1fbc:	b500      	push	{lr}
    1fbe:	b085      	sub	sp, #20
    1fc0:	9001      	str	r0, [sp, #4]
    1fc2:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1fc4:	2300      	movs	r3, #0
    1fc6:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1fc8:	9b00      	ldr	r3, [sp, #0]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d003      	beq.n	1fd6 <OsIf_GetElapsed+0x1a>
    1fce:	9b00      	ldr	r3, [sp, #0]
    1fd0:	2b01      	cmp	r3, #1
    1fd2:	d005      	beq.n	1fe0 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1fd4:	e009      	b.n	1fea <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1fd6:	9801      	ldr	r0, [sp, #4]
    1fd8:	f7ff ffbd 	bl	1f56 <OsIf_Timer_Dummy_GetElapsed>
    1fdc:	9003      	str	r0, [sp, #12]
            break;
    1fde:	e004      	b.n	1fea <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1fe0:	9801      	ldr	r0, [sp, #4]
    1fe2:	f000 f865 	bl	20b0 <OsIf_Timer_System_GetElapsed>
    1fe6:	9003      	str	r0, [sp, #12]
            break;
    1fe8:	bf00      	nop
    }

    return Value;
    1fea:	9b03      	ldr	r3, [sp, #12]
}
    1fec:	4618      	mov	r0, r3
    1fee:	b005      	add	sp, #20
    1ff0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ff4 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1ff4:	b500      	push	{lr}
    1ff6:	b083      	sub	sp, #12
    1ff8:	9001      	str	r0, [sp, #4]
    1ffa:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1ffc:	9b00      	ldr	r3, [sp, #0]
    1ffe:	2b00      	cmp	r3, #0
    2000:	d003      	beq.n	200a <OsIf_SetTimerFrequency+0x16>
    2002:	9b00      	ldr	r3, [sp, #0]
    2004:	2b01      	cmp	r3, #1
    2006:	d004      	beq.n	2012 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2008:	e007      	b.n	201a <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    200a:	9801      	ldr	r0, [sp, #4]
    200c:	f7ff ffa9 	bl	1f62 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2010:	e003      	b.n	201a <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2012:	9801      	ldr	r0, [sp, #4]
    2014:	f000 f85c 	bl	20d0 <OsIf_Timer_System_SetTimerFrequency>
            break;
    2018:	bf00      	nop
    }
}
    201a:	bf00      	nop
    201c:	b003      	add	sp, #12
    201e:	f85d fb04 	ldr.w	pc, [sp], #4

00002022 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2022:	b500      	push	{lr}
    2024:	b085      	sub	sp, #20
    2026:	9001      	str	r0, [sp, #4]
    2028:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    202a:	2300      	movs	r3, #0
    202c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    202e:	9b00      	ldr	r3, [sp, #0]
    2030:	2b00      	cmp	r3, #0
    2032:	d003      	beq.n	203c <OsIf_MicrosToTicks+0x1a>
    2034:	9b00      	ldr	r3, [sp, #0]
    2036:	2b01      	cmp	r3, #1
    2038:	d005      	beq.n	2046 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    203a:	e009      	b.n	2050 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    203c:	9801      	ldr	r0, [sp, #4]
    203e:	f7ff ff95 	bl	1f6c <OsIf_Timer_Dummy_MicrosToTicks>
    2042:	9003      	str	r0, [sp, #12]
            break;
    2044:	e004      	b.n	2050 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2046:	9801      	ldr	r0, [sp, #4]
    2048:	f000 f850 	bl	20ec <OsIf_Timer_System_MicrosToTicks>
    204c:	9003      	str	r0, [sp, #12]
            break;
    204e:	bf00      	nop
    }

    return Value;
    2050:	9b03      	ldr	r3, [sp, #12]
}
    2052:	4618      	mov	r0, r3
    2054:	b005      	add	sp, #20
    2056:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000205c <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    205c:	b500      	push	{lr}
    205e:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2060:	2300      	movs	r3, #0
    2062:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2064:	4a09      	ldr	r2, [pc, #36]	; (208c <OsIf_Timer_System_Init+0x30>)
    2066:	9b01      	ldr	r3, [sp, #4]
    2068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    206c:	685a      	ldr	r2, [r3, #4]
    206e:	4908      	ldr	r1, [pc, #32]	; (2090 <OsIf_Timer_System_Init+0x34>)
    2070:	9b01      	ldr	r3, [sp, #4]
    2072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2076:	4a06      	ldr	r2, [pc, #24]	; (2090 <OsIf_Timer_System_Init+0x34>)
    2078:	9b01      	ldr	r3, [sp, #4]
    207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    207e:	4618      	mov	r0, r3
    2080:	f000 f868 	bl	2154 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2084:	bf00      	nop
    2086:	b003      	add	sp, #12
    2088:	f85d fb04 	ldr.w	pc, [sp], #4
    208c:	000093c8 	.word	0x000093c8
    2090:	1fff8b40 	.word	0x1fff8b40

00002094 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2094:	b500      	push	{lr}
    2096:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2098:	2300      	movs	r3, #0
    209a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    209c:	2300      	movs	r3, #0
    209e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    20a0:	f000 f86c 	bl	217c <OsIf_Timer_System_Internal_GetCounter>
    20a4:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    20a6:	9b01      	ldr	r3, [sp, #4]
}
    20a8:	4618      	mov	r0, r3
    20aa:	b003      	add	sp, #12
    20ac:	f85d fb04 	ldr.w	pc, [sp], #4

000020b0 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    20b0:	b500      	push	{lr}
    20b2:	b085      	sub	sp, #20
    20b4:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    20b6:	2300      	movs	r3, #0
    20b8:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    20ba:	2300      	movs	r3, #0
    20bc:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    20be:	9801      	ldr	r0, [sp, #4]
    20c0:	f000 f864 	bl	218c <OsIf_Timer_System_Internal_GetElapsed>
    20c4:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    20c6:	9b03      	ldr	r3, [sp, #12]
}
    20c8:	4618      	mov	r0, r3
    20ca:	b005      	add	sp, #20
    20cc:	f85d fb04 	ldr.w	pc, [sp], #4

000020d0 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    20d0:	b084      	sub	sp, #16
    20d2:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    20d4:	2300      	movs	r3, #0
    20d6:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    20d8:	4903      	ldr	r1, [pc, #12]	; (20e8 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    20da:	9b03      	ldr	r3, [sp, #12]
    20dc:	9a01      	ldr	r2, [sp, #4]
    20de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    20e2:	bf00      	nop
    20e4:	b004      	add	sp, #16
    20e6:	4770      	bx	lr
    20e8:	1fff8b40 	.word	0x1fff8b40

000020ec <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	b087      	sub	sp, #28
    20f0:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    20f2:	2100      	movs	r1, #0
    20f4:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    20f6:	2100      	movs	r1, #0
    20f8:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    20fa:	9901      	ldr	r1, [sp, #4]
    20fc:	2000      	movs	r0, #0
    20fe:	460e      	mov	r6, r1
    2100:	4607      	mov	r7, r0
    2102:	4812      	ldr	r0, [pc, #72]	; (214c <OsIf_Timer_System_MicrosToTicks+0x60>)
    2104:	9904      	ldr	r1, [sp, #16]
    2106:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    210a:	2000      	movs	r0, #0
    210c:	460c      	mov	r4, r1
    210e:	4605      	mov	r5, r0
    2110:	fb04 f007 	mul.w	r0, r4, r7
    2114:	fb06 f105 	mul.w	r1, r6, r5
    2118:	4401      	add	r1, r0
    211a:	fba6 2304 	umull	r2, r3, r6, r4
    211e:	4419      	add	r1, r3
    2120:	460b      	mov	r3, r1
    2122:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2126:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    212a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    212e:	4a08      	ldr	r2, [pc, #32]	; (2150 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2130:	f04f 0300 	mov.w	r3, #0
    2134:	f7fe fa36 	bl	5a4 <__aeabi_uldivmod>
    2138:	4602      	mov	r2, r0
    213a:	460b      	mov	r3, r1
    213c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2140:	9b02      	ldr	r3, [sp, #8]
    2142:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2144:	9b05      	ldr	r3, [sp, #20]
}
    2146:	4618      	mov	r0, r3
    2148:	b007      	add	sp, #28
    214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    214c:	1fff8b40 	.word	0x1fff8b40
    2150:	000f4240 	.word	0x000f4240

00002154 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2154:	b082      	sub	sp, #8
    2156:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2158:	4b07      	ldr	r3, [pc, #28]	; (2178 <OsIf_Timer_System_Internal_Init+0x24>)
    215a:	2200      	movs	r2, #0
    215c:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    215e:	4b06      	ldr	r3, [pc, #24]	; (2178 <OsIf_Timer_System_Internal_Init+0x24>)
    2160:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2164:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <OsIf_Timer_System_Internal_Init+0x24>)
    2168:	2200      	movs	r2, #0
    216a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    216c:	4b02      	ldr	r3, [pc, #8]	; (2178 <OsIf_Timer_System_Internal_Init+0x24>)
    216e:	2205      	movs	r2, #5
    2170:	601a      	str	r2, [r3, #0]
}
    2172:	bf00      	nop
    2174:	b002      	add	sp, #8
    2176:	4770      	bx	lr
    2178:	e000e010 	.word	0xe000e010

0000217c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    217c:	4b02      	ldr	r3, [pc, #8]	; (2188 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    217e:	689b      	ldr	r3, [r3, #8]
    2180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2184:	4618      	mov	r0, r3
    2186:	4770      	bx	lr
    2188:	e000e010 	.word	0xe000e010

0000218c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    218c:	b084      	sub	sp, #16
    218e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2190:	4b10      	ldr	r3, [pc, #64]	; (21d4 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2192:	689b      	ldr	r3, [r3, #8]
    2194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2198:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    219a:	2300      	movs	r3, #0
    219c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    219e:	9b01      	ldr	r3, [sp, #4]
    21a0:	681b      	ldr	r3, [r3, #0]
    21a2:	9a02      	ldr	r2, [sp, #8]
    21a4:	429a      	cmp	r2, r3
    21a6:	d909      	bls.n	21bc <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    21a8:	9b01      	ldr	r3, [sp, #4]
    21aa:	681a      	ldr	r2, [r3, #0]
    21ac:	9b02      	ldr	r3, [sp, #8]
    21ae:	1ad3      	subs	r3, r2, r3
    21b0:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    21b4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    21b8:	9303      	str	r3, [sp, #12]
    21ba:	e004      	b.n	21c6 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	681a      	ldr	r2, [r3, #0]
    21c0:	9b02      	ldr	r3, [sp, #8]
    21c2:	1ad3      	subs	r3, r2, r3
    21c4:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    21c6:	9b01      	ldr	r3, [sp, #4]
    21c8:	9a02      	ldr	r2, [sp, #8]
    21ca:	601a      	str	r2, [r3, #0]

    return dif;
    21cc:	9b03      	ldr	r3, [sp, #12]
}
    21ce:	4618      	mov	r0, r3
    21d0:	b004      	add	sp, #16
    21d2:	4770      	bx	lr
    21d4:	e000e010 	.word	0xe000e010

000021d8 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    21d8:	b082      	sub	sp, #8
    21da:	9001      	str	r0, [sp, #4]
    21dc:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    21de:	bf00      	nop
    21e0:	b002      	add	sp, #8
    21e2:	4770      	bx	lr

000021e4 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    21e4:	b500      	push	{lr}
    21e6:	b085      	sub	sp, #20
    21e8:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    21ea:	4b24      	ldr	r3, [pc, #144]	; (227c <Clock_Ip_UpdateDriverContext+0x98>)
    21ec:	2201      	movs	r2, #1
    21ee:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    21f0:	4b23      	ldr	r3, [pc, #140]	; (2280 <Clock_Ip_UpdateDriverContext+0x9c>)
    21f2:	681b      	ldr	r3, [r3, #0]
    21f4:	2102      	movs	r1, #2
    21f6:	4618      	mov	r0, r3
    21f8:	f003 fc32 	bl	5a60 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    21fc:	2300      	movs	r3, #0
    21fe:	f88d 300f 	strb.w	r3, [sp, #15]
    2202:	e015      	b.n	2230 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2204:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2208:	9a01      	ldr	r2, [sp, #4]
    220a:	334a      	adds	r3, #74	; 0x4a
    220c:	00db      	lsls	r3, r3, #3
    220e:	4413      	add	r3, r2
    2210:	6858      	ldr	r0, [r3, #4]
    2212:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2216:	9a01      	ldr	r2, [sp, #4]
    2218:	334a      	adds	r3, #74	; 0x4a
    221a:	00db      	lsls	r3, r3, #3
    221c:	4413      	add	r3, r2
    221e:	689b      	ldr	r3, [r3, #8]
    2220:	4619      	mov	r1, r3
    2222:	f001 fadc 	bl	37de <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2226:	f89d 300f 	ldrb.w	r3, [sp, #15]
    222a:	3301      	adds	r3, #1
    222c:	f88d 300f 	strb.w	r3, [sp, #15]
    2230:	9b01      	ldr	r3, [sp, #4]
    2232:	7bdb      	ldrb	r3, [r3, #15]
    2234:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2238:	429a      	cmp	r2, r3
    223a:	d3e3      	bcc.n	2204 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    223c:	f000 f824 	bl	2288 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2240:	2301      	movs	r3, #1
    2242:	f88d 300f 	strb.w	r3, [sp, #15]
    2246:	e00e      	b.n	2266 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2248:	f89d 200f 	ldrb.w	r2, [sp, #15]
    224c:	9b01      	ldr	r3, [sp, #4]
    224e:	327e      	adds	r2, #126	; 0x7e
    2250:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2254:	490b      	ldr	r1, [pc, #44]	; (2284 <Clock_Ip_UpdateDriverContext+0xa0>)
    2256:	f89d 200f 	ldrb.w	r2, [sp, #15]
    225a:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    225c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2260:	3301      	adds	r3, #1
    2262:	f88d 300f 	strb.w	r3, [sp, #15]
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	7cdb      	ldrb	r3, [r3, #19]
    226a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    226e:	429a      	cmp	r2, r3
    2270:	d3ea      	bcc.n	2248 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2272:	bf00      	nop
    2274:	bf00      	nop
    2276:	b005      	add	sp, #20
    2278:	f85d fb04 	ldr.w	pc, [sp], #4
    227c:	1fff8b10 	.word	0x1fff8b10
    2280:	1fff8b44 	.word	0x1fff8b44
    2284:	1fff8b50 	.word	0x1fff8b50

00002288 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2288:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    228a:	4b23      	ldr	r3, [pc, #140]	; (2318 <Clock_Ip_CallEmptyCallbacks+0x90>)
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	f083 0301 	eor.w	r3, r3, #1
    2292:	b2db      	uxtb	r3, r3
    2294:	2b00      	cmp	r3, #0
    2296:	d03d      	beq.n	2314 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2298:	4b1f      	ldr	r3, [pc, #124]	; (2318 <Clock_Ip_CallEmptyCallbacks+0x90>)
    229a:	2201      	movs	r2, #1
    229c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    229e:	4b1f      	ldr	r3, [pc, #124]	; (231c <Clock_Ip_CallEmptyCallbacks+0x94>)
    22a0:	685b      	ldr	r3, [r3, #4]
    22a2:	2100      	movs	r1, #0
    22a4:	2000      	movs	r0, #0
    22a6:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    22a8:	4b1c      	ldr	r3, [pc, #112]	; (231c <Clock_Ip_CallEmptyCallbacks+0x94>)
    22aa:	689b      	ldr	r3, [r3, #8]
    22ac:	2057      	movs	r0, #87	; 0x57
    22ae:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    22b0:	4b1b      	ldr	r3, [pc, #108]	; (2320 <Clock_Ip_CallEmptyCallbacks+0x98>)
    22b2:	681b      	ldr	r3, [r3, #0]
    22b4:	2000      	movs	r0, #0
    22b6:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    22b8:	4b1a      	ldr	r3, [pc, #104]	; (2324 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	2000      	movs	r0, #0
    22be:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    22c0:	4b19      	ldr	r3, [pc, #100]	; (2328 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	2000      	movs	r0, #0
    22c6:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    22c8:	4b18      	ldr	r3, [pc, #96]	; (232c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    22ca:	685b      	ldr	r3, [r3, #4]
    22cc:	2000      	movs	r0, #0
    22ce:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    22d0:	4b16      	ldr	r3, [pc, #88]	; (232c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    22d2:	689b      	ldr	r3, [r3, #8]
    22d4:	2057      	movs	r0, #87	; 0x57
    22d6:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    22d8:	4b15      	ldr	r3, [pc, #84]	; (2330 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	2000      	movs	r0, #0
    22de:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    22e0:	4b13      	ldr	r3, [pc, #76]	; (2330 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    22e2:	685b      	ldr	r3, [r3, #4]
    22e4:	2100      	movs	r1, #0
    22e6:	2057      	movs	r0, #87	; 0x57
    22e8:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    22ea:	4b12      	ldr	r3, [pc, #72]	; (2334 <Clock_Ip_CallEmptyCallbacks+0xac>)
    22ec:	681b      	ldr	r3, [r3, #0]
    22ee:	2000      	movs	r0, #0
    22f0:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    22f2:	4b11      	ldr	r3, [pc, #68]	; (2338 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    22f4:	685b      	ldr	r3, [r3, #4]
    22f6:	2000      	movs	r0, #0
    22f8:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    22fa:	4b0f      	ldr	r3, [pc, #60]	; (2338 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    22fc:	689b      	ldr	r3, [r3, #8]
    22fe:	2057      	movs	r0, #87	; 0x57
    2300:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2302:	4b0e      	ldr	r3, [pc, #56]	; (233c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2304:	685b      	ldr	r3, [r3, #4]
    2306:	2000      	movs	r0, #0
    2308:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    230a:	4b0d      	ldr	r3, [pc, #52]	; (2340 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    230c:	681b      	ldr	r3, [r3, #0]
    230e:	2100      	movs	r1, #0
    2310:	2000      	movs	r0, #0
    2312:	4798      	blx	r3
    }
}
    2314:	bf00      	nop
    2316:	bd08      	pop	{r3, pc}
    2318:	1fff8b48 	.word	0x1fff8b48
    231c:	00008df8 	.word	0x00008df8
    2320:	00008d0c 	.word	0x00008d0c
    2324:	00008d48 	.word	0x00008d48
    2328:	00008d50 	.word	0x00008d50
    232c:	00008d78 	.word	0x00008d78
    2330:	00008d84 	.word	0x00008d84
    2334:	00008dbc 	.word	0x00008dbc
    2338:	00008e08 	.word	0x00008e08
    233c:	00008e34 	.word	0x00008e34
    2340:	00008e30 	.word	0x00008e30

00002344 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2344:	b500      	push	{lr}
    2346:	b085      	sub	sp, #20
    2348:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    234a:	9b01      	ldr	r3, [sp, #4]
    234c:	7adb      	ldrb	r3, [r3, #11]
    234e:	9303      	str	r3, [sp, #12]
    2350:	e01f      	b.n	2392 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2352:	9b03      	ldr	r3, [sp, #12]
    2354:	1e5a      	subs	r2, r3, #1
    2356:	9b01      	ldr	r3, [sp, #4]
    2358:	320d      	adds	r2, #13
    235a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    235e:	495a      	ldr	r1, [pc, #360]	; (24c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2360:	4613      	mov	r3, r2
    2362:	00db      	lsls	r3, r3, #3
    2364:	4413      	add	r3, r2
    2366:	440b      	add	r3, r1
    2368:	3301      	adds	r3, #1
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	461a      	mov	r2, r3
    236e:	4b57      	ldr	r3, [pc, #348]	; (24cc <Clock_Ip_ResetClockConfiguration+0x188>)
    2370:	5c9b      	ldrb	r3, [r3, r2]
    2372:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2374:	4a56      	ldr	r2, [pc, #344]	; (24d0 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2376:	9b02      	ldr	r3, [sp, #8]
    2378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    237c:	9a03      	ldr	r2, [sp, #12]
    237e:	3a01      	subs	r2, #1
    2380:	320d      	adds	r2, #13
    2382:	00d2      	lsls	r2, r2, #3
    2384:	9901      	ldr	r1, [sp, #4]
    2386:	440a      	add	r2, r1
    2388:	4610      	mov	r0, r2
    238a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    238c:	9b03      	ldr	r3, [sp, #12]
    238e:	3b01      	subs	r3, #1
    2390:	9303      	str	r3, [sp, #12]
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	2b00      	cmp	r3, #0
    2396:	d1dc      	bne.n	2352 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2398:	9b01      	ldr	r3, [sp, #4]
    239a:	7b9b      	ldrb	r3, [r3, #14]
    239c:	9303      	str	r3, [sp, #12]
    239e:	e026      	b.n	23ee <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    23a0:	9b03      	ldr	r3, [sp, #12]
    23a2:	3b01      	subs	r3, #1
    23a4:	9a01      	ldr	r2, [sp, #4]
    23a6:	3324      	adds	r3, #36	; 0x24
    23a8:	011b      	lsls	r3, r3, #4
    23aa:	4413      	add	r3, r2
    23ac:	3304      	adds	r3, #4
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	4945      	ldr	r1, [pc, #276]	; (24c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    23b2:	4613      	mov	r3, r2
    23b4:	00db      	lsls	r3, r3, #3
    23b6:	4413      	add	r3, r2
    23b8:	440b      	add	r3, r1
    23ba:	3301      	adds	r3, #1
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	461a      	mov	r2, r3
    23c0:	4b44      	ldr	r3, [pc, #272]	; (24d4 <Clock_Ip_ResetClockConfiguration+0x190>)
    23c2:	5c9b      	ldrb	r3, [r3, r2]
    23c4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    23c6:	4944      	ldr	r1, [pc, #272]	; (24d8 <Clock_Ip_ResetClockConfiguration+0x194>)
    23c8:	9a02      	ldr	r2, [sp, #8]
    23ca:	4613      	mov	r3, r2
    23cc:	005b      	lsls	r3, r3, #1
    23ce:	4413      	add	r3, r2
    23d0:	009b      	lsls	r3, r3, #2
    23d2:	440b      	add	r3, r1
    23d4:	681b      	ldr	r3, [r3, #0]
    23d6:	9a03      	ldr	r2, [sp, #12]
    23d8:	3a01      	subs	r2, #1
    23da:	3224      	adds	r2, #36	; 0x24
    23dc:	0112      	lsls	r2, r2, #4
    23de:	9901      	ldr	r1, [sp, #4]
    23e0:	440a      	add	r2, r1
    23e2:	3204      	adds	r2, #4
    23e4:	4610      	mov	r0, r2
    23e6:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    23e8:	9b03      	ldr	r3, [sp, #12]
    23ea:	3b01      	subs	r3, #1
    23ec:	9303      	str	r3, [sp, #12]
    23ee:	9b03      	ldr	r3, [sp, #12]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d1d5      	bne.n	23a0 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    23f4:	9b01      	ldr	r3, [sp, #4]
    23f6:	7a9b      	ldrb	r3, [r3, #10]
    23f8:	9303      	str	r3, [sp, #12]
    23fa:	e02a      	b.n	2452 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    23fc:	9b03      	ldr	r3, [sp, #12]
    23fe:	1e5a      	subs	r2, r3, #1
    2400:	9901      	ldr	r1, [sp, #4]
    2402:	4613      	mov	r3, r2
    2404:	009b      	lsls	r3, r3, #2
    2406:	4413      	add	r3, r2
    2408:	00db      	lsls	r3, r3, #3
    240a:	440b      	add	r3, r1
    240c:	3340      	adds	r3, #64	; 0x40
    240e:	681a      	ldr	r2, [r3, #0]
    2410:	492d      	ldr	r1, [pc, #180]	; (24c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2412:	4613      	mov	r3, r2
    2414:	00db      	lsls	r3, r3, #3
    2416:	4413      	add	r3, r2
    2418:	440b      	add	r3, r1
    241a:	3301      	adds	r3, #1
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	461a      	mov	r2, r3
    2420:	4b2e      	ldr	r3, [pc, #184]	; (24dc <Clock_Ip_ResetClockConfiguration+0x198>)
    2422:	5c9b      	ldrb	r3, [r3, r2]
    2424:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2426:	492e      	ldr	r1, [pc, #184]	; (24e0 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2428:	9a02      	ldr	r2, [sp, #8]
    242a:	4613      	mov	r3, r2
    242c:	009b      	lsls	r3, r3, #2
    242e:	4413      	add	r3, r2
    2430:	009b      	lsls	r3, r3, #2
    2432:	440b      	add	r3, r1
    2434:	6819      	ldr	r1, [r3, #0]
    2436:	9b03      	ldr	r3, [sp, #12]
    2438:	1e5a      	subs	r2, r3, #1
    243a:	4613      	mov	r3, r2
    243c:	009b      	lsls	r3, r3, #2
    243e:	4413      	add	r3, r2
    2440:	00db      	lsls	r3, r3, #3
    2442:	3340      	adds	r3, #64	; 0x40
    2444:	9a01      	ldr	r2, [sp, #4]
    2446:	4413      	add	r3, r2
    2448:	4618      	mov	r0, r3
    244a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    244c:	9b03      	ldr	r3, [sp, #12]
    244e:	3b01      	subs	r3, #1
    2450:	9303      	str	r3, [sp, #12]
    2452:	9b03      	ldr	r3, [sp, #12]
    2454:	2b00      	cmp	r3, #0
    2456:	d1d1      	bne.n	23fc <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2458:	9b01      	ldr	r3, [sp, #4]
    245a:	7a5b      	ldrb	r3, [r3, #9]
    245c:	9303      	str	r3, [sp, #12]
    245e:	e02b      	b.n	24b8 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2460:	9b03      	ldr	r3, [sp, #12]
    2462:	1e5a      	subs	r2, r3, #1
    2464:	9901      	ldr	r1, [sp, #4]
    2466:	4613      	mov	r3, r2
    2468:	009b      	lsls	r3, r3, #2
    246a:	4413      	add	r3, r2
    246c:	009b      	lsls	r3, r3, #2
    246e:	440b      	add	r3, r1
    2470:	332c      	adds	r3, #44	; 0x2c
    2472:	681a      	ldr	r2, [r3, #0]
    2474:	4914      	ldr	r1, [pc, #80]	; (24c8 <Clock_Ip_ResetClockConfiguration+0x184>)
    2476:	4613      	mov	r3, r2
    2478:	00db      	lsls	r3, r3, #3
    247a:	4413      	add	r3, r2
    247c:	440b      	add	r3, r1
    247e:	3301      	adds	r3, #1
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	461a      	mov	r2, r3
    2484:	4b17      	ldr	r3, [pc, #92]	; (24e4 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2486:	5c9b      	ldrb	r3, [r3, r2]
    2488:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    248a:	4917      	ldr	r1, [pc, #92]	; (24e8 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    248c:	9a02      	ldr	r2, [sp, #8]
    248e:	4613      	mov	r3, r2
    2490:	009b      	lsls	r3, r3, #2
    2492:	4413      	add	r3, r2
    2494:	009b      	lsls	r3, r3, #2
    2496:	440b      	add	r3, r1
    2498:	6819      	ldr	r1, [r3, #0]
    249a:	9b03      	ldr	r3, [sp, #12]
    249c:	1e5a      	subs	r2, r3, #1
    249e:	4613      	mov	r3, r2
    24a0:	009b      	lsls	r3, r3, #2
    24a2:	4413      	add	r3, r2
    24a4:	009b      	lsls	r3, r3, #2
    24a6:	3328      	adds	r3, #40	; 0x28
    24a8:	9a01      	ldr	r2, [sp, #4]
    24aa:	4413      	add	r3, r2
    24ac:	3304      	adds	r3, #4
    24ae:	4618      	mov	r0, r3
    24b0:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    24b2:	9b03      	ldr	r3, [sp, #12]
    24b4:	3b01      	subs	r3, #1
    24b6:	9303      	str	r3, [sp, #12]
    24b8:	9b03      	ldr	r3, [sp, #12]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d1d0      	bne.n	2460 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    24be:	bf00      	nop
    24c0:	bf00      	nop
    24c2:	b005      	add	sp, #20
    24c4:	f85d fb04 	ldr.w	pc, [sp], #4
    24c8:	000087fc 	.word	0x000087fc
    24cc:	000087cc 	.word	0x000087cc
    24d0:	00008e34 	.word	0x00008e34
    24d4:	000087ac 	.word	0x000087ac
    24d8:	00008d78 	.word	0x00008d78
    24dc:	000087bc 	.word	0x000087bc
    24e0:	00008e08 	.word	0x00008e08
    24e4:	0000877c 	.word	0x0000877c
    24e8:	00008d50 	.word	0x00008d50

000024ec <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    24ec:	b500      	push	{lr}
    24ee:	b085      	sub	sp, #20
    24f0:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    24f2:	2301      	movs	r3, #1
    24f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    24f6:	9801      	ldr	r0, [sp, #4]
    24f8:	f000 f818 	bl	252c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    24fc:	4b0a      	ldr	r3, [pc, #40]	; (2528 <Clock_Ip_Init+0x3c>)
    24fe:	781b      	ldrb	r3, [r3, #0]
    2500:	2b00      	cmp	r3, #0
    2502:	d00a      	beq.n	251a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2504:	f000 fb74 	bl	2bf0 <Clock_Ip_GetPllStatus>
    2508:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    250a:	9b02      	ldr	r3, [sp, #8]
    250c:	2b00      	cmp	r3, #0
    250e:	d106      	bne.n	251e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2510:	f000 fbf2 	bl	2cf8 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2514:	2300      	movs	r3, #0
    2516:	9303      	str	r3, [sp, #12]
    2518:	e001      	b.n	251e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    251a:	2300      	movs	r3, #0
    251c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    251e:	9b03      	ldr	r3, [sp, #12]
}
    2520:	4618      	mov	r0, r3
    2522:	b005      	add	sp, #20
    2524:	f85d fb04 	ldr.w	pc, [sp], #4
    2528:	1fff8b4c 	.word	0x1fff8b4c

0000252c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    252c:	b510      	push	{r4, lr}
    252e:	b084      	sub	sp, #16
    2530:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2532:	4a9f      	ldr	r2, [pc, #636]	; (27b0 <Clock_Ip_InitClock+0x284>)
    2534:	9b01      	ldr	r3, [sp, #4]
    2536:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2538:	2101      	movs	r1, #1
    253a:	9801      	ldr	r0, [sp, #4]
    253c:	f003 fa90 	bl	5a60 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2540:	4b9b      	ldr	r3, [pc, #620]	; (27b0 <Clock_Ip_InitClock+0x284>)
    2542:	681b      	ldr	r3, [r3, #0]
    2544:	2b00      	cmp	r3, #0
    2546:	d030      	beq.n	25aa <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2548:	2300      	movs	r3, #0
    254a:	9303      	str	r3, [sp, #12]
    254c:	e027      	b.n	259e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    254e:	9901      	ldr	r1, [sp, #4]
    2550:	9a03      	ldr	r2, [sp, #12]
    2552:	4613      	mov	r3, r2
    2554:	009b      	lsls	r3, r3, #2
    2556:	4413      	add	r3, r2
    2558:	009b      	lsls	r3, r3, #2
    255a:	440b      	add	r3, r1
    255c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2560:	681a      	ldr	r2, [r3, #0]
    2562:	4994      	ldr	r1, [pc, #592]	; (27b4 <Clock_Ip_InitClock+0x288>)
    2564:	4613      	mov	r3, r2
    2566:	00db      	lsls	r3, r3, #3
    2568:	4413      	add	r3, r2
    256a:	440b      	add	r3, r1
    256c:	3301      	adds	r3, #1
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	461a      	mov	r2, r3
    2572:	4b91      	ldr	r3, [pc, #580]	; (27b8 <Clock_Ip_InitClock+0x28c>)
    2574:	5c9b      	ldrb	r3, [r3, r2]
    2576:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2578:	4a90      	ldr	r2, [pc, #576]	; (27bc <Clock_Ip_InitClock+0x290>)
    257a:	9b02      	ldr	r3, [sp, #8]
    257c:	011b      	lsls	r3, r3, #4
    257e:	4413      	add	r3, r2
    2580:	6819      	ldr	r1, [r3, #0]
    2582:	9a03      	ldr	r2, [sp, #12]
    2584:	4613      	mov	r3, r2
    2586:	009b      	lsls	r3, r3, #2
    2588:	4413      	add	r3, r2
    258a:	009b      	lsls	r3, r3, #2
    258c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2590:	9a01      	ldr	r2, [sp, #4]
    2592:	4413      	add	r3, r2
    2594:	4618      	mov	r0, r3
    2596:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2598:	9b03      	ldr	r3, [sp, #12]
    259a:	3301      	adds	r3, #1
    259c:	9303      	str	r3, [sp, #12]
    259e:	9b01      	ldr	r3, [sp, #4]
    25a0:	7c9b      	ldrb	r3, [r3, #18]
    25a2:	461a      	mov	r2, r3
    25a4:	9b03      	ldr	r3, [sp, #12]
    25a6:	4293      	cmp	r3, r2
    25a8:	d3d1      	bcc.n	254e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    25aa:	9801      	ldr	r0, [sp, #4]
    25ac:	f7ff feca 	bl	2344 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    25b0:	2300      	movs	r3, #0
    25b2:	9303      	str	r3, [sp, #12]
    25b4:	e029      	b.n	260a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    25b6:	9901      	ldr	r1, [sp, #4]
    25b8:	9a03      	ldr	r2, [sp, #12]
    25ba:	4613      	mov	r3, r2
    25bc:	005b      	lsls	r3, r3, #1
    25be:	4413      	add	r3, r2
    25c0:	009b      	lsls	r3, r3, #2
    25c2:	440b      	add	r3, r1
    25c4:	3314      	adds	r3, #20
    25c6:	681a      	ldr	r2, [r3, #0]
    25c8:	497a      	ldr	r1, [pc, #488]	; (27b4 <Clock_Ip_InitClock+0x288>)
    25ca:	4613      	mov	r3, r2
    25cc:	00db      	lsls	r3, r3, #3
    25ce:	4413      	add	r3, r2
    25d0:	440b      	add	r3, r1
    25d2:	3301      	adds	r3, #1
    25d4:	781b      	ldrb	r3, [r3, #0]
    25d6:	461a      	mov	r2, r3
    25d8:	4b79      	ldr	r3, [pc, #484]	; (27c0 <Clock_Ip_InitClock+0x294>)
    25da:	5c9b      	ldrb	r3, [r3, r2]
    25dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    25de:	4979      	ldr	r1, [pc, #484]	; (27c4 <Clock_Ip_InitClock+0x298>)
    25e0:	9a02      	ldr	r2, [sp, #8]
    25e2:	4613      	mov	r3, r2
    25e4:	005b      	lsls	r3, r3, #1
    25e6:	4413      	add	r3, r2
    25e8:	009b      	lsls	r3, r3, #2
    25ea:	440b      	add	r3, r1
    25ec:	6819      	ldr	r1, [r3, #0]
    25ee:	9a03      	ldr	r2, [sp, #12]
    25f0:	4613      	mov	r3, r2
    25f2:	005b      	lsls	r3, r3, #1
    25f4:	4413      	add	r3, r2
    25f6:	009b      	lsls	r3, r3, #2
    25f8:	3310      	adds	r3, #16
    25fa:	9a01      	ldr	r2, [sp, #4]
    25fc:	4413      	add	r3, r2
    25fe:	3304      	adds	r3, #4
    2600:	4618      	mov	r0, r3
    2602:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2604:	9b03      	ldr	r3, [sp, #12]
    2606:	3301      	adds	r3, #1
    2608:	9303      	str	r3, [sp, #12]
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	7a1b      	ldrb	r3, [r3, #8]
    260e:	461a      	mov	r2, r3
    2610:	9b03      	ldr	r3, [sp, #12]
    2612:	4293      	cmp	r3, r2
    2614:	d3cf      	bcc.n	25b6 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2616:	2300      	movs	r3, #0
    2618:	9303      	str	r3, [sp, #12]
    261a:	e02a      	b.n	2672 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    261c:	9901      	ldr	r1, [sp, #4]
    261e:	9a03      	ldr	r2, [sp, #12]
    2620:	4613      	mov	r3, r2
    2622:	009b      	lsls	r3, r3, #2
    2624:	4413      	add	r3, r2
    2626:	009b      	lsls	r3, r3, #2
    2628:	440b      	add	r3, r1
    262a:	332c      	adds	r3, #44	; 0x2c
    262c:	681a      	ldr	r2, [r3, #0]
    262e:	4961      	ldr	r1, [pc, #388]	; (27b4 <Clock_Ip_InitClock+0x288>)
    2630:	4613      	mov	r3, r2
    2632:	00db      	lsls	r3, r3, #3
    2634:	4413      	add	r3, r2
    2636:	440b      	add	r3, r1
    2638:	3301      	adds	r3, #1
    263a:	781b      	ldrb	r3, [r3, #0]
    263c:	461a      	mov	r2, r3
    263e:	4b62      	ldr	r3, [pc, #392]	; (27c8 <Clock_Ip_InitClock+0x29c>)
    2640:	5c9b      	ldrb	r3, [r3, r2]
    2642:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2644:	4961      	ldr	r1, [pc, #388]	; (27cc <Clock_Ip_InitClock+0x2a0>)
    2646:	9a02      	ldr	r2, [sp, #8]
    2648:	4613      	mov	r3, r2
    264a:	009b      	lsls	r3, r3, #2
    264c:	4413      	add	r3, r2
    264e:	009b      	lsls	r3, r3, #2
    2650:	440b      	add	r3, r1
    2652:	3304      	adds	r3, #4
    2654:	6819      	ldr	r1, [r3, #0]
    2656:	9a03      	ldr	r2, [sp, #12]
    2658:	4613      	mov	r3, r2
    265a:	009b      	lsls	r3, r3, #2
    265c:	4413      	add	r3, r2
    265e:	009b      	lsls	r3, r3, #2
    2660:	3328      	adds	r3, #40	; 0x28
    2662:	9a01      	ldr	r2, [sp, #4]
    2664:	4413      	add	r3, r2
    2666:	3304      	adds	r3, #4
    2668:	4618      	mov	r0, r3
    266a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    266c:	9b03      	ldr	r3, [sp, #12]
    266e:	3301      	adds	r3, #1
    2670:	9303      	str	r3, [sp, #12]
    2672:	9b01      	ldr	r3, [sp, #4]
    2674:	7a5b      	ldrb	r3, [r3, #9]
    2676:	461a      	mov	r2, r3
    2678:	9b03      	ldr	r3, [sp, #12]
    267a:	4293      	cmp	r3, r2
    267c:	d3ce      	bcc.n	261c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    267e:	9801      	ldr	r0, [sp, #4]
    2680:	f7ff fdb0 	bl	21e4 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2684:	2300      	movs	r3, #0
    2686:	9303      	str	r3, [sp, #12]
    2688:	e028      	b.n	26dc <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    268a:	9901      	ldr	r1, [sp, #4]
    268c:	9a03      	ldr	r2, [sp, #12]
    268e:	4613      	mov	r3, r2
    2690:	009b      	lsls	r3, r3, #2
    2692:	4413      	add	r3, r2
    2694:	009b      	lsls	r3, r3, #2
    2696:	440b      	add	r3, r1
    2698:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    269c:	681a      	ldr	r2, [r3, #0]
    269e:	4945      	ldr	r1, [pc, #276]	; (27b4 <Clock_Ip_InitClock+0x288>)
    26a0:	4613      	mov	r3, r2
    26a2:	00db      	lsls	r3, r3, #3
    26a4:	4413      	add	r3, r2
    26a6:	440b      	add	r3, r1
    26a8:	3301      	adds	r3, #1
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	461a      	mov	r2, r3
    26ae:	4b48      	ldr	r3, [pc, #288]	; (27d0 <Clock_Ip_InitClock+0x2a4>)
    26b0:	5c9b      	ldrb	r3, [r3, r2]
    26b2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    26b4:	4a47      	ldr	r2, [pc, #284]	; (27d4 <Clock_Ip_InitClock+0x2a8>)
    26b6:	9b02      	ldr	r3, [sp, #8]
    26b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    26bc:	9a03      	ldr	r2, [sp, #12]
    26be:	4613      	mov	r3, r2
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	4413      	add	r3, r2
    26c4:	009b      	lsls	r3, r3, #2
    26c6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    26ca:	9a01      	ldr	r2, [sp, #4]
    26cc:	4413      	add	r3, r2
    26ce:	3304      	adds	r3, #4
    26d0:	9903      	ldr	r1, [sp, #12]
    26d2:	4618      	mov	r0, r3
    26d4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    26d6:	9b03      	ldr	r3, [sp, #12]
    26d8:	3301      	adds	r3, #1
    26da:	9303      	str	r3, [sp, #12]
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	7c5b      	ldrb	r3, [r3, #17]
    26e0:	461a      	mov	r2, r3
    26e2:	9b03      	ldr	r3, [sp, #12]
    26e4:	4293      	cmp	r3, r2
    26e6:	d3d0      	bcc.n	268a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    26e8:	2300      	movs	r3, #0
    26ea:	9303      	str	r3, [sp, #12]
    26ec:	e026      	b.n	273c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    26ee:	9901      	ldr	r1, [sp, #4]
    26f0:	9a03      	ldr	r2, [sp, #12]
    26f2:	4613      	mov	r3, r2
    26f4:	005b      	lsls	r3, r3, #1
    26f6:	4413      	add	r3, r2
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	440b      	add	r3, r1
    26fc:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2700:	681a      	ldr	r2, [r3, #0]
    2702:	492c      	ldr	r1, [pc, #176]	; (27b4 <Clock_Ip_InitClock+0x288>)
    2704:	4613      	mov	r3, r2
    2706:	00db      	lsls	r3, r3, #3
    2708:	4413      	add	r3, r2
    270a:	440b      	add	r3, r1
    270c:	3301      	adds	r3, #1
    270e:	781b      	ldrb	r3, [r3, #0]
    2710:	461a      	mov	r2, r3
    2712:	4b31      	ldr	r3, [pc, #196]	; (27d8 <Clock_Ip_InitClock+0x2ac>)
    2714:	5c9b      	ldrb	r3, [r3, r2]
    2716:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2718:	4a30      	ldr	r2, [pc, #192]	; (27dc <Clock_Ip_InitClock+0x2b0>)
    271a:	9b02      	ldr	r3, [sp, #8]
    271c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2720:	9a03      	ldr	r2, [sp, #12]
    2722:	4613      	mov	r3, r2
    2724:	005b      	lsls	r3, r3, #1
    2726:	4413      	add	r3, r2
    2728:	009b      	lsls	r3, r3, #2
    272a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    272e:	9a01      	ldr	r2, [sp, #4]
    2730:	4413      	add	r3, r2
    2732:	4618      	mov	r0, r3
    2734:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2736:	9b03      	ldr	r3, [sp, #12]
    2738:	3301      	adds	r3, #1
    273a:	9303      	str	r3, [sp, #12]
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	7b5b      	ldrb	r3, [r3, #13]
    2740:	461a      	mov	r2, r3
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	4293      	cmp	r3, r2
    2746:	d3d2      	bcc.n	26ee <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2748:	2300      	movs	r3, #0
    274a:	9303      	str	r3, [sp, #12]
    274c:	e026      	b.n	279c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    274e:	9901      	ldr	r1, [sp, #4]
    2750:	9a03      	ldr	r2, [sp, #12]
    2752:	4613      	mov	r3, r2
    2754:	005b      	lsls	r3, r3, #1
    2756:	4413      	add	r3, r2
    2758:	009b      	lsls	r3, r3, #2
    275a:	440b      	add	r3, r1
    275c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2760:	681a      	ldr	r2, [r3, #0]
    2762:	4914      	ldr	r1, [pc, #80]	; (27b4 <Clock_Ip_InitClock+0x288>)
    2764:	4613      	mov	r3, r2
    2766:	00db      	lsls	r3, r3, #3
    2768:	4413      	add	r3, r2
    276a:	440b      	add	r3, r1
    276c:	3301      	adds	r3, #1
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	461a      	mov	r2, r3
    2772:	4b1b      	ldr	r3, [pc, #108]	; (27e0 <Clock_Ip_InitClock+0x2b4>)
    2774:	5c9b      	ldrb	r3, [r3, r2]
    2776:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2778:	4a1a      	ldr	r2, [pc, #104]	; (27e4 <Clock_Ip_InitClock+0x2b8>)
    277a:	9b02      	ldr	r3, [sp, #8]
    277c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2780:	9a03      	ldr	r2, [sp, #12]
    2782:	4613      	mov	r3, r2
    2784:	005b      	lsls	r3, r3, #1
    2786:	4413      	add	r3, r2
    2788:	009b      	lsls	r3, r3, #2
    278a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    278e:	9a01      	ldr	r2, [sp, #4]
    2790:	4413      	add	r3, r2
    2792:	4618      	mov	r0, r3
    2794:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2796:	9b03      	ldr	r3, [sp, #12]
    2798:	3301      	adds	r3, #1
    279a:	9303      	str	r3, [sp, #12]
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	7b1b      	ldrb	r3, [r3, #12]
    27a0:	461a      	mov	r2, r3
    27a2:	9b03      	ldr	r3, [sp, #12]
    27a4:	4293      	cmp	r3, r2
    27a6:	d3d2      	bcc.n	274e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    27a8:	2300      	movs	r3, #0
    27aa:	9303      	str	r3, [sp, #12]
    27ac:	e044      	b.n	2838 <Clock_Ip_InitClock+0x30c>
    27ae:	bf00      	nop
    27b0:	1fff8b44 	.word	0x1fff8b44
    27b4:	000087fc 	.word	0x000087fc
    27b8:	000087ec 	.word	0x000087ec
    27bc:	00008df8 	.word	0x00008df8
    27c0:	0000878c 	.word	0x0000878c
    27c4:	00008dbc 	.word	0x00008dbc
    27c8:	0000877c 	.word	0x0000877c
    27cc:	00008d50 	.word	0x00008d50
    27d0:	000087dc 	.word	0x000087dc
    27d4:	00008e30 	.word	0x00008e30
    27d8:	0000876c 	.word	0x0000876c
    27dc:	00008d48 	.word	0x00008d48
    27e0:	0000875c 	.word	0x0000875c
    27e4:	00008d0c 	.word	0x00008d0c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    27e8:	9901      	ldr	r1, [sp, #4]
    27ea:	9a03      	ldr	r2, [sp, #12]
    27ec:	4613      	mov	r3, r2
    27ee:	005b      	lsls	r3, r3, #1
    27f0:	4413      	add	r3, r2
    27f2:	009b      	lsls	r3, r3, #2
    27f4:	440b      	add	r3, r1
    27f6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    27fa:	681a      	ldr	r2, [r3, #0]
    27fc:	49ac      	ldr	r1, [pc, #688]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    27fe:	4613      	mov	r3, r2
    2800:	00db      	lsls	r3, r3, #3
    2802:	4413      	add	r3, r2
    2804:	440b      	add	r3, r1
    2806:	3301      	adds	r3, #1
    2808:	781b      	ldrb	r3, [r3, #0]
    280a:	461a      	mov	r2, r3
    280c:	4ba9      	ldr	r3, [pc, #676]	; (2ab4 <Clock_Ip_InitClock+0x588>)
    280e:	5c9b      	ldrb	r3, [r3, r2]
    2810:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2812:	4aa9      	ldr	r2, [pc, #676]	; (2ab8 <Clock_Ip_InitClock+0x58c>)
    2814:	9b02      	ldr	r3, [sp, #8]
    2816:	00db      	lsls	r3, r3, #3
    2818:	4413      	add	r3, r2
    281a:	6859      	ldr	r1, [r3, #4]
    281c:	9a03      	ldr	r2, [sp, #12]
    281e:	4613      	mov	r3, r2
    2820:	005b      	lsls	r3, r3, #1
    2822:	4413      	add	r3, r2
    2824:	009b      	lsls	r3, r3, #2
    2826:	f503 730e 	add.w	r3, r3, #568	; 0x238
    282a:	9a01      	ldr	r2, [sp, #4]
    282c:	4413      	add	r3, r2
    282e:	4618      	mov	r0, r3
    2830:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2832:	9b03      	ldr	r3, [sp, #12]
    2834:	3301      	adds	r3, #1
    2836:	9303      	str	r3, [sp, #12]
    2838:	9b01      	ldr	r3, [sp, #4]
    283a:	7b5b      	ldrb	r3, [r3, #13]
    283c:	461a      	mov	r2, r3
    283e:	9b03      	ldr	r3, [sp, #12]
    2840:	4293      	cmp	r3, r2
    2842:	d3d1      	bcc.n	27e8 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2844:	2300      	movs	r3, #0
    2846:	9303      	str	r3, [sp, #12]
    2848:	e029      	b.n	289e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    284a:	9901      	ldr	r1, [sp, #4]
    284c:	9a03      	ldr	r2, [sp, #12]
    284e:	4613      	mov	r3, r2
    2850:	009b      	lsls	r3, r3, #2
    2852:	4413      	add	r3, r2
    2854:	00db      	lsls	r3, r3, #3
    2856:	440b      	add	r3, r1
    2858:	3340      	adds	r3, #64	; 0x40
    285a:	681a      	ldr	r2, [r3, #0]
    285c:	4994      	ldr	r1, [pc, #592]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    285e:	4613      	mov	r3, r2
    2860:	00db      	lsls	r3, r3, #3
    2862:	4413      	add	r3, r2
    2864:	440b      	add	r3, r1
    2866:	3301      	adds	r3, #1
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	461a      	mov	r2, r3
    286c:	4b93      	ldr	r3, [pc, #588]	; (2abc <Clock_Ip_InitClock+0x590>)
    286e:	5c9b      	ldrb	r3, [r3, r2]
    2870:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2872:	4993      	ldr	r1, [pc, #588]	; (2ac0 <Clock_Ip_InitClock+0x594>)
    2874:	9a02      	ldr	r2, [sp, #8]
    2876:	4613      	mov	r3, r2
    2878:	009b      	lsls	r3, r3, #2
    287a:	4413      	add	r3, r2
    287c:	009b      	lsls	r3, r3, #2
    287e:	440b      	add	r3, r1
    2880:	3304      	adds	r3, #4
    2882:	6819      	ldr	r1, [r3, #0]
    2884:	9a03      	ldr	r2, [sp, #12]
    2886:	4613      	mov	r3, r2
    2888:	009b      	lsls	r3, r3, #2
    288a:	4413      	add	r3, r2
    288c:	00db      	lsls	r3, r3, #3
    288e:	3340      	adds	r3, #64	; 0x40
    2890:	9a01      	ldr	r2, [sp, #4]
    2892:	4413      	add	r3, r2
    2894:	4618      	mov	r0, r3
    2896:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2898:	9b03      	ldr	r3, [sp, #12]
    289a:	3301      	adds	r3, #1
    289c:	9303      	str	r3, [sp, #12]
    289e:	9b01      	ldr	r3, [sp, #4]
    28a0:	7a9b      	ldrb	r3, [r3, #10]
    28a2:	461a      	mov	r2, r3
    28a4:	9b03      	ldr	r3, [sp, #12]
    28a6:	4293      	cmp	r3, r2
    28a8:	d3cf      	bcc.n	284a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    28aa:	2300      	movs	r3, #0
    28ac:	9303      	str	r3, [sp, #12]
    28ae:	e029      	b.n	2904 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    28b0:	9901      	ldr	r1, [sp, #4]
    28b2:	9a03      	ldr	r2, [sp, #12]
    28b4:	4613      	mov	r3, r2
    28b6:	009b      	lsls	r3, r3, #2
    28b8:	4413      	add	r3, r2
    28ba:	009b      	lsls	r3, r3, #2
    28bc:	440b      	add	r3, r1
    28be:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    28c2:	681a      	ldr	r2, [r3, #0]
    28c4:	497a      	ldr	r1, [pc, #488]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    28c6:	4613      	mov	r3, r2
    28c8:	00db      	lsls	r3, r3, #3
    28ca:	4413      	add	r3, r2
    28cc:	440b      	add	r3, r1
    28ce:	3301      	adds	r3, #1
    28d0:	781b      	ldrb	r3, [r3, #0]
    28d2:	461a      	mov	r2, r3
    28d4:	4b7b      	ldr	r3, [pc, #492]	; (2ac4 <Clock_Ip_InitClock+0x598>)
    28d6:	5c9b      	ldrb	r3, [r3, r2]
    28d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    28da:	4a7b      	ldr	r2, [pc, #492]	; (2ac8 <Clock_Ip_InitClock+0x59c>)
    28dc:	9b02      	ldr	r3, [sp, #8]
    28de:	011b      	lsls	r3, r3, #4
    28e0:	4413      	add	r3, r2
    28e2:	3304      	adds	r3, #4
    28e4:	681c      	ldr	r4, [r3, #0]
    28e6:	9a03      	ldr	r2, [sp, #12]
    28e8:	4613      	mov	r3, r2
    28ea:	009b      	lsls	r3, r3, #2
    28ec:	4413      	add	r3, r2
    28ee:	009b      	lsls	r3, r3, #2
    28f0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    28f4:	9a01      	ldr	r2, [sp, #4]
    28f6:	4413      	add	r3, r2
    28f8:	9903      	ldr	r1, [sp, #12]
    28fa:	4618      	mov	r0, r3
    28fc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    28fe:	9b03      	ldr	r3, [sp, #12]
    2900:	3301      	adds	r3, #1
    2902:	9303      	str	r3, [sp, #12]
    2904:	9b01      	ldr	r3, [sp, #4]
    2906:	7c9b      	ldrb	r3, [r3, #18]
    2908:	461a      	mov	r2, r3
    290a:	9b03      	ldr	r3, [sp, #12]
    290c:	4293      	cmp	r3, r2
    290e:	d3cf      	bcc.n	28b0 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2910:	2300      	movs	r3, #0
    2912:	9303      	str	r3, [sp, #12]
    2914:	e02a      	b.n	296c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2916:	9901      	ldr	r1, [sp, #4]
    2918:	9a03      	ldr	r2, [sp, #12]
    291a:	4613      	mov	r3, r2
    291c:	009b      	lsls	r3, r3, #2
    291e:	4413      	add	r3, r2
    2920:	009b      	lsls	r3, r3, #2
    2922:	440b      	add	r3, r1
    2924:	332c      	adds	r3, #44	; 0x2c
    2926:	681a      	ldr	r2, [r3, #0]
    2928:	4961      	ldr	r1, [pc, #388]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    292a:	4613      	mov	r3, r2
    292c:	00db      	lsls	r3, r3, #3
    292e:	4413      	add	r3, r2
    2930:	440b      	add	r3, r1
    2932:	3301      	adds	r3, #1
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	461a      	mov	r2, r3
    2938:	4b64      	ldr	r3, [pc, #400]	; (2acc <Clock_Ip_InitClock+0x5a0>)
    293a:	5c9b      	ldrb	r3, [r3, r2]
    293c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    293e:	4964      	ldr	r1, [pc, #400]	; (2ad0 <Clock_Ip_InitClock+0x5a4>)
    2940:	9a02      	ldr	r2, [sp, #8]
    2942:	4613      	mov	r3, r2
    2944:	009b      	lsls	r3, r3, #2
    2946:	4413      	add	r3, r2
    2948:	009b      	lsls	r3, r3, #2
    294a:	440b      	add	r3, r1
    294c:	3308      	adds	r3, #8
    294e:	6819      	ldr	r1, [r3, #0]
    2950:	9a03      	ldr	r2, [sp, #12]
    2952:	4613      	mov	r3, r2
    2954:	009b      	lsls	r3, r3, #2
    2956:	4413      	add	r3, r2
    2958:	009b      	lsls	r3, r3, #2
    295a:	3328      	adds	r3, #40	; 0x28
    295c:	9a01      	ldr	r2, [sp, #4]
    295e:	4413      	add	r3, r2
    2960:	3304      	adds	r3, #4
    2962:	4618      	mov	r0, r3
    2964:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2966:	9b03      	ldr	r3, [sp, #12]
    2968:	3301      	adds	r3, #1
    296a:	9303      	str	r3, [sp, #12]
    296c:	9b01      	ldr	r3, [sp, #4]
    296e:	7a5b      	ldrb	r3, [r3, #9]
    2970:	461a      	mov	r2, r3
    2972:	9b03      	ldr	r3, [sp, #12]
    2974:	4293      	cmp	r3, r2
    2976:	d3ce      	bcc.n	2916 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2978:	2300      	movs	r3, #0
    297a:	9303      	str	r3, [sp, #12]
    297c:	e029      	b.n	29d2 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    297e:	9901      	ldr	r1, [sp, #4]
    2980:	9a03      	ldr	r2, [sp, #12]
    2982:	4613      	mov	r3, r2
    2984:	009b      	lsls	r3, r3, #2
    2986:	4413      	add	r3, r2
    2988:	00db      	lsls	r3, r3, #3
    298a:	440b      	add	r3, r1
    298c:	3340      	adds	r3, #64	; 0x40
    298e:	681a      	ldr	r2, [r3, #0]
    2990:	4947      	ldr	r1, [pc, #284]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    2992:	4613      	mov	r3, r2
    2994:	00db      	lsls	r3, r3, #3
    2996:	4413      	add	r3, r2
    2998:	440b      	add	r3, r1
    299a:	3301      	adds	r3, #1
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	461a      	mov	r2, r3
    29a0:	4b46      	ldr	r3, [pc, #280]	; (2abc <Clock_Ip_InitClock+0x590>)
    29a2:	5c9b      	ldrb	r3, [r3, r2]
    29a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    29a6:	4946      	ldr	r1, [pc, #280]	; (2ac0 <Clock_Ip_InitClock+0x594>)
    29a8:	9a02      	ldr	r2, [sp, #8]
    29aa:	4613      	mov	r3, r2
    29ac:	009b      	lsls	r3, r3, #2
    29ae:	4413      	add	r3, r2
    29b0:	009b      	lsls	r3, r3, #2
    29b2:	440b      	add	r3, r1
    29b4:	330c      	adds	r3, #12
    29b6:	6819      	ldr	r1, [r3, #0]
    29b8:	9a03      	ldr	r2, [sp, #12]
    29ba:	4613      	mov	r3, r2
    29bc:	009b      	lsls	r3, r3, #2
    29be:	4413      	add	r3, r2
    29c0:	00db      	lsls	r3, r3, #3
    29c2:	3340      	adds	r3, #64	; 0x40
    29c4:	9a01      	ldr	r2, [sp, #4]
    29c6:	4413      	add	r3, r2
    29c8:	4618      	mov	r0, r3
    29ca:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    29cc:	9b03      	ldr	r3, [sp, #12]
    29ce:	3301      	adds	r3, #1
    29d0:	9303      	str	r3, [sp, #12]
    29d2:	9b01      	ldr	r3, [sp, #4]
    29d4:	7a9b      	ldrb	r3, [r3, #10]
    29d6:	461a      	mov	r2, r3
    29d8:	9b03      	ldr	r3, [sp, #12]
    29da:	4293      	cmp	r3, r2
    29dc:	d3cf      	bcc.n	297e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    29de:	2300      	movs	r3, #0
    29e0:	9303      	str	r3, [sp, #12]
    29e2:	e025      	b.n	2a30 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    29e4:	9a01      	ldr	r2, [sp, #4]
    29e6:	9b03      	ldr	r3, [sp, #12]
    29e8:	3324      	adds	r3, #36	; 0x24
    29ea:	011b      	lsls	r3, r3, #4
    29ec:	4413      	add	r3, r2
    29ee:	3304      	adds	r3, #4
    29f0:	681a      	ldr	r2, [r3, #0]
    29f2:	492f      	ldr	r1, [pc, #188]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    29f4:	4613      	mov	r3, r2
    29f6:	00db      	lsls	r3, r3, #3
    29f8:	4413      	add	r3, r2
    29fa:	440b      	add	r3, r1
    29fc:	3301      	adds	r3, #1
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	461a      	mov	r2, r3
    2a02:	4b34      	ldr	r3, [pc, #208]	; (2ad4 <Clock_Ip_InitClock+0x5a8>)
    2a04:	5c9b      	ldrb	r3, [r3, r2]
    2a06:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2a08:	4933      	ldr	r1, [pc, #204]	; (2ad8 <Clock_Ip_InitClock+0x5ac>)
    2a0a:	9a02      	ldr	r2, [sp, #8]
    2a0c:	4613      	mov	r3, r2
    2a0e:	005b      	lsls	r3, r3, #1
    2a10:	4413      	add	r3, r2
    2a12:	009b      	lsls	r3, r3, #2
    2a14:	440b      	add	r3, r1
    2a16:	3304      	adds	r3, #4
    2a18:	681b      	ldr	r3, [r3, #0]
    2a1a:	9a03      	ldr	r2, [sp, #12]
    2a1c:	3224      	adds	r2, #36	; 0x24
    2a1e:	0112      	lsls	r2, r2, #4
    2a20:	9901      	ldr	r1, [sp, #4]
    2a22:	440a      	add	r2, r1
    2a24:	3204      	adds	r2, #4
    2a26:	4610      	mov	r0, r2
    2a28:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2a2a:	9b03      	ldr	r3, [sp, #12]
    2a2c:	3301      	adds	r3, #1
    2a2e:	9303      	str	r3, [sp, #12]
    2a30:	9b01      	ldr	r3, [sp, #4]
    2a32:	7b9b      	ldrb	r3, [r3, #14]
    2a34:	461a      	mov	r2, r3
    2a36:	9b03      	ldr	r3, [sp, #12]
    2a38:	4293      	cmp	r3, r2
    2a3a:	d3d3      	bcc.n	29e4 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2a3c:	4b27      	ldr	r3, [pc, #156]	; (2adc <Clock_Ip_InitClock+0x5b0>)
    2a3e:	2200      	movs	r2, #0
    2a40:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2a42:	4b26      	ldr	r3, [pc, #152]	; (2adc <Clock_Ip_InitClock+0x5b0>)
    2a44:	2200      	movs	r2, #0
    2a46:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2a48:	4b24      	ldr	r3, [pc, #144]	; (2adc <Clock_Ip_InitClock+0x5b0>)
    2a4a:	2201      	movs	r2, #1
    2a4c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2a4e:	4b23      	ldr	r3, [pc, #140]	; (2adc <Clock_Ip_InitClock+0x5b0>)
    2a50:	2200      	movs	r2, #0
    2a52:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2a54:	f000 fa9c 	bl	2f90 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2a58:	2300      	movs	r3, #0
    2a5a:	9303      	str	r3, [sp, #12]
    2a5c:	e04c      	b.n	2af8 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2a5e:	9a01      	ldr	r2, [sp, #4]
    2a60:	9b03      	ldr	r3, [sp, #12]
    2a62:	330d      	adds	r3, #13
    2a64:	00db      	lsls	r3, r3, #3
    2a66:	4413      	add	r3, r2
    2a68:	685b      	ldr	r3, [r3, #4]
    2a6a:	4a1d      	ldr	r2, [pc, #116]	; (2ae0 <Clock_Ip_InitClock+0x5b4>)
    2a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2a70:	2b03      	cmp	r3, #3
    2a72:	d03b      	beq.n	2aec <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2a74:	9b01      	ldr	r3, [sp, #4]
    2a76:	9a03      	ldr	r2, [sp, #12]
    2a78:	320d      	adds	r2, #13
    2a7a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2a7e:	490c      	ldr	r1, [pc, #48]	; (2ab0 <Clock_Ip_InitClock+0x584>)
    2a80:	4613      	mov	r3, r2
    2a82:	00db      	lsls	r3, r3, #3
    2a84:	4413      	add	r3, r2
    2a86:	440b      	add	r3, r1
    2a88:	3301      	adds	r3, #1
    2a8a:	781b      	ldrb	r3, [r3, #0]
    2a8c:	461a      	mov	r2, r3
    2a8e:	4b15      	ldr	r3, [pc, #84]	; (2ae4 <Clock_Ip_InitClock+0x5b8>)
    2a90:	5c9b      	ldrb	r3, [r3, r2]
    2a92:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2a94:	4a14      	ldr	r2, [pc, #80]	; (2ae8 <Clock_Ip_InitClock+0x5bc>)
    2a96:	9b02      	ldr	r3, [sp, #8]
    2a98:	00db      	lsls	r3, r3, #3
    2a9a:	4413      	add	r3, r2
    2a9c:	685b      	ldr	r3, [r3, #4]
    2a9e:	9a03      	ldr	r2, [sp, #12]
    2aa0:	320d      	adds	r2, #13
    2aa2:	00d2      	lsls	r2, r2, #3
    2aa4:	9901      	ldr	r1, [sp, #4]
    2aa6:	440a      	add	r2, r1
    2aa8:	4610      	mov	r0, r2
    2aaa:	4798      	blx	r3
    2aac:	e021      	b.n	2af2 <Clock_Ip_InitClock+0x5c6>
    2aae:	bf00      	nop
    2ab0:	000087fc 	.word	0x000087fc
    2ab4:	0000876c 	.word	0x0000876c
    2ab8:	00008d48 	.word	0x00008d48
    2abc:	000087bc 	.word	0x000087bc
    2ac0:	00008e08 	.word	0x00008e08
    2ac4:	000087ec 	.word	0x000087ec
    2ac8:	00008df8 	.word	0x00008df8
    2acc:	0000877c 	.word	0x0000877c
    2ad0:	00008d50 	.word	0x00008d50
    2ad4:	000087ac 	.word	0x000087ac
    2ad8:	00008d78 	.word	0x00008d78
    2adc:	1fff8b4c 	.word	0x1fff8b4c
    2ae0:	00008c48 	.word	0x00008c48
    2ae4:	000087cc 	.word	0x000087cc
    2ae8:	00008e34 	.word	0x00008e34
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2aec:	4b3a      	ldr	r3, [pc, #232]	; (2bd8 <Clock_Ip_InitClock+0x6ac>)
    2aee:	2201      	movs	r2, #1
    2af0:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2af2:	9b03      	ldr	r3, [sp, #12]
    2af4:	3301      	adds	r3, #1
    2af6:	9303      	str	r3, [sp, #12]
    2af8:	9b01      	ldr	r3, [sp, #4]
    2afa:	7adb      	ldrb	r3, [r3, #11]
    2afc:	461a      	mov	r2, r3
    2afe:	9b03      	ldr	r3, [sp, #12]
    2b00:	4293      	cmp	r3, r2
    2b02:	d3ac      	bcc.n	2a5e <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2b04:	4b34      	ldr	r3, [pc, #208]	; (2bd8 <Clock_Ip_InitClock+0x6ac>)
    2b06:	781b      	ldrb	r3, [r3, #0]
    2b08:	f083 0301 	eor.w	r3, r3, #1
    2b0c:	b2db      	uxtb	r3, r3
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d05e      	beq.n	2bd0 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2b12:	2300      	movs	r3, #0
    2b14:	9303      	str	r3, [sp, #12]
    2b16:	e01f      	b.n	2b58 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2b18:	9a01      	ldr	r2, [sp, #4]
    2b1a:	9b03      	ldr	r3, [sp, #12]
    2b1c:	334e      	adds	r3, #78	; 0x4e
    2b1e:	00db      	lsls	r3, r3, #3
    2b20:	4413      	add	r3, r2
    2b22:	685a      	ldr	r2, [r3, #4]
    2b24:	492d      	ldr	r1, [pc, #180]	; (2bdc <Clock_Ip_InitClock+0x6b0>)
    2b26:	4613      	mov	r3, r2
    2b28:	00db      	lsls	r3, r3, #3
    2b2a:	4413      	add	r3, r2
    2b2c:	440b      	add	r3, r1
    2b2e:	3301      	adds	r3, #1
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	461a      	mov	r2, r3
    2b34:	4b2a      	ldr	r3, [pc, #168]	; (2be0 <Clock_Ip_InitClock+0x6b4>)
    2b36:	5c9b      	ldrb	r3, [r3, r2]
    2b38:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2b3a:	4a2a      	ldr	r2, [pc, #168]	; (2be4 <Clock_Ip_InitClock+0x6b8>)
    2b3c:	9b02      	ldr	r3, [sp, #8]
    2b3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b42:	9a03      	ldr	r2, [sp, #12]
    2b44:	324e      	adds	r2, #78	; 0x4e
    2b46:	00d2      	lsls	r2, r2, #3
    2b48:	9901      	ldr	r1, [sp, #4]
    2b4a:	440a      	add	r2, r1
    2b4c:	3204      	adds	r2, #4
    2b4e:	4610      	mov	r0, r2
    2b50:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2b52:	9b03      	ldr	r3, [sp, #12]
    2b54:	3301      	adds	r3, #1
    2b56:	9303      	str	r3, [sp, #12]
    2b58:	9b01      	ldr	r3, [sp, #4]
    2b5a:	7c1b      	ldrb	r3, [r3, #16]
    2b5c:	461a      	mov	r2, r3
    2b5e:	9b03      	ldr	r3, [sp, #12]
    2b60:	4293      	cmp	r3, r2
    2b62:	d3d9      	bcc.n	2b18 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2b64:	2300      	movs	r3, #0
    2b66:	9303      	str	r3, [sp, #12]
    2b68:	e028      	b.n	2bbc <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2b6a:	9901      	ldr	r1, [sp, #4]
    2b6c:	9a03      	ldr	r2, [sp, #12]
    2b6e:	4613      	mov	r3, r2
    2b70:	009b      	lsls	r3, r3, #2
    2b72:	4413      	add	r3, r2
    2b74:	009b      	lsls	r3, r3, #2
    2b76:	440b      	add	r3, r1
    2b78:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b7c:	681a      	ldr	r2, [r3, #0]
    2b7e:	4917      	ldr	r1, [pc, #92]	; (2bdc <Clock_Ip_InitClock+0x6b0>)
    2b80:	4613      	mov	r3, r2
    2b82:	00db      	lsls	r3, r3, #3
    2b84:	4413      	add	r3, r2
    2b86:	440b      	add	r3, r1
    2b88:	3301      	adds	r3, #1
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	461a      	mov	r2, r3
    2b8e:	4b16      	ldr	r3, [pc, #88]	; (2be8 <Clock_Ip_InitClock+0x6bc>)
    2b90:	5c9b      	ldrb	r3, [r3, r2]
    2b92:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2b94:	4a15      	ldr	r2, [pc, #84]	; (2bec <Clock_Ip_InitClock+0x6c0>)
    2b96:	9b02      	ldr	r3, [sp, #8]
    2b98:	011b      	lsls	r3, r3, #4
    2b9a:	4413      	add	r3, r2
    2b9c:	330c      	adds	r3, #12
    2b9e:	6819      	ldr	r1, [r3, #0]
    2ba0:	9a03      	ldr	r2, [sp, #12]
    2ba2:	4613      	mov	r3, r2
    2ba4:	009b      	lsls	r3, r3, #2
    2ba6:	4413      	add	r3, r2
    2ba8:	009b      	lsls	r3, r3, #2
    2baa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2bae:	9a01      	ldr	r2, [sp, #4]
    2bb0:	4413      	add	r3, r2
    2bb2:	4618      	mov	r0, r3
    2bb4:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2bb6:	9b03      	ldr	r3, [sp, #12]
    2bb8:	3301      	adds	r3, #1
    2bba:	9303      	str	r3, [sp, #12]
    2bbc:	9b01      	ldr	r3, [sp, #4]
    2bbe:	7c9b      	ldrb	r3, [r3, #18]
    2bc0:	461a      	mov	r2, r3
    2bc2:	9b03      	ldr	r3, [sp, #12]
    2bc4:	4293      	cmp	r3, r2
    2bc6:	d3d0      	bcc.n	2b6a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2bc8:	2104      	movs	r1, #4
    2bca:	9801      	ldr	r0, [sp, #4]
    2bcc:	f002 ff48 	bl	5a60 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2bd0:	bf00      	nop
    2bd2:	b004      	add	sp, #16
    2bd4:	bd10      	pop	{r4, pc}
    2bd6:	bf00      	nop
    2bd8:	1fff8b4c 	.word	0x1fff8b4c
    2bdc:	000087fc 	.word	0x000087fc
    2be0:	0000879c 	.word	0x0000879c
    2be4:	00008d84 	.word	0x00008d84
    2be8:	000087ec 	.word	0x000087ec
    2bec:	00008df8 	.word	0x00008df8

00002bf0 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2bf0:	b500      	push	{lr}
    2bf2:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2bf4:	2302      	movs	r3, #2
    2bf6:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2bf8:	2300      	movs	r3, #0
    2bfa:	9304      	str	r3, [sp, #16]
    2bfc:	e02c      	b.n	2c58 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2bfe:	4a36      	ldr	r2, [pc, #216]	; (2cd8 <Clock_Ip_GetPllStatus+0xe8>)
    2c00:	9b04      	ldr	r3, [sp, #16]
    2c02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2c06:	4935      	ldr	r1, [pc, #212]	; (2cdc <Clock_Ip_GetPllStatus+0xec>)
    2c08:	4613      	mov	r3, r2
    2c0a:	00db      	lsls	r3, r3, #3
    2c0c:	4413      	add	r3, r2
    2c0e:	440b      	add	r3, r1
    2c10:	3301      	adds	r3, #1
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	461a      	mov	r2, r3
    2c16:	4b32      	ldr	r3, [pc, #200]	; (2ce0 <Clock_Ip_GetPllStatus+0xf0>)
    2c18:	5c9b      	ldrb	r3, [r3, r2]
    2c1a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2c1c:	4931      	ldr	r1, [pc, #196]	; (2ce4 <Clock_Ip_GetPllStatus+0xf4>)
    2c1e:	9a03      	ldr	r2, [sp, #12]
    2c20:	4613      	mov	r3, r2
    2c22:	009b      	lsls	r3, r3, #2
    2c24:	4413      	add	r3, r2
    2c26:	009b      	lsls	r3, r3, #2
    2c28:	440b      	add	r3, r1
    2c2a:	3308      	adds	r3, #8
    2c2c:	681b      	ldr	r3, [r3, #0]
    2c2e:	492a      	ldr	r1, [pc, #168]	; (2cd8 <Clock_Ip_GetPllStatus+0xe8>)
    2c30:	9a04      	ldr	r2, [sp, #16]
    2c32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2c36:	4610      	mov	r0, r2
    2c38:	4798      	blx	r3
    2c3a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2c3c:	9b02      	ldr	r3, [sp, #8]
    2c3e:	2b01      	cmp	r3, #1
    2c40:	d102      	bne.n	2c48 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2c42:	2301      	movs	r3, #1
    2c44:	9305      	str	r3, [sp, #20]
            break;
    2c46:	e00d      	b.n	2c64 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2c48:	9b02      	ldr	r3, [sp, #8]
    2c4a:	2b02      	cmp	r3, #2
    2c4c:	d101      	bne.n	2c52 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2c4e:	2300      	movs	r3, #0
    2c50:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2c52:	9b04      	ldr	r3, [sp, #16]
    2c54:	3301      	adds	r3, #1
    2c56:	9304      	str	r3, [sp, #16]
    2c58:	4b23      	ldr	r3, [pc, #140]	; (2ce8 <Clock_Ip_GetPllStatus+0xf8>)
    2c5a:	789b      	ldrb	r3, [r3, #2]
    2c5c:	461a      	mov	r2, r3
    2c5e:	9b04      	ldr	r3, [sp, #16]
    2c60:	4293      	cmp	r3, r2
    2c62:	d3cc      	bcc.n	2bfe <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2c64:	9b05      	ldr	r3, [sp, #20]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d130      	bne.n	2ccc <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2c6a:	2300      	movs	r3, #0
    2c6c:	9304      	str	r3, [sp, #16]
    2c6e:	e027      	b.n	2cc0 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2c70:	4a1e      	ldr	r2, [pc, #120]	; (2cec <Clock_Ip_GetPllStatus+0xfc>)
    2c72:	9b04      	ldr	r3, [sp, #16]
    2c74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2c78:	4918      	ldr	r1, [pc, #96]	; (2cdc <Clock_Ip_GetPllStatus+0xec>)
    2c7a:	4613      	mov	r3, r2
    2c7c:	00db      	lsls	r3, r3, #3
    2c7e:	4413      	add	r3, r2
    2c80:	440b      	add	r3, r1
    2c82:	3301      	adds	r3, #1
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	461a      	mov	r2, r3
    2c88:	4b19      	ldr	r3, [pc, #100]	; (2cf0 <Clock_Ip_GetPllStatus+0x100>)
    2c8a:	5c9b      	ldrb	r3, [r3, r2]
    2c8c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2c8e:	4919      	ldr	r1, [pc, #100]	; (2cf4 <Clock_Ip_GetPllStatus+0x104>)
    2c90:	9a03      	ldr	r2, [sp, #12]
    2c92:	4613      	mov	r3, r2
    2c94:	005b      	lsls	r3, r3, #1
    2c96:	4413      	add	r3, r2
    2c98:	009b      	lsls	r3, r3, #2
    2c9a:	440b      	add	r3, r1
    2c9c:	3308      	adds	r3, #8
    2c9e:	681b      	ldr	r3, [r3, #0]
    2ca0:	4912      	ldr	r1, [pc, #72]	; (2cec <Clock_Ip_GetPllStatus+0xfc>)
    2ca2:	9a04      	ldr	r2, [sp, #16]
    2ca4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2ca8:	4610      	mov	r0, r2
    2caa:	4798      	blx	r3
    2cac:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2cae:	9b01      	ldr	r3, [sp, #4]
    2cb0:	2b01      	cmp	r3, #1
    2cb2:	d102      	bne.n	2cba <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2cb4:	2301      	movs	r3, #1
    2cb6:	9305      	str	r3, [sp, #20]
                break;
    2cb8:	e008      	b.n	2ccc <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2cba:	9b04      	ldr	r3, [sp, #16]
    2cbc:	3301      	adds	r3, #1
    2cbe:	9304      	str	r3, [sp, #16]
    2cc0:	4b09      	ldr	r3, [pc, #36]	; (2ce8 <Clock_Ip_GetPllStatus+0xf8>)
    2cc2:	78db      	ldrb	r3, [r3, #3]
    2cc4:	461a      	mov	r2, r3
    2cc6:	9b04      	ldr	r3, [sp, #16]
    2cc8:	4293      	cmp	r3, r2
    2cca:	d3d1      	bcc.n	2c70 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2ccc:	9b05      	ldr	r3, [sp, #20]
}
    2cce:	4618      	mov	r0, r3
    2cd0:	b007      	add	sp, #28
    2cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    2cd6:	bf00      	nop
    2cd8:	00008d04 	.word	0x00008d04
    2cdc:	000087fc 	.word	0x000087fc
    2ce0:	000087bc 	.word	0x000087bc
    2ce4:	00008e08 	.word	0x00008e08
    2ce8:	1fff8b4c 	.word	0x1fff8b4c
    2cec:	00008d08 	.word	0x00008d08
    2cf0:	000087ac 	.word	0x000087ac
    2cf4:	00008d78 	.word	0x00008d78

00002cf8 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2cf8:	b500      	push	{lr}
    2cfa:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2cfc:	4b55      	ldr	r3, [pc, #340]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	2b00      	cmp	r3, #0
    2d02:	f000 80a2 	beq.w	2e4a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2d06:	2300      	movs	r3, #0
    2d08:	9301      	str	r3, [sp, #4]
    2d0a:	e02c      	b.n	2d66 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2d0c:	4b51      	ldr	r3, [pc, #324]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2d0e:	681a      	ldr	r2, [r3, #0]
    2d10:	9b01      	ldr	r3, [sp, #4]
    2d12:	330d      	adds	r3, #13
    2d14:	00db      	lsls	r3, r3, #3
    2d16:	4413      	add	r3, r2
    2d18:	685b      	ldr	r3, [r3, #4]
    2d1a:	4a4f      	ldr	r2, [pc, #316]	; (2e58 <Clock_Ip_DistributePll+0x160>)
    2d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d20:	2b03      	cmp	r3, #3
    2d22:	d11d      	bne.n	2d60 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2d24:	4b4b      	ldr	r3, [pc, #300]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2d26:	681b      	ldr	r3, [r3, #0]
    2d28:	9a01      	ldr	r2, [sp, #4]
    2d2a:	320d      	adds	r2, #13
    2d2c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2d30:	494a      	ldr	r1, [pc, #296]	; (2e5c <Clock_Ip_DistributePll+0x164>)
    2d32:	4613      	mov	r3, r2
    2d34:	00db      	lsls	r3, r3, #3
    2d36:	4413      	add	r3, r2
    2d38:	440b      	add	r3, r1
    2d3a:	3301      	adds	r3, #1
    2d3c:	781b      	ldrb	r3, [r3, #0]
    2d3e:	461a      	mov	r2, r3
    2d40:	4b47      	ldr	r3, [pc, #284]	; (2e60 <Clock_Ip_DistributePll+0x168>)
    2d42:	5c9b      	ldrb	r3, [r3, r2]
    2d44:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2d46:	4a47      	ldr	r2, [pc, #284]	; (2e64 <Clock_Ip_DistributePll+0x16c>)
    2d48:	9b00      	ldr	r3, [sp, #0]
    2d4a:	00db      	lsls	r3, r3, #3
    2d4c:	4413      	add	r3, r2
    2d4e:	685b      	ldr	r3, [r3, #4]
    2d50:	4a40      	ldr	r2, [pc, #256]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2d52:	6811      	ldr	r1, [r2, #0]
    2d54:	9a01      	ldr	r2, [sp, #4]
    2d56:	320d      	adds	r2, #13
    2d58:	00d2      	lsls	r2, r2, #3
    2d5a:	440a      	add	r2, r1
    2d5c:	4610      	mov	r0, r2
    2d5e:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2d60:	9b01      	ldr	r3, [sp, #4]
    2d62:	3301      	adds	r3, #1
    2d64:	9301      	str	r3, [sp, #4]
    2d66:	4b3b      	ldr	r3, [pc, #236]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	7adb      	ldrb	r3, [r3, #11]
    2d6c:	461a      	mov	r2, r3
    2d6e:	9b01      	ldr	r3, [sp, #4]
    2d70:	4293      	cmp	r3, r2
    2d72:	d3cb      	bcc.n	2d0c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2d74:	4b3c      	ldr	r3, [pc, #240]	; (2e68 <Clock_Ip_DistributePll+0x170>)
    2d76:	781b      	ldrb	r3, [r3, #0]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d066      	beq.n	2e4a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d7c:	2300      	movs	r3, #0
    2d7e:	9301      	str	r3, [sp, #4]
    2d80:	e021      	b.n	2dc6 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2d82:	4b34      	ldr	r3, [pc, #208]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2d84:	681a      	ldr	r2, [r3, #0]
    2d86:	9b01      	ldr	r3, [sp, #4]
    2d88:	334e      	adds	r3, #78	; 0x4e
    2d8a:	00db      	lsls	r3, r3, #3
    2d8c:	4413      	add	r3, r2
    2d8e:	685a      	ldr	r2, [r3, #4]
    2d90:	4932      	ldr	r1, [pc, #200]	; (2e5c <Clock_Ip_DistributePll+0x164>)
    2d92:	4613      	mov	r3, r2
    2d94:	00db      	lsls	r3, r3, #3
    2d96:	4413      	add	r3, r2
    2d98:	440b      	add	r3, r1
    2d9a:	3301      	adds	r3, #1
    2d9c:	781b      	ldrb	r3, [r3, #0]
    2d9e:	461a      	mov	r2, r3
    2da0:	4b32      	ldr	r3, [pc, #200]	; (2e6c <Clock_Ip_DistributePll+0x174>)
    2da2:	5c9b      	ldrb	r3, [r3, r2]
    2da4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2da6:	4a32      	ldr	r2, [pc, #200]	; (2e70 <Clock_Ip_DistributePll+0x178>)
    2da8:	9b00      	ldr	r3, [sp, #0]
    2daa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2dae:	4a29      	ldr	r2, [pc, #164]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2db0:	6811      	ldr	r1, [r2, #0]
    2db2:	9a01      	ldr	r2, [sp, #4]
    2db4:	324e      	adds	r2, #78	; 0x4e
    2db6:	00d2      	lsls	r2, r2, #3
    2db8:	440a      	add	r2, r1
    2dba:	3204      	adds	r2, #4
    2dbc:	4610      	mov	r0, r2
    2dbe:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	3301      	adds	r3, #1
    2dc4:	9301      	str	r3, [sp, #4]
    2dc6:	4b23      	ldr	r3, [pc, #140]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2dc8:	681b      	ldr	r3, [r3, #0]
    2dca:	7c1b      	ldrb	r3, [r3, #16]
    2dcc:	461a      	mov	r2, r3
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	4293      	cmp	r3, r2
    2dd2:	d3d6      	bcc.n	2d82 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2dd4:	2300      	movs	r3, #0
    2dd6:	9301      	str	r3, [sp, #4]
    2dd8:	e02a      	b.n	2e30 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2dda:	4b1e      	ldr	r3, [pc, #120]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2ddc:	6819      	ldr	r1, [r3, #0]
    2dde:	9a01      	ldr	r2, [sp, #4]
    2de0:	4613      	mov	r3, r2
    2de2:	009b      	lsls	r3, r3, #2
    2de4:	4413      	add	r3, r2
    2de6:	009b      	lsls	r3, r3, #2
    2de8:	440b      	add	r3, r1
    2dea:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2dee:	681a      	ldr	r2, [r3, #0]
    2df0:	491a      	ldr	r1, [pc, #104]	; (2e5c <Clock_Ip_DistributePll+0x164>)
    2df2:	4613      	mov	r3, r2
    2df4:	00db      	lsls	r3, r3, #3
    2df6:	4413      	add	r3, r2
    2df8:	440b      	add	r3, r1
    2dfa:	3301      	adds	r3, #1
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	461a      	mov	r2, r3
    2e00:	4b1c      	ldr	r3, [pc, #112]	; (2e74 <Clock_Ip_DistributePll+0x17c>)
    2e02:	5c9b      	ldrb	r3, [r3, r2]
    2e04:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2e06:	4a1c      	ldr	r2, [pc, #112]	; (2e78 <Clock_Ip_DistributePll+0x180>)
    2e08:	9b00      	ldr	r3, [sp, #0]
    2e0a:	011b      	lsls	r3, r3, #4
    2e0c:	4413      	add	r3, r2
    2e0e:	330c      	adds	r3, #12
    2e10:	6819      	ldr	r1, [r3, #0]
    2e12:	4b10      	ldr	r3, [pc, #64]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2e14:	6818      	ldr	r0, [r3, #0]
    2e16:	9a01      	ldr	r2, [sp, #4]
    2e18:	4613      	mov	r3, r2
    2e1a:	009b      	lsls	r3, r3, #2
    2e1c:	4413      	add	r3, r2
    2e1e:	009b      	lsls	r3, r3, #2
    2e20:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2e24:	4403      	add	r3, r0
    2e26:	4618      	mov	r0, r3
    2e28:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2e2a:	9b01      	ldr	r3, [sp, #4]
    2e2c:	3301      	adds	r3, #1
    2e2e:	9301      	str	r3, [sp, #4]
    2e30:	4b08      	ldr	r3, [pc, #32]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	7c9b      	ldrb	r3, [r3, #18]
    2e36:	461a      	mov	r2, r3
    2e38:	9b01      	ldr	r3, [sp, #4]
    2e3a:	4293      	cmp	r3, r2
    2e3c:	d3cd      	bcc.n	2dda <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2e3e:	4b05      	ldr	r3, [pc, #20]	; (2e54 <Clock_Ip_DistributePll+0x15c>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	2104      	movs	r1, #4
    2e44:	4618      	mov	r0, r3
    2e46:	f002 fe0b 	bl	5a60 <Clock_Ip_Command>
        }
    }
}
    2e4a:	bf00      	nop
    2e4c:	b003      	add	sp, #12
    2e4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e52:	bf00      	nop
    2e54:	1fff8b44 	.word	0x1fff8b44
    2e58:	00008c48 	.word	0x00008c48
    2e5c:	000087fc 	.word	0x000087fc
    2e60:	000087cc 	.word	0x000087cc
    2e64:	00008e34 	.word	0x00008e34
    2e68:	1fff8b4c 	.word	0x1fff8b4c
    2e6c:	0000879c 	.word	0x0000879c
    2e70:	00008d84 	.word	0x00008d84
    2e74:	000087ec 	.word	0x000087ec
    2e78:	00008df8 	.word	0x00008df8

00002e7c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2e7c:	b500      	push	{lr}
    2e7e:	b085      	sub	sp, #20
    2e80:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2e82:	490c      	ldr	r1, [pc, #48]	; (2eb4 <Clock_Ip_DisableClockMonitor+0x38>)
    2e84:	9a01      	ldr	r2, [sp, #4]
    2e86:	4613      	mov	r3, r2
    2e88:	00db      	lsls	r3, r3, #3
    2e8a:	4413      	add	r3, r2
    2e8c:	440b      	add	r3, r1
    2e8e:	3301      	adds	r3, #1
    2e90:	781b      	ldrb	r3, [r3, #0]
    2e92:	461a      	mov	r2, r3
    2e94:	4b08      	ldr	r3, [pc, #32]	; (2eb8 <Clock_Ip_DisableClockMonitor+0x3c>)
    2e96:	5c9b      	ldrb	r3, [r3, r2]
    2e98:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2e9a:	4a08      	ldr	r2, [pc, #32]	; (2ebc <Clock_Ip_DisableClockMonitor+0x40>)
    2e9c:	9b03      	ldr	r3, [sp, #12]
    2e9e:	011b      	lsls	r3, r3, #4
    2ea0:	4413      	add	r3, r2
    2ea2:	3308      	adds	r3, #8
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	9801      	ldr	r0, [sp, #4]
    2ea8:	4798      	blx	r3
}
    2eaa:	bf00      	nop
    2eac:	b005      	add	sp, #20
    2eae:	f85d fb04 	ldr.w	pc, [sp], #4
    2eb2:	bf00      	nop
    2eb4:	000087fc 	.word	0x000087fc
    2eb8:	000087ec 	.word	0x000087ec
    2ebc:	00008df8 	.word	0x00008df8

00002ec0 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ec0:	b082      	sub	sp, #8
    2ec2:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2ec4:	4a02      	ldr	r2, [pc, #8]	; (2ed0 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2ec6:	9b01      	ldr	r3, [sp, #4]
    2ec8:	6013      	str	r3, [r2, #0]
}
    2eca:	bf00      	nop
    2ecc:	b002      	add	sp, #8
    2ece:	4770      	bx	lr
    2ed0:	1fff8b14 	.word	0x1fff8b14

00002ed4 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2ed4:	b500      	push	{lr}
    2ed6:	b085      	sub	sp, #20
    2ed8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2eda:	490c      	ldr	r1, [pc, #48]	; (2f0c <Clock_Ip_DisableModuleClock+0x38>)
    2edc:	9a01      	ldr	r2, [sp, #4]
    2ede:	4613      	mov	r3, r2
    2ee0:	00db      	lsls	r3, r3, #3
    2ee2:	4413      	add	r3, r2
    2ee4:	440b      	add	r3, r1
    2ee6:	3301      	adds	r3, #1
    2ee8:	781b      	ldrb	r3, [r3, #0]
    2eea:	461a      	mov	r2, r3
    2eec:	4b08      	ldr	r3, [pc, #32]	; (2f10 <Clock_Ip_DisableModuleClock+0x3c>)
    2eee:	5c9b      	ldrb	r3, [r3, r2]
    2ef0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2ef2:	4a08      	ldr	r2, [pc, #32]	; (2f14 <Clock_Ip_DisableModuleClock+0x40>)
    2ef4:	9b03      	ldr	r3, [sp, #12]
    2ef6:	00db      	lsls	r3, r3, #3
    2ef8:	4413      	add	r3, r2
    2efa:	685b      	ldr	r3, [r3, #4]
    2efc:	2101      	movs	r1, #1
    2efe:	9801      	ldr	r0, [sp, #4]
    2f00:	4798      	blx	r3
}
    2f02:	bf00      	nop
    2f04:	b005      	add	sp, #20
    2f06:	f85d fb04 	ldr.w	pc, [sp], #4
    2f0a:	bf00      	nop
    2f0c:	000087fc 	.word	0x000087fc
    2f10:	0000879c 	.word	0x0000879c
    2f14:	00008d84 	.word	0x00008d84

00002f18 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2f18:	b500      	push	{lr}
    2f1a:	b085      	sub	sp, #20
    2f1c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2f1e:	490c      	ldr	r1, [pc, #48]	; (2f50 <Clock_Ip_EnableModuleClock+0x38>)
    2f20:	9a01      	ldr	r2, [sp, #4]
    2f22:	4613      	mov	r3, r2
    2f24:	00db      	lsls	r3, r3, #3
    2f26:	4413      	add	r3, r2
    2f28:	440b      	add	r3, r1
    2f2a:	3301      	adds	r3, #1
    2f2c:	781b      	ldrb	r3, [r3, #0]
    2f2e:	461a      	mov	r2, r3
    2f30:	4b08      	ldr	r3, [pc, #32]	; (2f54 <Clock_Ip_EnableModuleClock+0x3c>)
    2f32:	5c9b      	ldrb	r3, [r3, r2]
    2f34:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2f36:	4a08      	ldr	r2, [pc, #32]	; (2f58 <Clock_Ip_EnableModuleClock+0x40>)
    2f38:	9b03      	ldr	r3, [sp, #12]
    2f3a:	00db      	lsls	r3, r3, #3
    2f3c:	4413      	add	r3, r2
    2f3e:	685b      	ldr	r3, [r3, #4]
    2f40:	2100      	movs	r1, #0
    2f42:	9801      	ldr	r0, [sp, #4]
    2f44:	4798      	blx	r3
}
    2f46:	bf00      	nop
    2f48:	b005      	add	sp, #20
    2f4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2f4e:	bf00      	nop
    2f50:	000087fc 	.word	0x000087fc
    2f54:	0000879c 	.word	0x0000879c
    2f58:	00008d84 	.word	0x00008d84

00002f5c <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2f5c:	b500      	push	{lr}
    2f5e:	b083      	sub	sp, #12
    2f60:	9001      	str	r0, [sp, #4]
    2f62:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2f64:	4b08      	ldr	r3, [pc, #32]	; (2f88 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2f66:	2200      	movs	r2, #0
    2f68:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2f6a:	4b08      	ldr	r3, [pc, #32]	; (2f8c <Clock_Ip_PowerModeChangeNotification+0x30>)
    2f6c:	681b      	ldr	r3, [r3, #0]
    2f6e:	2102      	movs	r1, #2
    2f70:	4618      	mov	r0, r3
    2f72:	f002 fd75 	bl	5a60 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2f76:	9900      	ldr	r1, [sp, #0]
    2f78:	9801      	ldr	r0, [sp, #4]
    2f7a:	f002 fc51 	bl	5820 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2f7e:	bf00      	nop
    2f80:	b003      	add	sp, #12
    2f82:	f85d fb04 	ldr.w	pc, [sp], #4
    2f86:	bf00      	nop
    2f88:	1fff8b10 	.word	0x1fff8b10
    2f8c:	1fff8b44 	.word	0x1fff8b44

00002f90 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2f90:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2f92:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2f96:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2f98:	4b06      	ldr	r3, [pc, #24]	; (2fb4 <Clock_Ip_SetWaitStates+0x24>)
    2f9a:	785b      	ldrb	r3, [r3, #1]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d005      	beq.n	2fac <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2fa0:	9b01      	ldr	r3, [sp, #4]
    2fa2:	3b01      	subs	r3, #1
    2fa4:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d1f9      	bne.n	2fa0 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2fac:	bf00      	nop
    2fae:	b002      	add	sp, #8
    2fb0:	4770      	bx	lr
    2fb2:	bf00      	nop
    2fb4:	1fff8b4c 	.word	0x1fff8b4c

00002fb8 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2fb8:	b500      	push	{lr}
    2fba:	b083      	sub	sp, #12
    2fbc:	9001      	str	r0, [sp, #4]
    2fbe:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2fc0:	4b04      	ldr	r3, [pc, #16]	; (2fd4 <Clock_Ip_ReportClockErrors+0x1c>)
    2fc2:	681b      	ldr	r3, [r3, #0]
    2fc4:	9900      	ldr	r1, [sp, #0]
    2fc6:	9801      	ldr	r0, [sp, #4]
    2fc8:	4798      	blx	r3
}
    2fca:	bf00      	nop
    2fcc:	b003      	add	sp, #12
    2fce:	f85d fb04 	ldr.w	pc, [sp], #4
    2fd2:	bf00      	nop
    2fd4:	1fff8b14 	.word	0x1fff8b14

00002fd8 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2fd8:	b500      	push	{lr}
    2fda:	b085      	sub	sp, #20
    2fdc:	9003      	str	r0, [sp, #12]
    2fde:	9102      	str	r1, [sp, #8]
    2fe0:	9201      	str	r2, [sp, #4]
    2fe2:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2fe4:	2000      	movs	r0, #0
    2fe6:	f7fe ffd0 	bl	1f8a <OsIf_GetCounter>
    2fea:	4602      	mov	r2, r0
    2fec:	9b03      	ldr	r3, [sp, #12]
    2fee:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2ff0:	9b02      	ldr	r3, [sp, #8]
    2ff2:	2200      	movs	r2, #0
    2ff4:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2ff6:	2100      	movs	r1, #0
    2ff8:	9800      	ldr	r0, [sp, #0]
    2ffa:	f7ff f812 	bl	2022 <OsIf_MicrosToTicks>
    2ffe:	4602      	mov	r2, r0
    3000:	9b01      	ldr	r3, [sp, #4]
    3002:	601a      	str	r2, [r3, #0]
}
    3004:	bf00      	nop
    3006:	b005      	add	sp, #20
    3008:	f85d fb04 	ldr.w	pc, [sp], #4

0000300c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    300c:	b500      	push	{lr}
    300e:	b087      	sub	sp, #28
    3010:	9003      	str	r0, [sp, #12]
    3012:	9102      	str	r1, [sp, #8]
    3014:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3016:	2300      	movs	r3, #0
    3018:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    301c:	2100      	movs	r1, #0
    301e:	9803      	ldr	r0, [sp, #12]
    3020:	f7fe ffcc 	bl	1fbc <OsIf_GetElapsed>
    3024:	4602      	mov	r2, r0
    3026:	9b02      	ldr	r3, [sp, #8]
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	441a      	add	r2, r3
    302c:	9b02      	ldr	r3, [sp, #8]
    302e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3030:	9b02      	ldr	r3, [sp, #8]
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	9a01      	ldr	r2, [sp, #4]
    3036:	429a      	cmp	r2, r3
    3038:	d802      	bhi.n	3040 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    303a:	2301      	movs	r3, #1
    303c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3040:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3044:	4618      	mov	r0, r3
    3046:	b007      	add	sp, #28
    3048:	f85d fb04 	ldr.w	pc, [sp], #4

0000304c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    304c:	b082      	sub	sp, #8
    304e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3050:	bf00      	nop
    3052:	b002      	add	sp, #8
    3054:	4770      	bx	lr

00003056 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3056:	b500      	push	{lr}
    3058:	b083      	sub	sp, #12
    305a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    305c:	9b01      	ldr	r3, [sp, #4]
    305e:	2b00      	cmp	r3, #0
    3060:	d002      	beq.n	3068 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3062:	9801      	ldr	r0, [sp, #4]
    3064:	f000 f8ad 	bl	31c2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3068:	bf00      	nop
    306a:	b003      	add	sp, #12
    306c:	f85d fb04 	ldr.w	pc, [sp], #4

00003070 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3070:	b500      	push	{lr}
    3072:	b083      	sub	sp, #12
    3074:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3076:	9b01      	ldr	r3, [sp, #4]
    3078:	2b00      	cmp	r3, #0
    307a:	d002      	beq.n	3082 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    307c:	9801      	ldr	r0, [sp, #4]
    307e:	f000 f8cd 	bl	321c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3082:	bf00      	nop
    3084:	b003      	add	sp, #12
    3086:	f85d fb04 	ldr.w	pc, [sp], #4

0000308a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    308a:	b500      	push	{lr}
    308c:	b083      	sub	sp, #12
    308e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3090:	9b01      	ldr	r3, [sp, #4]
    3092:	2b00      	cmp	r3, #0
    3094:	d002      	beq.n	309c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    3096:	9801      	ldr	r0, [sp, #4]
    3098:	f000 f8ee 	bl	3278 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    309c:	bf00      	nop
    309e:	b003      	add	sp, #12
    30a0:	f85d fb04 	ldr.w	pc, [sp], #4

000030a4 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    30a4:	b500      	push	{lr}
    30a6:	b083      	sub	sp, #12
    30a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30aa:	9b01      	ldr	r3, [sp, #4]
    30ac:	2b00      	cmp	r3, #0
    30ae:	d002      	beq.n	30b6 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    30b0:	9801      	ldr	r0, [sp, #4]
    30b2:	f000 f8f9 	bl	32a8 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30b6:	bf00      	nop
    30b8:	b003      	add	sp, #12
    30ba:	f85d fb04 	ldr.w	pc, [sp], #4

000030be <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    30be:	b500      	push	{lr}
    30c0:	b083      	sub	sp, #12
    30c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30c4:	9b01      	ldr	r3, [sp, #4]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d002      	beq.n	30d0 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    30ca:	9801      	ldr	r0, [sp, #4]
    30cc:	f000 f904 	bl	32d8 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30d0:	bf00      	nop
    30d2:	b003      	add	sp, #12
    30d4:	f85d fb04 	ldr.w	pc, [sp], #4

000030d8 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    30d8:	b500      	push	{lr}
    30da:	b083      	sub	sp, #12
    30dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30de:	9b01      	ldr	r3, [sp, #4]
    30e0:	2b00      	cmp	r3, #0
    30e2:	d002      	beq.n	30ea <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    30e4:	9801      	ldr	r0, [sp, #4]
    30e6:	f000 f90f 	bl	3308 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ea:	bf00      	nop
    30ec:	b003      	add	sp, #12
    30ee:	f85d fb04 	ldr.w	pc, [sp], #4

000030f2 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    30f2:	b500      	push	{lr}
    30f4:	b083      	sub	sp, #12
    30f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30f8:	9b01      	ldr	r3, [sp, #4]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d002      	beq.n	3104 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    30fe:	9801      	ldr	r0, [sp, #4]
    3100:	f000 f91a 	bl	3338 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3104:	bf00      	nop
    3106:	b003      	add	sp, #12
    3108:	f85d fb04 	ldr.w	pc, [sp], #4

0000310c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    310c:	b500      	push	{lr}
    310e:	b083      	sub	sp, #12
    3110:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3112:	9b01      	ldr	r3, [sp, #4]
    3114:	2b00      	cmp	r3, #0
    3116:	d002      	beq.n	311e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3118:	9801      	ldr	r0, [sp, #4]
    311a:	f000 f925 	bl	3368 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    311e:	bf00      	nop
    3120:	b003      	add	sp, #12
    3122:	f85d fb04 	ldr.w	pc, [sp], #4

00003126 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3126:	b500      	push	{lr}
    3128:	b083      	sub	sp, #12
    312a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    312c:	9b01      	ldr	r3, [sp, #4]
    312e:	2b00      	cmp	r3, #0
    3130:	d002      	beq.n	3138 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3132:	9801      	ldr	r0, [sp, #4]
    3134:	f000 f930 	bl	3398 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3138:	bf00      	nop
    313a:	b003      	add	sp, #12
    313c:	f85d fb04 	ldr.w	pc, [sp], #4

00003140 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3140:	b500      	push	{lr}
    3142:	b083      	sub	sp, #12
    3144:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3146:	9b01      	ldr	r3, [sp, #4]
    3148:	2b00      	cmp	r3, #0
    314a:	d002      	beq.n	3152 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    314c:	9801      	ldr	r0, [sp, #4]
    314e:	f000 f93b 	bl	33c8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3152:	bf00      	nop
    3154:	b003      	add	sp, #12
    3156:	f85d fb04 	ldr.w	pc, [sp], #4

0000315a <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    315a:	b500      	push	{lr}
    315c:	b083      	sub	sp, #12
    315e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3160:	9b01      	ldr	r3, [sp, #4]
    3162:	2b00      	cmp	r3, #0
    3164:	d002      	beq.n	316c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3166:	9801      	ldr	r0, [sp, #4]
    3168:	f000 f946 	bl	33f8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    316c:	bf00      	nop
    316e:	b003      	add	sp, #12
    3170:	f85d fb04 	ldr.w	pc, [sp], #4

00003174 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3174:	b500      	push	{lr}
    3176:	b083      	sub	sp, #12
    3178:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    317a:	9b01      	ldr	r3, [sp, #4]
    317c:	2b00      	cmp	r3, #0
    317e:	d002      	beq.n	3186 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3180:	9801      	ldr	r0, [sp, #4]
    3182:	f000 f951 	bl	3428 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3186:	bf00      	nop
    3188:	b003      	add	sp, #12
    318a:	f85d fb04 	ldr.w	pc, [sp], #4

0000318e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    318e:	b500      	push	{lr}
    3190:	b083      	sub	sp, #12
    3192:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3194:	9b01      	ldr	r3, [sp, #4]
    3196:	2b00      	cmp	r3, #0
    3198:	d002      	beq.n	31a0 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    319a:	9801      	ldr	r0, [sp, #4]
    319c:	f000 f95e 	bl	345c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31a0:	bf00      	nop
    31a2:	b003      	add	sp, #12
    31a4:	f85d fb04 	ldr.w	pc, [sp], #4

000031a8 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    31a8:	b500      	push	{lr}
    31aa:	b083      	sub	sp, #12
    31ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31ae:	9b01      	ldr	r3, [sp, #4]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d002      	beq.n	31ba <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    31b4:	9801      	ldr	r0, [sp, #4]
    31b6:	f000 f98b 	bl	34d0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31ba:	bf00      	nop
    31bc:	b003      	add	sp, #12
    31be:	f85d fb04 	ldr.w	pc, [sp], #4

000031c2 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    31c2:	b086      	sub	sp, #24
    31c4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    31c6:	9b01      	ldr	r3, [sp, #4]
    31c8:	681a      	ldr	r2, [r3, #0]
    31ca:	4911      	ldr	r1, [pc, #68]	; (3210 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    31cc:	4613      	mov	r3, r2
    31ce:	00db      	lsls	r3, r3, #3
    31d0:	4413      	add	r3, r2
    31d2:	440b      	add	r3, r1
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    31d8:	9b01      	ldr	r3, [sp, #4]
    31da:	685b      	ldr	r3, [r3, #4]
    31dc:	4a0d      	ldr	r2, [pc, #52]	; (3214 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    31de:	5cd3      	ldrb	r3, [r2, r3]
    31e0:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    31e2:	4a0d      	ldr	r2, [pc, #52]	; (3218 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    31e4:	9b05      	ldr	r3, [sp, #20]
    31e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31ea:	681b      	ldr	r3, [r3, #0]
    31ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    31ee:	9b03      	ldr	r3, [sp, #12]
    31f0:	f023 0307 	bic.w	r3, r3, #7
    31f4:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    31f6:	9a03      	ldr	r2, [sp, #12]
    31f8:	9b04      	ldr	r3, [sp, #16]
    31fa:	4313      	orrs	r3, r2
    31fc:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    31fe:	4a06      	ldr	r2, [pc, #24]	; (3218 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3200:	9b05      	ldr	r3, [sp, #20]
    3202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3206:	9a03      	ldr	r2, [sp, #12]
    3208:	601a      	str	r2, [r3, #0]
}
    320a:	bf00      	nop
    320c:	b006      	add	sp, #24
    320e:	4770      	bx	lr
    3210:	000087fc 	.word	0x000087fc
    3214:	00008bf4 	.word	0x00008bf4
    3218:	00008c38 	.word	0x00008c38

0000321c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    321c:	b086      	sub	sp, #24
    321e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3220:	9b01      	ldr	r3, [sp, #4]
    3222:	681a      	ldr	r2, [r3, #0]
    3224:	4911      	ldr	r1, [pc, #68]	; (326c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3226:	4613      	mov	r3, r2
    3228:	00db      	lsls	r3, r3, #3
    322a:	4413      	add	r3, r2
    322c:	440b      	add	r3, r1
    322e:	781b      	ldrb	r3, [r3, #0]
    3230:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	685b      	ldr	r3, [r3, #4]
    3236:	4a0e      	ldr	r2, [pc, #56]	; (3270 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3238:	5cd3      	ldrb	r3, [r2, r3]
    323a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    323c:	4a0d      	ldr	r2, [pc, #52]	; (3274 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    323e:	9b05      	ldr	r3, [sp, #20]
    3240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3244:	681b      	ldr	r3, [r3, #0]
    3246:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3248:	9b03      	ldr	r3, [sp, #12]
    324a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    324e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3250:	9b04      	ldr	r3, [sp, #16]
    3252:	021b      	lsls	r3, r3, #8
    3254:	9a03      	ldr	r2, [sp, #12]
    3256:	4313      	orrs	r3, r2
    3258:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    325a:	4a06      	ldr	r2, [pc, #24]	; (3274 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    325c:	9b05      	ldr	r3, [sp, #20]
    325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3262:	9a03      	ldr	r2, [sp, #12]
    3264:	601a      	str	r2, [r3, #0]
}
    3266:	bf00      	nop
    3268:	b006      	add	sp, #24
    326a:	4770      	bx	lr
    326c:	000087fc 	.word	0x000087fc
    3270:	00008bf4 	.word	0x00008bf4
    3274:	00008c38 	.word	0x00008c38

00003278 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3278:	b084      	sub	sp, #16
    327a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    327c:	4b09      	ldr	r3, [pc, #36]	; (32a4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    327e:	695b      	ldr	r3, [r3, #20]
    3280:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3282:	9b03      	ldr	r3, [sp, #12]
    3284:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3288:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	685b      	ldr	r3, [r3, #4]
    328e:	3b01      	subs	r3, #1
    3290:	041b      	lsls	r3, r3, #16
    3292:	9a03      	ldr	r2, [sp, #12]
    3294:	4313      	orrs	r3, r2
    3296:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3298:	4a02      	ldr	r2, [pc, #8]	; (32a4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    329a:	9b03      	ldr	r3, [sp, #12]
    329c:	6153      	str	r3, [r2, #20]
}
    329e:	bf00      	nop
    32a0:	b004      	add	sp, #16
    32a2:	4770      	bx	lr
    32a4:	40064000 	.word	0x40064000

000032a8 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32a8:	b084      	sub	sp, #16
    32aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    32ac:	4b09      	ldr	r3, [pc, #36]	; (32d4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    32ae:	695b      	ldr	r3, [r3, #20]
    32b0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    32b2:	9b03      	ldr	r3, [sp, #12]
    32b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    32b8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    32ba:	9b01      	ldr	r3, [sp, #4]
    32bc:	685b      	ldr	r3, [r3, #4]
    32be:	3b01      	subs	r3, #1
    32c0:	011b      	lsls	r3, r3, #4
    32c2:	9a03      	ldr	r2, [sp, #12]
    32c4:	4313      	orrs	r3, r2
    32c6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    32c8:	4a02      	ldr	r2, [pc, #8]	; (32d4 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    32ca:	9b03      	ldr	r3, [sp, #12]
    32cc:	6153      	str	r3, [r2, #20]
}
    32ce:	bf00      	nop
    32d0:	b004      	add	sp, #16
    32d2:	4770      	bx	lr
    32d4:	40064000 	.word	0x40064000

000032d8 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    32d8:	b084      	sub	sp, #16
    32da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    32dc:	4b09      	ldr	r3, [pc, #36]	; (3304 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    32de:	695b      	ldr	r3, [r3, #20]
    32e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    32e2:	9b03      	ldr	r3, [sp, #12]
    32e4:	f023 030f 	bic.w	r3, r3, #15
    32e8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    32ea:	9b01      	ldr	r3, [sp, #4]
    32ec:	685b      	ldr	r3, [r3, #4]
    32ee:	3b01      	subs	r3, #1
    32f0:	9a03      	ldr	r2, [sp, #12]
    32f2:	4313      	orrs	r3, r2
    32f4:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    32f6:	4a03      	ldr	r2, [pc, #12]	; (3304 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    32f8:	9b03      	ldr	r3, [sp, #12]
    32fa:	6153      	str	r3, [r2, #20]
}
    32fc:	bf00      	nop
    32fe:	b004      	add	sp, #16
    3300:	4770      	bx	lr
    3302:	bf00      	nop
    3304:	40064000 	.word	0x40064000

00003308 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3308:	b084      	sub	sp, #16
    330a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    330c:	4b09      	ldr	r3, [pc, #36]	; (3334 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    330e:	699b      	ldr	r3, [r3, #24]
    3310:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3312:	9b03      	ldr	r3, [sp, #12]
    3314:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3318:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    331a:	9b01      	ldr	r3, [sp, #4]
    331c:	685b      	ldr	r3, [r3, #4]
    331e:	3b01      	subs	r3, #1
    3320:	041b      	lsls	r3, r3, #16
    3322:	9a03      	ldr	r2, [sp, #12]
    3324:	4313      	orrs	r3, r2
    3326:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3328:	4a02      	ldr	r2, [pc, #8]	; (3334 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    332a:	9b03      	ldr	r3, [sp, #12]
    332c:	6193      	str	r3, [r2, #24]
}
    332e:	bf00      	nop
    3330:	b004      	add	sp, #16
    3332:	4770      	bx	lr
    3334:	40064000 	.word	0x40064000

00003338 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3338:	b084      	sub	sp, #16
    333a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    333c:	4b09      	ldr	r3, [pc, #36]	; (3364 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    333e:	699b      	ldr	r3, [r3, #24]
    3340:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3342:	9b03      	ldr	r3, [sp, #12]
    3344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3348:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    334a:	9b01      	ldr	r3, [sp, #4]
    334c:	685b      	ldr	r3, [r3, #4]
    334e:	3b01      	subs	r3, #1
    3350:	011b      	lsls	r3, r3, #4
    3352:	9a03      	ldr	r2, [sp, #12]
    3354:	4313      	orrs	r3, r2
    3356:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3358:	4a02      	ldr	r2, [pc, #8]	; (3364 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    335a:	9b03      	ldr	r3, [sp, #12]
    335c:	6193      	str	r3, [r2, #24]
}
    335e:	bf00      	nop
    3360:	b004      	add	sp, #16
    3362:	4770      	bx	lr
    3364:	40064000 	.word	0x40064000

00003368 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3368:	b084      	sub	sp, #16
    336a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    336c:	4b09      	ldr	r3, [pc, #36]	; (3394 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    336e:	699b      	ldr	r3, [r3, #24]
    3370:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3372:	9b03      	ldr	r3, [sp, #12]
    3374:	f023 030f 	bic.w	r3, r3, #15
    3378:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    337a:	9b01      	ldr	r3, [sp, #4]
    337c:	685b      	ldr	r3, [r3, #4]
    337e:	3b01      	subs	r3, #1
    3380:	9a03      	ldr	r2, [sp, #12]
    3382:	4313      	orrs	r3, r2
    3384:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3386:	4a03      	ldr	r2, [pc, #12]	; (3394 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3388:	9b03      	ldr	r3, [sp, #12]
    338a:	6193      	str	r3, [r2, #24]
}
    338c:	bf00      	nop
    338e:	b004      	add	sp, #16
    3390:	4770      	bx	lr
    3392:	bf00      	nop
    3394:	40064000 	.word	0x40064000

00003398 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3398:	b084      	sub	sp, #16
    339a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    339c:	4b09      	ldr	r3, [pc, #36]	; (33c4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    339e:	69db      	ldr	r3, [r3, #28]
    33a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    33a2:	9b03      	ldr	r3, [sp, #12]
    33a4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    33a8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    33aa:	9b01      	ldr	r3, [sp, #4]
    33ac:	685b      	ldr	r3, [r3, #4]
    33ae:	3b01      	subs	r3, #1
    33b0:	041b      	lsls	r3, r3, #16
    33b2:	9a03      	ldr	r2, [sp, #12]
    33b4:	4313      	orrs	r3, r2
    33b6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    33b8:	4a02      	ldr	r2, [pc, #8]	; (33c4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    33ba:	9b03      	ldr	r3, [sp, #12]
    33bc:	61d3      	str	r3, [r2, #28]
}
    33be:	bf00      	nop
    33c0:	b004      	add	sp, #16
    33c2:	4770      	bx	lr
    33c4:	40064000 	.word	0x40064000

000033c8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33c8:	b084      	sub	sp, #16
    33ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    33cc:	4b09      	ldr	r3, [pc, #36]	; (33f4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    33ce:	69db      	ldr	r3, [r3, #28]
    33d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    33d2:	9b03      	ldr	r3, [sp, #12]
    33d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    33d8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    33da:	9b01      	ldr	r3, [sp, #4]
    33dc:	685b      	ldr	r3, [r3, #4]
    33de:	3b01      	subs	r3, #1
    33e0:	011b      	lsls	r3, r3, #4
    33e2:	9a03      	ldr	r2, [sp, #12]
    33e4:	4313      	orrs	r3, r2
    33e6:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    33e8:	4a02      	ldr	r2, [pc, #8]	; (33f4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    33ea:	9b03      	ldr	r3, [sp, #12]
    33ec:	61d3      	str	r3, [r2, #28]
}
    33ee:	bf00      	nop
    33f0:	b004      	add	sp, #16
    33f2:	4770      	bx	lr
    33f4:	40064000 	.word	0x40064000

000033f8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    33f8:	b084      	sub	sp, #16
    33fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    33fc:	4b09      	ldr	r3, [pc, #36]	; (3424 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    33fe:	69db      	ldr	r3, [r3, #28]
    3400:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3402:	9b03      	ldr	r3, [sp, #12]
    3404:	f023 030f 	bic.w	r3, r3, #15
    3408:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    340a:	9b01      	ldr	r3, [sp, #4]
    340c:	685b      	ldr	r3, [r3, #4]
    340e:	3b01      	subs	r3, #1
    3410:	9a03      	ldr	r2, [sp, #12]
    3412:	4313      	orrs	r3, r2
    3414:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3416:	4a03      	ldr	r2, [pc, #12]	; (3424 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3418:	9b03      	ldr	r3, [sp, #12]
    341a:	61d3      	str	r3, [r2, #28]
}
    341c:	bf00      	nop
    341e:	b004      	add	sp, #16
    3420:	4770      	bx	lr
    3422:	bf00      	nop
    3424:	40064000 	.word	0x40064000

00003428 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3428:	b084      	sub	sp, #16
    342a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    342c:	4b0a      	ldr	r3, [pc, #40]	; (3458 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    342e:	685b      	ldr	r3, [r3, #4]
    3430:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3432:	9b03      	ldr	r3, [sp, #12]
    3434:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3438:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    343a:	9b01      	ldr	r3, [sp, #4]
    343c:	685b      	ldr	r3, [r3, #4]
    343e:	3b01      	subs	r3, #1
    3440:	021b      	lsls	r3, r3, #8
    3442:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3446:	9a03      	ldr	r2, [sp, #12]
    3448:	4313      	orrs	r3, r2
    344a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    344c:	4a02      	ldr	r2, [pc, #8]	; (3458 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    344e:	9b03      	ldr	r3, [sp, #12]
    3450:	6053      	str	r3, [r2, #4]
}
    3452:	bf00      	nop
    3454:	b004      	add	sp, #16
    3456:	4770      	bx	lr
    3458:	40048000 	.word	0x40048000

0000345c <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    345c:	b084      	sub	sp, #16
    345e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3460:	4919      	ldr	r1, [pc, #100]	; (34c8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3462:	9b01      	ldr	r3, [sp, #4]
    3464:	681a      	ldr	r2, [r3, #0]
    3466:	4819      	ldr	r0, [pc, #100]	; (34cc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3468:	4613      	mov	r3, r2
    346a:	00db      	lsls	r3, r3, #3
    346c:	4413      	add	r3, r2
    346e:	4403      	add	r3, r0
    3470:	3305      	adds	r3, #5
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3478:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    347a:	9b03      	ldr	r3, [sp, #12]
    347c:	f023 030f 	bic.w	r3, r3, #15
    3480:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3482:	9b01      	ldr	r3, [sp, #4]
    3484:	685b      	ldr	r3, [r3, #4]
    3486:	3b01      	subs	r3, #1
    3488:	f003 0307 	and.w	r3, r3, #7
    348c:	9a03      	ldr	r2, [sp, #12]
    348e:	4313      	orrs	r3, r2
    3490:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3492:	9b01      	ldr	r3, [sp, #4]
    3494:	7a1b      	ldrb	r3, [r3, #8]
    3496:	3b01      	subs	r3, #1
    3498:	00db      	lsls	r3, r3, #3
    349a:	f003 0308 	and.w	r3, r3, #8
    349e:	9a03      	ldr	r2, [sp, #12]
    34a0:	4313      	orrs	r3, r2
    34a2:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    34a4:	4908      	ldr	r1, [pc, #32]	; (34c8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    34a6:	9b01      	ldr	r3, [sp, #4]
    34a8:	681a      	ldr	r2, [r3, #0]
    34aa:	4808      	ldr	r0, [pc, #32]	; (34cc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    34ac:	4613      	mov	r3, r2
    34ae:	00db      	lsls	r3, r3, #3
    34b0:	4413      	add	r3, r2
    34b2:	4403      	add	r3, r0
    34b4:	3305      	adds	r3, #5
    34b6:	781b      	ldrb	r3, [r3, #0]
    34b8:	461a      	mov	r2, r3
    34ba:	9b03      	ldr	r3, [sp, #12]
    34bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    34c0:	bf00      	nop
    34c2:	b004      	add	sp, #16
    34c4:	4770      	bx	lr
    34c6:	bf00      	nop
    34c8:	40065000 	.word	0x40065000
    34cc:	000087fc 	.word	0x000087fc

000034d0 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    34d0:	b084      	sub	sp, #16
    34d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    34d4:	4b10      	ldr	r3, [pc, #64]	; (3518 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    34d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    34d8:	4a0f      	ldr	r2, [pc, #60]	; (3518 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    34da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    34de:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    34e0:	4b0d      	ldr	r3, [pc, #52]	; (3518 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    34e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    34e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    34e6:	9b03      	ldr	r3, [sp, #12]
    34e8:	f023 030f 	bic.w	r3, r3, #15
    34ec:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    34ee:	9b01      	ldr	r3, [sp, #4]
    34f0:	685b      	ldr	r3, [r3, #4]
    34f2:	3b01      	subs	r3, #1
    34f4:	005b      	lsls	r3, r3, #1
    34f6:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    34fa:	9b01      	ldr	r3, [sp, #4]
    34fc:	7a1b      	ldrb	r3, [r3, #8]
    34fe:	3b01      	subs	r3, #1
    3500:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3504:	4313      	orrs	r3, r2
    3506:	9a03      	ldr	r2, [sp, #12]
    3508:	4313      	orrs	r3, r2
    350a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    350c:	4a02      	ldr	r2, [pc, #8]	; (3518 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    350e:	9b03      	ldr	r3, [sp, #12]
    3510:	6693      	str	r3, [r2, #104]	; 0x68
}
    3512:	bf00      	nop
    3514:	b004      	add	sp, #16
    3516:	4770      	bx	lr
    3518:	40048000 	.word	0x40048000

0000351c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    351c:	b082      	sub	sp, #8
    351e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3520:	bf00      	nop
    3522:	b002      	add	sp, #8
    3524:	4770      	bx	lr
	...

00003528 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3528:	b082      	sub	sp, #8
    352a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    352c:	bf00      	nop
    352e:	b002      	add	sp, #8
    3530:	4770      	bx	lr

00003532 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3532:	b082      	sub	sp, #8
    3534:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3536:	bf00      	nop
    3538:	b002      	add	sp, #8
    353a:	4770      	bx	lr

0000353c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    353c:	b500      	push	{lr}
    353e:	b083      	sub	sp, #12
    3540:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	2b00      	cmp	r3, #0
    3546:	d002      	beq.n	354e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3548:	9801      	ldr	r0, [sp, #4]
    354a:	f000 f86a 	bl	3622 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    354e:	bf00      	nop
    3550:	b003      	add	sp, #12
    3552:	f85d fb04 	ldr.w	pc, [sp], #4

00003556 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3556:	b500      	push	{lr}
    3558:	b083      	sub	sp, #12
    355a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    355c:	9b01      	ldr	r3, [sp, #4]
    355e:	2b00      	cmp	r3, #0
    3560:	d002      	beq.n	3568 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3562:	9801      	ldr	r0, [sp, #4]
    3564:	f000 f884 	bl	3670 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3568:	bf00      	nop
    356a:	b003      	add	sp, #12
    356c:	f85d fb04 	ldr.w	pc, [sp], #4

00003570 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3570:	b500      	push	{lr}
    3572:	b089      	sub	sp, #36	; 0x24
    3574:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3576:	2300      	movs	r3, #0
    3578:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    357c:	9b01      	ldr	r3, [sp, #4]
    357e:	2b00      	cmp	r3, #0
    3580:	d031      	beq.n	35e6 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3582:	4b1b      	ldr	r3, [pc, #108]	; (35f0 <Clock_Ip_CompleteSOSC+0x80>)
    3584:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3588:	f003 0301 	and.w	r3, r3, #1
    358c:	2b00      	cmp	r3, #0
    358e:	d02a      	beq.n	35e6 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3590:	aa03      	add	r2, sp, #12
    3592:	a904      	add	r1, sp, #16
    3594:	a805      	add	r0, sp, #20
    3596:	f24c 3350 	movw	r3, #50000	; 0xc350
    359a:	f7ff fd1d 	bl	2fd8 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    359e:	4b14      	ldr	r3, [pc, #80]	; (35f0 <Clock_Ip_CompleteSOSC+0x80>)
    35a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    35a4:	0e1b      	lsrs	r3, r3, #24
    35a6:	f003 0301 	and.w	r3, r3, #1
    35aa:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    35ac:	9a03      	ldr	r2, [sp, #12]
    35ae:	a904      	add	r1, sp, #16
    35b0:	ab05      	add	r3, sp, #20
    35b2:	4618      	mov	r0, r3
    35b4:	f7ff fd2a 	bl	300c <Clock_Ip_TimeoutExpired>
    35b8:	4603      	mov	r3, r0
    35ba:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    35be:	9b06      	ldr	r3, [sp, #24]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d106      	bne.n	35d2 <Clock_Ip_CompleteSOSC+0x62>
    35c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    35c8:	f083 0301 	eor.w	r3, r3, #1
    35cc:	b2db      	uxtb	r3, r3
    35ce:	2b00      	cmp	r3, #0
    35d0:	d1e5      	bne.n	359e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    35d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    35d6:	2b00      	cmp	r3, #0
    35d8:	d005      	beq.n	35e6 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    35da:	9b01      	ldr	r3, [sp, #4]
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	4619      	mov	r1, r3
    35e0:	2001      	movs	r0, #1
    35e2:	f7ff fce9 	bl	2fb8 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    35e6:	bf00      	nop
    35e8:	b009      	add	sp, #36	; 0x24
    35ea:	f85d fb04 	ldr.w	pc, [sp], #4
    35ee:	bf00      	nop
    35f0:	40064000 	.word	0x40064000

000035f4 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    35f4:	b500      	push	{lr}
    35f6:	b083      	sub	sp, #12
    35f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    35fa:	9801      	ldr	r0, [sp, #4]
    35fc:	f000 f8c0 	bl	3780 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3600:	bf00      	nop
    3602:	b003      	add	sp, #12
    3604:	f85d fb04 	ldr.w	pc, [sp], #4

00003608 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3608:	b500      	push	{lr}
    360a:	b083      	sub	sp, #12
    360c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    360e:	9b01      	ldr	r3, [sp, #4]
    3610:	2b00      	cmp	r3, #0
    3612:	d002      	beq.n	361a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3614:	9801      	ldr	r0, [sp, #4]
    3616:	f000 f8c3 	bl	37a0 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    361a:	bf00      	nop
    361c:	b003      	add	sp, #12
    361e:	f85d fb04 	ldr.w	pc, [sp], #4

00003622 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3622:	b082      	sub	sp, #8
    3624:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3626:	4b11      	ldr	r3, [pc, #68]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3628:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    362c:	4a0f      	ldr	r2, [pc, #60]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    362e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3632:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3636:	4b0d      	ldr	r3, [pc, #52]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3638:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    363c:	4a0b      	ldr	r2, [pc, #44]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3642:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3646:	4b09      	ldr	r3, [pc, #36]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3648:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    364c:	4a07      	ldr	r2, [pc, #28]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    364e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3652:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3656:	4b05      	ldr	r3, [pc, #20]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3658:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    365c:	4a03      	ldr	r2, [pc, #12]	; (366c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    365e:	f023 0301 	bic.w	r3, r3, #1
    3662:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3666:	bf00      	nop
    3668:	b002      	add	sp, #8
    366a:	4770      	bx	lr
    366c:	40064000 	.word	0x40064000

00003670 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3670:	b082      	sub	sp, #8
    3672:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3674:	9b01      	ldr	r3, [sp, #4]
    3676:	891b      	ldrh	r3, [r3, #8]
    3678:	2b01      	cmp	r3, #1
    367a:	d174      	bne.n	3766 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    367c:	9b01      	ldr	r3, [sp, #4]
    367e:	7bdb      	ldrb	r3, [r3, #15]
    3680:	2b00      	cmp	r3, #0
    3682:	d002      	beq.n	368a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3684:	2b01      	cmp	r3, #1
    3686:	d009      	beq.n	369c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3688:	e011      	b.n	36ae <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    368a:	4b39      	ldr	r3, [pc, #228]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    368c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3690:	4a37      	ldr	r2, [pc, #220]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3692:	f023 0308 	bic.w	r3, r3, #8
    3696:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    369a:	e008      	b.n	36ae <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    369c:	4b34      	ldr	r3, [pc, #208]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    369e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    36a2:	4a33      	ldr	r2, [pc, #204]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36a4:	f043 0308 	orr.w	r3, r3, #8
    36a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    36ac:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    36ae:	4b30      	ldr	r3, [pc, #192]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    36b4:	4a2e      	ldr	r2, [pc, #184]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    36ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    36be:	9b01      	ldr	r3, [sp, #4]
    36c0:	685b      	ldr	r3, [r3, #4]
    36c2:	4a2c      	ldr	r2, [pc, #176]	; (3774 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    36c4:	4293      	cmp	r3, r2
    36c6:	d90d      	bls.n	36e4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    36c8:	9b01      	ldr	r3, [sp, #4]
    36ca:	685b      	ldr	r3, [r3, #4]
    36cc:	4a2a      	ldr	r2, [pc, #168]	; (3778 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    36ce:	4293      	cmp	r3, r2
    36d0:	d208      	bcs.n	36e4 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    36d2:	4b27      	ldr	r3, [pc, #156]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    36d8:	4a25      	ldr	r2, [pc, #148]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36da:	f043 0320 	orr.w	r3, r3, #32
    36de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    36e2:	e007      	b.n	36f4 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    36e4:	4b22      	ldr	r3, [pc, #136]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    36ea:	4a21      	ldr	r2, [pc, #132]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    36f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    36f4:	9b01      	ldr	r3, [sp, #4]
    36f6:	7b1b      	ldrb	r3, [r3, #12]
    36f8:	2b00      	cmp	r3, #0
    36fa:	d108      	bne.n	370e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    36fc:	4b1c      	ldr	r3, [pc, #112]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    36fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3702:	4a1b      	ldr	r2, [pc, #108]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3704:	f043 0304 	orr.w	r3, r3, #4
    3708:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    370c:	e007      	b.n	371e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    370e:	4b18      	ldr	r3, [pc, #96]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3710:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3714:	4a16      	ldr	r2, [pc, #88]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3716:	f023 0304 	bic.w	r3, r3, #4
    371a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    371e:	9b01      	ldr	r3, [sp, #4]
    3720:	7c1b      	ldrb	r3, [r3, #16]
    3722:	2b02      	cmp	r3, #2
    3724:	d011      	beq.n	374a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3726:	2b02      	cmp	r3, #2
    3728:	dc14      	bgt.n	3754 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    372a:	2b00      	cmp	r3, #0
    372c:	d002      	beq.n	3734 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    372e:	2b01      	cmp	r3, #1
    3730:	d005      	beq.n	373e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3732:	e00f      	b.n	3754 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3734:	4b0e      	ldr	r3, [pc, #56]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3736:	2201      	movs	r2, #1
    3738:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    373c:	e014      	b.n	3768 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    373e:	4b0c      	ldr	r3, [pc, #48]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3740:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3744:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3748:	e00e      	b.n	3768 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    374a:	4b09      	ldr	r3, [pc, #36]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    374c:	4a0b      	ldr	r2, [pc, #44]	; (377c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    374e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3752:	e009      	b.n	3768 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3754:	4b06      	ldr	r3, [pc, #24]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3756:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    375a:	4a05      	ldr	r2, [pc, #20]	; (3770 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    375c:	f043 0301 	orr.w	r3, r3, #1
    3760:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3764:	e000      	b.n	3768 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3766:	bf00      	nop
}
    3768:	bf00      	nop
    376a:	b002      	add	sp, #8
    376c:	4770      	bx	lr
    376e:	bf00      	nop
    3770:	40064000 	.word	0x40064000
    3774:	003d08ff 	.word	0x003d08ff
    3778:	007a1200 	.word	0x007a1200
    377c:	00030001 	.word	0x00030001

00003780 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3780:	b082      	sub	sp, #8
    3782:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3786:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    378a:	4a04      	ldr	r2, [pc, #16]	; (379c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    378c:	f023 0301 	bic.w	r3, r3, #1
    3790:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3794:	bf00      	nop
    3796:	b002      	add	sp, #8
    3798:	4770      	bx	lr
    379a:	bf00      	nop
    379c:	40064000 	.word	0x40064000

000037a0 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    37a0:	b082      	sub	sp, #8
    37a2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    37a4:	9b01      	ldr	r3, [sp, #4]
    37a6:	891b      	ldrh	r3, [r3, #8]
    37a8:	2b01      	cmp	r3, #1
    37aa:	d107      	bne.n	37bc <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    37ac:	4b05      	ldr	r3, [pc, #20]	; (37c4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    37ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    37b2:	4a04      	ldr	r2, [pc, #16]	; (37c4 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    37b4:	f043 0301 	orr.w	r3, r3, #1
    37b8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    37bc:	bf00      	nop
    37be:	b002      	add	sp, #8
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop
    37c4:	40064000 	.word	0x40064000

000037c8 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    37c8:	b082      	sub	sp, #8
    37ca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37cc:	bf00      	nop
    37ce:	b002      	add	sp, #8
    37d0:	4770      	bx	lr

000037d2 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    37d2:	b082      	sub	sp, #8
    37d4:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    37d6:	2300      	movs	r3, #0
}
    37d8:	4618      	mov	r0, r3
    37da:	b002      	add	sp, #8
    37dc:	4770      	bx	lr

000037de <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    37de:	b082      	sub	sp, #8
    37e0:	9001      	str	r0, [sp, #4]
    37e2:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    37e4:	bf00      	nop
    37e6:	b002      	add	sp, #8
    37e8:	4770      	bx	lr
	...

000037ec <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    37ec:	b082      	sub	sp, #8
    37ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37f0:	bf00      	nop
    37f2:	b002      	add	sp, #8
    37f4:	4770      	bx	lr

000037f6 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    37f6:	b082      	sub	sp, #8
    37f8:	9001      	str	r0, [sp, #4]
    37fa:	460b      	mov	r3, r1
    37fc:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3800:	bf00      	nop
    3802:	b002      	add	sp, #8
    3804:	4770      	bx	lr

00003806 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3806:	b500      	push	{lr}
    3808:	b083      	sub	sp, #12
    380a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    380c:	9b01      	ldr	r3, [sp, #4]
    380e:	2b00      	cmp	r3, #0
    3810:	d002      	beq.n	3818 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3812:	9801      	ldr	r0, [sp, #4]
    3814:	f000 f8e7 	bl	39e6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3818:	bf00      	nop
    381a:	b003      	add	sp, #12
    381c:	f85d fb04 	ldr.w	pc, [sp], #4

00003820 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3820:	b500      	push	{lr}
    3822:	b085      	sub	sp, #20
    3824:	9001      	str	r0, [sp, #4]
    3826:	460b      	mov	r3, r1
    3828:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3830:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3834:	2b00      	cmp	r3, #0
    3836:	d003      	beq.n	3840 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3838:	2300      	movs	r3, #0
    383a:	f8ad 300c 	strh.w	r3, [sp, #12]
    383e:	e002      	b.n	3846 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3840:	2301      	movs	r3, #1
    3842:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3846:	ab02      	add	r3, sp, #8
    3848:	4618      	mov	r0, r3
    384a:	f7ff ffdc 	bl	3806 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    384e:	bf00      	nop
    3850:	b005      	add	sp, #20
    3852:	f85d fb04 	ldr.w	pc, [sp], #4

00003856 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3856:	b500      	push	{lr}
    3858:	b083      	sub	sp, #12
    385a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    385c:	9b01      	ldr	r3, [sp, #4]
    385e:	2b00      	cmp	r3, #0
    3860:	d002      	beq.n	3868 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3862:	9801      	ldr	r0, [sp, #4]
    3864:	f000 f8d6 	bl	3a14 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3868:	bf00      	nop
    386a:	b003      	add	sp, #12
    386c:	f85d fb04 	ldr.w	pc, [sp], #4

00003870 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3870:	b500      	push	{lr}
    3872:	b085      	sub	sp, #20
    3874:	9001      	str	r0, [sp, #4]
    3876:	460b      	mov	r3, r1
    3878:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    387c:	9b01      	ldr	r3, [sp, #4]
    387e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3880:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3884:	2b00      	cmp	r3, #0
    3886:	d003      	beq.n	3890 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3888:	2300      	movs	r3, #0
    388a:	f8ad 300c 	strh.w	r3, [sp, #12]
    388e:	e002      	b.n	3896 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3890:	2301      	movs	r3, #1
    3892:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3896:	ab02      	add	r3, sp, #8
    3898:	4618      	mov	r0, r3
    389a:	f7ff ffdc 	bl	3856 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    389e:	bf00      	nop
    38a0:	b005      	add	sp, #20
    38a2:	f85d fb04 	ldr.w	pc, [sp], #4

000038a6 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    38a6:	b500      	push	{lr}
    38a8:	b083      	sub	sp, #12
    38aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ac:	9b01      	ldr	r3, [sp, #4]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d002      	beq.n	38b8 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    38b2:	9801      	ldr	r0, [sp, #4]
    38b4:	f000 f8c6 	bl	3a44 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38b8:	bf00      	nop
    38ba:	b003      	add	sp, #12
    38bc:	f85d fb04 	ldr.w	pc, [sp], #4

000038c0 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    38c0:	b500      	push	{lr}
    38c2:	b085      	sub	sp, #20
    38c4:	9001      	str	r0, [sp, #4]
    38c6:	460b      	mov	r3, r1
    38c8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    38d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d003      	beq.n	38e0 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    38d8:	2300      	movs	r3, #0
    38da:	f8ad 300c 	strh.w	r3, [sp, #12]
    38de:	e002      	b.n	38e6 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    38e0:	2301      	movs	r3, #1
    38e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    38e6:	ab02      	add	r3, sp, #8
    38e8:	4618      	mov	r0, r3
    38ea:	f7ff ffdc 	bl	38a6 <Clock_Ip_ClockSetSimClkoutEnable>
}
    38ee:	bf00      	nop
    38f0:	b005      	add	sp, #20
    38f2:	f85d fb04 	ldr.w	pc, [sp], #4

000038f6 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    38f6:	b500      	push	{lr}
    38f8:	b083      	sub	sp, #12
    38fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38fc:	9b01      	ldr	r3, [sp, #4]
    38fe:	2b00      	cmp	r3, #0
    3900:	d002      	beq.n	3908 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3902:	9801      	ldr	r0, [sp, #4]
    3904:	f000 f8b6 	bl	3a74 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3908:	bf00      	nop
    390a:	b003      	add	sp, #12
    390c:	f85d fb04 	ldr.w	pc, [sp], #4

00003910 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3910:	b500      	push	{lr}
    3912:	b085      	sub	sp, #20
    3914:	9001      	str	r0, [sp, #4]
    3916:	460b      	mov	r3, r1
    3918:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    391c:	9b01      	ldr	r3, [sp, #4]
    391e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3920:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3924:	2b00      	cmp	r3, #0
    3926:	d003      	beq.n	3930 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3928:	2300      	movs	r3, #0
    392a:	f8ad 300c 	strh.w	r3, [sp, #12]
    392e:	e002      	b.n	3936 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3930:	2301      	movs	r3, #1
    3932:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3936:	ab02      	add	r3, sp, #8
    3938:	4618      	mov	r0, r3
    393a:	f7ff ffdc 	bl	38f6 <Clock_Ip_ClockSetPccCgcEnable>
}
    393e:	bf00      	nop
    3940:	b005      	add	sp, #20
    3942:	f85d fb04 	ldr.w	pc, [sp], #4

00003946 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3946:	b500      	push	{lr}
    3948:	b083      	sub	sp, #12
    394a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    394c:	9b01      	ldr	r3, [sp, #4]
    394e:	2b00      	cmp	r3, #0
    3950:	d002      	beq.n	3958 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3952:	9801      	ldr	r0, [sp, #4]
    3954:	f000 f8bc 	bl	3ad0 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3958:	bf00      	nop
    395a:	b003      	add	sp, #12
    395c:	f85d fb04 	ldr.w	pc, [sp], #4

00003960 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3960:	b500      	push	{lr}
    3962:	b085      	sub	sp, #20
    3964:	9001      	str	r0, [sp, #4]
    3966:	460b      	mov	r3, r1
    3968:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3970:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3974:	2b00      	cmp	r3, #0
    3976:	d003      	beq.n	3980 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3978:	2300      	movs	r3, #0
    397a:	f8ad 300c 	strh.w	r3, [sp, #12]
    397e:	e002      	b.n	3986 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3980:	2301      	movs	r3, #1
    3982:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3986:	ab02      	add	r3, sp, #8
    3988:	4618      	mov	r0, r3
    398a:	f7ff ffdc 	bl	3946 <Clock_Ip_ClockSetSimGate>
}
    398e:	bf00      	nop
    3990:	b005      	add	sp, #20
    3992:	f85d fb04 	ldr.w	pc, [sp], #4

00003996 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3996:	b500      	push	{lr}
    3998:	b083      	sub	sp, #12
    399a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    399c:	9b01      	ldr	r3, [sp, #4]
    399e:	2b00      	cmp	r3, #0
    39a0:	d002      	beq.n	39a8 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    39a2:	9801      	ldr	r0, [sp, #4]
    39a4:	f000 f8c0 	bl	3b28 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39a8:	bf00      	nop
    39aa:	b003      	add	sp, #12
    39ac:	f85d fb04 	ldr.w	pc, [sp], #4

000039b0 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    39b0:	b500      	push	{lr}
    39b2:	b085      	sub	sp, #20
    39b4:	9001      	str	r0, [sp, #4]
    39b6:	460b      	mov	r3, r1
    39b8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    39bc:	9b01      	ldr	r3, [sp, #4]
    39be:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    39c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    39c4:	2b00      	cmp	r3, #0
    39c6:	d003      	beq.n	39d0 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    39c8:	2300      	movs	r3, #0
    39ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    39ce:	e002      	b.n	39d6 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    39d0:	2301      	movs	r3, #1
    39d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    39d6:	ab02      	add	r3, sp, #8
    39d8:	4618      	mov	r0, r3
    39da:	f7ff ffdc 	bl	3996 <Clock_Ip_ClockSetSimTraceEnable>
}
    39de:	bf00      	nop
    39e0:	b005      	add	sp, #20
    39e2:	f85d fb04 	ldr.w	pc, [sp], #4

000039e6 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    39e6:	b084      	sub	sp, #16
    39e8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    39ea:	4b09      	ldr	r3, [pc, #36]	; (3a10 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    39ec:	691b      	ldr	r3, [r3, #16]
    39ee:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    39f0:	9b03      	ldr	r3, [sp, #12]
    39f2:	f023 0301 	bic.w	r3, r3, #1
    39f6:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    39f8:	9b01      	ldr	r3, [sp, #4]
    39fa:	889b      	ldrh	r3, [r3, #4]
    39fc:	461a      	mov	r2, r3
    39fe:	9b03      	ldr	r3, [sp, #12]
    3a00:	4313      	orrs	r3, r2
    3a02:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3a04:	4a02      	ldr	r2, [pc, #8]	; (3a10 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3a06:	9b03      	ldr	r3, [sp, #12]
    3a08:	6113      	str	r3, [r2, #16]
}
    3a0a:	bf00      	nop
    3a0c:	b004      	add	sp, #16
    3a0e:	4770      	bx	lr
    3a10:	40048000 	.word	0x40048000

00003a14 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a14:	b084      	sub	sp, #16
    3a16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3a18:	4b09      	ldr	r3, [pc, #36]	; (3a40 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3a1a:	691b      	ldr	r3, [r3, #16]
    3a1c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3a1e:	9b03      	ldr	r3, [sp, #12]
    3a20:	f023 0302 	bic.w	r3, r3, #2
    3a24:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3a26:	9b01      	ldr	r3, [sp, #4]
    3a28:	889b      	ldrh	r3, [r3, #4]
    3a2a:	005b      	lsls	r3, r3, #1
    3a2c:	9a03      	ldr	r2, [sp, #12]
    3a2e:	4313      	orrs	r3, r2
    3a30:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3a32:	4a03      	ldr	r2, [pc, #12]	; (3a40 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3a34:	9b03      	ldr	r3, [sp, #12]
    3a36:	6113      	str	r3, [r2, #16]
}
    3a38:	bf00      	nop
    3a3a:	b004      	add	sp, #16
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop
    3a40:	40048000 	.word	0x40048000

00003a44 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a44:	b084      	sub	sp, #16
    3a46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3a48:	4b09      	ldr	r3, [pc, #36]	; (3a70 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3a4a:	685b      	ldr	r3, [r3, #4]
    3a4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3a4e:	9b03      	ldr	r3, [sp, #12]
    3a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3a54:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3a56:	9b01      	ldr	r3, [sp, #4]
    3a58:	889b      	ldrh	r3, [r3, #4]
    3a5a:	02db      	lsls	r3, r3, #11
    3a5c:	9a03      	ldr	r2, [sp, #12]
    3a5e:	4313      	orrs	r3, r2
    3a60:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3a62:	4a03      	ldr	r2, [pc, #12]	; (3a70 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3a64:	9b03      	ldr	r3, [sp, #12]
    3a66:	6053      	str	r3, [r2, #4]
}
    3a68:	bf00      	nop
    3a6a:	b004      	add	sp, #16
    3a6c:	4770      	bx	lr
    3a6e:	bf00      	nop
    3a70:	40048000 	.word	0x40048000

00003a74 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3a74:	b084      	sub	sp, #16
    3a76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3a78:	4913      	ldr	r1, [pc, #76]	; (3ac8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3a7a:	9b01      	ldr	r3, [sp, #4]
    3a7c:	681a      	ldr	r2, [r3, #0]
    3a7e:	4813      	ldr	r0, [pc, #76]	; (3acc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3a80:	4613      	mov	r3, r2
    3a82:	00db      	lsls	r3, r3, #3
    3a84:	4413      	add	r3, r2
    3a86:	4403      	add	r3, r0
    3a88:	3306      	adds	r3, #6
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3a90:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3a92:	9b03      	ldr	r3, [sp, #12]
    3a94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3a98:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3a9a:	9b01      	ldr	r3, [sp, #4]
    3a9c:	889b      	ldrh	r3, [r3, #4]
    3a9e:	079b      	lsls	r3, r3, #30
    3aa0:	9a03      	ldr	r2, [sp, #12]
    3aa2:	4313      	orrs	r3, r2
    3aa4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3aa6:	4908      	ldr	r1, [pc, #32]	; (3ac8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3aa8:	9b01      	ldr	r3, [sp, #4]
    3aaa:	681a      	ldr	r2, [r3, #0]
    3aac:	4807      	ldr	r0, [pc, #28]	; (3acc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3aae:	4613      	mov	r3, r2
    3ab0:	00db      	lsls	r3, r3, #3
    3ab2:	4413      	add	r3, r2
    3ab4:	4403      	add	r3, r0
    3ab6:	3306      	adds	r3, #6
    3ab8:	781b      	ldrb	r3, [r3, #0]
    3aba:	461a      	mov	r2, r3
    3abc:	9b03      	ldr	r3, [sp, #12]
    3abe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3ac2:	bf00      	nop
    3ac4:	b004      	add	sp, #16
    3ac6:	4770      	bx	lr
    3ac8:	40065000 	.word	0x40065000
    3acc:	000087fc 	.word	0x000087fc

00003ad0 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3ad0:	b086      	sub	sp, #24
    3ad2:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3ad4:	9b01      	ldr	r3, [sp, #4]
    3ad6:	889b      	ldrh	r3, [r3, #4]
    3ad8:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3ada:	9b01      	ldr	r3, [sp, #4]
    3adc:	681a      	ldr	r2, [r3, #0]
    3ade:	4910      	ldr	r1, [pc, #64]	; (3b20 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3ae0:	4613      	mov	r3, r2
    3ae2:	00db      	lsls	r3, r3, #3
    3ae4:	4413      	add	r3, r2
    3ae6:	440b      	add	r3, r1
    3ae8:	3306      	adds	r3, #6
    3aea:	781b      	ldrb	r3, [r3, #0]
    3aec:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3aee:	4b0d      	ldr	r3, [pc, #52]	; (3b24 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3af2:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3af4:	2201      	movs	r2, #1
    3af6:	9b04      	ldr	r3, [sp, #16]
    3af8:	fa02 f303 	lsl.w	r3, r2, r3
    3afc:	43db      	mvns	r3, r3
    3afe:	9a03      	ldr	r2, [sp, #12]
    3b00:	4013      	ands	r3, r2
    3b02:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3b04:	9a05      	ldr	r2, [sp, #20]
    3b06:	9b04      	ldr	r3, [sp, #16]
    3b08:	fa02 f303 	lsl.w	r3, r2, r3
    3b0c:	9a03      	ldr	r2, [sp, #12]
    3b0e:	4313      	orrs	r3, r2
    3b10:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3b12:	4a04      	ldr	r2, [pc, #16]	; (3b24 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3b14:	9b03      	ldr	r3, [sp, #12]
    3b16:	6413      	str	r3, [r2, #64]	; 0x40
}
    3b18:	bf00      	nop
    3b1a:	b006      	add	sp, #24
    3b1c:	4770      	bx	lr
    3b1e:	bf00      	nop
    3b20:	000087fc 	.word	0x000087fc
    3b24:	40048000 	.word	0x40048000

00003b28 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3b28:	b084      	sub	sp, #16
    3b2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3b2c:	4b0a      	ldr	r3, [pc, #40]	; (3b58 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3b30:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3b32:	9b01      	ldr	r3, [sp, #4]
    3b34:	889b      	ldrh	r3, [r3, #4]
    3b36:	2b01      	cmp	r3, #1
    3b38:	d104      	bne.n	3b44 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3b3a:	9b03      	ldr	r3, [sp, #12]
    3b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3b40:	9303      	str	r3, [sp, #12]
    3b42:	e003      	b.n	3b4c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3b44:	9b03      	ldr	r3, [sp, #12]
    3b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3b4a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3b4c:	4a02      	ldr	r2, [pc, #8]	; (3b58 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3b4e:	9b03      	ldr	r3, [sp, #12]
    3b50:	6693      	str	r3, [r2, #104]	; 0x68
}
    3b52:	bf00      	nop
    3b54:	b004      	add	sp, #16
    3b56:	4770      	bx	lr
    3b58:	40048000 	.word	0x40048000

00003b5c <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3b5c:	b082      	sub	sp, #8
    3b5e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3b60:	bf00      	nop
    3b62:	b002      	add	sp, #8
    3b64:	4770      	bx	lr

00003b66 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3b66:	b082      	sub	sp, #8
    3b68:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3b6a:	bf00      	nop
    3b6c:	b002      	add	sp, #8
    3b6e:	4770      	bx	lr

00003b70 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b70:	b500      	push	{lr}
    3b72:	b083      	sub	sp, #12
    3b74:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b76:	9b01      	ldr	r3, [sp, #4]
    3b78:	2b00      	cmp	r3, #0
    3b7a:	d002      	beq.n	3b82 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3b7c:	9801      	ldr	r0, [sp, #4]
    3b7e:	f000 f8d1 	bl	3d24 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b82:	bf00      	nop
    3b84:	b003      	add	sp, #12
    3b86:	f85d fb04 	ldr.w	pc, [sp], #4

00003b8a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3b8a:	b500      	push	{lr}
    3b8c:	b083      	sub	sp, #12
    3b8e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b90:	9b01      	ldr	r3, [sp, #4]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d002      	beq.n	3b9c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3b96:	9801      	ldr	r0, [sp, #4]
    3b98:	f000 f950 	bl	3e3c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b9c:	bf00      	nop
    3b9e:	b003      	add	sp, #12
    3ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba4 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3ba4:	b500      	push	{lr}
    3ba6:	b083      	sub	sp, #12
    3ba8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3baa:	9801      	ldr	r0, [sp, #4]
    3bac:	f000 f98e 	bl	3ecc <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3bb0:	bf00      	nop
    3bb2:	b003      	add	sp, #12
    3bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00003bb8 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3bb8:	b500      	push	{lr}
    3bba:	b083      	sub	sp, #12
    3bbc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bbe:	9b01      	ldr	r3, [sp, #4]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d002      	beq.n	3bca <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3bc4:	9801      	ldr	r0, [sp, #4]
    3bc6:	f000 f999 	bl	3efc <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bca:	bf00      	nop
    3bcc:	b003      	add	sp, #12
    3bce:	f85d fb04 	ldr.w	pc, [sp], #4

00003bd2 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3bd2:	b500      	push	{lr}
    3bd4:	b083      	sub	sp, #12
    3bd6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bd8:	9b01      	ldr	r3, [sp, #4]
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d002      	beq.n	3be4 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3bde:	9801      	ldr	r0, [sp, #4]
    3be0:	f000 f9b0 	bl	3f44 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3be4:	bf00      	nop
    3be6:	b003      	add	sp, #12
    3be8:	f85d fb04 	ldr.w	pc, [sp], #4

00003bec <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3bec:	b500      	push	{lr}
    3bee:	b083      	sub	sp, #12
    3bf0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3bf2:	9801      	ldr	r0, [sp, #4]
    3bf4:	f000 f9ba 	bl	3f6c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3bf8:	bf00      	nop
    3bfa:	b003      	add	sp, #12
    3bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00003c00 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3c00:	b500      	push	{lr}
    3c02:	b083      	sub	sp, #12
    3c04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c06:	9b01      	ldr	r3, [sp, #4]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d002      	beq.n	3c12 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3c0c:	9801      	ldr	r0, [sp, #4]
    3c0e:	f000 f9bd 	bl	3f8c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c12:	bf00      	nop
    3c14:	b003      	add	sp, #12
    3c16:	f85d fb04 	ldr.w	pc, [sp], #4

00003c1a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3c1a:	b500      	push	{lr}
    3c1c:	b083      	sub	sp, #12
    3c1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c20:	9b01      	ldr	r3, [sp, #4]
    3c22:	2b00      	cmp	r3, #0
    3c24:	d002      	beq.n	3c2c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3c26:	9801      	ldr	r0, [sp, #4]
    3c28:	f000 f9d4 	bl	3fd4 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c2c:	bf00      	nop
    3c2e:	b003      	add	sp, #12
    3c30:	f85d fb04 	ldr.w	pc, [sp], #4

00003c34 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3c34:	b500      	push	{lr}
    3c36:	b083      	sub	sp, #12
    3c38:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3c3a:	9801      	ldr	r0, [sp, #4]
    3c3c:	f000 f9de 	bl	3ffc <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3c40:	bf00      	nop
    3c42:	b003      	add	sp, #12
    3c44:	f85d fb04 	ldr.w	pc, [sp], #4

00003c48 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3c48:	b500      	push	{lr}
    3c4a:	b089      	sub	sp, #36	; 0x24
    3c4c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3c4e:	2300      	movs	r3, #0
    3c50:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3c54:	4b20      	ldr	r3, [pc, #128]	; (3cd8 <SetInputSouceSytemClock+0x90>)
    3c56:	695b      	ldr	r3, [r3, #20]
    3c58:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3c5a:	9b06      	ldr	r3, [sp, #24]
    3c5c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3c60:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3c62:	9b01      	ldr	r3, [sp, #4]
    3c64:	061b      	lsls	r3, r3, #24
    3c66:	9a06      	ldr	r2, [sp, #24]
    3c68:	4313      	orrs	r3, r2
    3c6a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3c6c:	4a1a      	ldr	r2, [pc, #104]	; (3cd8 <SetInputSouceSytemClock+0x90>)
    3c6e:	9b06      	ldr	r3, [sp, #24]
    3c70:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c72:	aa02      	add	r2, sp, #8
    3c74:	a903      	add	r1, sp, #12
    3c76:	a804      	add	r0, sp, #16
    3c78:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c7c:	f7ff f9ac 	bl	2fd8 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3c80:	4b15      	ldr	r3, [pc, #84]	; (3cd8 <SetInputSouceSytemClock+0x90>)
    3c82:	691b      	ldr	r3, [r3, #16]
    3c84:	0e1b      	lsrs	r3, r3, #24
    3c86:	f003 030f 	and.w	r3, r3, #15
    3c8a:	9a01      	ldr	r2, [sp, #4]
    3c8c:	429a      	cmp	r2, r3
    3c8e:	bf0c      	ite	eq
    3c90:	2301      	moveq	r3, #1
    3c92:	2300      	movne	r3, #0
    3c94:	b2db      	uxtb	r3, r3
    3c96:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3c98:	9a02      	ldr	r2, [sp, #8]
    3c9a:	a903      	add	r1, sp, #12
    3c9c:	ab04      	add	r3, sp, #16
    3c9e:	4618      	mov	r0, r3
    3ca0:	f7ff f9b4 	bl	300c <Clock_Ip_TimeoutExpired>
    3ca4:	4603      	mov	r3, r0
    3ca6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3caa:	9b05      	ldr	r3, [sp, #20]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d106      	bne.n	3cbe <SetInputSouceSytemClock+0x76>
    3cb0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cb4:	f083 0301 	eor.w	r3, r3, #1
    3cb8:	b2db      	uxtb	r3, r3
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d1e0      	bne.n	3c80 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3cbe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d003      	beq.n	3cce <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3cc6:	2105      	movs	r1, #5
    3cc8:	2001      	movs	r0, #1
    3cca:	f7ff f975 	bl	2fb8 <Clock_Ip_ReportClockErrors>
    }
}
    3cce:	bf00      	nop
    3cd0:	b009      	add	sp, #36	; 0x24
    3cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    3cd6:	bf00      	nop
    3cd8:	40064000 	.word	0x40064000

00003cdc <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3cdc:	b500      	push	{lr}
    3cde:	b083      	sub	sp, #12
    3ce0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	d002      	beq.n	3cee <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3ce8:	9801      	ldr	r0, [sp, #4]
    3cea:	f000 f997 	bl	401c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3cee:	bf00      	nop
    3cf0:	b003      	add	sp, #12
    3cf2:	f85d fb04 	ldr.w	pc, [sp], #4

00003cf6 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3cf6:	b500      	push	{lr}
    3cf8:	b083      	sub	sp, #12
    3cfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cfc:	9b01      	ldr	r3, [sp, #4]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d002      	beq.n	3d08 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3d02:	9801      	ldr	r0, [sp, #4]
    3d04:	f000 fa7e 	bl	4204 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d08:	bf00      	nop
    3d0a:	b003      	add	sp, #12
    3d0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003d10 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3d10:	b500      	push	{lr}
    3d12:	b083      	sub	sp, #12
    3d14:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3d16:	9801      	ldr	r0, [sp, #4]
    3d18:	f000 fab8 	bl	428c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3d1c:	bf00      	nop
    3d1e:	b003      	add	sp, #12
    3d20:	f85d fb04 	ldr.w	pc, [sp], #4

00003d24 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3d24:	b500      	push	{lr}
    3d26:	b08b      	sub	sp, #44	; 0x2c
    3d28:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d2a:	2300      	movs	r3, #0
    3d2c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3d30:	9b01      	ldr	r3, [sp, #4]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d10b      	bne.n	3d4e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3d36:	2305      	movs	r3, #5
    3d38:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3d3a:	2301      	movs	r3, #1
    3d3c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3d40:	2301      	movs	r3, #1
    3d42:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3d46:	2301      	movs	r3, #1
    3d48:	f88d 3010 	strb.w	r3, [sp, #16]
    3d4c:	e00e      	b.n	3d6c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3d4e:	9b01      	ldr	r3, [sp, #4]
    3d50:	681b      	ldr	r3, [r3, #0]
    3d52:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3d54:	9b01      	ldr	r3, [sp, #4]
    3d56:	79db      	ldrb	r3, [r3, #7]
    3d58:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3d5c:	9b01      	ldr	r3, [sp, #4]
    3d5e:	889b      	ldrh	r3, [r3, #4]
    3d60:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3d64:	9b01      	ldr	r3, [sp, #4]
    3d66:	7a1b      	ldrb	r3, [r3, #8]
    3d68:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3d6c:	4b32      	ldr	r3, [pc, #200]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d72:	4a31      	ldr	r2, [pc, #196]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3d7c:	4b2e      	ldr	r3, [pc, #184]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d82:	4a2d      	ldr	r2, [pc, #180]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d84:	f023 0301 	bic.w	r3, r3, #1
    3d88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3d8c:	4b2a      	ldr	r3, [pc, #168]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3d92:	4a29      	ldr	r2, [pc, #164]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3d94:	f023 0304 	bic.w	r3, r3, #4
    3d98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3d9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3da0:	2b01      	cmp	r3, #1
    3da2:	d144      	bne.n	3e2e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3da4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3da8:	4a23      	ldr	r2, [pc, #140]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3daa:	f003 0301 	and.w	r3, r3, #1
    3dae:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3db2:	4b21      	ldr	r3, [pc, #132]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3db8:	4a1f      	ldr	r2, [pc, #124]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3dba:	f043 0301 	orr.w	r3, r3, #1
    3dbe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3dc2:	4b1d      	ldr	r3, [pc, #116]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3dc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3dc8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3dcc:	009b      	lsls	r3, r3, #2
    3dce:	f003 0304 	and.w	r3, r3, #4
    3dd2:	4919      	ldr	r1, [pc, #100]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3dd4:	4313      	orrs	r3, r2
    3dd6:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dda:	aa05      	add	r2, sp, #20
    3ddc:	a906      	add	r1, sp, #24
    3dde:	a807      	add	r0, sp, #28
    3de0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3de4:	f7ff f8f8 	bl	2fd8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3de8:	4b13      	ldr	r3, [pc, #76]	; (3e38 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3dee:	0e1b      	lsrs	r3, r3, #24
    3df0:	f003 0301 	and.w	r3, r3, #1
    3df4:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3df6:	9a05      	ldr	r2, [sp, #20]
    3df8:	a906      	add	r1, sp, #24
    3dfa:	ab07      	add	r3, sp, #28
    3dfc:	4618      	mov	r0, r3
    3dfe:	f7ff f905 	bl	300c <Clock_Ip_TimeoutExpired>
    3e02:	4603      	mov	r3, r0
    3e04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e08:	9b08      	ldr	r3, [sp, #32]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d106      	bne.n	3e1c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3e0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3e12:	f083 0301 	eor.w	r3, r3, #1
    3e16:	b2db      	uxtb	r3, r3
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d1e5      	bne.n	3de8 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3e1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3e20:	2b00      	cmp	r3, #0
    3e22:	d004      	beq.n	3e2e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3e24:	9b02      	ldr	r3, [sp, #8]
    3e26:	4619      	mov	r1, r3
    3e28:	2001      	movs	r0, #1
    3e2a:	f7ff f8c5 	bl	2fb8 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e2e:	bf00      	nop
    3e30:	b00b      	add	sp, #44	; 0x2c
    3e32:	f85d fb04 	ldr.w	pc, [sp], #4
    3e36:	bf00      	nop
    3e38:	40064000 	.word	0x40064000

00003e3c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e3c:	b500      	push	{lr}
    3e3e:	b089      	sub	sp, #36	; 0x24
    3e40:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e42:	2300      	movs	r3, #0
    3e44:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3e48:	4b1f      	ldr	r3, [pc, #124]	; (3ec8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3e4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e4e:	4a1e      	ldr	r2, [pc, #120]	; (3ec8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3e50:	f043 0301 	orr.w	r3, r3, #1
    3e54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3e58:	4b1b      	ldr	r3, [pc, #108]	; (3ec8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e5e:	4a1a      	ldr	r2, [pc, #104]	; (3ec8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3e60:	f043 0304 	orr.w	r3, r3, #4
    3e64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e68:	aa03      	add	r2, sp, #12
    3e6a:	a904      	add	r1, sp, #16
    3e6c:	a805      	add	r0, sp, #20
    3e6e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e72:	f7ff f8b1 	bl	2fd8 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3e76:	4b14      	ldr	r3, [pc, #80]	; (3ec8 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3e7c:	0e1b      	lsrs	r3, r3, #24
    3e7e:	f003 0301 	and.w	r3, r3, #1
    3e82:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e84:	9a03      	ldr	r2, [sp, #12]
    3e86:	a904      	add	r1, sp, #16
    3e88:	ab05      	add	r3, sp, #20
    3e8a:	4618      	mov	r0, r3
    3e8c:	f7ff f8be 	bl	300c <Clock_Ip_TimeoutExpired>
    3e90:	4603      	mov	r3, r0
    3e92:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e96:	9b06      	ldr	r3, [sp, #24]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d106      	bne.n	3eaa <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3e9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ea0:	f083 0301 	eor.w	r3, r3, #1
    3ea4:	b2db      	uxtb	r3, r3
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d1e5      	bne.n	3e76 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3eaa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d005      	beq.n	3ebe <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3eb2:	9b01      	ldr	r3, [sp, #4]
    3eb4:	681b      	ldr	r3, [r3, #0]
    3eb6:	4619      	mov	r1, r3
    3eb8:	2001      	movs	r0, #1
    3eba:	f7ff f87d 	bl	2fb8 <Clock_Ip_ReportClockErrors>
    }
}
    3ebe:	bf00      	nop
    3ec0:	b009      	add	sp, #36	; 0x24
    3ec2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ec6:	bf00      	nop
    3ec8:	40064000 	.word	0x40064000

00003ecc <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3ecc:	b082      	sub	sp, #8
    3ece:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3ed0:	4b09      	ldr	r3, [pc, #36]	; (3ef8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ed6:	4a08      	ldr	r2, [pc, #32]	; (3ef8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ed8:	f023 0301 	bic.w	r3, r3, #1
    3edc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ee0:	4b05      	ldr	r3, [pc, #20]	; (3ef8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ee6:	4a04      	ldr	r2, [pc, #16]	; (3ef8 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ee8:	f023 0304 	bic.w	r3, r3, #4
    3eec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ef0:	bf00      	nop
    3ef2:	b002      	add	sp, #8
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3efc:	b082      	sub	sp, #8
    3efe:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3f00:	4b0f      	ldr	r3, [pc, #60]	; (3f40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f06:	4a0e      	ldr	r2, [pc, #56]	; (3f40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3f08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3f10:	4b0b      	ldr	r3, [pc, #44]	; (3f40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f16:	4a0a      	ldr	r2, [pc, #40]	; (3f40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3f18:	f023 0304 	bic.w	r3, r3, #4
    3f1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3f20:	4b07      	ldr	r3, [pc, #28]	; (3f40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3f22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3f26:	9b01      	ldr	r3, [sp, #4]
    3f28:	7a1b      	ldrb	r3, [r3, #8]
    3f2a:	009b      	lsls	r3, r3, #2
    3f2c:	f003 0304 	and.w	r3, r3, #4
    3f30:	4903      	ldr	r1, [pc, #12]	; (3f40 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3f32:	4313      	orrs	r3, r2
    3f34:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3f38:	bf00      	nop
    3f3a:	b002      	add	sp, #8
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop
    3f40:	40064000 	.word	0x40064000

00003f44 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f44:	b082      	sub	sp, #8
    3f46:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3f48:	9b01      	ldr	r3, [sp, #4]
    3f4a:	889b      	ldrh	r3, [r3, #4]
    3f4c:	2b01      	cmp	r3, #1
    3f4e:	d107      	bne.n	3f60 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3f50:	4b05      	ldr	r3, [pc, #20]	; (3f68 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f56:	4a04      	ldr	r2, [pc, #16]	; (3f68 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3f58:	f043 0304 	orr.w	r3, r3, #4
    3f5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3f60:	bf00      	nop
    3f62:	b002      	add	sp, #8
    3f64:	4770      	bx	lr
    3f66:	bf00      	nop
    3f68:	40064000 	.word	0x40064000

00003f6c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3f6c:	b082      	sub	sp, #8
    3f6e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3f70:	4b05      	ldr	r3, [pc, #20]	; (3f88 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f76:	4a04      	ldr	r2, [pc, #16]	; (3f88 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3f78:	f023 0304 	bic.w	r3, r3, #4
    3f7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3f80:	bf00      	nop
    3f82:	b002      	add	sp, #8
    3f84:	4770      	bx	lr
    3f86:	bf00      	nop
    3f88:	40064000 	.word	0x40064000

00003f8c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f8c:	b082      	sub	sp, #8
    3f8e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3f90:	4b0f      	ldr	r3, [pc, #60]	; (3fd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3f96:	4a0e      	ldr	r2, [pc, #56]	; (3fd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3f98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f9c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3fa0:	4b0b      	ldr	r3, [pc, #44]	; (3fd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fa6:	4a0a      	ldr	r2, [pc, #40]	; (3fd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3fa8:	f023 0302 	bic.w	r3, r3, #2
    3fac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3fb0:	4b07      	ldr	r3, [pc, #28]	; (3fd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3fb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3fb6:	9b01      	ldr	r3, [sp, #4]
    3fb8:	7a5b      	ldrb	r3, [r3, #9]
    3fba:	005b      	lsls	r3, r3, #1
    3fbc:	f003 0302 	and.w	r3, r3, #2
    3fc0:	4903      	ldr	r1, [pc, #12]	; (3fd0 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3fc2:	4313      	orrs	r3, r2
    3fc4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3fc8:	bf00      	nop
    3fca:	b002      	add	sp, #8
    3fcc:	4770      	bx	lr
    3fce:	bf00      	nop
    3fd0:	40064000 	.word	0x40064000

00003fd4 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3fd4:	b082      	sub	sp, #8
    3fd6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3fd8:	9b01      	ldr	r3, [sp, #4]
    3fda:	889b      	ldrh	r3, [r3, #4]
    3fdc:	2b01      	cmp	r3, #1
    3fde:	d107      	bne.n	3ff0 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3fe0:	4b05      	ldr	r3, [pc, #20]	; (3ff8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3fe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fe6:	4a04      	ldr	r2, [pc, #16]	; (3ff8 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3fe8:	f043 0302 	orr.w	r3, r3, #2
    3fec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ff0:	bf00      	nop
    3ff2:	b002      	add	sp, #8
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop
    3ff8:	40064000 	.word	0x40064000

00003ffc <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3ffc:	b082      	sub	sp, #8
    3ffe:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4000:	4b05      	ldr	r3, [pc, #20]	; (4018 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4006:	4a04      	ldr	r2, [pc, #16]	; (4018 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4008:	f023 0302 	bic.w	r3, r3, #2
    400c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4010:	bf00      	nop
    4012:	b002      	add	sp, #8
    4014:	4770      	bx	lr
    4016:	bf00      	nop
    4018:	40064000 	.word	0x40064000

0000401c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    401c:	b500      	push	{lr}
    401e:	b08b      	sub	sp, #44	; 0x2c
    4020:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4022:	9b01      	ldr	r3, [sp, #4]
    4024:	681a      	ldr	r2, [r3, #0]
    4026:	4975      	ldr	r1, [pc, #468]	; (41fc <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4028:	4613      	mov	r3, r2
    402a:	00db      	lsls	r3, r3, #3
    402c:	4413      	add	r3, r2
    402e:	440b      	add	r3, r1
    4030:	781b      	ldrb	r3, [r3, #0]
    4032:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4034:	2300      	movs	r3, #0
    4036:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    403a:	2300      	movs	r3, #0
    403c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4040:	4b6f      	ldr	r3, [pc, #444]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4046:	4a6e      	ldr	r2, [pc, #440]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4048:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    404c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4050:	4b6b      	ldr	r3, [pc, #428]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4052:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    405a:	2b00      	cmp	r3, #0
    405c:	d07d      	beq.n	415a <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    405e:	9b01      	ldr	r3, [sp, #4]
    4060:	79db      	ldrb	r3, [r3, #7]
    4062:	461a      	mov	r2, r3
    4064:	4b66      	ldr	r3, [pc, #408]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4066:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    406a:	f003 0303 	and.w	r3, r3, #3
    406e:	429a      	cmp	r2, r3
    4070:	d10b      	bne.n	408a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4072:	9b01      	ldr	r3, [sp, #4]
    4074:	799b      	ldrb	r3, [r3, #6]
    4076:	461a      	mov	r2, r3
    4078:	4b61      	ldr	r3, [pc, #388]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    407a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    407e:	08db      	lsrs	r3, r3, #3
    4080:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4084:	429a      	cmp	r2, r3
    4086:	f000 80b4 	beq.w	41f2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    408a:	4b5d      	ldr	r3, [pc, #372]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    408c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4090:	f003 0301 	and.w	r3, r3, #1
    4094:	2b00      	cmp	r3, #0
    4096:	d105      	bne.n	40a4 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4098:	2301      	movs	r3, #1
    409a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    409e:	2000      	movs	r0, #0
    40a0:	f7ff fd66 	bl	3b70 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    40a4:	2002      	movs	r0, #2
    40a6:	f7ff fdcf 	bl	3c48 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    40aa:	4b55      	ldr	r3, [pc, #340]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40b0:	4a53      	ldr	r2, [pc, #332]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40b2:	f023 0301 	bic.w	r3, r3, #1
    40b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    40ba:	9b01      	ldr	r3, [sp, #4]
    40bc:	889b      	ldrh	r3, [r3, #4]
    40be:	2b01      	cmp	r3, #1
    40c0:	f040 8097 	bne.w	41f2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    40c4:	9b01      	ldr	r3, [sp, #4]
    40c6:	79db      	ldrb	r3, [r3, #7]
    40c8:	4a4d      	ldr	r2, [pc, #308]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40ca:	f003 0303 	and.w	r3, r3, #3
    40ce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    40d2:	4b4b      	ldr	r3, [pc, #300]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40d4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    40d8:	9b01      	ldr	r3, [sp, #4]
    40da:	799b      	ldrb	r3, [r3, #6]
    40dc:	00db      	lsls	r3, r3, #3
    40de:	f003 0308 	and.w	r3, r3, #8
    40e2:	4313      	orrs	r3, r2
    40e4:	4a46      	ldr	r2, [pc, #280]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40e6:	f043 0301 	orr.w	r3, r3, #1
    40ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40ee:	aa03      	add	r2, sp, #12
    40f0:	a904      	add	r1, sp, #16
    40f2:	a805      	add	r0, sp, #20
    40f4:	f24c 3350 	movw	r3, #50000	; 0xc350
    40f8:	f7fe ff6e 	bl	2fd8 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    40fc:	4b40      	ldr	r3, [pc, #256]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    40fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4102:	0e1b      	lsrs	r3, r3, #24
    4104:	f003 0301 	and.w	r3, r3, #1
    4108:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    410a:	9a03      	ldr	r2, [sp, #12]
    410c:	a904      	add	r1, sp, #16
    410e:	ab05      	add	r3, sp, #20
    4110:	4618      	mov	r0, r3
    4112:	f7fe ff7b 	bl	300c <Clock_Ip_TimeoutExpired>
    4116:	4603      	mov	r3, r0
    4118:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    411c:	9b06      	ldr	r3, [sp, #24]
    411e:	2b00      	cmp	r3, #0
    4120:	d106      	bne.n	4130 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4122:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4126:	f083 0301 	eor.w	r3, r3, #1
    412a:	b2db      	uxtb	r3, r3
    412c:	2b00      	cmp	r3, #0
    412e:	d1e5      	bne.n	40fc <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4130:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4134:	2b00      	cmp	r3, #0
    4136:	d005      	beq.n	4144 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4138:	9b01      	ldr	r3, [sp, #4]
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	4619      	mov	r1, r3
    413e:	2001      	movs	r0, #1
    4140:	f7fe ff3a 	bl	2fb8 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4144:	2003      	movs	r0, #3
    4146:	f7ff fd7f 	bl	3c48 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    414a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    414e:	2b00      	cmp	r3, #0
    4150:	d04f      	beq.n	41f2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4152:	2002      	movs	r0, #2
    4154:	f7ff fd26 	bl	3ba4 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4158:	e04b      	b.n	41f2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    415a:	4b29      	ldr	r3, [pc, #164]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    415c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4160:	4a27      	ldr	r2, [pc, #156]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4162:	f023 0301 	bic.w	r3, r3, #1
    4166:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    416a:	9b01      	ldr	r3, [sp, #4]
    416c:	889b      	ldrh	r3, [r3, #4]
    416e:	2b01      	cmp	r3, #1
    4170:	d13f      	bne.n	41f2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4172:	9b01      	ldr	r3, [sp, #4]
    4174:	79db      	ldrb	r3, [r3, #7]
    4176:	4a22      	ldr	r2, [pc, #136]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4178:	f003 0303 	and.w	r3, r3, #3
    417c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4180:	4b1f      	ldr	r3, [pc, #124]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4182:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4186:	9b01      	ldr	r3, [sp, #4]
    4188:	799b      	ldrb	r3, [r3, #6]
    418a:	00db      	lsls	r3, r3, #3
    418c:	f003 0308 	and.w	r3, r3, #8
    4190:	4313      	orrs	r3, r2
    4192:	4a1b      	ldr	r2, [pc, #108]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4194:	f043 0301 	orr.w	r3, r3, #1
    4198:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    419c:	aa03      	add	r2, sp, #12
    419e:	a904      	add	r1, sp, #16
    41a0:	a805      	add	r0, sp, #20
    41a2:	f24c 3350 	movw	r3, #50000	; 0xc350
    41a6:	f7fe ff17 	bl	2fd8 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    41aa:	4b15      	ldr	r3, [pc, #84]	; (4200 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    41ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41b0:	0e1b      	lsrs	r3, r3, #24
    41b2:	f003 0301 	and.w	r3, r3, #1
    41b6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    41b8:	9a03      	ldr	r2, [sp, #12]
    41ba:	a904      	add	r1, sp, #16
    41bc:	ab05      	add	r3, sp, #20
    41be:	4618      	mov	r0, r3
    41c0:	f7fe ff24 	bl	300c <Clock_Ip_TimeoutExpired>
    41c4:	4603      	mov	r3, r0
    41c6:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    41ca:	9b06      	ldr	r3, [sp, #24]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d106      	bne.n	41de <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    41d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    41d4:	f083 0301 	eor.w	r3, r3, #1
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b00      	cmp	r3, #0
    41dc:	d1e5      	bne.n	41aa <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    41de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d005      	beq.n	41f2 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    41e6:	9b01      	ldr	r3, [sp, #4]
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	4619      	mov	r1, r3
    41ec:	2001      	movs	r0, #1
    41ee:	f7fe fee3 	bl	2fb8 <Clock_Ip_ReportClockErrors>
}
    41f2:	bf00      	nop
    41f4:	b00b      	add	sp, #44	; 0x2c
    41f6:	f85d fb04 	ldr.w	pc, [sp], #4
    41fa:	bf00      	nop
    41fc:	000087fc 	.word	0x000087fc
    4200:	40064000 	.word	0x40064000

00004204 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4204:	b500      	push	{lr}
    4206:	b089      	sub	sp, #36	; 0x24
    4208:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    420a:	2300      	movs	r3, #0
    420c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4210:	9b01      	ldr	r3, [sp, #4]
    4212:	889b      	ldrh	r3, [r3, #4]
    4214:	2b01      	cmp	r3, #1
    4216:	d132      	bne.n	427e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4218:	4b1b      	ldr	r3, [pc, #108]	; (4288 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    421a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    421e:	4a1a      	ldr	r2, [pc, #104]	; (4288 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4220:	f043 0301 	orr.w	r3, r3, #1
    4224:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4228:	aa03      	add	r2, sp, #12
    422a:	a904      	add	r1, sp, #16
    422c:	a805      	add	r0, sp, #20
    422e:	f24c 3350 	movw	r3, #50000	; 0xc350
    4232:	f7fe fed1 	bl	2fd8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4236:	4b14      	ldr	r3, [pc, #80]	; (4288 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4238:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    423c:	0e1b      	lsrs	r3, r3, #24
    423e:	f003 0301 	and.w	r3, r3, #1
    4242:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4244:	9a03      	ldr	r2, [sp, #12]
    4246:	a904      	add	r1, sp, #16
    4248:	ab05      	add	r3, sp, #20
    424a:	4618      	mov	r0, r3
    424c:	f7fe fede 	bl	300c <Clock_Ip_TimeoutExpired>
    4250:	4603      	mov	r3, r0
    4252:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4256:	9b06      	ldr	r3, [sp, #24]
    4258:	2b00      	cmp	r3, #0
    425a:	d106      	bne.n	426a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    425c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4260:	f083 0301 	eor.w	r3, r3, #1
    4264:	b2db      	uxtb	r3, r3
    4266:	2b00      	cmp	r3, #0
    4268:	d1e5      	bne.n	4236 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    426a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    426e:	2b00      	cmp	r3, #0
    4270:	d005      	beq.n	427e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4272:	9b01      	ldr	r3, [sp, #4]
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	4619      	mov	r1, r3
    4278:	2001      	movs	r0, #1
    427a:	f7fe fe9d 	bl	2fb8 <Clock_Ip_ReportClockErrors>
        }
    }
}
    427e:	bf00      	nop
    4280:	b009      	add	sp, #36	; 0x24
    4282:	f85d fb04 	ldr.w	pc, [sp], #4
    4286:	bf00      	nop
    4288:	40064000 	.word	0x40064000

0000428c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    428c:	b082      	sub	sp, #8
    428e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4290:	4b05      	ldr	r3, [pc, #20]	; (42a8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4296:	4a04      	ldr	r2, [pc, #16]	; (42a8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4298:	f023 0301 	bic.w	r3, r3, #1
    429c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    42a0:	bf00      	nop
    42a2:	b002      	add	sp, #8
    42a4:	4770      	bx	lr
    42a6:	bf00      	nop
    42a8:	40064000 	.word	0x40064000

000042ac <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    42ac:	b082      	sub	sp, #8
    42ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    42b0:	bf00      	nop
    42b2:	b002      	add	sp, #8
    42b4:	4770      	bx	lr

000042b6 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    42b6:	b082      	sub	sp, #8
    42b8:	9001      	str	r0, [sp, #4]
    42ba:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    42bc:	bf00      	nop
    42be:	b002      	add	sp, #8
    42c0:	4770      	bx	lr

000042c2 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    42c2:	b082      	sub	sp, #8
    42c4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    42c6:	bf00      	nop
    42c8:	b002      	add	sp, #8
    42ca:	4770      	bx	lr

000042cc <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    42cc:	b082      	sub	sp, #8
    42ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    42d0:	bf00      	nop
    42d2:	b002      	add	sp, #8
    42d4:	4770      	bx	lr

000042d6 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    42d6:	b082      	sub	sp, #8
    42d8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    42da:	2302      	movs	r3, #2
}
    42dc:	4618      	mov	r0, r3
    42de:	b002      	add	sp, #8
    42e0:	4770      	bx	lr

000042e2 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    42e2:	b082      	sub	sp, #8
    42e4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    42e6:	bf00      	nop
    42e8:	b002      	add	sp, #8
    42ea:	4770      	bx	lr

000042ec <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    42ec:	b500      	push	{lr}
    42ee:	b083      	sub	sp, #12
    42f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42f2:	9b01      	ldr	r3, [sp, #4]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d002      	beq.n	42fe <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    42f8:	9801      	ldr	r0, [sp, #4]
    42fa:	f000 f870 	bl	43de <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42fe:	bf00      	nop
    4300:	b003      	add	sp, #12
    4302:	f85d fb04 	ldr.w	pc, [sp], #4

00004306 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4306:	b500      	push	{lr}
    4308:	b083      	sub	sp, #12
    430a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    430c:	9b01      	ldr	r3, [sp, #4]
    430e:	2b00      	cmp	r3, #0
    4310:	d002      	beq.n	4318 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4312:	9801      	ldr	r0, [sp, #4]
    4314:	f000 f89a 	bl	444c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4318:	bf00      	nop
    431a:	b003      	add	sp, #12
    431c:	f85d fb04 	ldr.w	pc, [sp], #4

00004320 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4320:	b500      	push	{lr}
    4322:	b089      	sub	sp, #36	; 0x24
    4324:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4326:	2301      	movs	r3, #1
    4328:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    432a:	2300      	movs	r3, #0
    432c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4330:	4b1e      	ldr	r3, [pc, #120]	; (43ac <Clock_Ip_CompleteSpll+0x8c>)
    4332:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4336:	f003 0301 	and.w	r3, r3, #1
    433a:	2b00      	cmp	r3, #0
    433c:	d02f      	beq.n	439e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    433e:	aa02      	add	r2, sp, #8
    4340:	a903      	add	r1, sp, #12
    4342:	a804      	add	r0, sp, #16
    4344:	f24c 3350 	movw	r3, #50000	; 0xc350
    4348:	f7fe fe46 	bl	2fd8 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    434c:	4b17      	ldr	r3, [pc, #92]	; (43ac <Clock_Ip_CompleteSpll+0x8c>)
    434e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4352:	0e1b      	lsrs	r3, r3, #24
    4354:	f003 0301 	and.w	r3, r3, #1
    4358:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    435a:	9a02      	ldr	r2, [sp, #8]
    435c:	a903      	add	r1, sp, #12
    435e:	ab04      	add	r3, sp, #16
    4360:	4618      	mov	r0, r3
    4362:	f7fe fe53 	bl	300c <Clock_Ip_TimeoutExpired>
    4366:	4603      	mov	r3, r0
    4368:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    436c:	9b05      	ldr	r3, [sp, #20]
    436e:	2b00      	cmp	r3, #0
    4370:	d106      	bne.n	4380 <Clock_Ip_CompleteSpll+0x60>
    4372:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4376:	f083 0301 	eor.w	r3, r3, #1
    437a:	b2db      	uxtb	r3, r3
    437c:	2b00      	cmp	r3, #0
    437e:	d1e5      	bne.n	434c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4380:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4384:	f083 0301 	eor.w	r3, r3, #1
    4388:	b2db      	uxtb	r3, r3
    438a:	2b00      	cmp	r3, #0
    438c:	d002      	beq.n	4394 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    438e:	2302      	movs	r3, #2
    4390:	9307      	str	r3, [sp, #28]
    4392:	e006      	b.n	43a2 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4394:	9901      	ldr	r1, [sp, #4]
    4396:	2001      	movs	r0, #1
    4398:	f7fe fe0e 	bl	2fb8 <Clock_Ip_ReportClockErrors>
    439c:	e001      	b.n	43a2 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    439e:	2300      	movs	r3, #0
    43a0:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    43a2:	9b07      	ldr	r3, [sp, #28]
}
    43a4:	4618      	mov	r0, r3
    43a6:	b009      	add	sp, #36	; 0x24
    43a8:	f85d fb04 	ldr.w	pc, [sp], #4
    43ac:	40064000 	.word	0x40064000

000043b0 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    43b0:	b500      	push	{lr}
    43b2:	b083      	sub	sp, #12
    43b4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    43b6:	9801      	ldr	r0, [sp, #4]
    43b8:	f000 f886 	bl	44c8 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    43bc:	bf00      	nop
    43be:	b003      	add	sp, #12
    43c0:	f85d fb04 	ldr.w	pc, [sp], #4

000043c4 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    43c4:	b500      	push	{lr}
    43c6:	b083      	sub	sp, #12
    43c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43ca:	9b01      	ldr	r3, [sp, #4]
    43cc:	2b00      	cmp	r3, #0
    43ce:	d002      	beq.n	43d6 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    43d0:	9801      	ldr	r0, [sp, #4]
    43d2:	f000 f891 	bl	44f8 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43d6:	bf00      	nop
    43d8:	b003      	add	sp, #12
    43da:	f85d fb04 	ldr.w	pc, [sp], #4

000043de <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    43de:	b082      	sub	sp, #8
    43e0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    43e2:	4b19      	ldr	r3, [pc, #100]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    43e4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    43e8:	4a17      	ldr	r2, [pc, #92]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    43ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    43ee:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    43f2:	4b15      	ldr	r3, [pc, #84]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    43f4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    43f8:	4a13      	ldr	r2, [pc, #76]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    43fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    43fe:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4402:	4b11      	ldr	r3, [pc, #68]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4404:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4408:	4a0f      	ldr	r2, [pc, #60]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    440a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    440e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4412:	4b0d      	ldr	r3, [pc, #52]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4414:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4418:	4a0b      	ldr	r2, [pc, #44]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    441a:	f023 0301 	bic.w	r3, r3, #1
    441e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4422:	4b09      	ldr	r3, [pc, #36]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4424:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4428:	4a07      	ldr	r2, [pc, #28]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    442a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    442e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4432:	4b05      	ldr	r3, [pc, #20]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4434:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4438:	4a03      	ldr	r2, [pc, #12]	; (4448 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    443a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    443e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4442:	bf00      	nop
    4444:	b002      	add	sp, #8
    4446:	4770      	bx	lr
    4448:	40064000 	.word	0x40064000

0000444c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    444c:	b082      	sub	sp, #8
    444e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4450:	9b01      	ldr	r3, [sp, #4]
    4452:	889b      	ldrh	r3, [r3, #4]
    4454:	2b01      	cmp	r3, #1
    4456:	d12f      	bne.n	44b8 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4458:	4b1a      	ldr	r3, [pc, #104]	; (44c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    445a:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	7b5b      	ldrb	r3, [r3, #13]
    4462:	3b01      	subs	r3, #1
    4464:	021b      	lsls	r3, r3, #8
    4466:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    446a:	9b01      	ldr	r3, [sp, #4]
    446c:	7d1b      	ldrb	r3, [r3, #20]
    446e:	3b10      	subs	r3, #16
    4470:	041b      	lsls	r3, r3, #16
    4472:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4476:	430b      	orrs	r3, r1
    4478:	4912      	ldr	r1, [pc, #72]	; (44c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    447a:	4313      	orrs	r3, r2
    447c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4480:	9b01      	ldr	r3, [sp, #4]
    4482:	7fdb      	ldrb	r3, [r3, #31]
    4484:	2b02      	cmp	r3, #2
    4486:	d011      	beq.n	44ac <Clock_Ip_SetSpll_TrustedCall+0x60>
    4488:	2b02      	cmp	r3, #2
    448a:	dc17      	bgt.n	44bc <Clock_Ip_SetSpll_TrustedCall+0x70>
    448c:	2b00      	cmp	r3, #0
    448e:	d002      	beq.n	4496 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4490:	2b01      	cmp	r3, #1
    4492:	d005      	beq.n	44a0 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4494:	e012      	b.n	44bc <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4496:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4498:	2200      	movs	r2, #0
    449a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    449e:	e00e      	b.n	44be <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    44a0:	4b08      	ldr	r3, [pc, #32]	; (44c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    44a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    44a6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    44aa:	e008      	b.n	44be <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    44ac:	4b05      	ldr	r3, [pc, #20]	; (44c4 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    44ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    44b2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    44b6:	e002      	b.n	44be <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    44b8:	bf00      	nop
    44ba:	e000      	b.n	44be <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    44bc:	bf00      	nop
}
    44be:	bf00      	nop
    44c0:	b002      	add	sp, #8
    44c2:	4770      	bx	lr
    44c4:	40064000 	.word	0x40064000

000044c8 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    44c8:	b082      	sub	sp, #8
    44ca:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    44cc:	4b09      	ldr	r3, [pc, #36]	; (44f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    44ce:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    44d2:	4a08      	ldr	r2, [pc, #32]	; (44f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    44d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    44d8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    44dc:	4b05      	ldr	r3, [pc, #20]	; (44f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    44de:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    44e2:	4a04      	ldr	r2, [pc, #16]	; (44f4 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    44e4:	f023 0301 	bic.w	r3, r3, #1
    44e8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    44ec:	bf00      	nop
    44ee:	b002      	add	sp, #8
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop
    44f4:	40064000 	.word	0x40064000

000044f8 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    44f8:	b082      	sub	sp, #8
    44fa:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    44fc:	9b01      	ldr	r3, [sp, #4]
    44fe:	889b      	ldrh	r3, [r3, #4]
    4500:	2b01      	cmp	r3, #1
    4502:	d107      	bne.n	4514 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4504:	4b05      	ldr	r3, [pc, #20]	; (451c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4506:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    450a:	4a04      	ldr	r2, [pc, #16]	; (451c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    450c:	f043 0301 	orr.w	r3, r3, #1
    4510:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4514:	bf00      	nop
    4516:	b002      	add	sp, #8
    4518:	4770      	bx	lr
    451a:	bf00      	nop
    451c:	40064000 	.word	0x40064000

00004520 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4520:	b082      	sub	sp, #8
    4522:	9001      	str	r0, [sp, #4]
    4524:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4526:	bf00      	nop
    4528:	b002      	add	sp, #8
    452a:	4770      	bx	lr

0000452c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    452c:	b082      	sub	sp, #8
    452e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4530:	bf00      	nop
    4532:	b002      	add	sp, #8
    4534:	4770      	bx	lr

00004536 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4536:	b500      	push	{lr}
    4538:	b083      	sub	sp, #12
    453a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    453c:	9b01      	ldr	r3, [sp, #4]
    453e:	2b00      	cmp	r3, #0
    4540:	d002      	beq.n	4548 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4542:	9801      	ldr	r0, [sp, #4]
    4544:	f000 f8ee 	bl	4724 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4548:	bf00      	nop
    454a:	b003      	add	sp, #12
    454c:	f85d fb04 	ldr.w	pc, [sp], #4

00004550 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4550:	b500      	push	{lr}
    4552:	b083      	sub	sp, #12
    4554:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4556:	9b01      	ldr	r3, [sp, #4]
    4558:	2b00      	cmp	r3, #0
    455a:	d002      	beq.n	4562 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    455c:	9801      	ldr	r0, [sp, #4]
    455e:	f000 f8ff 	bl	4760 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4562:	bf00      	nop
    4564:	b003      	add	sp, #12
    4566:	f85d fb04 	ldr.w	pc, [sp], #4

0000456a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    456a:	b500      	push	{lr}
    456c:	b083      	sub	sp, #12
    456e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4570:	9b01      	ldr	r3, [sp, #4]
    4572:	2b00      	cmp	r3, #0
    4574:	d002      	beq.n	457c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4576:	9801      	ldr	r0, [sp, #4]
    4578:	f000 f912 	bl	47a0 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    457c:	bf00      	nop
    457e:	b003      	add	sp, #12
    4580:	f85d fb04 	ldr.w	pc, [sp], #4

00004584 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4584:	b500      	push	{lr}
    4586:	b083      	sub	sp, #12
    4588:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    458a:	9b01      	ldr	r3, [sp, #4]
    458c:	2b00      	cmp	r3, #0
    458e:	d002      	beq.n	4596 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4590:	9801      	ldr	r0, [sp, #4]
    4592:	f000 f925 	bl	47e0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4596:	bf00      	nop
    4598:	b003      	add	sp, #12
    459a:	f85d fb04 	ldr.w	pc, [sp], #4

0000459e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    459e:	b500      	push	{lr}
    45a0:	b083      	sub	sp, #12
    45a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45a4:	9b01      	ldr	r3, [sp, #4]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d002      	beq.n	45b0 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    45aa:	9801      	ldr	r0, [sp, #4]
    45ac:	f000 f936 	bl	481c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45b0:	bf00      	nop
    45b2:	b003      	add	sp, #12
    45b4:	f85d fb04 	ldr.w	pc, [sp], #4

000045b8 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    45b8:	b500      	push	{lr}
    45ba:	b083      	sub	sp, #12
    45bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45be:	9b01      	ldr	r3, [sp, #4]
    45c0:	2b00      	cmp	r3, #0
    45c2:	d002      	beq.n	45ca <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    45c4:	9801      	ldr	r0, [sp, #4]
    45c6:	f000 f949 	bl	485c <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45ca:	bf00      	nop
    45cc:	b003      	add	sp, #12
    45ce:	f85d fb04 	ldr.w	pc, [sp], #4

000045d2 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    45d2:	b500      	push	{lr}
    45d4:	b083      	sub	sp, #12
    45d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	2b00      	cmp	r3, #0
    45dc:	d002      	beq.n	45e4 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    45de:	9801      	ldr	r0, [sp, #4]
    45e0:	f000 f958 	bl	4894 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45e4:	bf00      	nop
    45e6:	b003      	add	sp, #12
    45e8:	f85d fb04 	ldr.w	pc, [sp], #4

000045ec <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    45ec:	b500      	push	{lr}
    45ee:	b083      	sub	sp, #12
    45f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45f2:	9b01      	ldr	r3, [sp, #4]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d002      	beq.n	45fe <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    45f8:	9801      	ldr	r0, [sp, #4]
    45fa:	f000 f969 	bl	48d0 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45fe:	bf00      	nop
    4600:	b003      	add	sp, #12
    4602:	f85d fb04 	ldr.w	pc, [sp], #4

00004606 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4606:	b500      	push	{lr}
    4608:	b083      	sub	sp, #12
    460a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    460c:	9b01      	ldr	r3, [sp, #4]
    460e:	2b00      	cmp	r3, #0
    4610:	d002      	beq.n	4618 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4612:	9801      	ldr	r0, [sp, #4]
    4614:	f000 f978 	bl	4908 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4618:	bf00      	nop
    461a:	b003      	add	sp, #12
    461c:	f85d fb04 	ldr.w	pc, [sp], #4

00004620 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4620:	b500      	push	{lr}
    4622:	b083      	sub	sp, #12
    4624:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4626:	9b01      	ldr	r3, [sp, #4]
    4628:	2b00      	cmp	r3, #0
    462a:	d002      	beq.n	4632 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    462c:	9801      	ldr	r0, [sp, #4]
    462e:	f000 f989 	bl	4944 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4632:	bf00      	nop
    4634:	b003      	add	sp, #12
    4636:	f85d fb04 	ldr.w	pc, [sp], #4

0000463a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    463a:	b500      	push	{lr}
    463c:	b083      	sub	sp, #12
    463e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4640:	9b01      	ldr	r3, [sp, #4]
    4642:	2b00      	cmp	r3, #0
    4644:	d002      	beq.n	464c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4646:	9801      	ldr	r0, [sp, #4]
    4648:	f000 f998 	bl	497c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    464c:	bf00      	nop
    464e:	b003      	add	sp, #12
    4650:	f85d fb04 	ldr.w	pc, [sp], #4

00004654 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4654:	b500      	push	{lr}
    4656:	b083      	sub	sp, #12
    4658:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    465a:	9b01      	ldr	r3, [sp, #4]
    465c:	2b00      	cmp	r3, #0
    465e:	d002      	beq.n	4666 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4660:	9801      	ldr	r0, [sp, #4]
    4662:	f000 f9a9 	bl	49b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4666:	bf00      	nop
    4668:	b003      	add	sp, #12
    466a:	f85d fb04 	ldr.w	pc, [sp], #4

0000466e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    466e:	b500      	push	{lr}
    4670:	b083      	sub	sp, #12
    4672:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4674:	9b01      	ldr	r3, [sp, #4]
    4676:	2b00      	cmp	r3, #0
    4678:	d002      	beq.n	4680 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    467a:	9801      	ldr	r0, [sp, #4]
    467c:	f000 f9e6 	bl	4a4c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4680:	bf00      	nop
    4682:	b003      	add	sp, #12
    4684:	f85d fb04 	ldr.w	pc, [sp], #4

00004688 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4688:	b500      	push	{lr}
    468a:	b083      	sub	sp, #12
    468c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    468e:	9b01      	ldr	r3, [sp, #4]
    4690:	2b00      	cmp	r3, #0
    4692:	d002      	beq.n	469a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4694:	9801      	ldr	r0, [sp, #4]
    4696:	f000 fa25 	bl	4ae4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    469a:	bf00      	nop
    469c:	b003      	add	sp, #12
    469e:	f85d fb04 	ldr.w	pc, [sp], #4

000046a2 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    46a2:	b500      	push	{lr}
    46a4:	b083      	sub	sp, #12
    46a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    46a8:	9b01      	ldr	r3, [sp, #4]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d002      	beq.n	46b4 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    46ae:	9801      	ldr	r0, [sp, #4]
    46b0:	f000 fa2a 	bl	4b08 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    46b4:	bf00      	nop
    46b6:	b003      	add	sp, #12
    46b8:	f85d fb04 	ldr.w	pc, [sp], #4

000046bc <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    46bc:	b500      	push	{lr}
    46be:	b083      	sub	sp, #12
    46c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    46c2:	9b01      	ldr	r3, [sp, #4]
    46c4:	2b00      	cmp	r3, #0
    46c6:	d002      	beq.n	46ce <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    46c8:	9801      	ldr	r0, [sp, #4]
    46ca:	f000 fa3b 	bl	4b44 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    46ce:	bf00      	nop
    46d0:	b003      	add	sp, #12
    46d2:	f85d fb04 	ldr.w	pc, [sp], #4

000046d6 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    46d6:	b500      	push	{lr}
    46d8:	b083      	sub	sp, #12
    46da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    46dc:	9b01      	ldr	r3, [sp, #4]
    46de:	2b00      	cmp	r3, #0
    46e0:	d002      	beq.n	46e8 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    46e2:	9801      	ldr	r0, [sp, #4]
    46e4:	f000 fa56 	bl	4b94 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    46e8:	bf00      	nop
    46ea:	b003      	add	sp, #12
    46ec:	f85d fb04 	ldr.w	pc, [sp], #4

000046f0 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    46f0:	b500      	push	{lr}
    46f2:	b083      	sub	sp, #12
    46f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    46f6:	9b01      	ldr	r3, [sp, #4]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d002      	beq.n	4702 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    46fc:	9801      	ldr	r0, [sp, #4]
    46fe:	f000 fa79 	bl	4bf4 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4702:	bf00      	nop
    4704:	b003      	add	sp, #12
    4706:	f85d fb04 	ldr.w	pc, [sp], #4

0000470a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    470a:	b500      	push	{lr}
    470c:	b083      	sub	sp, #12
    470e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4710:	9b01      	ldr	r3, [sp, #4]
    4712:	2b00      	cmp	r3, #0
    4714:	d002      	beq.n	471c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4716:	9801      	ldr	r0, [sp, #4]
    4718:	f000 fa8a 	bl	4c30 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    471c:	bf00      	nop
    471e:	b003      	add	sp, #12
    4720:	f85d fb04 	ldr.w	pc, [sp], #4

00004724 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4724:	b084      	sub	sp, #16
    4726:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4728:	4b0b      	ldr	r3, [pc, #44]	; (4758 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    472a:	795b      	ldrb	r3, [r3, #5]
    472c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    472e:	4b0b      	ldr	r3, [pc, #44]	; (475c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4730:	695b      	ldr	r3, [r3, #20]
    4732:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4734:	9b02      	ldr	r3, [sp, #8]
    4736:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    473a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    473c:	9b03      	ldr	r3, [sp, #12]
    473e:	061b      	lsls	r3, r3, #24
    4740:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4744:	9a02      	ldr	r2, [sp, #8]
    4746:	4313      	orrs	r3, r2
    4748:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    474a:	4a04      	ldr	r2, [pc, #16]	; (475c <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    474c:	9b02      	ldr	r3, [sp, #8]
    474e:	6153      	str	r3, [r2, #20]
}
    4750:	bf00      	nop
    4752:	b004      	add	sp, #16
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	00008b64 	.word	0x00008b64
    475c:	40064000 	.word	0x40064000

00004760 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4760:	b084      	sub	sp, #16
    4762:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4764:	9b01      	ldr	r3, [sp, #4]
    4766:	685b      	ldr	r3, [r3, #4]
    4768:	4a0b      	ldr	r2, [pc, #44]	; (4798 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    476a:	5cd3      	ldrb	r3, [r2, r3]
    476c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    476e:	4b0b      	ldr	r3, [pc, #44]	; (479c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4770:	695b      	ldr	r3, [r3, #20]
    4772:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4774:	9b02      	ldr	r3, [sp, #8]
    4776:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    477a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    477c:	9b03      	ldr	r3, [sp, #12]
    477e:	061b      	lsls	r3, r3, #24
    4780:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4784:	9a02      	ldr	r2, [sp, #8]
    4786:	4313      	orrs	r3, r2
    4788:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    478a:	4a04      	ldr	r2, [pc, #16]	; (479c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    478c:	9b02      	ldr	r3, [sp, #8]
    478e:	6153      	str	r3, [r2, #20]
}
    4790:	bf00      	nop
    4792:	b004      	add	sp, #16
    4794:	4770      	bx	lr
    4796:	bf00      	nop
    4798:	00008b64 	.word	0x00008b64
    479c:	40064000 	.word	0x40064000

000047a0 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47a0:	b084      	sub	sp, #16
    47a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	685b      	ldr	r3, [r3, #4]
    47a8:	4a0b      	ldr	r2, [pc, #44]	; (47d8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    47aa:	5cd3      	ldrb	r3, [r2, r3]
    47ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    47ae:	4b0b      	ldr	r3, [pc, #44]	; (47dc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    47b0:	699b      	ldr	r3, [r3, #24]
    47b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    47b4:	9b02      	ldr	r3, [sp, #8]
    47b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47ba:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    47bc:	9b03      	ldr	r3, [sp, #12]
    47be:	061b      	lsls	r3, r3, #24
    47c0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    47c4:	9a02      	ldr	r2, [sp, #8]
    47c6:	4313      	orrs	r3, r2
    47c8:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    47ca:	4a04      	ldr	r2, [pc, #16]	; (47dc <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    47cc:	9b02      	ldr	r3, [sp, #8]
    47ce:	6193      	str	r3, [r2, #24]
}
    47d0:	bf00      	nop
    47d2:	b004      	add	sp, #16
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	00008b64 	.word	0x00008b64
    47dc:	40064000 	.word	0x40064000

000047e0 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47e0:	b084      	sub	sp, #16
    47e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47e4:	4b0b      	ldr	r3, [pc, #44]	; (4814 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    47e6:	795b      	ldrb	r3, [r3, #5]
    47e8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    47ea:	4b0b      	ldr	r3, [pc, #44]	; (4818 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    47ec:	69db      	ldr	r3, [r3, #28]
    47ee:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    47f0:	9b02      	ldr	r3, [sp, #8]
    47f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    47f6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    47f8:	9b03      	ldr	r3, [sp, #12]
    47fa:	061b      	lsls	r3, r3, #24
    47fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4800:	9a02      	ldr	r2, [sp, #8]
    4802:	4313      	orrs	r3, r2
    4804:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4806:	4a04      	ldr	r2, [pc, #16]	; (4818 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4808:	9b02      	ldr	r3, [sp, #8]
    480a:	61d3      	str	r3, [r2, #28]
}
    480c:	bf00      	nop
    480e:	b004      	add	sp, #16
    4810:	4770      	bx	lr
    4812:	bf00      	nop
    4814:	00008b64 	.word	0x00008b64
    4818:	40064000 	.word	0x40064000

0000481c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    481c:	b084      	sub	sp, #16
    481e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4820:	9b01      	ldr	r3, [sp, #4]
    4822:	685b      	ldr	r3, [r3, #4]
    4824:	4a0b      	ldr	r2, [pc, #44]	; (4854 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4826:	5cd3      	ldrb	r3, [r2, r3]
    4828:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    482a:	4b0b      	ldr	r3, [pc, #44]	; (4858 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    482c:	69db      	ldr	r3, [r3, #28]
    482e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4830:	9b02      	ldr	r3, [sp, #8]
    4832:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4836:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4838:	9b03      	ldr	r3, [sp, #12]
    483a:	061b      	lsls	r3, r3, #24
    483c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4840:	9a02      	ldr	r2, [sp, #8]
    4842:	4313      	orrs	r3, r2
    4844:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4846:	4a04      	ldr	r2, [pc, #16]	; (4858 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4848:	9b02      	ldr	r3, [sp, #8]
    484a:	61d3      	str	r3, [r2, #28]
}
    484c:	bf00      	nop
    484e:	b004      	add	sp, #16
    4850:	4770      	bx	lr
    4852:	bf00      	nop
    4854:	00008b64 	.word	0x00008b64
    4858:	40064000 	.word	0x40064000

0000485c <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    485c:	b084      	sub	sp, #16
    485e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4860:	4b0a      	ldr	r3, [pc, #40]	; (488c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4862:	7b9b      	ldrb	r3, [r3, #14]
    4864:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4866:	4b0a      	ldr	r3, [pc, #40]	; (4890 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4868:	691b      	ldr	r3, [r3, #16]
    486a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    486c:	9b02      	ldr	r3, [sp, #8]
    486e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4872:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4874:	9b03      	ldr	r3, [sp, #12]
    4876:	011b      	lsls	r3, r3, #4
    4878:	9a02      	ldr	r2, [sp, #8]
    487a:	4313      	orrs	r3, r2
    487c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    487e:	4a04      	ldr	r2, [pc, #16]	; (4890 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4880:	9b02      	ldr	r3, [sp, #8]
    4882:	6113      	str	r3, [r2, #16]
}
    4884:	bf00      	nop
    4886:	b004      	add	sp, #16
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	00008b0c 	.word	0x00008b0c
    4890:	40048000 	.word	0x40048000

00004894 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4894:	b084      	sub	sp, #16
    4896:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4898:	9b01      	ldr	r3, [sp, #4]
    489a:	685b      	ldr	r3, [r3, #4]
    489c:	4a0a      	ldr	r2, [pc, #40]	; (48c8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    489e:	5cd3      	ldrb	r3, [r2, r3]
    48a0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    48a2:	4b0a      	ldr	r3, [pc, #40]	; (48cc <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    48a4:	691b      	ldr	r3, [r3, #16]
    48a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    48a8:	9b02      	ldr	r3, [sp, #8]
    48aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    48ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    48b0:	9b03      	ldr	r3, [sp, #12]
    48b2:	011b      	lsls	r3, r3, #4
    48b4:	9a02      	ldr	r2, [sp, #8]
    48b6:	4313      	orrs	r3, r2
    48b8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    48ba:	4a04      	ldr	r2, [pc, #16]	; (48cc <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    48bc:	9b02      	ldr	r3, [sp, #8]
    48be:	6113      	str	r3, [r2, #16]
}
    48c0:	bf00      	nop
    48c2:	b004      	add	sp, #16
    48c4:	4770      	bx	lr
    48c6:	bf00      	nop
    48c8:	00008b0c 	.word	0x00008b0c
    48cc:	40048000 	.word	0x40048000

000048d0 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    48d0:	b084      	sub	sp, #16
    48d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    48d4:	4b0a      	ldr	r3, [pc, #40]	; (4900 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    48d6:	785b      	ldrb	r3, [r3, #1]
    48d8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    48da:	4b0a      	ldr	r3, [pc, #40]	; (4904 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    48dc:	691b      	ldr	r3, [r3, #16]
    48de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    48e0:	9b02      	ldr	r3, [sp, #8]
    48e2:	f023 030c 	bic.w	r3, r3, #12
    48e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    48e8:	9b03      	ldr	r3, [sp, #12]
    48ea:	009b      	lsls	r3, r3, #2
    48ec:	9a02      	ldr	r2, [sp, #8]
    48ee:	4313      	orrs	r3, r2
    48f0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    48f2:	4a04      	ldr	r2, [pc, #16]	; (4904 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    48f4:	9b02      	ldr	r3, [sp, #8]
    48f6:	6113      	str	r3, [r2, #16]
}
    48f8:	bf00      	nop
    48fa:	b004      	add	sp, #16
    48fc:	4770      	bx	lr
    48fe:	bf00      	nop
    4900:	00008bc4 	.word	0x00008bc4
    4904:	40048000 	.word	0x40048000

00004908 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4908:	b084      	sub	sp, #16
    490a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    490c:	9b01      	ldr	r3, [sp, #4]
    490e:	685b      	ldr	r3, [r3, #4]
    4910:	4a0a      	ldr	r2, [pc, #40]	; (493c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4912:	5cd3      	ldrb	r3, [r2, r3]
    4914:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4916:	4b0a      	ldr	r3, [pc, #40]	; (4940 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4918:	691b      	ldr	r3, [r3, #16]
    491a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    491c:	9b02      	ldr	r3, [sp, #8]
    491e:	f023 030c 	bic.w	r3, r3, #12
    4922:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4924:	9b03      	ldr	r3, [sp, #12]
    4926:	009b      	lsls	r3, r3, #2
    4928:	9a02      	ldr	r2, [sp, #8]
    492a:	4313      	orrs	r3, r2
    492c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    492e:	4a04      	ldr	r2, [pc, #16]	; (4940 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4930:	9b02      	ldr	r3, [sp, #8]
    4932:	6113      	str	r3, [r2, #16]
}
    4934:	bf00      	nop
    4936:	b004      	add	sp, #16
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	00008bc4 	.word	0x00008bc4
    4940:	40048000 	.word	0x40048000

00004944 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4944:	b084      	sub	sp, #16
    4946:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4948:	4b0a      	ldr	r3, [pc, #40]	; (4974 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    494a:	795b      	ldrb	r3, [r3, #5]
    494c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    494e:	4b0a      	ldr	r3, [pc, #40]	; (4978 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4950:	6a1b      	ldr	r3, [r3, #32]
    4952:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4954:	9b02      	ldr	r3, [sp, #8]
    4956:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    495a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    495c:	9b03      	ldr	r3, [sp, #12]
    495e:	061b      	lsls	r3, r3, #24
    4960:	9a02      	ldr	r2, [sp, #8]
    4962:	4313      	orrs	r3, r2
    4964:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4966:	4a04      	ldr	r2, [pc, #16]	; (4978 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4968:	9b02      	ldr	r3, [sp, #8]
    496a:	6213      	str	r3, [r2, #32]
}
    496c:	bf00      	nop
    496e:	b004      	add	sp, #16
    4970:	4770      	bx	lr
    4972:	bf00      	nop
    4974:	00008b64 	.word	0x00008b64
    4978:	40064000 	.word	0x40064000

0000497c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    497c:	b084      	sub	sp, #16
    497e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4980:	9b01      	ldr	r3, [sp, #4]
    4982:	685b      	ldr	r3, [r3, #4]
    4984:	4a0a      	ldr	r2, [pc, #40]	; (49b0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4986:	5cd3      	ldrb	r3, [r2, r3]
    4988:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    498a:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    498c:	6a1b      	ldr	r3, [r3, #32]
    498e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4990:	9b02      	ldr	r3, [sp, #8]
    4992:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4996:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4998:	9b03      	ldr	r3, [sp, #12]
    499a:	061b      	lsls	r3, r3, #24
    499c:	9a02      	ldr	r2, [sp, #8]
    499e:	4313      	orrs	r3, r2
    49a0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    49a2:	4a04      	ldr	r2, [pc, #16]	; (49b4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    49a4:	9b02      	ldr	r3, [sp, #8]
    49a6:	6213      	str	r3, [r2, #32]
}
    49a8:	bf00      	nop
    49aa:	b004      	add	sp, #16
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	00008b64 	.word	0x00008b64
    49b4:	40064000 	.word	0x40064000

000049b8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49b8:	b086      	sub	sp, #24
    49ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49bc:	4b20      	ldr	r3, [pc, #128]	; (4a40 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    49be:	795b      	ldrb	r3, [r3, #5]
    49c0:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    49c2:	9b01      	ldr	r3, [sp, #4]
    49c4:	681a      	ldr	r2, [r3, #0]
    49c6:	491f      	ldr	r1, [pc, #124]	; (4a44 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    49c8:	4613      	mov	r3, r2
    49ca:	00db      	lsls	r3, r3, #3
    49cc:	4413      	add	r3, r2
    49ce:	440b      	add	r3, r1
    49d0:	781b      	ldrb	r3, [r3, #0]
    49d2:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    49d4:	4b1c      	ldr	r3, [pc, #112]	; (4a48 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    49d6:	68db      	ldr	r3, [r3, #12]
    49d8:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    49da:	9b03      	ldr	r3, [sp, #12]
    49dc:	2b03      	cmp	r3, #3
    49de:	d813      	bhi.n	4a08 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    49e0:	9b03      	ldr	r3, [sp, #12]
    49e2:	005b      	lsls	r3, r3, #1
    49e4:	3318      	adds	r3, #24
    49e6:	2203      	movs	r2, #3
    49e8:	fa02 f303 	lsl.w	r3, r2, r3
    49ec:	43db      	mvns	r3, r3
    49ee:	9a05      	ldr	r2, [sp, #20]
    49f0:	4013      	ands	r3, r2
    49f2:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    49f4:	9b03      	ldr	r3, [sp, #12]
    49f6:	005b      	lsls	r3, r3, #1
    49f8:	3318      	adds	r3, #24
    49fa:	9a04      	ldr	r2, [sp, #16]
    49fc:	fa02 f303 	lsl.w	r3, r2, r3
    4a00:	9a05      	ldr	r2, [sp, #20]
    4a02:	4313      	orrs	r3, r2
    4a04:	9305      	str	r3, [sp, #20]
    4a06:	e014      	b.n	4a32 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4a08:	9b03      	ldr	r3, [sp, #12]
    4a0a:	3b04      	subs	r3, #4
    4a0c:	005b      	lsls	r3, r3, #1
    4a0e:	3310      	adds	r3, #16
    4a10:	2203      	movs	r2, #3
    4a12:	fa02 f303 	lsl.w	r3, r2, r3
    4a16:	43db      	mvns	r3, r3
    4a18:	9a05      	ldr	r2, [sp, #20]
    4a1a:	4013      	ands	r3, r2
    4a1c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4a1e:	9b03      	ldr	r3, [sp, #12]
    4a20:	3b04      	subs	r3, #4
    4a22:	005b      	lsls	r3, r3, #1
    4a24:	3310      	adds	r3, #16
    4a26:	9a04      	ldr	r2, [sp, #16]
    4a28:	fa02 f303 	lsl.w	r3, r2, r3
    4a2c:	9a05      	ldr	r2, [sp, #20]
    4a2e:	4313      	orrs	r3, r2
    4a30:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4a32:	4a05      	ldr	r2, [pc, #20]	; (4a48 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4a34:	9b05      	ldr	r3, [sp, #20]
    4a36:	60d3      	str	r3, [r2, #12]
}
    4a38:	bf00      	nop
    4a3a:	b006      	add	sp, #24
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop
    4a40:	00008b0c 	.word	0x00008b0c
    4a44:	000087fc 	.word	0x000087fc
    4a48:	40048000 	.word	0x40048000

00004a4c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a4c:	b086      	sub	sp, #24
    4a4e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a50:	9b01      	ldr	r3, [sp, #4]
    4a52:	685b      	ldr	r3, [r3, #4]
    4a54:	4a20      	ldr	r2, [pc, #128]	; (4ad8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4a56:	5cd3      	ldrb	r3, [r2, r3]
    4a58:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4a5a:	9b01      	ldr	r3, [sp, #4]
    4a5c:	681a      	ldr	r2, [r3, #0]
    4a5e:	491f      	ldr	r1, [pc, #124]	; (4adc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4a60:	4613      	mov	r3, r2
    4a62:	00db      	lsls	r3, r3, #3
    4a64:	4413      	add	r3, r2
    4a66:	440b      	add	r3, r1
    4a68:	781b      	ldrb	r3, [r3, #0]
    4a6a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4a6c:	4b1c      	ldr	r3, [pc, #112]	; (4ae0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4a6e:	68db      	ldr	r3, [r3, #12]
    4a70:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4a72:	9b03      	ldr	r3, [sp, #12]
    4a74:	2b03      	cmp	r3, #3
    4a76:	d813      	bhi.n	4aa0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4a78:	9b03      	ldr	r3, [sp, #12]
    4a7a:	005b      	lsls	r3, r3, #1
    4a7c:	3318      	adds	r3, #24
    4a7e:	2203      	movs	r2, #3
    4a80:	fa02 f303 	lsl.w	r3, r2, r3
    4a84:	43db      	mvns	r3, r3
    4a86:	9a05      	ldr	r2, [sp, #20]
    4a88:	4013      	ands	r3, r2
    4a8a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4a8c:	9b03      	ldr	r3, [sp, #12]
    4a8e:	005b      	lsls	r3, r3, #1
    4a90:	3318      	adds	r3, #24
    4a92:	9a04      	ldr	r2, [sp, #16]
    4a94:	fa02 f303 	lsl.w	r3, r2, r3
    4a98:	9a05      	ldr	r2, [sp, #20]
    4a9a:	4313      	orrs	r3, r2
    4a9c:	9305      	str	r3, [sp, #20]
    4a9e:	e014      	b.n	4aca <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4aa0:	9b03      	ldr	r3, [sp, #12]
    4aa2:	3b04      	subs	r3, #4
    4aa4:	005b      	lsls	r3, r3, #1
    4aa6:	3310      	adds	r3, #16
    4aa8:	2203      	movs	r2, #3
    4aaa:	fa02 f303 	lsl.w	r3, r2, r3
    4aae:	43db      	mvns	r3, r3
    4ab0:	9a05      	ldr	r2, [sp, #20]
    4ab2:	4013      	ands	r3, r2
    4ab4:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4ab6:	9b03      	ldr	r3, [sp, #12]
    4ab8:	3b04      	subs	r3, #4
    4aba:	005b      	lsls	r3, r3, #1
    4abc:	3310      	adds	r3, #16
    4abe:	9a04      	ldr	r2, [sp, #16]
    4ac0:	fa02 f303 	lsl.w	r3, r2, r3
    4ac4:	9a05      	ldr	r2, [sp, #20]
    4ac6:	4313      	orrs	r3, r2
    4ac8:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4aca:	4a05      	ldr	r2, [pc, #20]	; (4ae0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4acc:	9b05      	ldr	r3, [sp, #20]
    4ace:	60d3      	str	r3, [r2, #12]
}
    4ad0:	bf00      	nop
    4ad2:	b006      	add	sp, #24
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop
    4ad8:	00008b0c 	.word	0x00008b0c
    4adc:	000087fc 	.word	0x000087fc
    4ae0:	40048000 	.word	0x40048000

00004ae4 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ae4:	b084      	sub	sp, #16
    4ae6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4ae8:	4b06      	ldr	r3, [pc, #24]	; (4b04 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4aea:	685b      	ldr	r3, [r3, #4]
    4aec:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4aee:	9b03      	ldr	r3, [sp, #12]
    4af0:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4af4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4af6:	4a03      	ldr	r2, [pc, #12]	; (4b04 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4af8:	9b03      	ldr	r3, [sp, #12]
    4afa:	6053      	str	r3, [r2, #4]
}
    4afc:	bf00      	nop
    4afe:	b004      	add	sp, #16
    4b00:	4770      	bx	lr
    4b02:	bf00      	nop
    4b04:	40048000 	.word	0x40048000

00004b08 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b08:	b084      	sub	sp, #16
    4b0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b0c:	9b01      	ldr	r3, [sp, #4]
    4b0e:	685b      	ldr	r3, [r3, #4]
    4b10:	4a0a      	ldr	r2, [pc, #40]	; (4b3c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4b12:	5cd3      	ldrb	r3, [r2, r3]
    4b14:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4b16:	4b0a      	ldr	r3, [pc, #40]	; (4b40 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4b18:	685b      	ldr	r3, [r3, #4]
    4b1a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4b1c:	9b02      	ldr	r3, [sp, #8]
    4b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4b22:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4b24:	9b03      	ldr	r3, [sp, #12]
    4b26:	011b      	lsls	r3, r3, #4
    4b28:	9a02      	ldr	r2, [sp, #8]
    4b2a:	4313      	orrs	r3, r2
    4b2c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4b2e:	4a04      	ldr	r2, [pc, #16]	; (4b40 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4b30:	9b02      	ldr	r3, [sp, #8]
    4b32:	6053      	str	r3, [r2, #4]
}
    4b34:	bf00      	nop
    4b36:	b004      	add	sp, #16
    4b38:	4770      	bx	lr
    4b3a:	bf00      	nop
    4b3c:	00008b0c 	.word	0x00008b0c
    4b40:	40048000 	.word	0x40048000

00004b44 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b44:	b084      	sub	sp, #16
    4b46:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4b48:	9b01      	ldr	r3, [sp, #4]
    4b4a:	681a      	ldr	r2, [r3, #0]
    4b4c:	490f      	ldr	r1, [pc, #60]	; (4b8c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4b4e:	4613      	mov	r3, r2
    4b50:	00db      	lsls	r3, r3, #3
    4b52:	4413      	add	r3, r2
    4b54:	440b      	add	r3, r1
    4b56:	3304      	adds	r3, #4
    4b58:	781b      	ldrb	r3, [r3, #0]
    4b5a:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4b5c:	4a0c      	ldr	r2, [pc, #48]	; (4b90 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4b5e:	9b03      	ldr	r3, [sp, #12]
    4b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b64:	490a      	ldr	r1, [pc, #40]	; (4b90 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4b66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4b6a:	9b03      	ldr	r3, [sp, #12]
    4b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4b70:	4a07      	ldr	r2, [pc, #28]	; (4b90 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4b72:	9b03      	ldr	r3, [sp, #12]
    4b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4b78:	4905      	ldr	r1, [pc, #20]	; (4b90 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4b7a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4b7e:	9b03      	ldr	r3, [sp, #12]
    4b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b84:	bf00      	nop
    4b86:	b004      	add	sp, #16
    4b88:	4770      	bx	lr
    4b8a:	bf00      	nop
    4b8c:	000087fc 	.word	0x000087fc
    4b90:	40065000 	.word	0x40065000

00004b94 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b94:	b086      	sub	sp, #24
    4b96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4b98:	9b01      	ldr	r3, [sp, #4]
    4b9a:	681a      	ldr	r2, [r3, #0]
    4b9c:	4912      	ldr	r1, [pc, #72]	; (4be8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4b9e:	4613      	mov	r3, r2
    4ba0:	00db      	lsls	r3, r3, #3
    4ba2:	4413      	add	r3, r2
    4ba4:	440b      	add	r3, r1
    4ba6:	3304      	adds	r3, #4
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4bac:	9b01      	ldr	r3, [sp, #4]
    4bae:	685b      	ldr	r3, [r3, #4]
    4bb0:	4a0e      	ldr	r2, [pc, #56]	; (4bec <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4bb2:	5cd3      	ldrb	r3, [r2, r3]
    4bb4:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4bb6:	4a0e      	ldr	r2, [pc, #56]	; (4bf0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4bb8:	9b05      	ldr	r3, [sp, #20]
    4bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4bbe:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4bc0:	9b03      	ldr	r3, [sp, #12]
    4bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4bc6:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4bc8:	9b04      	ldr	r3, [sp, #16]
    4bca:	061b      	lsls	r3, r3, #24
    4bcc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4bd0:	9a03      	ldr	r2, [sp, #12]
    4bd2:	4313      	orrs	r3, r2
    4bd4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4bd6:	4906      	ldr	r1, [pc, #24]	; (4bf0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4bd8:	9b05      	ldr	r3, [sp, #20]
    4bda:	9a03      	ldr	r2, [sp, #12]
    4bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4be0:	bf00      	nop
    4be2:	b006      	add	sp, #24
    4be4:	4770      	bx	lr
    4be6:	bf00      	nop
    4be8:	000087fc 	.word	0x000087fc
    4bec:	00008b94 	.word	0x00008b94
    4bf0:	40065000 	.word	0x40065000

00004bf4 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4bf4:	b084      	sub	sp, #16
    4bf6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4bf8:	4b0b      	ldr	r3, [pc, #44]	; (4c28 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4bfa:	7f1b      	ldrb	r3, [r3, #28]
    4bfc:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4bfe:	4b0b      	ldr	r3, [pc, #44]	; (4c2c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4c00:	685b      	ldr	r3, [r3, #4]
    4c02:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4c04:	9b02      	ldr	r3, [sp, #8]
    4c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4c0a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4c0c:	9b03      	ldr	r3, [sp, #12]
    4c0e:	031b      	lsls	r3, r3, #12
    4c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4c14:	9a02      	ldr	r2, [sp, #8]
    4c16:	4313      	orrs	r3, r2
    4c18:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4c1a:	4a04      	ldr	r2, [pc, #16]	; (4c2c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4c1c:	9b02      	ldr	r3, [sp, #8]
    4c1e:	6053      	str	r3, [r2, #4]
}
    4c20:	bf00      	nop
    4c22:	b004      	add	sp, #16
    4c24:	4770      	bx	lr
    4c26:	bf00      	nop
    4c28:	00008b0c 	.word	0x00008b0c
    4c2c:	40048000 	.word	0x40048000

00004c30 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4c30:	b084      	sub	sp, #16
    4c32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4c34:	9b01      	ldr	r3, [sp, #4]
    4c36:	685b      	ldr	r3, [r3, #4]
    4c38:	4a0b      	ldr	r2, [pc, #44]	; (4c68 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4c3a:	5cd3      	ldrb	r3, [r2, r3]
    4c3c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4c3e:	4b0b      	ldr	r3, [pc, #44]	; (4c6c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4c40:	685b      	ldr	r3, [r3, #4]
    4c42:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4c44:	9b02      	ldr	r3, [sp, #8]
    4c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4c4a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4c4c:	9b03      	ldr	r3, [sp, #12]
    4c4e:	031b      	lsls	r3, r3, #12
    4c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4c54:	9a02      	ldr	r2, [sp, #8]
    4c56:	4313      	orrs	r3, r2
    4c58:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4c5a:	4a04      	ldr	r2, [pc, #16]	; (4c6c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4c5c:	9b02      	ldr	r3, [sp, #8]
    4c5e:	6053      	str	r3, [r2, #4]
}
    4c60:	bf00      	nop
    4c62:	b004      	add	sp, #16
    4c64:	4770      	bx	lr
    4c66:	bf00      	nop
    4c68:	00008b0c 	.word	0x00008b0c
    4c6c:	40048000 	.word	0x40048000

00004c70 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4c70:	b500      	push	{lr}
    4c72:	b085      	sub	sp, #20
    4c74:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4c76:	2300      	movs	r3, #0
    4c78:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4c7c:	9b01      	ldr	r3, [sp, #4]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d037      	beq.n	4cf2 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4c82:	2300      	movs	r3, #0
    4c84:	9303      	str	r3, [sp, #12]
    4c86:	e02b      	b.n	4ce0 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4c88:	4b29      	ldr	r3, [pc, #164]	; (4d30 <DisableSafeClock+0xc0>)
    4c8a:	6819      	ldr	r1, [r3, #0]
    4c8c:	9a03      	ldr	r2, [sp, #12]
    4c8e:	4613      	mov	r3, r2
    4c90:	005b      	lsls	r3, r3, #1
    4c92:	4413      	add	r3, r2
    4c94:	009b      	lsls	r3, r3, #2
    4c96:	440b      	add	r3, r1
    4c98:	3314      	adds	r3, #20
    4c9a:	681b      	ldr	r3, [r3, #0]
    4c9c:	2b05      	cmp	r3, #5
    4c9e:	d11c      	bne.n	4cda <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4ca0:	2301      	movs	r3, #1
    4ca2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4ca6:	4b22      	ldr	r3, [pc, #136]	; (4d30 <DisableSafeClock+0xc0>)
    4ca8:	6819      	ldr	r1, [r3, #0]
    4caa:	9a03      	ldr	r2, [sp, #12]
    4cac:	4613      	mov	r3, r2
    4cae:	005b      	lsls	r3, r3, #1
    4cb0:	4413      	add	r3, r2
    4cb2:	009b      	lsls	r3, r3, #2
    4cb4:	440b      	add	r3, r1
    4cb6:	3318      	adds	r3, #24
    4cb8:	881b      	ldrh	r3, [r3, #0]
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d118      	bne.n	4cf0 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4cbe:	4b1d      	ldr	r3, [pc, #116]	; (4d34 <DisableSafeClock+0xc4>)
    4cc0:	791b      	ldrb	r3, [r3, #4]
    4cc2:	4619      	mov	r1, r3
    4cc4:	4a1c      	ldr	r2, [pc, #112]	; (4d38 <DisableSafeClock+0xc8>)
    4cc6:	460b      	mov	r3, r1
    4cc8:	005b      	lsls	r3, r3, #1
    4cca:	440b      	add	r3, r1
    4ccc:	009b      	lsls	r3, r3, #2
    4cce:	4413      	add	r3, r2
    4cd0:	3308      	adds	r3, #8
    4cd2:	681b      	ldr	r3, [r3, #0]
    4cd4:	2005      	movs	r0, #5
    4cd6:	4798      	blx	r3
                }
                break;
    4cd8:	e00a      	b.n	4cf0 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4cda:	9b03      	ldr	r3, [sp, #12]
    4cdc:	3301      	adds	r3, #1
    4cde:	9303      	str	r3, [sp, #12]
    4ce0:	4b13      	ldr	r3, [pc, #76]	; (4d30 <DisableSafeClock+0xc0>)
    4ce2:	681b      	ldr	r3, [r3, #0]
    4ce4:	7a1b      	ldrb	r3, [r3, #8]
    4ce6:	461a      	mov	r2, r3
    4ce8:	9b03      	ldr	r3, [sp, #12]
    4cea:	4293      	cmp	r3, r2
    4cec:	d3cc      	bcc.n	4c88 <DisableSafeClock+0x18>
    4cee:	e000      	b.n	4cf2 <DisableSafeClock+0x82>
                break;
    4cf0:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4cf2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4cf6:	f083 0301 	eor.w	r3, r3, #1
    4cfa:	b2db      	uxtb	r3, r3
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	d013      	beq.n	4d28 <DisableSafeClock+0xb8>
    4d00:	4b0e      	ldr	r3, [pc, #56]	; (4d3c <DisableSafeClock+0xcc>)
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	f083 0301 	eor.w	r3, r3, #1
    4d08:	b2db      	uxtb	r3, r3
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d00c      	beq.n	4d28 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4d0e:	4b09      	ldr	r3, [pc, #36]	; (4d34 <DisableSafeClock+0xc4>)
    4d10:	791b      	ldrb	r3, [r3, #4]
    4d12:	4619      	mov	r1, r3
    4d14:	4a08      	ldr	r2, [pc, #32]	; (4d38 <DisableSafeClock+0xc8>)
    4d16:	460b      	mov	r3, r1
    4d18:	005b      	lsls	r3, r3, #1
    4d1a:	440b      	add	r3, r1
    4d1c:	009b      	lsls	r3, r3, #2
    4d1e:	4413      	add	r3, r2
    4d20:	3308      	adds	r3, #8
    4d22:	681b      	ldr	r3, [r3, #0]
    4d24:	2005      	movs	r0, #5
    4d26:	4798      	blx	r3
    }
}
    4d28:	bf00      	nop
    4d2a:	b005      	add	sp, #20
    4d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    4d30:	1fff8ba8 	.word	0x1fff8ba8
    4d34:	0000878c 	.word	0x0000878c
    4d38:	00008dbc 	.word	0x00008dbc
    4d3c:	1fff8b18 	.word	0x1fff8b18

00004d40 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4d40:	4b06      	ldr	r3, [pc, #24]	; (4d5c <SetFircToResetValue_TrustedCall+0x1c>)
    4d42:	2200      	movs	r2, #0
    4d44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4d48:	4b04      	ldr	r3, [pc, #16]	; (4d5c <SetFircToResetValue_TrustedCall+0x1c>)
    4d4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d4e:	4a03      	ldr	r2, [pc, #12]	; (4d5c <SetFircToResetValue_TrustedCall+0x1c>)
    4d50:	f043 0301 	orr.w	r3, r3, #1
    4d54:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4d58:	bf00      	nop
    4d5a:	4770      	bx	lr
    4d5c:	40064000 	.word	0x40064000

00004d60 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4d60:	b084      	sub	sp, #16
    4d62:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4d64:	2303      	movs	r3, #3
    4d66:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4d68:	2300      	movs	r3, #0
    4d6a:	9302      	str	r3, [sp, #8]
    4d6c:	e028      	b.n	4dc0 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4d6e:	9b01      	ldr	r3, [sp, #4]
    4d70:	9a02      	ldr	r2, [sp, #8]
    4d72:	320d      	adds	r2, #13
    4d74:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d78:	2b28      	cmp	r3, #40	; 0x28
    4d7a:	d10b      	bne.n	4d94 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4d7c:	9a01      	ldr	r2, [sp, #4]
    4d7e:	9b02      	ldr	r3, [sp, #8]
    4d80:	330d      	adds	r3, #13
    4d82:	00db      	lsls	r3, r3, #3
    4d84:	4413      	add	r3, r2
    4d86:	685b      	ldr	r3, [r3, #4]
    4d88:	4a2b      	ldr	r2, [pc, #172]	; (4e38 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4d8a:	5cd3      	ldrb	r3, [r2, r3]
    4d8c:	011b      	lsls	r3, r3, #4
    4d8e:	9a03      	ldr	r2, [sp, #12]
    4d90:	4313      	orrs	r3, r2
    4d92:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4d94:	9b01      	ldr	r3, [sp, #4]
    4d96:	9a02      	ldr	r2, [sp, #8]
    4d98:	320d      	adds	r2, #13
    4d9a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d9e:	2b29      	cmp	r3, #41	; 0x29
    4da0:	d10b      	bne.n	4dba <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4da2:	9a01      	ldr	r2, [sp, #4]
    4da4:	9b02      	ldr	r3, [sp, #8]
    4da6:	330d      	adds	r3, #13
    4da8:	00db      	lsls	r3, r3, #3
    4daa:	4413      	add	r3, r2
    4dac:	685b      	ldr	r3, [r3, #4]
    4dae:	4a23      	ldr	r2, [pc, #140]	; (4e3c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4db0:	5cd3      	ldrb	r3, [r2, r3]
    4db2:	009b      	lsls	r3, r3, #2
    4db4:	9a03      	ldr	r2, [sp, #12]
    4db6:	4313      	orrs	r3, r2
    4db8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4dba:	9b02      	ldr	r3, [sp, #8]
    4dbc:	3301      	adds	r3, #1
    4dbe:	9302      	str	r3, [sp, #8]
    4dc0:	9b01      	ldr	r3, [sp, #4]
    4dc2:	7adb      	ldrb	r3, [r3, #11]
    4dc4:	461a      	mov	r2, r3
    4dc6:	9b02      	ldr	r3, [sp, #8]
    4dc8:	4293      	cmp	r3, r2
    4dca:	d3d0      	bcc.n	4d6e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4dcc:	2300      	movs	r3, #0
    4dce:	9302      	str	r3, [sp, #8]
    4dd0:	e026      	b.n	4e20 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4dd2:	9a01      	ldr	r2, [sp, #4]
    4dd4:	9b02      	ldr	r3, [sp, #8]
    4dd6:	334e      	adds	r3, #78	; 0x4e
    4dd8:	00db      	lsls	r3, r3, #3
    4dda:	4413      	add	r3, r2
    4ddc:	685b      	ldr	r3, [r3, #4]
    4dde:	2b12      	cmp	r3, #18
    4de0:	d109      	bne.n	4df6 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4de2:	9a01      	ldr	r2, [sp, #4]
    4de4:	9b02      	ldr	r3, [sp, #8]
    4de6:	334e      	adds	r3, #78	; 0x4e
    4de8:	00db      	lsls	r3, r3, #3
    4dea:	4413      	add	r3, r2
    4dec:	891b      	ldrh	r3, [r3, #8]
    4dee:	005b      	lsls	r3, r3, #1
    4df0:	9a03      	ldr	r2, [sp, #12]
    4df2:	4313      	orrs	r3, r2
    4df4:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4df6:	9a01      	ldr	r2, [sp, #4]
    4df8:	9b02      	ldr	r3, [sp, #8]
    4dfa:	334e      	adds	r3, #78	; 0x4e
    4dfc:	00db      	lsls	r3, r3, #3
    4dfe:	4413      	add	r3, r2
    4e00:	685b      	ldr	r3, [r3, #4]
    4e02:	2b13      	cmp	r3, #19
    4e04:	d109      	bne.n	4e1a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4e06:	9a01      	ldr	r2, [sp, #4]
    4e08:	9b02      	ldr	r3, [sp, #8]
    4e0a:	334e      	adds	r3, #78	; 0x4e
    4e0c:	00db      	lsls	r3, r3, #3
    4e0e:	4413      	add	r3, r2
    4e10:	891b      	ldrh	r3, [r3, #8]
    4e12:	461a      	mov	r2, r3
    4e14:	9b03      	ldr	r3, [sp, #12]
    4e16:	4313      	orrs	r3, r2
    4e18:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4e1a:	9b02      	ldr	r3, [sp, #8]
    4e1c:	3301      	adds	r3, #1
    4e1e:	9302      	str	r3, [sp, #8]
    4e20:	9b01      	ldr	r3, [sp, #4]
    4e22:	7c1b      	ldrb	r3, [r3, #16]
    4e24:	461a      	mov	r2, r3
    4e26:	9b02      	ldr	r3, [sp, #8]
    4e28:	4293      	cmp	r3, r2
    4e2a:	d3d2      	bcc.n	4dd2 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4e2c:	4a04      	ldr	r2, [pc, #16]	; (4e40 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4e2e:	9b03      	ldr	r3, [sp, #12]
    4e30:	6113      	str	r3, [r2, #16]
}
    4e32:	bf00      	nop
    4e34:	b004      	add	sp, #16
    4e36:	4770      	bx	lr
    4e38:	00008b0c 	.word	0x00008b0c
    4e3c:	00008bc4 	.word	0x00008bc4
    4e40:	40048000 	.word	0x40048000

00004e44 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4e44:	b500      	push	{lr}
    4e46:	b089      	sub	sp, #36	; 0x24
    4e48:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4e4a:	2300      	movs	r3, #0
    4e4c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4e50:	4a21      	ldr	r2, [pc, #132]	; (4ed8 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4e52:	9b01      	ldr	r3, [sp, #4]
    4e54:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4e56:	4b21      	ldr	r3, [pc, #132]	; (4edc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4e58:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e5c:	f003 0301 	and.w	r3, r3, #1
    4e60:	2b00      	cmp	r3, #0
    4e62:	d12e      	bne.n	4ec2 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4e64:	4b1e      	ldr	r3, [pc, #120]	; (4ee0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4e66:	2200      	movs	r2, #0
    4e68:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4e6a:	f7ff ff69 	bl	4d40 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4e6e:	aa03      	add	r2, sp, #12
    4e70:	a904      	add	r1, sp, #16
    4e72:	a805      	add	r0, sp, #20
    4e74:	f24c 3350 	movw	r3, #50000	; 0xc350
    4e78:	f7fe f8ae 	bl	2fd8 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4e7c:	4b17      	ldr	r3, [pc, #92]	; (4edc <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4e7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e82:	0e1b      	lsrs	r3, r3, #24
    4e84:	f003 0301 	and.w	r3, r3, #1
    4e88:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4e8a:	9a03      	ldr	r2, [sp, #12]
    4e8c:	a904      	add	r1, sp, #16
    4e8e:	ab05      	add	r3, sp, #20
    4e90:	4618      	mov	r0, r3
    4e92:	f7fe f8bb 	bl	300c <Clock_Ip_TimeoutExpired>
    4e96:	4603      	mov	r3, r0
    4e98:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4e9c:	9b06      	ldr	r3, [sp, #24]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	d106      	bne.n	4eb0 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4ea2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ea6:	f083 0301 	eor.w	r3, r3, #1
    4eaa:	b2db      	uxtb	r3, r3
    4eac:	2b00      	cmp	r3, #0
    4eae:	d1e5      	bne.n	4e7c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4eb0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d007      	beq.n	4ec8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4eb8:	2105      	movs	r1, #5
    4eba:	2001      	movs	r0, #1
    4ebc:	f7fe f87c 	bl	2fb8 <Clock_Ip_ReportClockErrors>
    4ec0:	e002      	b.n	4ec8 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4ec2:	4b07      	ldr	r3, [pc, #28]	; (4ee0 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ec4:	2201      	movs	r2, #1
    4ec6:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4ec8:	9801      	ldr	r0, [sp, #4]
    4eca:	f7ff ff49 	bl	4d60 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4ece:	bf00      	nop
    4ed0:	b009      	add	sp, #36	; 0x24
    4ed2:	f85d fb04 	ldr.w	pc, [sp], #4
    4ed6:	bf00      	nop
    4ed8:	1fff8ba8 	.word	0x1fff8ba8
    4edc:	40064000 	.word	0x40064000
    4ee0:	1fff8b18 	.word	0x1fff8b18

00004ee4 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4ee4:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4ee6:	2300      	movs	r3, #0
    4ee8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4eea:	4b29      	ldr	r3, [pc, #164]	; (4f90 <getFircConfig+0xac>)
    4eec:	681b      	ldr	r3, [r3, #0]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d024      	beq.n	4f3c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4ef2:	2300      	movs	r3, #0
    4ef4:	9301      	str	r3, [sp, #4]
    4ef6:	e01a      	b.n	4f2e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4ef8:	4b25      	ldr	r3, [pc, #148]	; (4f90 <getFircConfig+0xac>)
    4efa:	6819      	ldr	r1, [r3, #0]
    4efc:	9a01      	ldr	r2, [sp, #4]
    4efe:	4613      	mov	r3, r2
    4f00:	005b      	lsls	r3, r3, #1
    4f02:	4413      	add	r3, r2
    4f04:	009b      	lsls	r3, r3, #2
    4f06:	440b      	add	r3, r1
    4f08:	3314      	adds	r3, #20
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	2b05      	cmp	r3, #5
    4f0e:	d10b      	bne.n	4f28 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4f10:	4b1f      	ldr	r3, [pc, #124]	; (4f90 <getFircConfig+0xac>)
    4f12:	6819      	ldr	r1, [r3, #0]
    4f14:	9a01      	ldr	r2, [sp, #4]
    4f16:	4613      	mov	r3, r2
    4f18:	005b      	lsls	r3, r3, #1
    4f1a:	4413      	add	r3, r2
    4f1c:	009b      	lsls	r3, r3, #2
    4f1e:	3310      	adds	r3, #16
    4f20:	440b      	add	r3, r1
    4f22:	3304      	adds	r3, #4
    4f24:	9300      	str	r3, [sp, #0]
                break;
    4f26:	e009      	b.n	4f3c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4f28:	9b01      	ldr	r3, [sp, #4]
    4f2a:	3301      	adds	r3, #1
    4f2c:	9301      	str	r3, [sp, #4]
    4f2e:	4b18      	ldr	r3, [pc, #96]	; (4f90 <getFircConfig+0xac>)
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	7a1b      	ldrb	r3, [r3, #8]
    4f34:	461a      	mov	r2, r3
    4f36:	9b01      	ldr	r3, [sp, #4]
    4f38:	4293      	cmp	r3, r2
    4f3a:	d3dd      	bcc.n	4ef8 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f3c:	9b00      	ldr	r3, [sp, #0]
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d121      	bne.n	4f86 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4f42:	4b14      	ldr	r3, [pc, #80]	; (4f94 <getFircConfig+0xb0>)
    4f44:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4f46:	4b13      	ldr	r3, [pc, #76]	; (4f94 <getFircConfig+0xb0>)
    4f48:	2205      	movs	r2, #5
    4f4a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4f4c:	4b12      	ldr	r3, [pc, #72]	; (4f98 <getFircConfig+0xb4>)
    4f4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4f52:	b29b      	uxth	r3, r3
    4f54:	f003 0301 	and.w	r3, r3, #1
    4f58:	b29a      	uxth	r2, r3
    4f5a:	4b0e      	ldr	r3, [pc, #56]	; (4f94 <getFircConfig+0xb0>)
    4f5c:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4f5e:	4b0e      	ldr	r3, [pc, #56]	; (4f98 <getFircConfig+0xb4>)
    4f60:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4f64:	b2db      	uxtb	r3, r3
    4f66:	f003 0303 	and.w	r3, r3, #3
    4f6a:	b2da      	uxtb	r2, r3
    4f6c:	4b09      	ldr	r3, [pc, #36]	; (4f94 <getFircConfig+0xb0>)
    4f6e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4f70:	4b09      	ldr	r3, [pc, #36]	; (4f98 <getFircConfig+0xb4>)
    4f72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4f76:	b2db      	uxtb	r3, r3
    4f78:	10db      	asrs	r3, r3, #3
    4f7a:	b2db      	uxtb	r3, r3
    4f7c:	f003 0301 	and.w	r3, r3, #1
    4f80:	b2da      	uxtb	r2, r3
    4f82:	4b04      	ldr	r3, [pc, #16]	; (4f94 <getFircConfig+0xb0>)
    4f84:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4f86:	9b00      	ldr	r3, [sp, #0]
}
    4f88:	4618      	mov	r0, r3
    4f8a:	b002      	add	sp, #8
    4f8c:	4770      	bx	lr
    4f8e:	bf00      	nop
    4f90:	1fff8ba8 	.word	0x1fff8ba8
    4f94:	1fff8c14 	.word	0x1fff8c14
    4f98:	40064000 	.word	0x40064000

00004f9c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4f9c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4f9e:	2300      	movs	r3, #0
    4fa0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4fa2:	4b20      	ldr	r3, [pc, #128]	; (5024 <getSoscConfig+0x88>)
    4fa4:	681b      	ldr	r3, [r3, #0]
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	d024      	beq.n	4ff4 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4faa:	2300      	movs	r3, #0
    4fac:	9301      	str	r3, [sp, #4]
    4fae:	e01a      	b.n	4fe6 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4fb0:	4b1c      	ldr	r3, [pc, #112]	; (5024 <getSoscConfig+0x88>)
    4fb2:	6819      	ldr	r1, [r3, #0]
    4fb4:	9a01      	ldr	r2, [sp, #4]
    4fb6:	4613      	mov	r3, r2
    4fb8:	009b      	lsls	r3, r3, #2
    4fba:	4413      	add	r3, r2
    4fbc:	009b      	lsls	r3, r3, #2
    4fbe:	440b      	add	r3, r1
    4fc0:	332c      	adds	r3, #44	; 0x2c
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	2b08      	cmp	r3, #8
    4fc6:	d10b      	bne.n	4fe0 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4fc8:	4b16      	ldr	r3, [pc, #88]	; (5024 <getSoscConfig+0x88>)
    4fca:	6819      	ldr	r1, [r3, #0]
    4fcc:	9a01      	ldr	r2, [sp, #4]
    4fce:	4613      	mov	r3, r2
    4fd0:	009b      	lsls	r3, r3, #2
    4fd2:	4413      	add	r3, r2
    4fd4:	009b      	lsls	r3, r3, #2
    4fd6:	3328      	adds	r3, #40	; 0x28
    4fd8:	440b      	add	r3, r1
    4fda:	3304      	adds	r3, #4
    4fdc:	9300      	str	r3, [sp, #0]
                break;
    4fde:	e009      	b.n	4ff4 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4fe0:	9b01      	ldr	r3, [sp, #4]
    4fe2:	3301      	adds	r3, #1
    4fe4:	9301      	str	r3, [sp, #4]
    4fe6:	4b0f      	ldr	r3, [pc, #60]	; (5024 <getSoscConfig+0x88>)
    4fe8:	681b      	ldr	r3, [r3, #0]
    4fea:	7a5b      	ldrb	r3, [r3, #9]
    4fec:	461a      	mov	r2, r3
    4fee:	9b01      	ldr	r3, [sp, #4]
    4ff0:	4293      	cmp	r3, r2
    4ff2:	d3dd      	bcc.n	4fb0 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ff4:	9b00      	ldr	r3, [sp, #0]
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d110      	bne.n	501c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4ffa:	4b0b      	ldr	r3, [pc, #44]	; (5028 <getSoscConfig+0x8c>)
    4ffc:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4ffe:	4b0a      	ldr	r3, [pc, #40]	; (5028 <getSoscConfig+0x8c>)
    5000:	2208      	movs	r2, #8
    5002:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5004:	4b09      	ldr	r3, [pc, #36]	; (502c <getSoscConfig+0x90>)
    5006:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    500a:	b29b      	uxth	r3, r3
    500c:	f003 0301 	and.w	r3, r3, #1
    5010:	b29a      	uxth	r2, r3
    5012:	4b05      	ldr	r3, [pc, #20]	; (5028 <getSoscConfig+0x8c>)
    5014:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5016:	4b04      	ldr	r3, [pc, #16]	; (5028 <getSoscConfig+0x8c>)
    5018:	4a05      	ldr	r2, [pc, #20]	; (5030 <getSoscConfig+0x94>)
    501a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    501c:	9b00      	ldr	r3, [sp, #0]
}
    501e:	4618      	mov	r0, r3
    5020:	b002      	add	sp, #8
    5022:	4770      	bx	lr
    5024:	1fff8ba8 	.word	0x1fff8ba8
    5028:	1fff8c20 	.word	0x1fff8c20
    502c:	40064000 	.word	0x40064000
    5030:	02625a00 	.word	0x02625a00

00005034 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5034:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5036:	2300      	movs	r3, #0
    5038:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    503a:	4b28      	ldr	r3, [pc, #160]	; (50dc <getSpllConfig+0xa8>)
    503c:	681b      	ldr	r3, [r3, #0]
    503e:	2b00      	cmp	r3, #0
    5040:	d023      	beq.n	508a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5042:	2300      	movs	r3, #0
    5044:	9301      	str	r3, [sp, #4]
    5046:	e019      	b.n	507c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5048:	4b24      	ldr	r3, [pc, #144]	; (50dc <getSpllConfig+0xa8>)
    504a:	6819      	ldr	r1, [r3, #0]
    504c:	9a01      	ldr	r2, [sp, #4]
    504e:	4613      	mov	r3, r2
    5050:	009b      	lsls	r3, r3, #2
    5052:	4413      	add	r3, r2
    5054:	00db      	lsls	r3, r3, #3
    5056:	440b      	add	r3, r1
    5058:	3340      	adds	r3, #64	; 0x40
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	2b09      	cmp	r3, #9
    505e:	d10a      	bne.n	5076 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5060:	4b1e      	ldr	r3, [pc, #120]	; (50dc <getSpllConfig+0xa8>)
    5062:	6819      	ldr	r1, [r3, #0]
    5064:	9a01      	ldr	r2, [sp, #4]
    5066:	4613      	mov	r3, r2
    5068:	009b      	lsls	r3, r3, #2
    506a:	4413      	add	r3, r2
    506c:	00db      	lsls	r3, r3, #3
    506e:	3340      	adds	r3, #64	; 0x40
    5070:	440b      	add	r3, r1
    5072:	9300      	str	r3, [sp, #0]
                break;
    5074:	e009      	b.n	508a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5076:	9b01      	ldr	r3, [sp, #4]
    5078:	3301      	adds	r3, #1
    507a:	9301      	str	r3, [sp, #4]
    507c:	4b17      	ldr	r3, [pc, #92]	; (50dc <getSpllConfig+0xa8>)
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	7a9b      	ldrb	r3, [r3, #10]
    5082:	461a      	mov	r2, r3
    5084:	9b01      	ldr	r3, [sp, #4]
    5086:	4293      	cmp	r3, r2
    5088:	d3de      	bcc.n	5048 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    508a:	9b00      	ldr	r3, [sp, #0]
    508c:	2b00      	cmp	r3, #0
    508e:	d121      	bne.n	50d4 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5090:	4b13      	ldr	r3, [pc, #76]	; (50e0 <getSpllConfig+0xac>)
    5092:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5094:	4b12      	ldr	r3, [pc, #72]	; (50e0 <getSpllConfig+0xac>)
    5096:	2209      	movs	r2, #9
    5098:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    509a:	4b12      	ldr	r3, [pc, #72]	; (50e4 <getSpllConfig+0xb0>)
    509c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    50a0:	b29b      	uxth	r3, r3
    50a2:	f003 0301 	and.w	r3, r3, #1
    50a6:	b29a      	uxth	r2, r3
    50a8:	4b0d      	ldr	r3, [pc, #52]	; (50e0 <getSpllConfig+0xac>)
    50aa:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    50ac:	4b0d      	ldr	r3, [pc, #52]	; (50e4 <getSpllConfig+0xb0>)
    50ae:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    50b2:	0a1b      	lsrs	r3, r3, #8
    50b4:	b2db      	uxtb	r3, r3
    50b6:	f003 0307 	and.w	r3, r3, #7
    50ba:	b2da      	uxtb	r2, r3
    50bc:	4b08      	ldr	r3, [pc, #32]	; (50e0 <getSpllConfig+0xac>)
    50be:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    50c0:	4b08      	ldr	r3, [pc, #32]	; (50e4 <getSpllConfig+0xb0>)
    50c2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    50c6:	0c1b      	lsrs	r3, r3, #16
    50c8:	b2db      	uxtb	r3, r3
    50ca:	f003 031f 	and.w	r3, r3, #31
    50ce:	b2da      	uxtb	r2, r3
    50d0:	4b03      	ldr	r3, [pc, #12]	; (50e0 <getSpllConfig+0xac>)
    50d2:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    50d4:	9b00      	ldr	r3, [sp, #0]
}
    50d6:	4618      	mov	r0, r3
    50d8:	b002      	add	sp, #8
    50da:	4770      	bx	lr
    50dc:	1fff8ba8 	.word	0x1fff8ba8
    50e0:	1fff8c34 	.word	0x1fff8c34
    50e4:	40064000 	.word	0x40064000

000050e8 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    50e8:	b086      	sub	sp, #24
    50ea:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    50ec:	2300      	movs	r3, #0
    50ee:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    50f0:	9b01      	ldr	r3, [sp, #4]
    50f2:	2b1b      	cmp	r3, #27
    50f4:	d00f      	beq.n	5116 <getSelectorConfig+0x2e>
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	2b1b      	cmp	r3, #27
    50fa:	d80f      	bhi.n	511c <getSelectorConfig+0x34>
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	2b19      	cmp	r3, #25
    5100:	d003      	beq.n	510a <getSelectorConfig+0x22>
    5102:	9b01      	ldr	r3, [sp, #4]
    5104:	2b1a      	cmp	r3, #26
    5106:	d003      	beq.n	5110 <getSelectorConfig+0x28>
    5108:	e008      	b.n	511c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    510a:	2300      	movs	r3, #0
    510c:	9304      	str	r3, [sp, #16]
            break;
    510e:	e008      	b.n	5122 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5110:	2301      	movs	r3, #1
    5112:	9304      	str	r3, [sp, #16]
            break;
    5114:	e005      	b.n	5122 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5116:	2302      	movs	r3, #2
    5118:	9304      	str	r3, [sp, #16]
            break;
    511a:	e002      	b.n	5122 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    511c:	2300      	movs	r3, #0
    511e:	9304      	str	r3, [sp, #16]
            break;
    5120:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5122:	4b36      	ldr	r3, [pc, #216]	; (51fc <getSelectorConfig+0x114>)
    5124:	681b      	ldr	r3, [r3, #0]
    5126:	2b00      	cmp	r3, #0
    5128:	d01d      	beq.n	5166 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    512a:	2300      	movs	r3, #0
    512c:	9303      	str	r3, [sp, #12]
    512e:	e013      	b.n	5158 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5130:	4b32      	ldr	r3, [pc, #200]	; (51fc <getSelectorConfig+0x114>)
    5132:	681b      	ldr	r3, [r3, #0]
    5134:	9a03      	ldr	r2, [sp, #12]
    5136:	320d      	adds	r2, #13
    5138:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    513c:	9a01      	ldr	r2, [sp, #4]
    513e:	429a      	cmp	r2, r3
    5140:	d107      	bne.n	5152 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5142:	4b2e      	ldr	r3, [pc, #184]	; (51fc <getSelectorConfig+0x114>)
    5144:	681a      	ldr	r2, [r3, #0]
    5146:	9b03      	ldr	r3, [sp, #12]
    5148:	330d      	adds	r3, #13
    514a:	00db      	lsls	r3, r3, #3
    514c:	4413      	add	r3, r2
    514e:	9305      	str	r3, [sp, #20]
                break;
    5150:	e009      	b.n	5166 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5152:	9b03      	ldr	r3, [sp, #12]
    5154:	3301      	adds	r3, #1
    5156:	9303      	str	r3, [sp, #12]
    5158:	4b28      	ldr	r3, [pc, #160]	; (51fc <getSelectorConfig+0x114>)
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	7adb      	ldrb	r3, [r3, #11]
    515e:	461a      	mov	r2, r3
    5160:	9b03      	ldr	r3, [sp, #12]
    5162:	4293      	cmp	r3, r2
    5164:	d3e4      	bcc.n	5130 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5166:	9b05      	ldr	r3, [sp, #20]
    5168:	2b00      	cmp	r3, #0
    516a:	d140      	bne.n	51ee <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    516c:	9b04      	ldr	r3, [sp, #16]
    516e:	00db      	lsls	r3, r3, #3
    5170:	4a23      	ldr	r2, [pc, #140]	; (5200 <getSelectorConfig+0x118>)
    5172:	4413      	add	r3, r2
    5174:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5176:	4922      	ldr	r1, [pc, #136]	; (5200 <getSelectorConfig+0x118>)
    5178:	9b04      	ldr	r3, [sp, #16]
    517a:	9a01      	ldr	r2, [sp, #4]
    517c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5180:	9b01      	ldr	r3, [sp, #4]
    5182:	2b1b      	cmp	r3, #27
    5184:	d025      	beq.n	51d2 <getSelectorConfig+0xea>
    5186:	9b01      	ldr	r3, [sp, #4]
    5188:	2b1b      	cmp	r3, #27
    518a:	d832      	bhi.n	51f2 <getSelectorConfig+0x10a>
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	2b19      	cmp	r3, #25
    5190:	d003      	beq.n	519a <getSelectorConfig+0xb2>
    5192:	9b01      	ldr	r3, [sp, #4]
    5194:	2b1a      	cmp	r3, #26
    5196:	d00e      	beq.n	51b6 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5198:	e02b      	b.n	51f2 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    519a:	4b1a      	ldr	r3, [pc, #104]	; (5204 <getSelectorConfig+0x11c>)
    519c:	695b      	ldr	r3, [r3, #20]
    519e:	0e1b      	lsrs	r3, r3, #24
    51a0:	f003 030f 	and.w	r3, r3, #15
    51a4:	4a18      	ldr	r2, [pc, #96]	; (5208 <getSelectorConfig+0x120>)
    51a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    51aa:	4915      	ldr	r1, [pc, #84]	; (5200 <getSelectorConfig+0x118>)
    51ac:	9b04      	ldr	r3, [sp, #16]
    51ae:	00db      	lsls	r3, r3, #3
    51b0:	440b      	add	r3, r1
    51b2:	605a      	str	r2, [r3, #4]
                break;
    51b4:	e01e      	b.n	51f4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    51b6:	4b13      	ldr	r3, [pc, #76]	; (5204 <getSelectorConfig+0x11c>)
    51b8:	699b      	ldr	r3, [r3, #24]
    51ba:	0e1b      	lsrs	r3, r3, #24
    51bc:	f003 030f 	and.w	r3, r3, #15
    51c0:	4a11      	ldr	r2, [pc, #68]	; (5208 <getSelectorConfig+0x120>)
    51c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    51c6:	490e      	ldr	r1, [pc, #56]	; (5200 <getSelectorConfig+0x118>)
    51c8:	9b04      	ldr	r3, [sp, #16]
    51ca:	00db      	lsls	r3, r3, #3
    51cc:	440b      	add	r3, r1
    51ce:	605a      	str	r2, [r3, #4]
                break;
    51d0:	e010      	b.n	51f4 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    51d2:	4b0c      	ldr	r3, [pc, #48]	; (5204 <getSelectorConfig+0x11c>)
    51d4:	69db      	ldr	r3, [r3, #28]
    51d6:	0e1b      	lsrs	r3, r3, #24
    51d8:	f003 030f 	and.w	r3, r3, #15
    51dc:	4a0a      	ldr	r2, [pc, #40]	; (5208 <getSelectorConfig+0x120>)
    51de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    51e2:	4907      	ldr	r1, [pc, #28]	; (5200 <getSelectorConfig+0x118>)
    51e4:	9b04      	ldr	r3, [sp, #16]
    51e6:	00db      	lsls	r3, r3, #3
    51e8:	440b      	add	r3, r1
    51ea:	605a      	str	r2, [r3, #4]
                break;
    51ec:	e002      	b.n	51f4 <getSelectorConfig+0x10c>
        }
    }
    51ee:	bf00      	nop
    51f0:	e000      	b.n	51f4 <getSelectorConfig+0x10c>
                break;
    51f2:	bf00      	nop

    return ReturnValue;
    51f4:	9b05      	ldr	r3, [sp, #20]
}
    51f6:	4618      	mov	r0, r3
    51f8:	b006      	add	sp, #24
    51fa:	4770      	bx	lr
    51fc:	1fff8ba8 	.word	0x1fff8ba8
    5200:	1fff8c5c 	.word	0x1fff8c5c
    5204:	40064000 	.word	0x40064000
    5208:	00008e8c 	.word	0x00008e8c

0000520c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    520c:	b086      	sub	sp, #24
    520e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5210:	2300      	movs	r3, #0
    5212:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5214:	2300      	movs	r3, #0
    5216:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5218:	9b01      	ldr	r3, [sp, #4]
    521a:	2b1f      	cmp	r3, #31
    521c:	d00f      	beq.n	523e <getCoreDividerConfig+0x32>
    521e:	9b01      	ldr	r3, [sp, #4]
    5220:	2b1f      	cmp	r3, #31
    5222:	d80f      	bhi.n	5244 <getCoreDividerConfig+0x38>
    5224:	9b01      	ldr	r3, [sp, #4]
    5226:	2b1d      	cmp	r3, #29
    5228:	d003      	beq.n	5232 <getCoreDividerConfig+0x26>
    522a:	9b01      	ldr	r3, [sp, #4]
    522c:	2b1e      	cmp	r3, #30
    522e:	d003      	beq.n	5238 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5230:	e008      	b.n	5244 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5232:	2300      	movs	r3, #0
    5234:	9304      	str	r3, [sp, #16]
            break;
    5236:	e006      	b.n	5246 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5238:	2301      	movs	r3, #1
    523a:	9304      	str	r3, [sp, #16]
            break;
    523c:	e003      	b.n	5246 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    523e:	2302      	movs	r3, #2
    5240:	9304      	str	r3, [sp, #16]
            break;
    5242:	e000      	b.n	5246 <getCoreDividerConfig+0x3a>
                break;
    5244:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5246:	4b41      	ldr	r3, [pc, #260]	; (534c <getCoreDividerConfig+0x140>)
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	2b00      	cmp	r3, #0
    524c:	d026      	beq.n	529c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    524e:	2300      	movs	r3, #0
    5250:	9303      	str	r3, [sp, #12]
    5252:	e01c      	b.n	528e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5254:	4b3d      	ldr	r3, [pc, #244]	; (534c <getCoreDividerConfig+0x140>)
    5256:	6819      	ldr	r1, [r3, #0]
    5258:	9a03      	ldr	r2, [sp, #12]
    525a:	4613      	mov	r3, r2
    525c:	005b      	lsls	r3, r3, #1
    525e:	4413      	add	r3, r2
    5260:	009b      	lsls	r3, r3, #2
    5262:	440b      	add	r3, r1
    5264:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5268:	681b      	ldr	r3, [r3, #0]
    526a:	9a01      	ldr	r2, [sp, #4]
    526c:	429a      	cmp	r2, r3
    526e:	d10b      	bne.n	5288 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5270:	4b36      	ldr	r3, [pc, #216]	; (534c <getCoreDividerConfig+0x140>)
    5272:	6819      	ldr	r1, [r3, #0]
    5274:	9a03      	ldr	r2, [sp, #12]
    5276:	4613      	mov	r3, r2
    5278:	005b      	lsls	r3, r3, #1
    527a:	4413      	add	r3, r2
    527c:	009b      	lsls	r3, r3, #2
    527e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5282:	440b      	add	r3, r1
    5284:	9305      	str	r3, [sp, #20]
                break;
    5286:	e009      	b.n	529c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5288:	9b03      	ldr	r3, [sp, #12]
    528a:	3301      	adds	r3, #1
    528c:	9303      	str	r3, [sp, #12]
    528e:	4b2f      	ldr	r3, [pc, #188]	; (534c <getCoreDividerConfig+0x140>)
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	7b1b      	ldrb	r3, [r3, #12]
    5294:	461a      	mov	r2, r3
    5296:	9b03      	ldr	r3, [sp, #12]
    5298:	4293      	cmp	r3, r2
    529a:	d3db      	bcc.n	5254 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    529c:	9b05      	ldr	r3, [sp, #20]
    529e:	2b00      	cmp	r3, #0
    52a0:	d14d      	bne.n	533e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    52a2:	9a04      	ldr	r2, [sp, #16]
    52a4:	4613      	mov	r3, r2
    52a6:	005b      	lsls	r3, r3, #1
    52a8:	4413      	add	r3, r2
    52aa:	009b      	lsls	r3, r3, #2
    52ac:	4a28      	ldr	r2, [pc, #160]	; (5350 <getCoreDividerConfig+0x144>)
    52ae:	4413      	add	r3, r2
    52b0:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    52b2:	4927      	ldr	r1, [pc, #156]	; (5350 <getCoreDividerConfig+0x144>)
    52b4:	9a04      	ldr	r2, [sp, #16]
    52b6:	4613      	mov	r3, r2
    52b8:	005b      	lsls	r3, r3, #1
    52ba:	4413      	add	r3, r2
    52bc:	009b      	lsls	r3, r3, #2
    52be:	440b      	add	r3, r1
    52c0:	9a01      	ldr	r2, [sp, #4]
    52c2:	601a      	str	r2, [r3, #0]
        switch(Name)
    52c4:	9b01      	ldr	r3, [sp, #4]
    52c6:	2b1f      	cmp	r3, #31
    52c8:	d029      	beq.n	531e <getCoreDividerConfig+0x112>
    52ca:	9b01      	ldr	r3, [sp, #4]
    52cc:	2b1f      	cmp	r3, #31
    52ce:	d838      	bhi.n	5342 <getCoreDividerConfig+0x136>
    52d0:	9b01      	ldr	r3, [sp, #4]
    52d2:	2b1d      	cmp	r3, #29
    52d4:	d003      	beq.n	52de <getCoreDividerConfig+0xd2>
    52d6:	9b01      	ldr	r3, [sp, #4]
    52d8:	2b1e      	cmp	r3, #30
    52da:	d010      	beq.n	52fe <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    52dc:	e031      	b.n	5342 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    52de:	4b1d      	ldr	r3, [pc, #116]	; (5354 <getCoreDividerConfig+0x148>)
    52e0:	695b      	ldr	r3, [r3, #20]
    52e2:	0c1b      	lsrs	r3, r3, #16
    52e4:	f003 030f 	and.w	r3, r3, #15
    52e8:	1c59      	adds	r1, r3, #1
    52ea:	4819      	ldr	r0, [pc, #100]	; (5350 <getCoreDividerConfig+0x144>)
    52ec:	9a04      	ldr	r2, [sp, #16]
    52ee:	4613      	mov	r3, r2
    52f0:	005b      	lsls	r3, r3, #1
    52f2:	4413      	add	r3, r2
    52f4:	009b      	lsls	r3, r3, #2
    52f6:	4403      	add	r3, r0
    52f8:	3304      	adds	r3, #4
    52fa:	6019      	str	r1, [r3, #0]
                break;
    52fc:	e022      	b.n	5344 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    52fe:	4b15      	ldr	r3, [pc, #84]	; (5354 <getCoreDividerConfig+0x148>)
    5300:	699b      	ldr	r3, [r3, #24]
    5302:	0c1b      	lsrs	r3, r3, #16
    5304:	f003 030f 	and.w	r3, r3, #15
    5308:	1c59      	adds	r1, r3, #1
    530a:	4811      	ldr	r0, [pc, #68]	; (5350 <getCoreDividerConfig+0x144>)
    530c:	9a04      	ldr	r2, [sp, #16]
    530e:	4613      	mov	r3, r2
    5310:	005b      	lsls	r3, r3, #1
    5312:	4413      	add	r3, r2
    5314:	009b      	lsls	r3, r3, #2
    5316:	4403      	add	r3, r0
    5318:	3304      	adds	r3, #4
    531a:	6019      	str	r1, [r3, #0]
                break;
    531c:	e012      	b.n	5344 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    531e:	4b0d      	ldr	r3, [pc, #52]	; (5354 <getCoreDividerConfig+0x148>)
    5320:	69db      	ldr	r3, [r3, #28]
    5322:	0c1b      	lsrs	r3, r3, #16
    5324:	f003 030f 	and.w	r3, r3, #15
    5328:	1c59      	adds	r1, r3, #1
    532a:	4809      	ldr	r0, [pc, #36]	; (5350 <getCoreDividerConfig+0x144>)
    532c:	9a04      	ldr	r2, [sp, #16]
    532e:	4613      	mov	r3, r2
    5330:	005b      	lsls	r3, r3, #1
    5332:	4413      	add	r3, r2
    5334:	009b      	lsls	r3, r3, #2
    5336:	4403      	add	r3, r0
    5338:	3304      	adds	r3, #4
    533a:	6019      	str	r1, [r3, #0]
                break;
    533c:	e002      	b.n	5344 <getCoreDividerConfig+0x138>
        }
    }
    533e:	bf00      	nop
    5340:	e000      	b.n	5344 <getCoreDividerConfig+0x138>
                break;
    5342:	bf00      	nop

    return ReturnValue;
    5344:	9b05      	ldr	r3, [sp, #20]
}
    5346:	4618      	mov	r0, r3
    5348:	b006      	add	sp, #24
    534a:	4770      	bx	lr
    534c:	1fff8ba8 	.word	0x1fff8ba8
    5350:	1fff8c74 	.word	0x1fff8c74
    5354:	40064000 	.word	0x40064000

00005358 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5358:	b086      	sub	sp, #24
    535a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    535c:	2300      	movs	r3, #0
    535e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5360:	2300      	movs	r3, #0
    5362:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5364:	9b01      	ldr	r3, [sp, #4]
    5366:	2b23      	cmp	r3, #35	; 0x23
    5368:	d00f      	beq.n	538a <getBusDividerConfig+0x32>
    536a:	9b01      	ldr	r3, [sp, #4]
    536c:	2b23      	cmp	r3, #35	; 0x23
    536e:	d80f      	bhi.n	5390 <getBusDividerConfig+0x38>
    5370:	9b01      	ldr	r3, [sp, #4]
    5372:	2b21      	cmp	r3, #33	; 0x21
    5374:	d003      	beq.n	537e <getBusDividerConfig+0x26>
    5376:	9b01      	ldr	r3, [sp, #4]
    5378:	2b22      	cmp	r3, #34	; 0x22
    537a:	d003      	beq.n	5384 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    537c:	e008      	b.n	5390 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    537e:	2300      	movs	r3, #0
    5380:	9304      	str	r3, [sp, #16]
            break;
    5382:	e006      	b.n	5392 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5384:	2301      	movs	r3, #1
    5386:	9304      	str	r3, [sp, #16]
            break;
    5388:	e003      	b.n	5392 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    538a:	2302      	movs	r3, #2
    538c:	9304      	str	r3, [sp, #16]
            break;
    538e:	e000      	b.n	5392 <getBusDividerConfig+0x3a>
                break;
    5390:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5392:	4b41      	ldr	r3, [pc, #260]	; (5498 <getBusDividerConfig+0x140>)
    5394:	681b      	ldr	r3, [r3, #0]
    5396:	2b00      	cmp	r3, #0
    5398:	d026      	beq.n	53e8 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    539a:	2300      	movs	r3, #0
    539c:	9303      	str	r3, [sp, #12]
    539e:	e01c      	b.n	53da <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    53a0:	4b3d      	ldr	r3, [pc, #244]	; (5498 <getBusDividerConfig+0x140>)
    53a2:	6819      	ldr	r1, [r3, #0]
    53a4:	9a03      	ldr	r2, [sp, #12]
    53a6:	4613      	mov	r3, r2
    53a8:	005b      	lsls	r3, r3, #1
    53aa:	4413      	add	r3, r2
    53ac:	009b      	lsls	r3, r3, #2
    53ae:	440b      	add	r3, r1
    53b0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	9a01      	ldr	r2, [sp, #4]
    53b8:	429a      	cmp	r2, r3
    53ba:	d10b      	bne.n	53d4 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    53bc:	4b36      	ldr	r3, [pc, #216]	; (5498 <getBusDividerConfig+0x140>)
    53be:	6819      	ldr	r1, [r3, #0]
    53c0:	9a03      	ldr	r2, [sp, #12]
    53c2:	4613      	mov	r3, r2
    53c4:	005b      	lsls	r3, r3, #1
    53c6:	4413      	add	r3, r2
    53c8:	009b      	lsls	r3, r3, #2
    53ca:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    53ce:	440b      	add	r3, r1
    53d0:	9305      	str	r3, [sp, #20]
                break;
    53d2:	e009      	b.n	53e8 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    53d4:	9b03      	ldr	r3, [sp, #12]
    53d6:	3301      	adds	r3, #1
    53d8:	9303      	str	r3, [sp, #12]
    53da:	4b2f      	ldr	r3, [pc, #188]	; (5498 <getBusDividerConfig+0x140>)
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	7b1b      	ldrb	r3, [r3, #12]
    53e0:	461a      	mov	r2, r3
    53e2:	9b03      	ldr	r3, [sp, #12]
    53e4:	4293      	cmp	r3, r2
    53e6:	d3db      	bcc.n	53a0 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    53e8:	9b05      	ldr	r3, [sp, #20]
    53ea:	2b00      	cmp	r3, #0
    53ec:	d14d      	bne.n	548a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    53ee:	9a04      	ldr	r2, [sp, #16]
    53f0:	4613      	mov	r3, r2
    53f2:	005b      	lsls	r3, r3, #1
    53f4:	4413      	add	r3, r2
    53f6:	009b      	lsls	r3, r3, #2
    53f8:	4a28      	ldr	r2, [pc, #160]	; (549c <getBusDividerConfig+0x144>)
    53fa:	4413      	add	r3, r2
    53fc:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    53fe:	4927      	ldr	r1, [pc, #156]	; (549c <getBusDividerConfig+0x144>)
    5400:	9a04      	ldr	r2, [sp, #16]
    5402:	4613      	mov	r3, r2
    5404:	005b      	lsls	r3, r3, #1
    5406:	4413      	add	r3, r2
    5408:	009b      	lsls	r3, r3, #2
    540a:	440b      	add	r3, r1
    540c:	9a01      	ldr	r2, [sp, #4]
    540e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5410:	9b01      	ldr	r3, [sp, #4]
    5412:	2b23      	cmp	r3, #35	; 0x23
    5414:	d029      	beq.n	546a <getBusDividerConfig+0x112>
    5416:	9b01      	ldr	r3, [sp, #4]
    5418:	2b23      	cmp	r3, #35	; 0x23
    541a:	d838      	bhi.n	548e <getBusDividerConfig+0x136>
    541c:	9b01      	ldr	r3, [sp, #4]
    541e:	2b21      	cmp	r3, #33	; 0x21
    5420:	d003      	beq.n	542a <getBusDividerConfig+0xd2>
    5422:	9b01      	ldr	r3, [sp, #4]
    5424:	2b22      	cmp	r3, #34	; 0x22
    5426:	d010      	beq.n	544a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5428:	e031      	b.n	548e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    542a:	4b1d      	ldr	r3, [pc, #116]	; (54a0 <getBusDividerConfig+0x148>)
    542c:	695b      	ldr	r3, [r3, #20]
    542e:	091b      	lsrs	r3, r3, #4
    5430:	f003 030f 	and.w	r3, r3, #15
    5434:	1c59      	adds	r1, r3, #1
    5436:	4819      	ldr	r0, [pc, #100]	; (549c <getBusDividerConfig+0x144>)
    5438:	9a04      	ldr	r2, [sp, #16]
    543a:	4613      	mov	r3, r2
    543c:	005b      	lsls	r3, r3, #1
    543e:	4413      	add	r3, r2
    5440:	009b      	lsls	r3, r3, #2
    5442:	4403      	add	r3, r0
    5444:	3304      	adds	r3, #4
    5446:	6019      	str	r1, [r3, #0]
                break;
    5448:	e022      	b.n	5490 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    544a:	4b15      	ldr	r3, [pc, #84]	; (54a0 <getBusDividerConfig+0x148>)
    544c:	699b      	ldr	r3, [r3, #24]
    544e:	091b      	lsrs	r3, r3, #4
    5450:	f003 030f 	and.w	r3, r3, #15
    5454:	1c59      	adds	r1, r3, #1
    5456:	4811      	ldr	r0, [pc, #68]	; (549c <getBusDividerConfig+0x144>)
    5458:	9a04      	ldr	r2, [sp, #16]
    545a:	4613      	mov	r3, r2
    545c:	005b      	lsls	r3, r3, #1
    545e:	4413      	add	r3, r2
    5460:	009b      	lsls	r3, r3, #2
    5462:	4403      	add	r3, r0
    5464:	3304      	adds	r3, #4
    5466:	6019      	str	r1, [r3, #0]
                break;
    5468:	e012      	b.n	5490 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    546a:	4b0d      	ldr	r3, [pc, #52]	; (54a0 <getBusDividerConfig+0x148>)
    546c:	69db      	ldr	r3, [r3, #28]
    546e:	091b      	lsrs	r3, r3, #4
    5470:	f003 030f 	and.w	r3, r3, #15
    5474:	1c59      	adds	r1, r3, #1
    5476:	4809      	ldr	r0, [pc, #36]	; (549c <getBusDividerConfig+0x144>)
    5478:	9a04      	ldr	r2, [sp, #16]
    547a:	4613      	mov	r3, r2
    547c:	005b      	lsls	r3, r3, #1
    547e:	4413      	add	r3, r2
    5480:	009b      	lsls	r3, r3, #2
    5482:	4403      	add	r3, r0
    5484:	3304      	adds	r3, #4
    5486:	6019      	str	r1, [r3, #0]
                break;
    5488:	e002      	b.n	5490 <getBusDividerConfig+0x138>
        }
    }
    548a:	bf00      	nop
    548c:	e000      	b.n	5490 <getBusDividerConfig+0x138>
                break;
    548e:	bf00      	nop

    return ReturnValue;
    5490:	9b05      	ldr	r3, [sp, #20]
}
    5492:	4618      	mov	r0, r3
    5494:	b006      	add	sp, #24
    5496:	4770      	bx	lr
    5498:	1fff8ba8 	.word	0x1fff8ba8
    549c:	1fff8c98 	.word	0x1fff8c98
    54a0:	40064000 	.word	0x40064000

000054a4 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    54a4:	b086      	sub	sp, #24
    54a6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    54a8:	2300      	movs	r3, #0
    54aa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    54ac:	2300      	movs	r3, #0
    54ae:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    54b0:	9b01      	ldr	r3, [sp, #4]
    54b2:	2b27      	cmp	r3, #39	; 0x27
    54b4:	d00f      	beq.n	54d6 <getSlowDividerConfig+0x32>
    54b6:	9b01      	ldr	r3, [sp, #4]
    54b8:	2b27      	cmp	r3, #39	; 0x27
    54ba:	d80f      	bhi.n	54dc <getSlowDividerConfig+0x38>
    54bc:	9b01      	ldr	r3, [sp, #4]
    54be:	2b25      	cmp	r3, #37	; 0x25
    54c0:	d003      	beq.n	54ca <getSlowDividerConfig+0x26>
    54c2:	9b01      	ldr	r3, [sp, #4]
    54c4:	2b26      	cmp	r3, #38	; 0x26
    54c6:	d003      	beq.n	54d0 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    54c8:	e008      	b.n	54dc <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    54ca:	2300      	movs	r3, #0
    54cc:	9304      	str	r3, [sp, #16]
            break;
    54ce:	e006      	b.n	54de <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    54d0:	2301      	movs	r3, #1
    54d2:	9304      	str	r3, [sp, #16]
            break;
    54d4:	e003      	b.n	54de <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    54d6:	2302      	movs	r3, #2
    54d8:	9304      	str	r3, [sp, #16]
            break;
    54da:	e000      	b.n	54de <getSlowDividerConfig+0x3a>
                break;
    54dc:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    54de:	4b40      	ldr	r3, [pc, #256]	; (55e0 <getSlowDividerConfig+0x13c>)
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	2b00      	cmp	r3, #0
    54e4:	d026      	beq.n	5534 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    54e6:	2300      	movs	r3, #0
    54e8:	9303      	str	r3, [sp, #12]
    54ea:	e01c      	b.n	5526 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    54ec:	4b3c      	ldr	r3, [pc, #240]	; (55e0 <getSlowDividerConfig+0x13c>)
    54ee:	6819      	ldr	r1, [r3, #0]
    54f0:	9a03      	ldr	r2, [sp, #12]
    54f2:	4613      	mov	r3, r2
    54f4:	005b      	lsls	r3, r3, #1
    54f6:	4413      	add	r3, r2
    54f8:	009b      	lsls	r3, r3, #2
    54fa:	440b      	add	r3, r1
    54fc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	9a01      	ldr	r2, [sp, #4]
    5504:	429a      	cmp	r2, r3
    5506:	d10b      	bne.n	5520 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5508:	4b35      	ldr	r3, [pc, #212]	; (55e0 <getSlowDividerConfig+0x13c>)
    550a:	6819      	ldr	r1, [r3, #0]
    550c:	9a03      	ldr	r2, [sp, #12]
    550e:	4613      	mov	r3, r2
    5510:	005b      	lsls	r3, r3, #1
    5512:	4413      	add	r3, r2
    5514:	009b      	lsls	r3, r3, #2
    5516:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    551a:	440b      	add	r3, r1
    551c:	9305      	str	r3, [sp, #20]
                break;
    551e:	e009      	b.n	5534 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5520:	9b03      	ldr	r3, [sp, #12]
    5522:	3301      	adds	r3, #1
    5524:	9303      	str	r3, [sp, #12]
    5526:	4b2e      	ldr	r3, [pc, #184]	; (55e0 <getSlowDividerConfig+0x13c>)
    5528:	681b      	ldr	r3, [r3, #0]
    552a:	7b1b      	ldrb	r3, [r3, #12]
    552c:	461a      	mov	r2, r3
    552e:	9b03      	ldr	r3, [sp, #12]
    5530:	4293      	cmp	r3, r2
    5532:	d3db      	bcc.n	54ec <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5534:	9b05      	ldr	r3, [sp, #20]
    5536:	2b00      	cmp	r3, #0
    5538:	d14a      	bne.n	55d0 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    553a:	9a04      	ldr	r2, [sp, #16]
    553c:	4613      	mov	r3, r2
    553e:	005b      	lsls	r3, r3, #1
    5540:	4413      	add	r3, r2
    5542:	009b      	lsls	r3, r3, #2
    5544:	4a27      	ldr	r2, [pc, #156]	; (55e4 <getSlowDividerConfig+0x140>)
    5546:	4413      	add	r3, r2
    5548:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    554a:	4926      	ldr	r1, [pc, #152]	; (55e4 <getSlowDividerConfig+0x140>)
    554c:	9a04      	ldr	r2, [sp, #16]
    554e:	4613      	mov	r3, r2
    5550:	005b      	lsls	r3, r3, #1
    5552:	4413      	add	r3, r2
    5554:	009b      	lsls	r3, r3, #2
    5556:	440b      	add	r3, r1
    5558:	9a01      	ldr	r2, [sp, #4]
    555a:	601a      	str	r2, [r3, #0]
        switch(Name)
    555c:	9b01      	ldr	r3, [sp, #4]
    555e:	2b27      	cmp	r3, #39	; 0x27
    5560:	d027      	beq.n	55b2 <getSlowDividerConfig+0x10e>
    5562:	9b01      	ldr	r3, [sp, #4]
    5564:	2b27      	cmp	r3, #39	; 0x27
    5566:	d835      	bhi.n	55d4 <getSlowDividerConfig+0x130>
    5568:	9b01      	ldr	r3, [sp, #4]
    556a:	2b25      	cmp	r3, #37	; 0x25
    556c:	d003      	beq.n	5576 <getSlowDividerConfig+0xd2>
    556e:	9b01      	ldr	r3, [sp, #4]
    5570:	2b26      	cmp	r3, #38	; 0x26
    5572:	d00f      	beq.n	5594 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5574:	e02e      	b.n	55d4 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5576:	4b1c      	ldr	r3, [pc, #112]	; (55e8 <getSlowDividerConfig+0x144>)
    5578:	695b      	ldr	r3, [r3, #20]
    557a:	f003 030f 	and.w	r3, r3, #15
    557e:	1c59      	adds	r1, r3, #1
    5580:	4818      	ldr	r0, [pc, #96]	; (55e4 <getSlowDividerConfig+0x140>)
    5582:	9a04      	ldr	r2, [sp, #16]
    5584:	4613      	mov	r3, r2
    5586:	005b      	lsls	r3, r3, #1
    5588:	4413      	add	r3, r2
    558a:	009b      	lsls	r3, r3, #2
    558c:	4403      	add	r3, r0
    558e:	3304      	adds	r3, #4
    5590:	6019      	str	r1, [r3, #0]
                break;
    5592:	e020      	b.n	55d6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5594:	4b14      	ldr	r3, [pc, #80]	; (55e8 <getSlowDividerConfig+0x144>)
    5596:	699b      	ldr	r3, [r3, #24]
    5598:	f003 030f 	and.w	r3, r3, #15
    559c:	1c59      	adds	r1, r3, #1
    559e:	4811      	ldr	r0, [pc, #68]	; (55e4 <getSlowDividerConfig+0x140>)
    55a0:	9a04      	ldr	r2, [sp, #16]
    55a2:	4613      	mov	r3, r2
    55a4:	005b      	lsls	r3, r3, #1
    55a6:	4413      	add	r3, r2
    55a8:	009b      	lsls	r3, r3, #2
    55aa:	4403      	add	r3, r0
    55ac:	3304      	adds	r3, #4
    55ae:	6019      	str	r1, [r3, #0]
                break;
    55b0:	e011      	b.n	55d6 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    55b2:	4b0d      	ldr	r3, [pc, #52]	; (55e8 <getSlowDividerConfig+0x144>)
    55b4:	69db      	ldr	r3, [r3, #28]
    55b6:	f003 030f 	and.w	r3, r3, #15
    55ba:	1c59      	adds	r1, r3, #1
    55bc:	4809      	ldr	r0, [pc, #36]	; (55e4 <getSlowDividerConfig+0x140>)
    55be:	9a04      	ldr	r2, [sp, #16]
    55c0:	4613      	mov	r3, r2
    55c2:	005b      	lsls	r3, r3, #1
    55c4:	4413      	add	r3, r2
    55c6:	009b      	lsls	r3, r3, #2
    55c8:	4403      	add	r3, r0
    55ca:	3304      	adds	r3, #4
    55cc:	6019      	str	r1, [r3, #0]
                break;
    55ce:	e002      	b.n	55d6 <getSlowDividerConfig+0x132>
        }
    }
    55d0:	bf00      	nop
    55d2:	e000      	b.n	55d6 <getSlowDividerConfig+0x132>
                break;
    55d4:	bf00      	nop

    return ReturnValue;
    55d6:	9b05      	ldr	r3, [sp, #20]
}
    55d8:	4618      	mov	r0, r3
    55da:	b006      	add	sp, #24
    55dc:	4770      	bx	lr
    55de:	bf00      	nop
    55e0:	1fff8ba8 	.word	0x1fff8ba8
    55e4:	1fff8cbc 	.word	0x1fff8cbc
    55e8:	40064000 	.word	0x40064000

000055ec <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    55ec:	b500      	push	{lr}
    55ee:	b083      	sub	sp, #12
    55f0:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    55f2:	4b64      	ldr	r3, [pc, #400]	; (5784 <Clock_Ip_ClockInitializeObjects+0x198>)
    55f4:	781b      	ldrb	r3, [r3, #0]
    55f6:	f083 0301 	eor.w	r3, r3, #1
    55fa:	b2db      	uxtb	r3, r3
    55fc:	2b00      	cmp	r3, #0
    55fe:	d05b      	beq.n	56b8 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5600:	4b60      	ldr	r3, [pc, #384]	; (5784 <Clock_Ip_ClockInitializeObjects+0x198>)
    5602:	2201      	movs	r2, #1
    5604:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5606:	4b60      	ldr	r3, [pc, #384]	; (5788 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5608:	785b      	ldrb	r3, [r3, #1]
    560a:	461a      	mov	r2, r3
    560c:	4613      	mov	r3, r2
    560e:	009b      	lsls	r3, r3, #2
    5610:	4413      	add	r3, r2
    5612:	009b      	lsls	r3, r3, #2
    5614:	4a5d      	ldr	r2, [pc, #372]	; (578c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5616:	4413      	add	r3, r2
    5618:	4a5d      	ldr	r2, [pc, #372]	; (5790 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    561a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    561c:	4b5d      	ldr	r3, [pc, #372]	; (5794 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    561e:	785b      	ldrb	r3, [r3, #1]
    5620:	461a      	mov	r2, r3
    5622:	4613      	mov	r3, r2
    5624:	009b      	lsls	r3, r3, #2
    5626:	4413      	add	r3, r2
    5628:	009b      	lsls	r3, r3, #2
    562a:	4a5b      	ldr	r2, [pc, #364]	; (5798 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    562c:	4413      	add	r3, r2
    562e:	4a5b      	ldr	r2, [pc, #364]	; (579c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5630:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5632:	4b5b      	ldr	r3, [pc, #364]	; (57a0 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5634:	791b      	ldrb	r3, [r3, #4]
    5636:	461a      	mov	r2, r3
    5638:	4613      	mov	r3, r2
    563a:	005b      	lsls	r3, r3, #1
    563c:	4413      	add	r3, r2
    563e:	009b      	lsls	r3, r3, #2
    5640:	4a58      	ldr	r2, [pc, #352]	; (57a4 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5642:	4413      	add	r3, r2
    5644:	4a58      	ldr	r2, [pc, #352]	; (57a8 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5646:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5648:	4b58      	ldr	r3, [pc, #352]	; (57ac <Clock_Ip_ClockInitializeObjects+0x1c0>)
    564a:	795b      	ldrb	r3, [r3, #5]
    564c:	00db      	lsls	r3, r3, #3
    564e:	4a58      	ldr	r2, [pc, #352]	; (57b0 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5650:	4413      	add	r3, r2
    5652:	4a58      	ldr	r2, [pc, #352]	; (57b4 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5654:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5656:	4b55      	ldr	r3, [pc, #340]	; (57ac <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5658:	79db      	ldrb	r3, [r3, #7]
    565a:	00db      	lsls	r3, r3, #3
    565c:	4a54      	ldr	r2, [pc, #336]	; (57b0 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    565e:	4413      	add	r3, r2
    5660:	4a55      	ldr	r2, [pc, #340]	; (57b8 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5662:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5664:	4b55      	ldr	r3, [pc, #340]	; (57bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5666:	799b      	ldrb	r3, [r3, #6]
    5668:	009b      	lsls	r3, r3, #2
    566a:	4a55      	ldr	r2, [pc, #340]	; (57c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    566c:	4413      	add	r3, r2
    566e:	4a55      	ldr	r2, [pc, #340]	; (57c4 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5670:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5672:	4b52      	ldr	r3, [pc, #328]	; (57bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5674:	7a1b      	ldrb	r3, [r3, #8]
    5676:	009b      	lsls	r3, r3, #2
    5678:	4a51      	ldr	r2, [pc, #324]	; (57c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    567a:	4413      	add	r3, r2
    567c:	4a52      	ldr	r2, [pc, #328]	; (57c8 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    567e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5680:	4b4e      	ldr	r3, [pc, #312]	; (57bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5682:	7a5b      	ldrb	r3, [r3, #9]
    5684:	009b      	lsls	r3, r3, #2
    5686:	4a4e      	ldr	r2, [pc, #312]	; (57c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5688:	4413      	add	r3, r2
    568a:	4a50      	ldr	r2, [pc, #320]	; (57cc <Clock_Ip_ClockInitializeObjects+0x1e0>)
    568c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    568e:	4b4b      	ldr	r3, [pc, #300]	; (57bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5690:	7adb      	ldrb	r3, [r3, #11]
    5692:	009b      	lsls	r3, r3, #2
    5694:	4a4a      	ldr	r2, [pc, #296]	; (57c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5696:	4413      	add	r3, r2
    5698:	4a4d      	ldr	r2, [pc, #308]	; (57d0 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    569a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    569c:	4b47      	ldr	r3, [pc, #284]	; (57bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    569e:	7b1b      	ldrb	r3, [r3, #12]
    56a0:	009b      	lsls	r3, r3, #2
    56a2:	4a47      	ldr	r2, [pc, #284]	; (57c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    56a4:	4413      	add	r3, r2
    56a6:	4a4b      	ldr	r2, [pc, #300]	; (57d4 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    56a8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    56aa:	4b44      	ldr	r3, [pc, #272]	; (57bc <Clock_Ip_ClockInitializeObjects+0x1d0>)
    56ac:	7b9b      	ldrb	r3, [r3, #14]
    56ae:	009b      	lsls	r3, r3, #2
    56b0:	4a43      	ldr	r2, [pc, #268]	; (57c0 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    56b2:	4413      	add	r3, r2
    56b4:	4a48      	ldr	r2, [pc, #288]	; (57d8 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    56b6:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    56b8:	4b48      	ldr	r3, [pc, #288]	; (57dc <Clock_Ip_ClockInitializeObjects+0x1f0>)
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d002      	beq.n	56c6 <Clock_Ip_ClockInitializeObjects+0xda>
    56c0:	9b01      	ldr	r3, [sp, #4]
    56c2:	2b00      	cmp	r3, #0
    56c4:	d003      	beq.n	56ce <Clock_Ip_ClockInitializeObjects+0xe2>
    56c6:	4b46      	ldr	r3, [pc, #280]	; (57e0 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d056      	beq.n	577c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    56ce:	f7ff fc09 	bl	4ee4 <getFircConfig>
    56d2:	4603      	mov	r3, r0
    56d4:	4a43      	ldr	r2, [pc, #268]	; (57e4 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    56d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    56d8:	f7ff fc60 	bl	4f9c <getSoscConfig>
    56dc:	4603      	mov	r3, r0
    56de:	4a42      	ldr	r2, [pc, #264]	; (57e8 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    56e0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    56e2:	f7ff fca7 	bl	5034 <getSpllConfig>
    56e6:	4603      	mov	r3, r0
    56e8:	4a40      	ldr	r2, [pc, #256]	; (57ec <Clock_Ip_ClockInitializeObjects+0x200>)
    56ea:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    56ec:	2019      	movs	r0, #25
    56ee:	f7ff fcfb 	bl	50e8 <getSelectorConfig>
    56f2:	4603      	mov	r3, r0
    56f4:	4a3e      	ldr	r2, [pc, #248]	; (57f0 <Clock_Ip_ClockInitializeObjects+0x204>)
    56f6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    56f8:	201a      	movs	r0, #26
    56fa:	f7ff fcf5 	bl	50e8 <getSelectorConfig>
    56fe:	4603      	mov	r3, r0
    5700:	4a3c      	ldr	r2, [pc, #240]	; (57f4 <Clock_Ip_ClockInitializeObjects+0x208>)
    5702:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5704:	201b      	movs	r0, #27
    5706:	f7ff fcef 	bl	50e8 <getSelectorConfig>
    570a:	4603      	mov	r3, r0
    570c:	4a3a      	ldr	r2, [pc, #232]	; (57f8 <Clock_Ip_ClockInitializeObjects+0x20c>)
    570e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5710:	201d      	movs	r0, #29
    5712:	f7ff fd7b 	bl	520c <getCoreDividerConfig>
    5716:	4603      	mov	r3, r0
    5718:	4a38      	ldr	r2, [pc, #224]	; (57fc <Clock_Ip_ClockInitializeObjects+0x210>)
    571a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    571c:	201e      	movs	r0, #30
    571e:	f7ff fd75 	bl	520c <getCoreDividerConfig>
    5722:	4603      	mov	r3, r0
    5724:	4a36      	ldr	r2, [pc, #216]	; (5800 <Clock_Ip_ClockInitializeObjects+0x214>)
    5726:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5728:	201f      	movs	r0, #31
    572a:	f7ff fd6f 	bl	520c <getCoreDividerConfig>
    572e:	4603      	mov	r3, r0
    5730:	4a34      	ldr	r2, [pc, #208]	; (5804 <Clock_Ip_ClockInitializeObjects+0x218>)
    5732:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5734:	2021      	movs	r0, #33	; 0x21
    5736:	f7ff fe0f 	bl	5358 <getBusDividerConfig>
    573a:	4603      	mov	r3, r0
    573c:	4a32      	ldr	r2, [pc, #200]	; (5808 <Clock_Ip_ClockInitializeObjects+0x21c>)
    573e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5740:	2022      	movs	r0, #34	; 0x22
    5742:	f7ff fe09 	bl	5358 <getBusDividerConfig>
    5746:	4603      	mov	r3, r0
    5748:	4a30      	ldr	r2, [pc, #192]	; (580c <Clock_Ip_ClockInitializeObjects+0x220>)
    574a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    574c:	2023      	movs	r0, #35	; 0x23
    574e:	f7ff fe03 	bl	5358 <getBusDividerConfig>
    5752:	4603      	mov	r3, r0
    5754:	4a2e      	ldr	r2, [pc, #184]	; (5810 <Clock_Ip_ClockInitializeObjects+0x224>)
    5756:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5758:	2025      	movs	r0, #37	; 0x25
    575a:	f7ff fea3 	bl	54a4 <getSlowDividerConfig>
    575e:	4603      	mov	r3, r0
    5760:	4a2c      	ldr	r2, [pc, #176]	; (5814 <Clock_Ip_ClockInitializeObjects+0x228>)
    5762:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5764:	2026      	movs	r0, #38	; 0x26
    5766:	f7ff fe9d 	bl	54a4 <getSlowDividerConfig>
    576a:	4603      	mov	r3, r0
    576c:	4a2a      	ldr	r2, [pc, #168]	; (5818 <Clock_Ip_ClockInitializeObjects+0x22c>)
    576e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5770:	2027      	movs	r0, #39	; 0x27
    5772:	f7ff fe97 	bl	54a4 <getSlowDividerConfig>
    5776:	4603      	mov	r3, r0
    5778:	4a28      	ldr	r2, [pc, #160]	; (581c <Clock_Ip_ClockInitializeObjects+0x230>)
    577a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    577c:	bf00      	nop
    577e:	b003      	add	sp, #12
    5780:	f85d fb04 	ldr.w	pc, [sp], #4
    5784:	1fff8ce0 	.word	0x1fff8ce0
    5788:	000087bc 	.word	0x000087bc
    578c:	00008e08 	.word	0x00008e08
    5790:	1fff8bac 	.word	0x1fff8bac
    5794:	0000877c 	.word	0x0000877c
    5798:	00008d50 	.word	0x00008d50
    579c:	1fff8bb0 	.word	0x1fff8bb0
    57a0:	0000878c 	.word	0x0000878c
    57a4:	00008dbc 	.word	0x00008dbc
    57a8:	1fff8bb4 	.word	0x1fff8bb4
    57ac:	000087cc 	.word	0x000087cc
    57b0:	00008e34 	.word	0x00008e34
    57b4:	1fff8bb8 	.word	0x1fff8bb8
    57b8:	1fff8bf4 	.word	0x1fff8bf4
    57bc:	0000875c 	.word	0x0000875c
    57c0:	00008d0c 	.word	0x00008d0c
    57c4:	1fff8bbc 	.word	0x1fff8bbc
    57c8:	1fff8bf8 	.word	0x1fff8bf8
    57cc:	1fff8bc0 	.word	0x1fff8bc0
    57d0:	1fff8bfc 	.word	0x1fff8bfc
    57d4:	1fff8bc4 	.word	0x1fff8bc4
    57d8:	1fff8c00 	.word	0x1fff8c00
    57dc:	1fff8b19 	.word	0x1fff8b19
    57e0:	1fff8b10 	.word	0x1fff8b10
    57e4:	1fff8bc8 	.word	0x1fff8bc8
    57e8:	1fff8bcc 	.word	0x1fff8bcc
    57ec:	1fff8bd0 	.word	0x1fff8bd0
    57f0:	1fff8bd4 	.word	0x1fff8bd4
    57f4:	1fff8bd8 	.word	0x1fff8bd8
    57f8:	1fff8c04 	.word	0x1fff8c04
    57fc:	1fff8bdc 	.word	0x1fff8bdc
    5800:	1fff8be0 	.word	0x1fff8be0
    5804:	1fff8c08 	.word	0x1fff8c08
    5808:	1fff8be4 	.word	0x1fff8be4
    580c:	1fff8be8 	.word	0x1fff8be8
    5810:	1fff8c0c 	.word	0x1fff8c0c
    5814:	1fff8bec 	.word	0x1fff8bec
    5818:	1fff8bf0 	.word	0x1fff8bf0
    581c:	1fff8c10 	.word	0x1fff8c10

00005820 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5820:	b500      	push	{lr}
    5822:	b083      	sub	sp, #12
    5824:	9001      	str	r0, [sp, #4]
    5826:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5828:	9b01      	ldr	r3, [sp, #4]
    582a:	2b03      	cmp	r3, #3
    582c:	f000 8090 	beq.w	5950 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5830:	9b01      	ldr	r3, [sp, #4]
    5832:	2b03      	cmp	r3, #3
    5834:	f200 80d3 	bhi.w	59de <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5838:	9b01      	ldr	r3, [sp, #4]
    583a:	2b00      	cmp	r3, #0
    583c:	d040      	beq.n	58c0 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    583e:	9b01      	ldr	r3, [sp, #4]
    5840:	3b01      	subs	r3, #1
    5842:	2b01      	cmp	r3, #1
    5844:	f200 80cb 	bhi.w	59de <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5848:	9b00      	ldr	r3, [sp, #0]
    584a:	2b00      	cmp	r3, #0
    584c:	f040 80c9 	bne.w	59e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5850:	4b68      	ldr	r3, [pc, #416]	; (59f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5852:	2200      	movs	r2, #0
    5854:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5856:	4b68      	ldr	r3, [pc, #416]	; (59f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5858:	681b      	ldr	r3, [r3, #0]
    585a:	685b      	ldr	r3, [r3, #4]
    585c:	4a67      	ldr	r2, [pc, #412]	; (59fc <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    585e:	6812      	ldr	r2, [r2, #0]
    5860:	4610      	mov	r0, r2
    5862:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5864:	4b66      	ldr	r3, [pc, #408]	; (5a00 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5866:	681b      	ldr	r3, [r3, #0]
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	4a66      	ldr	r2, [pc, #408]	; (5a04 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    586c:	6812      	ldr	r2, [r2, #0]
    586e:	4610      	mov	r0, r2
    5870:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5872:	4b65      	ldr	r3, [pc, #404]	; (5a08 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	4a64      	ldr	r2, [pc, #400]	; (5a0c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    587a:	6812      	ldr	r2, [r2, #0]
    587c:	4610      	mov	r0, r2
    587e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5880:	4b63      	ldr	r3, [pc, #396]	; (5a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	4a63      	ldr	r2, [pc, #396]	; (5a14 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5888:	6812      	ldr	r2, [r2, #0]
    588a:	4610      	mov	r0, r2
    588c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    588e:	4b62      	ldr	r3, [pc, #392]	; (5a18 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	691b      	ldr	r3, [r3, #16]
    5894:	4a61      	ldr	r2, [pc, #388]	; (5a1c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5896:	6812      	ldr	r2, [r2, #0]
    5898:	6812      	ldr	r2, [r2, #0]
    589a:	4610      	mov	r0, r2
    589c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    589e:	4b60      	ldr	r3, [pc, #384]	; (5a20 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	68db      	ldr	r3, [r3, #12]
    58a4:	4a5f      	ldr	r2, [pc, #380]	; (5a24 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58a6:	6812      	ldr	r2, [r2, #0]
    58a8:	6812      	ldr	r2, [r2, #0]
    58aa:	4610      	mov	r0, r2
    58ac:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    58ae:	4b5e      	ldr	r3, [pc, #376]	; (5a28 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    58b0:	681b      	ldr	r3, [r3, #0]
    58b2:	689b      	ldr	r3, [r3, #8]
    58b4:	4a5d      	ldr	r2, [pc, #372]	; (5a2c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    58b6:	6812      	ldr	r2, [r2, #0]
    58b8:	6812      	ldr	r2, [r2, #0]
    58ba:	4610      	mov	r0, r2
    58bc:	4798      	blx	r3
            }
        }
        break;
    58be:	e090      	b.n	59e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    58c0:	9b00      	ldr	r3, [sp, #0]
    58c2:	2b02      	cmp	r3, #2
    58c4:	f040 808f 	bne.w	59e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    58c8:	4b4a      	ldr	r3, [pc, #296]	; (59f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    58ca:	2201      	movs	r2, #1
    58cc:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    58ce:	4b56      	ldr	r3, [pc, #344]	; (5a28 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	685b      	ldr	r3, [r3, #4]
    58d4:	4a55      	ldr	r2, [pc, #340]	; (5a2c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    58d6:	6812      	ldr	r2, [r2, #0]
    58d8:	4610      	mov	r0, r2
    58da:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    58dc:	4b50      	ldr	r3, [pc, #320]	; (5a20 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	691b      	ldr	r3, [r3, #16]
    58e2:	4a50      	ldr	r2, [pc, #320]	; (5a24 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58e4:	6812      	ldr	r2, [r2, #0]
    58e6:	4610      	mov	r0, r2
    58e8:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    58ea:	4b4d      	ldr	r3, [pc, #308]	; (5a20 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	689b      	ldr	r3, [r3, #8]
    58f0:	4a4c      	ldr	r2, [pc, #304]	; (5a24 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    58f2:	6812      	ldr	r2, [r2, #0]
    58f4:	4610      	mov	r0, r2
    58f6:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    58f8:	4b47      	ldr	r3, [pc, #284]	; (5a18 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	68db      	ldr	r3, [r3, #12]
    58fe:	4a47      	ldr	r2, [pc, #284]	; (5a1c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5900:	6812      	ldr	r2, [r2, #0]
    5902:	4610      	mov	r0, r2
    5904:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5906:	4b44      	ldr	r3, [pc, #272]	; (5a18 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5908:	681b      	ldr	r3, [r3, #0]
    590a:	689b      	ldr	r3, [r3, #8]
    590c:	4a43      	ldr	r2, [pc, #268]	; (5a1c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    590e:	6812      	ldr	r2, [r2, #0]
    5910:	6812      	ldr	r2, [r2, #0]
    5912:	4610      	mov	r0, r2
    5914:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5916:	4b38      	ldr	r3, [pc, #224]	; (59f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5918:	681b      	ldr	r3, [r3, #0]
    591a:	685b      	ldr	r3, [r3, #4]
    591c:	4a44      	ldr	r2, [pc, #272]	; (5a30 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    591e:	6812      	ldr	r2, [r2, #0]
    5920:	4610      	mov	r0, r2
    5922:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5924:	4b36      	ldr	r3, [pc, #216]	; (5a00 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5926:	681b      	ldr	r3, [r3, #0]
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	4a42      	ldr	r2, [pc, #264]	; (5a34 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    592c:	6812      	ldr	r2, [r2, #0]
    592e:	4610      	mov	r0, r2
    5930:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5932:	4b35      	ldr	r3, [pc, #212]	; (5a08 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	4a3f      	ldr	r2, [pc, #252]	; (5a38 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    593a:	6812      	ldr	r2, [r2, #0]
    593c:	4610      	mov	r0, r2
    593e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5940:	4b33      	ldr	r3, [pc, #204]	; (5a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	681b      	ldr	r3, [r3, #0]
    5946:	4a3d      	ldr	r2, [pc, #244]	; (5a3c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5948:	6812      	ldr	r2, [r2, #0]
    594a:	4610      	mov	r0, r2
    594c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    594e:	e04a      	b.n	59e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5950:	9b00      	ldr	r3, [sp, #0]
    5952:	2b02      	cmp	r3, #2
    5954:	d149      	bne.n	59ea <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5956:	4b27      	ldr	r3, [pc, #156]	; (59f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5958:	2201      	movs	r2, #1
    595a:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    595c:	4b32      	ldr	r3, [pc, #200]	; (5a28 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	685b      	ldr	r3, [r3, #4]
    5962:	4a32      	ldr	r2, [pc, #200]	; (5a2c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5964:	6812      	ldr	r2, [r2, #0]
    5966:	4610      	mov	r0, r2
    5968:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    596a:	4b2d      	ldr	r3, [pc, #180]	; (5a20 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	691b      	ldr	r3, [r3, #16]
    5970:	4a2c      	ldr	r2, [pc, #176]	; (5a24 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5972:	6812      	ldr	r2, [r2, #0]
    5974:	4610      	mov	r0, r2
    5976:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5978:	4b29      	ldr	r3, [pc, #164]	; (5a20 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    597a:	681b      	ldr	r3, [r3, #0]
    597c:	689b      	ldr	r3, [r3, #8]
    597e:	4a29      	ldr	r2, [pc, #164]	; (5a24 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5980:	6812      	ldr	r2, [r2, #0]
    5982:	4610      	mov	r0, r2
    5984:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5986:	4b24      	ldr	r3, [pc, #144]	; (5a18 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	68db      	ldr	r3, [r3, #12]
    598c:	4a23      	ldr	r2, [pc, #140]	; (5a1c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    598e:	6812      	ldr	r2, [r2, #0]
    5990:	4610      	mov	r0, r2
    5992:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5994:	4b20      	ldr	r3, [pc, #128]	; (5a18 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	689b      	ldr	r3, [r3, #8]
    599a:	4a20      	ldr	r2, [pc, #128]	; (5a1c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    599c:	6812      	ldr	r2, [r2, #0]
    599e:	6812      	ldr	r2, [r2, #0]
    59a0:	4610      	mov	r0, r2
    59a2:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    59a4:	4b26      	ldr	r3, [pc, #152]	; (5a40 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    59a6:	681b      	ldr	r3, [r3, #0]
    59a8:	685b      	ldr	r3, [r3, #4]
    59aa:	4a26      	ldr	r2, [pc, #152]	; (5a44 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    59ac:	6812      	ldr	r2, [r2, #0]
    59ae:	4610      	mov	r0, r2
    59b0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    59b2:	4b25      	ldr	r3, [pc, #148]	; (5a48 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    59b4:	681b      	ldr	r3, [r3, #0]
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	4a24      	ldr	r2, [pc, #144]	; (5a4c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    59ba:	6812      	ldr	r2, [r2, #0]
    59bc:	4610      	mov	r0, r2
    59be:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    59c0:	4b23      	ldr	r3, [pc, #140]	; (5a50 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    59c2:	681b      	ldr	r3, [r3, #0]
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	4a23      	ldr	r2, [pc, #140]	; (5a54 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    59c8:	6812      	ldr	r2, [r2, #0]
    59ca:	4610      	mov	r0, r2
    59cc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    59ce:	4b22      	ldr	r3, [pc, #136]	; (5a58 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    59d0:	681b      	ldr	r3, [r3, #0]
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	4a21      	ldr	r2, [pc, #132]	; (5a5c <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    59d6:	6812      	ldr	r2, [r2, #0]
    59d8:	4610      	mov	r0, r2
    59da:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    59dc:	e005      	b.n	59ea <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    59de:	bf00      	nop
    59e0:	e004      	b.n	59ec <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    59e2:	bf00      	nop
    59e4:	e002      	b.n	59ec <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    59e6:	bf00      	nop
    59e8:	e000      	b.n	59ec <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    59ea:	bf00      	nop
    }

}
    59ec:	bf00      	nop
    59ee:	b003      	add	sp, #12
    59f0:	f85d fb04 	ldr.w	pc, [sp], #4
    59f4:	1fff8b19 	.word	0x1fff8b19
    59f8:	1fff8bb8 	.word	0x1fff8bb8
    59fc:	1fff8bd8 	.word	0x1fff8bd8
    5a00:	1fff8bbc 	.word	0x1fff8bbc
    5a04:	1fff8be0 	.word	0x1fff8be0
    5a08:	1fff8bc0 	.word	0x1fff8bc0
    5a0c:	1fff8be8 	.word	0x1fff8be8
    5a10:	1fff8bc4 	.word	0x1fff8bc4
    5a14:	1fff8bf0 	.word	0x1fff8bf0
    5a18:	1fff8bac 	.word	0x1fff8bac
    5a1c:	1fff8bd0 	.word	0x1fff8bd0
    5a20:	1fff8bb0 	.word	0x1fff8bb0
    5a24:	1fff8bcc 	.word	0x1fff8bcc
    5a28:	1fff8bb4 	.word	0x1fff8bb4
    5a2c:	1fff8bc8 	.word	0x1fff8bc8
    5a30:	1fff8bd4 	.word	0x1fff8bd4
    5a34:	1fff8bdc 	.word	0x1fff8bdc
    5a38:	1fff8be4 	.word	0x1fff8be4
    5a3c:	1fff8bec 	.word	0x1fff8bec
    5a40:	1fff8bf4 	.word	0x1fff8bf4
    5a44:	1fff8c04 	.word	0x1fff8c04
    5a48:	1fff8bf8 	.word	0x1fff8bf8
    5a4c:	1fff8c08 	.word	0x1fff8c08
    5a50:	1fff8bfc 	.word	0x1fff8bfc
    5a54:	1fff8c0c 	.word	0x1fff8c0c
    5a58:	1fff8c00 	.word	0x1fff8c00
    5a5c:	1fff8c10 	.word	0x1fff8c10

00005a60 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5a60:	b500      	push	{lr}
    5a62:	b083      	sub	sp, #12
    5a64:	9001      	str	r0, [sp, #4]
    5a66:	9100      	str	r1, [sp, #0]
    switch(Command)
    5a68:	9b00      	ldr	r3, [sp, #0]
    5a6a:	2b04      	cmp	r3, #4
    5a6c:	d010      	beq.n	5a90 <Clock_Ip_Command+0x30>
    5a6e:	9b00      	ldr	r3, [sp, #0]
    5a70:	2b04      	cmp	r3, #4
    5a72:	d811      	bhi.n	5a98 <Clock_Ip_Command+0x38>
    5a74:	9b00      	ldr	r3, [sp, #0]
    5a76:	2b01      	cmp	r3, #1
    5a78:	d006      	beq.n	5a88 <Clock_Ip_Command+0x28>
    5a7a:	9b00      	ldr	r3, [sp, #0]
    5a7c:	2b02      	cmp	r3, #2
    5a7e:	d10b      	bne.n	5a98 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5a80:	9801      	ldr	r0, [sp, #4]
    5a82:	f7ff fdb3 	bl	55ec <Clock_Ip_ClockInitializeObjects>
            break;
    5a86:	e008      	b.n	5a9a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5a88:	9801      	ldr	r0, [sp, #4]
    5a8a:	f7ff f9db 	bl	4e44 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5a8e:	e004      	b.n	5a9a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5a90:	9801      	ldr	r0, [sp, #4]
    5a92:	f7ff f8ed 	bl	4c70 <DisableSafeClock>
            break;
    5a96:	e000      	b.n	5a9a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5a98:	bf00      	nop
    }
}
    5a9a:	bf00      	nop
    5a9c:	b003      	add	sp, #12
    5a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    5aa2:	bf00      	nop

00005aa4 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5aa4:	b500      	push	{lr}
    5aa6:	b085      	sub	sp, #20
    5aa8:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5aaa:	4a20      	ldr	r2, [pc, #128]	; (5b2c <Mcu_Init+0x88>)
    5aac:	9b01      	ldr	r3, [sp, #4]
    5aae:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5ab0:	2300      	movs	r3, #0
    5ab2:	9303      	str	r3, [sp, #12]
    5ab4:	e010      	b.n	5ad8 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5ab6:	4b1d      	ldr	r3, [pc, #116]	; (5b2c <Mcu_Init+0x88>)
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	6919      	ldr	r1, [r3, #16]
    5abc:	9a03      	ldr	r2, [sp, #12]
    5abe:	4613      	mov	r3, r2
    5ac0:	005b      	lsls	r3, r3, #1
    5ac2:	4413      	add	r3, r2
    5ac4:	009b      	lsls	r3, r3, #2
    5ac6:	440b      	add	r3, r1
    5ac8:	681b      	ldr	r3, [r3, #0]
    5aca:	9a03      	ldr	r2, [sp, #12]
    5acc:	b2d1      	uxtb	r1, r2
    5ace:	4a18      	ldr	r2, [pc, #96]	; (5b30 <Mcu_Init+0x8c>)
    5ad0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5ad2:	9b03      	ldr	r3, [sp, #12]
    5ad4:	3301      	adds	r3, #1
    5ad6:	9303      	str	r3, [sp, #12]
    5ad8:	4b14      	ldr	r3, [pc, #80]	; (5b2c <Mcu_Init+0x88>)
    5ada:	681b      	ldr	r3, [r3, #0]
    5adc:	689b      	ldr	r3, [r3, #8]
    5ade:	9a03      	ldr	r2, [sp, #12]
    5ae0:	429a      	cmp	r2, r3
    5ae2:	d3e8      	bcc.n	5ab6 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5ae4:	2300      	movs	r3, #0
    5ae6:	9303      	str	r3, [sp, #12]
    5ae8:	e010      	b.n	5b0c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5aea:	4b10      	ldr	r3, [pc, #64]	; (5b2c <Mcu_Init+0x88>)
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	6959      	ldr	r1, [r3, #20]
    5af0:	9a03      	ldr	r2, [sp, #12]
    5af2:	4613      	mov	r3, r2
    5af4:	01db      	lsls	r3, r3, #7
    5af6:	1a9b      	subs	r3, r3, r2
    5af8:	00db      	lsls	r3, r3, #3
    5afa:	440b      	add	r3, r1
    5afc:	681b      	ldr	r3, [r3, #0]
    5afe:	9a03      	ldr	r2, [sp, #12]
    5b00:	b2d1      	uxtb	r1, r2
    5b02:	4a0c      	ldr	r2, [pc, #48]	; (5b34 <Mcu_Init+0x90>)
    5b04:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5b06:	9b03      	ldr	r3, [sp, #12]
    5b08:	3301      	adds	r3, #1
    5b0a:	9303      	str	r3, [sp, #12]
    5b0c:	4b07      	ldr	r3, [pc, #28]	; (5b2c <Mcu_Init+0x88>)
    5b0e:	681b      	ldr	r3, [r3, #0]
    5b10:	68db      	ldr	r3, [r3, #12]
    5b12:	9a03      	ldr	r2, [sp, #12]
    5b14:	429a      	cmp	r2, r3
    5b16:	d3e8      	bcc.n	5aea <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5b18:	4b04      	ldr	r3, [pc, #16]	; (5b2c <Mcu_Init+0x88>)
    5b1a:	681b      	ldr	r3, [r3, #0]
    5b1c:	699b      	ldr	r3, [r3, #24]
    5b1e:	4618      	mov	r0, r3
    5b20:	f000 f88a 	bl	5c38 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5b24:	bf00      	nop
    5b26:	b005      	add	sp, #20
    5b28:	f85d fb04 	ldr.w	pc, [sp], #4
    5b2c:	1fff8cec 	.word	0x1fff8cec
    5b30:	1fff8ce8 	.word	0x1fff8ce8
    5b34:	1fff8ce4 	.word	0x1fff8ce4

00005b38 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5b38:	b084      	sub	sp, #16
    5b3a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5b3c:	2301      	movs	r3, #1
    5b3e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5b42:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b46:	4618      	mov	r0, r3
    5b48:	b004      	add	sp, #16
    5b4a:	4770      	bx	lr

00005b4c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5b4c:	b500      	push	{lr}
    5b4e:	b085      	sub	sp, #20
    5b50:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5b52:	4a0e      	ldr	r2, [pc, #56]	; (5b8c <Mcu_InitClock+0x40>)
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	4413      	add	r3, r2
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5b5e:	4b0c      	ldr	r3, [pc, #48]	; (5b90 <Mcu_InitClock+0x44>)
    5b60:	681b      	ldr	r3, [r3, #0]
    5b62:	6959      	ldr	r1, [r3, #20]
    5b64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5b68:	4613      	mov	r3, r2
    5b6a:	01db      	lsls	r3, r3, #7
    5b6c:	1a9b      	subs	r3, r3, r2
    5b6e:	00db      	lsls	r3, r3, #3
    5b70:	440b      	add	r3, r1
    5b72:	4618      	mov	r0, r3
    5b74:	f000 f86a 	bl	5c4c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5b78:	2300      	movs	r3, #0
    5b7a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5b7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5b82:	4618      	mov	r0, r3
    5b84:	b005      	add	sp, #20
    5b86:	f85d fb04 	ldr.w	pc, [sp], #4
    5b8a:	bf00      	nop
    5b8c:	1fff8ce4 	.word	0x1fff8ce4
    5b90:	1fff8cec 	.word	0x1fff8cec

00005b94 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5b94:	b500      	push	{lr}
    5b96:	b085      	sub	sp, #20
    5b98:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5b9a:	4a0d      	ldr	r2, [pc, #52]	; (5bd0 <Mcu_SetMode+0x3c>)
    5b9c:	9b01      	ldr	r3, [sp, #4]
    5b9e:	4413      	add	r3, r2
    5ba0:	781b      	ldrb	r3, [r3, #0]
    5ba2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5ba6:	f001 fb27 	bl	71f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5baa:	4b0a      	ldr	r3, [pc, #40]	; (5bd4 <Mcu_SetMode+0x40>)
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	6919      	ldr	r1, [r3, #16]
    5bb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5bb4:	4613      	mov	r3, r2
    5bb6:	005b      	lsls	r3, r3, #1
    5bb8:	4413      	add	r3, r2
    5bba:	009b      	lsls	r3, r3, #2
    5bbc:	440b      	add	r3, r1
    5bbe:	4618      	mov	r0, r3
    5bc0:	f000 f84e 	bl	5c60 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5bc4:	f001 fb44 	bl	7250 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5bc8:	bf00      	nop
    5bca:	b005      	add	sp, #20
    5bcc:	f85d fb04 	ldr.w	pc, [sp], #4
    5bd0:	1fff8ce8 	.word	0x1fff8ce8
    5bd4:	1fff8cec 	.word	0x1fff8cec

00005bd8 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5bd8:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5bda:	2302      	movs	r3, #2
    5bdc:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5bde:	9b01      	ldr	r3, [sp, #4]
}
    5be0:	4618      	mov	r0, r3
    5be2:	b002      	add	sp, #8
    5be4:	4770      	bx	lr

00005be6 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5be6:	b500      	push	{lr}
    5be8:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5bea:	f000 f843 	bl	5c74 <Mcu_Ipw_GetResetReason>
    5bee:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5bf0:	9b01      	ldr	r3, [sp, #4]
}
    5bf2:	4618      	mov	r0, r3
    5bf4:	b003      	add	sp, #12
    5bf6:	f85d fb04 	ldr.w	pc, [sp], #4

00005bfa <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5bfa:	b500      	push	{lr}
    5bfc:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5bfe:	f000 f83f 	bl	5c80 <Mcu_Ipw_GetResetRawValue>
    5c02:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5c04:	9b01      	ldr	r3, [sp, #4]
}
    5c06:	4618      	mov	r0, r3
    5c08:	b003      	add	sp, #12
    5c0a:	f85d fb04 	ldr.w	pc, [sp], #4

00005c0e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5c0e:	b500      	push	{lr}
    5c10:	b083      	sub	sp, #12
    5c12:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5c14:	9801      	ldr	r0, [sp, #4]
    5c16:	f000 f839 	bl	5c8c <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5c1a:	bf00      	nop
    5c1c:	b003      	add	sp, #12
    5c1e:	f85d fb04 	ldr.w	pc, [sp], #4

00005c22 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5c22:	b082      	sub	sp, #8
    5c24:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5c26:	4b03      	ldr	r3, [pc, #12]	; (5c34 <Mcu_ClkSrcFailureNotification+0x12>)
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5c2c:	bf00      	nop
    5c2e:	b002      	add	sp, #8
    5c30:	4770      	bx	lr
    5c32:	bf00      	nop
    5c34:	1fff8cec 	.word	0x1fff8cec

00005c38 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5c38:	b500      	push	{lr}
    5c3a:	b083      	sub	sp, #12
    5c3c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5c3e:	9801      	ldr	r0, [sp, #4]
    5c40:	f000 f882 	bl	5d48 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5c44:	bf00      	nop
    5c46:	b003      	add	sp, #12
    5c48:	f85d fb04 	ldr.w	pc, [sp], #4

00005c4c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5c4c:	b500      	push	{lr}
    5c4e:	b083      	sub	sp, #12
    5c50:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5c52:	9801      	ldr	r0, [sp, #4]
    5c54:	f7fc fc6a 	bl	252c <Clock_Ip_InitClock>
}
    5c58:	bf00      	nop
    5c5a:	b003      	add	sp, #12
    5c5c:	f85d fb04 	ldr.w	pc, [sp], #4

00005c60 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5c60:	b500      	push	{lr}
    5c62:	b083      	sub	sp, #12
    5c64:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5c66:	9801      	ldr	r0, [sp, #4]
    5c68:	f000 f820 	bl	5cac <Power_Ip_SetMode>
}
    5c6c:	bf00      	nop
    5c6e:	b003      	add	sp, #12
    5c70:	f85d fb04 	ldr.w	pc, [sp], #4

00005c74 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5c74:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5c76:	f000 f84f 	bl	5d18 <Power_Ip_GetResetReason>
    5c7a:	4603      	mov	r3, r0
}
    5c7c:	4618      	mov	r0, r3
    5c7e:	bd08      	pop	{r3, pc}

00005c80 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5c80:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5c82:	f000 f857 	bl	5d34 <Power_Ip_GetResetRawValue>
    5c86:	4603      	mov	r3, r0
}
    5c88:	4618      	mov	r0, r3
    5c8a:	bd08      	pop	{r3, pc}

00005c8c <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5c8c:	b500      	push	{lr}
    5c8e:	b083      	sub	sp, #12
    5c90:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5c92:	9b01      	ldr	r3, [sp, #4]
    5c94:	2b00      	cmp	r3, #0
    5c96:	d102      	bne.n	5c9e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5c98:	f000 f86c 	bl	5d74 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5c9c:	e001      	b.n	5ca2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5c9e:	f000 f86e 	bl	5d7e <Power_Ip_EnableSleepOnExit>
}
    5ca2:	bf00      	nop
    5ca4:	b003      	add	sp, #12
    5ca6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005cac <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5cac:	b500      	push	{lr}
    5cae:	b085      	sub	sp, #20
    5cb0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5cb2:	9b01      	ldr	r3, [sp, #4]
    5cb4:	685b      	ldr	r3, [r3, #4]
    5cb6:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5cb8:	9802      	ldr	r0, [sp, #8]
    5cba:	f000 f9f5 	bl	60a8 <Power_Ip_SMC_ModeCheckEntry>
    5cbe:	4603      	mov	r3, r0
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d002      	beq.n	5cca <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5cc4:	2301      	movs	r3, #1
    5cc6:	9303      	str	r3, [sp, #12]
    5cc8:	e003      	b.n	5cd2 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5cca:	9801      	ldr	r0, [sp, #4]
    5ccc:	f000 fa1e 	bl	610c <Power_Ip_SMC_ModeConfig>
    5cd0:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5cd2:	9b03      	ldr	r3, [sp, #12]
    5cd4:	2b01      	cmp	r3, #1
    5cd6:	d103      	bne.n	5ce0 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5cd8:	21ff      	movs	r1, #255	; 0xff
    5cda:	2003      	movs	r0, #3
    5cdc:	f000 f8f4 	bl	5ec8 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5ce0:	bf00      	nop
    5ce2:	b005      	add	sp, #20
    5ce4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ce8 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5ce8:	b084      	sub	sp, #16
    5cea:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5cec:	230c      	movs	r3, #12
    5cee:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5cf0:	4a08      	ldr	r2, [pc, #32]	; (5d14 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5cf2:	9b01      	ldr	r3, [sp, #4]
    5cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cf8:	2b0e      	cmp	r3, #14
    5cfa:	d805      	bhi.n	5d08 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5cfc:	4a05      	ldr	r2, [pc, #20]	; (5d14 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5cfe:	9b01      	ldr	r3, [sp, #4]
    5d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d04:	9303      	str	r3, [sp, #12]
    5d06:	e001      	b.n	5d0c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5d08:	230c      	movs	r3, #12
    5d0a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5d0c:	9b03      	ldr	r3, [sp, #12]
}
    5d0e:	4618      	mov	r0, r3
    5d10:	b004      	add	sp, #16
    5d12:	4770      	bx	lr
    5d14:	00008ea8 	.word	0x00008ea8

00005d18 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5d18:	b500      	push	{lr}
    5d1a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5d1c:	f000 f940 	bl	5fa0 <Power_Ip_RCM_GetResetReason>
    5d20:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5d22:	9801      	ldr	r0, [sp, #4]
    5d24:	f7ff ffe0 	bl	5ce8 <Power_Ip_ConvertIntergeToResetType>
    5d28:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5d2a:	9b00      	ldr	r3, [sp, #0]
}
    5d2c:	4618      	mov	r0, r3
    5d2e:	b003      	add	sp, #12
    5d30:	f85d fb04 	ldr.w	pc, [sp], #4

00005d34 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5d34:	b500      	push	{lr}
    5d36:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5d38:	f000 f98a 	bl	6050 <Power_Ip_RCM_GetResetRawValue>
    5d3c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5d3e:	9b01      	ldr	r3, [sp, #4]
}
    5d40:	4618      	mov	r0, r3
    5d42:	b003      	add	sp, #12
    5d44:	f85d fb04 	ldr.w	pc, [sp], #4

00005d48 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5d48:	b500      	push	{lr}
    5d4a:	b083      	sub	sp, #12
    5d4c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5d4e:	9b01      	ldr	r3, [sp, #4]
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	4618      	mov	r0, r3
    5d54:	f000 f90e 	bl	5f74 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5d58:	9b01      	ldr	r3, [sp, #4]
    5d5a:	685b      	ldr	r3, [r3, #4]
    5d5c:	4618      	mov	r0, r3
    5d5e:	f000 f86d 	bl	5e3c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5d62:	9b01      	ldr	r3, [sp, #4]
    5d64:	689b      	ldr	r3, [r3, #8]
    5d66:	4618      	mov	r0, r3
    5d68:	f000 f990 	bl	608c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5d6c:	bf00      	nop
    5d6e:	b003      	add	sp, #12
    5d70:	f85d fb04 	ldr.w	pc, [sp], #4

00005d74 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5d74:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5d76:	f000 f811 	bl	5d9c <Power_Ip_CM4_DisableSleepOnExit>
}
    5d7a:	bf00      	nop
    5d7c:	bd08      	pop	{r3, pc}

00005d7e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5d7e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5d80:	f000 f820 	bl	5dc4 <Power_Ip_CM4_EnableSleepOnExit>
}
    5d84:	bf00      	nop
    5d86:	bd08      	pop	{r3, pc}

00005d88 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5d88:	b082      	sub	sp, #8
    5d8a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5d8c:	4a02      	ldr	r2, [pc, #8]	; (5d98 <Power_Ip_InstallNotificationsCallback+0x10>)
    5d8e:	9b01      	ldr	r3, [sp, #4]
    5d90:	6013      	str	r3, [r2, #0]
}
    5d92:	bf00      	nop
    5d94:	b002      	add	sp, #8
    5d96:	4770      	bx	lr
    5d98:	1fff8b1c 	.word	0x1fff8b1c

00005d9c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5d9c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5d9e:	2300      	movs	r3, #0
    5da0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5da2:	4b07      	ldr	r3, [pc, #28]	; (5dc0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5da4:	681b      	ldr	r3, [r3, #0]
    5da6:	685b      	ldr	r3, [r3, #4]
    5da8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5daa:	9b01      	ldr	r3, [sp, #4]
    5dac:	f023 0302 	bic.w	r3, r3, #2
    5db0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5db2:	4b03      	ldr	r3, [pc, #12]	; (5dc0 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5db4:	681b      	ldr	r3, [r3, #0]
    5db6:	9a01      	ldr	r2, [sp, #4]
    5db8:	605a      	str	r2, [r3, #4]
}
    5dba:	bf00      	nop
    5dbc:	b002      	add	sp, #8
    5dbe:	4770      	bx	lr
    5dc0:	1fff8b20 	.word	0x1fff8b20

00005dc4 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5dc4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5dc6:	2300      	movs	r3, #0
    5dc8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5dca:	4b07      	ldr	r3, [pc, #28]	; (5de8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5dcc:	681b      	ldr	r3, [r3, #0]
    5dce:	685b      	ldr	r3, [r3, #4]
    5dd0:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5dd2:	9b01      	ldr	r3, [sp, #4]
    5dd4:	f043 0302 	orr.w	r3, r3, #2
    5dd8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5dda:	4b03      	ldr	r3, [pc, #12]	; (5de8 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5ddc:	681b      	ldr	r3, [r3, #0]
    5dde:	9a01      	ldr	r2, [sp, #4]
    5de0:	605a      	str	r2, [r3, #4]
}
    5de2:	bf00      	nop
    5de4:	b002      	add	sp, #8
    5de6:	4770      	bx	lr
    5de8:	1fff8b20 	.word	0x1fff8b20

00005dec <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5dec:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5dee:	2300      	movs	r3, #0
    5df0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5df2:	4b07      	ldr	r3, [pc, #28]	; (5e10 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	685b      	ldr	r3, [r3, #4]
    5df8:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5dfa:	9b01      	ldr	r3, [sp, #4]
    5dfc:	f043 0304 	orr.w	r3, r3, #4
    5e00:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5e02:	4b03      	ldr	r3, [pc, #12]	; (5e10 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5e04:	681b      	ldr	r3, [r3, #0]
    5e06:	9a01      	ldr	r2, [sp, #4]
    5e08:	605a      	str	r2, [r3, #4]
}
    5e0a:	bf00      	nop
    5e0c:	b002      	add	sp, #8
    5e0e:	4770      	bx	lr
    5e10:	1fff8b20 	.word	0x1fff8b20

00005e14 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5e14:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5e16:	2300      	movs	r3, #0
    5e18:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5e1a:	4b07      	ldr	r3, [pc, #28]	; (5e38 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5e1c:	681b      	ldr	r3, [r3, #0]
    5e1e:	685b      	ldr	r3, [r3, #4]
    5e20:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	f023 0304 	bic.w	r3, r3, #4
    5e28:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5e2a:	4b03      	ldr	r3, [pc, #12]	; (5e38 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5e2c:	681b      	ldr	r3, [r3, #0]
    5e2e:	9a01      	ldr	r2, [sp, #4]
    5e30:	605a      	str	r2, [r3, #4]
}
    5e32:	bf00      	nop
    5e34:	b002      	add	sp, #8
    5e36:	4770      	bx	lr
    5e38:	1fff8b20 	.word	0x1fff8b20

00005e3c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5e3c:	b084      	sub	sp, #16
    5e3e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5e40:	4b20      	ldr	r3, [pc, #128]	; (5ec4 <Power_Ip_PMC_PowerInit+0x88>)
    5e42:	781b      	ldrb	r3, [r3, #0]
    5e44:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5e48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e4c:	f003 030f 	and.w	r3, r3, #15
    5e50:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5e54:	9b01      	ldr	r3, [sp, #4]
    5e56:	781a      	ldrb	r2, [r3, #0]
    5e58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e5c:	4313      	orrs	r3, r2
    5e5e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5e62:	4a18      	ldr	r2, [pc, #96]	; (5ec4 <Power_Ip_PMC_PowerInit+0x88>)
    5e64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e68:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5e6a:	4b16      	ldr	r3, [pc, #88]	; (5ec4 <Power_Ip_PMC_PowerInit+0x88>)
    5e6c:	785b      	ldrb	r3, [r3, #1]
    5e6e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5e72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e76:	f003 031f 	and.w	r3, r3, #31
    5e7a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5e7e:	9b01      	ldr	r3, [sp, #4]
    5e80:	785a      	ldrb	r2, [r3, #1]
    5e82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e86:	4313      	orrs	r3, r2
    5e88:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5e8c:	4a0d      	ldr	r2, [pc, #52]	; (5ec4 <Power_Ip_PMC_PowerInit+0x88>)
    5e8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5e92:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5e94:	4b0b      	ldr	r3, [pc, #44]	; (5ec4 <Power_Ip_PMC_PowerInit+0x88>)
    5e96:	789b      	ldrb	r3, [r3, #2]
    5e98:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5e9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5ea4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5ea8:	9b01      	ldr	r3, [sp, #4]
    5eaa:	789a      	ldrb	r2, [r3, #2]
    5eac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5eb0:	4313      	orrs	r3, r2
    5eb2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5eb6:	4a03      	ldr	r2, [pc, #12]	; (5ec4 <Power_Ip_PMC_PowerInit+0x88>)
    5eb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ebc:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5ebe:	bf00      	nop
    5ec0:	b004      	add	sp, #16
    5ec2:	4770      	bx	lr
    5ec4:	4007d000 	.word	0x4007d000

00005ec8 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ec8:	b500      	push	{lr}
    5eca:	b083      	sub	sp, #12
    5ecc:	9001      	str	r0, [sp, #4]
    5ece:	460b      	mov	r3, r1
    5ed0:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5ed4:	4b05      	ldr	r3, [pc, #20]	; (5eec <Power_Ip_ReportPowerErrors+0x24>)
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5edc:	4611      	mov	r1, r2
    5ede:	9801      	ldr	r0, [sp, #4]
    5ee0:	4798      	blx	r3
}
    5ee2:	bf00      	nop
    5ee4:	b003      	add	sp, #12
    5ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    5eea:	bf00      	nop
    5eec:	1fff8b1c 	.word	0x1fff8b1c

00005ef0 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ef0:	b082      	sub	sp, #8
    5ef2:	9001      	str	r0, [sp, #4]
    5ef4:	460b      	mov	r3, r1
    5ef6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5efa:	bf00      	nop
    5efc:	b002      	add	sp, #8
    5efe:	4770      	bx	lr

00005f00 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5f00:	b500      	push	{lr}
    5f02:	b085      	sub	sp, #20
    5f04:	9003      	str	r0, [sp, #12]
    5f06:	9102      	str	r1, [sp, #8]
    5f08:	9201      	str	r2, [sp, #4]
    5f0a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5f0c:	2000      	movs	r0, #0
    5f0e:	f7fc f83c 	bl	1f8a <OsIf_GetCounter>
    5f12:	4602      	mov	r2, r0
    5f14:	9b03      	ldr	r3, [sp, #12]
    5f16:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5f18:	9b02      	ldr	r3, [sp, #8]
    5f1a:	2200      	movs	r2, #0
    5f1c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5f1e:	2100      	movs	r1, #0
    5f20:	9800      	ldr	r0, [sp, #0]
    5f22:	f7fc f87e 	bl	2022 <OsIf_MicrosToTicks>
    5f26:	4602      	mov	r2, r0
    5f28:	9b01      	ldr	r3, [sp, #4]
    5f2a:	601a      	str	r2, [r3, #0]
}
    5f2c:	bf00      	nop
    5f2e:	b005      	add	sp, #20
    5f30:	f85d fb04 	ldr.w	pc, [sp], #4

00005f34 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5f34:	b500      	push	{lr}
    5f36:	b087      	sub	sp, #28
    5f38:	9003      	str	r0, [sp, #12]
    5f3a:	9102      	str	r1, [sp, #8]
    5f3c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5f3e:	2300      	movs	r3, #0
    5f40:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5f44:	2100      	movs	r1, #0
    5f46:	9803      	ldr	r0, [sp, #12]
    5f48:	f7fc f838 	bl	1fbc <OsIf_GetElapsed>
    5f4c:	4602      	mov	r2, r0
    5f4e:	9b02      	ldr	r3, [sp, #8]
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	441a      	add	r2, r3
    5f54:	9b02      	ldr	r3, [sp, #8]
    5f56:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5f58:	9b02      	ldr	r3, [sp, #8]
    5f5a:	681b      	ldr	r3, [r3, #0]
    5f5c:	9a01      	ldr	r2, [sp, #4]
    5f5e:	429a      	cmp	r2, r3
    5f60:	d802      	bhi.n	5f68 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5f62:	2301      	movs	r3, #1
    5f64:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5f68:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5f6c:	4618      	mov	r0, r3
    5f6e:	b007      	add	sp, #28
    5f70:	f85d fb04 	ldr.w	pc, [sp], #4

00005f74 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5f74:	b082      	sub	sp, #8
    5f76:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5f78:	9b01      	ldr	r3, [sp, #4]
    5f7a:	681a      	ldr	r2, [r3, #0]
    5f7c:	4907      	ldr	r1, [pc, #28]	; (5f9c <Power_Ip_RCM_ResetInit+0x28>)
    5f7e:	f641 7307 	movw	r3, #7943	; 0x1f07
    5f82:	4013      	ands	r3, r2
    5f84:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5f86:	9b01      	ldr	r3, [sp, #4]
    5f88:	685a      	ldr	r2, [r3, #4]
    5f8a:	4904      	ldr	r1, [pc, #16]	; (5f9c <Power_Ip_RCM_ResetInit+0x28>)
    5f8c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5f90:	4013      	ands	r3, r2
    5f92:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5f94:	bf00      	nop
    5f96:	b002      	add	sp, #8
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop
    5f9c:	4007f000 	.word	0x4007f000

00005fa0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5fa0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5fa2:	230c      	movs	r3, #12
    5fa4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5fa6:	2300      	movs	r3, #0
    5fa8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5faa:	2300      	movs	r3, #0
    5fac:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5fae:	2300      	movs	r3, #0
    5fb0:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5fb2:	4b25      	ldr	r3, [pc, #148]	; (6048 <Power_Ip_RCM_GetResetReason+0xa8>)
    5fb4:	699a      	ldr	r2, [r3, #24]
    5fb6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5fba:	4013      	ands	r3, r2
    5fbc:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5fbe:	9b03      	ldr	r3, [sp, #12]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d008      	beq.n	5fd6 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5fc4:	4920      	ldr	r1, [pc, #128]	; (6048 <Power_Ip_RCM_GetResetReason+0xa8>)
    5fc6:	9a03      	ldr	r2, [sp, #12]
    5fc8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5fcc:	4013      	ands	r3, r2
    5fce:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5fd0:	4a1e      	ldr	r2, [pc, #120]	; (604c <Power_Ip_RCM_GetResetReason+0xac>)
    5fd2:	9b03      	ldr	r3, [sp, #12]
    5fd4:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5fd6:	4b1d      	ldr	r3, [pc, #116]	; (604c <Power_Ip_RCM_GetResetReason+0xac>)
    5fd8:	681b      	ldr	r3, [r3, #0]
    5fda:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5fdc:	9a02      	ldr	r2, [sp, #8]
    5fde:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5fe2:	4013      	ands	r3, r2
    5fe4:	2b82      	cmp	r3, #130	; 0x82
    5fe6:	d102      	bne.n	5fee <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5fe8:	2305      	movs	r3, #5
    5fea:	9307      	str	r3, [sp, #28]
    5fec:	e027      	b.n	603e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5fee:	2300      	movs	r3, #0
    5ff0:	9306      	str	r3, [sp, #24]
    5ff2:	e021      	b.n	6038 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5ff8:	9b06      	ldr	r3, [sp, #24]
    5ffa:	fa22 f303 	lsr.w	r3, r2, r3
    5ffe:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6000:	9a01      	ldr	r2, [sp, #4]
    6002:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6006:	4013      	ands	r3, r2
    6008:	2b00      	cmp	r3, #0
    600a:	d012      	beq.n	6032 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    600c:	9a01      	ldr	r2, [sp, #4]
    600e:	9b02      	ldr	r3, [sp, #8]
    6010:	4013      	ands	r3, r2
    6012:	2b00      	cmp	r3, #0
    6014:	d00a      	beq.n	602c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6016:	9b05      	ldr	r3, [sp, #20]
    6018:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    601a:	9b04      	ldr	r3, [sp, #16]
    601c:	3301      	adds	r3, #1
    601e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6020:	9b04      	ldr	r3, [sp, #16]
    6022:	2b01      	cmp	r3, #1
    6024:	d902      	bls.n	602c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6026:	230d      	movs	r3, #13
    6028:	9307      	str	r3, [sp, #28]
                        break;
    602a:	e008      	b.n	603e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    602c:	9b05      	ldr	r3, [sp, #20]
    602e:	3301      	adds	r3, #1
    6030:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6032:	9b06      	ldr	r3, [sp, #24]
    6034:	3301      	adds	r3, #1
    6036:	9306      	str	r3, [sp, #24]
    6038:	9b06      	ldr	r3, [sp, #24]
    603a:	2b1f      	cmp	r3, #31
    603c:	d9da      	bls.n	5ff4 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    603e:	9b07      	ldr	r3, [sp, #28]
}
    6040:	4618      	mov	r0, r3
    6042:	b008      	add	sp, #32
    6044:	4770      	bx	lr
    6046:	bf00      	nop
    6048:	4007f000 	.word	0x4007f000
    604c:	1fff8cf0 	.word	0x1fff8cf0

00006050 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6050:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6052:	4b0c      	ldr	r3, [pc, #48]	; (6084 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6054:	699a      	ldr	r2, [r3, #24]
    6056:	f642 73ee 	movw	r3, #12270	; 0x2fee
    605a:	4013      	ands	r3, r2
    605c:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    605e:	9b01      	ldr	r3, [sp, #4]
    6060:	2b00      	cmp	r3, #0
    6062:	d008      	beq.n	6076 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6064:	4907      	ldr	r1, [pc, #28]	; (6084 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6066:	9a01      	ldr	r2, [sp, #4]
    6068:	f642 73ee 	movw	r3, #12270	; 0x2fee
    606c:	4013      	ands	r3, r2
    606e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6070:	4a05      	ldr	r2, [pc, #20]	; (6088 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6076:	4b04      	ldr	r3, [pc, #16]	; (6088 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    607c:	9b00      	ldr	r3, [sp, #0]
}
    607e:	4618      	mov	r0, r3
    6080:	b002      	add	sp, #8
    6082:	4770      	bx	lr
    6084:	4007f000 	.word	0x4007f000
    6088:	1fff8cf0 	.word	0x1fff8cf0

0000608c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    608c:	b082      	sub	sp, #8
    608e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	681b      	ldr	r3, [r3, #0]
    6094:	4a03      	ldr	r2, [pc, #12]	; (60a4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6096:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    609a:	6093      	str	r3, [r2, #8]
}
    609c:	bf00      	nop
    609e:	b002      	add	sp, #8
    60a0:	4770      	bx	lr
    60a2:	bf00      	nop
    60a4:	4007e000 	.word	0x4007e000

000060a8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    60a8:	b084      	sub	sp, #16
    60aa:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    60ac:	2301      	movs	r3, #1
    60ae:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    60b0:	4b15      	ldr	r3, [pc, #84]	; (6108 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    60b2:	695b      	ldr	r3, [r3, #20]
    60b4:	b2db      	uxtb	r3, r3
    60b6:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	2b02      	cmp	r3, #2
    60bc:	d012      	beq.n	60e4 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    60be:	9b01      	ldr	r3, [sp, #4]
    60c0:	2b02      	cmp	r3, #2
    60c2:	d818      	bhi.n	60f6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    60c4:	9b01      	ldr	r3, [sp, #4]
    60c6:	2b00      	cmp	r3, #0
    60c8:	d003      	beq.n	60d2 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    60ca:	9b01      	ldr	r3, [sp, #4]
    60cc:	2b01      	cmp	r3, #1
    60ce:	d003      	beq.n	60d8 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    60d0:	e011      	b.n	60f6 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    60d2:	2300      	movs	r3, #0
    60d4:	9303      	str	r3, [sp, #12]
            break;
    60d6:	e013      	b.n	6100 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    60d8:	9b02      	ldr	r3, [sp, #8]
    60da:	2b01      	cmp	r3, #1
    60dc:	d10d      	bne.n	60fa <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    60de:	2300      	movs	r3, #0
    60e0:	9303      	str	r3, [sp, #12]
            break;
    60e2:	e00a      	b.n	60fa <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    60e4:	9b02      	ldr	r3, [sp, #8]
    60e6:	2b01      	cmp	r3, #1
    60e8:	d002      	beq.n	60f0 <Power_Ip_SMC_ModeCheckEntry+0x48>
    60ea:	9b02      	ldr	r3, [sp, #8]
    60ec:	2b10      	cmp	r3, #16
    60ee:	d106      	bne.n	60fe <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    60f0:	2300      	movs	r3, #0
    60f2:	9303      	str	r3, [sp, #12]
            break;
    60f4:	e003      	b.n	60fe <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    60f6:	bf00      	nop
    60f8:	e002      	b.n	6100 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    60fa:	bf00      	nop
    60fc:	e000      	b.n	6100 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    60fe:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6100:	9b03      	ldr	r3, [sp, #12]
}
    6102:	4618      	mov	r0, r3
    6104:	b004      	add	sp, #16
    6106:	4770      	bx	lr
    6108:	4007e000 	.word	0x4007e000

0000610c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    610c:	b500      	push	{lr}
    610e:	b08b      	sub	sp, #44	; 0x2c
    6110:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6112:	2300      	movs	r3, #0
    6114:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6116:	2300      	movs	r3, #0
    6118:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    611a:	2300      	movs	r3, #0
    611c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6120:	9b01      	ldr	r3, [sp, #4]
    6122:	685b      	ldr	r3, [r3, #4]
    6124:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6126:	9b08      	ldr	r3, [sp, #32]
    6128:	2b02      	cmp	r3, #2
    612a:	d076      	beq.n	621a <Power_Ip_SMC_ModeConfig+0x10e>
    612c:	9b08      	ldr	r3, [sp, #32]
    612e:	2b02      	cmp	r3, #2
    6130:	f200 80ab 	bhi.w	628a <Power_Ip_SMC_ModeConfig+0x17e>
    6134:	9b08      	ldr	r3, [sp, #32]
    6136:	2b00      	cmp	r3, #0
    6138:	d003      	beq.n	6142 <Power_Ip_SMC_ModeConfig+0x36>
    613a:	9b08      	ldr	r3, [sp, #32]
    613c:	2b01      	cmp	r3, #1
    613e:	d034      	beq.n	61aa <Power_Ip_SMC_ModeConfig+0x9e>
    6140:	e0a3      	b.n	628a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6142:	4b58      	ldr	r3, [pc, #352]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    6144:	68db      	ldr	r3, [r3, #12]
    6146:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6148:	9b06      	ldr	r3, [sp, #24]
    614a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    614e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6150:	4a54      	ldr	r2, [pc, #336]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    6152:	9b06      	ldr	r3, [sp, #24]
    6154:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6156:	aa02      	add	r2, sp, #8
    6158:	a903      	add	r1, sp, #12
    615a:	a804      	add	r0, sp, #16
    615c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6160:	f7ff fece 	bl	5f00 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6164:	9a02      	ldr	r2, [sp, #8]
    6166:	a903      	add	r1, sp, #12
    6168:	ab04      	add	r3, sp, #16
    616a:	4618      	mov	r0, r3
    616c:	f7ff fee2 	bl	5f34 <Power_Ip_TimeoutExpired>
    6170:	4603      	mov	r3, r0
    6172:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6176:	4b4b      	ldr	r3, [pc, #300]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    6178:	695b      	ldr	r3, [r3, #20]
    617a:	f003 0301 	and.w	r3, r3, #1
    617e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6180:	9b05      	ldr	r3, [sp, #20]
    6182:	2b01      	cmp	r3, #1
    6184:	d006      	beq.n	6194 <Power_Ip_SMC_ModeConfig+0x88>
    6186:	f89d 301f 	ldrb.w	r3, [sp, #31]
    618a:	f083 0301 	eor.w	r3, r3, #1
    618e:	b2db      	uxtb	r3, r3
    6190:	2b00      	cmp	r3, #0
    6192:	d1e7      	bne.n	6164 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6194:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6198:	2b00      	cmp	r3, #0
    619a:	d079      	beq.n	6290 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    619c:	2301      	movs	r3, #1
    619e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    61a0:	21ff      	movs	r1, #255	; 0xff
    61a2:	2000      	movs	r0, #0
    61a4:	f7ff fe90 	bl	5ec8 <Power_Ip_ReportPowerErrors>
            }

            break;
    61a8:	e072      	b.n	6290 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    61aa:	4b3e      	ldr	r3, [pc, #248]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    61ac:	68db      	ldr	r3, [r3, #12]
    61ae:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    61b0:	9b06      	ldr	r3, [sp, #24]
    61b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    61b6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    61b8:	9b06      	ldr	r3, [sp, #24]
    61ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    61be:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    61c0:	4a38      	ldr	r2, [pc, #224]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    61c2:	9b06      	ldr	r3, [sp, #24]
    61c4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    61c6:	aa02      	add	r2, sp, #8
    61c8:	a903      	add	r1, sp, #12
    61ca:	a804      	add	r0, sp, #16
    61cc:	f24c 3350 	movw	r3, #50000	; 0xc350
    61d0:	f7ff fe96 	bl	5f00 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    61d4:	9a02      	ldr	r2, [sp, #8]
    61d6:	a903      	add	r1, sp, #12
    61d8:	ab04      	add	r3, sp, #16
    61da:	4618      	mov	r0, r3
    61dc:	f7ff feaa 	bl	5f34 <Power_Ip_TimeoutExpired>
    61e0:	4603      	mov	r3, r0
    61e2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    61e6:	4b2f      	ldr	r3, [pc, #188]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    61e8:	695b      	ldr	r3, [r3, #20]
    61ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    61ee:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    61f0:	9b05      	ldr	r3, [sp, #20]
    61f2:	2b80      	cmp	r3, #128	; 0x80
    61f4:	d006      	beq.n	6204 <Power_Ip_SMC_ModeConfig+0xf8>
    61f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    61fa:	f083 0301 	eor.w	r3, r3, #1
    61fe:	b2db      	uxtb	r3, r3
    6200:	2b00      	cmp	r3, #0
    6202:	d1e7      	bne.n	61d4 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6204:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6208:	2b00      	cmp	r3, #0
    620a:	d043      	beq.n	6294 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    620c:	2301      	movs	r3, #1
    620e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6210:	21ff      	movs	r1, #255	; 0xff
    6212:	2000      	movs	r0, #0
    6214:	f7ff fe58 	bl	5ec8 <Power_Ip_ReportPowerErrors>
            }

            break;
    6218:	e03c      	b.n	6294 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    621a:	4b22      	ldr	r3, [pc, #136]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    621c:	68db      	ldr	r3, [r3, #12]
    621e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6220:	9b06      	ldr	r3, [sp, #24]
    6222:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6226:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6228:	9b06      	ldr	r3, [sp, #24]
    622a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    622e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6230:	4a1c      	ldr	r2, [pc, #112]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    6232:	9b06      	ldr	r3, [sp, #24]
    6234:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6236:	aa02      	add	r2, sp, #8
    6238:	a903      	add	r1, sp, #12
    623a:	a804      	add	r0, sp, #16
    623c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6240:	f7ff fe5e 	bl	5f00 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6244:	9a02      	ldr	r2, [sp, #8]
    6246:	a903      	add	r1, sp, #12
    6248:	ab04      	add	r3, sp, #16
    624a:	4618      	mov	r0, r3
    624c:	f7ff fe72 	bl	5f34 <Power_Ip_TimeoutExpired>
    6250:	4603      	mov	r3, r0
    6252:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6256:	4b13      	ldr	r3, [pc, #76]	; (62a4 <Power_Ip_SMC_ModeConfig+0x198>)
    6258:	695b      	ldr	r3, [r3, #20]
    625a:	f003 0304 	and.w	r3, r3, #4
    625e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6260:	9b05      	ldr	r3, [sp, #20]
    6262:	2b04      	cmp	r3, #4
    6264:	d006      	beq.n	6274 <Power_Ip_SMC_ModeConfig+0x168>
    6266:	f89d 301f 	ldrb.w	r3, [sp, #31]
    626a:	f083 0301 	eor.w	r3, r3, #1
    626e:	b2db      	uxtb	r3, r3
    6270:	2b00      	cmp	r3, #0
    6272:	d1e7      	bne.n	6244 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6274:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6278:	2b00      	cmp	r3, #0
    627a:	d00d      	beq.n	6298 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    627c:	2301      	movs	r3, #1
    627e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6280:	21ff      	movs	r1, #255	; 0xff
    6282:	2000      	movs	r0, #0
    6284:	f7ff fe20 	bl	5ec8 <Power_Ip_ReportPowerErrors>
            }

            break;
    6288:	e006      	b.n	6298 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    628a:	2301      	movs	r3, #1
    628c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    628e:	e004      	b.n	629a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6290:	bf00      	nop
    6292:	e002      	b.n	629a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6294:	bf00      	nop
    6296:	e000      	b.n	629a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6298:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    629c:	4618      	mov	r0, r3
    629e:	b00b      	add	sp, #44	; 0x2c
    62a0:	f85d fb04 	ldr.w	pc, [sp], #4
    62a4:	4007e000 	.word	0x4007e000

000062a8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    62a8:	b500      	push	{lr}
    62aa:	b085      	sub	sp, #20
    62ac:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    62ae:	9b01      	ldr	r3, [sp, #4]
    62b0:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    62b2:	9803      	ldr	r0, [sp, #12]
    62b4:	f000 fbc8 	bl	6a48 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    62b8:	4a03      	ldr	r2, [pc, #12]	; (62c8 <Port_Init+0x20>)
    62ba:	9b03      	ldr	r3, [sp, #12]
    62bc:	6013      	str	r3, [r2, #0]
        }
    }
}
    62be:	bf00      	nop
    62c0:	b005      	add	sp, #20
    62c2:	f85d fb04 	ldr.w	pc, [sp], #4
    62c6:	bf00      	nop
    62c8:	1fff8cf4 	.word	0x1fff8cf4

000062cc <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    62cc:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    62ce:	4b03      	ldr	r3, [pc, #12]	; (62dc <Port_RefreshPortDirection+0x10>)
    62d0:	681b      	ldr	r3, [r3, #0]
    62d2:	4618      	mov	r0, r3
    62d4:	f000 fc10 	bl	6af8 <Port_Ipw_RefreshPortDirection>
    }
}
    62d8:	bf00      	nop
    62da:	bd08      	pop	{r3, pc}
    62dc:	1fff8cf4 	.word	0x1fff8cf4

000062e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    62e0:	b086      	sub	sp, #24
    62e2:	9003      	str	r0, [sp, #12]
    62e4:	9102      	str	r1, [sp, #8]
    62e6:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    62e8:	23ff      	movs	r3, #255	; 0xff
    62ea:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    62ec:	9b03      	ldr	r3, [sp, #12]
    62ee:	4a39      	ldr	r2, [pc, #228]	; (63d4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    62f0:	4293      	cmp	r3, r2
    62f2:	d151      	bne.n	6398 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    62f4:	9b02      	ldr	r3, [sp, #8]
    62f6:	2b10      	cmp	r3, #16
    62f8:	d867      	bhi.n	63ca <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    62fa:	a201      	add	r2, pc, #4	; (adr r2, 6300 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    62fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6300:	00006345 	.word	0x00006345
    6304:	00006353 	.word	0x00006353
    6308:	000063cb 	.word	0x000063cb
    630c:	000063cb 	.word	0x000063cb
    6310:	000063cb 	.word	0x000063cb
    6314:	000063cb 	.word	0x000063cb
    6318:	000063cb 	.word	0x000063cb
    631c:	000063cb 	.word	0x000063cb
    6320:	000063cb 	.word	0x000063cb
    6324:	000063cb 	.word	0x000063cb
    6328:	000063cb 	.word	0x000063cb
    632c:	000063cb 	.word	0x000063cb
    6330:	000063cb 	.word	0x000063cb
    6334:	00006361 	.word	0x00006361
    6338:	0000636f 	.word	0x0000636f
    633c:	0000637d 	.word	0x0000637d
    6340:	0000638b 	.word	0x0000638b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6344:	2301      	movs	r3, #1
    6346:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6348:	9a05      	ldr	r2, [sp, #20]
    634a:	9b01      	ldr	r3, [sp, #4]
    634c:	4313      	orrs	r3, r2
    634e:	9305      	str	r3, [sp, #20]
                break;
    6350:	e03c      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6352:	2302      	movs	r3, #2
    6354:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6356:	9a05      	ldr	r2, [sp, #20]
    6358:	9b01      	ldr	r3, [sp, #4]
    635a:	4313      	orrs	r3, r2
    635c:	9305      	str	r3, [sp, #20]
                break;
    635e:	e035      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6360:	2304      	movs	r3, #4
    6362:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6364:	9a05      	ldr	r2, [sp, #20]
    6366:	9b01      	ldr	r3, [sp, #4]
    6368:	4313      	orrs	r3, r2
    636a:	9305      	str	r3, [sp, #20]
                break;
    636c:	e02e      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    636e:	2308      	movs	r3, #8
    6370:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6372:	9a05      	ldr	r2, [sp, #20]
    6374:	9b01      	ldr	r3, [sp, #4]
    6376:	4313      	orrs	r3, r2
    6378:	9305      	str	r3, [sp, #20]
                break;
    637a:	e027      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    637c:	230e      	movs	r3, #14
    637e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6380:	9a05      	ldr	r2, [sp, #20]
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	4013      	ands	r3, r2
    6386:	9305      	str	r3, [sp, #20]
                break;
    6388:	e020      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    638a:	230d      	movs	r3, #13
    638c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    638e:	9a05      	ldr	r2, [sp, #20]
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	4013      	ands	r3, r2
    6394:	9305      	str	r3, [sp, #20]
                break;
    6396:	e019      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6398:	9b03      	ldr	r3, [sp, #12]
    639a:	4a0f      	ldr	r2, [pc, #60]	; (63d8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    639c:	4293      	cmp	r3, r2
    639e:	d115      	bne.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    63a0:	9b02      	ldr	r3, [sp, #8]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d003      	beq.n	63ae <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    63a6:	9b02      	ldr	r3, [sp, #8]
    63a8:	2b01      	cmp	r3, #1
    63aa:	d007      	beq.n	63bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    63ac:	e00e      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    63ae:	230b      	movs	r3, #11
    63b0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    63b2:	9a05      	ldr	r2, [sp, #20]
    63b4:	9b01      	ldr	r3, [sp, #4]
    63b6:	4013      	ands	r3, r2
    63b8:	9305      	str	r3, [sp, #20]
                break;
    63ba:	e007      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    63bc:	2307      	movs	r3, #7
    63be:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    63c0:	9a05      	ldr	r2, [sp, #20]
    63c2:	9b01      	ldr	r3, [sp, #4]
    63c4:	4013      	ands	r3, r2
    63c6:	9305      	str	r3, [sp, #20]
                break;
    63c8:	e000      	b.n	63cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    63ca:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    63cc:	9b05      	ldr	r3, [sp, #20]
}
    63ce:	4618      	mov	r0, r3
    63d0:	b006      	add	sp, #24
    63d2:	4770      	bx	lr
    63d4:	4004a000 	.word	0x4004a000
    63d8:	4004b000 	.word	0x4004b000

000063dc <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    63dc:	b500      	push	{lr}
    63de:	b089      	sub	sp, #36	; 0x24
    63e0:	9003      	str	r0, [sp, #12]
    63e2:	9102      	str	r1, [sp, #8]
    63e4:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    63ea:	9b01      	ldr	r3, [sp, #4]
    63ec:	2b08      	cmp	r3, #8
    63ee:	d121      	bne.n	6434 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    63f0:	4b13      	ldr	r3, [pc, #76]	; (6440 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    63f2:	685b      	ldr	r3, [r3, #4]
    63f4:	f003 030f 	and.w	r3, r3, #15
    63f8:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    63fa:	9a06      	ldr	r2, [sp, #24]
    63fc:	9902      	ldr	r1, [sp, #8]
    63fe:	9803      	ldr	r0, [sp, #12]
    6400:	f7ff ff6e 	bl	62e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6404:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6406:	9b05      	ldr	r3, [sp, #20]
    6408:	2bff      	cmp	r3, #255	; 0xff
    640a:	d011      	beq.n	6430 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    640c:	f001 f984 	bl	7718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6410:	4b0b      	ldr	r3, [pc, #44]	; (6440 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6412:	685b      	ldr	r3, [r3, #4]
    6414:	4a0a      	ldr	r2, [pc, #40]	; (6440 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6416:	f023 030f 	bic.w	r3, r3, #15
    641a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    641c:	4b08      	ldr	r3, [pc, #32]	; (6440 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    641e:	685a      	ldr	r2, [r3, #4]
    6420:	9b05      	ldr	r3, [sp, #20]
    6422:	f003 030f 	and.w	r3, r3, #15
    6426:	4906      	ldr	r1, [pc, #24]	; (6440 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6428:	4313      	orrs	r3, r2
    642a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    642c:	f001 f9a0 	bl	7770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6430:	2300      	movs	r3, #0
    6432:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6434:	9b07      	ldr	r3, [sp, #28]
}
    6436:	4618      	mov	r0, r3
    6438:	b009      	add	sp, #36	; 0x24
    643a:	f85d fb04 	ldr.w	pc, [sp], #4
    643e:	bf00      	nop
    6440:	40048000 	.word	0x40048000

00006444 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6444:	b500      	push	{lr}
    6446:	b087      	sub	sp, #28
    6448:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    644a:	2300      	movs	r3, #0
    644c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    644e:	2300      	movs	r3, #0
    6450:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6452:	2300      	movs	r3, #0
    6454:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6456:	9b01      	ldr	r3, [sp, #4]
    6458:	68db      	ldr	r3, [r3, #12]
    645a:	2b02      	cmp	r3, #2
    645c:	d00a      	beq.n	6474 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    645e:	9b05      	ldr	r3, [sp, #20]
    6460:	f043 0302 	orr.w	r3, r3, #2
    6464:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6466:	9b01      	ldr	r3, [sp, #4]
    6468:	68db      	ldr	r3, [r3, #12]
    646a:	f003 0301 	and.w	r3, r3, #1
    646e:	9a05      	ldr	r2, [sp, #20]
    6470:	4313      	orrs	r3, r2
    6472:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6474:	9b01      	ldr	r3, [sp, #4]
    6476:	699b      	ldr	r3, [r3, #24]
    6478:	019b      	lsls	r3, r3, #6
    647a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    647e:	9a05      	ldr	r2, [sp, #20]
    6480:	4313      	orrs	r3, r2
    6482:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6484:	9b01      	ldr	r3, [sp, #4]
    6486:	6a1b      	ldr	r3, [r3, #32]
    6488:	03db      	lsls	r3, r3, #15
    648a:	b29b      	uxth	r3, r3
    648c:	9a05      	ldr	r2, [sp, #20]
    648e:	4313      	orrs	r3, r2
    6490:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6492:	9b01      	ldr	r3, [sp, #4]
    6494:	7f1b      	ldrb	r3, [r3, #28]
    6496:	2b00      	cmp	r3, #0
    6498:	d001      	beq.n	649e <Port_Ci_Port_Ip_PinInit+0x5a>
    649a:	2310      	movs	r3, #16
    649c:	e000      	b.n	64a0 <Port_Ci_Port_Ip_PinInit+0x5c>
    649e:	2300      	movs	r3, #0
    64a0:	9a05      	ldr	r2, [sp, #20]
    64a2:	4313      	orrs	r3, r2
    64a4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	691b      	ldr	r3, [r3, #16]
    64aa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    64ac:	9b01      	ldr	r3, [sp, #4]
    64ae:	6818      	ldr	r0, [r3, #0]
    64b0:	9b01      	ldr	r3, [sp, #4]
    64b2:	689b      	ldr	r3, [r3, #8]
    64b4:	9a04      	ldr	r2, [sp, #16]
    64b6:	4619      	mov	r1, r3
    64b8:	f7ff ff90 	bl	63dc <Port_Ci_Port_Ip_ConfigureInterleave>
    64bc:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    64be:	9b03      	ldr	r3, [sp, #12]
    64c0:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    64c2:	9b04      	ldr	r3, [sp, #16]
    64c4:	021b      	lsls	r3, r3, #8
    64c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    64ca:	9a05      	ldr	r2, [sp, #20]
    64cc:	4313      	orrs	r3, r2
    64ce:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    64d0:	f000 ff88 	bl	73e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    64d4:	9b01      	ldr	r3, [sp, #4]
    64d6:	681b      	ldr	r3, [r3, #0]
    64d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    64dc:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    64de:	9b01      	ldr	r3, [sp, #4]
    64e0:	689b      	ldr	r3, [r3, #8]
    64e2:	2201      	movs	r2, #1
    64e4:	fa02 f303 	lsl.w	r3, r2, r3
    64e8:	43db      	mvns	r3, r3
    64ea:	9a02      	ldr	r2, [sp, #8]
    64ec:	4013      	ands	r3, r2
    64ee:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    64f0:	9b01      	ldr	r3, [sp, #4]
    64f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    64f6:	2b00      	cmp	r3, #0
    64f8:	d001      	beq.n	64fe <Port_Ci_Port_Ip_PinInit+0xba>
    64fa:	2201      	movs	r2, #1
    64fc:	e000      	b.n	6500 <Port_Ci_Port_Ip_PinInit+0xbc>
    64fe:	2200      	movs	r2, #0
    6500:	9b01      	ldr	r3, [sp, #4]
    6502:	689b      	ldr	r3, [r3, #8]
    6504:	fa02 f303 	lsl.w	r3, r2, r3
    6508:	9a02      	ldr	r2, [sp, #8]
    650a:	4313      	orrs	r3, r2
    650c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    650e:	9b01      	ldr	r3, [sp, #4]
    6510:	681b      	ldr	r3, [r3, #0]
    6512:	9a02      	ldr	r2, [sp, #8]
    6514:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6518:	f000 ff90 	bl	743c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    651c:	9b04      	ldr	r3, [sp, #16]
    651e:	2b01      	cmp	r3, #1
    6520:	d16d      	bne.n	65fe <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6522:	9b01      	ldr	r3, [sp, #4]
    6524:	695b      	ldr	r3, [r3, #20]
    6526:	2b02      	cmp	r3, #2
    6528:	d138      	bne.n	659c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    652a:	9b01      	ldr	r3, [sp, #4]
    652c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6530:	2b01      	cmp	r3, #1
    6532:	d10f      	bne.n	6554 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6534:	f000 ffa8 	bl	7488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6538:	9b01      	ldr	r3, [sp, #4]
    653a:	685b      	ldr	r3, [r3, #4]
    653c:	6859      	ldr	r1, [r3, #4]
    653e:	9b01      	ldr	r3, [sp, #4]
    6540:	689b      	ldr	r3, [r3, #8]
    6542:	2201      	movs	r2, #1
    6544:	409a      	lsls	r2, r3
    6546:	9b01      	ldr	r3, [sp, #4]
    6548:	685b      	ldr	r3, [r3, #4]
    654a:	430a      	orrs	r2, r1
    654c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    654e:	f000 ffc7 	bl	74e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6552:	e013      	b.n	657c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6554:	9b01      	ldr	r3, [sp, #4]
    6556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    655a:	2b00      	cmp	r3, #0
    655c:	d10e      	bne.n	657c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    655e:	f000 ffe5 	bl	752c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6562:	9b01      	ldr	r3, [sp, #4]
    6564:	685b      	ldr	r3, [r3, #4]
    6566:	6899      	ldr	r1, [r3, #8]
    6568:	9b01      	ldr	r3, [sp, #4]
    656a:	689b      	ldr	r3, [r3, #8]
    656c:	2201      	movs	r2, #1
    656e:	409a      	lsls	r2, r3
    6570:	9b01      	ldr	r3, [sp, #4]
    6572:	685b      	ldr	r3, [r3, #4]
    6574:	430a      	orrs	r2, r1
    6576:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6578:	f001 f804 	bl	7584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    657c:	f001 f828 	bl	75d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	685b      	ldr	r3, [r3, #4]
    6584:	6959      	ldr	r1, [r3, #20]
    6586:	9b01      	ldr	r3, [sp, #4]
    6588:	689b      	ldr	r3, [r3, #8]
    658a:	2201      	movs	r2, #1
    658c:	409a      	lsls	r2, r3
    658e:	9b01      	ldr	r3, [sp, #4]
    6590:	685b      	ldr	r3, [r3, #4]
    6592:	430a      	orrs	r2, r1
    6594:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6596:	f001 f847 	bl	7628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    659a:	e030      	b.n	65fe <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    659c:	f001 f818 	bl	75d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    65a0:	9b01      	ldr	r3, [sp, #4]
    65a2:	685b      	ldr	r3, [r3, #4]
    65a4:	6959      	ldr	r1, [r3, #20]
    65a6:	9b01      	ldr	r3, [sp, #4]
    65a8:	689b      	ldr	r3, [r3, #8]
    65aa:	2201      	movs	r2, #1
    65ac:	fa02 f303 	lsl.w	r3, r2, r3
    65b0:	43da      	mvns	r2, r3
    65b2:	9b01      	ldr	r3, [sp, #4]
    65b4:	685b      	ldr	r3, [r3, #4]
    65b6:	400a      	ands	r2, r1
    65b8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    65ba:	f001 f835 	bl	7628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    65be:	f001 f859 	bl	7674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	685b      	ldr	r3, [r3, #4]
    65c6:	6999      	ldr	r1, [r3, #24]
    65c8:	9b01      	ldr	r3, [sp, #4]
    65ca:	689b      	ldr	r3, [r3, #8]
    65cc:	2201      	movs	r2, #1
    65ce:	fa02 f303 	lsl.w	r3, r2, r3
    65d2:	43da      	mvns	r2, r3
    65d4:	9b01      	ldr	r3, [sp, #4]
    65d6:	685b      	ldr	r3, [r3, #4]
    65d8:	400a      	ands	r2, r1
    65da:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    65dc:	9b01      	ldr	r3, [sp, #4]
    65de:	695b      	ldr	r3, [r3, #20]
    65e0:	2b03      	cmp	r3, #3
    65e2:	d10a      	bne.n	65fa <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    65e4:	9b01      	ldr	r3, [sp, #4]
    65e6:	685b      	ldr	r3, [r3, #4]
    65e8:	6999      	ldr	r1, [r3, #24]
    65ea:	9b01      	ldr	r3, [sp, #4]
    65ec:	689b      	ldr	r3, [r3, #8]
    65ee:	2201      	movs	r2, #1
    65f0:	409a      	lsls	r2, r3
    65f2:	9b01      	ldr	r3, [sp, #4]
    65f4:	685b      	ldr	r3, [r3, #4]
    65f6:	430a      	orrs	r2, r1
    65f8:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    65fa:	f001 f867 	bl	76cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    65fe:	9b01      	ldr	r3, [sp, #4]
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	9a01      	ldr	r2, [sp, #4]
    6604:	6892      	ldr	r2, [r2, #8]
    6606:	9905      	ldr	r1, [sp, #20]
    6608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    660c:	bf00      	nop
    660e:	b007      	add	sp, #28
    6610:	f85d fb04 	ldr.w	pc, [sp], #4

00006614 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6614:	b500      	push	{lr}
    6616:	b085      	sub	sp, #20
    6618:	9001      	str	r0, [sp, #4]
    661a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    661c:	2300      	movs	r3, #0
    661e:	9303      	str	r3, [sp, #12]
    6620:	e00d      	b.n	663e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6622:	9a03      	ldr	r2, [sp, #12]
    6624:	4613      	mov	r3, r2
    6626:	009b      	lsls	r3, r3, #2
    6628:	4413      	add	r3, r2
    662a:	00db      	lsls	r3, r3, #3
    662c:	461a      	mov	r2, r3
    662e:	9b00      	ldr	r3, [sp, #0]
    6630:	4413      	add	r3, r2
    6632:	4618      	mov	r0, r3
    6634:	f7ff ff06 	bl	6444 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6638:	9b03      	ldr	r3, [sp, #12]
    663a:	3301      	adds	r3, #1
    663c:	9303      	str	r3, [sp, #12]
    663e:	9a03      	ldr	r2, [sp, #12]
    6640:	9b01      	ldr	r3, [sp, #4]
    6642:	429a      	cmp	r2, r3
    6644:	d3ed      	bcc.n	6622 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6646:	2300      	movs	r3, #0
}
    6648:	4618      	mov	r0, r3
    664a:	b005      	add	sp, #20
    664c:	f85d fb04 	ldr.w	pc, [sp], #4

00006650 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6650:	b500      	push	{lr}
    6652:	b087      	sub	sp, #28
    6654:	9003      	str	r0, [sp, #12]
    6656:	9102      	str	r1, [sp, #8]
    6658:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    665a:	9a01      	ldr	r2, [sp, #4]
    665c:	9902      	ldr	r1, [sp, #8]
    665e:	9803      	ldr	r0, [sp, #12]
    6660:	f7ff febc 	bl	63dc <Port_Ci_Port_Ip_ConfigureInterleave>
    6664:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6666:	f001 f8a9 	bl	77bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    666a:	9b03      	ldr	r3, [sp, #12]
    666c:	9a02      	ldr	r2, [sp, #8]
    666e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6672:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6674:	9b04      	ldr	r3, [sp, #16]
    6676:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    667a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    667c:	9b05      	ldr	r3, [sp, #20]
    667e:	021b      	lsls	r3, r3, #8
    6680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6684:	9a04      	ldr	r2, [sp, #16]
    6686:	4313      	orrs	r3, r2
    6688:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    668a:	9b03      	ldr	r3, [sp, #12]
    668c:	9a02      	ldr	r2, [sp, #8]
    668e:	9904      	ldr	r1, [sp, #16]
    6690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6694:	f001 f8be 	bl	7814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6698:	bf00      	nop
    669a:	b007      	add	sp, #28
    669c:	f85d fb04 	ldr.w	pc, [sp], #4

000066a0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    66a0:	b500      	push	{lr}
    66a2:	b083      	sub	sp, #12
    66a4:	9001      	str	r0, [sp, #4]
    66a6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    66a8:	f001 f8da 	bl	7860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    66ac:	9b01      	ldr	r3, [sp, #4]
    66ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    66b2:	2101      	movs	r1, #1
    66b4:	9b00      	ldr	r3, [sp, #0]
    66b6:	fa01 f303 	lsl.w	r3, r1, r3
    66ba:	431a      	orrs	r2, r3
    66bc:	9b01      	ldr	r3, [sp, #4]
    66be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    66c2:	f001 f8f9 	bl	78b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    66c6:	bf00      	nop
    66c8:	b003      	add	sp, #12
    66ca:	f85d fb04 	ldr.w	pc, [sp], #4

000066ce <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    66ce:	b500      	push	{lr}
    66d0:	b083      	sub	sp, #12
    66d2:	9001      	str	r0, [sp, #4]
    66d4:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    66d6:	f001 f915 	bl	7904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    66da:	9b01      	ldr	r3, [sp, #4]
    66dc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    66e0:	2101      	movs	r1, #1
    66e2:	9b00      	ldr	r3, [sp, #0]
    66e4:	fa01 f303 	lsl.w	r3, r1, r3
    66e8:	43db      	mvns	r3, r3
    66ea:	401a      	ands	r2, r3
    66ec:	9b01      	ldr	r3, [sp, #4]
    66ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    66f2:	f001 f933 	bl	795c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    66f6:	bf00      	nop
    66f8:	b003      	add	sp, #12
    66fa:	f85d fb04 	ldr.w	pc, [sp], #4

000066fe <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    66fe:	b082      	sub	sp, #8
    6700:	9001      	str	r0, [sp, #4]
    6702:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6704:	9b00      	ldr	r3, [sp, #0]
    6706:	785b      	ldrb	r3, [r3, #1]
    6708:	f003 0201 	and.w	r2, r3, #1
    670c:	9b01      	ldr	r3, [sp, #4]
    670e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6712:	9b00      	ldr	r3, [sp, #0]
    6714:	789b      	ldrb	r3, [r3, #2]
    6716:	f003 021f 	and.w	r2, r3, #31
    671a:	9b01      	ldr	r3, [sp, #4]
    671c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6720:	bf00      	nop
    6722:	b002      	add	sp, #8
    6724:	4770      	bx	lr

00006726 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6726:	b086      	sub	sp, #24
    6728:	9003      	str	r0, [sp, #12]
    672a:	9301      	str	r3, [sp, #4]
    672c:	460b      	mov	r3, r1
    672e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6732:	4613      	mov	r3, r2
    6734:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6738:	2300      	movs	r3, #0
    673a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    673e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6742:	f043 0301 	orr.w	r3, r3, #1
    6746:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    674a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    674e:	f043 0302 	orr.w	r3, r3, #2
    6752:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6756:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    675a:	f043 0310 	orr.w	r3, r3, #16
    675e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6762:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    676a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    676e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6776:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    677a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6786:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    678a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    678e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6792:	4013      	ands	r3, r2
    6794:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	2b00      	cmp	r3, #0
    679c:	d003      	beq.n	67a6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    679e:	9b01      	ldr	r3, [sp, #4]
    67a0:	2b01      	cmp	r3, #1
    67a2:	d00a      	beq.n	67ba <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    67a4:	e013      	b.n	67ce <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    67a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67aa:	041a      	lsls	r2, r3, #16
    67ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67b0:	431a      	orrs	r2, r3
    67b2:	9b03      	ldr	r3, [sp, #12]
    67b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    67b8:	e009      	b.n	67ce <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    67ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67be:	041a      	lsls	r2, r3, #16
    67c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    67c4:	431a      	orrs	r2, r3
    67c6:	9b03      	ldr	r3, [sp, #12]
    67c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    67cc:	bf00      	nop
    }
}
    67ce:	bf00      	nop
    67d0:	b006      	add	sp, #24
    67d2:	4770      	bx	lr

000067d4 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    67d4:	b500      	push	{lr}
    67d6:	b087      	sub	sp, #28
    67d8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	885b      	ldrh	r3, [r3, #2]
    67de:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    67e2:	9b01      	ldr	r3, [sp, #4]
    67e4:	689b      	ldr	r3, [r3, #8]
    67e6:	7a1b      	ldrb	r3, [r3, #8]
    67e8:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    67ec:	9b01      	ldr	r3, [sp, #4]
    67ee:	689b      	ldr	r3, [r3, #8]
    67f0:	681b      	ldr	r3, [r3, #0]
    67f2:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    67f4:	9b01      	ldr	r3, [sp, #4]
    67f6:	689b      	ldr	r3, [r3, #8]
    67f8:	685b      	ldr	r3, [r3, #4]
    67fa:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    67fc:	2300      	movs	r3, #0
    67fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    6802:	e111      	b.n	6a28 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6804:	9b02      	ldr	r3, [sp, #8]
    6806:	2b02      	cmp	r3, #2
    6808:	d169      	bne.n	68de <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    680a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    680e:	2b01      	cmp	r3, #1
    6810:	d11a      	bne.n	6848 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6812:	9b01      	ldr	r3, [sp, #4]
    6814:	685a      	ldr	r2, [r3, #4]
    6816:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    681a:	005b      	lsls	r3, r3, #1
    681c:	4413      	add	r3, r2
    681e:	881b      	ldrh	r3, [r3, #0]
    6820:	f003 021f 	and.w	r2, r3, #31
    6824:	9b01      	ldr	r3, [sp, #4]
    6826:	6859      	ldr	r1, [r3, #4]
    6828:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    682c:	005b      	lsls	r3, r3, #1
    682e:	440b      	add	r3, r1
    6830:	881b      	ldrh	r3, [r3, #0]
    6832:	095b      	lsrs	r3, r3, #5
    6834:	b29b      	uxth	r3, r3
    6836:	4619      	mov	r1, r3
    6838:	4b81      	ldr	r3, [pc, #516]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    683a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    683e:	2101      	movs	r1, #1
    6840:	fa01 f202 	lsl.w	r2, r1, r2
    6844:	605a      	str	r2, [r3, #4]
    6846:	e01d      	b.n	6884 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6848:	f89d 3013 	ldrb.w	r3, [sp, #19]
    684c:	2b00      	cmp	r3, #0
    684e:	d119      	bne.n	6884 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	685a      	ldr	r2, [r3, #4]
    6854:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6858:	005b      	lsls	r3, r3, #1
    685a:	4413      	add	r3, r2
    685c:	881b      	ldrh	r3, [r3, #0]
    685e:	f003 021f 	and.w	r2, r3, #31
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	6859      	ldr	r1, [r3, #4]
    6866:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    686a:	005b      	lsls	r3, r3, #1
    686c:	440b      	add	r3, r1
    686e:	881b      	ldrh	r3, [r3, #0]
    6870:	095b      	lsrs	r3, r3, #5
    6872:	b29b      	uxth	r3, r3
    6874:	4619      	mov	r1, r3
    6876:	4b72      	ldr	r3, [pc, #456]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    687c:	2101      	movs	r1, #1
    687e:	fa01 f202 	lsl.w	r2, r1, r2
    6882:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6884:	f001 f890 	bl	79a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6888:	9b01      	ldr	r3, [sp, #4]
    688a:	685a      	ldr	r2, [r3, #4]
    688c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6890:	005b      	lsls	r3, r3, #1
    6892:	4413      	add	r3, r2
    6894:	881b      	ldrh	r3, [r3, #0]
    6896:	095b      	lsrs	r3, r3, #5
    6898:	b29b      	uxth	r3, r3
    689a:	461a      	mov	r2, r3
    689c:	4b68      	ldr	r3, [pc, #416]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68a2:	6959      	ldr	r1, [r3, #20]
    68a4:	9b01      	ldr	r3, [sp, #4]
    68a6:	685a      	ldr	r2, [r3, #4]
    68a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    68ac:	005b      	lsls	r3, r3, #1
    68ae:	4413      	add	r3, r2
    68b0:	881b      	ldrh	r3, [r3, #0]
    68b2:	f003 031f 	and.w	r3, r3, #31
    68b6:	2201      	movs	r2, #1
    68b8:	409a      	lsls	r2, r3
    68ba:	9b01      	ldr	r3, [sp, #4]
    68bc:	6858      	ldr	r0, [r3, #4]
    68be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    68c2:	005b      	lsls	r3, r3, #1
    68c4:	4403      	add	r3, r0
    68c6:	881b      	ldrh	r3, [r3, #0]
    68c8:	095b      	lsrs	r3, r3, #5
    68ca:	b29b      	uxth	r3, r3
    68cc:	4618      	mov	r0, r3
    68ce:	4b5c      	ldr	r3, [pc, #368]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    68d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68d4:	430a      	orrs	r2, r1
    68d6:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    68d8:	f001 f892 	bl	7a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    68dc:	e086      	b.n	69ec <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    68de:	f001 f863 	bl	79a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    68e2:	9b01      	ldr	r3, [sp, #4]
    68e4:	685a      	ldr	r2, [r3, #4]
    68e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    68ea:	005b      	lsls	r3, r3, #1
    68ec:	4413      	add	r3, r2
    68ee:	881b      	ldrh	r3, [r3, #0]
    68f0:	095b      	lsrs	r3, r3, #5
    68f2:	b29b      	uxth	r3, r3
    68f4:	461a      	mov	r2, r3
    68f6:	4b52      	ldr	r3, [pc, #328]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    68f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68fc:	6959      	ldr	r1, [r3, #20]
    68fe:	9b01      	ldr	r3, [sp, #4]
    6900:	685a      	ldr	r2, [r3, #4]
    6902:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6906:	005b      	lsls	r3, r3, #1
    6908:	4413      	add	r3, r2
    690a:	881b      	ldrh	r3, [r3, #0]
    690c:	f003 031f 	and.w	r3, r3, #31
    6910:	2201      	movs	r2, #1
    6912:	fa02 f303 	lsl.w	r3, r2, r3
    6916:	43da      	mvns	r2, r3
    6918:	9b01      	ldr	r3, [sp, #4]
    691a:	6858      	ldr	r0, [r3, #4]
    691c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6920:	005b      	lsls	r3, r3, #1
    6922:	4403      	add	r3, r0
    6924:	881b      	ldrh	r3, [r3, #0]
    6926:	095b      	lsrs	r3, r3, #5
    6928:	b29b      	uxth	r3, r3
    692a:	4618      	mov	r0, r3
    692c:	4b44      	ldr	r3, [pc, #272]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    692e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6932:	400a      	ands	r2, r1
    6934:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6936:	f001 f863 	bl	7a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    693a:	f001 f887 	bl	7a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    693e:	9b01      	ldr	r3, [sp, #4]
    6940:	685a      	ldr	r2, [r3, #4]
    6942:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6946:	005b      	lsls	r3, r3, #1
    6948:	4413      	add	r3, r2
    694a:	881b      	ldrh	r3, [r3, #0]
    694c:	095b      	lsrs	r3, r3, #5
    694e:	b29b      	uxth	r3, r3
    6950:	461a      	mov	r2, r3
    6952:	4b3b      	ldr	r3, [pc, #236]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    6954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6958:	6999      	ldr	r1, [r3, #24]
    695a:	9b01      	ldr	r3, [sp, #4]
    695c:	685a      	ldr	r2, [r3, #4]
    695e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6962:	005b      	lsls	r3, r3, #1
    6964:	4413      	add	r3, r2
    6966:	881b      	ldrh	r3, [r3, #0]
    6968:	f003 031f 	and.w	r3, r3, #31
    696c:	2201      	movs	r2, #1
    696e:	fa02 f303 	lsl.w	r3, r2, r3
    6972:	43da      	mvns	r2, r3
    6974:	9b01      	ldr	r3, [sp, #4]
    6976:	6858      	ldr	r0, [r3, #4]
    6978:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    697c:	005b      	lsls	r3, r3, #1
    697e:	4403      	add	r3, r0
    6980:	881b      	ldrh	r3, [r3, #0]
    6982:	095b      	lsrs	r3, r3, #5
    6984:	b29b      	uxth	r3, r3
    6986:	4618      	mov	r0, r3
    6988:	4b2d      	ldr	r3, [pc, #180]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    698a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    698e:	400a      	ands	r2, r1
    6990:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6992:	9b02      	ldr	r3, [sp, #8]
    6994:	2b03      	cmp	r3, #3
    6996:	d127      	bne.n	69e8 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	685a      	ldr	r2, [r3, #4]
    699c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69a0:	005b      	lsls	r3, r3, #1
    69a2:	4413      	add	r3, r2
    69a4:	881b      	ldrh	r3, [r3, #0]
    69a6:	095b      	lsrs	r3, r3, #5
    69a8:	b29b      	uxth	r3, r3
    69aa:	461a      	mov	r2, r3
    69ac:	4b24      	ldr	r3, [pc, #144]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    69ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    69b2:	6999      	ldr	r1, [r3, #24]
    69b4:	9b01      	ldr	r3, [sp, #4]
    69b6:	685a      	ldr	r2, [r3, #4]
    69b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69bc:	005b      	lsls	r3, r3, #1
    69be:	4413      	add	r3, r2
    69c0:	881b      	ldrh	r3, [r3, #0]
    69c2:	f003 031f 	and.w	r3, r3, #31
    69c6:	2201      	movs	r2, #1
    69c8:	409a      	lsls	r2, r3
    69ca:	9b01      	ldr	r3, [sp, #4]
    69cc:	6858      	ldr	r0, [r3, #4]
    69ce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69d2:	005b      	lsls	r3, r3, #1
    69d4:	4403      	add	r3, r0
    69d6:	881b      	ldrh	r3, [r3, #0]
    69d8:	095b      	lsrs	r3, r3, #5
    69da:	b29b      	uxth	r3, r3
    69dc:	4618      	mov	r0, r3
    69de:	4b18      	ldr	r3, [pc, #96]	; (6a40 <Port_Ipw_Init_UnusedPins+0x26c>)
    69e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    69e4:	430a      	orrs	r2, r1
    69e6:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    69e8:	f001 f85c 	bl	7aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    69ec:	9b01      	ldr	r3, [sp, #4]
    69ee:	685a      	ldr	r2, [r3, #4]
    69f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69f4:	005b      	lsls	r3, r3, #1
    69f6:	4413      	add	r3, r2
    69f8:	881b      	ldrh	r3, [r3, #0]
    69fa:	095b      	lsrs	r3, r3, #5
    69fc:	b29b      	uxth	r3, r3
    69fe:	461a      	mov	r2, r3
    6a00:	4b10      	ldr	r3, [pc, #64]	; (6a44 <Port_Ipw_Init_UnusedPins+0x270>)
    6a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6a06:	9a01      	ldr	r2, [sp, #4]
    6a08:	6851      	ldr	r1, [r2, #4]
    6a0a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a0e:	0052      	lsls	r2, r2, #1
    6a10:	440a      	add	r2, r1
    6a12:	8812      	ldrh	r2, [r2, #0]
    6a14:	f002 021f 	and.w	r2, r2, #31
    6a18:	9903      	ldr	r1, [sp, #12]
    6a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6a1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a22:	3301      	adds	r3, #1
    6a24:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a28:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a2c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6a30:	429a      	cmp	r2, r3
    6a32:	f4ff aee7 	bcc.w	6804 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6a36:	bf00      	nop
    6a38:	bf00      	nop
    6a3a:	b007      	add	sp, #28
    6a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a40:	00008ef8 	.word	0x00008ef8
    6a44:	00008ee4 	.word	0x00008ee4

00006a48 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6a48:	b500      	push	{lr}
    6a4a:	b085      	sub	sp, #20
    6a4c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	7c1b      	ldrb	r3, [r3, #16]
    6a52:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6a56:	2300      	movs	r3, #0
    6a58:	f8ad 300e 	strh.w	r3, [sp, #14]
    6a5c:	e035      	b.n	6aca <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6a5e:	9b01      	ldr	r3, [sp, #4]
    6a60:	695a      	ldr	r2, [r3, #20]
    6a62:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6a66:	00db      	lsls	r3, r3, #3
    6a68:	4413      	add	r3, r2
    6a6a:	781b      	ldrb	r3, [r3, #0]
    6a6c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6a70:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6a74:	4a1f      	ldr	r2, [pc, #124]	; (6af4 <Port_Ipw_Init+0xac>)
    6a76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	695a      	ldr	r2, [r3, #20]
    6a7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6a82:	00db      	lsls	r3, r3, #3
    6a84:	4413      	add	r3, r2
    6a86:	4619      	mov	r1, r3
    6a88:	f7ff fe39 	bl	66fe <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6a8c:	f001 f978 	bl	7d80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6a90:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6a94:	4a17      	ldr	r2, [pc, #92]	; (6af4 <Port_Ipw_Init+0xac>)
    6a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a9a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6a9e:	9b01      	ldr	r3, [sp, #4]
    6aa0:	695a      	ldr	r2, [r3, #20]
    6aa2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6aa6:	00db      	lsls	r3, r3, #3
    6aa8:	4413      	add	r3, r2
    6aaa:	685a      	ldr	r2, [r3, #4]
    6aac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6ab0:	4810      	ldr	r0, [pc, #64]	; (6af4 <Port_Ipw_Init+0xac>)
    6ab2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6ab6:	430a      	orrs	r2, r1
    6ab8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6abc:	f001 f98c 	bl	7dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6ac0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6ac4:	3301      	adds	r3, #1
    6ac6:	f8ad 300e 	strh.w	r3, [sp, #14]
    6aca:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ace:	b29b      	uxth	r3, r3
    6ad0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6ad4:	429a      	cmp	r2, r3
    6ad6:	d3c2      	bcc.n	6a5e <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6ad8:	9b01      	ldr	r3, [sp, #4]
    6ada:	6a1b      	ldr	r3, [r3, #32]
    6adc:	4619      	mov	r1, r3
    6ade:	2006      	movs	r0, #6
    6ae0:	f7ff fd98 	bl	6614 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6ae4:	9801      	ldr	r0, [sp, #4]
    6ae6:	f7ff fe75 	bl	67d4 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6aea:	bf00      	nop
    6aec:	b005      	add	sp, #20
    6aee:	f85d fb04 	ldr.w	pc, [sp], #4
    6af2:	bf00      	nop
    6af4:	00008ee4 	.word	0x00008ee4

00006af8 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6af8:	b500      	push	{lr}
    6afa:	b085      	sub	sp, #20
    6afc:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6afe:	9b01      	ldr	r3, [sp, #4]
    6b00:	881b      	ldrh	r3, [r3, #0]
    6b02:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6b06:	2300      	movs	r3, #0
    6b08:	f8ad 300e 	strh.w	r3, [sp, #14]
    6b0c:	e0d2      	b.n	6cb4 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6b0e:	9b01      	ldr	r3, [sp, #4]
    6b10:	68d9      	ldr	r1, [r3, #12]
    6b12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b16:	4613      	mov	r3, r2
    6b18:	009b      	lsls	r3, r3, #2
    6b1a:	4413      	add	r3, r2
    6b1c:	009b      	lsls	r3, r3, #2
    6b1e:	440b      	add	r3, r1
    6b20:	7c5b      	ldrb	r3, [r3, #17]
    6b22:	f083 0301 	eor.w	r3, r3, #1
    6b26:	b2db      	uxtb	r3, r3
    6b28:	2b00      	cmp	r3, #0
    6b2a:	f000 80be 	beq.w	6caa <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6b2e:	9b01      	ldr	r3, [sp, #4]
    6b30:	68d9      	ldr	r1, [r3, #12]
    6b32:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b36:	4613      	mov	r3, r2
    6b38:	009b      	lsls	r3, r3, #2
    6b3a:	4413      	add	r3, r2
    6b3c:	009b      	lsls	r3, r3, #2
    6b3e:	440b      	add	r3, r1
    6b40:	7c1b      	ldrb	r3, [r3, #16]
    6b42:	2b00      	cmp	r3, #0
    6b44:	f000 80b1 	beq.w	6caa <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6b48:	9b01      	ldr	r3, [sp, #4]
    6b4a:	68d9      	ldr	r1, [r3, #12]
    6b4c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b50:	4613      	mov	r3, r2
    6b52:	009b      	lsls	r3, r3, #2
    6b54:	4413      	add	r3, r2
    6b56:	009b      	lsls	r3, r3, #2
    6b58:	440b      	add	r3, r1
    6b5a:	881b      	ldrh	r3, [r3, #0]
    6b5c:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6b60:	9b01      	ldr	r3, [sp, #4]
    6b62:	68d9      	ldr	r1, [r3, #12]
    6b64:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b68:	4613      	mov	r3, r2
    6b6a:	009b      	lsls	r3, r3, #2
    6b6c:	4413      	add	r3, r2
    6b6e:	009b      	lsls	r3, r3, #2
    6b70:	440b      	add	r3, r1
    6b72:	68db      	ldr	r3, [r3, #12]
    6b74:	2b02      	cmp	r3, #2
    6b76:	d11d      	bne.n	6bb4 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6b78:	f001 fa4a 	bl	8010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6b7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b80:	095b      	lsrs	r3, r3, #5
    6b82:	b29b      	uxth	r3, r3
    6b84:	461a      	mov	r2, r3
    6b86:	4b51      	ldr	r3, [pc, #324]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b8c:	6959      	ldr	r1, [r3, #20]
    6b8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b92:	f003 031f 	and.w	r3, r3, #31
    6b96:	2201      	movs	r2, #1
    6b98:	409a      	lsls	r2, r3
    6b9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6b9e:	095b      	lsrs	r3, r3, #5
    6ba0:	b29b      	uxth	r3, r3
    6ba2:	4618      	mov	r0, r3
    6ba4:	4b49      	ldr	r3, [pc, #292]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ba6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6baa:	430a      	orrs	r2, r1
    6bac:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6bae:	f001 fa5b 	bl	8068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6bb2:	e07a      	b.n	6caa <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6bb4:	9b01      	ldr	r3, [sp, #4]
    6bb6:	68d9      	ldr	r1, [r3, #12]
    6bb8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6bbc:	4613      	mov	r3, r2
    6bbe:	009b      	lsls	r3, r3, #2
    6bc0:	4413      	add	r3, r2
    6bc2:	009b      	lsls	r3, r3, #2
    6bc4:	440b      	add	r3, r1
    6bc6:	68db      	ldr	r3, [r3, #12]
    6bc8:	2b01      	cmp	r3, #1
    6bca:	d00b      	beq.n	6be4 <Port_Ipw_RefreshPortDirection+0xec>
    6bcc:	9b01      	ldr	r3, [sp, #4]
    6bce:	68d9      	ldr	r1, [r3, #12]
    6bd0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6bd4:	4613      	mov	r3, r2
    6bd6:	009b      	lsls	r3, r3, #2
    6bd8:	4413      	add	r3, r2
    6bda:	009b      	lsls	r3, r3, #2
    6bdc:	440b      	add	r3, r1
    6bde:	68db      	ldr	r3, [r3, #12]
    6be0:	2b03      	cmp	r3, #3
    6be2:	d162      	bne.n	6caa <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6be4:	f001 fa14 	bl	8010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6be8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6bec:	095b      	lsrs	r3, r3, #5
    6bee:	b29b      	uxth	r3, r3
    6bf0:	461a      	mov	r2, r3
    6bf2:	4b36      	ldr	r3, [pc, #216]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6bf8:	6959      	ldr	r1, [r3, #20]
    6bfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6bfe:	f003 031f 	and.w	r3, r3, #31
    6c02:	2201      	movs	r2, #1
    6c04:	fa02 f303 	lsl.w	r3, r2, r3
    6c08:	43da      	mvns	r2, r3
    6c0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c0e:	095b      	lsrs	r3, r3, #5
    6c10:	b29b      	uxth	r3, r3
    6c12:	4618      	mov	r0, r3
    6c14:	4b2d      	ldr	r3, [pc, #180]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6c16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c1a:	400a      	ands	r2, r1
    6c1c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6c1e:	f001 fa23 	bl	8068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6c22:	f001 fa47 	bl	80b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6c26:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c2a:	095b      	lsrs	r3, r3, #5
    6c2c:	b29b      	uxth	r3, r3
    6c2e:	461a      	mov	r2, r3
    6c30:	4b26      	ldr	r3, [pc, #152]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c36:	6999      	ldr	r1, [r3, #24]
    6c38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c3c:	f003 031f 	and.w	r3, r3, #31
    6c40:	2201      	movs	r2, #1
    6c42:	fa02 f303 	lsl.w	r3, r2, r3
    6c46:	43da      	mvns	r2, r3
    6c48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c4c:	095b      	lsrs	r3, r3, #5
    6c4e:	b29b      	uxth	r3, r3
    6c50:	4618      	mov	r0, r3
    6c52:	4b1e      	ldr	r3, [pc, #120]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6c54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c58:	400a      	ands	r2, r1
    6c5a:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6c5c:	9b01      	ldr	r3, [sp, #4]
    6c5e:	68d9      	ldr	r1, [r3, #12]
    6c60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6c64:	4613      	mov	r3, r2
    6c66:	009b      	lsls	r3, r3, #2
    6c68:	4413      	add	r3, r2
    6c6a:	009b      	lsls	r3, r3, #2
    6c6c:	440b      	add	r3, r1
    6c6e:	68db      	ldr	r3, [r3, #12]
    6c70:	2b03      	cmp	r3, #3
    6c72:	d118      	bne.n	6ca6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6c74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c78:	095b      	lsrs	r3, r3, #5
    6c7a:	b29b      	uxth	r3, r3
    6c7c:	461a      	mov	r2, r3
    6c7e:	4b13      	ldr	r3, [pc, #76]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c84:	6999      	ldr	r1, [r3, #24]
    6c86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c8a:	f003 031f 	and.w	r3, r3, #31
    6c8e:	2201      	movs	r2, #1
    6c90:	409a      	lsls	r2, r3
    6c92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6c96:	095b      	lsrs	r3, r3, #5
    6c98:	b29b      	uxth	r3, r3
    6c9a:	4618      	mov	r0, r3
    6c9c:	4b0b      	ldr	r3, [pc, #44]	; (6ccc <Port_Ipw_RefreshPortDirection+0x1d4>)
    6c9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ca2:	430a      	orrs	r2, r1
    6ca4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6ca6:	f001 fa31 	bl	810c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6caa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cae:	3301      	adds	r3, #1
    6cb0:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cb4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6cb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6cbc:	429a      	cmp	r2, r3
    6cbe:	f4ff af26 	bcc.w	6b0e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6cc2:	bf00      	nop
    6cc4:	bf00      	nop
    6cc6:	b005      	add	sp, #20
    6cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    6ccc:	00008ef8 	.word	0x00008ef8

00006cd0 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6cd0:	b500      	push	{lr}
    6cd2:	b085      	sub	sp, #20
    6cd4:	4603      	mov	r3, r0
    6cd6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6cda:	2300      	movs	r3, #0
    6cdc:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6ce0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ce4:	4618      	mov	r0, r3
    6ce6:	f000 f871 	bl	6dcc <Dio_Ipw_ReadChannel>
    6cea:	4603      	mov	r3, r0
    6cec:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6cf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6cf4:	4618      	mov	r0, r3
    6cf6:	b005      	add	sp, #20
    6cf8:	f85d fb04 	ldr.w	pc, [sp], #4

00006cfc <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6cfc:	b500      	push	{lr}
    6cfe:	b083      	sub	sp, #12
    6d00:	4603      	mov	r3, r0
    6d02:	460a      	mov	r2, r1
    6d04:	f8ad 3006 	strh.w	r3, [sp, #6]
    6d08:	4613      	mov	r3, r2
    6d0a:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    6d0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6d12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6d16:	4611      	mov	r1, r2
    6d18:	4618      	mov	r0, r3
    6d1a:	f000 f87d 	bl	6e18 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6d1e:	bf00      	nop
    6d20:	b003      	add	sp, #12
    6d22:	f85d fb04 	ldr.w	pc, [sp], #4

00006d26 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6d26:	b500      	push	{lr}
    6d28:	b085      	sub	sp, #20
    6d2a:	4603      	mov	r3, r0
    6d2c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6d30:	2300      	movs	r3, #0
    6d32:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6d36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6d3a:	4618      	mov	r0, r3
    6d3c:	f000 f892 	bl	6e64 <Dio_Ipw_FlipChannel>
    6d40:	4603      	mov	r3, r0
    6d42:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6d46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6d4a:	4618      	mov	r0, r3
    6d4c:	b005      	add	sp, #20
    6d4e:	f85d fb04 	ldr.w	pc, [sp], #4

00006d52 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6d52:	b500      	push	{lr}
    6d54:	b085      	sub	sp, #20
    6d56:	4603      	mov	r3, r0
    6d58:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6d5c:	2300      	movs	r3, #0
    6d5e:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d64:	4618      	mov	r0, r3
    6d66:	f000 f8b3 	bl	6ed0 <Dio_Ipw_ReadPort>
    6d6a:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6d6c:	9b03      	ldr	r3, [sp, #12]
}
    6d6e:	4618      	mov	r0, r3
    6d70:	b005      	add	sp, #20
    6d72:	f85d fb04 	ldr.w	pc, [sp], #4

00006d76 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6d76:	b500      	push	{lr}
    6d78:	b083      	sub	sp, #12
    6d7a:	4603      	mov	r3, r0
    6d7c:	9100      	str	r1, [sp, #0]
    6d7e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d86:	9900      	ldr	r1, [sp, #0]
    6d88:	4618      	mov	r0, r3
    6d8a:	f000 f8b9 	bl	6f00 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6d8e:	bf00      	nop
    6d90:	b003      	add	sp, #12
    6d92:	f85d fb04 	ldr.w	pc, [sp], #4

00006d96 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6d96:	b500      	push	{lr}
    6d98:	b085      	sub	sp, #20
    6d9a:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6d9c:	2300      	movs	r3, #0
    6d9e:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6da0:	9801      	ldr	r0, [sp, #4]
    6da2:	f000 f8c5 	bl	6f30 <Dio_Ipw_ReadChannelGroup>
    6da6:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6da8:	9b03      	ldr	r3, [sp, #12]
}
    6daa:	4618      	mov	r0, r3
    6dac:	b005      	add	sp, #20
    6dae:	f85d fb04 	ldr.w	pc, [sp], #4

00006db2 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6db2:	b500      	push	{lr}
    6db4:	b083      	sub	sp, #12
    6db6:	9001      	str	r0, [sp, #4]
    6db8:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6dba:	9900      	ldr	r1, [sp, #0]
    6dbc:	9801      	ldr	r0, [sp, #4]
    6dbe:	f000 f8d7 	bl	6f70 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6dc2:	bf00      	nop
    6dc4:	b003      	add	sp, #12
    6dc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006dcc <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6dcc:	b500      	push	{lr}
    6dce:	b087      	sub	sp, #28
    6dd0:	4603      	mov	r3, r0
    6dd2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6dd6:	2300      	movs	r3, #0
    6dd8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6ddc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6de0:	095b      	lsrs	r3, r3, #5
    6de2:	b29b      	uxth	r3, r3
    6de4:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6de6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6dea:	f003 031f 	and.w	r3, r3, #31
    6dee:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6df0:	4a08      	ldr	r2, [pc, #32]	; (6e14 <Dio_Ipw_ReadChannel+0x48>)
    6df2:	9b04      	ldr	r3, [sp, #16]
    6df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df8:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6dfa:	9903      	ldr	r1, [sp, #12]
    6dfc:	9802      	ldr	r0, [sp, #8]
    6dfe:	f000 f940 	bl	7082 <Gpio_Dio_Ip_ReadPin>
    6e02:	4603      	mov	r3, r0
    6e04:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6e08:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6e0c:	4618      	mov	r0, r3
    6e0e:	b007      	add	sp, #28
    6e10:	f85d fb04 	ldr.w	pc, [sp], #4
    6e14:	1fff8b24 	.word	0x1fff8b24

00006e18 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6e18:	b500      	push	{lr}
    6e1a:	b087      	sub	sp, #28
    6e1c:	4603      	mov	r3, r0
    6e1e:	460a      	mov	r2, r1
    6e20:	f8ad 3006 	strh.w	r3, [sp, #6]
    6e24:	4613      	mov	r3, r2
    6e26:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6e2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6e2e:	095b      	lsrs	r3, r3, #5
    6e30:	b29b      	uxth	r3, r3
    6e32:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6e34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6e38:	f003 031f 	and.w	r3, r3, #31
    6e3c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6e3e:	4a08      	ldr	r2, [pc, #32]	; (6e60 <Dio_Ipw_WriteChannel+0x48>)
    6e40:	9b05      	ldr	r3, [sp, #20]
    6e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e46:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6e48:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6e4c:	461a      	mov	r2, r3
    6e4e:	9904      	ldr	r1, [sp, #16]
    6e50:	9803      	ldr	r0, [sp, #12]
    6e52:	f000 f8b7 	bl	6fc4 <Gpio_Dio_Ip_WritePin>
}
    6e56:	bf00      	nop
    6e58:	b007      	add	sp, #28
    6e5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e5e:	bf00      	nop
    6e60:	1fff8b24 	.word	0x1fff8b24

00006e64 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6e64:	b500      	push	{lr}
    6e66:	b089      	sub	sp, #36	; 0x24
    6e68:	4603      	mov	r3, r0
    6e6a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6e6e:	2300      	movs	r3, #0
    6e70:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6e74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6e78:	095b      	lsrs	r3, r3, #5
    6e7a:	b29b      	uxth	r3, r3
    6e7c:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6e7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6e82:	f003 031f 	and.w	r3, r3, #31
    6e86:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6e88:	4a10      	ldr	r2, [pc, #64]	; (6ecc <Dio_Ipw_FlipChannel+0x68>)
    6e8a:	9b06      	ldr	r3, [sp, #24]
    6e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e90:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6e92:	2201      	movs	r2, #1
    6e94:	9b05      	ldr	r3, [sp, #20]
    6e96:	fa02 f303 	lsl.w	r3, r2, r3
    6e9a:	4619      	mov	r1, r3
    6e9c:	9804      	ldr	r0, [sp, #16]
    6e9e:	f000 f8dc 	bl	705a <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6ea2:	9804      	ldr	r0, [sp, #16]
    6ea4:	f000 f8bc 	bl	7020 <Gpio_Dio_Ip_GetPinsOutput>
    6ea8:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6eaa:	2201      	movs	r2, #1
    6eac:	9b05      	ldr	r3, [sp, #20]
    6eae:	409a      	lsls	r2, r3
    6eb0:	9b03      	ldr	r3, [sp, #12]
    6eb2:	401a      	ands	r2, r3
    6eb4:	9b05      	ldr	r3, [sp, #20]
    6eb6:	fa22 f303 	lsr.w	r3, r2, r3
    6eba:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6ebe:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6ec2:	4618      	mov	r0, r3
    6ec4:	b009      	add	sp, #36	; 0x24
    6ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    6eca:	bf00      	nop
    6ecc:	1fff8b24 	.word	0x1fff8b24

00006ed0 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6ed0:	b500      	push	{lr}
    6ed2:	b085      	sub	sp, #20
    6ed4:	4603      	mov	r3, r0
    6ed6:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6eda:	2300      	movs	r3, #0
    6edc:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ee2:	4a06      	ldr	r2, [pc, #24]	; (6efc <Dio_Ipw_ReadPort+0x2c>)
    6ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ee8:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6eea:	9802      	ldr	r0, [sp, #8]
    6eec:	f000 f8be 	bl	706c <Gpio_Dio_Ip_ReadPins>
    6ef0:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6ef2:	9b03      	ldr	r3, [sp, #12]
}
    6ef4:	4618      	mov	r0, r3
    6ef6:	b005      	add	sp, #20
    6ef8:	f85d fb04 	ldr.w	pc, [sp], #4
    6efc:	1fff8b24 	.word	0x1fff8b24

00006f00 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6f00:	b500      	push	{lr}
    6f02:	b085      	sub	sp, #20
    6f04:	4603      	mov	r3, r0
    6f06:	9100      	str	r1, [sp, #0]
    6f08:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6f0c:	9b00      	ldr	r3, [sp, #0]
    6f0e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f14:	4a05      	ldr	r2, [pc, #20]	; (6f2c <Dio_Ipw_WritePort+0x2c>)
    6f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f1a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6f1c:	9903      	ldr	r1, [sp, #12]
    6f1e:	9802      	ldr	r0, [sp, #8]
    6f20:	f000 f875 	bl	700e <Gpio_Dio_Ip_WritePins>
}
    6f24:	bf00      	nop
    6f26:	b005      	add	sp, #20
    6f28:	f85d fb04 	ldr.w	pc, [sp], #4
    6f2c:	1fff8b24 	.word	0x1fff8b24

00006f30 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6f30:	b500      	push	{lr}
    6f32:	b087      	sub	sp, #28
    6f34:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6f36:	2300      	movs	r3, #0
    6f38:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6f3a:	9b01      	ldr	r3, [sp, #4]
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	461a      	mov	r2, r3
    6f40:	4b0a      	ldr	r3, [pc, #40]	; (6f6c <Dio_Ipw_ReadChannelGroup+0x3c>)
    6f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f46:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6f48:	9804      	ldr	r0, [sp, #16]
    6f4a:	f000 f88f 	bl	706c <Gpio_Dio_Ip_ReadPins>
    6f4e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6f50:	9b01      	ldr	r3, [sp, #4]
    6f52:	685a      	ldr	r2, [r3, #4]
    6f54:	9b03      	ldr	r3, [sp, #12]
    6f56:	4013      	ands	r3, r2
    6f58:	9a01      	ldr	r2, [sp, #4]
    6f5a:	7852      	ldrb	r2, [r2, #1]
    6f5c:	40d3      	lsrs	r3, r2
    6f5e:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6f60:	9b05      	ldr	r3, [sp, #20]
}
    6f62:	4618      	mov	r0, r3
    6f64:	b007      	add	sp, #28
    6f66:	f85d fb04 	ldr.w	pc, [sp], #4
    6f6a:	bf00      	nop
    6f6c:	1fff8b24 	.word	0x1fff8b24

00006f70 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6f70:	b500      	push	{lr}
    6f72:	b087      	sub	sp, #28
    6f74:	9001      	str	r0, [sp, #4]
    6f76:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6f78:	9b01      	ldr	r3, [sp, #4]
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	461a      	mov	r2, r3
    6f7e:	4b10      	ldr	r3, [pc, #64]	; (6fc0 <Dio_Ipw_WriteChannelGroup+0x50>)
    6f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6f84:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6f86:	9b01      	ldr	r3, [sp, #4]
    6f88:	785b      	ldrb	r3, [r3, #1]
    6f8a:	461a      	mov	r2, r3
    6f8c:	9b00      	ldr	r3, [sp, #0]
    6f8e:	fa03 f202 	lsl.w	r2, r3, r2
    6f92:	9b01      	ldr	r3, [sp, #4]
    6f94:	685b      	ldr	r3, [r3, #4]
    6f96:	4013      	ands	r3, r2
    6f98:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6f9a:	9904      	ldr	r1, [sp, #16]
    6f9c:	9805      	ldr	r0, [sp, #20]
    6f9e:	f000 f84a 	bl	7036 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6fa2:	9b04      	ldr	r3, [sp, #16]
    6fa4:	43da      	mvns	r2, r3
    6fa6:	9b01      	ldr	r3, [sp, #4]
    6fa8:	685b      	ldr	r3, [r3, #4]
    6faa:	4013      	ands	r3, r2
    6fac:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6fae:	9903      	ldr	r1, [sp, #12]
    6fb0:	9805      	ldr	r0, [sp, #20]
    6fb2:	f000 f849 	bl	7048 <Gpio_Dio_Ip_ClearPins>

}
    6fb6:	bf00      	nop
    6fb8:	b007      	add	sp, #28
    6fba:	f85d fb04 	ldr.w	pc, [sp], #4
    6fbe:	bf00      	nop
    6fc0:	1fff8b24 	.word	0x1fff8b24

00006fc4 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6fc4:	b500      	push	{lr}
    6fc6:	b087      	sub	sp, #28
    6fc8:	9003      	str	r0, [sp, #12]
    6fca:	9102      	str	r1, [sp, #8]
    6fcc:	4613      	mov	r3, r2
    6fce:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6fd2:	f000 f86d 	bl	70b0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6fd6:	9b03      	ldr	r3, [sp, #12]
    6fd8:	681b      	ldr	r3, [r3, #0]
    6fda:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6fdc:	2201      	movs	r2, #1
    6fde:	9b02      	ldr	r3, [sp, #8]
    6fe0:	fa02 f303 	lsl.w	r3, r2, r3
    6fe4:	43db      	mvns	r3, r3
    6fe6:	9a05      	ldr	r2, [sp, #20]
    6fe8:	4013      	ands	r3, r2
    6fea:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6fec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6ff0:	9b02      	ldr	r3, [sp, #8]
    6ff2:	fa02 f303 	lsl.w	r3, r2, r3
    6ff6:	9a05      	ldr	r2, [sp, #20]
    6ff8:	4313      	orrs	r3, r2
    6ffa:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6ffc:	9b03      	ldr	r3, [sp, #12]
    6ffe:	9a05      	ldr	r2, [sp, #20]
    7000:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    7002:	f000 f881 	bl	7108 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7006:	bf00      	nop
    7008:	b007      	add	sp, #28
    700a:	f85d fb04 	ldr.w	pc, [sp], #4

0000700e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    700e:	b082      	sub	sp, #8
    7010:	9001      	str	r0, [sp, #4]
    7012:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7014:	9b01      	ldr	r3, [sp, #4]
    7016:	9a00      	ldr	r2, [sp, #0]
    7018:	601a      	str	r2, [r3, #0]
}
    701a:	bf00      	nop
    701c:	b002      	add	sp, #8
    701e:	4770      	bx	lr

00007020 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7020:	b084      	sub	sp, #16
    7022:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7024:	2300      	movs	r3, #0
    7026:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7028:	9b01      	ldr	r3, [sp, #4]
    702a:	681b      	ldr	r3, [r3, #0]
    702c:	9303      	str	r3, [sp, #12]
    return returnValue;
    702e:	9b03      	ldr	r3, [sp, #12]
}
    7030:	4618      	mov	r0, r3
    7032:	b004      	add	sp, #16
    7034:	4770      	bx	lr

00007036 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7036:	b082      	sub	sp, #8
    7038:	9001      	str	r0, [sp, #4]
    703a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    703c:	9b01      	ldr	r3, [sp, #4]
    703e:	9a00      	ldr	r2, [sp, #0]
    7040:	605a      	str	r2, [r3, #4]
}
    7042:	bf00      	nop
    7044:	b002      	add	sp, #8
    7046:	4770      	bx	lr

00007048 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7048:	b082      	sub	sp, #8
    704a:	9001      	str	r0, [sp, #4]
    704c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    704e:	9b01      	ldr	r3, [sp, #4]
    7050:	9a00      	ldr	r2, [sp, #0]
    7052:	609a      	str	r2, [r3, #8]
}
    7054:	bf00      	nop
    7056:	b002      	add	sp, #8
    7058:	4770      	bx	lr

0000705a <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    705a:	b082      	sub	sp, #8
    705c:	9001      	str	r0, [sp, #4]
    705e:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    7060:	9b01      	ldr	r3, [sp, #4]
    7062:	9a00      	ldr	r2, [sp, #0]
    7064:	60da      	str	r2, [r3, #12]
}
    7066:	bf00      	nop
    7068:	b002      	add	sp, #8
    706a:	4770      	bx	lr

0000706c <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    706c:	b084      	sub	sp, #16
    706e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7070:	2300      	movs	r3, #0
    7072:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    7074:	9b01      	ldr	r3, [sp, #4]
    7076:	691b      	ldr	r3, [r3, #16]
    7078:	9303      	str	r3, [sp, #12]
    return returnValue;
    707a:	9b03      	ldr	r3, [sp, #12]
}
    707c:	4618      	mov	r0, r3
    707e:	b004      	add	sp, #16
    7080:	4770      	bx	lr

00007082 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    7082:	b084      	sub	sp, #16
    7084:	9001      	str	r0, [sp, #4]
    7086:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    7088:	2300      	movs	r3, #0
    708a:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    708e:	9b01      	ldr	r3, [sp, #4]
    7090:	691a      	ldr	r2, [r3, #16]
    7092:	2101      	movs	r1, #1
    7094:	9b00      	ldr	r3, [sp, #0]
    7096:	fa01 f303 	lsl.w	r3, r1, r3
    709a:	401a      	ands	r2, r3
    709c:	9b00      	ldr	r3, [sp, #0]
    709e:	fa22 f303 	lsr.w	r3, r2, r3
    70a2:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    70a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    70aa:	4618      	mov	r0, r3
    70ac:	b004      	add	sp, #16
    70ae:	4770      	bx	lr

000070b0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    70b0:	b500      	push	{lr}
    70b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70b4:	f7fa fa1c 	bl	14f0 <Sys_GetCoreID>
    70b8:	4603      	mov	r3, r0
    70ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    70bc:	4a10      	ldr	r2, [pc, #64]	; (7100 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    70be:	9b01      	ldr	r3, [sp, #4]
    70c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70c4:	2b00      	cmp	r3, #0
    70c6:	d10d      	bne.n	70e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70c8:	f7f9 fd22 	bl	b10 <Dio_schm_read_msr>
    70cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70ce:	9b00      	ldr	r3, [sp, #0]
    70d0:	f003 0301 	and.w	r3, r3, #1
    70d4:	2b00      	cmp	r3, #0
    70d6:	d100      	bne.n	70da <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    70da:	490a      	ldr	r1, [pc, #40]	; (7104 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    70dc:	9b01      	ldr	r3, [sp, #4]
    70de:	9a00      	ldr	r2, [sp, #0]
    70e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    70e4:	4a06      	ldr	r2, [pc, #24]	; (7100 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    70e6:	9b01      	ldr	r3, [sp, #4]
    70e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ec:	1c5a      	adds	r2, r3, #1
    70ee:	4904      	ldr	r1, [pc, #16]	; (7100 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70f6:	bf00      	nop
    70f8:	b003      	add	sp, #12
    70fa:	f85d fb04 	ldr.w	pc, [sp], #4
    70fe:	bf00      	nop
    7100:	1fff8cfc 	.word	0x1fff8cfc
    7104:	1fff8cf8 	.word	0x1fff8cf8

00007108 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    7108:	b500      	push	{lr}
    710a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    710c:	f7fa f9f0 	bl	14f0 <Sys_GetCoreID>
    7110:	4603      	mov	r3, r0
    7112:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    7114:	4a0d      	ldr	r2, [pc, #52]	; (714c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7116:	9b01      	ldr	r3, [sp, #4]
    7118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    711c:	1e5a      	subs	r2, r3, #1
    711e:	490b      	ldr	r1, [pc, #44]	; (714c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7120:	9b01      	ldr	r3, [sp, #4]
    7122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    7126:	4a0a      	ldr	r2, [pc, #40]	; (7150 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    7128:	9b01      	ldr	r3, [sp, #4]
    712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    712e:	f003 0301 	and.w	r3, r3, #1
    7132:	2b00      	cmp	r3, #0
    7134:	d106      	bne.n	7144 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    7136:	4a05      	ldr	r2, [pc, #20]	; (714c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    7138:	9b01      	ldr	r3, [sp, #4]
    713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713e:	2b00      	cmp	r3, #0
    7140:	d100      	bne.n	7144 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7144:	bf00      	nop
    7146:	b003      	add	sp, #12
    7148:	f85d fb04 	ldr.w	pc, [sp], #4
    714c:	1fff8cfc 	.word	0x1fff8cfc
    7150:	1fff8cf8 	.word	0x1fff8cf8

00007154 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    7154:	b500      	push	{lr}
    7156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7158:	f7fa f9ca 	bl	14f0 <Sys_GetCoreID>
    715c:	4603      	mov	r3, r0
    715e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    7160:	4a10      	ldr	r2, [pc, #64]	; (71a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    7162:	9b01      	ldr	r3, [sp, #4]
    7164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7168:	2b00      	cmp	r3, #0
    716a:	d10d      	bne.n	7188 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    716c:	f7f9 fcd0 	bl	b10 <Dio_schm_read_msr>
    7170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7172:	9b00      	ldr	r3, [sp, #0]
    7174:	f003 0301 	and.w	r3, r3, #1
    7178:	2b00      	cmp	r3, #0
    717a:	d100      	bne.n	717e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    717c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    717e:	490a      	ldr	r1, [pc, #40]	; (71a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    7180:	9b01      	ldr	r3, [sp, #4]
    7182:	9a00      	ldr	r2, [sp, #0]
    7184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    7188:	4a06      	ldr	r2, [pc, #24]	; (71a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    718a:	9b01      	ldr	r3, [sp, #4]
    718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7190:	1c5a      	adds	r2, r3, #1
    7192:	4904      	ldr	r1, [pc, #16]	; (71a4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    7194:	9b01      	ldr	r3, [sp, #4]
    7196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    719a:	bf00      	nop
    719c:	b003      	add	sp, #12
    719e:	f85d fb04 	ldr.w	pc, [sp], #4
    71a2:	bf00      	nop
    71a4:	1fff8d04 	.word	0x1fff8d04
    71a8:	1fff8d00 	.word	0x1fff8d00

000071ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    71ac:	b500      	push	{lr}
    71ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71b0:	f7fa f99e 	bl	14f0 <Sys_GetCoreID>
    71b4:	4603      	mov	r3, r0
    71b6:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    71b8:	4a0d      	ldr	r2, [pc, #52]	; (71f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    71ba:	9b01      	ldr	r3, [sp, #4]
    71bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71c0:	1e5a      	subs	r2, r3, #1
    71c2:	490b      	ldr	r1, [pc, #44]	; (71f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    71c4:	9b01      	ldr	r3, [sp, #4]
    71c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    71ca:	4a0a      	ldr	r2, [pc, #40]	; (71f4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    71cc:	9b01      	ldr	r3, [sp, #4]
    71ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d2:	f003 0301 	and.w	r3, r3, #1
    71d6:	2b00      	cmp	r3, #0
    71d8:	d106      	bne.n	71e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    71da:	4a05      	ldr	r2, [pc, #20]	; (71f0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    71dc:	9b01      	ldr	r3, [sp, #4]
    71de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d100      	bne.n	71e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71e8:	bf00      	nop
    71ea:	b003      	add	sp, #12
    71ec:	f85d fb04 	ldr.w	pc, [sp], #4
    71f0:	1fff8d04 	.word	0x1fff8d04
    71f4:	1fff8d00 	.word	0x1fff8d00

000071f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    71f8:	b500      	push	{lr}
    71fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71fc:	f7fa f978 	bl	14f0 <Sys_GetCoreID>
    7200:	4603      	mov	r3, r0
    7202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    7204:	4a10      	ldr	r2, [pc, #64]	; (7248 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    7206:	9b01      	ldr	r3, [sp, #4]
    7208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    720c:	2b00      	cmp	r3, #0
    720e:	d10d      	bne.n	722c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7210:	f7f9 fc87 	bl	b22 <Mcu_schm_read_msr>
    7214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7216:	9b00      	ldr	r3, [sp, #0]
    7218:	f003 0301 	and.w	r3, r3, #1
    721c:	2b00      	cmp	r3, #0
    721e:	d100      	bne.n	7222 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    7222:	490a      	ldr	r1, [pc, #40]	; (724c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	9a00      	ldr	r2, [sp, #0]
    7228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    722c:	4a06      	ldr	r2, [pc, #24]	; (7248 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7234:	1c5a      	adds	r2, r3, #1
    7236:	4904      	ldr	r1, [pc, #16]	; (7248 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    7238:	9b01      	ldr	r3, [sp, #4]
    723a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    723e:	bf00      	nop
    7240:	b003      	add	sp, #12
    7242:	f85d fb04 	ldr.w	pc, [sp], #4
    7246:	bf00      	nop
    7248:	1fff8d0c 	.word	0x1fff8d0c
    724c:	1fff8d08 	.word	0x1fff8d08

00007250 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    7250:	b500      	push	{lr}
    7252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7254:	f7fa f94c 	bl	14f0 <Sys_GetCoreID>
    7258:	4603      	mov	r3, r0
    725a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    725c:	4a0d      	ldr	r2, [pc, #52]	; (7294 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    725e:	9b01      	ldr	r3, [sp, #4]
    7260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7264:	1e5a      	subs	r2, r3, #1
    7266:	490b      	ldr	r1, [pc, #44]	; (7294 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    7268:	9b01      	ldr	r3, [sp, #4]
    726a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    726e:	4a0a      	ldr	r2, [pc, #40]	; (7298 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    7270:	9b01      	ldr	r3, [sp, #4]
    7272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7276:	f003 0301 	and.w	r3, r3, #1
    727a:	2b00      	cmp	r3, #0
    727c:	d106      	bne.n	728c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    727e:	4a05      	ldr	r2, [pc, #20]	; (7294 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    7280:	9b01      	ldr	r3, [sp, #4]
    7282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7286:	2b00      	cmp	r3, #0
    7288:	d100      	bne.n	728c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    728a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    728c:	bf00      	nop
    728e:	b003      	add	sp, #12
    7290:	f85d fb04 	ldr.w	pc, [sp], #4
    7294:	1fff8d0c 	.word	0x1fff8d0c
    7298:	1fff8d08 	.word	0x1fff8d08

0000729c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    729c:	b500      	push	{lr}
    729e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72a0:	f7fa f926 	bl	14f0 <Sys_GetCoreID>
    72a4:	4603      	mov	r3, r0
    72a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    72a8:	4a10      	ldr	r2, [pc, #64]	; (72ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72b0:	2b00      	cmp	r3, #0
    72b2:	d10d      	bne.n	72d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72b4:	f7f9 fc35 	bl	b22 <Mcu_schm_read_msr>
    72b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72ba:	9b00      	ldr	r3, [sp, #0]
    72bc:	f003 0301 	and.w	r3, r3, #1
    72c0:	2b00      	cmp	r3, #0
    72c2:	d100      	bne.n	72c6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    72c6:	490a      	ldr	r1, [pc, #40]	; (72f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    72c8:	9b01      	ldr	r3, [sp, #4]
    72ca:	9a00      	ldr	r2, [sp, #0]
    72cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    72d0:	4a06      	ldr	r2, [pc, #24]	; (72ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    72d2:	9b01      	ldr	r3, [sp, #4]
    72d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d8:	1c5a      	adds	r2, r3, #1
    72da:	4904      	ldr	r1, [pc, #16]	; (72ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    72dc:	9b01      	ldr	r3, [sp, #4]
    72de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72e2:	bf00      	nop
    72e4:	b003      	add	sp, #12
    72e6:	f85d fb04 	ldr.w	pc, [sp], #4
    72ea:	bf00      	nop
    72ec:	1fff8d14 	.word	0x1fff8d14
    72f0:	1fff8d10 	.word	0x1fff8d10

000072f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    72f4:	b500      	push	{lr}
    72f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72f8:	f7fa f8fa 	bl	14f0 <Sys_GetCoreID>
    72fc:	4603      	mov	r3, r0
    72fe:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    7300:	4a0d      	ldr	r2, [pc, #52]	; (7338 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    7302:	9b01      	ldr	r3, [sp, #4]
    7304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7308:	1e5a      	subs	r2, r3, #1
    730a:	490b      	ldr	r1, [pc, #44]	; (7338 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    730c:	9b01      	ldr	r3, [sp, #4]
    730e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    7312:	4a0a      	ldr	r2, [pc, #40]	; (733c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    7314:	9b01      	ldr	r3, [sp, #4]
    7316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    731a:	f003 0301 	and.w	r3, r3, #1
    731e:	2b00      	cmp	r3, #0
    7320:	d106      	bne.n	7330 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    7322:	4a05      	ldr	r2, [pc, #20]	; (7338 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    7324:	9b01      	ldr	r3, [sp, #4]
    7326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    732a:	2b00      	cmp	r3, #0
    732c:	d100      	bne.n	7330 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    732e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7330:	bf00      	nop
    7332:	b003      	add	sp, #12
    7334:	f85d fb04 	ldr.w	pc, [sp], #4
    7338:	1fff8d14 	.word	0x1fff8d14
    733c:	1fff8d10 	.word	0x1fff8d10

00007340 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    7340:	b500      	push	{lr}
    7342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7344:	f7fa f8d4 	bl	14f0 <Sys_GetCoreID>
    7348:	4603      	mov	r3, r0
    734a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    734c:	4a10      	ldr	r2, [pc, #64]	; (7390 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    734e:	9b01      	ldr	r3, [sp, #4]
    7350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7354:	2b00      	cmp	r3, #0
    7356:	d10d      	bne.n	7374 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7358:	f7f9 fbe3 	bl	b22 <Mcu_schm_read_msr>
    735c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    735e:	9b00      	ldr	r3, [sp, #0]
    7360:	f003 0301 	and.w	r3, r3, #1
    7364:	2b00      	cmp	r3, #0
    7366:	d100      	bne.n	736a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    736a:	490a      	ldr	r1, [pc, #40]	; (7394 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    736c:	9b01      	ldr	r3, [sp, #4]
    736e:	9a00      	ldr	r2, [sp, #0]
    7370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    7374:	4a06      	ldr	r2, [pc, #24]	; (7390 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    7376:	9b01      	ldr	r3, [sp, #4]
    7378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    737c:	1c5a      	adds	r2, r3, #1
    737e:	4904      	ldr	r1, [pc, #16]	; (7390 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    7380:	9b01      	ldr	r3, [sp, #4]
    7382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7386:	bf00      	nop
    7388:	b003      	add	sp, #12
    738a:	f85d fb04 	ldr.w	pc, [sp], #4
    738e:	bf00      	nop
    7390:	1fff8d1c 	.word	0x1fff8d1c
    7394:	1fff8d18 	.word	0x1fff8d18

00007398 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    7398:	b500      	push	{lr}
    739a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    739c:	f7fa f8a8 	bl	14f0 <Sys_GetCoreID>
    73a0:	4603      	mov	r3, r0
    73a2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    73a4:	4a0d      	ldr	r2, [pc, #52]	; (73dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    73a6:	9b01      	ldr	r3, [sp, #4]
    73a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ac:	1e5a      	subs	r2, r3, #1
    73ae:	490b      	ldr	r1, [pc, #44]	; (73dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    73b0:	9b01      	ldr	r3, [sp, #4]
    73b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    73b6:	4a0a      	ldr	r2, [pc, #40]	; (73e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    73b8:	9b01      	ldr	r3, [sp, #4]
    73ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73be:	f003 0301 	and.w	r3, r3, #1
    73c2:	2b00      	cmp	r3, #0
    73c4:	d106      	bne.n	73d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    73c6:	4a05      	ldr	r2, [pc, #20]	; (73dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    73c8:	9b01      	ldr	r3, [sp, #4]
    73ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ce:	2b00      	cmp	r3, #0
    73d0:	d100      	bne.n	73d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73d4:	bf00      	nop
    73d6:	b003      	add	sp, #12
    73d8:	f85d fb04 	ldr.w	pc, [sp], #4
    73dc:	1fff8d1c 	.word	0x1fff8d1c
    73e0:	1fff8d18 	.word	0x1fff8d18

000073e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    73e4:	b500      	push	{lr}
    73e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73e8:	f7fa f882 	bl	14f0 <Sys_GetCoreID>
    73ec:	4603      	mov	r3, r0
    73ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    73f0:	4a10      	ldr	r2, [pc, #64]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    73f2:	9b01      	ldr	r3, [sp, #4]
    73f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f8:	2b00      	cmp	r3, #0
    73fa:	d10d      	bne.n	7418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    73fc:	f7f9 fb9a 	bl	b34 <Port_schm_read_msr>
    7400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7402:	9b00      	ldr	r3, [sp, #0]
    7404:	f003 0301 	and.w	r3, r3, #1
    7408:	2b00      	cmp	r3, #0
    740a:	d100      	bne.n	740e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    740c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    740e:	490a      	ldr	r1, [pc, #40]	; (7438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    7410:	9b01      	ldr	r3, [sp, #4]
    7412:	9a00      	ldr	r2, [sp, #0]
    7414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    7418:	4a06      	ldr	r2, [pc, #24]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    741a:	9b01      	ldr	r3, [sp, #4]
    741c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7420:	1c5a      	adds	r2, r3, #1
    7422:	4904      	ldr	r1, [pc, #16]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    7424:	9b01      	ldr	r3, [sp, #4]
    7426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    742a:	bf00      	nop
    742c:	b003      	add	sp, #12
    742e:	f85d fb04 	ldr.w	pc, [sp], #4
    7432:	bf00      	nop
    7434:	1fff8d24 	.word	0x1fff8d24
    7438:	1fff8d20 	.word	0x1fff8d20

0000743c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    743c:	b500      	push	{lr}
    743e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7440:	f7fa f856 	bl	14f0 <Sys_GetCoreID>
    7444:	4603      	mov	r3, r0
    7446:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    7448:	4a0d      	ldr	r2, [pc, #52]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    744a:	9b01      	ldr	r3, [sp, #4]
    744c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7450:	1e5a      	subs	r2, r3, #1
    7452:	490b      	ldr	r1, [pc, #44]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    7454:	9b01      	ldr	r3, [sp, #4]
    7456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    745a:	4a0a      	ldr	r2, [pc, #40]	; (7484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    745c:	9b01      	ldr	r3, [sp, #4]
    745e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7462:	f003 0301 	and.w	r3, r3, #1
    7466:	2b00      	cmp	r3, #0
    7468:	d106      	bne.n	7478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    746a:	4a05      	ldr	r2, [pc, #20]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    746c:	9b01      	ldr	r3, [sp, #4]
    746e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7472:	2b00      	cmp	r3, #0
    7474:	d100      	bne.n	7478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7478:	bf00      	nop
    747a:	b003      	add	sp, #12
    747c:	f85d fb04 	ldr.w	pc, [sp], #4
    7480:	1fff8d24 	.word	0x1fff8d24
    7484:	1fff8d20 	.word	0x1fff8d20

00007488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    7488:	b500      	push	{lr}
    748a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    748c:	f7fa f830 	bl	14f0 <Sys_GetCoreID>
    7490:	4603      	mov	r3, r0
    7492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    7494:	4a10      	ldr	r2, [pc, #64]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    7496:	9b01      	ldr	r3, [sp, #4]
    7498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    749c:	2b00      	cmp	r3, #0
    749e:	d10d      	bne.n	74bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74a0:	f7f9 fb48 	bl	b34 <Port_schm_read_msr>
    74a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74a6:	9b00      	ldr	r3, [sp, #0]
    74a8:	f003 0301 	and.w	r3, r3, #1
    74ac:	2b00      	cmp	r3, #0
    74ae:	d100      	bne.n	74b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    74b2:	490a      	ldr	r1, [pc, #40]	; (74dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    74b4:	9b01      	ldr	r3, [sp, #4]
    74b6:	9a00      	ldr	r2, [sp, #0]
    74b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    74bc:	4a06      	ldr	r2, [pc, #24]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    74be:	9b01      	ldr	r3, [sp, #4]
    74c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c4:	1c5a      	adds	r2, r3, #1
    74c6:	4904      	ldr	r1, [pc, #16]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    74c8:	9b01      	ldr	r3, [sp, #4]
    74ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74ce:	bf00      	nop
    74d0:	b003      	add	sp, #12
    74d2:	f85d fb04 	ldr.w	pc, [sp], #4
    74d6:	bf00      	nop
    74d8:	1fff8d2c 	.word	0x1fff8d2c
    74dc:	1fff8d28 	.word	0x1fff8d28

000074e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    74e0:	b500      	push	{lr}
    74e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74e4:	f7fa f804 	bl	14f0 <Sys_GetCoreID>
    74e8:	4603      	mov	r3, r0
    74ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    74ec:	4a0d      	ldr	r2, [pc, #52]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    74ee:	9b01      	ldr	r3, [sp, #4]
    74f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f4:	1e5a      	subs	r2, r3, #1
    74f6:	490b      	ldr	r1, [pc, #44]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    74f8:	9b01      	ldr	r3, [sp, #4]
    74fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    74fe:	4a0a      	ldr	r2, [pc, #40]	; (7528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    7500:	9b01      	ldr	r3, [sp, #4]
    7502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7506:	f003 0301 	and.w	r3, r3, #1
    750a:	2b00      	cmp	r3, #0
    750c:	d106      	bne.n	751c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    750e:	4a05      	ldr	r2, [pc, #20]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    7510:	9b01      	ldr	r3, [sp, #4]
    7512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7516:	2b00      	cmp	r3, #0
    7518:	d100      	bne.n	751c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    751a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    751c:	bf00      	nop
    751e:	b003      	add	sp, #12
    7520:	f85d fb04 	ldr.w	pc, [sp], #4
    7524:	1fff8d2c 	.word	0x1fff8d2c
    7528:	1fff8d28 	.word	0x1fff8d28

0000752c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    752c:	b500      	push	{lr}
    752e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7530:	f7f9 ffde 	bl	14f0 <Sys_GetCoreID>
    7534:	4603      	mov	r3, r0
    7536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    7538:	4a10      	ldr	r2, [pc, #64]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    753a:	9b01      	ldr	r3, [sp, #4]
    753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7540:	2b00      	cmp	r3, #0
    7542:	d10d      	bne.n	7560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7544:	f7f9 faf6 	bl	b34 <Port_schm_read_msr>
    7548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    754a:	9b00      	ldr	r3, [sp, #0]
    754c:	f003 0301 	and.w	r3, r3, #1
    7550:	2b00      	cmp	r3, #0
    7552:	d100      	bne.n	7556 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    7556:	490a      	ldr	r1, [pc, #40]	; (7580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    7558:	9b01      	ldr	r3, [sp, #4]
    755a:	9a00      	ldr	r2, [sp, #0]
    755c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    7560:	4a06      	ldr	r2, [pc, #24]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    7562:	9b01      	ldr	r3, [sp, #4]
    7564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7568:	1c5a      	adds	r2, r3, #1
    756a:	4904      	ldr	r1, [pc, #16]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    756c:	9b01      	ldr	r3, [sp, #4]
    756e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7572:	bf00      	nop
    7574:	b003      	add	sp, #12
    7576:	f85d fb04 	ldr.w	pc, [sp], #4
    757a:	bf00      	nop
    757c:	1fff8d34 	.word	0x1fff8d34
    7580:	1fff8d30 	.word	0x1fff8d30

00007584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    7584:	b500      	push	{lr}
    7586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7588:	f7f9 ffb2 	bl	14f0 <Sys_GetCoreID>
    758c:	4603      	mov	r3, r0
    758e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    7590:	4a0d      	ldr	r2, [pc, #52]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    7592:	9b01      	ldr	r3, [sp, #4]
    7594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7598:	1e5a      	subs	r2, r3, #1
    759a:	490b      	ldr	r1, [pc, #44]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    759c:	9b01      	ldr	r3, [sp, #4]
    759e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    75a2:	4a0a      	ldr	r2, [pc, #40]	; (75cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    75a4:	9b01      	ldr	r3, [sp, #4]
    75a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75aa:	f003 0301 	and.w	r3, r3, #1
    75ae:	2b00      	cmp	r3, #0
    75b0:	d106      	bne.n	75c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    75b2:	4a05      	ldr	r2, [pc, #20]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    75b4:	9b01      	ldr	r3, [sp, #4]
    75b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ba:	2b00      	cmp	r3, #0
    75bc:	d100      	bne.n	75c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75c0:	bf00      	nop
    75c2:	b003      	add	sp, #12
    75c4:	f85d fb04 	ldr.w	pc, [sp], #4
    75c8:	1fff8d34 	.word	0x1fff8d34
    75cc:	1fff8d30 	.word	0x1fff8d30

000075d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    75d0:	b500      	push	{lr}
    75d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75d4:	f7f9 ff8c 	bl	14f0 <Sys_GetCoreID>
    75d8:	4603      	mov	r3, r0
    75da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    75dc:	4a10      	ldr	r2, [pc, #64]	; (7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    75de:	9b01      	ldr	r3, [sp, #4]
    75e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e4:	2b00      	cmp	r3, #0
    75e6:	d10d      	bne.n	7604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    75e8:	f7f9 faa4 	bl	b34 <Port_schm_read_msr>
    75ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    75ee:	9b00      	ldr	r3, [sp, #0]
    75f0:	f003 0301 	and.w	r3, r3, #1
    75f4:	2b00      	cmp	r3, #0
    75f6:	d100      	bne.n	75fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    75f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    75fa:	490a      	ldr	r1, [pc, #40]	; (7624 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    75fc:	9b01      	ldr	r3, [sp, #4]
    75fe:	9a00      	ldr	r2, [sp, #0]
    7600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    7604:	4a06      	ldr	r2, [pc, #24]	; (7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    7606:	9b01      	ldr	r3, [sp, #4]
    7608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    760c:	1c5a      	adds	r2, r3, #1
    760e:	4904      	ldr	r1, [pc, #16]	; (7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    7610:	9b01      	ldr	r3, [sp, #4]
    7612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7616:	bf00      	nop
    7618:	b003      	add	sp, #12
    761a:	f85d fb04 	ldr.w	pc, [sp], #4
    761e:	bf00      	nop
    7620:	1fff8d3c 	.word	0x1fff8d3c
    7624:	1fff8d38 	.word	0x1fff8d38

00007628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    7628:	b500      	push	{lr}
    762a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    762c:	f7f9 ff60 	bl	14f0 <Sys_GetCoreID>
    7630:	4603      	mov	r3, r0
    7632:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    7634:	4a0d      	ldr	r2, [pc, #52]	; (766c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    7636:	9b01      	ldr	r3, [sp, #4]
    7638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    763c:	1e5a      	subs	r2, r3, #1
    763e:	490b      	ldr	r1, [pc, #44]	; (766c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    7640:	9b01      	ldr	r3, [sp, #4]
    7642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    7646:	4a0a      	ldr	r2, [pc, #40]	; (7670 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    7648:	9b01      	ldr	r3, [sp, #4]
    764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764e:	f003 0301 	and.w	r3, r3, #1
    7652:	2b00      	cmp	r3, #0
    7654:	d106      	bne.n	7664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    7656:	4a05      	ldr	r2, [pc, #20]	; (766c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    7658:	9b01      	ldr	r3, [sp, #4]
    765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    765e:	2b00      	cmp	r3, #0
    7660:	d100      	bne.n	7664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7664:	bf00      	nop
    7666:	b003      	add	sp, #12
    7668:	f85d fb04 	ldr.w	pc, [sp], #4
    766c:	1fff8d3c 	.word	0x1fff8d3c
    7670:	1fff8d38 	.word	0x1fff8d38

00007674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    7674:	b500      	push	{lr}
    7676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7678:	f7f9 ff3a 	bl	14f0 <Sys_GetCoreID>
    767c:	4603      	mov	r3, r0
    767e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    7680:	4a10      	ldr	r2, [pc, #64]	; (76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    7682:	9b01      	ldr	r3, [sp, #4]
    7684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7688:	2b00      	cmp	r3, #0
    768a:	d10d      	bne.n	76a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    768c:	f7f9 fa52 	bl	b34 <Port_schm_read_msr>
    7690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7692:	9b00      	ldr	r3, [sp, #0]
    7694:	f003 0301 	and.w	r3, r3, #1
    7698:	2b00      	cmp	r3, #0
    769a:	d100      	bne.n	769e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    769c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    769e:	490a      	ldr	r1, [pc, #40]	; (76c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    76a0:	9b01      	ldr	r3, [sp, #4]
    76a2:	9a00      	ldr	r2, [sp, #0]
    76a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    76a8:	4a06      	ldr	r2, [pc, #24]	; (76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    76aa:	9b01      	ldr	r3, [sp, #4]
    76ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b0:	1c5a      	adds	r2, r3, #1
    76b2:	4904      	ldr	r1, [pc, #16]	; (76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    76b4:	9b01      	ldr	r3, [sp, #4]
    76b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76ba:	bf00      	nop
    76bc:	b003      	add	sp, #12
    76be:	f85d fb04 	ldr.w	pc, [sp], #4
    76c2:	bf00      	nop
    76c4:	1fff8d44 	.word	0x1fff8d44
    76c8:	1fff8d40 	.word	0x1fff8d40

000076cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    76cc:	b500      	push	{lr}
    76ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76d0:	f7f9 ff0e 	bl	14f0 <Sys_GetCoreID>
    76d4:	4603      	mov	r3, r0
    76d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    76d8:	4a0d      	ldr	r2, [pc, #52]	; (7710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    76da:	9b01      	ldr	r3, [sp, #4]
    76dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e0:	1e5a      	subs	r2, r3, #1
    76e2:	490b      	ldr	r1, [pc, #44]	; (7710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    76e4:	9b01      	ldr	r3, [sp, #4]
    76e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    76ea:	4a0a      	ldr	r2, [pc, #40]	; (7714 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    76ec:	9b01      	ldr	r3, [sp, #4]
    76ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f2:	f003 0301 	and.w	r3, r3, #1
    76f6:	2b00      	cmp	r3, #0
    76f8:	d106      	bne.n	7708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    76fa:	4a05      	ldr	r2, [pc, #20]	; (7710 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    76fc:	9b01      	ldr	r3, [sp, #4]
    76fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7702:	2b00      	cmp	r3, #0
    7704:	d100      	bne.n	7708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7708:	bf00      	nop
    770a:	b003      	add	sp, #12
    770c:	f85d fb04 	ldr.w	pc, [sp], #4
    7710:	1fff8d44 	.word	0x1fff8d44
    7714:	1fff8d40 	.word	0x1fff8d40

00007718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    7718:	b500      	push	{lr}
    771a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    771c:	f7f9 fee8 	bl	14f0 <Sys_GetCoreID>
    7720:	4603      	mov	r3, r0
    7722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    7724:	4a10      	ldr	r2, [pc, #64]	; (7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    7726:	9b01      	ldr	r3, [sp, #4]
    7728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    772c:	2b00      	cmp	r3, #0
    772e:	d10d      	bne.n	774c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7730:	f7f9 fa00 	bl	b34 <Port_schm_read_msr>
    7734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7736:	9b00      	ldr	r3, [sp, #0]
    7738:	f003 0301 	and.w	r3, r3, #1
    773c:	2b00      	cmp	r3, #0
    773e:	d100      	bne.n	7742 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    7742:	490a      	ldr	r1, [pc, #40]	; (776c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    7744:	9b01      	ldr	r3, [sp, #4]
    7746:	9a00      	ldr	r2, [sp, #0]
    7748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    774c:	4a06      	ldr	r2, [pc, #24]	; (7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    774e:	9b01      	ldr	r3, [sp, #4]
    7750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7754:	1c5a      	adds	r2, r3, #1
    7756:	4904      	ldr	r1, [pc, #16]	; (7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    7758:	9b01      	ldr	r3, [sp, #4]
    775a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    775e:	bf00      	nop
    7760:	b003      	add	sp, #12
    7762:	f85d fb04 	ldr.w	pc, [sp], #4
    7766:	bf00      	nop
    7768:	1fff8d4c 	.word	0x1fff8d4c
    776c:	1fff8d48 	.word	0x1fff8d48

00007770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    7770:	b500      	push	{lr}
    7772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7774:	f7f9 febc 	bl	14f0 <Sys_GetCoreID>
    7778:	4603      	mov	r3, r0
    777a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    777c:	4a0d      	ldr	r2, [pc, #52]	; (77b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    777e:	9b01      	ldr	r3, [sp, #4]
    7780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7784:	1e5a      	subs	r2, r3, #1
    7786:	490b      	ldr	r1, [pc, #44]	; (77b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    7788:	9b01      	ldr	r3, [sp, #4]
    778a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    778e:	4a0a      	ldr	r2, [pc, #40]	; (77b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    7790:	9b01      	ldr	r3, [sp, #4]
    7792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7796:	f003 0301 	and.w	r3, r3, #1
    779a:	2b00      	cmp	r3, #0
    779c:	d106      	bne.n	77ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    779e:	4a05      	ldr	r2, [pc, #20]	; (77b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a6:	2b00      	cmp	r3, #0
    77a8:	d100      	bne.n	77ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77ac:	bf00      	nop
    77ae:	b003      	add	sp, #12
    77b0:	f85d fb04 	ldr.w	pc, [sp], #4
    77b4:	1fff8d4c 	.word	0x1fff8d4c
    77b8:	1fff8d48 	.word	0x1fff8d48

000077bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    77bc:	b500      	push	{lr}
    77be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77c0:	f7f9 fe96 	bl	14f0 <Sys_GetCoreID>
    77c4:	4603      	mov	r3, r0
    77c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    77c8:	4a10      	ldr	r2, [pc, #64]	; (780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    77ca:	9b01      	ldr	r3, [sp, #4]
    77cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77d0:	2b00      	cmp	r3, #0
    77d2:	d10d      	bne.n	77f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77d4:	f7f9 f9ae 	bl	b34 <Port_schm_read_msr>
    77d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77da:	9b00      	ldr	r3, [sp, #0]
    77dc:	f003 0301 	and.w	r3, r3, #1
    77e0:	2b00      	cmp	r3, #0
    77e2:	d100      	bne.n	77e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    77e6:	490a      	ldr	r1, [pc, #40]	; (7810 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    77e8:	9b01      	ldr	r3, [sp, #4]
    77ea:	9a00      	ldr	r2, [sp, #0]
    77ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    77f0:	4a06      	ldr	r2, [pc, #24]	; (780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    77f2:	9b01      	ldr	r3, [sp, #4]
    77f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f8:	1c5a      	adds	r2, r3, #1
    77fa:	4904      	ldr	r1, [pc, #16]	; (780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    77fc:	9b01      	ldr	r3, [sp, #4]
    77fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7802:	bf00      	nop
    7804:	b003      	add	sp, #12
    7806:	f85d fb04 	ldr.w	pc, [sp], #4
    780a:	bf00      	nop
    780c:	1fff8d54 	.word	0x1fff8d54
    7810:	1fff8d50 	.word	0x1fff8d50

00007814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    7814:	b500      	push	{lr}
    7816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7818:	f7f9 fe6a 	bl	14f0 <Sys_GetCoreID>
    781c:	4603      	mov	r3, r0
    781e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    7820:	4a0d      	ldr	r2, [pc, #52]	; (7858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7828:	1e5a      	subs	r2, r3, #1
    782a:	490b      	ldr	r1, [pc, #44]	; (7858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    7832:	4a0a      	ldr	r2, [pc, #40]	; (785c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    7834:	9b01      	ldr	r3, [sp, #4]
    7836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783a:	f003 0301 	and.w	r3, r3, #1
    783e:	2b00      	cmp	r3, #0
    7840:	d106      	bne.n	7850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    7842:	4a05      	ldr	r2, [pc, #20]	; (7858 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    7844:	9b01      	ldr	r3, [sp, #4]
    7846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    784a:	2b00      	cmp	r3, #0
    784c:	d100      	bne.n	7850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    784e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7850:	bf00      	nop
    7852:	b003      	add	sp, #12
    7854:	f85d fb04 	ldr.w	pc, [sp], #4
    7858:	1fff8d54 	.word	0x1fff8d54
    785c:	1fff8d50 	.word	0x1fff8d50

00007860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    7860:	b500      	push	{lr}
    7862:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7864:	f7f9 fe44 	bl	14f0 <Sys_GetCoreID>
    7868:	4603      	mov	r3, r0
    786a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    786c:	4a10      	ldr	r2, [pc, #64]	; (78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    786e:	9b01      	ldr	r3, [sp, #4]
    7870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7874:	2b00      	cmp	r3, #0
    7876:	d10d      	bne.n	7894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7878:	f7f9 f95c 	bl	b34 <Port_schm_read_msr>
    787c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    787e:	9b00      	ldr	r3, [sp, #0]
    7880:	f003 0301 	and.w	r3, r3, #1
    7884:	2b00      	cmp	r3, #0
    7886:	d100      	bne.n	788a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7888:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    788a:	490a      	ldr	r1, [pc, #40]	; (78b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    788c:	9b01      	ldr	r3, [sp, #4]
    788e:	9a00      	ldr	r2, [sp, #0]
    7890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    7894:	4a06      	ldr	r2, [pc, #24]	; (78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    7896:	9b01      	ldr	r3, [sp, #4]
    7898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    789c:	1c5a      	adds	r2, r3, #1
    789e:	4904      	ldr	r1, [pc, #16]	; (78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    78a0:	9b01      	ldr	r3, [sp, #4]
    78a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78a6:	bf00      	nop
    78a8:	b003      	add	sp, #12
    78aa:	f85d fb04 	ldr.w	pc, [sp], #4
    78ae:	bf00      	nop
    78b0:	1fff8d5c 	.word	0x1fff8d5c
    78b4:	1fff8d58 	.word	0x1fff8d58

000078b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    78b8:	b500      	push	{lr}
    78ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78bc:	f7f9 fe18 	bl	14f0 <Sys_GetCoreID>
    78c0:	4603      	mov	r3, r0
    78c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    78c4:	4a0d      	ldr	r2, [pc, #52]	; (78fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    78c6:	9b01      	ldr	r3, [sp, #4]
    78c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78cc:	1e5a      	subs	r2, r3, #1
    78ce:	490b      	ldr	r1, [pc, #44]	; (78fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    78d0:	9b01      	ldr	r3, [sp, #4]
    78d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    78d6:	4a0a      	ldr	r2, [pc, #40]	; (7900 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    78d8:	9b01      	ldr	r3, [sp, #4]
    78da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78de:	f003 0301 	and.w	r3, r3, #1
    78e2:	2b00      	cmp	r3, #0
    78e4:	d106      	bne.n	78f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    78e6:	4a05      	ldr	r2, [pc, #20]	; (78fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    78e8:	9b01      	ldr	r3, [sp, #4]
    78ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d100      	bne.n	78f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    78f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    78f4:	bf00      	nop
    78f6:	b003      	add	sp, #12
    78f8:	f85d fb04 	ldr.w	pc, [sp], #4
    78fc:	1fff8d5c 	.word	0x1fff8d5c
    7900:	1fff8d58 	.word	0x1fff8d58

00007904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    7904:	b500      	push	{lr}
    7906:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7908:	f7f9 fdf2 	bl	14f0 <Sys_GetCoreID>
    790c:	4603      	mov	r3, r0
    790e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    7910:	4a10      	ldr	r2, [pc, #64]	; (7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7912:	9b01      	ldr	r3, [sp, #4]
    7914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7918:	2b00      	cmp	r3, #0
    791a:	d10d      	bne.n	7938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    791c:	f7f9 f90a 	bl	b34 <Port_schm_read_msr>
    7920:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7922:	9b00      	ldr	r3, [sp, #0]
    7924:	f003 0301 	and.w	r3, r3, #1
    7928:	2b00      	cmp	r3, #0
    792a:	d100      	bne.n	792e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    792c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    792e:	490a      	ldr	r1, [pc, #40]	; (7958 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    7930:	9b01      	ldr	r3, [sp, #4]
    7932:	9a00      	ldr	r2, [sp, #0]
    7934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    7938:	4a06      	ldr	r2, [pc, #24]	; (7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    793a:	9b01      	ldr	r3, [sp, #4]
    793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7940:	1c5a      	adds	r2, r3, #1
    7942:	4904      	ldr	r1, [pc, #16]	; (7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7944:	9b01      	ldr	r3, [sp, #4]
    7946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    794a:	bf00      	nop
    794c:	b003      	add	sp, #12
    794e:	f85d fb04 	ldr.w	pc, [sp], #4
    7952:	bf00      	nop
    7954:	1fff8d64 	.word	0x1fff8d64
    7958:	1fff8d60 	.word	0x1fff8d60

0000795c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    795c:	b500      	push	{lr}
    795e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7960:	f7f9 fdc6 	bl	14f0 <Sys_GetCoreID>
    7964:	4603      	mov	r3, r0
    7966:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    7968:	4a0d      	ldr	r2, [pc, #52]	; (79a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    796a:	9b01      	ldr	r3, [sp, #4]
    796c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7970:	1e5a      	subs	r2, r3, #1
    7972:	490b      	ldr	r1, [pc, #44]	; (79a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    7974:	9b01      	ldr	r3, [sp, #4]
    7976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    797a:	4a0a      	ldr	r2, [pc, #40]	; (79a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    797c:	9b01      	ldr	r3, [sp, #4]
    797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7982:	f003 0301 	and.w	r3, r3, #1
    7986:	2b00      	cmp	r3, #0
    7988:	d106      	bne.n	7998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    798a:	4a05      	ldr	r2, [pc, #20]	; (79a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    798c:	9b01      	ldr	r3, [sp, #4]
    798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7992:	2b00      	cmp	r3, #0
    7994:	d100      	bne.n	7998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7996:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7998:	bf00      	nop
    799a:	b003      	add	sp, #12
    799c:	f85d fb04 	ldr.w	pc, [sp], #4
    79a0:	1fff8d64 	.word	0x1fff8d64
    79a4:	1fff8d60 	.word	0x1fff8d60

000079a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    79a8:	b500      	push	{lr}
    79aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79ac:	f7f9 fda0 	bl	14f0 <Sys_GetCoreID>
    79b0:	4603      	mov	r3, r0
    79b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    79b4:	4a10      	ldr	r2, [pc, #64]	; (79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    79b6:	9b01      	ldr	r3, [sp, #4]
    79b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79bc:	2b00      	cmp	r3, #0
    79be:	d10d      	bne.n	79dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79c0:	f7f9 f8b8 	bl	b34 <Port_schm_read_msr>
    79c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79c6:	9b00      	ldr	r3, [sp, #0]
    79c8:	f003 0301 	and.w	r3, r3, #1
    79cc:	2b00      	cmp	r3, #0
    79ce:	d100      	bne.n	79d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    79d2:	490a      	ldr	r1, [pc, #40]	; (79fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    79d4:	9b01      	ldr	r3, [sp, #4]
    79d6:	9a00      	ldr	r2, [sp, #0]
    79d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    79dc:	4a06      	ldr	r2, [pc, #24]	; (79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    79de:	9b01      	ldr	r3, [sp, #4]
    79e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79e4:	1c5a      	adds	r2, r3, #1
    79e6:	4904      	ldr	r1, [pc, #16]	; (79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    79e8:	9b01      	ldr	r3, [sp, #4]
    79ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79ee:	bf00      	nop
    79f0:	b003      	add	sp, #12
    79f2:	f85d fb04 	ldr.w	pc, [sp], #4
    79f6:	bf00      	nop
    79f8:	1fff8d6c 	.word	0x1fff8d6c
    79fc:	1fff8d68 	.word	0x1fff8d68

00007a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    7a00:	b500      	push	{lr}
    7a02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a04:	f7f9 fd74 	bl	14f0 <Sys_GetCoreID>
    7a08:	4603      	mov	r3, r0
    7a0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    7a0c:	4a0d      	ldr	r2, [pc, #52]	; (7a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7a0e:	9b01      	ldr	r3, [sp, #4]
    7a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a14:	1e5a      	subs	r2, r3, #1
    7a16:	490b      	ldr	r1, [pc, #44]	; (7a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7a18:	9b01      	ldr	r3, [sp, #4]
    7a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    7a1e:	4a0a      	ldr	r2, [pc, #40]	; (7a48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    7a20:	9b01      	ldr	r3, [sp, #4]
    7a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a26:	f003 0301 	and.w	r3, r3, #1
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	d106      	bne.n	7a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    7a2e:	4a05      	ldr	r2, [pc, #20]	; (7a44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7a30:	9b01      	ldr	r3, [sp, #4]
    7a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a36:	2b00      	cmp	r3, #0
    7a38:	d100      	bne.n	7a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a3c:	bf00      	nop
    7a3e:	b003      	add	sp, #12
    7a40:	f85d fb04 	ldr.w	pc, [sp], #4
    7a44:	1fff8d6c 	.word	0x1fff8d6c
    7a48:	1fff8d68 	.word	0x1fff8d68

00007a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7a4c:	b500      	push	{lr}
    7a4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a50:	f7f9 fd4e 	bl	14f0 <Sys_GetCoreID>
    7a54:	4603      	mov	r3, r0
    7a56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    7a58:	4a10      	ldr	r2, [pc, #64]	; (7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7a5a:	9b01      	ldr	r3, [sp, #4]
    7a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a60:	2b00      	cmp	r3, #0
    7a62:	d10d      	bne.n	7a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a64:	f7f9 f866 	bl	b34 <Port_schm_read_msr>
    7a68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a6a:	9b00      	ldr	r3, [sp, #0]
    7a6c:	f003 0301 	and.w	r3, r3, #1
    7a70:	2b00      	cmp	r3, #0
    7a72:	d100      	bne.n	7a76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    7a76:	490a      	ldr	r1, [pc, #40]	; (7aa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    7a78:	9b01      	ldr	r3, [sp, #4]
    7a7a:	9a00      	ldr	r2, [sp, #0]
    7a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    7a80:	4a06      	ldr	r2, [pc, #24]	; (7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7a82:	9b01      	ldr	r3, [sp, #4]
    7a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a88:	1c5a      	adds	r2, r3, #1
    7a8a:	4904      	ldr	r1, [pc, #16]	; (7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7a8c:	9b01      	ldr	r3, [sp, #4]
    7a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a92:	bf00      	nop
    7a94:	b003      	add	sp, #12
    7a96:	f85d fb04 	ldr.w	pc, [sp], #4
    7a9a:	bf00      	nop
    7a9c:	1fff8d74 	.word	0x1fff8d74
    7aa0:	1fff8d70 	.word	0x1fff8d70

00007aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7aa4:	b500      	push	{lr}
    7aa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7aa8:	f7f9 fd22 	bl	14f0 <Sys_GetCoreID>
    7aac:	4603      	mov	r3, r0
    7aae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    7ab0:	4a0d      	ldr	r2, [pc, #52]	; (7ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7ab2:	9b01      	ldr	r3, [sp, #4]
    7ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ab8:	1e5a      	subs	r2, r3, #1
    7aba:	490b      	ldr	r1, [pc, #44]	; (7ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7abc:	9b01      	ldr	r3, [sp, #4]
    7abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    7ac2:	4a0a      	ldr	r2, [pc, #40]	; (7aec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    7ac4:	9b01      	ldr	r3, [sp, #4]
    7ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aca:	f003 0301 	and.w	r3, r3, #1
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d106      	bne.n	7ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    7ad2:	4a05      	ldr	r2, [pc, #20]	; (7ae8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7ad4:	9b01      	ldr	r3, [sp, #4]
    7ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ada:	2b00      	cmp	r3, #0
    7adc:	d100      	bne.n	7ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ade:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ae0:	bf00      	nop
    7ae2:	b003      	add	sp, #12
    7ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae8:	1fff8d74 	.word	0x1fff8d74
    7aec:	1fff8d70 	.word	0x1fff8d70

00007af0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7af0:	b500      	push	{lr}
    7af2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7af4:	f7f9 fcfc 	bl	14f0 <Sys_GetCoreID>
    7af8:	4603      	mov	r3, r0
    7afa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    7afc:	4a10      	ldr	r2, [pc, #64]	; (7b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7afe:	9b01      	ldr	r3, [sp, #4]
    7b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d10d      	bne.n	7b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b08:	f7f9 f814 	bl	b34 <Port_schm_read_msr>
    7b0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b0e:	9b00      	ldr	r3, [sp, #0]
    7b10:	f003 0301 	and.w	r3, r3, #1
    7b14:	2b00      	cmp	r3, #0
    7b16:	d100      	bne.n	7b1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    7b1a:	490a      	ldr	r1, [pc, #40]	; (7b44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    7b1c:	9b01      	ldr	r3, [sp, #4]
    7b1e:	9a00      	ldr	r2, [sp, #0]
    7b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7b24:	4a06      	ldr	r2, [pc, #24]	; (7b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7b26:	9b01      	ldr	r3, [sp, #4]
    7b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b2c:	1c5a      	adds	r2, r3, #1
    7b2e:	4904      	ldr	r1, [pc, #16]	; (7b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7b30:	9b01      	ldr	r3, [sp, #4]
    7b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b36:	bf00      	nop
    7b38:	b003      	add	sp, #12
    7b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b3e:	bf00      	nop
    7b40:	1fff8d7c 	.word	0x1fff8d7c
    7b44:	1fff8d78 	.word	0x1fff8d78

00007b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7b48:	b500      	push	{lr}
    7b4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b4c:	f7f9 fcd0 	bl	14f0 <Sys_GetCoreID>
    7b50:	4603      	mov	r3, r0
    7b52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    7b54:	4a0d      	ldr	r2, [pc, #52]	; (7b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7b56:	9b01      	ldr	r3, [sp, #4]
    7b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b5c:	1e5a      	subs	r2, r3, #1
    7b5e:	490b      	ldr	r1, [pc, #44]	; (7b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7b60:	9b01      	ldr	r3, [sp, #4]
    7b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7b66:	4a0a      	ldr	r2, [pc, #40]	; (7b90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    7b68:	9b01      	ldr	r3, [sp, #4]
    7b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b6e:	f003 0301 	and.w	r3, r3, #1
    7b72:	2b00      	cmp	r3, #0
    7b74:	d106      	bne.n	7b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    7b76:	4a05      	ldr	r2, [pc, #20]	; (7b8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7b78:	9b01      	ldr	r3, [sp, #4]
    7b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d100      	bne.n	7b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b84:	bf00      	nop
    7b86:	b003      	add	sp, #12
    7b88:	f85d fb04 	ldr.w	pc, [sp], #4
    7b8c:	1fff8d7c 	.word	0x1fff8d7c
    7b90:	1fff8d78 	.word	0x1fff8d78

00007b94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7b94:	b500      	push	{lr}
    7b96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b98:	f7f9 fcaa 	bl	14f0 <Sys_GetCoreID>
    7b9c:	4603      	mov	r3, r0
    7b9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    7ba0:	4a10      	ldr	r2, [pc, #64]	; (7be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7ba2:	9b01      	ldr	r3, [sp, #4]
    7ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d10d      	bne.n	7bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7bac:	f7f8 ffc2 	bl	b34 <Port_schm_read_msr>
    7bb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7bb2:	9b00      	ldr	r3, [sp, #0]
    7bb4:	f003 0301 	and.w	r3, r3, #1
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d100      	bne.n	7bbe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7bbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    7bbe:	490a      	ldr	r1, [pc, #40]	; (7be8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    7bc0:	9b01      	ldr	r3, [sp, #4]
    7bc2:	9a00      	ldr	r2, [sp, #0]
    7bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    7bc8:	4a06      	ldr	r2, [pc, #24]	; (7be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7bca:	9b01      	ldr	r3, [sp, #4]
    7bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd0:	1c5a      	adds	r2, r3, #1
    7bd2:	4904      	ldr	r1, [pc, #16]	; (7be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7bd4:	9b01      	ldr	r3, [sp, #4]
    7bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bda:	bf00      	nop
    7bdc:	b003      	add	sp, #12
    7bde:	f85d fb04 	ldr.w	pc, [sp], #4
    7be2:	bf00      	nop
    7be4:	1fff8d84 	.word	0x1fff8d84
    7be8:	1fff8d80 	.word	0x1fff8d80

00007bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7bec:	b500      	push	{lr}
    7bee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7bf0:	f7f9 fc7e 	bl	14f0 <Sys_GetCoreID>
    7bf4:	4603      	mov	r3, r0
    7bf6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    7bf8:	4a0d      	ldr	r2, [pc, #52]	; (7c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7bfa:	9b01      	ldr	r3, [sp, #4]
    7bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c00:	1e5a      	subs	r2, r3, #1
    7c02:	490b      	ldr	r1, [pc, #44]	; (7c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7c04:	9b01      	ldr	r3, [sp, #4]
    7c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    7c0a:	4a0a      	ldr	r2, [pc, #40]	; (7c34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    7c0c:	9b01      	ldr	r3, [sp, #4]
    7c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c12:	f003 0301 	and.w	r3, r3, #1
    7c16:	2b00      	cmp	r3, #0
    7c18:	d106      	bne.n	7c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    7c1a:	4a05      	ldr	r2, [pc, #20]	; (7c30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7c1c:	9b01      	ldr	r3, [sp, #4]
    7c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c22:	2b00      	cmp	r3, #0
    7c24:	d100      	bne.n	7c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c28:	bf00      	nop
    7c2a:	b003      	add	sp, #12
    7c2c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c30:	1fff8d84 	.word	0x1fff8d84
    7c34:	1fff8d80 	.word	0x1fff8d80

00007c38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7c38:	b500      	push	{lr}
    7c3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c3c:	f7f9 fc58 	bl	14f0 <Sys_GetCoreID>
    7c40:	4603      	mov	r3, r0
    7c42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    7c44:	4a10      	ldr	r2, [pc, #64]	; (7c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	d10d      	bne.n	7c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c50:	f7f8 ff70 	bl	b34 <Port_schm_read_msr>
    7c54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c56:	9b00      	ldr	r3, [sp, #0]
    7c58:	f003 0301 	and.w	r3, r3, #1
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d100      	bne.n	7c62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    7c62:	490a      	ldr	r1, [pc, #40]	; (7c8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7c64:	9b01      	ldr	r3, [sp, #4]
    7c66:	9a00      	ldr	r2, [sp, #0]
    7c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    7c6c:	4a06      	ldr	r2, [pc, #24]	; (7c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7c6e:	9b01      	ldr	r3, [sp, #4]
    7c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c74:	1c5a      	adds	r2, r3, #1
    7c76:	4904      	ldr	r1, [pc, #16]	; (7c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7c78:	9b01      	ldr	r3, [sp, #4]
    7c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c7e:	bf00      	nop
    7c80:	b003      	add	sp, #12
    7c82:	f85d fb04 	ldr.w	pc, [sp], #4
    7c86:	bf00      	nop
    7c88:	1fff8d8c 	.word	0x1fff8d8c
    7c8c:	1fff8d88 	.word	0x1fff8d88

00007c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7c90:	b500      	push	{lr}
    7c92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c94:	f7f9 fc2c 	bl	14f0 <Sys_GetCoreID>
    7c98:	4603      	mov	r3, r0
    7c9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    7c9c:	4a0d      	ldr	r2, [pc, #52]	; (7cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7c9e:	9b01      	ldr	r3, [sp, #4]
    7ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ca4:	1e5a      	subs	r2, r3, #1
    7ca6:	490b      	ldr	r1, [pc, #44]	; (7cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7ca8:	9b01      	ldr	r3, [sp, #4]
    7caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    7cae:	4a0a      	ldr	r2, [pc, #40]	; (7cd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    7cb0:	9b01      	ldr	r3, [sp, #4]
    7cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cb6:	f003 0301 	and.w	r3, r3, #1
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d106      	bne.n	7ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    7cbe:	4a05      	ldr	r2, [pc, #20]	; (7cd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7cc0:	9b01      	ldr	r3, [sp, #4]
    7cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d100      	bne.n	7ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7cca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ccc:	bf00      	nop
    7cce:	b003      	add	sp, #12
    7cd0:	f85d fb04 	ldr.w	pc, [sp], #4
    7cd4:	1fff8d8c 	.word	0x1fff8d8c
    7cd8:	1fff8d88 	.word	0x1fff8d88

00007cdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7cdc:	b500      	push	{lr}
    7cde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ce0:	f7f9 fc06 	bl	14f0 <Sys_GetCoreID>
    7ce4:	4603      	mov	r3, r0
    7ce6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    7ce8:	4a10      	ldr	r2, [pc, #64]	; (7d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7cea:	9b01      	ldr	r3, [sp, #4]
    7cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cf0:	2b00      	cmp	r3, #0
    7cf2:	d10d      	bne.n	7d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7cf4:	f7f8 ff1e 	bl	b34 <Port_schm_read_msr>
    7cf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7cfa:	9b00      	ldr	r3, [sp, #0]
    7cfc:	f003 0301 	and.w	r3, r3, #1
    7d00:	2b00      	cmp	r3, #0
    7d02:	d100      	bne.n	7d06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7d04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    7d06:	490a      	ldr	r1, [pc, #40]	; (7d30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    7d08:	9b01      	ldr	r3, [sp, #4]
    7d0a:	9a00      	ldr	r2, [sp, #0]
    7d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    7d10:	4a06      	ldr	r2, [pc, #24]	; (7d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7d12:	9b01      	ldr	r3, [sp, #4]
    7d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d18:	1c5a      	adds	r2, r3, #1
    7d1a:	4904      	ldr	r1, [pc, #16]	; (7d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7d1c:	9b01      	ldr	r3, [sp, #4]
    7d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d22:	bf00      	nop
    7d24:	b003      	add	sp, #12
    7d26:	f85d fb04 	ldr.w	pc, [sp], #4
    7d2a:	bf00      	nop
    7d2c:	1fff8d94 	.word	0x1fff8d94
    7d30:	1fff8d90 	.word	0x1fff8d90

00007d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7d34:	b500      	push	{lr}
    7d36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d38:	f7f9 fbda 	bl	14f0 <Sys_GetCoreID>
    7d3c:	4603      	mov	r3, r0
    7d3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    7d40:	4a0d      	ldr	r2, [pc, #52]	; (7d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7d42:	9b01      	ldr	r3, [sp, #4]
    7d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d48:	1e5a      	subs	r2, r3, #1
    7d4a:	490b      	ldr	r1, [pc, #44]	; (7d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7d4c:	9b01      	ldr	r3, [sp, #4]
    7d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    7d52:	4a0a      	ldr	r2, [pc, #40]	; (7d7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7d54:	9b01      	ldr	r3, [sp, #4]
    7d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d5a:	f003 0301 	and.w	r3, r3, #1
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d106      	bne.n	7d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    7d62:	4a05      	ldr	r2, [pc, #20]	; (7d78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d100      	bne.n	7d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7d6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7d70:	bf00      	nop
    7d72:	b003      	add	sp, #12
    7d74:	f85d fb04 	ldr.w	pc, [sp], #4
    7d78:	1fff8d94 	.word	0x1fff8d94
    7d7c:	1fff8d90 	.word	0x1fff8d90

00007d80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7d80:	b500      	push	{lr}
    7d82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d84:	f7f9 fbb4 	bl	14f0 <Sys_GetCoreID>
    7d88:	4603      	mov	r3, r0
    7d8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    7d8c:	4a10      	ldr	r2, [pc, #64]	; (7dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7d8e:	9b01      	ldr	r3, [sp, #4]
    7d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d94:	2b00      	cmp	r3, #0
    7d96:	d10d      	bne.n	7db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7d98:	f7f8 fecc 	bl	b34 <Port_schm_read_msr>
    7d9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7d9e:	9b00      	ldr	r3, [sp, #0]
    7da0:	f003 0301 	and.w	r3, r3, #1
    7da4:	2b00      	cmp	r3, #0
    7da6:	d100      	bne.n	7daa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7da8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    7daa:	490a      	ldr	r1, [pc, #40]	; (7dd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    7dac:	9b01      	ldr	r3, [sp, #4]
    7dae:	9a00      	ldr	r2, [sp, #0]
    7db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7db4:	4a06      	ldr	r2, [pc, #24]	; (7dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7db6:	9b01      	ldr	r3, [sp, #4]
    7db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dbc:	1c5a      	adds	r2, r3, #1
    7dbe:	4904      	ldr	r1, [pc, #16]	; (7dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7dc0:	9b01      	ldr	r3, [sp, #4]
    7dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dc6:	bf00      	nop
    7dc8:	b003      	add	sp, #12
    7dca:	f85d fb04 	ldr.w	pc, [sp], #4
    7dce:	bf00      	nop
    7dd0:	1fff8d9c 	.word	0x1fff8d9c
    7dd4:	1fff8d98 	.word	0x1fff8d98

00007dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7dd8:	b500      	push	{lr}
    7dda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ddc:	f7f9 fb88 	bl	14f0 <Sys_GetCoreID>
    7de0:	4603      	mov	r3, r0
    7de2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7de4:	4a0d      	ldr	r2, [pc, #52]	; (7e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7de6:	9b01      	ldr	r3, [sp, #4]
    7de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dec:	1e5a      	subs	r2, r3, #1
    7dee:	490b      	ldr	r1, [pc, #44]	; (7e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7df0:	9b01      	ldr	r3, [sp, #4]
    7df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7df6:	4a0a      	ldr	r2, [pc, #40]	; (7e20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7df8:	9b01      	ldr	r3, [sp, #4]
    7dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dfe:	f003 0301 	and.w	r3, r3, #1
    7e02:	2b00      	cmp	r3, #0
    7e04:	d106      	bne.n	7e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    7e06:	4a05      	ldr	r2, [pc, #20]	; (7e1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7e08:	9b01      	ldr	r3, [sp, #4]
    7e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e0e:	2b00      	cmp	r3, #0
    7e10:	d100      	bne.n	7e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7e12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7e14:	bf00      	nop
    7e16:	b003      	add	sp, #12
    7e18:	f85d fb04 	ldr.w	pc, [sp], #4
    7e1c:	1fff8d9c 	.word	0x1fff8d9c
    7e20:	1fff8d98 	.word	0x1fff8d98

00007e24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7e24:	b500      	push	{lr}
    7e26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e28:	f7f9 fb62 	bl	14f0 <Sys_GetCoreID>
    7e2c:	4603      	mov	r3, r0
    7e2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    7e30:	4a10      	ldr	r2, [pc, #64]	; (7e74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7e32:	9b01      	ldr	r3, [sp, #4]
    7e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e38:	2b00      	cmp	r3, #0
    7e3a:	d10d      	bne.n	7e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7e3c:	f7f8 fe7a 	bl	b34 <Port_schm_read_msr>
    7e40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7e42:	9b00      	ldr	r3, [sp, #0]
    7e44:	f003 0301 	and.w	r3, r3, #1
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d100      	bne.n	7e4e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7e4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    7e4e:	490a      	ldr	r1, [pc, #40]	; (7e78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    7e50:	9b01      	ldr	r3, [sp, #4]
    7e52:	9a00      	ldr	r2, [sp, #0]
    7e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    7e58:	4a06      	ldr	r2, [pc, #24]	; (7e74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7e5a:	9b01      	ldr	r3, [sp, #4]
    7e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e60:	1c5a      	adds	r2, r3, #1
    7e62:	4904      	ldr	r1, [pc, #16]	; (7e74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7e64:	9b01      	ldr	r3, [sp, #4]
    7e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e6a:	bf00      	nop
    7e6c:	b003      	add	sp, #12
    7e6e:	f85d fb04 	ldr.w	pc, [sp], #4
    7e72:	bf00      	nop
    7e74:	1fff8da4 	.word	0x1fff8da4
    7e78:	1fff8da0 	.word	0x1fff8da0

00007e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7e7c:	b500      	push	{lr}
    7e7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e80:	f7f9 fb36 	bl	14f0 <Sys_GetCoreID>
    7e84:	4603      	mov	r3, r0
    7e86:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    7e88:	4a0d      	ldr	r2, [pc, #52]	; (7ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7e8a:	9b01      	ldr	r3, [sp, #4]
    7e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e90:	1e5a      	subs	r2, r3, #1
    7e92:	490b      	ldr	r1, [pc, #44]	; (7ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7e94:	9b01      	ldr	r3, [sp, #4]
    7e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    7e9a:	4a0a      	ldr	r2, [pc, #40]	; (7ec4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    7e9c:	9b01      	ldr	r3, [sp, #4]
    7e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea2:	f003 0301 	and.w	r3, r3, #1
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	d106      	bne.n	7eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7eaa:	4a05      	ldr	r2, [pc, #20]	; (7ec0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7eac:	9b01      	ldr	r3, [sp, #4]
    7eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d100      	bne.n	7eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7eb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7eb8:	bf00      	nop
    7eba:	b003      	add	sp, #12
    7ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    7ec0:	1fff8da4 	.word	0x1fff8da4
    7ec4:	1fff8da0 	.word	0x1fff8da0

00007ec8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7ec8:	b500      	push	{lr}
    7eca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ecc:	f7f9 fb10 	bl	14f0 <Sys_GetCoreID>
    7ed0:	4603      	mov	r3, r0
    7ed2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    7ed4:	4a10      	ldr	r2, [pc, #64]	; (7f18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7ed6:	9b01      	ldr	r3, [sp, #4]
    7ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7edc:	2b00      	cmp	r3, #0
    7ede:	d10d      	bne.n	7efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ee0:	f7f8 fe28 	bl	b34 <Port_schm_read_msr>
    7ee4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7ee6:	9b00      	ldr	r3, [sp, #0]
    7ee8:	f003 0301 	and.w	r3, r3, #1
    7eec:	2b00      	cmp	r3, #0
    7eee:	d100      	bne.n	7ef2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7ef0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    7ef2:	490a      	ldr	r1, [pc, #40]	; (7f1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7ef4:	9b01      	ldr	r3, [sp, #4]
    7ef6:	9a00      	ldr	r2, [sp, #0]
    7ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7efc:	4a06      	ldr	r2, [pc, #24]	; (7f18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7efe:	9b01      	ldr	r3, [sp, #4]
    7f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f04:	1c5a      	adds	r2, r3, #1
    7f06:	4904      	ldr	r1, [pc, #16]	; (7f18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7f08:	9b01      	ldr	r3, [sp, #4]
    7f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7f0e:	bf00      	nop
    7f10:	b003      	add	sp, #12
    7f12:	f85d fb04 	ldr.w	pc, [sp], #4
    7f16:	bf00      	nop
    7f18:	1fff8dac 	.word	0x1fff8dac
    7f1c:	1fff8da8 	.word	0x1fff8da8

00007f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7f20:	b500      	push	{lr}
    7f22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f24:	f7f9 fae4 	bl	14f0 <Sys_GetCoreID>
    7f28:	4603      	mov	r3, r0
    7f2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7f2c:	4a0d      	ldr	r2, [pc, #52]	; (7f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7f2e:	9b01      	ldr	r3, [sp, #4]
    7f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f34:	1e5a      	subs	r2, r3, #1
    7f36:	490b      	ldr	r1, [pc, #44]	; (7f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7f38:	9b01      	ldr	r3, [sp, #4]
    7f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    7f3e:	4a0a      	ldr	r2, [pc, #40]	; (7f68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    7f40:	9b01      	ldr	r3, [sp, #4]
    7f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f46:	f003 0301 	and.w	r3, r3, #1
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d106      	bne.n	7f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    7f4e:	4a05      	ldr	r2, [pc, #20]	; (7f64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7f50:	9b01      	ldr	r3, [sp, #4]
    7f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d100      	bne.n	7f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7f5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7f5c:	bf00      	nop
    7f5e:	b003      	add	sp, #12
    7f60:	f85d fb04 	ldr.w	pc, [sp], #4
    7f64:	1fff8dac 	.word	0x1fff8dac
    7f68:	1fff8da8 	.word	0x1fff8da8

00007f6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7f6c:	b500      	push	{lr}
    7f6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f70:	f7f9 fabe 	bl	14f0 <Sys_GetCoreID>
    7f74:	4603      	mov	r3, r0
    7f76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7f78:	4a10      	ldr	r2, [pc, #64]	; (7fbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7f7a:	9b01      	ldr	r3, [sp, #4]
    7f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f80:	2b00      	cmp	r3, #0
    7f82:	d10d      	bne.n	7fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7f84:	f7f8 fdd6 	bl	b34 <Port_schm_read_msr>
    7f88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7f8a:	9b00      	ldr	r3, [sp, #0]
    7f8c:	f003 0301 	and.w	r3, r3, #1
    7f90:	2b00      	cmp	r3, #0
    7f92:	d100      	bne.n	7f96 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7f94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    7f96:	490a      	ldr	r1, [pc, #40]	; (7fc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    7f98:	9b01      	ldr	r3, [sp, #4]
    7f9a:	9a00      	ldr	r2, [sp, #0]
    7f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    7fa0:	4a06      	ldr	r2, [pc, #24]	; (7fbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7fa2:	9b01      	ldr	r3, [sp, #4]
    7fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fa8:	1c5a      	adds	r2, r3, #1
    7faa:	4904      	ldr	r1, [pc, #16]	; (7fbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7fac:	9b01      	ldr	r3, [sp, #4]
    7fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fb2:	bf00      	nop
    7fb4:	b003      	add	sp, #12
    7fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    7fba:	bf00      	nop
    7fbc:	1fff8db4 	.word	0x1fff8db4
    7fc0:	1fff8db0 	.word	0x1fff8db0

00007fc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7fc4:	b500      	push	{lr}
    7fc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7fc8:	f7f9 fa92 	bl	14f0 <Sys_GetCoreID>
    7fcc:	4603      	mov	r3, r0
    7fce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    7fd0:	4a0d      	ldr	r2, [pc, #52]	; (8008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7fd2:	9b01      	ldr	r3, [sp, #4]
    7fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fd8:	1e5a      	subs	r2, r3, #1
    7fda:	490b      	ldr	r1, [pc, #44]	; (8008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7fdc:	9b01      	ldr	r3, [sp, #4]
    7fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    7fe2:	4a0a      	ldr	r2, [pc, #40]	; (800c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7fe4:	9b01      	ldr	r3, [sp, #4]
    7fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fea:	f003 0301 	and.w	r3, r3, #1
    7fee:	2b00      	cmp	r3, #0
    7ff0:	d106      	bne.n	8000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    7ff2:	4a05      	ldr	r2, [pc, #20]	; (8008 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7ff4:	9b01      	ldr	r3, [sp, #4]
    7ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ffa:	2b00      	cmp	r3, #0
    7ffc:	d100      	bne.n	8000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ffe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8000:	bf00      	nop
    8002:	b003      	add	sp, #12
    8004:	f85d fb04 	ldr.w	pc, [sp], #4
    8008:	1fff8db4 	.word	0x1fff8db4
    800c:	1fff8db0 	.word	0x1fff8db0

00008010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    8010:	b500      	push	{lr}
    8012:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8014:	f7f9 fa6c 	bl	14f0 <Sys_GetCoreID>
    8018:	4603      	mov	r3, r0
    801a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    801c:	4a10      	ldr	r2, [pc, #64]	; (8060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    801e:	9b01      	ldr	r3, [sp, #4]
    8020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8024:	2b00      	cmp	r3, #0
    8026:	d10d      	bne.n	8044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8028:	f7f8 fd84 	bl	b34 <Port_schm_read_msr>
    802c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    802e:	9b00      	ldr	r3, [sp, #0]
    8030:	f003 0301 	and.w	r3, r3, #1
    8034:	2b00      	cmp	r3, #0
    8036:	d100      	bne.n	803a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8038:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    803a:	490a      	ldr	r1, [pc, #40]	; (8064 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    803c:	9b01      	ldr	r3, [sp, #4]
    803e:	9a00      	ldr	r2, [sp, #0]
    8040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    8044:	4a06      	ldr	r2, [pc, #24]	; (8060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    8046:	9b01      	ldr	r3, [sp, #4]
    8048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    804c:	1c5a      	adds	r2, r3, #1
    804e:	4904      	ldr	r1, [pc, #16]	; (8060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    8050:	9b01      	ldr	r3, [sp, #4]
    8052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8056:	bf00      	nop
    8058:	b003      	add	sp, #12
    805a:	f85d fb04 	ldr.w	pc, [sp], #4
    805e:	bf00      	nop
    8060:	1fff8dbc 	.word	0x1fff8dbc
    8064:	1fff8db8 	.word	0x1fff8db8

00008068 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    8068:	b500      	push	{lr}
    806a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    806c:	f7f9 fa40 	bl	14f0 <Sys_GetCoreID>
    8070:	4603      	mov	r3, r0
    8072:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    8074:	4a0d      	ldr	r2, [pc, #52]	; (80ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    8076:	9b01      	ldr	r3, [sp, #4]
    8078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    807c:	1e5a      	subs	r2, r3, #1
    807e:	490b      	ldr	r1, [pc, #44]	; (80ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    8080:	9b01      	ldr	r3, [sp, #4]
    8082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    8086:	4a0a      	ldr	r2, [pc, #40]	; (80b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    8088:	9b01      	ldr	r3, [sp, #4]
    808a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    808e:	f003 0301 	and.w	r3, r3, #1
    8092:	2b00      	cmp	r3, #0
    8094:	d106      	bne.n	80a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    8096:	4a05      	ldr	r2, [pc, #20]	; (80ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    8098:	9b01      	ldr	r3, [sp, #4]
    809a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    809e:	2b00      	cmp	r3, #0
    80a0:	d100      	bne.n	80a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    80a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    80a4:	bf00      	nop
    80a6:	b003      	add	sp, #12
    80a8:	f85d fb04 	ldr.w	pc, [sp], #4
    80ac:	1fff8dbc 	.word	0x1fff8dbc
    80b0:	1fff8db8 	.word	0x1fff8db8

000080b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    80b4:	b500      	push	{lr}
    80b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80b8:	f7f9 fa1a 	bl	14f0 <Sys_GetCoreID>
    80bc:	4603      	mov	r3, r0
    80be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    80c0:	4a10      	ldr	r2, [pc, #64]	; (8104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    80c2:	9b01      	ldr	r3, [sp, #4]
    80c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80c8:	2b00      	cmp	r3, #0
    80ca:	d10d      	bne.n	80e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80cc:	f7f8 fd32 	bl	b34 <Port_schm_read_msr>
    80d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80d2:	9b00      	ldr	r3, [sp, #0]
    80d4:	f003 0301 	and.w	r3, r3, #1
    80d8:	2b00      	cmp	r3, #0
    80da:	d100      	bne.n	80de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    80de:	490a      	ldr	r1, [pc, #40]	; (8108 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    80e0:	9b01      	ldr	r3, [sp, #4]
    80e2:	9a00      	ldr	r2, [sp, #0]
    80e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    80e8:	4a06      	ldr	r2, [pc, #24]	; (8104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    80ea:	9b01      	ldr	r3, [sp, #4]
    80ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f0:	1c5a      	adds	r2, r3, #1
    80f2:	4904      	ldr	r1, [pc, #16]	; (8104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    80f4:	9b01      	ldr	r3, [sp, #4]
    80f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80fa:	bf00      	nop
    80fc:	b003      	add	sp, #12
    80fe:	f85d fb04 	ldr.w	pc, [sp], #4
    8102:	bf00      	nop
    8104:	1fff8dc4 	.word	0x1fff8dc4
    8108:	1fff8dc0 	.word	0x1fff8dc0

0000810c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    810c:	b500      	push	{lr}
    810e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8110:	f7f9 f9ee 	bl	14f0 <Sys_GetCoreID>
    8114:	4603      	mov	r3, r0
    8116:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    8118:	4a0d      	ldr	r2, [pc, #52]	; (8150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    811a:	9b01      	ldr	r3, [sp, #4]
    811c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8120:	1e5a      	subs	r2, r3, #1
    8122:	490b      	ldr	r1, [pc, #44]	; (8150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    8124:	9b01      	ldr	r3, [sp, #4]
    8126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    812a:	4a0a      	ldr	r2, [pc, #40]	; (8154 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    812c:	9b01      	ldr	r3, [sp, #4]
    812e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8132:	f003 0301 	and.w	r3, r3, #1
    8136:	2b00      	cmp	r3, #0
    8138:	d106      	bne.n	8148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    813a:	4a05      	ldr	r2, [pc, #20]	; (8150 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    813c:	9b01      	ldr	r3, [sp, #4]
    813e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8142:	2b00      	cmp	r3, #0
    8144:	d100      	bne.n	8148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8146:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8148:	bf00      	nop
    814a:	b003      	add	sp, #12
    814c:	f85d fb04 	ldr.w	pc, [sp], #4
    8150:	1fff8dc4 	.word	0x1fff8dc4
    8154:	1fff8dc0 	.word	0x1fff8dc0

00008158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    8158:	b500      	push	{lr}
    815a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    815c:	f7f9 f9c8 	bl	14f0 <Sys_GetCoreID>
    8160:	4603      	mov	r3, r0
    8162:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    8164:	4a10      	ldr	r2, [pc, #64]	; (81a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    8166:	9b01      	ldr	r3, [sp, #4]
    8168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    816c:	2b00      	cmp	r3, #0
    816e:	d10d      	bne.n	818c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8170:	f7f8 fce0 	bl	b34 <Port_schm_read_msr>
    8174:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8176:	9b00      	ldr	r3, [sp, #0]
    8178:	f003 0301 	and.w	r3, r3, #1
    817c:	2b00      	cmp	r3, #0
    817e:	d100      	bne.n	8182 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8180:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    8182:	490a      	ldr	r1, [pc, #40]	; (81ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    8184:	9b01      	ldr	r3, [sp, #4]
    8186:	9a00      	ldr	r2, [sp, #0]
    8188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    818c:	4a06      	ldr	r2, [pc, #24]	; (81a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    818e:	9b01      	ldr	r3, [sp, #4]
    8190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8194:	1c5a      	adds	r2, r3, #1
    8196:	4904      	ldr	r1, [pc, #16]	; (81a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    8198:	9b01      	ldr	r3, [sp, #4]
    819a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    819e:	bf00      	nop
    81a0:	b003      	add	sp, #12
    81a2:	f85d fb04 	ldr.w	pc, [sp], #4
    81a6:	bf00      	nop
    81a8:	1fff8dcc 	.word	0x1fff8dcc
    81ac:	1fff8dc8 	.word	0x1fff8dc8

000081b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    81b0:	b500      	push	{lr}
    81b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    81b4:	f7f9 f99c 	bl	14f0 <Sys_GetCoreID>
    81b8:	4603      	mov	r3, r0
    81ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    81bc:	4a0d      	ldr	r2, [pc, #52]	; (81f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    81be:	9b01      	ldr	r3, [sp, #4]
    81c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81c4:	1e5a      	subs	r2, r3, #1
    81c6:	490b      	ldr	r1, [pc, #44]	; (81f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    81c8:	9b01      	ldr	r3, [sp, #4]
    81ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    81ce:	4a0a      	ldr	r2, [pc, #40]	; (81f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    81d0:	9b01      	ldr	r3, [sp, #4]
    81d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81d6:	f003 0301 	and.w	r3, r3, #1
    81da:	2b00      	cmp	r3, #0
    81dc:	d106      	bne.n	81ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    81de:	4a05      	ldr	r2, [pc, #20]	; (81f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    81e0:	9b01      	ldr	r3, [sp, #4]
    81e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    81e6:	2b00      	cmp	r3, #0
    81e8:	d100      	bne.n	81ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    81ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    81ec:	bf00      	nop
    81ee:	b003      	add	sp, #12
    81f0:	f85d fb04 	ldr.w	pc, [sp], #4
    81f4:	1fff8dcc 	.word	0x1fff8dcc
    81f8:	1fff8dc8 	.word	0x1fff8dc8

000081fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    81fc:	b500      	push	{lr}
    81fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8200:	f7f9 f976 	bl	14f0 <Sys_GetCoreID>
    8204:	4603      	mov	r3, r0
    8206:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    8208:	4a10      	ldr	r2, [pc, #64]	; (824c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    820a:	9b01      	ldr	r3, [sp, #4]
    820c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8210:	2b00      	cmp	r3, #0
    8212:	d10d      	bne.n	8230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8214:	f7f8 fc8e 	bl	b34 <Port_schm_read_msr>
    8218:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    821a:	9b00      	ldr	r3, [sp, #0]
    821c:	f003 0301 	and.w	r3, r3, #1
    8220:	2b00      	cmp	r3, #0
    8222:	d100      	bne.n	8226 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8224:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    8226:	490a      	ldr	r1, [pc, #40]	; (8250 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    8228:	9b01      	ldr	r3, [sp, #4]
    822a:	9a00      	ldr	r2, [sp, #0]
    822c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    8230:	4a06      	ldr	r2, [pc, #24]	; (824c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    8232:	9b01      	ldr	r3, [sp, #4]
    8234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8238:	1c5a      	adds	r2, r3, #1
    823a:	4904      	ldr	r1, [pc, #16]	; (824c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    823c:	9b01      	ldr	r3, [sp, #4]
    823e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8242:	bf00      	nop
    8244:	b003      	add	sp, #12
    8246:	f85d fb04 	ldr.w	pc, [sp], #4
    824a:	bf00      	nop
    824c:	1fff8dd4 	.word	0x1fff8dd4
    8250:	1fff8dd0 	.word	0x1fff8dd0

00008254 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    8254:	b500      	push	{lr}
    8256:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8258:	f7f9 f94a 	bl	14f0 <Sys_GetCoreID>
    825c:	4603      	mov	r3, r0
    825e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    8260:	4a0d      	ldr	r2, [pc, #52]	; (8298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    8262:	9b01      	ldr	r3, [sp, #4]
    8264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8268:	1e5a      	subs	r2, r3, #1
    826a:	490b      	ldr	r1, [pc, #44]	; (8298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    826c:	9b01      	ldr	r3, [sp, #4]
    826e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    8272:	4a0a      	ldr	r2, [pc, #40]	; (829c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    8274:	9b01      	ldr	r3, [sp, #4]
    8276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    827a:	f003 0301 	and.w	r3, r3, #1
    827e:	2b00      	cmp	r3, #0
    8280:	d106      	bne.n	8290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    8282:	4a05      	ldr	r2, [pc, #20]	; (8298 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    8284:	9b01      	ldr	r3, [sp, #4]
    8286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    828a:	2b00      	cmp	r3, #0
    828c:	d100      	bne.n	8290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    828e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8290:	bf00      	nop
    8292:	b003      	add	sp, #12
    8294:	f85d fb04 	ldr.w	pc, [sp], #4
    8298:	1fff8dd4 	.word	0x1fff8dd4
    829c:	1fff8dd0 	.word	0x1fff8dd0

000082a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    82a0:	b500      	push	{lr}
    82a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82a4:	f7f9 f924 	bl	14f0 <Sys_GetCoreID>
    82a8:	4603      	mov	r3, r0
    82aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    82ac:	4a10      	ldr	r2, [pc, #64]	; (82f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    82ae:	9b01      	ldr	r3, [sp, #4]
    82b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82b4:	2b00      	cmp	r3, #0
    82b6:	d10d      	bne.n	82d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    82b8:	f7f8 fc3c 	bl	b34 <Port_schm_read_msr>
    82bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    82be:	9b00      	ldr	r3, [sp, #0]
    82c0:	f003 0301 	and.w	r3, r3, #1
    82c4:	2b00      	cmp	r3, #0
    82c6:	d100      	bne.n	82ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    82c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    82ca:	490a      	ldr	r1, [pc, #40]	; (82f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    82cc:	9b01      	ldr	r3, [sp, #4]
    82ce:	9a00      	ldr	r2, [sp, #0]
    82d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    82d4:	4a06      	ldr	r2, [pc, #24]	; (82f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    82d6:	9b01      	ldr	r3, [sp, #4]
    82d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82dc:	1c5a      	adds	r2, r3, #1
    82de:	4904      	ldr	r1, [pc, #16]	; (82f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    82e0:	9b01      	ldr	r3, [sp, #4]
    82e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82e6:	bf00      	nop
    82e8:	b003      	add	sp, #12
    82ea:	f85d fb04 	ldr.w	pc, [sp], #4
    82ee:	bf00      	nop
    82f0:	1fff8ddc 	.word	0x1fff8ddc
    82f4:	1fff8dd8 	.word	0x1fff8dd8

000082f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    82f8:	b500      	push	{lr}
    82fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    82fc:	f7f9 f8f8 	bl	14f0 <Sys_GetCoreID>
    8300:	4603      	mov	r3, r0
    8302:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    8304:	4a0d      	ldr	r2, [pc, #52]	; (833c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    8306:	9b01      	ldr	r3, [sp, #4]
    8308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    830c:	1e5a      	subs	r2, r3, #1
    830e:	490b      	ldr	r1, [pc, #44]	; (833c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    8310:	9b01      	ldr	r3, [sp, #4]
    8312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    8316:	4a0a      	ldr	r2, [pc, #40]	; (8340 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    8318:	9b01      	ldr	r3, [sp, #4]
    831a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    831e:	f003 0301 	and.w	r3, r3, #1
    8322:	2b00      	cmp	r3, #0
    8324:	d106      	bne.n	8334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    8326:	4a05      	ldr	r2, [pc, #20]	; (833c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    8328:	9b01      	ldr	r3, [sp, #4]
    832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    832e:	2b00      	cmp	r3, #0
    8330:	d100      	bne.n	8334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8332:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8334:	bf00      	nop
    8336:	b003      	add	sp, #12
    8338:	f85d fb04 	ldr.w	pc, [sp], #4
    833c:	1fff8ddc 	.word	0x1fff8ddc
    8340:	1fff8dd8 	.word	0x1fff8dd8

00008344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    8344:	b500      	push	{lr}
    8346:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8348:	f7f9 f8d2 	bl	14f0 <Sys_GetCoreID>
    834c:	4603      	mov	r3, r0
    834e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    8350:	4a10      	ldr	r2, [pc, #64]	; (8394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    8352:	9b01      	ldr	r3, [sp, #4]
    8354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8358:	2b00      	cmp	r3, #0
    835a:	d10d      	bne.n	8378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    835c:	f7f8 fbea 	bl	b34 <Port_schm_read_msr>
    8360:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8362:	9b00      	ldr	r3, [sp, #0]
    8364:	f003 0301 	and.w	r3, r3, #1
    8368:	2b00      	cmp	r3, #0
    836a:	d100      	bne.n	836e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    836c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    836e:	490a      	ldr	r1, [pc, #40]	; (8398 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    8370:	9b01      	ldr	r3, [sp, #4]
    8372:	9a00      	ldr	r2, [sp, #0]
    8374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    8378:	4a06      	ldr	r2, [pc, #24]	; (8394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    837a:	9b01      	ldr	r3, [sp, #4]
    837c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8380:	1c5a      	adds	r2, r3, #1
    8382:	4904      	ldr	r1, [pc, #16]	; (8394 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    8384:	9b01      	ldr	r3, [sp, #4]
    8386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    838a:	bf00      	nop
    838c:	b003      	add	sp, #12
    838e:	f85d fb04 	ldr.w	pc, [sp], #4
    8392:	bf00      	nop
    8394:	1fff8de4 	.word	0x1fff8de4
    8398:	1fff8de0 	.word	0x1fff8de0

0000839c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    839c:	b500      	push	{lr}
    839e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83a0:	f7f9 f8a6 	bl	14f0 <Sys_GetCoreID>
    83a4:	4603      	mov	r3, r0
    83a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    83a8:	4a0d      	ldr	r2, [pc, #52]	; (83e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    83aa:	9b01      	ldr	r3, [sp, #4]
    83ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b0:	1e5a      	subs	r2, r3, #1
    83b2:	490b      	ldr	r1, [pc, #44]	; (83e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    83b4:	9b01      	ldr	r3, [sp, #4]
    83b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    83ba:	4a0a      	ldr	r2, [pc, #40]	; (83e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    83bc:	9b01      	ldr	r3, [sp, #4]
    83be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c2:	f003 0301 	and.w	r3, r3, #1
    83c6:	2b00      	cmp	r3, #0
    83c8:	d106      	bne.n	83d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    83ca:	4a05      	ldr	r2, [pc, #20]	; (83e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    83cc:	9b01      	ldr	r3, [sp, #4]
    83ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83d2:	2b00      	cmp	r3, #0
    83d4:	d100      	bne.n	83d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    83d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    83d8:	bf00      	nop
    83da:	b003      	add	sp, #12
    83dc:	f85d fb04 	ldr.w	pc, [sp], #4
    83e0:	1fff8de4 	.word	0x1fff8de4
    83e4:	1fff8de0 	.word	0x1fff8de0

000083e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    83e8:	b500      	push	{lr}
    83ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    83ec:	f7f9 f880 	bl	14f0 <Sys_GetCoreID>
    83f0:	4603      	mov	r3, r0
    83f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    83f4:	4a10      	ldr	r2, [pc, #64]	; (8438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    83f6:	9b01      	ldr	r3, [sp, #4]
    83f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83fc:	2b00      	cmp	r3, #0
    83fe:	d10d      	bne.n	841c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8400:	f7f8 fb98 	bl	b34 <Port_schm_read_msr>
    8404:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8406:	9b00      	ldr	r3, [sp, #0]
    8408:	f003 0301 	and.w	r3, r3, #1
    840c:	2b00      	cmp	r3, #0
    840e:	d100      	bne.n	8412 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8410:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    8412:	490a      	ldr	r1, [pc, #40]	; (843c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    8414:	9b01      	ldr	r3, [sp, #4]
    8416:	9a00      	ldr	r2, [sp, #0]
    8418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    841c:	4a06      	ldr	r2, [pc, #24]	; (8438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    841e:	9b01      	ldr	r3, [sp, #4]
    8420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8424:	1c5a      	adds	r2, r3, #1
    8426:	4904      	ldr	r1, [pc, #16]	; (8438 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    8428:	9b01      	ldr	r3, [sp, #4]
    842a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    842e:	bf00      	nop
    8430:	b003      	add	sp, #12
    8432:	f85d fb04 	ldr.w	pc, [sp], #4
    8436:	bf00      	nop
    8438:	1fff8dec 	.word	0x1fff8dec
    843c:	1fff8de8 	.word	0x1fff8de8

00008440 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    8440:	b500      	push	{lr}
    8442:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8444:	f7f9 f854 	bl	14f0 <Sys_GetCoreID>
    8448:	4603      	mov	r3, r0
    844a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    844c:	4a0d      	ldr	r2, [pc, #52]	; (8484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    844e:	9b01      	ldr	r3, [sp, #4]
    8450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8454:	1e5a      	subs	r2, r3, #1
    8456:	490b      	ldr	r1, [pc, #44]	; (8484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    8458:	9b01      	ldr	r3, [sp, #4]
    845a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    845e:	4a0a      	ldr	r2, [pc, #40]	; (8488 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    8460:	9b01      	ldr	r3, [sp, #4]
    8462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8466:	f003 0301 	and.w	r3, r3, #1
    846a:	2b00      	cmp	r3, #0
    846c:	d106      	bne.n	847c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    846e:	4a05      	ldr	r2, [pc, #20]	; (8484 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    8470:	9b01      	ldr	r3, [sp, #4]
    8472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8476:	2b00      	cmp	r3, #0
    8478:	d100      	bne.n	847c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    847a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    847c:	bf00      	nop
    847e:	b003      	add	sp, #12
    8480:	f85d fb04 	ldr.w	pc, [sp], #4
    8484:	1fff8dec 	.word	0x1fff8dec
    8488:	1fff8de8 	.word	0x1fff8de8

0000848c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    848c:	b500      	push	{lr}
    848e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8490:	f7f9 f82e 	bl	14f0 <Sys_GetCoreID>
    8494:	4603      	mov	r3, r0
    8496:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    8498:	4a10      	ldr	r2, [pc, #64]	; (84dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    849a:	9b01      	ldr	r3, [sp, #4]
    849c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84a0:	2b00      	cmp	r3, #0
    84a2:	d10d      	bne.n	84c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    84a4:	f7f8 fb46 	bl	b34 <Port_schm_read_msr>
    84a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    84aa:	9b00      	ldr	r3, [sp, #0]
    84ac:	f003 0301 	and.w	r3, r3, #1
    84b0:	2b00      	cmp	r3, #0
    84b2:	d100      	bne.n	84b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    84b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    84b6:	490a      	ldr	r1, [pc, #40]	; (84e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    84b8:	9b01      	ldr	r3, [sp, #4]
    84ba:	9a00      	ldr	r2, [sp, #0]
    84bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    84c0:	4a06      	ldr	r2, [pc, #24]	; (84dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    84c2:	9b01      	ldr	r3, [sp, #4]
    84c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84c8:	1c5a      	adds	r2, r3, #1
    84ca:	4904      	ldr	r1, [pc, #16]	; (84dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    84cc:	9b01      	ldr	r3, [sp, #4]
    84ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    84d2:	bf00      	nop
    84d4:	b003      	add	sp, #12
    84d6:	f85d fb04 	ldr.w	pc, [sp], #4
    84da:	bf00      	nop
    84dc:	1fff8df4 	.word	0x1fff8df4
    84e0:	1fff8df0 	.word	0x1fff8df0

000084e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    84e4:	b500      	push	{lr}
    84e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    84e8:	f7f9 f802 	bl	14f0 <Sys_GetCoreID>
    84ec:	4603      	mov	r3, r0
    84ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    84f0:	4a0d      	ldr	r2, [pc, #52]	; (8528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    84f2:	9b01      	ldr	r3, [sp, #4]
    84f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84f8:	1e5a      	subs	r2, r3, #1
    84fa:	490b      	ldr	r1, [pc, #44]	; (8528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    84fc:	9b01      	ldr	r3, [sp, #4]
    84fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    8502:	4a0a      	ldr	r2, [pc, #40]	; (852c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    8504:	9b01      	ldr	r3, [sp, #4]
    8506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    850a:	f003 0301 	and.w	r3, r3, #1
    850e:	2b00      	cmp	r3, #0
    8510:	d106      	bne.n	8520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    8512:	4a05      	ldr	r2, [pc, #20]	; (8528 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8514:	9b01      	ldr	r3, [sp, #4]
    8516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    851a:	2b00      	cmp	r3, #0
    851c:	d100      	bne.n	8520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    851e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8520:	bf00      	nop
    8522:	b003      	add	sp, #12
    8524:	f85d fb04 	ldr.w	pc, [sp], #4
    8528:	1fff8df4 	.word	0x1fff8df4
    852c:	1fff8df0 	.word	0x1fff8df0

00008530 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    8530:	b500      	push	{lr}
    8532:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8534:	f7f8 ffdc 	bl	14f0 <Sys_GetCoreID>
    8538:	4603      	mov	r3, r0
    853a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    853c:	4a10      	ldr	r2, [pc, #64]	; (8580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    853e:	9b01      	ldr	r3, [sp, #4]
    8540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8544:	2b00      	cmp	r3, #0
    8546:	d10d      	bne.n	8564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8548:	f7f8 faf4 	bl	b34 <Port_schm_read_msr>
    854c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    854e:	9b00      	ldr	r3, [sp, #0]
    8550:	f003 0301 	and.w	r3, r3, #1
    8554:	2b00      	cmp	r3, #0
    8556:	d100      	bne.n	855a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8558:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    855a:	490a      	ldr	r1, [pc, #40]	; (8584 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    855c:	9b01      	ldr	r3, [sp, #4]
    855e:	9a00      	ldr	r2, [sp, #0]
    8560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    8564:	4a06      	ldr	r2, [pc, #24]	; (8580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    8566:	9b01      	ldr	r3, [sp, #4]
    8568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    856c:	1c5a      	adds	r2, r3, #1
    856e:	4904      	ldr	r1, [pc, #16]	; (8580 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    8570:	9b01      	ldr	r3, [sp, #4]
    8572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8576:	bf00      	nop
    8578:	b003      	add	sp, #12
    857a:	f85d fb04 	ldr.w	pc, [sp], #4
    857e:	bf00      	nop
    8580:	1fff8dfc 	.word	0x1fff8dfc
    8584:	1fff8df8 	.word	0x1fff8df8

00008588 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    8588:	b500      	push	{lr}
    858a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    858c:	f7f8 ffb0 	bl	14f0 <Sys_GetCoreID>
    8590:	4603      	mov	r3, r0
    8592:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    8594:	4a0d      	ldr	r2, [pc, #52]	; (85cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    8596:	9b01      	ldr	r3, [sp, #4]
    8598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    859c:	1e5a      	subs	r2, r3, #1
    859e:	490b      	ldr	r1, [pc, #44]	; (85cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    85a0:	9b01      	ldr	r3, [sp, #4]
    85a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    85a6:	4a0a      	ldr	r2, [pc, #40]	; (85d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    85a8:	9b01      	ldr	r3, [sp, #4]
    85aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85ae:	f003 0301 	and.w	r3, r3, #1
    85b2:	2b00      	cmp	r3, #0
    85b4:	d106      	bne.n	85c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    85b6:	4a05      	ldr	r2, [pc, #20]	; (85cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    85b8:	9b01      	ldr	r3, [sp, #4]
    85ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85be:	2b00      	cmp	r3, #0
    85c0:	d100      	bne.n	85c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85c4:	bf00      	nop
    85c6:	b003      	add	sp, #12
    85c8:	f85d fb04 	ldr.w	pc, [sp], #4
    85cc:	1fff8dfc 	.word	0x1fff8dfc
    85d0:	1fff8df8 	.word	0x1fff8df8

000085d4 <Fls_ACEraseRomEnd>:
    85d4:	74747542 	.word	0x74747542
    85d8:	31206e6f 	.word	0x31206e6f
    85dc:	74636120 	.word	0x74636120
    85e0:	3a6e6f69 	.word	0x3a6e6f69
    85e4:	4e495320 	.word	0x4e495320
    85e8:	5f454c47 	.word	0x5f454c47
    85ec:	43494c43 	.word	0x43494c43
    85f0:	000a204b 	.word	0x000a204b
    85f4:	74747542 	.word	0x74747542
    85f8:	31206e6f 	.word	0x31206e6f
    85fc:	74636120 	.word	0x74636120
    8600:	3a6e6f69 	.word	0x3a6e6f69
    8604:	554f4420 	.word	0x554f4420
    8608:	5f454c42 	.word	0x5f454c42
    860c:	43494c43 	.word	0x43494c43
    8610:	000a204b 	.word	0x000a204b
    8614:	74747542 	.word	0x74747542
    8618:	31206e6f 	.word	0x31206e6f
    861c:	74636120 	.word	0x74636120
    8620:	3a6e6f69 	.word	0x3a6e6f69
    8624:	4c4f4820 	.word	0x4c4f4820
    8628:	4c435f44 	.word	0x4c435f44
    862c:	204b4349 	.word	0x204b4349
    8630:	0000000a 	.word	0x0000000a
    8634:	74747542 	.word	0x74747542
    8638:	31206e6f 	.word	0x31206e6f
    863c:	74636120 	.word	0x74636120
    8640:	3a6e6f69 	.word	0x3a6e6f69
    8644:	4c455220 	.word	0x4c455220
    8648:	45534145 	.word	0x45534145
    864c:	00000a20 	.word	0x00000a20
    8650:	74747542 	.word	0x74747542
    8654:	32206e6f 	.word	0x32206e6f
    8658:	74636120 	.word	0x74636120
    865c:	3a6e6f69 	.word	0x3a6e6f69
    8660:	4e495320 	.word	0x4e495320
    8664:	5f454c47 	.word	0x5f454c47
    8668:	43494c43 	.word	0x43494c43
    866c:	000a204b 	.word	0x000a204b
    8670:	74747542 	.word	0x74747542
    8674:	32206e6f 	.word	0x32206e6f
    8678:	74636120 	.word	0x74636120
    867c:	3a6e6f69 	.word	0x3a6e6f69
    8680:	554f4420 	.word	0x554f4420
    8684:	5f454c42 	.word	0x5f454c42
    8688:	43494c43 	.word	0x43494c43
    868c:	000a204b 	.word	0x000a204b
    8690:	74747542 	.word	0x74747542
    8694:	32206e6f 	.word	0x32206e6f
    8698:	74636120 	.word	0x74636120
    869c:	3a6e6f69 	.word	0x3a6e6f69
    86a0:	4c4f4820 	.word	0x4c4f4820
    86a4:	4c435f44 	.word	0x4c435f44
    86a8:	204b4349 	.word	0x204b4349
    86ac:	0000000a 	.word	0x0000000a
    86b0:	74747542 	.word	0x74747542
    86b4:	32206e6f 	.word	0x32206e6f
    86b8:	74636120 	.word	0x74636120
    86bc:	3a6e6f69 	.word	0x3a6e6f69
    86c0:	4c455220 	.word	0x4c455220
    86c4:	45534145 	.word	0x45534145
    86c8:	00000a20 	.word	0x00000a20
    86cc:	74747542 	.word	0x74747542
    86d0:	33206e6f 	.word	0x33206e6f
    86d4:	74636120 	.word	0x74636120
    86d8:	3a6e6f69 	.word	0x3a6e6f69
    86dc:	4e495320 	.word	0x4e495320
    86e0:	5f454c47 	.word	0x5f454c47
    86e4:	43494c43 	.word	0x43494c43
    86e8:	000a204b 	.word	0x000a204b
    86ec:	74747542 	.word	0x74747542
    86f0:	33206e6f 	.word	0x33206e6f
    86f4:	74636120 	.word	0x74636120
    86f8:	3a6e6f69 	.word	0x3a6e6f69
    86fc:	554f4420 	.word	0x554f4420
    8700:	5f454c42 	.word	0x5f454c42
    8704:	43494c43 	.word	0x43494c43
    8708:	000a204b 	.word	0x000a204b
    870c:	74747542 	.word	0x74747542
    8710:	33206e6f 	.word	0x33206e6f
    8714:	74636120 	.word	0x74636120
    8718:	3a6e6f69 	.word	0x3a6e6f69
    871c:	4c4f4820 	.word	0x4c4f4820
    8720:	4c435f44 	.word	0x4c435f44
    8724:	204b4349 	.word	0x204b4349
    8728:	0000000a 	.word	0x0000000a
    872c:	74747542 	.word	0x74747542
    8730:	33206e6f 	.word	0x33206e6f
    8734:	74636120 	.word	0x74636120
    8738:	3a6e6f69 	.word	0x3a6e6f69
    873c:	4c455220 	.word	0x4c455220
    8740:	45534145 	.word	0x45534145
    8744:	00000a20 	.word	0x00000a20
    8748:	6d726554 	.word	0x6d726554
    874c:	6c616e69 	.word	0x6c616e69
    8750:	00000000 	.word	0x00000000
    8754:	4c554e28 	.word	0x4c554e28
    8758:	0000294c 	.word	0x0000294c

0000875c <Clock_Ip_au8DividerCallbackIndex>:
    875c:	0e0d0c00 06030201 0a070409 000b0805     ................

0000876c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000877c <Clock_Ip_au8XoscCallbackIndex>:
    877c:	00000100 00000000 00000000 00000000     ................

0000878c <Clock_Ip_au8IrcoscCallbackIndex>:
    878c:	03020100 00000004 00000000 00000000     ................

0000879c <Clock_Ip_au8GateCallbackIndex>:
    879c:	06010200 01040301 00000500 00000000     ................

000087ac <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000087bc <Clock_Ip_au8PllCallbackIndex>:
    87bc:	00000100 00000000 00000000 00000000     ................

000087cc <Clock_Ip_au8SelectorCallbackIndex>:
    87cc:	0a090800 03020109 07060504 00000000     ................

000087dc <Clock_Ip_au8PcfsCallbackIndex>:
	...

000087ec <Clock_Ip_au8CmuCallbackIndex>:
	...

000087fc <Clock_Ip_au8ClockFeatures>:
	...
    880c:	01000000 00000000 00000000 00000002     ................
    881c:	00000000 00000300 00000000 00040000     ................
    882c:	00000000 05000000 00000000 00000000     ................
    883c:	00000006 00000000 00000100 00000000     ................
    884c:	00010000 00000000 04000000 00000000     ................
    885c:	00000000 00000005 00000001 00000401     ................
    886c:	00000200 00050100 00030000 04020000     ................
    887c:	04000000 02000000 00000005 00000005     ................
    888c:	00000403 00000600 00050300 00070000     ................
    889c:	05000000 00000000 00000000 00000006     ................
	...
    88dc:	00050000 00000000 06000000 00000100     ................
    88ec:	00000000 00030007 00000000 00000000     ................
    88fc:	00000000 00060000 00000000 07000000     ................
    890c:	00000100 00000000 00030008 00000000     ................
	...
    8924:	00090000 00000000 0a000000 00000100     ................
    8934:	00000000 0003000b 00000000 00000000     ................
    8944:	00000000 000c0000 00000000 0d000000     ................
    8954:	00000100 00000000 0003000e 00000000     ................
    8964:	00000800 00000000 00090000 00000000     ................
    8974:	0a000000 00000000 00000000 0000000b     ................
    8984:	00000000 00000b01 00000000 000b0200     ................
    8994:	00000000 0b030000 00000000 00000000     ................
	...
    89ac:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    89bc:	01000000 00000000 00000000 00000007     ................
    89cc:	00007300 00000700 00320000 00090000     .s........2.....
    89dc:	02000000 07000000 00000000 00000021     ............!...
    89ec:	00000009 00000400 00000900 00030000     ................
    89fc:	00070000 61000000 07000000 00000000     .......a........
    8a0c:	00000024 00000007 00002500 00000700     $........%......
    8a1c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    8a2c:	00000000 00000020 38000004 00003800     .... ......8.8..
    8a3c:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    8a4c:	04000000 00260000 00000026 66000004     ......&.&......f
    8a5c:	00006600 00000400 00370037 00040000     .f......7.7.....
    8a6c:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    8a7c:	2e000004 00002e00 00000200 00404040     ............@@@.
    8a8c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    8a9c:	0000006b 6c000004 00006c00 00000900     k......l.l......
    8aac:	00010000 00090000 00000000 07000000     ................
    8abc:	00000000 00000036 00000007 00003100     ....6........1..
    8acc:	00000700 00490000 00070000 4a000000     ......I........J
    8adc:	07000000 00000000 0000004b 00000007     ........K.......
    8aec:	00004c00 00000700 004d0000 00070000     .L........M.....
    8afc:	3d000000 03000000 00000000 00000000     ...=............

00008b0c <Clock_Ip_au16SelectorEntryHardwareValue>:
    8b0c:	01010a03 01010001 04040002 02000603     ................
    8b1c:	00010810 02020100 00000000 00000007     ................
    8b2c:	00000009 00000000 00000c0e 00000000     ................
	...

00008b64 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    8b64:	00020000 00000300 00000601 00000000     ................
	...

00008b94 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    8b94:	00000700 00000000 02020000 01010303     ................
    8ba4:	03020606 00000000 00000000 00000000     ................
	...

00008bc4 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    8bc4:	00000001 00000000 02020000 01010303     ................
    8bd4:	03020606 00000000 00000000 00000000     ................
	...

00008bf4 <Clock_Ip_au8DividerValueHardwareValue>:
    8bf4:	00020100 00000003 00000004 00000000     ................
    8c04:	00000005 00000000 00000000 00000000     ................
    8c14:	00000006 00000000 00000000 00000000     ................
	...
    8c34:	00000007                                ....

00008c38 <Clock_Ip_apxScgPeriphAsyncDivs>:
    8c38:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00008c48 <Clock_Ip_aeSourceTypeClockName>:
    8c48:	00000000 00000001 00000001 00000001     ................
    8c58:	00000001 00000001 00000001 00000001     ................
    8c68:	00000002 00000003 00000001 00000001     ................
    8c78:	00000001 00000001 00000002 00000002     ................
    8c88:	00000003 00000003 00000001 00000001     ................
    8c98:	00000004 00000004 00000004 00000004     ................
	...

00008d04 <Clock_Ip_aeHwPllName>:
    8d04:	00000009                                ....

00008d08 <Clock_Ip_aeHwDfsName>:
    8d08:	00000057                                W...

00008d0c <Clock_Ip_axDividerCallbacks>:
    8d0c:	0000304d 00003057 00003071 0000308b     M0..W0..q0...0..
    8d1c:	000030a5 000030bf 000030d9 000030f3     .0...0...0...0..
    8d2c:	0000310d 00003127 00003141 0000315b     .1..'1..A1..[1..
    8d3c:	00003175 0000318f 000031a9              u1...1...1..

00008d48 <Clock_Ip_axDividerTriggerCallbacks>:
    8d48:	0000351d 0000351d                       .5...5..

00008d50 <Clock_Ip_axExtOscCallbacks>:
    8d50:	00003529 00003529 00003529 00003533     )5..)5..)5..35..
    8d60:	00003529 0000353d 00003557 00003571     )5..=5..W5..q5..
    8d70:	000035f5 00003609                       .5...6..

00008d78 <Clock_Ip_axFracDivCallbacks>:
    8d78:	000037c9 000037c9 000037d3              .7...7...7..

00008d84 <Clock_Ip_axGateCallbacks>:
    8d84:	000037ed 000037f7 000038f7 00003911     .7...7...8...9..
    8d94:	000038a7 000038c1 00003857 00003871     .8...8..W8..q8..
    8da4:	00003807 00003821 00003947 00003961     .8..!8..G9..a9..
    8db4:	00003997 000039b1                       .9...9..

00008dbc <Clock_Ip_axIntOscCallbacks>:
    8dbc:	00003b5d 00003b5d 00003b67 00003b71     ];..];..g;..q;..
    8dcc:	00003b8b 00003ba5 00003bb9 00003bd3     .;...;...;...;..
    8ddc:	00003bed 00003c01 00003c1b 00003c35     .;...<...<..5<..
    8dec:	00003cdd 00003cf7 00003d11              .<...<...=..

00008df8 <Clock_Ip_axCmuCallbacks>:
    8df8:	000042ad 000042b7 000042c3 000042ad     .B...B...B...B..

00008e08 <Clock_Ip_axPllCallbacks>:
    8e08:	000042cd 000042cd 000042d7 000042cd     .B...B...B...B..
    8e18:	000042e3 000042ed 00004307 00004321     .B...B...C..!C..
    8e28:	000043c5 000043b1                       .C...C..

00008e30 <Clock_Ip_axPcfsCallbacks>:
    8e30:	00004521                                !E..

00008e34 <Clock_Ip_axSelectorCallbacks>:
    8e34:	0000452d 0000452d 00004537 00004551     -E..-E..7E..QE..
    8e44:	0000452d 0000456b 00004585 0000459f     -E..kE...E...E..
    8e54:	000045b9 000045d3 000045ed 00004607     .E...E...E...F..
    8e64:	00004621 0000463b 00004655 0000466f     !F..;F..UF..oF..
    8e74:	00004689 000046a3 000046bd 000046d7     .F...F...F...F..
    8e84:	000046f1 0000470b                       .F...G..

00008e8c <ClockSource>:
    8e8c:	00000000 00000008 00000002 00000005     ................
	...
    8ea4:	00000009                                ....

00008ea8 <ResetReasonArray>:
    8ea8:	00000000 00000001 00000002 00000003     ................
    8eb8:	00000004 00000005 00000006 00000007     ................
    8ec8:	00000008 00000009 0000000a 0000000b     ................
    8ed8:	0000000c 0000000d 0000000e              ............

00008ee4 <Port_au32PortCiPortBaseAddr>:
    8ee4:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8ef4:	4004d000                                ...@

00008ef8 <Port_au32PortCiGpioBaseAddr>:
    8ef8:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    8f08:	400ff100                                ...@

00008f0c <ButtonsCfg>:
    8f0c:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    8f1c:	0000000c 0000012c                       ....,...

00008f24 <LedsCfg>:
    8f24:	00000060 0000006f 00000070              `...o...p...

00008f30 <Task_Config>:
    8f30:	00000032 00000001 0000090d 00000064     2...........d...
    8f40:	00000001 00000919 000003e8 00000000     ................
    8f50:	00000b01 00000bb8 00000000 00000b05     ................
    8f60:	00001388 00000000 00000b09 00000bb8     ................
    8f70:	00000000 00000b0d                       ........

00008f78 <Timer_Config>:
	...

00008f84 <Queue_Config>:
    8f84:	00000002 0000000a 00000000              ............

00008f90 <Scheduler_Config>:
    8f90:	0000000a 00000006 00008f30 00000001     ........0.......
    8fa0:	00008f78 00000001 00008f84              x...........

00008fac <Mcu_aClockConfigPB>:
	...
    8fb4:	14000002 0400000e 01000020 00000002     ........ .......
    8fc4:	01000001 00000001 00000005 00000001     ................
    8fd4:	00000000 00000057 00000000 00000000     ....W...........
	...
    8fec:	00000057 00000000 00000057 00000000     W.......W.......
	...
    9014:	00000019 00000005 0000001a 00000002     ................
    9024:	0000001b 00000005 0000002a 00000002     ........*.......
    9034:	0000003f 00000000 00000040 00000000     ?.......@.......
    9044:	00000041 00000000 00000042 00000000     A.......B.......
    9054:	00000031 00000000 00000045 00000000     1.......E.......
    9064:	00000046 00000000 00000047 00000000     F.......G.......
    9074:	00000044 00000000 00000030 00000000     D.......0.......
    9084:	0000003d 00000000 00000043 00000000     =.......C.......
    9094:	00000049 00000000 0000004a 00000000     I.......J.......
    90a4:	0000004b 00000000 00000048 00000000     K.......H.......
    90b4:	00000057 00000057 00000057 00000057     W...W...W...W...
    90c4:	00000057 00000057 00000057 00000057     W...W...W...W...
    90d4:	00000057 00000057 00000057 00000057     W...W...W...W...
    90e4:	00000057 00000057 00000057 00000057     W...W...W...W...
    90f4:	0000000a 00000001 00000000 0000000b     ................
    9104:	00000001 00000000 0000000c 00000001     ................
    9114:	00000000 0000000d 00000002 00000000     ................
    9124:	0000001d 00000001 00000000 0000001e     ................
    9134:	00000002 00000000 0000001f 00000001     ................
    9144:	00000000 00000021 00000001 00000000     ....!...........
    9154:	00000022 00000002 00000000 00000023     "...........#...
    9164:	00000001 00000000 00000025 00000002     ........%.......
    9174:	00000000 00000026 00000004 00000000     ....&...........
    9184:	00000027 00000002 00000000 00000048     '...........H...
    9194:	00000001 00000001 00000057 00000000     ........W.......
    91a4:	00000000 00000057 00000000 00000000     ....W...........
    91b4:	00000057 00000000 00000000 00000057     W...........W...
	...
    91cc:	00000057 00000000 00000000 00000057     W...........W...
	...
    91e4:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    9200:	00000014 00007d00 00000015 00007d00     .....}.......}..
    9210:	00000016 00007d00 00000017 00008000     .....}..........
    9220:	00000030 00000000 00000031 00000000     0.......1.......
    9230:	00000033 00000000 00000034 00000000     3.......4.......
    9240:	00000036 00000000 00000039 00000000     6.......9.......
    9250:	0000003a 00000000 0000003b 00000000     :.......;.......
    9260:	0000003c 00000000 0000003d 00000000     <.......=.......
    9270:	0000003e 00000000 0000003f 00000000     >.......?.......
    9280:	00000040 00000000 00000041 00000000     @.......A.......
    9290:	00000042 00000000 00000043 00000000     B.......C.......
    92a0:	00000044 00000000 00000045 00000000     D.......E.......
    92b0:	00000046 00000000 00000047 00000000     F.......G.......
    92c0:	00000048 00000000 00000049 00000000     H.......I.......
    92d0:	0000004a 00000000 0000004b 00000000     J.......K.......
    92e0:	0000004e 00000000 0000004f 00000000     N.......O.......
    92f0:	00000050 00000001 00000051 00000001     P.......Q.......
    9300:	00000052 00000001 00000053 00000001     R.......S.......
    9310:	00000054 00000001 00000055 00000000     T.......U.......
    9320:	00000057 00000000 00000057 00000000     W.......W.......
    9330:	00000057 00000000 00000057 00000000     W.......W.......
    9340:	00000057 00000000 00000057 00000000     W.......W.......
    9350:	00000057 00000000 00000057 00000000     W.......W.......
    9360:	00000057 00000000 00000057 00000000     W.......W.......
    9370:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000093a4 <Mcu_Config>:
    93a4:	0000005a 00000000 00000001 00000001     Z...............
    93b4:	0000962c 00008fac 00009638              ,.......8...

000093c0 <OsIf_xPredefinedConfig>:
    93c0:	00000000 02dc6c00                       .....l..

000093c8 <OsIf_apxPredefinedConfig>:
    93c8:	000093c0                                ....

000093cc <g_pin_mux_InitConfigArr>:
    93cc:	4004c000 400ff0c0 00000010 00000002     ...@...@........
    93dc:	00000001 00000002 00000000 00000000     ................
    93ec:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    93fc:	00000011 00000002 00000001 00000001     ................
	...
    941c:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
    942c:	00000001 00000002 00000000 00000000     ................
    943c:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    944c:	00000000 00000002 00000001 00000002     ................
	...
    9468:	00000100 4004d000 400ff100 0000000c     .......@...@....
    9478:	00000002 00000001 00000001 00000000     ................
	...
    9494:	40049000 400ff000 0000000c 00000002     ...@...@........
    94a4:	00000001 00000001 00000000 00000000     ................
	...

000094bc <au8Port_PartitionList>:
    94bc:	00000001                                ....

000094c0 <au32Port_PinToPartitionMap>:
    94c0:	00000001 00000001 00000001 00000001     ................
    94d0:	00000001 00000001                       ........

000094d8 <Port_au16NoUnUsedPadsArrayDefault>:
    94d8:	00010000 00030002 00070006 00090008     ................
    94e8:	000d000b 000f000e 00110010 00210020     ............ .!.
    94f8:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    9508:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    9518:	00410040 00430042 00470046 00490048     @.A.B.C.F.G.H.I.
    9528:	004b004a 004d004c 004f004e 00510050     J.K.L.M.N.O.P.Q.
    9538:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    9548:	006a0069 006c006b 006e006d 00810080     i.j.k.l.m.n.....
    9558:	00830082 00850084 00870086 00890088     ................
    9568:	008b008a 008e008d 0090008f              ............

00009574 <Port_UnUsedPin>:
    9574:	00000000 00000001 00000000              ............

00009580 <Port_aPinConfigDefault>:
    9580:	00000070 00000100 00000001 00000002     p...............
    9590:	00010001 00000071 00000100 00000000     ....q...........
    95a0:	00000001 00010101 0000006f 00000100     ........o.......
    95b0:	00000001 00000002 00010001 00000060     ............`...
    95c0:	00000100 00000001 00000002 00010001     ................
    95d0:	0000008c 00000100 00000000 00000001     ................
    95e0:	00010101 0000000c 00000100 00000000     ................
    95f0:	00000001 00010101                       ........

000095f8 <Port_Config>:
    95f8:	004e0006 000094d8 00009574 00009580     ..N.....t.......
	...
    9610:	000094c0 000094bc 000093cc              ............

0000961c <Power_Ip_RCM_ConfigPB>:
	...

00009624 <Power_Ip_PMC_ConfigPB>:
    9624:	00000000                                ....

00009628 <Power_Ip_SMC_ConfigPB>:
    9628:	00000000                                ....

0000962c <Power_Ip_aModeConfigPB>:
	...

00009638 <Power_Ip_HwIPsConfigPB>:
    9638:	0000961c 00009624 00009628              ....$...(...

00009644 <_aInitStr.0>:
    9644:	00000000 54540000 45522052 53454747     ......TTR REGGES
    9654:	00000000                                ....

00009658 <_aV2C.0>:
    9658:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00009668 <__INIT_TABLE>:
    9668:	00000002 	.word	0x00000002
    966c:	1fff8b10 	.word	0x1fff8b10
    9670:	00009690 	.word	0x00009690
    9674:	000096c0 	.word	0x000096c0
    9678:	1fff8800 	.word	0x1fff8800
    967c:	00000000 	.word	0x00000000
    9680:	00000310 	.word	0x00000310

00009684 <__ZERO_TABLE>:
    9684:	00000001 	.word	0x00000001
    9688:	1fff8b40 	.word	0x1fff8b40
    968c:	1fff9340 	.word	0x1fff9340
