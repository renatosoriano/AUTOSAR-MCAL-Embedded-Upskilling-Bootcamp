
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001097 	.word	0x00001097
  10:	00001099 	.word	0x00001099
  14:	0000109b 	.word	0x0000109b
  18:	0000109d 	.word	0x0000109d
	...
  2c:	0000109f 	.word	0x0000109f
  30:	000010a1 	.word	0x000010a1
  34:	00000000 	.word	0x00000000
  38:	000010a3 	.word	0x000010a3
  3c:	000010a5 	.word	0x000010a5
  40:	000010a7 	.word	0x000010a7
  44:	000010a7 	.word	0x000010a7
  48:	000010a7 	.word	0x000010a7
  4c:	000010a7 	.word	0x000010a7
  50:	000010a7 	.word	0x000010a7
  54:	000010a7 	.word	0x000010a7
  58:	000010a7 	.word	0x000010a7
  5c:	000010a7 	.word	0x000010a7
  60:	000010a7 	.word	0x000010a7
  64:	000010a7 	.word	0x000010a7
  68:	000010a7 	.word	0x000010a7
  6c:	000010a7 	.word	0x000010a7
  70:	000010a7 	.word	0x000010a7
  74:	000010a7 	.word	0x000010a7
  78:	000010a7 	.word	0x000010a7
  7c:	000010a7 	.word	0x000010a7
  80:	000010a7 	.word	0x000010a7
  84:	000010a7 	.word	0x000010a7
  88:	000010a7 	.word	0x000010a7
  8c:	000010a7 	.word	0x000010a7
  90:	000010a7 	.word	0x000010a7
  94:	000010a7 	.word	0x000010a7
  98:	000010a7 	.word	0x000010a7
  9c:	000010a7 	.word	0x000010a7
  a0:	000010a7 	.word	0x000010a7
  a4:	000010a7 	.word	0x000010a7
  a8:	000010a7 	.word	0x000010a7
  ac:	000010a7 	.word	0x000010a7
  b0:	000010a7 	.word	0x000010a7
  b4:	000010a7 	.word	0x000010a7
  b8:	000010a7 	.word	0x000010a7
  bc:	000010a7 	.word	0x000010a7
  c0:	000010a7 	.word	0x000010a7
  c4:	000010a7 	.word	0x000010a7
  c8:	000010a7 	.word	0x000010a7
  cc:	000010a7 	.word	0x000010a7
  d0:	000010a7 	.word	0x000010a7
  d4:	000010a7 	.word	0x000010a7
  d8:	000010a7 	.word	0x000010a7
  dc:	000010a7 	.word	0x000010a7
  e0:	000010a7 	.word	0x000010a7
  e4:	000010a7 	.word	0x000010a7
  e8:	000010a7 	.word	0x000010a7
  ec:	000010a7 	.word	0x000010a7
  f0:	000010a7 	.word	0x000010a7
  f4:	000010a7 	.word	0x000010a7
  f8:	000010a7 	.word	0x000010a7
  fc:	000010a7 	.word	0x000010a7
 100:	000010a7 	.word	0x000010a7
 104:	000010a7 	.word	0x000010a7
 108:	000010a7 	.word	0x000010a7
 10c:	000010a7 	.word	0x000010a7
 110:	000010a7 	.word	0x000010a7
 114:	000010a7 	.word	0x000010a7
 118:	000010a7 	.word	0x000010a7
 11c:	000010a7 	.word	0x000010a7
 120:	000010a7 	.word	0x000010a7
 124:	000010a7 	.word	0x000010a7
 128:	000010a7 	.word	0x000010a7
 12c:	000010a7 	.word	0x000010a7
 130:	000010a7 	.word	0x000010a7
 134:	000010a7 	.word	0x000010a7
 138:	000010a7 	.word	0x000010a7
 13c:	000010a7 	.word	0x000010a7
 140:	000010a7 	.word	0x000010a7
 144:	000010a7 	.word	0x000010a7
 148:	000010a7 	.word	0x000010a7
 14c:	000010a7 	.word	0x000010a7
 150:	000010a7 	.word	0x000010a7
 154:	000010a7 	.word	0x000010a7
 158:	000010a7 	.word	0x000010a7
 15c:	000010a7 	.word	0x000010a7
 160:	000010a7 	.word	0x000010a7
 164:	000010a7 	.word	0x000010a7
 168:	000010a7 	.word	0x000010a7
 16c:	000010a7 	.word	0x000010a7
 170:	000010a7 	.word	0x000010a7
 174:	000010a7 	.word	0x000010a7
 178:	000010a7 	.word	0x000010a7
 17c:	000010a7 	.word	0x000010a7
 180:	000010a7 	.word	0x000010a7
 184:	000010a7 	.word	0x000010a7
 188:	000010a7 	.word	0x000010a7
 18c:	000010a7 	.word	0x000010a7
 190:	000010a7 	.word	0x000010a7
 194:	000010a7 	.word	0x000010a7
 198:	000010a7 	.word	0x000010a7
 19c:	000010a7 	.word	0x000010a7
 1a0:	000010a7 	.word	0x000010a7
 1a4:	000010a7 	.word	0x000010a7
 1a8:	000010a7 	.word	0x000010a7
 1ac:	000010a7 	.word	0x000010a7
 1b0:	000010a7 	.word	0x000010a7
 1b4:	000010a7 	.word	0x000010a7
 1b8:	000010a7 	.word	0x000010a7
 1bc:	000010a7 	.word	0x000010a7
 1c0:	000010a7 	.word	0x000010a7
 1c4:	000010a7 	.word	0x000010a7
 1c8:	000010a7 	.word	0x000010a7
 1cc:	000010a7 	.word	0x000010a7
 1d0:	000010a7 	.word	0x000010a7
 1d4:	000010a7 	.word	0x000010a7
 1d8:	000010a7 	.word	0x000010a7
 1dc:	000010a7 	.word	0x000010a7
 1e0:	000010a7 	.word	0x000010a7
 1e4:	000010a7 	.word	0x000010a7
 1e8:	000010a7 	.word	0x000010a7
 1ec:	000010a7 	.word	0x000010a7
 1f0:	000010a7 	.word	0x000010a7
 1f4:	000010a7 	.word	0x000010a7
 1f8:	000010a7 	.word	0x000010a7
 1fc:	000010a7 	.word	0x000010a7
 200:	000010a7 	.word	0x000010a7
 204:	000010a7 	.word	0x000010a7
 208:	000010a7 	.word	0x000010a7
 20c:	000010a7 	.word	0x000010a7
 210:	000010a7 	.word	0x000010a7
 214:	000010a7 	.word	0x000010a7
 218:	000010a7 	.word	0x000010a7
 21c:	000010a7 	.word	0x000010a7
 220:	000010a7 	.word	0x000010a7
 224:	000010a7 	.word	0x000010a7
 228:	000010a7 	.word	0x000010a7
 22c:	000010a7 	.word	0x000010a7
 230:	000010a7 	.word	0x000010a7
 234:	000010a7 	.word	0x000010a7
 238:	000010a7 	.word	0x000010a7
 23c:	000010a7 	.word	0x000010a7
 240:	000010a7 	.word	0x000010a7
 244:	000010a7 	.word	0x000010a7
 248:	000010a7 	.word	0x000010a7
 24c:	000010a7 	.word	0x000010a7
 250:	000010a7 	.word	0x000010a7
 254:	000010a7 	.word	0x000010a7
 258:	000010a7 	.word	0x000010a7
 25c:	000010a7 	.word	0x000010a7
 260:	000010a7 	.word	0x000010a7
 264:	000010a7 	.word	0x000010a7
 268:	000010a7 	.word	0x000010a7
 26c:	000010a7 	.word	0x000010a7
 270:	000010a7 	.word	0x000010a7
 274:	000010a7 	.word	0x000010a7
 278:	000010a7 	.word	0x000010a7
 27c:	000010a7 	.word	0x000010a7
 280:	000010a7 	.word	0x000010a7
 284:	000010a7 	.word	0x000010a7
 288:	000010a7 	.word	0x000010a7
 28c:	000010a7 	.word	0x000010a7
 290:	000010a7 	.word	0x000010a7
 294:	000010a7 	.word	0x000010a7
 298:	000010a7 	.word	0x000010a7
 29c:	000010a7 	.word	0x000010a7
 2a0:	000010a7 	.word	0x000010a7
 2a4:	000010a7 	.word	0x000010a7
 2a8:	000010a7 	.word	0x000010a7
 2ac:	000010a7 	.word	0x000010a7
 2b0:	000010a7 	.word	0x000010a7
 2b4:	000010a7 	.word	0x000010a7
 2b8:	000010a7 	.word	0x000010a7
 2bc:	000010a7 	.word	0x000010a7
 2c0:	000010a7 	.word	0x000010a7
 2c4:	000010a7 	.word	0x000010a7
 2c8:	000010a7 	.word	0x000010a7
 2cc:	000010a7 	.word	0x000010a7
 2d0:	000010a7 	.word	0x000010a7
 2d4:	000010a7 	.word	0x000010a7
 2d8:	000010a7 	.word	0x000010a7
 2dc:	000010a7 	.word	0x000010a7
 2e0:	000010a7 	.word	0x000010a7
 2e4:	000010a7 	.word	0x000010a7
 2e8:	000010a7 	.word	0x000010a7
 2ec:	000010a7 	.word	0x000010a7
 2f0:	000010a7 	.word	0x000010a7
 2f4:	000010a7 	.word	0x000010a7
 2f8:	000010a7 	.word	0x000010a7
 2fc:	000010a7 	.word	0x000010a7
 300:	000010a7 	.word	0x000010a7
 304:	000010a7 	.word	0x000010a7
 308:	000010a7 	.word	0x000010a7
 30c:	000010a7 	.word	0x000010a7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fd3f 	bl	f04 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fdfe 	bl	108c <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e1c 	.word	0x1fff8e1c

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fd49 	bl	1030 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xcc>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xcc>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xd0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xd0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xc6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x104>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x44>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xfc>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xf6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xf2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xf2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x10>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xea>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xea>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xd8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xd4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x108>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x90>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xee>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xee>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0xbe>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xe6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xe6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x26>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x26>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0xbe>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x10>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x90>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void Delay( uint32 ms );

/* This is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f97d 	bl	1bc2 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f92d 	bl	1b2a <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f93d 	bl	1b5c <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b500      	push	{lr}
     8fe:	b083      	sub	sp, #12
    uint8 RealEvent = 0;    // Actual event of button.
     900:	2300      	movs	r3, #0
     902:	f88d 3006 	strb.w	r3, [sp, #6]

    EcuM_Init();
     906:	f000 f8ff 	bl	b08 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     90a:	f000 fd5f 	bl	13cc <SEGGER_RTT_Init>

    while( 1u )
    {
        HwIoAb_Buttons_MainFunction();
     90e:	f000 f983 	bl	c18 <HwIoAb_Buttons_MainFunction>
        Delay( 10 );   
     912:	200a      	movs	r0, #10
     914:	f7ff ffcc 	bl	8b0 <Delay>

        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     918:	2300      	movs	r3, #0
     91a:	f88d 3007 	strb.w	r3, [sp, #7]
     91e:	e0d4      	b.n	aca <main+0x1ce>
        {  
            RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     920:	f89d 3007 	ldrb.w	r3, [sp, #7]
     924:	4618      	mov	r0, r3
     926:	f000 f959 	bl	bdc <HwIoAb_Buttons_GetEvent>
     92a:	4603      	mov	r3, r0
     92c:	f88d 3006 	strb.w	r3, [sp, #6]

            if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     930:	f89d 3006 	ldrb.w	r3, [sp, #6]
     934:	2b00      	cmp	r3, #0
     936:	f000 80c0 	beq.w	aba <main+0x1be>
            {
                switch( CurrentButton )
     93a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     93e:	2b02      	cmp	r3, #2
     940:	d07f      	beq.n	a42 <main+0x146>
     942:	2b02      	cmp	r3, #2
     944:	f300 80bb 	bgt.w	abe <main+0x1c2>
     948:	2b00      	cmp	r3, #0
     94a:	d002      	beq.n	952 <main+0x56>
     94c:	2b01      	cmp	r3, #1
     94e:	d03c      	beq.n	9ca <main+0xce>
                            break;
                        }
                    break;
                    default :
                      // If jump here is an error
                    break;
     950:	e0b5      	b.n	abe <main+0x1c2>
                        switch( RealEvent )
     952:	f89d 3006 	ldrb.w	r3, [sp, #6]
     956:	3b01      	subs	r3, #1
     958:	2b03      	cmp	r3, #3
     95a:	d834      	bhi.n	9c6 <main+0xca>
     95c:	a201      	add	r2, pc, #4	; (adr r2, 964 <main+0x68>)
     95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     962:	bf00      	nop
     964:	00000975 	.word	0x00000975
     968:	00000985 	.word	0x00000985
     96c:	00000995 	.word	0x00000995
     970:	000009a5 	.word	0x000009a5
                                Dio_FlipChannel( RGB_LED_BLUE );
     974:	2060      	movs	r0, #96	; 0x60
     976:	f005 ffa6 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     97a:	4957      	ldr	r1, [pc, #348]	; (ad8 <main+0x1dc>)
     97c:	2000      	movs	r0, #0
     97e:	f001 f88d 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     982:	e021      	b.n	9c8 <main+0xcc>
                                Dio_FlipChannel( RGB_LED_RED );
     984:	206f      	movs	r0, #111	; 0x6f
     986:	f005 ff9e 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     98a:	4954      	ldr	r1, [pc, #336]	; (adc <main+0x1e0>)
     98c:	2000      	movs	r0, #0
     98e:	f001 f885 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     992:	e019      	b.n	9c8 <main+0xcc>
                                Dio_FlipChannel( RGB_LED_GREEN );
     994:	2070      	movs	r0, #112	; 0x70
     996:	f005 ff96 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     99a:	4951      	ldr	r1, [pc, #324]	; (ae0 <main+0x1e4>)
     99c:	2000      	movs	r0, #0
     99e:	f001 f87d 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     9a2:	e011      	b.n	9c8 <main+0xcc>
                                Dio_WriteChannel( RGB_LED_BLUE, 0x01);
     9a4:	2101      	movs	r1, #1
     9a6:	2060      	movs	r0, #96	; 0x60
     9a8:	f005 ff78 	bl	689c <Dio_WriteChannel>
                                Dio_WriteChannel( RGB_LED_RED, 0x01);
     9ac:	2101      	movs	r1, #1
     9ae:	206f      	movs	r0, #111	; 0x6f
     9b0:	f005 ff74 	bl	689c <Dio_WriteChannel>
                                Dio_WriteChannel( RGB_LED_GREEN, 0x01);
     9b4:	2101      	movs	r1, #1
     9b6:	2070      	movs	r0, #112	; 0x70
     9b8:	f005 ff70 	bl	689c <Dio_WriteChannel>
                                SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     9bc:	4949      	ldr	r1, [pc, #292]	; (ae4 <main+0x1e8>)
     9be:	2000      	movs	r0, #0
     9c0:	f001 f86c 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     9c4:	e000      	b.n	9c8 <main+0xcc>
                            break;
     9c6:	bf00      	nop
                    break;
     9c8:	e07a      	b.n	ac0 <main+0x1c4>
                        switch( RealEvent )
     9ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
     9ce:	3b01      	subs	r3, #1
     9d0:	2b03      	cmp	r3, #3
     9d2:	d834      	bhi.n	a3e <main+0x142>
     9d4:	a201      	add	r2, pc, #4	; (adr r2, 9dc <main+0xe0>)
     9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9da:	bf00      	nop
     9dc:	000009ed 	.word	0x000009ed
     9e0:	000009fd 	.word	0x000009fd
     9e4:	00000a0d 	.word	0x00000a0d
     9e8:	00000a1d 	.word	0x00000a1d
                                Dio_FlipChannel( RGB_LED_BLUE );
     9ec:	2060      	movs	r0, #96	; 0x60
     9ee:	f005 ff6a 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     9f2:	493d      	ldr	r1, [pc, #244]	; (ae8 <main+0x1ec>)
     9f4:	2000      	movs	r0, #0
     9f6:	f001 f851 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     9fa:	e021      	b.n	a40 <main+0x144>
                                Dio_FlipChannel( RGB_LED_RED );
     9fc:	206f      	movs	r0, #111	; 0x6f
     9fe:	f005 ff62 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     a02:	493a      	ldr	r1, [pc, #232]	; (aec <main+0x1f0>)
     a04:	2000      	movs	r0, #0
     a06:	f001 f849 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     a0a:	e019      	b.n	a40 <main+0x144>
                                Dio_FlipChannel( RGB_LED_GREEN );
     a0c:	2070      	movs	r0, #112	; 0x70
     a0e:	f005 ff5a 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     a12:	4937      	ldr	r1, [pc, #220]	; (af0 <main+0x1f4>)
     a14:	2000      	movs	r0, #0
     a16:	f001 f841 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     a1a:	e011      	b.n	a40 <main+0x144>
                                Dio_WriteChannel( RGB_LED_BLUE, 0x01);
     a1c:	2101      	movs	r1, #1
     a1e:	2060      	movs	r0, #96	; 0x60
     a20:	f005 ff3c 	bl	689c <Dio_WriteChannel>
                                Dio_WriteChannel( RGB_LED_RED, 0x01);
     a24:	2101      	movs	r1, #1
     a26:	206f      	movs	r0, #111	; 0x6f
     a28:	f005 ff38 	bl	689c <Dio_WriteChannel>
                                Dio_WriteChannel( RGB_LED_GREEN, 0x01);
     a2c:	2101      	movs	r1, #1
     a2e:	2070      	movs	r0, #112	; 0x70
     a30:	f005 ff34 	bl	689c <Dio_WriteChannel>
                                SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     a34:	492f      	ldr	r1, [pc, #188]	; (af4 <main+0x1f8>)
     a36:	2000      	movs	r0, #0
     a38:	f001 f830 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     a3c:	e000      	b.n	a40 <main+0x144>
                            break;
     a3e:	bf00      	nop
                    break;
     a40:	e03e      	b.n	ac0 <main+0x1c4>
                        switch( RealEvent )
     a42:	f89d 3006 	ldrb.w	r3, [sp, #6]
     a46:	3b01      	subs	r3, #1
     a48:	2b03      	cmp	r3, #3
     a4a:	d834      	bhi.n	ab6 <main+0x1ba>
     a4c:	a201      	add	r2, pc, #4	; (adr r2, a54 <main+0x158>)
     a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a52:	bf00      	nop
     a54:	00000a65 	.word	0x00000a65
     a58:	00000a75 	.word	0x00000a75
     a5c:	00000a85 	.word	0x00000a85
     a60:	00000a95 	.word	0x00000a95
                                Dio_FlipChannel( RGB_LED_BLUE );
     a64:	2060      	movs	r0, #96	; 0x60
     a66:	f005 ff2e 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     a6a:	4923      	ldr	r1, [pc, #140]	; (af8 <main+0x1fc>)
     a6c:	2000      	movs	r0, #0
     a6e:	f001 f815 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     a72:	e021      	b.n	ab8 <main+0x1bc>
                                Dio_FlipChannel( RGB_LED_RED );
     a74:	206f      	movs	r0, #111	; 0x6f
     a76:	f005 ff26 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     a7a:	4920      	ldr	r1, [pc, #128]	; (afc <main+0x200>)
     a7c:	2000      	movs	r0, #0
     a7e:	f001 f80d 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     a82:	e019      	b.n	ab8 <main+0x1bc>
                                Dio_FlipChannel( RGB_LED_GREEN );
     a84:	2070      	movs	r0, #112	; 0x70
     a86:	f005 ff1e 	bl	68c6 <Dio_FlipChannel>
                                SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     a8a:	491d      	ldr	r1, [pc, #116]	; (b00 <main+0x204>)
     a8c:	2000      	movs	r0, #0
     a8e:	f001 f805 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     a92:	e011      	b.n	ab8 <main+0x1bc>
                                Dio_WriteChannel( RGB_LED_BLUE, 0x01);
     a94:	2101      	movs	r1, #1
     a96:	2060      	movs	r0, #96	; 0x60
     a98:	f005 ff00 	bl	689c <Dio_WriteChannel>
                                Dio_WriteChannel( RGB_LED_RED, 0x01);
     a9c:	2101      	movs	r1, #1
     a9e:	206f      	movs	r0, #111	; 0x6f
     aa0:	f005 fefc 	bl	689c <Dio_WriteChannel>
                                Dio_WriteChannel( RGB_LED_GREEN, 0x01);
     aa4:	2101      	movs	r1, #1
     aa6:	2070      	movs	r0, #112	; 0x70
     aa8:	f005 fef8 	bl	689c <Dio_WriteChannel>
                                SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     aac:	4915      	ldr	r1, [pc, #84]	; (b04 <main+0x208>)
     aae:	2000      	movs	r0, #0
     ab0:	f000 fff4 	bl	1a9c <SEGGER_RTT_printf>
                            break;
     ab4:	e000      	b.n	ab8 <main+0x1bc>
                            break;
     ab6:	bf00      	nop
                    break;
     ab8:	e002      	b.n	ac0 <main+0x1c4>
                }  
            }
     aba:	bf00      	nop
     abc:	e000      	b.n	ac0 <main+0x1c4>
                    break;
     abe:	bf00      	nop
        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ac4:	3301      	adds	r3, #1
     ac6:	f88d 3007 	strb.w	r3, [sp, #7]
     aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ace:	2b02      	cmp	r3, #2
     ad0:	f67f af26 	bls.w	920 <main+0x24>
        HwIoAb_Buttons_MainFunction();
     ad4:	e71b      	b.n	90e <main+0x12>
     ad6:	bf00      	nop
     ad8:	00008174 	.word	0x00008174
     adc:	00008194 	.word	0x00008194
     ae0:	000081b4 	.word	0x000081b4
     ae4:	000081d4 	.word	0x000081d4
     ae8:	000081f0 	.word	0x000081f0
     aec:	00008210 	.word	0x00008210
     af0:	00008230 	.word	0x00008230
     af4:	00008250 	.word	0x00008250
     af8:	0000826c 	.word	0x0000826c
     afc:	0000828c 	.word	0x0000828c
     b00:	000082ac 	.word	0x000082ac
     b04:	000082cc 	.word	0x000082cc

00000b08 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     b08:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     b0a:	480a      	ldr	r0, [pc, #40]	; (b34 <EcuM_Init+0x2c>)
     b0c:	f004 fd9a 	bl	5644 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     b10:	2000      	movs	r0, #0
     b12:	f004 fdeb 	bl	56ec <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     b16:	2000      	movs	r0, #0
     b18:	f004 fe0c 	bl	5734 <Mcu_SetMode>

    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     b1c:	2000      	movs	r0, #0
     b1e:	f000 fffb 	bl	1b18 <OsIf_Init>

    /* Apply all the Pin Port microcontroller configuration, for this case
    ports D0, D15 and D16 for RGB LEDs and A12, D17, E12 for Buttons. */
    Port_Init( &Port_Config );
     b22:	4805      	ldr	r0, [pc, #20]	; (b38 <EcuM_Init+0x30>)
     b24:	f005 f990 	bl	5e48 <Port_Init>

    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
     b28:	4804      	ldr	r0, [pc, #16]	; (b3c <EcuM_Init+0x34>)
     b2a:	f000 f825 	bl	b78 <HwIoAb_Buttons_Init>
}
     b2e:	bf00      	nop
     b30:	bd08      	pop	{r3, pc}
     b32:	bf00      	nop
     b34:	00008ebc 	.word	0x00008ebc
     b38:	00009110 	.word	0x00009110
     b3c:	00008aac 	.word	0x00008aac

00000b40 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     b40:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b42:	f3ef 8310 	mrs	r3, PRIMASK
     b46:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b48:	4623      	mov	r3, r4
}
     b4a:	4618      	mov	r0, r3
     b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
     b50:	4770      	bx	lr

00000b52 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     b52:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b54:	f3ef 8310 	mrs	r3, PRIMASK
     b58:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b5a:	4623      	mov	r3, r4
}
     b5c:	4618      	mov	r0, r3
     b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
     b62:	4770      	bx	lr

00000b64 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     b64:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     b66:	f3ef 8310 	mrs	r3, PRIMASK
     b6a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     b6c:	4623      	mov	r3, r4
}
     b6e:	4618      	mov	r0, r3
     b70:	f85d 4b04 	ldr.w	r4, [sp], #4
     b74:	4770      	bx	lr
	...

00000b78 <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     b78:	b084      	sub	sp, #16
     b7a:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     b7c:	4b16      	ldr	r3, [pc, #88]	; (bd8 <HwIoAb_Buttons_Init+0x60>)
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	2203      	movs	r2, #3
     b82:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     b84:	4b14      	ldr	r3, [pc, #80]	; (bd8 <HwIoAb_Buttons_Init+0x60>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	9a01      	ldr	r2, [sp, #4]
     b8a:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     b8c:	2300      	movs	r3, #0
     b8e:	f88d 300f 	strb.w	r3, [sp, #15]
     b92:	e012      	b.n	bba <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     b94:	4b10      	ldr	r3, [pc, #64]	; (bd8 <HwIoAb_Buttons_Init+0x60>)
     b96:	681a      	ldr	r2, [r3, #0]
     b98:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b9c:	4413      	add	r3, r2
     b9e:	2200      	movs	r2, #0
     ba0:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     ba2:	4b0d      	ldr	r3, [pc, #52]	; (bd8 <HwIoAb_Buttons_Init+0x60>)
     ba4:	681a      	ldr	r2, [r3, #0]
     ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     baa:	4413      	add	r3, r2
     bac:	2200      	movs	r2, #0
     bae:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     bb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bb4:	3301      	adds	r3, #1
     bb6:	f88d 300f 	strb.w	r3, [sp, #15]
     bba:	4b07      	ldr	r3, [pc, #28]	; (bd8 <HwIoAb_Buttons_Init+0x60>)
     bbc:	681b      	ldr	r3, [r3, #0]
     bbe:	781b      	ldrb	r3, [r3, #0]
     bc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     bc4:	429a      	cmp	r2, r3
     bc6:	d3e5      	bcc.n	b94 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     bc8:	4b03      	ldr	r3, [pc, #12]	; (bd8 <HwIoAb_Buttons_Init+0x60>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	2201      	movs	r2, #1
     bce:	739a      	strb	r2, [r3, #14]
}
     bd0:	bf00      	nop
     bd2:	b004      	add	sp, #16
     bd4:	4770      	bx	lr
     bd6:	bf00      	nop
     bd8:	1fff8b38 	.word	0x1fff8b38

00000bdc <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     bdc:	b084      	sub	sp, #16
     bde:	4603      	mov	r3, r0
     be0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     be4:	2300      	movs	r3, #0
     be6:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     bea:	4b0a      	ldr	r3, [pc, #40]	; (c14 <HwIoAb_Buttons_GetEvent+0x38>)
     bec:	681a      	ldr	r2, [r3, #0]
     bee:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bf2:	4413      	add	r3, r2
     bf4:	7adb      	ldrb	r3, [r3, #11]
     bf6:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     bfa:	4b06      	ldr	r3, [pc, #24]	; (c14 <HwIoAb_Buttons_GetEvent+0x38>)
     bfc:	681a      	ldr	r2, [r3, #0]
     bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c02:	4413      	add	r3, r2
     c04:	2200      	movs	r2, #0
     c06:	72da      	strb	r2, [r3, #11]
    return temp;
     c08:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c0c:	4618      	mov	r0, r3
     c0e:	b004      	add	sp, #16
     c10:	4770      	bx	lr
     c12:	bf00      	nop
     c14:	1fff8b38 	.word	0x1fff8b38

00000c18 <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     c18:	b500      	push	{lr}
     c1a:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     c1c:	2300      	movs	r3, #0
     c1e:	f88d 3007 	strb.w	r3, [sp, #7]
     c22:	e15d      	b.n	ee0 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     c24:	4bb5      	ldr	r3, [pc, #724]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c26:	681a      	ldr	r2, [r3, #0]
     c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c2c:	4413      	add	r3, r2
     c2e:	7a1b      	ldrb	r3, [r3, #8]
     c30:	2b04      	cmp	r3, #4
     c32:	f200 8145 	bhi.w	ec0 <HwIoAb_Buttons_MainFunction+0x2a8>
     c36:	a201      	add	r2, pc, #4	; (adr r2, c3c <HwIoAb_Buttons_MainFunction+0x24>)
     c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c3c:	00000c51 	.word	0x00000c51
     c40:	00000c9d 	.word	0x00000c9d
     c44:	00000dc5 	.word	0x00000dc5
     c48:	00000e5d 	.word	0x00000e5d
     c4c:	00000d29 	.word	0x00000d29
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     c50:	4baa      	ldr	r3, [pc, #680]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c52:	681b      	ldr	r3, [r3, #0]
     c54:	685a      	ldr	r2, [r3, #4]
     c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c5a:	00db      	lsls	r3, r3, #3
     c5c:	4413      	add	r3, r2
     c5e:	881b      	ldrh	r3, [r3, #0]
     c60:	4618      	mov	r0, r3
     c62:	f005 fe05 	bl	6870 <Dio_ReadChannel>
     c66:	4603      	mov	r3, r0
     c68:	4619      	mov	r1, r3
     c6a:	4ba4      	ldr	r3, [pc, #656]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	685a      	ldr	r2, [r3, #4]
     c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c74:	00db      	lsls	r3, r3, #3
     c76:	4413      	add	r3, r2
     c78:	789b      	ldrb	r3, [r3, #2]
     c7a:	4299      	cmp	r1, r3
     c7c:	f040 8122 	bne.w	ec4 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c84:	4a9e      	ldr	r2, [pc, #632]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     c86:	2100      	movs	r1, #0
     c88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     c8c:	4b9b      	ldr	r3, [pc, #620]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     c8e:	681a      	ldr	r2, [r3, #0]
     c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c94:	4413      	add	r3, r2
     c96:	2201      	movs	r2, #1
     c98:	721a      	strb	r2, [r3, #8]

                }
            break;
     c9a:	e113      	b.n	ec4 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ca0:	4a97      	ldr	r2, [pc, #604]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     ca2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     ca6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     caa:	320a      	adds	r2, #10
     cac:	4994      	ldr	r1, [pc, #592]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cb6:	4a92      	ldr	r2, [pc, #584]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     cb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     cbc:	4b8f      	ldr	r3, [pc, #572]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	6859      	ldr	r1, [r3, #4]
     cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cc6:	00db      	lsls	r3, r3, #3
     cc8:	440b      	add	r3, r1
     cca:	685b      	ldr	r3, [r3, #4]
     ccc:	429a      	cmp	r2, r3
     cce:	d106      	bne.n	cde <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     cd0:	4b8a      	ldr	r3, [pc, #552]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cd2:	681a      	ldr	r2, [r3, #0]
     cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd8:	4413      	add	r3, r2
     cda:	2203      	movs	r2, #3
     cdc:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     cde:	4b87      	ldr	r3, [pc, #540]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	685a      	ldr	r2, [r3, #4]
     ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ce8:	00db      	lsls	r3, r3, #3
     cea:	4413      	add	r3, r2
     cec:	881b      	ldrh	r3, [r3, #0]
     cee:	4618      	mov	r0, r3
     cf0:	f005 fdbe 	bl	6870 <Dio_ReadChannel>
     cf4:	4603      	mov	r3, r0
     cf6:	4619      	mov	r1, r3
     cf8:	4b80      	ldr	r3, [pc, #512]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     cfa:	681b      	ldr	r3, [r3, #0]
     cfc:	685a      	ldr	r2, [r3, #4]
     cfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d02:	00db      	lsls	r3, r3, #3
     d04:	4413      	add	r3, r2
     d06:	789b      	ldrb	r3, [r3, #2]
     d08:	2b00      	cmp	r3, #0
     d0a:	bf0c      	ite	eq
     d0c:	2301      	moveq	r3, #1
     d0e:	2300      	movne	r3, #0
     d10:	b2db      	uxtb	r3, r3
     d12:	4299      	cmp	r1, r3
     d14:	f040 80d8 	bne.w	ec8 <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     d18:	4b78      	ldr	r3, [pc, #480]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d1a:	681a      	ldr	r2, [r3, #0]
     d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d20:	4413      	add	r3, r2
     d22:	2204      	movs	r2, #4
     d24:	721a      	strb	r2, [r3, #8]
                }    
            break;
     d26:	e0cf      	b.n	ec8 <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     d28:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d2c:	4a74      	ldr	r2, [pc, #464]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d36:	320a      	adds	r2, #10
     d38:	4971      	ldr	r1, [pc, #452]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d42:	4a6f      	ldr	r2, [pc, #444]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     d48:	4b6c      	ldr	r3, [pc, #432]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	6859      	ldr	r1, [r3, #4]
     d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d52:	00db      	lsls	r3, r3, #3
     d54:	440b      	add	r3, r1
     d56:	685b      	ldr	r3, [r3, #4]
     d58:	429a      	cmp	r2, r3
     d5a:	d10d      	bne.n	d78 <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     d5c:	4b67      	ldr	r3, [pc, #412]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d5e:	681a      	ldr	r2, [r3, #0]
     d60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d64:	4413      	add	r3, r2
     d66:	2201      	movs	r2, #1
     d68:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     d6a:	4b64      	ldr	r3, [pc, #400]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d6c:	681a      	ldr	r2, [r3, #0]
     d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d72:	4413      	add	r3, r2
     d74:	2200      	movs	r2, #0
     d76:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     d78:	4b60      	ldr	r3, [pc, #384]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	685a      	ldr	r2, [r3, #4]
     d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d82:	00db      	lsls	r3, r3, #3
     d84:	4413      	add	r3, r2
     d86:	881b      	ldrh	r3, [r3, #0]
     d88:	4618      	mov	r0, r3
     d8a:	f005 fd71 	bl	6870 <Dio_ReadChannel>
     d8e:	4603      	mov	r3, r0
     d90:	4619      	mov	r1, r3
     d92:	4b5a      	ldr	r3, [pc, #360]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	685a      	ldr	r2, [r3, #4]
     d98:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d9c:	00db      	lsls	r3, r3, #3
     d9e:	4413      	add	r3, r2
     da0:	789b      	ldrb	r3, [r3, #2]
     da2:	4299      	cmp	r1, r3
     da4:	f040 8092 	bne.w	ecc <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     da8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dac:	4a54      	ldr	r2, [pc, #336]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dae:	2100      	movs	r1, #0
     db0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     db4:	4b51      	ldr	r3, [pc, #324]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     db6:	681a      	ldr	r2, [r3, #0]
     db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dbc:	4413      	add	r3, r2
     dbe:	2202      	movs	r2, #2
     dc0:	721a      	strb	r2, [r3, #8]
                } 
            break;
     dc2:	e083      	b.n	ecc <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc8:	4a4d      	ldr	r2, [pc, #308]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     dce:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dd2:	320a      	adds	r2, #10
     dd4:	494a      	ldr	r1, [pc, #296]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     dda:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dde:	4a48      	ldr	r2, [pc, #288]	; (f00 <HwIoAb_Buttons_MainFunction+0x2e8>)
     de0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     de4:	4b45      	ldr	r3, [pc, #276]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	6859      	ldr	r1, [r3, #4]
     dea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dee:	00db      	lsls	r3, r3, #3
     df0:	440b      	add	r3, r1
     df2:	685b      	ldr	r3, [r3, #4]
     df4:	429a      	cmp	r2, r3
     df6:	d106      	bne.n	e06 <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     df8:	4b40      	ldr	r3, [pc, #256]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     dfa:	681a      	ldr	r2, [r3, #0]
     dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e00:	4413      	add	r3, r2
     e02:	2203      	movs	r2, #3
     e04:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e06:	4b3d      	ldr	r3, [pc, #244]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	685a      	ldr	r2, [r3, #4]
     e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e10:	00db      	lsls	r3, r3, #3
     e12:	4413      	add	r3, r2
     e14:	881b      	ldrh	r3, [r3, #0]
     e16:	4618      	mov	r0, r3
     e18:	f005 fd2a 	bl	6870 <Dio_ReadChannel>
     e1c:	4603      	mov	r3, r0
     e1e:	4619      	mov	r1, r3
     e20:	4b36      	ldr	r3, [pc, #216]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	685a      	ldr	r2, [r3, #4]
     e26:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e2a:	00db      	lsls	r3, r3, #3
     e2c:	4413      	add	r3, r2
     e2e:	789b      	ldrb	r3, [r3, #2]
     e30:	2b00      	cmp	r3, #0
     e32:	bf0c      	ite	eq
     e34:	2301      	moveq	r3, #1
     e36:	2300      	movne	r3, #0
     e38:	b2db      	uxtb	r3, r3
     e3a:	4299      	cmp	r1, r3
     e3c:	d148      	bne.n	ed0 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     e3e:	4b2f      	ldr	r3, [pc, #188]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e40:	681a      	ldr	r2, [r3, #0]
     e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e46:	4413      	add	r3, r2
     e48:	2202      	movs	r2, #2
     e4a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     e4c:	4b2b      	ldr	r3, [pc, #172]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e4e:	681a      	ldr	r2, [r3, #0]
     e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e54:	4413      	add	r3, r2
     e56:	2200      	movs	r2, #0
     e58:	721a      	strb	r2, [r3, #8]
                } 
            break;
     e5a:	e039      	b.n	ed0 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     e5c:	4b27      	ldr	r3, [pc, #156]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e5e:	681a      	ldr	r2, [r3, #0]
     e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e64:	4413      	add	r3, r2
     e66:	2203      	movs	r2, #3
     e68:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e6a:	4b24      	ldr	r3, [pc, #144]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e6c:	681b      	ldr	r3, [r3, #0]
     e6e:	685a      	ldr	r2, [r3, #4]
     e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e74:	00db      	lsls	r3, r3, #3
     e76:	4413      	add	r3, r2
     e78:	881b      	ldrh	r3, [r3, #0]
     e7a:	4618      	mov	r0, r3
     e7c:	f005 fcf8 	bl	6870 <Dio_ReadChannel>
     e80:	4603      	mov	r3, r0
     e82:	4619      	mov	r1, r3
     e84:	4b1d      	ldr	r3, [pc, #116]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	685a      	ldr	r2, [r3, #4]
     e8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e8e:	00db      	lsls	r3, r3, #3
     e90:	4413      	add	r3, r2
     e92:	789b      	ldrb	r3, [r3, #2]
     e94:	2b00      	cmp	r3, #0
     e96:	bf0c      	ite	eq
     e98:	2301      	moveq	r3, #1
     e9a:	2300      	movne	r3, #0
     e9c:	b2db      	uxtb	r3, r3
     e9e:	4299      	cmp	r1, r3
     ea0:	d118      	bne.n	ed4 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     ea2:	4b16      	ldr	r3, [pc, #88]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     ea4:	681a      	ldr	r2, [r3, #0]
     ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eaa:	4413      	add	r3, r2
     eac:	2204      	movs	r2, #4
     eae:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     eb0:	4b12      	ldr	r3, [pc, #72]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     eb2:	681a      	ldr	r2, [r3, #0]
     eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eb8:	4413      	add	r3, r2
     eba:	2200      	movs	r2, #0
     ebc:	721a      	strb	r2, [r3, #8]
                }
            break;
     ebe:	e009      	b.n	ed4 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
     ec0:	bf00      	nop
     ec2:	e008      	b.n	ed6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ec4:	bf00      	nop
     ec6:	e006      	b.n	ed6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ec8:	bf00      	nop
     eca:	e004      	b.n	ed6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ecc:	bf00      	nop
     ece:	e002      	b.n	ed6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ed0:	bf00      	nop
     ed2:	e000      	b.n	ed6 <HwIoAb_Buttons_MainFunction+0x2be>
            break;
     ed4:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eda:	3301      	adds	r3, #1
     edc:	f88d 3007 	strb.w	r3, [sp, #7]
     ee0:	4b06      	ldr	r3, [pc, #24]	; (efc <HwIoAb_Buttons_MainFunction+0x2e4>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     eea:	429a      	cmp	r2, r3
     eec:	f4ff ae9a 	bcc.w	c24 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
     ef0:	bf00      	nop
     ef2:	bf00      	nop
     ef4:	b003      	add	sp, #12
     ef6:	f85d fb04 	ldr.w	pc, [sp], #4
     efa:	bf00      	nop
     efc:	1fff8b38 	.word	0x1fff8b38
     f00:	1fff8e10 	.word	0x1fff8e10

00000f04 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     f04:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     f06:	2300      	movs	r3, #0
     f08:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     f0a:	2300      	movs	r3, #0
     f0c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     f0e:	2300      	movs	r3, #0
     f10:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     f12:	2300      	movs	r3, #0
     f14:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     f16:	4b44      	ldr	r3, [pc, #272]	; (1028 <init_data_bss+0x124>)
     f18:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     f1a:	4b44      	ldr	r3, [pc, #272]	; (102c <init_data_bss+0x128>)
     f1c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     f1e:	9b05      	ldr	r3, [sp, #20]
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     f24:	9b05      	ldr	r3, [sp, #20]
     f26:	3304      	adds	r3, #4
     f28:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     f2a:	9b05      	ldr	r3, [sp, #20]
     f2c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     f2e:	2300      	movs	r3, #0
     f30:	9309      	str	r3, [sp, #36]	; 0x24
     f32:	e03d      	b.n	fb0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f36:	4613      	mov	r3, r2
     f38:	005b      	lsls	r3, r3, #1
     f3a:	4413      	add	r3, r2
     f3c:	009b      	lsls	r3, r3, #2
     f3e:	461a      	mov	r2, r3
     f40:	9b03      	ldr	r3, [sp, #12]
     f42:	4413      	add	r3, r2
     f44:	685b      	ldr	r3, [r3, #4]
     f46:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f4a:	4613      	mov	r3, r2
     f4c:	005b      	lsls	r3, r3, #1
     f4e:	4413      	add	r3, r2
     f50:	009b      	lsls	r3, r3, #2
     f52:	461a      	mov	r2, r3
     f54:	9b03      	ldr	r3, [sp, #12]
     f56:	4413      	add	r3, r2
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f5e:	4613      	mov	r3, r2
     f60:	005b      	lsls	r3, r3, #1
     f62:	4413      	add	r3, r2
     f64:	009b      	lsls	r3, r3, #2
     f66:	461a      	mov	r2, r3
     f68:	9b03      	ldr	r3, [sp, #12]
     f6a:	4413      	add	r3, r2
     f6c:	689b      	ldr	r3, [r3, #8]
     f6e:	4619      	mov	r1, r3
     f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f72:	4613      	mov	r3, r2
     f74:	005b      	lsls	r3, r3, #1
     f76:	4413      	add	r3, r2
     f78:	009b      	lsls	r3, r3, #2
     f7a:	461a      	mov	r2, r3
     f7c:	9b03      	ldr	r3, [sp, #12]
     f7e:	4413      	add	r3, r2
     f80:	685b      	ldr	r3, [r3, #4]
     f82:	1acb      	subs	r3, r1, r3
     f84:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     f86:	2300      	movs	r3, #0
     f88:	9308      	str	r3, [sp, #32]
     f8a:	e00a      	b.n	fa2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     f8c:	9a00      	ldr	r2, [sp, #0]
     f8e:	9b08      	ldr	r3, [sp, #32]
     f90:	441a      	add	r2, r3
     f92:	9901      	ldr	r1, [sp, #4]
     f94:	9b08      	ldr	r3, [sp, #32]
     f96:	440b      	add	r3, r1
     f98:	7812      	ldrb	r2, [r2, #0]
     f9a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     f9c:	9b08      	ldr	r3, [sp, #32]
     f9e:	3301      	adds	r3, #1
     fa0:	9308      	str	r3, [sp, #32]
     fa2:	9a08      	ldr	r2, [sp, #32]
     fa4:	9b06      	ldr	r3, [sp, #24]
     fa6:	429a      	cmp	r2, r3
     fa8:	d3f0      	bcc.n	f8c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fac:	3301      	adds	r3, #1
     fae:	9309      	str	r3, [sp, #36]	; 0x24
     fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fb2:	9b07      	ldr	r3, [sp, #28]
     fb4:	429a      	cmp	r2, r3
     fb6:	d3bd      	bcc.n	f34 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     fb8:	9b04      	ldr	r3, [sp, #16]
     fba:	681b      	ldr	r3, [r3, #0]
     fbc:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     fbe:	9b04      	ldr	r3, [sp, #16]
     fc0:	3304      	adds	r3, #4
     fc2:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     fc4:	9b04      	ldr	r3, [sp, #16]
     fc6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     fc8:	2300      	movs	r3, #0
     fca:	9309      	str	r3, [sp, #36]	; 0x24
     fcc:	e024      	b.n	1018 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fd0:	00db      	lsls	r3, r3, #3
     fd2:	9a02      	ldr	r2, [sp, #8]
     fd4:	4413      	add	r3, r2
     fd6:	681b      	ldr	r3, [r3, #0]
     fd8:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fdc:	00db      	lsls	r3, r3, #3
     fde:	9a02      	ldr	r2, [sp, #8]
     fe0:	4413      	add	r3, r2
     fe2:	685b      	ldr	r3, [r3, #4]
     fe4:	4619      	mov	r1, r3
     fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe8:	00db      	lsls	r3, r3, #3
     fea:	9a02      	ldr	r2, [sp, #8]
     fec:	4413      	add	r3, r2
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	1acb      	subs	r3, r1, r3
     ff2:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     ff4:	2300      	movs	r3, #0
     ff6:	9308      	str	r3, [sp, #32]
     ff8:	e007      	b.n	100a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     ffa:	9a01      	ldr	r2, [sp, #4]
     ffc:	9b08      	ldr	r3, [sp, #32]
     ffe:	4413      	add	r3, r2
    1000:	2200      	movs	r2, #0
    1002:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1004:	9b08      	ldr	r3, [sp, #32]
    1006:	3301      	adds	r3, #1
    1008:	9308      	str	r3, [sp, #32]
    100a:	9a08      	ldr	r2, [sp, #32]
    100c:	9b06      	ldr	r3, [sp, #24]
    100e:	429a      	cmp	r2, r3
    1010:	d3f3      	bcc.n	ffa <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1012:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1014:	3301      	adds	r3, #1
    1016:	9309      	str	r3, [sp, #36]	; 0x24
    1018:	9a09      	ldr	r2, [sp, #36]	; 0x24
    101a:	9b07      	ldr	r3, [sp, #28]
    101c:	429a      	cmp	r2, r3
    101e:	d3d6      	bcc.n	fce <init_data_bss+0xca>
        }
    }
}
    1020:	bf00      	nop
    1022:	bf00      	nop
    1024:	b00a      	add	sp, #40	; 0x28
    1026:	4770      	bx	lr
    1028:	00009180 	.word	0x00009180
    102c:	0000919c 	.word	0x0000919c

00001030 <sys_m4_cache_init>:
{
    1030:	b084      	sub	sp, #16
    1032:	4603      	mov	r3, r0
    1034:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1038:	2300      	movs	r3, #0
    103a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    103e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1042:	2b00      	cmp	r3, #0
    1044:	d118      	bne.n	1078 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1046:	4b10      	ldr	r3, [pc, #64]	; (1088 <sys_m4_cache_init+0x58>)
    1048:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    104c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    104e:	4b0e      	ldr	r3, [pc, #56]	; (1088 <sys_m4_cache_init+0x58>)
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	4a0d      	ldr	r2, [pc, #52]	; (1088 <sys_m4_cache_init+0x58>)
    1054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1058:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    105a:	bf00      	nop
    105c:	4b0a      	ldr	r3, [pc, #40]	; (1088 <sys_m4_cache_init+0x58>)
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1068:	d0f8      	beq.n	105c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    106a:	4b07      	ldr	r3, [pc, #28]	; (1088 <sys_m4_cache_init+0x58>)
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	4a06      	ldr	r2, [pc, #24]	; (1088 <sys_m4_cache_init+0x58>)
    1070:	f043 0301 	orr.w	r3, r3, #1
    1074:	6013      	str	r3, [r2, #0]
    1076:	e002      	b.n	107e <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1078:	2301      	movs	r3, #1
    107a:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    107e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1082:	4618      	mov	r0, r3
    1084:	b004      	add	sp, #16
    1086:	4770      	bx	lr
    1088:	e0082000 	.word	0xe0082000

0000108c <startup_go_to_user_mode>:
}
    108c:	bf00      	nop
    108e:	4770      	bx	lr

00001090 <Sys_GetCoreID>:
    return 0U;
    1090:	2300      	movs	r3, #0
}
    1092:	4618      	mov	r0, r3
    1094:	4770      	bx	lr

00001096 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1096:	e7fe      	b.n	1096 <HardFault_Handler>

00001098 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1098:	e7fe      	b.n	1098 <MemManage_Handler>

0000109a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    109a:	e7fe      	b.n	109a <BusFault_Handler>

0000109c <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    109c:	e7fe      	b.n	109c <UsageFault_Handler>

0000109e <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    109e:	e7fe      	b.n	109e <SVC_Handler>

000010a0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    10a0:	e7fe      	b.n	10a0 <DebugMon_Handler>

000010a2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    10a2:	e7fe      	b.n	10a2 <PendSV_Handler>

000010a4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    10a4:	e7fe      	b.n	10a4 <SysTick_Handler>

000010a6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    10a6:	e7fe      	b.n	10a6 <undefined_handler>

000010a8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    10a8:	b500      	push	{lr}
    10aa:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    10ac:	4b26      	ldr	r3, [pc, #152]	; (1148 <_DoInit+0xa0>)
    10ae:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    10b0:	22a8      	movs	r2, #168	; 0xa8
    10b2:	2100      	movs	r1, #0
    10b4:	9800      	ldr	r0, [sp, #0]
    10b6:	f000 fd13 	bl	1ae0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    10ba:	9b00      	ldr	r3, [sp, #0]
    10bc:	2203      	movs	r2, #3
    10be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    10c0:	9b00      	ldr	r3, [sp, #0]
    10c2:	2203      	movs	r2, #3
    10c4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    10c6:	9b00      	ldr	r3, [sp, #0]
    10c8:	4a20      	ldr	r2, [pc, #128]	; (114c <_DoInit+0xa4>)
    10ca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    10cc:	9b00      	ldr	r3, [sp, #0]
    10ce:	4a20      	ldr	r2, [pc, #128]	; (1150 <_DoInit+0xa8>)
    10d0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    10d2:	9b00      	ldr	r3, [sp, #0]
    10d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    10d8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    10da:	9b00      	ldr	r3, [sp, #0]
    10dc:	2200      	movs	r2, #0
    10de:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    10e0:	9b00      	ldr	r3, [sp, #0]
    10e2:	2200      	movs	r2, #0
    10e4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    10e6:	9b00      	ldr	r3, [sp, #0]
    10e8:	2200      	movs	r2, #0
    10ea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    10ec:	9b00      	ldr	r3, [sp, #0]
    10ee:	4a17      	ldr	r2, [pc, #92]	; (114c <_DoInit+0xa4>)
    10f0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    10f2:	9b00      	ldr	r3, [sp, #0]
    10f4:	4a17      	ldr	r2, [pc, #92]	; (1154 <_DoInit+0xac>)
    10f6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    10f8:	9b00      	ldr	r3, [sp, #0]
    10fa:	2210      	movs	r2, #16
    10fc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    10fe:	9b00      	ldr	r3, [sp, #0]
    1100:	2200      	movs	r2, #0
    1102:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1104:	9b00      	ldr	r3, [sp, #0]
    1106:	2200      	movs	r2, #0
    1108:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    110a:	9b00      	ldr	r3, [sp, #0]
    110c:	2200      	movs	r2, #0
    110e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1110:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1114:	2300      	movs	r3, #0
    1116:	9301      	str	r3, [sp, #4]
    1118:	e00c      	b.n	1134 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    111a:	9b01      	ldr	r3, [sp, #4]
    111c:	f1c3 030f 	rsb	r3, r3, #15
    1120:	4a0d      	ldr	r2, [pc, #52]	; (1158 <_DoInit+0xb0>)
    1122:	5cd1      	ldrb	r1, [r2, r3]
    1124:	9a00      	ldr	r2, [sp, #0]
    1126:	9b01      	ldr	r3, [sp, #4]
    1128:	4413      	add	r3, r2
    112a:	460a      	mov	r2, r1
    112c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    112e:	9b01      	ldr	r3, [sp, #4]
    1130:	3301      	adds	r3, #1
    1132:	9301      	str	r3, [sp, #4]
    1134:	9b01      	ldr	r3, [sp, #4]
    1136:	2b0f      	cmp	r3, #15
    1138:	d9ef      	bls.n	111a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    113a:	f3bf 8f5f 	dmb	sy
}
    113e:	bf00      	nop
    1140:	b003      	add	sp, #12
    1142:	f85d fb04 	ldr.w	pc, [sp], #4
    1146:	bf00      	nop
    1148:	1fff8e20 	.word	0x1fff8e20
    114c:	000082e8 	.word	0x000082e8
    1150:	1fff8ec8 	.word	0x1fff8ec8
    1154:	1fff92c8 	.word	0x1fff92c8
    1158:	0000915c 	.word	0x0000915c

0000115c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    115c:	b500      	push	{lr}
    115e:	b08b      	sub	sp, #44	; 0x2c
    1160:	9003      	str	r0, [sp, #12]
    1162:	9102      	str	r1, [sp, #8]
    1164:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1166:	2300      	movs	r3, #0
    1168:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    116a:	9b03      	ldr	r3, [sp, #12]
    116c:	68db      	ldr	r3, [r3, #12]
    116e:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1170:	9b03      	ldr	r3, [sp, #12]
    1172:	691b      	ldr	r3, [r3, #16]
    1174:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    1176:	9a06      	ldr	r2, [sp, #24]
    1178:	9b07      	ldr	r3, [sp, #28]
    117a:	429a      	cmp	r2, r3
    117c:	d905      	bls.n	118a <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    117e:	9a06      	ldr	r2, [sp, #24]
    1180:	9b07      	ldr	r3, [sp, #28]
    1182:	1ad3      	subs	r3, r2, r3
    1184:	3b01      	subs	r3, #1
    1186:	9309      	str	r3, [sp, #36]	; 0x24
    1188:	e007      	b.n	119a <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    118a:	9b03      	ldr	r3, [sp, #12]
    118c:	689a      	ldr	r2, [r3, #8]
    118e:	9906      	ldr	r1, [sp, #24]
    1190:	9b07      	ldr	r3, [sp, #28]
    1192:	1acb      	subs	r3, r1, r3
    1194:	4413      	add	r3, r2
    1196:	3b01      	subs	r3, #1
    1198:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    119a:	9b03      	ldr	r3, [sp, #12]
    119c:	689a      	ldr	r2, [r3, #8]
    119e:	9b07      	ldr	r3, [sp, #28]
    11a0:	1ad3      	subs	r3, r2, r3
    11a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11a4:	4293      	cmp	r3, r2
    11a6:	bf28      	it	cs
    11a8:	4613      	movcs	r3, r2
    11aa:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    11ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11ae:	9b01      	ldr	r3, [sp, #4]
    11b0:	4293      	cmp	r3, r2
    11b2:	bf28      	it	cs
    11b4:	4613      	movcs	r3, r2
    11b6:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    11b8:	9b03      	ldr	r3, [sp, #12]
    11ba:	685a      	ldr	r2, [r3, #4]
    11bc:	9b07      	ldr	r3, [sp, #28]
    11be:	4413      	add	r3, r2
    11c0:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    11c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11c4:	9902      	ldr	r1, [sp, #8]
    11c6:	9805      	ldr	r0, [sp, #20]
    11c8:	f000 fc7c 	bl	1ac4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    11cc:	9a08      	ldr	r2, [sp, #32]
    11ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11d0:	4413      	add	r3, r2
    11d2:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    11d4:	9a02      	ldr	r2, [sp, #8]
    11d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11d8:	4413      	add	r3, r2
    11da:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    11dc:	9a01      	ldr	r2, [sp, #4]
    11de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11e0:	1ad3      	subs	r3, r2, r3
    11e2:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    11e4:	9a07      	ldr	r2, [sp, #28]
    11e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11e8:	4413      	add	r3, r2
    11ea:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    11ec:	9b03      	ldr	r3, [sp, #12]
    11ee:	689b      	ldr	r3, [r3, #8]
    11f0:	9a07      	ldr	r2, [sp, #28]
    11f2:	429a      	cmp	r2, r3
    11f4:	d101      	bne.n	11fa <_WriteBlocking+0x9e>
      WrOff = 0u;
    11f6:	2300      	movs	r3, #0
    11f8:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    11fa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    11fe:	9b03      	ldr	r3, [sp, #12]
    1200:	9a07      	ldr	r2, [sp, #28]
    1202:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1204:	9b01      	ldr	r3, [sp, #4]
    1206:	2b00      	cmp	r3, #0
    1208:	d1b2      	bne.n	1170 <_WriteBlocking+0x14>
  return NumBytesWritten;
    120a:	9b08      	ldr	r3, [sp, #32]
}
    120c:	4618      	mov	r0, r3
    120e:	b00b      	add	sp, #44	; 0x2c
    1210:	f85d fb04 	ldr.w	pc, [sp], #4

00001214 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1214:	b500      	push	{lr}
    1216:	b089      	sub	sp, #36	; 0x24
    1218:	9003      	str	r0, [sp, #12]
    121a:	9102      	str	r1, [sp, #8]
    121c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    121e:	9b03      	ldr	r3, [sp, #12]
    1220:	68db      	ldr	r3, [r3, #12]
    1222:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1224:	9b03      	ldr	r3, [sp, #12]
    1226:	689a      	ldr	r2, [r3, #8]
    1228:	9b07      	ldr	r3, [sp, #28]
    122a:	1ad3      	subs	r3, r2, r3
    122c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    122e:	9a06      	ldr	r2, [sp, #24]
    1230:	9b01      	ldr	r3, [sp, #4]
    1232:	429a      	cmp	r2, r3
    1234:	d911      	bls.n	125a <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1236:	9b03      	ldr	r3, [sp, #12]
    1238:	685a      	ldr	r2, [r3, #4]
    123a:	9b07      	ldr	r3, [sp, #28]
    123c:	4413      	add	r3, r2
    123e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1240:	9a01      	ldr	r2, [sp, #4]
    1242:	9902      	ldr	r1, [sp, #8]
    1244:	9804      	ldr	r0, [sp, #16]
    1246:	f000 fc3d 	bl	1ac4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    124a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    124e:	9a07      	ldr	r2, [sp, #28]
    1250:	9b01      	ldr	r3, [sp, #4]
    1252:	441a      	add	r2, r3
    1254:	9b03      	ldr	r3, [sp, #12]
    1256:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1258:	e01f      	b.n	129a <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    125a:	9b06      	ldr	r3, [sp, #24]
    125c:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    125e:	9b03      	ldr	r3, [sp, #12]
    1260:	685a      	ldr	r2, [r3, #4]
    1262:	9b07      	ldr	r3, [sp, #28]
    1264:	4413      	add	r3, r2
    1266:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1268:	9a05      	ldr	r2, [sp, #20]
    126a:	9902      	ldr	r1, [sp, #8]
    126c:	9804      	ldr	r0, [sp, #16]
    126e:	f000 fc29 	bl	1ac4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1272:	9a01      	ldr	r2, [sp, #4]
    1274:	9b06      	ldr	r3, [sp, #24]
    1276:	1ad3      	subs	r3, r2, r3
    1278:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    127a:	9b03      	ldr	r3, [sp, #12]
    127c:	685b      	ldr	r3, [r3, #4]
    127e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1280:	9a02      	ldr	r2, [sp, #8]
    1282:	9b06      	ldr	r3, [sp, #24]
    1284:	4413      	add	r3, r2
    1286:	9a05      	ldr	r2, [sp, #20]
    1288:	4619      	mov	r1, r3
    128a:	9804      	ldr	r0, [sp, #16]
    128c:	f000 fc1a 	bl	1ac4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1290:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1294:	9b03      	ldr	r3, [sp, #12]
    1296:	9a05      	ldr	r2, [sp, #20]
    1298:	60da      	str	r2, [r3, #12]
}
    129a:	bf00      	nop
    129c:	b009      	add	sp, #36	; 0x24
    129e:	f85d fb04 	ldr.w	pc, [sp], #4

000012a2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    12a2:	b086      	sub	sp, #24
    12a4:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    12a6:	9b01      	ldr	r3, [sp, #4]
    12a8:	691b      	ldr	r3, [r3, #16]
    12aa:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    12ac:	9b01      	ldr	r3, [sp, #4]
    12ae:	68db      	ldr	r3, [r3, #12]
    12b0:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    12b2:	9a04      	ldr	r2, [sp, #16]
    12b4:	9b03      	ldr	r3, [sp, #12]
    12b6:	429a      	cmp	r2, r3
    12b8:	d808      	bhi.n	12cc <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    12ba:	9b01      	ldr	r3, [sp, #4]
    12bc:	689a      	ldr	r2, [r3, #8]
    12be:	9b03      	ldr	r3, [sp, #12]
    12c0:	1ad2      	subs	r2, r2, r3
    12c2:	9b04      	ldr	r3, [sp, #16]
    12c4:	4413      	add	r3, r2
    12c6:	3b01      	subs	r3, #1
    12c8:	9305      	str	r3, [sp, #20]
    12ca:	e004      	b.n	12d6 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    12cc:	9a04      	ldr	r2, [sp, #16]
    12ce:	9b03      	ldr	r3, [sp, #12]
    12d0:	1ad3      	subs	r3, r2, r3
    12d2:	3b01      	subs	r3, #1
    12d4:	9305      	str	r3, [sp, #20]
  }
  return r;
    12d6:	9b05      	ldr	r3, [sp, #20]
}
    12d8:	4618      	mov	r0, r3
    12da:	b006      	add	sp, #24
    12dc:	4770      	bx	lr
	...

000012e0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    12e0:	b500      	push	{lr}
    12e2:	b089      	sub	sp, #36	; 0x24
    12e4:	9003      	str	r0, [sp, #12]
    12e6:	9102      	str	r1, [sp, #8]
    12e8:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    12ea:	9b02      	ldr	r3, [sp, #8]
    12ec:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    12ee:	9b03      	ldr	r3, [sp, #12]
    12f0:	1c5a      	adds	r2, r3, #1
    12f2:	4613      	mov	r3, r2
    12f4:	005b      	lsls	r3, r3, #1
    12f6:	4413      	add	r3, r2
    12f8:	00db      	lsls	r3, r3, #3
    12fa:	4a20      	ldr	r2, [pc, #128]	; (137c <SEGGER_RTT_WriteNoLock+0x9c>)
    12fc:	4413      	add	r3, r2
    12fe:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1300:	9b05      	ldr	r3, [sp, #20]
    1302:	695b      	ldr	r3, [r3, #20]
    1304:	2b02      	cmp	r3, #2
    1306:	d029      	beq.n	135c <SEGGER_RTT_WriteNoLock+0x7c>
    1308:	2b02      	cmp	r3, #2
    130a:	d82e      	bhi.n	136a <SEGGER_RTT_WriteNoLock+0x8a>
    130c:	2b00      	cmp	r3, #0
    130e:	d002      	beq.n	1316 <SEGGER_RTT_WriteNoLock+0x36>
    1310:	2b01      	cmp	r3, #1
    1312:	d013      	beq.n	133c <SEGGER_RTT_WriteNoLock+0x5c>
    1314:	e029      	b.n	136a <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1316:	9805      	ldr	r0, [sp, #20]
    1318:	f7ff ffc3 	bl	12a2 <_GetAvailWriteSpace>
    131c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    131e:	9a04      	ldr	r2, [sp, #16]
    1320:	9b01      	ldr	r3, [sp, #4]
    1322:	429a      	cmp	r2, r3
    1324:	d202      	bcs.n	132c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1326:	2300      	movs	r3, #0
    1328:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    132a:	e021      	b.n	1370 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    132c:	9b01      	ldr	r3, [sp, #4]
    132e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1330:	9a01      	ldr	r2, [sp, #4]
    1332:	9906      	ldr	r1, [sp, #24]
    1334:	9805      	ldr	r0, [sp, #20]
    1336:	f7ff ff6d 	bl	1214 <_WriteNoCheck>
    break;
    133a:	e019      	b.n	1370 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    133c:	9805      	ldr	r0, [sp, #20]
    133e:	f7ff ffb0 	bl	12a2 <_GetAvailWriteSpace>
    1342:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1344:	9a01      	ldr	r2, [sp, #4]
    1346:	9b04      	ldr	r3, [sp, #16]
    1348:	4293      	cmp	r3, r2
    134a:	bf28      	it	cs
    134c:	4613      	movcs	r3, r2
    134e:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1350:	9a07      	ldr	r2, [sp, #28]
    1352:	9906      	ldr	r1, [sp, #24]
    1354:	9805      	ldr	r0, [sp, #20]
    1356:	f7ff ff5d 	bl	1214 <_WriteNoCheck>
    break;
    135a:	e009      	b.n	1370 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    135c:	9a01      	ldr	r2, [sp, #4]
    135e:	9906      	ldr	r1, [sp, #24]
    1360:	9805      	ldr	r0, [sp, #20]
    1362:	f7ff fefb 	bl	115c <_WriteBlocking>
    1366:	9007      	str	r0, [sp, #28]
    break;
    1368:	e002      	b.n	1370 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    136a:	2300      	movs	r3, #0
    136c:	9307      	str	r3, [sp, #28]
    break;
    136e:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1370:	9b07      	ldr	r3, [sp, #28]
}
    1372:	4618      	mov	r0, r3
    1374:	b009      	add	sp, #36	; 0x24
    1376:	f85d fb04 	ldr.w	pc, [sp], #4
    137a:	bf00      	nop
    137c:	1fff8e20 	.word	0x1fff8e20

00001380 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1380:	b500      	push	{lr}
    1382:	b089      	sub	sp, #36	; 0x24
    1384:	9003      	str	r0, [sp, #12]
    1386:	9102      	str	r1, [sp, #8]
    1388:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    138a:	4b0f      	ldr	r3, [pc, #60]	; (13c8 <SEGGER_RTT_Write+0x48>)
    138c:	9307      	str	r3, [sp, #28]
    138e:	9b07      	ldr	r3, [sp, #28]
    1390:	781b      	ldrb	r3, [r3, #0]
    1392:	b2db      	uxtb	r3, r3
    1394:	2b53      	cmp	r3, #83	; 0x53
    1396:	d001      	beq.n	139c <SEGGER_RTT_Write+0x1c>
    1398:	f7ff fe86 	bl	10a8 <_DoInit>
  SEGGER_RTT_LOCK();
    139c:	f3ef 8311 	mrs	r3, BASEPRI
    13a0:	f04f 0120 	mov.w	r1, #32
    13a4:	f381 8811 	msr	BASEPRI, r1
    13a8:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    13aa:	9a01      	ldr	r2, [sp, #4]
    13ac:	9902      	ldr	r1, [sp, #8]
    13ae:	9803      	ldr	r0, [sp, #12]
    13b0:	f7ff ff96 	bl	12e0 <SEGGER_RTT_WriteNoLock>
    13b4:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    13b6:	9b06      	ldr	r3, [sp, #24]
    13b8:	f383 8811 	msr	BASEPRI, r3
  return Status;
    13bc:	9b05      	ldr	r3, [sp, #20]
}
    13be:	4618      	mov	r0, r3
    13c0:	b009      	add	sp, #36	; 0x24
    13c2:	f85d fb04 	ldr.w	pc, [sp], #4
    13c6:	bf00      	nop
    13c8:	1fff8e20 	.word	0x1fff8e20

000013cc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    13cc:	b508      	push	{r3, lr}
  _DoInit();
    13ce:	f7ff fe6b 	bl	10a8 <_DoInit>
}
    13d2:	bf00      	nop
    13d4:	bd08      	pop	{r3, pc}

000013d6 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    13d6:	b500      	push	{lr}
    13d8:	b085      	sub	sp, #20
    13da:	9001      	str	r0, [sp, #4]
    13dc:	460b      	mov	r3, r1
    13de:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    13e2:	9b01      	ldr	r3, [sp, #4]
    13e4:	689b      	ldr	r3, [r3, #8]
    13e6:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    13e8:	9b03      	ldr	r3, [sp, #12]
    13ea:	1c5a      	adds	r2, r3, #1
    13ec:	9b01      	ldr	r3, [sp, #4]
    13ee:	685b      	ldr	r3, [r3, #4]
    13f0:	429a      	cmp	r2, r3
    13f2:	d80f      	bhi.n	1414 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    13f4:	9b01      	ldr	r3, [sp, #4]
    13f6:	681a      	ldr	r2, [r3, #0]
    13f8:	9b03      	ldr	r3, [sp, #12]
    13fa:	4413      	add	r3, r2
    13fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1400:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1402:	9b03      	ldr	r3, [sp, #12]
    1404:	1c5a      	adds	r2, r3, #1
    1406:	9b01      	ldr	r3, [sp, #4]
    1408:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    140a:	9b01      	ldr	r3, [sp, #4]
    140c:	68db      	ldr	r3, [r3, #12]
    140e:	1c5a      	adds	r2, r3, #1
    1410:	9b01      	ldr	r3, [sp, #4]
    1412:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1414:	9b01      	ldr	r3, [sp, #4]
    1416:	689a      	ldr	r2, [r3, #8]
    1418:	9b01      	ldr	r3, [sp, #4]
    141a:	685b      	ldr	r3, [r3, #4]
    141c:	429a      	cmp	r2, r3
    141e:	d115      	bne.n	144c <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1420:	9b01      	ldr	r3, [sp, #4]
    1422:	6918      	ldr	r0, [r3, #16]
    1424:	9b01      	ldr	r3, [sp, #4]
    1426:	6819      	ldr	r1, [r3, #0]
    1428:	9b01      	ldr	r3, [sp, #4]
    142a:	689b      	ldr	r3, [r3, #8]
    142c:	461a      	mov	r2, r3
    142e:	f7ff ffa7 	bl	1380 <SEGGER_RTT_Write>
    1432:	4602      	mov	r2, r0
    1434:	9b01      	ldr	r3, [sp, #4]
    1436:	689b      	ldr	r3, [r3, #8]
    1438:	429a      	cmp	r2, r3
    143a:	d004      	beq.n	1446 <_StoreChar+0x70>
      p->ReturnValue = -1;
    143c:	9b01      	ldr	r3, [sp, #4]
    143e:	f04f 32ff 	mov.w	r2, #4294967295
    1442:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1444:	e002      	b.n	144c <_StoreChar+0x76>
      p->Cnt = 0u;
    1446:	9b01      	ldr	r3, [sp, #4]
    1448:	2200      	movs	r2, #0
    144a:	609a      	str	r2, [r3, #8]
}
    144c:	bf00      	nop
    144e:	b005      	add	sp, #20
    1450:	f85d fb04 	ldr.w	pc, [sp], #4

00001454 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1454:	b500      	push	{lr}
    1456:	b08b      	sub	sp, #44	; 0x2c
    1458:	9003      	str	r0, [sp, #12]
    145a:	9102      	str	r1, [sp, #8]
    145c:	9201      	str	r2, [sp, #4]
    145e:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1460:	9b02      	ldr	r3, [sp, #8]
    1462:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1464:	2301      	movs	r3, #1
    1466:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1468:	2301      	movs	r3, #1
    146a:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    146c:	e007      	b.n	147e <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    146e:	9a08      	ldr	r2, [sp, #32]
    1470:	9b01      	ldr	r3, [sp, #4]
    1472:	fbb2 f3f3 	udiv	r3, r2, r3
    1476:	9308      	str	r3, [sp, #32]
    Width++;
    1478:	9b07      	ldr	r3, [sp, #28]
    147a:	3301      	adds	r3, #1
    147c:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    147e:	9a08      	ldr	r2, [sp, #32]
    1480:	9b01      	ldr	r3, [sp, #4]
    1482:	429a      	cmp	r2, r3
    1484:	d2f3      	bcs.n	146e <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1486:	9a00      	ldr	r2, [sp, #0]
    1488:	9b07      	ldr	r3, [sp, #28]
    148a:	429a      	cmp	r2, r3
    148c:	d901      	bls.n	1492 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    148e:	9b00      	ldr	r3, [sp, #0]
    1490:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1494:	f003 0301 	and.w	r3, r3, #1
    1498:	2b00      	cmp	r3, #0
    149a:	d128      	bne.n	14ee <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    149c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    149e:	2b00      	cmp	r3, #0
    14a0:	d025      	beq.n	14ee <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    14a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    14a4:	f003 0302 	and.w	r3, r3, #2
    14a8:	2b00      	cmp	r3, #0
    14aa:	d006      	beq.n	14ba <_PrintUnsigned+0x66>
    14ac:	9b00      	ldr	r3, [sp, #0]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d103      	bne.n	14ba <_PrintUnsigned+0x66>
        c = '0';
    14b2:	2330      	movs	r3, #48	; 0x30
    14b4:	f88d 301b 	strb.w	r3, [sp, #27]
    14b8:	e002      	b.n	14c0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    14ba:	2320      	movs	r3, #32
    14bc:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    14c0:	e00c      	b.n	14dc <_PrintUnsigned+0x88>
        FieldWidth--;
    14c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14c4:	3b01      	subs	r3, #1
    14c6:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    14c8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    14cc:	4619      	mov	r1, r3
    14ce:	9803      	ldr	r0, [sp, #12]
    14d0:	f7ff ff81 	bl	13d6 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    14d4:	9b03      	ldr	r3, [sp, #12]
    14d6:	68db      	ldr	r3, [r3, #12]
    14d8:	2b00      	cmp	r3, #0
    14da:	db07      	blt.n	14ec <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    14dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14de:	2b00      	cmp	r3, #0
    14e0:	d005      	beq.n	14ee <_PrintUnsigned+0x9a>
    14e2:	9a07      	ldr	r2, [sp, #28]
    14e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14e6:	429a      	cmp	r2, r3
    14e8:	d3eb      	bcc.n	14c2 <_PrintUnsigned+0x6e>
    14ea:	e000      	b.n	14ee <_PrintUnsigned+0x9a>
          break;
    14ec:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    14ee:	9b03      	ldr	r3, [sp, #12]
    14f0:	68db      	ldr	r3, [r3, #12]
    14f2:	2b00      	cmp	r3, #0
    14f4:	db55      	blt.n	15a2 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    14f6:	9b00      	ldr	r3, [sp, #0]
    14f8:	2b01      	cmp	r3, #1
    14fa:	d903      	bls.n	1504 <_PrintUnsigned+0xb0>
        NumDigits--;
    14fc:	9b00      	ldr	r3, [sp, #0]
    14fe:	3b01      	subs	r3, #1
    1500:	9300      	str	r3, [sp, #0]
    1502:	e009      	b.n	1518 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1504:	9a02      	ldr	r2, [sp, #8]
    1506:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1508:	fbb2 f3f3 	udiv	r3, r2, r3
    150c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    150e:	9a05      	ldr	r2, [sp, #20]
    1510:	9b01      	ldr	r3, [sp, #4]
    1512:	429a      	cmp	r2, r3
    1514:	d200      	bcs.n	1518 <_PrintUnsigned+0xc4>
          break;
    1516:	e005      	b.n	1524 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1518:	9b09      	ldr	r3, [sp, #36]	; 0x24
    151a:	9a01      	ldr	r2, [sp, #4]
    151c:	fb02 f303 	mul.w	r3, r2, r3
    1520:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1522:	e7e8      	b.n	14f6 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1524:	9a02      	ldr	r2, [sp, #8]
    1526:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1528:	fbb2 f3f3 	udiv	r3, r2, r3
    152c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    152e:	9b05      	ldr	r3, [sp, #20]
    1530:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1532:	fb02 f303 	mul.w	r3, r2, r3
    1536:	9a02      	ldr	r2, [sp, #8]
    1538:	1ad3      	subs	r3, r2, r3
    153a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    153c:	4a1b      	ldr	r2, [pc, #108]	; (15ac <_PrintUnsigned+0x158>)
    153e:	9b05      	ldr	r3, [sp, #20]
    1540:	4413      	add	r3, r2
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	4619      	mov	r1, r3
    1546:	9803      	ldr	r0, [sp, #12]
    1548:	f7ff ff45 	bl	13d6 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    154c:	9b03      	ldr	r3, [sp, #12]
    154e:	68db      	ldr	r3, [r3, #12]
    1550:	2b00      	cmp	r3, #0
    1552:	db08      	blt.n	1566 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1554:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1556:	9b01      	ldr	r3, [sp, #4]
    1558:	fbb2 f3f3 	udiv	r3, r2, r3
    155c:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    155e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1560:	2b00      	cmp	r3, #0
    1562:	d1df      	bne.n	1524 <_PrintUnsigned+0xd0>
    1564:	e000      	b.n	1568 <_PrintUnsigned+0x114>
        break;
    1566:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    156a:	f003 0301 	and.w	r3, r3, #1
    156e:	2b00      	cmp	r3, #0
    1570:	d017      	beq.n	15a2 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1574:	2b00      	cmp	r3, #0
    1576:	d014      	beq.n	15a2 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1578:	e00a      	b.n	1590 <_PrintUnsigned+0x13c>
          FieldWidth--;
    157a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    157c:	3b01      	subs	r3, #1
    157e:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1580:	2120      	movs	r1, #32
    1582:	9803      	ldr	r0, [sp, #12]
    1584:	f7ff ff27 	bl	13d6 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1588:	9b03      	ldr	r3, [sp, #12]
    158a:	68db      	ldr	r3, [r3, #12]
    158c:	2b00      	cmp	r3, #0
    158e:	db07      	blt.n	15a0 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1592:	2b00      	cmp	r3, #0
    1594:	d005      	beq.n	15a2 <_PrintUnsigned+0x14e>
    1596:	9a07      	ldr	r2, [sp, #28]
    1598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    159a:	429a      	cmp	r2, r3
    159c:	d3ed      	bcc.n	157a <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    159e:	e000      	b.n	15a2 <_PrintUnsigned+0x14e>
            break;
    15a0:	bf00      	nop
}
    15a2:	bf00      	nop
    15a4:	b00b      	add	sp, #44	; 0x2c
    15a6:	f85d fb04 	ldr.w	pc, [sp], #4
    15aa:	bf00      	nop
    15ac:	00009170 	.word	0x00009170

000015b0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    15b0:	b500      	push	{lr}
    15b2:	b089      	sub	sp, #36	; 0x24
    15b4:	9005      	str	r0, [sp, #20]
    15b6:	9104      	str	r1, [sp, #16]
    15b8:	9203      	str	r2, [sp, #12]
    15ba:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    15bc:	9b04      	ldr	r3, [sp, #16]
    15be:	2b00      	cmp	r3, #0
    15c0:	bfb8      	it	lt
    15c2:	425b      	neglt	r3, r3
    15c4:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    15c6:	2301      	movs	r3, #1
    15c8:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    15ca:	e007      	b.n	15dc <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    15cc:	9b03      	ldr	r3, [sp, #12]
    15ce:	9a06      	ldr	r2, [sp, #24]
    15d0:	fb92 f3f3 	sdiv	r3, r2, r3
    15d4:	9306      	str	r3, [sp, #24]
    Width++;
    15d6:	9b07      	ldr	r3, [sp, #28]
    15d8:	3301      	adds	r3, #1
    15da:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    15dc:	9b03      	ldr	r3, [sp, #12]
    15de:	9a06      	ldr	r2, [sp, #24]
    15e0:	429a      	cmp	r2, r3
    15e2:	daf3      	bge.n	15cc <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    15e4:	9a02      	ldr	r2, [sp, #8]
    15e6:	9b07      	ldr	r3, [sp, #28]
    15e8:	429a      	cmp	r2, r3
    15ea:	d901      	bls.n	15f0 <_PrintInt+0x40>
    Width = NumDigits;
    15ec:	9b02      	ldr	r3, [sp, #8]
    15ee:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    15f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    15f2:	2b00      	cmp	r3, #0
    15f4:	d00a      	beq.n	160c <_PrintInt+0x5c>
    15f6:	9b04      	ldr	r3, [sp, #16]
    15f8:	2b00      	cmp	r3, #0
    15fa:	db04      	blt.n	1606 <_PrintInt+0x56>
    15fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15fe:	f003 0304 	and.w	r3, r3, #4
    1602:	2b00      	cmp	r3, #0
    1604:	d002      	beq.n	160c <_PrintInt+0x5c>
    FieldWidth--;
    1606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1608:	3b01      	subs	r3, #1
    160a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    160c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    160e:	f003 0302 	and.w	r3, r3, #2
    1612:	2b00      	cmp	r3, #0
    1614:	d002      	beq.n	161c <_PrintInt+0x6c>
    1616:	9b02      	ldr	r3, [sp, #8]
    1618:	2b00      	cmp	r3, #0
    161a:	d01c      	beq.n	1656 <_PrintInt+0xa6>
    161c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    161e:	f003 0301 	and.w	r3, r3, #1
    1622:	2b00      	cmp	r3, #0
    1624:	d117      	bne.n	1656 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1628:	2b00      	cmp	r3, #0
    162a:	d014      	beq.n	1656 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    162c:	e00a      	b.n	1644 <_PrintInt+0x94>
        FieldWidth--;
    162e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1630:	3b01      	subs	r3, #1
    1632:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1634:	2120      	movs	r1, #32
    1636:	9805      	ldr	r0, [sp, #20]
    1638:	f7ff fecd 	bl	13d6 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    163c:	9b05      	ldr	r3, [sp, #20]
    163e:	68db      	ldr	r3, [r3, #12]
    1640:	2b00      	cmp	r3, #0
    1642:	db07      	blt.n	1654 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1646:	2b00      	cmp	r3, #0
    1648:	d005      	beq.n	1656 <_PrintInt+0xa6>
    164a:	9a07      	ldr	r2, [sp, #28]
    164c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    164e:	429a      	cmp	r2, r3
    1650:	d3ed      	bcc.n	162e <_PrintInt+0x7e>
    1652:	e000      	b.n	1656 <_PrintInt+0xa6>
          break;
    1654:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1656:	9b05      	ldr	r3, [sp, #20]
    1658:	68db      	ldr	r3, [r3, #12]
    165a:	2b00      	cmp	r3, #0
    165c:	db4a      	blt.n	16f4 <_PrintInt+0x144>
    if (v < 0) {
    165e:	9b04      	ldr	r3, [sp, #16]
    1660:	2b00      	cmp	r3, #0
    1662:	da07      	bge.n	1674 <_PrintInt+0xc4>
      v = -v;
    1664:	9b04      	ldr	r3, [sp, #16]
    1666:	425b      	negs	r3, r3
    1668:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    166a:	212d      	movs	r1, #45	; 0x2d
    166c:	9805      	ldr	r0, [sp, #20]
    166e:	f7ff feb2 	bl	13d6 <_StoreChar>
    1672:	e008      	b.n	1686 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1676:	f003 0304 	and.w	r3, r3, #4
    167a:	2b00      	cmp	r3, #0
    167c:	d003      	beq.n	1686 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    167e:	212b      	movs	r1, #43	; 0x2b
    1680:	9805      	ldr	r0, [sp, #20]
    1682:	f7ff fea8 	bl	13d6 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1686:	9b05      	ldr	r3, [sp, #20]
    1688:	68db      	ldr	r3, [r3, #12]
    168a:	2b00      	cmp	r3, #0
    168c:	db32      	blt.n	16f4 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    168e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1690:	f003 0302 	and.w	r3, r3, #2
    1694:	2b00      	cmp	r3, #0
    1696:	d01f      	beq.n	16d8 <_PrintInt+0x128>
    1698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    169a:	f003 0301 	and.w	r3, r3, #1
    169e:	2b00      	cmp	r3, #0
    16a0:	d11a      	bne.n	16d8 <_PrintInt+0x128>
    16a2:	9b02      	ldr	r3, [sp, #8]
    16a4:	2b00      	cmp	r3, #0
    16a6:	d117      	bne.n	16d8 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    16a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16aa:	2b00      	cmp	r3, #0
    16ac:	d014      	beq.n	16d8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16ae:	e00a      	b.n	16c6 <_PrintInt+0x116>
            FieldWidth--;
    16b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16b2:	3b01      	subs	r3, #1
    16b4:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    16b6:	2130      	movs	r1, #48	; 0x30
    16b8:	9805      	ldr	r0, [sp, #20]
    16ba:	f7ff fe8c 	bl	13d6 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    16be:	9b05      	ldr	r3, [sp, #20]
    16c0:	68db      	ldr	r3, [r3, #12]
    16c2:	2b00      	cmp	r3, #0
    16c4:	db07      	blt.n	16d6 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16c8:	2b00      	cmp	r3, #0
    16ca:	d005      	beq.n	16d8 <_PrintInt+0x128>
    16cc:	9a07      	ldr	r2, [sp, #28]
    16ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16d0:	429a      	cmp	r2, r3
    16d2:	d3ed      	bcc.n	16b0 <_PrintInt+0x100>
    16d4:	e000      	b.n	16d8 <_PrintInt+0x128>
              break;
    16d6:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    16d8:	9b05      	ldr	r3, [sp, #20]
    16da:	68db      	ldr	r3, [r3, #12]
    16dc:	2b00      	cmp	r3, #0
    16de:	db09      	blt.n	16f4 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    16e0:	9904      	ldr	r1, [sp, #16]
    16e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    16e4:	9301      	str	r3, [sp, #4]
    16e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16e8:	9300      	str	r3, [sp, #0]
    16ea:	9b02      	ldr	r3, [sp, #8]
    16ec:	9a03      	ldr	r2, [sp, #12]
    16ee:	9805      	ldr	r0, [sp, #20]
    16f0:	f7ff feb0 	bl	1454 <_PrintUnsigned>
      }
    }
  }
}
    16f4:	bf00      	nop
    16f6:	b009      	add	sp, #36	; 0x24
    16f8:	f85d fb04 	ldr.w	pc, [sp], #4

000016fc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    16fc:	b500      	push	{lr}
    16fe:	b0a3      	sub	sp, #140	; 0x8c
    1700:	9005      	str	r0, [sp, #20]
    1702:	9104      	str	r1, [sp, #16]
    1704:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1706:	ab06      	add	r3, sp, #24
    1708:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    170a:	2340      	movs	r3, #64	; 0x40
    170c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    170e:	2300      	movs	r3, #0
    1710:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1712:	9b05      	ldr	r3, [sp, #20]
    1714:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1716:	2300      	movs	r3, #0
    1718:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    171a:	9b04      	ldr	r3, [sp, #16]
    171c:	781b      	ldrb	r3, [r3, #0]
    171e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1722:	9b04      	ldr	r3, [sp, #16]
    1724:	3301      	adds	r3, #1
    1726:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1728:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    172c:	2b00      	cmp	r3, #0
    172e:	f000 819c 	beq.w	1a6a <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1732:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1736:	2b25      	cmp	r3, #37	; 0x25
    1738:	f040 818b 	bne.w	1a52 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    173c:	2300      	movs	r3, #0
    173e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1740:	2301      	movs	r3, #1
    1742:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1744:	9b04      	ldr	r3, [sp, #16]
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    174c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1750:	3b23      	subs	r3, #35	; 0x23
    1752:	2b0d      	cmp	r3, #13
    1754:	d83e      	bhi.n	17d4 <SEGGER_RTT_vprintf+0xd8>
    1756:	a201      	add	r2, pc, #4	; (adr r2, 175c <SEGGER_RTT_vprintf+0x60>)
    1758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    175c:	000017c5 	.word	0x000017c5
    1760:	000017d5 	.word	0x000017d5
    1764:	000017d5 	.word	0x000017d5
    1768:	000017d5 	.word	0x000017d5
    176c:	000017d5 	.word	0x000017d5
    1770:	000017d5 	.word	0x000017d5
    1774:	000017d5 	.word	0x000017d5
    1778:	000017d5 	.word	0x000017d5
    177c:	000017b5 	.word	0x000017b5
    1780:	000017d5 	.word	0x000017d5
    1784:	00001795 	.word	0x00001795
    1788:	000017d5 	.word	0x000017d5
    178c:	000017d5 	.word	0x000017d5
    1790:	000017a5 	.word	0x000017a5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1794:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1796:	f043 0301 	orr.w	r3, r3, #1
    179a:	931e      	str	r3, [sp, #120]	; 0x78
    179c:	9b04      	ldr	r3, [sp, #16]
    179e:	3301      	adds	r3, #1
    17a0:	9304      	str	r3, [sp, #16]
    17a2:	e01a      	b.n	17da <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    17a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    17a6:	f043 0302 	orr.w	r3, r3, #2
    17aa:	931e      	str	r3, [sp, #120]	; 0x78
    17ac:	9b04      	ldr	r3, [sp, #16]
    17ae:	3301      	adds	r3, #1
    17b0:	9304      	str	r3, [sp, #16]
    17b2:	e012      	b.n	17da <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    17b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    17b6:	f043 0304 	orr.w	r3, r3, #4
    17ba:	931e      	str	r3, [sp, #120]	; 0x78
    17bc:	9b04      	ldr	r3, [sp, #16]
    17be:	3301      	adds	r3, #1
    17c0:	9304      	str	r3, [sp, #16]
    17c2:	e00a      	b.n	17da <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    17c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    17c6:	f043 0308 	orr.w	r3, r3, #8
    17ca:	931e      	str	r3, [sp, #120]	; 0x78
    17cc:	9b04      	ldr	r3, [sp, #16]
    17ce:	3301      	adds	r3, #1
    17d0:	9304      	str	r3, [sp, #16]
    17d2:	e002      	b.n	17da <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    17d4:	2300      	movs	r3, #0
    17d6:	9320      	str	r3, [sp, #128]	; 0x80
    17d8:	bf00      	nop
        }
      } while (v);
    17da:	9b20      	ldr	r3, [sp, #128]	; 0x80
    17dc:	2b00      	cmp	r3, #0
    17de:	d1b1      	bne.n	1744 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    17e0:	2300      	movs	r3, #0
    17e2:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    17e4:	9b04      	ldr	r3, [sp, #16]
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    17ec:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    17f0:	2b2f      	cmp	r3, #47	; 0x2f
    17f2:	d912      	bls.n	181a <SEGGER_RTT_vprintf+0x11e>
    17f4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    17f8:	2b39      	cmp	r3, #57	; 0x39
    17fa:	d80e      	bhi.n	181a <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    17fc:	9b04      	ldr	r3, [sp, #16]
    17fe:	3301      	adds	r3, #1
    1800:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1802:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1804:	4613      	mov	r3, r2
    1806:	009b      	lsls	r3, r3, #2
    1808:	4413      	add	r3, r2
    180a:	005b      	lsls	r3, r3, #1
    180c:	461a      	mov	r2, r3
    180e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1812:	4413      	add	r3, r2
    1814:	3b30      	subs	r3, #48	; 0x30
    1816:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1818:	e7e4      	b.n	17e4 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    181a:	2300      	movs	r3, #0
    181c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    181e:	9b04      	ldr	r3, [sp, #16]
    1820:	781b      	ldrb	r3, [r3, #0]
    1822:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1826:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    182a:	2b2e      	cmp	r3, #46	; 0x2e
    182c:	d11d      	bne.n	186a <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    182e:	9b04      	ldr	r3, [sp, #16]
    1830:	3301      	adds	r3, #1
    1832:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1834:	9b04      	ldr	r3, [sp, #16]
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    183c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1840:	2b2f      	cmp	r3, #47	; 0x2f
    1842:	d912      	bls.n	186a <SEGGER_RTT_vprintf+0x16e>
    1844:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1848:	2b39      	cmp	r3, #57	; 0x39
    184a:	d80e      	bhi.n	186a <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    184c:	9b04      	ldr	r3, [sp, #16]
    184e:	3301      	adds	r3, #1
    1850:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1852:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1854:	4613      	mov	r3, r2
    1856:	009b      	lsls	r3, r3, #2
    1858:	4413      	add	r3, r2
    185a:	005b      	lsls	r3, r3, #1
    185c:	461a      	mov	r2, r3
    185e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1862:	4413      	add	r3, r2
    1864:	3b30      	subs	r3, #48	; 0x30
    1866:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1868:	e7e4      	b.n	1834 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    186a:	9b04      	ldr	r3, [sp, #16]
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1872:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1876:	2b6c      	cmp	r3, #108	; 0x6c
    1878:	d003      	beq.n	1882 <SEGGER_RTT_vprintf+0x186>
    187a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    187e:	2b68      	cmp	r3, #104	; 0x68
    1880:	d107      	bne.n	1892 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1882:	9b04      	ldr	r3, [sp, #16]
    1884:	3301      	adds	r3, #1
    1886:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1888:	9b04      	ldr	r3, [sp, #16]
    188a:	781b      	ldrb	r3, [r3, #0]
    188c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1890:	e7ef      	b.n	1872 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1892:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1896:	2b25      	cmp	r3, #37	; 0x25
    1898:	f000 80d0 	beq.w	1a3c <SEGGER_RTT_vprintf+0x340>
    189c:	2b25      	cmp	r3, #37	; 0x25
    189e:	f2c0 80d3 	blt.w	1a48 <SEGGER_RTT_vprintf+0x34c>
    18a2:	2b78      	cmp	r3, #120	; 0x78
    18a4:	f300 80d0 	bgt.w	1a48 <SEGGER_RTT_vprintf+0x34c>
    18a8:	2b58      	cmp	r3, #88	; 0x58
    18aa:	f2c0 80cd 	blt.w	1a48 <SEGGER_RTT_vprintf+0x34c>
    18ae:	3b58      	subs	r3, #88	; 0x58
    18b0:	2b20      	cmp	r3, #32
    18b2:	f200 80c9 	bhi.w	1a48 <SEGGER_RTT_vprintf+0x34c>
    18b6:	a201      	add	r2, pc, #4	; (adr r2, 18bc <SEGGER_RTT_vprintf+0x1c0>)
    18b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    18bc:	000019ad 	.word	0x000019ad
    18c0:	00001a49 	.word	0x00001a49
    18c4:	00001a49 	.word	0x00001a49
    18c8:	00001a49 	.word	0x00001a49
    18cc:	00001a49 	.word	0x00001a49
    18d0:	00001a49 	.word	0x00001a49
    18d4:	00001a49 	.word	0x00001a49
    18d8:	00001a49 	.word	0x00001a49
    18dc:	00001a49 	.word	0x00001a49
    18e0:	00001a49 	.word	0x00001a49
    18e4:	00001a49 	.word	0x00001a49
    18e8:	00001941 	.word	0x00001941
    18ec:	00001965 	.word	0x00001965
    18f0:	00001a49 	.word	0x00001a49
    18f4:	00001a49 	.word	0x00001a49
    18f8:	00001a49 	.word	0x00001a49
    18fc:	00001a49 	.word	0x00001a49
    1900:	00001a49 	.word	0x00001a49
    1904:	00001a49 	.word	0x00001a49
    1908:	00001a49 	.word	0x00001a49
    190c:	00001a49 	.word	0x00001a49
    1910:	00001a49 	.word	0x00001a49
    1914:	00001a49 	.word	0x00001a49
    1918:	00001a49 	.word	0x00001a49
    191c:	00001a19 	.word	0x00001a19
    1920:	00001a49 	.word	0x00001a49
    1924:	00001a49 	.word	0x00001a49
    1928:	000019d1 	.word	0x000019d1
    192c:	00001a49 	.word	0x00001a49
    1930:	00001989 	.word	0x00001989
    1934:	00001a49 	.word	0x00001a49
    1938:	00001a49 	.word	0x00001a49
    193c:	000019ad 	.word	0x000019ad
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1940:	9b03      	ldr	r3, [sp, #12]
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	1d19      	adds	r1, r3, #4
    1946:	9a03      	ldr	r2, [sp, #12]
    1948:	6011      	str	r1, [r2, #0]
    194a:	681b      	ldr	r3, [r3, #0]
    194c:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    194e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1950:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1954:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1958:	ab16      	add	r3, sp, #88	; 0x58
    195a:	4611      	mov	r1, r2
    195c:	4618      	mov	r0, r3
    195e:	f7ff fd3a 	bl	13d6 <_StoreChar>
        break;
    1962:	e072      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1964:	9b03      	ldr	r3, [sp, #12]
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	1d19      	adds	r1, r3, #4
    196a:	9a03      	ldr	r2, [sp, #12]
    196c:	6011      	str	r1, [r2, #0]
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1972:	a816      	add	r0, sp, #88	; 0x58
    1974:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1976:	9301      	str	r3, [sp, #4]
    1978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    197a:	9300      	str	r3, [sp, #0]
    197c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    197e:	220a      	movs	r2, #10
    1980:	9920      	ldr	r1, [sp, #128]	; 0x80
    1982:	f7ff fe15 	bl	15b0 <_PrintInt>
        break;
    1986:	e060      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1988:	9b03      	ldr	r3, [sp, #12]
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	1d19      	adds	r1, r3, #4
    198e:	9a03      	ldr	r2, [sp, #12]
    1990:	6011      	str	r1, [r2, #0]
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1996:	9920      	ldr	r1, [sp, #128]	; 0x80
    1998:	a816      	add	r0, sp, #88	; 0x58
    199a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    199c:	9301      	str	r3, [sp, #4]
    199e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    19a0:	9300      	str	r3, [sp, #0]
    19a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    19a4:	220a      	movs	r2, #10
    19a6:	f7ff fd55 	bl	1454 <_PrintUnsigned>
        break;
    19aa:	e04e      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    19ac:	9b03      	ldr	r3, [sp, #12]
    19ae:	681b      	ldr	r3, [r3, #0]
    19b0:	1d19      	adds	r1, r3, #4
    19b2:	9a03      	ldr	r2, [sp, #12]
    19b4:	6011      	str	r1, [r2, #0]
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    19ba:	9920      	ldr	r1, [sp, #128]	; 0x80
    19bc:	a816      	add	r0, sp, #88	; 0x58
    19be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    19c0:	9301      	str	r3, [sp, #4]
    19c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    19c4:	9300      	str	r3, [sp, #0]
    19c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    19c8:	2210      	movs	r2, #16
    19ca:	f7ff fd43 	bl	1454 <_PrintUnsigned>
        break;
    19ce:	e03c      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    19d0:	9b03      	ldr	r3, [sp, #12]
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	1d19      	adds	r1, r3, #4
    19d6:	9a03      	ldr	r2, [sp, #12]
    19d8:	6011      	str	r1, [r2, #0]
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    19de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    19e0:	2b00      	cmp	r3, #0
    19e2:	d101      	bne.n	19e8 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    19e4:	4b2c      	ldr	r3, [pc, #176]	; (1a98 <SEGGER_RTT_vprintf+0x39c>)
    19e6:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    19e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    19ea:	781b      	ldrb	r3, [r3, #0]
    19ec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    19f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    19f2:	3301      	adds	r3, #1
    19f4:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    19f6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19fa:	2b00      	cmp	r3, #0
    19fc:	d00a      	beq.n	1a14 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    19fe:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1a02:	ab16      	add	r3, sp, #88	; 0x58
    1a04:	4611      	mov	r1, r2
    1a06:	4618      	mov	r0, r3
    1a08:	f7ff fce5 	bl	13d6 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1a0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a0e:	2b00      	cmp	r3, #0
    1a10:	daea      	bge.n	19e8 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1a12:	e01a      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
              break;
    1a14:	bf00      	nop
        break;
    1a16:	e018      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1a18:	9b03      	ldr	r3, [sp, #12]
    1a1a:	681b      	ldr	r3, [r3, #0]
    1a1c:	1d19      	adds	r1, r3, #4
    1a1e:	9a03      	ldr	r2, [sp, #12]
    1a20:	6011      	str	r1, [r2, #0]
    1a22:	681b      	ldr	r3, [r3, #0]
    1a24:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1a26:	9920      	ldr	r1, [sp, #128]	; 0x80
    1a28:	a816      	add	r0, sp, #88	; 0x58
    1a2a:	2300      	movs	r3, #0
    1a2c:	9301      	str	r3, [sp, #4]
    1a2e:	2308      	movs	r3, #8
    1a30:	9300      	str	r3, [sp, #0]
    1a32:	2308      	movs	r3, #8
    1a34:	2210      	movs	r2, #16
    1a36:	f7ff fd0d 	bl	1454 <_PrintUnsigned>
        break;
    1a3a:	e006      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1a3c:	ab16      	add	r3, sp, #88	; 0x58
    1a3e:	2125      	movs	r1, #37	; 0x25
    1a40:	4618      	mov	r0, r3
    1a42:	f7ff fcc8 	bl	13d6 <_StoreChar>
        break;
    1a46:	e000      	b.n	1a4a <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1a48:	bf00      	nop
      }
      sFormat++;
    1a4a:	9b04      	ldr	r3, [sp, #16]
    1a4c:	3301      	adds	r3, #1
    1a4e:	9304      	str	r3, [sp, #16]
    1a50:	e006      	b.n	1a60 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1a52:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1a56:	ab16      	add	r3, sp, #88	; 0x58
    1a58:	4611      	mov	r1, r2
    1a5a:	4618      	mov	r0, r3
    1a5c:	f7ff fcbb 	bl	13d6 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1a60:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a62:	2b00      	cmp	r3, #0
    1a64:	f6bf ae59 	bge.w	171a <SEGGER_RTT_vprintf+0x1e>
    1a68:	e000      	b.n	1a6c <SEGGER_RTT_vprintf+0x370>
      break;
    1a6a:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1a6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a6e:	2b00      	cmp	r3, #0
    1a70:	dd0c      	ble.n	1a8c <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1a72:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1a74:	2b00      	cmp	r3, #0
    1a76:	d005      	beq.n	1a84 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1a78:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a7a:	ab06      	add	r3, sp, #24
    1a7c:	4619      	mov	r1, r3
    1a7e:	9805      	ldr	r0, [sp, #20]
    1a80:	f7ff fc7e 	bl	1380 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a86:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a88:	4413      	add	r3, r2
    1a8a:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1a8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1a8e:	4618      	mov	r0, r3
    1a90:	b023      	add	sp, #140	; 0x8c
    1a92:	f85d fb04 	ldr.w	pc, [sp], #4
    1a96:	bf00      	nop
    1a98:	000082f4 	.word	0x000082f4

00001a9c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1a9c:	b40e      	push	{r1, r2, r3}
    1a9e:	b500      	push	{lr}
    1aa0:	b084      	sub	sp, #16
    1aa2:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1aa4:	ab06      	add	r3, sp, #24
    1aa6:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1aa8:	ab02      	add	r3, sp, #8
    1aaa:	461a      	mov	r2, r3
    1aac:	9905      	ldr	r1, [sp, #20]
    1aae:	9801      	ldr	r0, [sp, #4]
    1ab0:	f7ff fe24 	bl	16fc <SEGGER_RTT_vprintf>
    1ab4:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1ab6:	9b03      	ldr	r3, [sp, #12]
}
    1ab8:	4618      	mov	r0, r3
    1aba:	b004      	add	sp, #16
    1abc:	f85d eb04 	ldr.w	lr, [sp], #4
    1ac0:	b003      	add	sp, #12
    1ac2:	4770      	bx	lr

00001ac4 <memcpy>:
    1ac4:	440a      	add	r2, r1
    1ac6:	4291      	cmp	r1, r2
    1ac8:	f100 33ff 	add.w	r3, r0, #4294967295
    1acc:	d100      	bne.n	1ad0 <memcpy+0xc>
    1ace:	4770      	bx	lr
    1ad0:	b510      	push	{r4, lr}
    1ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
    1ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
    1ada:	4291      	cmp	r1, r2
    1adc:	d1f9      	bne.n	1ad2 <memcpy+0xe>
    1ade:	bd10      	pop	{r4, pc}

00001ae0 <memset>:
    1ae0:	4402      	add	r2, r0
    1ae2:	4603      	mov	r3, r0
    1ae4:	4293      	cmp	r3, r2
    1ae6:	d100      	bne.n	1aea <memset+0xa>
    1ae8:	4770      	bx	lr
    1aea:	f803 1b01 	strb.w	r1, [r3], #1
    1aee:	e7f9      	b.n	1ae4 <memset+0x4>

00001af0 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1af0:	2300      	movs	r3, #0
}
    1af2:	4618      	mov	r0, r3
    1af4:	4770      	bx	lr

00001af6 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1af6:	b082      	sub	sp, #8
    1af8:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1afa:	2301      	movs	r3, #1
}
    1afc:	4618      	mov	r0, r3
    1afe:	b002      	add	sp, #8
    1b00:	4770      	bx	lr

00001b02 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b02:	b082      	sub	sp, #8
    1b04:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b06:	bf00      	nop
    1b08:	b002      	add	sp, #8
    1b0a:	4770      	bx	lr

00001b0c <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b0c:	b082      	sub	sp, #8
    1b0e:	9001      	str	r0, [sp, #4]
    return Micros;
    1b10:	9b01      	ldr	r3, [sp, #4]
}
    1b12:	4618      	mov	r0, r3
    1b14:	b002      	add	sp, #8
    1b16:	4770      	bx	lr

00001b18 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b18:	b500      	push	{lr}
    1b1a:	b083      	sub	sp, #12
    1b1c:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b1e:	f000 f86d 	bl	1bfc <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b22:	bf00      	nop
    1b24:	b003      	add	sp, #12
    1b26:	f85d fb04 	ldr.w	pc, [sp], #4

00001b2a <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b2a:	b500      	push	{lr}
    1b2c:	b085      	sub	sp, #20
    1b2e:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b30:	2300      	movs	r3, #0
    1b32:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b34:	9b01      	ldr	r3, [sp, #4]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d003      	beq.n	1b42 <OsIf_GetCounter+0x18>
    1b3a:	9b01      	ldr	r3, [sp, #4]
    1b3c:	2b01      	cmp	r3, #1
    1b3e:	d004      	beq.n	1b4a <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b40:	e007      	b.n	1b52 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b42:	f7ff ffd5 	bl	1af0 <OsIf_Timer_Dummy_GetCounter>
    1b46:	9003      	str	r0, [sp, #12]
            break;
    1b48:	e003      	b.n	1b52 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1b4a:	f000 f873 	bl	1c34 <OsIf_Timer_System_GetCounter>
    1b4e:	9003      	str	r0, [sp, #12]
            break;
    1b50:	bf00      	nop
    }

    return Value;
    1b52:	9b03      	ldr	r3, [sp, #12]
}
    1b54:	4618      	mov	r0, r3
    1b56:	b005      	add	sp, #20
    1b58:	f85d fb04 	ldr.w	pc, [sp], #4

00001b5c <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1b5c:	b500      	push	{lr}
    1b5e:	b085      	sub	sp, #20
    1b60:	9001      	str	r0, [sp, #4]
    1b62:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1b64:	2300      	movs	r3, #0
    1b66:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b68:	9b00      	ldr	r3, [sp, #0]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d003      	beq.n	1b76 <OsIf_GetElapsed+0x1a>
    1b6e:	9b00      	ldr	r3, [sp, #0]
    1b70:	2b01      	cmp	r3, #1
    1b72:	d005      	beq.n	1b80 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b74:	e009      	b.n	1b8a <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1b76:	9801      	ldr	r0, [sp, #4]
    1b78:	f7ff ffbd 	bl	1af6 <OsIf_Timer_Dummy_GetElapsed>
    1b7c:	9003      	str	r0, [sp, #12]
            break;
    1b7e:	e004      	b.n	1b8a <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1b80:	9801      	ldr	r0, [sp, #4]
    1b82:	f000 f865 	bl	1c50 <OsIf_Timer_System_GetElapsed>
    1b86:	9003      	str	r0, [sp, #12]
            break;
    1b88:	bf00      	nop
    }

    return Value;
    1b8a:	9b03      	ldr	r3, [sp, #12]
}
    1b8c:	4618      	mov	r0, r3
    1b8e:	b005      	add	sp, #20
    1b90:	f85d fb04 	ldr.w	pc, [sp], #4

00001b94 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1b94:	b500      	push	{lr}
    1b96:	b083      	sub	sp, #12
    1b98:	9001      	str	r0, [sp, #4]
    1b9a:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1b9c:	9b00      	ldr	r3, [sp, #0]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d003      	beq.n	1baa <OsIf_SetTimerFrequency+0x16>
    1ba2:	9b00      	ldr	r3, [sp, #0]
    1ba4:	2b01      	cmp	r3, #1
    1ba6:	d004      	beq.n	1bb2 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1ba8:	e007      	b.n	1bba <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1baa:	9801      	ldr	r0, [sp, #4]
    1bac:	f7ff ffa9 	bl	1b02 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1bb0:	e003      	b.n	1bba <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1bb2:	9801      	ldr	r0, [sp, #4]
    1bb4:	f000 f85c 	bl	1c70 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1bb8:	bf00      	nop
    }
}
    1bba:	bf00      	nop
    1bbc:	b003      	add	sp, #12
    1bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc2 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1bc2:	b500      	push	{lr}
    1bc4:	b085      	sub	sp, #20
    1bc6:	9001      	str	r0, [sp, #4]
    1bc8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1bca:	2300      	movs	r3, #0
    1bcc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bce:	9b00      	ldr	r3, [sp, #0]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d003      	beq.n	1bdc <OsIf_MicrosToTicks+0x1a>
    1bd4:	9b00      	ldr	r3, [sp, #0]
    1bd6:	2b01      	cmp	r3, #1
    1bd8:	d005      	beq.n	1be6 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bda:	e009      	b.n	1bf0 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1bdc:	9801      	ldr	r0, [sp, #4]
    1bde:	f7ff ff95 	bl	1b0c <OsIf_Timer_Dummy_MicrosToTicks>
    1be2:	9003      	str	r0, [sp, #12]
            break;
    1be4:	e004      	b.n	1bf0 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1be6:	9801      	ldr	r0, [sp, #4]
    1be8:	f000 f850 	bl	1c8c <OsIf_Timer_System_MicrosToTicks>
    1bec:	9003      	str	r0, [sp, #12]
            break;
    1bee:	bf00      	nop
    }

    return Value;
    1bf0:	9b03      	ldr	r3, [sp, #12]
}
    1bf2:	4618      	mov	r0, r3
    1bf4:	b005      	add	sp, #20
    1bf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001bfc <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1bfc:	b500      	push	{lr}
    1bfe:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c00:	2300      	movs	r3, #0
    1c02:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c04:	4a09      	ldr	r2, [pc, #36]	; (1c2c <OsIf_Timer_System_Init+0x30>)
    1c06:	9b01      	ldr	r3, [sp, #4]
    1c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c0c:	685a      	ldr	r2, [r3, #4]
    1c0e:	4908      	ldr	r1, [pc, #32]	; (1c30 <OsIf_Timer_System_Init+0x34>)
    1c10:	9b01      	ldr	r3, [sp, #4]
    1c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c16:	4a06      	ldr	r2, [pc, #24]	; (1c30 <OsIf_Timer_System_Init+0x34>)
    1c18:	9b01      	ldr	r3, [sp, #4]
    1c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c1e:	4618      	mov	r0, r3
    1c20:	f000 f868 	bl	1cf4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c24:	bf00      	nop
    1c26:	b003      	add	sp, #12
    1c28:	f85d fb04 	ldr.w	pc, [sp], #4
    1c2c:	00008ee0 	.word	0x00008ee0
    1c30:	1fff8b40 	.word	0x1fff8b40

00001c34 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c34:	b500      	push	{lr}
    1c36:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c38:	2300      	movs	r3, #0
    1c3a:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c3c:	2300      	movs	r3, #0
    1c3e:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1c40:	f000 f86c 	bl	1d1c <OsIf_Timer_System_Internal_GetCounter>
    1c44:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c46:	9b01      	ldr	r3, [sp, #4]
}
    1c48:	4618      	mov	r0, r3
    1c4a:	b003      	add	sp, #12
    1c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c50 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1c50:	b500      	push	{lr}
    1c52:	b085      	sub	sp, #20
    1c54:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1c56:	2300      	movs	r3, #0
    1c58:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1c5a:	2300      	movs	r3, #0
    1c5c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1c5e:	9801      	ldr	r0, [sp, #4]
    1c60:	f000 f864 	bl	1d2c <OsIf_Timer_System_Internal_GetElapsed>
    1c64:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1c66:	9b03      	ldr	r3, [sp, #12]
}
    1c68:	4618      	mov	r0, r3
    1c6a:	b005      	add	sp, #20
    1c6c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c70 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1c70:	b084      	sub	sp, #16
    1c72:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c74:	2300      	movs	r3, #0
    1c76:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1c78:	4903      	ldr	r1, [pc, #12]	; (1c88 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1c7a:	9b03      	ldr	r3, [sp, #12]
    1c7c:	9a01      	ldr	r2, [sp, #4]
    1c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1c82:	bf00      	nop
    1c84:	b004      	add	sp, #16
    1c86:	4770      	bx	lr
    1c88:	1fff8b40 	.word	0x1fff8b40

00001c8c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c8e:	b087      	sub	sp, #28
    1c90:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1c92:	2100      	movs	r1, #0
    1c94:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1c96:	2100      	movs	r1, #0
    1c98:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1c9a:	9901      	ldr	r1, [sp, #4]
    1c9c:	2000      	movs	r0, #0
    1c9e:	460e      	mov	r6, r1
    1ca0:	4607      	mov	r7, r0
    1ca2:	4812      	ldr	r0, [pc, #72]	; (1cec <OsIf_Timer_System_MicrosToTicks+0x60>)
    1ca4:	9904      	ldr	r1, [sp, #16]
    1ca6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1caa:	2000      	movs	r0, #0
    1cac:	460c      	mov	r4, r1
    1cae:	4605      	mov	r5, r0
    1cb0:	fb04 f007 	mul.w	r0, r4, r7
    1cb4:	fb06 f105 	mul.w	r1, r6, r5
    1cb8:	4401      	add	r1, r0
    1cba:	fba6 2304 	umull	r2, r3, r6, r4
    1cbe:	4419      	add	r1, r3
    1cc0:	460b      	mov	r3, r1
    1cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1cce:	4a08      	ldr	r2, [pc, #32]	; (1cf0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1cd0:	f04f 0300 	mov.w	r3, #0
    1cd4:	f7fe fc66 	bl	5a4 <__aeabi_uldivmod>
    1cd8:	4602      	mov	r2, r0
    1cda:	460b      	mov	r3, r1
    1cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1ce0:	9b02      	ldr	r3, [sp, #8]
    1ce2:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1ce4:	9b05      	ldr	r3, [sp, #20]
}
    1ce6:	4618      	mov	r0, r3
    1ce8:	b007      	add	sp, #28
    1cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cec:	1fff8b40 	.word	0x1fff8b40
    1cf0:	000f4240 	.word	0x000f4240

00001cf4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1cf4:	b082      	sub	sp, #8
    1cf6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1cf8:	4b07      	ldr	r3, [pc, #28]	; (1d18 <OsIf_Timer_System_Internal_Init+0x24>)
    1cfa:	2200      	movs	r2, #0
    1cfc:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1cfe:	4b06      	ldr	r3, [pc, #24]	; (1d18 <OsIf_Timer_System_Internal_Init+0x24>)
    1d00:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d04:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d06:	4b04      	ldr	r3, [pc, #16]	; (1d18 <OsIf_Timer_System_Internal_Init+0x24>)
    1d08:	2200      	movs	r2, #0
    1d0a:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d0c:	4b02      	ldr	r3, [pc, #8]	; (1d18 <OsIf_Timer_System_Internal_Init+0x24>)
    1d0e:	2205      	movs	r2, #5
    1d10:	601a      	str	r2, [r3, #0]
}
    1d12:	bf00      	nop
    1d14:	b002      	add	sp, #8
    1d16:	4770      	bx	lr
    1d18:	e000e010 	.word	0xe000e010

00001d1c <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d1c:	4b02      	ldr	r3, [pc, #8]	; (1d28 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d1e:	689b      	ldr	r3, [r3, #8]
    1d20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d24:	4618      	mov	r0, r3
    1d26:	4770      	bx	lr
    1d28:	e000e010 	.word	0xe000e010

00001d2c <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d2c:	b084      	sub	sp, #16
    1d2e:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d30:	4b10      	ldr	r3, [pc, #64]	; (1d74 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d32:	689b      	ldr	r3, [r3, #8]
    1d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d38:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d3a:	2300      	movs	r3, #0
    1d3c:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d3e:	9b01      	ldr	r3, [sp, #4]
    1d40:	681b      	ldr	r3, [r3, #0]
    1d42:	9a02      	ldr	r2, [sp, #8]
    1d44:	429a      	cmp	r2, r3
    1d46:	d909      	bls.n	1d5c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1d48:	9b01      	ldr	r3, [sp, #4]
    1d4a:	681a      	ldr	r2, [r3, #0]
    1d4c:	9b02      	ldr	r3, [sp, #8]
    1d4e:	1ad3      	subs	r3, r2, r3
    1d50:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1d54:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1d58:	9303      	str	r3, [sp, #12]
    1d5a:	e004      	b.n	1d66 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1d5c:	9b01      	ldr	r3, [sp, #4]
    1d5e:	681a      	ldr	r2, [r3, #0]
    1d60:	9b02      	ldr	r3, [sp, #8]
    1d62:	1ad3      	subs	r3, r2, r3
    1d64:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1d66:	9b01      	ldr	r3, [sp, #4]
    1d68:	9a02      	ldr	r2, [sp, #8]
    1d6a:	601a      	str	r2, [r3, #0]

    return dif;
    1d6c:	9b03      	ldr	r3, [sp, #12]
}
    1d6e:	4618      	mov	r0, r3
    1d70:	b004      	add	sp, #16
    1d72:	4770      	bx	lr
    1d74:	e000e010 	.word	0xe000e010

00001d78 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1d78:	b082      	sub	sp, #8
    1d7a:	9001      	str	r0, [sp, #4]
    1d7c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1d7e:	bf00      	nop
    1d80:	b002      	add	sp, #8
    1d82:	4770      	bx	lr

00001d84 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1d84:	b500      	push	{lr}
    1d86:	b085      	sub	sp, #20
    1d88:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1d8a:	4b24      	ldr	r3, [pc, #144]	; (1e1c <Clock_Ip_UpdateDriverContext+0x98>)
    1d8c:	2201      	movs	r2, #1
    1d8e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1d90:	4b23      	ldr	r3, [pc, #140]	; (1e20 <Clock_Ip_UpdateDriverContext+0x9c>)
    1d92:	681b      	ldr	r3, [r3, #0]
    1d94:	2102      	movs	r1, #2
    1d96:	4618      	mov	r0, r3
    1d98:	f003 fc32 	bl	5600 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1d9c:	2300      	movs	r3, #0
    1d9e:	f88d 300f 	strb.w	r3, [sp, #15]
    1da2:	e015      	b.n	1dd0 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1da4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1da8:	9a01      	ldr	r2, [sp, #4]
    1daa:	334a      	adds	r3, #74	; 0x4a
    1dac:	00db      	lsls	r3, r3, #3
    1dae:	4413      	add	r3, r2
    1db0:	6858      	ldr	r0, [r3, #4]
    1db2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1db6:	9a01      	ldr	r2, [sp, #4]
    1db8:	334a      	adds	r3, #74	; 0x4a
    1dba:	00db      	lsls	r3, r3, #3
    1dbc:	4413      	add	r3, r2
    1dbe:	689b      	ldr	r3, [r3, #8]
    1dc0:	4619      	mov	r1, r3
    1dc2:	f001 fadc 	bl	337e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1dca:	3301      	adds	r3, #1
    1dcc:	f88d 300f 	strb.w	r3, [sp, #15]
    1dd0:	9b01      	ldr	r3, [sp, #4]
    1dd2:	7bdb      	ldrb	r3, [r3, #15]
    1dd4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dd8:	429a      	cmp	r2, r3
    1dda:	d3e3      	bcc.n	1da4 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1ddc:	f000 f824 	bl	1e28 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1de0:	2301      	movs	r3, #1
    1de2:	f88d 300f 	strb.w	r3, [sp, #15]
    1de6:	e00e      	b.n	1e06 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1de8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dec:	9b01      	ldr	r3, [sp, #4]
    1dee:	327e      	adds	r2, #126	; 0x7e
    1df0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1df4:	490b      	ldr	r1, [pc, #44]	; (1e24 <Clock_Ip_UpdateDriverContext+0xa0>)
    1df6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1dfa:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1dfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e00:	3301      	adds	r3, #1
    1e02:	f88d 300f 	strb.w	r3, [sp, #15]
    1e06:	9b01      	ldr	r3, [sp, #4]
    1e08:	7cdb      	ldrb	r3, [r3, #19]
    1e0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e0e:	429a      	cmp	r2, r3
    1e10:	d3ea      	bcc.n	1de8 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e12:	bf00      	nop
    1e14:	bf00      	nop
    1e16:	b005      	add	sp, #20
    1e18:	f85d fb04 	ldr.w	pc, [sp], #4
    1e1c:	1fff8b10 	.word	0x1fff8b10
    1e20:	1fff8b44 	.word	0x1fff8b44
    1e24:	1fff8b50 	.word	0x1fff8b50

00001e28 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e28:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e2a:	4b23      	ldr	r3, [pc, #140]	; (1eb8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e2c:	781b      	ldrb	r3, [r3, #0]
    1e2e:	f083 0301 	eor.w	r3, r3, #1
    1e32:	b2db      	uxtb	r3, r3
    1e34:	2b00      	cmp	r3, #0
    1e36:	d03d      	beq.n	1eb4 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e38:	4b1f      	ldr	r3, [pc, #124]	; (1eb8 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e3a:	2201      	movs	r2, #1
    1e3c:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e3e:	4b1f      	ldr	r3, [pc, #124]	; (1ebc <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e40:	685b      	ldr	r3, [r3, #4]
    1e42:	2100      	movs	r1, #0
    1e44:	2000      	movs	r0, #0
    1e46:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1e48:	4b1c      	ldr	r3, [pc, #112]	; (1ebc <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e4a:	689b      	ldr	r3, [r3, #8]
    1e4c:	2057      	movs	r0, #87	; 0x57
    1e4e:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e50:	4b1b      	ldr	r3, [pc, #108]	; (1ec0 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	2000      	movs	r0, #0
    1e56:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1e58:	4b1a      	ldr	r3, [pc, #104]	; (1ec4 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	2000      	movs	r0, #0
    1e5e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1e60:	4b19      	ldr	r3, [pc, #100]	; (1ec8 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	2000      	movs	r0, #0
    1e66:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e68:	4b18      	ldr	r3, [pc, #96]	; (1ecc <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e6a:	685b      	ldr	r3, [r3, #4]
    1e6c:	2000      	movs	r0, #0
    1e6e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e70:	4b16      	ldr	r3, [pc, #88]	; (1ecc <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1e72:	689b      	ldr	r3, [r3, #8]
    1e74:	2057      	movs	r0, #87	; 0x57
    1e76:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e78:	4b15      	ldr	r3, [pc, #84]	; (1ed0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e7a:	681b      	ldr	r3, [r3, #0]
    1e7c:	2000      	movs	r0, #0
    1e7e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1e80:	4b13      	ldr	r3, [pc, #76]	; (1ed0 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1e82:	685b      	ldr	r3, [r3, #4]
    1e84:	2100      	movs	r1, #0
    1e86:	2057      	movs	r0, #87	; 0x57
    1e88:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e8a:	4b12      	ldr	r3, [pc, #72]	; (1ed4 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1e8c:	681b      	ldr	r3, [r3, #0]
    1e8e:	2000      	movs	r0, #0
    1e90:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1e92:	4b11      	ldr	r3, [pc, #68]	; (1ed8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e94:	685b      	ldr	r3, [r3, #4]
    1e96:	2000      	movs	r0, #0
    1e98:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1e9a:	4b0f      	ldr	r3, [pc, #60]	; (1ed8 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1e9c:	689b      	ldr	r3, [r3, #8]
    1e9e:	2057      	movs	r0, #87	; 0x57
    1ea0:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ea2:	4b0e      	ldr	r3, [pc, #56]	; (1edc <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1ea4:	685b      	ldr	r3, [r3, #4]
    1ea6:	2000      	movs	r0, #0
    1ea8:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1eaa:	4b0d      	ldr	r3, [pc, #52]	; (1ee0 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	2100      	movs	r1, #0
    1eb0:	2000      	movs	r0, #0
    1eb2:	4798      	blx	r3
    }
}
    1eb4:	bf00      	nop
    1eb6:	bd08      	pop	{r3, pc}
    1eb8:	1fff8b48 	.word	0x1fff8b48
    1ebc:	00008998 	.word	0x00008998
    1ec0:	000088ac 	.word	0x000088ac
    1ec4:	000088e8 	.word	0x000088e8
    1ec8:	000088f0 	.word	0x000088f0
    1ecc:	00008918 	.word	0x00008918
    1ed0:	00008924 	.word	0x00008924
    1ed4:	0000895c 	.word	0x0000895c
    1ed8:	000089a8 	.word	0x000089a8
    1edc:	000089d4 	.word	0x000089d4
    1ee0:	000089d0 	.word	0x000089d0

00001ee4 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1ee4:	b500      	push	{lr}
    1ee6:	b085      	sub	sp, #20
    1ee8:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1eea:	9b01      	ldr	r3, [sp, #4]
    1eec:	7adb      	ldrb	r3, [r3, #11]
    1eee:	9303      	str	r3, [sp, #12]
    1ef0:	e01f      	b.n	1f32 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ef2:	9b03      	ldr	r3, [sp, #12]
    1ef4:	1e5a      	subs	r2, r3, #1
    1ef6:	9b01      	ldr	r3, [sp, #4]
    1ef8:	320d      	adds	r2, #13
    1efa:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1efe:	495a      	ldr	r1, [pc, #360]	; (2068 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f00:	4613      	mov	r3, r2
    1f02:	00db      	lsls	r3, r3, #3
    1f04:	4413      	add	r3, r2
    1f06:	440b      	add	r3, r1
    1f08:	3301      	adds	r3, #1
    1f0a:	781b      	ldrb	r3, [r3, #0]
    1f0c:	461a      	mov	r2, r3
    1f0e:	4b57      	ldr	r3, [pc, #348]	; (206c <Clock_Ip_ResetClockConfiguration+0x188>)
    1f10:	5c9b      	ldrb	r3, [r3, r2]
    1f12:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f14:	4a56      	ldr	r2, [pc, #344]	; (2070 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f16:	9b02      	ldr	r3, [sp, #8]
    1f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f1c:	9a03      	ldr	r2, [sp, #12]
    1f1e:	3a01      	subs	r2, #1
    1f20:	320d      	adds	r2, #13
    1f22:	00d2      	lsls	r2, r2, #3
    1f24:	9901      	ldr	r1, [sp, #4]
    1f26:	440a      	add	r2, r1
    1f28:	4610      	mov	r0, r2
    1f2a:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f2c:	9b03      	ldr	r3, [sp, #12]
    1f2e:	3b01      	subs	r3, #1
    1f30:	9303      	str	r3, [sp, #12]
    1f32:	9b03      	ldr	r3, [sp, #12]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d1dc      	bne.n	1ef2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f38:	9b01      	ldr	r3, [sp, #4]
    1f3a:	7b9b      	ldrb	r3, [r3, #14]
    1f3c:	9303      	str	r3, [sp, #12]
    1f3e:	e026      	b.n	1f8e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f40:	9b03      	ldr	r3, [sp, #12]
    1f42:	3b01      	subs	r3, #1
    1f44:	9a01      	ldr	r2, [sp, #4]
    1f46:	3324      	adds	r3, #36	; 0x24
    1f48:	011b      	lsls	r3, r3, #4
    1f4a:	4413      	add	r3, r2
    1f4c:	3304      	adds	r3, #4
    1f4e:	681a      	ldr	r2, [r3, #0]
    1f50:	4945      	ldr	r1, [pc, #276]	; (2068 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f52:	4613      	mov	r3, r2
    1f54:	00db      	lsls	r3, r3, #3
    1f56:	4413      	add	r3, r2
    1f58:	440b      	add	r3, r1
    1f5a:	3301      	adds	r3, #1
    1f5c:	781b      	ldrb	r3, [r3, #0]
    1f5e:	461a      	mov	r2, r3
    1f60:	4b44      	ldr	r3, [pc, #272]	; (2074 <Clock_Ip_ResetClockConfiguration+0x190>)
    1f62:	5c9b      	ldrb	r3, [r3, r2]
    1f64:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1f66:	4944      	ldr	r1, [pc, #272]	; (2078 <Clock_Ip_ResetClockConfiguration+0x194>)
    1f68:	9a02      	ldr	r2, [sp, #8]
    1f6a:	4613      	mov	r3, r2
    1f6c:	005b      	lsls	r3, r3, #1
    1f6e:	4413      	add	r3, r2
    1f70:	009b      	lsls	r3, r3, #2
    1f72:	440b      	add	r3, r1
    1f74:	681b      	ldr	r3, [r3, #0]
    1f76:	9a03      	ldr	r2, [sp, #12]
    1f78:	3a01      	subs	r2, #1
    1f7a:	3224      	adds	r2, #36	; 0x24
    1f7c:	0112      	lsls	r2, r2, #4
    1f7e:	9901      	ldr	r1, [sp, #4]
    1f80:	440a      	add	r2, r1
    1f82:	3204      	adds	r2, #4
    1f84:	4610      	mov	r0, r2
    1f86:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f88:	9b03      	ldr	r3, [sp, #12]
    1f8a:	3b01      	subs	r3, #1
    1f8c:	9303      	str	r3, [sp, #12]
    1f8e:	9b03      	ldr	r3, [sp, #12]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d1d5      	bne.n	1f40 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1f94:	9b01      	ldr	r3, [sp, #4]
    1f96:	7a9b      	ldrb	r3, [r3, #10]
    1f98:	9303      	str	r3, [sp, #12]
    1f9a:	e02a      	b.n	1ff2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f9c:	9b03      	ldr	r3, [sp, #12]
    1f9e:	1e5a      	subs	r2, r3, #1
    1fa0:	9901      	ldr	r1, [sp, #4]
    1fa2:	4613      	mov	r3, r2
    1fa4:	009b      	lsls	r3, r3, #2
    1fa6:	4413      	add	r3, r2
    1fa8:	00db      	lsls	r3, r3, #3
    1faa:	440b      	add	r3, r1
    1fac:	3340      	adds	r3, #64	; 0x40
    1fae:	681a      	ldr	r2, [r3, #0]
    1fb0:	492d      	ldr	r1, [pc, #180]	; (2068 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fb2:	4613      	mov	r3, r2
    1fb4:	00db      	lsls	r3, r3, #3
    1fb6:	4413      	add	r3, r2
    1fb8:	440b      	add	r3, r1
    1fba:	3301      	adds	r3, #1
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	461a      	mov	r2, r3
    1fc0:	4b2e      	ldr	r3, [pc, #184]	; (207c <Clock_Ip_ResetClockConfiguration+0x198>)
    1fc2:	5c9b      	ldrb	r3, [r3, r2]
    1fc4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1fc6:	492e      	ldr	r1, [pc, #184]	; (2080 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1fc8:	9a02      	ldr	r2, [sp, #8]
    1fca:	4613      	mov	r3, r2
    1fcc:	009b      	lsls	r3, r3, #2
    1fce:	4413      	add	r3, r2
    1fd0:	009b      	lsls	r3, r3, #2
    1fd2:	440b      	add	r3, r1
    1fd4:	6819      	ldr	r1, [r3, #0]
    1fd6:	9b03      	ldr	r3, [sp, #12]
    1fd8:	1e5a      	subs	r2, r3, #1
    1fda:	4613      	mov	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	4413      	add	r3, r2
    1fe0:	00db      	lsls	r3, r3, #3
    1fe2:	3340      	adds	r3, #64	; 0x40
    1fe4:	9a01      	ldr	r2, [sp, #4]
    1fe6:	4413      	add	r3, r2
    1fe8:	4618      	mov	r0, r3
    1fea:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fec:	9b03      	ldr	r3, [sp, #12]
    1fee:	3b01      	subs	r3, #1
    1ff0:	9303      	str	r3, [sp, #12]
    1ff2:	9b03      	ldr	r3, [sp, #12]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d1d1      	bne.n	1f9c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1ff8:	9b01      	ldr	r3, [sp, #4]
    1ffa:	7a5b      	ldrb	r3, [r3, #9]
    1ffc:	9303      	str	r3, [sp, #12]
    1ffe:	e02b      	b.n	2058 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2000:	9b03      	ldr	r3, [sp, #12]
    2002:	1e5a      	subs	r2, r3, #1
    2004:	9901      	ldr	r1, [sp, #4]
    2006:	4613      	mov	r3, r2
    2008:	009b      	lsls	r3, r3, #2
    200a:	4413      	add	r3, r2
    200c:	009b      	lsls	r3, r3, #2
    200e:	440b      	add	r3, r1
    2010:	332c      	adds	r3, #44	; 0x2c
    2012:	681a      	ldr	r2, [r3, #0]
    2014:	4914      	ldr	r1, [pc, #80]	; (2068 <Clock_Ip_ResetClockConfiguration+0x184>)
    2016:	4613      	mov	r3, r2
    2018:	00db      	lsls	r3, r3, #3
    201a:	4413      	add	r3, r2
    201c:	440b      	add	r3, r1
    201e:	3301      	adds	r3, #1
    2020:	781b      	ldrb	r3, [r3, #0]
    2022:	461a      	mov	r2, r3
    2024:	4b17      	ldr	r3, [pc, #92]	; (2084 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2026:	5c9b      	ldrb	r3, [r3, r2]
    2028:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    202a:	4917      	ldr	r1, [pc, #92]	; (2088 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    202c:	9a02      	ldr	r2, [sp, #8]
    202e:	4613      	mov	r3, r2
    2030:	009b      	lsls	r3, r3, #2
    2032:	4413      	add	r3, r2
    2034:	009b      	lsls	r3, r3, #2
    2036:	440b      	add	r3, r1
    2038:	6819      	ldr	r1, [r3, #0]
    203a:	9b03      	ldr	r3, [sp, #12]
    203c:	1e5a      	subs	r2, r3, #1
    203e:	4613      	mov	r3, r2
    2040:	009b      	lsls	r3, r3, #2
    2042:	4413      	add	r3, r2
    2044:	009b      	lsls	r3, r3, #2
    2046:	3328      	adds	r3, #40	; 0x28
    2048:	9a01      	ldr	r2, [sp, #4]
    204a:	4413      	add	r3, r2
    204c:	3304      	adds	r3, #4
    204e:	4618      	mov	r0, r3
    2050:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2052:	9b03      	ldr	r3, [sp, #12]
    2054:	3b01      	subs	r3, #1
    2056:	9303      	str	r3, [sp, #12]
    2058:	9b03      	ldr	r3, [sp, #12]
    205a:	2b00      	cmp	r3, #0
    205c:	d1d0      	bne.n	2000 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    205e:	bf00      	nop
    2060:	bf00      	nop
    2062:	b005      	add	sp, #20
    2064:	f85d fb04 	ldr.w	pc, [sp], #4
    2068:	0000839c 	.word	0x0000839c
    206c:	0000836c 	.word	0x0000836c
    2070:	000089d4 	.word	0x000089d4
    2074:	0000834c 	.word	0x0000834c
    2078:	00008918 	.word	0x00008918
    207c:	0000835c 	.word	0x0000835c
    2080:	000089a8 	.word	0x000089a8
    2084:	0000831c 	.word	0x0000831c
    2088:	000088f0 	.word	0x000088f0

0000208c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    208c:	b500      	push	{lr}
    208e:	b085      	sub	sp, #20
    2090:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2092:	2301      	movs	r3, #1
    2094:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2096:	9801      	ldr	r0, [sp, #4]
    2098:	f000 f818 	bl	20cc <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    209c:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <Clock_Ip_Init+0x3c>)
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d00a      	beq.n	20ba <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    20a4:	f000 fb74 	bl	2790 <Clock_Ip_GetPllStatus>
    20a8:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    20aa:	9b02      	ldr	r3, [sp, #8]
    20ac:	2b00      	cmp	r3, #0
    20ae:	d106      	bne.n	20be <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    20b0:	f000 fbf2 	bl	2898 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    20b4:	2300      	movs	r3, #0
    20b6:	9303      	str	r3, [sp, #12]
    20b8:	e001      	b.n	20be <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    20ba:	2300      	movs	r3, #0
    20bc:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    20be:	9b03      	ldr	r3, [sp, #12]
}
    20c0:	4618      	mov	r0, r3
    20c2:	b005      	add	sp, #20
    20c4:	f85d fb04 	ldr.w	pc, [sp], #4
    20c8:	1fff8b4c 	.word	0x1fff8b4c

000020cc <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    20cc:	b510      	push	{r4, lr}
    20ce:	b084      	sub	sp, #16
    20d0:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    20d2:	4a9f      	ldr	r2, [pc, #636]	; (2350 <Clock_Ip_InitClock+0x284>)
    20d4:	9b01      	ldr	r3, [sp, #4]
    20d6:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    20d8:	2101      	movs	r1, #1
    20da:	9801      	ldr	r0, [sp, #4]
    20dc:	f003 fa90 	bl	5600 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    20e0:	4b9b      	ldr	r3, [pc, #620]	; (2350 <Clock_Ip_InitClock+0x284>)
    20e2:	681b      	ldr	r3, [r3, #0]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d030      	beq.n	214a <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    20e8:	2300      	movs	r3, #0
    20ea:	9303      	str	r3, [sp, #12]
    20ec:	e027      	b.n	213e <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    20ee:	9901      	ldr	r1, [sp, #4]
    20f0:	9a03      	ldr	r2, [sp, #12]
    20f2:	4613      	mov	r3, r2
    20f4:	009b      	lsls	r3, r3, #2
    20f6:	4413      	add	r3, r2
    20f8:	009b      	lsls	r3, r3, #2
    20fa:	440b      	add	r3, r1
    20fc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2100:	681a      	ldr	r2, [r3, #0]
    2102:	4994      	ldr	r1, [pc, #592]	; (2354 <Clock_Ip_InitClock+0x288>)
    2104:	4613      	mov	r3, r2
    2106:	00db      	lsls	r3, r3, #3
    2108:	4413      	add	r3, r2
    210a:	440b      	add	r3, r1
    210c:	3301      	adds	r3, #1
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	461a      	mov	r2, r3
    2112:	4b91      	ldr	r3, [pc, #580]	; (2358 <Clock_Ip_InitClock+0x28c>)
    2114:	5c9b      	ldrb	r3, [r3, r2]
    2116:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2118:	4a90      	ldr	r2, [pc, #576]	; (235c <Clock_Ip_InitClock+0x290>)
    211a:	9b02      	ldr	r3, [sp, #8]
    211c:	011b      	lsls	r3, r3, #4
    211e:	4413      	add	r3, r2
    2120:	6819      	ldr	r1, [r3, #0]
    2122:	9a03      	ldr	r2, [sp, #12]
    2124:	4613      	mov	r3, r2
    2126:	009b      	lsls	r3, r3, #2
    2128:	4413      	add	r3, r2
    212a:	009b      	lsls	r3, r3, #2
    212c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2130:	9a01      	ldr	r2, [sp, #4]
    2132:	4413      	add	r3, r2
    2134:	4618      	mov	r0, r3
    2136:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2138:	9b03      	ldr	r3, [sp, #12]
    213a:	3301      	adds	r3, #1
    213c:	9303      	str	r3, [sp, #12]
    213e:	9b01      	ldr	r3, [sp, #4]
    2140:	7c9b      	ldrb	r3, [r3, #18]
    2142:	461a      	mov	r2, r3
    2144:	9b03      	ldr	r3, [sp, #12]
    2146:	4293      	cmp	r3, r2
    2148:	d3d1      	bcc.n	20ee <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    214a:	9801      	ldr	r0, [sp, #4]
    214c:	f7ff feca 	bl	1ee4 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2150:	2300      	movs	r3, #0
    2152:	9303      	str	r3, [sp, #12]
    2154:	e029      	b.n	21aa <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2156:	9901      	ldr	r1, [sp, #4]
    2158:	9a03      	ldr	r2, [sp, #12]
    215a:	4613      	mov	r3, r2
    215c:	005b      	lsls	r3, r3, #1
    215e:	4413      	add	r3, r2
    2160:	009b      	lsls	r3, r3, #2
    2162:	440b      	add	r3, r1
    2164:	3314      	adds	r3, #20
    2166:	681a      	ldr	r2, [r3, #0]
    2168:	497a      	ldr	r1, [pc, #488]	; (2354 <Clock_Ip_InitClock+0x288>)
    216a:	4613      	mov	r3, r2
    216c:	00db      	lsls	r3, r3, #3
    216e:	4413      	add	r3, r2
    2170:	440b      	add	r3, r1
    2172:	3301      	adds	r3, #1
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	461a      	mov	r2, r3
    2178:	4b79      	ldr	r3, [pc, #484]	; (2360 <Clock_Ip_InitClock+0x294>)
    217a:	5c9b      	ldrb	r3, [r3, r2]
    217c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    217e:	4979      	ldr	r1, [pc, #484]	; (2364 <Clock_Ip_InitClock+0x298>)
    2180:	9a02      	ldr	r2, [sp, #8]
    2182:	4613      	mov	r3, r2
    2184:	005b      	lsls	r3, r3, #1
    2186:	4413      	add	r3, r2
    2188:	009b      	lsls	r3, r3, #2
    218a:	440b      	add	r3, r1
    218c:	6819      	ldr	r1, [r3, #0]
    218e:	9a03      	ldr	r2, [sp, #12]
    2190:	4613      	mov	r3, r2
    2192:	005b      	lsls	r3, r3, #1
    2194:	4413      	add	r3, r2
    2196:	009b      	lsls	r3, r3, #2
    2198:	3310      	adds	r3, #16
    219a:	9a01      	ldr	r2, [sp, #4]
    219c:	4413      	add	r3, r2
    219e:	3304      	adds	r3, #4
    21a0:	4618      	mov	r0, r3
    21a2:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21a4:	9b03      	ldr	r3, [sp, #12]
    21a6:	3301      	adds	r3, #1
    21a8:	9303      	str	r3, [sp, #12]
    21aa:	9b01      	ldr	r3, [sp, #4]
    21ac:	7a1b      	ldrb	r3, [r3, #8]
    21ae:	461a      	mov	r2, r3
    21b0:	9b03      	ldr	r3, [sp, #12]
    21b2:	4293      	cmp	r3, r2
    21b4:	d3cf      	bcc.n	2156 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    21b6:	2300      	movs	r3, #0
    21b8:	9303      	str	r3, [sp, #12]
    21ba:	e02a      	b.n	2212 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21bc:	9901      	ldr	r1, [sp, #4]
    21be:	9a03      	ldr	r2, [sp, #12]
    21c0:	4613      	mov	r3, r2
    21c2:	009b      	lsls	r3, r3, #2
    21c4:	4413      	add	r3, r2
    21c6:	009b      	lsls	r3, r3, #2
    21c8:	440b      	add	r3, r1
    21ca:	332c      	adds	r3, #44	; 0x2c
    21cc:	681a      	ldr	r2, [r3, #0]
    21ce:	4961      	ldr	r1, [pc, #388]	; (2354 <Clock_Ip_InitClock+0x288>)
    21d0:	4613      	mov	r3, r2
    21d2:	00db      	lsls	r3, r3, #3
    21d4:	4413      	add	r3, r2
    21d6:	440b      	add	r3, r1
    21d8:	3301      	adds	r3, #1
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	461a      	mov	r2, r3
    21de:	4b62      	ldr	r3, [pc, #392]	; (2368 <Clock_Ip_InitClock+0x29c>)
    21e0:	5c9b      	ldrb	r3, [r3, r2]
    21e2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    21e4:	4961      	ldr	r1, [pc, #388]	; (236c <Clock_Ip_InitClock+0x2a0>)
    21e6:	9a02      	ldr	r2, [sp, #8]
    21e8:	4613      	mov	r3, r2
    21ea:	009b      	lsls	r3, r3, #2
    21ec:	4413      	add	r3, r2
    21ee:	009b      	lsls	r3, r3, #2
    21f0:	440b      	add	r3, r1
    21f2:	3304      	adds	r3, #4
    21f4:	6819      	ldr	r1, [r3, #0]
    21f6:	9a03      	ldr	r2, [sp, #12]
    21f8:	4613      	mov	r3, r2
    21fa:	009b      	lsls	r3, r3, #2
    21fc:	4413      	add	r3, r2
    21fe:	009b      	lsls	r3, r3, #2
    2200:	3328      	adds	r3, #40	; 0x28
    2202:	9a01      	ldr	r2, [sp, #4]
    2204:	4413      	add	r3, r2
    2206:	3304      	adds	r3, #4
    2208:	4618      	mov	r0, r3
    220a:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    220c:	9b03      	ldr	r3, [sp, #12]
    220e:	3301      	adds	r3, #1
    2210:	9303      	str	r3, [sp, #12]
    2212:	9b01      	ldr	r3, [sp, #4]
    2214:	7a5b      	ldrb	r3, [r3, #9]
    2216:	461a      	mov	r2, r3
    2218:	9b03      	ldr	r3, [sp, #12]
    221a:	4293      	cmp	r3, r2
    221c:	d3ce      	bcc.n	21bc <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    221e:	9801      	ldr	r0, [sp, #4]
    2220:	f7ff fdb0 	bl	1d84 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2224:	2300      	movs	r3, #0
    2226:	9303      	str	r3, [sp, #12]
    2228:	e028      	b.n	227c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    222a:	9901      	ldr	r1, [sp, #4]
    222c:	9a03      	ldr	r2, [sp, #12]
    222e:	4613      	mov	r3, r2
    2230:	009b      	lsls	r3, r3, #2
    2232:	4413      	add	r3, r2
    2234:	009b      	lsls	r3, r3, #2
    2236:	440b      	add	r3, r1
    2238:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    223c:	681a      	ldr	r2, [r3, #0]
    223e:	4945      	ldr	r1, [pc, #276]	; (2354 <Clock_Ip_InitClock+0x288>)
    2240:	4613      	mov	r3, r2
    2242:	00db      	lsls	r3, r3, #3
    2244:	4413      	add	r3, r2
    2246:	440b      	add	r3, r1
    2248:	3301      	adds	r3, #1
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	461a      	mov	r2, r3
    224e:	4b48      	ldr	r3, [pc, #288]	; (2370 <Clock_Ip_InitClock+0x2a4>)
    2250:	5c9b      	ldrb	r3, [r3, r2]
    2252:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2254:	4a47      	ldr	r2, [pc, #284]	; (2374 <Clock_Ip_InitClock+0x2a8>)
    2256:	9b02      	ldr	r3, [sp, #8]
    2258:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    225c:	9a03      	ldr	r2, [sp, #12]
    225e:	4613      	mov	r3, r2
    2260:	009b      	lsls	r3, r3, #2
    2262:	4413      	add	r3, r2
    2264:	009b      	lsls	r3, r3, #2
    2266:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    226a:	9a01      	ldr	r2, [sp, #4]
    226c:	4413      	add	r3, r2
    226e:	3304      	adds	r3, #4
    2270:	9903      	ldr	r1, [sp, #12]
    2272:	4618      	mov	r0, r3
    2274:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2276:	9b03      	ldr	r3, [sp, #12]
    2278:	3301      	adds	r3, #1
    227a:	9303      	str	r3, [sp, #12]
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	7c5b      	ldrb	r3, [r3, #17]
    2280:	461a      	mov	r2, r3
    2282:	9b03      	ldr	r3, [sp, #12]
    2284:	4293      	cmp	r3, r2
    2286:	d3d0      	bcc.n	222a <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2288:	2300      	movs	r3, #0
    228a:	9303      	str	r3, [sp, #12]
    228c:	e026      	b.n	22dc <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    228e:	9901      	ldr	r1, [sp, #4]
    2290:	9a03      	ldr	r2, [sp, #12]
    2292:	4613      	mov	r3, r2
    2294:	005b      	lsls	r3, r3, #1
    2296:	4413      	add	r3, r2
    2298:	009b      	lsls	r3, r3, #2
    229a:	440b      	add	r3, r1
    229c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22a0:	681a      	ldr	r2, [r3, #0]
    22a2:	492c      	ldr	r1, [pc, #176]	; (2354 <Clock_Ip_InitClock+0x288>)
    22a4:	4613      	mov	r3, r2
    22a6:	00db      	lsls	r3, r3, #3
    22a8:	4413      	add	r3, r2
    22aa:	440b      	add	r3, r1
    22ac:	3301      	adds	r3, #1
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	461a      	mov	r2, r3
    22b2:	4b31      	ldr	r3, [pc, #196]	; (2378 <Clock_Ip_InitClock+0x2ac>)
    22b4:	5c9b      	ldrb	r3, [r3, r2]
    22b6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    22b8:	4a30      	ldr	r2, [pc, #192]	; (237c <Clock_Ip_InitClock+0x2b0>)
    22ba:	9b02      	ldr	r3, [sp, #8]
    22bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    22c0:	9a03      	ldr	r2, [sp, #12]
    22c2:	4613      	mov	r3, r2
    22c4:	005b      	lsls	r3, r3, #1
    22c6:	4413      	add	r3, r2
    22c8:	009b      	lsls	r3, r3, #2
    22ca:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22ce:	9a01      	ldr	r2, [sp, #4]
    22d0:	4413      	add	r3, r2
    22d2:	4618      	mov	r0, r3
    22d4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22d6:	9b03      	ldr	r3, [sp, #12]
    22d8:	3301      	adds	r3, #1
    22da:	9303      	str	r3, [sp, #12]
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	7b5b      	ldrb	r3, [r3, #13]
    22e0:	461a      	mov	r2, r3
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	4293      	cmp	r3, r2
    22e6:	d3d2      	bcc.n	228e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    22e8:	2300      	movs	r3, #0
    22ea:	9303      	str	r3, [sp, #12]
    22ec:	e026      	b.n	233c <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    22ee:	9901      	ldr	r1, [sp, #4]
    22f0:	9a03      	ldr	r2, [sp, #12]
    22f2:	4613      	mov	r3, r2
    22f4:	005b      	lsls	r3, r3, #1
    22f6:	4413      	add	r3, r2
    22f8:	009b      	lsls	r3, r3, #2
    22fa:	440b      	add	r3, r1
    22fc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2300:	681a      	ldr	r2, [r3, #0]
    2302:	4914      	ldr	r1, [pc, #80]	; (2354 <Clock_Ip_InitClock+0x288>)
    2304:	4613      	mov	r3, r2
    2306:	00db      	lsls	r3, r3, #3
    2308:	4413      	add	r3, r2
    230a:	440b      	add	r3, r1
    230c:	3301      	adds	r3, #1
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	461a      	mov	r2, r3
    2312:	4b1b      	ldr	r3, [pc, #108]	; (2380 <Clock_Ip_InitClock+0x2b4>)
    2314:	5c9b      	ldrb	r3, [r3, r2]
    2316:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2318:	4a1a      	ldr	r2, [pc, #104]	; (2384 <Clock_Ip_InitClock+0x2b8>)
    231a:	9b02      	ldr	r3, [sp, #8]
    231c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2320:	9a03      	ldr	r2, [sp, #12]
    2322:	4613      	mov	r3, r2
    2324:	005b      	lsls	r3, r3, #1
    2326:	4413      	add	r3, r2
    2328:	009b      	lsls	r3, r3, #2
    232a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    232e:	9a01      	ldr	r2, [sp, #4]
    2330:	4413      	add	r3, r2
    2332:	4618      	mov	r0, r3
    2334:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2336:	9b03      	ldr	r3, [sp, #12]
    2338:	3301      	adds	r3, #1
    233a:	9303      	str	r3, [sp, #12]
    233c:	9b01      	ldr	r3, [sp, #4]
    233e:	7b1b      	ldrb	r3, [r3, #12]
    2340:	461a      	mov	r2, r3
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	4293      	cmp	r3, r2
    2346:	d3d2      	bcc.n	22ee <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2348:	2300      	movs	r3, #0
    234a:	9303      	str	r3, [sp, #12]
    234c:	e044      	b.n	23d8 <Clock_Ip_InitClock+0x30c>
    234e:	bf00      	nop
    2350:	1fff8b44 	.word	0x1fff8b44
    2354:	0000839c 	.word	0x0000839c
    2358:	0000838c 	.word	0x0000838c
    235c:	00008998 	.word	0x00008998
    2360:	0000832c 	.word	0x0000832c
    2364:	0000895c 	.word	0x0000895c
    2368:	0000831c 	.word	0x0000831c
    236c:	000088f0 	.word	0x000088f0
    2370:	0000837c 	.word	0x0000837c
    2374:	000089d0 	.word	0x000089d0
    2378:	0000830c 	.word	0x0000830c
    237c:	000088e8 	.word	0x000088e8
    2380:	000082fc 	.word	0x000082fc
    2384:	000088ac 	.word	0x000088ac
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2388:	9901      	ldr	r1, [sp, #4]
    238a:	9a03      	ldr	r2, [sp, #12]
    238c:	4613      	mov	r3, r2
    238e:	005b      	lsls	r3, r3, #1
    2390:	4413      	add	r3, r2
    2392:	009b      	lsls	r3, r3, #2
    2394:	440b      	add	r3, r1
    2396:	f503 730e 	add.w	r3, r3, #568	; 0x238
    239a:	681a      	ldr	r2, [r3, #0]
    239c:	49ac      	ldr	r1, [pc, #688]	; (2650 <Clock_Ip_InitClock+0x584>)
    239e:	4613      	mov	r3, r2
    23a0:	00db      	lsls	r3, r3, #3
    23a2:	4413      	add	r3, r2
    23a4:	440b      	add	r3, r1
    23a6:	3301      	adds	r3, #1
    23a8:	781b      	ldrb	r3, [r3, #0]
    23aa:	461a      	mov	r2, r3
    23ac:	4ba9      	ldr	r3, [pc, #676]	; (2654 <Clock_Ip_InitClock+0x588>)
    23ae:	5c9b      	ldrb	r3, [r3, r2]
    23b0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    23b2:	4aa9      	ldr	r2, [pc, #676]	; (2658 <Clock_Ip_InitClock+0x58c>)
    23b4:	9b02      	ldr	r3, [sp, #8]
    23b6:	00db      	lsls	r3, r3, #3
    23b8:	4413      	add	r3, r2
    23ba:	6859      	ldr	r1, [r3, #4]
    23bc:	9a03      	ldr	r2, [sp, #12]
    23be:	4613      	mov	r3, r2
    23c0:	005b      	lsls	r3, r3, #1
    23c2:	4413      	add	r3, r2
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    23ca:	9a01      	ldr	r2, [sp, #4]
    23cc:	4413      	add	r3, r2
    23ce:	4618      	mov	r0, r3
    23d0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23d2:	9b03      	ldr	r3, [sp, #12]
    23d4:	3301      	adds	r3, #1
    23d6:	9303      	str	r3, [sp, #12]
    23d8:	9b01      	ldr	r3, [sp, #4]
    23da:	7b5b      	ldrb	r3, [r3, #13]
    23dc:	461a      	mov	r2, r3
    23de:	9b03      	ldr	r3, [sp, #12]
    23e0:	4293      	cmp	r3, r2
    23e2:	d3d1      	bcc.n	2388 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    23e4:	2300      	movs	r3, #0
    23e6:	9303      	str	r3, [sp, #12]
    23e8:	e029      	b.n	243e <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    23ea:	9901      	ldr	r1, [sp, #4]
    23ec:	9a03      	ldr	r2, [sp, #12]
    23ee:	4613      	mov	r3, r2
    23f0:	009b      	lsls	r3, r3, #2
    23f2:	4413      	add	r3, r2
    23f4:	00db      	lsls	r3, r3, #3
    23f6:	440b      	add	r3, r1
    23f8:	3340      	adds	r3, #64	; 0x40
    23fa:	681a      	ldr	r2, [r3, #0]
    23fc:	4994      	ldr	r1, [pc, #592]	; (2650 <Clock_Ip_InitClock+0x584>)
    23fe:	4613      	mov	r3, r2
    2400:	00db      	lsls	r3, r3, #3
    2402:	4413      	add	r3, r2
    2404:	440b      	add	r3, r1
    2406:	3301      	adds	r3, #1
    2408:	781b      	ldrb	r3, [r3, #0]
    240a:	461a      	mov	r2, r3
    240c:	4b93      	ldr	r3, [pc, #588]	; (265c <Clock_Ip_InitClock+0x590>)
    240e:	5c9b      	ldrb	r3, [r3, r2]
    2410:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2412:	4993      	ldr	r1, [pc, #588]	; (2660 <Clock_Ip_InitClock+0x594>)
    2414:	9a02      	ldr	r2, [sp, #8]
    2416:	4613      	mov	r3, r2
    2418:	009b      	lsls	r3, r3, #2
    241a:	4413      	add	r3, r2
    241c:	009b      	lsls	r3, r3, #2
    241e:	440b      	add	r3, r1
    2420:	3304      	adds	r3, #4
    2422:	6819      	ldr	r1, [r3, #0]
    2424:	9a03      	ldr	r2, [sp, #12]
    2426:	4613      	mov	r3, r2
    2428:	009b      	lsls	r3, r3, #2
    242a:	4413      	add	r3, r2
    242c:	00db      	lsls	r3, r3, #3
    242e:	3340      	adds	r3, #64	; 0x40
    2430:	9a01      	ldr	r2, [sp, #4]
    2432:	4413      	add	r3, r2
    2434:	4618      	mov	r0, r3
    2436:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2438:	9b03      	ldr	r3, [sp, #12]
    243a:	3301      	adds	r3, #1
    243c:	9303      	str	r3, [sp, #12]
    243e:	9b01      	ldr	r3, [sp, #4]
    2440:	7a9b      	ldrb	r3, [r3, #10]
    2442:	461a      	mov	r2, r3
    2444:	9b03      	ldr	r3, [sp, #12]
    2446:	4293      	cmp	r3, r2
    2448:	d3cf      	bcc.n	23ea <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    244a:	2300      	movs	r3, #0
    244c:	9303      	str	r3, [sp, #12]
    244e:	e029      	b.n	24a4 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2450:	9901      	ldr	r1, [sp, #4]
    2452:	9a03      	ldr	r2, [sp, #12]
    2454:	4613      	mov	r3, r2
    2456:	009b      	lsls	r3, r3, #2
    2458:	4413      	add	r3, r2
    245a:	009b      	lsls	r3, r3, #2
    245c:	440b      	add	r3, r1
    245e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2462:	681a      	ldr	r2, [r3, #0]
    2464:	497a      	ldr	r1, [pc, #488]	; (2650 <Clock_Ip_InitClock+0x584>)
    2466:	4613      	mov	r3, r2
    2468:	00db      	lsls	r3, r3, #3
    246a:	4413      	add	r3, r2
    246c:	440b      	add	r3, r1
    246e:	3301      	adds	r3, #1
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	461a      	mov	r2, r3
    2474:	4b7b      	ldr	r3, [pc, #492]	; (2664 <Clock_Ip_InitClock+0x598>)
    2476:	5c9b      	ldrb	r3, [r3, r2]
    2478:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    247a:	4a7b      	ldr	r2, [pc, #492]	; (2668 <Clock_Ip_InitClock+0x59c>)
    247c:	9b02      	ldr	r3, [sp, #8]
    247e:	011b      	lsls	r3, r3, #4
    2480:	4413      	add	r3, r2
    2482:	3304      	adds	r3, #4
    2484:	681c      	ldr	r4, [r3, #0]
    2486:	9a03      	ldr	r2, [sp, #12]
    2488:	4613      	mov	r3, r2
    248a:	009b      	lsls	r3, r3, #2
    248c:	4413      	add	r3, r2
    248e:	009b      	lsls	r3, r3, #2
    2490:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2494:	9a01      	ldr	r2, [sp, #4]
    2496:	4413      	add	r3, r2
    2498:	9903      	ldr	r1, [sp, #12]
    249a:	4618      	mov	r0, r3
    249c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    249e:	9b03      	ldr	r3, [sp, #12]
    24a0:	3301      	adds	r3, #1
    24a2:	9303      	str	r3, [sp, #12]
    24a4:	9b01      	ldr	r3, [sp, #4]
    24a6:	7c9b      	ldrb	r3, [r3, #18]
    24a8:	461a      	mov	r2, r3
    24aa:	9b03      	ldr	r3, [sp, #12]
    24ac:	4293      	cmp	r3, r2
    24ae:	d3cf      	bcc.n	2450 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    24b0:	2300      	movs	r3, #0
    24b2:	9303      	str	r3, [sp, #12]
    24b4:	e02a      	b.n	250c <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    24b6:	9901      	ldr	r1, [sp, #4]
    24b8:	9a03      	ldr	r2, [sp, #12]
    24ba:	4613      	mov	r3, r2
    24bc:	009b      	lsls	r3, r3, #2
    24be:	4413      	add	r3, r2
    24c0:	009b      	lsls	r3, r3, #2
    24c2:	440b      	add	r3, r1
    24c4:	332c      	adds	r3, #44	; 0x2c
    24c6:	681a      	ldr	r2, [r3, #0]
    24c8:	4961      	ldr	r1, [pc, #388]	; (2650 <Clock_Ip_InitClock+0x584>)
    24ca:	4613      	mov	r3, r2
    24cc:	00db      	lsls	r3, r3, #3
    24ce:	4413      	add	r3, r2
    24d0:	440b      	add	r3, r1
    24d2:	3301      	adds	r3, #1
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	461a      	mov	r2, r3
    24d8:	4b64      	ldr	r3, [pc, #400]	; (266c <Clock_Ip_InitClock+0x5a0>)
    24da:	5c9b      	ldrb	r3, [r3, r2]
    24dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    24de:	4964      	ldr	r1, [pc, #400]	; (2670 <Clock_Ip_InitClock+0x5a4>)
    24e0:	9a02      	ldr	r2, [sp, #8]
    24e2:	4613      	mov	r3, r2
    24e4:	009b      	lsls	r3, r3, #2
    24e6:	4413      	add	r3, r2
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	440b      	add	r3, r1
    24ec:	3308      	adds	r3, #8
    24ee:	6819      	ldr	r1, [r3, #0]
    24f0:	9a03      	ldr	r2, [sp, #12]
    24f2:	4613      	mov	r3, r2
    24f4:	009b      	lsls	r3, r3, #2
    24f6:	4413      	add	r3, r2
    24f8:	009b      	lsls	r3, r3, #2
    24fa:	3328      	adds	r3, #40	; 0x28
    24fc:	9a01      	ldr	r2, [sp, #4]
    24fe:	4413      	add	r3, r2
    2500:	3304      	adds	r3, #4
    2502:	4618      	mov	r0, r3
    2504:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	3301      	adds	r3, #1
    250a:	9303      	str	r3, [sp, #12]
    250c:	9b01      	ldr	r3, [sp, #4]
    250e:	7a5b      	ldrb	r3, [r3, #9]
    2510:	461a      	mov	r2, r3
    2512:	9b03      	ldr	r3, [sp, #12]
    2514:	4293      	cmp	r3, r2
    2516:	d3ce      	bcc.n	24b6 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2518:	2300      	movs	r3, #0
    251a:	9303      	str	r3, [sp, #12]
    251c:	e029      	b.n	2572 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    251e:	9901      	ldr	r1, [sp, #4]
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	4613      	mov	r3, r2
    2524:	009b      	lsls	r3, r3, #2
    2526:	4413      	add	r3, r2
    2528:	00db      	lsls	r3, r3, #3
    252a:	440b      	add	r3, r1
    252c:	3340      	adds	r3, #64	; 0x40
    252e:	681a      	ldr	r2, [r3, #0]
    2530:	4947      	ldr	r1, [pc, #284]	; (2650 <Clock_Ip_InitClock+0x584>)
    2532:	4613      	mov	r3, r2
    2534:	00db      	lsls	r3, r3, #3
    2536:	4413      	add	r3, r2
    2538:	440b      	add	r3, r1
    253a:	3301      	adds	r3, #1
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	461a      	mov	r2, r3
    2540:	4b46      	ldr	r3, [pc, #280]	; (265c <Clock_Ip_InitClock+0x590>)
    2542:	5c9b      	ldrb	r3, [r3, r2]
    2544:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2546:	4946      	ldr	r1, [pc, #280]	; (2660 <Clock_Ip_InitClock+0x594>)
    2548:	9a02      	ldr	r2, [sp, #8]
    254a:	4613      	mov	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	4413      	add	r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	440b      	add	r3, r1
    2554:	330c      	adds	r3, #12
    2556:	6819      	ldr	r1, [r3, #0]
    2558:	9a03      	ldr	r2, [sp, #12]
    255a:	4613      	mov	r3, r2
    255c:	009b      	lsls	r3, r3, #2
    255e:	4413      	add	r3, r2
    2560:	00db      	lsls	r3, r3, #3
    2562:	3340      	adds	r3, #64	; 0x40
    2564:	9a01      	ldr	r2, [sp, #4]
    2566:	4413      	add	r3, r2
    2568:	4618      	mov	r0, r3
    256a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    256c:	9b03      	ldr	r3, [sp, #12]
    256e:	3301      	adds	r3, #1
    2570:	9303      	str	r3, [sp, #12]
    2572:	9b01      	ldr	r3, [sp, #4]
    2574:	7a9b      	ldrb	r3, [r3, #10]
    2576:	461a      	mov	r2, r3
    2578:	9b03      	ldr	r3, [sp, #12]
    257a:	4293      	cmp	r3, r2
    257c:	d3cf      	bcc.n	251e <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    257e:	2300      	movs	r3, #0
    2580:	9303      	str	r3, [sp, #12]
    2582:	e025      	b.n	25d0 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2584:	9a01      	ldr	r2, [sp, #4]
    2586:	9b03      	ldr	r3, [sp, #12]
    2588:	3324      	adds	r3, #36	; 0x24
    258a:	011b      	lsls	r3, r3, #4
    258c:	4413      	add	r3, r2
    258e:	3304      	adds	r3, #4
    2590:	681a      	ldr	r2, [r3, #0]
    2592:	492f      	ldr	r1, [pc, #188]	; (2650 <Clock_Ip_InitClock+0x584>)
    2594:	4613      	mov	r3, r2
    2596:	00db      	lsls	r3, r3, #3
    2598:	4413      	add	r3, r2
    259a:	440b      	add	r3, r1
    259c:	3301      	adds	r3, #1
    259e:	781b      	ldrb	r3, [r3, #0]
    25a0:	461a      	mov	r2, r3
    25a2:	4b34      	ldr	r3, [pc, #208]	; (2674 <Clock_Ip_InitClock+0x5a8>)
    25a4:	5c9b      	ldrb	r3, [r3, r2]
    25a6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    25a8:	4933      	ldr	r1, [pc, #204]	; (2678 <Clock_Ip_InitClock+0x5ac>)
    25aa:	9a02      	ldr	r2, [sp, #8]
    25ac:	4613      	mov	r3, r2
    25ae:	005b      	lsls	r3, r3, #1
    25b0:	4413      	add	r3, r2
    25b2:	009b      	lsls	r3, r3, #2
    25b4:	440b      	add	r3, r1
    25b6:	3304      	adds	r3, #4
    25b8:	681b      	ldr	r3, [r3, #0]
    25ba:	9a03      	ldr	r2, [sp, #12]
    25bc:	3224      	adds	r2, #36	; 0x24
    25be:	0112      	lsls	r2, r2, #4
    25c0:	9901      	ldr	r1, [sp, #4]
    25c2:	440a      	add	r2, r1
    25c4:	3204      	adds	r2, #4
    25c6:	4610      	mov	r0, r2
    25c8:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25ca:	9b03      	ldr	r3, [sp, #12]
    25cc:	3301      	adds	r3, #1
    25ce:	9303      	str	r3, [sp, #12]
    25d0:	9b01      	ldr	r3, [sp, #4]
    25d2:	7b9b      	ldrb	r3, [r3, #14]
    25d4:	461a      	mov	r2, r3
    25d6:	9b03      	ldr	r3, [sp, #12]
    25d8:	4293      	cmp	r3, r2
    25da:	d3d3      	bcc.n	2584 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    25dc:	4b27      	ldr	r3, [pc, #156]	; (267c <Clock_Ip_InitClock+0x5b0>)
    25de:	2200      	movs	r2, #0
    25e0:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    25e2:	4b26      	ldr	r3, [pc, #152]	; (267c <Clock_Ip_InitClock+0x5b0>)
    25e4:	2200      	movs	r2, #0
    25e6:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    25e8:	4b24      	ldr	r3, [pc, #144]	; (267c <Clock_Ip_InitClock+0x5b0>)
    25ea:	2201      	movs	r2, #1
    25ec:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    25ee:	4b23      	ldr	r3, [pc, #140]	; (267c <Clock_Ip_InitClock+0x5b0>)
    25f0:	2200      	movs	r2, #0
    25f2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    25f4:	f000 fa9c 	bl	2b30 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    25f8:	2300      	movs	r3, #0
    25fa:	9303      	str	r3, [sp, #12]
    25fc:	e04c      	b.n	2698 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    25fe:	9a01      	ldr	r2, [sp, #4]
    2600:	9b03      	ldr	r3, [sp, #12]
    2602:	330d      	adds	r3, #13
    2604:	00db      	lsls	r3, r3, #3
    2606:	4413      	add	r3, r2
    2608:	685b      	ldr	r3, [r3, #4]
    260a:	4a1d      	ldr	r2, [pc, #116]	; (2680 <Clock_Ip_InitClock+0x5b4>)
    260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2610:	2b03      	cmp	r3, #3
    2612:	d03b      	beq.n	268c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	9a03      	ldr	r2, [sp, #12]
    2618:	320d      	adds	r2, #13
    261a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    261e:	490c      	ldr	r1, [pc, #48]	; (2650 <Clock_Ip_InitClock+0x584>)
    2620:	4613      	mov	r3, r2
    2622:	00db      	lsls	r3, r3, #3
    2624:	4413      	add	r3, r2
    2626:	440b      	add	r3, r1
    2628:	3301      	adds	r3, #1
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	461a      	mov	r2, r3
    262e:	4b15      	ldr	r3, [pc, #84]	; (2684 <Clock_Ip_InitClock+0x5b8>)
    2630:	5c9b      	ldrb	r3, [r3, r2]
    2632:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2634:	4a14      	ldr	r2, [pc, #80]	; (2688 <Clock_Ip_InitClock+0x5bc>)
    2636:	9b02      	ldr	r3, [sp, #8]
    2638:	00db      	lsls	r3, r3, #3
    263a:	4413      	add	r3, r2
    263c:	685b      	ldr	r3, [r3, #4]
    263e:	9a03      	ldr	r2, [sp, #12]
    2640:	320d      	adds	r2, #13
    2642:	00d2      	lsls	r2, r2, #3
    2644:	9901      	ldr	r1, [sp, #4]
    2646:	440a      	add	r2, r1
    2648:	4610      	mov	r0, r2
    264a:	4798      	blx	r3
    264c:	e021      	b.n	2692 <Clock_Ip_InitClock+0x5c6>
    264e:	bf00      	nop
    2650:	0000839c 	.word	0x0000839c
    2654:	0000830c 	.word	0x0000830c
    2658:	000088e8 	.word	0x000088e8
    265c:	0000835c 	.word	0x0000835c
    2660:	000089a8 	.word	0x000089a8
    2664:	0000838c 	.word	0x0000838c
    2668:	00008998 	.word	0x00008998
    266c:	0000831c 	.word	0x0000831c
    2670:	000088f0 	.word	0x000088f0
    2674:	0000834c 	.word	0x0000834c
    2678:	00008918 	.word	0x00008918
    267c:	1fff8b4c 	.word	0x1fff8b4c
    2680:	000087e8 	.word	0x000087e8
    2684:	0000836c 	.word	0x0000836c
    2688:	000089d4 	.word	0x000089d4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    268c:	4b3a      	ldr	r3, [pc, #232]	; (2778 <Clock_Ip_InitClock+0x6ac>)
    268e:	2201      	movs	r2, #1
    2690:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2692:	9b03      	ldr	r3, [sp, #12]
    2694:	3301      	adds	r3, #1
    2696:	9303      	str	r3, [sp, #12]
    2698:	9b01      	ldr	r3, [sp, #4]
    269a:	7adb      	ldrb	r3, [r3, #11]
    269c:	461a      	mov	r2, r3
    269e:	9b03      	ldr	r3, [sp, #12]
    26a0:	4293      	cmp	r3, r2
    26a2:	d3ac      	bcc.n	25fe <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    26a4:	4b34      	ldr	r3, [pc, #208]	; (2778 <Clock_Ip_InitClock+0x6ac>)
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	f083 0301 	eor.w	r3, r3, #1
    26ac:	b2db      	uxtb	r3, r3
    26ae:	2b00      	cmp	r3, #0
    26b0:	d05e      	beq.n	2770 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26b2:	2300      	movs	r3, #0
    26b4:	9303      	str	r3, [sp, #12]
    26b6:	e01f      	b.n	26f8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    26b8:	9a01      	ldr	r2, [sp, #4]
    26ba:	9b03      	ldr	r3, [sp, #12]
    26bc:	334e      	adds	r3, #78	; 0x4e
    26be:	00db      	lsls	r3, r3, #3
    26c0:	4413      	add	r3, r2
    26c2:	685a      	ldr	r2, [r3, #4]
    26c4:	492d      	ldr	r1, [pc, #180]	; (277c <Clock_Ip_InitClock+0x6b0>)
    26c6:	4613      	mov	r3, r2
    26c8:	00db      	lsls	r3, r3, #3
    26ca:	4413      	add	r3, r2
    26cc:	440b      	add	r3, r1
    26ce:	3301      	adds	r3, #1
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	461a      	mov	r2, r3
    26d4:	4b2a      	ldr	r3, [pc, #168]	; (2780 <Clock_Ip_InitClock+0x6b4>)
    26d6:	5c9b      	ldrb	r3, [r3, r2]
    26d8:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    26da:	4a2a      	ldr	r2, [pc, #168]	; (2784 <Clock_Ip_InitClock+0x6b8>)
    26dc:	9b02      	ldr	r3, [sp, #8]
    26de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    26e2:	9a03      	ldr	r2, [sp, #12]
    26e4:	324e      	adds	r2, #78	; 0x4e
    26e6:	00d2      	lsls	r2, r2, #3
    26e8:	9901      	ldr	r1, [sp, #4]
    26ea:	440a      	add	r2, r1
    26ec:	3204      	adds	r2, #4
    26ee:	4610      	mov	r0, r2
    26f0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26f2:	9b03      	ldr	r3, [sp, #12]
    26f4:	3301      	adds	r3, #1
    26f6:	9303      	str	r3, [sp, #12]
    26f8:	9b01      	ldr	r3, [sp, #4]
    26fa:	7c1b      	ldrb	r3, [r3, #16]
    26fc:	461a      	mov	r2, r3
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	4293      	cmp	r3, r2
    2702:	d3d9      	bcc.n	26b8 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2704:	2300      	movs	r3, #0
    2706:	9303      	str	r3, [sp, #12]
    2708:	e028      	b.n	275c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    270a:	9901      	ldr	r1, [sp, #4]
    270c:	9a03      	ldr	r2, [sp, #12]
    270e:	4613      	mov	r3, r2
    2710:	009b      	lsls	r3, r3, #2
    2712:	4413      	add	r3, r2
    2714:	009b      	lsls	r3, r3, #2
    2716:	440b      	add	r3, r1
    2718:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    271c:	681a      	ldr	r2, [r3, #0]
    271e:	4917      	ldr	r1, [pc, #92]	; (277c <Clock_Ip_InitClock+0x6b0>)
    2720:	4613      	mov	r3, r2
    2722:	00db      	lsls	r3, r3, #3
    2724:	4413      	add	r3, r2
    2726:	440b      	add	r3, r1
    2728:	3301      	adds	r3, #1
    272a:	781b      	ldrb	r3, [r3, #0]
    272c:	461a      	mov	r2, r3
    272e:	4b16      	ldr	r3, [pc, #88]	; (2788 <Clock_Ip_InitClock+0x6bc>)
    2730:	5c9b      	ldrb	r3, [r3, r2]
    2732:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2734:	4a15      	ldr	r2, [pc, #84]	; (278c <Clock_Ip_InitClock+0x6c0>)
    2736:	9b02      	ldr	r3, [sp, #8]
    2738:	011b      	lsls	r3, r3, #4
    273a:	4413      	add	r3, r2
    273c:	330c      	adds	r3, #12
    273e:	6819      	ldr	r1, [r3, #0]
    2740:	9a03      	ldr	r2, [sp, #12]
    2742:	4613      	mov	r3, r2
    2744:	009b      	lsls	r3, r3, #2
    2746:	4413      	add	r3, r2
    2748:	009b      	lsls	r3, r3, #2
    274a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    274e:	9a01      	ldr	r2, [sp, #4]
    2750:	4413      	add	r3, r2
    2752:	4618      	mov	r0, r3
    2754:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2756:	9b03      	ldr	r3, [sp, #12]
    2758:	3301      	adds	r3, #1
    275a:	9303      	str	r3, [sp, #12]
    275c:	9b01      	ldr	r3, [sp, #4]
    275e:	7c9b      	ldrb	r3, [r3, #18]
    2760:	461a      	mov	r2, r3
    2762:	9b03      	ldr	r3, [sp, #12]
    2764:	4293      	cmp	r3, r2
    2766:	d3d0      	bcc.n	270a <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2768:	2104      	movs	r1, #4
    276a:	9801      	ldr	r0, [sp, #4]
    276c:	f002 ff48 	bl	5600 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2770:	bf00      	nop
    2772:	b004      	add	sp, #16
    2774:	bd10      	pop	{r4, pc}
    2776:	bf00      	nop
    2778:	1fff8b4c 	.word	0x1fff8b4c
    277c:	0000839c 	.word	0x0000839c
    2780:	0000833c 	.word	0x0000833c
    2784:	00008924 	.word	0x00008924
    2788:	0000838c 	.word	0x0000838c
    278c:	00008998 	.word	0x00008998

00002790 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2790:	b500      	push	{lr}
    2792:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2794:	2302      	movs	r3, #2
    2796:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2798:	2300      	movs	r3, #0
    279a:	9304      	str	r3, [sp, #16]
    279c:	e02c      	b.n	27f8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    279e:	4a36      	ldr	r2, [pc, #216]	; (2878 <Clock_Ip_GetPllStatus+0xe8>)
    27a0:	9b04      	ldr	r3, [sp, #16]
    27a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27a6:	4935      	ldr	r1, [pc, #212]	; (287c <Clock_Ip_GetPllStatus+0xec>)
    27a8:	4613      	mov	r3, r2
    27aa:	00db      	lsls	r3, r3, #3
    27ac:	4413      	add	r3, r2
    27ae:	440b      	add	r3, r1
    27b0:	3301      	adds	r3, #1
    27b2:	781b      	ldrb	r3, [r3, #0]
    27b4:	461a      	mov	r2, r3
    27b6:	4b32      	ldr	r3, [pc, #200]	; (2880 <Clock_Ip_GetPllStatus+0xf0>)
    27b8:	5c9b      	ldrb	r3, [r3, r2]
    27ba:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    27bc:	4931      	ldr	r1, [pc, #196]	; (2884 <Clock_Ip_GetPllStatus+0xf4>)
    27be:	9a03      	ldr	r2, [sp, #12]
    27c0:	4613      	mov	r3, r2
    27c2:	009b      	lsls	r3, r3, #2
    27c4:	4413      	add	r3, r2
    27c6:	009b      	lsls	r3, r3, #2
    27c8:	440b      	add	r3, r1
    27ca:	3308      	adds	r3, #8
    27cc:	681b      	ldr	r3, [r3, #0]
    27ce:	492a      	ldr	r1, [pc, #168]	; (2878 <Clock_Ip_GetPllStatus+0xe8>)
    27d0:	9a04      	ldr	r2, [sp, #16]
    27d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    27d6:	4610      	mov	r0, r2
    27d8:	4798      	blx	r3
    27da:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    27dc:	9b02      	ldr	r3, [sp, #8]
    27de:	2b01      	cmp	r3, #1
    27e0:	d102      	bne.n	27e8 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    27e2:	2301      	movs	r3, #1
    27e4:	9305      	str	r3, [sp, #20]
            break;
    27e6:	e00d      	b.n	2804 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    27e8:	9b02      	ldr	r3, [sp, #8]
    27ea:	2b02      	cmp	r3, #2
    27ec:	d101      	bne.n	27f2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    27ee:	2300      	movs	r3, #0
    27f0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27f2:	9b04      	ldr	r3, [sp, #16]
    27f4:	3301      	adds	r3, #1
    27f6:	9304      	str	r3, [sp, #16]
    27f8:	4b23      	ldr	r3, [pc, #140]	; (2888 <Clock_Ip_GetPllStatus+0xf8>)
    27fa:	789b      	ldrb	r3, [r3, #2]
    27fc:	461a      	mov	r2, r3
    27fe:	9b04      	ldr	r3, [sp, #16]
    2800:	4293      	cmp	r3, r2
    2802:	d3cc      	bcc.n	279e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2804:	9b05      	ldr	r3, [sp, #20]
    2806:	2b00      	cmp	r3, #0
    2808:	d130      	bne.n	286c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    280a:	2300      	movs	r3, #0
    280c:	9304      	str	r3, [sp, #16]
    280e:	e027      	b.n	2860 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2810:	4a1e      	ldr	r2, [pc, #120]	; (288c <Clock_Ip_GetPllStatus+0xfc>)
    2812:	9b04      	ldr	r3, [sp, #16]
    2814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2818:	4918      	ldr	r1, [pc, #96]	; (287c <Clock_Ip_GetPllStatus+0xec>)
    281a:	4613      	mov	r3, r2
    281c:	00db      	lsls	r3, r3, #3
    281e:	4413      	add	r3, r2
    2820:	440b      	add	r3, r1
    2822:	3301      	adds	r3, #1
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	461a      	mov	r2, r3
    2828:	4b19      	ldr	r3, [pc, #100]	; (2890 <Clock_Ip_GetPllStatus+0x100>)
    282a:	5c9b      	ldrb	r3, [r3, r2]
    282c:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    282e:	4919      	ldr	r1, [pc, #100]	; (2894 <Clock_Ip_GetPllStatus+0x104>)
    2830:	9a03      	ldr	r2, [sp, #12]
    2832:	4613      	mov	r3, r2
    2834:	005b      	lsls	r3, r3, #1
    2836:	4413      	add	r3, r2
    2838:	009b      	lsls	r3, r3, #2
    283a:	440b      	add	r3, r1
    283c:	3308      	adds	r3, #8
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	4912      	ldr	r1, [pc, #72]	; (288c <Clock_Ip_GetPllStatus+0xfc>)
    2842:	9a04      	ldr	r2, [sp, #16]
    2844:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2848:	4610      	mov	r0, r2
    284a:	4798      	blx	r3
    284c:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    284e:	9b01      	ldr	r3, [sp, #4]
    2850:	2b01      	cmp	r3, #1
    2852:	d102      	bne.n	285a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2854:	2301      	movs	r3, #1
    2856:	9305      	str	r3, [sp, #20]
                break;
    2858:	e008      	b.n	286c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    285a:	9b04      	ldr	r3, [sp, #16]
    285c:	3301      	adds	r3, #1
    285e:	9304      	str	r3, [sp, #16]
    2860:	4b09      	ldr	r3, [pc, #36]	; (2888 <Clock_Ip_GetPllStatus+0xf8>)
    2862:	78db      	ldrb	r3, [r3, #3]
    2864:	461a      	mov	r2, r3
    2866:	9b04      	ldr	r3, [sp, #16]
    2868:	4293      	cmp	r3, r2
    286a:	d3d1      	bcc.n	2810 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    286c:	9b05      	ldr	r3, [sp, #20]
}
    286e:	4618      	mov	r0, r3
    2870:	b007      	add	sp, #28
    2872:	f85d fb04 	ldr.w	pc, [sp], #4
    2876:	bf00      	nop
    2878:	000088a4 	.word	0x000088a4
    287c:	0000839c 	.word	0x0000839c
    2880:	0000835c 	.word	0x0000835c
    2884:	000089a8 	.word	0x000089a8
    2888:	1fff8b4c 	.word	0x1fff8b4c
    288c:	000088a8 	.word	0x000088a8
    2890:	0000834c 	.word	0x0000834c
    2894:	00008918 	.word	0x00008918

00002898 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2898:	b500      	push	{lr}
    289a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    289c:	4b55      	ldr	r3, [pc, #340]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    289e:	681b      	ldr	r3, [r3, #0]
    28a0:	2b00      	cmp	r3, #0
    28a2:	f000 80a2 	beq.w	29ea <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28a6:	2300      	movs	r3, #0
    28a8:	9301      	str	r3, [sp, #4]
    28aa:	e02c      	b.n	2906 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    28ac:	4b51      	ldr	r3, [pc, #324]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    28ae:	681a      	ldr	r2, [r3, #0]
    28b0:	9b01      	ldr	r3, [sp, #4]
    28b2:	330d      	adds	r3, #13
    28b4:	00db      	lsls	r3, r3, #3
    28b6:	4413      	add	r3, r2
    28b8:	685b      	ldr	r3, [r3, #4]
    28ba:	4a4f      	ldr	r2, [pc, #316]	; (29f8 <Clock_Ip_DistributePll+0x160>)
    28bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28c0:	2b03      	cmp	r3, #3
    28c2:	d11d      	bne.n	2900 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    28c4:	4b4b      	ldr	r3, [pc, #300]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	9a01      	ldr	r2, [sp, #4]
    28ca:	320d      	adds	r2, #13
    28cc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    28d0:	494a      	ldr	r1, [pc, #296]	; (29fc <Clock_Ip_DistributePll+0x164>)
    28d2:	4613      	mov	r3, r2
    28d4:	00db      	lsls	r3, r3, #3
    28d6:	4413      	add	r3, r2
    28d8:	440b      	add	r3, r1
    28da:	3301      	adds	r3, #1
    28dc:	781b      	ldrb	r3, [r3, #0]
    28de:	461a      	mov	r2, r3
    28e0:	4b47      	ldr	r3, [pc, #284]	; (2a00 <Clock_Ip_DistributePll+0x168>)
    28e2:	5c9b      	ldrb	r3, [r3, r2]
    28e4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    28e6:	4a47      	ldr	r2, [pc, #284]	; (2a04 <Clock_Ip_DistributePll+0x16c>)
    28e8:	9b00      	ldr	r3, [sp, #0]
    28ea:	00db      	lsls	r3, r3, #3
    28ec:	4413      	add	r3, r2
    28ee:	685b      	ldr	r3, [r3, #4]
    28f0:	4a40      	ldr	r2, [pc, #256]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    28f2:	6811      	ldr	r1, [r2, #0]
    28f4:	9a01      	ldr	r2, [sp, #4]
    28f6:	320d      	adds	r2, #13
    28f8:	00d2      	lsls	r2, r2, #3
    28fa:	440a      	add	r2, r1
    28fc:	4610      	mov	r0, r2
    28fe:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2900:	9b01      	ldr	r3, [sp, #4]
    2902:	3301      	adds	r3, #1
    2904:	9301      	str	r3, [sp, #4]
    2906:	4b3b      	ldr	r3, [pc, #236]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	7adb      	ldrb	r3, [r3, #11]
    290c:	461a      	mov	r2, r3
    290e:	9b01      	ldr	r3, [sp, #4]
    2910:	4293      	cmp	r3, r2
    2912:	d3cb      	bcc.n	28ac <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2914:	4b3c      	ldr	r3, [pc, #240]	; (2a08 <Clock_Ip_DistributePll+0x170>)
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d066      	beq.n	29ea <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    291c:	2300      	movs	r3, #0
    291e:	9301      	str	r3, [sp, #4]
    2920:	e021      	b.n	2966 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2922:	4b34      	ldr	r3, [pc, #208]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    2924:	681a      	ldr	r2, [r3, #0]
    2926:	9b01      	ldr	r3, [sp, #4]
    2928:	334e      	adds	r3, #78	; 0x4e
    292a:	00db      	lsls	r3, r3, #3
    292c:	4413      	add	r3, r2
    292e:	685a      	ldr	r2, [r3, #4]
    2930:	4932      	ldr	r1, [pc, #200]	; (29fc <Clock_Ip_DistributePll+0x164>)
    2932:	4613      	mov	r3, r2
    2934:	00db      	lsls	r3, r3, #3
    2936:	4413      	add	r3, r2
    2938:	440b      	add	r3, r1
    293a:	3301      	adds	r3, #1
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	461a      	mov	r2, r3
    2940:	4b32      	ldr	r3, [pc, #200]	; (2a0c <Clock_Ip_DistributePll+0x174>)
    2942:	5c9b      	ldrb	r3, [r3, r2]
    2944:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2946:	4a32      	ldr	r2, [pc, #200]	; (2a10 <Clock_Ip_DistributePll+0x178>)
    2948:	9b00      	ldr	r3, [sp, #0]
    294a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    294e:	4a29      	ldr	r2, [pc, #164]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    2950:	6811      	ldr	r1, [r2, #0]
    2952:	9a01      	ldr	r2, [sp, #4]
    2954:	324e      	adds	r2, #78	; 0x4e
    2956:	00d2      	lsls	r2, r2, #3
    2958:	440a      	add	r2, r1
    295a:	3204      	adds	r2, #4
    295c:	4610      	mov	r0, r2
    295e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2960:	9b01      	ldr	r3, [sp, #4]
    2962:	3301      	adds	r3, #1
    2964:	9301      	str	r3, [sp, #4]
    2966:	4b23      	ldr	r3, [pc, #140]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	7c1b      	ldrb	r3, [r3, #16]
    296c:	461a      	mov	r2, r3
    296e:	9b01      	ldr	r3, [sp, #4]
    2970:	4293      	cmp	r3, r2
    2972:	d3d6      	bcc.n	2922 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2974:	2300      	movs	r3, #0
    2976:	9301      	str	r3, [sp, #4]
    2978:	e02a      	b.n	29d0 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    297a:	4b1e      	ldr	r3, [pc, #120]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    297c:	6819      	ldr	r1, [r3, #0]
    297e:	9a01      	ldr	r2, [sp, #4]
    2980:	4613      	mov	r3, r2
    2982:	009b      	lsls	r3, r3, #2
    2984:	4413      	add	r3, r2
    2986:	009b      	lsls	r3, r3, #2
    2988:	440b      	add	r3, r1
    298a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    298e:	681a      	ldr	r2, [r3, #0]
    2990:	491a      	ldr	r1, [pc, #104]	; (29fc <Clock_Ip_DistributePll+0x164>)
    2992:	4613      	mov	r3, r2
    2994:	00db      	lsls	r3, r3, #3
    2996:	4413      	add	r3, r2
    2998:	440b      	add	r3, r1
    299a:	3301      	adds	r3, #1
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	461a      	mov	r2, r3
    29a0:	4b1c      	ldr	r3, [pc, #112]	; (2a14 <Clock_Ip_DistributePll+0x17c>)
    29a2:	5c9b      	ldrb	r3, [r3, r2]
    29a4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    29a6:	4a1c      	ldr	r2, [pc, #112]	; (2a18 <Clock_Ip_DistributePll+0x180>)
    29a8:	9b00      	ldr	r3, [sp, #0]
    29aa:	011b      	lsls	r3, r3, #4
    29ac:	4413      	add	r3, r2
    29ae:	330c      	adds	r3, #12
    29b0:	6819      	ldr	r1, [r3, #0]
    29b2:	4b10      	ldr	r3, [pc, #64]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    29b4:	6818      	ldr	r0, [r3, #0]
    29b6:	9a01      	ldr	r2, [sp, #4]
    29b8:	4613      	mov	r3, r2
    29ba:	009b      	lsls	r3, r3, #2
    29bc:	4413      	add	r3, r2
    29be:	009b      	lsls	r3, r3, #2
    29c0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29c4:	4403      	add	r3, r0
    29c6:	4618      	mov	r0, r3
    29c8:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29ca:	9b01      	ldr	r3, [sp, #4]
    29cc:	3301      	adds	r3, #1
    29ce:	9301      	str	r3, [sp, #4]
    29d0:	4b08      	ldr	r3, [pc, #32]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	7c9b      	ldrb	r3, [r3, #18]
    29d6:	461a      	mov	r2, r3
    29d8:	9b01      	ldr	r3, [sp, #4]
    29da:	4293      	cmp	r3, r2
    29dc:	d3cd      	bcc.n	297a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    29de:	4b05      	ldr	r3, [pc, #20]	; (29f4 <Clock_Ip_DistributePll+0x15c>)
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	2104      	movs	r1, #4
    29e4:	4618      	mov	r0, r3
    29e6:	f002 fe0b 	bl	5600 <Clock_Ip_Command>
        }
    }
}
    29ea:	bf00      	nop
    29ec:	b003      	add	sp, #12
    29ee:	f85d fb04 	ldr.w	pc, [sp], #4
    29f2:	bf00      	nop
    29f4:	1fff8b44 	.word	0x1fff8b44
    29f8:	000087e8 	.word	0x000087e8
    29fc:	0000839c 	.word	0x0000839c
    2a00:	0000836c 	.word	0x0000836c
    2a04:	000089d4 	.word	0x000089d4
    2a08:	1fff8b4c 	.word	0x1fff8b4c
    2a0c:	0000833c 	.word	0x0000833c
    2a10:	00008924 	.word	0x00008924
    2a14:	0000838c 	.word	0x0000838c
    2a18:	00008998 	.word	0x00008998

00002a1c <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a1c:	b500      	push	{lr}
    2a1e:	b085      	sub	sp, #20
    2a20:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a22:	490c      	ldr	r1, [pc, #48]	; (2a54 <Clock_Ip_DisableClockMonitor+0x38>)
    2a24:	9a01      	ldr	r2, [sp, #4]
    2a26:	4613      	mov	r3, r2
    2a28:	00db      	lsls	r3, r3, #3
    2a2a:	4413      	add	r3, r2
    2a2c:	440b      	add	r3, r1
    2a2e:	3301      	adds	r3, #1
    2a30:	781b      	ldrb	r3, [r3, #0]
    2a32:	461a      	mov	r2, r3
    2a34:	4b08      	ldr	r3, [pc, #32]	; (2a58 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a36:	5c9b      	ldrb	r3, [r3, r2]
    2a38:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a3a:	4a08      	ldr	r2, [pc, #32]	; (2a5c <Clock_Ip_DisableClockMonitor+0x40>)
    2a3c:	9b03      	ldr	r3, [sp, #12]
    2a3e:	011b      	lsls	r3, r3, #4
    2a40:	4413      	add	r3, r2
    2a42:	3308      	adds	r3, #8
    2a44:	681b      	ldr	r3, [r3, #0]
    2a46:	9801      	ldr	r0, [sp, #4]
    2a48:	4798      	blx	r3
}
    2a4a:	bf00      	nop
    2a4c:	b005      	add	sp, #20
    2a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2a52:	bf00      	nop
    2a54:	0000839c 	.word	0x0000839c
    2a58:	0000838c 	.word	0x0000838c
    2a5c:	00008998 	.word	0x00008998

00002a60 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2a60:	b082      	sub	sp, #8
    2a62:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2a64:	4a02      	ldr	r2, [pc, #8]	; (2a70 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2a66:	9b01      	ldr	r3, [sp, #4]
    2a68:	6013      	str	r3, [r2, #0]
}
    2a6a:	bf00      	nop
    2a6c:	b002      	add	sp, #8
    2a6e:	4770      	bx	lr
    2a70:	1fff8b14 	.word	0x1fff8b14

00002a74 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2a74:	b500      	push	{lr}
    2a76:	b085      	sub	sp, #20
    2a78:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a7a:	490c      	ldr	r1, [pc, #48]	; (2aac <Clock_Ip_DisableModuleClock+0x38>)
    2a7c:	9a01      	ldr	r2, [sp, #4]
    2a7e:	4613      	mov	r3, r2
    2a80:	00db      	lsls	r3, r3, #3
    2a82:	4413      	add	r3, r2
    2a84:	440b      	add	r3, r1
    2a86:	3301      	adds	r3, #1
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	461a      	mov	r2, r3
    2a8c:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <Clock_Ip_DisableModuleClock+0x3c>)
    2a8e:	5c9b      	ldrb	r3, [r3, r2]
    2a90:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2a92:	4a08      	ldr	r2, [pc, #32]	; (2ab4 <Clock_Ip_DisableModuleClock+0x40>)
    2a94:	9b03      	ldr	r3, [sp, #12]
    2a96:	00db      	lsls	r3, r3, #3
    2a98:	4413      	add	r3, r2
    2a9a:	685b      	ldr	r3, [r3, #4]
    2a9c:	2101      	movs	r1, #1
    2a9e:	9801      	ldr	r0, [sp, #4]
    2aa0:	4798      	blx	r3
}
    2aa2:	bf00      	nop
    2aa4:	b005      	add	sp, #20
    2aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aaa:	bf00      	nop
    2aac:	0000839c 	.word	0x0000839c
    2ab0:	0000833c 	.word	0x0000833c
    2ab4:	00008924 	.word	0x00008924

00002ab8 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2ab8:	b500      	push	{lr}
    2aba:	b085      	sub	sp, #20
    2abc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2abe:	490c      	ldr	r1, [pc, #48]	; (2af0 <Clock_Ip_EnableModuleClock+0x38>)
    2ac0:	9a01      	ldr	r2, [sp, #4]
    2ac2:	4613      	mov	r3, r2
    2ac4:	00db      	lsls	r3, r3, #3
    2ac6:	4413      	add	r3, r2
    2ac8:	440b      	add	r3, r1
    2aca:	3301      	adds	r3, #1
    2acc:	781b      	ldrb	r3, [r3, #0]
    2ace:	461a      	mov	r2, r3
    2ad0:	4b08      	ldr	r3, [pc, #32]	; (2af4 <Clock_Ip_EnableModuleClock+0x3c>)
    2ad2:	5c9b      	ldrb	r3, [r3, r2]
    2ad4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2ad6:	4a08      	ldr	r2, [pc, #32]	; (2af8 <Clock_Ip_EnableModuleClock+0x40>)
    2ad8:	9b03      	ldr	r3, [sp, #12]
    2ada:	00db      	lsls	r3, r3, #3
    2adc:	4413      	add	r3, r2
    2ade:	685b      	ldr	r3, [r3, #4]
    2ae0:	2100      	movs	r1, #0
    2ae2:	9801      	ldr	r0, [sp, #4]
    2ae4:	4798      	blx	r3
}
    2ae6:	bf00      	nop
    2ae8:	b005      	add	sp, #20
    2aea:	f85d fb04 	ldr.w	pc, [sp], #4
    2aee:	bf00      	nop
    2af0:	0000839c 	.word	0x0000839c
    2af4:	0000833c 	.word	0x0000833c
    2af8:	00008924 	.word	0x00008924

00002afc <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2afc:	b500      	push	{lr}
    2afe:	b083      	sub	sp, #12
    2b00:	9001      	str	r0, [sp, #4]
    2b02:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b04:	4b08      	ldr	r3, [pc, #32]	; (2b28 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b06:	2200      	movs	r2, #0
    2b08:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b0a:	4b08      	ldr	r3, [pc, #32]	; (2b2c <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b0c:	681b      	ldr	r3, [r3, #0]
    2b0e:	2102      	movs	r1, #2
    2b10:	4618      	mov	r0, r3
    2b12:	f002 fd75 	bl	5600 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b16:	9900      	ldr	r1, [sp, #0]
    2b18:	9801      	ldr	r0, [sp, #4]
    2b1a:	f002 fc51 	bl	53c0 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b1e:	bf00      	nop
    2b20:	b003      	add	sp, #12
    2b22:	f85d fb04 	ldr.w	pc, [sp], #4
    2b26:	bf00      	nop
    2b28:	1fff8b10 	.word	0x1fff8b10
    2b2c:	1fff8b44 	.word	0x1fff8b44

00002b30 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b30:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b32:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b36:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b38:	4b06      	ldr	r3, [pc, #24]	; (2b54 <Clock_Ip_SetWaitStates+0x24>)
    2b3a:	785b      	ldrb	r3, [r3, #1]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d005      	beq.n	2b4c <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2b40:	9b01      	ldr	r3, [sp, #4]
    2b42:	3b01      	subs	r3, #1
    2b44:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b46:	9b01      	ldr	r3, [sp, #4]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d1f9      	bne.n	2b40 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2b4c:	bf00      	nop
    2b4e:	b002      	add	sp, #8
    2b50:	4770      	bx	lr
    2b52:	bf00      	nop
    2b54:	1fff8b4c 	.word	0x1fff8b4c

00002b58 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2b58:	b500      	push	{lr}
    2b5a:	b083      	sub	sp, #12
    2b5c:	9001      	str	r0, [sp, #4]
    2b5e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2b60:	4b04      	ldr	r3, [pc, #16]	; (2b74 <Clock_Ip_ReportClockErrors+0x1c>)
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	9900      	ldr	r1, [sp, #0]
    2b66:	9801      	ldr	r0, [sp, #4]
    2b68:	4798      	blx	r3
}
    2b6a:	bf00      	nop
    2b6c:	b003      	add	sp, #12
    2b6e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b72:	bf00      	nop
    2b74:	1fff8b14 	.word	0x1fff8b14

00002b78 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2b78:	b500      	push	{lr}
    2b7a:	b085      	sub	sp, #20
    2b7c:	9003      	str	r0, [sp, #12]
    2b7e:	9102      	str	r1, [sp, #8]
    2b80:	9201      	str	r2, [sp, #4]
    2b82:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2b84:	2000      	movs	r0, #0
    2b86:	f7fe ffd0 	bl	1b2a <OsIf_GetCounter>
    2b8a:	4602      	mov	r2, r0
    2b8c:	9b03      	ldr	r3, [sp, #12]
    2b8e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2b90:	9b02      	ldr	r3, [sp, #8]
    2b92:	2200      	movs	r2, #0
    2b94:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2b96:	2100      	movs	r1, #0
    2b98:	9800      	ldr	r0, [sp, #0]
    2b9a:	f7ff f812 	bl	1bc2 <OsIf_MicrosToTicks>
    2b9e:	4602      	mov	r2, r0
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	601a      	str	r2, [r3, #0]
}
    2ba4:	bf00      	nop
    2ba6:	b005      	add	sp, #20
    2ba8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bac <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2bac:	b500      	push	{lr}
    2bae:	b087      	sub	sp, #28
    2bb0:	9003      	str	r0, [sp, #12]
    2bb2:	9102      	str	r1, [sp, #8]
    2bb4:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2bb6:	2300      	movs	r3, #0
    2bb8:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2bbc:	2100      	movs	r1, #0
    2bbe:	9803      	ldr	r0, [sp, #12]
    2bc0:	f7fe ffcc 	bl	1b5c <OsIf_GetElapsed>
    2bc4:	4602      	mov	r2, r0
    2bc6:	9b02      	ldr	r3, [sp, #8]
    2bc8:	681b      	ldr	r3, [r3, #0]
    2bca:	441a      	add	r2, r3
    2bcc:	9b02      	ldr	r3, [sp, #8]
    2bce:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2bd0:	9b02      	ldr	r3, [sp, #8]
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	9a01      	ldr	r2, [sp, #4]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d802      	bhi.n	2be0 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2bda:	2301      	movs	r3, #1
    2bdc:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2be0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2be4:	4618      	mov	r0, r3
    2be6:	b007      	add	sp, #28
    2be8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bec <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2bec:	b082      	sub	sp, #8
    2bee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2bf0:	bf00      	nop
    2bf2:	b002      	add	sp, #8
    2bf4:	4770      	bx	lr

00002bf6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2bf6:	b500      	push	{lr}
    2bf8:	b083      	sub	sp, #12
    2bfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bfc:	9b01      	ldr	r3, [sp, #4]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d002      	beq.n	2c08 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c02:	9801      	ldr	r0, [sp, #4]
    2c04:	f000 f8ad 	bl	2d62 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c08:	bf00      	nop
    2c0a:	b003      	add	sp, #12
    2c0c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c10 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c10:	b500      	push	{lr}
    2c12:	b083      	sub	sp, #12
    2c14:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c16:	9b01      	ldr	r3, [sp, #4]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d002      	beq.n	2c22 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c1c:	9801      	ldr	r0, [sp, #4]
    2c1e:	f000 f8cd 	bl	2dbc <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c22:	bf00      	nop
    2c24:	b003      	add	sp, #12
    2c26:	f85d fb04 	ldr.w	pc, [sp], #4

00002c2a <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c2a:	b500      	push	{lr}
    2c2c:	b083      	sub	sp, #12
    2c2e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d002      	beq.n	2c3c <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c36:	9801      	ldr	r0, [sp, #4]
    2c38:	f000 f8ee 	bl	2e18 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c3c:	bf00      	nop
    2c3e:	b003      	add	sp, #12
    2c40:	f85d fb04 	ldr.w	pc, [sp], #4

00002c44 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c44:	b500      	push	{lr}
    2c46:	b083      	sub	sp, #12
    2c48:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c4a:	9b01      	ldr	r3, [sp, #4]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d002      	beq.n	2c56 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2c50:	9801      	ldr	r0, [sp, #4]
    2c52:	f000 f8f9 	bl	2e48 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c56:	bf00      	nop
    2c58:	b003      	add	sp, #12
    2c5a:	f85d fb04 	ldr.w	pc, [sp], #4

00002c5e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2c5e:	b500      	push	{lr}
    2c60:	b083      	sub	sp, #12
    2c62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d002      	beq.n	2c70 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2c6a:	9801      	ldr	r0, [sp, #4]
    2c6c:	f000 f904 	bl	2e78 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c70:	bf00      	nop
    2c72:	b003      	add	sp, #12
    2c74:	f85d fb04 	ldr.w	pc, [sp], #4

00002c78 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c78:	b500      	push	{lr}
    2c7a:	b083      	sub	sp, #12
    2c7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c7e:	9b01      	ldr	r3, [sp, #4]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d002      	beq.n	2c8a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2c84:	9801      	ldr	r0, [sp, #4]
    2c86:	f000 f90f 	bl	2ea8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c8a:	bf00      	nop
    2c8c:	b003      	add	sp, #12
    2c8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c92 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c92:	b500      	push	{lr}
    2c94:	b083      	sub	sp, #12
    2c96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d002      	beq.n	2ca4 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2c9e:	9801      	ldr	r0, [sp, #4]
    2ca0:	f000 f91a 	bl	2ed8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ca4:	bf00      	nop
    2ca6:	b003      	add	sp, #12
    2ca8:	f85d fb04 	ldr.w	pc, [sp], #4

00002cac <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cac:	b500      	push	{lr}
    2cae:	b083      	sub	sp, #12
    2cb0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cb2:	9b01      	ldr	r3, [sp, #4]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d002      	beq.n	2cbe <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2cb8:	9801      	ldr	r0, [sp, #4]
    2cba:	f000 f925 	bl	2f08 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cbe:	bf00      	nop
    2cc0:	b003      	add	sp, #12
    2cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cc6 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cc6:	b500      	push	{lr}
    2cc8:	b083      	sub	sp, #12
    2cca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ccc:	9b01      	ldr	r3, [sp, #4]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d002      	beq.n	2cd8 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2cd2:	9801      	ldr	r0, [sp, #4]
    2cd4:	f000 f930 	bl	2f38 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd8:	bf00      	nop
    2cda:	b003      	add	sp, #12
    2cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ce0 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2ce0:	b500      	push	{lr}
    2ce2:	b083      	sub	sp, #12
    2ce4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce6:	9b01      	ldr	r3, [sp, #4]
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d002      	beq.n	2cf2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2cec:	9801      	ldr	r0, [sp, #4]
    2cee:	f000 f93b 	bl	2f68 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cf2:	bf00      	nop
    2cf4:	b003      	add	sp, #12
    2cf6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cfa <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cfa:	b500      	push	{lr}
    2cfc:	b083      	sub	sp, #12
    2cfe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d00:	9b01      	ldr	r3, [sp, #4]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d002      	beq.n	2d0c <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d06:	9801      	ldr	r0, [sp, #4]
    2d08:	f000 f946 	bl	2f98 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d0c:	bf00      	nop
    2d0e:	b003      	add	sp, #12
    2d10:	f85d fb04 	ldr.w	pc, [sp], #4

00002d14 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d14:	b500      	push	{lr}
    2d16:	b083      	sub	sp, #12
    2d18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d1a:	9b01      	ldr	r3, [sp, #4]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d002      	beq.n	2d26 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d20:	9801      	ldr	r0, [sp, #4]
    2d22:	f000 f951 	bl	2fc8 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d26:	bf00      	nop
    2d28:	b003      	add	sp, #12
    2d2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d2e <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d2e:	b500      	push	{lr}
    2d30:	b083      	sub	sp, #12
    2d32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d34:	9b01      	ldr	r3, [sp, #4]
    2d36:	2b00      	cmp	r3, #0
    2d38:	d002      	beq.n	2d40 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d3a:	9801      	ldr	r0, [sp, #4]
    2d3c:	f000 f95e 	bl	2ffc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d40:	bf00      	nop
    2d42:	b003      	add	sp, #12
    2d44:	f85d fb04 	ldr.w	pc, [sp], #4

00002d48 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2d48:	b500      	push	{lr}
    2d4a:	b083      	sub	sp, #12
    2d4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d4e:	9b01      	ldr	r3, [sp, #4]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d002      	beq.n	2d5a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2d54:	9801      	ldr	r0, [sp, #4]
    2d56:	f000 f98b 	bl	3070 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d5a:	bf00      	nop
    2d5c:	b003      	add	sp, #12
    2d5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d62 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d62:	b086      	sub	sp, #24
    2d64:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2d66:	9b01      	ldr	r3, [sp, #4]
    2d68:	681a      	ldr	r2, [r3, #0]
    2d6a:	4911      	ldr	r1, [pc, #68]	; (2db0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2d6c:	4613      	mov	r3, r2
    2d6e:	00db      	lsls	r3, r3, #3
    2d70:	4413      	add	r3, r2
    2d72:	440b      	add	r3, r1
    2d74:	781b      	ldrb	r3, [r3, #0]
    2d76:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2d78:	9b01      	ldr	r3, [sp, #4]
    2d7a:	685b      	ldr	r3, [r3, #4]
    2d7c:	4a0d      	ldr	r2, [pc, #52]	; (2db4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2d7e:	5cd3      	ldrb	r3, [r2, r3]
    2d80:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2d82:	4a0d      	ldr	r2, [pc, #52]	; (2db8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2d84:	9b05      	ldr	r3, [sp, #20]
    2d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d8a:	681b      	ldr	r3, [r3, #0]
    2d8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2d8e:	9b03      	ldr	r3, [sp, #12]
    2d90:	f023 0307 	bic.w	r3, r3, #7
    2d94:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2d96:	9a03      	ldr	r2, [sp, #12]
    2d98:	9b04      	ldr	r3, [sp, #16]
    2d9a:	4313      	orrs	r3, r2
    2d9c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2d9e:	4a06      	ldr	r2, [pc, #24]	; (2db8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2da0:	9b05      	ldr	r3, [sp, #20]
    2da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2da6:	9a03      	ldr	r2, [sp, #12]
    2da8:	601a      	str	r2, [r3, #0]
}
    2daa:	bf00      	nop
    2dac:	b006      	add	sp, #24
    2dae:	4770      	bx	lr
    2db0:	0000839c 	.word	0x0000839c
    2db4:	00008794 	.word	0x00008794
    2db8:	000087d8 	.word	0x000087d8

00002dbc <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dbc:	b086      	sub	sp, #24
    2dbe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	681a      	ldr	r2, [r3, #0]
    2dc4:	4911      	ldr	r1, [pc, #68]	; (2e0c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2dc6:	4613      	mov	r3, r2
    2dc8:	00db      	lsls	r3, r3, #3
    2dca:	4413      	add	r3, r2
    2dcc:	440b      	add	r3, r1
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2dd2:	9b01      	ldr	r3, [sp, #4]
    2dd4:	685b      	ldr	r3, [r3, #4]
    2dd6:	4a0e      	ldr	r2, [pc, #56]	; (2e10 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2dd8:	5cd3      	ldrb	r3, [r2, r3]
    2dda:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2ddc:	4a0d      	ldr	r2, [pc, #52]	; (2e14 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2dde:	9b05      	ldr	r3, [sp, #20]
    2de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2de4:	681b      	ldr	r3, [r3, #0]
    2de6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2de8:	9b03      	ldr	r3, [sp, #12]
    2dea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2dee:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2df0:	9b04      	ldr	r3, [sp, #16]
    2df2:	021b      	lsls	r3, r3, #8
    2df4:	9a03      	ldr	r2, [sp, #12]
    2df6:	4313      	orrs	r3, r2
    2df8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2dfa:	4a06      	ldr	r2, [pc, #24]	; (2e14 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2dfc:	9b05      	ldr	r3, [sp, #20]
    2dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e02:	9a03      	ldr	r2, [sp, #12]
    2e04:	601a      	str	r2, [r3, #0]
}
    2e06:	bf00      	nop
    2e08:	b006      	add	sp, #24
    2e0a:	4770      	bx	lr
    2e0c:	0000839c 	.word	0x0000839c
    2e10:	00008794 	.word	0x00008794
    2e14:	000087d8 	.word	0x000087d8

00002e18 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e18:	b084      	sub	sp, #16
    2e1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e1c:	4b09      	ldr	r3, [pc, #36]	; (2e44 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e1e:	695b      	ldr	r3, [r3, #20]
    2e20:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e22:	9b03      	ldr	r3, [sp, #12]
    2e24:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e28:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e2a:	9b01      	ldr	r3, [sp, #4]
    2e2c:	685b      	ldr	r3, [r3, #4]
    2e2e:	3b01      	subs	r3, #1
    2e30:	041b      	lsls	r3, r3, #16
    2e32:	9a03      	ldr	r2, [sp, #12]
    2e34:	4313      	orrs	r3, r2
    2e36:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e38:	4a02      	ldr	r2, [pc, #8]	; (2e44 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e3a:	9b03      	ldr	r3, [sp, #12]
    2e3c:	6153      	str	r3, [r2, #20]
}
    2e3e:	bf00      	nop
    2e40:	b004      	add	sp, #16
    2e42:	4770      	bx	lr
    2e44:	40064000 	.word	0x40064000

00002e48 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e48:	b084      	sub	sp, #16
    2e4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e4c:	4b09      	ldr	r3, [pc, #36]	; (2e74 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e4e:	695b      	ldr	r3, [r3, #20]
    2e50:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2e52:	9b03      	ldr	r3, [sp, #12]
    2e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2e58:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	685b      	ldr	r3, [r3, #4]
    2e5e:	3b01      	subs	r3, #1
    2e60:	011b      	lsls	r3, r3, #4
    2e62:	9a03      	ldr	r2, [sp, #12]
    2e64:	4313      	orrs	r3, r2
    2e66:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e68:	4a02      	ldr	r2, [pc, #8]	; (2e74 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2e6a:	9b03      	ldr	r3, [sp, #12]
    2e6c:	6153      	str	r3, [r2, #20]
}
    2e6e:	bf00      	nop
    2e70:	b004      	add	sp, #16
    2e72:	4770      	bx	lr
    2e74:	40064000 	.word	0x40064000

00002e78 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e78:	b084      	sub	sp, #16
    2e7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e7c:	4b09      	ldr	r3, [pc, #36]	; (2ea4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e7e:	695b      	ldr	r3, [r3, #20]
    2e80:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2e82:	9b03      	ldr	r3, [sp, #12]
    2e84:	f023 030f 	bic.w	r3, r3, #15
    2e88:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2e8a:	9b01      	ldr	r3, [sp, #4]
    2e8c:	685b      	ldr	r3, [r3, #4]
    2e8e:	3b01      	subs	r3, #1
    2e90:	9a03      	ldr	r2, [sp, #12]
    2e92:	4313      	orrs	r3, r2
    2e94:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e96:	4a03      	ldr	r2, [pc, #12]	; (2ea4 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2e98:	9b03      	ldr	r3, [sp, #12]
    2e9a:	6153      	str	r3, [r2, #20]
}
    2e9c:	bf00      	nop
    2e9e:	b004      	add	sp, #16
    2ea0:	4770      	bx	lr
    2ea2:	bf00      	nop
    2ea4:	40064000 	.word	0x40064000

00002ea8 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ea8:	b084      	sub	sp, #16
    2eaa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2eac:	4b09      	ldr	r3, [pc, #36]	; (2ed4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2eae:	699b      	ldr	r3, [r3, #24]
    2eb0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2eb2:	9b03      	ldr	r3, [sp, #12]
    2eb4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2eb8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2eba:	9b01      	ldr	r3, [sp, #4]
    2ebc:	685b      	ldr	r3, [r3, #4]
    2ebe:	3b01      	subs	r3, #1
    2ec0:	041b      	lsls	r3, r3, #16
    2ec2:	9a03      	ldr	r2, [sp, #12]
    2ec4:	4313      	orrs	r3, r2
    2ec6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ec8:	4a02      	ldr	r2, [pc, #8]	; (2ed4 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	6193      	str	r3, [r2, #24]
}
    2ece:	bf00      	nop
    2ed0:	b004      	add	sp, #16
    2ed2:	4770      	bx	lr
    2ed4:	40064000 	.word	0x40064000

00002ed8 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ed8:	b084      	sub	sp, #16
    2eda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2edc:	4b09      	ldr	r3, [pc, #36]	; (2f04 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2ede:	699b      	ldr	r3, [r3, #24]
    2ee0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2ee2:	9b03      	ldr	r3, [sp, #12]
    2ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ee8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2eea:	9b01      	ldr	r3, [sp, #4]
    2eec:	685b      	ldr	r3, [r3, #4]
    2eee:	3b01      	subs	r3, #1
    2ef0:	011b      	lsls	r3, r3, #4
    2ef2:	9a03      	ldr	r2, [sp, #12]
    2ef4:	4313      	orrs	r3, r2
    2ef6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ef8:	4a02      	ldr	r2, [pc, #8]	; (2f04 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2efa:	9b03      	ldr	r3, [sp, #12]
    2efc:	6193      	str	r3, [r2, #24]
}
    2efe:	bf00      	nop
    2f00:	b004      	add	sp, #16
    2f02:	4770      	bx	lr
    2f04:	40064000 	.word	0x40064000

00002f08 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f08:	b084      	sub	sp, #16
    2f0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f0c:	4b09      	ldr	r3, [pc, #36]	; (2f34 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f0e:	699b      	ldr	r3, [r3, #24]
    2f10:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f12:	9b03      	ldr	r3, [sp, #12]
    2f14:	f023 030f 	bic.w	r3, r3, #15
    2f18:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	685b      	ldr	r3, [r3, #4]
    2f1e:	3b01      	subs	r3, #1
    2f20:	9a03      	ldr	r2, [sp, #12]
    2f22:	4313      	orrs	r3, r2
    2f24:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f26:	4a03      	ldr	r2, [pc, #12]	; (2f34 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f28:	9b03      	ldr	r3, [sp, #12]
    2f2a:	6193      	str	r3, [r2, #24]
}
    2f2c:	bf00      	nop
    2f2e:	b004      	add	sp, #16
    2f30:	4770      	bx	lr
    2f32:	bf00      	nop
    2f34:	40064000 	.word	0x40064000

00002f38 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f38:	b084      	sub	sp, #16
    2f3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f3c:	4b09      	ldr	r3, [pc, #36]	; (2f64 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f3e:	69db      	ldr	r3, [r3, #28]
    2f40:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2f42:	9b03      	ldr	r3, [sp, #12]
    2f44:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f48:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2f4a:	9b01      	ldr	r3, [sp, #4]
    2f4c:	685b      	ldr	r3, [r3, #4]
    2f4e:	3b01      	subs	r3, #1
    2f50:	041b      	lsls	r3, r3, #16
    2f52:	9a03      	ldr	r2, [sp, #12]
    2f54:	4313      	orrs	r3, r2
    2f56:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f58:	4a02      	ldr	r2, [pc, #8]	; (2f64 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f5a:	9b03      	ldr	r3, [sp, #12]
    2f5c:	61d3      	str	r3, [r2, #28]
}
    2f5e:	bf00      	nop
    2f60:	b004      	add	sp, #16
    2f62:	4770      	bx	lr
    2f64:	40064000 	.word	0x40064000

00002f68 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f68:	b084      	sub	sp, #16
    2f6a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f6c:	4b09      	ldr	r3, [pc, #36]	; (2f94 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f6e:	69db      	ldr	r3, [r3, #28]
    2f70:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2f72:	9b03      	ldr	r3, [sp, #12]
    2f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f78:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2f7a:	9b01      	ldr	r3, [sp, #4]
    2f7c:	685b      	ldr	r3, [r3, #4]
    2f7e:	3b01      	subs	r3, #1
    2f80:	011b      	lsls	r3, r3, #4
    2f82:	9a03      	ldr	r2, [sp, #12]
    2f84:	4313      	orrs	r3, r2
    2f86:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2f88:	4a02      	ldr	r2, [pc, #8]	; (2f94 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2f8a:	9b03      	ldr	r3, [sp, #12]
    2f8c:	61d3      	str	r3, [r2, #28]
}
    2f8e:	bf00      	nop
    2f90:	b004      	add	sp, #16
    2f92:	4770      	bx	lr
    2f94:	40064000 	.word	0x40064000

00002f98 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f98:	b084      	sub	sp, #16
    2f9a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f9c:	4b09      	ldr	r3, [pc, #36]	; (2fc4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2f9e:	69db      	ldr	r3, [r3, #28]
    2fa0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2fa2:	9b03      	ldr	r3, [sp, #12]
    2fa4:	f023 030f 	bic.w	r3, r3, #15
    2fa8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	685b      	ldr	r3, [r3, #4]
    2fae:	3b01      	subs	r3, #1
    2fb0:	9a03      	ldr	r2, [sp, #12]
    2fb2:	4313      	orrs	r3, r2
    2fb4:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fb6:	4a03      	ldr	r2, [pc, #12]	; (2fc4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2fb8:	9b03      	ldr	r3, [sp, #12]
    2fba:	61d3      	str	r3, [r2, #28]
}
    2fbc:	bf00      	nop
    2fbe:	b004      	add	sp, #16
    2fc0:	4770      	bx	lr
    2fc2:	bf00      	nop
    2fc4:	40064000 	.word	0x40064000

00002fc8 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2fc8:	b084      	sub	sp, #16
    2fca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2fcc:	4b0a      	ldr	r3, [pc, #40]	; (2ff8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2fce:	685b      	ldr	r3, [r3, #4]
    2fd0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2fd2:	9b03      	ldr	r3, [sp, #12]
    2fd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fd8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2fda:	9b01      	ldr	r3, [sp, #4]
    2fdc:	685b      	ldr	r3, [r3, #4]
    2fde:	3b01      	subs	r3, #1
    2fe0:	021b      	lsls	r3, r3, #8
    2fe2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2fe6:	9a03      	ldr	r2, [sp, #12]
    2fe8:	4313      	orrs	r3, r2
    2fea:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2fec:	4a02      	ldr	r2, [pc, #8]	; (2ff8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2fee:	9b03      	ldr	r3, [sp, #12]
    2ff0:	6053      	str	r3, [r2, #4]
}
    2ff2:	bf00      	nop
    2ff4:	b004      	add	sp, #16
    2ff6:	4770      	bx	lr
    2ff8:	40048000 	.word	0x40048000

00002ffc <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ffc:	b084      	sub	sp, #16
    2ffe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3000:	4919      	ldr	r1, [pc, #100]	; (3068 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3002:	9b01      	ldr	r3, [sp, #4]
    3004:	681a      	ldr	r2, [r3, #0]
    3006:	4819      	ldr	r0, [pc, #100]	; (306c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3008:	4613      	mov	r3, r2
    300a:	00db      	lsls	r3, r3, #3
    300c:	4413      	add	r3, r2
    300e:	4403      	add	r3, r0
    3010:	3305      	adds	r3, #5
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3018:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    301a:	9b03      	ldr	r3, [sp, #12]
    301c:	f023 030f 	bic.w	r3, r3, #15
    3020:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3022:	9b01      	ldr	r3, [sp, #4]
    3024:	685b      	ldr	r3, [r3, #4]
    3026:	3b01      	subs	r3, #1
    3028:	f003 0307 	and.w	r3, r3, #7
    302c:	9a03      	ldr	r2, [sp, #12]
    302e:	4313      	orrs	r3, r2
    3030:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3032:	9b01      	ldr	r3, [sp, #4]
    3034:	7a1b      	ldrb	r3, [r3, #8]
    3036:	3b01      	subs	r3, #1
    3038:	00db      	lsls	r3, r3, #3
    303a:	f003 0308 	and.w	r3, r3, #8
    303e:	9a03      	ldr	r2, [sp, #12]
    3040:	4313      	orrs	r3, r2
    3042:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3044:	4908      	ldr	r1, [pc, #32]	; (3068 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	681a      	ldr	r2, [r3, #0]
    304a:	4808      	ldr	r0, [pc, #32]	; (306c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    304c:	4613      	mov	r3, r2
    304e:	00db      	lsls	r3, r3, #3
    3050:	4413      	add	r3, r2
    3052:	4403      	add	r3, r0
    3054:	3305      	adds	r3, #5
    3056:	781b      	ldrb	r3, [r3, #0]
    3058:	461a      	mov	r2, r3
    305a:	9b03      	ldr	r3, [sp, #12]
    305c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3060:	bf00      	nop
    3062:	b004      	add	sp, #16
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	40065000 	.word	0x40065000
    306c:	0000839c 	.word	0x0000839c

00003070 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3070:	b084      	sub	sp, #16
    3072:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3074:	4b10      	ldr	r3, [pc, #64]	; (30b8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3078:	4a0f      	ldr	r2, [pc, #60]	; (30b8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    307e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3080:	4b0d      	ldr	r3, [pc, #52]	; (30b8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3084:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3086:	9b03      	ldr	r3, [sp, #12]
    3088:	f023 030f 	bic.w	r3, r3, #15
    308c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	685b      	ldr	r3, [r3, #4]
    3092:	3b01      	subs	r3, #1
    3094:	005b      	lsls	r3, r3, #1
    3096:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    309a:	9b01      	ldr	r3, [sp, #4]
    309c:	7a1b      	ldrb	r3, [r3, #8]
    309e:	3b01      	subs	r3, #1
    30a0:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30a4:	4313      	orrs	r3, r2
    30a6:	9a03      	ldr	r2, [sp, #12]
    30a8:	4313      	orrs	r3, r2
    30aa:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    30ac:	4a02      	ldr	r2, [pc, #8]	; (30b8 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ae:	9b03      	ldr	r3, [sp, #12]
    30b0:	6693      	str	r3, [r2, #104]	; 0x68
}
    30b2:	bf00      	nop
    30b4:	b004      	add	sp, #16
    30b6:	4770      	bx	lr
    30b8:	40048000 	.word	0x40048000

000030bc <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    30bc:	b082      	sub	sp, #8
    30be:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    30c0:	bf00      	nop
    30c2:	b002      	add	sp, #8
    30c4:	4770      	bx	lr
	...

000030c8 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    30c8:	b082      	sub	sp, #8
    30ca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    30cc:	bf00      	nop
    30ce:	b002      	add	sp, #8
    30d0:	4770      	bx	lr

000030d2 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    30d2:	b082      	sub	sp, #8
    30d4:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    30d6:	bf00      	nop
    30d8:	b002      	add	sp, #8
    30da:	4770      	bx	lr

000030dc <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30dc:	b500      	push	{lr}
    30de:	b083      	sub	sp, #12
    30e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30e2:	9b01      	ldr	r3, [sp, #4]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d002      	beq.n	30ee <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    30e8:	9801      	ldr	r0, [sp, #4]
    30ea:	f000 f86a 	bl	31c2 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    30ee:	bf00      	nop
    30f0:	b003      	add	sp, #12
    30f2:	f85d fb04 	ldr.w	pc, [sp], #4

000030f6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    30f6:	b500      	push	{lr}
    30f8:	b083      	sub	sp, #12
    30fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    30fc:	9b01      	ldr	r3, [sp, #4]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3102:	9801      	ldr	r0, [sp, #4]
    3104:	f000 f884 	bl	3210 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3108:	bf00      	nop
    310a:	b003      	add	sp, #12
    310c:	f85d fb04 	ldr.w	pc, [sp], #4

00003110 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3110:	b500      	push	{lr}
    3112:	b089      	sub	sp, #36	; 0x24
    3114:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3116:	2300      	movs	r3, #0
    3118:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    311c:	9b01      	ldr	r3, [sp, #4]
    311e:	2b00      	cmp	r3, #0
    3120:	d031      	beq.n	3186 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3122:	4b1b      	ldr	r3, [pc, #108]	; (3190 <Clock_Ip_CompleteSOSC+0x80>)
    3124:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3128:	f003 0301 	and.w	r3, r3, #1
    312c:	2b00      	cmp	r3, #0
    312e:	d02a      	beq.n	3186 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3130:	aa03      	add	r2, sp, #12
    3132:	a904      	add	r1, sp, #16
    3134:	a805      	add	r0, sp, #20
    3136:	f24c 3350 	movw	r3, #50000	; 0xc350
    313a:	f7ff fd1d 	bl	2b78 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    313e:	4b14      	ldr	r3, [pc, #80]	; (3190 <Clock_Ip_CompleteSOSC+0x80>)
    3140:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3144:	0e1b      	lsrs	r3, r3, #24
    3146:	f003 0301 	and.w	r3, r3, #1
    314a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    314c:	9a03      	ldr	r2, [sp, #12]
    314e:	a904      	add	r1, sp, #16
    3150:	ab05      	add	r3, sp, #20
    3152:	4618      	mov	r0, r3
    3154:	f7ff fd2a 	bl	2bac <Clock_Ip_TimeoutExpired>
    3158:	4603      	mov	r3, r0
    315a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    315e:	9b06      	ldr	r3, [sp, #24]
    3160:	2b00      	cmp	r3, #0
    3162:	d106      	bne.n	3172 <Clock_Ip_CompleteSOSC+0x62>
    3164:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3168:	f083 0301 	eor.w	r3, r3, #1
    316c:	b2db      	uxtb	r3, r3
    316e:	2b00      	cmp	r3, #0
    3170:	d1e5      	bne.n	313e <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3172:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3176:	2b00      	cmp	r3, #0
    3178:	d005      	beq.n	3186 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    317a:	9b01      	ldr	r3, [sp, #4]
    317c:	681b      	ldr	r3, [r3, #0]
    317e:	4619      	mov	r1, r3
    3180:	2001      	movs	r0, #1
    3182:	f7ff fce9 	bl	2b58 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3186:	bf00      	nop
    3188:	b009      	add	sp, #36	; 0x24
    318a:	f85d fb04 	ldr.w	pc, [sp], #4
    318e:	bf00      	nop
    3190:	40064000 	.word	0x40064000

00003194 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3194:	b500      	push	{lr}
    3196:	b083      	sub	sp, #12
    3198:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    319a:	9801      	ldr	r0, [sp, #4]
    319c:	f000 f8c0 	bl	3320 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    31a0:	bf00      	nop
    31a2:	b003      	add	sp, #12
    31a4:	f85d fb04 	ldr.w	pc, [sp], #4

000031a8 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    31a8:	b500      	push	{lr}
    31aa:	b083      	sub	sp, #12
    31ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31ae:	9b01      	ldr	r3, [sp, #4]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d002      	beq.n	31ba <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    31b4:	9801      	ldr	r0, [sp, #4]
    31b6:	f000 f8c3 	bl	3340 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31ba:	bf00      	nop
    31bc:	b003      	add	sp, #12
    31be:	f85d fb04 	ldr.w	pc, [sp], #4

000031c2 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    31c2:	b082      	sub	sp, #8
    31c4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    31c6:	4b11      	ldr	r3, [pc, #68]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31cc:	4a0f      	ldr	r2, [pc, #60]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31d2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    31d6:	4b0d      	ldr	r3, [pc, #52]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31dc:	4a0b      	ldr	r2, [pc, #44]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    31e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    31e6:	4b09      	ldr	r3, [pc, #36]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31ec:	4a07      	ldr	r2, [pc, #28]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    31f2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    31f6:	4b05      	ldr	r3, [pc, #20]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31fc:	4a03      	ldr	r2, [pc, #12]	; (320c <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    31fe:	f023 0301 	bic.w	r3, r3, #1
    3202:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3206:	bf00      	nop
    3208:	b002      	add	sp, #8
    320a:	4770      	bx	lr
    320c:	40064000 	.word	0x40064000

00003210 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3210:	b082      	sub	sp, #8
    3212:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3214:	9b01      	ldr	r3, [sp, #4]
    3216:	891b      	ldrh	r3, [r3, #8]
    3218:	2b01      	cmp	r3, #1
    321a:	d174      	bne.n	3306 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    321c:	9b01      	ldr	r3, [sp, #4]
    321e:	7bdb      	ldrb	r3, [r3, #15]
    3220:	2b00      	cmp	r3, #0
    3222:	d002      	beq.n	322a <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3224:	2b01      	cmp	r3, #1
    3226:	d009      	beq.n	323c <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3228:	e011      	b.n	324e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    322a:	4b39      	ldr	r3, [pc, #228]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    322c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3230:	4a37      	ldr	r2, [pc, #220]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3232:	f023 0308 	bic.w	r3, r3, #8
    3236:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    323a:	e008      	b.n	324e <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    323c:	4b34      	ldr	r3, [pc, #208]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    323e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3242:	4a33      	ldr	r2, [pc, #204]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3244:	f043 0308 	orr.w	r3, r3, #8
    3248:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    324c:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    324e:	4b30      	ldr	r3, [pc, #192]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3250:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3254:	4a2e      	ldr	r2, [pc, #184]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    325a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    325e:	9b01      	ldr	r3, [sp, #4]
    3260:	685b      	ldr	r3, [r3, #4]
    3262:	4a2c      	ldr	r2, [pc, #176]	; (3314 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3264:	4293      	cmp	r3, r2
    3266:	d90d      	bls.n	3284 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3268:	9b01      	ldr	r3, [sp, #4]
    326a:	685b      	ldr	r3, [r3, #4]
    326c:	4a2a      	ldr	r2, [pc, #168]	; (3318 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    326e:	4293      	cmp	r3, r2
    3270:	d208      	bcs.n	3284 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3272:	4b27      	ldr	r3, [pc, #156]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3274:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3278:	4a25      	ldr	r2, [pc, #148]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    327a:	f043 0320 	orr.w	r3, r3, #32
    327e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3282:	e007      	b.n	3294 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3284:	4b22      	ldr	r3, [pc, #136]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3286:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    328a:	4a21      	ldr	r2, [pc, #132]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    328c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3290:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3294:	9b01      	ldr	r3, [sp, #4]
    3296:	7b1b      	ldrb	r3, [r3, #12]
    3298:	2b00      	cmp	r3, #0
    329a:	d108      	bne.n	32ae <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    329c:	4b1c      	ldr	r3, [pc, #112]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32a2:	4a1b      	ldr	r2, [pc, #108]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a4:	f043 0304 	orr.w	r3, r3, #4
    32a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32ac:	e007      	b.n	32be <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    32ae:	4b18      	ldr	r3, [pc, #96]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32b4:	4a16      	ldr	r2, [pc, #88]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b6:	f023 0304 	bic.w	r3, r3, #4
    32ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    32be:	9b01      	ldr	r3, [sp, #4]
    32c0:	7c1b      	ldrb	r3, [r3, #16]
    32c2:	2b02      	cmp	r3, #2
    32c4:	d011      	beq.n	32ea <Clock_Ip_SetSOSC_TrustedCall+0xda>
    32c6:	2b02      	cmp	r3, #2
    32c8:	dc14      	bgt.n	32f4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    32ca:	2b00      	cmp	r3, #0
    32cc:	d002      	beq.n	32d4 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    32ce:	2b01      	cmp	r3, #1
    32d0:	d005      	beq.n	32de <Clock_Ip_SetSOSC_TrustedCall+0xce>
    32d2:	e00f      	b.n	32f4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32d4:	4b0e      	ldr	r3, [pc, #56]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d6:	2201      	movs	r2, #1
    32d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32dc:	e014      	b.n	3308 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32de:	4b0c      	ldr	r3, [pc, #48]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    32e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    32e8:	e00e      	b.n	3308 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ec:	4a0b      	ldr	r2, [pc, #44]	; (331c <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    32ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    32f2:	e009      	b.n	3308 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    32f4:	4b06      	ldr	r3, [pc, #24]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32fa:	4a05      	ldr	r2, [pc, #20]	; (3310 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32fc:	f043 0301 	orr.w	r3, r3, #1
    3300:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3304:	e000      	b.n	3308 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3306:	bf00      	nop
}
    3308:	bf00      	nop
    330a:	b002      	add	sp, #8
    330c:	4770      	bx	lr
    330e:	bf00      	nop
    3310:	40064000 	.word	0x40064000
    3314:	003d08ff 	.word	0x003d08ff
    3318:	007a1200 	.word	0x007a1200
    331c:	00030001 	.word	0x00030001

00003320 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3320:	b082      	sub	sp, #8
    3322:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3324:	4b05      	ldr	r3, [pc, #20]	; (333c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3326:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    332a:	4a04      	ldr	r2, [pc, #16]	; (333c <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    332c:	f023 0301 	bic.w	r3, r3, #1
    3330:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3334:	bf00      	nop
    3336:	b002      	add	sp, #8
    3338:	4770      	bx	lr
    333a:	bf00      	nop
    333c:	40064000 	.word	0x40064000

00003340 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3340:	b082      	sub	sp, #8
    3342:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	891b      	ldrh	r3, [r3, #8]
    3348:	2b01      	cmp	r3, #1
    334a:	d107      	bne.n	335c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    334c:	4b05      	ldr	r3, [pc, #20]	; (3364 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    334e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3352:	4a04      	ldr	r2, [pc, #16]	; (3364 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3354:	f043 0301 	orr.w	r3, r3, #1
    3358:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    335c:	bf00      	nop
    335e:	b002      	add	sp, #8
    3360:	4770      	bx	lr
    3362:	bf00      	nop
    3364:	40064000 	.word	0x40064000

00003368 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3368:	b082      	sub	sp, #8
    336a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    336c:	bf00      	nop
    336e:	b002      	add	sp, #8
    3370:	4770      	bx	lr

00003372 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3372:	b082      	sub	sp, #8
    3374:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3376:	2300      	movs	r3, #0
}
    3378:	4618      	mov	r0, r3
    337a:	b002      	add	sp, #8
    337c:	4770      	bx	lr

0000337e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    337e:	b082      	sub	sp, #8
    3380:	9001      	str	r0, [sp, #4]
    3382:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3384:	bf00      	nop
    3386:	b002      	add	sp, #8
    3388:	4770      	bx	lr
	...

0000338c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    338c:	b082      	sub	sp, #8
    338e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3390:	bf00      	nop
    3392:	b002      	add	sp, #8
    3394:	4770      	bx	lr

00003396 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3396:	b082      	sub	sp, #8
    3398:	9001      	str	r0, [sp, #4]
    339a:	460b      	mov	r3, r1
    339c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    33a0:	bf00      	nop
    33a2:	b002      	add	sp, #8
    33a4:	4770      	bx	lr

000033a6 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    33a6:	b500      	push	{lr}
    33a8:	b083      	sub	sp, #12
    33aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33ac:	9b01      	ldr	r3, [sp, #4]
    33ae:	2b00      	cmp	r3, #0
    33b0:	d002      	beq.n	33b8 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    33b2:	9801      	ldr	r0, [sp, #4]
    33b4:	f000 f8e7 	bl	3586 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33b8:	bf00      	nop
    33ba:	b003      	add	sp, #12
    33bc:	f85d fb04 	ldr.w	pc, [sp], #4

000033c0 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    33c0:	b500      	push	{lr}
    33c2:	b085      	sub	sp, #20
    33c4:	9001      	str	r0, [sp, #4]
    33c6:	460b      	mov	r3, r1
    33c8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    33cc:	9b01      	ldr	r3, [sp, #4]
    33ce:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    33d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d003      	beq.n	33e0 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    33d8:	2300      	movs	r3, #0
    33da:	f8ad 300c 	strh.w	r3, [sp, #12]
    33de:	e002      	b.n	33e6 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    33e0:	2301      	movs	r3, #1
    33e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    33e6:	ab02      	add	r3, sp, #8
    33e8:	4618      	mov	r0, r3
    33ea:	f7ff ffdc 	bl	33a6 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    33ee:	bf00      	nop
    33f0:	b005      	add	sp, #20
    33f2:	f85d fb04 	ldr.w	pc, [sp], #4

000033f6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    33f6:	b500      	push	{lr}
    33f8:	b083      	sub	sp, #12
    33fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33fc:	9b01      	ldr	r3, [sp, #4]
    33fe:	2b00      	cmp	r3, #0
    3400:	d002      	beq.n	3408 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3402:	9801      	ldr	r0, [sp, #4]
    3404:	f000 f8d6 	bl	35b4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3408:	bf00      	nop
    340a:	b003      	add	sp, #12
    340c:	f85d fb04 	ldr.w	pc, [sp], #4

00003410 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3410:	b500      	push	{lr}
    3412:	b085      	sub	sp, #20
    3414:	9001      	str	r0, [sp, #4]
    3416:	460b      	mov	r3, r1
    3418:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    341c:	9b01      	ldr	r3, [sp, #4]
    341e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3420:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3424:	2b00      	cmp	r3, #0
    3426:	d003      	beq.n	3430 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3428:	2300      	movs	r3, #0
    342a:	f8ad 300c 	strh.w	r3, [sp, #12]
    342e:	e002      	b.n	3436 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3430:	2301      	movs	r3, #1
    3432:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3436:	ab02      	add	r3, sp, #8
    3438:	4618      	mov	r0, r3
    343a:	f7ff ffdc 	bl	33f6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    343e:	bf00      	nop
    3440:	b005      	add	sp, #20
    3442:	f85d fb04 	ldr.w	pc, [sp], #4

00003446 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3446:	b500      	push	{lr}
    3448:	b083      	sub	sp, #12
    344a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    344c:	9b01      	ldr	r3, [sp, #4]
    344e:	2b00      	cmp	r3, #0
    3450:	d002      	beq.n	3458 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3452:	9801      	ldr	r0, [sp, #4]
    3454:	f000 f8c6 	bl	35e4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3458:	bf00      	nop
    345a:	b003      	add	sp, #12
    345c:	f85d fb04 	ldr.w	pc, [sp], #4

00003460 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3460:	b500      	push	{lr}
    3462:	b085      	sub	sp, #20
    3464:	9001      	str	r0, [sp, #4]
    3466:	460b      	mov	r3, r1
    3468:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    346c:	9b01      	ldr	r3, [sp, #4]
    346e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3470:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3474:	2b00      	cmp	r3, #0
    3476:	d003      	beq.n	3480 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3478:	2300      	movs	r3, #0
    347a:	f8ad 300c 	strh.w	r3, [sp, #12]
    347e:	e002      	b.n	3486 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3480:	2301      	movs	r3, #1
    3482:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3486:	ab02      	add	r3, sp, #8
    3488:	4618      	mov	r0, r3
    348a:	f7ff ffdc 	bl	3446 <Clock_Ip_ClockSetSimClkoutEnable>
}
    348e:	bf00      	nop
    3490:	b005      	add	sp, #20
    3492:	f85d fb04 	ldr.w	pc, [sp], #4

00003496 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3496:	b500      	push	{lr}
    3498:	b083      	sub	sp, #12
    349a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    349c:	9b01      	ldr	r3, [sp, #4]
    349e:	2b00      	cmp	r3, #0
    34a0:	d002      	beq.n	34a8 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    34a2:	9801      	ldr	r0, [sp, #4]
    34a4:	f000 f8b6 	bl	3614 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34a8:	bf00      	nop
    34aa:	b003      	add	sp, #12
    34ac:	f85d fb04 	ldr.w	pc, [sp], #4

000034b0 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34b0:	b500      	push	{lr}
    34b2:	b085      	sub	sp, #20
    34b4:	9001      	str	r0, [sp, #4]
    34b6:	460b      	mov	r3, r1
    34b8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34bc:	9b01      	ldr	r3, [sp, #4]
    34be:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d003      	beq.n	34d0 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    34c8:	2300      	movs	r3, #0
    34ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    34ce:	e002      	b.n	34d6 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34d0:	2301      	movs	r3, #1
    34d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    34d6:	ab02      	add	r3, sp, #8
    34d8:	4618      	mov	r0, r3
    34da:	f7ff ffdc 	bl	3496 <Clock_Ip_ClockSetPccCgcEnable>
}
    34de:	bf00      	nop
    34e0:	b005      	add	sp, #20
    34e2:	f85d fb04 	ldr.w	pc, [sp], #4

000034e6 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    34e6:	b500      	push	{lr}
    34e8:	b083      	sub	sp, #12
    34ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ec:	9b01      	ldr	r3, [sp, #4]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d002      	beq.n	34f8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    34f2:	9801      	ldr	r0, [sp, #4]
    34f4:	f000 f8bc 	bl	3670 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34f8:	bf00      	nop
    34fa:	b003      	add	sp, #12
    34fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003500 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3500:	b500      	push	{lr}
    3502:	b085      	sub	sp, #20
    3504:	9001      	str	r0, [sp, #4]
    3506:	460b      	mov	r3, r1
    3508:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3510:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3514:	2b00      	cmp	r3, #0
    3516:	d003      	beq.n	3520 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3518:	2300      	movs	r3, #0
    351a:	f8ad 300c 	strh.w	r3, [sp, #12]
    351e:	e002      	b.n	3526 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3520:	2301      	movs	r3, #1
    3522:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3526:	ab02      	add	r3, sp, #8
    3528:	4618      	mov	r0, r3
    352a:	f7ff ffdc 	bl	34e6 <Clock_Ip_ClockSetSimGate>
}
    352e:	bf00      	nop
    3530:	b005      	add	sp, #20
    3532:	f85d fb04 	ldr.w	pc, [sp], #4

00003536 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3536:	b500      	push	{lr}
    3538:	b083      	sub	sp, #12
    353a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    353c:	9b01      	ldr	r3, [sp, #4]
    353e:	2b00      	cmp	r3, #0
    3540:	d002      	beq.n	3548 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3542:	9801      	ldr	r0, [sp, #4]
    3544:	f000 f8c0 	bl	36c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3548:	bf00      	nop
    354a:	b003      	add	sp, #12
    354c:	f85d fb04 	ldr.w	pc, [sp], #4

00003550 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3550:	b500      	push	{lr}
    3552:	b085      	sub	sp, #20
    3554:	9001      	str	r0, [sp, #4]
    3556:	460b      	mov	r3, r1
    3558:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    355c:	9b01      	ldr	r3, [sp, #4]
    355e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3560:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3564:	2b00      	cmp	r3, #0
    3566:	d003      	beq.n	3570 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3568:	2300      	movs	r3, #0
    356a:	f8ad 300c 	strh.w	r3, [sp, #12]
    356e:	e002      	b.n	3576 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3570:	2301      	movs	r3, #1
    3572:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3576:	ab02      	add	r3, sp, #8
    3578:	4618      	mov	r0, r3
    357a:	f7ff ffdc 	bl	3536 <Clock_Ip_ClockSetSimTraceEnable>
}
    357e:	bf00      	nop
    3580:	b005      	add	sp, #20
    3582:	f85d fb04 	ldr.w	pc, [sp], #4

00003586 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3586:	b084      	sub	sp, #16
    3588:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    358a:	4b09      	ldr	r3, [pc, #36]	; (35b0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    358c:	691b      	ldr	r3, [r3, #16]
    358e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3590:	9b03      	ldr	r3, [sp, #12]
    3592:	f023 0301 	bic.w	r3, r3, #1
    3596:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3598:	9b01      	ldr	r3, [sp, #4]
    359a:	889b      	ldrh	r3, [r3, #4]
    359c:	461a      	mov	r2, r3
    359e:	9b03      	ldr	r3, [sp, #12]
    35a0:	4313      	orrs	r3, r2
    35a2:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    35a4:	4a02      	ldr	r2, [pc, #8]	; (35b0 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35a6:	9b03      	ldr	r3, [sp, #12]
    35a8:	6113      	str	r3, [r2, #16]
}
    35aa:	bf00      	nop
    35ac:	b004      	add	sp, #16
    35ae:	4770      	bx	lr
    35b0:	40048000 	.word	0x40048000

000035b4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35b4:	b084      	sub	sp, #16
    35b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35b8:	4b09      	ldr	r3, [pc, #36]	; (35e0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    35ba:	691b      	ldr	r3, [r3, #16]
    35bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    35be:	9b03      	ldr	r3, [sp, #12]
    35c0:	f023 0302 	bic.w	r3, r3, #2
    35c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    35c6:	9b01      	ldr	r3, [sp, #4]
    35c8:	889b      	ldrh	r3, [r3, #4]
    35ca:	005b      	lsls	r3, r3, #1
    35cc:	9a03      	ldr	r2, [sp, #12]
    35ce:	4313      	orrs	r3, r2
    35d0:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    35d2:	4a03      	ldr	r2, [pc, #12]	; (35e0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    35d4:	9b03      	ldr	r3, [sp, #12]
    35d6:	6113      	str	r3, [r2, #16]
}
    35d8:	bf00      	nop
    35da:	b004      	add	sp, #16
    35dc:	4770      	bx	lr
    35de:	bf00      	nop
    35e0:	40048000 	.word	0x40048000

000035e4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35e4:	b084      	sub	sp, #16
    35e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    35e8:	4b09      	ldr	r3, [pc, #36]	; (3610 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    35ea:	685b      	ldr	r3, [r3, #4]
    35ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    35ee:	9b03      	ldr	r3, [sp, #12]
    35f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    35f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    35f6:	9b01      	ldr	r3, [sp, #4]
    35f8:	889b      	ldrh	r3, [r3, #4]
    35fa:	02db      	lsls	r3, r3, #11
    35fc:	9a03      	ldr	r2, [sp, #12]
    35fe:	4313      	orrs	r3, r2
    3600:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3602:	4a03      	ldr	r2, [pc, #12]	; (3610 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3604:	9b03      	ldr	r3, [sp, #12]
    3606:	6053      	str	r3, [r2, #4]
}
    3608:	bf00      	nop
    360a:	b004      	add	sp, #16
    360c:	4770      	bx	lr
    360e:	bf00      	nop
    3610:	40048000 	.word	0x40048000

00003614 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3614:	b084      	sub	sp, #16
    3616:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3618:	4913      	ldr	r1, [pc, #76]	; (3668 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    361a:	9b01      	ldr	r3, [sp, #4]
    361c:	681a      	ldr	r2, [r3, #0]
    361e:	4813      	ldr	r0, [pc, #76]	; (366c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3620:	4613      	mov	r3, r2
    3622:	00db      	lsls	r3, r3, #3
    3624:	4413      	add	r3, r2
    3626:	4403      	add	r3, r0
    3628:	3306      	adds	r3, #6
    362a:	781b      	ldrb	r3, [r3, #0]
    362c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3630:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3632:	9b03      	ldr	r3, [sp, #12]
    3634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3638:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    363a:	9b01      	ldr	r3, [sp, #4]
    363c:	889b      	ldrh	r3, [r3, #4]
    363e:	079b      	lsls	r3, r3, #30
    3640:	9a03      	ldr	r2, [sp, #12]
    3642:	4313      	orrs	r3, r2
    3644:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3646:	4908      	ldr	r1, [pc, #32]	; (3668 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3648:	9b01      	ldr	r3, [sp, #4]
    364a:	681a      	ldr	r2, [r3, #0]
    364c:	4807      	ldr	r0, [pc, #28]	; (366c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    364e:	4613      	mov	r3, r2
    3650:	00db      	lsls	r3, r3, #3
    3652:	4413      	add	r3, r2
    3654:	4403      	add	r3, r0
    3656:	3306      	adds	r3, #6
    3658:	781b      	ldrb	r3, [r3, #0]
    365a:	461a      	mov	r2, r3
    365c:	9b03      	ldr	r3, [sp, #12]
    365e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3662:	bf00      	nop
    3664:	b004      	add	sp, #16
    3666:	4770      	bx	lr
    3668:	40065000 	.word	0x40065000
    366c:	0000839c 	.word	0x0000839c

00003670 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3670:	b086      	sub	sp, #24
    3672:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3674:	9b01      	ldr	r3, [sp, #4]
    3676:	889b      	ldrh	r3, [r3, #4]
    3678:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    367a:	9b01      	ldr	r3, [sp, #4]
    367c:	681a      	ldr	r2, [r3, #0]
    367e:	4910      	ldr	r1, [pc, #64]	; (36c0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3680:	4613      	mov	r3, r2
    3682:	00db      	lsls	r3, r3, #3
    3684:	4413      	add	r3, r2
    3686:	440b      	add	r3, r1
    3688:	3306      	adds	r3, #6
    368a:	781b      	ldrb	r3, [r3, #0]
    368c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    368e:	4b0d      	ldr	r3, [pc, #52]	; (36c4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3692:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3694:	2201      	movs	r2, #1
    3696:	9b04      	ldr	r3, [sp, #16]
    3698:	fa02 f303 	lsl.w	r3, r2, r3
    369c:	43db      	mvns	r3, r3
    369e:	9a03      	ldr	r2, [sp, #12]
    36a0:	4013      	ands	r3, r2
    36a2:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    36a4:	9a05      	ldr	r2, [sp, #20]
    36a6:	9b04      	ldr	r3, [sp, #16]
    36a8:	fa02 f303 	lsl.w	r3, r2, r3
    36ac:	9a03      	ldr	r2, [sp, #12]
    36ae:	4313      	orrs	r3, r2
    36b0:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    36b2:	4a04      	ldr	r2, [pc, #16]	; (36c4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36b4:	9b03      	ldr	r3, [sp, #12]
    36b6:	6413      	str	r3, [r2, #64]	; 0x40
}
    36b8:	bf00      	nop
    36ba:	b006      	add	sp, #24
    36bc:	4770      	bx	lr
    36be:	bf00      	nop
    36c0:	0000839c 	.word	0x0000839c
    36c4:	40048000 	.word	0x40048000

000036c8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36c8:	b084      	sub	sp, #16
    36ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    36cc:	4b0a      	ldr	r3, [pc, #40]	; (36f8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    36ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    36d0:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    36d2:	9b01      	ldr	r3, [sp, #4]
    36d4:	889b      	ldrh	r3, [r3, #4]
    36d6:	2b01      	cmp	r3, #1
    36d8:	d104      	bne.n	36e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    36da:	9b03      	ldr	r3, [sp, #12]
    36dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    36e0:	9303      	str	r3, [sp, #12]
    36e2:	e003      	b.n	36ec <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    36e4:	9b03      	ldr	r3, [sp, #12]
    36e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    36ea:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    36ec:	4a02      	ldr	r2, [pc, #8]	; (36f8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    36ee:	9b03      	ldr	r3, [sp, #12]
    36f0:	6693      	str	r3, [r2, #104]	; 0x68
}
    36f2:	bf00      	nop
    36f4:	b004      	add	sp, #16
    36f6:	4770      	bx	lr
    36f8:	40048000 	.word	0x40048000

000036fc <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    36fc:	b082      	sub	sp, #8
    36fe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3700:	bf00      	nop
    3702:	b002      	add	sp, #8
    3704:	4770      	bx	lr

00003706 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3706:	b082      	sub	sp, #8
    3708:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    370a:	bf00      	nop
    370c:	b002      	add	sp, #8
    370e:	4770      	bx	lr

00003710 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3710:	b500      	push	{lr}
    3712:	b083      	sub	sp, #12
    3714:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3716:	9b01      	ldr	r3, [sp, #4]
    3718:	2b00      	cmp	r3, #0
    371a:	d002      	beq.n	3722 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    371c:	9801      	ldr	r0, [sp, #4]
    371e:	f000 f8d1 	bl	38c4 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3722:	bf00      	nop
    3724:	b003      	add	sp, #12
    3726:	f85d fb04 	ldr.w	pc, [sp], #4

0000372a <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    372a:	b500      	push	{lr}
    372c:	b083      	sub	sp, #12
    372e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3730:	9b01      	ldr	r3, [sp, #4]
    3732:	2b00      	cmp	r3, #0
    3734:	d002      	beq.n	373c <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3736:	9801      	ldr	r0, [sp, #4]
    3738:	f000 f950 	bl	39dc <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    373c:	bf00      	nop
    373e:	b003      	add	sp, #12
    3740:	f85d fb04 	ldr.w	pc, [sp], #4

00003744 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3744:	b500      	push	{lr}
    3746:	b083      	sub	sp, #12
    3748:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    374a:	9801      	ldr	r0, [sp, #4]
    374c:	f000 f98e 	bl	3a6c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3750:	bf00      	nop
    3752:	b003      	add	sp, #12
    3754:	f85d fb04 	ldr.w	pc, [sp], #4

00003758 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3758:	b500      	push	{lr}
    375a:	b083      	sub	sp, #12
    375c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    375e:	9b01      	ldr	r3, [sp, #4]
    3760:	2b00      	cmp	r3, #0
    3762:	d002      	beq.n	376a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3764:	9801      	ldr	r0, [sp, #4]
    3766:	f000 f999 	bl	3a9c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376a:	bf00      	nop
    376c:	b003      	add	sp, #12
    376e:	f85d fb04 	ldr.w	pc, [sp], #4

00003772 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3772:	b500      	push	{lr}
    3774:	b083      	sub	sp, #12
    3776:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	2b00      	cmp	r3, #0
    377c:	d002      	beq.n	3784 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    377e:	9801      	ldr	r0, [sp, #4]
    3780:	f000 f9b0 	bl	3ae4 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3784:	bf00      	nop
    3786:	b003      	add	sp, #12
    3788:	f85d fb04 	ldr.w	pc, [sp], #4

0000378c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    378c:	b500      	push	{lr}
    378e:	b083      	sub	sp, #12
    3790:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3792:	9801      	ldr	r0, [sp, #4]
    3794:	f000 f9ba 	bl	3b0c <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3798:	bf00      	nop
    379a:	b003      	add	sp, #12
    379c:	f85d fb04 	ldr.w	pc, [sp], #4

000037a0 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37a0:	b500      	push	{lr}
    37a2:	b083      	sub	sp, #12
    37a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37a6:	9b01      	ldr	r3, [sp, #4]
    37a8:	2b00      	cmp	r3, #0
    37aa:	d002      	beq.n	37b2 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    37ac:	9801      	ldr	r0, [sp, #4]
    37ae:	f000 f9bd 	bl	3b2c <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37b2:	bf00      	nop
    37b4:	b003      	add	sp, #12
    37b6:	f85d fb04 	ldr.w	pc, [sp], #4

000037ba <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37ba:	b500      	push	{lr}
    37bc:	b083      	sub	sp, #12
    37be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c0:	9b01      	ldr	r3, [sp, #4]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d002      	beq.n	37cc <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    37c6:	9801      	ldr	r0, [sp, #4]
    37c8:	f000 f9d4 	bl	3b74 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37cc:	bf00      	nop
    37ce:	b003      	add	sp, #12
    37d0:	f85d fb04 	ldr.w	pc, [sp], #4

000037d4 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    37d4:	b500      	push	{lr}
    37d6:	b083      	sub	sp, #12
    37d8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    37da:	9801      	ldr	r0, [sp, #4]
    37dc:	f000 f9de 	bl	3b9c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37e0:	bf00      	nop
    37e2:	b003      	add	sp, #12
    37e4:	f85d fb04 	ldr.w	pc, [sp], #4

000037e8 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    37e8:	b500      	push	{lr}
    37ea:	b089      	sub	sp, #36	; 0x24
    37ec:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    37ee:	2300      	movs	r3, #0
    37f0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    37f4:	4b20      	ldr	r3, [pc, #128]	; (3878 <SetInputSouceSytemClock+0x90>)
    37f6:	695b      	ldr	r3, [r3, #20]
    37f8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    37fa:	9b06      	ldr	r3, [sp, #24]
    37fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3800:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3802:	9b01      	ldr	r3, [sp, #4]
    3804:	061b      	lsls	r3, r3, #24
    3806:	9a06      	ldr	r2, [sp, #24]
    3808:	4313      	orrs	r3, r2
    380a:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    380c:	4a1a      	ldr	r2, [pc, #104]	; (3878 <SetInputSouceSytemClock+0x90>)
    380e:	9b06      	ldr	r3, [sp, #24]
    3810:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3812:	aa02      	add	r2, sp, #8
    3814:	a903      	add	r1, sp, #12
    3816:	a804      	add	r0, sp, #16
    3818:	f24c 3350 	movw	r3, #50000	; 0xc350
    381c:	f7ff f9ac 	bl	2b78 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3820:	4b15      	ldr	r3, [pc, #84]	; (3878 <SetInputSouceSytemClock+0x90>)
    3822:	691b      	ldr	r3, [r3, #16]
    3824:	0e1b      	lsrs	r3, r3, #24
    3826:	f003 030f 	and.w	r3, r3, #15
    382a:	9a01      	ldr	r2, [sp, #4]
    382c:	429a      	cmp	r2, r3
    382e:	bf0c      	ite	eq
    3830:	2301      	moveq	r3, #1
    3832:	2300      	movne	r3, #0
    3834:	b2db      	uxtb	r3, r3
    3836:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3838:	9a02      	ldr	r2, [sp, #8]
    383a:	a903      	add	r1, sp, #12
    383c:	ab04      	add	r3, sp, #16
    383e:	4618      	mov	r0, r3
    3840:	f7ff f9b4 	bl	2bac <Clock_Ip_TimeoutExpired>
    3844:	4603      	mov	r3, r0
    3846:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    384a:	9b05      	ldr	r3, [sp, #20]
    384c:	2b00      	cmp	r3, #0
    384e:	d106      	bne.n	385e <SetInputSouceSytemClock+0x76>
    3850:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3854:	f083 0301 	eor.w	r3, r3, #1
    3858:	b2db      	uxtb	r3, r3
    385a:	2b00      	cmp	r3, #0
    385c:	d1e0      	bne.n	3820 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    385e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3862:	2b00      	cmp	r3, #0
    3864:	d003      	beq.n	386e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3866:	2105      	movs	r1, #5
    3868:	2001      	movs	r0, #1
    386a:	f7ff f975 	bl	2b58 <Clock_Ip_ReportClockErrors>
    }
}
    386e:	bf00      	nop
    3870:	b009      	add	sp, #36	; 0x24
    3872:	f85d fb04 	ldr.w	pc, [sp], #4
    3876:	bf00      	nop
    3878:	40064000 	.word	0x40064000

0000387c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    387c:	b500      	push	{lr}
    387e:	b083      	sub	sp, #12
    3880:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3882:	9b01      	ldr	r3, [sp, #4]
    3884:	2b00      	cmp	r3, #0
    3886:	d002      	beq.n	388e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3888:	9801      	ldr	r0, [sp, #4]
    388a:	f000 f997 	bl	3bbc <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    388e:	bf00      	nop
    3890:	b003      	add	sp, #12
    3892:	f85d fb04 	ldr.w	pc, [sp], #4

00003896 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3896:	b500      	push	{lr}
    3898:	b083      	sub	sp, #12
    389a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    389c:	9b01      	ldr	r3, [sp, #4]
    389e:	2b00      	cmp	r3, #0
    38a0:	d002      	beq.n	38a8 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    38a2:	9801      	ldr	r0, [sp, #4]
    38a4:	f000 fa7e 	bl	3da4 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a8:	bf00      	nop
    38aa:	b003      	add	sp, #12
    38ac:	f85d fb04 	ldr.w	pc, [sp], #4

000038b0 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    38b0:	b500      	push	{lr}
    38b2:	b083      	sub	sp, #12
    38b4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    38b6:	9801      	ldr	r0, [sp, #4]
    38b8:	f000 fab8 	bl	3e2c <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    38bc:	bf00      	nop
    38be:	b003      	add	sp, #12
    38c0:	f85d fb04 	ldr.w	pc, [sp], #4

000038c4 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    38c4:	b500      	push	{lr}
    38c6:	b08b      	sub	sp, #44	; 0x2c
    38c8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    38ca:	2300      	movs	r3, #0
    38cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    38d0:	9b01      	ldr	r3, [sp, #4]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d10b      	bne.n	38ee <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    38d6:	2305      	movs	r3, #5
    38d8:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    38da:	2301      	movs	r3, #1
    38dc:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    38e0:	2301      	movs	r3, #1
    38e2:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    38e6:	2301      	movs	r3, #1
    38e8:	f88d 3010 	strb.w	r3, [sp, #16]
    38ec:	e00e      	b.n	390c <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    38ee:	9b01      	ldr	r3, [sp, #4]
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    38f4:	9b01      	ldr	r3, [sp, #4]
    38f6:	79db      	ldrb	r3, [r3, #7]
    38f8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    38fc:	9b01      	ldr	r3, [sp, #4]
    38fe:	889b      	ldrh	r3, [r3, #4]
    3900:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3904:	9b01      	ldr	r3, [sp, #4]
    3906:	7a1b      	ldrb	r3, [r3, #8]
    3908:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    390c:	4b32      	ldr	r3, [pc, #200]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    390e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3912:	4a31      	ldr	r2, [pc, #196]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3914:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3918:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    391c:	4b2e      	ldr	r3, [pc, #184]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    391e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3922:	4a2d      	ldr	r2, [pc, #180]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3924:	f023 0301 	bic.w	r3, r3, #1
    3928:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    392c:	4b2a      	ldr	r3, [pc, #168]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    392e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3932:	4a29      	ldr	r2, [pc, #164]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3934:	f023 0304 	bic.w	r3, r3, #4
    3938:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    393c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3940:	2b01      	cmp	r3, #1
    3942:	d144      	bne.n	39ce <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3944:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3948:	4a23      	ldr	r2, [pc, #140]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    394a:	f003 0301 	and.w	r3, r3, #1
    394e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3952:	4b21      	ldr	r3, [pc, #132]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3958:	4a1f      	ldr	r2, [pc, #124]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    395a:	f043 0301 	orr.w	r3, r3, #1
    395e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3962:	4b1d      	ldr	r3, [pc, #116]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3964:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3968:	f89d 3010 	ldrb.w	r3, [sp, #16]
    396c:	009b      	lsls	r3, r3, #2
    396e:	f003 0304 	and.w	r3, r3, #4
    3972:	4919      	ldr	r1, [pc, #100]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3974:	4313      	orrs	r3, r2
    3976:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    397a:	aa05      	add	r2, sp, #20
    397c:	a906      	add	r1, sp, #24
    397e:	a807      	add	r0, sp, #28
    3980:	f24c 3350 	movw	r3, #50000	; 0xc350
    3984:	f7ff f8f8 	bl	2b78 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3988:	4b13      	ldr	r3, [pc, #76]	; (39d8 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    398e:	0e1b      	lsrs	r3, r3, #24
    3990:	f003 0301 	and.w	r3, r3, #1
    3994:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3996:	9a05      	ldr	r2, [sp, #20]
    3998:	a906      	add	r1, sp, #24
    399a:	ab07      	add	r3, sp, #28
    399c:	4618      	mov	r0, r3
    399e:	f7ff f905 	bl	2bac <Clock_Ip_TimeoutExpired>
    39a2:	4603      	mov	r3, r0
    39a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    39a8:	9b08      	ldr	r3, [sp, #32]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d106      	bne.n	39bc <Clock_Ip_SetSirc_TrustedCall+0xf8>
    39ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    39b2:	f083 0301 	eor.w	r3, r3, #1
    39b6:	b2db      	uxtb	r3, r3
    39b8:	2b00      	cmp	r3, #0
    39ba:	d1e5      	bne.n	3988 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    39bc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    39c0:	2b00      	cmp	r3, #0
    39c2:	d004      	beq.n	39ce <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    39c4:	9b02      	ldr	r3, [sp, #8]
    39c6:	4619      	mov	r1, r3
    39c8:	2001      	movs	r0, #1
    39ca:	f7ff f8c5 	bl	2b58 <Clock_Ip_ReportClockErrors>
        }
    }
}
    39ce:	bf00      	nop
    39d0:	b00b      	add	sp, #44	; 0x2c
    39d2:	f85d fb04 	ldr.w	pc, [sp], #4
    39d6:	bf00      	nop
    39d8:	40064000 	.word	0x40064000

000039dc <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    39dc:	b500      	push	{lr}
    39de:	b089      	sub	sp, #36	; 0x24
    39e0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    39e2:	2300      	movs	r3, #0
    39e4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39e8:	4b1f      	ldr	r3, [pc, #124]	; (3a68 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ee:	4a1e      	ldr	r2, [pc, #120]	; (3a68 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39f0:	f043 0301 	orr.w	r3, r3, #1
    39f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    39f8:	4b1b      	ldr	r3, [pc, #108]	; (3a68 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    39fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39fe:	4a1a      	ldr	r2, [pc, #104]	; (3a68 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a00:	f043 0304 	orr.w	r3, r3, #4
    3a04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a08:	aa03      	add	r2, sp, #12
    3a0a:	a904      	add	r1, sp, #16
    3a0c:	a805      	add	r0, sp, #20
    3a0e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a12:	f7ff f8b1 	bl	2b78 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a16:	4b14      	ldr	r3, [pc, #80]	; (3a68 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a1c:	0e1b      	lsrs	r3, r3, #24
    3a1e:	f003 0301 	and.w	r3, r3, #1
    3a22:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a24:	9a03      	ldr	r2, [sp, #12]
    3a26:	a904      	add	r1, sp, #16
    3a28:	ab05      	add	r3, sp, #20
    3a2a:	4618      	mov	r0, r3
    3a2c:	f7ff f8be 	bl	2bac <Clock_Ip_TimeoutExpired>
    3a30:	4603      	mov	r3, r0
    3a32:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a36:	9b06      	ldr	r3, [sp, #24]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d106      	bne.n	3a4a <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a40:	f083 0301 	eor.w	r3, r3, #1
    3a44:	b2db      	uxtb	r3, r3
    3a46:	2b00      	cmp	r3, #0
    3a48:	d1e5      	bne.n	3a16 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3a4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d005      	beq.n	3a5e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a52:	9b01      	ldr	r3, [sp, #4]
    3a54:	681b      	ldr	r3, [r3, #0]
    3a56:	4619      	mov	r1, r3
    3a58:	2001      	movs	r0, #1
    3a5a:	f7ff f87d 	bl	2b58 <Clock_Ip_ReportClockErrors>
    }
}
    3a5e:	bf00      	nop
    3a60:	b009      	add	sp, #36	; 0x24
    3a62:	f85d fb04 	ldr.w	pc, [sp], #4
    3a66:	bf00      	nop
    3a68:	40064000 	.word	0x40064000

00003a6c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3a6c:	b082      	sub	sp, #8
    3a6e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3a70:	4b09      	ldr	r3, [pc, #36]	; (3a98 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a76:	4a08      	ldr	r2, [pc, #32]	; (3a98 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a78:	f023 0301 	bic.w	r3, r3, #1
    3a7c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3a80:	4b05      	ldr	r3, [pc, #20]	; (3a98 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a86:	4a04      	ldr	r2, [pc, #16]	; (3a98 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3a88:	f023 0304 	bic.w	r3, r3, #4
    3a8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3a90:	bf00      	nop
    3a92:	b002      	add	sp, #8
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop
    3a98:	40064000 	.word	0x40064000

00003a9c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a9c:	b082      	sub	sp, #8
    3a9e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3aa0:	4b0f      	ldr	r3, [pc, #60]	; (3ae0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3aa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aa6:	4a0e      	ldr	r2, [pc, #56]	; (3ae0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3aa8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3aac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ab0:	4b0b      	ldr	r3, [pc, #44]	; (3ae0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ab6:	4a0a      	ldr	r2, [pc, #40]	; (3ae0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ab8:	f023 0304 	bic.w	r3, r3, #4
    3abc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3ac0:	4b07      	ldr	r3, [pc, #28]	; (3ae0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ac2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3ac6:	9b01      	ldr	r3, [sp, #4]
    3ac8:	7a1b      	ldrb	r3, [r3, #8]
    3aca:	009b      	lsls	r3, r3, #2
    3acc:	f003 0304 	and.w	r3, r3, #4
    3ad0:	4903      	ldr	r1, [pc, #12]	; (3ae0 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3ad2:	4313      	orrs	r3, r2
    3ad4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3ad8:	bf00      	nop
    3ada:	b002      	add	sp, #8
    3adc:	4770      	bx	lr
    3ade:	bf00      	nop
    3ae0:	40064000 	.word	0x40064000

00003ae4 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3ae4:	b082      	sub	sp, #8
    3ae6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3ae8:	9b01      	ldr	r3, [sp, #4]
    3aea:	889b      	ldrh	r3, [r3, #4]
    3aec:	2b01      	cmp	r3, #1
    3aee:	d107      	bne.n	3b00 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3af0:	4b05      	ldr	r3, [pc, #20]	; (3b08 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3af6:	4a04      	ldr	r2, [pc, #16]	; (3b08 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3af8:	f043 0304 	orr.w	r3, r3, #4
    3afc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b00:	bf00      	nop
    3b02:	b002      	add	sp, #8
    3b04:	4770      	bx	lr
    3b06:	bf00      	nop
    3b08:	40064000 	.word	0x40064000

00003b0c <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b0c:	b082      	sub	sp, #8
    3b0e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b10:	4b05      	ldr	r3, [pc, #20]	; (3b28 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b16:	4a04      	ldr	r2, [pc, #16]	; (3b28 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b18:	f023 0304 	bic.w	r3, r3, #4
    3b1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b20:	bf00      	nop
    3b22:	b002      	add	sp, #8
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop
    3b28:	40064000 	.word	0x40064000

00003b2c <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b2c:	b082      	sub	sp, #8
    3b2e:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b30:	4b0f      	ldr	r3, [pc, #60]	; (3b70 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b36:	4a0e      	ldr	r2, [pc, #56]	; (3b70 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b40:	4b0b      	ldr	r3, [pc, #44]	; (3b70 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b46:	4a0a      	ldr	r2, [pc, #40]	; (3b70 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b48:	f023 0302 	bic.w	r3, r3, #2
    3b4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3b50:	4b07      	ldr	r3, [pc, #28]	; (3b70 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b52:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b56:	9b01      	ldr	r3, [sp, #4]
    3b58:	7a5b      	ldrb	r3, [r3, #9]
    3b5a:	005b      	lsls	r3, r3, #1
    3b5c:	f003 0302 	and.w	r3, r3, #2
    3b60:	4903      	ldr	r1, [pc, #12]	; (3b70 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b62:	4313      	orrs	r3, r2
    3b64:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b68:	bf00      	nop
    3b6a:	b002      	add	sp, #8
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop
    3b70:	40064000 	.word	0x40064000

00003b74 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b74:	b082      	sub	sp, #8
    3b76:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b78:	9b01      	ldr	r3, [sp, #4]
    3b7a:	889b      	ldrh	r3, [r3, #4]
    3b7c:	2b01      	cmp	r3, #1
    3b7e:	d107      	bne.n	3b90 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3b80:	4b05      	ldr	r3, [pc, #20]	; (3b98 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b86:	4a04      	ldr	r2, [pc, #16]	; (3b98 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3b88:	f043 0302 	orr.w	r3, r3, #2
    3b8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b90:	bf00      	nop
    3b92:	b002      	add	sp, #8
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop
    3b98:	40064000 	.word	0x40064000

00003b9c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3b9c:	b082      	sub	sp, #8
    3b9e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3ba0:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba6:	4a04      	ldr	r2, [pc, #16]	; (3bb8 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3ba8:	f023 0302 	bic.w	r3, r3, #2
    3bac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bb0:	bf00      	nop
    3bb2:	b002      	add	sp, #8
    3bb4:	4770      	bx	lr
    3bb6:	bf00      	nop
    3bb8:	40064000 	.word	0x40064000

00003bbc <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bbc:	b500      	push	{lr}
    3bbe:	b08b      	sub	sp, #44	; 0x2c
    3bc0:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3bc2:	9b01      	ldr	r3, [sp, #4]
    3bc4:	681a      	ldr	r2, [r3, #0]
    3bc6:	4975      	ldr	r1, [pc, #468]	; (3d9c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3bc8:	4613      	mov	r3, r2
    3bca:	00db      	lsls	r3, r3, #3
    3bcc:	4413      	add	r3, r2
    3bce:	440b      	add	r3, r1
    3bd0:	781b      	ldrb	r3, [r3, #0]
    3bd2:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3bd4:	2300      	movs	r3, #0
    3bd6:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3bda:	2300      	movs	r3, #0
    3bdc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3be0:	4b6f      	ldr	r3, [pc, #444]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3be2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3be6:	4a6e      	ldr	r2, [pc, #440]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3be8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3bec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3bf0:	4b6b      	ldr	r3, [pc, #428]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3bf2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d07d      	beq.n	3cfa <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3bfe:	9b01      	ldr	r3, [sp, #4]
    3c00:	79db      	ldrb	r3, [r3, #7]
    3c02:	461a      	mov	r2, r3
    3c04:	4b66      	ldr	r3, [pc, #408]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c06:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c0a:	f003 0303 	and.w	r3, r3, #3
    3c0e:	429a      	cmp	r2, r3
    3c10:	d10b      	bne.n	3c2a <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c12:	9b01      	ldr	r3, [sp, #4]
    3c14:	799b      	ldrb	r3, [r3, #6]
    3c16:	461a      	mov	r2, r3
    3c18:	4b61      	ldr	r3, [pc, #388]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c1e:	08db      	lsrs	r3, r3, #3
    3c20:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c24:	429a      	cmp	r2, r3
    3c26:	f000 80b4 	beq.w	3d92 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c2a:	4b5d      	ldr	r3, [pc, #372]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c30:	f003 0301 	and.w	r3, r3, #1
    3c34:	2b00      	cmp	r3, #0
    3c36:	d105      	bne.n	3c44 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c38:	2301      	movs	r3, #1
    3c3a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c3e:	2000      	movs	r0, #0
    3c40:	f7ff fd66 	bl	3710 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c44:	2002      	movs	r0, #2
    3c46:	f7ff fdcf 	bl	37e8 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3c4a:	4b55      	ldr	r3, [pc, #340]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c50:	4a53      	ldr	r2, [pc, #332]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c52:	f023 0301 	bic.w	r3, r3, #1
    3c56:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3c5a:	9b01      	ldr	r3, [sp, #4]
    3c5c:	889b      	ldrh	r3, [r3, #4]
    3c5e:	2b01      	cmp	r3, #1
    3c60:	f040 8097 	bne.w	3d92 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3c64:	9b01      	ldr	r3, [sp, #4]
    3c66:	79db      	ldrb	r3, [r3, #7]
    3c68:	4a4d      	ldr	r2, [pc, #308]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c6a:	f003 0303 	and.w	r3, r3, #3
    3c6e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3c72:	4b4b      	ldr	r3, [pc, #300]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c74:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3c78:	9b01      	ldr	r3, [sp, #4]
    3c7a:	799b      	ldrb	r3, [r3, #6]
    3c7c:	00db      	lsls	r3, r3, #3
    3c7e:	f003 0308 	and.w	r3, r3, #8
    3c82:	4313      	orrs	r3, r2
    3c84:	4a46      	ldr	r2, [pc, #280]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c86:	f043 0301 	orr.w	r3, r3, #1
    3c8a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c8e:	aa03      	add	r2, sp, #12
    3c90:	a904      	add	r1, sp, #16
    3c92:	a805      	add	r0, sp, #20
    3c94:	f24c 3350 	movw	r3, #50000	; 0xc350
    3c98:	f7fe ff6e 	bl	2b78 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3c9c:	4b40      	ldr	r3, [pc, #256]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ca2:	0e1b      	lsrs	r3, r3, #24
    3ca4:	f003 0301 	and.w	r3, r3, #1
    3ca8:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3caa:	9a03      	ldr	r2, [sp, #12]
    3cac:	a904      	add	r1, sp, #16
    3cae:	ab05      	add	r3, sp, #20
    3cb0:	4618      	mov	r0, r3
    3cb2:	f7fe ff7b 	bl	2bac <Clock_Ip_TimeoutExpired>
    3cb6:	4603      	mov	r3, r0
    3cb8:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3cbc:	9b06      	ldr	r3, [sp, #24]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d106      	bne.n	3cd0 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3cc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cc6:	f083 0301 	eor.w	r3, r3, #1
    3cca:	b2db      	uxtb	r3, r3
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d1e5      	bne.n	3c9c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3cd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3cd4:	2b00      	cmp	r3, #0
    3cd6:	d005      	beq.n	3ce4 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3cd8:	9b01      	ldr	r3, [sp, #4]
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	4619      	mov	r1, r3
    3cde:	2001      	movs	r0, #1
    3ce0:	f7fe ff3a 	bl	2b58 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3ce4:	2003      	movs	r0, #3
    3ce6:	f7ff fd7f 	bl	37e8 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3cea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d04f      	beq.n	3d92 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3cf2:	2002      	movs	r0, #2
    3cf4:	f7ff fd26 	bl	3744 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3cf8:	e04b      	b.n	3d92 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cfa:	4b29      	ldr	r3, [pc, #164]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cfc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d00:	4a27      	ldr	r2, [pc, #156]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d02:	f023 0301 	bic.w	r3, r3, #1
    3d06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d0a:	9b01      	ldr	r3, [sp, #4]
    3d0c:	889b      	ldrh	r3, [r3, #4]
    3d0e:	2b01      	cmp	r3, #1
    3d10:	d13f      	bne.n	3d92 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d12:	9b01      	ldr	r3, [sp, #4]
    3d14:	79db      	ldrb	r3, [r3, #7]
    3d16:	4a22      	ldr	r2, [pc, #136]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d18:	f003 0303 	and.w	r3, r3, #3
    3d1c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d20:	4b1f      	ldr	r3, [pc, #124]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d22:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d26:	9b01      	ldr	r3, [sp, #4]
    3d28:	799b      	ldrb	r3, [r3, #6]
    3d2a:	00db      	lsls	r3, r3, #3
    3d2c:	f003 0308 	and.w	r3, r3, #8
    3d30:	4313      	orrs	r3, r2
    3d32:	4a1b      	ldr	r2, [pc, #108]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d34:	f043 0301 	orr.w	r3, r3, #1
    3d38:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d3c:	aa03      	add	r2, sp, #12
    3d3e:	a904      	add	r1, sp, #16
    3d40:	a805      	add	r0, sp, #20
    3d42:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d46:	f7fe ff17 	bl	2b78 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d4a:	4b15      	ldr	r3, [pc, #84]	; (3da0 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d4c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d50:	0e1b      	lsrs	r3, r3, #24
    3d52:	f003 0301 	and.w	r3, r3, #1
    3d56:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d58:	9a03      	ldr	r2, [sp, #12]
    3d5a:	a904      	add	r1, sp, #16
    3d5c:	ab05      	add	r3, sp, #20
    3d5e:	4618      	mov	r0, r3
    3d60:	f7fe ff24 	bl	2bac <Clock_Ip_TimeoutExpired>
    3d64:	4603      	mov	r3, r0
    3d66:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d6a:	9b06      	ldr	r3, [sp, #24]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d106      	bne.n	3d7e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3d70:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d74:	f083 0301 	eor.w	r3, r3, #1
    3d78:	b2db      	uxtb	r3, r3
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d1e5      	bne.n	3d4a <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3d7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d005      	beq.n	3d92 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d86:	9b01      	ldr	r3, [sp, #4]
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	4619      	mov	r1, r3
    3d8c:	2001      	movs	r0, #1
    3d8e:	f7fe fee3 	bl	2b58 <Clock_Ip_ReportClockErrors>
}
    3d92:	bf00      	nop
    3d94:	b00b      	add	sp, #44	; 0x2c
    3d96:	f85d fb04 	ldr.w	pc, [sp], #4
    3d9a:	bf00      	nop
    3d9c:	0000839c 	.word	0x0000839c
    3da0:	40064000 	.word	0x40064000

00003da4 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3da4:	b500      	push	{lr}
    3da6:	b089      	sub	sp, #36	; 0x24
    3da8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3daa:	2300      	movs	r3, #0
    3dac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3db0:	9b01      	ldr	r3, [sp, #4]
    3db2:	889b      	ldrh	r3, [r3, #4]
    3db4:	2b01      	cmp	r3, #1
    3db6:	d132      	bne.n	3e1e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3db8:	4b1b      	ldr	r3, [pc, #108]	; (3e28 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3dba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3dbe:	4a1a      	ldr	r2, [pc, #104]	; (3e28 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3dc0:	f043 0301 	orr.w	r3, r3, #1
    3dc4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dc8:	aa03      	add	r2, sp, #12
    3dca:	a904      	add	r1, sp, #16
    3dcc:	a805      	add	r0, sp, #20
    3dce:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dd2:	f7fe fed1 	bl	2b78 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3dd6:	4b14      	ldr	r3, [pc, #80]	; (3e28 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3dd8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ddc:	0e1b      	lsrs	r3, r3, #24
    3dde:	f003 0301 	and.w	r3, r3, #1
    3de2:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3de4:	9a03      	ldr	r2, [sp, #12]
    3de6:	a904      	add	r1, sp, #16
    3de8:	ab05      	add	r3, sp, #20
    3dea:	4618      	mov	r0, r3
    3dec:	f7fe fede 	bl	2bac <Clock_Ip_TimeoutExpired>
    3df0:	4603      	mov	r3, r0
    3df2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3df6:	9b06      	ldr	r3, [sp, #24]
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d106      	bne.n	3e0a <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3dfc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e00:	f083 0301 	eor.w	r3, r3, #1
    3e04:	b2db      	uxtb	r3, r3
    3e06:	2b00      	cmp	r3, #0
    3e08:	d1e5      	bne.n	3dd6 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e0a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	d005      	beq.n	3e1e <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	4619      	mov	r1, r3
    3e18:	2001      	movs	r0, #1
    3e1a:	f7fe fe9d 	bl	2b58 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e1e:	bf00      	nop
    3e20:	b009      	add	sp, #36	; 0x24
    3e22:	f85d fb04 	ldr.w	pc, [sp], #4
    3e26:	bf00      	nop
    3e28:	40064000 	.word	0x40064000

00003e2c <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e2c:	b082      	sub	sp, #8
    3e2e:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e36:	4a04      	ldr	r2, [pc, #16]	; (3e48 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e38:	f023 0301 	bic.w	r3, r3, #1
    3e3c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3e40:	bf00      	nop
    3e42:	b002      	add	sp, #8
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop
    3e48:	40064000 	.word	0x40064000

00003e4c <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3e4c:	b082      	sub	sp, #8
    3e4e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e50:	bf00      	nop
    3e52:	b002      	add	sp, #8
    3e54:	4770      	bx	lr

00003e56 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3e56:	b082      	sub	sp, #8
    3e58:	9001      	str	r0, [sp, #4]
    3e5a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e5c:	bf00      	nop
    3e5e:	b002      	add	sp, #8
    3e60:	4770      	bx	lr

00003e62 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3e62:	b082      	sub	sp, #8
    3e64:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3e66:	bf00      	nop
    3e68:	b002      	add	sp, #8
    3e6a:	4770      	bx	lr

00003e6c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3e6c:	b082      	sub	sp, #8
    3e6e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e70:	bf00      	nop
    3e72:	b002      	add	sp, #8
    3e74:	4770      	bx	lr

00003e76 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3e76:	b082      	sub	sp, #8
    3e78:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3e7a:	2302      	movs	r3, #2
}
    3e7c:	4618      	mov	r0, r3
    3e7e:	b002      	add	sp, #8
    3e80:	4770      	bx	lr

00003e82 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3e82:	b082      	sub	sp, #8
    3e84:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3e86:	bf00      	nop
    3e88:	b002      	add	sp, #8
    3e8a:	4770      	bx	lr

00003e8c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3e8c:	b500      	push	{lr}
    3e8e:	b083      	sub	sp, #12
    3e90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e92:	9b01      	ldr	r3, [sp, #4]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d002      	beq.n	3e9e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3e98:	9801      	ldr	r0, [sp, #4]
    3e9a:	f000 f870 	bl	3f7e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e9e:	bf00      	nop
    3ea0:	b003      	add	sp, #12
    3ea2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ea6 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ea6:	b500      	push	{lr}
    3ea8:	b083      	sub	sp, #12
    3eaa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3eac:	9b01      	ldr	r3, [sp, #4]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d002      	beq.n	3eb8 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3eb2:	9801      	ldr	r0, [sp, #4]
    3eb4:	f000 f89a 	bl	3fec <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3eb8:	bf00      	nop
    3eba:	b003      	add	sp, #12
    3ebc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ec0 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3ec0:	b500      	push	{lr}
    3ec2:	b089      	sub	sp, #36	; 0x24
    3ec4:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3ec6:	2301      	movs	r3, #1
    3ec8:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3eca:	2300      	movs	r3, #0
    3ecc:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3ed0:	4b1e      	ldr	r3, [pc, #120]	; (3f4c <Clock_Ip_CompleteSpll+0x8c>)
    3ed2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ed6:	f003 0301 	and.w	r3, r3, #1
    3eda:	2b00      	cmp	r3, #0
    3edc:	d02f      	beq.n	3f3e <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ede:	aa02      	add	r2, sp, #8
    3ee0:	a903      	add	r1, sp, #12
    3ee2:	a804      	add	r0, sp, #16
    3ee4:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ee8:	f7fe fe46 	bl	2b78 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3eec:	4b17      	ldr	r3, [pc, #92]	; (3f4c <Clock_Ip_CompleteSpll+0x8c>)
    3eee:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ef2:	0e1b      	lsrs	r3, r3, #24
    3ef4:	f003 0301 	and.w	r3, r3, #1
    3ef8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3efa:	9a02      	ldr	r2, [sp, #8]
    3efc:	a903      	add	r1, sp, #12
    3efe:	ab04      	add	r3, sp, #16
    3f00:	4618      	mov	r0, r3
    3f02:	f7fe fe53 	bl	2bac <Clock_Ip_TimeoutExpired>
    3f06:	4603      	mov	r3, r0
    3f08:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f0c:	9b05      	ldr	r3, [sp, #20]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d106      	bne.n	3f20 <Clock_Ip_CompleteSpll+0x60>
    3f12:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f16:	f083 0301 	eor.w	r3, r3, #1
    3f1a:	b2db      	uxtb	r3, r3
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d1e5      	bne.n	3eec <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f20:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f24:	f083 0301 	eor.w	r3, r3, #1
    3f28:	b2db      	uxtb	r3, r3
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d002      	beq.n	3f34 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f2e:	2302      	movs	r3, #2
    3f30:	9307      	str	r3, [sp, #28]
    3f32:	e006      	b.n	3f42 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f34:	9901      	ldr	r1, [sp, #4]
    3f36:	2001      	movs	r0, #1
    3f38:	f7fe fe0e 	bl	2b58 <Clock_Ip_ReportClockErrors>
    3f3c:	e001      	b.n	3f42 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f3e:	2300      	movs	r3, #0
    3f40:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3f42:	9b07      	ldr	r3, [sp, #28]
}
    3f44:	4618      	mov	r0, r3
    3f46:	b009      	add	sp, #36	; 0x24
    3f48:	f85d fb04 	ldr.w	pc, [sp], #4
    3f4c:	40064000 	.word	0x40064000

00003f50 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3f50:	b500      	push	{lr}
    3f52:	b083      	sub	sp, #12
    3f54:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3f56:	9801      	ldr	r0, [sp, #4]
    3f58:	f000 f886 	bl	4068 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f5c:	bf00      	nop
    3f5e:	b003      	add	sp, #12
    3f60:	f85d fb04 	ldr.w	pc, [sp], #4

00003f64 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3f64:	b500      	push	{lr}
    3f66:	b083      	sub	sp, #12
    3f68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f6a:	9b01      	ldr	r3, [sp, #4]
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d002      	beq.n	3f76 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3f70:	9801      	ldr	r0, [sp, #4]
    3f72:	f000 f891 	bl	4098 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f76:	bf00      	nop
    3f78:	b003      	add	sp, #12
    3f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00003f7e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3f7e:	b082      	sub	sp, #8
    3f80:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3f82:	4b19      	ldr	r3, [pc, #100]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f84:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f88:	4a17      	ldr	r2, [pc, #92]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3f8e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3f92:	4b15      	ldr	r3, [pc, #84]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f94:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f98:	4a13      	ldr	r2, [pc, #76]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3f9e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3fa2:	4b11      	ldr	r3, [pc, #68]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fa4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fa8:	4a0f      	ldr	r2, [pc, #60]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3faa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3fae:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3fb2:	4b0d      	ldr	r3, [pc, #52]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fb4:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fb8:	4a0b      	ldr	r2, [pc, #44]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fba:	f023 0301 	bic.w	r3, r3, #1
    3fbe:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3fc2:	4b09      	ldr	r3, [pc, #36]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fc4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3fc8:	4a07      	ldr	r2, [pc, #28]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3fce:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3fd2:	4b05      	ldr	r3, [pc, #20]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fd4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3fd8:	4a03      	ldr	r2, [pc, #12]	; (3fe8 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3fde:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3fe2:	bf00      	nop
    3fe4:	b002      	add	sp, #8
    3fe6:	4770      	bx	lr
    3fe8:	40064000 	.word	0x40064000

00003fec <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fec:	b082      	sub	sp, #8
    3fee:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3ff0:	9b01      	ldr	r3, [sp, #4]
    3ff2:	889b      	ldrh	r3, [r3, #4]
    3ff4:	2b01      	cmp	r3, #1
    3ff6:	d12f      	bne.n	4058 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3ff8:	4b1a      	ldr	r3, [pc, #104]	; (4064 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3ffa:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3ffe:	9b01      	ldr	r3, [sp, #4]
    4000:	7b5b      	ldrb	r3, [r3, #13]
    4002:	3b01      	subs	r3, #1
    4004:	021b      	lsls	r3, r3, #8
    4006:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	7d1b      	ldrb	r3, [r3, #20]
    400e:	3b10      	subs	r3, #16
    4010:	041b      	lsls	r3, r3, #16
    4012:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4016:	430b      	orrs	r3, r1
    4018:	4912      	ldr	r1, [pc, #72]	; (4064 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    401a:	4313      	orrs	r3, r2
    401c:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4020:	9b01      	ldr	r3, [sp, #4]
    4022:	7fdb      	ldrb	r3, [r3, #31]
    4024:	2b02      	cmp	r3, #2
    4026:	d011      	beq.n	404c <Clock_Ip_SetSpll_TrustedCall+0x60>
    4028:	2b02      	cmp	r3, #2
    402a:	dc17      	bgt.n	405c <Clock_Ip_SetSpll_TrustedCall+0x70>
    402c:	2b00      	cmp	r3, #0
    402e:	d002      	beq.n	4036 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4030:	2b01      	cmp	r3, #1
    4032:	d005      	beq.n	4040 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4034:	e012      	b.n	405c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4036:	4b0b      	ldr	r3, [pc, #44]	; (4064 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4038:	2200      	movs	r2, #0
    403a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    403e:	e00e      	b.n	405e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4040:	4b08      	ldr	r3, [pc, #32]	; (4064 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4046:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    404a:	e008      	b.n	405e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    404c:	4b05      	ldr	r3, [pc, #20]	; (4064 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    404e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4052:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4056:	e002      	b.n	405e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4058:	bf00      	nop
    405a:	e000      	b.n	405e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    405c:	bf00      	nop
}
    405e:	bf00      	nop
    4060:	b002      	add	sp, #8
    4062:	4770      	bx	lr
    4064:	40064000 	.word	0x40064000

00004068 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4068:	b082      	sub	sp, #8
    406a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    406c:	4b09      	ldr	r3, [pc, #36]	; (4094 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    406e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4072:	4a08      	ldr	r2, [pc, #32]	; (4094 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4074:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4078:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    407c:	4b05      	ldr	r3, [pc, #20]	; (4094 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    407e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4082:	4a04      	ldr	r2, [pc, #16]	; (4094 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4084:	f023 0301 	bic.w	r3, r3, #1
    4088:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    408c:	bf00      	nop
    408e:	b002      	add	sp, #8
    4090:	4770      	bx	lr
    4092:	bf00      	nop
    4094:	40064000 	.word	0x40064000

00004098 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4098:	b082      	sub	sp, #8
    409a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    409c:	9b01      	ldr	r3, [sp, #4]
    409e:	889b      	ldrh	r3, [r3, #4]
    40a0:	2b01      	cmp	r3, #1
    40a2:	d107      	bne.n	40b4 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    40a4:	4b05      	ldr	r3, [pc, #20]	; (40bc <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40a6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40aa:	4a04      	ldr	r2, [pc, #16]	; (40bc <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40ac:	f043 0301 	orr.w	r3, r3, #1
    40b0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    40b4:	bf00      	nop
    40b6:	b002      	add	sp, #8
    40b8:	4770      	bx	lr
    40ba:	bf00      	nop
    40bc:	40064000 	.word	0x40064000

000040c0 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    40c0:	b082      	sub	sp, #8
    40c2:	9001      	str	r0, [sp, #4]
    40c4:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    40c6:	bf00      	nop
    40c8:	b002      	add	sp, #8
    40ca:	4770      	bx	lr

000040cc <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    40cc:	b082      	sub	sp, #8
    40ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    40d0:	bf00      	nop
    40d2:	b002      	add	sp, #8
    40d4:	4770      	bx	lr

000040d6 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40d6:	b500      	push	{lr}
    40d8:	b083      	sub	sp, #12
    40da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40dc:	9b01      	ldr	r3, [sp, #4]
    40de:	2b00      	cmp	r3, #0
    40e0:	d002      	beq.n	40e8 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    40e2:	9801      	ldr	r0, [sp, #4]
    40e4:	f000 f8ee 	bl	42c4 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40e8:	bf00      	nop
    40ea:	b003      	add	sp, #12
    40ec:	f85d fb04 	ldr.w	pc, [sp], #4

000040f0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    40f0:	b500      	push	{lr}
    40f2:	b083      	sub	sp, #12
    40f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40f6:	9b01      	ldr	r3, [sp, #4]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d002      	beq.n	4102 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    40fc:	9801      	ldr	r0, [sp, #4]
    40fe:	f000 f8ff 	bl	4300 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4102:	bf00      	nop
    4104:	b003      	add	sp, #12
    4106:	f85d fb04 	ldr.w	pc, [sp], #4

0000410a <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    410a:	b500      	push	{lr}
    410c:	b083      	sub	sp, #12
    410e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4110:	9b01      	ldr	r3, [sp, #4]
    4112:	2b00      	cmp	r3, #0
    4114:	d002      	beq.n	411c <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4116:	9801      	ldr	r0, [sp, #4]
    4118:	f000 f912 	bl	4340 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    411c:	bf00      	nop
    411e:	b003      	add	sp, #12
    4120:	f85d fb04 	ldr.w	pc, [sp], #4

00004124 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4124:	b500      	push	{lr}
    4126:	b083      	sub	sp, #12
    4128:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    412a:	9b01      	ldr	r3, [sp, #4]
    412c:	2b00      	cmp	r3, #0
    412e:	d002      	beq.n	4136 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4130:	9801      	ldr	r0, [sp, #4]
    4132:	f000 f925 	bl	4380 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4136:	bf00      	nop
    4138:	b003      	add	sp, #12
    413a:	f85d fb04 	ldr.w	pc, [sp], #4

0000413e <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    413e:	b500      	push	{lr}
    4140:	b083      	sub	sp, #12
    4142:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4144:	9b01      	ldr	r3, [sp, #4]
    4146:	2b00      	cmp	r3, #0
    4148:	d002      	beq.n	4150 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    414a:	9801      	ldr	r0, [sp, #4]
    414c:	f000 f936 	bl	43bc <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4150:	bf00      	nop
    4152:	b003      	add	sp, #12
    4154:	f85d fb04 	ldr.w	pc, [sp], #4

00004158 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4158:	b500      	push	{lr}
    415a:	b083      	sub	sp, #12
    415c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    415e:	9b01      	ldr	r3, [sp, #4]
    4160:	2b00      	cmp	r3, #0
    4162:	d002      	beq.n	416a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4164:	9801      	ldr	r0, [sp, #4]
    4166:	f000 f949 	bl	43fc <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    416a:	bf00      	nop
    416c:	b003      	add	sp, #12
    416e:	f85d fb04 	ldr.w	pc, [sp], #4

00004172 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4172:	b500      	push	{lr}
    4174:	b083      	sub	sp, #12
    4176:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4178:	9b01      	ldr	r3, [sp, #4]
    417a:	2b00      	cmp	r3, #0
    417c:	d002      	beq.n	4184 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    417e:	9801      	ldr	r0, [sp, #4]
    4180:	f000 f958 	bl	4434 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4184:	bf00      	nop
    4186:	b003      	add	sp, #12
    4188:	f85d fb04 	ldr.w	pc, [sp], #4

0000418c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    418c:	b500      	push	{lr}
    418e:	b083      	sub	sp, #12
    4190:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4192:	9b01      	ldr	r3, [sp, #4]
    4194:	2b00      	cmp	r3, #0
    4196:	d002      	beq.n	419e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4198:	9801      	ldr	r0, [sp, #4]
    419a:	f000 f969 	bl	4470 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    419e:	bf00      	nop
    41a0:	b003      	add	sp, #12
    41a2:	f85d fb04 	ldr.w	pc, [sp], #4

000041a6 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41a6:	b500      	push	{lr}
    41a8:	b083      	sub	sp, #12
    41aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ac:	9b01      	ldr	r3, [sp, #4]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    41b2:	9801      	ldr	r0, [sp, #4]
    41b4:	f000 f978 	bl	44a8 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b8:	bf00      	nop
    41ba:	b003      	add	sp, #12
    41bc:	f85d fb04 	ldr.w	pc, [sp], #4

000041c0 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41c0:	b500      	push	{lr}
    41c2:	b083      	sub	sp, #12
    41c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41c6:	9b01      	ldr	r3, [sp, #4]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d002      	beq.n	41d2 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    41cc:	9801      	ldr	r0, [sp, #4]
    41ce:	f000 f989 	bl	44e4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41d2:	bf00      	nop
    41d4:	b003      	add	sp, #12
    41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000041da <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    41da:	b500      	push	{lr}
    41dc:	b083      	sub	sp, #12
    41de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41e0:	9b01      	ldr	r3, [sp, #4]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d002      	beq.n	41ec <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    41e6:	9801      	ldr	r0, [sp, #4]
    41e8:	f000 f998 	bl	451c <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ec:	bf00      	nop
    41ee:	b003      	add	sp, #12
    41f0:	f85d fb04 	ldr.w	pc, [sp], #4

000041f4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    41f4:	b500      	push	{lr}
    41f6:	b083      	sub	sp, #12
    41f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41fa:	9b01      	ldr	r3, [sp, #4]
    41fc:	2b00      	cmp	r3, #0
    41fe:	d002      	beq.n	4206 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4200:	9801      	ldr	r0, [sp, #4]
    4202:	f000 f9a9 	bl	4558 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4206:	bf00      	nop
    4208:	b003      	add	sp, #12
    420a:	f85d fb04 	ldr.w	pc, [sp], #4

0000420e <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    420e:	b500      	push	{lr}
    4210:	b083      	sub	sp, #12
    4212:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4214:	9b01      	ldr	r3, [sp, #4]
    4216:	2b00      	cmp	r3, #0
    4218:	d002      	beq.n	4220 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    421a:	9801      	ldr	r0, [sp, #4]
    421c:	f000 f9e6 	bl	45ec <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4220:	bf00      	nop
    4222:	b003      	add	sp, #12
    4224:	f85d fb04 	ldr.w	pc, [sp], #4

00004228 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4228:	b500      	push	{lr}
    422a:	b083      	sub	sp, #12
    422c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    422e:	9b01      	ldr	r3, [sp, #4]
    4230:	2b00      	cmp	r3, #0
    4232:	d002      	beq.n	423a <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4234:	9801      	ldr	r0, [sp, #4]
    4236:	f000 fa25 	bl	4684 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    423a:	bf00      	nop
    423c:	b003      	add	sp, #12
    423e:	f85d fb04 	ldr.w	pc, [sp], #4

00004242 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4242:	b500      	push	{lr}
    4244:	b083      	sub	sp, #12
    4246:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4248:	9b01      	ldr	r3, [sp, #4]
    424a:	2b00      	cmp	r3, #0
    424c:	d002      	beq.n	4254 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    424e:	9801      	ldr	r0, [sp, #4]
    4250:	f000 fa2a 	bl	46a8 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4254:	bf00      	nop
    4256:	b003      	add	sp, #12
    4258:	f85d fb04 	ldr.w	pc, [sp], #4

0000425c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    425c:	b500      	push	{lr}
    425e:	b083      	sub	sp, #12
    4260:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4262:	9b01      	ldr	r3, [sp, #4]
    4264:	2b00      	cmp	r3, #0
    4266:	d002      	beq.n	426e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4268:	9801      	ldr	r0, [sp, #4]
    426a:	f000 fa3b 	bl	46e4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    426e:	bf00      	nop
    4270:	b003      	add	sp, #12
    4272:	f85d fb04 	ldr.w	pc, [sp], #4

00004276 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4276:	b500      	push	{lr}
    4278:	b083      	sub	sp, #12
    427a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    427c:	9b01      	ldr	r3, [sp, #4]
    427e:	2b00      	cmp	r3, #0
    4280:	d002      	beq.n	4288 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4282:	9801      	ldr	r0, [sp, #4]
    4284:	f000 fa56 	bl	4734 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4288:	bf00      	nop
    428a:	b003      	add	sp, #12
    428c:	f85d fb04 	ldr.w	pc, [sp], #4

00004290 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4290:	b500      	push	{lr}
    4292:	b083      	sub	sp, #12
    4294:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4296:	9b01      	ldr	r3, [sp, #4]
    4298:	2b00      	cmp	r3, #0
    429a:	d002      	beq.n	42a2 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    429c:	9801      	ldr	r0, [sp, #4]
    429e:	f000 fa79 	bl	4794 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42a2:	bf00      	nop
    42a4:	b003      	add	sp, #12
    42a6:	f85d fb04 	ldr.w	pc, [sp], #4

000042aa <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42aa:	b500      	push	{lr}
    42ac:	b083      	sub	sp, #12
    42ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42b0:	9b01      	ldr	r3, [sp, #4]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d002      	beq.n	42bc <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    42b6:	9801      	ldr	r0, [sp, #4]
    42b8:	f000 fa8a 	bl	47d0 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42bc:	bf00      	nop
    42be:	b003      	add	sp, #12
    42c0:	f85d fb04 	ldr.w	pc, [sp], #4

000042c4 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42c4:	b084      	sub	sp, #16
    42c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42c8:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    42ca:	795b      	ldrb	r3, [r3, #5]
    42cc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    42ce:	4b0b      	ldr	r3, [pc, #44]	; (42fc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    42d0:	695b      	ldr	r3, [r3, #20]
    42d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    42d4:	9b02      	ldr	r3, [sp, #8]
    42d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42da:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    42dc:	9b03      	ldr	r3, [sp, #12]
    42de:	061b      	lsls	r3, r3, #24
    42e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    42e4:	9a02      	ldr	r2, [sp, #8]
    42e6:	4313      	orrs	r3, r2
    42e8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    42ea:	4a04      	ldr	r2, [pc, #16]	; (42fc <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    42ec:	9b02      	ldr	r3, [sp, #8]
    42ee:	6153      	str	r3, [r2, #20]
}
    42f0:	bf00      	nop
    42f2:	b004      	add	sp, #16
    42f4:	4770      	bx	lr
    42f6:	bf00      	nop
    42f8:	00008704 	.word	0x00008704
    42fc:	40064000 	.word	0x40064000

00004300 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4300:	b084      	sub	sp, #16
    4302:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4304:	9b01      	ldr	r3, [sp, #4]
    4306:	685b      	ldr	r3, [r3, #4]
    4308:	4a0b      	ldr	r2, [pc, #44]	; (4338 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    430a:	5cd3      	ldrb	r3, [r2, r3]
    430c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    430e:	4b0b      	ldr	r3, [pc, #44]	; (433c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4310:	695b      	ldr	r3, [r3, #20]
    4312:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4314:	9b02      	ldr	r3, [sp, #8]
    4316:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    431a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	061b      	lsls	r3, r3, #24
    4320:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4324:	9a02      	ldr	r2, [sp, #8]
    4326:	4313      	orrs	r3, r2
    4328:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    432a:	4a04      	ldr	r2, [pc, #16]	; (433c <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    432c:	9b02      	ldr	r3, [sp, #8]
    432e:	6153      	str	r3, [r2, #20]
}
    4330:	bf00      	nop
    4332:	b004      	add	sp, #16
    4334:	4770      	bx	lr
    4336:	bf00      	nop
    4338:	00008704 	.word	0x00008704
    433c:	40064000 	.word	0x40064000

00004340 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4340:	b084      	sub	sp, #16
    4342:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4344:	9b01      	ldr	r3, [sp, #4]
    4346:	685b      	ldr	r3, [r3, #4]
    4348:	4a0b      	ldr	r2, [pc, #44]	; (4378 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    434a:	5cd3      	ldrb	r3, [r2, r3]
    434c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    434e:	4b0b      	ldr	r3, [pc, #44]	; (437c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4350:	699b      	ldr	r3, [r3, #24]
    4352:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4354:	9b02      	ldr	r3, [sp, #8]
    4356:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    435a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    435c:	9b03      	ldr	r3, [sp, #12]
    435e:	061b      	lsls	r3, r3, #24
    4360:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4364:	9a02      	ldr	r2, [sp, #8]
    4366:	4313      	orrs	r3, r2
    4368:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    436a:	4a04      	ldr	r2, [pc, #16]	; (437c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    436c:	9b02      	ldr	r3, [sp, #8]
    436e:	6193      	str	r3, [r2, #24]
}
    4370:	bf00      	nop
    4372:	b004      	add	sp, #16
    4374:	4770      	bx	lr
    4376:	bf00      	nop
    4378:	00008704 	.word	0x00008704
    437c:	40064000 	.word	0x40064000

00004380 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4380:	b084      	sub	sp, #16
    4382:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4384:	4b0b      	ldr	r3, [pc, #44]	; (43b4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4386:	795b      	ldrb	r3, [r3, #5]
    4388:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    438a:	4b0b      	ldr	r3, [pc, #44]	; (43b8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    438c:	69db      	ldr	r3, [r3, #28]
    438e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4390:	9b02      	ldr	r3, [sp, #8]
    4392:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4396:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4398:	9b03      	ldr	r3, [sp, #12]
    439a:	061b      	lsls	r3, r3, #24
    439c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43a0:	9a02      	ldr	r2, [sp, #8]
    43a2:	4313      	orrs	r3, r2
    43a4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43a6:	4a04      	ldr	r2, [pc, #16]	; (43b8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43a8:	9b02      	ldr	r3, [sp, #8]
    43aa:	61d3      	str	r3, [r2, #28]
}
    43ac:	bf00      	nop
    43ae:	b004      	add	sp, #16
    43b0:	4770      	bx	lr
    43b2:	bf00      	nop
    43b4:	00008704 	.word	0x00008704
    43b8:	40064000 	.word	0x40064000

000043bc <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43bc:	b084      	sub	sp, #16
    43be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43c0:	9b01      	ldr	r3, [sp, #4]
    43c2:	685b      	ldr	r3, [r3, #4]
    43c4:	4a0b      	ldr	r2, [pc, #44]	; (43f4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    43c6:	5cd3      	ldrb	r3, [r2, r3]
    43c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    43ca:	4b0b      	ldr	r3, [pc, #44]	; (43f8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    43cc:	69db      	ldr	r3, [r3, #28]
    43ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43d0:	9b02      	ldr	r3, [sp, #8]
    43d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43d8:	9b03      	ldr	r3, [sp, #12]
    43da:	061b      	lsls	r3, r3, #24
    43dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43e0:	9a02      	ldr	r2, [sp, #8]
    43e2:	4313      	orrs	r3, r2
    43e4:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43e6:	4a04      	ldr	r2, [pc, #16]	; (43f8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    43e8:	9b02      	ldr	r3, [sp, #8]
    43ea:	61d3      	str	r3, [r2, #28]
}
    43ec:	bf00      	nop
    43ee:	b004      	add	sp, #16
    43f0:	4770      	bx	lr
    43f2:	bf00      	nop
    43f4:	00008704 	.word	0x00008704
    43f8:	40064000 	.word	0x40064000

000043fc <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43fc:	b084      	sub	sp, #16
    43fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4400:	4b0a      	ldr	r3, [pc, #40]	; (442c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4402:	7b9b      	ldrb	r3, [r3, #14]
    4404:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4406:	4b0a      	ldr	r3, [pc, #40]	; (4430 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4408:	691b      	ldr	r3, [r3, #16]
    440a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    440c:	9b02      	ldr	r3, [sp, #8]
    440e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4412:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4414:	9b03      	ldr	r3, [sp, #12]
    4416:	011b      	lsls	r3, r3, #4
    4418:	9a02      	ldr	r2, [sp, #8]
    441a:	4313      	orrs	r3, r2
    441c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    441e:	4a04      	ldr	r2, [pc, #16]	; (4430 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4420:	9b02      	ldr	r3, [sp, #8]
    4422:	6113      	str	r3, [r2, #16]
}
    4424:	bf00      	nop
    4426:	b004      	add	sp, #16
    4428:	4770      	bx	lr
    442a:	bf00      	nop
    442c:	000086ac 	.word	0x000086ac
    4430:	40048000 	.word	0x40048000

00004434 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4434:	b084      	sub	sp, #16
    4436:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4438:	9b01      	ldr	r3, [sp, #4]
    443a:	685b      	ldr	r3, [r3, #4]
    443c:	4a0a      	ldr	r2, [pc, #40]	; (4468 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    443e:	5cd3      	ldrb	r3, [r2, r3]
    4440:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4442:	4b0a      	ldr	r3, [pc, #40]	; (446c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4444:	691b      	ldr	r3, [r3, #16]
    4446:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4448:	9b02      	ldr	r3, [sp, #8]
    444a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    444e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4450:	9b03      	ldr	r3, [sp, #12]
    4452:	011b      	lsls	r3, r3, #4
    4454:	9a02      	ldr	r2, [sp, #8]
    4456:	4313      	orrs	r3, r2
    4458:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    445a:	4a04      	ldr	r2, [pc, #16]	; (446c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    445c:	9b02      	ldr	r3, [sp, #8]
    445e:	6113      	str	r3, [r2, #16]
}
    4460:	bf00      	nop
    4462:	b004      	add	sp, #16
    4464:	4770      	bx	lr
    4466:	bf00      	nop
    4468:	000086ac 	.word	0x000086ac
    446c:	40048000 	.word	0x40048000

00004470 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4470:	b084      	sub	sp, #16
    4472:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4474:	4b0a      	ldr	r3, [pc, #40]	; (44a0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4476:	785b      	ldrb	r3, [r3, #1]
    4478:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    447a:	4b0a      	ldr	r3, [pc, #40]	; (44a4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    447c:	691b      	ldr	r3, [r3, #16]
    447e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4480:	9b02      	ldr	r3, [sp, #8]
    4482:	f023 030c 	bic.w	r3, r3, #12
    4486:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4488:	9b03      	ldr	r3, [sp, #12]
    448a:	009b      	lsls	r3, r3, #2
    448c:	9a02      	ldr	r2, [sp, #8]
    448e:	4313      	orrs	r3, r2
    4490:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4492:	4a04      	ldr	r2, [pc, #16]	; (44a4 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4494:	9b02      	ldr	r3, [sp, #8]
    4496:	6113      	str	r3, [r2, #16]
}
    4498:	bf00      	nop
    449a:	b004      	add	sp, #16
    449c:	4770      	bx	lr
    449e:	bf00      	nop
    44a0:	00008764 	.word	0x00008764
    44a4:	40048000 	.word	0x40048000

000044a8 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44a8:	b084      	sub	sp, #16
    44aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44ac:	9b01      	ldr	r3, [sp, #4]
    44ae:	685b      	ldr	r3, [r3, #4]
    44b0:	4a0a      	ldr	r2, [pc, #40]	; (44dc <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    44b2:	5cd3      	ldrb	r3, [r2, r3]
    44b4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44b6:	4b0a      	ldr	r3, [pc, #40]	; (44e0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    44b8:	691b      	ldr	r3, [r3, #16]
    44ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44bc:	9b02      	ldr	r3, [sp, #8]
    44be:	f023 030c 	bic.w	r3, r3, #12
    44c2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44c4:	9b03      	ldr	r3, [sp, #12]
    44c6:	009b      	lsls	r3, r3, #2
    44c8:	9a02      	ldr	r2, [sp, #8]
    44ca:	4313      	orrs	r3, r2
    44cc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44ce:	4a04      	ldr	r2, [pc, #16]	; (44e0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    44d0:	9b02      	ldr	r3, [sp, #8]
    44d2:	6113      	str	r3, [r2, #16]
}
    44d4:	bf00      	nop
    44d6:	b004      	add	sp, #16
    44d8:	4770      	bx	lr
    44da:	bf00      	nop
    44dc:	00008764 	.word	0x00008764
    44e0:	40048000 	.word	0x40048000

000044e4 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44e4:	b084      	sub	sp, #16
    44e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44e8:	4b0a      	ldr	r3, [pc, #40]	; (4514 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    44ea:	795b      	ldrb	r3, [r3, #5]
    44ec:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    44ee:	4b0a      	ldr	r3, [pc, #40]	; (4518 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    44f0:	6a1b      	ldr	r3, [r3, #32]
    44f2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    44f4:	9b02      	ldr	r3, [sp, #8]
    44f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    44fa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    44fc:	9b03      	ldr	r3, [sp, #12]
    44fe:	061b      	lsls	r3, r3, #24
    4500:	9a02      	ldr	r2, [sp, #8]
    4502:	4313      	orrs	r3, r2
    4504:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4506:	4a04      	ldr	r2, [pc, #16]	; (4518 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4508:	9b02      	ldr	r3, [sp, #8]
    450a:	6213      	str	r3, [r2, #32]
}
    450c:	bf00      	nop
    450e:	b004      	add	sp, #16
    4510:	4770      	bx	lr
    4512:	bf00      	nop
    4514:	00008704 	.word	0x00008704
    4518:	40064000 	.word	0x40064000

0000451c <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    451c:	b084      	sub	sp, #16
    451e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4520:	9b01      	ldr	r3, [sp, #4]
    4522:	685b      	ldr	r3, [r3, #4]
    4524:	4a0a      	ldr	r2, [pc, #40]	; (4550 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4526:	5cd3      	ldrb	r3, [r2, r3]
    4528:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    452a:	4b0a      	ldr	r3, [pc, #40]	; (4554 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    452c:	6a1b      	ldr	r3, [r3, #32]
    452e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4530:	9b02      	ldr	r3, [sp, #8]
    4532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4536:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	061b      	lsls	r3, r3, #24
    453c:	9a02      	ldr	r2, [sp, #8]
    453e:	4313      	orrs	r3, r2
    4540:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4542:	4a04      	ldr	r2, [pc, #16]	; (4554 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4544:	9b02      	ldr	r3, [sp, #8]
    4546:	6213      	str	r3, [r2, #32]
}
    4548:	bf00      	nop
    454a:	b004      	add	sp, #16
    454c:	4770      	bx	lr
    454e:	bf00      	nop
    4550:	00008704 	.word	0x00008704
    4554:	40064000 	.word	0x40064000

00004558 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4558:	b086      	sub	sp, #24
    455a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    455c:	4b20      	ldr	r3, [pc, #128]	; (45e0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    455e:	795b      	ldrb	r3, [r3, #5]
    4560:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4562:	9b01      	ldr	r3, [sp, #4]
    4564:	681a      	ldr	r2, [r3, #0]
    4566:	491f      	ldr	r1, [pc, #124]	; (45e4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4568:	4613      	mov	r3, r2
    456a:	00db      	lsls	r3, r3, #3
    456c:	4413      	add	r3, r2
    456e:	440b      	add	r3, r1
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4574:	4b1c      	ldr	r3, [pc, #112]	; (45e8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4576:	68db      	ldr	r3, [r3, #12]
    4578:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    457a:	9b03      	ldr	r3, [sp, #12]
    457c:	2b03      	cmp	r3, #3
    457e:	d813      	bhi.n	45a8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4580:	9b03      	ldr	r3, [sp, #12]
    4582:	005b      	lsls	r3, r3, #1
    4584:	3318      	adds	r3, #24
    4586:	2203      	movs	r2, #3
    4588:	fa02 f303 	lsl.w	r3, r2, r3
    458c:	43db      	mvns	r3, r3
    458e:	9a05      	ldr	r2, [sp, #20]
    4590:	4013      	ands	r3, r2
    4592:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4594:	9b03      	ldr	r3, [sp, #12]
    4596:	005b      	lsls	r3, r3, #1
    4598:	3318      	adds	r3, #24
    459a:	9a04      	ldr	r2, [sp, #16]
    459c:	fa02 f303 	lsl.w	r3, r2, r3
    45a0:	9a05      	ldr	r2, [sp, #20]
    45a2:	4313      	orrs	r3, r2
    45a4:	9305      	str	r3, [sp, #20]
    45a6:	e014      	b.n	45d2 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    45a8:	9b03      	ldr	r3, [sp, #12]
    45aa:	3b04      	subs	r3, #4
    45ac:	005b      	lsls	r3, r3, #1
    45ae:	3310      	adds	r3, #16
    45b0:	2203      	movs	r2, #3
    45b2:	fa02 f303 	lsl.w	r3, r2, r3
    45b6:	43db      	mvns	r3, r3
    45b8:	9a05      	ldr	r2, [sp, #20]
    45ba:	4013      	ands	r3, r2
    45bc:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    45be:	9b03      	ldr	r3, [sp, #12]
    45c0:	3b04      	subs	r3, #4
    45c2:	005b      	lsls	r3, r3, #1
    45c4:	3310      	adds	r3, #16
    45c6:	9a04      	ldr	r2, [sp, #16]
    45c8:	fa02 f303 	lsl.w	r3, r2, r3
    45cc:	9a05      	ldr	r2, [sp, #20]
    45ce:	4313      	orrs	r3, r2
    45d0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    45d2:	4a05      	ldr	r2, [pc, #20]	; (45e8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45d4:	9b05      	ldr	r3, [sp, #20]
    45d6:	60d3      	str	r3, [r2, #12]
}
    45d8:	bf00      	nop
    45da:	b006      	add	sp, #24
    45dc:	4770      	bx	lr
    45de:	bf00      	nop
    45e0:	000086ac 	.word	0x000086ac
    45e4:	0000839c 	.word	0x0000839c
    45e8:	40048000 	.word	0x40048000

000045ec <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45ec:	b086      	sub	sp, #24
    45ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45f0:	9b01      	ldr	r3, [sp, #4]
    45f2:	685b      	ldr	r3, [r3, #4]
    45f4:	4a20      	ldr	r2, [pc, #128]	; (4678 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    45f6:	5cd3      	ldrb	r3, [r2, r3]
    45f8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45fa:	9b01      	ldr	r3, [sp, #4]
    45fc:	681a      	ldr	r2, [r3, #0]
    45fe:	491f      	ldr	r1, [pc, #124]	; (467c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4600:	4613      	mov	r3, r2
    4602:	00db      	lsls	r3, r3, #3
    4604:	4413      	add	r3, r2
    4606:	440b      	add	r3, r1
    4608:	781b      	ldrb	r3, [r3, #0]
    460a:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    460c:	4b1c      	ldr	r3, [pc, #112]	; (4680 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    460e:	68db      	ldr	r3, [r3, #12]
    4610:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4612:	9b03      	ldr	r3, [sp, #12]
    4614:	2b03      	cmp	r3, #3
    4616:	d813      	bhi.n	4640 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4618:	9b03      	ldr	r3, [sp, #12]
    461a:	005b      	lsls	r3, r3, #1
    461c:	3318      	adds	r3, #24
    461e:	2203      	movs	r2, #3
    4620:	fa02 f303 	lsl.w	r3, r2, r3
    4624:	43db      	mvns	r3, r3
    4626:	9a05      	ldr	r2, [sp, #20]
    4628:	4013      	ands	r3, r2
    462a:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    462c:	9b03      	ldr	r3, [sp, #12]
    462e:	005b      	lsls	r3, r3, #1
    4630:	3318      	adds	r3, #24
    4632:	9a04      	ldr	r2, [sp, #16]
    4634:	fa02 f303 	lsl.w	r3, r2, r3
    4638:	9a05      	ldr	r2, [sp, #20]
    463a:	4313      	orrs	r3, r2
    463c:	9305      	str	r3, [sp, #20]
    463e:	e014      	b.n	466a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4640:	9b03      	ldr	r3, [sp, #12]
    4642:	3b04      	subs	r3, #4
    4644:	005b      	lsls	r3, r3, #1
    4646:	3310      	adds	r3, #16
    4648:	2203      	movs	r2, #3
    464a:	fa02 f303 	lsl.w	r3, r2, r3
    464e:	43db      	mvns	r3, r3
    4650:	9a05      	ldr	r2, [sp, #20]
    4652:	4013      	ands	r3, r2
    4654:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4656:	9b03      	ldr	r3, [sp, #12]
    4658:	3b04      	subs	r3, #4
    465a:	005b      	lsls	r3, r3, #1
    465c:	3310      	adds	r3, #16
    465e:	9a04      	ldr	r2, [sp, #16]
    4660:	fa02 f303 	lsl.w	r3, r2, r3
    4664:	9a05      	ldr	r2, [sp, #20]
    4666:	4313      	orrs	r3, r2
    4668:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    466a:	4a05      	ldr	r2, [pc, #20]	; (4680 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    466c:	9b05      	ldr	r3, [sp, #20]
    466e:	60d3      	str	r3, [r2, #12]
}
    4670:	bf00      	nop
    4672:	b006      	add	sp, #24
    4674:	4770      	bx	lr
    4676:	bf00      	nop
    4678:	000086ac 	.word	0x000086ac
    467c:	0000839c 	.word	0x0000839c
    4680:	40048000 	.word	0x40048000

00004684 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4684:	b084      	sub	sp, #16
    4686:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4688:	4b06      	ldr	r3, [pc, #24]	; (46a4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    468a:	685b      	ldr	r3, [r3, #4]
    468c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    468e:	9b03      	ldr	r3, [sp, #12]
    4690:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4694:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4696:	4a03      	ldr	r2, [pc, #12]	; (46a4 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	6053      	str	r3, [r2, #4]
}
    469c:	bf00      	nop
    469e:	b004      	add	sp, #16
    46a0:	4770      	bx	lr
    46a2:	bf00      	nop
    46a4:	40048000 	.word	0x40048000

000046a8 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46a8:	b084      	sub	sp, #16
    46aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46ac:	9b01      	ldr	r3, [sp, #4]
    46ae:	685b      	ldr	r3, [r3, #4]
    46b0:	4a0a      	ldr	r2, [pc, #40]	; (46dc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    46b2:	5cd3      	ldrb	r3, [r2, r3]
    46b4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    46b6:	4b0a      	ldr	r3, [pc, #40]	; (46e0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    46b8:	685b      	ldr	r3, [r3, #4]
    46ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    46bc:	9b02      	ldr	r3, [sp, #8]
    46be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    46c2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    46c4:	9b03      	ldr	r3, [sp, #12]
    46c6:	011b      	lsls	r3, r3, #4
    46c8:	9a02      	ldr	r2, [sp, #8]
    46ca:	4313      	orrs	r3, r2
    46cc:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    46ce:	4a04      	ldr	r2, [pc, #16]	; (46e0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    46d0:	9b02      	ldr	r3, [sp, #8]
    46d2:	6053      	str	r3, [r2, #4]
}
    46d4:	bf00      	nop
    46d6:	b004      	add	sp, #16
    46d8:	4770      	bx	lr
    46da:	bf00      	nop
    46dc:	000086ac 	.word	0x000086ac
    46e0:	40048000 	.word	0x40048000

000046e4 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46e4:	b084      	sub	sp, #16
    46e6:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    46e8:	9b01      	ldr	r3, [sp, #4]
    46ea:	681a      	ldr	r2, [r3, #0]
    46ec:	490f      	ldr	r1, [pc, #60]	; (472c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    46ee:	4613      	mov	r3, r2
    46f0:	00db      	lsls	r3, r3, #3
    46f2:	4413      	add	r3, r2
    46f4:	440b      	add	r3, r1
    46f6:	3304      	adds	r3, #4
    46f8:	781b      	ldrb	r3, [r3, #0]
    46fa:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    46fc:	4a0c      	ldr	r2, [pc, #48]	; (4730 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    46fe:	9b03      	ldr	r3, [sp, #12]
    4700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4704:	490a      	ldr	r1, [pc, #40]	; (4730 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4706:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    470a:	9b03      	ldr	r3, [sp, #12]
    470c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4710:	4a07      	ldr	r2, [pc, #28]	; (4730 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4712:	9b03      	ldr	r3, [sp, #12]
    4714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4718:	4905      	ldr	r1, [pc, #20]	; (4730 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    471a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    471e:	9b03      	ldr	r3, [sp, #12]
    4720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4724:	bf00      	nop
    4726:	b004      	add	sp, #16
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	0000839c 	.word	0x0000839c
    4730:	40065000 	.word	0x40065000

00004734 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4734:	b086      	sub	sp, #24
    4736:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4738:	9b01      	ldr	r3, [sp, #4]
    473a:	681a      	ldr	r2, [r3, #0]
    473c:	4912      	ldr	r1, [pc, #72]	; (4788 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    473e:	4613      	mov	r3, r2
    4740:	00db      	lsls	r3, r3, #3
    4742:	4413      	add	r3, r2
    4744:	440b      	add	r3, r1
    4746:	3304      	adds	r3, #4
    4748:	781b      	ldrb	r3, [r3, #0]
    474a:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    474c:	9b01      	ldr	r3, [sp, #4]
    474e:	685b      	ldr	r3, [r3, #4]
    4750:	4a0e      	ldr	r2, [pc, #56]	; (478c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4752:	5cd3      	ldrb	r3, [r2, r3]
    4754:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4756:	4a0e      	ldr	r2, [pc, #56]	; (4790 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4758:	9b05      	ldr	r3, [sp, #20]
    475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    475e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4760:	9b03      	ldr	r3, [sp, #12]
    4762:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4766:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4768:	9b04      	ldr	r3, [sp, #16]
    476a:	061b      	lsls	r3, r3, #24
    476c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4770:	9a03      	ldr	r2, [sp, #12]
    4772:	4313      	orrs	r3, r2
    4774:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4776:	4906      	ldr	r1, [pc, #24]	; (4790 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4778:	9b05      	ldr	r3, [sp, #20]
    477a:	9a03      	ldr	r2, [sp, #12]
    477c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4780:	bf00      	nop
    4782:	b006      	add	sp, #24
    4784:	4770      	bx	lr
    4786:	bf00      	nop
    4788:	0000839c 	.word	0x0000839c
    478c:	00008734 	.word	0x00008734
    4790:	40065000 	.word	0x40065000

00004794 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4794:	b084      	sub	sp, #16
    4796:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4798:	4b0b      	ldr	r3, [pc, #44]	; (47c8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    479a:	7f1b      	ldrb	r3, [r3, #28]
    479c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    479e:	4b0b      	ldr	r3, [pc, #44]	; (47cc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    47a0:	685b      	ldr	r3, [r3, #4]
    47a2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47a4:	9b02      	ldr	r3, [sp, #8]
    47a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47aa:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47ac:	9b03      	ldr	r3, [sp, #12]
    47ae:	031b      	lsls	r3, r3, #12
    47b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47b4:	9a02      	ldr	r2, [sp, #8]
    47b6:	4313      	orrs	r3, r2
    47b8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47ba:	4a04      	ldr	r2, [pc, #16]	; (47cc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    47bc:	9b02      	ldr	r3, [sp, #8]
    47be:	6053      	str	r3, [r2, #4]
}
    47c0:	bf00      	nop
    47c2:	b004      	add	sp, #16
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop
    47c8:	000086ac 	.word	0x000086ac
    47cc:	40048000 	.word	0x40048000

000047d0 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47d0:	b084      	sub	sp, #16
    47d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47d4:	9b01      	ldr	r3, [sp, #4]
    47d6:	685b      	ldr	r3, [r3, #4]
    47d8:	4a0b      	ldr	r2, [pc, #44]	; (4808 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    47da:	5cd3      	ldrb	r3, [r2, r3]
    47dc:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    47de:	4b0b      	ldr	r3, [pc, #44]	; (480c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47e0:	685b      	ldr	r3, [r3, #4]
    47e2:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47e4:	9b02      	ldr	r3, [sp, #8]
    47e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    47ea:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    47ec:	9b03      	ldr	r3, [sp, #12]
    47ee:	031b      	lsls	r3, r3, #12
    47f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    47f4:	9a02      	ldr	r2, [sp, #8]
    47f6:	4313      	orrs	r3, r2
    47f8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    47fa:	4a04      	ldr	r2, [pc, #16]	; (480c <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    47fc:	9b02      	ldr	r3, [sp, #8]
    47fe:	6053      	str	r3, [r2, #4]
}
    4800:	bf00      	nop
    4802:	b004      	add	sp, #16
    4804:	4770      	bx	lr
    4806:	bf00      	nop
    4808:	000086ac 	.word	0x000086ac
    480c:	40048000 	.word	0x40048000

00004810 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4810:	b500      	push	{lr}
    4812:	b085      	sub	sp, #20
    4814:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4816:	2300      	movs	r3, #0
    4818:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    481c:	9b01      	ldr	r3, [sp, #4]
    481e:	2b00      	cmp	r3, #0
    4820:	d037      	beq.n	4892 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4822:	2300      	movs	r3, #0
    4824:	9303      	str	r3, [sp, #12]
    4826:	e02b      	b.n	4880 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4828:	4b29      	ldr	r3, [pc, #164]	; (48d0 <DisableSafeClock+0xc0>)
    482a:	6819      	ldr	r1, [r3, #0]
    482c:	9a03      	ldr	r2, [sp, #12]
    482e:	4613      	mov	r3, r2
    4830:	005b      	lsls	r3, r3, #1
    4832:	4413      	add	r3, r2
    4834:	009b      	lsls	r3, r3, #2
    4836:	440b      	add	r3, r1
    4838:	3314      	adds	r3, #20
    483a:	681b      	ldr	r3, [r3, #0]
    483c:	2b05      	cmp	r3, #5
    483e:	d11c      	bne.n	487a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4840:	2301      	movs	r3, #1
    4842:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4846:	4b22      	ldr	r3, [pc, #136]	; (48d0 <DisableSafeClock+0xc0>)
    4848:	6819      	ldr	r1, [r3, #0]
    484a:	9a03      	ldr	r2, [sp, #12]
    484c:	4613      	mov	r3, r2
    484e:	005b      	lsls	r3, r3, #1
    4850:	4413      	add	r3, r2
    4852:	009b      	lsls	r3, r3, #2
    4854:	440b      	add	r3, r1
    4856:	3318      	adds	r3, #24
    4858:	881b      	ldrh	r3, [r3, #0]
    485a:	2b00      	cmp	r3, #0
    485c:	d118      	bne.n	4890 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    485e:	4b1d      	ldr	r3, [pc, #116]	; (48d4 <DisableSafeClock+0xc4>)
    4860:	791b      	ldrb	r3, [r3, #4]
    4862:	4619      	mov	r1, r3
    4864:	4a1c      	ldr	r2, [pc, #112]	; (48d8 <DisableSafeClock+0xc8>)
    4866:	460b      	mov	r3, r1
    4868:	005b      	lsls	r3, r3, #1
    486a:	440b      	add	r3, r1
    486c:	009b      	lsls	r3, r3, #2
    486e:	4413      	add	r3, r2
    4870:	3308      	adds	r3, #8
    4872:	681b      	ldr	r3, [r3, #0]
    4874:	2005      	movs	r0, #5
    4876:	4798      	blx	r3
                }
                break;
    4878:	e00a      	b.n	4890 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    487a:	9b03      	ldr	r3, [sp, #12]
    487c:	3301      	adds	r3, #1
    487e:	9303      	str	r3, [sp, #12]
    4880:	4b13      	ldr	r3, [pc, #76]	; (48d0 <DisableSafeClock+0xc0>)
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	7a1b      	ldrb	r3, [r3, #8]
    4886:	461a      	mov	r2, r3
    4888:	9b03      	ldr	r3, [sp, #12]
    488a:	4293      	cmp	r3, r2
    488c:	d3cc      	bcc.n	4828 <DisableSafeClock+0x18>
    488e:	e000      	b.n	4892 <DisableSafeClock+0x82>
                break;
    4890:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4892:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4896:	f083 0301 	eor.w	r3, r3, #1
    489a:	b2db      	uxtb	r3, r3
    489c:	2b00      	cmp	r3, #0
    489e:	d013      	beq.n	48c8 <DisableSafeClock+0xb8>
    48a0:	4b0e      	ldr	r3, [pc, #56]	; (48dc <DisableSafeClock+0xcc>)
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	f083 0301 	eor.w	r3, r3, #1
    48a8:	b2db      	uxtb	r3, r3
    48aa:	2b00      	cmp	r3, #0
    48ac:	d00c      	beq.n	48c8 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48ae:	4b09      	ldr	r3, [pc, #36]	; (48d4 <DisableSafeClock+0xc4>)
    48b0:	791b      	ldrb	r3, [r3, #4]
    48b2:	4619      	mov	r1, r3
    48b4:	4a08      	ldr	r2, [pc, #32]	; (48d8 <DisableSafeClock+0xc8>)
    48b6:	460b      	mov	r3, r1
    48b8:	005b      	lsls	r3, r3, #1
    48ba:	440b      	add	r3, r1
    48bc:	009b      	lsls	r3, r3, #2
    48be:	4413      	add	r3, r2
    48c0:	3308      	adds	r3, #8
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	2005      	movs	r0, #5
    48c6:	4798      	blx	r3
    }
}
    48c8:	bf00      	nop
    48ca:	b005      	add	sp, #20
    48cc:	f85d fb04 	ldr.w	pc, [sp], #4
    48d0:	1fff8ba8 	.word	0x1fff8ba8
    48d4:	0000832c 	.word	0x0000832c
    48d8:	0000895c 	.word	0x0000895c
    48dc:	1fff8b18 	.word	0x1fff8b18

000048e0 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    48e0:	4b06      	ldr	r3, [pc, #24]	; (48fc <SetFircToResetValue_TrustedCall+0x1c>)
    48e2:	2200      	movs	r2, #0
    48e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    48e8:	4b04      	ldr	r3, [pc, #16]	; (48fc <SetFircToResetValue_TrustedCall+0x1c>)
    48ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48ee:	4a03      	ldr	r2, [pc, #12]	; (48fc <SetFircToResetValue_TrustedCall+0x1c>)
    48f0:	f043 0301 	orr.w	r3, r3, #1
    48f4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    48f8:	bf00      	nop
    48fa:	4770      	bx	lr
    48fc:	40064000 	.word	0x40064000

00004900 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4900:	b084      	sub	sp, #16
    4902:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4904:	2303      	movs	r3, #3
    4906:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4908:	2300      	movs	r3, #0
    490a:	9302      	str	r3, [sp, #8]
    490c:	e028      	b.n	4960 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    490e:	9b01      	ldr	r3, [sp, #4]
    4910:	9a02      	ldr	r2, [sp, #8]
    4912:	320d      	adds	r2, #13
    4914:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4918:	2b28      	cmp	r3, #40	; 0x28
    491a:	d10b      	bne.n	4934 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    491c:	9a01      	ldr	r2, [sp, #4]
    491e:	9b02      	ldr	r3, [sp, #8]
    4920:	330d      	adds	r3, #13
    4922:	00db      	lsls	r3, r3, #3
    4924:	4413      	add	r3, r2
    4926:	685b      	ldr	r3, [r3, #4]
    4928:	4a2b      	ldr	r2, [pc, #172]	; (49d8 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    492a:	5cd3      	ldrb	r3, [r2, r3]
    492c:	011b      	lsls	r3, r3, #4
    492e:	9a03      	ldr	r2, [sp, #12]
    4930:	4313      	orrs	r3, r2
    4932:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4934:	9b01      	ldr	r3, [sp, #4]
    4936:	9a02      	ldr	r2, [sp, #8]
    4938:	320d      	adds	r2, #13
    493a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    493e:	2b29      	cmp	r3, #41	; 0x29
    4940:	d10b      	bne.n	495a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4942:	9a01      	ldr	r2, [sp, #4]
    4944:	9b02      	ldr	r3, [sp, #8]
    4946:	330d      	adds	r3, #13
    4948:	00db      	lsls	r3, r3, #3
    494a:	4413      	add	r3, r2
    494c:	685b      	ldr	r3, [r3, #4]
    494e:	4a23      	ldr	r2, [pc, #140]	; (49dc <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4950:	5cd3      	ldrb	r3, [r2, r3]
    4952:	009b      	lsls	r3, r3, #2
    4954:	9a03      	ldr	r2, [sp, #12]
    4956:	4313      	orrs	r3, r2
    4958:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    495a:	9b02      	ldr	r3, [sp, #8]
    495c:	3301      	adds	r3, #1
    495e:	9302      	str	r3, [sp, #8]
    4960:	9b01      	ldr	r3, [sp, #4]
    4962:	7adb      	ldrb	r3, [r3, #11]
    4964:	461a      	mov	r2, r3
    4966:	9b02      	ldr	r3, [sp, #8]
    4968:	4293      	cmp	r3, r2
    496a:	d3d0      	bcc.n	490e <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    496c:	2300      	movs	r3, #0
    496e:	9302      	str	r3, [sp, #8]
    4970:	e026      	b.n	49c0 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4972:	9a01      	ldr	r2, [sp, #4]
    4974:	9b02      	ldr	r3, [sp, #8]
    4976:	334e      	adds	r3, #78	; 0x4e
    4978:	00db      	lsls	r3, r3, #3
    497a:	4413      	add	r3, r2
    497c:	685b      	ldr	r3, [r3, #4]
    497e:	2b12      	cmp	r3, #18
    4980:	d109      	bne.n	4996 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4982:	9a01      	ldr	r2, [sp, #4]
    4984:	9b02      	ldr	r3, [sp, #8]
    4986:	334e      	adds	r3, #78	; 0x4e
    4988:	00db      	lsls	r3, r3, #3
    498a:	4413      	add	r3, r2
    498c:	891b      	ldrh	r3, [r3, #8]
    498e:	005b      	lsls	r3, r3, #1
    4990:	9a03      	ldr	r2, [sp, #12]
    4992:	4313      	orrs	r3, r2
    4994:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4996:	9a01      	ldr	r2, [sp, #4]
    4998:	9b02      	ldr	r3, [sp, #8]
    499a:	334e      	adds	r3, #78	; 0x4e
    499c:	00db      	lsls	r3, r3, #3
    499e:	4413      	add	r3, r2
    49a0:	685b      	ldr	r3, [r3, #4]
    49a2:	2b13      	cmp	r3, #19
    49a4:	d109      	bne.n	49ba <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    49a6:	9a01      	ldr	r2, [sp, #4]
    49a8:	9b02      	ldr	r3, [sp, #8]
    49aa:	334e      	adds	r3, #78	; 0x4e
    49ac:	00db      	lsls	r3, r3, #3
    49ae:	4413      	add	r3, r2
    49b0:	891b      	ldrh	r3, [r3, #8]
    49b2:	461a      	mov	r2, r3
    49b4:	9b03      	ldr	r3, [sp, #12]
    49b6:	4313      	orrs	r3, r2
    49b8:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49ba:	9b02      	ldr	r3, [sp, #8]
    49bc:	3301      	adds	r3, #1
    49be:	9302      	str	r3, [sp, #8]
    49c0:	9b01      	ldr	r3, [sp, #4]
    49c2:	7c1b      	ldrb	r3, [r3, #16]
    49c4:	461a      	mov	r2, r3
    49c6:	9b02      	ldr	r3, [sp, #8]
    49c8:	4293      	cmp	r3, r2
    49ca:	d3d2      	bcc.n	4972 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    49cc:	4a04      	ldr	r2, [pc, #16]	; (49e0 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    49ce:	9b03      	ldr	r3, [sp, #12]
    49d0:	6113      	str	r3, [r2, #16]
}
    49d2:	bf00      	nop
    49d4:	b004      	add	sp, #16
    49d6:	4770      	bx	lr
    49d8:	000086ac 	.word	0x000086ac
    49dc:	00008764 	.word	0x00008764
    49e0:	40048000 	.word	0x40048000

000049e4 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    49e4:	b500      	push	{lr}
    49e6:	b089      	sub	sp, #36	; 0x24
    49e8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    49ea:	2300      	movs	r3, #0
    49ec:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    49f0:	4a21      	ldr	r2, [pc, #132]	; (4a78 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    49f2:	9b01      	ldr	r3, [sp, #4]
    49f4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    49f6:	4b21      	ldr	r3, [pc, #132]	; (4a7c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    49f8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49fc:	f003 0301 	and.w	r3, r3, #1
    4a00:	2b00      	cmp	r3, #0
    4a02:	d12e      	bne.n	4a62 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a04:	4b1e      	ldr	r3, [pc, #120]	; (4a80 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a06:	2200      	movs	r2, #0
    4a08:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a0a:	f7ff ff69 	bl	48e0 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a0e:	aa03      	add	r2, sp, #12
    4a10:	a904      	add	r1, sp, #16
    4a12:	a805      	add	r0, sp, #20
    4a14:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a18:	f7fe f8ae 	bl	2b78 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a1c:	4b17      	ldr	r3, [pc, #92]	; (4a7c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a22:	0e1b      	lsrs	r3, r3, #24
    4a24:	f003 0301 	and.w	r3, r3, #1
    4a28:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a2a:	9a03      	ldr	r2, [sp, #12]
    4a2c:	a904      	add	r1, sp, #16
    4a2e:	ab05      	add	r3, sp, #20
    4a30:	4618      	mov	r0, r3
    4a32:	f7fe f8bb 	bl	2bac <Clock_Ip_TimeoutExpired>
    4a36:	4603      	mov	r3, r0
    4a38:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a3c:	9b06      	ldr	r3, [sp, #24]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d106      	bne.n	4a50 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4a42:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a46:	f083 0301 	eor.w	r3, r3, #1
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d1e5      	bne.n	4a1c <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4a50:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a54:	2b00      	cmp	r3, #0
    4a56:	d007      	beq.n	4a68 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4a58:	2105      	movs	r1, #5
    4a5a:	2001      	movs	r0, #1
    4a5c:	f7fe f87c 	bl	2b58 <Clock_Ip_ReportClockErrors>
    4a60:	e002      	b.n	4a68 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4a62:	4b07      	ldr	r3, [pc, #28]	; (4a80 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a64:	2201      	movs	r2, #1
    4a66:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4a68:	9801      	ldr	r0, [sp, #4]
    4a6a:	f7ff ff49 	bl	4900 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4a6e:	bf00      	nop
    4a70:	b009      	add	sp, #36	; 0x24
    4a72:	f85d fb04 	ldr.w	pc, [sp], #4
    4a76:	bf00      	nop
    4a78:	1fff8ba8 	.word	0x1fff8ba8
    4a7c:	40064000 	.word	0x40064000
    4a80:	1fff8b18 	.word	0x1fff8b18

00004a84 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4a84:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4a86:	2300      	movs	r3, #0
    4a88:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4a8a:	4b29      	ldr	r3, [pc, #164]	; (4b30 <getFircConfig+0xac>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	2b00      	cmp	r3, #0
    4a90:	d024      	beq.n	4adc <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4a92:	2300      	movs	r3, #0
    4a94:	9301      	str	r3, [sp, #4]
    4a96:	e01a      	b.n	4ace <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4a98:	4b25      	ldr	r3, [pc, #148]	; (4b30 <getFircConfig+0xac>)
    4a9a:	6819      	ldr	r1, [r3, #0]
    4a9c:	9a01      	ldr	r2, [sp, #4]
    4a9e:	4613      	mov	r3, r2
    4aa0:	005b      	lsls	r3, r3, #1
    4aa2:	4413      	add	r3, r2
    4aa4:	009b      	lsls	r3, r3, #2
    4aa6:	440b      	add	r3, r1
    4aa8:	3314      	adds	r3, #20
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	2b05      	cmp	r3, #5
    4aae:	d10b      	bne.n	4ac8 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4ab0:	4b1f      	ldr	r3, [pc, #124]	; (4b30 <getFircConfig+0xac>)
    4ab2:	6819      	ldr	r1, [r3, #0]
    4ab4:	9a01      	ldr	r2, [sp, #4]
    4ab6:	4613      	mov	r3, r2
    4ab8:	005b      	lsls	r3, r3, #1
    4aba:	4413      	add	r3, r2
    4abc:	009b      	lsls	r3, r3, #2
    4abe:	3310      	adds	r3, #16
    4ac0:	440b      	add	r3, r1
    4ac2:	3304      	adds	r3, #4
    4ac4:	9300      	str	r3, [sp, #0]
                break;
    4ac6:	e009      	b.n	4adc <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4ac8:	9b01      	ldr	r3, [sp, #4]
    4aca:	3301      	adds	r3, #1
    4acc:	9301      	str	r3, [sp, #4]
    4ace:	4b18      	ldr	r3, [pc, #96]	; (4b30 <getFircConfig+0xac>)
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	7a1b      	ldrb	r3, [r3, #8]
    4ad4:	461a      	mov	r2, r3
    4ad6:	9b01      	ldr	r3, [sp, #4]
    4ad8:	4293      	cmp	r3, r2
    4ada:	d3dd      	bcc.n	4a98 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4adc:	9b00      	ldr	r3, [sp, #0]
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d121      	bne.n	4b26 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4ae2:	4b14      	ldr	r3, [pc, #80]	; (4b34 <getFircConfig+0xb0>)
    4ae4:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4ae6:	4b13      	ldr	r3, [pc, #76]	; (4b34 <getFircConfig+0xb0>)
    4ae8:	2205      	movs	r2, #5
    4aea:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4aec:	4b12      	ldr	r3, [pc, #72]	; (4b38 <getFircConfig+0xb4>)
    4aee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4af2:	b29b      	uxth	r3, r3
    4af4:	f003 0301 	and.w	r3, r3, #1
    4af8:	b29a      	uxth	r2, r3
    4afa:	4b0e      	ldr	r3, [pc, #56]	; (4b34 <getFircConfig+0xb0>)
    4afc:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4afe:	4b0e      	ldr	r3, [pc, #56]	; (4b38 <getFircConfig+0xb4>)
    4b00:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b04:	b2db      	uxtb	r3, r3
    4b06:	f003 0303 	and.w	r3, r3, #3
    4b0a:	b2da      	uxtb	r2, r3
    4b0c:	4b09      	ldr	r3, [pc, #36]	; (4b34 <getFircConfig+0xb0>)
    4b0e:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b10:	4b09      	ldr	r3, [pc, #36]	; (4b38 <getFircConfig+0xb4>)
    4b12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b16:	b2db      	uxtb	r3, r3
    4b18:	10db      	asrs	r3, r3, #3
    4b1a:	b2db      	uxtb	r3, r3
    4b1c:	f003 0301 	and.w	r3, r3, #1
    4b20:	b2da      	uxtb	r2, r3
    4b22:	4b04      	ldr	r3, [pc, #16]	; (4b34 <getFircConfig+0xb0>)
    4b24:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b26:	9b00      	ldr	r3, [sp, #0]
}
    4b28:	4618      	mov	r0, r3
    4b2a:	b002      	add	sp, #8
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop
    4b30:	1fff8ba8 	.word	0x1fff8ba8
    4b34:	1fff8c14 	.word	0x1fff8c14
    4b38:	40064000 	.word	0x40064000

00004b3c <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b3c:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b3e:	2300      	movs	r3, #0
    4b40:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b42:	4b20      	ldr	r3, [pc, #128]	; (4bc4 <getSoscConfig+0x88>)
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d024      	beq.n	4b94 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b4a:	2300      	movs	r3, #0
    4b4c:	9301      	str	r3, [sp, #4]
    4b4e:	e01a      	b.n	4b86 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4b50:	4b1c      	ldr	r3, [pc, #112]	; (4bc4 <getSoscConfig+0x88>)
    4b52:	6819      	ldr	r1, [r3, #0]
    4b54:	9a01      	ldr	r2, [sp, #4]
    4b56:	4613      	mov	r3, r2
    4b58:	009b      	lsls	r3, r3, #2
    4b5a:	4413      	add	r3, r2
    4b5c:	009b      	lsls	r3, r3, #2
    4b5e:	440b      	add	r3, r1
    4b60:	332c      	adds	r3, #44	; 0x2c
    4b62:	681b      	ldr	r3, [r3, #0]
    4b64:	2b08      	cmp	r3, #8
    4b66:	d10b      	bne.n	4b80 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4b68:	4b16      	ldr	r3, [pc, #88]	; (4bc4 <getSoscConfig+0x88>)
    4b6a:	6819      	ldr	r1, [r3, #0]
    4b6c:	9a01      	ldr	r2, [sp, #4]
    4b6e:	4613      	mov	r3, r2
    4b70:	009b      	lsls	r3, r3, #2
    4b72:	4413      	add	r3, r2
    4b74:	009b      	lsls	r3, r3, #2
    4b76:	3328      	adds	r3, #40	; 0x28
    4b78:	440b      	add	r3, r1
    4b7a:	3304      	adds	r3, #4
    4b7c:	9300      	str	r3, [sp, #0]
                break;
    4b7e:	e009      	b.n	4b94 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4b80:	9b01      	ldr	r3, [sp, #4]
    4b82:	3301      	adds	r3, #1
    4b84:	9301      	str	r3, [sp, #4]
    4b86:	4b0f      	ldr	r3, [pc, #60]	; (4bc4 <getSoscConfig+0x88>)
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	7a5b      	ldrb	r3, [r3, #9]
    4b8c:	461a      	mov	r2, r3
    4b8e:	9b01      	ldr	r3, [sp, #4]
    4b90:	4293      	cmp	r3, r2
    4b92:	d3dd      	bcc.n	4b50 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b94:	9b00      	ldr	r3, [sp, #0]
    4b96:	2b00      	cmp	r3, #0
    4b98:	d110      	bne.n	4bbc <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4b9a:	4b0b      	ldr	r3, [pc, #44]	; (4bc8 <getSoscConfig+0x8c>)
    4b9c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4b9e:	4b0a      	ldr	r3, [pc, #40]	; (4bc8 <getSoscConfig+0x8c>)
    4ba0:	2208      	movs	r2, #8
    4ba2:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4ba4:	4b09      	ldr	r3, [pc, #36]	; (4bcc <getSoscConfig+0x90>)
    4ba6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4baa:	b29b      	uxth	r3, r3
    4bac:	f003 0301 	and.w	r3, r3, #1
    4bb0:	b29a      	uxth	r2, r3
    4bb2:	4b05      	ldr	r3, [pc, #20]	; (4bc8 <getSoscConfig+0x8c>)
    4bb4:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4bb6:	4b04      	ldr	r3, [pc, #16]	; (4bc8 <getSoscConfig+0x8c>)
    4bb8:	4a05      	ldr	r2, [pc, #20]	; (4bd0 <getSoscConfig+0x94>)
    4bba:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4bbc:	9b00      	ldr	r3, [sp, #0]
}
    4bbe:	4618      	mov	r0, r3
    4bc0:	b002      	add	sp, #8
    4bc2:	4770      	bx	lr
    4bc4:	1fff8ba8 	.word	0x1fff8ba8
    4bc8:	1fff8c20 	.word	0x1fff8c20
    4bcc:	40064000 	.word	0x40064000
    4bd0:	02625a00 	.word	0x02625a00

00004bd4 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4bd4:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4bd6:	2300      	movs	r3, #0
    4bd8:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4bda:	4b28      	ldr	r3, [pc, #160]	; (4c7c <getSpllConfig+0xa8>)
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d023      	beq.n	4c2a <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4be2:	2300      	movs	r3, #0
    4be4:	9301      	str	r3, [sp, #4]
    4be6:	e019      	b.n	4c1c <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4be8:	4b24      	ldr	r3, [pc, #144]	; (4c7c <getSpllConfig+0xa8>)
    4bea:	6819      	ldr	r1, [r3, #0]
    4bec:	9a01      	ldr	r2, [sp, #4]
    4bee:	4613      	mov	r3, r2
    4bf0:	009b      	lsls	r3, r3, #2
    4bf2:	4413      	add	r3, r2
    4bf4:	00db      	lsls	r3, r3, #3
    4bf6:	440b      	add	r3, r1
    4bf8:	3340      	adds	r3, #64	; 0x40
    4bfa:	681b      	ldr	r3, [r3, #0]
    4bfc:	2b09      	cmp	r3, #9
    4bfe:	d10a      	bne.n	4c16 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c00:	4b1e      	ldr	r3, [pc, #120]	; (4c7c <getSpllConfig+0xa8>)
    4c02:	6819      	ldr	r1, [r3, #0]
    4c04:	9a01      	ldr	r2, [sp, #4]
    4c06:	4613      	mov	r3, r2
    4c08:	009b      	lsls	r3, r3, #2
    4c0a:	4413      	add	r3, r2
    4c0c:	00db      	lsls	r3, r3, #3
    4c0e:	3340      	adds	r3, #64	; 0x40
    4c10:	440b      	add	r3, r1
    4c12:	9300      	str	r3, [sp, #0]
                break;
    4c14:	e009      	b.n	4c2a <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c16:	9b01      	ldr	r3, [sp, #4]
    4c18:	3301      	adds	r3, #1
    4c1a:	9301      	str	r3, [sp, #4]
    4c1c:	4b17      	ldr	r3, [pc, #92]	; (4c7c <getSpllConfig+0xa8>)
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	7a9b      	ldrb	r3, [r3, #10]
    4c22:	461a      	mov	r2, r3
    4c24:	9b01      	ldr	r3, [sp, #4]
    4c26:	4293      	cmp	r3, r2
    4c28:	d3de      	bcc.n	4be8 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c2a:	9b00      	ldr	r3, [sp, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d121      	bne.n	4c74 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c30:	4b13      	ldr	r3, [pc, #76]	; (4c80 <getSpllConfig+0xac>)
    4c32:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c34:	4b12      	ldr	r3, [pc, #72]	; (4c80 <getSpllConfig+0xac>)
    4c36:	2209      	movs	r2, #9
    4c38:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c3a:	4b12      	ldr	r3, [pc, #72]	; (4c84 <getSpllConfig+0xb0>)
    4c3c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c40:	b29b      	uxth	r3, r3
    4c42:	f003 0301 	and.w	r3, r3, #1
    4c46:	b29a      	uxth	r2, r3
    4c48:	4b0d      	ldr	r3, [pc, #52]	; (4c80 <getSpllConfig+0xac>)
    4c4a:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4c4c:	4b0d      	ldr	r3, [pc, #52]	; (4c84 <getSpllConfig+0xb0>)
    4c4e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c52:	0a1b      	lsrs	r3, r3, #8
    4c54:	b2db      	uxtb	r3, r3
    4c56:	f003 0307 	and.w	r3, r3, #7
    4c5a:	b2da      	uxtb	r2, r3
    4c5c:	4b08      	ldr	r3, [pc, #32]	; (4c80 <getSpllConfig+0xac>)
    4c5e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4c60:	4b08      	ldr	r3, [pc, #32]	; (4c84 <getSpllConfig+0xb0>)
    4c62:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c66:	0c1b      	lsrs	r3, r3, #16
    4c68:	b2db      	uxtb	r3, r3
    4c6a:	f003 031f 	and.w	r3, r3, #31
    4c6e:	b2da      	uxtb	r2, r3
    4c70:	4b03      	ldr	r3, [pc, #12]	; (4c80 <getSpllConfig+0xac>)
    4c72:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4c74:	9b00      	ldr	r3, [sp, #0]
}
    4c76:	4618      	mov	r0, r3
    4c78:	b002      	add	sp, #8
    4c7a:	4770      	bx	lr
    4c7c:	1fff8ba8 	.word	0x1fff8ba8
    4c80:	1fff8c34 	.word	0x1fff8c34
    4c84:	40064000 	.word	0x40064000

00004c88 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4c88:	b086      	sub	sp, #24
    4c8a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4c8c:	2300      	movs	r3, #0
    4c8e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4c90:	9b01      	ldr	r3, [sp, #4]
    4c92:	2b1b      	cmp	r3, #27
    4c94:	d00f      	beq.n	4cb6 <getSelectorConfig+0x2e>
    4c96:	9b01      	ldr	r3, [sp, #4]
    4c98:	2b1b      	cmp	r3, #27
    4c9a:	d80f      	bhi.n	4cbc <getSelectorConfig+0x34>
    4c9c:	9b01      	ldr	r3, [sp, #4]
    4c9e:	2b19      	cmp	r3, #25
    4ca0:	d003      	beq.n	4caa <getSelectorConfig+0x22>
    4ca2:	9b01      	ldr	r3, [sp, #4]
    4ca4:	2b1a      	cmp	r3, #26
    4ca6:	d003      	beq.n	4cb0 <getSelectorConfig+0x28>
    4ca8:	e008      	b.n	4cbc <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4caa:	2300      	movs	r3, #0
    4cac:	9304      	str	r3, [sp, #16]
            break;
    4cae:	e008      	b.n	4cc2 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4cb0:	2301      	movs	r3, #1
    4cb2:	9304      	str	r3, [sp, #16]
            break;
    4cb4:	e005      	b.n	4cc2 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4cb6:	2302      	movs	r3, #2
    4cb8:	9304      	str	r3, [sp, #16]
            break;
    4cba:	e002      	b.n	4cc2 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4cbc:	2300      	movs	r3, #0
    4cbe:	9304      	str	r3, [sp, #16]
            break;
    4cc0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4cc2:	4b36      	ldr	r3, [pc, #216]	; (4d9c <getSelectorConfig+0x114>)
    4cc4:	681b      	ldr	r3, [r3, #0]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d01d      	beq.n	4d06 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4cca:	2300      	movs	r3, #0
    4ccc:	9303      	str	r3, [sp, #12]
    4cce:	e013      	b.n	4cf8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4cd0:	4b32      	ldr	r3, [pc, #200]	; (4d9c <getSelectorConfig+0x114>)
    4cd2:	681b      	ldr	r3, [r3, #0]
    4cd4:	9a03      	ldr	r2, [sp, #12]
    4cd6:	320d      	adds	r2, #13
    4cd8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4cdc:	9a01      	ldr	r2, [sp, #4]
    4cde:	429a      	cmp	r2, r3
    4ce0:	d107      	bne.n	4cf2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4ce2:	4b2e      	ldr	r3, [pc, #184]	; (4d9c <getSelectorConfig+0x114>)
    4ce4:	681a      	ldr	r2, [r3, #0]
    4ce6:	9b03      	ldr	r3, [sp, #12]
    4ce8:	330d      	adds	r3, #13
    4cea:	00db      	lsls	r3, r3, #3
    4cec:	4413      	add	r3, r2
    4cee:	9305      	str	r3, [sp, #20]
                break;
    4cf0:	e009      	b.n	4d06 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4cf2:	9b03      	ldr	r3, [sp, #12]
    4cf4:	3301      	adds	r3, #1
    4cf6:	9303      	str	r3, [sp, #12]
    4cf8:	4b28      	ldr	r3, [pc, #160]	; (4d9c <getSelectorConfig+0x114>)
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	7adb      	ldrb	r3, [r3, #11]
    4cfe:	461a      	mov	r2, r3
    4d00:	9b03      	ldr	r3, [sp, #12]
    4d02:	4293      	cmp	r3, r2
    4d04:	d3e4      	bcc.n	4cd0 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d06:	9b05      	ldr	r3, [sp, #20]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d140      	bne.n	4d8e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d0c:	9b04      	ldr	r3, [sp, #16]
    4d0e:	00db      	lsls	r3, r3, #3
    4d10:	4a23      	ldr	r2, [pc, #140]	; (4da0 <getSelectorConfig+0x118>)
    4d12:	4413      	add	r3, r2
    4d14:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d16:	4922      	ldr	r1, [pc, #136]	; (4da0 <getSelectorConfig+0x118>)
    4d18:	9b04      	ldr	r3, [sp, #16]
    4d1a:	9a01      	ldr	r2, [sp, #4]
    4d1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d20:	9b01      	ldr	r3, [sp, #4]
    4d22:	2b1b      	cmp	r3, #27
    4d24:	d025      	beq.n	4d72 <getSelectorConfig+0xea>
    4d26:	9b01      	ldr	r3, [sp, #4]
    4d28:	2b1b      	cmp	r3, #27
    4d2a:	d832      	bhi.n	4d92 <getSelectorConfig+0x10a>
    4d2c:	9b01      	ldr	r3, [sp, #4]
    4d2e:	2b19      	cmp	r3, #25
    4d30:	d003      	beq.n	4d3a <getSelectorConfig+0xb2>
    4d32:	9b01      	ldr	r3, [sp, #4]
    4d34:	2b1a      	cmp	r3, #26
    4d36:	d00e      	beq.n	4d56 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d38:	e02b      	b.n	4d92 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d3a:	4b1a      	ldr	r3, [pc, #104]	; (4da4 <getSelectorConfig+0x11c>)
    4d3c:	695b      	ldr	r3, [r3, #20]
    4d3e:	0e1b      	lsrs	r3, r3, #24
    4d40:	f003 030f 	and.w	r3, r3, #15
    4d44:	4a18      	ldr	r2, [pc, #96]	; (4da8 <getSelectorConfig+0x120>)
    4d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d4a:	4915      	ldr	r1, [pc, #84]	; (4da0 <getSelectorConfig+0x118>)
    4d4c:	9b04      	ldr	r3, [sp, #16]
    4d4e:	00db      	lsls	r3, r3, #3
    4d50:	440b      	add	r3, r1
    4d52:	605a      	str	r2, [r3, #4]
                break;
    4d54:	e01e      	b.n	4d94 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4d56:	4b13      	ldr	r3, [pc, #76]	; (4da4 <getSelectorConfig+0x11c>)
    4d58:	699b      	ldr	r3, [r3, #24]
    4d5a:	0e1b      	lsrs	r3, r3, #24
    4d5c:	f003 030f 	and.w	r3, r3, #15
    4d60:	4a11      	ldr	r2, [pc, #68]	; (4da8 <getSelectorConfig+0x120>)
    4d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d66:	490e      	ldr	r1, [pc, #56]	; (4da0 <getSelectorConfig+0x118>)
    4d68:	9b04      	ldr	r3, [sp, #16]
    4d6a:	00db      	lsls	r3, r3, #3
    4d6c:	440b      	add	r3, r1
    4d6e:	605a      	str	r2, [r3, #4]
                break;
    4d70:	e010      	b.n	4d94 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4d72:	4b0c      	ldr	r3, [pc, #48]	; (4da4 <getSelectorConfig+0x11c>)
    4d74:	69db      	ldr	r3, [r3, #28]
    4d76:	0e1b      	lsrs	r3, r3, #24
    4d78:	f003 030f 	and.w	r3, r3, #15
    4d7c:	4a0a      	ldr	r2, [pc, #40]	; (4da8 <getSelectorConfig+0x120>)
    4d7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4d82:	4907      	ldr	r1, [pc, #28]	; (4da0 <getSelectorConfig+0x118>)
    4d84:	9b04      	ldr	r3, [sp, #16]
    4d86:	00db      	lsls	r3, r3, #3
    4d88:	440b      	add	r3, r1
    4d8a:	605a      	str	r2, [r3, #4]
                break;
    4d8c:	e002      	b.n	4d94 <getSelectorConfig+0x10c>
        }
    }
    4d8e:	bf00      	nop
    4d90:	e000      	b.n	4d94 <getSelectorConfig+0x10c>
                break;
    4d92:	bf00      	nop

    return ReturnValue;
    4d94:	9b05      	ldr	r3, [sp, #20]
}
    4d96:	4618      	mov	r0, r3
    4d98:	b006      	add	sp, #24
    4d9a:	4770      	bx	lr
    4d9c:	1fff8ba8 	.word	0x1fff8ba8
    4da0:	1fff8c5c 	.word	0x1fff8c5c
    4da4:	40064000 	.word	0x40064000
    4da8:	00008a2c 	.word	0x00008a2c

00004dac <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4dac:	b086      	sub	sp, #24
    4dae:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4db0:	2300      	movs	r3, #0
    4db2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4db4:	2300      	movs	r3, #0
    4db6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4db8:	9b01      	ldr	r3, [sp, #4]
    4dba:	2b1f      	cmp	r3, #31
    4dbc:	d00f      	beq.n	4dde <getCoreDividerConfig+0x32>
    4dbe:	9b01      	ldr	r3, [sp, #4]
    4dc0:	2b1f      	cmp	r3, #31
    4dc2:	d80f      	bhi.n	4de4 <getCoreDividerConfig+0x38>
    4dc4:	9b01      	ldr	r3, [sp, #4]
    4dc6:	2b1d      	cmp	r3, #29
    4dc8:	d003      	beq.n	4dd2 <getCoreDividerConfig+0x26>
    4dca:	9b01      	ldr	r3, [sp, #4]
    4dcc:	2b1e      	cmp	r3, #30
    4dce:	d003      	beq.n	4dd8 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4dd0:	e008      	b.n	4de4 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4dd2:	2300      	movs	r3, #0
    4dd4:	9304      	str	r3, [sp, #16]
            break;
    4dd6:	e006      	b.n	4de6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4dd8:	2301      	movs	r3, #1
    4dda:	9304      	str	r3, [sp, #16]
            break;
    4ddc:	e003      	b.n	4de6 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4dde:	2302      	movs	r3, #2
    4de0:	9304      	str	r3, [sp, #16]
            break;
    4de2:	e000      	b.n	4de6 <getCoreDividerConfig+0x3a>
                break;
    4de4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4de6:	4b41      	ldr	r3, [pc, #260]	; (4eec <getCoreDividerConfig+0x140>)
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d026      	beq.n	4e3c <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4dee:	2300      	movs	r3, #0
    4df0:	9303      	str	r3, [sp, #12]
    4df2:	e01c      	b.n	4e2e <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4df4:	4b3d      	ldr	r3, [pc, #244]	; (4eec <getCoreDividerConfig+0x140>)
    4df6:	6819      	ldr	r1, [r3, #0]
    4df8:	9a03      	ldr	r2, [sp, #12]
    4dfa:	4613      	mov	r3, r2
    4dfc:	005b      	lsls	r3, r3, #1
    4dfe:	4413      	add	r3, r2
    4e00:	009b      	lsls	r3, r3, #2
    4e02:	440b      	add	r3, r1
    4e04:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	9a01      	ldr	r2, [sp, #4]
    4e0c:	429a      	cmp	r2, r3
    4e0e:	d10b      	bne.n	4e28 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e10:	4b36      	ldr	r3, [pc, #216]	; (4eec <getCoreDividerConfig+0x140>)
    4e12:	6819      	ldr	r1, [r3, #0]
    4e14:	9a03      	ldr	r2, [sp, #12]
    4e16:	4613      	mov	r3, r2
    4e18:	005b      	lsls	r3, r3, #1
    4e1a:	4413      	add	r3, r2
    4e1c:	009b      	lsls	r3, r3, #2
    4e1e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e22:	440b      	add	r3, r1
    4e24:	9305      	str	r3, [sp, #20]
                break;
    4e26:	e009      	b.n	4e3c <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e28:	9b03      	ldr	r3, [sp, #12]
    4e2a:	3301      	adds	r3, #1
    4e2c:	9303      	str	r3, [sp, #12]
    4e2e:	4b2f      	ldr	r3, [pc, #188]	; (4eec <getCoreDividerConfig+0x140>)
    4e30:	681b      	ldr	r3, [r3, #0]
    4e32:	7b1b      	ldrb	r3, [r3, #12]
    4e34:	461a      	mov	r2, r3
    4e36:	9b03      	ldr	r3, [sp, #12]
    4e38:	4293      	cmp	r3, r2
    4e3a:	d3db      	bcc.n	4df4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e3c:	9b05      	ldr	r3, [sp, #20]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d14d      	bne.n	4ede <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4e42:	9a04      	ldr	r2, [sp, #16]
    4e44:	4613      	mov	r3, r2
    4e46:	005b      	lsls	r3, r3, #1
    4e48:	4413      	add	r3, r2
    4e4a:	009b      	lsls	r3, r3, #2
    4e4c:	4a28      	ldr	r2, [pc, #160]	; (4ef0 <getCoreDividerConfig+0x144>)
    4e4e:	4413      	add	r3, r2
    4e50:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4e52:	4927      	ldr	r1, [pc, #156]	; (4ef0 <getCoreDividerConfig+0x144>)
    4e54:	9a04      	ldr	r2, [sp, #16]
    4e56:	4613      	mov	r3, r2
    4e58:	005b      	lsls	r3, r3, #1
    4e5a:	4413      	add	r3, r2
    4e5c:	009b      	lsls	r3, r3, #2
    4e5e:	440b      	add	r3, r1
    4e60:	9a01      	ldr	r2, [sp, #4]
    4e62:	601a      	str	r2, [r3, #0]
        switch(Name)
    4e64:	9b01      	ldr	r3, [sp, #4]
    4e66:	2b1f      	cmp	r3, #31
    4e68:	d029      	beq.n	4ebe <getCoreDividerConfig+0x112>
    4e6a:	9b01      	ldr	r3, [sp, #4]
    4e6c:	2b1f      	cmp	r3, #31
    4e6e:	d838      	bhi.n	4ee2 <getCoreDividerConfig+0x136>
    4e70:	9b01      	ldr	r3, [sp, #4]
    4e72:	2b1d      	cmp	r3, #29
    4e74:	d003      	beq.n	4e7e <getCoreDividerConfig+0xd2>
    4e76:	9b01      	ldr	r3, [sp, #4]
    4e78:	2b1e      	cmp	r3, #30
    4e7a:	d010      	beq.n	4e9e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e7c:	e031      	b.n	4ee2 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4e7e:	4b1d      	ldr	r3, [pc, #116]	; (4ef4 <getCoreDividerConfig+0x148>)
    4e80:	695b      	ldr	r3, [r3, #20]
    4e82:	0c1b      	lsrs	r3, r3, #16
    4e84:	f003 030f 	and.w	r3, r3, #15
    4e88:	1c59      	adds	r1, r3, #1
    4e8a:	4819      	ldr	r0, [pc, #100]	; (4ef0 <getCoreDividerConfig+0x144>)
    4e8c:	9a04      	ldr	r2, [sp, #16]
    4e8e:	4613      	mov	r3, r2
    4e90:	005b      	lsls	r3, r3, #1
    4e92:	4413      	add	r3, r2
    4e94:	009b      	lsls	r3, r3, #2
    4e96:	4403      	add	r3, r0
    4e98:	3304      	adds	r3, #4
    4e9a:	6019      	str	r1, [r3, #0]
                break;
    4e9c:	e022      	b.n	4ee4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4e9e:	4b15      	ldr	r3, [pc, #84]	; (4ef4 <getCoreDividerConfig+0x148>)
    4ea0:	699b      	ldr	r3, [r3, #24]
    4ea2:	0c1b      	lsrs	r3, r3, #16
    4ea4:	f003 030f 	and.w	r3, r3, #15
    4ea8:	1c59      	adds	r1, r3, #1
    4eaa:	4811      	ldr	r0, [pc, #68]	; (4ef0 <getCoreDividerConfig+0x144>)
    4eac:	9a04      	ldr	r2, [sp, #16]
    4eae:	4613      	mov	r3, r2
    4eb0:	005b      	lsls	r3, r3, #1
    4eb2:	4413      	add	r3, r2
    4eb4:	009b      	lsls	r3, r3, #2
    4eb6:	4403      	add	r3, r0
    4eb8:	3304      	adds	r3, #4
    4eba:	6019      	str	r1, [r3, #0]
                break;
    4ebc:	e012      	b.n	4ee4 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4ebe:	4b0d      	ldr	r3, [pc, #52]	; (4ef4 <getCoreDividerConfig+0x148>)
    4ec0:	69db      	ldr	r3, [r3, #28]
    4ec2:	0c1b      	lsrs	r3, r3, #16
    4ec4:	f003 030f 	and.w	r3, r3, #15
    4ec8:	1c59      	adds	r1, r3, #1
    4eca:	4809      	ldr	r0, [pc, #36]	; (4ef0 <getCoreDividerConfig+0x144>)
    4ecc:	9a04      	ldr	r2, [sp, #16]
    4ece:	4613      	mov	r3, r2
    4ed0:	005b      	lsls	r3, r3, #1
    4ed2:	4413      	add	r3, r2
    4ed4:	009b      	lsls	r3, r3, #2
    4ed6:	4403      	add	r3, r0
    4ed8:	3304      	adds	r3, #4
    4eda:	6019      	str	r1, [r3, #0]
                break;
    4edc:	e002      	b.n	4ee4 <getCoreDividerConfig+0x138>
        }
    }
    4ede:	bf00      	nop
    4ee0:	e000      	b.n	4ee4 <getCoreDividerConfig+0x138>
                break;
    4ee2:	bf00      	nop

    return ReturnValue;
    4ee4:	9b05      	ldr	r3, [sp, #20]
}
    4ee6:	4618      	mov	r0, r3
    4ee8:	b006      	add	sp, #24
    4eea:	4770      	bx	lr
    4eec:	1fff8ba8 	.word	0x1fff8ba8
    4ef0:	1fff8c74 	.word	0x1fff8c74
    4ef4:	40064000 	.word	0x40064000

00004ef8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4ef8:	b086      	sub	sp, #24
    4efa:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4efc:	2300      	movs	r3, #0
    4efe:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f00:	2300      	movs	r3, #0
    4f02:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f04:	9b01      	ldr	r3, [sp, #4]
    4f06:	2b23      	cmp	r3, #35	; 0x23
    4f08:	d00f      	beq.n	4f2a <getBusDividerConfig+0x32>
    4f0a:	9b01      	ldr	r3, [sp, #4]
    4f0c:	2b23      	cmp	r3, #35	; 0x23
    4f0e:	d80f      	bhi.n	4f30 <getBusDividerConfig+0x38>
    4f10:	9b01      	ldr	r3, [sp, #4]
    4f12:	2b21      	cmp	r3, #33	; 0x21
    4f14:	d003      	beq.n	4f1e <getBusDividerConfig+0x26>
    4f16:	9b01      	ldr	r3, [sp, #4]
    4f18:	2b22      	cmp	r3, #34	; 0x22
    4f1a:	d003      	beq.n	4f24 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f1c:	e008      	b.n	4f30 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f1e:	2300      	movs	r3, #0
    4f20:	9304      	str	r3, [sp, #16]
            break;
    4f22:	e006      	b.n	4f32 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f24:	2301      	movs	r3, #1
    4f26:	9304      	str	r3, [sp, #16]
            break;
    4f28:	e003      	b.n	4f32 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f2a:	2302      	movs	r3, #2
    4f2c:	9304      	str	r3, [sp, #16]
            break;
    4f2e:	e000      	b.n	4f32 <getBusDividerConfig+0x3a>
                break;
    4f30:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f32:	4b41      	ldr	r3, [pc, #260]	; (5038 <getBusDividerConfig+0x140>)
    4f34:	681b      	ldr	r3, [r3, #0]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d026      	beq.n	4f88 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f3a:	2300      	movs	r3, #0
    4f3c:	9303      	str	r3, [sp, #12]
    4f3e:	e01c      	b.n	4f7a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f40:	4b3d      	ldr	r3, [pc, #244]	; (5038 <getBusDividerConfig+0x140>)
    4f42:	6819      	ldr	r1, [r3, #0]
    4f44:	9a03      	ldr	r2, [sp, #12]
    4f46:	4613      	mov	r3, r2
    4f48:	005b      	lsls	r3, r3, #1
    4f4a:	4413      	add	r3, r2
    4f4c:	009b      	lsls	r3, r3, #2
    4f4e:	440b      	add	r3, r1
    4f50:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	9a01      	ldr	r2, [sp, #4]
    4f58:	429a      	cmp	r2, r3
    4f5a:	d10b      	bne.n	4f74 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4f5c:	4b36      	ldr	r3, [pc, #216]	; (5038 <getBusDividerConfig+0x140>)
    4f5e:	6819      	ldr	r1, [r3, #0]
    4f60:	9a03      	ldr	r2, [sp, #12]
    4f62:	4613      	mov	r3, r2
    4f64:	005b      	lsls	r3, r3, #1
    4f66:	4413      	add	r3, r2
    4f68:	009b      	lsls	r3, r3, #2
    4f6a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4f6e:	440b      	add	r3, r1
    4f70:	9305      	str	r3, [sp, #20]
                break;
    4f72:	e009      	b.n	4f88 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f74:	9b03      	ldr	r3, [sp, #12]
    4f76:	3301      	adds	r3, #1
    4f78:	9303      	str	r3, [sp, #12]
    4f7a:	4b2f      	ldr	r3, [pc, #188]	; (5038 <getBusDividerConfig+0x140>)
    4f7c:	681b      	ldr	r3, [r3, #0]
    4f7e:	7b1b      	ldrb	r3, [r3, #12]
    4f80:	461a      	mov	r2, r3
    4f82:	9b03      	ldr	r3, [sp, #12]
    4f84:	4293      	cmp	r3, r2
    4f86:	d3db      	bcc.n	4f40 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4f88:	9b05      	ldr	r3, [sp, #20]
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d14d      	bne.n	502a <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4f8e:	9a04      	ldr	r2, [sp, #16]
    4f90:	4613      	mov	r3, r2
    4f92:	005b      	lsls	r3, r3, #1
    4f94:	4413      	add	r3, r2
    4f96:	009b      	lsls	r3, r3, #2
    4f98:	4a28      	ldr	r2, [pc, #160]	; (503c <getBusDividerConfig+0x144>)
    4f9a:	4413      	add	r3, r2
    4f9c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4f9e:	4927      	ldr	r1, [pc, #156]	; (503c <getBusDividerConfig+0x144>)
    4fa0:	9a04      	ldr	r2, [sp, #16]
    4fa2:	4613      	mov	r3, r2
    4fa4:	005b      	lsls	r3, r3, #1
    4fa6:	4413      	add	r3, r2
    4fa8:	009b      	lsls	r3, r3, #2
    4faa:	440b      	add	r3, r1
    4fac:	9a01      	ldr	r2, [sp, #4]
    4fae:	601a      	str	r2, [r3, #0]
        switch(Name)
    4fb0:	9b01      	ldr	r3, [sp, #4]
    4fb2:	2b23      	cmp	r3, #35	; 0x23
    4fb4:	d029      	beq.n	500a <getBusDividerConfig+0x112>
    4fb6:	9b01      	ldr	r3, [sp, #4]
    4fb8:	2b23      	cmp	r3, #35	; 0x23
    4fba:	d838      	bhi.n	502e <getBusDividerConfig+0x136>
    4fbc:	9b01      	ldr	r3, [sp, #4]
    4fbe:	2b21      	cmp	r3, #33	; 0x21
    4fc0:	d003      	beq.n	4fca <getBusDividerConfig+0xd2>
    4fc2:	9b01      	ldr	r3, [sp, #4]
    4fc4:	2b22      	cmp	r3, #34	; 0x22
    4fc6:	d010      	beq.n	4fea <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4fc8:	e031      	b.n	502e <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4fca:	4b1d      	ldr	r3, [pc, #116]	; (5040 <getBusDividerConfig+0x148>)
    4fcc:	695b      	ldr	r3, [r3, #20]
    4fce:	091b      	lsrs	r3, r3, #4
    4fd0:	f003 030f 	and.w	r3, r3, #15
    4fd4:	1c59      	adds	r1, r3, #1
    4fd6:	4819      	ldr	r0, [pc, #100]	; (503c <getBusDividerConfig+0x144>)
    4fd8:	9a04      	ldr	r2, [sp, #16]
    4fda:	4613      	mov	r3, r2
    4fdc:	005b      	lsls	r3, r3, #1
    4fde:	4413      	add	r3, r2
    4fe0:	009b      	lsls	r3, r3, #2
    4fe2:	4403      	add	r3, r0
    4fe4:	3304      	adds	r3, #4
    4fe6:	6019      	str	r1, [r3, #0]
                break;
    4fe8:	e022      	b.n	5030 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4fea:	4b15      	ldr	r3, [pc, #84]	; (5040 <getBusDividerConfig+0x148>)
    4fec:	699b      	ldr	r3, [r3, #24]
    4fee:	091b      	lsrs	r3, r3, #4
    4ff0:	f003 030f 	and.w	r3, r3, #15
    4ff4:	1c59      	adds	r1, r3, #1
    4ff6:	4811      	ldr	r0, [pc, #68]	; (503c <getBusDividerConfig+0x144>)
    4ff8:	9a04      	ldr	r2, [sp, #16]
    4ffa:	4613      	mov	r3, r2
    4ffc:	005b      	lsls	r3, r3, #1
    4ffe:	4413      	add	r3, r2
    5000:	009b      	lsls	r3, r3, #2
    5002:	4403      	add	r3, r0
    5004:	3304      	adds	r3, #4
    5006:	6019      	str	r1, [r3, #0]
                break;
    5008:	e012      	b.n	5030 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    500a:	4b0d      	ldr	r3, [pc, #52]	; (5040 <getBusDividerConfig+0x148>)
    500c:	69db      	ldr	r3, [r3, #28]
    500e:	091b      	lsrs	r3, r3, #4
    5010:	f003 030f 	and.w	r3, r3, #15
    5014:	1c59      	adds	r1, r3, #1
    5016:	4809      	ldr	r0, [pc, #36]	; (503c <getBusDividerConfig+0x144>)
    5018:	9a04      	ldr	r2, [sp, #16]
    501a:	4613      	mov	r3, r2
    501c:	005b      	lsls	r3, r3, #1
    501e:	4413      	add	r3, r2
    5020:	009b      	lsls	r3, r3, #2
    5022:	4403      	add	r3, r0
    5024:	3304      	adds	r3, #4
    5026:	6019      	str	r1, [r3, #0]
                break;
    5028:	e002      	b.n	5030 <getBusDividerConfig+0x138>
        }
    }
    502a:	bf00      	nop
    502c:	e000      	b.n	5030 <getBusDividerConfig+0x138>
                break;
    502e:	bf00      	nop

    return ReturnValue;
    5030:	9b05      	ldr	r3, [sp, #20]
}
    5032:	4618      	mov	r0, r3
    5034:	b006      	add	sp, #24
    5036:	4770      	bx	lr
    5038:	1fff8ba8 	.word	0x1fff8ba8
    503c:	1fff8c98 	.word	0x1fff8c98
    5040:	40064000 	.word	0x40064000

00005044 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5044:	b086      	sub	sp, #24
    5046:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5048:	2300      	movs	r3, #0
    504a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    504c:	2300      	movs	r3, #0
    504e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5050:	9b01      	ldr	r3, [sp, #4]
    5052:	2b27      	cmp	r3, #39	; 0x27
    5054:	d00f      	beq.n	5076 <getSlowDividerConfig+0x32>
    5056:	9b01      	ldr	r3, [sp, #4]
    5058:	2b27      	cmp	r3, #39	; 0x27
    505a:	d80f      	bhi.n	507c <getSlowDividerConfig+0x38>
    505c:	9b01      	ldr	r3, [sp, #4]
    505e:	2b25      	cmp	r3, #37	; 0x25
    5060:	d003      	beq.n	506a <getSlowDividerConfig+0x26>
    5062:	9b01      	ldr	r3, [sp, #4]
    5064:	2b26      	cmp	r3, #38	; 0x26
    5066:	d003      	beq.n	5070 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5068:	e008      	b.n	507c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    506a:	2300      	movs	r3, #0
    506c:	9304      	str	r3, [sp, #16]
            break;
    506e:	e006      	b.n	507e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5070:	2301      	movs	r3, #1
    5072:	9304      	str	r3, [sp, #16]
            break;
    5074:	e003      	b.n	507e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5076:	2302      	movs	r3, #2
    5078:	9304      	str	r3, [sp, #16]
            break;
    507a:	e000      	b.n	507e <getSlowDividerConfig+0x3a>
                break;
    507c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    507e:	4b40      	ldr	r3, [pc, #256]	; (5180 <getSlowDividerConfig+0x13c>)
    5080:	681b      	ldr	r3, [r3, #0]
    5082:	2b00      	cmp	r3, #0
    5084:	d026      	beq.n	50d4 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5086:	2300      	movs	r3, #0
    5088:	9303      	str	r3, [sp, #12]
    508a:	e01c      	b.n	50c6 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    508c:	4b3c      	ldr	r3, [pc, #240]	; (5180 <getSlowDividerConfig+0x13c>)
    508e:	6819      	ldr	r1, [r3, #0]
    5090:	9a03      	ldr	r2, [sp, #12]
    5092:	4613      	mov	r3, r2
    5094:	005b      	lsls	r3, r3, #1
    5096:	4413      	add	r3, r2
    5098:	009b      	lsls	r3, r3, #2
    509a:	440b      	add	r3, r1
    509c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	9a01      	ldr	r2, [sp, #4]
    50a4:	429a      	cmp	r2, r3
    50a6:	d10b      	bne.n	50c0 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    50a8:	4b35      	ldr	r3, [pc, #212]	; (5180 <getSlowDividerConfig+0x13c>)
    50aa:	6819      	ldr	r1, [r3, #0]
    50ac:	9a03      	ldr	r2, [sp, #12]
    50ae:	4613      	mov	r3, r2
    50b0:	005b      	lsls	r3, r3, #1
    50b2:	4413      	add	r3, r2
    50b4:	009b      	lsls	r3, r3, #2
    50b6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50ba:	440b      	add	r3, r1
    50bc:	9305      	str	r3, [sp, #20]
                break;
    50be:	e009      	b.n	50d4 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50c0:	9b03      	ldr	r3, [sp, #12]
    50c2:	3301      	adds	r3, #1
    50c4:	9303      	str	r3, [sp, #12]
    50c6:	4b2e      	ldr	r3, [pc, #184]	; (5180 <getSlowDividerConfig+0x13c>)
    50c8:	681b      	ldr	r3, [r3, #0]
    50ca:	7b1b      	ldrb	r3, [r3, #12]
    50cc:	461a      	mov	r2, r3
    50ce:	9b03      	ldr	r3, [sp, #12]
    50d0:	4293      	cmp	r3, r2
    50d2:	d3db      	bcc.n	508c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    50d4:	9b05      	ldr	r3, [sp, #20]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d14a      	bne.n	5170 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    50da:	9a04      	ldr	r2, [sp, #16]
    50dc:	4613      	mov	r3, r2
    50de:	005b      	lsls	r3, r3, #1
    50e0:	4413      	add	r3, r2
    50e2:	009b      	lsls	r3, r3, #2
    50e4:	4a27      	ldr	r2, [pc, #156]	; (5184 <getSlowDividerConfig+0x140>)
    50e6:	4413      	add	r3, r2
    50e8:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    50ea:	4926      	ldr	r1, [pc, #152]	; (5184 <getSlowDividerConfig+0x140>)
    50ec:	9a04      	ldr	r2, [sp, #16]
    50ee:	4613      	mov	r3, r2
    50f0:	005b      	lsls	r3, r3, #1
    50f2:	4413      	add	r3, r2
    50f4:	009b      	lsls	r3, r3, #2
    50f6:	440b      	add	r3, r1
    50f8:	9a01      	ldr	r2, [sp, #4]
    50fa:	601a      	str	r2, [r3, #0]
        switch(Name)
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	2b27      	cmp	r3, #39	; 0x27
    5100:	d027      	beq.n	5152 <getSlowDividerConfig+0x10e>
    5102:	9b01      	ldr	r3, [sp, #4]
    5104:	2b27      	cmp	r3, #39	; 0x27
    5106:	d835      	bhi.n	5174 <getSlowDividerConfig+0x130>
    5108:	9b01      	ldr	r3, [sp, #4]
    510a:	2b25      	cmp	r3, #37	; 0x25
    510c:	d003      	beq.n	5116 <getSlowDividerConfig+0xd2>
    510e:	9b01      	ldr	r3, [sp, #4]
    5110:	2b26      	cmp	r3, #38	; 0x26
    5112:	d00f      	beq.n	5134 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5114:	e02e      	b.n	5174 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5116:	4b1c      	ldr	r3, [pc, #112]	; (5188 <getSlowDividerConfig+0x144>)
    5118:	695b      	ldr	r3, [r3, #20]
    511a:	f003 030f 	and.w	r3, r3, #15
    511e:	1c59      	adds	r1, r3, #1
    5120:	4818      	ldr	r0, [pc, #96]	; (5184 <getSlowDividerConfig+0x140>)
    5122:	9a04      	ldr	r2, [sp, #16]
    5124:	4613      	mov	r3, r2
    5126:	005b      	lsls	r3, r3, #1
    5128:	4413      	add	r3, r2
    512a:	009b      	lsls	r3, r3, #2
    512c:	4403      	add	r3, r0
    512e:	3304      	adds	r3, #4
    5130:	6019      	str	r1, [r3, #0]
                break;
    5132:	e020      	b.n	5176 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5134:	4b14      	ldr	r3, [pc, #80]	; (5188 <getSlowDividerConfig+0x144>)
    5136:	699b      	ldr	r3, [r3, #24]
    5138:	f003 030f 	and.w	r3, r3, #15
    513c:	1c59      	adds	r1, r3, #1
    513e:	4811      	ldr	r0, [pc, #68]	; (5184 <getSlowDividerConfig+0x140>)
    5140:	9a04      	ldr	r2, [sp, #16]
    5142:	4613      	mov	r3, r2
    5144:	005b      	lsls	r3, r3, #1
    5146:	4413      	add	r3, r2
    5148:	009b      	lsls	r3, r3, #2
    514a:	4403      	add	r3, r0
    514c:	3304      	adds	r3, #4
    514e:	6019      	str	r1, [r3, #0]
                break;
    5150:	e011      	b.n	5176 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5152:	4b0d      	ldr	r3, [pc, #52]	; (5188 <getSlowDividerConfig+0x144>)
    5154:	69db      	ldr	r3, [r3, #28]
    5156:	f003 030f 	and.w	r3, r3, #15
    515a:	1c59      	adds	r1, r3, #1
    515c:	4809      	ldr	r0, [pc, #36]	; (5184 <getSlowDividerConfig+0x140>)
    515e:	9a04      	ldr	r2, [sp, #16]
    5160:	4613      	mov	r3, r2
    5162:	005b      	lsls	r3, r3, #1
    5164:	4413      	add	r3, r2
    5166:	009b      	lsls	r3, r3, #2
    5168:	4403      	add	r3, r0
    516a:	3304      	adds	r3, #4
    516c:	6019      	str	r1, [r3, #0]
                break;
    516e:	e002      	b.n	5176 <getSlowDividerConfig+0x132>
        }
    }
    5170:	bf00      	nop
    5172:	e000      	b.n	5176 <getSlowDividerConfig+0x132>
                break;
    5174:	bf00      	nop

    return ReturnValue;
    5176:	9b05      	ldr	r3, [sp, #20]
}
    5178:	4618      	mov	r0, r3
    517a:	b006      	add	sp, #24
    517c:	4770      	bx	lr
    517e:	bf00      	nop
    5180:	1fff8ba8 	.word	0x1fff8ba8
    5184:	1fff8cbc 	.word	0x1fff8cbc
    5188:	40064000 	.word	0x40064000

0000518c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    518c:	b500      	push	{lr}
    518e:	b083      	sub	sp, #12
    5190:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5192:	4b64      	ldr	r3, [pc, #400]	; (5324 <Clock_Ip_ClockInitializeObjects+0x198>)
    5194:	781b      	ldrb	r3, [r3, #0]
    5196:	f083 0301 	eor.w	r3, r3, #1
    519a:	b2db      	uxtb	r3, r3
    519c:	2b00      	cmp	r3, #0
    519e:	d05b      	beq.n	5258 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    51a0:	4b60      	ldr	r3, [pc, #384]	; (5324 <Clock_Ip_ClockInitializeObjects+0x198>)
    51a2:	2201      	movs	r2, #1
    51a4:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    51a6:	4b60      	ldr	r3, [pc, #384]	; (5328 <Clock_Ip_ClockInitializeObjects+0x19c>)
    51a8:	785b      	ldrb	r3, [r3, #1]
    51aa:	461a      	mov	r2, r3
    51ac:	4613      	mov	r3, r2
    51ae:	009b      	lsls	r3, r3, #2
    51b0:	4413      	add	r3, r2
    51b2:	009b      	lsls	r3, r3, #2
    51b4:	4a5d      	ldr	r2, [pc, #372]	; (532c <Clock_Ip_ClockInitializeObjects+0x1a0>)
    51b6:	4413      	add	r3, r2
    51b8:	4a5d      	ldr	r2, [pc, #372]	; (5330 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    51ba:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    51bc:	4b5d      	ldr	r3, [pc, #372]	; (5334 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    51be:	785b      	ldrb	r3, [r3, #1]
    51c0:	461a      	mov	r2, r3
    51c2:	4613      	mov	r3, r2
    51c4:	009b      	lsls	r3, r3, #2
    51c6:	4413      	add	r3, r2
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	4a5b      	ldr	r2, [pc, #364]	; (5338 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    51cc:	4413      	add	r3, r2
    51ce:	4a5b      	ldr	r2, [pc, #364]	; (533c <Clock_Ip_ClockInitializeObjects+0x1b0>)
    51d0:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    51d2:	4b5b      	ldr	r3, [pc, #364]	; (5340 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    51d4:	791b      	ldrb	r3, [r3, #4]
    51d6:	461a      	mov	r2, r3
    51d8:	4613      	mov	r3, r2
    51da:	005b      	lsls	r3, r3, #1
    51dc:	4413      	add	r3, r2
    51de:	009b      	lsls	r3, r3, #2
    51e0:	4a58      	ldr	r2, [pc, #352]	; (5344 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    51e2:	4413      	add	r3, r2
    51e4:	4a58      	ldr	r2, [pc, #352]	; (5348 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    51e6:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    51e8:	4b58      	ldr	r3, [pc, #352]	; (534c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51ea:	795b      	ldrb	r3, [r3, #5]
    51ec:	00db      	lsls	r3, r3, #3
    51ee:	4a58      	ldr	r2, [pc, #352]	; (5350 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51f0:	4413      	add	r3, r2
    51f2:	4a58      	ldr	r2, [pc, #352]	; (5354 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    51f4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    51f6:	4b55      	ldr	r3, [pc, #340]	; (534c <Clock_Ip_ClockInitializeObjects+0x1c0>)
    51f8:	79db      	ldrb	r3, [r3, #7]
    51fa:	00db      	lsls	r3, r3, #3
    51fc:	4a54      	ldr	r2, [pc, #336]	; (5350 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    51fe:	4413      	add	r3, r2
    5200:	4a55      	ldr	r2, [pc, #340]	; (5358 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5202:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5204:	4b55      	ldr	r3, [pc, #340]	; (535c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5206:	799b      	ldrb	r3, [r3, #6]
    5208:	009b      	lsls	r3, r3, #2
    520a:	4a55      	ldr	r2, [pc, #340]	; (5360 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    520c:	4413      	add	r3, r2
    520e:	4a55      	ldr	r2, [pc, #340]	; (5364 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5210:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5212:	4b52      	ldr	r3, [pc, #328]	; (535c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5214:	7a1b      	ldrb	r3, [r3, #8]
    5216:	009b      	lsls	r3, r3, #2
    5218:	4a51      	ldr	r2, [pc, #324]	; (5360 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    521a:	4413      	add	r3, r2
    521c:	4a52      	ldr	r2, [pc, #328]	; (5368 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    521e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5220:	4b4e      	ldr	r3, [pc, #312]	; (535c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5222:	7a5b      	ldrb	r3, [r3, #9]
    5224:	009b      	lsls	r3, r3, #2
    5226:	4a4e      	ldr	r2, [pc, #312]	; (5360 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5228:	4413      	add	r3, r2
    522a:	4a50      	ldr	r2, [pc, #320]	; (536c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    522c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    522e:	4b4b      	ldr	r3, [pc, #300]	; (535c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5230:	7adb      	ldrb	r3, [r3, #11]
    5232:	009b      	lsls	r3, r3, #2
    5234:	4a4a      	ldr	r2, [pc, #296]	; (5360 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5236:	4413      	add	r3, r2
    5238:	4a4d      	ldr	r2, [pc, #308]	; (5370 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    523a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    523c:	4b47      	ldr	r3, [pc, #284]	; (535c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    523e:	7b1b      	ldrb	r3, [r3, #12]
    5240:	009b      	lsls	r3, r3, #2
    5242:	4a47      	ldr	r2, [pc, #284]	; (5360 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5244:	4413      	add	r3, r2
    5246:	4a4b      	ldr	r2, [pc, #300]	; (5374 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5248:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    524a:	4b44      	ldr	r3, [pc, #272]	; (535c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    524c:	7b9b      	ldrb	r3, [r3, #14]
    524e:	009b      	lsls	r3, r3, #2
    5250:	4a43      	ldr	r2, [pc, #268]	; (5360 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5252:	4413      	add	r3, r2
    5254:	4a48      	ldr	r2, [pc, #288]	; (5378 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5256:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5258:	4b48      	ldr	r3, [pc, #288]	; (537c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	2b00      	cmp	r3, #0
    525e:	d002      	beq.n	5266 <Clock_Ip_ClockInitializeObjects+0xda>
    5260:	9b01      	ldr	r3, [sp, #4]
    5262:	2b00      	cmp	r3, #0
    5264:	d003      	beq.n	526e <Clock_Ip_ClockInitializeObjects+0xe2>
    5266:	4b46      	ldr	r3, [pc, #280]	; (5380 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	2b00      	cmp	r3, #0
    526c:	d056      	beq.n	531c <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    526e:	f7ff fc09 	bl	4a84 <getFircConfig>
    5272:	4603      	mov	r3, r0
    5274:	4a43      	ldr	r2, [pc, #268]	; (5384 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5276:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5278:	f7ff fc60 	bl	4b3c <getSoscConfig>
    527c:	4603      	mov	r3, r0
    527e:	4a42      	ldr	r2, [pc, #264]	; (5388 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5280:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5282:	f7ff fca7 	bl	4bd4 <getSpllConfig>
    5286:	4603      	mov	r3, r0
    5288:	4a40      	ldr	r2, [pc, #256]	; (538c <Clock_Ip_ClockInitializeObjects+0x200>)
    528a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    528c:	2019      	movs	r0, #25
    528e:	f7ff fcfb 	bl	4c88 <getSelectorConfig>
    5292:	4603      	mov	r3, r0
    5294:	4a3e      	ldr	r2, [pc, #248]	; (5390 <Clock_Ip_ClockInitializeObjects+0x204>)
    5296:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5298:	201a      	movs	r0, #26
    529a:	f7ff fcf5 	bl	4c88 <getSelectorConfig>
    529e:	4603      	mov	r3, r0
    52a0:	4a3c      	ldr	r2, [pc, #240]	; (5394 <Clock_Ip_ClockInitializeObjects+0x208>)
    52a2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    52a4:	201b      	movs	r0, #27
    52a6:	f7ff fcef 	bl	4c88 <getSelectorConfig>
    52aa:	4603      	mov	r3, r0
    52ac:	4a3a      	ldr	r2, [pc, #232]	; (5398 <Clock_Ip_ClockInitializeObjects+0x20c>)
    52ae:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    52b0:	201d      	movs	r0, #29
    52b2:	f7ff fd7b 	bl	4dac <getCoreDividerConfig>
    52b6:	4603      	mov	r3, r0
    52b8:	4a38      	ldr	r2, [pc, #224]	; (539c <Clock_Ip_ClockInitializeObjects+0x210>)
    52ba:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    52bc:	201e      	movs	r0, #30
    52be:	f7ff fd75 	bl	4dac <getCoreDividerConfig>
    52c2:	4603      	mov	r3, r0
    52c4:	4a36      	ldr	r2, [pc, #216]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x214>)
    52c6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    52c8:	201f      	movs	r0, #31
    52ca:	f7ff fd6f 	bl	4dac <getCoreDividerConfig>
    52ce:	4603      	mov	r3, r0
    52d0:	4a34      	ldr	r2, [pc, #208]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x218>)
    52d2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    52d4:	2021      	movs	r0, #33	; 0x21
    52d6:	f7ff fe0f 	bl	4ef8 <getBusDividerConfig>
    52da:	4603      	mov	r3, r0
    52dc:	4a32      	ldr	r2, [pc, #200]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x21c>)
    52de:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    52e0:	2022      	movs	r0, #34	; 0x22
    52e2:	f7ff fe09 	bl	4ef8 <getBusDividerConfig>
    52e6:	4603      	mov	r3, r0
    52e8:	4a30      	ldr	r2, [pc, #192]	; (53ac <Clock_Ip_ClockInitializeObjects+0x220>)
    52ea:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    52ec:	2023      	movs	r0, #35	; 0x23
    52ee:	f7ff fe03 	bl	4ef8 <getBusDividerConfig>
    52f2:	4603      	mov	r3, r0
    52f4:	4a2e      	ldr	r2, [pc, #184]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x224>)
    52f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    52f8:	2025      	movs	r0, #37	; 0x25
    52fa:	f7ff fea3 	bl	5044 <getSlowDividerConfig>
    52fe:	4603      	mov	r3, r0
    5300:	4a2c      	ldr	r2, [pc, #176]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x228>)
    5302:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5304:	2026      	movs	r0, #38	; 0x26
    5306:	f7ff fe9d 	bl	5044 <getSlowDividerConfig>
    530a:	4603      	mov	r3, r0
    530c:	4a2a      	ldr	r2, [pc, #168]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x22c>)
    530e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5310:	2027      	movs	r0, #39	; 0x27
    5312:	f7ff fe97 	bl	5044 <getSlowDividerConfig>
    5316:	4603      	mov	r3, r0
    5318:	4a28      	ldr	r2, [pc, #160]	; (53bc <Clock_Ip_ClockInitializeObjects+0x230>)
    531a:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    531c:	bf00      	nop
    531e:	b003      	add	sp, #12
    5320:	f85d fb04 	ldr.w	pc, [sp], #4
    5324:	1fff8ce0 	.word	0x1fff8ce0
    5328:	0000835c 	.word	0x0000835c
    532c:	000089a8 	.word	0x000089a8
    5330:	1fff8bac 	.word	0x1fff8bac
    5334:	0000831c 	.word	0x0000831c
    5338:	000088f0 	.word	0x000088f0
    533c:	1fff8bb0 	.word	0x1fff8bb0
    5340:	0000832c 	.word	0x0000832c
    5344:	0000895c 	.word	0x0000895c
    5348:	1fff8bb4 	.word	0x1fff8bb4
    534c:	0000836c 	.word	0x0000836c
    5350:	000089d4 	.word	0x000089d4
    5354:	1fff8bb8 	.word	0x1fff8bb8
    5358:	1fff8bf4 	.word	0x1fff8bf4
    535c:	000082fc 	.word	0x000082fc
    5360:	000088ac 	.word	0x000088ac
    5364:	1fff8bbc 	.word	0x1fff8bbc
    5368:	1fff8bf8 	.word	0x1fff8bf8
    536c:	1fff8bc0 	.word	0x1fff8bc0
    5370:	1fff8bfc 	.word	0x1fff8bfc
    5374:	1fff8bc4 	.word	0x1fff8bc4
    5378:	1fff8c00 	.word	0x1fff8c00
    537c:	1fff8b19 	.word	0x1fff8b19
    5380:	1fff8b10 	.word	0x1fff8b10
    5384:	1fff8bc8 	.word	0x1fff8bc8
    5388:	1fff8bcc 	.word	0x1fff8bcc
    538c:	1fff8bd0 	.word	0x1fff8bd0
    5390:	1fff8bd4 	.word	0x1fff8bd4
    5394:	1fff8bd8 	.word	0x1fff8bd8
    5398:	1fff8c04 	.word	0x1fff8c04
    539c:	1fff8bdc 	.word	0x1fff8bdc
    53a0:	1fff8be0 	.word	0x1fff8be0
    53a4:	1fff8c08 	.word	0x1fff8c08
    53a8:	1fff8be4 	.word	0x1fff8be4
    53ac:	1fff8be8 	.word	0x1fff8be8
    53b0:	1fff8c0c 	.word	0x1fff8c0c
    53b4:	1fff8bec 	.word	0x1fff8bec
    53b8:	1fff8bf0 	.word	0x1fff8bf0
    53bc:	1fff8c10 	.word	0x1fff8c10

000053c0 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    53c0:	b500      	push	{lr}
    53c2:	b083      	sub	sp, #12
    53c4:	9001      	str	r0, [sp, #4]
    53c6:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    53c8:	9b01      	ldr	r3, [sp, #4]
    53ca:	2b03      	cmp	r3, #3
    53cc:	f000 8090 	beq.w	54f0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    53d0:	9b01      	ldr	r3, [sp, #4]
    53d2:	2b03      	cmp	r3, #3
    53d4:	f200 80d3 	bhi.w	557e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    53d8:	9b01      	ldr	r3, [sp, #4]
    53da:	2b00      	cmp	r3, #0
    53dc:	d040      	beq.n	5460 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	3b01      	subs	r3, #1
    53e2:	2b01      	cmp	r3, #1
    53e4:	f200 80cb 	bhi.w	557e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    53e8:	9b00      	ldr	r3, [sp, #0]
    53ea:	2b00      	cmp	r3, #0
    53ec:	f040 80c9 	bne.w	5582 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    53f0:	4b68      	ldr	r3, [pc, #416]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    53f2:	2200      	movs	r2, #0
    53f4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    53f6:	4b68      	ldr	r3, [pc, #416]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    53f8:	681b      	ldr	r3, [r3, #0]
    53fa:	685b      	ldr	r3, [r3, #4]
    53fc:	4a67      	ldr	r2, [pc, #412]	; (559c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    53fe:	6812      	ldr	r2, [r2, #0]
    5400:	4610      	mov	r0, r2
    5402:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5404:	4b66      	ldr	r3, [pc, #408]	; (55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	681b      	ldr	r3, [r3, #0]
    540a:	4a66      	ldr	r2, [pc, #408]	; (55a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    540c:	6812      	ldr	r2, [r2, #0]
    540e:	4610      	mov	r0, r2
    5410:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5412:	4b65      	ldr	r3, [pc, #404]	; (55a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	4a64      	ldr	r2, [pc, #400]	; (55ac <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    541a:	6812      	ldr	r2, [r2, #0]
    541c:	4610      	mov	r0, r2
    541e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5420:	4b63      	ldr	r3, [pc, #396]	; (55b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	681b      	ldr	r3, [r3, #0]
    5426:	4a63      	ldr	r2, [pc, #396]	; (55b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5428:	6812      	ldr	r2, [r2, #0]
    542a:	4610      	mov	r0, r2
    542c:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    542e:	4b62      	ldr	r3, [pc, #392]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5430:	681b      	ldr	r3, [r3, #0]
    5432:	691b      	ldr	r3, [r3, #16]
    5434:	4a61      	ldr	r2, [pc, #388]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5436:	6812      	ldr	r2, [r2, #0]
    5438:	6812      	ldr	r2, [r2, #0]
    543a:	4610      	mov	r0, r2
    543c:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    543e:	4b60      	ldr	r3, [pc, #384]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5440:	681b      	ldr	r3, [r3, #0]
    5442:	68db      	ldr	r3, [r3, #12]
    5444:	4a5f      	ldr	r2, [pc, #380]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5446:	6812      	ldr	r2, [r2, #0]
    5448:	6812      	ldr	r2, [r2, #0]
    544a:	4610      	mov	r0, r2
    544c:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    544e:	4b5e      	ldr	r3, [pc, #376]	; (55c8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	689b      	ldr	r3, [r3, #8]
    5454:	4a5d      	ldr	r2, [pc, #372]	; (55cc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5456:	6812      	ldr	r2, [r2, #0]
    5458:	6812      	ldr	r2, [r2, #0]
    545a:	4610      	mov	r0, r2
    545c:	4798      	blx	r3
            }
        }
        break;
    545e:	e090      	b.n	5582 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5460:	9b00      	ldr	r3, [sp, #0]
    5462:	2b02      	cmp	r3, #2
    5464:	f040 808f 	bne.w	5586 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5468:	4b4a      	ldr	r3, [pc, #296]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    546a:	2201      	movs	r2, #1
    546c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    546e:	4b56      	ldr	r3, [pc, #344]	; (55c8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	685b      	ldr	r3, [r3, #4]
    5474:	4a55      	ldr	r2, [pc, #340]	; (55cc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5476:	6812      	ldr	r2, [r2, #0]
    5478:	4610      	mov	r0, r2
    547a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    547c:	4b50      	ldr	r3, [pc, #320]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	691b      	ldr	r3, [r3, #16]
    5482:	4a50      	ldr	r2, [pc, #320]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5484:	6812      	ldr	r2, [r2, #0]
    5486:	4610      	mov	r0, r2
    5488:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    548a:	4b4d      	ldr	r3, [pc, #308]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    548c:	681b      	ldr	r3, [r3, #0]
    548e:	689b      	ldr	r3, [r3, #8]
    5490:	4a4c      	ldr	r2, [pc, #304]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5492:	6812      	ldr	r2, [r2, #0]
    5494:	4610      	mov	r0, r2
    5496:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5498:	4b47      	ldr	r3, [pc, #284]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	68db      	ldr	r3, [r3, #12]
    549e:	4a47      	ldr	r2, [pc, #284]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54a0:	6812      	ldr	r2, [r2, #0]
    54a2:	4610      	mov	r0, r2
    54a4:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    54a6:	4b44      	ldr	r3, [pc, #272]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	689b      	ldr	r3, [r3, #8]
    54ac:	4a43      	ldr	r2, [pc, #268]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54ae:	6812      	ldr	r2, [r2, #0]
    54b0:	6812      	ldr	r2, [r2, #0]
    54b2:	4610      	mov	r0, r2
    54b4:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    54b6:	4b38      	ldr	r3, [pc, #224]	; (5598 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	685b      	ldr	r3, [r3, #4]
    54bc:	4a44      	ldr	r2, [pc, #272]	; (55d0 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    54be:	6812      	ldr	r2, [r2, #0]
    54c0:	4610      	mov	r0, r2
    54c2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    54c4:	4b36      	ldr	r3, [pc, #216]	; (55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	4a42      	ldr	r2, [pc, #264]	; (55d4 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    54cc:	6812      	ldr	r2, [r2, #0]
    54ce:	4610      	mov	r0, r2
    54d0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    54d2:	4b35      	ldr	r3, [pc, #212]	; (55a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	4a3f      	ldr	r2, [pc, #252]	; (55d8 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    54da:	6812      	ldr	r2, [r2, #0]
    54dc:	4610      	mov	r0, r2
    54de:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    54e0:	4b33      	ldr	r3, [pc, #204]	; (55b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	4a3d      	ldr	r2, [pc, #244]	; (55dc <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    54e8:	6812      	ldr	r2, [r2, #0]
    54ea:	4610      	mov	r0, r2
    54ec:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    54ee:	e04a      	b.n	5586 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54f0:	9b00      	ldr	r3, [sp, #0]
    54f2:	2b02      	cmp	r3, #2
    54f4:	d149      	bne.n	558a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54f6:	4b27      	ldr	r3, [pc, #156]	; (5594 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54f8:	2201      	movs	r2, #1
    54fa:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54fc:	4b32      	ldr	r3, [pc, #200]	; (55c8 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54fe:	681b      	ldr	r3, [r3, #0]
    5500:	685b      	ldr	r3, [r3, #4]
    5502:	4a32      	ldr	r2, [pc, #200]	; (55cc <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5504:	6812      	ldr	r2, [r2, #0]
    5506:	4610      	mov	r0, r2
    5508:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    550a:	4b2d      	ldr	r3, [pc, #180]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	691b      	ldr	r3, [r3, #16]
    5510:	4a2c      	ldr	r2, [pc, #176]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5512:	6812      	ldr	r2, [r2, #0]
    5514:	4610      	mov	r0, r2
    5516:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5518:	4b29      	ldr	r3, [pc, #164]	; (55c0 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	689b      	ldr	r3, [r3, #8]
    551e:	4a29      	ldr	r2, [pc, #164]	; (55c4 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5520:	6812      	ldr	r2, [r2, #0]
    5522:	4610      	mov	r0, r2
    5524:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5526:	4b24      	ldr	r3, [pc, #144]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5528:	681b      	ldr	r3, [r3, #0]
    552a:	68db      	ldr	r3, [r3, #12]
    552c:	4a23      	ldr	r2, [pc, #140]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    552e:	6812      	ldr	r2, [r2, #0]
    5530:	4610      	mov	r0, r2
    5532:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5534:	4b20      	ldr	r3, [pc, #128]	; (55b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	689b      	ldr	r3, [r3, #8]
    553a:	4a20      	ldr	r2, [pc, #128]	; (55bc <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    553c:	6812      	ldr	r2, [r2, #0]
    553e:	6812      	ldr	r2, [r2, #0]
    5540:	4610      	mov	r0, r2
    5542:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5544:	4b26      	ldr	r3, [pc, #152]	; (55e0 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5546:	681b      	ldr	r3, [r3, #0]
    5548:	685b      	ldr	r3, [r3, #4]
    554a:	4a26      	ldr	r2, [pc, #152]	; (55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    554c:	6812      	ldr	r2, [r2, #0]
    554e:	4610      	mov	r0, r2
    5550:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5552:	4b25      	ldr	r3, [pc, #148]	; (55e8 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5554:	681b      	ldr	r3, [r3, #0]
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	4a24      	ldr	r2, [pc, #144]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    555a:	6812      	ldr	r2, [r2, #0]
    555c:	4610      	mov	r0, r2
    555e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5560:	4b23      	ldr	r3, [pc, #140]	; (55f0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5562:	681b      	ldr	r3, [r3, #0]
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	4a23      	ldr	r2, [pc, #140]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5568:	6812      	ldr	r2, [r2, #0]
    556a:	4610      	mov	r0, r2
    556c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    556e:	4b22      	ldr	r3, [pc, #136]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	4a21      	ldr	r2, [pc, #132]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5576:	6812      	ldr	r2, [r2, #0]
    5578:	4610      	mov	r0, r2
    557a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    557c:	e005      	b.n	558a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    557e:	bf00      	nop
    5580:	e004      	b.n	558c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5582:	bf00      	nop
    5584:	e002      	b.n	558c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5586:	bf00      	nop
    5588:	e000      	b.n	558c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    558a:	bf00      	nop
    }

}
    558c:	bf00      	nop
    558e:	b003      	add	sp, #12
    5590:	f85d fb04 	ldr.w	pc, [sp], #4
    5594:	1fff8b19 	.word	0x1fff8b19
    5598:	1fff8bb8 	.word	0x1fff8bb8
    559c:	1fff8bd8 	.word	0x1fff8bd8
    55a0:	1fff8bbc 	.word	0x1fff8bbc
    55a4:	1fff8be0 	.word	0x1fff8be0
    55a8:	1fff8bc0 	.word	0x1fff8bc0
    55ac:	1fff8be8 	.word	0x1fff8be8
    55b0:	1fff8bc4 	.word	0x1fff8bc4
    55b4:	1fff8bf0 	.word	0x1fff8bf0
    55b8:	1fff8bac 	.word	0x1fff8bac
    55bc:	1fff8bd0 	.word	0x1fff8bd0
    55c0:	1fff8bb0 	.word	0x1fff8bb0
    55c4:	1fff8bcc 	.word	0x1fff8bcc
    55c8:	1fff8bb4 	.word	0x1fff8bb4
    55cc:	1fff8bc8 	.word	0x1fff8bc8
    55d0:	1fff8bd4 	.word	0x1fff8bd4
    55d4:	1fff8bdc 	.word	0x1fff8bdc
    55d8:	1fff8be4 	.word	0x1fff8be4
    55dc:	1fff8bec 	.word	0x1fff8bec
    55e0:	1fff8bf4 	.word	0x1fff8bf4
    55e4:	1fff8c04 	.word	0x1fff8c04
    55e8:	1fff8bf8 	.word	0x1fff8bf8
    55ec:	1fff8c08 	.word	0x1fff8c08
    55f0:	1fff8bfc 	.word	0x1fff8bfc
    55f4:	1fff8c0c 	.word	0x1fff8c0c
    55f8:	1fff8c00 	.word	0x1fff8c00
    55fc:	1fff8c10 	.word	0x1fff8c10

00005600 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5600:	b500      	push	{lr}
    5602:	b083      	sub	sp, #12
    5604:	9001      	str	r0, [sp, #4]
    5606:	9100      	str	r1, [sp, #0]
    switch(Command)
    5608:	9b00      	ldr	r3, [sp, #0]
    560a:	2b04      	cmp	r3, #4
    560c:	d010      	beq.n	5630 <Clock_Ip_Command+0x30>
    560e:	9b00      	ldr	r3, [sp, #0]
    5610:	2b04      	cmp	r3, #4
    5612:	d811      	bhi.n	5638 <Clock_Ip_Command+0x38>
    5614:	9b00      	ldr	r3, [sp, #0]
    5616:	2b01      	cmp	r3, #1
    5618:	d006      	beq.n	5628 <Clock_Ip_Command+0x28>
    561a:	9b00      	ldr	r3, [sp, #0]
    561c:	2b02      	cmp	r3, #2
    561e:	d10b      	bne.n	5638 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5620:	9801      	ldr	r0, [sp, #4]
    5622:	f7ff fdb3 	bl	518c <Clock_Ip_ClockInitializeObjects>
            break;
    5626:	e008      	b.n	563a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5628:	9801      	ldr	r0, [sp, #4]
    562a:	f7ff f9db 	bl	49e4 <Clock_Ip_SpecificPlatformInitClock>
            break;
    562e:	e004      	b.n	563a <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5630:	9801      	ldr	r0, [sp, #4]
    5632:	f7ff f8ed 	bl	4810 <DisableSafeClock>
            break;
    5636:	e000      	b.n	563a <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5638:	bf00      	nop
    }
}
    563a:	bf00      	nop
    563c:	b003      	add	sp, #12
    563e:	f85d fb04 	ldr.w	pc, [sp], #4
    5642:	bf00      	nop

00005644 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5644:	b500      	push	{lr}
    5646:	b085      	sub	sp, #20
    5648:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    564a:	4a20      	ldr	r2, [pc, #128]	; (56cc <Mcu_Init+0x88>)
    564c:	9b01      	ldr	r3, [sp, #4]
    564e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5650:	2300      	movs	r3, #0
    5652:	9303      	str	r3, [sp, #12]
    5654:	e010      	b.n	5678 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5656:	4b1d      	ldr	r3, [pc, #116]	; (56cc <Mcu_Init+0x88>)
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	6919      	ldr	r1, [r3, #16]
    565c:	9a03      	ldr	r2, [sp, #12]
    565e:	4613      	mov	r3, r2
    5660:	005b      	lsls	r3, r3, #1
    5662:	4413      	add	r3, r2
    5664:	009b      	lsls	r3, r3, #2
    5666:	440b      	add	r3, r1
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	9a03      	ldr	r2, [sp, #12]
    566c:	b2d1      	uxtb	r1, r2
    566e:	4a18      	ldr	r2, [pc, #96]	; (56d0 <Mcu_Init+0x8c>)
    5670:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5672:	9b03      	ldr	r3, [sp, #12]
    5674:	3301      	adds	r3, #1
    5676:	9303      	str	r3, [sp, #12]
    5678:	4b14      	ldr	r3, [pc, #80]	; (56cc <Mcu_Init+0x88>)
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	689b      	ldr	r3, [r3, #8]
    567e:	9a03      	ldr	r2, [sp, #12]
    5680:	429a      	cmp	r2, r3
    5682:	d3e8      	bcc.n	5656 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5684:	2300      	movs	r3, #0
    5686:	9303      	str	r3, [sp, #12]
    5688:	e010      	b.n	56ac <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    568a:	4b10      	ldr	r3, [pc, #64]	; (56cc <Mcu_Init+0x88>)
    568c:	681b      	ldr	r3, [r3, #0]
    568e:	6959      	ldr	r1, [r3, #20]
    5690:	9a03      	ldr	r2, [sp, #12]
    5692:	4613      	mov	r3, r2
    5694:	01db      	lsls	r3, r3, #7
    5696:	1a9b      	subs	r3, r3, r2
    5698:	00db      	lsls	r3, r3, #3
    569a:	440b      	add	r3, r1
    569c:	681b      	ldr	r3, [r3, #0]
    569e:	9a03      	ldr	r2, [sp, #12]
    56a0:	b2d1      	uxtb	r1, r2
    56a2:	4a0c      	ldr	r2, [pc, #48]	; (56d4 <Mcu_Init+0x90>)
    56a4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56a6:	9b03      	ldr	r3, [sp, #12]
    56a8:	3301      	adds	r3, #1
    56aa:	9303      	str	r3, [sp, #12]
    56ac:	4b07      	ldr	r3, [pc, #28]	; (56cc <Mcu_Init+0x88>)
    56ae:	681b      	ldr	r3, [r3, #0]
    56b0:	68db      	ldr	r3, [r3, #12]
    56b2:	9a03      	ldr	r2, [sp, #12]
    56b4:	429a      	cmp	r2, r3
    56b6:	d3e8      	bcc.n	568a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    56b8:	4b04      	ldr	r3, [pc, #16]	; (56cc <Mcu_Init+0x88>)
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	699b      	ldr	r3, [r3, #24]
    56be:	4618      	mov	r0, r3
    56c0:	f000 f88a 	bl	57d8 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    56c4:	bf00      	nop
    56c6:	b005      	add	sp, #20
    56c8:	f85d fb04 	ldr.w	pc, [sp], #4
    56cc:	1fff8cec 	.word	0x1fff8cec
    56d0:	1fff8ce8 	.word	0x1fff8ce8
    56d4:	1fff8ce4 	.word	0x1fff8ce4

000056d8 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    56d8:	b084      	sub	sp, #16
    56da:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    56dc:	2301      	movs	r3, #1
    56de:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    56e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    56e6:	4618      	mov	r0, r3
    56e8:	b004      	add	sp, #16
    56ea:	4770      	bx	lr

000056ec <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    56ec:	b500      	push	{lr}
    56ee:	b085      	sub	sp, #20
    56f0:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    56f2:	4a0e      	ldr	r2, [pc, #56]	; (572c <Mcu_InitClock+0x40>)
    56f4:	9b01      	ldr	r3, [sp, #4]
    56f6:	4413      	add	r3, r2
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    56fe:	4b0c      	ldr	r3, [pc, #48]	; (5730 <Mcu_InitClock+0x44>)
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	6959      	ldr	r1, [r3, #20]
    5704:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5708:	4613      	mov	r3, r2
    570a:	01db      	lsls	r3, r3, #7
    570c:	1a9b      	subs	r3, r3, r2
    570e:	00db      	lsls	r3, r3, #3
    5710:	440b      	add	r3, r1
    5712:	4618      	mov	r0, r3
    5714:	f000 f86a 	bl	57ec <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5718:	2300      	movs	r3, #0
    571a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    571e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5722:	4618      	mov	r0, r3
    5724:	b005      	add	sp, #20
    5726:	f85d fb04 	ldr.w	pc, [sp], #4
    572a:	bf00      	nop
    572c:	1fff8ce4 	.word	0x1fff8ce4
    5730:	1fff8cec 	.word	0x1fff8cec

00005734 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5734:	b500      	push	{lr}
    5736:	b085      	sub	sp, #20
    5738:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    573a:	4a0d      	ldr	r2, [pc, #52]	; (5770 <Mcu_SetMode+0x3c>)
    573c:	9b01      	ldr	r3, [sp, #4]
    573e:	4413      	add	r3, r2
    5740:	781b      	ldrb	r3, [r3, #0]
    5742:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5746:	f001 fb27 	bl	6d98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    574a:	4b0a      	ldr	r3, [pc, #40]	; (5774 <Mcu_SetMode+0x40>)
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	6919      	ldr	r1, [r3, #16]
    5750:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5754:	4613      	mov	r3, r2
    5756:	005b      	lsls	r3, r3, #1
    5758:	4413      	add	r3, r2
    575a:	009b      	lsls	r3, r3, #2
    575c:	440b      	add	r3, r1
    575e:	4618      	mov	r0, r3
    5760:	f000 f84e 	bl	5800 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5764:	f001 fb44 	bl	6df0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5768:	bf00      	nop
    576a:	b005      	add	sp, #20
    576c:	f85d fb04 	ldr.w	pc, [sp], #4
    5770:	1fff8ce8 	.word	0x1fff8ce8
    5774:	1fff8cec 	.word	0x1fff8cec

00005778 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5778:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    577a:	2302      	movs	r3, #2
    577c:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    577e:	9b01      	ldr	r3, [sp, #4]
}
    5780:	4618      	mov	r0, r3
    5782:	b002      	add	sp, #8
    5784:	4770      	bx	lr

00005786 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5786:	b500      	push	{lr}
    5788:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    578a:	f000 f843 	bl	5814 <Mcu_Ipw_GetResetReason>
    578e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5790:	9b01      	ldr	r3, [sp, #4]
}
    5792:	4618      	mov	r0, r3
    5794:	b003      	add	sp, #12
    5796:	f85d fb04 	ldr.w	pc, [sp], #4

0000579a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    579a:	b500      	push	{lr}
    579c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    579e:	f000 f83f 	bl	5820 <Mcu_Ipw_GetResetRawValue>
    57a2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    57a4:	9b01      	ldr	r3, [sp, #4]
}
    57a6:	4618      	mov	r0, r3
    57a8:	b003      	add	sp, #12
    57aa:	f85d fb04 	ldr.w	pc, [sp], #4

000057ae <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    57ae:	b500      	push	{lr}
    57b0:	b083      	sub	sp, #12
    57b2:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    57b4:	9801      	ldr	r0, [sp, #4]
    57b6:	f000 f839 	bl	582c <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    57ba:	bf00      	nop
    57bc:	b003      	add	sp, #12
    57be:	f85d fb04 	ldr.w	pc, [sp], #4

000057c2 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    57c2:	b082      	sub	sp, #8
    57c4:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    57c6:	4b03      	ldr	r3, [pc, #12]	; (57d4 <Mcu_ClkSrcFailureNotification+0x12>)
    57c8:	681b      	ldr	r3, [r3, #0]
    57ca:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    57cc:	bf00      	nop
    57ce:	b002      	add	sp, #8
    57d0:	4770      	bx	lr
    57d2:	bf00      	nop
    57d4:	1fff8cec 	.word	0x1fff8cec

000057d8 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    57d8:	b500      	push	{lr}
    57da:	b083      	sub	sp, #12
    57dc:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    57de:	9801      	ldr	r0, [sp, #4]
    57e0:	f000 f882 	bl	58e8 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    57e4:	bf00      	nop
    57e6:	b003      	add	sp, #12
    57e8:	f85d fb04 	ldr.w	pc, [sp], #4

000057ec <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    57ec:	b500      	push	{lr}
    57ee:	b083      	sub	sp, #12
    57f0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    57f2:	9801      	ldr	r0, [sp, #4]
    57f4:	f7fc fc6a 	bl	20cc <Clock_Ip_InitClock>
}
    57f8:	bf00      	nop
    57fa:	b003      	add	sp, #12
    57fc:	f85d fb04 	ldr.w	pc, [sp], #4

00005800 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5800:	b500      	push	{lr}
    5802:	b083      	sub	sp, #12
    5804:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5806:	9801      	ldr	r0, [sp, #4]
    5808:	f000 f820 	bl	584c <Power_Ip_SetMode>
}
    580c:	bf00      	nop
    580e:	b003      	add	sp, #12
    5810:	f85d fb04 	ldr.w	pc, [sp], #4

00005814 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5814:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5816:	f000 f84f 	bl	58b8 <Power_Ip_GetResetReason>
    581a:	4603      	mov	r3, r0
}
    581c:	4618      	mov	r0, r3
    581e:	bd08      	pop	{r3, pc}

00005820 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5820:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5822:	f000 f857 	bl	58d4 <Power_Ip_GetResetRawValue>
    5826:	4603      	mov	r3, r0
}
    5828:	4618      	mov	r0, r3
    582a:	bd08      	pop	{r3, pc}

0000582c <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    582c:	b500      	push	{lr}
    582e:	b083      	sub	sp, #12
    5830:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5832:	9b01      	ldr	r3, [sp, #4]
    5834:	2b00      	cmp	r3, #0
    5836:	d102      	bne.n	583e <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5838:	f000 f86c 	bl	5914 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    583c:	e001      	b.n	5842 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    583e:	f000 f86e 	bl	591e <Power_Ip_EnableSleepOnExit>
}
    5842:	bf00      	nop
    5844:	b003      	add	sp, #12
    5846:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000584c <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    584c:	b500      	push	{lr}
    584e:	b085      	sub	sp, #20
    5850:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5852:	9b01      	ldr	r3, [sp, #4]
    5854:	685b      	ldr	r3, [r3, #4]
    5856:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5858:	9802      	ldr	r0, [sp, #8]
    585a:	f000 f9f5 	bl	5c48 <Power_Ip_SMC_ModeCheckEntry>
    585e:	4603      	mov	r3, r0
    5860:	2b00      	cmp	r3, #0
    5862:	d002      	beq.n	586a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5864:	2301      	movs	r3, #1
    5866:	9303      	str	r3, [sp, #12]
    5868:	e003      	b.n	5872 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    586a:	9801      	ldr	r0, [sp, #4]
    586c:	f000 fa1e 	bl	5cac <Power_Ip_SMC_ModeConfig>
    5870:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5872:	9b03      	ldr	r3, [sp, #12]
    5874:	2b01      	cmp	r3, #1
    5876:	d103      	bne.n	5880 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5878:	21ff      	movs	r1, #255	; 0xff
    587a:	2003      	movs	r0, #3
    587c:	f000 f8f4 	bl	5a68 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5880:	bf00      	nop
    5882:	b005      	add	sp, #20
    5884:	f85d fb04 	ldr.w	pc, [sp], #4

00005888 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5888:	b084      	sub	sp, #16
    588a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    588c:	230c      	movs	r3, #12
    588e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5890:	4a08      	ldr	r2, [pc, #32]	; (58b4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5898:	2b0e      	cmp	r3, #14
    589a:	d805      	bhi.n	58a8 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    589c:	4a05      	ldr	r2, [pc, #20]	; (58b4 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    589e:	9b01      	ldr	r3, [sp, #4]
    58a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58a4:	9303      	str	r3, [sp, #12]
    58a6:	e001      	b.n	58ac <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    58a8:	230c      	movs	r3, #12
    58aa:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    58ac:	9b03      	ldr	r3, [sp, #12]
}
    58ae:	4618      	mov	r0, r3
    58b0:	b004      	add	sp, #16
    58b2:	4770      	bx	lr
    58b4:	00008a48 	.word	0x00008a48

000058b8 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    58b8:	b500      	push	{lr}
    58ba:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    58bc:	f000 f940 	bl	5b40 <Power_Ip_RCM_GetResetReason>
    58c0:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    58c2:	9801      	ldr	r0, [sp, #4]
    58c4:	f7ff ffe0 	bl	5888 <Power_Ip_ConvertIntergeToResetType>
    58c8:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    58ca:	9b00      	ldr	r3, [sp, #0]
}
    58cc:	4618      	mov	r0, r3
    58ce:	b003      	add	sp, #12
    58d0:	f85d fb04 	ldr.w	pc, [sp], #4

000058d4 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    58d4:	b500      	push	{lr}
    58d6:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    58d8:	f000 f98a 	bl	5bf0 <Power_Ip_RCM_GetResetRawValue>
    58dc:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    58de:	9b01      	ldr	r3, [sp, #4]
}
    58e0:	4618      	mov	r0, r3
    58e2:	b003      	add	sp, #12
    58e4:	f85d fb04 	ldr.w	pc, [sp], #4

000058e8 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    58e8:	b500      	push	{lr}
    58ea:	b083      	sub	sp, #12
    58ec:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    58ee:	9b01      	ldr	r3, [sp, #4]
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	4618      	mov	r0, r3
    58f4:	f000 f90e 	bl	5b14 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    58f8:	9b01      	ldr	r3, [sp, #4]
    58fa:	685b      	ldr	r3, [r3, #4]
    58fc:	4618      	mov	r0, r3
    58fe:	f000 f86d 	bl	59dc <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5902:	9b01      	ldr	r3, [sp, #4]
    5904:	689b      	ldr	r3, [r3, #8]
    5906:	4618      	mov	r0, r3
    5908:	f000 f990 	bl	5c2c <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    590c:	bf00      	nop
    590e:	b003      	add	sp, #12
    5910:	f85d fb04 	ldr.w	pc, [sp], #4

00005914 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5914:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5916:	f000 f811 	bl	593c <Power_Ip_CM4_DisableSleepOnExit>
}
    591a:	bf00      	nop
    591c:	bd08      	pop	{r3, pc}

0000591e <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    591e:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5920:	f000 f820 	bl	5964 <Power_Ip_CM4_EnableSleepOnExit>
}
    5924:	bf00      	nop
    5926:	bd08      	pop	{r3, pc}

00005928 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5928:	b082      	sub	sp, #8
    592a:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    592c:	4a02      	ldr	r2, [pc, #8]	; (5938 <Power_Ip_InstallNotificationsCallback+0x10>)
    592e:	9b01      	ldr	r3, [sp, #4]
    5930:	6013      	str	r3, [r2, #0]
}
    5932:	bf00      	nop
    5934:	b002      	add	sp, #8
    5936:	4770      	bx	lr
    5938:	1fff8b1c 	.word	0x1fff8b1c

0000593c <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    593c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    593e:	2300      	movs	r3, #0
    5940:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5942:	4b07      	ldr	r3, [pc, #28]	; (5960 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5944:	681b      	ldr	r3, [r3, #0]
    5946:	685b      	ldr	r3, [r3, #4]
    5948:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    594a:	9b01      	ldr	r3, [sp, #4]
    594c:	f023 0302 	bic.w	r3, r3, #2
    5950:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5952:	4b03      	ldr	r3, [pc, #12]	; (5960 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	9a01      	ldr	r2, [sp, #4]
    5958:	605a      	str	r2, [r3, #4]
}
    595a:	bf00      	nop
    595c:	b002      	add	sp, #8
    595e:	4770      	bx	lr
    5960:	1fff8b20 	.word	0x1fff8b20

00005964 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5964:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5966:	2300      	movs	r3, #0
    5968:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    596a:	4b07      	ldr	r3, [pc, #28]	; (5988 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	685b      	ldr	r3, [r3, #4]
    5970:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5972:	9b01      	ldr	r3, [sp, #4]
    5974:	f043 0302 	orr.w	r3, r3, #2
    5978:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    597a:	4b03      	ldr	r3, [pc, #12]	; (5988 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	9a01      	ldr	r2, [sp, #4]
    5980:	605a      	str	r2, [r3, #4]
}
    5982:	bf00      	nop
    5984:	b002      	add	sp, #8
    5986:	4770      	bx	lr
    5988:	1fff8b20 	.word	0x1fff8b20

0000598c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    598c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    598e:	2300      	movs	r3, #0
    5990:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5992:	4b07      	ldr	r3, [pc, #28]	; (59b0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	685b      	ldr	r3, [r3, #4]
    5998:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    599a:	9b01      	ldr	r3, [sp, #4]
    599c:	f043 0304 	orr.w	r3, r3, #4
    59a0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59a2:	4b03      	ldr	r3, [pc, #12]	; (59b0 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	9a01      	ldr	r2, [sp, #4]
    59a8:	605a      	str	r2, [r3, #4]
}
    59aa:	bf00      	nop
    59ac:	b002      	add	sp, #8
    59ae:	4770      	bx	lr
    59b0:	1fff8b20 	.word	0x1fff8b20

000059b4 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    59b4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59b6:	2300      	movs	r3, #0
    59b8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59ba:	4b07      	ldr	r3, [pc, #28]	; (59d8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	685b      	ldr	r3, [r3, #4]
    59c0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    59c2:	9b01      	ldr	r3, [sp, #4]
    59c4:	f023 0304 	bic.w	r3, r3, #4
    59c8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59ca:	4b03      	ldr	r3, [pc, #12]	; (59d8 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	9a01      	ldr	r2, [sp, #4]
    59d0:	605a      	str	r2, [r3, #4]
}
    59d2:	bf00      	nop
    59d4:	b002      	add	sp, #8
    59d6:	4770      	bx	lr
    59d8:	1fff8b20 	.word	0x1fff8b20

000059dc <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    59dc:	b084      	sub	sp, #16
    59de:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    59e0:	4b20      	ldr	r3, [pc, #128]	; (5a64 <Power_Ip_PMC_PowerInit+0x88>)
    59e2:	781b      	ldrb	r3, [r3, #0]
    59e4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    59e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59ec:	f003 030f 	and.w	r3, r3, #15
    59f0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	781a      	ldrb	r2, [r3, #0]
    59f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59fc:	4313      	orrs	r3, r2
    59fe:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a02:	4a18      	ldr	r2, [pc, #96]	; (5a64 <Power_Ip_PMC_PowerInit+0x88>)
    5a04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a08:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a0a:	4b16      	ldr	r3, [pc, #88]	; (5a64 <Power_Ip_PMC_PowerInit+0x88>)
    5a0c:	785b      	ldrb	r3, [r3, #1]
    5a0e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a16:	f003 031f 	and.w	r3, r3, #31
    5a1a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a1e:	9b01      	ldr	r3, [sp, #4]
    5a20:	785a      	ldrb	r2, [r3, #1]
    5a22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a26:	4313      	orrs	r3, r2
    5a28:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a2c:	4a0d      	ldr	r2, [pc, #52]	; (5a64 <Power_Ip_PMC_PowerInit+0x88>)
    5a2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a32:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a34:	4b0b      	ldr	r3, [pc, #44]	; (5a64 <Power_Ip_PMC_PowerInit+0x88>)
    5a36:	789b      	ldrb	r3, [r3, #2]
    5a38:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a44:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5a48:	9b01      	ldr	r3, [sp, #4]
    5a4a:	789a      	ldrb	r2, [r3, #2]
    5a4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a50:	4313      	orrs	r3, r2
    5a52:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5a56:	4a03      	ldr	r2, [pc, #12]	; (5a64 <Power_Ip_PMC_PowerInit+0x88>)
    5a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a5c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5a5e:	bf00      	nop
    5a60:	b004      	add	sp, #16
    5a62:	4770      	bx	lr
    5a64:	4007d000 	.word	0x4007d000

00005a68 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a68:	b500      	push	{lr}
    5a6a:	b083      	sub	sp, #12
    5a6c:	9001      	str	r0, [sp, #4]
    5a6e:	460b      	mov	r3, r1
    5a70:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5a74:	4b05      	ldr	r3, [pc, #20]	; (5a8c <Power_Ip_ReportPowerErrors+0x24>)
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5a7c:	4611      	mov	r1, r2
    5a7e:	9801      	ldr	r0, [sp, #4]
    5a80:	4798      	blx	r3
}
    5a82:	bf00      	nop
    5a84:	b003      	add	sp, #12
    5a86:	f85d fb04 	ldr.w	pc, [sp], #4
    5a8a:	bf00      	nop
    5a8c:	1fff8b1c 	.word	0x1fff8b1c

00005a90 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5a90:	b082      	sub	sp, #8
    5a92:	9001      	str	r0, [sp, #4]
    5a94:	460b      	mov	r3, r1
    5a96:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5a9a:	bf00      	nop
    5a9c:	b002      	add	sp, #8
    5a9e:	4770      	bx	lr

00005aa0 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5aa0:	b500      	push	{lr}
    5aa2:	b085      	sub	sp, #20
    5aa4:	9003      	str	r0, [sp, #12]
    5aa6:	9102      	str	r1, [sp, #8]
    5aa8:	9201      	str	r2, [sp, #4]
    5aaa:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5aac:	2000      	movs	r0, #0
    5aae:	f7fc f83c 	bl	1b2a <OsIf_GetCounter>
    5ab2:	4602      	mov	r2, r0
    5ab4:	9b03      	ldr	r3, [sp, #12]
    5ab6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5ab8:	9b02      	ldr	r3, [sp, #8]
    5aba:	2200      	movs	r2, #0
    5abc:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5abe:	2100      	movs	r1, #0
    5ac0:	9800      	ldr	r0, [sp, #0]
    5ac2:	f7fc f87e 	bl	1bc2 <OsIf_MicrosToTicks>
    5ac6:	4602      	mov	r2, r0
    5ac8:	9b01      	ldr	r3, [sp, #4]
    5aca:	601a      	str	r2, [r3, #0]
}
    5acc:	bf00      	nop
    5ace:	b005      	add	sp, #20
    5ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ad4 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5ad4:	b500      	push	{lr}
    5ad6:	b087      	sub	sp, #28
    5ad8:	9003      	str	r0, [sp, #12]
    5ada:	9102      	str	r1, [sp, #8]
    5adc:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5ade:	2300      	movs	r3, #0
    5ae0:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5ae4:	2100      	movs	r1, #0
    5ae6:	9803      	ldr	r0, [sp, #12]
    5ae8:	f7fc f838 	bl	1b5c <OsIf_GetElapsed>
    5aec:	4602      	mov	r2, r0
    5aee:	9b02      	ldr	r3, [sp, #8]
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	441a      	add	r2, r3
    5af4:	9b02      	ldr	r3, [sp, #8]
    5af6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5af8:	9b02      	ldr	r3, [sp, #8]
    5afa:	681b      	ldr	r3, [r3, #0]
    5afc:	9a01      	ldr	r2, [sp, #4]
    5afe:	429a      	cmp	r2, r3
    5b00:	d802      	bhi.n	5b08 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b02:	2301      	movs	r3, #1
    5b04:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b08:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b0c:	4618      	mov	r0, r3
    5b0e:	b007      	add	sp, #28
    5b10:	f85d fb04 	ldr.w	pc, [sp], #4

00005b14 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b14:	b082      	sub	sp, #8
    5b16:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b18:	9b01      	ldr	r3, [sp, #4]
    5b1a:	681a      	ldr	r2, [r3, #0]
    5b1c:	4907      	ldr	r1, [pc, #28]	; (5b3c <Power_Ip_RCM_ResetInit+0x28>)
    5b1e:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b22:	4013      	ands	r3, r2
    5b24:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b26:	9b01      	ldr	r3, [sp, #4]
    5b28:	685a      	ldr	r2, [r3, #4]
    5b2a:	4904      	ldr	r1, [pc, #16]	; (5b3c <Power_Ip_RCM_ResetInit+0x28>)
    5b2c:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b30:	4013      	ands	r3, r2
    5b32:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b34:	bf00      	nop
    5b36:	b002      	add	sp, #8
    5b38:	4770      	bx	lr
    5b3a:	bf00      	nop
    5b3c:	4007f000 	.word	0x4007f000

00005b40 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5b40:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5b42:	230c      	movs	r3, #12
    5b44:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b46:	2300      	movs	r3, #0
    5b48:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5b4a:	2300      	movs	r3, #0
    5b4c:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5b4e:	2300      	movs	r3, #0
    5b50:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5b52:	4b25      	ldr	r3, [pc, #148]	; (5be8 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b54:	699a      	ldr	r2, [r3, #24]
    5b56:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b5a:	4013      	ands	r3, r2
    5b5c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5b5e:	9b03      	ldr	r3, [sp, #12]
    5b60:	2b00      	cmp	r3, #0
    5b62:	d008      	beq.n	5b76 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5b64:	4920      	ldr	r1, [pc, #128]	; (5be8 <Power_Ip_RCM_GetResetReason+0xa8>)
    5b66:	9a03      	ldr	r2, [sp, #12]
    5b68:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b6c:	4013      	ands	r3, r2
    5b6e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5b70:	4a1e      	ldr	r2, [pc, #120]	; (5bec <Power_Ip_RCM_GetResetReason+0xac>)
    5b72:	9b03      	ldr	r3, [sp, #12]
    5b74:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5b76:	4b1d      	ldr	r3, [pc, #116]	; (5bec <Power_Ip_RCM_GetResetReason+0xac>)
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5b7c:	9a02      	ldr	r2, [sp, #8]
    5b7e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5b82:	4013      	ands	r3, r2
    5b84:	2b82      	cmp	r3, #130	; 0x82
    5b86:	d102      	bne.n	5b8e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5b88:	2305      	movs	r3, #5
    5b8a:	9307      	str	r3, [sp, #28]
    5b8c:	e027      	b.n	5bde <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5b8e:	2300      	movs	r3, #0
    5b90:	9306      	str	r3, [sp, #24]
    5b92:	e021      	b.n	5bd8 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5b94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5b98:	9b06      	ldr	r3, [sp, #24]
    5b9a:	fa22 f303 	lsr.w	r3, r2, r3
    5b9e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5ba0:	9a01      	ldr	r2, [sp, #4]
    5ba2:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5ba6:	4013      	ands	r3, r2
    5ba8:	2b00      	cmp	r3, #0
    5baa:	d012      	beq.n	5bd2 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5bac:	9a01      	ldr	r2, [sp, #4]
    5bae:	9b02      	ldr	r3, [sp, #8]
    5bb0:	4013      	ands	r3, r2
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	d00a      	beq.n	5bcc <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5bb6:	9b05      	ldr	r3, [sp, #20]
    5bb8:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5bba:	9b04      	ldr	r3, [sp, #16]
    5bbc:	3301      	adds	r3, #1
    5bbe:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5bc0:	9b04      	ldr	r3, [sp, #16]
    5bc2:	2b01      	cmp	r3, #1
    5bc4:	d902      	bls.n	5bcc <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5bc6:	230d      	movs	r3, #13
    5bc8:	9307      	str	r3, [sp, #28]
                        break;
    5bca:	e008      	b.n	5bde <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5bcc:	9b05      	ldr	r3, [sp, #20]
    5bce:	3301      	adds	r3, #1
    5bd0:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5bd2:	9b06      	ldr	r3, [sp, #24]
    5bd4:	3301      	adds	r3, #1
    5bd6:	9306      	str	r3, [sp, #24]
    5bd8:	9b06      	ldr	r3, [sp, #24]
    5bda:	2b1f      	cmp	r3, #31
    5bdc:	d9da      	bls.n	5b94 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5bde:	9b07      	ldr	r3, [sp, #28]
}
    5be0:	4618      	mov	r0, r3
    5be2:	b008      	add	sp, #32
    5be4:	4770      	bx	lr
    5be6:	bf00      	nop
    5be8:	4007f000 	.word	0x4007f000
    5bec:	1fff8cf0 	.word	0x1fff8cf0

00005bf0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5bf0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bf2:	4b0c      	ldr	r3, [pc, #48]	; (5c24 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5bf4:	699a      	ldr	r2, [r3, #24]
    5bf6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bfa:	4013      	ands	r3, r2
    5bfc:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5bfe:	9b01      	ldr	r3, [sp, #4]
    5c00:	2b00      	cmp	r3, #0
    5c02:	d008      	beq.n	5c16 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c04:	4907      	ldr	r1, [pc, #28]	; (5c24 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c06:	9a01      	ldr	r2, [sp, #4]
    5c08:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c0c:	4013      	ands	r3, r2
    5c0e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c10:	4a05      	ldr	r2, [pc, #20]	; (5c28 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c12:	9b01      	ldr	r3, [sp, #4]
    5c14:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c16:	4b04      	ldr	r3, [pc, #16]	; (5c28 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c1c:	9b00      	ldr	r3, [sp, #0]
}
    5c1e:	4618      	mov	r0, r3
    5c20:	b002      	add	sp, #8
    5c22:	4770      	bx	lr
    5c24:	4007f000 	.word	0x4007f000
    5c28:	1fff8cf0 	.word	0x1fff8cf0

00005c2c <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c2c:	b082      	sub	sp, #8
    5c2e:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c30:	9b01      	ldr	r3, [sp, #4]
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	4a03      	ldr	r2, [pc, #12]	; (5c44 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c3a:	6093      	str	r3, [r2, #8]
}
    5c3c:	bf00      	nop
    5c3e:	b002      	add	sp, #8
    5c40:	4770      	bx	lr
    5c42:	bf00      	nop
    5c44:	4007e000 	.word	0x4007e000

00005c48 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5c48:	b084      	sub	sp, #16
    5c4a:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5c4c:	2301      	movs	r3, #1
    5c4e:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5c50:	4b15      	ldr	r3, [pc, #84]	; (5ca8 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5c52:	695b      	ldr	r3, [r3, #20]
    5c54:	b2db      	uxtb	r3, r3
    5c56:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5c58:	9b01      	ldr	r3, [sp, #4]
    5c5a:	2b02      	cmp	r3, #2
    5c5c:	d012      	beq.n	5c84 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5c5e:	9b01      	ldr	r3, [sp, #4]
    5c60:	2b02      	cmp	r3, #2
    5c62:	d818      	bhi.n	5c96 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5c64:	9b01      	ldr	r3, [sp, #4]
    5c66:	2b00      	cmp	r3, #0
    5c68:	d003      	beq.n	5c72 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5c6a:	9b01      	ldr	r3, [sp, #4]
    5c6c:	2b01      	cmp	r3, #1
    5c6e:	d003      	beq.n	5c78 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5c70:	e011      	b.n	5c96 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5c72:	2300      	movs	r3, #0
    5c74:	9303      	str	r3, [sp, #12]
            break;
    5c76:	e013      	b.n	5ca0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5c78:	9b02      	ldr	r3, [sp, #8]
    5c7a:	2b01      	cmp	r3, #1
    5c7c:	d10d      	bne.n	5c9a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c7e:	2300      	movs	r3, #0
    5c80:	9303      	str	r3, [sp, #12]
            break;
    5c82:	e00a      	b.n	5c9a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5c84:	9b02      	ldr	r3, [sp, #8]
    5c86:	2b01      	cmp	r3, #1
    5c88:	d002      	beq.n	5c90 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5c8a:	9b02      	ldr	r3, [sp, #8]
    5c8c:	2b10      	cmp	r3, #16
    5c8e:	d106      	bne.n	5c9e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5c90:	2300      	movs	r3, #0
    5c92:	9303      	str	r3, [sp, #12]
            break;
    5c94:	e003      	b.n	5c9e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5c96:	bf00      	nop
    5c98:	e002      	b.n	5ca0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c9a:	bf00      	nop
    5c9c:	e000      	b.n	5ca0 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5c9e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5ca0:	9b03      	ldr	r3, [sp, #12]
}
    5ca2:	4618      	mov	r0, r3
    5ca4:	b004      	add	sp, #16
    5ca6:	4770      	bx	lr
    5ca8:	4007e000 	.word	0x4007e000

00005cac <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5cac:	b500      	push	{lr}
    5cae:	b08b      	sub	sp, #44	; 0x2c
    5cb0:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5cb2:	2300      	movs	r3, #0
    5cb4:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5cb6:	2300      	movs	r3, #0
    5cb8:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5cba:	2300      	movs	r3, #0
    5cbc:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5cc0:	9b01      	ldr	r3, [sp, #4]
    5cc2:	685b      	ldr	r3, [r3, #4]
    5cc4:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5cc6:	9b08      	ldr	r3, [sp, #32]
    5cc8:	2b02      	cmp	r3, #2
    5cca:	d076      	beq.n	5dba <Power_Ip_SMC_ModeConfig+0x10e>
    5ccc:	9b08      	ldr	r3, [sp, #32]
    5cce:	2b02      	cmp	r3, #2
    5cd0:	f200 80ab 	bhi.w	5e2a <Power_Ip_SMC_ModeConfig+0x17e>
    5cd4:	9b08      	ldr	r3, [sp, #32]
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d003      	beq.n	5ce2 <Power_Ip_SMC_ModeConfig+0x36>
    5cda:	9b08      	ldr	r3, [sp, #32]
    5cdc:	2b01      	cmp	r3, #1
    5cde:	d034      	beq.n	5d4a <Power_Ip_SMC_ModeConfig+0x9e>
    5ce0:	e0a3      	b.n	5e2a <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5ce2:	4b58      	ldr	r3, [pc, #352]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5ce4:	68db      	ldr	r3, [r3, #12]
    5ce6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5ce8:	9b06      	ldr	r3, [sp, #24]
    5cea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5cee:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5cf0:	4a54      	ldr	r2, [pc, #336]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5cf2:	9b06      	ldr	r3, [sp, #24]
    5cf4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5cf6:	aa02      	add	r2, sp, #8
    5cf8:	a903      	add	r1, sp, #12
    5cfa:	a804      	add	r0, sp, #16
    5cfc:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d00:	f7ff fece 	bl	5aa0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d04:	9a02      	ldr	r2, [sp, #8]
    5d06:	a903      	add	r1, sp, #12
    5d08:	ab04      	add	r3, sp, #16
    5d0a:	4618      	mov	r0, r3
    5d0c:	f7ff fee2 	bl	5ad4 <Power_Ip_TimeoutExpired>
    5d10:	4603      	mov	r3, r0
    5d12:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d16:	4b4b      	ldr	r3, [pc, #300]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5d18:	695b      	ldr	r3, [r3, #20]
    5d1a:	f003 0301 	and.w	r3, r3, #1
    5d1e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d20:	9b05      	ldr	r3, [sp, #20]
    5d22:	2b01      	cmp	r3, #1
    5d24:	d006      	beq.n	5d34 <Power_Ip_SMC_ModeConfig+0x88>
    5d26:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d2a:	f083 0301 	eor.w	r3, r3, #1
    5d2e:	b2db      	uxtb	r3, r3
    5d30:	2b00      	cmp	r3, #0
    5d32:	d1e7      	bne.n	5d04 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d34:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d079      	beq.n	5e30 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d3c:	2301      	movs	r3, #1
    5d3e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d40:	21ff      	movs	r1, #255	; 0xff
    5d42:	2000      	movs	r0, #0
    5d44:	f7ff fe90 	bl	5a68 <Power_Ip_ReportPowerErrors>
            }

            break;
    5d48:	e072      	b.n	5e30 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5d4a:	4b3e      	ldr	r3, [pc, #248]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5d4c:	68db      	ldr	r3, [r3, #12]
    5d4e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d50:	9b06      	ldr	r3, [sp, #24]
    5d52:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d56:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5d58:	9b06      	ldr	r3, [sp, #24]
    5d5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5d5e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5d60:	4a38      	ldr	r2, [pc, #224]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5d62:	9b06      	ldr	r3, [sp, #24]
    5d64:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d66:	aa02      	add	r2, sp, #8
    5d68:	a903      	add	r1, sp, #12
    5d6a:	a804      	add	r0, sp, #16
    5d6c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d70:	f7ff fe96 	bl	5aa0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d74:	9a02      	ldr	r2, [sp, #8]
    5d76:	a903      	add	r1, sp, #12
    5d78:	ab04      	add	r3, sp, #16
    5d7a:	4618      	mov	r0, r3
    5d7c:	f7ff feaa 	bl	5ad4 <Power_Ip_TimeoutExpired>
    5d80:	4603      	mov	r3, r0
    5d82:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5d86:	4b2f      	ldr	r3, [pc, #188]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5d88:	695b      	ldr	r3, [r3, #20]
    5d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d8e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d90:	9b05      	ldr	r3, [sp, #20]
    5d92:	2b80      	cmp	r3, #128	; 0x80
    5d94:	d006      	beq.n	5da4 <Power_Ip_SMC_ModeConfig+0xf8>
    5d96:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d9a:	f083 0301 	eor.w	r3, r3, #1
    5d9e:	b2db      	uxtb	r3, r3
    5da0:	2b00      	cmp	r3, #0
    5da2:	d1e7      	bne.n	5d74 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5da4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5da8:	2b00      	cmp	r3, #0
    5daa:	d043      	beq.n	5e34 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dac:	2301      	movs	r3, #1
    5dae:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5db0:	21ff      	movs	r1, #255	; 0xff
    5db2:	2000      	movs	r0, #0
    5db4:	f7ff fe58 	bl	5a68 <Power_Ip_ReportPowerErrors>
            }

            break;
    5db8:	e03c      	b.n	5e34 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5dba:	4b22      	ldr	r3, [pc, #136]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5dbc:	68db      	ldr	r3, [r3, #12]
    5dbe:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5dc0:	9b06      	ldr	r3, [sp, #24]
    5dc2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5dc6:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5dc8:	9b06      	ldr	r3, [sp, #24]
    5dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5dce:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5dd0:	4a1c      	ldr	r2, [pc, #112]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5dd2:	9b06      	ldr	r3, [sp, #24]
    5dd4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5dd6:	aa02      	add	r2, sp, #8
    5dd8:	a903      	add	r1, sp, #12
    5dda:	a804      	add	r0, sp, #16
    5ddc:	f24c 3350 	movw	r3, #50000	; 0xc350
    5de0:	f7ff fe5e 	bl	5aa0 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5de4:	9a02      	ldr	r2, [sp, #8]
    5de6:	a903      	add	r1, sp, #12
    5de8:	ab04      	add	r3, sp, #16
    5dea:	4618      	mov	r0, r3
    5dec:	f7ff fe72 	bl	5ad4 <Power_Ip_TimeoutExpired>
    5df0:	4603      	mov	r3, r0
    5df2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5df6:	4b13      	ldr	r3, [pc, #76]	; (5e44 <Power_Ip_SMC_ModeConfig+0x198>)
    5df8:	695b      	ldr	r3, [r3, #20]
    5dfa:	f003 0304 	and.w	r3, r3, #4
    5dfe:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e00:	9b05      	ldr	r3, [sp, #20]
    5e02:	2b04      	cmp	r3, #4
    5e04:	d006      	beq.n	5e14 <Power_Ip_SMC_ModeConfig+0x168>
    5e06:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e0a:	f083 0301 	eor.w	r3, r3, #1
    5e0e:	b2db      	uxtb	r3, r3
    5e10:	2b00      	cmp	r3, #0
    5e12:	d1e7      	bne.n	5de4 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e14:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d00d      	beq.n	5e38 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e1c:	2301      	movs	r3, #1
    5e1e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e20:	21ff      	movs	r1, #255	; 0xff
    5e22:	2000      	movs	r0, #0
    5e24:	f7ff fe20 	bl	5a68 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e28:	e006      	b.n	5e38 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e2a:	2301      	movs	r3, #1
    5e2c:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e2e:	e004      	b.n	5e3a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e30:	bf00      	nop
    5e32:	e002      	b.n	5e3a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e34:	bf00      	nop
    5e36:	e000      	b.n	5e3a <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e38:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e3c:	4618      	mov	r0, r3
    5e3e:	b00b      	add	sp, #44	; 0x2c
    5e40:	f85d fb04 	ldr.w	pc, [sp], #4
    5e44:	4007e000 	.word	0x4007e000

00005e48 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5e48:	b500      	push	{lr}
    5e4a:	b085      	sub	sp, #20
    5e4c:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5e4e:	9b01      	ldr	r3, [sp, #4]
    5e50:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5e52:	9803      	ldr	r0, [sp, #12]
    5e54:	f000 fbc8 	bl	65e8 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5e58:	4a03      	ldr	r2, [pc, #12]	; (5e68 <Port_Init+0x20>)
    5e5a:	9b03      	ldr	r3, [sp, #12]
    5e5c:	6013      	str	r3, [r2, #0]
        }
    }
}
    5e5e:	bf00      	nop
    5e60:	b005      	add	sp, #20
    5e62:	f85d fb04 	ldr.w	pc, [sp], #4
    5e66:	bf00      	nop
    5e68:	1fff8cf4 	.word	0x1fff8cf4

00005e6c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5e6c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5e6e:	4b03      	ldr	r3, [pc, #12]	; (5e7c <Port_RefreshPortDirection+0x10>)
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	4618      	mov	r0, r3
    5e74:	f000 fc10 	bl	6698 <Port_Ipw_RefreshPortDirection>
    }
}
    5e78:	bf00      	nop
    5e7a:	bd08      	pop	{r3, pc}
    5e7c:	1fff8cf4 	.word	0x1fff8cf4

00005e80 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5e80:	b086      	sub	sp, #24
    5e82:	9003      	str	r0, [sp, #12]
    5e84:	9102      	str	r1, [sp, #8]
    5e86:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5e88:	23ff      	movs	r3, #255	; 0xff
    5e8a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5e8c:	9b03      	ldr	r3, [sp, #12]
    5e8e:	4a39      	ldr	r2, [pc, #228]	; (5f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5e90:	4293      	cmp	r3, r2
    5e92:	d151      	bne.n	5f38 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5e94:	9b02      	ldr	r3, [sp, #8]
    5e96:	2b10      	cmp	r3, #16
    5e98:	d867      	bhi.n	5f6a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5e9a:	a201      	add	r2, pc, #4	; (adr r2, 5ea0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5ea0:	00005ee5 	.word	0x00005ee5
    5ea4:	00005ef3 	.word	0x00005ef3
    5ea8:	00005f6b 	.word	0x00005f6b
    5eac:	00005f6b 	.word	0x00005f6b
    5eb0:	00005f6b 	.word	0x00005f6b
    5eb4:	00005f6b 	.word	0x00005f6b
    5eb8:	00005f6b 	.word	0x00005f6b
    5ebc:	00005f6b 	.word	0x00005f6b
    5ec0:	00005f6b 	.word	0x00005f6b
    5ec4:	00005f6b 	.word	0x00005f6b
    5ec8:	00005f6b 	.word	0x00005f6b
    5ecc:	00005f6b 	.word	0x00005f6b
    5ed0:	00005f6b 	.word	0x00005f6b
    5ed4:	00005f01 	.word	0x00005f01
    5ed8:	00005f0f 	.word	0x00005f0f
    5edc:	00005f1d 	.word	0x00005f1d
    5ee0:	00005f2b 	.word	0x00005f2b
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5ee4:	2301      	movs	r3, #1
    5ee6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ee8:	9a05      	ldr	r2, [sp, #20]
    5eea:	9b01      	ldr	r3, [sp, #4]
    5eec:	4313      	orrs	r3, r2
    5eee:	9305      	str	r3, [sp, #20]
                break;
    5ef0:	e03c      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5ef2:	2302      	movs	r3, #2
    5ef4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ef6:	9a05      	ldr	r2, [sp, #20]
    5ef8:	9b01      	ldr	r3, [sp, #4]
    5efa:	4313      	orrs	r3, r2
    5efc:	9305      	str	r3, [sp, #20]
                break;
    5efe:	e035      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f00:	2304      	movs	r3, #4
    5f02:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f04:	9a05      	ldr	r2, [sp, #20]
    5f06:	9b01      	ldr	r3, [sp, #4]
    5f08:	4313      	orrs	r3, r2
    5f0a:	9305      	str	r3, [sp, #20]
                break;
    5f0c:	e02e      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f0e:	2308      	movs	r3, #8
    5f10:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f12:	9a05      	ldr	r2, [sp, #20]
    5f14:	9b01      	ldr	r3, [sp, #4]
    5f16:	4313      	orrs	r3, r2
    5f18:	9305      	str	r3, [sp, #20]
                break;
    5f1a:	e027      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f1c:	230e      	movs	r3, #14
    5f1e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f20:	9a05      	ldr	r2, [sp, #20]
    5f22:	9b01      	ldr	r3, [sp, #4]
    5f24:	4013      	ands	r3, r2
    5f26:	9305      	str	r3, [sp, #20]
                break;
    5f28:	e020      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f2a:	230d      	movs	r3, #13
    5f2c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f2e:	9a05      	ldr	r2, [sp, #20]
    5f30:	9b01      	ldr	r3, [sp, #4]
    5f32:	4013      	ands	r3, r2
    5f34:	9305      	str	r3, [sp, #20]
                break;
    5f36:	e019      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f38:	9b03      	ldr	r3, [sp, #12]
    5f3a:	4a0f      	ldr	r2, [pc, #60]	; (5f78 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f3c:	4293      	cmp	r3, r2
    5f3e:	d115      	bne.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5f40:	9b02      	ldr	r3, [sp, #8]
    5f42:	2b00      	cmp	r3, #0
    5f44:	d003      	beq.n	5f4e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f46:	9b02      	ldr	r3, [sp, #8]
    5f48:	2b01      	cmp	r3, #1
    5f4a:	d007      	beq.n	5f5c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5f4c:	e00e      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5f4e:	230b      	movs	r3, #11
    5f50:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f52:	9a05      	ldr	r2, [sp, #20]
    5f54:	9b01      	ldr	r3, [sp, #4]
    5f56:	4013      	ands	r3, r2
    5f58:	9305      	str	r3, [sp, #20]
                break;
    5f5a:	e007      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5f5c:	2307      	movs	r3, #7
    5f5e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f60:	9a05      	ldr	r2, [sp, #20]
    5f62:	9b01      	ldr	r3, [sp, #4]
    5f64:	4013      	ands	r3, r2
    5f66:	9305      	str	r3, [sp, #20]
                break;
    5f68:	e000      	b.n	5f6c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5f6a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5f6c:	9b05      	ldr	r3, [sp, #20]
}
    5f6e:	4618      	mov	r0, r3
    5f70:	b006      	add	sp, #24
    5f72:	4770      	bx	lr
    5f74:	4004a000 	.word	0x4004a000
    5f78:	4004b000 	.word	0x4004b000

00005f7c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5f7c:	b500      	push	{lr}
    5f7e:	b089      	sub	sp, #36	; 0x24
    5f80:	9003      	str	r0, [sp, #12]
    5f82:	9102      	str	r1, [sp, #8]
    5f84:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5f86:	9b01      	ldr	r3, [sp, #4]
    5f88:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5f8a:	9b01      	ldr	r3, [sp, #4]
    5f8c:	2b08      	cmp	r3, #8
    5f8e:	d121      	bne.n	5fd4 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5f90:	4b13      	ldr	r3, [pc, #76]	; (5fe0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5f92:	685b      	ldr	r3, [r3, #4]
    5f94:	f003 030f 	and.w	r3, r3, #15
    5f98:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5f9a:	9a06      	ldr	r2, [sp, #24]
    5f9c:	9902      	ldr	r1, [sp, #8]
    5f9e:	9803      	ldr	r0, [sp, #12]
    5fa0:	f7ff ff6e 	bl	5e80 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5fa4:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5fa6:	9b05      	ldr	r3, [sp, #20]
    5fa8:	2bff      	cmp	r3, #255	; 0xff
    5faa:	d011      	beq.n	5fd0 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5fac:	f001 f984 	bl	72b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5fb0:	4b0b      	ldr	r3, [pc, #44]	; (5fe0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fb2:	685b      	ldr	r3, [r3, #4]
    5fb4:	4a0a      	ldr	r2, [pc, #40]	; (5fe0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fb6:	f023 030f 	bic.w	r3, r3, #15
    5fba:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5fbc:	4b08      	ldr	r3, [pc, #32]	; (5fe0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fbe:	685a      	ldr	r2, [r3, #4]
    5fc0:	9b05      	ldr	r3, [sp, #20]
    5fc2:	f003 030f 	and.w	r3, r3, #15
    5fc6:	4906      	ldr	r1, [pc, #24]	; (5fe0 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fc8:	4313      	orrs	r3, r2
    5fca:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5fcc:	f001 f9a0 	bl	7310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5fd0:	2300      	movs	r3, #0
    5fd2:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5fd4:	9b07      	ldr	r3, [sp, #28]
}
    5fd6:	4618      	mov	r0, r3
    5fd8:	b009      	add	sp, #36	; 0x24
    5fda:	f85d fb04 	ldr.w	pc, [sp], #4
    5fde:	bf00      	nop
    5fe0:	40048000 	.word	0x40048000

00005fe4 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5fe4:	b500      	push	{lr}
    5fe6:	b087      	sub	sp, #28
    5fe8:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5fea:	2300      	movs	r3, #0
    5fec:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5fee:	2300      	movs	r3, #0
    5ff0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5ff2:	2300      	movs	r3, #0
    5ff4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5ff6:	9b01      	ldr	r3, [sp, #4]
    5ff8:	68db      	ldr	r3, [r3, #12]
    5ffa:	2b02      	cmp	r3, #2
    5ffc:	d00a      	beq.n	6014 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5ffe:	9b05      	ldr	r3, [sp, #20]
    6000:	f043 0302 	orr.w	r3, r3, #2
    6004:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6006:	9b01      	ldr	r3, [sp, #4]
    6008:	68db      	ldr	r3, [r3, #12]
    600a:	f003 0301 	and.w	r3, r3, #1
    600e:	9a05      	ldr	r2, [sp, #20]
    6010:	4313      	orrs	r3, r2
    6012:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6014:	9b01      	ldr	r3, [sp, #4]
    6016:	699b      	ldr	r3, [r3, #24]
    6018:	019b      	lsls	r3, r3, #6
    601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    601e:	9a05      	ldr	r2, [sp, #20]
    6020:	4313      	orrs	r3, r2
    6022:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6024:	9b01      	ldr	r3, [sp, #4]
    6026:	6a1b      	ldr	r3, [r3, #32]
    6028:	03db      	lsls	r3, r3, #15
    602a:	b29b      	uxth	r3, r3
    602c:	9a05      	ldr	r2, [sp, #20]
    602e:	4313      	orrs	r3, r2
    6030:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6032:	9b01      	ldr	r3, [sp, #4]
    6034:	7f1b      	ldrb	r3, [r3, #28]
    6036:	2b00      	cmp	r3, #0
    6038:	d001      	beq.n	603e <Port_Ci_Port_Ip_PinInit+0x5a>
    603a:	2310      	movs	r3, #16
    603c:	e000      	b.n	6040 <Port_Ci_Port_Ip_PinInit+0x5c>
    603e:	2300      	movs	r3, #0
    6040:	9a05      	ldr	r2, [sp, #20]
    6042:	4313      	orrs	r3, r2
    6044:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6046:	9b01      	ldr	r3, [sp, #4]
    6048:	691b      	ldr	r3, [r3, #16]
    604a:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    604c:	9b01      	ldr	r3, [sp, #4]
    604e:	6818      	ldr	r0, [r3, #0]
    6050:	9b01      	ldr	r3, [sp, #4]
    6052:	689b      	ldr	r3, [r3, #8]
    6054:	9a04      	ldr	r2, [sp, #16]
    6056:	4619      	mov	r1, r3
    6058:	f7ff ff90 	bl	5f7c <Port_Ci_Port_Ip_ConfigureInterleave>
    605c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    605e:	9b03      	ldr	r3, [sp, #12]
    6060:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6062:	9b04      	ldr	r3, [sp, #16]
    6064:	021b      	lsls	r3, r3, #8
    6066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    606a:	9a05      	ldr	r2, [sp, #20]
    606c:	4313      	orrs	r3, r2
    606e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6070:	f000 ff88 	bl	6f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    607c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    607e:	9b01      	ldr	r3, [sp, #4]
    6080:	689b      	ldr	r3, [r3, #8]
    6082:	2201      	movs	r2, #1
    6084:	fa02 f303 	lsl.w	r3, r2, r3
    6088:	43db      	mvns	r3, r3
    608a:	9a02      	ldr	r2, [sp, #8]
    608c:	4013      	ands	r3, r2
    608e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6096:	2b00      	cmp	r3, #0
    6098:	d001      	beq.n	609e <Port_Ci_Port_Ip_PinInit+0xba>
    609a:	2201      	movs	r2, #1
    609c:	e000      	b.n	60a0 <Port_Ci_Port_Ip_PinInit+0xbc>
    609e:	2200      	movs	r2, #0
    60a0:	9b01      	ldr	r3, [sp, #4]
    60a2:	689b      	ldr	r3, [r3, #8]
    60a4:	fa02 f303 	lsl.w	r3, r2, r3
    60a8:	9a02      	ldr	r2, [sp, #8]
    60aa:	4313      	orrs	r3, r2
    60ac:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    60ae:	9b01      	ldr	r3, [sp, #4]
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	9a02      	ldr	r2, [sp, #8]
    60b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    60b8:	f000 ff90 	bl	6fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    60bc:	9b04      	ldr	r3, [sp, #16]
    60be:	2b01      	cmp	r3, #1
    60c0:	d16d      	bne.n	619e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    60c2:	9b01      	ldr	r3, [sp, #4]
    60c4:	695b      	ldr	r3, [r3, #20]
    60c6:	2b02      	cmp	r3, #2
    60c8:	d138      	bne.n	613c <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    60ca:	9b01      	ldr	r3, [sp, #4]
    60cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60d0:	2b01      	cmp	r3, #1
    60d2:	d10f      	bne.n	60f4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    60d4:	f000 ffa8 	bl	7028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    60d8:	9b01      	ldr	r3, [sp, #4]
    60da:	685b      	ldr	r3, [r3, #4]
    60dc:	6859      	ldr	r1, [r3, #4]
    60de:	9b01      	ldr	r3, [sp, #4]
    60e0:	689b      	ldr	r3, [r3, #8]
    60e2:	2201      	movs	r2, #1
    60e4:	409a      	lsls	r2, r3
    60e6:	9b01      	ldr	r3, [sp, #4]
    60e8:	685b      	ldr	r3, [r3, #4]
    60ea:	430a      	orrs	r2, r1
    60ec:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    60ee:	f000 ffc7 	bl	7080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    60f2:	e013      	b.n	611c <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60fa:	2b00      	cmp	r3, #0
    60fc:	d10e      	bne.n	611c <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    60fe:	f000 ffe5 	bl	70cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6102:	9b01      	ldr	r3, [sp, #4]
    6104:	685b      	ldr	r3, [r3, #4]
    6106:	6899      	ldr	r1, [r3, #8]
    6108:	9b01      	ldr	r3, [sp, #4]
    610a:	689b      	ldr	r3, [r3, #8]
    610c:	2201      	movs	r2, #1
    610e:	409a      	lsls	r2, r3
    6110:	9b01      	ldr	r3, [sp, #4]
    6112:	685b      	ldr	r3, [r3, #4]
    6114:	430a      	orrs	r2, r1
    6116:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6118:	f001 f804 	bl	7124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    611c:	f001 f828 	bl	7170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6120:	9b01      	ldr	r3, [sp, #4]
    6122:	685b      	ldr	r3, [r3, #4]
    6124:	6959      	ldr	r1, [r3, #20]
    6126:	9b01      	ldr	r3, [sp, #4]
    6128:	689b      	ldr	r3, [r3, #8]
    612a:	2201      	movs	r2, #1
    612c:	409a      	lsls	r2, r3
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	685b      	ldr	r3, [r3, #4]
    6132:	430a      	orrs	r2, r1
    6134:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6136:	f001 f847 	bl	71c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    613a:	e030      	b.n	619e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    613c:	f001 f818 	bl	7170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	685b      	ldr	r3, [r3, #4]
    6144:	6959      	ldr	r1, [r3, #20]
    6146:	9b01      	ldr	r3, [sp, #4]
    6148:	689b      	ldr	r3, [r3, #8]
    614a:	2201      	movs	r2, #1
    614c:	fa02 f303 	lsl.w	r3, r2, r3
    6150:	43da      	mvns	r2, r3
    6152:	9b01      	ldr	r3, [sp, #4]
    6154:	685b      	ldr	r3, [r3, #4]
    6156:	400a      	ands	r2, r1
    6158:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    615a:	f001 f835 	bl	71c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    615e:	f001 f859 	bl	7214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	685b      	ldr	r3, [r3, #4]
    6166:	6999      	ldr	r1, [r3, #24]
    6168:	9b01      	ldr	r3, [sp, #4]
    616a:	689b      	ldr	r3, [r3, #8]
    616c:	2201      	movs	r2, #1
    616e:	fa02 f303 	lsl.w	r3, r2, r3
    6172:	43da      	mvns	r2, r3
    6174:	9b01      	ldr	r3, [sp, #4]
    6176:	685b      	ldr	r3, [r3, #4]
    6178:	400a      	ands	r2, r1
    617a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	695b      	ldr	r3, [r3, #20]
    6180:	2b03      	cmp	r3, #3
    6182:	d10a      	bne.n	619a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6184:	9b01      	ldr	r3, [sp, #4]
    6186:	685b      	ldr	r3, [r3, #4]
    6188:	6999      	ldr	r1, [r3, #24]
    618a:	9b01      	ldr	r3, [sp, #4]
    618c:	689b      	ldr	r3, [r3, #8]
    618e:	2201      	movs	r2, #1
    6190:	409a      	lsls	r2, r3
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	685b      	ldr	r3, [r3, #4]
    6196:	430a      	orrs	r2, r1
    6198:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    619a:	f001 f867 	bl	726c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    619e:	9b01      	ldr	r3, [sp, #4]
    61a0:	681b      	ldr	r3, [r3, #0]
    61a2:	9a01      	ldr	r2, [sp, #4]
    61a4:	6892      	ldr	r2, [r2, #8]
    61a6:	9905      	ldr	r1, [sp, #20]
    61a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    61ac:	bf00      	nop
    61ae:	b007      	add	sp, #28
    61b0:	f85d fb04 	ldr.w	pc, [sp], #4

000061b4 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    61b4:	b500      	push	{lr}
    61b6:	b085      	sub	sp, #20
    61b8:	9001      	str	r0, [sp, #4]
    61ba:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    61bc:	2300      	movs	r3, #0
    61be:	9303      	str	r3, [sp, #12]
    61c0:	e00d      	b.n	61de <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    61c2:	9a03      	ldr	r2, [sp, #12]
    61c4:	4613      	mov	r3, r2
    61c6:	009b      	lsls	r3, r3, #2
    61c8:	4413      	add	r3, r2
    61ca:	00db      	lsls	r3, r3, #3
    61cc:	461a      	mov	r2, r3
    61ce:	9b00      	ldr	r3, [sp, #0]
    61d0:	4413      	add	r3, r2
    61d2:	4618      	mov	r0, r3
    61d4:	f7ff ff06 	bl	5fe4 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    61d8:	9b03      	ldr	r3, [sp, #12]
    61da:	3301      	adds	r3, #1
    61dc:	9303      	str	r3, [sp, #12]
    61de:	9a03      	ldr	r2, [sp, #12]
    61e0:	9b01      	ldr	r3, [sp, #4]
    61e2:	429a      	cmp	r2, r3
    61e4:	d3ed      	bcc.n	61c2 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    61e6:	2300      	movs	r3, #0
}
    61e8:	4618      	mov	r0, r3
    61ea:	b005      	add	sp, #20
    61ec:	f85d fb04 	ldr.w	pc, [sp], #4

000061f0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    61f0:	b500      	push	{lr}
    61f2:	b087      	sub	sp, #28
    61f4:	9003      	str	r0, [sp, #12]
    61f6:	9102      	str	r1, [sp, #8]
    61f8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    61fa:	9a01      	ldr	r2, [sp, #4]
    61fc:	9902      	ldr	r1, [sp, #8]
    61fe:	9803      	ldr	r0, [sp, #12]
    6200:	f7ff febc 	bl	5f7c <Port_Ci_Port_Ip_ConfigureInterleave>
    6204:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6206:	f001 f8a9 	bl	735c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    620a:	9b03      	ldr	r3, [sp, #12]
    620c:	9a02      	ldr	r2, [sp, #8]
    620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6212:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6214:	9b04      	ldr	r3, [sp, #16]
    6216:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    621a:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    621c:	9b05      	ldr	r3, [sp, #20]
    621e:	021b      	lsls	r3, r3, #8
    6220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6224:	9a04      	ldr	r2, [sp, #16]
    6226:	4313      	orrs	r3, r2
    6228:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    622a:	9b03      	ldr	r3, [sp, #12]
    622c:	9a02      	ldr	r2, [sp, #8]
    622e:	9904      	ldr	r1, [sp, #16]
    6230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6234:	f001 f8be 	bl	73b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6238:	bf00      	nop
    623a:	b007      	add	sp, #28
    623c:	f85d fb04 	ldr.w	pc, [sp], #4

00006240 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6240:	b500      	push	{lr}
    6242:	b083      	sub	sp, #12
    6244:	9001      	str	r0, [sp, #4]
    6246:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6248:	f001 f8da 	bl	7400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    624c:	9b01      	ldr	r3, [sp, #4]
    624e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6252:	2101      	movs	r1, #1
    6254:	9b00      	ldr	r3, [sp, #0]
    6256:	fa01 f303 	lsl.w	r3, r1, r3
    625a:	431a      	orrs	r2, r3
    625c:	9b01      	ldr	r3, [sp, #4]
    625e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6262:	f001 f8f9 	bl	7458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6266:	bf00      	nop
    6268:	b003      	add	sp, #12
    626a:	f85d fb04 	ldr.w	pc, [sp], #4

0000626e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    626e:	b500      	push	{lr}
    6270:	b083      	sub	sp, #12
    6272:	9001      	str	r0, [sp, #4]
    6274:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6276:	f001 f915 	bl	74a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    627a:	9b01      	ldr	r3, [sp, #4]
    627c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6280:	2101      	movs	r1, #1
    6282:	9b00      	ldr	r3, [sp, #0]
    6284:	fa01 f303 	lsl.w	r3, r1, r3
    6288:	43db      	mvns	r3, r3
    628a:	401a      	ands	r2, r3
    628c:	9b01      	ldr	r3, [sp, #4]
    628e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6292:	f001 f933 	bl	74fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6296:	bf00      	nop
    6298:	b003      	add	sp, #12
    629a:	f85d fb04 	ldr.w	pc, [sp], #4

0000629e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    629e:	b082      	sub	sp, #8
    62a0:	9001      	str	r0, [sp, #4]
    62a2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    62a4:	9b00      	ldr	r3, [sp, #0]
    62a6:	785b      	ldrb	r3, [r3, #1]
    62a8:	f003 0201 	and.w	r2, r3, #1
    62ac:	9b01      	ldr	r3, [sp, #4]
    62ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    62b2:	9b00      	ldr	r3, [sp, #0]
    62b4:	789b      	ldrb	r3, [r3, #2]
    62b6:	f003 021f 	and.w	r2, r3, #31
    62ba:	9b01      	ldr	r3, [sp, #4]
    62bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    62c0:	bf00      	nop
    62c2:	b002      	add	sp, #8
    62c4:	4770      	bx	lr

000062c6 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    62c6:	b086      	sub	sp, #24
    62c8:	9003      	str	r0, [sp, #12]
    62ca:	9301      	str	r3, [sp, #4]
    62cc:	460b      	mov	r3, r1
    62ce:	f8ad 300a 	strh.w	r3, [sp, #10]
    62d2:	4613      	mov	r3, r2
    62d4:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    62d8:	2300      	movs	r3, #0
    62da:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    62de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62e2:	f043 0301 	orr.w	r3, r3, #1
    62e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    62ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62ee:	f043 0302 	orr.w	r3, r3, #2
    62f2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    62f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62fa:	f043 0310 	orr.w	r3, r3, #16
    62fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6302:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    630a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    630e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6316:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    631a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    631e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6326:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    632a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    632e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6332:	4013      	ands	r3, r2
    6334:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	2b00      	cmp	r3, #0
    633c:	d003      	beq.n	6346 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    633e:	9b01      	ldr	r3, [sp, #4]
    6340:	2b01      	cmp	r3, #1
    6342:	d00a      	beq.n	635a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6344:	e013      	b.n	636e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6346:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    634a:	041a      	lsls	r2, r3, #16
    634c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6350:	431a      	orrs	r2, r3
    6352:	9b03      	ldr	r3, [sp, #12]
    6354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6358:	e009      	b.n	636e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    635a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    635e:	041a      	lsls	r2, r3, #16
    6360:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6364:	431a      	orrs	r2, r3
    6366:	9b03      	ldr	r3, [sp, #12]
    6368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    636c:	bf00      	nop
    }
}
    636e:	bf00      	nop
    6370:	b006      	add	sp, #24
    6372:	4770      	bx	lr

00006374 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6374:	b500      	push	{lr}
    6376:	b087      	sub	sp, #28
    6378:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    637a:	9b01      	ldr	r3, [sp, #4]
    637c:	885b      	ldrh	r3, [r3, #2]
    637e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6382:	9b01      	ldr	r3, [sp, #4]
    6384:	689b      	ldr	r3, [r3, #8]
    6386:	7a1b      	ldrb	r3, [r3, #8]
    6388:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    638c:	9b01      	ldr	r3, [sp, #4]
    638e:	689b      	ldr	r3, [r3, #8]
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6394:	9b01      	ldr	r3, [sp, #4]
    6396:	689b      	ldr	r3, [r3, #8]
    6398:	685b      	ldr	r3, [r3, #4]
    639a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    639c:	2300      	movs	r3, #0
    639e:	f8ad 3016 	strh.w	r3, [sp, #22]
    63a2:	e111      	b.n	65c8 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    63a4:	9b02      	ldr	r3, [sp, #8]
    63a6:	2b02      	cmp	r3, #2
    63a8:	d169      	bne.n	647e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    63aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63ae:	2b01      	cmp	r3, #1
    63b0:	d11a      	bne.n	63e8 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63b2:	9b01      	ldr	r3, [sp, #4]
    63b4:	685a      	ldr	r2, [r3, #4]
    63b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63ba:	005b      	lsls	r3, r3, #1
    63bc:	4413      	add	r3, r2
    63be:	881b      	ldrh	r3, [r3, #0]
    63c0:	f003 021f 	and.w	r2, r3, #31
    63c4:	9b01      	ldr	r3, [sp, #4]
    63c6:	6859      	ldr	r1, [r3, #4]
    63c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63cc:	005b      	lsls	r3, r3, #1
    63ce:	440b      	add	r3, r1
    63d0:	881b      	ldrh	r3, [r3, #0]
    63d2:	095b      	lsrs	r3, r3, #5
    63d4:	b29b      	uxth	r3, r3
    63d6:	4619      	mov	r1, r3
    63d8:	4b81      	ldr	r3, [pc, #516]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    63da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63de:	2101      	movs	r1, #1
    63e0:	fa01 f202 	lsl.w	r2, r1, r2
    63e4:	605a      	str	r2, [r3, #4]
    63e6:	e01d      	b.n	6424 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    63e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    63ec:	2b00      	cmp	r3, #0
    63ee:	d119      	bne.n	6424 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    63f0:	9b01      	ldr	r3, [sp, #4]
    63f2:	685a      	ldr	r2, [r3, #4]
    63f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63f8:	005b      	lsls	r3, r3, #1
    63fa:	4413      	add	r3, r2
    63fc:	881b      	ldrh	r3, [r3, #0]
    63fe:	f003 021f 	and.w	r2, r3, #31
    6402:	9b01      	ldr	r3, [sp, #4]
    6404:	6859      	ldr	r1, [r3, #4]
    6406:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    640a:	005b      	lsls	r3, r3, #1
    640c:	440b      	add	r3, r1
    640e:	881b      	ldrh	r3, [r3, #0]
    6410:	095b      	lsrs	r3, r3, #5
    6412:	b29b      	uxth	r3, r3
    6414:	4619      	mov	r1, r3
    6416:	4b72      	ldr	r3, [pc, #456]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    641c:	2101      	movs	r1, #1
    641e:	fa01 f202 	lsl.w	r2, r1, r2
    6422:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6424:	f001 f890 	bl	7548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	685a      	ldr	r2, [r3, #4]
    642c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6430:	005b      	lsls	r3, r3, #1
    6432:	4413      	add	r3, r2
    6434:	881b      	ldrh	r3, [r3, #0]
    6436:	095b      	lsrs	r3, r3, #5
    6438:	b29b      	uxth	r3, r3
    643a:	461a      	mov	r2, r3
    643c:	4b68      	ldr	r3, [pc, #416]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6442:	6959      	ldr	r1, [r3, #20]
    6444:	9b01      	ldr	r3, [sp, #4]
    6446:	685a      	ldr	r2, [r3, #4]
    6448:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    644c:	005b      	lsls	r3, r3, #1
    644e:	4413      	add	r3, r2
    6450:	881b      	ldrh	r3, [r3, #0]
    6452:	f003 031f 	and.w	r3, r3, #31
    6456:	2201      	movs	r2, #1
    6458:	409a      	lsls	r2, r3
    645a:	9b01      	ldr	r3, [sp, #4]
    645c:	6858      	ldr	r0, [r3, #4]
    645e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6462:	005b      	lsls	r3, r3, #1
    6464:	4403      	add	r3, r0
    6466:	881b      	ldrh	r3, [r3, #0]
    6468:	095b      	lsrs	r3, r3, #5
    646a:	b29b      	uxth	r3, r3
    646c:	4618      	mov	r0, r3
    646e:	4b5c      	ldr	r3, [pc, #368]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6470:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6474:	430a      	orrs	r2, r1
    6476:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6478:	f001 f892 	bl	75a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    647c:	e086      	b.n	658c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    647e:	f001 f863 	bl	7548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6482:	9b01      	ldr	r3, [sp, #4]
    6484:	685a      	ldr	r2, [r3, #4]
    6486:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    648a:	005b      	lsls	r3, r3, #1
    648c:	4413      	add	r3, r2
    648e:	881b      	ldrh	r3, [r3, #0]
    6490:	095b      	lsrs	r3, r3, #5
    6492:	b29b      	uxth	r3, r3
    6494:	461a      	mov	r2, r3
    6496:	4b52      	ldr	r3, [pc, #328]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    649c:	6959      	ldr	r1, [r3, #20]
    649e:	9b01      	ldr	r3, [sp, #4]
    64a0:	685a      	ldr	r2, [r3, #4]
    64a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64a6:	005b      	lsls	r3, r3, #1
    64a8:	4413      	add	r3, r2
    64aa:	881b      	ldrh	r3, [r3, #0]
    64ac:	f003 031f 	and.w	r3, r3, #31
    64b0:	2201      	movs	r2, #1
    64b2:	fa02 f303 	lsl.w	r3, r2, r3
    64b6:	43da      	mvns	r2, r3
    64b8:	9b01      	ldr	r3, [sp, #4]
    64ba:	6858      	ldr	r0, [r3, #4]
    64bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64c0:	005b      	lsls	r3, r3, #1
    64c2:	4403      	add	r3, r0
    64c4:	881b      	ldrh	r3, [r3, #0]
    64c6:	095b      	lsrs	r3, r3, #5
    64c8:	b29b      	uxth	r3, r3
    64ca:	4618      	mov	r0, r3
    64cc:	4b44      	ldr	r3, [pc, #272]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    64ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64d2:	400a      	ands	r2, r1
    64d4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64d6:	f001 f863 	bl	75a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    64da:	f001 f887 	bl	75ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64de:	9b01      	ldr	r3, [sp, #4]
    64e0:	685a      	ldr	r2, [r3, #4]
    64e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64e6:	005b      	lsls	r3, r3, #1
    64e8:	4413      	add	r3, r2
    64ea:	881b      	ldrh	r3, [r3, #0]
    64ec:	095b      	lsrs	r3, r3, #5
    64ee:	b29b      	uxth	r3, r3
    64f0:	461a      	mov	r2, r3
    64f2:	4b3b      	ldr	r3, [pc, #236]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    64f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64f8:	6999      	ldr	r1, [r3, #24]
    64fa:	9b01      	ldr	r3, [sp, #4]
    64fc:	685a      	ldr	r2, [r3, #4]
    64fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6502:	005b      	lsls	r3, r3, #1
    6504:	4413      	add	r3, r2
    6506:	881b      	ldrh	r3, [r3, #0]
    6508:	f003 031f 	and.w	r3, r3, #31
    650c:	2201      	movs	r2, #1
    650e:	fa02 f303 	lsl.w	r3, r2, r3
    6512:	43da      	mvns	r2, r3
    6514:	9b01      	ldr	r3, [sp, #4]
    6516:	6858      	ldr	r0, [r3, #4]
    6518:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    651c:	005b      	lsls	r3, r3, #1
    651e:	4403      	add	r3, r0
    6520:	881b      	ldrh	r3, [r3, #0]
    6522:	095b      	lsrs	r3, r3, #5
    6524:	b29b      	uxth	r3, r3
    6526:	4618      	mov	r0, r3
    6528:	4b2d      	ldr	r3, [pc, #180]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    652a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    652e:	400a      	ands	r2, r1
    6530:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6532:	9b02      	ldr	r3, [sp, #8]
    6534:	2b03      	cmp	r3, #3
    6536:	d127      	bne.n	6588 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6538:	9b01      	ldr	r3, [sp, #4]
    653a:	685a      	ldr	r2, [r3, #4]
    653c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6540:	005b      	lsls	r3, r3, #1
    6542:	4413      	add	r3, r2
    6544:	881b      	ldrh	r3, [r3, #0]
    6546:	095b      	lsrs	r3, r3, #5
    6548:	b29b      	uxth	r3, r3
    654a:	461a      	mov	r2, r3
    654c:	4b24      	ldr	r3, [pc, #144]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6552:	6999      	ldr	r1, [r3, #24]
    6554:	9b01      	ldr	r3, [sp, #4]
    6556:	685a      	ldr	r2, [r3, #4]
    6558:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    655c:	005b      	lsls	r3, r3, #1
    655e:	4413      	add	r3, r2
    6560:	881b      	ldrh	r3, [r3, #0]
    6562:	f003 031f 	and.w	r3, r3, #31
    6566:	2201      	movs	r2, #1
    6568:	409a      	lsls	r2, r3
    656a:	9b01      	ldr	r3, [sp, #4]
    656c:	6858      	ldr	r0, [r3, #4]
    656e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6572:	005b      	lsls	r3, r3, #1
    6574:	4403      	add	r3, r0
    6576:	881b      	ldrh	r3, [r3, #0]
    6578:	095b      	lsrs	r3, r3, #5
    657a:	b29b      	uxth	r3, r3
    657c:	4618      	mov	r0, r3
    657e:	4b18      	ldr	r3, [pc, #96]	; (65e0 <Port_Ipw_Init_UnusedPins+0x26c>)
    6580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6584:	430a      	orrs	r2, r1
    6586:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6588:	f001 f85c 	bl	7644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    658c:	9b01      	ldr	r3, [sp, #4]
    658e:	685a      	ldr	r2, [r3, #4]
    6590:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6594:	005b      	lsls	r3, r3, #1
    6596:	4413      	add	r3, r2
    6598:	881b      	ldrh	r3, [r3, #0]
    659a:	095b      	lsrs	r3, r3, #5
    659c:	b29b      	uxth	r3, r3
    659e:	461a      	mov	r2, r3
    65a0:	4b10      	ldr	r3, [pc, #64]	; (65e4 <Port_Ipw_Init_UnusedPins+0x270>)
    65a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65a6:	9a01      	ldr	r2, [sp, #4]
    65a8:	6851      	ldr	r1, [r2, #4]
    65aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    65ae:	0052      	lsls	r2, r2, #1
    65b0:	440a      	add	r2, r1
    65b2:	8812      	ldrh	r2, [r2, #0]
    65b4:	f002 021f 	and.w	r2, r2, #31
    65b8:	9903      	ldr	r1, [sp, #12]
    65ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    65be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65c2:	3301      	adds	r3, #1
    65c4:	f8ad 3016 	strh.w	r3, [sp, #22]
    65c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    65cc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    65d0:	429a      	cmp	r2, r3
    65d2:	f4ff aee7 	bcc.w	63a4 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    65d6:	bf00      	nop
    65d8:	bf00      	nop
    65da:	b007      	add	sp, #28
    65dc:	f85d fb04 	ldr.w	pc, [sp], #4
    65e0:	00008a98 	.word	0x00008a98
    65e4:	00008a84 	.word	0x00008a84

000065e8 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    65e8:	b500      	push	{lr}
    65ea:	b085      	sub	sp, #20
    65ec:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    65ee:	9b01      	ldr	r3, [sp, #4]
    65f0:	7c1b      	ldrb	r3, [r3, #16]
    65f2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    65f6:	2300      	movs	r3, #0
    65f8:	f8ad 300e 	strh.w	r3, [sp, #14]
    65fc:	e035      	b.n	666a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    65fe:	9b01      	ldr	r3, [sp, #4]
    6600:	695a      	ldr	r2, [r3, #20]
    6602:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6606:	00db      	lsls	r3, r3, #3
    6608:	4413      	add	r3, r2
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6610:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6614:	4a1f      	ldr	r2, [pc, #124]	; (6694 <Port_Ipw_Init+0xac>)
    6616:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    661a:	9b01      	ldr	r3, [sp, #4]
    661c:	695a      	ldr	r2, [r3, #20]
    661e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6622:	00db      	lsls	r3, r3, #3
    6624:	4413      	add	r3, r2
    6626:	4619      	mov	r1, r3
    6628:	f7ff fe39 	bl	629e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    662c:	f001 f978 	bl	7920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6630:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6634:	4a17      	ldr	r2, [pc, #92]	; (6694 <Port_Ipw_Init+0xac>)
    6636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    663a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    663e:	9b01      	ldr	r3, [sp, #4]
    6640:	695a      	ldr	r2, [r3, #20]
    6642:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6646:	00db      	lsls	r3, r3, #3
    6648:	4413      	add	r3, r2
    664a:	685a      	ldr	r2, [r3, #4]
    664c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6650:	4810      	ldr	r0, [pc, #64]	; (6694 <Port_Ipw_Init+0xac>)
    6652:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6656:	430a      	orrs	r2, r1
    6658:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    665c:	f001 f98c 	bl	7978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6660:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6664:	3301      	adds	r3, #1
    6666:	f8ad 300e 	strh.w	r3, [sp, #14]
    666a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    666e:	b29b      	uxth	r3, r3
    6670:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6674:	429a      	cmp	r2, r3
    6676:	d3c2      	bcc.n	65fe <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6678:	9b01      	ldr	r3, [sp, #4]
    667a:	6a1b      	ldr	r3, [r3, #32]
    667c:	4619      	mov	r1, r3
    667e:	2006      	movs	r0, #6
    6680:	f7ff fd98 	bl	61b4 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6684:	9801      	ldr	r0, [sp, #4]
    6686:	f7ff fe75 	bl	6374 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    668a:	bf00      	nop
    668c:	b005      	add	sp, #20
    668e:	f85d fb04 	ldr.w	pc, [sp], #4
    6692:	bf00      	nop
    6694:	00008a84 	.word	0x00008a84

00006698 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6698:	b500      	push	{lr}
    669a:	b085      	sub	sp, #20
    669c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	881b      	ldrh	r3, [r3, #0]
    66a2:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    66a6:	2300      	movs	r3, #0
    66a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    66ac:	e0d2      	b.n	6854 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    66ae:	9b01      	ldr	r3, [sp, #4]
    66b0:	68d9      	ldr	r1, [r3, #12]
    66b2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66b6:	4613      	mov	r3, r2
    66b8:	009b      	lsls	r3, r3, #2
    66ba:	4413      	add	r3, r2
    66bc:	009b      	lsls	r3, r3, #2
    66be:	440b      	add	r3, r1
    66c0:	7c5b      	ldrb	r3, [r3, #17]
    66c2:	f083 0301 	eor.w	r3, r3, #1
    66c6:	b2db      	uxtb	r3, r3
    66c8:	2b00      	cmp	r3, #0
    66ca:	f000 80be 	beq.w	684a <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    66ce:	9b01      	ldr	r3, [sp, #4]
    66d0:	68d9      	ldr	r1, [r3, #12]
    66d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66d6:	4613      	mov	r3, r2
    66d8:	009b      	lsls	r3, r3, #2
    66da:	4413      	add	r3, r2
    66dc:	009b      	lsls	r3, r3, #2
    66de:	440b      	add	r3, r1
    66e0:	7c1b      	ldrb	r3, [r3, #16]
    66e2:	2b00      	cmp	r3, #0
    66e4:	f000 80b1 	beq.w	684a <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    66e8:	9b01      	ldr	r3, [sp, #4]
    66ea:	68d9      	ldr	r1, [r3, #12]
    66ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66f0:	4613      	mov	r3, r2
    66f2:	009b      	lsls	r3, r3, #2
    66f4:	4413      	add	r3, r2
    66f6:	009b      	lsls	r3, r3, #2
    66f8:	440b      	add	r3, r1
    66fa:	881b      	ldrh	r3, [r3, #0]
    66fc:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6700:	9b01      	ldr	r3, [sp, #4]
    6702:	68d9      	ldr	r1, [r3, #12]
    6704:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6708:	4613      	mov	r3, r2
    670a:	009b      	lsls	r3, r3, #2
    670c:	4413      	add	r3, r2
    670e:	009b      	lsls	r3, r3, #2
    6710:	440b      	add	r3, r1
    6712:	68db      	ldr	r3, [r3, #12]
    6714:	2b02      	cmp	r3, #2
    6716:	d11d      	bne.n	6754 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6718:	f001 fa4a 	bl	7bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    671c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6720:	095b      	lsrs	r3, r3, #5
    6722:	b29b      	uxth	r3, r3
    6724:	461a      	mov	r2, r3
    6726:	4b51      	ldr	r3, [pc, #324]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    672c:	6959      	ldr	r1, [r3, #20]
    672e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6732:	f003 031f 	and.w	r3, r3, #31
    6736:	2201      	movs	r2, #1
    6738:	409a      	lsls	r2, r3
    673a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    673e:	095b      	lsrs	r3, r3, #5
    6740:	b29b      	uxth	r3, r3
    6742:	4618      	mov	r0, r3
    6744:	4b49      	ldr	r3, [pc, #292]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6746:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    674a:	430a      	orrs	r2, r1
    674c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    674e:	f001 fa5b 	bl	7c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6752:	e07a      	b.n	684a <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6754:	9b01      	ldr	r3, [sp, #4]
    6756:	68d9      	ldr	r1, [r3, #12]
    6758:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    675c:	4613      	mov	r3, r2
    675e:	009b      	lsls	r3, r3, #2
    6760:	4413      	add	r3, r2
    6762:	009b      	lsls	r3, r3, #2
    6764:	440b      	add	r3, r1
    6766:	68db      	ldr	r3, [r3, #12]
    6768:	2b01      	cmp	r3, #1
    676a:	d00b      	beq.n	6784 <Port_Ipw_RefreshPortDirection+0xec>
    676c:	9b01      	ldr	r3, [sp, #4]
    676e:	68d9      	ldr	r1, [r3, #12]
    6770:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6774:	4613      	mov	r3, r2
    6776:	009b      	lsls	r3, r3, #2
    6778:	4413      	add	r3, r2
    677a:	009b      	lsls	r3, r3, #2
    677c:	440b      	add	r3, r1
    677e:	68db      	ldr	r3, [r3, #12]
    6780:	2b03      	cmp	r3, #3
    6782:	d162      	bne.n	684a <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6784:	f001 fa14 	bl	7bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6788:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    678c:	095b      	lsrs	r3, r3, #5
    678e:	b29b      	uxth	r3, r3
    6790:	461a      	mov	r2, r3
    6792:	4b36      	ldr	r3, [pc, #216]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6798:	6959      	ldr	r1, [r3, #20]
    679a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    679e:	f003 031f 	and.w	r3, r3, #31
    67a2:	2201      	movs	r2, #1
    67a4:	fa02 f303 	lsl.w	r3, r2, r3
    67a8:	43da      	mvns	r2, r3
    67aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ae:	095b      	lsrs	r3, r3, #5
    67b0:	b29b      	uxth	r3, r3
    67b2:	4618      	mov	r0, r3
    67b4:	4b2d      	ldr	r3, [pc, #180]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67ba:	400a      	ands	r2, r1
    67bc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67be:	f001 fa23 	bl	7c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    67c2:	f001 fa47 	bl	7c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ca:	095b      	lsrs	r3, r3, #5
    67cc:	b29b      	uxth	r3, r3
    67ce:	461a      	mov	r2, r3
    67d0:	4b26      	ldr	r3, [pc, #152]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67d6:	6999      	ldr	r1, [r3, #24]
    67d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67dc:	f003 031f 	and.w	r3, r3, #31
    67e0:	2201      	movs	r2, #1
    67e2:	fa02 f303 	lsl.w	r3, r2, r3
    67e6:	43da      	mvns	r2, r3
    67e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ec:	095b      	lsrs	r3, r3, #5
    67ee:	b29b      	uxth	r3, r3
    67f0:	4618      	mov	r0, r3
    67f2:	4b1e      	ldr	r3, [pc, #120]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67f8:	400a      	ands	r2, r1
    67fa:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67fc:	9b01      	ldr	r3, [sp, #4]
    67fe:	68d9      	ldr	r1, [r3, #12]
    6800:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6804:	4613      	mov	r3, r2
    6806:	009b      	lsls	r3, r3, #2
    6808:	4413      	add	r3, r2
    680a:	009b      	lsls	r3, r3, #2
    680c:	440b      	add	r3, r1
    680e:	68db      	ldr	r3, [r3, #12]
    6810:	2b03      	cmp	r3, #3
    6812:	d118      	bne.n	6846 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6814:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6818:	095b      	lsrs	r3, r3, #5
    681a:	b29b      	uxth	r3, r3
    681c:	461a      	mov	r2, r3
    681e:	4b13      	ldr	r3, [pc, #76]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6824:	6999      	ldr	r1, [r3, #24]
    6826:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    682a:	f003 031f 	and.w	r3, r3, #31
    682e:	2201      	movs	r2, #1
    6830:	409a      	lsls	r2, r3
    6832:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6836:	095b      	lsrs	r3, r3, #5
    6838:	b29b      	uxth	r3, r3
    683a:	4618      	mov	r0, r3
    683c:	4b0b      	ldr	r3, [pc, #44]	; (686c <Port_Ipw_RefreshPortDirection+0x1d4>)
    683e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6842:	430a      	orrs	r2, r1
    6844:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6846:	f001 fa31 	bl	7cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    684a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    684e:	3301      	adds	r3, #1
    6850:	f8ad 300e 	strh.w	r3, [sp, #14]
    6854:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6858:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    685c:	429a      	cmp	r2, r3
    685e:	f4ff af26 	bcc.w	66ae <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6862:	bf00      	nop
    6864:	bf00      	nop
    6866:	b005      	add	sp, #20
    6868:	f85d fb04 	ldr.w	pc, [sp], #4
    686c:	00008a98 	.word	0x00008a98

00006870 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6870:	b500      	push	{lr}
    6872:	b085      	sub	sp, #20
    6874:	4603      	mov	r3, r0
    6876:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    687a:	2300      	movs	r3, #0
    687c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6880:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6884:	4618      	mov	r0, r3
    6886:	f000 f871 	bl	696c <Dio_Ipw_ReadChannel>
    688a:	4603      	mov	r3, r0
    688c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6890:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6894:	4618      	mov	r0, r3
    6896:	b005      	add	sp, #20
    6898:	f85d fb04 	ldr.w	pc, [sp], #4

0000689c <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    689c:	b500      	push	{lr}
    689e:	b083      	sub	sp, #12
    68a0:	4603      	mov	r3, r0
    68a2:	460a      	mov	r2, r1
    68a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    68a8:	4613      	mov	r3, r2
    68aa:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    68ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
    68b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68b6:	4611      	mov	r1, r2
    68b8:	4618      	mov	r0, r3
    68ba:	f000 f87d 	bl	69b8 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    68be:	bf00      	nop
    68c0:	b003      	add	sp, #12
    68c2:	f85d fb04 	ldr.w	pc, [sp], #4

000068c6 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    68c6:	b500      	push	{lr}
    68c8:	b085      	sub	sp, #20
    68ca:	4603      	mov	r3, r0
    68cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    68d0:	2300      	movs	r3, #0
    68d2:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    68d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    68da:	4618      	mov	r0, r3
    68dc:	f000 f892 	bl	6a04 <Dio_Ipw_FlipChannel>
    68e0:	4603      	mov	r3, r0
    68e2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    68e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    68ea:	4618      	mov	r0, r3
    68ec:	b005      	add	sp, #20
    68ee:	f85d fb04 	ldr.w	pc, [sp], #4

000068f2 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    68f2:	b500      	push	{lr}
    68f4:	b085      	sub	sp, #20
    68f6:	4603      	mov	r3, r0
    68f8:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    68fc:	2300      	movs	r3, #0
    68fe:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6900:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6904:	4618      	mov	r0, r3
    6906:	f000 f8b3 	bl	6a70 <Dio_Ipw_ReadPort>
    690a:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    690c:	9b03      	ldr	r3, [sp, #12]
}
    690e:	4618      	mov	r0, r3
    6910:	b005      	add	sp, #20
    6912:	f85d fb04 	ldr.w	pc, [sp], #4

00006916 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6916:	b500      	push	{lr}
    6918:	b083      	sub	sp, #12
    691a:	4603      	mov	r3, r0
    691c:	9100      	str	r1, [sp, #0]
    691e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6922:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6926:	9900      	ldr	r1, [sp, #0]
    6928:	4618      	mov	r0, r3
    692a:	f000 f8b9 	bl	6aa0 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    692e:	bf00      	nop
    6930:	b003      	add	sp, #12
    6932:	f85d fb04 	ldr.w	pc, [sp], #4

00006936 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6936:	b500      	push	{lr}
    6938:	b085      	sub	sp, #20
    693a:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    693c:	2300      	movs	r3, #0
    693e:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6940:	9801      	ldr	r0, [sp, #4]
    6942:	f000 f8c5 	bl	6ad0 <Dio_Ipw_ReadChannelGroup>
    6946:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6948:	9b03      	ldr	r3, [sp, #12]
}
    694a:	4618      	mov	r0, r3
    694c:	b005      	add	sp, #20
    694e:	f85d fb04 	ldr.w	pc, [sp], #4

00006952 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    6952:	b500      	push	{lr}
    6954:	b083      	sub	sp, #12
    6956:	9001      	str	r0, [sp, #4]
    6958:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    695a:	9900      	ldr	r1, [sp, #0]
    695c:	9801      	ldr	r0, [sp, #4]
    695e:	f000 f8d7 	bl	6b10 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    6962:	bf00      	nop
    6964:	b003      	add	sp, #12
    6966:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000696c <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    696c:	b500      	push	{lr}
    696e:	b087      	sub	sp, #28
    6970:	4603      	mov	r3, r0
    6972:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6976:	2300      	movs	r3, #0
    6978:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    697c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6980:	095b      	lsrs	r3, r3, #5
    6982:	b29b      	uxth	r3, r3
    6984:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6986:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    698a:	f003 031f 	and.w	r3, r3, #31
    698e:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6990:	4a08      	ldr	r2, [pc, #32]	; (69b4 <Dio_Ipw_ReadChannel+0x48>)
    6992:	9b04      	ldr	r3, [sp, #16]
    6994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6998:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    699a:	9903      	ldr	r1, [sp, #12]
    699c:	9802      	ldr	r0, [sp, #8]
    699e:	f000 f940 	bl	6c22 <Gpio_Dio_Ip_ReadPin>
    69a2:	4603      	mov	r3, r0
    69a4:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    69a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    69ac:	4618      	mov	r0, r3
    69ae:	b007      	add	sp, #28
    69b0:	f85d fb04 	ldr.w	pc, [sp], #4
    69b4:	1fff8b24 	.word	0x1fff8b24

000069b8 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    69b8:	b500      	push	{lr}
    69ba:	b087      	sub	sp, #28
    69bc:	4603      	mov	r3, r0
    69be:	460a      	mov	r2, r1
    69c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    69c4:	4613      	mov	r3, r2
    69c6:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    69ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69ce:	095b      	lsrs	r3, r3, #5
    69d0:	b29b      	uxth	r3, r3
    69d2:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    69d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69d8:	f003 031f 	and.w	r3, r3, #31
    69dc:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    69de:	4a08      	ldr	r2, [pc, #32]	; (6a00 <Dio_Ipw_WriteChannel+0x48>)
    69e0:	9b05      	ldr	r3, [sp, #20]
    69e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e6:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    69e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    69ec:	461a      	mov	r2, r3
    69ee:	9904      	ldr	r1, [sp, #16]
    69f0:	9803      	ldr	r0, [sp, #12]
    69f2:	f000 f8b7 	bl	6b64 <Gpio_Dio_Ip_WritePin>
}
    69f6:	bf00      	nop
    69f8:	b007      	add	sp, #28
    69fa:	f85d fb04 	ldr.w	pc, [sp], #4
    69fe:	bf00      	nop
    6a00:	1fff8b24 	.word	0x1fff8b24

00006a04 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6a04:	b500      	push	{lr}
    6a06:	b089      	sub	sp, #36	; 0x24
    6a08:	4603      	mov	r3, r0
    6a0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6a0e:	2300      	movs	r3, #0
    6a10:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6a14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a18:	095b      	lsrs	r3, r3, #5
    6a1a:	b29b      	uxth	r3, r3
    6a1c:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6a1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a22:	f003 031f 	and.w	r3, r3, #31
    6a26:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6a28:	4a10      	ldr	r2, [pc, #64]	; (6a6c <Dio_Ipw_FlipChannel+0x68>)
    6a2a:	9b06      	ldr	r3, [sp, #24]
    6a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a30:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    6a32:	2201      	movs	r2, #1
    6a34:	9b05      	ldr	r3, [sp, #20]
    6a36:	fa02 f303 	lsl.w	r3, r2, r3
    6a3a:	4619      	mov	r1, r3
    6a3c:	9804      	ldr	r0, [sp, #16]
    6a3e:	f000 f8dc 	bl	6bfa <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    6a42:	9804      	ldr	r0, [sp, #16]
    6a44:	f000 f8bc 	bl	6bc0 <Gpio_Dio_Ip_GetPinsOutput>
    6a48:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6a4a:	2201      	movs	r2, #1
    6a4c:	9b05      	ldr	r3, [sp, #20]
    6a4e:	409a      	lsls	r2, r3
    6a50:	9b03      	ldr	r3, [sp, #12]
    6a52:	401a      	ands	r2, r3
    6a54:	9b05      	ldr	r3, [sp, #20]
    6a56:	fa22 f303 	lsr.w	r3, r2, r3
    6a5a:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    6a5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    6a62:	4618      	mov	r0, r3
    6a64:	b009      	add	sp, #36	; 0x24
    6a66:	f85d fb04 	ldr.w	pc, [sp], #4
    6a6a:	bf00      	nop
    6a6c:	1fff8b24 	.word	0x1fff8b24

00006a70 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    6a70:	b500      	push	{lr}
    6a72:	b085      	sub	sp, #20
    6a74:	4603      	mov	r3, r0
    6a76:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6a7a:	2300      	movs	r3, #0
    6a7c:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a82:	4a06      	ldr	r2, [pc, #24]	; (6a9c <Dio_Ipw_ReadPort+0x2c>)
    6a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a88:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6a8a:	9802      	ldr	r0, [sp, #8]
    6a8c:	f000 f8be 	bl	6c0c <Gpio_Dio_Ip_ReadPins>
    6a90:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    6a92:	9b03      	ldr	r3, [sp, #12]
}
    6a94:	4618      	mov	r0, r3
    6a96:	b005      	add	sp, #20
    6a98:	f85d fb04 	ldr.w	pc, [sp], #4
    6a9c:	1fff8b24 	.word	0x1fff8b24

00006aa0 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6aa0:	b500      	push	{lr}
    6aa2:	b085      	sub	sp, #20
    6aa4:	4603      	mov	r3, r0
    6aa6:	9100      	str	r1, [sp, #0]
    6aa8:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6aac:	9b00      	ldr	r3, [sp, #0]
    6aae:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    6ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ab4:	4a05      	ldr	r2, [pc, #20]	; (6acc <Dio_Ipw_WritePort+0x2c>)
    6ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aba:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6abc:	9903      	ldr	r1, [sp, #12]
    6abe:	9802      	ldr	r0, [sp, #8]
    6ac0:	f000 f875 	bl	6bae <Gpio_Dio_Ip_WritePins>
}
    6ac4:	bf00      	nop
    6ac6:	b005      	add	sp, #20
    6ac8:	f85d fb04 	ldr.w	pc, [sp], #4
    6acc:	1fff8b24 	.word	0x1fff8b24

00006ad0 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    6ad0:	b500      	push	{lr}
    6ad2:	b087      	sub	sp, #28
    6ad4:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6ad6:	2300      	movs	r3, #0
    6ad8:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6ada:	9b01      	ldr	r3, [sp, #4]
    6adc:	781b      	ldrb	r3, [r3, #0]
    6ade:	461a      	mov	r2, r3
    6ae0:	4b0a      	ldr	r3, [pc, #40]	; (6b0c <Dio_Ipw_ReadChannelGroup+0x3c>)
    6ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ae6:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6ae8:	9804      	ldr	r0, [sp, #16]
    6aea:	f000 f88f 	bl	6c0c <Gpio_Dio_Ip_ReadPins>
    6aee:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	685a      	ldr	r2, [r3, #4]
    6af4:	9b03      	ldr	r3, [sp, #12]
    6af6:	4013      	ands	r3, r2
    6af8:	9a01      	ldr	r2, [sp, #4]
    6afa:	7852      	ldrb	r2, [r2, #1]
    6afc:	40d3      	lsrs	r3, r2
    6afe:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    6b00:	9b05      	ldr	r3, [sp, #20]
}
    6b02:	4618      	mov	r0, r3
    6b04:	b007      	add	sp, #28
    6b06:	f85d fb04 	ldr.w	pc, [sp], #4
    6b0a:	bf00      	nop
    6b0c:	1fff8b24 	.word	0x1fff8b24

00006b10 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    6b10:	b500      	push	{lr}
    6b12:	b087      	sub	sp, #28
    6b14:	9001      	str	r0, [sp, #4]
    6b16:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6b18:	9b01      	ldr	r3, [sp, #4]
    6b1a:	781b      	ldrb	r3, [r3, #0]
    6b1c:	461a      	mov	r2, r3
    6b1e:	4b10      	ldr	r3, [pc, #64]	; (6b60 <Dio_Ipw_WriteChannelGroup+0x50>)
    6b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b24:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6b26:	9b01      	ldr	r3, [sp, #4]
    6b28:	785b      	ldrb	r3, [r3, #1]
    6b2a:	461a      	mov	r2, r3
    6b2c:	9b00      	ldr	r3, [sp, #0]
    6b2e:	fa03 f202 	lsl.w	r2, r3, r2
    6b32:	9b01      	ldr	r3, [sp, #4]
    6b34:	685b      	ldr	r3, [r3, #4]
    6b36:	4013      	ands	r3, r2
    6b38:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6b3a:	9904      	ldr	r1, [sp, #16]
    6b3c:	9805      	ldr	r0, [sp, #20]
    6b3e:	f000 f84a 	bl	6bd6 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    6b42:	9b04      	ldr	r3, [sp, #16]
    6b44:	43da      	mvns	r2, r3
    6b46:	9b01      	ldr	r3, [sp, #4]
    6b48:	685b      	ldr	r3, [r3, #4]
    6b4a:	4013      	ands	r3, r2
    6b4c:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    6b4e:	9903      	ldr	r1, [sp, #12]
    6b50:	9805      	ldr	r0, [sp, #20]
    6b52:	f000 f849 	bl	6be8 <Gpio_Dio_Ip_ClearPins>

}
    6b56:	bf00      	nop
    6b58:	b007      	add	sp, #28
    6b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6b5e:	bf00      	nop
    6b60:	1fff8b24 	.word	0x1fff8b24

00006b64 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6b64:	b500      	push	{lr}
    6b66:	b087      	sub	sp, #28
    6b68:	9003      	str	r0, [sp, #12]
    6b6a:	9102      	str	r1, [sp, #8]
    6b6c:	4613      	mov	r3, r2
    6b6e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    6b72:	f000 f86d 	bl	6c50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6b76:	9b03      	ldr	r3, [sp, #12]
    6b78:	681b      	ldr	r3, [r3, #0]
    6b7a:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6b7c:	2201      	movs	r2, #1
    6b7e:	9b02      	ldr	r3, [sp, #8]
    6b80:	fa02 f303 	lsl.w	r3, r2, r3
    6b84:	43db      	mvns	r3, r3
    6b86:	9a05      	ldr	r2, [sp, #20]
    6b88:	4013      	ands	r3, r2
    6b8a:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6b8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6b90:	9b02      	ldr	r3, [sp, #8]
    6b92:	fa02 f303 	lsl.w	r3, r2, r3
    6b96:	9a05      	ldr	r2, [sp, #20]
    6b98:	4313      	orrs	r3, r2
    6b9a:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6b9c:	9b03      	ldr	r3, [sp, #12]
    6b9e:	9a05      	ldr	r2, [sp, #20]
    6ba0:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    6ba2:	f000 f881 	bl	6ca8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6ba6:	bf00      	nop
    6ba8:	b007      	add	sp, #28
    6baa:	f85d fb04 	ldr.w	pc, [sp], #4

00006bae <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6bae:	b082      	sub	sp, #8
    6bb0:	9001      	str	r0, [sp, #4]
    6bb2:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6bb4:	9b01      	ldr	r3, [sp, #4]
    6bb6:	9a00      	ldr	r2, [sp, #0]
    6bb8:	601a      	str	r2, [r3, #0]
}
    6bba:	bf00      	nop
    6bbc:	b002      	add	sp, #8
    6bbe:	4770      	bx	lr

00006bc0 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6bc0:	b084      	sub	sp, #16
    6bc2:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6bc4:	2300      	movs	r3, #0
    6bc6:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	681b      	ldr	r3, [r3, #0]
    6bcc:	9303      	str	r3, [sp, #12]
    return returnValue;
    6bce:	9b03      	ldr	r3, [sp, #12]
}
    6bd0:	4618      	mov	r0, r3
    6bd2:	b004      	add	sp, #16
    6bd4:	4770      	bx	lr

00006bd6 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6bd6:	b082      	sub	sp, #8
    6bd8:	9001      	str	r0, [sp, #4]
    6bda:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6bdc:	9b01      	ldr	r3, [sp, #4]
    6bde:	9a00      	ldr	r2, [sp, #0]
    6be0:	605a      	str	r2, [r3, #4]
}
    6be2:	bf00      	nop
    6be4:	b002      	add	sp, #8
    6be6:	4770      	bx	lr

00006be8 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6be8:	b082      	sub	sp, #8
    6bea:	9001      	str	r0, [sp, #4]
    6bec:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6bee:	9b01      	ldr	r3, [sp, #4]
    6bf0:	9a00      	ldr	r2, [sp, #0]
    6bf2:	609a      	str	r2, [r3, #8]
}
    6bf4:	bf00      	nop
    6bf6:	b002      	add	sp, #8
    6bf8:	4770      	bx	lr

00006bfa <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6bfa:	b082      	sub	sp, #8
    6bfc:	9001      	str	r0, [sp, #4]
    6bfe:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6c00:	9b01      	ldr	r3, [sp, #4]
    6c02:	9a00      	ldr	r2, [sp, #0]
    6c04:	60da      	str	r2, [r3, #12]
}
    6c06:	bf00      	nop
    6c08:	b002      	add	sp, #8
    6c0a:	4770      	bx	lr

00006c0c <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6c0c:	b084      	sub	sp, #16
    6c0e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6c10:	2300      	movs	r3, #0
    6c12:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6c14:	9b01      	ldr	r3, [sp, #4]
    6c16:	691b      	ldr	r3, [r3, #16]
    6c18:	9303      	str	r3, [sp, #12]
    return returnValue;
    6c1a:	9b03      	ldr	r3, [sp, #12]
}
    6c1c:	4618      	mov	r0, r3
    6c1e:	b004      	add	sp, #16
    6c20:	4770      	bx	lr

00006c22 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    6c22:	b084      	sub	sp, #16
    6c24:	9001      	str	r0, [sp, #4]
    6c26:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6c28:	2300      	movs	r3, #0
    6c2a:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6c2e:	9b01      	ldr	r3, [sp, #4]
    6c30:	691a      	ldr	r2, [r3, #16]
    6c32:	2101      	movs	r1, #1
    6c34:	9b00      	ldr	r3, [sp, #0]
    6c36:	fa01 f303 	lsl.w	r3, r1, r3
    6c3a:	401a      	ands	r2, r3
    6c3c:	9b00      	ldr	r3, [sp, #0]
    6c3e:	fa22 f303 	lsr.w	r3, r2, r3
    6c42:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6c46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c4a:	4618      	mov	r0, r3
    6c4c:	b004      	add	sp, #16
    6c4e:	4770      	bx	lr

00006c50 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6c50:	b500      	push	{lr}
    6c52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c54:	f7fa fa1c 	bl	1090 <Sys_GetCoreID>
    6c58:	4603      	mov	r3, r0
    6c5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    6c5c:	4a10      	ldr	r2, [pc, #64]	; (6ca0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6c5e:	9b01      	ldr	r3, [sp, #4]
    6c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c64:	2b00      	cmp	r3, #0
    6c66:	d10d      	bne.n	6c84 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c68:	f7f9 ff6a 	bl	b40 <Dio_schm_read_msr>
    6c6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c6e:	9b00      	ldr	r3, [sp, #0]
    6c70:	f003 0301 	and.w	r3, r3, #1
    6c74:	2b00      	cmp	r3, #0
    6c76:	d100      	bne.n	6c7a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6c7a:	490a      	ldr	r1, [pc, #40]	; (6ca4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    6c7c:	9b01      	ldr	r3, [sp, #4]
    6c7e:	9a00      	ldr	r2, [sp, #0]
    6c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    6c84:	4a06      	ldr	r2, [pc, #24]	; (6ca0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6c86:	9b01      	ldr	r3, [sp, #4]
    6c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c8c:	1c5a      	adds	r2, r3, #1
    6c8e:	4904      	ldr	r1, [pc, #16]	; (6ca0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6c90:	9b01      	ldr	r3, [sp, #4]
    6c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c96:	bf00      	nop
    6c98:	b003      	add	sp, #12
    6c9a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c9e:	bf00      	nop
    6ca0:	1fff8cfc 	.word	0x1fff8cfc
    6ca4:	1fff8cf8 	.word	0x1fff8cf8

00006ca8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6ca8:	b500      	push	{lr}
    6caa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cac:	f7fa f9f0 	bl	1090 <Sys_GetCoreID>
    6cb0:	4603      	mov	r3, r0
    6cb2:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    6cb4:	4a0d      	ldr	r2, [pc, #52]	; (6cec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6cb6:	9b01      	ldr	r3, [sp, #4]
    6cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cbc:	1e5a      	subs	r2, r3, #1
    6cbe:	490b      	ldr	r1, [pc, #44]	; (6cec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6cc0:	9b01      	ldr	r3, [sp, #4]
    6cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6cc6:	4a0a      	ldr	r2, [pc, #40]	; (6cf0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    6cc8:	9b01      	ldr	r3, [sp, #4]
    6cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cce:	f003 0301 	and.w	r3, r3, #1
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d106      	bne.n	6ce4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6cd6:	4a05      	ldr	r2, [pc, #20]	; (6cec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6cd8:	9b01      	ldr	r3, [sp, #4]
    6cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d100      	bne.n	6ce4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ce2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ce4:	bf00      	nop
    6ce6:	b003      	add	sp, #12
    6ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    6cec:	1fff8cfc 	.word	0x1fff8cfc
    6cf0:	1fff8cf8 	.word	0x1fff8cf8

00006cf4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6cf4:	b500      	push	{lr}
    6cf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cf8:	f7fa f9ca 	bl	1090 <Sys_GetCoreID>
    6cfc:	4603      	mov	r3, r0
    6cfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    6d00:	4a10      	ldr	r2, [pc, #64]	; (6d44 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6d02:	9b01      	ldr	r3, [sp, #4]
    6d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d10d      	bne.n	6d28 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d0c:	f7f9 ff18 	bl	b40 <Dio_schm_read_msr>
    6d10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d12:	9b00      	ldr	r3, [sp, #0]
    6d14:	f003 0301 	and.w	r3, r3, #1
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d100      	bne.n	6d1e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6d1e:	490a      	ldr	r1, [pc, #40]	; (6d48 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    6d20:	9b01      	ldr	r3, [sp, #4]
    6d22:	9a00      	ldr	r2, [sp, #0]
    6d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    6d28:	4a06      	ldr	r2, [pc, #24]	; (6d44 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6d2a:	9b01      	ldr	r3, [sp, #4]
    6d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d30:	1c5a      	adds	r2, r3, #1
    6d32:	4904      	ldr	r1, [pc, #16]	; (6d44 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6d34:	9b01      	ldr	r3, [sp, #4]
    6d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d3a:	bf00      	nop
    6d3c:	b003      	add	sp, #12
    6d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d42:	bf00      	nop
    6d44:	1fff8d04 	.word	0x1fff8d04
    6d48:	1fff8d00 	.word	0x1fff8d00

00006d4c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6d4c:	b500      	push	{lr}
    6d4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d50:	f7fa f99e 	bl	1090 <Sys_GetCoreID>
    6d54:	4603      	mov	r3, r0
    6d56:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    6d58:	4a0d      	ldr	r2, [pc, #52]	; (6d90 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6d5a:	9b01      	ldr	r3, [sp, #4]
    6d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d60:	1e5a      	subs	r2, r3, #1
    6d62:	490b      	ldr	r1, [pc, #44]	; (6d90 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6d64:	9b01      	ldr	r3, [sp, #4]
    6d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6d6a:	4a0a      	ldr	r2, [pc, #40]	; (6d94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d72:	f003 0301 	and.w	r3, r3, #1
    6d76:	2b00      	cmp	r3, #0
    6d78:	d106      	bne.n	6d88 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    6d7a:	4a05      	ldr	r2, [pc, #20]	; (6d90 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6d7c:	9b01      	ldr	r3, [sp, #4]
    6d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d100      	bne.n	6d88 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d88:	bf00      	nop
    6d8a:	b003      	add	sp, #12
    6d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d90:	1fff8d04 	.word	0x1fff8d04
    6d94:	1fff8d00 	.word	0x1fff8d00

00006d98 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6d98:	b500      	push	{lr}
    6d9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d9c:	f7fa f978 	bl	1090 <Sys_GetCoreID>
    6da0:	4603      	mov	r3, r0
    6da2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    6da4:	4a10      	ldr	r2, [pc, #64]	; (6de8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6da6:	9b01      	ldr	r3, [sp, #4]
    6da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dac:	2b00      	cmp	r3, #0
    6dae:	d10d      	bne.n	6dcc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6db0:	f7f9 fecf 	bl	b52 <Mcu_schm_read_msr>
    6db4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6db6:	9b00      	ldr	r3, [sp, #0]
    6db8:	f003 0301 	and.w	r3, r3, #1
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	d100      	bne.n	6dc2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6dc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6dc2:	490a      	ldr	r1, [pc, #40]	; (6dec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	9a00      	ldr	r2, [sp, #0]
    6dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6dcc:	4a06      	ldr	r2, [pc, #24]	; (6de8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6dce:	9b01      	ldr	r3, [sp, #4]
    6dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dd4:	1c5a      	adds	r2, r3, #1
    6dd6:	4904      	ldr	r1, [pc, #16]	; (6de8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6dd8:	9b01      	ldr	r3, [sp, #4]
    6dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dde:	bf00      	nop
    6de0:	b003      	add	sp, #12
    6de2:	f85d fb04 	ldr.w	pc, [sp], #4
    6de6:	bf00      	nop
    6de8:	1fff8d0c 	.word	0x1fff8d0c
    6dec:	1fff8d08 	.word	0x1fff8d08

00006df0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6df0:	b500      	push	{lr}
    6df2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6df4:	f7fa f94c 	bl	1090 <Sys_GetCoreID>
    6df8:	4603      	mov	r3, r0
    6dfa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6dfc:	4a0d      	ldr	r2, [pc, #52]	; (6e34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6dfe:	9b01      	ldr	r3, [sp, #4]
    6e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e04:	1e5a      	subs	r2, r3, #1
    6e06:	490b      	ldr	r1, [pc, #44]	; (6e34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6e08:	9b01      	ldr	r3, [sp, #4]
    6e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6e0e:	4a0a      	ldr	r2, [pc, #40]	; (6e38 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e16:	f003 0301 	and.w	r3, r3, #1
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	d106      	bne.n	6e2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    6e1e:	4a05      	ldr	r2, [pc, #20]	; (6e34 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6e20:	9b01      	ldr	r3, [sp, #4]
    6e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e26:	2b00      	cmp	r3, #0
    6e28:	d100      	bne.n	6e2c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e2c:	bf00      	nop
    6e2e:	b003      	add	sp, #12
    6e30:	f85d fb04 	ldr.w	pc, [sp], #4
    6e34:	1fff8d0c 	.word	0x1fff8d0c
    6e38:	1fff8d08 	.word	0x1fff8d08

00006e3c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6e3c:	b500      	push	{lr}
    6e3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e40:	f7fa f926 	bl	1090 <Sys_GetCoreID>
    6e44:	4603      	mov	r3, r0
    6e46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    6e48:	4a10      	ldr	r2, [pc, #64]	; (6e8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6e4a:	9b01      	ldr	r3, [sp, #4]
    6e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d10d      	bne.n	6e70 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e54:	f7f9 fe7d 	bl	b52 <Mcu_schm_read_msr>
    6e58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e5a:	9b00      	ldr	r3, [sp, #0]
    6e5c:	f003 0301 	and.w	r3, r3, #1
    6e60:	2b00      	cmp	r3, #0
    6e62:	d100      	bne.n	6e66 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6e66:	490a      	ldr	r1, [pc, #40]	; (6e90 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    6e68:	9b01      	ldr	r3, [sp, #4]
    6e6a:	9a00      	ldr	r2, [sp, #0]
    6e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    6e70:	4a06      	ldr	r2, [pc, #24]	; (6e8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e78:	1c5a      	adds	r2, r3, #1
    6e7a:	4904      	ldr	r1, [pc, #16]	; (6e8c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6e7c:	9b01      	ldr	r3, [sp, #4]
    6e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e82:	bf00      	nop
    6e84:	b003      	add	sp, #12
    6e86:	f85d fb04 	ldr.w	pc, [sp], #4
    6e8a:	bf00      	nop
    6e8c:	1fff8d14 	.word	0x1fff8d14
    6e90:	1fff8d10 	.word	0x1fff8d10

00006e94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6e94:	b500      	push	{lr}
    6e96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e98:	f7fa f8fa 	bl	1090 <Sys_GetCoreID>
    6e9c:	4603      	mov	r3, r0
    6e9e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    6ea0:	4a0d      	ldr	r2, [pc, #52]	; (6ed8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6ea2:	9b01      	ldr	r3, [sp, #4]
    6ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ea8:	1e5a      	subs	r2, r3, #1
    6eaa:	490b      	ldr	r1, [pc, #44]	; (6ed8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6eac:	9b01      	ldr	r3, [sp, #4]
    6eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6eb2:	4a0a      	ldr	r2, [pc, #40]	; (6edc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    6eb4:	9b01      	ldr	r3, [sp, #4]
    6eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eba:	f003 0301 	and.w	r3, r3, #1
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	d106      	bne.n	6ed0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    6ec2:	4a05      	ldr	r2, [pc, #20]	; (6ed8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6ec4:	9b01      	ldr	r3, [sp, #4]
    6ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d100      	bne.n	6ed0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ece:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ed0:	bf00      	nop
    6ed2:	b003      	add	sp, #12
    6ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ed8:	1fff8d14 	.word	0x1fff8d14
    6edc:	1fff8d10 	.word	0x1fff8d10

00006ee0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6ee0:	b500      	push	{lr}
    6ee2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ee4:	f7fa f8d4 	bl	1090 <Sys_GetCoreID>
    6ee8:	4603      	mov	r3, r0
    6eea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6eec:	4a10      	ldr	r2, [pc, #64]	; (6f30 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6eee:	9b01      	ldr	r3, [sp, #4]
    6ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d10d      	bne.n	6f14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ef8:	f7f9 fe2b 	bl	b52 <Mcu_schm_read_msr>
    6efc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6efe:	9b00      	ldr	r3, [sp, #0]
    6f00:	f003 0301 	and.w	r3, r3, #1
    6f04:	2b00      	cmp	r3, #0
    6f06:	d100      	bne.n	6f0a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6f0a:	490a      	ldr	r1, [pc, #40]	; (6f34 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	9a00      	ldr	r2, [sp, #0]
    6f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6f14:	4a06      	ldr	r2, [pc, #24]	; (6f30 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6f16:	9b01      	ldr	r3, [sp, #4]
    6f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f1c:	1c5a      	adds	r2, r3, #1
    6f1e:	4904      	ldr	r1, [pc, #16]	; (6f30 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6f20:	9b01      	ldr	r3, [sp, #4]
    6f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f26:	bf00      	nop
    6f28:	b003      	add	sp, #12
    6f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f2e:	bf00      	nop
    6f30:	1fff8d1c 	.word	0x1fff8d1c
    6f34:	1fff8d18 	.word	0x1fff8d18

00006f38 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6f38:	b500      	push	{lr}
    6f3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f3c:	f7fa f8a8 	bl	1090 <Sys_GetCoreID>
    6f40:	4603      	mov	r3, r0
    6f42:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6f44:	4a0d      	ldr	r2, [pc, #52]	; (6f7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6f46:	9b01      	ldr	r3, [sp, #4]
    6f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4c:	1e5a      	subs	r2, r3, #1
    6f4e:	490b      	ldr	r1, [pc, #44]	; (6f7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6f50:	9b01      	ldr	r3, [sp, #4]
    6f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6f56:	4a0a      	ldr	r2, [pc, #40]	; (6f80 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    6f58:	9b01      	ldr	r3, [sp, #4]
    6f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f5e:	f003 0301 	and.w	r3, r3, #1
    6f62:	2b00      	cmp	r3, #0
    6f64:	d106      	bne.n	6f74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    6f66:	4a05      	ldr	r2, [pc, #20]	; (6f7c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6f68:	9b01      	ldr	r3, [sp, #4]
    6f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d100      	bne.n	6f74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f74:	bf00      	nop
    6f76:	b003      	add	sp, #12
    6f78:	f85d fb04 	ldr.w	pc, [sp], #4
    6f7c:	1fff8d1c 	.word	0x1fff8d1c
    6f80:	1fff8d18 	.word	0x1fff8d18

00006f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6f84:	b500      	push	{lr}
    6f86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f88:	f7fa f882 	bl	1090 <Sys_GetCoreID>
    6f8c:	4603      	mov	r3, r0
    6f8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    6f90:	4a10      	ldr	r2, [pc, #64]	; (6fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6f92:	9b01      	ldr	r3, [sp, #4]
    6f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d10d      	bne.n	6fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f9c:	f7f9 fde2 	bl	b64 <Port_schm_read_msr>
    6fa0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6fa2:	9b00      	ldr	r3, [sp, #0]
    6fa4:	f003 0301 	and.w	r3, r3, #1
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d100      	bne.n	6fae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6fac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6fae:	490a      	ldr	r1, [pc, #40]	; (6fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    6fb0:	9b01      	ldr	r3, [sp, #4]
    6fb2:	9a00      	ldr	r2, [sp, #0]
    6fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    6fb8:	4a06      	ldr	r2, [pc, #24]	; (6fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6fba:	9b01      	ldr	r3, [sp, #4]
    6fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fc0:	1c5a      	adds	r2, r3, #1
    6fc2:	4904      	ldr	r1, [pc, #16]	; (6fd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6fc4:	9b01      	ldr	r3, [sp, #4]
    6fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fca:	bf00      	nop
    6fcc:	b003      	add	sp, #12
    6fce:	f85d fb04 	ldr.w	pc, [sp], #4
    6fd2:	bf00      	nop
    6fd4:	1fff8d24 	.word	0x1fff8d24
    6fd8:	1fff8d20 	.word	0x1fff8d20

00006fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6fdc:	b500      	push	{lr}
    6fde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fe0:	f7fa f856 	bl	1090 <Sys_GetCoreID>
    6fe4:	4603      	mov	r3, r0
    6fe6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6fe8:	4a0d      	ldr	r2, [pc, #52]	; (7020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff0:	1e5a      	subs	r2, r3, #1
    6ff2:	490b      	ldr	r1, [pc, #44]	; (7020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6ff4:	9b01      	ldr	r3, [sp, #4]
    6ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6ffa:	4a0a      	ldr	r2, [pc, #40]	; (7024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7002:	f003 0301 	and.w	r3, r3, #1
    7006:	2b00      	cmp	r3, #0
    7008:	d106      	bne.n	7018 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    700a:	4a05      	ldr	r2, [pc, #20]	; (7020 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    700c:	9b01      	ldr	r3, [sp, #4]
    700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7012:	2b00      	cmp	r3, #0
    7014:	d100      	bne.n	7018 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7016:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7018:	bf00      	nop
    701a:	b003      	add	sp, #12
    701c:	f85d fb04 	ldr.w	pc, [sp], #4
    7020:	1fff8d24 	.word	0x1fff8d24
    7024:	1fff8d20 	.word	0x1fff8d20

00007028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    7028:	b500      	push	{lr}
    702a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    702c:	f7fa f830 	bl	1090 <Sys_GetCoreID>
    7030:	4603      	mov	r3, r0
    7032:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    7034:	4a10      	ldr	r2, [pc, #64]	; (7078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    7036:	9b01      	ldr	r3, [sp, #4]
    7038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    703c:	2b00      	cmp	r3, #0
    703e:	d10d      	bne.n	705c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7040:	f7f9 fd90 	bl	b64 <Port_schm_read_msr>
    7044:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7046:	9b00      	ldr	r3, [sp, #0]
    7048:	f003 0301 	and.w	r3, r3, #1
    704c:	2b00      	cmp	r3, #0
    704e:	d100      	bne.n	7052 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7050:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    7052:	490a      	ldr	r1, [pc, #40]	; (707c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    7054:	9b01      	ldr	r3, [sp, #4]
    7056:	9a00      	ldr	r2, [sp, #0]
    7058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    705c:	4a06      	ldr	r2, [pc, #24]	; (7078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    705e:	9b01      	ldr	r3, [sp, #4]
    7060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7064:	1c5a      	adds	r2, r3, #1
    7066:	4904      	ldr	r1, [pc, #16]	; (7078 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    7068:	9b01      	ldr	r3, [sp, #4]
    706a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    706e:	bf00      	nop
    7070:	b003      	add	sp, #12
    7072:	f85d fb04 	ldr.w	pc, [sp], #4
    7076:	bf00      	nop
    7078:	1fff8d2c 	.word	0x1fff8d2c
    707c:	1fff8d28 	.word	0x1fff8d28

00007080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    7080:	b500      	push	{lr}
    7082:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7084:	f7fa f804 	bl	1090 <Sys_GetCoreID>
    7088:	4603      	mov	r3, r0
    708a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    708c:	4a0d      	ldr	r2, [pc, #52]	; (70c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    708e:	9b01      	ldr	r3, [sp, #4]
    7090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7094:	1e5a      	subs	r2, r3, #1
    7096:	490b      	ldr	r1, [pc, #44]	; (70c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    7098:	9b01      	ldr	r3, [sp, #4]
    709a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    709e:	4a0a      	ldr	r2, [pc, #40]	; (70c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70a6:	f003 0301 	and.w	r3, r3, #1
    70aa:	2b00      	cmp	r3, #0
    70ac:	d106      	bne.n	70bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    70ae:	4a05      	ldr	r2, [pc, #20]	; (70c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    70b0:	9b01      	ldr	r3, [sp, #4]
    70b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b6:	2b00      	cmp	r3, #0
    70b8:	d100      	bne.n	70bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70bc:	bf00      	nop
    70be:	b003      	add	sp, #12
    70c0:	f85d fb04 	ldr.w	pc, [sp], #4
    70c4:	1fff8d2c 	.word	0x1fff8d2c
    70c8:	1fff8d28 	.word	0x1fff8d28

000070cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    70cc:	b500      	push	{lr}
    70ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70d0:	f7f9 ffde 	bl	1090 <Sys_GetCoreID>
    70d4:	4603      	mov	r3, r0
    70d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    70d8:	4a10      	ldr	r2, [pc, #64]	; (711c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    70da:	9b01      	ldr	r3, [sp, #4]
    70dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e0:	2b00      	cmp	r3, #0
    70e2:	d10d      	bne.n	7100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70e4:	f7f9 fd3e 	bl	b64 <Port_schm_read_msr>
    70e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70ea:	9b00      	ldr	r3, [sp, #0]
    70ec:	f003 0301 	and.w	r3, r3, #1
    70f0:	2b00      	cmp	r3, #0
    70f2:	d100      	bne.n	70f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    70f6:	490a      	ldr	r1, [pc, #40]	; (7120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    70f8:	9b01      	ldr	r3, [sp, #4]
    70fa:	9a00      	ldr	r2, [sp, #0]
    70fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    7100:	4a06      	ldr	r2, [pc, #24]	; (711c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    7102:	9b01      	ldr	r3, [sp, #4]
    7104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7108:	1c5a      	adds	r2, r3, #1
    710a:	4904      	ldr	r1, [pc, #16]	; (711c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    710c:	9b01      	ldr	r3, [sp, #4]
    710e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7112:	bf00      	nop
    7114:	b003      	add	sp, #12
    7116:	f85d fb04 	ldr.w	pc, [sp], #4
    711a:	bf00      	nop
    711c:	1fff8d34 	.word	0x1fff8d34
    7120:	1fff8d30 	.word	0x1fff8d30

00007124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    7124:	b500      	push	{lr}
    7126:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7128:	f7f9 ffb2 	bl	1090 <Sys_GetCoreID>
    712c:	4603      	mov	r3, r0
    712e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    7130:	4a0d      	ldr	r2, [pc, #52]	; (7168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    7132:	9b01      	ldr	r3, [sp, #4]
    7134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7138:	1e5a      	subs	r2, r3, #1
    713a:	490b      	ldr	r1, [pc, #44]	; (7168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    713c:	9b01      	ldr	r3, [sp, #4]
    713e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    7142:	4a0a      	ldr	r2, [pc, #40]	; (716c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    7144:	9b01      	ldr	r3, [sp, #4]
    7146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    714a:	f003 0301 	and.w	r3, r3, #1
    714e:	2b00      	cmp	r3, #0
    7150:	d106      	bne.n	7160 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    7152:	4a05      	ldr	r2, [pc, #20]	; (7168 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    7154:	9b01      	ldr	r3, [sp, #4]
    7156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    715a:	2b00      	cmp	r3, #0
    715c:	d100      	bne.n	7160 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    715e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7160:	bf00      	nop
    7162:	b003      	add	sp, #12
    7164:	f85d fb04 	ldr.w	pc, [sp], #4
    7168:	1fff8d34 	.word	0x1fff8d34
    716c:	1fff8d30 	.word	0x1fff8d30

00007170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    7170:	b500      	push	{lr}
    7172:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7174:	f7f9 ff8c 	bl	1090 <Sys_GetCoreID>
    7178:	4603      	mov	r3, r0
    717a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    717c:	4a10      	ldr	r2, [pc, #64]	; (71c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    717e:	9b01      	ldr	r3, [sp, #4]
    7180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7184:	2b00      	cmp	r3, #0
    7186:	d10d      	bne.n	71a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7188:	f7f9 fcec 	bl	b64 <Port_schm_read_msr>
    718c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    718e:	9b00      	ldr	r3, [sp, #0]
    7190:	f003 0301 	and.w	r3, r3, #1
    7194:	2b00      	cmp	r3, #0
    7196:	d100      	bne.n	719a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7198:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    719a:	490a      	ldr	r1, [pc, #40]	; (71c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    719c:	9b01      	ldr	r3, [sp, #4]
    719e:	9a00      	ldr	r2, [sp, #0]
    71a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    71a4:	4a06      	ldr	r2, [pc, #24]	; (71c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    71a6:	9b01      	ldr	r3, [sp, #4]
    71a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ac:	1c5a      	adds	r2, r3, #1
    71ae:	4904      	ldr	r1, [pc, #16]	; (71c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    71b0:	9b01      	ldr	r3, [sp, #4]
    71b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71b6:	bf00      	nop
    71b8:	b003      	add	sp, #12
    71ba:	f85d fb04 	ldr.w	pc, [sp], #4
    71be:	bf00      	nop
    71c0:	1fff8d3c 	.word	0x1fff8d3c
    71c4:	1fff8d38 	.word	0x1fff8d38

000071c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    71c8:	b500      	push	{lr}
    71ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71cc:	f7f9 ff60 	bl	1090 <Sys_GetCoreID>
    71d0:	4603      	mov	r3, r0
    71d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    71d4:	4a0d      	ldr	r2, [pc, #52]	; (720c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    71d6:	9b01      	ldr	r3, [sp, #4]
    71d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71dc:	1e5a      	subs	r2, r3, #1
    71de:	490b      	ldr	r1, [pc, #44]	; (720c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    71e0:	9b01      	ldr	r3, [sp, #4]
    71e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    71e6:	4a0a      	ldr	r2, [pc, #40]	; (7210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    71e8:	9b01      	ldr	r3, [sp, #4]
    71ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ee:	f003 0301 	and.w	r3, r3, #1
    71f2:	2b00      	cmp	r3, #0
    71f4:	d106      	bne.n	7204 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    71f6:	4a05      	ldr	r2, [pc, #20]	; (720c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    71f8:	9b01      	ldr	r3, [sp, #4]
    71fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71fe:	2b00      	cmp	r3, #0
    7200:	d100      	bne.n	7204 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7202:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7204:	bf00      	nop
    7206:	b003      	add	sp, #12
    7208:	f85d fb04 	ldr.w	pc, [sp], #4
    720c:	1fff8d3c 	.word	0x1fff8d3c
    7210:	1fff8d38 	.word	0x1fff8d38

00007214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    7214:	b500      	push	{lr}
    7216:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7218:	f7f9 ff3a 	bl	1090 <Sys_GetCoreID>
    721c:	4603      	mov	r3, r0
    721e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    7220:	4a10      	ldr	r2, [pc, #64]	; (7264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    7222:	9b01      	ldr	r3, [sp, #4]
    7224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7228:	2b00      	cmp	r3, #0
    722a:	d10d      	bne.n	7248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    722c:	f7f9 fc9a 	bl	b64 <Port_schm_read_msr>
    7230:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7232:	9b00      	ldr	r3, [sp, #0]
    7234:	f003 0301 	and.w	r3, r3, #1
    7238:	2b00      	cmp	r3, #0
    723a:	d100      	bne.n	723e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    723c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    723e:	490a      	ldr	r1, [pc, #40]	; (7268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    7240:	9b01      	ldr	r3, [sp, #4]
    7242:	9a00      	ldr	r2, [sp, #0]
    7244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    7248:	4a06      	ldr	r2, [pc, #24]	; (7264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    724a:	9b01      	ldr	r3, [sp, #4]
    724c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7250:	1c5a      	adds	r2, r3, #1
    7252:	4904      	ldr	r1, [pc, #16]	; (7264 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    7254:	9b01      	ldr	r3, [sp, #4]
    7256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    725a:	bf00      	nop
    725c:	b003      	add	sp, #12
    725e:	f85d fb04 	ldr.w	pc, [sp], #4
    7262:	bf00      	nop
    7264:	1fff8d44 	.word	0x1fff8d44
    7268:	1fff8d40 	.word	0x1fff8d40

0000726c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    726c:	b500      	push	{lr}
    726e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7270:	f7f9 ff0e 	bl	1090 <Sys_GetCoreID>
    7274:	4603      	mov	r3, r0
    7276:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    7278:	4a0d      	ldr	r2, [pc, #52]	; (72b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    727a:	9b01      	ldr	r3, [sp, #4]
    727c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7280:	1e5a      	subs	r2, r3, #1
    7282:	490b      	ldr	r1, [pc, #44]	; (72b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7284:	9b01      	ldr	r3, [sp, #4]
    7286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    728a:	4a0a      	ldr	r2, [pc, #40]	; (72b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    728c:	9b01      	ldr	r3, [sp, #4]
    728e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7292:	f003 0301 	and.w	r3, r3, #1
    7296:	2b00      	cmp	r3, #0
    7298:	d106      	bne.n	72a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    729a:	4a05      	ldr	r2, [pc, #20]	; (72b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    729c:	9b01      	ldr	r3, [sp, #4]
    729e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a2:	2b00      	cmp	r3, #0
    72a4:	d100      	bne.n	72a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    72a8:	bf00      	nop
    72aa:	b003      	add	sp, #12
    72ac:	f85d fb04 	ldr.w	pc, [sp], #4
    72b0:	1fff8d44 	.word	0x1fff8d44
    72b4:	1fff8d40 	.word	0x1fff8d40

000072b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    72b8:	b500      	push	{lr}
    72ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72bc:	f7f9 fee8 	bl	1090 <Sys_GetCoreID>
    72c0:	4603      	mov	r3, r0
    72c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    72c4:	4a10      	ldr	r2, [pc, #64]	; (7308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    72c6:	9b01      	ldr	r3, [sp, #4]
    72c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72cc:	2b00      	cmp	r3, #0
    72ce:	d10d      	bne.n	72ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72d0:	f7f9 fc48 	bl	b64 <Port_schm_read_msr>
    72d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72d6:	9b00      	ldr	r3, [sp, #0]
    72d8:	f003 0301 	and.w	r3, r3, #1
    72dc:	2b00      	cmp	r3, #0
    72de:	d100      	bne.n	72e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    72e2:	490a      	ldr	r1, [pc, #40]	; (730c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    72e4:	9b01      	ldr	r3, [sp, #4]
    72e6:	9a00      	ldr	r2, [sp, #0]
    72e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    72ec:	4a06      	ldr	r2, [pc, #24]	; (7308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    72ee:	9b01      	ldr	r3, [sp, #4]
    72f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f4:	1c5a      	adds	r2, r3, #1
    72f6:	4904      	ldr	r1, [pc, #16]	; (7308 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    72f8:	9b01      	ldr	r3, [sp, #4]
    72fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72fe:	bf00      	nop
    7300:	b003      	add	sp, #12
    7302:	f85d fb04 	ldr.w	pc, [sp], #4
    7306:	bf00      	nop
    7308:	1fff8d4c 	.word	0x1fff8d4c
    730c:	1fff8d48 	.word	0x1fff8d48

00007310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    7310:	b500      	push	{lr}
    7312:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7314:	f7f9 febc 	bl	1090 <Sys_GetCoreID>
    7318:	4603      	mov	r3, r0
    731a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    731c:	4a0d      	ldr	r2, [pc, #52]	; (7354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    731e:	9b01      	ldr	r3, [sp, #4]
    7320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7324:	1e5a      	subs	r2, r3, #1
    7326:	490b      	ldr	r1, [pc, #44]	; (7354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    7328:	9b01      	ldr	r3, [sp, #4]
    732a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    732e:	4a0a      	ldr	r2, [pc, #40]	; (7358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    7330:	9b01      	ldr	r3, [sp, #4]
    7332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7336:	f003 0301 	and.w	r3, r3, #1
    733a:	2b00      	cmp	r3, #0
    733c:	d106      	bne.n	734c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    733e:	4a05      	ldr	r2, [pc, #20]	; (7354 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    7340:	9b01      	ldr	r3, [sp, #4]
    7342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7346:	2b00      	cmp	r3, #0
    7348:	d100      	bne.n	734c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    734a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    734c:	bf00      	nop
    734e:	b003      	add	sp, #12
    7350:	f85d fb04 	ldr.w	pc, [sp], #4
    7354:	1fff8d4c 	.word	0x1fff8d4c
    7358:	1fff8d48 	.word	0x1fff8d48

0000735c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    735c:	b500      	push	{lr}
    735e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7360:	f7f9 fe96 	bl	1090 <Sys_GetCoreID>
    7364:	4603      	mov	r3, r0
    7366:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    7368:	4a10      	ldr	r2, [pc, #64]	; (73ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    736a:	9b01      	ldr	r3, [sp, #4]
    736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7370:	2b00      	cmp	r3, #0
    7372:	d10d      	bne.n	7390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7374:	f7f9 fbf6 	bl	b64 <Port_schm_read_msr>
    7378:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    737a:	9b00      	ldr	r3, [sp, #0]
    737c:	f003 0301 	and.w	r3, r3, #1
    7380:	2b00      	cmp	r3, #0
    7382:	d100      	bne.n	7386 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7384:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    7386:	490a      	ldr	r1, [pc, #40]	; (73b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    7388:	9b01      	ldr	r3, [sp, #4]
    738a:	9a00      	ldr	r2, [sp, #0]
    738c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    7390:	4a06      	ldr	r2, [pc, #24]	; (73ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    7392:	9b01      	ldr	r3, [sp, #4]
    7394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7398:	1c5a      	adds	r2, r3, #1
    739a:	4904      	ldr	r1, [pc, #16]	; (73ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    739c:	9b01      	ldr	r3, [sp, #4]
    739e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73a2:	bf00      	nop
    73a4:	b003      	add	sp, #12
    73a6:	f85d fb04 	ldr.w	pc, [sp], #4
    73aa:	bf00      	nop
    73ac:	1fff8d54 	.word	0x1fff8d54
    73b0:	1fff8d50 	.word	0x1fff8d50

000073b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    73b4:	b500      	push	{lr}
    73b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73b8:	f7f9 fe6a 	bl	1090 <Sys_GetCoreID>
    73bc:	4603      	mov	r3, r0
    73be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    73c0:	4a0d      	ldr	r2, [pc, #52]	; (73f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    73c2:	9b01      	ldr	r3, [sp, #4]
    73c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c8:	1e5a      	subs	r2, r3, #1
    73ca:	490b      	ldr	r1, [pc, #44]	; (73f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    73cc:	9b01      	ldr	r3, [sp, #4]
    73ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    73d2:	4a0a      	ldr	r2, [pc, #40]	; (73fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    73d4:	9b01      	ldr	r3, [sp, #4]
    73d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73da:	f003 0301 	and.w	r3, r3, #1
    73de:	2b00      	cmp	r3, #0
    73e0:	d106      	bne.n	73f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    73e2:	4a05      	ldr	r2, [pc, #20]	; (73f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    73e4:	9b01      	ldr	r3, [sp, #4]
    73e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ea:	2b00      	cmp	r3, #0
    73ec:	d100      	bne.n	73f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73f0:	bf00      	nop
    73f2:	b003      	add	sp, #12
    73f4:	f85d fb04 	ldr.w	pc, [sp], #4
    73f8:	1fff8d54 	.word	0x1fff8d54
    73fc:	1fff8d50 	.word	0x1fff8d50

00007400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    7400:	b500      	push	{lr}
    7402:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7404:	f7f9 fe44 	bl	1090 <Sys_GetCoreID>
    7408:	4603      	mov	r3, r0
    740a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    740c:	4a10      	ldr	r2, [pc, #64]	; (7450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    740e:	9b01      	ldr	r3, [sp, #4]
    7410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7414:	2b00      	cmp	r3, #0
    7416:	d10d      	bne.n	7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7418:	f7f9 fba4 	bl	b64 <Port_schm_read_msr>
    741c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    741e:	9b00      	ldr	r3, [sp, #0]
    7420:	f003 0301 	and.w	r3, r3, #1
    7424:	2b00      	cmp	r3, #0
    7426:	d100      	bne.n	742a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7428:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    742a:	490a      	ldr	r1, [pc, #40]	; (7454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    742c:	9b01      	ldr	r3, [sp, #4]
    742e:	9a00      	ldr	r2, [sp, #0]
    7430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    7434:	4a06      	ldr	r2, [pc, #24]	; (7450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    7436:	9b01      	ldr	r3, [sp, #4]
    7438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    743c:	1c5a      	adds	r2, r3, #1
    743e:	4904      	ldr	r1, [pc, #16]	; (7450 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    7440:	9b01      	ldr	r3, [sp, #4]
    7442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7446:	bf00      	nop
    7448:	b003      	add	sp, #12
    744a:	f85d fb04 	ldr.w	pc, [sp], #4
    744e:	bf00      	nop
    7450:	1fff8d5c 	.word	0x1fff8d5c
    7454:	1fff8d58 	.word	0x1fff8d58

00007458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    7458:	b500      	push	{lr}
    745a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    745c:	f7f9 fe18 	bl	1090 <Sys_GetCoreID>
    7460:	4603      	mov	r3, r0
    7462:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    7464:	4a0d      	ldr	r2, [pc, #52]	; (749c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7466:	9b01      	ldr	r3, [sp, #4]
    7468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    746c:	1e5a      	subs	r2, r3, #1
    746e:	490b      	ldr	r1, [pc, #44]	; (749c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7470:	9b01      	ldr	r3, [sp, #4]
    7472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    7476:	4a0a      	ldr	r2, [pc, #40]	; (74a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    7478:	9b01      	ldr	r3, [sp, #4]
    747a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    747e:	f003 0301 	and.w	r3, r3, #1
    7482:	2b00      	cmp	r3, #0
    7484:	d106      	bne.n	7494 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    7486:	4a05      	ldr	r2, [pc, #20]	; (749c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7488:	9b01      	ldr	r3, [sp, #4]
    748a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    748e:	2b00      	cmp	r3, #0
    7490:	d100      	bne.n	7494 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7492:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7494:	bf00      	nop
    7496:	b003      	add	sp, #12
    7498:	f85d fb04 	ldr.w	pc, [sp], #4
    749c:	1fff8d5c 	.word	0x1fff8d5c
    74a0:	1fff8d58 	.word	0x1fff8d58

000074a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    74a4:	b500      	push	{lr}
    74a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74a8:	f7f9 fdf2 	bl	1090 <Sys_GetCoreID>
    74ac:	4603      	mov	r3, r0
    74ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    74b0:	4a10      	ldr	r2, [pc, #64]	; (74f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    74b2:	9b01      	ldr	r3, [sp, #4]
    74b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74b8:	2b00      	cmp	r3, #0
    74ba:	d10d      	bne.n	74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74bc:	f7f9 fb52 	bl	b64 <Port_schm_read_msr>
    74c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74c2:	9b00      	ldr	r3, [sp, #0]
    74c4:	f003 0301 	and.w	r3, r3, #1
    74c8:	2b00      	cmp	r3, #0
    74ca:	d100      	bne.n	74ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    74ce:	490a      	ldr	r1, [pc, #40]	; (74f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    74d0:	9b01      	ldr	r3, [sp, #4]
    74d2:	9a00      	ldr	r2, [sp, #0]
    74d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    74d8:	4a06      	ldr	r2, [pc, #24]	; (74f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    74da:	9b01      	ldr	r3, [sp, #4]
    74dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74e0:	1c5a      	adds	r2, r3, #1
    74e2:	4904      	ldr	r1, [pc, #16]	; (74f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    74e4:	9b01      	ldr	r3, [sp, #4]
    74e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74ea:	bf00      	nop
    74ec:	b003      	add	sp, #12
    74ee:	f85d fb04 	ldr.w	pc, [sp], #4
    74f2:	bf00      	nop
    74f4:	1fff8d64 	.word	0x1fff8d64
    74f8:	1fff8d60 	.word	0x1fff8d60

000074fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    74fc:	b500      	push	{lr}
    74fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7500:	f7f9 fdc6 	bl	1090 <Sys_GetCoreID>
    7504:	4603      	mov	r3, r0
    7506:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    7508:	4a0d      	ldr	r2, [pc, #52]	; (7540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    750a:	9b01      	ldr	r3, [sp, #4]
    750c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7510:	1e5a      	subs	r2, r3, #1
    7512:	490b      	ldr	r1, [pc, #44]	; (7540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    7514:	9b01      	ldr	r3, [sp, #4]
    7516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    751a:	4a0a      	ldr	r2, [pc, #40]	; (7544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    751c:	9b01      	ldr	r3, [sp, #4]
    751e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7522:	f003 0301 	and.w	r3, r3, #1
    7526:	2b00      	cmp	r3, #0
    7528:	d106      	bne.n	7538 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    752a:	4a05      	ldr	r2, [pc, #20]	; (7540 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    752c:	9b01      	ldr	r3, [sp, #4]
    752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7532:	2b00      	cmp	r3, #0
    7534:	d100      	bne.n	7538 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7536:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7538:	bf00      	nop
    753a:	b003      	add	sp, #12
    753c:	f85d fb04 	ldr.w	pc, [sp], #4
    7540:	1fff8d64 	.word	0x1fff8d64
    7544:	1fff8d60 	.word	0x1fff8d60

00007548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    7548:	b500      	push	{lr}
    754a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    754c:	f7f9 fda0 	bl	1090 <Sys_GetCoreID>
    7550:	4603      	mov	r3, r0
    7552:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    7554:	4a10      	ldr	r2, [pc, #64]	; (7598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7556:	9b01      	ldr	r3, [sp, #4]
    7558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    755c:	2b00      	cmp	r3, #0
    755e:	d10d      	bne.n	757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7560:	f7f9 fb00 	bl	b64 <Port_schm_read_msr>
    7564:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7566:	9b00      	ldr	r3, [sp, #0]
    7568:	f003 0301 	and.w	r3, r3, #1
    756c:	2b00      	cmp	r3, #0
    756e:	d100      	bne.n	7572 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7570:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    7572:	490a      	ldr	r1, [pc, #40]	; (759c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    7574:	9b01      	ldr	r3, [sp, #4]
    7576:	9a00      	ldr	r2, [sp, #0]
    7578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    757c:	4a06      	ldr	r2, [pc, #24]	; (7598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    757e:	9b01      	ldr	r3, [sp, #4]
    7580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7584:	1c5a      	adds	r2, r3, #1
    7586:	4904      	ldr	r1, [pc, #16]	; (7598 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7588:	9b01      	ldr	r3, [sp, #4]
    758a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    758e:	bf00      	nop
    7590:	b003      	add	sp, #12
    7592:	f85d fb04 	ldr.w	pc, [sp], #4
    7596:	bf00      	nop
    7598:	1fff8d6c 	.word	0x1fff8d6c
    759c:	1fff8d68 	.word	0x1fff8d68

000075a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    75a0:	b500      	push	{lr}
    75a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75a4:	f7f9 fd74 	bl	1090 <Sys_GetCoreID>
    75a8:	4603      	mov	r3, r0
    75aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    75ac:	4a0d      	ldr	r2, [pc, #52]	; (75e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    75ae:	9b01      	ldr	r3, [sp, #4]
    75b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b4:	1e5a      	subs	r2, r3, #1
    75b6:	490b      	ldr	r1, [pc, #44]	; (75e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    75b8:	9b01      	ldr	r3, [sp, #4]
    75ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    75be:	4a0a      	ldr	r2, [pc, #40]	; (75e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    75c0:	9b01      	ldr	r3, [sp, #4]
    75c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75c6:	f003 0301 	and.w	r3, r3, #1
    75ca:	2b00      	cmp	r3, #0
    75cc:	d106      	bne.n	75dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    75ce:	4a05      	ldr	r2, [pc, #20]	; (75e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    75d0:	9b01      	ldr	r3, [sp, #4]
    75d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d6:	2b00      	cmp	r3, #0
    75d8:	d100      	bne.n	75dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75dc:	bf00      	nop
    75de:	b003      	add	sp, #12
    75e0:	f85d fb04 	ldr.w	pc, [sp], #4
    75e4:	1fff8d6c 	.word	0x1fff8d6c
    75e8:	1fff8d68 	.word	0x1fff8d68

000075ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    75ec:	b500      	push	{lr}
    75ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75f0:	f7f9 fd4e 	bl	1090 <Sys_GetCoreID>
    75f4:	4603      	mov	r3, r0
    75f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    75f8:	4a10      	ldr	r2, [pc, #64]	; (763c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    75fa:	9b01      	ldr	r3, [sp, #4]
    75fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7600:	2b00      	cmp	r3, #0
    7602:	d10d      	bne.n	7620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7604:	f7f9 faae 	bl	b64 <Port_schm_read_msr>
    7608:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    760a:	9b00      	ldr	r3, [sp, #0]
    760c:	f003 0301 	and.w	r3, r3, #1
    7610:	2b00      	cmp	r3, #0
    7612:	d100      	bne.n	7616 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7614:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    7616:	490a      	ldr	r1, [pc, #40]	; (7640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    7618:	9b01      	ldr	r3, [sp, #4]
    761a:	9a00      	ldr	r2, [sp, #0]
    761c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    7620:	4a06      	ldr	r2, [pc, #24]	; (763c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    7622:	9b01      	ldr	r3, [sp, #4]
    7624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7628:	1c5a      	adds	r2, r3, #1
    762a:	4904      	ldr	r1, [pc, #16]	; (763c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    762c:	9b01      	ldr	r3, [sp, #4]
    762e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7632:	bf00      	nop
    7634:	b003      	add	sp, #12
    7636:	f85d fb04 	ldr.w	pc, [sp], #4
    763a:	bf00      	nop
    763c:	1fff8d74 	.word	0x1fff8d74
    7640:	1fff8d70 	.word	0x1fff8d70

00007644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7644:	b500      	push	{lr}
    7646:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7648:	f7f9 fd22 	bl	1090 <Sys_GetCoreID>
    764c:	4603      	mov	r3, r0
    764e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    7650:	4a0d      	ldr	r2, [pc, #52]	; (7688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7652:	9b01      	ldr	r3, [sp, #4]
    7654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7658:	1e5a      	subs	r2, r3, #1
    765a:	490b      	ldr	r1, [pc, #44]	; (7688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    765c:	9b01      	ldr	r3, [sp, #4]
    765e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    7662:	4a0a      	ldr	r2, [pc, #40]	; (768c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    7664:	9b01      	ldr	r3, [sp, #4]
    7666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    766a:	f003 0301 	and.w	r3, r3, #1
    766e:	2b00      	cmp	r3, #0
    7670:	d106      	bne.n	7680 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    7672:	4a05      	ldr	r2, [pc, #20]	; (7688 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7674:	9b01      	ldr	r3, [sp, #4]
    7676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    767a:	2b00      	cmp	r3, #0
    767c:	d100      	bne.n	7680 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    767e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7680:	bf00      	nop
    7682:	b003      	add	sp, #12
    7684:	f85d fb04 	ldr.w	pc, [sp], #4
    7688:	1fff8d74 	.word	0x1fff8d74
    768c:	1fff8d70 	.word	0x1fff8d70

00007690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    7690:	b500      	push	{lr}
    7692:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7694:	f7f9 fcfc 	bl	1090 <Sys_GetCoreID>
    7698:	4603      	mov	r3, r0
    769a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    769c:	4a10      	ldr	r2, [pc, #64]	; (76e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    769e:	9b01      	ldr	r3, [sp, #4]
    76a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a4:	2b00      	cmp	r3, #0
    76a6:	d10d      	bne.n	76c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    76a8:	f7f9 fa5c 	bl	b64 <Port_schm_read_msr>
    76ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    76ae:	9b00      	ldr	r3, [sp, #0]
    76b0:	f003 0301 	and.w	r3, r3, #1
    76b4:	2b00      	cmp	r3, #0
    76b6:	d100      	bne.n	76ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    76b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    76ba:	490a      	ldr	r1, [pc, #40]	; (76e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    76bc:	9b01      	ldr	r3, [sp, #4]
    76be:	9a00      	ldr	r2, [sp, #0]
    76c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    76c4:	4a06      	ldr	r2, [pc, #24]	; (76e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    76c6:	9b01      	ldr	r3, [sp, #4]
    76c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76cc:	1c5a      	adds	r2, r3, #1
    76ce:	4904      	ldr	r1, [pc, #16]	; (76e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    76d0:	9b01      	ldr	r3, [sp, #4]
    76d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76d6:	bf00      	nop
    76d8:	b003      	add	sp, #12
    76da:	f85d fb04 	ldr.w	pc, [sp], #4
    76de:	bf00      	nop
    76e0:	1fff8d7c 	.word	0x1fff8d7c
    76e4:	1fff8d78 	.word	0x1fff8d78

000076e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    76e8:	b500      	push	{lr}
    76ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76ec:	f7f9 fcd0 	bl	1090 <Sys_GetCoreID>
    76f0:	4603      	mov	r3, r0
    76f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    76f4:	4a0d      	ldr	r2, [pc, #52]	; (772c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    76f6:	9b01      	ldr	r3, [sp, #4]
    76f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76fc:	1e5a      	subs	r2, r3, #1
    76fe:	490b      	ldr	r1, [pc, #44]	; (772c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7700:	9b01      	ldr	r3, [sp, #4]
    7702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    7706:	4a0a      	ldr	r2, [pc, #40]	; (7730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    7708:	9b01      	ldr	r3, [sp, #4]
    770a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    770e:	f003 0301 	and.w	r3, r3, #1
    7712:	2b00      	cmp	r3, #0
    7714:	d106      	bne.n	7724 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    7716:	4a05      	ldr	r2, [pc, #20]	; (772c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    7718:	9b01      	ldr	r3, [sp, #4]
    771a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    771e:	2b00      	cmp	r3, #0
    7720:	d100      	bne.n	7724 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7722:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7724:	bf00      	nop
    7726:	b003      	add	sp, #12
    7728:	f85d fb04 	ldr.w	pc, [sp], #4
    772c:	1fff8d7c 	.word	0x1fff8d7c
    7730:	1fff8d78 	.word	0x1fff8d78

00007734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7734:	b500      	push	{lr}
    7736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7738:	f7f9 fcaa 	bl	1090 <Sys_GetCoreID>
    773c:	4603      	mov	r3, r0
    773e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    7740:	4a10      	ldr	r2, [pc, #64]	; (7784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7742:	9b01      	ldr	r3, [sp, #4]
    7744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7748:	2b00      	cmp	r3, #0
    774a:	d10d      	bne.n	7768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    774c:	f7f9 fa0a 	bl	b64 <Port_schm_read_msr>
    7750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7752:	9b00      	ldr	r3, [sp, #0]
    7754:	f003 0301 	and.w	r3, r3, #1
    7758:	2b00      	cmp	r3, #0
    775a:	d100      	bne.n	775e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    775c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    775e:	490a      	ldr	r1, [pc, #40]	; (7788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    7760:	9b01      	ldr	r3, [sp, #4]
    7762:	9a00      	ldr	r2, [sp, #0]
    7764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    7768:	4a06      	ldr	r2, [pc, #24]	; (7784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    776a:	9b01      	ldr	r3, [sp, #4]
    776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7770:	1c5a      	adds	r2, r3, #1
    7772:	4904      	ldr	r1, [pc, #16]	; (7784 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7774:	9b01      	ldr	r3, [sp, #4]
    7776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    777a:	bf00      	nop
    777c:	b003      	add	sp, #12
    777e:	f85d fb04 	ldr.w	pc, [sp], #4
    7782:	bf00      	nop
    7784:	1fff8d84 	.word	0x1fff8d84
    7788:	1fff8d80 	.word	0x1fff8d80

0000778c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    778c:	b500      	push	{lr}
    778e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7790:	f7f9 fc7e 	bl	1090 <Sys_GetCoreID>
    7794:	4603      	mov	r3, r0
    7796:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    7798:	4a0d      	ldr	r2, [pc, #52]	; (77d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    779a:	9b01      	ldr	r3, [sp, #4]
    779c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a0:	1e5a      	subs	r2, r3, #1
    77a2:	490b      	ldr	r1, [pc, #44]	; (77d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    77a4:	9b01      	ldr	r3, [sp, #4]
    77a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    77aa:	4a0a      	ldr	r2, [pc, #40]	; (77d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    77ac:	9b01      	ldr	r3, [sp, #4]
    77ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77b2:	f003 0301 	and.w	r3, r3, #1
    77b6:	2b00      	cmp	r3, #0
    77b8:	d106      	bne.n	77c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    77ba:	4a05      	ldr	r2, [pc, #20]	; (77d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    77bc:	9b01      	ldr	r3, [sp, #4]
    77be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c2:	2b00      	cmp	r3, #0
    77c4:	d100      	bne.n	77c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77c8:	bf00      	nop
    77ca:	b003      	add	sp, #12
    77cc:	f85d fb04 	ldr.w	pc, [sp], #4
    77d0:	1fff8d84 	.word	0x1fff8d84
    77d4:	1fff8d80 	.word	0x1fff8d80

000077d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    77d8:	b500      	push	{lr}
    77da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77dc:	f7f9 fc58 	bl	1090 <Sys_GetCoreID>
    77e0:	4603      	mov	r3, r0
    77e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    77e4:	4a10      	ldr	r2, [pc, #64]	; (7828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    77e6:	9b01      	ldr	r3, [sp, #4]
    77e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ec:	2b00      	cmp	r3, #0
    77ee:	d10d      	bne.n	780c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77f0:	f7f9 f9b8 	bl	b64 <Port_schm_read_msr>
    77f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77f6:	9b00      	ldr	r3, [sp, #0]
    77f8:	f003 0301 	and.w	r3, r3, #1
    77fc:	2b00      	cmp	r3, #0
    77fe:	d100      	bne.n	7802 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    7802:	490a      	ldr	r1, [pc, #40]	; (782c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    7804:	9b01      	ldr	r3, [sp, #4]
    7806:	9a00      	ldr	r2, [sp, #0]
    7808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    780c:	4a06      	ldr	r2, [pc, #24]	; (7828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    780e:	9b01      	ldr	r3, [sp, #4]
    7810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7814:	1c5a      	adds	r2, r3, #1
    7816:	4904      	ldr	r1, [pc, #16]	; (7828 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    7818:	9b01      	ldr	r3, [sp, #4]
    781a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    781e:	bf00      	nop
    7820:	b003      	add	sp, #12
    7822:	f85d fb04 	ldr.w	pc, [sp], #4
    7826:	bf00      	nop
    7828:	1fff8d8c 	.word	0x1fff8d8c
    782c:	1fff8d88 	.word	0x1fff8d88

00007830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7830:	b500      	push	{lr}
    7832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7834:	f7f9 fc2c 	bl	1090 <Sys_GetCoreID>
    7838:	4603      	mov	r3, r0
    783a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    783c:	4a0d      	ldr	r2, [pc, #52]	; (7874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    783e:	9b01      	ldr	r3, [sp, #4]
    7840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7844:	1e5a      	subs	r2, r3, #1
    7846:	490b      	ldr	r1, [pc, #44]	; (7874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7848:	9b01      	ldr	r3, [sp, #4]
    784a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    784e:	4a0a      	ldr	r2, [pc, #40]	; (7878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    7850:	9b01      	ldr	r3, [sp, #4]
    7852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7856:	f003 0301 	and.w	r3, r3, #1
    785a:	2b00      	cmp	r3, #0
    785c:	d106      	bne.n	786c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    785e:	4a05      	ldr	r2, [pc, #20]	; (7874 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7860:	9b01      	ldr	r3, [sp, #4]
    7862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7866:	2b00      	cmp	r3, #0
    7868:	d100      	bne.n	786c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    786a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    786c:	bf00      	nop
    786e:	b003      	add	sp, #12
    7870:	f85d fb04 	ldr.w	pc, [sp], #4
    7874:	1fff8d8c 	.word	0x1fff8d8c
    7878:	1fff8d88 	.word	0x1fff8d88

0000787c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    787c:	b500      	push	{lr}
    787e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7880:	f7f9 fc06 	bl	1090 <Sys_GetCoreID>
    7884:	4603      	mov	r3, r0
    7886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    7888:	4a10      	ldr	r2, [pc, #64]	; (78cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    788a:	9b01      	ldr	r3, [sp, #4]
    788c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7890:	2b00      	cmp	r3, #0
    7892:	d10d      	bne.n	78b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7894:	f7f9 f966 	bl	b64 <Port_schm_read_msr>
    7898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    789a:	9b00      	ldr	r3, [sp, #0]
    789c:	f003 0301 	and.w	r3, r3, #1
    78a0:	2b00      	cmp	r3, #0
    78a2:	d100      	bne.n	78a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    78a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    78a6:	490a      	ldr	r1, [pc, #40]	; (78d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    78a8:	9b01      	ldr	r3, [sp, #4]
    78aa:	9a00      	ldr	r2, [sp, #0]
    78ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    78b0:	4a06      	ldr	r2, [pc, #24]	; (78cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    78b2:	9b01      	ldr	r3, [sp, #4]
    78b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78b8:	1c5a      	adds	r2, r3, #1
    78ba:	4904      	ldr	r1, [pc, #16]	; (78cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    78bc:	9b01      	ldr	r3, [sp, #4]
    78be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    78c2:	bf00      	nop
    78c4:	b003      	add	sp, #12
    78c6:	f85d fb04 	ldr.w	pc, [sp], #4
    78ca:	bf00      	nop
    78cc:	1fff8d94 	.word	0x1fff8d94
    78d0:	1fff8d90 	.word	0x1fff8d90

000078d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    78d4:	b500      	push	{lr}
    78d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78d8:	f7f9 fbda 	bl	1090 <Sys_GetCoreID>
    78dc:	4603      	mov	r3, r0
    78de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    78e0:	4a0d      	ldr	r2, [pc, #52]	; (7918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    78e2:	9b01      	ldr	r3, [sp, #4]
    78e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78e8:	1e5a      	subs	r2, r3, #1
    78ea:	490b      	ldr	r1, [pc, #44]	; (7918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    78ec:	9b01      	ldr	r3, [sp, #4]
    78ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    78f2:	4a0a      	ldr	r2, [pc, #40]	; (791c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    78f4:	9b01      	ldr	r3, [sp, #4]
    78f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78fa:	f003 0301 	and.w	r3, r3, #1
    78fe:	2b00      	cmp	r3, #0
    7900:	d106      	bne.n	7910 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    7902:	4a05      	ldr	r2, [pc, #20]	; (7918 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7904:	9b01      	ldr	r3, [sp, #4]
    7906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    790a:	2b00      	cmp	r3, #0
    790c:	d100      	bne.n	7910 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    790e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7910:	bf00      	nop
    7912:	b003      	add	sp, #12
    7914:	f85d fb04 	ldr.w	pc, [sp], #4
    7918:	1fff8d94 	.word	0x1fff8d94
    791c:	1fff8d90 	.word	0x1fff8d90

00007920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7920:	b500      	push	{lr}
    7922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7924:	f7f9 fbb4 	bl	1090 <Sys_GetCoreID>
    7928:	4603      	mov	r3, r0
    792a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    792c:	4a10      	ldr	r2, [pc, #64]	; (7970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    792e:	9b01      	ldr	r3, [sp, #4]
    7930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7934:	2b00      	cmp	r3, #0
    7936:	d10d      	bne.n	7954 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7938:	f7f9 f914 	bl	b64 <Port_schm_read_msr>
    793c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    793e:	9b00      	ldr	r3, [sp, #0]
    7940:	f003 0301 	and.w	r3, r3, #1
    7944:	2b00      	cmp	r3, #0
    7946:	d100      	bne.n	794a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    794a:	490a      	ldr	r1, [pc, #40]	; (7974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    794c:	9b01      	ldr	r3, [sp, #4]
    794e:	9a00      	ldr	r2, [sp, #0]
    7950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7954:	4a06      	ldr	r2, [pc, #24]	; (7970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7956:	9b01      	ldr	r3, [sp, #4]
    7958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    795c:	1c5a      	adds	r2, r3, #1
    795e:	4904      	ldr	r1, [pc, #16]	; (7970 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7960:	9b01      	ldr	r3, [sp, #4]
    7962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7966:	bf00      	nop
    7968:	b003      	add	sp, #12
    796a:	f85d fb04 	ldr.w	pc, [sp], #4
    796e:	bf00      	nop
    7970:	1fff8d9c 	.word	0x1fff8d9c
    7974:	1fff8d98 	.word	0x1fff8d98

00007978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7978:	b500      	push	{lr}
    797a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    797c:	f7f9 fb88 	bl	1090 <Sys_GetCoreID>
    7980:	4603      	mov	r3, r0
    7982:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7984:	4a0d      	ldr	r2, [pc, #52]	; (79bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7986:	9b01      	ldr	r3, [sp, #4]
    7988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    798c:	1e5a      	subs	r2, r3, #1
    798e:	490b      	ldr	r1, [pc, #44]	; (79bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7990:	9b01      	ldr	r3, [sp, #4]
    7992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7996:	4a0a      	ldr	r2, [pc, #40]	; (79c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7998:	9b01      	ldr	r3, [sp, #4]
    799a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    799e:	f003 0301 	and.w	r3, r3, #1
    79a2:	2b00      	cmp	r3, #0
    79a4:	d106      	bne.n	79b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    79a6:	4a05      	ldr	r2, [pc, #20]	; (79bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    79a8:	9b01      	ldr	r3, [sp, #4]
    79aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ae:	2b00      	cmp	r3, #0
    79b0:	d100      	bne.n	79b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    79b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    79b4:	bf00      	nop
    79b6:	b003      	add	sp, #12
    79b8:	f85d fb04 	ldr.w	pc, [sp], #4
    79bc:	1fff8d9c 	.word	0x1fff8d9c
    79c0:	1fff8d98 	.word	0x1fff8d98

000079c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    79c4:	b500      	push	{lr}
    79c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79c8:	f7f9 fb62 	bl	1090 <Sys_GetCoreID>
    79cc:	4603      	mov	r3, r0
    79ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    79d0:	4a10      	ldr	r2, [pc, #64]	; (7a14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    79d2:	9b01      	ldr	r3, [sp, #4]
    79d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d8:	2b00      	cmp	r3, #0
    79da:	d10d      	bne.n	79f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    79dc:	f7f9 f8c2 	bl	b64 <Port_schm_read_msr>
    79e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    79e2:	9b00      	ldr	r3, [sp, #0]
    79e4:	f003 0301 	and.w	r3, r3, #1
    79e8:	2b00      	cmp	r3, #0
    79ea:	d100      	bne.n	79ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    79ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    79ee:	490a      	ldr	r1, [pc, #40]	; (7a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    79f0:	9b01      	ldr	r3, [sp, #4]
    79f2:	9a00      	ldr	r2, [sp, #0]
    79f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    79f8:	4a06      	ldr	r2, [pc, #24]	; (7a14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    79fa:	9b01      	ldr	r3, [sp, #4]
    79fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a00:	1c5a      	adds	r2, r3, #1
    7a02:	4904      	ldr	r1, [pc, #16]	; (7a14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7a04:	9b01      	ldr	r3, [sp, #4]
    7a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a0a:	bf00      	nop
    7a0c:	b003      	add	sp, #12
    7a0e:	f85d fb04 	ldr.w	pc, [sp], #4
    7a12:	bf00      	nop
    7a14:	1fff8da4 	.word	0x1fff8da4
    7a18:	1fff8da0 	.word	0x1fff8da0

00007a1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7a1c:	b500      	push	{lr}
    7a1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a20:	f7f9 fb36 	bl	1090 <Sys_GetCoreID>
    7a24:	4603      	mov	r3, r0
    7a26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    7a28:	4a0d      	ldr	r2, [pc, #52]	; (7a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7a2a:	9b01      	ldr	r3, [sp, #4]
    7a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a30:	1e5a      	subs	r2, r3, #1
    7a32:	490b      	ldr	r1, [pc, #44]	; (7a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7a34:	9b01      	ldr	r3, [sp, #4]
    7a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    7a3a:	4a0a      	ldr	r2, [pc, #40]	; (7a64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    7a3c:	9b01      	ldr	r3, [sp, #4]
    7a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a42:	f003 0301 	and.w	r3, r3, #1
    7a46:	2b00      	cmp	r3, #0
    7a48:	d106      	bne.n	7a58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7a4a:	4a05      	ldr	r2, [pc, #20]	; (7a60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7a4c:	9b01      	ldr	r3, [sp, #4]
    7a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a52:	2b00      	cmp	r3, #0
    7a54:	d100      	bne.n	7a58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7a56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a58:	bf00      	nop
    7a5a:	b003      	add	sp, #12
    7a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    7a60:	1fff8da4 	.word	0x1fff8da4
    7a64:	1fff8da0 	.word	0x1fff8da0

00007a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7a68:	b500      	push	{lr}
    7a6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a6c:	f7f9 fb10 	bl	1090 <Sys_GetCoreID>
    7a70:	4603      	mov	r3, r0
    7a72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    7a74:	4a10      	ldr	r2, [pc, #64]	; (7ab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a7c:	2b00      	cmp	r3, #0
    7a7e:	d10d      	bne.n	7a9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a80:	f7f9 f870 	bl	b64 <Port_schm_read_msr>
    7a84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a86:	9b00      	ldr	r3, [sp, #0]
    7a88:	f003 0301 	and.w	r3, r3, #1
    7a8c:	2b00      	cmp	r3, #0
    7a8e:	d100      	bne.n	7a92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    7a92:	490a      	ldr	r1, [pc, #40]	; (7abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7a94:	9b01      	ldr	r3, [sp, #4]
    7a96:	9a00      	ldr	r2, [sp, #0]
    7a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7a9c:	4a06      	ldr	r2, [pc, #24]	; (7ab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7a9e:	9b01      	ldr	r3, [sp, #4]
    7aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aa4:	1c5a      	adds	r2, r3, #1
    7aa6:	4904      	ldr	r1, [pc, #16]	; (7ab8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7aa8:	9b01      	ldr	r3, [sp, #4]
    7aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7aae:	bf00      	nop
    7ab0:	b003      	add	sp, #12
    7ab2:	f85d fb04 	ldr.w	pc, [sp], #4
    7ab6:	bf00      	nop
    7ab8:	1fff8dac 	.word	0x1fff8dac
    7abc:	1fff8da8 	.word	0x1fff8da8

00007ac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7ac0:	b500      	push	{lr}
    7ac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ac4:	f7f9 fae4 	bl	1090 <Sys_GetCoreID>
    7ac8:	4603      	mov	r3, r0
    7aca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7acc:	4a0d      	ldr	r2, [pc, #52]	; (7b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7ace:	9b01      	ldr	r3, [sp, #4]
    7ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ad4:	1e5a      	subs	r2, r3, #1
    7ad6:	490b      	ldr	r1, [pc, #44]	; (7b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7ad8:	9b01      	ldr	r3, [sp, #4]
    7ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    7ade:	4a0a      	ldr	r2, [pc, #40]	; (7b08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    7ae0:	9b01      	ldr	r3, [sp, #4]
    7ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ae6:	f003 0301 	and.w	r3, r3, #1
    7aea:	2b00      	cmp	r3, #0
    7aec:	d106      	bne.n	7afc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    7aee:	4a05      	ldr	r2, [pc, #20]	; (7b04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7af0:	9b01      	ldr	r3, [sp, #4]
    7af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af6:	2b00      	cmp	r3, #0
    7af8:	d100      	bne.n	7afc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7afa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7afc:	bf00      	nop
    7afe:	b003      	add	sp, #12
    7b00:	f85d fb04 	ldr.w	pc, [sp], #4
    7b04:	1fff8dac 	.word	0x1fff8dac
    7b08:	1fff8da8 	.word	0x1fff8da8

00007b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7b0c:	b500      	push	{lr}
    7b0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b10:	f7f9 fabe 	bl	1090 <Sys_GetCoreID>
    7b14:	4603      	mov	r3, r0
    7b16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7b18:	4a10      	ldr	r2, [pc, #64]	; (7b5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7b1a:	9b01      	ldr	r3, [sp, #4]
    7b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b20:	2b00      	cmp	r3, #0
    7b22:	d10d      	bne.n	7b40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b24:	f7f9 f81e 	bl	b64 <Port_schm_read_msr>
    7b28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b2a:	9b00      	ldr	r3, [sp, #0]
    7b2c:	f003 0301 	and.w	r3, r3, #1
    7b30:	2b00      	cmp	r3, #0
    7b32:	d100      	bne.n	7b36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    7b36:	490a      	ldr	r1, [pc, #40]	; (7b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    7b38:	9b01      	ldr	r3, [sp, #4]
    7b3a:	9a00      	ldr	r2, [sp, #0]
    7b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    7b40:	4a06      	ldr	r2, [pc, #24]	; (7b5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7b42:	9b01      	ldr	r3, [sp, #4]
    7b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b48:	1c5a      	adds	r2, r3, #1
    7b4a:	4904      	ldr	r1, [pc, #16]	; (7b5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7b4c:	9b01      	ldr	r3, [sp, #4]
    7b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b52:	bf00      	nop
    7b54:	b003      	add	sp, #12
    7b56:	f85d fb04 	ldr.w	pc, [sp], #4
    7b5a:	bf00      	nop
    7b5c:	1fff8db4 	.word	0x1fff8db4
    7b60:	1fff8db0 	.word	0x1fff8db0

00007b64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7b64:	b500      	push	{lr}
    7b66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b68:	f7f9 fa92 	bl	1090 <Sys_GetCoreID>
    7b6c:	4603      	mov	r3, r0
    7b6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    7b70:	4a0d      	ldr	r2, [pc, #52]	; (7ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7b72:	9b01      	ldr	r3, [sp, #4]
    7b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b78:	1e5a      	subs	r2, r3, #1
    7b7a:	490b      	ldr	r1, [pc, #44]	; (7ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7b7c:	9b01      	ldr	r3, [sp, #4]
    7b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    7b82:	4a0a      	ldr	r2, [pc, #40]	; (7bac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7b84:	9b01      	ldr	r3, [sp, #4]
    7b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b8a:	f003 0301 	and.w	r3, r3, #1
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d106      	bne.n	7ba0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    7b92:	4a05      	ldr	r2, [pc, #20]	; (7ba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7b94:	9b01      	ldr	r3, [sp, #4]
    7b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d100      	bne.n	7ba0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ba0:	bf00      	nop
    7ba2:	b003      	add	sp, #12
    7ba4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ba8:	1fff8db4 	.word	0x1fff8db4
    7bac:	1fff8db0 	.word	0x1fff8db0

00007bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7bb0:	b500      	push	{lr}
    7bb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7bb4:	f7f9 fa6c 	bl	1090 <Sys_GetCoreID>
    7bb8:	4603      	mov	r3, r0
    7bba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7bbc:	4a10      	ldr	r2, [pc, #64]	; (7c00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7bbe:	9b01      	ldr	r3, [sp, #4]
    7bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc4:	2b00      	cmp	r3, #0
    7bc6:	d10d      	bne.n	7be4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7bc8:	f7f8 ffcc 	bl	b64 <Port_schm_read_msr>
    7bcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7bce:	9b00      	ldr	r3, [sp, #0]
    7bd0:	f003 0301 	and.w	r3, r3, #1
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	d100      	bne.n	7bda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7bd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7bda:	490a      	ldr	r1, [pc, #40]	; (7c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7bdc:	9b01      	ldr	r3, [sp, #4]
    7bde:	9a00      	ldr	r2, [sp, #0]
    7be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7be4:	4a06      	ldr	r2, [pc, #24]	; (7c00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7be6:	9b01      	ldr	r3, [sp, #4]
    7be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bec:	1c5a      	adds	r2, r3, #1
    7bee:	4904      	ldr	r1, [pc, #16]	; (7c00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7bf0:	9b01      	ldr	r3, [sp, #4]
    7bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bf6:	bf00      	nop
    7bf8:	b003      	add	sp, #12
    7bfa:	f85d fb04 	ldr.w	pc, [sp], #4
    7bfe:	bf00      	nop
    7c00:	1fff8dbc 	.word	0x1fff8dbc
    7c04:	1fff8db8 	.word	0x1fff8db8

00007c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7c08:	b500      	push	{lr}
    7c0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c0c:	f7f9 fa40 	bl	1090 <Sys_GetCoreID>
    7c10:	4603      	mov	r3, r0
    7c12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7c14:	4a0d      	ldr	r2, [pc, #52]	; (7c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7c16:	9b01      	ldr	r3, [sp, #4]
    7c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c1c:	1e5a      	subs	r2, r3, #1
    7c1e:	490b      	ldr	r1, [pc, #44]	; (7c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7c20:	9b01      	ldr	r3, [sp, #4]
    7c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    7c26:	4a0a      	ldr	r2, [pc, #40]	; (7c50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    7c28:	9b01      	ldr	r3, [sp, #4]
    7c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c2e:	f003 0301 	and.w	r3, r3, #1
    7c32:	2b00      	cmp	r3, #0
    7c34:	d106      	bne.n	7c44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    7c36:	4a05      	ldr	r2, [pc, #20]	; (7c4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7c38:	9b01      	ldr	r3, [sp, #4]
    7c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d100      	bne.n	7c44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c44:	bf00      	nop
    7c46:	b003      	add	sp, #12
    7c48:	f85d fb04 	ldr.w	pc, [sp], #4
    7c4c:	1fff8dbc 	.word	0x1fff8dbc
    7c50:	1fff8db8 	.word	0x1fff8db8

00007c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7c54:	b500      	push	{lr}
    7c56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c58:	f7f9 fa1a 	bl	1090 <Sys_GetCoreID>
    7c5c:	4603      	mov	r3, r0
    7c5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    7c60:	4a10      	ldr	r2, [pc, #64]	; (7ca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c68:	2b00      	cmp	r3, #0
    7c6a:	d10d      	bne.n	7c88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c6c:	f7f8 ff7a 	bl	b64 <Port_schm_read_msr>
    7c70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c72:	9b00      	ldr	r3, [sp, #0]
    7c74:	f003 0301 	and.w	r3, r3, #1
    7c78:	2b00      	cmp	r3, #0
    7c7a:	d100      	bne.n	7c7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    7c7e:	490a      	ldr	r1, [pc, #40]	; (7ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    7c80:	9b01      	ldr	r3, [sp, #4]
    7c82:	9a00      	ldr	r2, [sp, #0]
    7c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    7c88:	4a06      	ldr	r2, [pc, #24]	; (7ca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7c8a:	9b01      	ldr	r3, [sp, #4]
    7c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c90:	1c5a      	adds	r2, r3, #1
    7c92:	4904      	ldr	r1, [pc, #16]	; (7ca4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7c94:	9b01      	ldr	r3, [sp, #4]
    7c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c9a:	bf00      	nop
    7c9c:	b003      	add	sp, #12
    7c9e:	f85d fb04 	ldr.w	pc, [sp], #4
    7ca2:	bf00      	nop
    7ca4:	1fff8dc4 	.word	0x1fff8dc4
    7ca8:	1fff8dc0 	.word	0x1fff8dc0

00007cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7cac:	b500      	push	{lr}
    7cae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7cb0:	f7f9 f9ee 	bl	1090 <Sys_GetCoreID>
    7cb4:	4603      	mov	r3, r0
    7cb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    7cb8:	4a0d      	ldr	r2, [pc, #52]	; (7cf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7cba:	9b01      	ldr	r3, [sp, #4]
    7cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cc0:	1e5a      	subs	r2, r3, #1
    7cc2:	490b      	ldr	r1, [pc, #44]	; (7cf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7cc4:	9b01      	ldr	r3, [sp, #4]
    7cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    7cca:	4a0a      	ldr	r2, [pc, #40]	; (7cf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7ccc:	9b01      	ldr	r3, [sp, #4]
    7cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cd2:	f003 0301 	and.w	r3, r3, #1
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d106      	bne.n	7ce8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7cda:	4a05      	ldr	r2, [pc, #20]	; (7cf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7cdc:	9b01      	ldr	r3, [sp, #4]
    7cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d100      	bne.n	7ce8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ce8:	bf00      	nop
    7cea:	b003      	add	sp, #12
    7cec:	f85d fb04 	ldr.w	pc, [sp], #4
    7cf0:	1fff8dc4 	.word	0x1fff8dc4
    7cf4:	1fff8dc0 	.word	0x1fff8dc0

00007cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7cf8:	b500      	push	{lr}
    7cfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7cfc:	f7f9 f9c8 	bl	1090 <Sys_GetCoreID>
    7d00:	4603      	mov	r3, r0
    7d02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7d04:	4a10      	ldr	r2, [pc, #64]	; (7d48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7d06:	9b01      	ldr	r3, [sp, #4]
    7d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d10d      	bne.n	7d2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7d10:	f7f8 ff28 	bl	b64 <Port_schm_read_msr>
    7d14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7d16:	9b00      	ldr	r3, [sp, #0]
    7d18:	f003 0301 	and.w	r3, r3, #1
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	d100      	bne.n	7d22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7d20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    7d22:	490a      	ldr	r1, [pc, #40]	; (7d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    7d24:	9b01      	ldr	r3, [sp, #4]
    7d26:	9a00      	ldr	r2, [sp, #0]
    7d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    7d2c:	4a06      	ldr	r2, [pc, #24]	; (7d48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7d2e:	9b01      	ldr	r3, [sp, #4]
    7d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d34:	1c5a      	adds	r2, r3, #1
    7d36:	4904      	ldr	r1, [pc, #16]	; (7d48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7d38:	9b01      	ldr	r3, [sp, #4]
    7d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d3e:	bf00      	nop
    7d40:	b003      	add	sp, #12
    7d42:	f85d fb04 	ldr.w	pc, [sp], #4
    7d46:	bf00      	nop
    7d48:	1fff8dcc 	.word	0x1fff8dcc
    7d4c:	1fff8dc8 	.word	0x1fff8dc8

00007d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7d50:	b500      	push	{lr}
    7d52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d54:	f7f9 f99c 	bl	1090 <Sys_GetCoreID>
    7d58:	4603      	mov	r3, r0
    7d5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    7d5c:	4a0d      	ldr	r2, [pc, #52]	; (7d94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7d5e:	9b01      	ldr	r3, [sp, #4]
    7d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d64:	1e5a      	subs	r2, r3, #1
    7d66:	490b      	ldr	r1, [pc, #44]	; (7d94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7d68:	9b01      	ldr	r3, [sp, #4]
    7d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    7d6e:	4a0a      	ldr	r2, [pc, #40]	; (7d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    7d70:	9b01      	ldr	r3, [sp, #4]
    7d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d76:	f003 0301 	and.w	r3, r3, #1
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d106      	bne.n	7d8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    7d7e:	4a05      	ldr	r2, [pc, #20]	; (7d94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7d80:	9b01      	ldr	r3, [sp, #4]
    7d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d86:	2b00      	cmp	r3, #0
    7d88:	d100      	bne.n	7d8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7d8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7d8c:	bf00      	nop
    7d8e:	b003      	add	sp, #12
    7d90:	f85d fb04 	ldr.w	pc, [sp], #4
    7d94:	1fff8dcc 	.word	0x1fff8dcc
    7d98:	1fff8dc8 	.word	0x1fff8dc8

00007d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7d9c:	b500      	push	{lr}
    7d9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7da0:	f7f9 f976 	bl	1090 <Sys_GetCoreID>
    7da4:	4603      	mov	r3, r0
    7da6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    7da8:	4a10      	ldr	r2, [pc, #64]	; (7dec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7daa:	9b01      	ldr	r3, [sp, #4]
    7dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7db0:	2b00      	cmp	r3, #0
    7db2:	d10d      	bne.n	7dd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7db4:	f7f8 fed6 	bl	b64 <Port_schm_read_msr>
    7db8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7dba:	9b00      	ldr	r3, [sp, #0]
    7dbc:	f003 0301 	and.w	r3, r3, #1
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	d100      	bne.n	7dc6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7dc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    7dc6:	490a      	ldr	r1, [pc, #40]	; (7df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    7dc8:	9b01      	ldr	r3, [sp, #4]
    7dca:	9a00      	ldr	r2, [sp, #0]
    7dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    7dd0:	4a06      	ldr	r2, [pc, #24]	; (7dec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7dd2:	9b01      	ldr	r3, [sp, #4]
    7dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dd8:	1c5a      	adds	r2, r3, #1
    7dda:	4904      	ldr	r1, [pc, #16]	; (7dec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7ddc:	9b01      	ldr	r3, [sp, #4]
    7dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7de2:	bf00      	nop
    7de4:	b003      	add	sp, #12
    7de6:	f85d fb04 	ldr.w	pc, [sp], #4
    7dea:	bf00      	nop
    7dec:	1fff8dd4 	.word	0x1fff8dd4
    7df0:	1fff8dd0 	.word	0x1fff8dd0

00007df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7df4:	b500      	push	{lr}
    7df6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7df8:	f7f9 f94a 	bl	1090 <Sys_GetCoreID>
    7dfc:	4603      	mov	r3, r0
    7dfe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    7e00:	4a0d      	ldr	r2, [pc, #52]	; (7e38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7e02:	9b01      	ldr	r3, [sp, #4]
    7e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e08:	1e5a      	subs	r2, r3, #1
    7e0a:	490b      	ldr	r1, [pc, #44]	; (7e38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7e0c:	9b01      	ldr	r3, [sp, #4]
    7e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    7e12:	4a0a      	ldr	r2, [pc, #40]	; (7e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e1a:	f003 0301 	and.w	r3, r3, #1
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d106      	bne.n	7e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    7e22:	4a05      	ldr	r2, [pc, #20]	; (7e38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7e24:	9b01      	ldr	r3, [sp, #4]
    7e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e2a:	2b00      	cmp	r3, #0
    7e2c:	d100      	bne.n	7e30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7e2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7e30:	bf00      	nop
    7e32:	b003      	add	sp, #12
    7e34:	f85d fb04 	ldr.w	pc, [sp], #4
    7e38:	1fff8dd4 	.word	0x1fff8dd4
    7e3c:	1fff8dd0 	.word	0x1fff8dd0

00007e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7e40:	b500      	push	{lr}
    7e42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e44:	f7f9 f924 	bl	1090 <Sys_GetCoreID>
    7e48:	4603      	mov	r3, r0
    7e4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    7e4c:	4a10      	ldr	r2, [pc, #64]	; (7e90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7e4e:	9b01      	ldr	r3, [sp, #4]
    7e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e54:	2b00      	cmp	r3, #0
    7e56:	d10d      	bne.n	7e74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7e58:	f7f8 fe84 	bl	b64 <Port_schm_read_msr>
    7e5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7e5e:	9b00      	ldr	r3, [sp, #0]
    7e60:	f003 0301 	and.w	r3, r3, #1
    7e64:	2b00      	cmp	r3, #0
    7e66:	d100      	bne.n	7e6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7e68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    7e6a:	490a      	ldr	r1, [pc, #40]	; (7e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    7e6c:	9b01      	ldr	r3, [sp, #4]
    7e6e:	9a00      	ldr	r2, [sp, #0]
    7e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    7e74:	4a06      	ldr	r2, [pc, #24]	; (7e90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7e76:	9b01      	ldr	r3, [sp, #4]
    7e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e7c:	1c5a      	adds	r2, r3, #1
    7e7e:	4904      	ldr	r1, [pc, #16]	; (7e90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7e80:	9b01      	ldr	r3, [sp, #4]
    7e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e86:	bf00      	nop
    7e88:	b003      	add	sp, #12
    7e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    7e8e:	bf00      	nop
    7e90:	1fff8ddc 	.word	0x1fff8ddc
    7e94:	1fff8dd8 	.word	0x1fff8dd8

00007e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7e98:	b500      	push	{lr}
    7e9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e9c:	f7f9 f8f8 	bl	1090 <Sys_GetCoreID>
    7ea0:	4603      	mov	r3, r0
    7ea2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    7ea4:	4a0d      	ldr	r2, [pc, #52]	; (7edc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7ea6:	9b01      	ldr	r3, [sp, #4]
    7ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eac:	1e5a      	subs	r2, r3, #1
    7eae:	490b      	ldr	r1, [pc, #44]	; (7edc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7eb0:	9b01      	ldr	r3, [sp, #4]
    7eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    7eb6:	4a0a      	ldr	r2, [pc, #40]	; (7ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    7eb8:	9b01      	ldr	r3, [sp, #4]
    7eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ebe:	f003 0301 	and.w	r3, r3, #1
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d106      	bne.n	7ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    7ec6:	4a05      	ldr	r2, [pc, #20]	; (7edc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7ec8:	9b01      	ldr	r3, [sp, #4]
    7eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d100      	bne.n	7ed4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7ed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7ed4:	bf00      	nop
    7ed6:	b003      	add	sp, #12
    7ed8:	f85d fb04 	ldr.w	pc, [sp], #4
    7edc:	1fff8ddc 	.word	0x1fff8ddc
    7ee0:	1fff8dd8 	.word	0x1fff8dd8

00007ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7ee4:	b500      	push	{lr}
    7ee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ee8:	f7f9 f8d2 	bl	1090 <Sys_GetCoreID>
    7eec:	4603      	mov	r3, r0
    7eee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    7ef0:	4a10      	ldr	r2, [pc, #64]	; (7f34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7ef2:	9b01      	ldr	r3, [sp, #4]
    7ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d10d      	bne.n	7f18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7efc:	f7f8 fe32 	bl	b64 <Port_schm_read_msr>
    7f00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7f02:	9b00      	ldr	r3, [sp, #0]
    7f04:	f003 0301 	and.w	r3, r3, #1
    7f08:	2b00      	cmp	r3, #0
    7f0a:	d100      	bne.n	7f0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7f0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    7f0e:	490a      	ldr	r1, [pc, #40]	; (7f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    7f10:	9b01      	ldr	r3, [sp, #4]
    7f12:	9a00      	ldr	r2, [sp, #0]
    7f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7f18:	4a06      	ldr	r2, [pc, #24]	; (7f34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7f1a:	9b01      	ldr	r3, [sp, #4]
    7f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f20:	1c5a      	adds	r2, r3, #1
    7f22:	4904      	ldr	r1, [pc, #16]	; (7f34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7f24:	9b01      	ldr	r3, [sp, #4]
    7f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7f2a:	bf00      	nop
    7f2c:	b003      	add	sp, #12
    7f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    7f32:	bf00      	nop
    7f34:	1fff8de4 	.word	0x1fff8de4
    7f38:	1fff8de0 	.word	0x1fff8de0

00007f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7f3c:	b500      	push	{lr}
    7f3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f40:	f7f9 f8a6 	bl	1090 <Sys_GetCoreID>
    7f44:	4603      	mov	r3, r0
    7f46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    7f48:	4a0d      	ldr	r2, [pc, #52]	; (7f80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7f4a:	9b01      	ldr	r3, [sp, #4]
    7f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f50:	1e5a      	subs	r2, r3, #1
    7f52:	490b      	ldr	r1, [pc, #44]	; (7f80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7f54:	9b01      	ldr	r3, [sp, #4]
    7f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    7f5a:	4a0a      	ldr	r2, [pc, #40]	; (7f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    7f5c:	9b01      	ldr	r3, [sp, #4]
    7f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f62:	f003 0301 	and.w	r3, r3, #1
    7f66:	2b00      	cmp	r3, #0
    7f68:	d106      	bne.n	7f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    7f6a:	4a05      	ldr	r2, [pc, #20]	; (7f80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7f6c:	9b01      	ldr	r3, [sp, #4]
    7f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f72:	2b00      	cmp	r3, #0
    7f74:	d100      	bne.n	7f78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7f76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7f78:	bf00      	nop
    7f7a:	b003      	add	sp, #12
    7f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    7f80:	1fff8de4 	.word	0x1fff8de4
    7f84:	1fff8de0 	.word	0x1fff8de0

00007f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7f88:	b500      	push	{lr}
    7f8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7f8c:	f7f9 f880 	bl	1090 <Sys_GetCoreID>
    7f90:	4603      	mov	r3, r0
    7f92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    7f94:	4a10      	ldr	r2, [pc, #64]	; (7fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7f96:	9b01      	ldr	r3, [sp, #4]
    7f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d10d      	bne.n	7fbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7fa0:	f7f8 fde0 	bl	b64 <Port_schm_read_msr>
    7fa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7fa6:	9b00      	ldr	r3, [sp, #0]
    7fa8:	f003 0301 	and.w	r3, r3, #1
    7fac:	2b00      	cmp	r3, #0
    7fae:	d100      	bne.n	7fb2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7fb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    7fb2:	490a      	ldr	r1, [pc, #40]	; (7fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    7fb4:	9b01      	ldr	r3, [sp, #4]
    7fb6:	9a00      	ldr	r2, [sp, #0]
    7fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7fbc:	4a06      	ldr	r2, [pc, #24]	; (7fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7fbe:	9b01      	ldr	r3, [sp, #4]
    7fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fc4:	1c5a      	adds	r2, r3, #1
    7fc6:	4904      	ldr	r1, [pc, #16]	; (7fd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7fc8:	9b01      	ldr	r3, [sp, #4]
    7fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7fce:	bf00      	nop
    7fd0:	b003      	add	sp, #12
    7fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    7fd6:	bf00      	nop
    7fd8:	1fff8dec 	.word	0x1fff8dec
    7fdc:	1fff8de8 	.word	0x1fff8de8

00007fe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7fe0:	b500      	push	{lr}
    7fe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7fe4:	f7f9 f854 	bl	1090 <Sys_GetCoreID>
    7fe8:	4603      	mov	r3, r0
    7fea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7fec:	4a0d      	ldr	r2, [pc, #52]	; (8024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7fee:	9b01      	ldr	r3, [sp, #4]
    7ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ff4:	1e5a      	subs	r2, r3, #1
    7ff6:	490b      	ldr	r1, [pc, #44]	; (8024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7ff8:	9b01      	ldr	r3, [sp, #4]
    7ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    7ffe:	4a0a      	ldr	r2, [pc, #40]	; (8028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    8000:	9b01      	ldr	r3, [sp, #4]
    8002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8006:	f003 0301 	and.w	r3, r3, #1
    800a:	2b00      	cmp	r3, #0
    800c:	d106      	bne.n	801c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    800e:	4a05      	ldr	r2, [pc, #20]	; (8024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    8010:	9b01      	ldr	r3, [sp, #4]
    8012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8016:	2b00      	cmp	r3, #0
    8018:	d100      	bne.n	801c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    801a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    801c:	bf00      	nop
    801e:	b003      	add	sp, #12
    8020:	f85d fb04 	ldr.w	pc, [sp], #4
    8024:	1fff8dec 	.word	0x1fff8dec
    8028:	1fff8de8 	.word	0x1fff8de8

0000802c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    802c:	b500      	push	{lr}
    802e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8030:	f7f9 f82e 	bl	1090 <Sys_GetCoreID>
    8034:	4603      	mov	r3, r0
    8036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    8038:	4a10      	ldr	r2, [pc, #64]	; (807c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    803a:	9b01      	ldr	r3, [sp, #4]
    803c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8040:	2b00      	cmp	r3, #0
    8042:	d10d      	bne.n	8060 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8044:	f7f8 fd8e 	bl	b64 <Port_schm_read_msr>
    8048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    804a:	9b00      	ldr	r3, [sp, #0]
    804c:	f003 0301 	and.w	r3, r3, #1
    8050:	2b00      	cmp	r3, #0
    8052:	d100      	bne.n	8056 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    8056:	490a      	ldr	r1, [pc, #40]	; (8080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    8058:	9b01      	ldr	r3, [sp, #4]
    805a:	9a00      	ldr	r2, [sp, #0]
    805c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    8060:	4a06      	ldr	r2, [pc, #24]	; (807c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    8062:	9b01      	ldr	r3, [sp, #4]
    8064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8068:	1c5a      	adds	r2, r3, #1
    806a:	4904      	ldr	r1, [pc, #16]	; (807c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    806c:	9b01      	ldr	r3, [sp, #4]
    806e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8072:	bf00      	nop
    8074:	b003      	add	sp, #12
    8076:	f85d fb04 	ldr.w	pc, [sp], #4
    807a:	bf00      	nop
    807c:	1fff8df4 	.word	0x1fff8df4
    8080:	1fff8df0 	.word	0x1fff8df0

00008084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    8084:	b500      	push	{lr}
    8086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8088:	f7f9 f802 	bl	1090 <Sys_GetCoreID>
    808c:	4603      	mov	r3, r0
    808e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    8090:	4a0d      	ldr	r2, [pc, #52]	; (80c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    8092:	9b01      	ldr	r3, [sp, #4]
    8094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8098:	1e5a      	subs	r2, r3, #1
    809a:	490b      	ldr	r1, [pc, #44]	; (80c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    809c:	9b01      	ldr	r3, [sp, #4]
    809e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    80a2:	4a0a      	ldr	r2, [pc, #40]	; (80cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    80a4:	9b01      	ldr	r3, [sp, #4]
    80a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80aa:	f003 0301 	and.w	r3, r3, #1
    80ae:	2b00      	cmp	r3, #0
    80b0:	d106      	bne.n	80c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    80b2:	4a05      	ldr	r2, [pc, #20]	; (80c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    80b4:	9b01      	ldr	r3, [sp, #4]
    80b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d100      	bne.n	80c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    80be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    80c0:	bf00      	nop
    80c2:	b003      	add	sp, #12
    80c4:	f85d fb04 	ldr.w	pc, [sp], #4
    80c8:	1fff8df4 	.word	0x1fff8df4
    80cc:	1fff8df0 	.word	0x1fff8df0

000080d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    80d0:	b500      	push	{lr}
    80d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    80d4:	f7f8 ffdc 	bl	1090 <Sys_GetCoreID>
    80d8:	4603      	mov	r3, r0
    80da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    80dc:	4a10      	ldr	r2, [pc, #64]	; (8120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    80de:	9b01      	ldr	r3, [sp, #4]
    80e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80e4:	2b00      	cmp	r3, #0
    80e6:	d10d      	bne.n	8104 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    80e8:	f7f8 fd3c 	bl	b64 <Port_schm_read_msr>
    80ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    80ee:	9b00      	ldr	r3, [sp, #0]
    80f0:	f003 0301 	and.w	r3, r3, #1
    80f4:	2b00      	cmp	r3, #0
    80f6:	d100      	bne.n	80fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    80f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    80fa:	490a      	ldr	r1, [pc, #40]	; (8124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    80fc:	9b01      	ldr	r3, [sp, #4]
    80fe:	9a00      	ldr	r2, [sp, #0]
    8100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    8104:	4a06      	ldr	r2, [pc, #24]	; (8120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    8106:	9b01      	ldr	r3, [sp, #4]
    8108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    810c:	1c5a      	adds	r2, r3, #1
    810e:	4904      	ldr	r1, [pc, #16]	; (8120 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    8110:	9b01      	ldr	r3, [sp, #4]
    8112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8116:	bf00      	nop
    8118:	b003      	add	sp, #12
    811a:	f85d fb04 	ldr.w	pc, [sp], #4
    811e:	bf00      	nop
    8120:	1fff8dfc 	.word	0x1fff8dfc
    8124:	1fff8df8 	.word	0x1fff8df8

00008128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    8128:	b500      	push	{lr}
    812a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    812c:	f7f8 ffb0 	bl	1090 <Sys_GetCoreID>
    8130:	4603      	mov	r3, r0
    8132:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    8134:	4a0d      	ldr	r2, [pc, #52]	; (816c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    8136:	9b01      	ldr	r3, [sp, #4]
    8138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    813c:	1e5a      	subs	r2, r3, #1
    813e:	490b      	ldr	r1, [pc, #44]	; (816c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    8140:	9b01      	ldr	r3, [sp, #4]
    8142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    8146:	4a0a      	ldr	r2, [pc, #40]	; (8170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    8148:	9b01      	ldr	r3, [sp, #4]
    814a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    814e:	f003 0301 	and.w	r3, r3, #1
    8152:	2b00      	cmp	r3, #0
    8154:	d106      	bne.n	8164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    8156:	4a05      	ldr	r2, [pc, #20]	; (816c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    8158:	9b01      	ldr	r3, [sp, #4]
    815a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    815e:	2b00      	cmp	r3, #0
    8160:	d100      	bne.n	8164 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8164:	bf00      	nop
    8166:	b003      	add	sp, #12
    8168:	f85d fb04 	ldr.w	pc, [sp], #4
    816c:	1fff8dfc 	.word	0x1fff8dfc
    8170:	1fff8df8 	.word	0x1fff8df8

00008174 <Fls_ACEraseRomEnd>:
    8174:	74747542 	.word	0x74747542
    8178:	31206e6f 	.word	0x31206e6f
    817c:	74636120 	.word	0x74636120
    8180:	3a6e6f69 	.word	0x3a6e6f69
    8184:	4e495320 	.word	0x4e495320
    8188:	5f454c47 	.word	0x5f454c47
    818c:	43494c43 	.word	0x43494c43
    8190:	000a204b 	.word	0x000a204b
    8194:	74747542 	.word	0x74747542
    8198:	31206e6f 	.word	0x31206e6f
    819c:	74636120 	.word	0x74636120
    81a0:	3a6e6f69 	.word	0x3a6e6f69
    81a4:	554f4420 	.word	0x554f4420
    81a8:	5f454c42 	.word	0x5f454c42
    81ac:	43494c43 	.word	0x43494c43
    81b0:	000a204b 	.word	0x000a204b
    81b4:	74747542 	.word	0x74747542
    81b8:	31206e6f 	.word	0x31206e6f
    81bc:	74636120 	.word	0x74636120
    81c0:	3a6e6f69 	.word	0x3a6e6f69
    81c4:	4c4f4820 	.word	0x4c4f4820
    81c8:	4c435f44 	.word	0x4c435f44
    81cc:	204b4349 	.word	0x204b4349
    81d0:	0000000a 	.word	0x0000000a
    81d4:	74747542 	.word	0x74747542
    81d8:	31206e6f 	.word	0x31206e6f
    81dc:	74636120 	.word	0x74636120
    81e0:	3a6e6f69 	.word	0x3a6e6f69
    81e4:	4c455220 	.word	0x4c455220
    81e8:	45534145 	.word	0x45534145
    81ec:	00000a20 	.word	0x00000a20
    81f0:	74747542 	.word	0x74747542
    81f4:	32206e6f 	.word	0x32206e6f
    81f8:	74636120 	.word	0x74636120
    81fc:	3a6e6f69 	.word	0x3a6e6f69
    8200:	4e495320 	.word	0x4e495320
    8204:	5f454c47 	.word	0x5f454c47
    8208:	43494c43 	.word	0x43494c43
    820c:	000a204b 	.word	0x000a204b
    8210:	74747542 	.word	0x74747542
    8214:	32206e6f 	.word	0x32206e6f
    8218:	74636120 	.word	0x74636120
    821c:	3a6e6f69 	.word	0x3a6e6f69
    8220:	554f4420 	.word	0x554f4420
    8224:	5f454c42 	.word	0x5f454c42
    8228:	43494c43 	.word	0x43494c43
    822c:	000a204b 	.word	0x000a204b
    8230:	74747542 	.word	0x74747542
    8234:	32206e6f 	.word	0x32206e6f
    8238:	74636120 	.word	0x74636120
    823c:	3a6e6f69 	.word	0x3a6e6f69
    8240:	4c4f4820 	.word	0x4c4f4820
    8244:	4c435f44 	.word	0x4c435f44
    8248:	204b4349 	.word	0x204b4349
    824c:	0000000a 	.word	0x0000000a
    8250:	74747542 	.word	0x74747542
    8254:	32206e6f 	.word	0x32206e6f
    8258:	74636120 	.word	0x74636120
    825c:	3a6e6f69 	.word	0x3a6e6f69
    8260:	4c455220 	.word	0x4c455220
    8264:	45534145 	.word	0x45534145
    8268:	00000a20 	.word	0x00000a20
    826c:	74747542 	.word	0x74747542
    8270:	33206e6f 	.word	0x33206e6f
    8274:	74636120 	.word	0x74636120
    8278:	3a6e6f69 	.word	0x3a6e6f69
    827c:	4e495320 	.word	0x4e495320
    8280:	5f454c47 	.word	0x5f454c47
    8284:	43494c43 	.word	0x43494c43
    8288:	000a204b 	.word	0x000a204b
    828c:	74747542 	.word	0x74747542
    8290:	33206e6f 	.word	0x33206e6f
    8294:	74636120 	.word	0x74636120
    8298:	3a6e6f69 	.word	0x3a6e6f69
    829c:	554f4420 	.word	0x554f4420
    82a0:	5f454c42 	.word	0x5f454c42
    82a4:	43494c43 	.word	0x43494c43
    82a8:	000a204b 	.word	0x000a204b
    82ac:	74747542 	.word	0x74747542
    82b0:	33206e6f 	.word	0x33206e6f
    82b4:	74636120 	.word	0x74636120
    82b8:	3a6e6f69 	.word	0x3a6e6f69
    82bc:	4c4f4820 	.word	0x4c4f4820
    82c0:	4c435f44 	.word	0x4c435f44
    82c4:	204b4349 	.word	0x204b4349
    82c8:	0000000a 	.word	0x0000000a
    82cc:	74747542 	.word	0x74747542
    82d0:	33206e6f 	.word	0x33206e6f
    82d4:	74636120 	.word	0x74636120
    82d8:	3a6e6f69 	.word	0x3a6e6f69
    82dc:	4c455220 	.word	0x4c455220
    82e0:	45534145 	.word	0x45534145
    82e4:	00000a20 	.word	0x00000a20
    82e8:	6d726554 	.word	0x6d726554
    82ec:	6c616e69 	.word	0x6c616e69
    82f0:	00000000 	.word	0x00000000
    82f4:	4c554e28 	.word	0x4c554e28
    82f8:	0000294c 	.word	0x0000294c

000082fc <Clock_Ip_au8DividerCallbackIndex>:
    82fc:	0e0d0c00 06030201 0a070409 000b0805     ................

0000830c <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000831c <Clock_Ip_au8XoscCallbackIndex>:
    831c:	00000100 00000000 00000000 00000000     ................

0000832c <Clock_Ip_au8IrcoscCallbackIndex>:
    832c:	03020100 00000004 00000000 00000000     ................

0000833c <Clock_Ip_au8GateCallbackIndex>:
    833c:	06010200 01040301 00000500 00000000     ................

0000834c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000835c <Clock_Ip_au8PllCallbackIndex>:
    835c:	00000100 00000000 00000000 00000000     ................

0000836c <Clock_Ip_au8SelectorCallbackIndex>:
    836c:	0a090800 03020109 07060504 00000000     ................

0000837c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000838c <Clock_Ip_au8CmuCallbackIndex>:
	...

0000839c <Clock_Ip_au8ClockFeatures>:
	...
    83ac:	01000000 00000000 00000000 00000002     ................
    83bc:	00000000 00000300 00000000 00040000     ................
    83cc:	00000000 05000000 00000000 00000000     ................
    83dc:	00000006 00000000 00000100 00000000     ................
    83ec:	00010000 00000000 04000000 00000000     ................
    83fc:	00000000 00000005 00000001 00000401     ................
    840c:	00000200 00050100 00030000 04020000     ................
    841c:	04000000 02000000 00000005 00000005     ................
    842c:	00000403 00000600 00050300 00070000     ................
    843c:	05000000 00000000 00000000 00000006     ................
	...
    847c:	00050000 00000000 06000000 00000100     ................
    848c:	00000000 00030007 00000000 00000000     ................
    849c:	00000000 00060000 00000000 07000000     ................
    84ac:	00000100 00000000 00030008 00000000     ................
	...
    84c4:	00090000 00000000 0a000000 00000100     ................
    84d4:	00000000 0003000b 00000000 00000000     ................
    84e4:	00000000 000c0000 00000000 0d000000     ................
    84f4:	00000100 00000000 0003000e 00000000     ................
    8504:	00000800 00000000 00090000 00000000     ................
    8514:	0a000000 00000000 00000000 0000000b     ................
    8524:	00000000 00000b01 00000000 000b0200     ................
    8534:	00000000 0b030000 00000000 00000000     ................
	...
    854c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    855c:	01000000 00000000 00000000 00000007     ................
    856c:	00007300 00000700 00320000 00090000     .s........2.....
    857c:	02000000 07000000 00000000 00000021     ............!...
    858c:	00000009 00000400 00000900 00030000     ................
    859c:	00070000 61000000 07000000 00000000     .......a........
    85ac:	00000024 00000007 00002500 00000700     $........%......
    85bc:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    85cc:	00000000 00000020 38000004 00003800     .... ......8.8..
    85dc:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    85ec:	04000000 00260000 00000026 66000004     ......&.&......f
    85fc:	00006600 00000400 00370037 00040000     .f......7.7.....
    860c:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    861c:	2e000004 00002e00 00000200 00404040     ............@@@.
    862c:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    863c:	0000006b 6c000004 00006c00 00000900     k......l.l......
    864c:	00010000 00090000 00000000 07000000     ................
    865c:	00000000 00000036 00000007 00003100     ....6........1..
    866c:	00000700 00490000 00070000 4a000000     ......I........J
    867c:	07000000 00000000 0000004b 00000007     ........K.......
    868c:	00004c00 00000700 004d0000 00070000     .L........M.....
    869c:	3d000000 03000000 00000000 00000000     ...=............

000086ac <Clock_Ip_au16SelectorEntryHardwareValue>:
    86ac:	01010a03 01010001 04040002 02000603     ................
    86bc:	00010810 02020100 00000000 00000007     ................
    86cc:	00000009 00000000 00000c0e 00000000     ................
	...

00008704 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    8704:	00020000 00000300 00000601 00000000     ................
	...

00008734 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    8734:	00000700 00000000 02020000 01010303     ................
    8744:	03020606 00000000 00000000 00000000     ................
	...

00008764 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    8764:	00000001 00000000 02020000 01010303     ................
    8774:	03020606 00000000 00000000 00000000     ................
	...

00008794 <Clock_Ip_au8DividerValueHardwareValue>:
    8794:	00020100 00000003 00000004 00000000     ................
    87a4:	00000005 00000000 00000000 00000000     ................
    87b4:	00000006 00000000 00000000 00000000     ................
	...
    87d4:	00000007                                ....

000087d8 <Clock_Ip_apxScgPeriphAsyncDivs>:
    87d8:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000087e8 <Clock_Ip_aeSourceTypeClockName>:
    87e8:	00000000 00000001 00000001 00000001     ................
    87f8:	00000001 00000001 00000001 00000001     ................
    8808:	00000002 00000003 00000001 00000001     ................
    8818:	00000001 00000001 00000002 00000002     ................
    8828:	00000003 00000003 00000001 00000001     ................
    8838:	00000004 00000004 00000004 00000004     ................
	...

000088a4 <Clock_Ip_aeHwPllName>:
    88a4:	00000009                                ....

000088a8 <Clock_Ip_aeHwDfsName>:
    88a8:	00000057                                W...

000088ac <Clock_Ip_axDividerCallbacks>:
    88ac:	00002bed 00002bf7 00002c11 00002c2b     .+...+...,..+,..
    88bc:	00002c45 00002c5f 00002c79 00002c93     E,.._,..y,...,..
    88cc:	00002cad 00002cc7 00002ce1 00002cfb     .,...,...,...,..
    88dc:	00002d15 00002d2f 00002d49              .-../-..I-..

000088e8 <Clock_Ip_axDividerTriggerCallbacks>:
    88e8:	000030bd 000030bd                       .0...0..

000088f0 <Clock_Ip_axExtOscCallbacks>:
    88f0:	000030c9 000030c9 000030c9 000030d3     .0...0...0...0..
    8900:	000030c9 000030dd 000030f7 00003111     .0...0...0...1..
    8910:	00003195 000031a9                       .1...1..

00008918 <Clock_Ip_axFracDivCallbacks>:
    8918:	00003369 00003369 00003373              i3..i3..s3..

00008924 <Clock_Ip_axGateCallbacks>:
    8924:	0000338d 00003397 00003497 000034b1     .3...3...4...4..
    8934:	00003447 00003461 000033f7 00003411     G4..a4...3...4..
    8944:	000033a7 000033c1 000034e7 00003501     .3...3...4...5..
    8954:	00003537 00003551                       75..Q5..

0000895c <Clock_Ip_axIntOscCallbacks>:
    895c:	000036fd 000036fd 00003707 00003711     .6...6...7...7..
    896c:	0000372b 00003745 00003759 00003773     +7..E7..Y7..s7..
    897c:	0000378d 000037a1 000037bb 000037d5     .7...7...7...7..
    898c:	0000387d 00003897 000038b1              }8...8...8..

00008998 <Clock_Ip_axCmuCallbacks>:
    8998:	00003e4d 00003e57 00003e63 00003e4d     M>..W>..c>..M>..

000089a8 <Clock_Ip_axPllCallbacks>:
    89a8:	00003e6d 00003e6d 00003e77 00003e6d     m>..m>..w>..m>..
    89b8:	00003e83 00003e8d 00003ea7 00003ec1     .>...>...>...>..
    89c8:	00003f65 00003f51                       e?..Q?..

000089d0 <Clock_Ip_axPcfsCallbacks>:
    89d0:	000040c1                                .@..

000089d4 <Clock_Ip_axSelectorCallbacks>:
    89d4:	000040cd 000040cd 000040d7 000040f1     .@...@...@...@..
    89e4:	000040cd 0000410b 00004125 0000413f     .@...A..%A..?A..
    89f4:	00004159 00004173 0000418d 000041a7     YA..sA...A...A..
    8a04:	000041c1 000041db 000041f5 0000420f     .A...A...A...B..
    8a14:	00004229 00004243 0000425d 00004277     )B..CB..]B..wB..
    8a24:	00004291 000042ab                       .B...B..

00008a2c <ClockSource>:
    8a2c:	00000000 00000008 00000002 00000005     ................
	...
    8a44:	00000009                                ....

00008a48 <ResetReasonArray>:
    8a48:	00000000 00000001 00000002 00000003     ................
    8a58:	00000004 00000005 00000006 00000007     ................
    8a68:	00000008 00000009 0000000a 0000000b     ................
    8a78:	0000000c 0000000d 0000000e              ............

00008a84 <Port_au32PortCiPortBaseAddr>:
    8a84:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8a94:	4004d000                                ...@

00008a98 <Port_au32PortCiGpioBaseAddr>:
    8a98:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    8aa8:	400ff100                                ...@

00008aac <ButtonsCfg>:
    8aac:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
    8abc:	0000000c 0000012c                       ....,...

00008ac4 <Mcu_aClockConfigPB>:
	...
    8acc:	1c000101 04000010 01000029 00000005     ........).......
    8adc:	00000001 00000000 00000057 00000000     ........W.......
    8aec:	00000000 00000008 007a1200 00000001     ..........z.....
    8afc:	00000001 00000000 00000057 00000000     ........W.......
    8b0c:	00000057 00000000 00000000 00000000     W...............
	...
    8b2c:	00000019 00000005 0000001a 00000002     ................
    8b3c:	0000001b 00000005 0000002a 00000005     ........*.......
    8b4c:	00000028 0000000e 00000029 00000001     (.......).......
    8b5c:	00000056 0000001c 00000032 0000002a     V.......2...*...
    8b6c:	0000002b 00000014 0000002c 00000014     +.......,.......
    8b7c:	0000002d 00000014 0000002e 00000014     -...............
    8b8c:	0000003f 00000000 00000040 00000000     ?.......@.......
    8b9c:	00000041 00000000 00000042 00000000     A.......B.......
    8bac:	00000031 00000000 00000045 00000000     1.......E.......
    8bbc:	00000046 00000000 00000047 00000000     F.......G.......
    8bcc:	00000044 00000000 00000030 00000000     D.......0.......
    8bdc:	0000003d 00000000 00000043 00000000     =.......C.......
    8bec:	00000049 00000000 0000004a 00000000     I.......J.......
    8bfc:	0000004b 00000000 00000048 00000000     K.......H.......
    8c0c:	0000000c 00000001 00000000 0000000d     ................
    8c1c:	00000002 00000000 0000000e 00000001     ................
    8c2c:	00000000 0000000f 00000001 00000000     ................
    8c3c:	0000001d 00000001 00000000 0000001e     ................
    8c4c:	00000008 00000000 0000001f 00000001     ................
    8c5c:	00000000 00000021 00000001 00000000     ....!...........
    8c6c:	00000022 00000002 00000000 00000023     "...........#...
    8c7c:	00000001 00000000 00000025 00000003     ........%.......
    8c8c:	00000000 00000026 00000004 00000000     ....&...........
    8c9c:	00000027 00000002 00000000 00000032     '...........2...
    8cac:	00000001 00000000 00000048 00000001     ........H.......
    8cbc:	00000001 00000056 00000001 00000001     ....V...........
    8ccc:	00000057 00000000 00000000 00000057     W...........W...
	...
    8ce4:	00000057 00000000 00000000 00000057     W...........W...
	...
    8cfc:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    8d18:	00000014 00007d00 00000015 00007d00     .....}.......}..
    8d28:	00000016 00007d00 00000017 00008000     .....}..........
    8d38:	00000012 00000001 00000013 00000001     ................
    8d48:	00000030 00000000 00000031 00000000     0.......1.......
    8d58:	00000032 00000000 00000033 00000000     2.......3.......
    8d68:	00000034 00000000 00000035 00000001     4.......5.......
    8d78:	00000036 00000000 00000037 00000001     6.......7.......
    8d88:	00000038 00000001 00000039 00000000     8.......9.......
    8d98:	0000003a 00000000 0000003b 00000000     :.......;.......
    8da8:	0000003c 00000000 0000003d 00000000     <.......=.......
    8db8:	0000003e 00000000 0000003f 00000000     >.......?.......
    8dc8:	00000040 00000000 00000041 00000000     @.......A.......
    8dd8:	00000042 00000000 00000043 00000000     B.......C.......
    8de8:	00000044 00000000 00000045 00000000     D.......E.......
    8df8:	00000046 00000000 00000047 00000000     F.......G.......
    8e08:	00000048 00000000 00000049 00000000     H.......I.......
    8e18:	0000004a 00000000 0000004b 00000000     J.......K.......
    8e28:	0000004c 00000001 0000004d 00000001     L.......M.......
    8e38:	0000004e 00000000 0000004f 00000000     N.......O.......
    8e48:	00000050 00000001 00000051 00000001     P.......Q.......
    8e58:	00000052 00000001 00000053 00000001     R.......S.......
    8e68:	00000054 00000001 00000055 00000000     T.......U.......
    8e78:	00000056 00000001 00000057 00000000     V.......W.......
    8e88:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00008ebc <Mcu_Config>:
    8ebc:	0000005a 00000000 00000001 00000001     Z...............
    8ecc:	00009144 00008ac4 00009150              D.......P...

00008ed8 <OsIf_xPredefinedConfig>:
    8ed8:	00000000 02dc6c00                       .....l..

00008ee0 <OsIf_apxPredefinedConfig>:
    8ee0:	00008ed8                                ....

00008ee4 <g_pin_mux_InitConfigArr>:
    8ee4:	4004c000 400ff0c0 00000010 00000002     ...@...@........
    8ef4:	00000001 00000002 00000000 00000000     ................
    8f04:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    8f14:	00000011 00000002 00000001 00000001     ................
	...
    8f34:	4004c000 400ff0c0 0000000f 00000002     ...@...@........
    8f44:	00000001 00000002 00000000 00000000     ................
    8f54:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    8f64:	00000000 00000002 00000001 00000002     ................
	...
    8f80:	00000100 4004d000 400ff100 0000000c     .......@...@....
    8f90:	00000002 00000001 00000001 00000000     ................
	...
    8fac:	40049000 400ff000 0000000c 00000002     ...@...@........
    8fbc:	00000001 00000001 00000000 00000000     ................
	...

00008fd4 <au8Port_PartitionList>:
    8fd4:	00000001                                ....

00008fd8 <au32Port_PinToPartitionMap>:
    8fd8:	00000001 00000001 00000001 00000001     ................
    8fe8:	00000001 00000001                       ........

00008ff0 <Port_au16NoUnUsedPadsArrayDefault>:
    8ff0:	00010000 00030002 00070006 00090008     ................
    9000:	000d000b 000f000e 00110010 00210020     ............ .!.
    9010:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    9020:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    9030:	00410040 00430042 00470046 00490048     @.A.B.C.F.G.H.I.
    9040:	004b004a 004d004c 004f004e 00510050     J.K.L.M.N.O.P.Q.
    9050:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    9060:	006a0069 006c006b 006e006d 00810080     i.j.k.l.m.n.....
    9070:	00830082 00850084 00870086 00890088     ................
    9080:	008b008a 008e008d 0090008f              ............

0000908c <Port_UnUsedPin>:
    908c:	00000000 00000001 00000000              ............

00009098 <Port_aPinConfigDefault>:
    9098:	00000070 00000100 00000001 00000002     p...............
    90a8:	00010001 00000071 00000100 00000000     ....q...........
    90b8:	00000001 00010001 0000006f 00000100     ........o.......
    90c8:	00000001 00000002 00010001 00000060     ............`...
    90d8:	00000100 00000001 00000002 00010001     ................
    90e8:	0000008c 00000100 00000000 00000001     ................
    90f8:	00010001 0000000c 00000100 00000000     ................
    9108:	00000001 00010001                       ........

00009110 <Port_Config>:
    9110:	004e0006 00008ff0 0000908c 00009098     ..N.............
	...
    9128:	00008fd8 00008fd4 00008ee4              ............

00009134 <Power_Ip_RCM_ConfigPB>:
	...

0000913c <Power_Ip_PMC_ConfigPB>:
    913c:	00000000                                ....

00009140 <Power_Ip_SMC_ConfigPB>:
    9140:	00000000                                ....

00009144 <Power_Ip_aModeConfigPB>:
	...

00009150 <Power_Ip_HwIPsConfigPB>:
    9150:	00009134 0000913c 00009140              4...<...@...

0000915c <_aInitStr.0>:
    915c:	00000000 54540000 45522052 53454747     ......TTR REGGES
    916c:	00000000                                ....

00009170 <_aV2C.0>:
    9170:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00009180 <__INIT_TABLE>:
    9180:	00000002 	.word	0x00000002
    9184:	1fff8b10 	.word	0x1fff8b10
    9188:	000091a8 	.word	0x000091a8
    918c:	000091d4 	.word	0x000091d4
    9190:	1fff8800 	.word	0x1fff8800
    9194:	00000000 	.word	0x00000000
    9198:	00000310 	.word	0x00000310

0000919c <__ZERO_TABLE>:
    919c:	00000001 	.word	0x00000001
    91a0:	1fff8b40 	.word	0x1fff8b40
    91a4:	1fff92e0 	.word	0x1fff92e0
