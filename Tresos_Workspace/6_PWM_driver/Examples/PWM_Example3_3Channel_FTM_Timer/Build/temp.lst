
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000ae7 	.word	0x00000ae7
  10:	00000ae9 	.word	0x00000ae9
  14:	00000aeb 	.word	0x00000aeb
  18:	00000aed 	.word	0x00000aed
	...
  2c:	00000aef 	.word	0x00000aef
  30:	00000af1 	.word	0x00000af1
  34:	00000000 	.word	0x00000000
  38:	00000af3 	.word	0x00000af3
  3c:	00000af5 	.word	0x00000af5
  40:	00000af7 	.word	0x00000af7
  44:	00000af7 	.word	0x00000af7
  48:	00000af7 	.word	0x00000af7
  4c:	00000af7 	.word	0x00000af7
  50:	00000af7 	.word	0x00000af7
  54:	00000af7 	.word	0x00000af7
  58:	00000af7 	.word	0x00000af7
  5c:	00000af7 	.word	0x00000af7
  60:	00000af7 	.word	0x00000af7
  64:	00000af7 	.word	0x00000af7
  68:	00000af7 	.word	0x00000af7
  6c:	00000af7 	.word	0x00000af7
  70:	00000af7 	.word	0x00000af7
  74:	00000af7 	.word	0x00000af7
  78:	00000af7 	.word	0x00000af7
  7c:	00000af7 	.word	0x00000af7
  80:	00000af7 	.word	0x00000af7
  84:	00000af7 	.word	0x00000af7
  88:	00000af7 	.word	0x00000af7
  8c:	00000af7 	.word	0x00000af7
  90:	00000af7 	.word	0x00000af7
  94:	00000af7 	.word	0x00000af7
  98:	00000af7 	.word	0x00000af7
  9c:	00000af7 	.word	0x00000af7
  a0:	00000af7 	.word	0x00000af7
  a4:	00000af7 	.word	0x00000af7
  a8:	00000af7 	.word	0x00000af7
  ac:	00000af7 	.word	0x00000af7
  b0:	00000af7 	.word	0x00000af7
  b4:	00000af7 	.word	0x00000af7
  b8:	00000af7 	.word	0x00000af7
  bc:	00000af7 	.word	0x00000af7
  c0:	00000af7 	.word	0x00000af7
  c4:	00000af7 	.word	0x00000af7
  c8:	00000af7 	.word	0x00000af7
  cc:	00000af7 	.word	0x00000af7
  d0:	00000af7 	.word	0x00000af7
  d4:	00000af7 	.word	0x00000af7
  d8:	00000af7 	.word	0x00000af7
  dc:	00000af7 	.word	0x00000af7
  e0:	00000af7 	.word	0x00000af7
  e4:	00000af7 	.word	0x00000af7
  e8:	00000af7 	.word	0x00000af7
  ec:	00000af7 	.word	0x00000af7
  f0:	00000af7 	.word	0x00000af7
  f4:	00000af7 	.word	0x00000af7
  f8:	00000af7 	.word	0x00000af7
  fc:	00000af7 	.word	0x00000af7
 100:	00000af7 	.word	0x00000af7
 104:	00000af7 	.word	0x00000af7
 108:	00000af7 	.word	0x00000af7
 10c:	00000af7 	.word	0x00000af7
 110:	00000af7 	.word	0x00000af7
 114:	00000af7 	.word	0x00000af7
 118:	00000af7 	.word	0x00000af7
 11c:	00000af7 	.word	0x00000af7
 120:	00000af7 	.word	0x00000af7
 124:	00000af7 	.word	0x00000af7
 128:	00000af7 	.word	0x00000af7
 12c:	00000af7 	.word	0x00000af7
 130:	00000af7 	.word	0x00000af7
 134:	00000af7 	.word	0x00000af7
 138:	00000af7 	.word	0x00000af7
 13c:	00000af7 	.word	0x00000af7
 140:	00000af7 	.word	0x00000af7
 144:	00000af7 	.word	0x00000af7
 148:	00000af7 	.word	0x00000af7
 14c:	00000af7 	.word	0x00000af7
 150:	00000af7 	.word	0x00000af7
 154:	00000af7 	.word	0x00000af7
 158:	00000af7 	.word	0x00000af7
 15c:	00000af7 	.word	0x00000af7
 160:	00000af7 	.word	0x00000af7
 164:	00000af7 	.word	0x00000af7
 168:	00000af7 	.word	0x00000af7
 16c:	00000af7 	.word	0x00000af7
 170:	00000af7 	.word	0x00000af7
 174:	00000af7 	.word	0x00000af7
 178:	00000af7 	.word	0x00000af7
 17c:	00000af7 	.word	0x00000af7
 180:	00000af7 	.word	0x00000af7
 184:	00000af7 	.word	0x00000af7
 188:	00000af7 	.word	0x00000af7
 18c:	00000af7 	.word	0x00000af7
 190:	00000af7 	.word	0x00000af7
 194:	00000af7 	.word	0x00000af7
 198:	00000af7 	.word	0x00000af7
 19c:	00000af7 	.word	0x00000af7
 1a0:	00000af7 	.word	0x00000af7
 1a4:	00000af7 	.word	0x00000af7
 1a8:	00000af7 	.word	0x00000af7
 1ac:	00000af7 	.word	0x00000af7
 1b0:	00000af7 	.word	0x00000af7
 1b4:	00000af7 	.word	0x00000af7
 1b8:	00000af7 	.word	0x00000af7
 1bc:	00000af7 	.word	0x00000af7
 1c0:	00000af7 	.word	0x00000af7
 1c4:	00000af7 	.word	0x00000af7
 1c8:	00000af7 	.word	0x00000af7
 1cc:	00000af7 	.word	0x00000af7
 1d0:	00000af7 	.word	0x00000af7
 1d4:	00000af7 	.word	0x00000af7
 1d8:	00000af7 	.word	0x00000af7
 1dc:	00000af7 	.word	0x00000af7
 1e0:	00000af7 	.word	0x00000af7
 1e4:	00000af7 	.word	0x00000af7
 1e8:	00000af7 	.word	0x00000af7
 1ec:	00000af7 	.word	0x00000af7
 1f0:	00000af7 	.word	0x00000af7
 1f4:	00000af7 	.word	0x00000af7
 1f8:	00000af7 	.word	0x00000af7
 1fc:	00000af7 	.word	0x00000af7
 200:	00000af7 	.word	0x00000af7
 204:	00000af7 	.word	0x00000af7
 208:	00000af7 	.word	0x00000af7
 20c:	00000af7 	.word	0x00000af7
 210:	00000af7 	.word	0x00000af7
 214:	00000af7 	.word	0x00000af7
 218:	00000af7 	.word	0x00000af7
 21c:	00000af7 	.word	0x00000af7
 220:	00000af7 	.word	0x00000af7
 224:	00000af7 	.word	0x00000af7
 228:	00000af7 	.word	0x00000af7
 22c:	00000af7 	.word	0x00000af7
 230:	00000af7 	.word	0x00000af7
 234:	00000af7 	.word	0x00000af7
 238:	00000af7 	.word	0x00000af7
 23c:	00000af7 	.word	0x00000af7
 240:	00000af7 	.word	0x00000af7
 244:	00000af7 	.word	0x00000af7
 248:	00000af7 	.word	0x00000af7
 24c:	00000af7 	.word	0x00000af7
 250:	00000af7 	.word	0x00000af7
 254:	00000af7 	.word	0x00000af7
 258:	00000af7 	.word	0x00000af7
 25c:	00000af7 	.word	0x00000af7
 260:	00000af7 	.word	0x00000af7
 264:	00000af7 	.word	0x00000af7
 268:	00000af7 	.word	0x00000af7
 26c:	00000af7 	.word	0x00000af7
 270:	00000af7 	.word	0x00000af7
 274:	00000af7 	.word	0x00000af7
 278:	00000af7 	.word	0x00000af7
 27c:	00000af7 	.word	0x00000af7
 280:	00000af7 	.word	0x00000af7
 284:	00000af7 	.word	0x00000af7
 288:	00000af7 	.word	0x00000af7
 28c:	00000af7 	.word	0x00000af7
 290:	00000af7 	.word	0x00000af7
 294:	00000af7 	.word	0x00000af7
 298:	00000af7 	.word	0x00000af7
 29c:	00000af7 	.word	0x00000af7
 2a0:	00000af7 	.word	0x00000af7
 2a4:	00000af7 	.word	0x00000af7
 2a8:	00000af7 	.word	0x00000af7
 2ac:	00000af7 	.word	0x00000af7
 2b0:	00000af7 	.word	0x00000af7
 2b4:	00000af7 	.word	0x00000af7
 2b8:	00000af7 	.word	0x00000af7
 2bc:	00000af7 	.word	0x00000af7
 2c0:	00000af7 	.word	0x00000af7
 2c4:	00000af7 	.word	0x00000af7
 2c8:	00000af7 	.word	0x00000af7
 2cc:	00000af7 	.word	0x00000af7
 2d0:	00000af7 	.word	0x00000af7
 2d4:	00000af7 	.word	0x00000af7
 2d8:	00000af7 	.word	0x00000af7
 2dc:	00000af7 	.word	0x00000af7
 2e0:	00000af7 	.word	0x00000af7
 2e4:	00000af7 	.word	0x00000af7
 2e8:	00000af7 	.word	0x00000af7
 2ec:	00000af7 	.word	0x00000af7
 2f0:	00000af7 	.word	0x00000af7
 2f4:	00000af7 	.word	0x00000af7
 2f8:	00000af7 	.word	0x00000af7
 2fc:	00000af7 	.word	0x00000af7
 300:	00000af7 	.word	0x00000af7
 304:	00000af7 	.word	0x00000af7
 308:	00000af7 	.word	0x00000af7
 30c:	00000af7 	.word	0x00000af7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fa67 	bl	954 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb26 	bl	adc <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff92f4 	.word	0x1fff92f4

000004c8 <SystemInit>:
     4c8:	b508      	push	{r3, lr}
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88
     4de:	f3bf 8f4f 	dsb	sy
     4e2:	f3bf 8f6f 	isb	sy
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c
     590:	f3bf 8f4f 	dsb	sy
     594:	f3bf 8f6f 	isb	sy
     598:	2000      	movs	r0, #0
     59a:	f000 fa71 	bl	a80 <sys_m4_cache_init>
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0xac>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0xac>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0xb0>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0xb0>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0xa6>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0xe4>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x24>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xdc>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0xd6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0xd2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0xd2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0xca>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0xca>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0xb8>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0xb4>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0xe8>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x70>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0xce>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0xce>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x9e>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0xc6>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0xc6>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x6>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x6>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x9e>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x70>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();
     8b2:	f000 f817 	bl	8e4 <EcuM_Init>

    Pwm_SetPeriodAndDuty( PwmChannel_0, 37500, 0x2000 );
     8b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     8ba:	f249 217c 	movw	r1, #37500	; 0x927c
     8be:	2000      	movs	r0, #0
     8c0:	f007 ffcc 	bl	885c <Pwm_SetPeriodAndDuty>
    Pwm_SetPeriodAndDuty( PwmChannel_1, 37500, 0x4000 );
     8c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     8c8:	f249 217c 	movw	r1, #37500	; 0x927c
     8cc:	2001      	movs	r0, #1
     8ce:	f007 ffc5 	bl	885c <Pwm_SetPeriodAndDuty>
    Pwm_SetPeriodAndDuty( PwmChannel_2, 37500, 0x8000 );
     8d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     8d6:	f249 217c 	movw	r1, #37500	; 0x927c
     8da:	2002      	movs	r0, #2
     8dc:	f007 ffbe 	bl	885c <Pwm_SetPeriodAndDuty>

    while( 1u )
     8e0:	e7fe      	b.n	8e0 <main+0x30>
	...

000008e4 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     8e4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     8e6:	480a      	ldr	r0, [pc, #40]	; (910 <EcuM_Init+0x2c>)
     8e8:	f003 feb0 	bl	464c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     8ec:	2000      	movs	r0, #0
     8ee:	f003 ff01 	bl	46f4 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     8f2:	2000      	movs	r0, #0
     8f4:	f003 ff22 	bl	473c <Mcu_SetMode>
    OsIf_Init(NULL_PTR);
     8f8:	2000      	movs	r0, #0
     8fa:	f000 f911 	bl	b20 <OsIf_Init>
    /*Apply all the Pin Port microcontroller configuration, for this case
    Port Pin D0 (FTM0-CH2), D15 (FTM0-CH1), D16 (FTM0-CH0) are configured as output*/
    Port_Init( &Port_Config );
     8fe:	4805      	ldr	r0, [pc, #20]	; (914 <EcuM_Init+0x30>)
     900:	f004 faa6 	bl	4e50 <Port_Init>
    Pwm_Init( &Pwm_Config );
     904:	4804      	ldr	r0, [pc, #16]	; (918 <EcuM_Init+0x34>)
     906:	f007 fe57 	bl	85b8 <Pwm_Init>
}
     90a:	bf00      	nop
     90c:	bd08      	pop	{r3, pc}
     90e:	bf00      	nop
     910:	0000c280 	.word	0x0000c280
     914:	0000c41c 	.word	0x0000c41c
     918:	0000c4bc 	.word	0x0000c4bc

0000091c <Mcu_schm_read_msr>:
     91c:	b410      	push	{r4}
     91e:	f3ef 8310 	mrs	r3, PRIMASK
     922:	461c      	mov	r4, r3
     924:	4623      	mov	r3, r4
     926:	4618      	mov	r0, r3
     928:	f85d 4b04 	ldr.w	r4, [sp], #4
     92c:	4770      	bx	lr

0000092e <Port_schm_read_msr>:
     92e:	b410      	push	{r4}
     930:	f3ef 8310 	mrs	r3, PRIMASK
     934:	461c      	mov	r4, r3
     936:	4623      	mov	r3, r4
     938:	4618      	mov	r0, r3
     93a:	f85d 4b04 	ldr.w	r4, [sp], #4
     93e:	4770      	bx	lr

00000940 <Pwm_schm_read_msr>:
     940:	b410      	push	{r4}
     942:	f3ef 8310 	mrs	r3, PRIMASK
     946:	461c      	mov	r4, r3
     948:	4623      	mov	r3, r4
     94a:	4618      	mov	r0, r3
     94c:	f85d 4b04 	ldr.w	r4, [sp], #4
     950:	4770      	bx	lr
	...

00000954 <init_data_bss>:
     954:	b08a      	sub	sp, #40	; 0x28
     956:	2300      	movs	r3, #0
     958:	9307      	str	r3, [sp, #28]
     95a:	2300      	movs	r3, #0
     95c:	9306      	str	r3, [sp, #24]
     95e:	2300      	movs	r3, #0
     960:	9309      	str	r3, [sp, #36]	; 0x24
     962:	2300      	movs	r3, #0
     964:	9308      	str	r3, [sp, #32]
     966:	4b44      	ldr	r3, [pc, #272]	; (a78 <init_data_bss+0x124>)
     968:	9305      	str	r3, [sp, #20]
     96a:	4b44      	ldr	r3, [pc, #272]	; (a7c <init_data_bss+0x128>)
     96c:	9304      	str	r3, [sp, #16]
     96e:	9b05      	ldr	r3, [sp, #20]
     970:	681b      	ldr	r3, [r3, #0]
     972:	9307      	str	r3, [sp, #28]
     974:	9b05      	ldr	r3, [sp, #20]
     976:	3304      	adds	r3, #4
     978:	9305      	str	r3, [sp, #20]
     97a:	9b05      	ldr	r3, [sp, #20]
     97c:	9303      	str	r3, [sp, #12]
     97e:	2300      	movs	r3, #0
     980:	9309      	str	r3, [sp, #36]	; 0x24
     982:	e03d      	b.n	a00 <init_data_bss+0xac>
     984:	9a09      	ldr	r2, [sp, #36]	; 0x24
     986:	4613      	mov	r3, r2
     988:	005b      	lsls	r3, r3, #1
     98a:	4413      	add	r3, r2
     98c:	009b      	lsls	r3, r3, #2
     98e:	461a      	mov	r2, r3
     990:	9b03      	ldr	r3, [sp, #12]
     992:	4413      	add	r3, r2
     994:	685b      	ldr	r3, [r3, #4]
     996:	9300      	str	r3, [sp, #0]
     998:	9a09      	ldr	r2, [sp, #36]	; 0x24
     99a:	4613      	mov	r3, r2
     99c:	005b      	lsls	r3, r3, #1
     99e:	4413      	add	r3, r2
     9a0:	009b      	lsls	r3, r3, #2
     9a2:	461a      	mov	r2, r3
     9a4:	9b03      	ldr	r3, [sp, #12]
     9a6:	4413      	add	r3, r2
     9a8:	681b      	ldr	r3, [r3, #0]
     9aa:	9301      	str	r3, [sp, #4]
     9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9ae:	4613      	mov	r3, r2
     9b0:	005b      	lsls	r3, r3, #1
     9b2:	4413      	add	r3, r2
     9b4:	009b      	lsls	r3, r3, #2
     9b6:	461a      	mov	r2, r3
     9b8:	9b03      	ldr	r3, [sp, #12]
     9ba:	4413      	add	r3, r2
     9bc:	689b      	ldr	r3, [r3, #8]
     9be:	4619      	mov	r1, r3
     9c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     9c2:	4613      	mov	r3, r2
     9c4:	005b      	lsls	r3, r3, #1
     9c6:	4413      	add	r3, r2
     9c8:	009b      	lsls	r3, r3, #2
     9ca:	461a      	mov	r2, r3
     9cc:	9b03      	ldr	r3, [sp, #12]
     9ce:	4413      	add	r3, r2
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	1acb      	subs	r3, r1, r3
     9d4:	9306      	str	r3, [sp, #24]
     9d6:	2300      	movs	r3, #0
     9d8:	9308      	str	r3, [sp, #32]
     9da:	e00a      	b.n	9f2 <init_data_bss+0x9e>
     9dc:	9a00      	ldr	r2, [sp, #0]
     9de:	9b08      	ldr	r3, [sp, #32]
     9e0:	441a      	add	r2, r3
     9e2:	9901      	ldr	r1, [sp, #4]
     9e4:	9b08      	ldr	r3, [sp, #32]
     9e6:	440b      	add	r3, r1
     9e8:	7812      	ldrb	r2, [r2, #0]
     9ea:	701a      	strb	r2, [r3, #0]
     9ec:	9b08      	ldr	r3, [sp, #32]
     9ee:	3301      	adds	r3, #1
     9f0:	9308      	str	r3, [sp, #32]
     9f2:	9a08      	ldr	r2, [sp, #32]
     9f4:	9b06      	ldr	r3, [sp, #24]
     9f6:	429a      	cmp	r2, r3
     9f8:	d3f0      	bcc.n	9dc <init_data_bss+0x88>
     9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9fc:	3301      	adds	r3, #1
     9fe:	9309      	str	r3, [sp, #36]	; 0x24
     a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a02:	9b07      	ldr	r3, [sp, #28]
     a04:	429a      	cmp	r2, r3
     a06:	d3bd      	bcc.n	984 <init_data_bss+0x30>
     a08:	9b04      	ldr	r3, [sp, #16]
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	9307      	str	r3, [sp, #28]
     a0e:	9b04      	ldr	r3, [sp, #16]
     a10:	3304      	adds	r3, #4
     a12:	9304      	str	r3, [sp, #16]
     a14:	9b04      	ldr	r3, [sp, #16]
     a16:	9302      	str	r3, [sp, #8]
     a18:	2300      	movs	r3, #0
     a1a:	9309      	str	r3, [sp, #36]	; 0x24
     a1c:	e024      	b.n	a68 <init_data_bss+0x114>
     a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a20:	00db      	lsls	r3, r3, #3
     a22:	9a02      	ldr	r2, [sp, #8]
     a24:	4413      	add	r3, r2
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	9301      	str	r3, [sp, #4]
     a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a2c:	00db      	lsls	r3, r3, #3
     a2e:	9a02      	ldr	r2, [sp, #8]
     a30:	4413      	add	r3, r2
     a32:	685b      	ldr	r3, [r3, #4]
     a34:	4619      	mov	r1, r3
     a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a38:	00db      	lsls	r3, r3, #3
     a3a:	9a02      	ldr	r2, [sp, #8]
     a3c:	4413      	add	r3, r2
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	1acb      	subs	r3, r1, r3
     a42:	9306      	str	r3, [sp, #24]
     a44:	2300      	movs	r3, #0
     a46:	9308      	str	r3, [sp, #32]
     a48:	e007      	b.n	a5a <init_data_bss+0x106>
     a4a:	9a01      	ldr	r2, [sp, #4]
     a4c:	9b08      	ldr	r3, [sp, #32]
     a4e:	4413      	add	r3, r2
     a50:	2200      	movs	r2, #0
     a52:	701a      	strb	r2, [r3, #0]
     a54:	9b08      	ldr	r3, [sp, #32]
     a56:	3301      	adds	r3, #1
     a58:	9308      	str	r3, [sp, #32]
     a5a:	9a08      	ldr	r2, [sp, #32]
     a5c:	9b06      	ldr	r3, [sp, #24]
     a5e:	429a      	cmp	r2, r3
     a60:	d3f3      	bcc.n	a4a <init_data_bss+0xf6>
     a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     a64:	3301      	adds	r3, #1
     a66:	9309      	str	r3, [sp, #36]	; 0x24
     a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a6a:	9b07      	ldr	r3, [sp, #28]
     a6c:	429a      	cmp	r2, r3
     a6e:	d3d6      	bcc.n	a1e <init_data_bss+0xca>
     a70:	bf00      	nop
     a72:	bf00      	nop
     a74:	b00a      	add	sp, #40	; 0x28
     a76:	4770      	bx	lr
     a78:	0000c4cc 	.word	0x0000c4cc
     a7c:	0000c4e8 	.word	0x0000c4e8

00000a80 <sys_m4_cache_init>:
     a80:	b084      	sub	sp, #16
     a82:	4603      	mov	r3, r0
     a84:	f88d 3007 	strb.w	r3, [sp, #7]
     a88:	2300      	movs	r3, #0
     a8a:	f88d 300f 	strb.w	r3, [sp, #15]
     a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a92:	2b00      	cmp	r3, #0
     a94:	d118      	bne.n	ac8 <sys_m4_cache_init+0x48>
     a96:	4b10      	ldr	r3, [pc, #64]	; (ad8 <sys_m4_cache_init+0x58>)
     a98:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     a9c:	601a      	str	r2, [r3, #0]
     a9e:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <sys_m4_cache_init+0x58>)
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	4a0d      	ldr	r2, [pc, #52]	; (ad8 <sys_m4_cache_init+0x58>)
     aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     aa8:	6013      	str	r3, [r2, #0]
     aaa:	bf00      	nop
     aac:	4b0a      	ldr	r3, [pc, #40]	; (ad8 <sys_m4_cache_init+0x58>)
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ab8:	d0f8      	beq.n	aac <sys_m4_cache_init+0x2c>
     aba:	4b07      	ldr	r3, [pc, #28]	; (ad8 <sys_m4_cache_init+0x58>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	4a06      	ldr	r2, [pc, #24]	; (ad8 <sys_m4_cache_init+0x58>)
     ac0:	f043 0301 	orr.w	r3, r3, #1
     ac4:	6013      	str	r3, [r2, #0]
     ac6:	e002      	b.n	ace <sys_m4_cache_init+0x4e>
     ac8:	2301      	movs	r3, #1
     aca:	f88d 300f 	strb.w	r3, [sp, #15]
     ace:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ad2:	4618      	mov	r0, r3
     ad4:	b004      	add	sp, #16
     ad6:	4770      	bx	lr
     ad8:	e0082000 	.word	0xe0082000

00000adc <startup_go_to_user_mode>:
     adc:	bf00      	nop
     ade:	4770      	bx	lr

00000ae0 <Sys_GetCoreID>:
     ae0:	2300      	movs	r3, #0
     ae2:	4618      	mov	r0, r3
     ae4:	4770      	bx	lr

00000ae6 <HardFault_Handler>:
     ae6:	e7fe      	b.n	ae6 <HardFault_Handler>

00000ae8 <MemManage_Handler>:
     ae8:	e7fe      	b.n	ae8 <MemManage_Handler>

00000aea <BusFault_Handler>:
     aea:	e7fe      	b.n	aea <BusFault_Handler>

00000aec <UsageFault_Handler>:
     aec:	e7fe      	b.n	aec <UsageFault_Handler>

00000aee <SVC_Handler>:
     aee:	e7fe      	b.n	aee <SVC_Handler>

00000af0 <DebugMon_Handler>:
     af0:	e7fe      	b.n	af0 <DebugMon_Handler>

00000af2 <PendSV_Handler>:
     af2:	e7fe      	b.n	af2 <PendSV_Handler>

00000af4 <SysTick_Handler>:
     af4:	e7fe      	b.n	af4 <SysTick_Handler>

00000af6 <undefined_handler>:
     af6:	e7fe      	b.n	af6 <undefined_handler>

00000af8 <OsIf_Timer_Dummy_GetCounter>:
     af8:	2300      	movs	r3, #0
     afa:	4618      	mov	r0, r3
     afc:	4770      	bx	lr

00000afe <OsIf_Timer_Dummy_GetElapsed>:
     afe:	b082      	sub	sp, #8
     b00:	9001      	str	r0, [sp, #4]
     b02:	2301      	movs	r3, #1
     b04:	4618      	mov	r0, r3
     b06:	b002      	add	sp, #8
     b08:	4770      	bx	lr

00000b0a <OsIf_Timer_Dummy_SetTimerFrequency>:
     b0a:	b082      	sub	sp, #8
     b0c:	9001      	str	r0, [sp, #4]
     b0e:	bf00      	nop
     b10:	b002      	add	sp, #8
     b12:	4770      	bx	lr

00000b14 <OsIf_Timer_Dummy_MicrosToTicks>:
     b14:	b082      	sub	sp, #8
     b16:	9001      	str	r0, [sp, #4]
     b18:	9b01      	ldr	r3, [sp, #4]
     b1a:	4618      	mov	r0, r3
     b1c:	b002      	add	sp, #8
     b1e:	4770      	bx	lr

00000b20 <OsIf_Init>:
     b20:	b500      	push	{lr}
     b22:	b083      	sub	sp, #12
     b24:	9001      	str	r0, [sp, #4]
     b26:	f000 f86d 	bl	c04 <OsIf_Timer_System_Init>
     b2a:	bf00      	nop
     b2c:	b003      	add	sp, #12
     b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00000b32 <OsIf_GetCounter>:
     b32:	b500      	push	{lr}
     b34:	b085      	sub	sp, #20
     b36:	9001      	str	r0, [sp, #4]
     b38:	2300      	movs	r3, #0
     b3a:	9303      	str	r3, [sp, #12]
     b3c:	9b01      	ldr	r3, [sp, #4]
     b3e:	2b00      	cmp	r3, #0
     b40:	d003      	beq.n	b4a <OsIf_GetCounter+0x18>
     b42:	9b01      	ldr	r3, [sp, #4]
     b44:	2b01      	cmp	r3, #1
     b46:	d004      	beq.n	b52 <OsIf_GetCounter+0x20>
     b48:	e007      	b.n	b5a <OsIf_GetCounter+0x28>
     b4a:	f7ff ffd5 	bl	af8 <OsIf_Timer_Dummy_GetCounter>
     b4e:	9003      	str	r0, [sp, #12]
     b50:	e003      	b.n	b5a <OsIf_GetCounter+0x28>
     b52:	f000 f873 	bl	c3c <OsIf_Timer_System_GetCounter>
     b56:	9003      	str	r0, [sp, #12]
     b58:	bf00      	nop
     b5a:	9b03      	ldr	r3, [sp, #12]
     b5c:	4618      	mov	r0, r3
     b5e:	b005      	add	sp, #20
     b60:	f85d fb04 	ldr.w	pc, [sp], #4

00000b64 <OsIf_GetElapsed>:
     b64:	b500      	push	{lr}
     b66:	b085      	sub	sp, #20
     b68:	9001      	str	r0, [sp, #4]
     b6a:	9100      	str	r1, [sp, #0]
     b6c:	2300      	movs	r3, #0
     b6e:	9303      	str	r3, [sp, #12]
     b70:	9b00      	ldr	r3, [sp, #0]
     b72:	2b00      	cmp	r3, #0
     b74:	d003      	beq.n	b7e <OsIf_GetElapsed+0x1a>
     b76:	9b00      	ldr	r3, [sp, #0]
     b78:	2b01      	cmp	r3, #1
     b7a:	d005      	beq.n	b88 <OsIf_GetElapsed+0x24>
     b7c:	e009      	b.n	b92 <OsIf_GetElapsed+0x2e>
     b7e:	9801      	ldr	r0, [sp, #4]
     b80:	f7ff ffbd 	bl	afe <OsIf_Timer_Dummy_GetElapsed>
     b84:	9003      	str	r0, [sp, #12]
     b86:	e004      	b.n	b92 <OsIf_GetElapsed+0x2e>
     b88:	9801      	ldr	r0, [sp, #4]
     b8a:	f000 f865 	bl	c58 <OsIf_Timer_System_GetElapsed>
     b8e:	9003      	str	r0, [sp, #12]
     b90:	bf00      	nop
     b92:	9b03      	ldr	r3, [sp, #12]
     b94:	4618      	mov	r0, r3
     b96:	b005      	add	sp, #20
     b98:	f85d fb04 	ldr.w	pc, [sp], #4

00000b9c <OsIf_SetTimerFrequency>:
     b9c:	b500      	push	{lr}
     b9e:	b083      	sub	sp, #12
     ba0:	9001      	str	r0, [sp, #4]
     ba2:	9100      	str	r1, [sp, #0]
     ba4:	9b00      	ldr	r3, [sp, #0]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d003      	beq.n	bb2 <OsIf_SetTimerFrequency+0x16>
     baa:	9b00      	ldr	r3, [sp, #0]
     bac:	2b01      	cmp	r3, #1
     bae:	d004      	beq.n	bba <OsIf_SetTimerFrequency+0x1e>
     bb0:	e007      	b.n	bc2 <OsIf_SetTimerFrequency+0x26>
     bb2:	9801      	ldr	r0, [sp, #4]
     bb4:	f7ff ffa9 	bl	b0a <OsIf_Timer_Dummy_SetTimerFrequency>
     bb8:	e003      	b.n	bc2 <OsIf_SetTimerFrequency+0x26>
     bba:	9801      	ldr	r0, [sp, #4]
     bbc:	f000 f85c 	bl	c78 <OsIf_Timer_System_SetTimerFrequency>
     bc0:	bf00      	nop
     bc2:	bf00      	nop
     bc4:	b003      	add	sp, #12
     bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00000bca <OsIf_MicrosToTicks>:
     bca:	b500      	push	{lr}
     bcc:	b085      	sub	sp, #20
     bce:	9001      	str	r0, [sp, #4]
     bd0:	9100      	str	r1, [sp, #0]
     bd2:	2300      	movs	r3, #0
     bd4:	9303      	str	r3, [sp, #12]
     bd6:	9b00      	ldr	r3, [sp, #0]
     bd8:	2b00      	cmp	r3, #0
     bda:	d003      	beq.n	be4 <OsIf_MicrosToTicks+0x1a>
     bdc:	9b00      	ldr	r3, [sp, #0]
     bde:	2b01      	cmp	r3, #1
     be0:	d005      	beq.n	bee <OsIf_MicrosToTicks+0x24>
     be2:	e009      	b.n	bf8 <OsIf_MicrosToTicks+0x2e>
     be4:	9801      	ldr	r0, [sp, #4]
     be6:	f7ff ff95 	bl	b14 <OsIf_Timer_Dummy_MicrosToTicks>
     bea:	9003      	str	r0, [sp, #12]
     bec:	e004      	b.n	bf8 <OsIf_MicrosToTicks+0x2e>
     bee:	9801      	ldr	r0, [sp, #4]
     bf0:	f000 f850 	bl	c94 <OsIf_Timer_System_MicrosToTicks>
     bf4:	9003      	str	r0, [sp, #12]
     bf6:	bf00      	nop
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	4618      	mov	r0, r3
     bfc:	b005      	add	sp, #20
     bfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000c04 <OsIf_Timer_System_Init>:
     c04:	b500      	push	{lr}
     c06:	b083      	sub	sp, #12
     c08:	2300      	movs	r3, #0
     c0a:	9301      	str	r3, [sp, #4]
     c0c:	4a09      	ldr	r2, [pc, #36]	; (c34 <OsIf_Timer_System_Init+0x30>)
     c0e:	9b01      	ldr	r3, [sp, #4]
     c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c14:	685a      	ldr	r2, [r3, #4]
     c16:	4908      	ldr	r1, [pc, #32]	; (c38 <OsIf_Timer_System_Init+0x34>)
     c18:	9b01      	ldr	r3, [sp, #4]
     c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c1e:	4a06      	ldr	r2, [pc, #24]	; (c38 <OsIf_Timer_System_Init+0x34>)
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     c26:	4618      	mov	r0, r3
     c28:	f000 f868 	bl	cfc <OsIf_Timer_System_Internal_Init>
     c2c:	bf00      	nop
     c2e:	b003      	add	sp, #12
     c30:	f85d fb04 	ldr.w	pc, [sp], #4
     c34:	0000c2a4 	.word	0x0000c2a4
     c38:	1fff8b40 	.word	0x1fff8b40

00000c3c <OsIf_Timer_System_GetCounter>:
     c3c:	b500      	push	{lr}
     c3e:	b083      	sub	sp, #12
     c40:	2300      	movs	r3, #0
     c42:	9301      	str	r3, [sp, #4]
     c44:	2300      	movs	r3, #0
     c46:	9300      	str	r3, [sp, #0]
     c48:	f000 f86c 	bl	d24 <OsIf_Timer_System_Internal_GetCounter>
     c4c:	9001      	str	r0, [sp, #4]
     c4e:	9b01      	ldr	r3, [sp, #4]
     c50:	4618      	mov	r0, r3
     c52:	b003      	add	sp, #12
     c54:	f85d fb04 	ldr.w	pc, [sp], #4

00000c58 <OsIf_Timer_System_GetElapsed>:
     c58:	b500      	push	{lr}
     c5a:	b085      	sub	sp, #20
     c5c:	9001      	str	r0, [sp, #4]
     c5e:	2300      	movs	r3, #0
     c60:	9303      	str	r3, [sp, #12]
     c62:	2300      	movs	r3, #0
     c64:	9302      	str	r3, [sp, #8]
     c66:	9801      	ldr	r0, [sp, #4]
     c68:	f000 f864 	bl	d34 <OsIf_Timer_System_Internal_GetElapsed>
     c6c:	9003      	str	r0, [sp, #12]
     c6e:	9b03      	ldr	r3, [sp, #12]
     c70:	4618      	mov	r0, r3
     c72:	b005      	add	sp, #20
     c74:	f85d fb04 	ldr.w	pc, [sp], #4

00000c78 <OsIf_Timer_System_SetTimerFrequency>:
     c78:	b084      	sub	sp, #16
     c7a:	9001      	str	r0, [sp, #4]
     c7c:	2300      	movs	r3, #0
     c7e:	9303      	str	r3, [sp, #12]
     c80:	4903      	ldr	r1, [pc, #12]	; (c90 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     c82:	9b03      	ldr	r3, [sp, #12]
     c84:	9a01      	ldr	r2, [sp, #4]
     c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c8a:	bf00      	nop
     c8c:	b004      	add	sp, #16
     c8e:	4770      	bx	lr
     c90:	1fff8b40 	.word	0x1fff8b40

00000c94 <OsIf_Timer_System_MicrosToTicks>:
     c94:	b5f0      	push	{r4, r5, r6, r7, lr}
     c96:	b087      	sub	sp, #28
     c98:	9001      	str	r0, [sp, #4]
     c9a:	2100      	movs	r1, #0
     c9c:	9105      	str	r1, [sp, #20]
     c9e:	2100      	movs	r1, #0
     ca0:	9104      	str	r1, [sp, #16]
     ca2:	9901      	ldr	r1, [sp, #4]
     ca4:	2000      	movs	r0, #0
     ca6:	460e      	mov	r6, r1
     ca8:	4607      	mov	r7, r0
     caa:	4812      	ldr	r0, [pc, #72]	; (cf4 <OsIf_Timer_System_MicrosToTicks+0x60>)
     cac:	9904      	ldr	r1, [sp, #16]
     cae:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     cb2:	2000      	movs	r0, #0
     cb4:	460c      	mov	r4, r1
     cb6:	4605      	mov	r5, r0
     cb8:	fb04 f007 	mul.w	r0, r4, r7
     cbc:	fb06 f105 	mul.w	r1, r6, r5
     cc0:	4401      	add	r1, r0
     cc2:	fba6 2304 	umull	r2, r3, r6, r4
     cc6:	4419      	add	r1, r3
     cc8:	460b      	mov	r3, r1
     cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cce:	e9cd 2302 	strd	r2, r3, [sp, #8]
     cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     cd6:	4a08      	ldr	r2, [pc, #32]	; (cf8 <OsIf_Timer_System_MicrosToTicks+0x64>)
     cd8:	f04f 0300 	mov.w	r3, #0
     cdc:	f7ff fc62 	bl	5a4 <__aeabi_uldivmod>
     ce0:	4602      	mov	r2, r0
     ce2:	460b      	mov	r3, r1
     ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ce8:	9b02      	ldr	r3, [sp, #8]
     cea:	9305      	str	r3, [sp, #20]
     cec:	9b05      	ldr	r3, [sp, #20]
     cee:	4618      	mov	r0, r3
     cf0:	b007      	add	sp, #28
     cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cf4:	1fff8b40 	.word	0x1fff8b40
     cf8:	000f4240 	.word	0x000f4240

00000cfc <OsIf_Timer_System_Internal_Init>:
     cfc:	b082      	sub	sp, #8
     cfe:	9001      	str	r0, [sp, #4]
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <OsIf_Timer_System_Internal_Init+0x24>)
     d02:	2200      	movs	r2, #0
     d04:	601a      	str	r2, [r3, #0]
     d06:	4b06      	ldr	r3, [pc, #24]	; (d20 <OsIf_Timer_System_Internal_Init+0x24>)
     d08:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     d0c:	605a      	str	r2, [r3, #4]
     d0e:	4b04      	ldr	r3, [pc, #16]	; (d20 <OsIf_Timer_System_Internal_Init+0x24>)
     d10:	2200      	movs	r2, #0
     d12:	609a      	str	r2, [r3, #8]
     d14:	4b02      	ldr	r3, [pc, #8]	; (d20 <OsIf_Timer_System_Internal_Init+0x24>)
     d16:	2205      	movs	r2, #5
     d18:	601a      	str	r2, [r3, #0]
     d1a:	bf00      	nop
     d1c:	b002      	add	sp, #8
     d1e:	4770      	bx	lr
     d20:	e000e010 	.word	0xe000e010

00000d24 <OsIf_Timer_System_Internal_GetCounter>:
     d24:	4b02      	ldr	r3, [pc, #8]	; (d30 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     d26:	689b      	ldr	r3, [r3, #8]
     d28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d2c:	4618      	mov	r0, r3
     d2e:	4770      	bx	lr
     d30:	e000e010 	.word	0xe000e010

00000d34 <OsIf_Timer_System_Internal_GetElapsed>:
     d34:	b084      	sub	sp, #16
     d36:	9001      	str	r0, [sp, #4]
     d38:	4b10      	ldr	r3, [pc, #64]	; (d7c <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     d3a:	689b      	ldr	r3, [r3, #8]
     d3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     d40:	9302      	str	r3, [sp, #8]
     d42:	2300      	movs	r3, #0
     d44:	9303      	str	r3, [sp, #12]
     d46:	9b01      	ldr	r3, [sp, #4]
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	9a02      	ldr	r2, [sp, #8]
     d4c:	429a      	cmp	r2, r3
     d4e:	d909      	bls.n	d64 <OsIf_Timer_System_Internal_GetElapsed+0x30>
     d50:	9b01      	ldr	r3, [sp, #4]
     d52:	681a      	ldr	r2, [r3, #0]
     d54:	9b02      	ldr	r3, [sp, #8]
     d56:	1ad3      	subs	r3, r2, r3
     d58:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     d5c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     d60:	9303      	str	r3, [sp, #12]
     d62:	e004      	b.n	d6e <OsIf_Timer_System_Internal_GetElapsed+0x3a>
     d64:	9b01      	ldr	r3, [sp, #4]
     d66:	681a      	ldr	r2, [r3, #0]
     d68:	9b02      	ldr	r3, [sp, #8]
     d6a:	1ad3      	subs	r3, r2, r3
     d6c:	9303      	str	r3, [sp, #12]
     d6e:	9b01      	ldr	r3, [sp, #4]
     d70:	9a02      	ldr	r2, [sp, #8]
     d72:	601a      	str	r2, [r3, #0]
     d74:	9b03      	ldr	r3, [sp, #12]
     d76:	4618      	mov	r0, r3
     d78:	b004      	add	sp, #16
     d7a:	4770      	bx	lr
     d7c:	e000e010 	.word	0xe000e010

00000d80 <Clock_Ip_NotificatonsEmptyCallback>:
     d80:	b082      	sub	sp, #8
     d82:	9001      	str	r0, [sp, #4]
     d84:	9100      	str	r1, [sp, #0]
     d86:	bf00      	nop
     d88:	b002      	add	sp, #8
     d8a:	4770      	bx	lr

00000d8c <Clock_Ip_UpdateDriverContext>:
     d8c:	b500      	push	{lr}
     d8e:	b085      	sub	sp, #20
     d90:	9001      	str	r0, [sp, #4]
     d92:	4b24      	ldr	r3, [pc, #144]	; (e24 <Clock_Ip_UpdateDriverContext+0x98>)
     d94:	2201      	movs	r2, #1
     d96:	701a      	strb	r2, [r3, #0]
     d98:	4b23      	ldr	r3, [pc, #140]	; (e28 <Clock_Ip_UpdateDriverContext+0x9c>)
     d9a:	681b      	ldr	r3, [r3, #0]
     d9c:	2102      	movs	r1, #2
     d9e:	4618      	mov	r0, r3
     da0:	f003 fc32 	bl	4608 <Clock_Ip_Command>
     da4:	2300      	movs	r3, #0
     da6:	f88d 300f 	strb.w	r3, [sp, #15]
     daa:	e015      	b.n	dd8 <Clock_Ip_UpdateDriverContext+0x4c>
     dac:	f89d 300f 	ldrb.w	r3, [sp, #15]
     db0:	9a01      	ldr	r2, [sp, #4]
     db2:	334a      	adds	r3, #74	; 0x4a
     db4:	00db      	lsls	r3, r3, #3
     db6:	4413      	add	r3, r2
     db8:	6858      	ldr	r0, [r3, #4]
     dba:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dbe:	9a01      	ldr	r2, [sp, #4]
     dc0:	334a      	adds	r3, #74	; 0x4a
     dc2:	00db      	lsls	r3, r3, #3
     dc4:	4413      	add	r3, r2
     dc6:	689b      	ldr	r3, [r3, #8]
     dc8:	4619      	mov	r1, r3
     dca:	f001 fadc 	bl	2386 <Clock_Ip_SetExternalSignalFrequency>
     dce:	f89d 300f 	ldrb.w	r3, [sp, #15]
     dd2:	3301      	adds	r3, #1
     dd4:	f88d 300f 	strb.w	r3, [sp, #15]
     dd8:	9b01      	ldr	r3, [sp, #4]
     dda:	7bdb      	ldrb	r3, [r3, #15]
     ddc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     de0:	429a      	cmp	r2, r3
     de2:	d3e3      	bcc.n	dac <Clock_Ip_UpdateDriverContext+0x20>
     de4:	f000 f824 	bl	e30 <Clock_Ip_CallEmptyCallbacks>
     de8:	2301      	movs	r3, #1
     dea:	f88d 300f 	strb.w	r3, [sp, #15]
     dee:	e00e      	b.n	e0e <Clock_Ip_UpdateDriverContext+0x82>
     df0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     df4:	9b01      	ldr	r3, [sp, #4]
     df6:	327e      	adds	r2, #126	; 0x7e
     df8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     dfc:	490b      	ldr	r1, [pc, #44]	; (e2c <Clock_Ip_UpdateDriverContext+0xa0>)
     dfe:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e02:	54ca      	strb	r2, [r1, r3]
     e04:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e08:	3301      	adds	r3, #1
     e0a:	f88d 300f 	strb.w	r3, [sp, #15]
     e0e:	9b01      	ldr	r3, [sp, #4]
     e10:	7cdb      	ldrb	r3, [r3, #19]
     e12:	f89d 200f 	ldrb.w	r2, [sp, #15]
     e16:	429a      	cmp	r2, r3
     e18:	d3ea      	bcc.n	df0 <Clock_Ip_UpdateDriverContext+0x64>
     e1a:	bf00      	nop
     e1c:	bf00      	nop
     e1e:	b005      	add	sp, #20
     e20:	f85d fb04 	ldr.w	pc, [sp], #4
     e24:	1fff8b10 	.word	0x1fff8b10
     e28:	1fff8b44 	.word	0x1fff8b44
     e2c:	1fff8b50 	.word	0x1fff8b50

00000e30 <Clock_Ip_CallEmptyCallbacks>:
     e30:	b508      	push	{r3, lr}
     e32:	4b23      	ldr	r3, [pc, #140]	; (ec0 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	f083 0301 	eor.w	r3, r3, #1
     e3a:	b2db      	uxtb	r3, r3
     e3c:	2b00      	cmp	r3, #0
     e3e:	d03d      	beq.n	ebc <Clock_Ip_CallEmptyCallbacks+0x8c>
     e40:	4b1f      	ldr	r3, [pc, #124]	; (ec0 <Clock_Ip_CallEmptyCallbacks+0x90>)
     e42:	2201      	movs	r2, #1
     e44:	701a      	strb	r2, [r3, #0]
     e46:	4b1f      	ldr	r3, [pc, #124]	; (ec4 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e48:	685b      	ldr	r3, [r3, #4]
     e4a:	2100      	movs	r1, #0
     e4c:	2000      	movs	r0, #0
     e4e:	4798      	blx	r3
     e50:	4b1c      	ldr	r3, [pc, #112]	; (ec4 <Clock_Ip_CallEmptyCallbacks+0x94>)
     e52:	689b      	ldr	r3, [r3, #8]
     e54:	2057      	movs	r0, #87	; 0x57
     e56:	4798      	blx	r3
     e58:	4b1b      	ldr	r3, [pc, #108]	; (ec8 <Clock_Ip_CallEmptyCallbacks+0x98>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	2000      	movs	r0, #0
     e5e:	4798      	blx	r3
     e60:	4b1a      	ldr	r3, [pc, #104]	; (ecc <Clock_Ip_CallEmptyCallbacks+0x9c>)
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	2000      	movs	r0, #0
     e66:	4798      	blx	r3
     e68:	4b19      	ldr	r3, [pc, #100]	; (ed0 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	2000      	movs	r0, #0
     e6e:	4798      	blx	r3
     e70:	4b18      	ldr	r3, [pc, #96]	; (ed4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e72:	685b      	ldr	r3, [r3, #4]
     e74:	2000      	movs	r0, #0
     e76:	4798      	blx	r3
     e78:	4b16      	ldr	r3, [pc, #88]	; (ed4 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     e7a:	689b      	ldr	r3, [r3, #8]
     e7c:	2057      	movs	r0, #87	; 0x57
     e7e:	4798      	blx	r3
     e80:	4b15      	ldr	r3, [pc, #84]	; (ed8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	2000      	movs	r0, #0
     e86:	4798      	blx	r3
     e88:	4b13      	ldr	r3, [pc, #76]	; (ed8 <Clock_Ip_CallEmptyCallbacks+0xa8>)
     e8a:	685b      	ldr	r3, [r3, #4]
     e8c:	2100      	movs	r1, #0
     e8e:	2057      	movs	r0, #87	; 0x57
     e90:	4798      	blx	r3
     e92:	4b12      	ldr	r3, [pc, #72]	; (edc <Clock_Ip_CallEmptyCallbacks+0xac>)
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	2000      	movs	r0, #0
     e98:	4798      	blx	r3
     e9a:	4b11      	ldr	r3, [pc, #68]	; (ee0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     e9c:	685b      	ldr	r3, [r3, #4]
     e9e:	2000      	movs	r0, #0
     ea0:	4798      	blx	r3
     ea2:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     ea4:	689b      	ldr	r3, [r3, #8]
     ea6:	2057      	movs	r0, #87	; 0x57
     ea8:	4798      	blx	r3
     eaa:	4b0e      	ldr	r3, [pc, #56]	; (ee4 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     eac:	685b      	ldr	r3, [r3, #4]
     eae:	2000      	movs	r0, #0
     eb0:	4798      	blx	r3
     eb2:	4b0d      	ldr	r3, [pc, #52]	; (ee8 <Clock_Ip_CallEmptyCallbacks+0xb8>)
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	2100      	movs	r1, #0
     eb8:	2000      	movs	r0, #0
     eba:	4798      	blx	r3
     ebc:	bf00      	nop
     ebe:	bd08      	pop	{r3, pc}
     ec0:	1fff8b48 	.word	0x1fff8b48
     ec4:	0000bc5c 	.word	0x0000bc5c
     ec8:	0000bb70 	.word	0x0000bb70
     ecc:	0000bbac 	.word	0x0000bbac
     ed0:	0000bbb4 	.word	0x0000bbb4
     ed4:	0000bbdc 	.word	0x0000bbdc
     ed8:	0000bbe8 	.word	0x0000bbe8
     edc:	0000bc20 	.word	0x0000bc20
     ee0:	0000bc6c 	.word	0x0000bc6c
     ee4:	0000bc98 	.word	0x0000bc98
     ee8:	0000bc94 	.word	0x0000bc94

00000eec <Clock_Ip_ResetClockConfiguration>:
     eec:	b500      	push	{lr}
     eee:	b085      	sub	sp, #20
     ef0:	9001      	str	r0, [sp, #4]
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	7adb      	ldrb	r3, [r3, #11]
     ef6:	9303      	str	r3, [sp, #12]
     ef8:	e01f      	b.n	f3a <Clock_Ip_ResetClockConfiguration+0x4e>
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	1e5a      	subs	r2, r3, #1
     efe:	9b01      	ldr	r3, [sp, #4]
     f00:	320d      	adds	r2, #13
     f02:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     f06:	495a      	ldr	r1, [pc, #360]	; (1070 <Clock_Ip_ResetClockConfiguration+0x184>)
     f08:	4613      	mov	r3, r2
     f0a:	00db      	lsls	r3, r3, #3
     f0c:	4413      	add	r3, r2
     f0e:	440b      	add	r3, r1
     f10:	3301      	adds	r3, #1
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	461a      	mov	r2, r3
     f16:	4b57      	ldr	r3, [pc, #348]	; (1074 <Clock_Ip_ResetClockConfiguration+0x188>)
     f18:	5c9b      	ldrb	r3, [r3, r2]
     f1a:	9302      	str	r3, [sp, #8]
     f1c:	4a56      	ldr	r2, [pc, #344]	; (1078 <Clock_Ip_ResetClockConfiguration+0x18c>)
     f1e:	9b02      	ldr	r3, [sp, #8]
     f20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f24:	9a03      	ldr	r2, [sp, #12]
     f26:	3a01      	subs	r2, #1
     f28:	320d      	adds	r2, #13
     f2a:	00d2      	lsls	r2, r2, #3
     f2c:	9901      	ldr	r1, [sp, #4]
     f2e:	440a      	add	r2, r1
     f30:	4610      	mov	r0, r2
     f32:	4798      	blx	r3
     f34:	9b03      	ldr	r3, [sp, #12]
     f36:	3b01      	subs	r3, #1
     f38:	9303      	str	r3, [sp, #12]
     f3a:	9b03      	ldr	r3, [sp, #12]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d1dc      	bne.n	efa <Clock_Ip_ResetClockConfiguration+0xe>
     f40:	9b01      	ldr	r3, [sp, #4]
     f42:	7b9b      	ldrb	r3, [r3, #14]
     f44:	9303      	str	r3, [sp, #12]
     f46:	e026      	b.n	f96 <Clock_Ip_ResetClockConfiguration+0xaa>
     f48:	9b03      	ldr	r3, [sp, #12]
     f4a:	3b01      	subs	r3, #1
     f4c:	9a01      	ldr	r2, [sp, #4]
     f4e:	3324      	adds	r3, #36	; 0x24
     f50:	011b      	lsls	r3, r3, #4
     f52:	4413      	add	r3, r2
     f54:	3304      	adds	r3, #4
     f56:	681a      	ldr	r2, [r3, #0]
     f58:	4945      	ldr	r1, [pc, #276]	; (1070 <Clock_Ip_ResetClockConfiguration+0x184>)
     f5a:	4613      	mov	r3, r2
     f5c:	00db      	lsls	r3, r3, #3
     f5e:	4413      	add	r3, r2
     f60:	440b      	add	r3, r1
     f62:	3301      	adds	r3, #1
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	461a      	mov	r2, r3
     f68:	4b44      	ldr	r3, [pc, #272]	; (107c <Clock_Ip_ResetClockConfiguration+0x190>)
     f6a:	5c9b      	ldrb	r3, [r3, r2]
     f6c:	9302      	str	r3, [sp, #8]
     f6e:	4944      	ldr	r1, [pc, #272]	; (1080 <Clock_Ip_ResetClockConfiguration+0x194>)
     f70:	9a02      	ldr	r2, [sp, #8]
     f72:	4613      	mov	r3, r2
     f74:	005b      	lsls	r3, r3, #1
     f76:	4413      	add	r3, r2
     f78:	009b      	lsls	r3, r3, #2
     f7a:	440b      	add	r3, r1
     f7c:	681b      	ldr	r3, [r3, #0]
     f7e:	9a03      	ldr	r2, [sp, #12]
     f80:	3a01      	subs	r2, #1
     f82:	3224      	adds	r2, #36	; 0x24
     f84:	0112      	lsls	r2, r2, #4
     f86:	9901      	ldr	r1, [sp, #4]
     f88:	440a      	add	r2, r1
     f8a:	3204      	adds	r2, #4
     f8c:	4610      	mov	r0, r2
     f8e:	4798      	blx	r3
     f90:	9b03      	ldr	r3, [sp, #12]
     f92:	3b01      	subs	r3, #1
     f94:	9303      	str	r3, [sp, #12]
     f96:	9b03      	ldr	r3, [sp, #12]
     f98:	2b00      	cmp	r3, #0
     f9a:	d1d5      	bne.n	f48 <Clock_Ip_ResetClockConfiguration+0x5c>
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	7a9b      	ldrb	r3, [r3, #10]
     fa0:	9303      	str	r3, [sp, #12]
     fa2:	e02a      	b.n	ffa <Clock_Ip_ResetClockConfiguration+0x10e>
     fa4:	9b03      	ldr	r3, [sp, #12]
     fa6:	1e5a      	subs	r2, r3, #1
     fa8:	9901      	ldr	r1, [sp, #4]
     faa:	4613      	mov	r3, r2
     fac:	009b      	lsls	r3, r3, #2
     fae:	4413      	add	r3, r2
     fb0:	00db      	lsls	r3, r3, #3
     fb2:	440b      	add	r3, r1
     fb4:	3340      	adds	r3, #64	; 0x40
     fb6:	681a      	ldr	r2, [r3, #0]
     fb8:	492d      	ldr	r1, [pc, #180]	; (1070 <Clock_Ip_ResetClockConfiguration+0x184>)
     fba:	4613      	mov	r3, r2
     fbc:	00db      	lsls	r3, r3, #3
     fbe:	4413      	add	r3, r2
     fc0:	440b      	add	r3, r1
     fc2:	3301      	adds	r3, #1
     fc4:	781b      	ldrb	r3, [r3, #0]
     fc6:	461a      	mov	r2, r3
     fc8:	4b2e      	ldr	r3, [pc, #184]	; (1084 <Clock_Ip_ResetClockConfiguration+0x198>)
     fca:	5c9b      	ldrb	r3, [r3, r2]
     fcc:	9302      	str	r3, [sp, #8]
     fce:	492e      	ldr	r1, [pc, #184]	; (1088 <Clock_Ip_ResetClockConfiguration+0x19c>)
     fd0:	9a02      	ldr	r2, [sp, #8]
     fd2:	4613      	mov	r3, r2
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	4413      	add	r3, r2
     fd8:	009b      	lsls	r3, r3, #2
     fda:	440b      	add	r3, r1
     fdc:	6819      	ldr	r1, [r3, #0]
     fde:	9b03      	ldr	r3, [sp, #12]
     fe0:	1e5a      	subs	r2, r3, #1
     fe2:	4613      	mov	r3, r2
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	4413      	add	r3, r2
     fe8:	00db      	lsls	r3, r3, #3
     fea:	3340      	adds	r3, #64	; 0x40
     fec:	9a01      	ldr	r2, [sp, #4]
     fee:	4413      	add	r3, r2
     ff0:	4618      	mov	r0, r3
     ff2:	4788      	blx	r1
     ff4:	9b03      	ldr	r3, [sp, #12]
     ff6:	3b01      	subs	r3, #1
     ff8:	9303      	str	r3, [sp, #12]
     ffa:	9b03      	ldr	r3, [sp, #12]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d1d1      	bne.n	fa4 <Clock_Ip_ResetClockConfiguration+0xb8>
    1000:	9b01      	ldr	r3, [sp, #4]
    1002:	7a5b      	ldrb	r3, [r3, #9]
    1004:	9303      	str	r3, [sp, #12]
    1006:	e02b      	b.n	1060 <Clock_Ip_ResetClockConfiguration+0x174>
    1008:	9b03      	ldr	r3, [sp, #12]
    100a:	1e5a      	subs	r2, r3, #1
    100c:	9901      	ldr	r1, [sp, #4]
    100e:	4613      	mov	r3, r2
    1010:	009b      	lsls	r3, r3, #2
    1012:	4413      	add	r3, r2
    1014:	009b      	lsls	r3, r3, #2
    1016:	440b      	add	r3, r1
    1018:	332c      	adds	r3, #44	; 0x2c
    101a:	681a      	ldr	r2, [r3, #0]
    101c:	4914      	ldr	r1, [pc, #80]	; (1070 <Clock_Ip_ResetClockConfiguration+0x184>)
    101e:	4613      	mov	r3, r2
    1020:	00db      	lsls	r3, r3, #3
    1022:	4413      	add	r3, r2
    1024:	440b      	add	r3, r1
    1026:	3301      	adds	r3, #1
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	461a      	mov	r2, r3
    102c:	4b17      	ldr	r3, [pc, #92]	; (108c <Clock_Ip_ResetClockConfiguration+0x1a0>)
    102e:	5c9b      	ldrb	r3, [r3, r2]
    1030:	9302      	str	r3, [sp, #8]
    1032:	4917      	ldr	r1, [pc, #92]	; (1090 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1034:	9a02      	ldr	r2, [sp, #8]
    1036:	4613      	mov	r3, r2
    1038:	009b      	lsls	r3, r3, #2
    103a:	4413      	add	r3, r2
    103c:	009b      	lsls	r3, r3, #2
    103e:	440b      	add	r3, r1
    1040:	6819      	ldr	r1, [r3, #0]
    1042:	9b03      	ldr	r3, [sp, #12]
    1044:	1e5a      	subs	r2, r3, #1
    1046:	4613      	mov	r3, r2
    1048:	009b      	lsls	r3, r3, #2
    104a:	4413      	add	r3, r2
    104c:	009b      	lsls	r3, r3, #2
    104e:	3328      	adds	r3, #40	; 0x28
    1050:	9a01      	ldr	r2, [sp, #4]
    1052:	4413      	add	r3, r2
    1054:	3304      	adds	r3, #4
    1056:	4618      	mov	r0, r3
    1058:	4788      	blx	r1
    105a:	9b03      	ldr	r3, [sp, #12]
    105c:	3b01      	subs	r3, #1
    105e:	9303      	str	r3, [sp, #12]
    1060:	9b03      	ldr	r3, [sp, #12]
    1062:	2b00      	cmp	r3, #0
    1064:	d1d0      	bne.n	1008 <Clock_Ip_ResetClockConfiguration+0x11c>
    1066:	bf00      	nop
    1068:	bf00      	nop
    106a:	b005      	add	sp, #20
    106c:	f85d fb04 	ldr.w	pc, [sp], #4
    1070:	0000b660 	.word	0x0000b660
    1074:	0000b630 	.word	0x0000b630
    1078:	0000bc98 	.word	0x0000bc98
    107c:	0000b610 	.word	0x0000b610
    1080:	0000bbdc 	.word	0x0000bbdc
    1084:	0000b620 	.word	0x0000b620
    1088:	0000bc6c 	.word	0x0000bc6c
    108c:	0000b5e0 	.word	0x0000b5e0
    1090:	0000bbb4 	.word	0x0000bbb4

00001094 <Clock_Ip_Init>:
    1094:	b500      	push	{lr}
    1096:	b085      	sub	sp, #20
    1098:	9001      	str	r0, [sp, #4]
    109a:	2301      	movs	r3, #1
    109c:	9303      	str	r3, [sp, #12]
    109e:	9801      	ldr	r0, [sp, #4]
    10a0:	f000 f818 	bl	10d4 <Clock_Ip_InitClock>
    10a4:	4b0a      	ldr	r3, [pc, #40]	; (10d0 <Clock_Ip_Init+0x3c>)
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d00a      	beq.n	10c2 <Clock_Ip_Init+0x2e>
    10ac:	f000 fb74 	bl	1798 <Clock_Ip_GetPllStatus>
    10b0:	9002      	str	r0, [sp, #8]
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d106      	bne.n	10c6 <Clock_Ip_Init+0x32>
    10b8:	f000 fbf2 	bl	18a0 <Clock_Ip_DistributePll>
    10bc:	2300      	movs	r3, #0
    10be:	9303      	str	r3, [sp, #12]
    10c0:	e001      	b.n	10c6 <Clock_Ip_Init+0x32>
    10c2:	2300      	movs	r3, #0
    10c4:	9303      	str	r3, [sp, #12]
    10c6:	9b03      	ldr	r3, [sp, #12]
    10c8:	4618      	mov	r0, r3
    10ca:	b005      	add	sp, #20
    10cc:	f85d fb04 	ldr.w	pc, [sp], #4
    10d0:	1fff8b4c 	.word	0x1fff8b4c

000010d4 <Clock_Ip_InitClock>:
    10d4:	b510      	push	{r4, lr}
    10d6:	b084      	sub	sp, #16
    10d8:	9001      	str	r0, [sp, #4]
    10da:	4a9f      	ldr	r2, [pc, #636]	; (1358 <Clock_Ip_InitClock+0x284>)
    10dc:	9b01      	ldr	r3, [sp, #4]
    10de:	6013      	str	r3, [r2, #0]
    10e0:	2101      	movs	r1, #1
    10e2:	9801      	ldr	r0, [sp, #4]
    10e4:	f003 fa90 	bl	4608 <Clock_Ip_Command>
    10e8:	4b9b      	ldr	r3, [pc, #620]	; (1358 <Clock_Ip_InitClock+0x284>)
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d030      	beq.n	1152 <Clock_Ip_InitClock+0x7e>
    10f0:	2300      	movs	r3, #0
    10f2:	9303      	str	r3, [sp, #12]
    10f4:	e027      	b.n	1146 <Clock_Ip_InitClock+0x72>
    10f6:	9901      	ldr	r1, [sp, #4]
    10f8:	9a03      	ldr	r2, [sp, #12]
    10fa:	4613      	mov	r3, r2
    10fc:	009b      	lsls	r3, r3, #2
    10fe:	4413      	add	r3, r2
    1100:	009b      	lsls	r3, r3, #2
    1102:	440b      	add	r3, r1
    1104:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1108:	681a      	ldr	r2, [r3, #0]
    110a:	4994      	ldr	r1, [pc, #592]	; (135c <Clock_Ip_InitClock+0x288>)
    110c:	4613      	mov	r3, r2
    110e:	00db      	lsls	r3, r3, #3
    1110:	4413      	add	r3, r2
    1112:	440b      	add	r3, r1
    1114:	3301      	adds	r3, #1
    1116:	781b      	ldrb	r3, [r3, #0]
    1118:	461a      	mov	r2, r3
    111a:	4b91      	ldr	r3, [pc, #580]	; (1360 <Clock_Ip_InitClock+0x28c>)
    111c:	5c9b      	ldrb	r3, [r3, r2]
    111e:	9302      	str	r3, [sp, #8]
    1120:	4a90      	ldr	r2, [pc, #576]	; (1364 <Clock_Ip_InitClock+0x290>)
    1122:	9b02      	ldr	r3, [sp, #8]
    1124:	011b      	lsls	r3, r3, #4
    1126:	4413      	add	r3, r2
    1128:	6819      	ldr	r1, [r3, #0]
    112a:	9a03      	ldr	r2, [sp, #12]
    112c:	4613      	mov	r3, r2
    112e:	009b      	lsls	r3, r3, #2
    1130:	4413      	add	r3, r2
    1132:	009b      	lsls	r3, r3, #2
    1134:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1138:	9a01      	ldr	r2, [sp, #4]
    113a:	4413      	add	r3, r2
    113c:	4618      	mov	r0, r3
    113e:	4788      	blx	r1
    1140:	9b03      	ldr	r3, [sp, #12]
    1142:	3301      	adds	r3, #1
    1144:	9303      	str	r3, [sp, #12]
    1146:	9b01      	ldr	r3, [sp, #4]
    1148:	7c9b      	ldrb	r3, [r3, #18]
    114a:	461a      	mov	r2, r3
    114c:	9b03      	ldr	r3, [sp, #12]
    114e:	4293      	cmp	r3, r2
    1150:	d3d1      	bcc.n	10f6 <Clock_Ip_InitClock+0x22>
    1152:	9801      	ldr	r0, [sp, #4]
    1154:	f7ff feca 	bl	eec <Clock_Ip_ResetClockConfiguration>
    1158:	2300      	movs	r3, #0
    115a:	9303      	str	r3, [sp, #12]
    115c:	e029      	b.n	11b2 <Clock_Ip_InitClock+0xde>
    115e:	9901      	ldr	r1, [sp, #4]
    1160:	9a03      	ldr	r2, [sp, #12]
    1162:	4613      	mov	r3, r2
    1164:	005b      	lsls	r3, r3, #1
    1166:	4413      	add	r3, r2
    1168:	009b      	lsls	r3, r3, #2
    116a:	440b      	add	r3, r1
    116c:	3314      	adds	r3, #20
    116e:	681a      	ldr	r2, [r3, #0]
    1170:	497a      	ldr	r1, [pc, #488]	; (135c <Clock_Ip_InitClock+0x288>)
    1172:	4613      	mov	r3, r2
    1174:	00db      	lsls	r3, r3, #3
    1176:	4413      	add	r3, r2
    1178:	440b      	add	r3, r1
    117a:	3301      	adds	r3, #1
    117c:	781b      	ldrb	r3, [r3, #0]
    117e:	461a      	mov	r2, r3
    1180:	4b79      	ldr	r3, [pc, #484]	; (1368 <Clock_Ip_InitClock+0x294>)
    1182:	5c9b      	ldrb	r3, [r3, r2]
    1184:	9302      	str	r3, [sp, #8]
    1186:	4979      	ldr	r1, [pc, #484]	; (136c <Clock_Ip_InitClock+0x298>)
    1188:	9a02      	ldr	r2, [sp, #8]
    118a:	4613      	mov	r3, r2
    118c:	005b      	lsls	r3, r3, #1
    118e:	4413      	add	r3, r2
    1190:	009b      	lsls	r3, r3, #2
    1192:	440b      	add	r3, r1
    1194:	6819      	ldr	r1, [r3, #0]
    1196:	9a03      	ldr	r2, [sp, #12]
    1198:	4613      	mov	r3, r2
    119a:	005b      	lsls	r3, r3, #1
    119c:	4413      	add	r3, r2
    119e:	009b      	lsls	r3, r3, #2
    11a0:	3310      	adds	r3, #16
    11a2:	9a01      	ldr	r2, [sp, #4]
    11a4:	4413      	add	r3, r2
    11a6:	3304      	adds	r3, #4
    11a8:	4618      	mov	r0, r3
    11aa:	4788      	blx	r1
    11ac:	9b03      	ldr	r3, [sp, #12]
    11ae:	3301      	adds	r3, #1
    11b0:	9303      	str	r3, [sp, #12]
    11b2:	9b01      	ldr	r3, [sp, #4]
    11b4:	7a1b      	ldrb	r3, [r3, #8]
    11b6:	461a      	mov	r2, r3
    11b8:	9b03      	ldr	r3, [sp, #12]
    11ba:	4293      	cmp	r3, r2
    11bc:	d3cf      	bcc.n	115e <Clock_Ip_InitClock+0x8a>
    11be:	2300      	movs	r3, #0
    11c0:	9303      	str	r3, [sp, #12]
    11c2:	e02a      	b.n	121a <Clock_Ip_InitClock+0x146>
    11c4:	9901      	ldr	r1, [sp, #4]
    11c6:	9a03      	ldr	r2, [sp, #12]
    11c8:	4613      	mov	r3, r2
    11ca:	009b      	lsls	r3, r3, #2
    11cc:	4413      	add	r3, r2
    11ce:	009b      	lsls	r3, r3, #2
    11d0:	440b      	add	r3, r1
    11d2:	332c      	adds	r3, #44	; 0x2c
    11d4:	681a      	ldr	r2, [r3, #0]
    11d6:	4961      	ldr	r1, [pc, #388]	; (135c <Clock_Ip_InitClock+0x288>)
    11d8:	4613      	mov	r3, r2
    11da:	00db      	lsls	r3, r3, #3
    11dc:	4413      	add	r3, r2
    11de:	440b      	add	r3, r1
    11e0:	3301      	adds	r3, #1
    11e2:	781b      	ldrb	r3, [r3, #0]
    11e4:	461a      	mov	r2, r3
    11e6:	4b62      	ldr	r3, [pc, #392]	; (1370 <Clock_Ip_InitClock+0x29c>)
    11e8:	5c9b      	ldrb	r3, [r3, r2]
    11ea:	9302      	str	r3, [sp, #8]
    11ec:	4961      	ldr	r1, [pc, #388]	; (1374 <Clock_Ip_InitClock+0x2a0>)
    11ee:	9a02      	ldr	r2, [sp, #8]
    11f0:	4613      	mov	r3, r2
    11f2:	009b      	lsls	r3, r3, #2
    11f4:	4413      	add	r3, r2
    11f6:	009b      	lsls	r3, r3, #2
    11f8:	440b      	add	r3, r1
    11fa:	3304      	adds	r3, #4
    11fc:	6819      	ldr	r1, [r3, #0]
    11fe:	9a03      	ldr	r2, [sp, #12]
    1200:	4613      	mov	r3, r2
    1202:	009b      	lsls	r3, r3, #2
    1204:	4413      	add	r3, r2
    1206:	009b      	lsls	r3, r3, #2
    1208:	3328      	adds	r3, #40	; 0x28
    120a:	9a01      	ldr	r2, [sp, #4]
    120c:	4413      	add	r3, r2
    120e:	3304      	adds	r3, #4
    1210:	4618      	mov	r0, r3
    1212:	4788      	blx	r1
    1214:	9b03      	ldr	r3, [sp, #12]
    1216:	3301      	adds	r3, #1
    1218:	9303      	str	r3, [sp, #12]
    121a:	9b01      	ldr	r3, [sp, #4]
    121c:	7a5b      	ldrb	r3, [r3, #9]
    121e:	461a      	mov	r2, r3
    1220:	9b03      	ldr	r3, [sp, #12]
    1222:	4293      	cmp	r3, r2
    1224:	d3ce      	bcc.n	11c4 <Clock_Ip_InitClock+0xf0>
    1226:	9801      	ldr	r0, [sp, #4]
    1228:	f7ff fdb0 	bl	d8c <Clock_Ip_UpdateDriverContext>
    122c:	2300      	movs	r3, #0
    122e:	9303      	str	r3, [sp, #12]
    1230:	e028      	b.n	1284 <Clock_Ip_InitClock+0x1b0>
    1232:	9901      	ldr	r1, [sp, #4]
    1234:	9a03      	ldr	r2, [sp, #12]
    1236:	4613      	mov	r3, r2
    1238:	009b      	lsls	r3, r3, #2
    123a:	4413      	add	r3, r2
    123c:	009b      	lsls	r3, r3, #2
    123e:	440b      	add	r3, r1
    1240:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1244:	681a      	ldr	r2, [r3, #0]
    1246:	4945      	ldr	r1, [pc, #276]	; (135c <Clock_Ip_InitClock+0x288>)
    1248:	4613      	mov	r3, r2
    124a:	00db      	lsls	r3, r3, #3
    124c:	4413      	add	r3, r2
    124e:	440b      	add	r3, r1
    1250:	3301      	adds	r3, #1
    1252:	781b      	ldrb	r3, [r3, #0]
    1254:	461a      	mov	r2, r3
    1256:	4b48      	ldr	r3, [pc, #288]	; (1378 <Clock_Ip_InitClock+0x2a4>)
    1258:	5c9b      	ldrb	r3, [r3, r2]
    125a:	9302      	str	r3, [sp, #8]
    125c:	4a47      	ldr	r2, [pc, #284]	; (137c <Clock_Ip_InitClock+0x2a8>)
    125e:	9b02      	ldr	r3, [sp, #8]
    1260:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1264:	9a03      	ldr	r2, [sp, #12]
    1266:	4613      	mov	r3, r2
    1268:	009b      	lsls	r3, r3, #2
    126a:	4413      	add	r3, r2
    126c:	009b      	lsls	r3, r3, #2
    126e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1272:	9a01      	ldr	r2, [sp, #4]
    1274:	4413      	add	r3, r2
    1276:	3304      	adds	r3, #4
    1278:	9903      	ldr	r1, [sp, #12]
    127a:	4618      	mov	r0, r3
    127c:	47a0      	blx	r4
    127e:	9b03      	ldr	r3, [sp, #12]
    1280:	3301      	adds	r3, #1
    1282:	9303      	str	r3, [sp, #12]
    1284:	9b01      	ldr	r3, [sp, #4]
    1286:	7c5b      	ldrb	r3, [r3, #17]
    1288:	461a      	mov	r2, r3
    128a:	9b03      	ldr	r3, [sp, #12]
    128c:	4293      	cmp	r3, r2
    128e:	d3d0      	bcc.n	1232 <Clock_Ip_InitClock+0x15e>
    1290:	2300      	movs	r3, #0
    1292:	9303      	str	r3, [sp, #12]
    1294:	e026      	b.n	12e4 <Clock_Ip_InitClock+0x210>
    1296:	9901      	ldr	r1, [sp, #4]
    1298:	9a03      	ldr	r2, [sp, #12]
    129a:	4613      	mov	r3, r2
    129c:	005b      	lsls	r3, r3, #1
    129e:	4413      	add	r3, r2
    12a0:	009b      	lsls	r3, r3, #2
    12a2:	440b      	add	r3, r1
    12a4:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12a8:	681a      	ldr	r2, [r3, #0]
    12aa:	492c      	ldr	r1, [pc, #176]	; (135c <Clock_Ip_InitClock+0x288>)
    12ac:	4613      	mov	r3, r2
    12ae:	00db      	lsls	r3, r3, #3
    12b0:	4413      	add	r3, r2
    12b2:	440b      	add	r3, r1
    12b4:	3301      	adds	r3, #1
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	461a      	mov	r2, r3
    12ba:	4b31      	ldr	r3, [pc, #196]	; (1380 <Clock_Ip_InitClock+0x2ac>)
    12bc:	5c9b      	ldrb	r3, [r3, r2]
    12be:	9302      	str	r3, [sp, #8]
    12c0:	4a30      	ldr	r2, [pc, #192]	; (1384 <Clock_Ip_InitClock+0x2b0>)
    12c2:	9b02      	ldr	r3, [sp, #8]
    12c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    12c8:	9a03      	ldr	r2, [sp, #12]
    12ca:	4613      	mov	r3, r2
    12cc:	005b      	lsls	r3, r3, #1
    12ce:	4413      	add	r3, r2
    12d0:	009b      	lsls	r3, r3, #2
    12d2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    12d6:	9a01      	ldr	r2, [sp, #4]
    12d8:	4413      	add	r3, r2
    12da:	4618      	mov	r0, r3
    12dc:	4788      	blx	r1
    12de:	9b03      	ldr	r3, [sp, #12]
    12e0:	3301      	adds	r3, #1
    12e2:	9303      	str	r3, [sp, #12]
    12e4:	9b01      	ldr	r3, [sp, #4]
    12e6:	7b5b      	ldrb	r3, [r3, #13]
    12e8:	461a      	mov	r2, r3
    12ea:	9b03      	ldr	r3, [sp, #12]
    12ec:	4293      	cmp	r3, r2
    12ee:	d3d2      	bcc.n	1296 <Clock_Ip_InitClock+0x1c2>
    12f0:	2300      	movs	r3, #0
    12f2:	9303      	str	r3, [sp, #12]
    12f4:	e026      	b.n	1344 <Clock_Ip_InitClock+0x270>
    12f6:	9901      	ldr	r1, [sp, #4]
    12f8:	9a03      	ldr	r2, [sp, #12]
    12fa:	4613      	mov	r3, r2
    12fc:	005b      	lsls	r3, r3, #1
    12fe:	4413      	add	r3, r2
    1300:	009b      	lsls	r3, r3, #2
    1302:	440b      	add	r3, r1
    1304:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1308:	681a      	ldr	r2, [r3, #0]
    130a:	4914      	ldr	r1, [pc, #80]	; (135c <Clock_Ip_InitClock+0x288>)
    130c:	4613      	mov	r3, r2
    130e:	00db      	lsls	r3, r3, #3
    1310:	4413      	add	r3, r2
    1312:	440b      	add	r3, r1
    1314:	3301      	adds	r3, #1
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	461a      	mov	r2, r3
    131a:	4b1b      	ldr	r3, [pc, #108]	; (1388 <Clock_Ip_InitClock+0x2b4>)
    131c:	5c9b      	ldrb	r3, [r3, r2]
    131e:	9302      	str	r3, [sp, #8]
    1320:	4a1a      	ldr	r2, [pc, #104]	; (138c <Clock_Ip_InitClock+0x2b8>)
    1322:	9b02      	ldr	r3, [sp, #8]
    1324:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1328:	9a03      	ldr	r2, [sp, #12]
    132a:	4613      	mov	r3, r2
    132c:	005b      	lsls	r3, r3, #1
    132e:	4413      	add	r3, r2
    1330:	009b      	lsls	r3, r3, #2
    1332:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1336:	9a01      	ldr	r2, [sp, #4]
    1338:	4413      	add	r3, r2
    133a:	4618      	mov	r0, r3
    133c:	4788      	blx	r1
    133e:	9b03      	ldr	r3, [sp, #12]
    1340:	3301      	adds	r3, #1
    1342:	9303      	str	r3, [sp, #12]
    1344:	9b01      	ldr	r3, [sp, #4]
    1346:	7b1b      	ldrb	r3, [r3, #12]
    1348:	461a      	mov	r2, r3
    134a:	9b03      	ldr	r3, [sp, #12]
    134c:	4293      	cmp	r3, r2
    134e:	d3d2      	bcc.n	12f6 <Clock_Ip_InitClock+0x222>
    1350:	2300      	movs	r3, #0
    1352:	9303      	str	r3, [sp, #12]
    1354:	e044      	b.n	13e0 <Clock_Ip_InitClock+0x30c>
    1356:	bf00      	nop
    1358:	1fff8b44 	.word	0x1fff8b44
    135c:	0000b660 	.word	0x0000b660
    1360:	0000b650 	.word	0x0000b650
    1364:	0000bc5c 	.word	0x0000bc5c
    1368:	0000b5f0 	.word	0x0000b5f0
    136c:	0000bc20 	.word	0x0000bc20
    1370:	0000b5e0 	.word	0x0000b5e0
    1374:	0000bbb4 	.word	0x0000bbb4
    1378:	0000b640 	.word	0x0000b640
    137c:	0000bc94 	.word	0x0000bc94
    1380:	0000b5d0 	.word	0x0000b5d0
    1384:	0000bbac 	.word	0x0000bbac
    1388:	0000b5c0 	.word	0x0000b5c0
    138c:	0000bb70 	.word	0x0000bb70
    1390:	9901      	ldr	r1, [sp, #4]
    1392:	9a03      	ldr	r2, [sp, #12]
    1394:	4613      	mov	r3, r2
    1396:	005b      	lsls	r3, r3, #1
    1398:	4413      	add	r3, r2
    139a:	009b      	lsls	r3, r3, #2
    139c:	440b      	add	r3, r1
    139e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13a2:	681a      	ldr	r2, [r3, #0]
    13a4:	49ac      	ldr	r1, [pc, #688]	; (1658 <Clock_Ip_InitClock+0x584>)
    13a6:	4613      	mov	r3, r2
    13a8:	00db      	lsls	r3, r3, #3
    13aa:	4413      	add	r3, r2
    13ac:	440b      	add	r3, r1
    13ae:	3301      	adds	r3, #1
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	461a      	mov	r2, r3
    13b4:	4ba9      	ldr	r3, [pc, #676]	; (165c <Clock_Ip_InitClock+0x588>)
    13b6:	5c9b      	ldrb	r3, [r3, r2]
    13b8:	9302      	str	r3, [sp, #8]
    13ba:	4aa9      	ldr	r2, [pc, #676]	; (1660 <Clock_Ip_InitClock+0x58c>)
    13bc:	9b02      	ldr	r3, [sp, #8]
    13be:	00db      	lsls	r3, r3, #3
    13c0:	4413      	add	r3, r2
    13c2:	6859      	ldr	r1, [r3, #4]
    13c4:	9a03      	ldr	r2, [sp, #12]
    13c6:	4613      	mov	r3, r2
    13c8:	005b      	lsls	r3, r3, #1
    13ca:	4413      	add	r3, r2
    13cc:	009b      	lsls	r3, r3, #2
    13ce:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13d2:	9a01      	ldr	r2, [sp, #4]
    13d4:	4413      	add	r3, r2
    13d6:	4618      	mov	r0, r3
    13d8:	4788      	blx	r1
    13da:	9b03      	ldr	r3, [sp, #12]
    13dc:	3301      	adds	r3, #1
    13de:	9303      	str	r3, [sp, #12]
    13e0:	9b01      	ldr	r3, [sp, #4]
    13e2:	7b5b      	ldrb	r3, [r3, #13]
    13e4:	461a      	mov	r2, r3
    13e6:	9b03      	ldr	r3, [sp, #12]
    13e8:	4293      	cmp	r3, r2
    13ea:	d3d1      	bcc.n	1390 <Clock_Ip_InitClock+0x2bc>
    13ec:	2300      	movs	r3, #0
    13ee:	9303      	str	r3, [sp, #12]
    13f0:	e029      	b.n	1446 <Clock_Ip_InitClock+0x372>
    13f2:	9901      	ldr	r1, [sp, #4]
    13f4:	9a03      	ldr	r2, [sp, #12]
    13f6:	4613      	mov	r3, r2
    13f8:	009b      	lsls	r3, r3, #2
    13fa:	4413      	add	r3, r2
    13fc:	00db      	lsls	r3, r3, #3
    13fe:	440b      	add	r3, r1
    1400:	3340      	adds	r3, #64	; 0x40
    1402:	681a      	ldr	r2, [r3, #0]
    1404:	4994      	ldr	r1, [pc, #592]	; (1658 <Clock_Ip_InitClock+0x584>)
    1406:	4613      	mov	r3, r2
    1408:	00db      	lsls	r3, r3, #3
    140a:	4413      	add	r3, r2
    140c:	440b      	add	r3, r1
    140e:	3301      	adds	r3, #1
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	461a      	mov	r2, r3
    1414:	4b93      	ldr	r3, [pc, #588]	; (1664 <Clock_Ip_InitClock+0x590>)
    1416:	5c9b      	ldrb	r3, [r3, r2]
    1418:	9302      	str	r3, [sp, #8]
    141a:	4993      	ldr	r1, [pc, #588]	; (1668 <Clock_Ip_InitClock+0x594>)
    141c:	9a02      	ldr	r2, [sp, #8]
    141e:	4613      	mov	r3, r2
    1420:	009b      	lsls	r3, r3, #2
    1422:	4413      	add	r3, r2
    1424:	009b      	lsls	r3, r3, #2
    1426:	440b      	add	r3, r1
    1428:	3304      	adds	r3, #4
    142a:	6819      	ldr	r1, [r3, #0]
    142c:	9a03      	ldr	r2, [sp, #12]
    142e:	4613      	mov	r3, r2
    1430:	009b      	lsls	r3, r3, #2
    1432:	4413      	add	r3, r2
    1434:	00db      	lsls	r3, r3, #3
    1436:	3340      	adds	r3, #64	; 0x40
    1438:	9a01      	ldr	r2, [sp, #4]
    143a:	4413      	add	r3, r2
    143c:	4618      	mov	r0, r3
    143e:	4788      	blx	r1
    1440:	9b03      	ldr	r3, [sp, #12]
    1442:	3301      	adds	r3, #1
    1444:	9303      	str	r3, [sp, #12]
    1446:	9b01      	ldr	r3, [sp, #4]
    1448:	7a9b      	ldrb	r3, [r3, #10]
    144a:	461a      	mov	r2, r3
    144c:	9b03      	ldr	r3, [sp, #12]
    144e:	4293      	cmp	r3, r2
    1450:	d3cf      	bcc.n	13f2 <Clock_Ip_InitClock+0x31e>
    1452:	2300      	movs	r3, #0
    1454:	9303      	str	r3, [sp, #12]
    1456:	e029      	b.n	14ac <Clock_Ip_InitClock+0x3d8>
    1458:	9901      	ldr	r1, [sp, #4]
    145a:	9a03      	ldr	r2, [sp, #12]
    145c:	4613      	mov	r3, r2
    145e:	009b      	lsls	r3, r3, #2
    1460:	4413      	add	r3, r2
    1462:	009b      	lsls	r3, r3, #2
    1464:	440b      	add	r3, r1
    1466:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    146a:	681a      	ldr	r2, [r3, #0]
    146c:	497a      	ldr	r1, [pc, #488]	; (1658 <Clock_Ip_InitClock+0x584>)
    146e:	4613      	mov	r3, r2
    1470:	00db      	lsls	r3, r3, #3
    1472:	4413      	add	r3, r2
    1474:	440b      	add	r3, r1
    1476:	3301      	adds	r3, #1
    1478:	781b      	ldrb	r3, [r3, #0]
    147a:	461a      	mov	r2, r3
    147c:	4b7b      	ldr	r3, [pc, #492]	; (166c <Clock_Ip_InitClock+0x598>)
    147e:	5c9b      	ldrb	r3, [r3, r2]
    1480:	9302      	str	r3, [sp, #8]
    1482:	4a7b      	ldr	r2, [pc, #492]	; (1670 <Clock_Ip_InitClock+0x59c>)
    1484:	9b02      	ldr	r3, [sp, #8]
    1486:	011b      	lsls	r3, r3, #4
    1488:	4413      	add	r3, r2
    148a:	3304      	adds	r3, #4
    148c:	681c      	ldr	r4, [r3, #0]
    148e:	9a03      	ldr	r2, [sp, #12]
    1490:	4613      	mov	r3, r2
    1492:	009b      	lsls	r3, r3, #2
    1494:	4413      	add	r3, r2
    1496:	009b      	lsls	r3, r3, #2
    1498:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    149c:	9a01      	ldr	r2, [sp, #4]
    149e:	4413      	add	r3, r2
    14a0:	9903      	ldr	r1, [sp, #12]
    14a2:	4618      	mov	r0, r3
    14a4:	47a0      	blx	r4
    14a6:	9b03      	ldr	r3, [sp, #12]
    14a8:	3301      	adds	r3, #1
    14aa:	9303      	str	r3, [sp, #12]
    14ac:	9b01      	ldr	r3, [sp, #4]
    14ae:	7c9b      	ldrb	r3, [r3, #18]
    14b0:	461a      	mov	r2, r3
    14b2:	9b03      	ldr	r3, [sp, #12]
    14b4:	4293      	cmp	r3, r2
    14b6:	d3cf      	bcc.n	1458 <Clock_Ip_InitClock+0x384>
    14b8:	2300      	movs	r3, #0
    14ba:	9303      	str	r3, [sp, #12]
    14bc:	e02a      	b.n	1514 <Clock_Ip_InitClock+0x440>
    14be:	9901      	ldr	r1, [sp, #4]
    14c0:	9a03      	ldr	r2, [sp, #12]
    14c2:	4613      	mov	r3, r2
    14c4:	009b      	lsls	r3, r3, #2
    14c6:	4413      	add	r3, r2
    14c8:	009b      	lsls	r3, r3, #2
    14ca:	440b      	add	r3, r1
    14cc:	332c      	adds	r3, #44	; 0x2c
    14ce:	681a      	ldr	r2, [r3, #0]
    14d0:	4961      	ldr	r1, [pc, #388]	; (1658 <Clock_Ip_InitClock+0x584>)
    14d2:	4613      	mov	r3, r2
    14d4:	00db      	lsls	r3, r3, #3
    14d6:	4413      	add	r3, r2
    14d8:	440b      	add	r3, r1
    14da:	3301      	adds	r3, #1
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	461a      	mov	r2, r3
    14e0:	4b64      	ldr	r3, [pc, #400]	; (1674 <Clock_Ip_InitClock+0x5a0>)
    14e2:	5c9b      	ldrb	r3, [r3, r2]
    14e4:	9302      	str	r3, [sp, #8]
    14e6:	4964      	ldr	r1, [pc, #400]	; (1678 <Clock_Ip_InitClock+0x5a4>)
    14e8:	9a02      	ldr	r2, [sp, #8]
    14ea:	4613      	mov	r3, r2
    14ec:	009b      	lsls	r3, r3, #2
    14ee:	4413      	add	r3, r2
    14f0:	009b      	lsls	r3, r3, #2
    14f2:	440b      	add	r3, r1
    14f4:	3308      	adds	r3, #8
    14f6:	6819      	ldr	r1, [r3, #0]
    14f8:	9a03      	ldr	r2, [sp, #12]
    14fa:	4613      	mov	r3, r2
    14fc:	009b      	lsls	r3, r3, #2
    14fe:	4413      	add	r3, r2
    1500:	009b      	lsls	r3, r3, #2
    1502:	3328      	adds	r3, #40	; 0x28
    1504:	9a01      	ldr	r2, [sp, #4]
    1506:	4413      	add	r3, r2
    1508:	3304      	adds	r3, #4
    150a:	4618      	mov	r0, r3
    150c:	4788      	blx	r1
    150e:	9b03      	ldr	r3, [sp, #12]
    1510:	3301      	adds	r3, #1
    1512:	9303      	str	r3, [sp, #12]
    1514:	9b01      	ldr	r3, [sp, #4]
    1516:	7a5b      	ldrb	r3, [r3, #9]
    1518:	461a      	mov	r2, r3
    151a:	9b03      	ldr	r3, [sp, #12]
    151c:	4293      	cmp	r3, r2
    151e:	d3ce      	bcc.n	14be <Clock_Ip_InitClock+0x3ea>
    1520:	2300      	movs	r3, #0
    1522:	9303      	str	r3, [sp, #12]
    1524:	e029      	b.n	157a <Clock_Ip_InitClock+0x4a6>
    1526:	9901      	ldr	r1, [sp, #4]
    1528:	9a03      	ldr	r2, [sp, #12]
    152a:	4613      	mov	r3, r2
    152c:	009b      	lsls	r3, r3, #2
    152e:	4413      	add	r3, r2
    1530:	00db      	lsls	r3, r3, #3
    1532:	440b      	add	r3, r1
    1534:	3340      	adds	r3, #64	; 0x40
    1536:	681a      	ldr	r2, [r3, #0]
    1538:	4947      	ldr	r1, [pc, #284]	; (1658 <Clock_Ip_InitClock+0x584>)
    153a:	4613      	mov	r3, r2
    153c:	00db      	lsls	r3, r3, #3
    153e:	4413      	add	r3, r2
    1540:	440b      	add	r3, r1
    1542:	3301      	adds	r3, #1
    1544:	781b      	ldrb	r3, [r3, #0]
    1546:	461a      	mov	r2, r3
    1548:	4b46      	ldr	r3, [pc, #280]	; (1664 <Clock_Ip_InitClock+0x590>)
    154a:	5c9b      	ldrb	r3, [r3, r2]
    154c:	9302      	str	r3, [sp, #8]
    154e:	4946      	ldr	r1, [pc, #280]	; (1668 <Clock_Ip_InitClock+0x594>)
    1550:	9a02      	ldr	r2, [sp, #8]
    1552:	4613      	mov	r3, r2
    1554:	009b      	lsls	r3, r3, #2
    1556:	4413      	add	r3, r2
    1558:	009b      	lsls	r3, r3, #2
    155a:	440b      	add	r3, r1
    155c:	330c      	adds	r3, #12
    155e:	6819      	ldr	r1, [r3, #0]
    1560:	9a03      	ldr	r2, [sp, #12]
    1562:	4613      	mov	r3, r2
    1564:	009b      	lsls	r3, r3, #2
    1566:	4413      	add	r3, r2
    1568:	00db      	lsls	r3, r3, #3
    156a:	3340      	adds	r3, #64	; 0x40
    156c:	9a01      	ldr	r2, [sp, #4]
    156e:	4413      	add	r3, r2
    1570:	4618      	mov	r0, r3
    1572:	4788      	blx	r1
    1574:	9b03      	ldr	r3, [sp, #12]
    1576:	3301      	adds	r3, #1
    1578:	9303      	str	r3, [sp, #12]
    157a:	9b01      	ldr	r3, [sp, #4]
    157c:	7a9b      	ldrb	r3, [r3, #10]
    157e:	461a      	mov	r2, r3
    1580:	9b03      	ldr	r3, [sp, #12]
    1582:	4293      	cmp	r3, r2
    1584:	d3cf      	bcc.n	1526 <Clock_Ip_InitClock+0x452>
    1586:	2300      	movs	r3, #0
    1588:	9303      	str	r3, [sp, #12]
    158a:	e025      	b.n	15d8 <Clock_Ip_InitClock+0x504>
    158c:	9a01      	ldr	r2, [sp, #4]
    158e:	9b03      	ldr	r3, [sp, #12]
    1590:	3324      	adds	r3, #36	; 0x24
    1592:	011b      	lsls	r3, r3, #4
    1594:	4413      	add	r3, r2
    1596:	3304      	adds	r3, #4
    1598:	681a      	ldr	r2, [r3, #0]
    159a:	492f      	ldr	r1, [pc, #188]	; (1658 <Clock_Ip_InitClock+0x584>)
    159c:	4613      	mov	r3, r2
    159e:	00db      	lsls	r3, r3, #3
    15a0:	4413      	add	r3, r2
    15a2:	440b      	add	r3, r1
    15a4:	3301      	adds	r3, #1
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	461a      	mov	r2, r3
    15aa:	4b34      	ldr	r3, [pc, #208]	; (167c <Clock_Ip_InitClock+0x5a8>)
    15ac:	5c9b      	ldrb	r3, [r3, r2]
    15ae:	9302      	str	r3, [sp, #8]
    15b0:	4933      	ldr	r1, [pc, #204]	; (1680 <Clock_Ip_InitClock+0x5ac>)
    15b2:	9a02      	ldr	r2, [sp, #8]
    15b4:	4613      	mov	r3, r2
    15b6:	005b      	lsls	r3, r3, #1
    15b8:	4413      	add	r3, r2
    15ba:	009b      	lsls	r3, r3, #2
    15bc:	440b      	add	r3, r1
    15be:	3304      	adds	r3, #4
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	9a03      	ldr	r2, [sp, #12]
    15c4:	3224      	adds	r2, #36	; 0x24
    15c6:	0112      	lsls	r2, r2, #4
    15c8:	9901      	ldr	r1, [sp, #4]
    15ca:	440a      	add	r2, r1
    15cc:	3204      	adds	r2, #4
    15ce:	4610      	mov	r0, r2
    15d0:	4798      	blx	r3
    15d2:	9b03      	ldr	r3, [sp, #12]
    15d4:	3301      	adds	r3, #1
    15d6:	9303      	str	r3, [sp, #12]
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	7b9b      	ldrb	r3, [r3, #14]
    15dc:	461a      	mov	r2, r3
    15de:	9b03      	ldr	r3, [sp, #12]
    15e0:	4293      	cmp	r3, r2
    15e2:	d3d3      	bcc.n	158c <Clock_Ip_InitClock+0x4b8>
    15e4:	4b27      	ldr	r3, [pc, #156]	; (1684 <Clock_Ip_InitClock+0x5b0>)
    15e6:	2200      	movs	r2, #0
    15e8:	701a      	strb	r2, [r3, #0]
    15ea:	4b26      	ldr	r3, [pc, #152]	; (1684 <Clock_Ip_InitClock+0x5b0>)
    15ec:	2200      	movs	r2, #0
    15ee:	705a      	strb	r2, [r3, #1]
    15f0:	4b24      	ldr	r3, [pc, #144]	; (1684 <Clock_Ip_InitClock+0x5b0>)
    15f2:	2201      	movs	r2, #1
    15f4:	709a      	strb	r2, [r3, #2]
    15f6:	4b23      	ldr	r3, [pc, #140]	; (1684 <Clock_Ip_InitClock+0x5b0>)
    15f8:	2200      	movs	r2, #0
    15fa:	70da      	strb	r2, [r3, #3]
    15fc:	f000 fa9c 	bl	1b38 <Clock_Ip_SetWaitStates>
    1600:	2300      	movs	r3, #0
    1602:	9303      	str	r3, [sp, #12]
    1604:	e04c      	b.n	16a0 <Clock_Ip_InitClock+0x5cc>
    1606:	9a01      	ldr	r2, [sp, #4]
    1608:	9b03      	ldr	r3, [sp, #12]
    160a:	330d      	adds	r3, #13
    160c:	00db      	lsls	r3, r3, #3
    160e:	4413      	add	r3, r2
    1610:	685b      	ldr	r3, [r3, #4]
    1612:	4a1d      	ldr	r2, [pc, #116]	; (1688 <Clock_Ip_InitClock+0x5b4>)
    1614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1618:	2b03      	cmp	r3, #3
    161a:	d03b      	beq.n	1694 <Clock_Ip_InitClock+0x5c0>
    161c:	9b01      	ldr	r3, [sp, #4]
    161e:	9a03      	ldr	r2, [sp, #12]
    1620:	320d      	adds	r2, #13
    1622:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1626:	490c      	ldr	r1, [pc, #48]	; (1658 <Clock_Ip_InitClock+0x584>)
    1628:	4613      	mov	r3, r2
    162a:	00db      	lsls	r3, r3, #3
    162c:	4413      	add	r3, r2
    162e:	440b      	add	r3, r1
    1630:	3301      	adds	r3, #1
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	461a      	mov	r2, r3
    1636:	4b15      	ldr	r3, [pc, #84]	; (168c <Clock_Ip_InitClock+0x5b8>)
    1638:	5c9b      	ldrb	r3, [r3, r2]
    163a:	9302      	str	r3, [sp, #8]
    163c:	4a14      	ldr	r2, [pc, #80]	; (1690 <Clock_Ip_InitClock+0x5bc>)
    163e:	9b02      	ldr	r3, [sp, #8]
    1640:	00db      	lsls	r3, r3, #3
    1642:	4413      	add	r3, r2
    1644:	685b      	ldr	r3, [r3, #4]
    1646:	9a03      	ldr	r2, [sp, #12]
    1648:	320d      	adds	r2, #13
    164a:	00d2      	lsls	r2, r2, #3
    164c:	9901      	ldr	r1, [sp, #4]
    164e:	440a      	add	r2, r1
    1650:	4610      	mov	r0, r2
    1652:	4798      	blx	r3
    1654:	e021      	b.n	169a <Clock_Ip_InitClock+0x5c6>
    1656:	bf00      	nop
    1658:	0000b660 	.word	0x0000b660
    165c:	0000b5d0 	.word	0x0000b5d0
    1660:	0000bbac 	.word	0x0000bbac
    1664:	0000b620 	.word	0x0000b620
    1668:	0000bc6c 	.word	0x0000bc6c
    166c:	0000b650 	.word	0x0000b650
    1670:	0000bc5c 	.word	0x0000bc5c
    1674:	0000b5e0 	.word	0x0000b5e0
    1678:	0000bbb4 	.word	0x0000bbb4
    167c:	0000b610 	.word	0x0000b610
    1680:	0000bbdc 	.word	0x0000bbdc
    1684:	1fff8b4c 	.word	0x1fff8b4c
    1688:	0000baac 	.word	0x0000baac
    168c:	0000b630 	.word	0x0000b630
    1690:	0000bc98 	.word	0x0000bc98
    1694:	4b3a      	ldr	r3, [pc, #232]	; (1780 <Clock_Ip_InitClock+0x6ac>)
    1696:	2201      	movs	r2, #1
    1698:	701a      	strb	r2, [r3, #0]
    169a:	9b03      	ldr	r3, [sp, #12]
    169c:	3301      	adds	r3, #1
    169e:	9303      	str	r3, [sp, #12]
    16a0:	9b01      	ldr	r3, [sp, #4]
    16a2:	7adb      	ldrb	r3, [r3, #11]
    16a4:	461a      	mov	r2, r3
    16a6:	9b03      	ldr	r3, [sp, #12]
    16a8:	4293      	cmp	r3, r2
    16aa:	d3ac      	bcc.n	1606 <Clock_Ip_InitClock+0x532>
    16ac:	4b34      	ldr	r3, [pc, #208]	; (1780 <Clock_Ip_InitClock+0x6ac>)
    16ae:	781b      	ldrb	r3, [r3, #0]
    16b0:	f083 0301 	eor.w	r3, r3, #1
    16b4:	b2db      	uxtb	r3, r3
    16b6:	2b00      	cmp	r3, #0
    16b8:	d05e      	beq.n	1778 <Clock_Ip_InitClock+0x6a4>
    16ba:	2300      	movs	r3, #0
    16bc:	9303      	str	r3, [sp, #12]
    16be:	e01f      	b.n	1700 <Clock_Ip_InitClock+0x62c>
    16c0:	9a01      	ldr	r2, [sp, #4]
    16c2:	9b03      	ldr	r3, [sp, #12]
    16c4:	334e      	adds	r3, #78	; 0x4e
    16c6:	00db      	lsls	r3, r3, #3
    16c8:	4413      	add	r3, r2
    16ca:	685a      	ldr	r2, [r3, #4]
    16cc:	492d      	ldr	r1, [pc, #180]	; (1784 <Clock_Ip_InitClock+0x6b0>)
    16ce:	4613      	mov	r3, r2
    16d0:	00db      	lsls	r3, r3, #3
    16d2:	4413      	add	r3, r2
    16d4:	440b      	add	r3, r1
    16d6:	3301      	adds	r3, #1
    16d8:	781b      	ldrb	r3, [r3, #0]
    16da:	461a      	mov	r2, r3
    16dc:	4b2a      	ldr	r3, [pc, #168]	; (1788 <Clock_Ip_InitClock+0x6b4>)
    16de:	5c9b      	ldrb	r3, [r3, r2]
    16e0:	9302      	str	r3, [sp, #8]
    16e2:	4a2a      	ldr	r2, [pc, #168]	; (178c <Clock_Ip_InitClock+0x6b8>)
    16e4:	9b02      	ldr	r3, [sp, #8]
    16e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    16ea:	9a03      	ldr	r2, [sp, #12]
    16ec:	324e      	adds	r2, #78	; 0x4e
    16ee:	00d2      	lsls	r2, r2, #3
    16f0:	9901      	ldr	r1, [sp, #4]
    16f2:	440a      	add	r2, r1
    16f4:	3204      	adds	r2, #4
    16f6:	4610      	mov	r0, r2
    16f8:	4798      	blx	r3
    16fa:	9b03      	ldr	r3, [sp, #12]
    16fc:	3301      	adds	r3, #1
    16fe:	9303      	str	r3, [sp, #12]
    1700:	9b01      	ldr	r3, [sp, #4]
    1702:	7c1b      	ldrb	r3, [r3, #16]
    1704:	461a      	mov	r2, r3
    1706:	9b03      	ldr	r3, [sp, #12]
    1708:	4293      	cmp	r3, r2
    170a:	d3d9      	bcc.n	16c0 <Clock_Ip_InitClock+0x5ec>
    170c:	2300      	movs	r3, #0
    170e:	9303      	str	r3, [sp, #12]
    1710:	e028      	b.n	1764 <Clock_Ip_InitClock+0x690>
    1712:	9901      	ldr	r1, [sp, #4]
    1714:	9a03      	ldr	r2, [sp, #12]
    1716:	4613      	mov	r3, r2
    1718:	009b      	lsls	r3, r3, #2
    171a:	4413      	add	r3, r2
    171c:	009b      	lsls	r3, r3, #2
    171e:	440b      	add	r3, r1
    1720:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1724:	681a      	ldr	r2, [r3, #0]
    1726:	4917      	ldr	r1, [pc, #92]	; (1784 <Clock_Ip_InitClock+0x6b0>)
    1728:	4613      	mov	r3, r2
    172a:	00db      	lsls	r3, r3, #3
    172c:	4413      	add	r3, r2
    172e:	440b      	add	r3, r1
    1730:	3301      	adds	r3, #1
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	461a      	mov	r2, r3
    1736:	4b16      	ldr	r3, [pc, #88]	; (1790 <Clock_Ip_InitClock+0x6bc>)
    1738:	5c9b      	ldrb	r3, [r3, r2]
    173a:	9302      	str	r3, [sp, #8]
    173c:	4a15      	ldr	r2, [pc, #84]	; (1794 <Clock_Ip_InitClock+0x6c0>)
    173e:	9b02      	ldr	r3, [sp, #8]
    1740:	011b      	lsls	r3, r3, #4
    1742:	4413      	add	r3, r2
    1744:	330c      	adds	r3, #12
    1746:	6819      	ldr	r1, [r3, #0]
    1748:	9a03      	ldr	r2, [sp, #12]
    174a:	4613      	mov	r3, r2
    174c:	009b      	lsls	r3, r3, #2
    174e:	4413      	add	r3, r2
    1750:	009b      	lsls	r3, r3, #2
    1752:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1756:	9a01      	ldr	r2, [sp, #4]
    1758:	4413      	add	r3, r2
    175a:	4618      	mov	r0, r3
    175c:	4788      	blx	r1
    175e:	9b03      	ldr	r3, [sp, #12]
    1760:	3301      	adds	r3, #1
    1762:	9303      	str	r3, [sp, #12]
    1764:	9b01      	ldr	r3, [sp, #4]
    1766:	7c9b      	ldrb	r3, [r3, #18]
    1768:	461a      	mov	r2, r3
    176a:	9b03      	ldr	r3, [sp, #12]
    176c:	4293      	cmp	r3, r2
    176e:	d3d0      	bcc.n	1712 <Clock_Ip_InitClock+0x63e>
    1770:	2104      	movs	r1, #4
    1772:	9801      	ldr	r0, [sp, #4]
    1774:	f002 ff48 	bl	4608 <Clock_Ip_Command>
    1778:	bf00      	nop
    177a:	b004      	add	sp, #16
    177c:	bd10      	pop	{r4, pc}
    177e:	bf00      	nop
    1780:	1fff8b4c 	.word	0x1fff8b4c
    1784:	0000b660 	.word	0x0000b660
    1788:	0000b600 	.word	0x0000b600
    178c:	0000bbe8 	.word	0x0000bbe8
    1790:	0000b650 	.word	0x0000b650
    1794:	0000bc5c 	.word	0x0000bc5c

00001798 <Clock_Ip_GetPllStatus>:
    1798:	b500      	push	{lr}
    179a:	b087      	sub	sp, #28
    179c:	2302      	movs	r3, #2
    179e:	9305      	str	r3, [sp, #20]
    17a0:	2300      	movs	r3, #0
    17a2:	9304      	str	r3, [sp, #16]
    17a4:	e02c      	b.n	1800 <Clock_Ip_GetPllStatus+0x68>
    17a6:	4a36      	ldr	r2, [pc, #216]	; (1880 <Clock_Ip_GetPllStatus+0xe8>)
    17a8:	9b04      	ldr	r3, [sp, #16]
    17aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    17ae:	4935      	ldr	r1, [pc, #212]	; (1884 <Clock_Ip_GetPllStatus+0xec>)
    17b0:	4613      	mov	r3, r2
    17b2:	00db      	lsls	r3, r3, #3
    17b4:	4413      	add	r3, r2
    17b6:	440b      	add	r3, r1
    17b8:	3301      	adds	r3, #1
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	461a      	mov	r2, r3
    17be:	4b32      	ldr	r3, [pc, #200]	; (1888 <Clock_Ip_GetPllStatus+0xf0>)
    17c0:	5c9b      	ldrb	r3, [r3, r2]
    17c2:	9303      	str	r3, [sp, #12]
    17c4:	4931      	ldr	r1, [pc, #196]	; (188c <Clock_Ip_GetPllStatus+0xf4>)
    17c6:	9a03      	ldr	r2, [sp, #12]
    17c8:	4613      	mov	r3, r2
    17ca:	009b      	lsls	r3, r3, #2
    17cc:	4413      	add	r3, r2
    17ce:	009b      	lsls	r3, r3, #2
    17d0:	440b      	add	r3, r1
    17d2:	3308      	adds	r3, #8
    17d4:	681b      	ldr	r3, [r3, #0]
    17d6:	492a      	ldr	r1, [pc, #168]	; (1880 <Clock_Ip_GetPllStatus+0xe8>)
    17d8:	9a04      	ldr	r2, [sp, #16]
    17da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    17de:	4610      	mov	r0, r2
    17e0:	4798      	blx	r3
    17e2:	9002      	str	r0, [sp, #8]
    17e4:	9b02      	ldr	r3, [sp, #8]
    17e6:	2b01      	cmp	r3, #1
    17e8:	d102      	bne.n	17f0 <Clock_Ip_GetPllStatus+0x58>
    17ea:	2301      	movs	r3, #1
    17ec:	9305      	str	r3, [sp, #20]
    17ee:	e00d      	b.n	180c <Clock_Ip_GetPllStatus+0x74>
    17f0:	9b02      	ldr	r3, [sp, #8]
    17f2:	2b02      	cmp	r3, #2
    17f4:	d101      	bne.n	17fa <Clock_Ip_GetPllStatus+0x62>
    17f6:	2300      	movs	r3, #0
    17f8:	9305      	str	r3, [sp, #20]
    17fa:	9b04      	ldr	r3, [sp, #16]
    17fc:	3301      	adds	r3, #1
    17fe:	9304      	str	r3, [sp, #16]
    1800:	4b23      	ldr	r3, [pc, #140]	; (1890 <Clock_Ip_GetPllStatus+0xf8>)
    1802:	789b      	ldrb	r3, [r3, #2]
    1804:	461a      	mov	r2, r3
    1806:	9b04      	ldr	r3, [sp, #16]
    1808:	4293      	cmp	r3, r2
    180a:	d3cc      	bcc.n	17a6 <Clock_Ip_GetPllStatus+0xe>
    180c:	9b05      	ldr	r3, [sp, #20]
    180e:	2b00      	cmp	r3, #0
    1810:	d130      	bne.n	1874 <Clock_Ip_GetPllStatus+0xdc>
    1812:	2300      	movs	r3, #0
    1814:	9304      	str	r3, [sp, #16]
    1816:	e027      	b.n	1868 <Clock_Ip_GetPllStatus+0xd0>
    1818:	4a1e      	ldr	r2, [pc, #120]	; (1894 <Clock_Ip_GetPllStatus+0xfc>)
    181a:	9b04      	ldr	r3, [sp, #16]
    181c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1820:	4918      	ldr	r1, [pc, #96]	; (1884 <Clock_Ip_GetPllStatus+0xec>)
    1822:	4613      	mov	r3, r2
    1824:	00db      	lsls	r3, r3, #3
    1826:	4413      	add	r3, r2
    1828:	440b      	add	r3, r1
    182a:	3301      	adds	r3, #1
    182c:	781b      	ldrb	r3, [r3, #0]
    182e:	461a      	mov	r2, r3
    1830:	4b19      	ldr	r3, [pc, #100]	; (1898 <Clock_Ip_GetPllStatus+0x100>)
    1832:	5c9b      	ldrb	r3, [r3, r2]
    1834:	9303      	str	r3, [sp, #12]
    1836:	4919      	ldr	r1, [pc, #100]	; (189c <Clock_Ip_GetPllStatus+0x104>)
    1838:	9a03      	ldr	r2, [sp, #12]
    183a:	4613      	mov	r3, r2
    183c:	005b      	lsls	r3, r3, #1
    183e:	4413      	add	r3, r2
    1840:	009b      	lsls	r3, r3, #2
    1842:	440b      	add	r3, r1
    1844:	3308      	adds	r3, #8
    1846:	681b      	ldr	r3, [r3, #0]
    1848:	4912      	ldr	r1, [pc, #72]	; (1894 <Clock_Ip_GetPllStatus+0xfc>)
    184a:	9a04      	ldr	r2, [sp, #16]
    184c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1850:	4610      	mov	r0, r2
    1852:	4798      	blx	r3
    1854:	9001      	str	r0, [sp, #4]
    1856:	9b01      	ldr	r3, [sp, #4]
    1858:	2b01      	cmp	r3, #1
    185a:	d102      	bne.n	1862 <Clock_Ip_GetPllStatus+0xca>
    185c:	2301      	movs	r3, #1
    185e:	9305      	str	r3, [sp, #20]
    1860:	e008      	b.n	1874 <Clock_Ip_GetPllStatus+0xdc>
    1862:	9b04      	ldr	r3, [sp, #16]
    1864:	3301      	adds	r3, #1
    1866:	9304      	str	r3, [sp, #16]
    1868:	4b09      	ldr	r3, [pc, #36]	; (1890 <Clock_Ip_GetPllStatus+0xf8>)
    186a:	78db      	ldrb	r3, [r3, #3]
    186c:	461a      	mov	r2, r3
    186e:	9b04      	ldr	r3, [sp, #16]
    1870:	4293      	cmp	r3, r2
    1872:	d3d1      	bcc.n	1818 <Clock_Ip_GetPllStatus+0x80>
    1874:	9b05      	ldr	r3, [sp, #20]
    1876:	4618      	mov	r0, r3
    1878:	b007      	add	sp, #28
    187a:	f85d fb04 	ldr.w	pc, [sp], #4
    187e:	bf00      	nop
    1880:	0000bb68 	.word	0x0000bb68
    1884:	0000b660 	.word	0x0000b660
    1888:	0000b620 	.word	0x0000b620
    188c:	0000bc6c 	.word	0x0000bc6c
    1890:	1fff8b4c 	.word	0x1fff8b4c
    1894:	0000bb6c 	.word	0x0000bb6c
    1898:	0000b610 	.word	0x0000b610
    189c:	0000bbdc 	.word	0x0000bbdc

000018a0 <Clock_Ip_DistributePll>:
    18a0:	b500      	push	{lr}
    18a2:	b083      	sub	sp, #12
    18a4:	4b55      	ldr	r3, [pc, #340]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	2b00      	cmp	r3, #0
    18aa:	f000 80a2 	beq.w	19f2 <Clock_Ip_DistributePll+0x152>
    18ae:	2300      	movs	r3, #0
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	e02c      	b.n	190e <Clock_Ip_DistributePll+0x6e>
    18b4:	4b51      	ldr	r3, [pc, #324]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    18b6:	681a      	ldr	r2, [r3, #0]
    18b8:	9b01      	ldr	r3, [sp, #4]
    18ba:	330d      	adds	r3, #13
    18bc:	00db      	lsls	r3, r3, #3
    18be:	4413      	add	r3, r2
    18c0:	685b      	ldr	r3, [r3, #4]
    18c2:	4a4f      	ldr	r2, [pc, #316]	; (1a00 <Clock_Ip_DistributePll+0x160>)
    18c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18c8:	2b03      	cmp	r3, #3
    18ca:	d11d      	bne.n	1908 <Clock_Ip_DistributePll+0x68>
    18cc:	4b4b      	ldr	r3, [pc, #300]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	9a01      	ldr	r2, [sp, #4]
    18d2:	320d      	adds	r2, #13
    18d4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    18d8:	494a      	ldr	r1, [pc, #296]	; (1a04 <Clock_Ip_DistributePll+0x164>)
    18da:	4613      	mov	r3, r2
    18dc:	00db      	lsls	r3, r3, #3
    18de:	4413      	add	r3, r2
    18e0:	440b      	add	r3, r1
    18e2:	3301      	adds	r3, #1
    18e4:	781b      	ldrb	r3, [r3, #0]
    18e6:	461a      	mov	r2, r3
    18e8:	4b47      	ldr	r3, [pc, #284]	; (1a08 <Clock_Ip_DistributePll+0x168>)
    18ea:	5c9b      	ldrb	r3, [r3, r2]
    18ec:	9300      	str	r3, [sp, #0]
    18ee:	4a47      	ldr	r2, [pc, #284]	; (1a0c <Clock_Ip_DistributePll+0x16c>)
    18f0:	9b00      	ldr	r3, [sp, #0]
    18f2:	00db      	lsls	r3, r3, #3
    18f4:	4413      	add	r3, r2
    18f6:	685b      	ldr	r3, [r3, #4]
    18f8:	4a40      	ldr	r2, [pc, #256]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    18fa:	6811      	ldr	r1, [r2, #0]
    18fc:	9a01      	ldr	r2, [sp, #4]
    18fe:	320d      	adds	r2, #13
    1900:	00d2      	lsls	r2, r2, #3
    1902:	440a      	add	r2, r1
    1904:	4610      	mov	r0, r2
    1906:	4798      	blx	r3
    1908:	9b01      	ldr	r3, [sp, #4]
    190a:	3301      	adds	r3, #1
    190c:	9301      	str	r3, [sp, #4]
    190e:	4b3b      	ldr	r3, [pc, #236]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    1910:	681b      	ldr	r3, [r3, #0]
    1912:	7adb      	ldrb	r3, [r3, #11]
    1914:	461a      	mov	r2, r3
    1916:	9b01      	ldr	r3, [sp, #4]
    1918:	4293      	cmp	r3, r2
    191a:	d3cb      	bcc.n	18b4 <Clock_Ip_DistributePll+0x14>
    191c:	4b3c      	ldr	r3, [pc, #240]	; (1a10 <Clock_Ip_DistributePll+0x170>)
    191e:	781b      	ldrb	r3, [r3, #0]
    1920:	2b00      	cmp	r3, #0
    1922:	d066      	beq.n	19f2 <Clock_Ip_DistributePll+0x152>
    1924:	2300      	movs	r3, #0
    1926:	9301      	str	r3, [sp, #4]
    1928:	e021      	b.n	196e <Clock_Ip_DistributePll+0xce>
    192a:	4b34      	ldr	r3, [pc, #208]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    192c:	681a      	ldr	r2, [r3, #0]
    192e:	9b01      	ldr	r3, [sp, #4]
    1930:	334e      	adds	r3, #78	; 0x4e
    1932:	00db      	lsls	r3, r3, #3
    1934:	4413      	add	r3, r2
    1936:	685a      	ldr	r2, [r3, #4]
    1938:	4932      	ldr	r1, [pc, #200]	; (1a04 <Clock_Ip_DistributePll+0x164>)
    193a:	4613      	mov	r3, r2
    193c:	00db      	lsls	r3, r3, #3
    193e:	4413      	add	r3, r2
    1940:	440b      	add	r3, r1
    1942:	3301      	adds	r3, #1
    1944:	781b      	ldrb	r3, [r3, #0]
    1946:	461a      	mov	r2, r3
    1948:	4b32      	ldr	r3, [pc, #200]	; (1a14 <Clock_Ip_DistributePll+0x174>)
    194a:	5c9b      	ldrb	r3, [r3, r2]
    194c:	9300      	str	r3, [sp, #0]
    194e:	4a32      	ldr	r2, [pc, #200]	; (1a18 <Clock_Ip_DistributePll+0x178>)
    1950:	9b00      	ldr	r3, [sp, #0]
    1952:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1956:	4a29      	ldr	r2, [pc, #164]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    1958:	6811      	ldr	r1, [r2, #0]
    195a:	9a01      	ldr	r2, [sp, #4]
    195c:	324e      	adds	r2, #78	; 0x4e
    195e:	00d2      	lsls	r2, r2, #3
    1960:	440a      	add	r2, r1
    1962:	3204      	adds	r2, #4
    1964:	4610      	mov	r0, r2
    1966:	4798      	blx	r3
    1968:	9b01      	ldr	r3, [sp, #4]
    196a:	3301      	adds	r3, #1
    196c:	9301      	str	r3, [sp, #4]
    196e:	4b23      	ldr	r3, [pc, #140]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	7c1b      	ldrb	r3, [r3, #16]
    1974:	461a      	mov	r2, r3
    1976:	9b01      	ldr	r3, [sp, #4]
    1978:	4293      	cmp	r3, r2
    197a:	d3d6      	bcc.n	192a <Clock_Ip_DistributePll+0x8a>
    197c:	2300      	movs	r3, #0
    197e:	9301      	str	r3, [sp, #4]
    1980:	e02a      	b.n	19d8 <Clock_Ip_DistributePll+0x138>
    1982:	4b1e      	ldr	r3, [pc, #120]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    1984:	6819      	ldr	r1, [r3, #0]
    1986:	9a01      	ldr	r2, [sp, #4]
    1988:	4613      	mov	r3, r2
    198a:	009b      	lsls	r3, r3, #2
    198c:	4413      	add	r3, r2
    198e:	009b      	lsls	r3, r3, #2
    1990:	440b      	add	r3, r1
    1992:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1996:	681a      	ldr	r2, [r3, #0]
    1998:	491a      	ldr	r1, [pc, #104]	; (1a04 <Clock_Ip_DistributePll+0x164>)
    199a:	4613      	mov	r3, r2
    199c:	00db      	lsls	r3, r3, #3
    199e:	4413      	add	r3, r2
    19a0:	440b      	add	r3, r1
    19a2:	3301      	adds	r3, #1
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	461a      	mov	r2, r3
    19a8:	4b1c      	ldr	r3, [pc, #112]	; (1a1c <Clock_Ip_DistributePll+0x17c>)
    19aa:	5c9b      	ldrb	r3, [r3, r2]
    19ac:	9300      	str	r3, [sp, #0]
    19ae:	4a1c      	ldr	r2, [pc, #112]	; (1a20 <Clock_Ip_DistributePll+0x180>)
    19b0:	9b00      	ldr	r3, [sp, #0]
    19b2:	011b      	lsls	r3, r3, #4
    19b4:	4413      	add	r3, r2
    19b6:	330c      	adds	r3, #12
    19b8:	6819      	ldr	r1, [r3, #0]
    19ba:	4b10      	ldr	r3, [pc, #64]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    19bc:	6818      	ldr	r0, [r3, #0]
    19be:	9a01      	ldr	r2, [sp, #4]
    19c0:	4613      	mov	r3, r2
    19c2:	009b      	lsls	r3, r3, #2
    19c4:	4413      	add	r3, r2
    19c6:	009b      	lsls	r3, r3, #2
    19c8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    19cc:	4403      	add	r3, r0
    19ce:	4618      	mov	r0, r3
    19d0:	4788      	blx	r1
    19d2:	9b01      	ldr	r3, [sp, #4]
    19d4:	3301      	adds	r3, #1
    19d6:	9301      	str	r3, [sp, #4]
    19d8:	4b08      	ldr	r3, [pc, #32]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	7c9b      	ldrb	r3, [r3, #18]
    19de:	461a      	mov	r2, r3
    19e0:	9b01      	ldr	r3, [sp, #4]
    19e2:	4293      	cmp	r3, r2
    19e4:	d3cd      	bcc.n	1982 <Clock_Ip_DistributePll+0xe2>
    19e6:	4b05      	ldr	r3, [pc, #20]	; (19fc <Clock_Ip_DistributePll+0x15c>)
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	2104      	movs	r1, #4
    19ec:	4618      	mov	r0, r3
    19ee:	f002 fe0b 	bl	4608 <Clock_Ip_Command>
    19f2:	bf00      	nop
    19f4:	b003      	add	sp, #12
    19f6:	f85d fb04 	ldr.w	pc, [sp], #4
    19fa:	bf00      	nop
    19fc:	1fff8b44 	.word	0x1fff8b44
    1a00:	0000baac 	.word	0x0000baac
    1a04:	0000b660 	.word	0x0000b660
    1a08:	0000b630 	.word	0x0000b630
    1a0c:	0000bc98 	.word	0x0000bc98
    1a10:	1fff8b4c 	.word	0x1fff8b4c
    1a14:	0000b600 	.word	0x0000b600
    1a18:	0000bbe8 	.word	0x0000bbe8
    1a1c:	0000b650 	.word	0x0000b650
    1a20:	0000bc5c 	.word	0x0000bc5c

00001a24 <Clock_Ip_DisableClockMonitor>:
    1a24:	b500      	push	{lr}
    1a26:	b085      	sub	sp, #20
    1a28:	9001      	str	r0, [sp, #4]
    1a2a:	490c      	ldr	r1, [pc, #48]	; (1a5c <Clock_Ip_DisableClockMonitor+0x38>)
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	4613      	mov	r3, r2
    1a30:	00db      	lsls	r3, r3, #3
    1a32:	4413      	add	r3, r2
    1a34:	440b      	add	r3, r1
    1a36:	3301      	adds	r3, #1
    1a38:	781b      	ldrb	r3, [r3, #0]
    1a3a:	461a      	mov	r2, r3
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <Clock_Ip_DisableClockMonitor+0x3c>)
    1a3e:	5c9b      	ldrb	r3, [r3, r2]
    1a40:	9303      	str	r3, [sp, #12]
    1a42:	4a08      	ldr	r2, [pc, #32]	; (1a64 <Clock_Ip_DisableClockMonitor+0x40>)
    1a44:	9b03      	ldr	r3, [sp, #12]
    1a46:	011b      	lsls	r3, r3, #4
    1a48:	4413      	add	r3, r2
    1a4a:	3308      	adds	r3, #8
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	9801      	ldr	r0, [sp, #4]
    1a50:	4798      	blx	r3
    1a52:	bf00      	nop
    1a54:	b005      	add	sp, #20
    1a56:	f85d fb04 	ldr.w	pc, [sp], #4
    1a5a:	bf00      	nop
    1a5c:	0000b660 	.word	0x0000b660
    1a60:	0000b650 	.word	0x0000b650
    1a64:	0000bc5c 	.word	0x0000bc5c

00001a68 <Clock_Ip_InstallNotificationsCallback>:
    1a68:	b082      	sub	sp, #8
    1a6a:	9001      	str	r0, [sp, #4]
    1a6c:	4a02      	ldr	r2, [pc, #8]	; (1a78 <Clock_Ip_InstallNotificationsCallback+0x10>)
    1a6e:	9b01      	ldr	r3, [sp, #4]
    1a70:	6013      	str	r3, [r2, #0]
    1a72:	bf00      	nop
    1a74:	b002      	add	sp, #8
    1a76:	4770      	bx	lr
    1a78:	1fff8b14 	.word	0x1fff8b14

00001a7c <Clock_Ip_DisableModuleClock>:
    1a7c:	b500      	push	{lr}
    1a7e:	b085      	sub	sp, #20
    1a80:	9001      	str	r0, [sp, #4]
    1a82:	490c      	ldr	r1, [pc, #48]	; (1ab4 <Clock_Ip_DisableModuleClock+0x38>)
    1a84:	9a01      	ldr	r2, [sp, #4]
    1a86:	4613      	mov	r3, r2
    1a88:	00db      	lsls	r3, r3, #3
    1a8a:	4413      	add	r3, r2
    1a8c:	440b      	add	r3, r1
    1a8e:	3301      	adds	r3, #1
    1a90:	781b      	ldrb	r3, [r3, #0]
    1a92:	461a      	mov	r2, r3
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <Clock_Ip_DisableModuleClock+0x3c>)
    1a96:	5c9b      	ldrb	r3, [r3, r2]
    1a98:	9303      	str	r3, [sp, #12]
    1a9a:	4a08      	ldr	r2, [pc, #32]	; (1abc <Clock_Ip_DisableModuleClock+0x40>)
    1a9c:	9b03      	ldr	r3, [sp, #12]
    1a9e:	00db      	lsls	r3, r3, #3
    1aa0:	4413      	add	r3, r2
    1aa2:	685b      	ldr	r3, [r3, #4]
    1aa4:	2101      	movs	r1, #1
    1aa6:	9801      	ldr	r0, [sp, #4]
    1aa8:	4798      	blx	r3
    1aaa:	bf00      	nop
    1aac:	b005      	add	sp, #20
    1aae:	f85d fb04 	ldr.w	pc, [sp], #4
    1ab2:	bf00      	nop
    1ab4:	0000b660 	.word	0x0000b660
    1ab8:	0000b600 	.word	0x0000b600
    1abc:	0000bbe8 	.word	0x0000bbe8

00001ac0 <Clock_Ip_EnableModuleClock>:
    1ac0:	b500      	push	{lr}
    1ac2:	b085      	sub	sp, #20
    1ac4:	9001      	str	r0, [sp, #4]
    1ac6:	490c      	ldr	r1, [pc, #48]	; (1af8 <Clock_Ip_EnableModuleClock+0x38>)
    1ac8:	9a01      	ldr	r2, [sp, #4]
    1aca:	4613      	mov	r3, r2
    1acc:	00db      	lsls	r3, r3, #3
    1ace:	4413      	add	r3, r2
    1ad0:	440b      	add	r3, r1
    1ad2:	3301      	adds	r3, #1
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	461a      	mov	r2, r3
    1ad8:	4b08      	ldr	r3, [pc, #32]	; (1afc <Clock_Ip_EnableModuleClock+0x3c>)
    1ada:	5c9b      	ldrb	r3, [r3, r2]
    1adc:	9303      	str	r3, [sp, #12]
    1ade:	4a08      	ldr	r2, [pc, #32]	; (1b00 <Clock_Ip_EnableModuleClock+0x40>)
    1ae0:	9b03      	ldr	r3, [sp, #12]
    1ae2:	00db      	lsls	r3, r3, #3
    1ae4:	4413      	add	r3, r2
    1ae6:	685b      	ldr	r3, [r3, #4]
    1ae8:	2100      	movs	r1, #0
    1aea:	9801      	ldr	r0, [sp, #4]
    1aec:	4798      	blx	r3
    1aee:	bf00      	nop
    1af0:	b005      	add	sp, #20
    1af2:	f85d fb04 	ldr.w	pc, [sp], #4
    1af6:	bf00      	nop
    1af8:	0000b660 	.word	0x0000b660
    1afc:	0000b600 	.word	0x0000b600
    1b00:	0000bbe8 	.word	0x0000bbe8

00001b04 <Clock_Ip_PowerModeChangeNotification>:
    1b04:	b500      	push	{lr}
    1b06:	b083      	sub	sp, #12
    1b08:	9001      	str	r0, [sp, #4]
    1b0a:	9100      	str	r1, [sp, #0]
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1b0e:	2200      	movs	r2, #0
    1b10:	701a      	strb	r2, [r3, #0]
    1b12:	4b08      	ldr	r3, [pc, #32]	; (1b34 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	2102      	movs	r1, #2
    1b18:	4618      	mov	r0, r3
    1b1a:	f002 fd75 	bl	4608 <Clock_Ip_Command>
    1b1e:	9900      	ldr	r1, [sp, #0]
    1b20:	9801      	ldr	r0, [sp, #4]
    1b22:	f002 fc51 	bl	43c8 <Clock_Ip_ClockPowerModeChangeNotification>
    1b26:	bf00      	nop
    1b28:	b003      	add	sp, #12
    1b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b2e:	bf00      	nop
    1b30:	1fff8b10 	.word	0x1fff8b10
    1b34:	1fff8b44 	.word	0x1fff8b44

00001b38 <Clock_Ip_SetWaitStates>:
    1b38:	b082      	sub	sp, #8
    1b3a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1b3e:	9301      	str	r3, [sp, #4]
    1b40:	4b06      	ldr	r3, [pc, #24]	; (1b5c <Clock_Ip_SetWaitStates+0x24>)
    1b42:	785b      	ldrb	r3, [r3, #1]
    1b44:	2b00      	cmp	r3, #0
    1b46:	d005      	beq.n	1b54 <Clock_Ip_SetWaitStates+0x1c>
    1b48:	9b01      	ldr	r3, [sp, #4]
    1b4a:	3b01      	subs	r3, #1
    1b4c:	9301      	str	r3, [sp, #4]
    1b4e:	9b01      	ldr	r3, [sp, #4]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d1f9      	bne.n	1b48 <Clock_Ip_SetWaitStates+0x10>
    1b54:	bf00      	nop
    1b56:	b002      	add	sp, #8
    1b58:	4770      	bx	lr
    1b5a:	bf00      	nop
    1b5c:	1fff8b4c 	.word	0x1fff8b4c

00001b60 <Clock_Ip_ReportClockErrors>:
    1b60:	b500      	push	{lr}
    1b62:	b083      	sub	sp, #12
    1b64:	9001      	str	r0, [sp, #4]
    1b66:	9100      	str	r1, [sp, #0]
    1b68:	4b04      	ldr	r3, [pc, #16]	; (1b7c <Clock_Ip_ReportClockErrors+0x1c>)
    1b6a:	681b      	ldr	r3, [r3, #0]
    1b6c:	9900      	ldr	r1, [sp, #0]
    1b6e:	9801      	ldr	r0, [sp, #4]
    1b70:	4798      	blx	r3
    1b72:	bf00      	nop
    1b74:	b003      	add	sp, #12
    1b76:	f85d fb04 	ldr.w	pc, [sp], #4
    1b7a:	bf00      	nop
    1b7c:	1fff8b14 	.word	0x1fff8b14

00001b80 <Clock_Ip_StartTimeout>:
    1b80:	b500      	push	{lr}
    1b82:	b085      	sub	sp, #20
    1b84:	9003      	str	r0, [sp, #12]
    1b86:	9102      	str	r1, [sp, #8]
    1b88:	9201      	str	r2, [sp, #4]
    1b8a:	9300      	str	r3, [sp, #0]
    1b8c:	2000      	movs	r0, #0
    1b8e:	f7fe ffd0 	bl	b32 <OsIf_GetCounter>
    1b92:	4602      	mov	r2, r0
    1b94:	9b03      	ldr	r3, [sp, #12]
    1b96:	601a      	str	r2, [r3, #0]
    1b98:	9b02      	ldr	r3, [sp, #8]
    1b9a:	2200      	movs	r2, #0
    1b9c:	601a      	str	r2, [r3, #0]
    1b9e:	2100      	movs	r1, #0
    1ba0:	9800      	ldr	r0, [sp, #0]
    1ba2:	f7ff f812 	bl	bca <OsIf_MicrosToTicks>
    1ba6:	4602      	mov	r2, r0
    1ba8:	9b01      	ldr	r3, [sp, #4]
    1baa:	601a      	str	r2, [r3, #0]
    1bac:	bf00      	nop
    1bae:	b005      	add	sp, #20
    1bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001bb4 <Clock_Ip_TimeoutExpired>:
    1bb4:	b500      	push	{lr}
    1bb6:	b087      	sub	sp, #28
    1bb8:	9003      	str	r0, [sp, #12]
    1bba:	9102      	str	r1, [sp, #8]
    1bbc:	9201      	str	r2, [sp, #4]
    1bbe:	2300      	movs	r3, #0
    1bc0:	f88d 3017 	strb.w	r3, [sp, #23]
    1bc4:	2100      	movs	r1, #0
    1bc6:	9803      	ldr	r0, [sp, #12]
    1bc8:	f7fe ffcc 	bl	b64 <OsIf_GetElapsed>
    1bcc:	4602      	mov	r2, r0
    1bce:	9b02      	ldr	r3, [sp, #8]
    1bd0:	681b      	ldr	r3, [r3, #0]
    1bd2:	441a      	add	r2, r3
    1bd4:	9b02      	ldr	r3, [sp, #8]
    1bd6:	601a      	str	r2, [r3, #0]
    1bd8:	9b02      	ldr	r3, [sp, #8]
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	9a01      	ldr	r2, [sp, #4]
    1bde:	429a      	cmp	r2, r3
    1be0:	d802      	bhi.n	1be8 <Clock_Ip_TimeoutExpired+0x34>
    1be2:	2301      	movs	r3, #1
    1be4:	f88d 3017 	strb.w	r3, [sp, #23]
    1be8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1bec:	4618      	mov	r0, r3
    1bee:	b007      	add	sp, #28
    1bf0:	f85d fb04 	ldr.w	pc, [sp], #4

00001bf4 <Clock_Ip_Callback_DividerEmpty>:
    1bf4:	b082      	sub	sp, #8
    1bf6:	9001      	str	r0, [sp, #4]
    1bf8:	bf00      	nop
    1bfa:	b002      	add	sp, #8
    1bfc:	4770      	bx	lr

00001bfe <Clock_Ip_SetScgAsyncDiv1>:
    1bfe:	b500      	push	{lr}
    1c00:	b083      	sub	sp, #12
    1c02:	9001      	str	r0, [sp, #4]
    1c04:	9b01      	ldr	r3, [sp, #4]
    1c06:	2b00      	cmp	r3, #0
    1c08:	d002      	beq.n	1c10 <Clock_Ip_SetScgAsyncDiv1+0x12>
    1c0a:	9801      	ldr	r0, [sp, #4]
    1c0c:	f000 f8ad 	bl	1d6a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
    1c10:	bf00      	nop
    1c12:	b003      	add	sp, #12
    1c14:	f85d fb04 	ldr.w	pc, [sp], #4

00001c18 <Clock_Ip_SetScgAsyncDiv2>:
    1c18:	b500      	push	{lr}
    1c1a:	b083      	sub	sp, #12
    1c1c:	9001      	str	r0, [sp, #4]
    1c1e:	9b01      	ldr	r3, [sp, #4]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d002      	beq.n	1c2a <Clock_Ip_SetScgAsyncDiv2+0x12>
    1c24:	9801      	ldr	r0, [sp, #4]
    1c26:	f000 f8cd 	bl	1dc4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
    1c2a:	bf00      	nop
    1c2c:	b003      	add	sp, #12
    1c2e:	f85d fb04 	ldr.w	pc, [sp], #4

00001c32 <Clock_Ip_SetScgRunDivcore>:
    1c32:	b500      	push	{lr}
    1c34:	b083      	sub	sp, #12
    1c36:	9001      	str	r0, [sp, #4]
    1c38:	9b01      	ldr	r3, [sp, #4]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d002      	beq.n	1c44 <Clock_Ip_SetScgRunDivcore+0x12>
    1c3e:	9801      	ldr	r0, [sp, #4]
    1c40:	f000 f8ee 	bl	1e20 <Clock_Ip_SetScgRunDivcore_TrustedCall>
    1c44:	bf00      	nop
    1c46:	b003      	add	sp, #12
    1c48:	f85d fb04 	ldr.w	pc, [sp], #4

00001c4c <Clock_Ip_SetScgRunDivbus>:
    1c4c:	b500      	push	{lr}
    1c4e:	b083      	sub	sp, #12
    1c50:	9001      	str	r0, [sp, #4]
    1c52:	9b01      	ldr	r3, [sp, #4]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d002      	beq.n	1c5e <Clock_Ip_SetScgRunDivbus+0x12>
    1c58:	9801      	ldr	r0, [sp, #4]
    1c5a:	f000 f8f9 	bl	1e50 <Clock_Ip_SetScgRunDivbus_TrustedCall>
    1c5e:	bf00      	nop
    1c60:	b003      	add	sp, #12
    1c62:	f85d fb04 	ldr.w	pc, [sp], #4

00001c66 <Clock_Ip_SetScgRunDivslow>:
    1c66:	b500      	push	{lr}
    1c68:	b083      	sub	sp, #12
    1c6a:	9001      	str	r0, [sp, #4]
    1c6c:	9b01      	ldr	r3, [sp, #4]
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d002      	beq.n	1c78 <Clock_Ip_SetScgRunDivslow+0x12>
    1c72:	9801      	ldr	r0, [sp, #4]
    1c74:	f000 f904 	bl	1e80 <Clock_Ip_SetScgRunDivslow_TrustedCall>
    1c78:	bf00      	nop
    1c7a:	b003      	add	sp, #12
    1c7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c80 <Clock_Ip_SetScgVlprDivcore>:
    1c80:	b500      	push	{lr}
    1c82:	b083      	sub	sp, #12
    1c84:	9001      	str	r0, [sp, #4]
    1c86:	9b01      	ldr	r3, [sp, #4]
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d002      	beq.n	1c92 <Clock_Ip_SetScgVlprDivcore+0x12>
    1c8c:	9801      	ldr	r0, [sp, #4]
    1c8e:	f000 f90f 	bl	1eb0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
    1c92:	bf00      	nop
    1c94:	b003      	add	sp, #12
    1c96:	f85d fb04 	ldr.w	pc, [sp], #4

00001c9a <Clock_Ip_SetScgVlprDivbus>:
    1c9a:	b500      	push	{lr}
    1c9c:	b083      	sub	sp, #12
    1c9e:	9001      	str	r0, [sp, #4]
    1ca0:	9b01      	ldr	r3, [sp, #4]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d002      	beq.n	1cac <Clock_Ip_SetScgVlprDivbus+0x12>
    1ca6:	9801      	ldr	r0, [sp, #4]
    1ca8:	f000 f91a 	bl	1ee0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
    1cac:	bf00      	nop
    1cae:	b003      	add	sp, #12
    1cb0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cb4 <Clock_Ip_SetScgVlprDivslow>:
    1cb4:	b500      	push	{lr}
    1cb6:	b083      	sub	sp, #12
    1cb8:	9001      	str	r0, [sp, #4]
    1cba:	9b01      	ldr	r3, [sp, #4]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d002      	beq.n	1cc6 <Clock_Ip_SetScgVlprDivslow+0x12>
    1cc0:	9801      	ldr	r0, [sp, #4]
    1cc2:	f000 f925 	bl	1f10 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
    1cc6:	bf00      	nop
    1cc8:	b003      	add	sp, #12
    1cca:	f85d fb04 	ldr.w	pc, [sp], #4

00001cce <Clock_Ip_SetScgHsrunDivcore>:
    1cce:	b500      	push	{lr}
    1cd0:	b083      	sub	sp, #12
    1cd2:	9001      	str	r0, [sp, #4]
    1cd4:	9b01      	ldr	r3, [sp, #4]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d002      	beq.n	1ce0 <Clock_Ip_SetScgHsrunDivcore+0x12>
    1cda:	9801      	ldr	r0, [sp, #4]
    1cdc:	f000 f930 	bl	1f40 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
    1ce0:	bf00      	nop
    1ce2:	b003      	add	sp, #12
    1ce4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ce8 <Clock_Ip_SetScgHsrunDivbus>:
    1ce8:	b500      	push	{lr}
    1cea:	b083      	sub	sp, #12
    1cec:	9001      	str	r0, [sp, #4]
    1cee:	9b01      	ldr	r3, [sp, #4]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d002      	beq.n	1cfa <Clock_Ip_SetScgHsrunDivbus+0x12>
    1cf4:	9801      	ldr	r0, [sp, #4]
    1cf6:	f000 f93b 	bl	1f70 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
    1cfa:	bf00      	nop
    1cfc:	b003      	add	sp, #12
    1cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00001d02 <Clock_Ip_SetScgHsrunDivslow>:
    1d02:	b500      	push	{lr}
    1d04:	b083      	sub	sp, #12
    1d06:	9001      	str	r0, [sp, #4]
    1d08:	9b01      	ldr	r3, [sp, #4]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d002      	beq.n	1d14 <Clock_Ip_SetScgHsrunDivslow+0x12>
    1d0e:	9801      	ldr	r0, [sp, #4]
    1d10:	f000 f946 	bl	1fa0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
    1d14:	bf00      	nop
    1d16:	b003      	add	sp, #12
    1d18:	f85d fb04 	ldr.w	pc, [sp], #4

00001d1c <Clock_Ip_SetSimClkoutDiv>:
    1d1c:	b500      	push	{lr}
    1d1e:	b083      	sub	sp, #12
    1d20:	9001      	str	r0, [sp, #4]
    1d22:	9b01      	ldr	r3, [sp, #4]
    1d24:	2b00      	cmp	r3, #0
    1d26:	d002      	beq.n	1d2e <Clock_Ip_SetSimClkoutDiv+0x12>
    1d28:	9801      	ldr	r0, [sp, #4]
    1d2a:	f000 f951 	bl	1fd0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
    1d2e:	bf00      	nop
    1d30:	b003      	add	sp, #12
    1d32:	f85d fb04 	ldr.w	pc, [sp], #4

00001d36 <Clock_Ip_SetPccPcdDivFrac>:
    1d36:	b500      	push	{lr}
    1d38:	b083      	sub	sp, #12
    1d3a:	9001      	str	r0, [sp, #4]
    1d3c:	9b01      	ldr	r3, [sp, #4]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d002      	beq.n	1d48 <Clock_Ip_SetPccPcdDivFrac+0x12>
    1d42:	9801      	ldr	r0, [sp, #4]
    1d44:	f000 f95e 	bl	2004 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
    1d48:	bf00      	nop
    1d4a:	b003      	add	sp, #12
    1d4c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d50 <Clock_Ip_SetSimTraceDivMul>:
    1d50:	b500      	push	{lr}
    1d52:	b083      	sub	sp, #12
    1d54:	9001      	str	r0, [sp, #4]
    1d56:	9b01      	ldr	r3, [sp, #4]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d002      	beq.n	1d62 <Clock_Ip_SetSimTraceDivMul+0x12>
    1d5c:	9801      	ldr	r0, [sp, #4]
    1d5e:	f000 f98b 	bl	2078 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
    1d62:	bf00      	nop
    1d64:	b003      	add	sp, #12
    1d66:	f85d fb04 	ldr.w	pc, [sp], #4

00001d6a <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
    1d6a:	b086      	sub	sp, #24
    1d6c:	9001      	str	r0, [sp, #4]
    1d6e:	9b01      	ldr	r3, [sp, #4]
    1d70:	681a      	ldr	r2, [r3, #0]
    1d72:	4911      	ldr	r1, [pc, #68]	; (1db8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1d74:	4613      	mov	r3, r2
    1d76:	00db      	lsls	r3, r3, #3
    1d78:	4413      	add	r3, r2
    1d7a:	440b      	add	r3, r1
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	9305      	str	r3, [sp, #20]
    1d80:	9b01      	ldr	r3, [sp, #4]
    1d82:	685b      	ldr	r3, [r3, #4]
    1d84:	4a0d      	ldr	r2, [pc, #52]	; (1dbc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1d86:	5cd3      	ldrb	r3, [r2, r3]
    1d88:	9304      	str	r3, [sp, #16]
    1d8a:	4a0d      	ldr	r2, [pc, #52]	; (1dc0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1d8c:	9b05      	ldr	r3, [sp, #20]
    1d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d92:	681b      	ldr	r3, [r3, #0]
    1d94:	9303      	str	r3, [sp, #12]
    1d96:	9b03      	ldr	r3, [sp, #12]
    1d98:	f023 0307 	bic.w	r3, r3, #7
    1d9c:	9303      	str	r3, [sp, #12]
    1d9e:	9a03      	ldr	r2, [sp, #12]
    1da0:	9b04      	ldr	r3, [sp, #16]
    1da2:	4313      	orrs	r3, r2
    1da4:	9303      	str	r3, [sp, #12]
    1da6:	4a06      	ldr	r2, [pc, #24]	; (1dc0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1da8:	9b05      	ldr	r3, [sp, #20]
    1daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dae:	9a03      	ldr	r2, [sp, #12]
    1db0:	601a      	str	r2, [r3, #0]
    1db2:	bf00      	nop
    1db4:	b006      	add	sp, #24
    1db6:	4770      	bx	lr
    1db8:	0000b660 	.word	0x0000b660
    1dbc:	0000ba58 	.word	0x0000ba58
    1dc0:	0000ba9c 	.word	0x0000ba9c

00001dc4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
    1dc4:	b086      	sub	sp, #24
    1dc6:	9001      	str	r0, [sp, #4]
    1dc8:	9b01      	ldr	r3, [sp, #4]
    1dca:	681a      	ldr	r2, [r3, #0]
    1dcc:	4911      	ldr	r1, [pc, #68]	; (1e14 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1dce:	4613      	mov	r3, r2
    1dd0:	00db      	lsls	r3, r3, #3
    1dd2:	4413      	add	r3, r2
    1dd4:	440b      	add	r3, r1
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	9305      	str	r3, [sp, #20]
    1dda:	9b01      	ldr	r3, [sp, #4]
    1ddc:	685b      	ldr	r3, [r3, #4]
    1dde:	4a0e      	ldr	r2, [pc, #56]	; (1e18 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1de0:	5cd3      	ldrb	r3, [r2, r3]
    1de2:	9304      	str	r3, [sp, #16]
    1de4:	4a0d      	ldr	r2, [pc, #52]	; (1e1c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1de6:	9b05      	ldr	r3, [sp, #20]
    1de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dec:	681b      	ldr	r3, [r3, #0]
    1dee:	9303      	str	r3, [sp, #12]
    1df0:	9b03      	ldr	r3, [sp, #12]
    1df2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1df6:	9303      	str	r3, [sp, #12]
    1df8:	9b04      	ldr	r3, [sp, #16]
    1dfa:	021b      	lsls	r3, r3, #8
    1dfc:	9a03      	ldr	r2, [sp, #12]
    1dfe:	4313      	orrs	r3, r2
    1e00:	9303      	str	r3, [sp, #12]
    1e02:	4a06      	ldr	r2, [pc, #24]	; (1e1c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1e04:	9b05      	ldr	r3, [sp, #20]
    1e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e0a:	9a03      	ldr	r2, [sp, #12]
    1e0c:	601a      	str	r2, [r3, #0]
    1e0e:	bf00      	nop
    1e10:	b006      	add	sp, #24
    1e12:	4770      	bx	lr
    1e14:	0000b660 	.word	0x0000b660
    1e18:	0000ba58 	.word	0x0000ba58
    1e1c:	0000ba9c 	.word	0x0000ba9c

00001e20 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
    1e20:	b084      	sub	sp, #16
    1e22:	9001      	str	r0, [sp, #4]
    1e24:	4b09      	ldr	r3, [pc, #36]	; (1e4c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e26:	695b      	ldr	r3, [r3, #20]
    1e28:	9303      	str	r3, [sp, #12]
    1e2a:	9b03      	ldr	r3, [sp, #12]
    1e2c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1e30:	9303      	str	r3, [sp, #12]
    1e32:	9b01      	ldr	r3, [sp, #4]
    1e34:	685b      	ldr	r3, [r3, #4]
    1e36:	3b01      	subs	r3, #1
    1e38:	041b      	lsls	r3, r3, #16
    1e3a:	9a03      	ldr	r2, [sp, #12]
    1e3c:	4313      	orrs	r3, r2
    1e3e:	9303      	str	r3, [sp, #12]
    1e40:	4a02      	ldr	r2, [pc, #8]	; (1e4c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1e42:	9b03      	ldr	r3, [sp, #12]
    1e44:	6153      	str	r3, [r2, #20]
    1e46:	bf00      	nop
    1e48:	b004      	add	sp, #16
    1e4a:	4770      	bx	lr
    1e4c:	40064000 	.word	0x40064000

00001e50 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
    1e50:	b084      	sub	sp, #16
    1e52:	9001      	str	r0, [sp, #4]
    1e54:	4b09      	ldr	r3, [pc, #36]	; (1e7c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e56:	695b      	ldr	r3, [r3, #20]
    1e58:	9303      	str	r3, [sp, #12]
    1e5a:	9b03      	ldr	r3, [sp, #12]
    1e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e60:	9303      	str	r3, [sp, #12]
    1e62:	9b01      	ldr	r3, [sp, #4]
    1e64:	685b      	ldr	r3, [r3, #4]
    1e66:	3b01      	subs	r3, #1
    1e68:	011b      	lsls	r3, r3, #4
    1e6a:	9a03      	ldr	r2, [sp, #12]
    1e6c:	4313      	orrs	r3, r2
    1e6e:	9303      	str	r3, [sp, #12]
    1e70:	4a02      	ldr	r2, [pc, #8]	; (1e7c <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1e72:	9b03      	ldr	r3, [sp, #12]
    1e74:	6153      	str	r3, [r2, #20]
    1e76:	bf00      	nop
    1e78:	b004      	add	sp, #16
    1e7a:	4770      	bx	lr
    1e7c:	40064000 	.word	0x40064000

00001e80 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
    1e80:	b084      	sub	sp, #16
    1e82:	9001      	str	r0, [sp, #4]
    1e84:	4b09      	ldr	r3, [pc, #36]	; (1eac <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1e86:	695b      	ldr	r3, [r3, #20]
    1e88:	9303      	str	r3, [sp, #12]
    1e8a:	9b03      	ldr	r3, [sp, #12]
    1e8c:	f023 030f 	bic.w	r3, r3, #15
    1e90:	9303      	str	r3, [sp, #12]
    1e92:	9b01      	ldr	r3, [sp, #4]
    1e94:	685b      	ldr	r3, [r3, #4]
    1e96:	3b01      	subs	r3, #1
    1e98:	9a03      	ldr	r2, [sp, #12]
    1e9a:	4313      	orrs	r3, r2
    1e9c:	9303      	str	r3, [sp, #12]
    1e9e:	4a03      	ldr	r2, [pc, #12]	; (1eac <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1ea0:	9b03      	ldr	r3, [sp, #12]
    1ea2:	6153      	str	r3, [r2, #20]
    1ea4:	bf00      	nop
    1ea6:	b004      	add	sp, #16
    1ea8:	4770      	bx	lr
    1eaa:	bf00      	nop
    1eac:	40064000 	.word	0x40064000

00001eb0 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
    1eb0:	b084      	sub	sp, #16
    1eb2:	9001      	str	r0, [sp, #4]
    1eb4:	4b09      	ldr	r3, [pc, #36]	; (1edc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1eb6:	699b      	ldr	r3, [r3, #24]
    1eb8:	9303      	str	r3, [sp, #12]
    1eba:	9b03      	ldr	r3, [sp, #12]
    1ebc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1ec0:	9303      	str	r3, [sp, #12]
    1ec2:	9b01      	ldr	r3, [sp, #4]
    1ec4:	685b      	ldr	r3, [r3, #4]
    1ec6:	3b01      	subs	r3, #1
    1ec8:	041b      	lsls	r3, r3, #16
    1eca:	9a03      	ldr	r2, [sp, #12]
    1ecc:	4313      	orrs	r3, r2
    1ece:	9303      	str	r3, [sp, #12]
    1ed0:	4a02      	ldr	r2, [pc, #8]	; (1edc <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1ed2:	9b03      	ldr	r3, [sp, #12]
    1ed4:	6193      	str	r3, [r2, #24]
    1ed6:	bf00      	nop
    1ed8:	b004      	add	sp, #16
    1eda:	4770      	bx	lr
    1edc:	40064000 	.word	0x40064000

00001ee0 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
    1ee0:	b084      	sub	sp, #16
    1ee2:	9001      	str	r0, [sp, #4]
    1ee4:	4b09      	ldr	r3, [pc, #36]	; (1f0c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1ee6:	699b      	ldr	r3, [r3, #24]
    1ee8:	9303      	str	r3, [sp, #12]
    1eea:	9b03      	ldr	r3, [sp, #12]
    1eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1ef0:	9303      	str	r3, [sp, #12]
    1ef2:	9b01      	ldr	r3, [sp, #4]
    1ef4:	685b      	ldr	r3, [r3, #4]
    1ef6:	3b01      	subs	r3, #1
    1ef8:	011b      	lsls	r3, r3, #4
    1efa:	9a03      	ldr	r2, [sp, #12]
    1efc:	4313      	orrs	r3, r2
    1efe:	9303      	str	r3, [sp, #12]
    1f00:	4a02      	ldr	r2, [pc, #8]	; (1f0c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1f02:	9b03      	ldr	r3, [sp, #12]
    1f04:	6193      	str	r3, [r2, #24]
    1f06:	bf00      	nop
    1f08:	b004      	add	sp, #16
    1f0a:	4770      	bx	lr
    1f0c:	40064000 	.word	0x40064000

00001f10 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
    1f10:	b084      	sub	sp, #16
    1f12:	9001      	str	r0, [sp, #4]
    1f14:	4b09      	ldr	r3, [pc, #36]	; (1f3c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f16:	699b      	ldr	r3, [r3, #24]
    1f18:	9303      	str	r3, [sp, #12]
    1f1a:	9b03      	ldr	r3, [sp, #12]
    1f1c:	f023 030f 	bic.w	r3, r3, #15
    1f20:	9303      	str	r3, [sp, #12]
    1f22:	9b01      	ldr	r3, [sp, #4]
    1f24:	685b      	ldr	r3, [r3, #4]
    1f26:	3b01      	subs	r3, #1
    1f28:	9a03      	ldr	r2, [sp, #12]
    1f2a:	4313      	orrs	r3, r2
    1f2c:	9303      	str	r3, [sp, #12]
    1f2e:	4a03      	ldr	r2, [pc, #12]	; (1f3c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1f30:	9b03      	ldr	r3, [sp, #12]
    1f32:	6193      	str	r3, [r2, #24]
    1f34:	bf00      	nop
    1f36:	b004      	add	sp, #16
    1f38:	4770      	bx	lr
    1f3a:	bf00      	nop
    1f3c:	40064000 	.word	0x40064000

00001f40 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
    1f40:	b084      	sub	sp, #16
    1f42:	9001      	str	r0, [sp, #4]
    1f44:	4b09      	ldr	r3, [pc, #36]	; (1f6c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f46:	69db      	ldr	r3, [r3, #28]
    1f48:	9303      	str	r3, [sp, #12]
    1f4a:	9b03      	ldr	r3, [sp, #12]
    1f4c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f50:	9303      	str	r3, [sp, #12]
    1f52:	9b01      	ldr	r3, [sp, #4]
    1f54:	685b      	ldr	r3, [r3, #4]
    1f56:	3b01      	subs	r3, #1
    1f58:	041b      	lsls	r3, r3, #16
    1f5a:	9a03      	ldr	r2, [sp, #12]
    1f5c:	4313      	orrs	r3, r2
    1f5e:	9303      	str	r3, [sp, #12]
    1f60:	4a02      	ldr	r2, [pc, #8]	; (1f6c <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    1f62:	9b03      	ldr	r3, [sp, #12]
    1f64:	61d3      	str	r3, [r2, #28]
    1f66:	bf00      	nop
    1f68:	b004      	add	sp, #16
    1f6a:	4770      	bx	lr
    1f6c:	40064000 	.word	0x40064000

00001f70 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
    1f70:	b084      	sub	sp, #16
    1f72:	9001      	str	r0, [sp, #4]
    1f74:	4b09      	ldr	r3, [pc, #36]	; (1f9c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f76:	69db      	ldr	r3, [r3, #28]
    1f78:	9303      	str	r3, [sp, #12]
    1f7a:	9b03      	ldr	r3, [sp, #12]
    1f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f80:	9303      	str	r3, [sp, #12]
    1f82:	9b01      	ldr	r3, [sp, #4]
    1f84:	685b      	ldr	r3, [r3, #4]
    1f86:	3b01      	subs	r3, #1
    1f88:	011b      	lsls	r3, r3, #4
    1f8a:	9a03      	ldr	r2, [sp, #12]
    1f8c:	4313      	orrs	r3, r2
    1f8e:	9303      	str	r3, [sp, #12]
    1f90:	4a02      	ldr	r2, [pc, #8]	; (1f9c <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    1f92:	9b03      	ldr	r3, [sp, #12]
    1f94:	61d3      	str	r3, [r2, #28]
    1f96:	bf00      	nop
    1f98:	b004      	add	sp, #16
    1f9a:	4770      	bx	lr
    1f9c:	40064000 	.word	0x40064000

00001fa0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
    1fa0:	b084      	sub	sp, #16
    1fa2:	9001      	str	r0, [sp, #4]
    1fa4:	4b09      	ldr	r3, [pc, #36]	; (1fcc <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fa6:	69db      	ldr	r3, [r3, #28]
    1fa8:	9303      	str	r3, [sp, #12]
    1faa:	9b03      	ldr	r3, [sp, #12]
    1fac:	f023 030f 	bic.w	r3, r3, #15
    1fb0:	9303      	str	r3, [sp, #12]
    1fb2:	9b01      	ldr	r3, [sp, #4]
    1fb4:	685b      	ldr	r3, [r3, #4]
    1fb6:	3b01      	subs	r3, #1
    1fb8:	9a03      	ldr	r2, [sp, #12]
    1fba:	4313      	orrs	r3, r2
    1fbc:	9303      	str	r3, [sp, #12]
    1fbe:	4a03      	ldr	r2, [pc, #12]	; (1fcc <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    1fc0:	9b03      	ldr	r3, [sp, #12]
    1fc2:	61d3      	str	r3, [r2, #28]
    1fc4:	bf00      	nop
    1fc6:	b004      	add	sp, #16
    1fc8:	4770      	bx	lr
    1fca:	bf00      	nop
    1fcc:	40064000 	.word	0x40064000

00001fd0 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
    1fd0:	b084      	sub	sp, #16
    1fd2:	9001      	str	r0, [sp, #4]
    1fd4:	4b0a      	ldr	r3, [pc, #40]	; (2000 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1fd6:	685b      	ldr	r3, [r3, #4]
    1fd8:	9303      	str	r3, [sp, #12]
    1fda:	9b03      	ldr	r3, [sp, #12]
    1fdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1fe0:	9303      	str	r3, [sp, #12]
    1fe2:	9b01      	ldr	r3, [sp, #4]
    1fe4:	685b      	ldr	r3, [r3, #4]
    1fe6:	3b01      	subs	r3, #1
    1fe8:	021b      	lsls	r3, r3, #8
    1fea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1fee:	9a03      	ldr	r2, [sp, #12]
    1ff0:	4313      	orrs	r3, r2
    1ff2:	9303      	str	r3, [sp, #12]
    1ff4:	4a02      	ldr	r2, [pc, #8]	; (2000 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    1ff6:	9b03      	ldr	r3, [sp, #12]
    1ff8:	6053      	str	r3, [r2, #4]
    1ffa:	bf00      	nop
    1ffc:	b004      	add	sp, #16
    1ffe:	4770      	bx	lr
    2000:	40048000 	.word	0x40048000

00002004 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
    2004:	b084      	sub	sp, #16
    2006:	9001      	str	r0, [sp, #4]
    2008:	4919      	ldr	r1, [pc, #100]	; (2070 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    200a:	9b01      	ldr	r3, [sp, #4]
    200c:	681a      	ldr	r2, [r3, #0]
    200e:	4819      	ldr	r0, [pc, #100]	; (2074 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2010:	4613      	mov	r3, r2
    2012:	00db      	lsls	r3, r3, #3
    2014:	4413      	add	r3, r2
    2016:	4403      	add	r3, r0
    2018:	3305      	adds	r3, #5
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2020:	9303      	str	r3, [sp, #12]
    2022:	9b03      	ldr	r3, [sp, #12]
    2024:	f023 030f 	bic.w	r3, r3, #15
    2028:	9303      	str	r3, [sp, #12]
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	685b      	ldr	r3, [r3, #4]
    202e:	3b01      	subs	r3, #1
    2030:	f003 0307 	and.w	r3, r3, #7
    2034:	9a03      	ldr	r2, [sp, #12]
    2036:	4313      	orrs	r3, r2
    2038:	9303      	str	r3, [sp, #12]
    203a:	9b01      	ldr	r3, [sp, #4]
    203c:	7a1b      	ldrb	r3, [r3, #8]
    203e:	3b01      	subs	r3, #1
    2040:	00db      	lsls	r3, r3, #3
    2042:	f003 0308 	and.w	r3, r3, #8
    2046:	9a03      	ldr	r2, [sp, #12]
    2048:	4313      	orrs	r3, r2
    204a:	9303      	str	r3, [sp, #12]
    204c:	4908      	ldr	r1, [pc, #32]	; (2070 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    204e:	9b01      	ldr	r3, [sp, #4]
    2050:	681a      	ldr	r2, [r3, #0]
    2052:	4808      	ldr	r0, [pc, #32]	; (2074 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2054:	4613      	mov	r3, r2
    2056:	00db      	lsls	r3, r3, #3
    2058:	4413      	add	r3, r2
    205a:	4403      	add	r3, r0
    205c:	3305      	adds	r3, #5
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	461a      	mov	r2, r3
    2062:	9b03      	ldr	r3, [sp, #12]
    2064:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2068:	bf00      	nop
    206a:	b004      	add	sp, #16
    206c:	4770      	bx	lr
    206e:	bf00      	nop
    2070:	40065000 	.word	0x40065000
    2074:	0000b660 	.word	0x0000b660

00002078 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
    2078:	b084      	sub	sp, #16
    207a:	9001      	str	r0, [sp, #4]
    207c:	4b10      	ldr	r3, [pc, #64]	; (20c0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    207e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2080:	4a0f      	ldr	r2, [pc, #60]	; (20c0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2086:	6693      	str	r3, [r2, #104]	; 0x68
    2088:	4b0d      	ldr	r3, [pc, #52]	; (20c0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    208a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    208c:	9303      	str	r3, [sp, #12]
    208e:	9b03      	ldr	r3, [sp, #12]
    2090:	f023 030f 	bic.w	r3, r3, #15
    2094:	9303      	str	r3, [sp, #12]
    2096:	9b01      	ldr	r3, [sp, #4]
    2098:	685b      	ldr	r3, [r3, #4]
    209a:	3b01      	subs	r3, #1
    209c:	005b      	lsls	r3, r3, #1
    209e:	f003 020e 	and.w	r2, r3, #14
    20a2:	9b01      	ldr	r3, [sp, #4]
    20a4:	7a1b      	ldrb	r3, [r3, #8]
    20a6:	3b01      	subs	r3, #1
    20a8:	f003 0301 	and.w	r3, r3, #1
    20ac:	4313      	orrs	r3, r2
    20ae:	9a03      	ldr	r2, [sp, #12]
    20b0:	4313      	orrs	r3, r2
    20b2:	9303      	str	r3, [sp, #12]
    20b4:	4a02      	ldr	r2, [pc, #8]	; (20c0 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    20b6:	9b03      	ldr	r3, [sp, #12]
    20b8:	6693      	str	r3, [r2, #104]	; 0x68
    20ba:	bf00      	nop
    20bc:	b004      	add	sp, #16
    20be:	4770      	bx	lr
    20c0:	40048000 	.word	0x40048000

000020c4 <Clock_Ip_Callback_DividerTriggerEmpty>:
    20c4:	b082      	sub	sp, #8
    20c6:	9001      	str	r0, [sp, #4]
    20c8:	bf00      	nop
    20ca:	b002      	add	sp, #8
    20cc:	4770      	bx	lr
	...

000020d0 <Clock_Ip_ExternalOscillatorEmpty>:
    20d0:	b082      	sub	sp, #8
    20d2:	9001      	str	r0, [sp, #4]
    20d4:	bf00      	nop
    20d6:	b002      	add	sp, #8
    20d8:	4770      	bx	lr

000020da <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
    20da:	b082      	sub	sp, #8
    20dc:	9001      	str	r0, [sp, #4]
    20de:	bf00      	nop
    20e0:	b002      	add	sp, #8
    20e2:	4770      	bx	lr

000020e4 <Clock_Ip_ResetSOSC>:
    20e4:	b500      	push	{lr}
    20e6:	b083      	sub	sp, #12
    20e8:	9001      	str	r0, [sp, #4]
    20ea:	9b01      	ldr	r3, [sp, #4]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d002      	beq.n	20f6 <Clock_Ip_ResetSOSC+0x12>
    20f0:	9801      	ldr	r0, [sp, #4]
    20f2:	f000 f86a 	bl	21ca <Clock_Ip_ResetSOSC_TrustedCall>
    20f6:	bf00      	nop
    20f8:	b003      	add	sp, #12
    20fa:	f85d fb04 	ldr.w	pc, [sp], #4

000020fe <Clock_Ip_SetSOSC>:
    20fe:	b500      	push	{lr}
    2100:	b083      	sub	sp, #12
    2102:	9001      	str	r0, [sp, #4]
    2104:	9b01      	ldr	r3, [sp, #4]
    2106:	2b00      	cmp	r3, #0
    2108:	d002      	beq.n	2110 <Clock_Ip_SetSOSC+0x12>
    210a:	9801      	ldr	r0, [sp, #4]
    210c:	f000 f884 	bl	2218 <Clock_Ip_SetSOSC_TrustedCall>
    2110:	bf00      	nop
    2112:	b003      	add	sp, #12
    2114:	f85d fb04 	ldr.w	pc, [sp], #4

00002118 <Clock_Ip_CompleteSOSC>:
    2118:	b500      	push	{lr}
    211a:	b089      	sub	sp, #36	; 0x24
    211c:	9001      	str	r0, [sp, #4]
    211e:	2300      	movs	r3, #0
    2120:	f88d 301f 	strb.w	r3, [sp, #31]
    2124:	9b01      	ldr	r3, [sp, #4]
    2126:	2b00      	cmp	r3, #0
    2128:	d031      	beq.n	218e <Clock_Ip_CompleteSOSC+0x76>
    212a:	4b1b      	ldr	r3, [pc, #108]	; (2198 <Clock_Ip_CompleteSOSC+0x80>)
    212c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2130:	f003 0301 	and.w	r3, r3, #1
    2134:	2b00      	cmp	r3, #0
    2136:	d02a      	beq.n	218e <Clock_Ip_CompleteSOSC+0x76>
    2138:	aa03      	add	r2, sp, #12
    213a:	a904      	add	r1, sp, #16
    213c:	a805      	add	r0, sp, #20
    213e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2142:	f7ff fd1d 	bl	1b80 <Clock_Ip_StartTimeout>
    2146:	4b14      	ldr	r3, [pc, #80]	; (2198 <Clock_Ip_CompleteSOSC+0x80>)
    2148:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    214c:	0e1b      	lsrs	r3, r3, #24
    214e:	f003 0301 	and.w	r3, r3, #1
    2152:	9306      	str	r3, [sp, #24]
    2154:	9a03      	ldr	r2, [sp, #12]
    2156:	a904      	add	r1, sp, #16
    2158:	ab05      	add	r3, sp, #20
    215a:	4618      	mov	r0, r3
    215c:	f7ff fd2a 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    2160:	4603      	mov	r3, r0
    2162:	f88d 301f 	strb.w	r3, [sp, #31]
    2166:	9b06      	ldr	r3, [sp, #24]
    2168:	2b00      	cmp	r3, #0
    216a:	d106      	bne.n	217a <Clock_Ip_CompleteSOSC+0x62>
    216c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2170:	f083 0301 	eor.w	r3, r3, #1
    2174:	b2db      	uxtb	r3, r3
    2176:	2b00      	cmp	r3, #0
    2178:	d1e5      	bne.n	2146 <Clock_Ip_CompleteSOSC+0x2e>
    217a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    217e:	2b00      	cmp	r3, #0
    2180:	d005      	beq.n	218e <Clock_Ip_CompleteSOSC+0x76>
    2182:	9b01      	ldr	r3, [sp, #4]
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	4619      	mov	r1, r3
    2188:	2001      	movs	r0, #1
    218a:	f7ff fce9 	bl	1b60 <Clock_Ip_ReportClockErrors>
    218e:	bf00      	nop
    2190:	b009      	add	sp, #36	; 0x24
    2192:	f85d fb04 	ldr.w	pc, [sp], #4
    2196:	bf00      	nop
    2198:	40064000 	.word	0x40064000

0000219c <Clock_Ip_DisableSOSC>:
    219c:	b500      	push	{lr}
    219e:	b083      	sub	sp, #12
    21a0:	9001      	str	r0, [sp, #4]
    21a2:	9801      	ldr	r0, [sp, #4]
    21a4:	f000 f8c0 	bl	2328 <Clock_Ip_DisableSOSC_TrustedCall>
    21a8:	bf00      	nop
    21aa:	b003      	add	sp, #12
    21ac:	f85d fb04 	ldr.w	pc, [sp], #4

000021b0 <Clock_Ip_EnableSOSC>:
    21b0:	b500      	push	{lr}
    21b2:	b083      	sub	sp, #12
    21b4:	9001      	str	r0, [sp, #4]
    21b6:	9b01      	ldr	r3, [sp, #4]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d002      	beq.n	21c2 <Clock_Ip_EnableSOSC+0x12>
    21bc:	9801      	ldr	r0, [sp, #4]
    21be:	f000 f8c3 	bl	2348 <Clock_Ip_EnableSOSC_TrustedCall>
    21c2:	bf00      	nop
    21c4:	b003      	add	sp, #12
    21c6:	f85d fb04 	ldr.w	pc, [sp], #4

000021ca <Clock_Ip_ResetSOSC_TrustedCall>:
    21ca:	b082      	sub	sp, #8
    21cc:	9001      	str	r0, [sp, #4]
    21ce:	4b11      	ldr	r3, [pc, #68]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21d4:	4a0f      	ldr	r2, [pc, #60]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    21da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21de:	4b0d      	ldr	r3, [pc, #52]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21e4:	4a0b      	ldr	r2, [pc, #44]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    21ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21ee:	4b09      	ldr	r3, [pc, #36]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    21f4:	4a07      	ldr	r2, [pc, #28]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    21f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    21fa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    21fe:	4b05      	ldr	r3, [pc, #20]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2200:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2204:	4a03      	ldr	r2, [pc, #12]	; (2214 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2206:	f023 0301 	bic.w	r3, r3, #1
    220a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    220e:	bf00      	nop
    2210:	b002      	add	sp, #8
    2212:	4770      	bx	lr
    2214:	40064000 	.word	0x40064000

00002218 <Clock_Ip_SetSOSC_TrustedCall>:
    2218:	b082      	sub	sp, #8
    221a:	9001      	str	r0, [sp, #4]
    221c:	9b01      	ldr	r3, [sp, #4]
    221e:	891b      	ldrh	r3, [r3, #8]
    2220:	2b01      	cmp	r3, #1
    2222:	d174      	bne.n	230e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
    2224:	9b01      	ldr	r3, [sp, #4]
    2226:	7bdb      	ldrb	r3, [r3, #15]
    2228:	2b00      	cmp	r3, #0
    222a:	d002      	beq.n	2232 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    222c:	2b01      	cmp	r3, #1
    222e:	d009      	beq.n	2244 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
    2230:	e011      	b.n	2256 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
    2232:	4b39      	ldr	r3, [pc, #228]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2234:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2238:	4a37      	ldr	r2, [pc, #220]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    223a:	f023 0308 	bic.w	r3, r3, #8
    223e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2242:	e008      	b.n	2256 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
    2244:	4b34      	ldr	r3, [pc, #208]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2246:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    224a:	4a33      	ldr	r2, [pc, #204]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    224c:	f043 0308 	orr.w	r3, r3, #8
    2250:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2254:	bf00      	nop
    2256:	4b30      	ldr	r3, [pc, #192]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2258:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    225c:	4a2e      	ldr	r2, [pc, #184]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    225e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2262:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	685b      	ldr	r3, [r3, #4]
    226a:	4a2c      	ldr	r2, [pc, #176]	; (231c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    226c:	4293      	cmp	r3, r2
    226e:	d90d      	bls.n	228c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2270:	9b01      	ldr	r3, [sp, #4]
    2272:	685b      	ldr	r3, [r3, #4]
    2274:	4a2a      	ldr	r2, [pc, #168]	; (2320 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    2276:	4293      	cmp	r3, r2
    2278:	d208      	bcs.n	228c <Clock_Ip_SetSOSC_TrustedCall+0x74>
    227a:	4b27      	ldr	r3, [pc, #156]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    227c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2280:	4a25      	ldr	r2, [pc, #148]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2282:	f043 0320 	orr.w	r3, r3, #32
    2286:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    228a:	e007      	b.n	229c <Clock_Ip_SetSOSC_TrustedCall+0x84>
    228c:	4b22      	ldr	r3, [pc, #136]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    228e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2292:	4a21      	ldr	r2, [pc, #132]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2294:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    2298:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    229c:	9b01      	ldr	r3, [sp, #4]
    229e:	7b1b      	ldrb	r3, [r3, #12]
    22a0:	2b00      	cmp	r3, #0
    22a2:	d108      	bne.n	22b6 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
    22a4:	4b1c      	ldr	r3, [pc, #112]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22aa:	4a1b      	ldr	r2, [pc, #108]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22ac:	f043 0304 	orr.w	r3, r3, #4
    22b0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22b4:	e007      	b.n	22c6 <Clock_Ip_SetSOSC_TrustedCall+0xae>
    22b6:	4b18      	ldr	r3, [pc, #96]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    22bc:	4a16      	ldr	r2, [pc, #88]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22be:	f023 0304 	bic.w	r3, r3, #4
    22c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    22c6:	9b01      	ldr	r3, [sp, #4]
    22c8:	7c1b      	ldrb	r3, [r3, #16]
    22ca:	2b02      	cmp	r3, #2
    22cc:	d011      	beq.n	22f2 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    22ce:	2b02      	cmp	r3, #2
    22d0:	dc14      	bgt.n	22fc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22d2:	2b00      	cmp	r3, #0
    22d4:	d002      	beq.n	22dc <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    22d6:	2b01      	cmp	r3, #1
    22d8:	d005      	beq.n	22e6 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    22da:	e00f      	b.n	22fc <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    22dc:	4b0e      	ldr	r3, [pc, #56]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22de:	2201      	movs	r2, #1
    22e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22e4:	e014      	b.n	2310 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22e6:	4b0c      	ldr	r3, [pc, #48]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22e8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    22ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22f0:	e00e      	b.n	2310 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22f2:	4b09      	ldr	r3, [pc, #36]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22f4:	4a0b      	ldr	r2, [pc, #44]	; (2324 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    22f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    22fa:	e009      	b.n	2310 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    22fc:	4b06      	ldr	r3, [pc, #24]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    22fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2302:	4a05      	ldr	r2, [pc, #20]	; (2318 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2304:	f043 0301 	orr.w	r3, r3, #1
    2308:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    230c:	e000      	b.n	2310 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
    230e:	bf00      	nop
    2310:	bf00      	nop
    2312:	b002      	add	sp, #8
    2314:	4770      	bx	lr
    2316:	bf00      	nop
    2318:	40064000 	.word	0x40064000
    231c:	003d08ff 	.word	0x003d08ff
    2320:	007a1200 	.word	0x007a1200
    2324:	00030001 	.word	0x00030001

00002328 <Clock_Ip_DisableSOSC_TrustedCall>:
    2328:	b082      	sub	sp, #8
    232a:	9001      	str	r0, [sp, #4]
    232c:	4b05      	ldr	r3, [pc, #20]	; (2344 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    232e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2332:	4a04      	ldr	r2, [pc, #16]	; (2344 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2334:	f023 0301 	bic.w	r3, r3, #1
    2338:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    233c:	bf00      	nop
    233e:	b002      	add	sp, #8
    2340:	4770      	bx	lr
    2342:	bf00      	nop
    2344:	40064000 	.word	0x40064000

00002348 <Clock_Ip_EnableSOSC_TrustedCall>:
    2348:	b082      	sub	sp, #8
    234a:	9001      	str	r0, [sp, #4]
    234c:	9b01      	ldr	r3, [sp, #4]
    234e:	891b      	ldrh	r3, [r3, #8]
    2350:	2b01      	cmp	r3, #1
    2352:	d107      	bne.n	2364 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    2354:	4b05      	ldr	r3, [pc, #20]	; (236c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2356:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    235a:	4a04      	ldr	r2, [pc, #16]	; (236c <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    235c:	f043 0301 	orr.w	r3, r3, #1
    2360:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    2364:	bf00      	nop
    2366:	b002      	add	sp, #8
    2368:	4770      	bx	lr
    236a:	bf00      	nop
    236c:	40064000 	.word	0x40064000

00002370 <Clock_Ip_CallbackFracDivEmpty>:
    2370:	b082      	sub	sp, #8
    2372:	9001      	str	r0, [sp, #4]
    2374:	bf00      	nop
    2376:	b002      	add	sp, #8
    2378:	4770      	bx	lr

0000237a <Clock_Ip_CallbackFracDivEmptyComplete>:
    237a:	b082      	sub	sp, #8
    237c:	9001      	str	r0, [sp, #4]
    237e:	2300      	movs	r3, #0
    2380:	4618      	mov	r0, r3
    2382:	b002      	add	sp, #8
    2384:	4770      	bx	lr

00002386 <Clock_Ip_SetExternalSignalFrequency>:
    2386:	b082      	sub	sp, #8
    2388:	9001      	str	r0, [sp, #4]
    238a:	9100      	str	r1, [sp, #0]
    238c:	bf00      	nop
    238e:	b002      	add	sp, #8
    2390:	4770      	bx	lr
	...

00002394 <Clock_Ip_ClockSetGateEmpty>:
    2394:	b082      	sub	sp, #8
    2396:	9001      	str	r0, [sp, #4]
    2398:	bf00      	nop
    239a:	b002      	add	sp, #8
    239c:	4770      	bx	lr

0000239e <Clock_Ip_ClockUpdateGateEmpty>:
    239e:	b082      	sub	sp, #8
    23a0:	9001      	str	r0, [sp, #4]
    23a2:	460b      	mov	r3, r1
    23a4:	f88d 3003 	strb.w	r3, [sp, #3]
    23a8:	bf00      	nop
    23aa:	b002      	add	sp, #8
    23ac:	4770      	bx	lr

000023ae <Clock_Ip_ClockSetSimLPO1KEnable>:
    23ae:	b500      	push	{lr}
    23b0:	b083      	sub	sp, #12
    23b2:	9001      	str	r0, [sp, #4]
    23b4:	9b01      	ldr	r3, [sp, #4]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d002      	beq.n	23c0 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    23ba:	9801      	ldr	r0, [sp, #4]
    23bc:	f000 f8e7 	bl	258e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
    23c0:	bf00      	nop
    23c2:	b003      	add	sp, #12
    23c4:	f85d fb04 	ldr.w	pc, [sp], #4

000023c8 <Clock_Ip_ClockUpdateSimLPO1KEnable>:
    23c8:	b500      	push	{lr}
    23ca:	b085      	sub	sp, #20
    23cc:	9001      	str	r0, [sp, #4]
    23ce:	460b      	mov	r3, r1
    23d0:	f88d 3003 	strb.w	r3, [sp, #3]
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	9302      	str	r3, [sp, #8]
    23d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23dc:	2b00      	cmp	r3, #0
    23de:	d003      	beq.n	23e8 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    23e0:	2300      	movs	r3, #0
    23e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    23e6:	e002      	b.n	23ee <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    23e8:	2301      	movs	r3, #1
    23ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    23ee:	ab02      	add	r3, sp, #8
    23f0:	4618      	mov	r0, r3
    23f2:	f7ff ffdc 	bl	23ae <Clock_Ip_ClockSetSimLPO1KEnable>
    23f6:	bf00      	nop
    23f8:	b005      	add	sp, #20
    23fa:	f85d fb04 	ldr.w	pc, [sp], #4

000023fe <Clock_Ip_ClockSetSimLPO32KEnable>:
    23fe:	b500      	push	{lr}
    2400:	b083      	sub	sp, #12
    2402:	9001      	str	r0, [sp, #4]
    2404:	9b01      	ldr	r3, [sp, #4]
    2406:	2b00      	cmp	r3, #0
    2408:	d002      	beq.n	2410 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    240a:	9801      	ldr	r0, [sp, #4]
    240c:	f000 f8d6 	bl	25bc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
    2410:	bf00      	nop
    2412:	b003      	add	sp, #12
    2414:	f85d fb04 	ldr.w	pc, [sp], #4

00002418 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
    2418:	b500      	push	{lr}
    241a:	b085      	sub	sp, #20
    241c:	9001      	str	r0, [sp, #4]
    241e:	460b      	mov	r3, r1
    2420:	f88d 3003 	strb.w	r3, [sp, #3]
    2424:	9b01      	ldr	r3, [sp, #4]
    2426:	9302      	str	r3, [sp, #8]
    2428:	f89d 3003 	ldrb.w	r3, [sp, #3]
    242c:	2b00      	cmp	r3, #0
    242e:	d003      	beq.n	2438 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    2430:	2300      	movs	r3, #0
    2432:	f8ad 300c 	strh.w	r3, [sp, #12]
    2436:	e002      	b.n	243e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    2438:	2301      	movs	r3, #1
    243a:	f8ad 300c 	strh.w	r3, [sp, #12]
    243e:	ab02      	add	r3, sp, #8
    2440:	4618      	mov	r0, r3
    2442:	f7ff ffdc 	bl	23fe <Clock_Ip_ClockSetSimLPO32KEnable>
    2446:	bf00      	nop
    2448:	b005      	add	sp, #20
    244a:	f85d fb04 	ldr.w	pc, [sp], #4

0000244e <Clock_Ip_ClockSetSimClkoutEnable>:
    244e:	b500      	push	{lr}
    2450:	b083      	sub	sp, #12
    2452:	9001      	str	r0, [sp, #4]
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	2b00      	cmp	r3, #0
    2458:	d002      	beq.n	2460 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    245a:	9801      	ldr	r0, [sp, #4]
    245c:	f000 f8c6 	bl	25ec <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
    2460:	bf00      	nop
    2462:	b003      	add	sp, #12
    2464:	f85d fb04 	ldr.w	pc, [sp], #4

00002468 <Clock_Ip_ClockUpdateSimClkoutEnable>:
    2468:	b500      	push	{lr}
    246a:	b085      	sub	sp, #20
    246c:	9001      	str	r0, [sp, #4]
    246e:	460b      	mov	r3, r1
    2470:	f88d 3003 	strb.w	r3, [sp, #3]
    2474:	9b01      	ldr	r3, [sp, #4]
    2476:	9302      	str	r3, [sp, #8]
    2478:	f89d 3003 	ldrb.w	r3, [sp, #3]
    247c:	2b00      	cmp	r3, #0
    247e:	d003      	beq.n	2488 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    2480:	2300      	movs	r3, #0
    2482:	f8ad 300c 	strh.w	r3, [sp, #12]
    2486:	e002      	b.n	248e <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    2488:	2301      	movs	r3, #1
    248a:	f8ad 300c 	strh.w	r3, [sp, #12]
    248e:	ab02      	add	r3, sp, #8
    2490:	4618      	mov	r0, r3
    2492:	f7ff ffdc 	bl	244e <Clock_Ip_ClockSetSimClkoutEnable>
    2496:	bf00      	nop
    2498:	b005      	add	sp, #20
    249a:	f85d fb04 	ldr.w	pc, [sp], #4

0000249e <Clock_Ip_ClockSetPccCgcEnable>:
    249e:	b500      	push	{lr}
    24a0:	b083      	sub	sp, #12
    24a2:	9001      	str	r0, [sp, #4]
    24a4:	9b01      	ldr	r3, [sp, #4]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d002      	beq.n	24b0 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    24aa:	9801      	ldr	r0, [sp, #4]
    24ac:	f000 f8b6 	bl	261c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
    24b0:	bf00      	nop
    24b2:	b003      	add	sp, #12
    24b4:	f85d fb04 	ldr.w	pc, [sp], #4

000024b8 <Clock_Ip_ClockUpdatePccCgcEnable>:
    24b8:	b500      	push	{lr}
    24ba:	b085      	sub	sp, #20
    24bc:	9001      	str	r0, [sp, #4]
    24be:	460b      	mov	r3, r1
    24c0:	f88d 3003 	strb.w	r3, [sp, #3]
    24c4:	9b01      	ldr	r3, [sp, #4]
    24c6:	9302      	str	r3, [sp, #8]
    24c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d003      	beq.n	24d8 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    24d0:	2300      	movs	r3, #0
    24d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    24d6:	e002      	b.n	24de <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    24d8:	2301      	movs	r3, #1
    24da:	f8ad 300c 	strh.w	r3, [sp, #12]
    24de:	ab02      	add	r3, sp, #8
    24e0:	4618      	mov	r0, r3
    24e2:	f7ff ffdc 	bl	249e <Clock_Ip_ClockSetPccCgcEnable>
    24e6:	bf00      	nop
    24e8:	b005      	add	sp, #20
    24ea:	f85d fb04 	ldr.w	pc, [sp], #4

000024ee <Clock_Ip_ClockSetSimGate>:
    24ee:	b500      	push	{lr}
    24f0:	b083      	sub	sp, #12
    24f2:	9001      	str	r0, [sp, #4]
    24f4:	9b01      	ldr	r3, [sp, #4]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d002      	beq.n	2500 <Clock_Ip_ClockSetSimGate+0x12>
    24fa:	9801      	ldr	r0, [sp, #4]
    24fc:	f000 f8bc 	bl	2678 <Clock_Ip_ClockSetSimGate_TrustedCall>
    2500:	bf00      	nop
    2502:	b003      	add	sp, #12
    2504:	f85d fb04 	ldr.w	pc, [sp], #4

00002508 <Clock_Ip_ClockUpdateSimGate>:
    2508:	b500      	push	{lr}
    250a:	b085      	sub	sp, #20
    250c:	9001      	str	r0, [sp, #4]
    250e:	460b      	mov	r3, r1
    2510:	f88d 3003 	strb.w	r3, [sp, #3]
    2514:	9b01      	ldr	r3, [sp, #4]
    2516:	9302      	str	r3, [sp, #8]
    2518:	f89d 3003 	ldrb.w	r3, [sp, #3]
    251c:	2b00      	cmp	r3, #0
    251e:	d003      	beq.n	2528 <Clock_Ip_ClockUpdateSimGate+0x20>
    2520:	2300      	movs	r3, #0
    2522:	f8ad 300c 	strh.w	r3, [sp, #12]
    2526:	e002      	b.n	252e <Clock_Ip_ClockUpdateSimGate+0x26>
    2528:	2301      	movs	r3, #1
    252a:	f8ad 300c 	strh.w	r3, [sp, #12]
    252e:	ab02      	add	r3, sp, #8
    2530:	4618      	mov	r0, r3
    2532:	f7ff ffdc 	bl	24ee <Clock_Ip_ClockSetSimGate>
    2536:	bf00      	nop
    2538:	b005      	add	sp, #20
    253a:	f85d fb04 	ldr.w	pc, [sp], #4

0000253e <Clock_Ip_ClockSetSimTraceEnable>:
    253e:	b500      	push	{lr}
    2540:	b083      	sub	sp, #12
    2542:	9001      	str	r0, [sp, #4]
    2544:	9b01      	ldr	r3, [sp, #4]
    2546:	2b00      	cmp	r3, #0
    2548:	d002      	beq.n	2550 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    254a:	9801      	ldr	r0, [sp, #4]
    254c:	f000 f8c0 	bl	26d0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
    2550:	bf00      	nop
    2552:	b003      	add	sp, #12
    2554:	f85d fb04 	ldr.w	pc, [sp], #4

00002558 <Clock_Ip_ClockUpdateSimTraceEnable>:
    2558:	b500      	push	{lr}
    255a:	b085      	sub	sp, #20
    255c:	9001      	str	r0, [sp, #4]
    255e:	460b      	mov	r3, r1
    2560:	f88d 3003 	strb.w	r3, [sp, #3]
    2564:	9b01      	ldr	r3, [sp, #4]
    2566:	9302      	str	r3, [sp, #8]
    2568:	f89d 3003 	ldrb.w	r3, [sp, #3]
    256c:	2b00      	cmp	r3, #0
    256e:	d003      	beq.n	2578 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    2570:	2300      	movs	r3, #0
    2572:	f8ad 300c 	strh.w	r3, [sp, #12]
    2576:	e002      	b.n	257e <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    2578:	2301      	movs	r3, #1
    257a:	f8ad 300c 	strh.w	r3, [sp, #12]
    257e:	ab02      	add	r3, sp, #8
    2580:	4618      	mov	r0, r3
    2582:	f7ff ffdc 	bl	253e <Clock_Ip_ClockSetSimTraceEnable>
    2586:	bf00      	nop
    2588:	b005      	add	sp, #20
    258a:	f85d fb04 	ldr.w	pc, [sp], #4

0000258e <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
    258e:	b084      	sub	sp, #16
    2590:	9001      	str	r0, [sp, #4]
    2592:	4b09      	ldr	r3, [pc, #36]	; (25b8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2594:	691b      	ldr	r3, [r3, #16]
    2596:	9303      	str	r3, [sp, #12]
    2598:	9b03      	ldr	r3, [sp, #12]
    259a:	f023 0301 	bic.w	r3, r3, #1
    259e:	9303      	str	r3, [sp, #12]
    25a0:	9b01      	ldr	r3, [sp, #4]
    25a2:	889b      	ldrh	r3, [r3, #4]
    25a4:	461a      	mov	r2, r3
    25a6:	9b03      	ldr	r3, [sp, #12]
    25a8:	4313      	orrs	r3, r2
    25aa:	9303      	str	r3, [sp, #12]
    25ac:	4a02      	ldr	r2, [pc, #8]	; (25b8 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    25ae:	9b03      	ldr	r3, [sp, #12]
    25b0:	6113      	str	r3, [r2, #16]
    25b2:	bf00      	nop
    25b4:	b004      	add	sp, #16
    25b6:	4770      	bx	lr
    25b8:	40048000 	.word	0x40048000

000025bc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
    25bc:	b084      	sub	sp, #16
    25be:	9001      	str	r0, [sp, #4]
    25c0:	4b09      	ldr	r3, [pc, #36]	; (25e8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25c2:	691b      	ldr	r3, [r3, #16]
    25c4:	9303      	str	r3, [sp, #12]
    25c6:	9b03      	ldr	r3, [sp, #12]
    25c8:	f023 0302 	bic.w	r3, r3, #2
    25cc:	9303      	str	r3, [sp, #12]
    25ce:	9b01      	ldr	r3, [sp, #4]
    25d0:	889b      	ldrh	r3, [r3, #4]
    25d2:	005b      	lsls	r3, r3, #1
    25d4:	9a03      	ldr	r2, [sp, #12]
    25d6:	4313      	orrs	r3, r2
    25d8:	9303      	str	r3, [sp, #12]
    25da:	4a03      	ldr	r2, [pc, #12]	; (25e8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    25dc:	9b03      	ldr	r3, [sp, #12]
    25de:	6113      	str	r3, [r2, #16]
    25e0:	bf00      	nop
    25e2:	b004      	add	sp, #16
    25e4:	4770      	bx	lr
    25e6:	bf00      	nop
    25e8:	40048000 	.word	0x40048000

000025ec <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
    25ec:	b084      	sub	sp, #16
    25ee:	9001      	str	r0, [sp, #4]
    25f0:	4b09      	ldr	r3, [pc, #36]	; (2618 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    25f2:	685b      	ldr	r3, [r3, #4]
    25f4:	9303      	str	r3, [sp, #12]
    25f6:	9b03      	ldr	r3, [sp, #12]
    25f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    25fc:	9303      	str	r3, [sp, #12]
    25fe:	9b01      	ldr	r3, [sp, #4]
    2600:	889b      	ldrh	r3, [r3, #4]
    2602:	02db      	lsls	r3, r3, #11
    2604:	9a03      	ldr	r2, [sp, #12]
    2606:	4313      	orrs	r3, r2
    2608:	9303      	str	r3, [sp, #12]
    260a:	4a03      	ldr	r2, [pc, #12]	; (2618 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    260c:	9b03      	ldr	r3, [sp, #12]
    260e:	6053      	str	r3, [r2, #4]
    2610:	bf00      	nop
    2612:	b004      	add	sp, #16
    2614:	4770      	bx	lr
    2616:	bf00      	nop
    2618:	40048000 	.word	0x40048000

0000261c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
    261c:	b084      	sub	sp, #16
    261e:	9001      	str	r0, [sp, #4]
    2620:	4913      	ldr	r1, [pc, #76]	; (2670 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2622:	9b01      	ldr	r3, [sp, #4]
    2624:	681a      	ldr	r2, [r3, #0]
    2626:	4813      	ldr	r0, [pc, #76]	; (2674 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2628:	4613      	mov	r3, r2
    262a:	00db      	lsls	r3, r3, #3
    262c:	4413      	add	r3, r2
    262e:	4403      	add	r3, r0
    2630:	3306      	adds	r3, #6
    2632:	781b      	ldrb	r3, [r3, #0]
    2634:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2638:	9303      	str	r3, [sp, #12]
    263a:	9b03      	ldr	r3, [sp, #12]
    263c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2640:	9303      	str	r3, [sp, #12]
    2642:	9b01      	ldr	r3, [sp, #4]
    2644:	889b      	ldrh	r3, [r3, #4]
    2646:	079b      	lsls	r3, r3, #30
    2648:	9a03      	ldr	r2, [sp, #12]
    264a:	4313      	orrs	r3, r2
    264c:	9303      	str	r3, [sp, #12]
    264e:	4908      	ldr	r1, [pc, #32]	; (2670 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2650:	9b01      	ldr	r3, [sp, #4]
    2652:	681a      	ldr	r2, [r3, #0]
    2654:	4807      	ldr	r0, [pc, #28]	; (2674 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2656:	4613      	mov	r3, r2
    2658:	00db      	lsls	r3, r3, #3
    265a:	4413      	add	r3, r2
    265c:	4403      	add	r3, r0
    265e:	3306      	adds	r3, #6
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	461a      	mov	r2, r3
    2664:	9b03      	ldr	r3, [sp, #12]
    2666:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    266a:	bf00      	nop
    266c:	b004      	add	sp, #16
    266e:	4770      	bx	lr
    2670:	40065000 	.word	0x40065000
    2674:	0000b660 	.word	0x0000b660

00002678 <Clock_Ip_ClockSetSimGate_TrustedCall>:
    2678:	b086      	sub	sp, #24
    267a:	9001      	str	r0, [sp, #4]
    267c:	9b01      	ldr	r3, [sp, #4]
    267e:	889b      	ldrh	r3, [r3, #4]
    2680:	9305      	str	r3, [sp, #20]
    2682:	9b01      	ldr	r3, [sp, #4]
    2684:	681a      	ldr	r2, [r3, #0]
    2686:	4910      	ldr	r1, [pc, #64]	; (26c8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2688:	4613      	mov	r3, r2
    268a:	00db      	lsls	r3, r3, #3
    268c:	4413      	add	r3, r2
    268e:	440b      	add	r3, r1
    2690:	3306      	adds	r3, #6
    2692:	781b      	ldrb	r3, [r3, #0]
    2694:	9304      	str	r3, [sp, #16]
    2696:	4b0d      	ldr	r3, [pc, #52]	; (26cc <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    269a:	9303      	str	r3, [sp, #12]
    269c:	2201      	movs	r2, #1
    269e:	9b04      	ldr	r3, [sp, #16]
    26a0:	fa02 f303 	lsl.w	r3, r2, r3
    26a4:	43db      	mvns	r3, r3
    26a6:	9a03      	ldr	r2, [sp, #12]
    26a8:	4013      	ands	r3, r2
    26aa:	9303      	str	r3, [sp, #12]
    26ac:	9a05      	ldr	r2, [sp, #20]
    26ae:	9b04      	ldr	r3, [sp, #16]
    26b0:	fa02 f303 	lsl.w	r3, r2, r3
    26b4:	9a03      	ldr	r2, [sp, #12]
    26b6:	4313      	orrs	r3, r2
    26b8:	9303      	str	r3, [sp, #12]
    26ba:	4a04      	ldr	r2, [pc, #16]	; (26cc <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    26bc:	9b03      	ldr	r3, [sp, #12]
    26be:	6413      	str	r3, [r2, #64]	; 0x40
    26c0:	bf00      	nop
    26c2:	b006      	add	sp, #24
    26c4:	4770      	bx	lr
    26c6:	bf00      	nop
    26c8:	0000b660 	.word	0x0000b660
    26cc:	40048000 	.word	0x40048000

000026d0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
    26d0:	b084      	sub	sp, #16
    26d2:	9001      	str	r0, [sp, #4]
    26d4:	4b0a      	ldr	r3, [pc, #40]	; (2700 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26d8:	9303      	str	r3, [sp, #12]
    26da:	9b01      	ldr	r3, [sp, #4]
    26dc:	889b      	ldrh	r3, [r3, #4]
    26de:	2b01      	cmp	r3, #1
    26e0:	d104      	bne.n	26ec <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    26e2:	9b03      	ldr	r3, [sp, #12]
    26e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26e8:	9303      	str	r3, [sp, #12]
    26ea:	e003      	b.n	26f4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    26ec:	9b03      	ldr	r3, [sp, #12]
    26ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    26f2:	9303      	str	r3, [sp, #12]
    26f4:	4a02      	ldr	r2, [pc, #8]	; (2700 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    26f6:	9b03      	ldr	r3, [sp, #12]
    26f8:	6693      	str	r3, [r2, #104]	; 0x68
    26fa:	bf00      	nop
    26fc:	b004      	add	sp, #16
    26fe:	4770      	bx	lr
    2700:	40048000 	.word	0x40048000

00002704 <Clock_Ip_InternalOscillatorEmpty>:
    2704:	b082      	sub	sp, #8
    2706:	9001      	str	r0, [sp, #4]
    2708:	bf00      	nop
    270a:	b002      	add	sp, #8
    270c:	4770      	bx	lr

0000270e <Clock_Ip_InternalOscillatorEmpty_Disable>:
    270e:	b082      	sub	sp, #8
    2710:	9001      	str	r0, [sp, #4]
    2712:	bf00      	nop
    2714:	b002      	add	sp, #8
    2716:	4770      	bx	lr

00002718 <Clock_Ip_SetSirc>:
    2718:	b500      	push	{lr}
    271a:	b083      	sub	sp, #12
    271c:	9001      	str	r0, [sp, #4]
    271e:	9b01      	ldr	r3, [sp, #4]
    2720:	2b00      	cmp	r3, #0
    2722:	d002      	beq.n	272a <Clock_Ip_SetSirc+0x12>
    2724:	9801      	ldr	r0, [sp, #4]
    2726:	f000 f8d1 	bl	28cc <Clock_Ip_SetSirc_TrustedCall>
    272a:	bf00      	nop
    272c:	b003      	add	sp, #12
    272e:	f85d fb04 	ldr.w	pc, [sp], #4

00002732 <Clock_Ip_EnableSirc>:
    2732:	b500      	push	{lr}
    2734:	b083      	sub	sp, #12
    2736:	9001      	str	r0, [sp, #4]
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	2b00      	cmp	r3, #0
    273c:	d002      	beq.n	2744 <Clock_Ip_EnableSirc+0x12>
    273e:	9801      	ldr	r0, [sp, #4]
    2740:	f000 f950 	bl	29e4 <Clock_Ip_EnableSirc_TrustedCall>
    2744:	bf00      	nop
    2746:	b003      	add	sp, #12
    2748:	f85d fb04 	ldr.w	pc, [sp], #4

0000274c <Clock_Ip_DisableSirc>:
    274c:	b500      	push	{lr}
    274e:	b083      	sub	sp, #12
    2750:	9001      	str	r0, [sp, #4]
    2752:	9801      	ldr	r0, [sp, #4]
    2754:	f000 f98e 	bl	2a74 <Clock_Ip_DisableSirc_TrustedCall>
    2758:	bf00      	nop
    275a:	b003      	add	sp, #12
    275c:	f85d fb04 	ldr.w	pc, [sp], #4

00002760 <Clock_Ip_SetSircVlp>:
    2760:	b500      	push	{lr}
    2762:	b083      	sub	sp, #12
    2764:	9001      	str	r0, [sp, #4]
    2766:	9b01      	ldr	r3, [sp, #4]
    2768:	2b00      	cmp	r3, #0
    276a:	d002      	beq.n	2772 <Clock_Ip_SetSircVlp+0x12>
    276c:	9801      	ldr	r0, [sp, #4]
    276e:	f000 f999 	bl	2aa4 <Clock_Ip_SetSircVlp_TrustedCall>
    2772:	bf00      	nop
    2774:	b003      	add	sp, #12
    2776:	f85d fb04 	ldr.w	pc, [sp], #4

0000277a <Clock_Ip_EnableSircVlp>:
    277a:	b500      	push	{lr}
    277c:	b083      	sub	sp, #12
    277e:	9001      	str	r0, [sp, #4]
    2780:	9b01      	ldr	r3, [sp, #4]
    2782:	2b00      	cmp	r3, #0
    2784:	d002      	beq.n	278c <Clock_Ip_EnableSircVlp+0x12>
    2786:	9801      	ldr	r0, [sp, #4]
    2788:	f000 f9b0 	bl	2aec <Clock_Ip_EnableSircVlp_TrustedCall>
    278c:	bf00      	nop
    278e:	b003      	add	sp, #12
    2790:	f85d fb04 	ldr.w	pc, [sp], #4

00002794 <Clock_Ip_DisableSircVlp>:
    2794:	b500      	push	{lr}
    2796:	b083      	sub	sp, #12
    2798:	9001      	str	r0, [sp, #4]
    279a:	9801      	ldr	r0, [sp, #4]
    279c:	f000 f9ba 	bl	2b14 <Clock_Ip_DisableSircVlp_TrustedCall>
    27a0:	bf00      	nop
    27a2:	b003      	add	sp, #12
    27a4:	f85d fb04 	ldr.w	pc, [sp], #4

000027a8 <Clock_Ip_SetSircStop>:
    27a8:	b500      	push	{lr}
    27aa:	b083      	sub	sp, #12
    27ac:	9001      	str	r0, [sp, #4]
    27ae:	9b01      	ldr	r3, [sp, #4]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d002      	beq.n	27ba <Clock_Ip_SetSircStop+0x12>
    27b4:	9801      	ldr	r0, [sp, #4]
    27b6:	f000 f9bd 	bl	2b34 <Clock_Ip_SetSircStop_TrustedCall>
    27ba:	bf00      	nop
    27bc:	b003      	add	sp, #12
    27be:	f85d fb04 	ldr.w	pc, [sp], #4

000027c2 <Clock_Ip_EnableSircStop>:
    27c2:	b500      	push	{lr}
    27c4:	b083      	sub	sp, #12
    27c6:	9001      	str	r0, [sp, #4]
    27c8:	9b01      	ldr	r3, [sp, #4]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d002      	beq.n	27d4 <Clock_Ip_EnableSircStop+0x12>
    27ce:	9801      	ldr	r0, [sp, #4]
    27d0:	f000 f9d4 	bl	2b7c <Clock_Ip_EnableSircStop_TrustedCall>
    27d4:	bf00      	nop
    27d6:	b003      	add	sp, #12
    27d8:	f85d fb04 	ldr.w	pc, [sp], #4

000027dc <Clock_Ip_DisableSircStop>:
    27dc:	b500      	push	{lr}
    27de:	b083      	sub	sp, #12
    27e0:	9001      	str	r0, [sp, #4]
    27e2:	9801      	ldr	r0, [sp, #4]
    27e4:	f000 f9de 	bl	2ba4 <Clock_Ip_DisableSircStop_TrustedCall>
    27e8:	bf00      	nop
    27ea:	b003      	add	sp, #12
    27ec:	f85d fb04 	ldr.w	pc, [sp], #4

000027f0 <SetInputSouceSytemClock>:
    27f0:	b500      	push	{lr}
    27f2:	b089      	sub	sp, #36	; 0x24
    27f4:	9001      	str	r0, [sp, #4]
    27f6:	2300      	movs	r3, #0
    27f8:	f88d 301f 	strb.w	r3, [sp, #31]
    27fc:	4b20      	ldr	r3, [pc, #128]	; (2880 <SetInputSouceSytemClock+0x90>)
    27fe:	695b      	ldr	r3, [r3, #20]
    2800:	9306      	str	r3, [sp, #24]
    2802:	9b06      	ldr	r3, [sp, #24]
    2804:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2808:	9306      	str	r3, [sp, #24]
    280a:	9b01      	ldr	r3, [sp, #4]
    280c:	061b      	lsls	r3, r3, #24
    280e:	9a06      	ldr	r2, [sp, #24]
    2810:	4313      	orrs	r3, r2
    2812:	9306      	str	r3, [sp, #24]
    2814:	4a1a      	ldr	r2, [pc, #104]	; (2880 <SetInputSouceSytemClock+0x90>)
    2816:	9b06      	ldr	r3, [sp, #24]
    2818:	6153      	str	r3, [r2, #20]
    281a:	aa02      	add	r2, sp, #8
    281c:	a903      	add	r1, sp, #12
    281e:	a804      	add	r0, sp, #16
    2820:	f24c 3350 	movw	r3, #50000	; 0xc350
    2824:	f7ff f9ac 	bl	1b80 <Clock_Ip_StartTimeout>
    2828:	4b15      	ldr	r3, [pc, #84]	; (2880 <SetInputSouceSytemClock+0x90>)
    282a:	691b      	ldr	r3, [r3, #16]
    282c:	0e1b      	lsrs	r3, r3, #24
    282e:	f003 030f 	and.w	r3, r3, #15
    2832:	9a01      	ldr	r2, [sp, #4]
    2834:	429a      	cmp	r2, r3
    2836:	bf0c      	ite	eq
    2838:	2301      	moveq	r3, #1
    283a:	2300      	movne	r3, #0
    283c:	b2db      	uxtb	r3, r3
    283e:	9305      	str	r3, [sp, #20]
    2840:	9a02      	ldr	r2, [sp, #8]
    2842:	a903      	add	r1, sp, #12
    2844:	ab04      	add	r3, sp, #16
    2846:	4618      	mov	r0, r3
    2848:	f7ff f9b4 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    284c:	4603      	mov	r3, r0
    284e:	f88d 301f 	strb.w	r3, [sp, #31]
    2852:	9b05      	ldr	r3, [sp, #20]
    2854:	2b00      	cmp	r3, #0
    2856:	d106      	bne.n	2866 <SetInputSouceSytemClock+0x76>
    2858:	f89d 301f 	ldrb.w	r3, [sp, #31]
    285c:	f083 0301 	eor.w	r3, r3, #1
    2860:	b2db      	uxtb	r3, r3
    2862:	2b00      	cmp	r3, #0
    2864:	d1e0      	bne.n	2828 <SetInputSouceSytemClock+0x38>
    2866:	f89d 301f 	ldrb.w	r3, [sp, #31]
    286a:	2b00      	cmp	r3, #0
    286c:	d003      	beq.n	2876 <SetInputSouceSytemClock+0x86>
    286e:	2105      	movs	r1, #5
    2870:	2001      	movs	r0, #1
    2872:	f7ff f975 	bl	1b60 <Clock_Ip_ReportClockErrors>
    2876:	bf00      	nop
    2878:	b009      	add	sp, #36	; 0x24
    287a:	f85d fb04 	ldr.w	pc, [sp], #4
    287e:	bf00      	nop
    2880:	40064000 	.word	0x40064000

00002884 <Clock_Ip_SetFirc>:
    2884:	b500      	push	{lr}
    2886:	b083      	sub	sp, #12
    2888:	9001      	str	r0, [sp, #4]
    288a:	9b01      	ldr	r3, [sp, #4]
    288c:	2b00      	cmp	r3, #0
    288e:	d002      	beq.n	2896 <Clock_Ip_SetFirc+0x12>
    2890:	9801      	ldr	r0, [sp, #4]
    2892:	f000 f997 	bl	2bc4 <Clock_Ip_SetFirc_TrustedCall>
    2896:	bf00      	nop
    2898:	b003      	add	sp, #12
    289a:	f85d fb04 	ldr.w	pc, [sp], #4

0000289e <Clock_Ip_EnableFirc>:
    289e:	b500      	push	{lr}
    28a0:	b083      	sub	sp, #12
    28a2:	9001      	str	r0, [sp, #4]
    28a4:	9b01      	ldr	r3, [sp, #4]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d002      	beq.n	28b0 <Clock_Ip_EnableFirc+0x12>
    28aa:	9801      	ldr	r0, [sp, #4]
    28ac:	f000 fa7e 	bl	2dac <Clock_Ip_EnableFirc_TrustedCall>
    28b0:	bf00      	nop
    28b2:	b003      	add	sp, #12
    28b4:	f85d fb04 	ldr.w	pc, [sp], #4

000028b8 <Clock_Ip_DisableFirc>:
    28b8:	b500      	push	{lr}
    28ba:	b083      	sub	sp, #12
    28bc:	9001      	str	r0, [sp, #4]
    28be:	9801      	ldr	r0, [sp, #4]
    28c0:	f000 fab8 	bl	2e34 <Clock_Ip_DisableFirc_TrustedCall>
    28c4:	bf00      	nop
    28c6:	b003      	add	sp, #12
    28c8:	f85d fb04 	ldr.w	pc, [sp], #4

000028cc <Clock_Ip_SetSirc_TrustedCall>:
    28cc:	b500      	push	{lr}
    28ce:	b08b      	sub	sp, #44	; 0x2c
    28d0:	9001      	str	r0, [sp, #4]
    28d2:	2300      	movs	r3, #0
    28d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    28d8:	9b01      	ldr	r3, [sp, #4]
    28da:	2b00      	cmp	r3, #0
    28dc:	d10b      	bne.n	28f6 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    28de:	2305      	movs	r3, #5
    28e0:	9302      	str	r3, [sp, #8]
    28e2:	2301      	movs	r3, #1
    28e4:	f88d 300f 	strb.w	r3, [sp, #15]
    28e8:	2301      	movs	r3, #1
    28ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    28ee:	2301      	movs	r3, #1
    28f0:	f88d 3010 	strb.w	r3, [sp, #16]
    28f4:	e00e      	b.n	2914 <Clock_Ip_SetSirc_TrustedCall+0x48>
    28f6:	9b01      	ldr	r3, [sp, #4]
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	9302      	str	r3, [sp, #8]
    28fc:	9b01      	ldr	r3, [sp, #4]
    28fe:	79db      	ldrb	r3, [r3, #7]
    2900:	f88d 300f 	strb.w	r3, [sp, #15]
    2904:	9b01      	ldr	r3, [sp, #4]
    2906:	889b      	ldrh	r3, [r3, #4]
    2908:	f8ad 300c 	strh.w	r3, [sp, #12]
    290c:	9b01      	ldr	r3, [sp, #4]
    290e:	7a1b      	ldrb	r3, [r3, #8]
    2910:	f88d 3010 	strb.w	r3, [sp, #16]
    2914:	4b32      	ldr	r3, [pc, #200]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    291a:	4a31      	ldr	r2, [pc, #196]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    291c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2920:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2924:	4b2e      	ldr	r3, [pc, #184]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    292a:	4a2d      	ldr	r2, [pc, #180]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    292c:	f023 0301 	bic.w	r3, r3, #1
    2930:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2934:	4b2a      	ldr	r3, [pc, #168]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    293a:	4a29      	ldr	r2, [pc, #164]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    293c:	f023 0304 	bic.w	r3, r3, #4
    2940:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2944:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2948:	2b01      	cmp	r3, #1
    294a:	d144      	bne.n	29d6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    294c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2950:	4a23      	ldr	r2, [pc, #140]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2952:	f003 0301 	and.w	r3, r3, #1
    2956:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    295a:	4b21      	ldr	r3, [pc, #132]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    295c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2960:	4a1f      	ldr	r2, [pc, #124]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2962:	f043 0301 	orr.w	r3, r3, #1
    2966:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    296a:	4b1d      	ldr	r3, [pc, #116]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    296c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2970:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2974:	009b      	lsls	r3, r3, #2
    2976:	f003 0304 	and.w	r3, r3, #4
    297a:	4919      	ldr	r1, [pc, #100]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    297c:	4313      	orrs	r3, r2
    297e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2982:	aa05      	add	r2, sp, #20
    2984:	a906      	add	r1, sp, #24
    2986:	a807      	add	r0, sp, #28
    2988:	f24c 3350 	movw	r3, #50000	; 0xc350
    298c:	f7ff f8f8 	bl	1b80 <Clock_Ip_StartTimeout>
    2990:	4b13      	ldr	r3, [pc, #76]	; (29e0 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2992:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2996:	0e1b      	lsrs	r3, r3, #24
    2998:	f003 0301 	and.w	r3, r3, #1
    299c:	9308      	str	r3, [sp, #32]
    299e:	9a05      	ldr	r2, [sp, #20]
    29a0:	a906      	add	r1, sp, #24
    29a2:	ab07      	add	r3, sp, #28
    29a4:	4618      	mov	r0, r3
    29a6:	f7ff f905 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    29aa:	4603      	mov	r3, r0
    29ac:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    29b0:	9b08      	ldr	r3, [sp, #32]
    29b2:	2b00      	cmp	r3, #0
    29b4:	d106      	bne.n	29c4 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    29b6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29ba:	f083 0301 	eor.w	r3, r3, #1
    29be:	b2db      	uxtb	r3, r3
    29c0:	2b00      	cmp	r3, #0
    29c2:	d1e5      	bne.n	2990 <Clock_Ip_SetSirc_TrustedCall+0xc4>
    29c4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    29c8:	2b00      	cmp	r3, #0
    29ca:	d004      	beq.n	29d6 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    29cc:	9b02      	ldr	r3, [sp, #8]
    29ce:	4619      	mov	r1, r3
    29d0:	2001      	movs	r0, #1
    29d2:	f7ff f8c5 	bl	1b60 <Clock_Ip_ReportClockErrors>
    29d6:	bf00      	nop
    29d8:	b00b      	add	sp, #44	; 0x2c
    29da:	f85d fb04 	ldr.w	pc, [sp], #4
    29de:	bf00      	nop
    29e0:	40064000 	.word	0x40064000

000029e4 <Clock_Ip_EnableSirc_TrustedCall>:
    29e4:	b500      	push	{lr}
    29e6:	b089      	sub	sp, #36	; 0x24
    29e8:	9001      	str	r0, [sp, #4]
    29ea:	2300      	movs	r3, #0
    29ec:	f88d 301f 	strb.w	r3, [sp, #31]
    29f0:	4b1f      	ldr	r3, [pc, #124]	; (2a70 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29f6:	4a1e      	ldr	r2, [pc, #120]	; (2a70 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    29f8:	f043 0301 	orr.w	r3, r3, #1
    29fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a00:	4b1b      	ldr	r3, [pc, #108]	; (2a70 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a06:	4a1a      	ldr	r2, [pc, #104]	; (2a70 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a08:	f043 0304 	orr.w	r3, r3, #4
    2a0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a10:	aa03      	add	r2, sp, #12
    2a12:	a904      	add	r1, sp, #16
    2a14:	a805      	add	r0, sp, #20
    2a16:	f24c 3350 	movw	r3, #50000	; 0xc350
    2a1a:	f7ff f8b1 	bl	1b80 <Clock_Ip_StartTimeout>
    2a1e:	4b14      	ldr	r3, [pc, #80]	; (2a70 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2a20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a24:	0e1b      	lsrs	r3, r3, #24
    2a26:	f003 0301 	and.w	r3, r3, #1
    2a2a:	9306      	str	r3, [sp, #24]
    2a2c:	9a03      	ldr	r2, [sp, #12]
    2a2e:	a904      	add	r1, sp, #16
    2a30:	ab05      	add	r3, sp, #20
    2a32:	4618      	mov	r0, r3
    2a34:	f7ff f8be 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    2a38:	4603      	mov	r3, r0
    2a3a:	f88d 301f 	strb.w	r3, [sp, #31]
    2a3e:	9b06      	ldr	r3, [sp, #24]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d106      	bne.n	2a52 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2a44:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a48:	f083 0301 	eor.w	r3, r3, #1
    2a4c:	b2db      	uxtb	r3, r3
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d1e5      	bne.n	2a1e <Clock_Ip_EnableSirc_TrustedCall+0x3a>
    2a52:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d005      	beq.n	2a66 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    2a5a:	9b01      	ldr	r3, [sp, #4]
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	4619      	mov	r1, r3
    2a60:	2001      	movs	r0, #1
    2a62:	f7ff f87d 	bl	1b60 <Clock_Ip_ReportClockErrors>
    2a66:	bf00      	nop
    2a68:	b009      	add	sp, #36	; 0x24
    2a6a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a6e:	bf00      	nop
    2a70:	40064000 	.word	0x40064000

00002a74 <Clock_Ip_DisableSirc_TrustedCall>:
    2a74:	b082      	sub	sp, #8
    2a76:	9001      	str	r0, [sp, #4]
    2a78:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a7e:	4a08      	ldr	r2, [pc, #32]	; (2aa0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a80:	f023 0301 	bic.w	r3, r3, #1
    2a84:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a88:	4b05      	ldr	r3, [pc, #20]	; (2aa0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a8e:	4a04      	ldr	r2, [pc, #16]	; (2aa0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2a90:	f023 0304 	bic.w	r3, r3, #4
    2a94:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2a98:	bf00      	nop
    2a9a:	b002      	add	sp, #8
    2a9c:	4770      	bx	lr
    2a9e:	bf00      	nop
    2aa0:	40064000 	.word	0x40064000

00002aa4 <Clock_Ip_SetSircVlp_TrustedCall>:
    2aa4:	b082      	sub	sp, #8
    2aa6:	9001      	str	r0, [sp, #4]
    2aa8:	4b0f      	ldr	r3, [pc, #60]	; (2ae8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aae:	4a0e      	ldr	r2, [pc, #56]	; (2ae8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ab0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2ab4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2ab8:	4b0b      	ldr	r3, [pc, #44]	; (2ae8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2abe:	4a0a      	ldr	r2, [pc, #40]	; (2ae8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ac0:	f023 0304 	bic.w	r3, r3, #4
    2ac4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2ac8:	4b07      	ldr	r3, [pc, #28]	; (2ae8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2aca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2ace:	9b01      	ldr	r3, [sp, #4]
    2ad0:	7a1b      	ldrb	r3, [r3, #8]
    2ad2:	009b      	lsls	r3, r3, #2
    2ad4:	f003 0304 	and.w	r3, r3, #4
    2ad8:	4903      	ldr	r1, [pc, #12]	; (2ae8 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ada:	4313      	orrs	r3, r2
    2adc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2ae0:	bf00      	nop
    2ae2:	b002      	add	sp, #8
    2ae4:	4770      	bx	lr
    2ae6:	bf00      	nop
    2ae8:	40064000 	.word	0x40064000

00002aec <Clock_Ip_EnableSircVlp_TrustedCall>:
    2aec:	b082      	sub	sp, #8
    2aee:	9001      	str	r0, [sp, #4]
    2af0:	9b01      	ldr	r3, [sp, #4]
    2af2:	889b      	ldrh	r3, [r3, #4]
    2af4:	2b01      	cmp	r3, #1
    2af6:	d107      	bne.n	2b08 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    2af8:	4b05      	ldr	r3, [pc, #20]	; (2b10 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2afe:	4a04      	ldr	r2, [pc, #16]	; (2b10 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2b00:	f043 0304 	orr.w	r3, r3, #4
    2b04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b08:	bf00      	nop
    2b0a:	b002      	add	sp, #8
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop
    2b10:	40064000 	.word	0x40064000

00002b14 <Clock_Ip_DisableSircVlp_TrustedCall>:
    2b14:	b082      	sub	sp, #8
    2b16:	9001      	str	r0, [sp, #4]
    2b18:	4b05      	ldr	r3, [pc, #20]	; (2b30 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b1e:	4a04      	ldr	r2, [pc, #16]	; (2b30 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2b20:	f023 0304 	bic.w	r3, r3, #4
    2b24:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b28:	bf00      	nop
    2b2a:	b002      	add	sp, #8
    2b2c:	4770      	bx	lr
    2b2e:	bf00      	nop
    2b30:	40064000 	.word	0x40064000

00002b34 <Clock_Ip_SetSircStop_TrustedCall>:
    2b34:	b082      	sub	sp, #8
    2b36:	9001      	str	r0, [sp, #4]
    2b38:	4b0f      	ldr	r3, [pc, #60]	; (2b78 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b3e:	4a0e      	ldr	r2, [pc, #56]	; (2b78 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b48:	4b0b      	ldr	r3, [pc, #44]	; (2b78 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b4e:	4a0a      	ldr	r2, [pc, #40]	; (2b78 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b50:	f023 0302 	bic.w	r3, r3, #2
    2b54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b58:	4b07      	ldr	r3, [pc, #28]	; (2b78 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b5e:	9b01      	ldr	r3, [sp, #4]
    2b60:	7a5b      	ldrb	r3, [r3, #9]
    2b62:	005b      	lsls	r3, r3, #1
    2b64:	f003 0302 	and.w	r3, r3, #2
    2b68:	4903      	ldr	r1, [pc, #12]	; (2b78 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2b6a:	4313      	orrs	r3, r2
    2b6c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    2b70:	bf00      	nop
    2b72:	b002      	add	sp, #8
    2b74:	4770      	bx	lr
    2b76:	bf00      	nop
    2b78:	40064000 	.word	0x40064000

00002b7c <Clock_Ip_EnableSircStop_TrustedCall>:
    2b7c:	b082      	sub	sp, #8
    2b7e:	9001      	str	r0, [sp, #4]
    2b80:	9b01      	ldr	r3, [sp, #4]
    2b82:	889b      	ldrh	r3, [r3, #4]
    2b84:	2b01      	cmp	r3, #1
    2b86:	d107      	bne.n	2b98 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    2b88:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b8e:	4a04      	ldr	r2, [pc, #16]	; (2ba0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2b90:	f043 0302 	orr.w	r3, r3, #2
    2b94:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2b98:	bf00      	nop
    2b9a:	b002      	add	sp, #8
    2b9c:	4770      	bx	lr
    2b9e:	bf00      	nop
    2ba0:	40064000 	.word	0x40064000

00002ba4 <Clock_Ip_DisableSircStop_TrustedCall>:
    2ba4:	b082      	sub	sp, #8
    2ba6:	9001      	str	r0, [sp, #4]
    2ba8:	4b05      	ldr	r3, [pc, #20]	; (2bc0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2bae:	4a04      	ldr	r2, [pc, #16]	; (2bc0 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2bb0:	f023 0302 	bic.w	r3, r3, #2
    2bb4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    2bb8:	bf00      	nop
    2bba:	b002      	add	sp, #8
    2bbc:	4770      	bx	lr
    2bbe:	bf00      	nop
    2bc0:	40064000 	.word	0x40064000

00002bc4 <Clock_Ip_SetFirc_TrustedCall>:
    2bc4:	b500      	push	{lr}
    2bc6:	b08b      	sub	sp, #44	; 0x2c
    2bc8:	9001      	str	r0, [sp, #4]
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	4975      	ldr	r1, [pc, #468]	; (2da4 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2bd0:	4613      	mov	r3, r2
    2bd2:	00db      	lsls	r3, r3, #3
    2bd4:	4413      	add	r3, r2
    2bd6:	440b      	add	r3, r1
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	9308      	str	r3, [sp, #32]
    2bdc:	2300      	movs	r3, #0
    2bde:	f88d 301f 	strb.w	r3, [sp, #31]
    2be2:	2300      	movs	r3, #0
    2be4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2be8:	4b6f      	ldr	r3, [pc, #444]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bee:	4a6e      	ldr	r2, [pc, #440]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2bf4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2bf8:	4b6b      	ldr	r3, [pc, #428]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2bfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2c02:	2b00      	cmp	r3, #0
    2c04:	d07d      	beq.n	2d02 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	79db      	ldrb	r3, [r3, #7]
    2c0a:	461a      	mov	r2, r3
    2c0c:	4b66      	ldr	r3, [pc, #408]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c0e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2c12:	f003 0303 	and.w	r3, r3, #3
    2c16:	429a      	cmp	r2, r3
    2c18:	d10b      	bne.n	2c32 <Clock_Ip_SetFirc_TrustedCall+0x6e>
    2c1a:	9b01      	ldr	r3, [sp, #4]
    2c1c:	799b      	ldrb	r3, [r3, #6]
    2c1e:	461a      	mov	r2, r3
    2c20:	4b61      	ldr	r3, [pc, #388]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c26:	08db      	lsrs	r3, r3, #3
    2c28:	f003 0301 	and.w	r3, r3, #1
    2c2c:	429a      	cmp	r2, r3
    2c2e:	f000 80b4 	beq.w	2d9a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2c32:	4b5d      	ldr	r3, [pc, #372]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c38:	f003 0301 	and.w	r3, r3, #1
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d105      	bne.n	2c4c <Clock_Ip_SetFirc_TrustedCall+0x88>
    2c40:	2301      	movs	r3, #1
    2c42:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    2c46:	2000      	movs	r0, #0
    2c48:	f7ff fd66 	bl	2718 <Clock_Ip_SetSirc>
    2c4c:	2002      	movs	r0, #2
    2c4e:	f7ff fdcf 	bl	27f0 <SetInputSouceSytemClock>
    2c52:	4b55      	ldr	r3, [pc, #340]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c54:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2c58:	4a53      	ldr	r2, [pc, #332]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c5a:	f023 0301 	bic.w	r3, r3, #1
    2c5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2c62:	9b01      	ldr	r3, [sp, #4]
    2c64:	889b      	ldrh	r3, [r3, #4]
    2c66:	2b01      	cmp	r3, #1
    2c68:	f040 8097 	bne.w	2d9a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2c6c:	9b01      	ldr	r3, [sp, #4]
    2c6e:	79db      	ldrb	r3, [r3, #7]
    2c70:	4a4d      	ldr	r2, [pc, #308]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c72:	f003 0303 	and.w	r3, r3, #3
    2c76:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2c7a:	4b4b      	ldr	r3, [pc, #300]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c7c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2c80:	9b01      	ldr	r3, [sp, #4]
    2c82:	799b      	ldrb	r3, [r3, #6]
    2c84:	00db      	lsls	r3, r3, #3
    2c86:	f003 0308 	and.w	r3, r3, #8
    2c8a:	4313      	orrs	r3, r2
    2c8c:	4a46      	ldr	r2, [pc, #280]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2c8e:	f043 0301 	orr.w	r3, r3, #1
    2c92:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2c96:	aa03      	add	r2, sp, #12
    2c98:	a904      	add	r1, sp, #16
    2c9a:	a805      	add	r0, sp, #20
    2c9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ca0:	f7fe ff6e 	bl	1b80 <Clock_Ip_StartTimeout>
    2ca4:	4b40      	ldr	r3, [pc, #256]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2ca6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2caa:	0e1b      	lsrs	r3, r3, #24
    2cac:	f003 0301 	and.w	r3, r3, #1
    2cb0:	9306      	str	r3, [sp, #24]
    2cb2:	9a03      	ldr	r2, [sp, #12]
    2cb4:	a904      	add	r1, sp, #16
    2cb6:	ab05      	add	r3, sp, #20
    2cb8:	4618      	mov	r0, r3
    2cba:	f7fe ff7b 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    2cbe:	4603      	mov	r3, r0
    2cc0:	f88d 301f 	strb.w	r3, [sp, #31]
    2cc4:	9b06      	ldr	r3, [sp, #24]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d106      	bne.n	2cd8 <Clock_Ip_SetFirc_TrustedCall+0x114>
    2cca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cce:	f083 0301 	eor.w	r3, r3, #1
    2cd2:	b2db      	uxtb	r3, r3
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d1e5      	bne.n	2ca4 <Clock_Ip_SetFirc_TrustedCall+0xe0>
    2cd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d005      	beq.n	2cec <Clock_Ip_SetFirc_TrustedCall+0x128>
    2ce0:	9b01      	ldr	r3, [sp, #4]
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	4619      	mov	r1, r3
    2ce6:	2001      	movs	r0, #1
    2ce8:	f7fe ff3a 	bl	1b60 <Clock_Ip_ReportClockErrors>
    2cec:	2003      	movs	r0, #3
    2cee:	f7ff fd7f 	bl	27f0 <SetInputSouceSytemClock>
    2cf2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d04f      	beq.n	2d9a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2cfa:	2002      	movs	r0, #2
    2cfc:	f7ff fd26 	bl	274c <Clock_Ip_DisableSirc>
    2d00:	e04b      	b.n	2d9a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2d02:	4b29      	ldr	r3, [pc, #164]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d04:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d08:	4a27      	ldr	r2, [pc, #156]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d0a:	f023 0301 	bic.w	r3, r3, #1
    2d0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	889b      	ldrh	r3, [r3, #4]
    2d16:	2b01      	cmp	r3, #1
    2d18:	d13f      	bne.n	2d9a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2d1a:	9b01      	ldr	r3, [sp, #4]
    2d1c:	79db      	ldrb	r3, [r3, #7]
    2d1e:	4a22      	ldr	r2, [pc, #136]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d20:	f003 0303 	and.w	r3, r3, #3
    2d24:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2d28:	4b1f      	ldr	r3, [pc, #124]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d2a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d2e:	9b01      	ldr	r3, [sp, #4]
    2d30:	799b      	ldrb	r3, [r3, #6]
    2d32:	00db      	lsls	r3, r3, #3
    2d34:	f003 0308 	and.w	r3, r3, #8
    2d38:	4313      	orrs	r3, r2
    2d3a:	4a1b      	ldr	r2, [pc, #108]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d3c:	f043 0301 	orr.w	r3, r3, #1
    2d40:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2d44:	aa03      	add	r2, sp, #12
    2d46:	a904      	add	r1, sp, #16
    2d48:	a805      	add	r0, sp, #20
    2d4a:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d4e:	f7fe ff17 	bl	1b80 <Clock_Ip_StartTimeout>
    2d52:	4b15      	ldr	r3, [pc, #84]	; (2da8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d54:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d58:	0e1b      	lsrs	r3, r3, #24
    2d5a:	f003 0301 	and.w	r3, r3, #1
    2d5e:	9306      	str	r3, [sp, #24]
    2d60:	9a03      	ldr	r2, [sp, #12]
    2d62:	a904      	add	r1, sp, #16
    2d64:	ab05      	add	r3, sp, #20
    2d66:	4618      	mov	r0, r3
    2d68:	f7fe ff24 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    2d6c:	4603      	mov	r3, r0
    2d6e:	f88d 301f 	strb.w	r3, [sp, #31]
    2d72:	9b06      	ldr	r3, [sp, #24]
    2d74:	2b00      	cmp	r3, #0
    2d76:	d106      	bne.n	2d86 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2d78:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d7c:	f083 0301 	eor.w	r3, r3, #1
    2d80:	b2db      	uxtb	r3, r3
    2d82:	2b00      	cmp	r3, #0
    2d84:	d1e5      	bne.n	2d52 <Clock_Ip_SetFirc_TrustedCall+0x18e>
    2d86:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d005      	beq.n	2d9a <Clock_Ip_SetFirc_TrustedCall+0x1d6>
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	4619      	mov	r1, r3
    2d94:	2001      	movs	r0, #1
    2d96:	f7fe fee3 	bl	1b60 <Clock_Ip_ReportClockErrors>
    2d9a:	bf00      	nop
    2d9c:	b00b      	add	sp, #44	; 0x2c
    2d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    2da2:	bf00      	nop
    2da4:	0000b660 	.word	0x0000b660
    2da8:	40064000 	.word	0x40064000

00002dac <Clock_Ip_EnableFirc_TrustedCall>:
    2dac:	b500      	push	{lr}
    2dae:	b089      	sub	sp, #36	; 0x24
    2db0:	9001      	str	r0, [sp, #4]
    2db2:	2300      	movs	r3, #0
    2db4:	f88d 301f 	strb.w	r3, [sp, #31]
    2db8:	9b01      	ldr	r3, [sp, #4]
    2dba:	889b      	ldrh	r3, [r3, #4]
    2dbc:	2b01      	cmp	r3, #1
    2dbe:	d132      	bne.n	2e26 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    2dc0:	4b1b      	ldr	r3, [pc, #108]	; (2e30 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dc6:	4a1a      	ldr	r2, [pc, #104]	; (2e30 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2dc8:	f043 0301 	orr.w	r3, r3, #1
    2dcc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2dd0:	aa03      	add	r2, sp, #12
    2dd2:	a904      	add	r1, sp, #16
    2dd4:	a805      	add	r0, sp, #20
    2dd6:	f24c 3350 	movw	r3, #50000	; 0xc350
    2dda:	f7fe fed1 	bl	1b80 <Clock_Ip_StartTimeout>
    2dde:	4b14      	ldr	r3, [pc, #80]	; (2e30 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2de0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2de4:	0e1b      	lsrs	r3, r3, #24
    2de6:	f003 0301 	and.w	r3, r3, #1
    2dea:	9306      	str	r3, [sp, #24]
    2dec:	9a03      	ldr	r2, [sp, #12]
    2dee:	a904      	add	r1, sp, #16
    2df0:	ab05      	add	r3, sp, #20
    2df2:	4618      	mov	r0, r3
    2df4:	f7fe fede 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    2df8:	4603      	mov	r3, r0
    2dfa:	f88d 301f 	strb.w	r3, [sp, #31]
    2dfe:	9b06      	ldr	r3, [sp, #24]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d106      	bne.n	2e12 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2e04:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e08:	f083 0301 	eor.w	r3, r3, #1
    2e0c:	b2db      	uxtb	r3, r3
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d1e5      	bne.n	2dde <Clock_Ip_EnableFirc_TrustedCall+0x32>
    2e12:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d005      	beq.n	2e26 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    2e1a:	9b01      	ldr	r3, [sp, #4]
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	4619      	mov	r1, r3
    2e20:	2001      	movs	r0, #1
    2e22:	f7fe fe9d 	bl	1b60 <Clock_Ip_ReportClockErrors>
    2e26:	bf00      	nop
    2e28:	b009      	add	sp, #36	; 0x24
    2e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e2e:	bf00      	nop
    2e30:	40064000 	.word	0x40064000

00002e34 <Clock_Ip_DisableFirc_TrustedCall>:
    2e34:	b082      	sub	sp, #8
    2e36:	9001      	str	r0, [sp, #4]
    2e38:	4b05      	ldr	r3, [pc, #20]	; (2e50 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e3e:	4a04      	ldr	r2, [pc, #16]	; (2e50 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2e40:	f023 0301 	bic.w	r3, r3, #1
    2e44:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    2e48:	bf00      	nop
    2e4a:	b002      	add	sp, #8
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop
    2e50:	40064000 	.word	0x40064000

00002e54 <Clock_Ip_ClockMonitorEmpty>:
    2e54:	b082      	sub	sp, #8
    2e56:	9001      	str	r0, [sp, #4]
    2e58:	bf00      	nop
    2e5a:	b002      	add	sp, #8
    2e5c:	4770      	bx	lr

00002e5e <Clock_Ip_ClockMonitorEmpty_Set>:
    2e5e:	b082      	sub	sp, #8
    2e60:	9001      	str	r0, [sp, #4]
    2e62:	9100      	str	r1, [sp, #0]
    2e64:	bf00      	nop
    2e66:	b002      	add	sp, #8
    2e68:	4770      	bx	lr

00002e6a <Clock_Ip_ClockMonitorEmpty_Disable>:
    2e6a:	b082      	sub	sp, #8
    2e6c:	9001      	str	r0, [sp, #4]
    2e6e:	bf00      	nop
    2e70:	b002      	add	sp, #8
    2e72:	4770      	bx	lr

00002e74 <Clock_Ip_CallbackPllEmpty>:
    2e74:	b082      	sub	sp, #8
    2e76:	9001      	str	r0, [sp, #4]
    2e78:	bf00      	nop
    2e7a:	b002      	add	sp, #8
    2e7c:	4770      	bx	lr

00002e7e <Clock_Ip_CallbackPllEmptyComplete>:
    2e7e:	b082      	sub	sp, #8
    2e80:	9001      	str	r0, [sp, #4]
    2e82:	2302      	movs	r3, #2
    2e84:	4618      	mov	r0, r3
    2e86:	b002      	add	sp, #8
    2e88:	4770      	bx	lr

00002e8a <Clock_Ip_CallbackPllEmptyDisable>:
    2e8a:	b082      	sub	sp, #8
    2e8c:	9001      	str	r0, [sp, #4]
    2e8e:	bf00      	nop
    2e90:	b002      	add	sp, #8
    2e92:	4770      	bx	lr

00002e94 <Clock_Ip_ResetSpll>:
    2e94:	b500      	push	{lr}
    2e96:	b083      	sub	sp, #12
    2e98:	9001      	str	r0, [sp, #4]
    2e9a:	9b01      	ldr	r3, [sp, #4]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d002      	beq.n	2ea6 <Clock_Ip_ResetSpll+0x12>
    2ea0:	9801      	ldr	r0, [sp, #4]
    2ea2:	f000 f870 	bl	2f86 <Clock_Ip_ResetSpll_TrustedCall>
    2ea6:	bf00      	nop
    2ea8:	b003      	add	sp, #12
    2eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00002eae <Clock_Ip_SetSpll>:
    2eae:	b500      	push	{lr}
    2eb0:	b083      	sub	sp, #12
    2eb2:	9001      	str	r0, [sp, #4]
    2eb4:	9b01      	ldr	r3, [sp, #4]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d002      	beq.n	2ec0 <Clock_Ip_SetSpll+0x12>
    2eba:	9801      	ldr	r0, [sp, #4]
    2ebc:	f000 f89a 	bl	2ff4 <Clock_Ip_SetSpll_TrustedCall>
    2ec0:	bf00      	nop
    2ec2:	b003      	add	sp, #12
    2ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ec8 <Clock_Ip_CompleteSpll>:
    2ec8:	b500      	push	{lr}
    2eca:	b089      	sub	sp, #36	; 0x24
    2ecc:	9001      	str	r0, [sp, #4]
    2ece:	2301      	movs	r3, #1
    2ed0:	9307      	str	r3, [sp, #28]
    2ed2:	2300      	movs	r3, #0
    2ed4:	f88d 301b 	strb.w	r3, [sp, #27]
    2ed8:	4b1e      	ldr	r3, [pc, #120]	; (2f54 <Clock_Ip_CompleteSpll+0x8c>)
    2eda:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2ede:	f003 0301 	and.w	r3, r3, #1
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d02f      	beq.n	2f46 <Clock_Ip_CompleteSpll+0x7e>
    2ee6:	aa02      	add	r2, sp, #8
    2ee8:	a903      	add	r1, sp, #12
    2eea:	a804      	add	r0, sp, #16
    2eec:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ef0:	f7fe fe46 	bl	1b80 <Clock_Ip_StartTimeout>
    2ef4:	4b17      	ldr	r3, [pc, #92]	; (2f54 <Clock_Ip_CompleteSpll+0x8c>)
    2ef6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2efa:	0e1b      	lsrs	r3, r3, #24
    2efc:	f003 0301 	and.w	r3, r3, #1
    2f00:	9305      	str	r3, [sp, #20]
    2f02:	9a02      	ldr	r2, [sp, #8]
    2f04:	a903      	add	r1, sp, #12
    2f06:	ab04      	add	r3, sp, #16
    2f08:	4618      	mov	r0, r3
    2f0a:	f7fe fe53 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    2f0e:	4603      	mov	r3, r0
    2f10:	f88d 301b 	strb.w	r3, [sp, #27]
    2f14:	9b05      	ldr	r3, [sp, #20]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d106      	bne.n	2f28 <Clock_Ip_CompleteSpll+0x60>
    2f1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f1e:	f083 0301 	eor.w	r3, r3, #1
    2f22:	b2db      	uxtb	r3, r3
    2f24:	2b00      	cmp	r3, #0
    2f26:	d1e5      	bne.n	2ef4 <Clock_Ip_CompleteSpll+0x2c>
    2f28:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2f2c:	f083 0301 	eor.w	r3, r3, #1
    2f30:	b2db      	uxtb	r3, r3
    2f32:	2b00      	cmp	r3, #0
    2f34:	d002      	beq.n	2f3c <Clock_Ip_CompleteSpll+0x74>
    2f36:	2302      	movs	r3, #2
    2f38:	9307      	str	r3, [sp, #28]
    2f3a:	e006      	b.n	2f4a <Clock_Ip_CompleteSpll+0x82>
    2f3c:	9901      	ldr	r1, [sp, #4]
    2f3e:	2001      	movs	r0, #1
    2f40:	f7fe fe0e 	bl	1b60 <Clock_Ip_ReportClockErrors>
    2f44:	e001      	b.n	2f4a <Clock_Ip_CompleteSpll+0x82>
    2f46:	2300      	movs	r3, #0
    2f48:	9307      	str	r3, [sp, #28]
    2f4a:	9b07      	ldr	r3, [sp, #28]
    2f4c:	4618      	mov	r0, r3
    2f4e:	b009      	add	sp, #36	; 0x24
    2f50:	f85d fb04 	ldr.w	pc, [sp], #4
    2f54:	40064000 	.word	0x40064000

00002f58 <Clock_Ip_DisableSpll>:
    2f58:	b500      	push	{lr}
    2f5a:	b083      	sub	sp, #12
    2f5c:	9001      	str	r0, [sp, #4]
    2f5e:	9801      	ldr	r0, [sp, #4]
    2f60:	f000 f886 	bl	3070 <Clock_Ip_DisableSpll_TrustedCall>
    2f64:	bf00      	nop
    2f66:	b003      	add	sp, #12
    2f68:	f85d fb04 	ldr.w	pc, [sp], #4

00002f6c <Clock_Ip_EnableSpll>:
    2f6c:	b500      	push	{lr}
    2f6e:	b083      	sub	sp, #12
    2f70:	9001      	str	r0, [sp, #4]
    2f72:	9b01      	ldr	r3, [sp, #4]
    2f74:	2b00      	cmp	r3, #0
    2f76:	d002      	beq.n	2f7e <Clock_Ip_EnableSpll+0x12>
    2f78:	9801      	ldr	r0, [sp, #4]
    2f7a:	f000 f891 	bl	30a0 <Clock_Ip_EnableSpll_TrustedCall>
    2f7e:	bf00      	nop
    2f80:	b003      	add	sp, #12
    2f82:	f85d fb04 	ldr.w	pc, [sp], #4

00002f86 <Clock_Ip_ResetSpll_TrustedCall>:
    2f86:	b082      	sub	sp, #8
    2f88:	9001      	str	r0, [sp, #4]
    2f8a:	4b19      	ldr	r3, [pc, #100]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f8c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2f90:	4a17      	ldr	r2, [pc, #92]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f96:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2f9a:	4b15      	ldr	r3, [pc, #84]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2f9c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fa0:	4a13      	ldr	r2, [pc, #76]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2fa6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2faa:	4b11      	ldr	r3, [pc, #68]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fac:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fb0:	4a0f      	ldr	r2, [pc, #60]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fb2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2fb6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2fba:	4b0d      	ldr	r3, [pc, #52]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fbc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fc0:	4a0b      	ldr	r2, [pc, #44]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fc2:	f023 0301 	bic.w	r3, r3, #1
    2fc6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    2fca:	4b09      	ldr	r3, [pc, #36]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fcc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fd0:	4a07      	ldr	r2, [pc, #28]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2fd6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    2fda:	4b05      	ldr	r3, [pc, #20]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fdc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2fe0:	4a03      	ldr	r2, [pc, #12]	; (2ff0 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    2fe2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2fe6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    2fea:	bf00      	nop
    2fec:	b002      	add	sp, #8
    2fee:	4770      	bx	lr
    2ff0:	40064000 	.word	0x40064000

00002ff4 <Clock_Ip_SetSpll_TrustedCall>:
    2ff4:	b082      	sub	sp, #8
    2ff6:	9001      	str	r0, [sp, #4]
    2ff8:	9b01      	ldr	r3, [sp, #4]
    2ffa:	889b      	ldrh	r3, [r3, #4]
    2ffc:	2b01      	cmp	r3, #1
    2ffe:	d12f      	bne.n	3060 <Clock_Ip_SetSpll_TrustedCall+0x6c>
    3000:	4b1a      	ldr	r3, [pc, #104]	; (306c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3002:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3006:	9b01      	ldr	r3, [sp, #4]
    3008:	7b5b      	ldrb	r3, [r3, #13]
    300a:	3b01      	subs	r3, #1
    300c:	021b      	lsls	r3, r3, #8
    300e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
    3012:	9b01      	ldr	r3, [sp, #4]
    3014:	7d1b      	ldrb	r3, [r3, #20]
    3016:	3b10      	subs	r3, #16
    3018:	041b      	lsls	r3, r3, #16
    301a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
    301e:	430b      	orrs	r3, r1
    3020:	4912      	ldr	r1, [pc, #72]	; (306c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3022:	4313      	orrs	r3, r2
    3024:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608
    3028:	9b01      	ldr	r3, [sp, #4]
    302a:	7fdb      	ldrb	r3, [r3, #31]
    302c:	2b02      	cmp	r3, #2
    302e:	d011      	beq.n	3054 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3030:	2b02      	cmp	r3, #2
    3032:	dc17      	bgt.n	3064 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3034:	2b00      	cmp	r3, #0
    3036:	d002      	beq.n	303e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3038:	2b01      	cmp	r3, #1
    303a:	d005      	beq.n	3048 <Clock_Ip_SetSpll_TrustedCall+0x54>
    303c:	e012      	b.n	3064 <Clock_Ip_SetSpll_TrustedCall+0x70>
    303e:	4b0b      	ldr	r3, [pc, #44]	; (306c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3040:	2200      	movs	r2, #0
    3042:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    3046:	e00e      	b.n	3066 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3048:	4b08      	ldr	r3, [pc, #32]	; (306c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    304a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    304e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    3052:	e008      	b.n	3066 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3054:	4b05      	ldr	r3, [pc, #20]	; (306c <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    305a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    305e:	e002      	b.n	3066 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3060:	bf00      	nop
    3062:	e000      	b.n	3066 <Clock_Ip_SetSpll_TrustedCall+0x72>
    3064:	bf00      	nop
    3066:	bf00      	nop
    3068:	b002      	add	sp, #8
    306a:	4770      	bx	lr
    306c:	40064000 	.word	0x40064000

00003070 <Clock_Ip_DisableSpll_TrustedCall>:
    3070:	b082      	sub	sp, #8
    3072:	9001      	str	r0, [sp, #4]
    3074:	4b09      	ldr	r3, [pc, #36]	; (309c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3076:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    307a:	4a08      	ldr	r2, [pc, #32]	; (309c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    307c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3080:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3084:	4b05      	ldr	r3, [pc, #20]	; (309c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3086:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    308a:	4a04      	ldr	r2, [pc, #16]	; (309c <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    308c:	f023 0301 	bic.w	r3, r3, #1
    3090:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    3094:	bf00      	nop
    3096:	b002      	add	sp, #8
    3098:	4770      	bx	lr
    309a:	bf00      	nop
    309c:	40064000 	.word	0x40064000

000030a0 <Clock_Ip_EnableSpll_TrustedCall>:
    30a0:	b082      	sub	sp, #8
    30a2:	9001      	str	r0, [sp, #4]
    30a4:	9b01      	ldr	r3, [sp, #4]
    30a6:	889b      	ldrh	r3, [r3, #4]
    30a8:	2b01      	cmp	r3, #1
    30aa:	d107      	bne.n	30bc <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    30ac:	4b05      	ldr	r3, [pc, #20]	; (30c4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30ae:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30b2:	4a04      	ldr	r2, [pc, #16]	; (30c4 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    30b4:	f043 0301 	orr.w	r3, r3, #1
    30b8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    30bc:	bf00      	nop
    30be:	b002      	add	sp, #8
    30c0:	4770      	bx	lr
    30c2:	bf00      	nop
    30c4:	40064000 	.word	0x40064000

000030c8 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
    30c8:	b082      	sub	sp, #8
    30ca:	9001      	str	r0, [sp, #4]
    30cc:	9100      	str	r1, [sp, #0]
    30ce:	bf00      	nop
    30d0:	b002      	add	sp, #8
    30d2:	4770      	bx	lr

000030d4 <Clock_Ip_CallbackSelectorEmpty>:
    30d4:	b082      	sub	sp, #8
    30d6:	9001      	str	r0, [sp, #4]
    30d8:	bf00      	nop
    30da:	b002      	add	sp, #8
    30dc:	4770      	bx	lr

000030de <Clock_Ip_ResetScgRunSel>:
    30de:	b500      	push	{lr}
    30e0:	b083      	sub	sp, #12
    30e2:	9001      	str	r0, [sp, #4]
    30e4:	9b01      	ldr	r3, [sp, #4]
    30e6:	2b00      	cmp	r3, #0
    30e8:	d002      	beq.n	30f0 <Clock_Ip_ResetScgRunSel+0x12>
    30ea:	9801      	ldr	r0, [sp, #4]
    30ec:	f000 f8ee 	bl	32cc <Clock_Ip_ResetScgRunSel_TrustedCall>
    30f0:	bf00      	nop
    30f2:	b003      	add	sp, #12
    30f4:	f85d fb04 	ldr.w	pc, [sp], #4

000030f8 <Clock_Ip_SetScgRunSel>:
    30f8:	b500      	push	{lr}
    30fa:	b083      	sub	sp, #12
    30fc:	9001      	str	r0, [sp, #4]
    30fe:	9b01      	ldr	r3, [sp, #4]
    3100:	2b00      	cmp	r3, #0
    3102:	d002      	beq.n	310a <Clock_Ip_SetScgRunSel+0x12>
    3104:	9801      	ldr	r0, [sp, #4]
    3106:	f000 f8ff 	bl	3308 <Clock_Ip_SetScgRunSel_TrustedCall>
    310a:	bf00      	nop
    310c:	b003      	add	sp, #12
    310e:	f85d fb04 	ldr.w	pc, [sp], #4

00003112 <Clock_Ip_SetScgVlprSel>:
    3112:	b500      	push	{lr}
    3114:	b083      	sub	sp, #12
    3116:	9001      	str	r0, [sp, #4]
    3118:	9b01      	ldr	r3, [sp, #4]
    311a:	2b00      	cmp	r3, #0
    311c:	d002      	beq.n	3124 <Clock_Ip_SetScgVlprSel+0x12>
    311e:	9801      	ldr	r0, [sp, #4]
    3120:	f000 f912 	bl	3348 <Clock_Ip_SetScgVlprSel_TrustedCall>
    3124:	bf00      	nop
    3126:	b003      	add	sp, #12
    3128:	f85d fb04 	ldr.w	pc, [sp], #4

0000312c <Clock_Ip_ResetScgHsrunSel>:
    312c:	b500      	push	{lr}
    312e:	b083      	sub	sp, #12
    3130:	9001      	str	r0, [sp, #4]
    3132:	9b01      	ldr	r3, [sp, #4]
    3134:	2b00      	cmp	r3, #0
    3136:	d002      	beq.n	313e <Clock_Ip_ResetScgHsrunSel+0x12>
    3138:	9801      	ldr	r0, [sp, #4]
    313a:	f000 f925 	bl	3388 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
    313e:	bf00      	nop
    3140:	b003      	add	sp, #12
    3142:	f85d fb04 	ldr.w	pc, [sp], #4

00003146 <Clock_Ip_SetScgHsrunSel>:
    3146:	b500      	push	{lr}
    3148:	b083      	sub	sp, #12
    314a:	9001      	str	r0, [sp, #4]
    314c:	9b01      	ldr	r3, [sp, #4]
    314e:	2b00      	cmp	r3, #0
    3150:	d002      	beq.n	3158 <Clock_Ip_SetScgHsrunSel+0x12>
    3152:	9801      	ldr	r0, [sp, #4]
    3154:	f000 f936 	bl	33c4 <Clock_Ip_SetScgHsrunSel_TrustedCall>
    3158:	bf00      	nop
    315a:	b003      	add	sp, #12
    315c:	f85d fb04 	ldr.w	pc, [sp], #4

00003160 <Clock_Ip_ResetSimRtcSel>:
    3160:	b500      	push	{lr}
    3162:	b083      	sub	sp, #12
    3164:	9001      	str	r0, [sp, #4]
    3166:	9b01      	ldr	r3, [sp, #4]
    3168:	2b00      	cmp	r3, #0
    316a:	d002      	beq.n	3172 <Clock_Ip_ResetSimRtcSel+0x12>
    316c:	9801      	ldr	r0, [sp, #4]
    316e:	f000 f949 	bl	3404 <Clock_Ip_ResetSimRtcSel_TrustedCall>
    3172:	bf00      	nop
    3174:	b003      	add	sp, #12
    3176:	f85d fb04 	ldr.w	pc, [sp], #4

0000317a <Clock_Ip_SetSimRtcSel>:
    317a:	b500      	push	{lr}
    317c:	b083      	sub	sp, #12
    317e:	9001      	str	r0, [sp, #4]
    3180:	9b01      	ldr	r3, [sp, #4]
    3182:	2b00      	cmp	r3, #0
    3184:	d002      	beq.n	318c <Clock_Ip_SetSimRtcSel+0x12>
    3186:	9801      	ldr	r0, [sp, #4]
    3188:	f000 f958 	bl	343c <Clock_Ip_SetSimRtcSel_TrustedCall>
    318c:	bf00      	nop
    318e:	b003      	add	sp, #12
    3190:	f85d fb04 	ldr.w	pc, [sp], #4

00003194 <Clock_Ip_ResetSimLpoSel>:
    3194:	b500      	push	{lr}
    3196:	b083      	sub	sp, #12
    3198:	9001      	str	r0, [sp, #4]
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	2b00      	cmp	r3, #0
    319e:	d002      	beq.n	31a6 <Clock_Ip_ResetSimLpoSel+0x12>
    31a0:	9801      	ldr	r0, [sp, #4]
    31a2:	f000 f969 	bl	3478 <Clock_Ip_ResetSimLpoSel_TrustedCall>
    31a6:	bf00      	nop
    31a8:	b003      	add	sp, #12
    31aa:	f85d fb04 	ldr.w	pc, [sp], #4

000031ae <Clock_Ip_SetSimLpoSel>:
    31ae:	b500      	push	{lr}
    31b0:	b083      	sub	sp, #12
    31b2:	9001      	str	r0, [sp, #4]
    31b4:	9b01      	ldr	r3, [sp, #4]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d002      	beq.n	31c0 <Clock_Ip_SetSimLpoSel+0x12>
    31ba:	9801      	ldr	r0, [sp, #4]
    31bc:	f000 f978 	bl	34b0 <Clock_Ip_SetSimLpoSel_TrustedCall>
    31c0:	bf00      	nop
    31c2:	b003      	add	sp, #12
    31c4:	f85d fb04 	ldr.w	pc, [sp], #4

000031c8 <Clock_Ip_ResetScgClkoutSel>:
    31c8:	b500      	push	{lr}
    31ca:	b083      	sub	sp, #12
    31cc:	9001      	str	r0, [sp, #4]
    31ce:	9b01      	ldr	r3, [sp, #4]
    31d0:	2b00      	cmp	r3, #0
    31d2:	d002      	beq.n	31da <Clock_Ip_ResetScgClkoutSel+0x12>
    31d4:	9801      	ldr	r0, [sp, #4]
    31d6:	f000 f989 	bl	34ec <Clock_Ip_ResetScgClkoutSel_TrustedCall>
    31da:	bf00      	nop
    31dc:	b003      	add	sp, #12
    31de:	f85d fb04 	ldr.w	pc, [sp], #4

000031e2 <Clock_Ip_SetScgClkoutSel>:
    31e2:	b500      	push	{lr}
    31e4:	b083      	sub	sp, #12
    31e6:	9001      	str	r0, [sp, #4]
    31e8:	9b01      	ldr	r3, [sp, #4]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d002      	beq.n	31f4 <Clock_Ip_SetScgClkoutSel+0x12>
    31ee:	9801      	ldr	r0, [sp, #4]
    31f0:	f000 f998 	bl	3524 <Clock_Ip_SetScgClkoutSel_TrustedCall>
    31f4:	bf00      	nop
    31f6:	b003      	add	sp, #12
    31f8:	f85d fb04 	ldr.w	pc, [sp], #4

000031fc <Clock_Ip_ResetSimFtmoptSel>:
    31fc:	b500      	push	{lr}
    31fe:	b083      	sub	sp, #12
    3200:	9001      	str	r0, [sp, #4]
    3202:	9b01      	ldr	r3, [sp, #4]
    3204:	2b00      	cmp	r3, #0
    3206:	d002      	beq.n	320e <Clock_Ip_ResetSimFtmoptSel+0x12>
    3208:	9801      	ldr	r0, [sp, #4]
    320a:	f000 f9a9 	bl	3560 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
    320e:	bf00      	nop
    3210:	b003      	add	sp, #12
    3212:	f85d fb04 	ldr.w	pc, [sp], #4

00003216 <Clock_Ip_SetSimFtmoptSel>:
    3216:	b500      	push	{lr}
    3218:	b083      	sub	sp, #12
    321a:	9001      	str	r0, [sp, #4]
    321c:	9b01      	ldr	r3, [sp, #4]
    321e:	2b00      	cmp	r3, #0
    3220:	d002      	beq.n	3228 <Clock_Ip_SetSimFtmoptSel+0x12>
    3222:	9801      	ldr	r0, [sp, #4]
    3224:	f000 f9e6 	bl	35f4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
    3228:	bf00      	nop
    322a:	b003      	add	sp, #12
    322c:	f85d fb04 	ldr.w	pc, [sp], #4

00003230 <Clock_Ip_ResetSimClkoutSel>:
    3230:	b500      	push	{lr}
    3232:	b083      	sub	sp, #12
    3234:	9001      	str	r0, [sp, #4]
    3236:	9b01      	ldr	r3, [sp, #4]
    3238:	2b00      	cmp	r3, #0
    323a:	d002      	beq.n	3242 <Clock_Ip_ResetSimClkoutSel+0x12>
    323c:	9801      	ldr	r0, [sp, #4]
    323e:	f000 fa25 	bl	368c <Clock_Ip_ResetSimClkoutSel_TrustedCall>
    3242:	bf00      	nop
    3244:	b003      	add	sp, #12
    3246:	f85d fb04 	ldr.w	pc, [sp], #4

0000324a <Clock_Ip_SetSimClkoutSel>:
    324a:	b500      	push	{lr}
    324c:	b083      	sub	sp, #12
    324e:	9001      	str	r0, [sp, #4]
    3250:	9b01      	ldr	r3, [sp, #4]
    3252:	2b00      	cmp	r3, #0
    3254:	d002      	beq.n	325c <Clock_Ip_SetSimClkoutSel+0x12>
    3256:	9801      	ldr	r0, [sp, #4]
    3258:	f000 fa2a 	bl	36b0 <Clock_Ip_SetSimClkoutSel_TrustedCall>
    325c:	bf00      	nop
    325e:	b003      	add	sp, #12
    3260:	f85d fb04 	ldr.w	pc, [sp], #4

00003264 <Clock_Ip_ResetPccPcsSelect>:
    3264:	b500      	push	{lr}
    3266:	b083      	sub	sp, #12
    3268:	9001      	str	r0, [sp, #4]
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	2b00      	cmp	r3, #0
    326e:	d002      	beq.n	3276 <Clock_Ip_ResetPccPcsSelect+0x12>
    3270:	9801      	ldr	r0, [sp, #4]
    3272:	f000 fa3b 	bl	36ec <Clock_Ip_ResetPccPcsSelect_TrustedCall>
    3276:	bf00      	nop
    3278:	b003      	add	sp, #12
    327a:	f85d fb04 	ldr.w	pc, [sp], #4

0000327e <Clock_Ip_SetPccPcsSelect>:
    327e:	b500      	push	{lr}
    3280:	b083      	sub	sp, #12
    3282:	9001      	str	r0, [sp, #4]
    3284:	9b01      	ldr	r3, [sp, #4]
    3286:	2b00      	cmp	r3, #0
    3288:	d002      	beq.n	3290 <Clock_Ip_SetPccPcsSelect+0x12>
    328a:	9801      	ldr	r0, [sp, #4]
    328c:	f000 fa56 	bl	373c <Clock_Ip_SetPccPcsSelect_TrustedCall>
    3290:	bf00      	nop
    3292:	b003      	add	sp, #12
    3294:	f85d fb04 	ldr.w	pc, [sp], #4

00003298 <Clock_Ip_ResetSimTraceSel>:
    3298:	b500      	push	{lr}
    329a:	b083      	sub	sp, #12
    329c:	9001      	str	r0, [sp, #4]
    329e:	9b01      	ldr	r3, [sp, #4]
    32a0:	2b00      	cmp	r3, #0
    32a2:	d002      	beq.n	32aa <Clock_Ip_ResetSimTraceSel+0x12>
    32a4:	9801      	ldr	r0, [sp, #4]
    32a6:	f000 fa79 	bl	379c <Clock_Ip_ResetSimTraceSel_TrustedCall>
    32aa:	bf00      	nop
    32ac:	b003      	add	sp, #12
    32ae:	f85d fb04 	ldr.w	pc, [sp], #4

000032b2 <Clock_Ip_SetSimTraceSel>:
    32b2:	b500      	push	{lr}
    32b4:	b083      	sub	sp, #12
    32b6:	9001      	str	r0, [sp, #4]
    32b8:	9b01      	ldr	r3, [sp, #4]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d002      	beq.n	32c4 <Clock_Ip_SetSimTraceSel+0x12>
    32be:	9801      	ldr	r0, [sp, #4]
    32c0:	f000 fa8a 	bl	37d8 <Clock_Ip_SetSimTraceSel_TrustedCall>
    32c4:	bf00      	nop
    32c6:	b003      	add	sp, #12
    32c8:	f85d fb04 	ldr.w	pc, [sp], #4

000032cc <Clock_Ip_ResetScgRunSel_TrustedCall>:
    32cc:	b084      	sub	sp, #16
    32ce:	9001      	str	r0, [sp, #4]
    32d0:	4b0b      	ldr	r3, [pc, #44]	; (3300 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    32d2:	795b      	ldrb	r3, [r3, #5]
    32d4:	9303      	str	r3, [sp, #12]
    32d6:	4b0b      	ldr	r3, [pc, #44]	; (3304 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32d8:	695b      	ldr	r3, [r3, #20]
    32da:	9302      	str	r3, [sp, #8]
    32dc:	9b02      	ldr	r3, [sp, #8]
    32de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    32e2:	9302      	str	r3, [sp, #8]
    32e4:	9b03      	ldr	r3, [sp, #12]
    32e6:	061b      	lsls	r3, r3, #24
    32e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    32ec:	9a02      	ldr	r2, [sp, #8]
    32ee:	4313      	orrs	r3, r2
    32f0:	9302      	str	r3, [sp, #8]
    32f2:	4a04      	ldr	r2, [pc, #16]	; (3304 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    32f4:	9b02      	ldr	r3, [sp, #8]
    32f6:	6153      	str	r3, [r2, #20]
    32f8:	bf00      	nop
    32fa:	b004      	add	sp, #16
    32fc:	4770      	bx	lr
    32fe:	bf00      	nop
    3300:	0000b9c8 	.word	0x0000b9c8
    3304:	40064000 	.word	0x40064000

00003308 <Clock_Ip_SetScgRunSel_TrustedCall>:
    3308:	b084      	sub	sp, #16
    330a:	9001      	str	r0, [sp, #4]
    330c:	9b01      	ldr	r3, [sp, #4]
    330e:	685b      	ldr	r3, [r3, #4]
    3310:	4a0b      	ldr	r2, [pc, #44]	; (3340 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3312:	5cd3      	ldrb	r3, [r2, r3]
    3314:	9303      	str	r3, [sp, #12]
    3316:	4b0b      	ldr	r3, [pc, #44]	; (3344 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3318:	695b      	ldr	r3, [r3, #20]
    331a:	9302      	str	r3, [sp, #8]
    331c:	9b02      	ldr	r3, [sp, #8]
    331e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3322:	9302      	str	r3, [sp, #8]
    3324:	9b03      	ldr	r3, [sp, #12]
    3326:	061b      	lsls	r3, r3, #24
    3328:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    332c:	9a02      	ldr	r2, [sp, #8]
    332e:	4313      	orrs	r3, r2
    3330:	9302      	str	r3, [sp, #8]
    3332:	4a04      	ldr	r2, [pc, #16]	; (3344 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3334:	9b02      	ldr	r3, [sp, #8]
    3336:	6153      	str	r3, [r2, #20]
    3338:	bf00      	nop
    333a:	b004      	add	sp, #16
    333c:	4770      	bx	lr
    333e:	bf00      	nop
    3340:	0000b9c8 	.word	0x0000b9c8
    3344:	40064000 	.word	0x40064000

00003348 <Clock_Ip_SetScgVlprSel_TrustedCall>:
    3348:	b084      	sub	sp, #16
    334a:	9001      	str	r0, [sp, #4]
    334c:	9b01      	ldr	r3, [sp, #4]
    334e:	685b      	ldr	r3, [r3, #4]
    3350:	4a0b      	ldr	r2, [pc, #44]	; (3380 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3352:	5cd3      	ldrb	r3, [r2, r3]
    3354:	9303      	str	r3, [sp, #12]
    3356:	4b0b      	ldr	r3, [pc, #44]	; (3384 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3358:	699b      	ldr	r3, [r3, #24]
    335a:	9302      	str	r3, [sp, #8]
    335c:	9b02      	ldr	r3, [sp, #8]
    335e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3362:	9302      	str	r3, [sp, #8]
    3364:	9b03      	ldr	r3, [sp, #12]
    3366:	061b      	lsls	r3, r3, #24
    3368:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    336c:	9a02      	ldr	r2, [sp, #8]
    336e:	4313      	orrs	r3, r2
    3370:	9302      	str	r3, [sp, #8]
    3372:	4a04      	ldr	r2, [pc, #16]	; (3384 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3374:	9b02      	ldr	r3, [sp, #8]
    3376:	6193      	str	r3, [r2, #24]
    3378:	bf00      	nop
    337a:	b004      	add	sp, #16
    337c:	4770      	bx	lr
    337e:	bf00      	nop
    3380:	0000b9c8 	.word	0x0000b9c8
    3384:	40064000 	.word	0x40064000

00003388 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:
    3388:	b084      	sub	sp, #16
    338a:	9001      	str	r0, [sp, #4]
    338c:	4b0b      	ldr	r3, [pc, #44]	; (33bc <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    338e:	795b      	ldrb	r3, [r3, #5]
    3390:	9303      	str	r3, [sp, #12]
    3392:	4b0b      	ldr	r3, [pc, #44]	; (33c0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3394:	69db      	ldr	r3, [r3, #28]
    3396:	9302      	str	r3, [sp, #8]
    3398:	9b02      	ldr	r3, [sp, #8]
    339a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    339e:	9302      	str	r3, [sp, #8]
    33a0:	9b03      	ldr	r3, [sp, #12]
    33a2:	061b      	lsls	r3, r3, #24
    33a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33a8:	9a02      	ldr	r2, [sp, #8]
    33aa:	4313      	orrs	r3, r2
    33ac:	9302      	str	r3, [sp, #8]
    33ae:	4a04      	ldr	r2, [pc, #16]	; (33c0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    33b0:	9b02      	ldr	r3, [sp, #8]
    33b2:	61d3      	str	r3, [r2, #28]
    33b4:	bf00      	nop
    33b6:	b004      	add	sp, #16
    33b8:	4770      	bx	lr
    33ba:	bf00      	nop
    33bc:	0000b9c8 	.word	0x0000b9c8
    33c0:	40064000 	.word	0x40064000

000033c4 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
    33c4:	b084      	sub	sp, #16
    33c6:	9001      	str	r0, [sp, #4]
    33c8:	9b01      	ldr	r3, [sp, #4]
    33ca:	685b      	ldr	r3, [r3, #4]
    33cc:	4a0b      	ldr	r2, [pc, #44]	; (33fc <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    33ce:	5cd3      	ldrb	r3, [r2, r3]
    33d0:	9303      	str	r3, [sp, #12]
    33d2:	4b0b      	ldr	r3, [pc, #44]	; (3400 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33d4:	69db      	ldr	r3, [r3, #28]
    33d6:	9302      	str	r3, [sp, #8]
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33de:	9302      	str	r3, [sp, #8]
    33e0:	9b03      	ldr	r3, [sp, #12]
    33e2:	061b      	lsls	r3, r3, #24
    33e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33e8:	9a02      	ldr	r2, [sp, #8]
    33ea:	4313      	orrs	r3, r2
    33ec:	9302      	str	r3, [sp, #8]
    33ee:	4a04      	ldr	r2, [pc, #16]	; (3400 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    33f0:	9b02      	ldr	r3, [sp, #8]
    33f2:	61d3      	str	r3, [r2, #28]
    33f4:	bf00      	nop
    33f6:	b004      	add	sp, #16
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop
    33fc:	0000b9c8 	.word	0x0000b9c8
    3400:	40064000 	.word	0x40064000

00003404 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
    3404:	b084      	sub	sp, #16
    3406:	9001      	str	r0, [sp, #4]
    3408:	4b0a      	ldr	r3, [pc, #40]	; (3434 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    340a:	7b9b      	ldrb	r3, [r3, #14]
    340c:	9303      	str	r3, [sp, #12]
    340e:	4b0a      	ldr	r3, [pc, #40]	; (3438 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3410:	691b      	ldr	r3, [r3, #16]
    3412:	9302      	str	r3, [sp, #8]
    3414:	9b02      	ldr	r3, [sp, #8]
    3416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    341a:	9302      	str	r3, [sp, #8]
    341c:	9b03      	ldr	r3, [sp, #12]
    341e:	011b      	lsls	r3, r3, #4
    3420:	9a02      	ldr	r2, [sp, #8]
    3422:	4313      	orrs	r3, r2
    3424:	9302      	str	r3, [sp, #8]
    3426:	4a04      	ldr	r2, [pc, #16]	; (3438 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3428:	9b02      	ldr	r3, [sp, #8]
    342a:	6113      	str	r3, [r2, #16]
    342c:	bf00      	nop
    342e:	b004      	add	sp, #16
    3430:	4770      	bx	lr
    3432:	bf00      	nop
    3434:	0000b970 	.word	0x0000b970
    3438:	40048000 	.word	0x40048000

0000343c <Clock_Ip_SetSimRtcSel_TrustedCall>:
    343c:	b084      	sub	sp, #16
    343e:	9001      	str	r0, [sp, #4]
    3440:	9b01      	ldr	r3, [sp, #4]
    3442:	685b      	ldr	r3, [r3, #4]
    3444:	4a0a      	ldr	r2, [pc, #40]	; (3470 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3446:	5cd3      	ldrb	r3, [r2, r3]
    3448:	9303      	str	r3, [sp, #12]
    344a:	4b0a      	ldr	r3, [pc, #40]	; (3474 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    344c:	691b      	ldr	r3, [r3, #16]
    344e:	9302      	str	r3, [sp, #8]
    3450:	9b02      	ldr	r3, [sp, #8]
    3452:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3456:	9302      	str	r3, [sp, #8]
    3458:	9b03      	ldr	r3, [sp, #12]
    345a:	011b      	lsls	r3, r3, #4
    345c:	9a02      	ldr	r2, [sp, #8]
    345e:	4313      	orrs	r3, r2
    3460:	9302      	str	r3, [sp, #8]
    3462:	4a04      	ldr	r2, [pc, #16]	; (3474 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3464:	9b02      	ldr	r3, [sp, #8]
    3466:	6113      	str	r3, [r2, #16]
    3468:	bf00      	nop
    346a:	b004      	add	sp, #16
    346c:	4770      	bx	lr
    346e:	bf00      	nop
    3470:	0000b970 	.word	0x0000b970
    3474:	40048000 	.word	0x40048000

00003478 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
    3478:	b084      	sub	sp, #16
    347a:	9001      	str	r0, [sp, #4]
    347c:	4b0a      	ldr	r3, [pc, #40]	; (34a8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    347e:	785b      	ldrb	r3, [r3, #1]
    3480:	9303      	str	r3, [sp, #12]
    3482:	4b0a      	ldr	r3, [pc, #40]	; (34ac <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3484:	691b      	ldr	r3, [r3, #16]
    3486:	9302      	str	r3, [sp, #8]
    3488:	9b02      	ldr	r3, [sp, #8]
    348a:	f023 030c 	bic.w	r3, r3, #12
    348e:	9302      	str	r3, [sp, #8]
    3490:	9b03      	ldr	r3, [sp, #12]
    3492:	009b      	lsls	r3, r3, #2
    3494:	9a02      	ldr	r2, [sp, #8]
    3496:	4313      	orrs	r3, r2
    3498:	9302      	str	r3, [sp, #8]
    349a:	4a04      	ldr	r2, [pc, #16]	; (34ac <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    349c:	9b02      	ldr	r3, [sp, #8]
    349e:	6113      	str	r3, [r2, #16]
    34a0:	bf00      	nop
    34a2:	b004      	add	sp, #16
    34a4:	4770      	bx	lr
    34a6:	bf00      	nop
    34a8:	0000ba28 	.word	0x0000ba28
    34ac:	40048000 	.word	0x40048000

000034b0 <Clock_Ip_SetSimLpoSel_TrustedCall>:
    34b0:	b084      	sub	sp, #16
    34b2:	9001      	str	r0, [sp, #4]
    34b4:	9b01      	ldr	r3, [sp, #4]
    34b6:	685b      	ldr	r3, [r3, #4]
    34b8:	4a0a      	ldr	r2, [pc, #40]	; (34e4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    34ba:	5cd3      	ldrb	r3, [r2, r3]
    34bc:	9303      	str	r3, [sp, #12]
    34be:	4b0a      	ldr	r3, [pc, #40]	; (34e8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34c0:	691b      	ldr	r3, [r3, #16]
    34c2:	9302      	str	r3, [sp, #8]
    34c4:	9b02      	ldr	r3, [sp, #8]
    34c6:	f023 030c 	bic.w	r3, r3, #12
    34ca:	9302      	str	r3, [sp, #8]
    34cc:	9b03      	ldr	r3, [sp, #12]
    34ce:	009b      	lsls	r3, r3, #2
    34d0:	9a02      	ldr	r2, [sp, #8]
    34d2:	4313      	orrs	r3, r2
    34d4:	9302      	str	r3, [sp, #8]
    34d6:	4a04      	ldr	r2, [pc, #16]	; (34e8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    34d8:	9b02      	ldr	r3, [sp, #8]
    34da:	6113      	str	r3, [r2, #16]
    34dc:	bf00      	nop
    34de:	b004      	add	sp, #16
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	0000ba28 	.word	0x0000ba28
    34e8:	40048000 	.word	0x40048000

000034ec <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
    34ec:	b084      	sub	sp, #16
    34ee:	9001      	str	r0, [sp, #4]
    34f0:	4b0a      	ldr	r3, [pc, #40]	; (351c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    34f2:	795b      	ldrb	r3, [r3, #5]
    34f4:	9303      	str	r3, [sp, #12]
    34f6:	4b0a      	ldr	r3, [pc, #40]	; (3520 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    34f8:	6a1b      	ldr	r3, [r3, #32]
    34fa:	9302      	str	r3, [sp, #8]
    34fc:	9b02      	ldr	r3, [sp, #8]
    34fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3502:	9302      	str	r3, [sp, #8]
    3504:	9b03      	ldr	r3, [sp, #12]
    3506:	061b      	lsls	r3, r3, #24
    3508:	9a02      	ldr	r2, [sp, #8]
    350a:	4313      	orrs	r3, r2
    350c:	9302      	str	r3, [sp, #8]
    350e:	4a04      	ldr	r2, [pc, #16]	; (3520 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3510:	9b02      	ldr	r3, [sp, #8]
    3512:	6213      	str	r3, [r2, #32]
    3514:	bf00      	nop
    3516:	b004      	add	sp, #16
    3518:	4770      	bx	lr
    351a:	bf00      	nop
    351c:	0000b9c8 	.word	0x0000b9c8
    3520:	40064000 	.word	0x40064000

00003524 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
    3524:	b084      	sub	sp, #16
    3526:	9001      	str	r0, [sp, #4]
    3528:	9b01      	ldr	r3, [sp, #4]
    352a:	685b      	ldr	r3, [r3, #4]
    352c:	4a0a      	ldr	r2, [pc, #40]	; (3558 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    352e:	5cd3      	ldrb	r3, [r2, r3]
    3530:	9303      	str	r3, [sp, #12]
    3532:	4b0a      	ldr	r3, [pc, #40]	; (355c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3534:	6a1b      	ldr	r3, [r3, #32]
    3536:	9302      	str	r3, [sp, #8]
    3538:	9b02      	ldr	r3, [sp, #8]
    353a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    353e:	9302      	str	r3, [sp, #8]
    3540:	9b03      	ldr	r3, [sp, #12]
    3542:	061b      	lsls	r3, r3, #24
    3544:	9a02      	ldr	r2, [sp, #8]
    3546:	4313      	orrs	r3, r2
    3548:	9302      	str	r3, [sp, #8]
    354a:	4a04      	ldr	r2, [pc, #16]	; (355c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    354c:	9b02      	ldr	r3, [sp, #8]
    354e:	6213      	str	r3, [r2, #32]
    3550:	bf00      	nop
    3552:	b004      	add	sp, #16
    3554:	4770      	bx	lr
    3556:	bf00      	nop
    3558:	0000b9c8 	.word	0x0000b9c8
    355c:	40064000 	.word	0x40064000

00003560 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
    3560:	b086      	sub	sp, #24
    3562:	9001      	str	r0, [sp, #4]
    3564:	4b20      	ldr	r3, [pc, #128]	; (35e8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3566:	795b      	ldrb	r3, [r3, #5]
    3568:	9304      	str	r3, [sp, #16]
    356a:	9b01      	ldr	r3, [sp, #4]
    356c:	681a      	ldr	r2, [r3, #0]
    356e:	491f      	ldr	r1, [pc, #124]	; (35ec <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3570:	4613      	mov	r3, r2
    3572:	00db      	lsls	r3, r3, #3
    3574:	4413      	add	r3, r2
    3576:	440b      	add	r3, r1
    3578:	781b      	ldrb	r3, [r3, #0]
    357a:	9303      	str	r3, [sp, #12]
    357c:	4b1c      	ldr	r3, [pc, #112]	; (35f0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    357e:	68db      	ldr	r3, [r3, #12]
    3580:	9305      	str	r3, [sp, #20]
    3582:	9b03      	ldr	r3, [sp, #12]
    3584:	2b03      	cmp	r3, #3
    3586:	d813      	bhi.n	35b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    3588:	9b03      	ldr	r3, [sp, #12]
    358a:	005b      	lsls	r3, r3, #1
    358c:	3318      	adds	r3, #24
    358e:	2203      	movs	r2, #3
    3590:	fa02 f303 	lsl.w	r3, r2, r3
    3594:	43db      	mvns	r3, r3
    3596:	9a05      	ldr	r2, [sp, #20]
    3598:	4013      	ands	r3, r2
    359a:	9305      	str	r3, [sp, #20]
    359c:	9b03      	ldr	r3, [sp, #12]
    359e:	005b      	lsls	r3, r3, #1
    35a0:	3318      	adds	r3, #24
    35a2:	9a04      	ldr	r2, [sp, #16]
    35a4:	fa02 f303 	lsl.w	r3, r2, r3
    35a8:	9a05      	ldr	r2, [sp, #20]
    35aa:	4313      	orrs	r3, r2
    35ac:	9305      	str	r3, [sp, #20]
    35ae:	e014      	b.n	35da <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    35b0:	9b03      	ldr	r3, [sp, #12]
    35b2:	3b04      	subs	r3, #4
    35b4:	005b      	lsls	r3, r3, #1
    35b6:	3310      	adds	r3, #16
    35b8:	2203      	movs	r2, #3
    35ba:	fa02 f303 	lsl.w	r3, r2, r3
    35be:	43db      	mvns	r3, r3
    35c0:	9a05      	ldr	r2, [sp, #20]
    35c2:	4013      	ands	r3, r2
    35c4:	9305      	str	r3, [sp, #20]
    35c6:	9b03      	ldr	r3, [sp, #12]
    35c8:	3b04      	subs	r3, #4
    35ca:	005b      	lsls	r3, r3, #1
    35cc:	3310      	adds	r3, #16
    35ce:	9a04      	ldr	r2, [sp, #16]
    35d0:	fa02 f303 	lsl.w	r3, r2, r3
    35d4:	9a05      	ldr	r2, [sp, #20]
    35d6:	4313      	orrs	r3, r2
    35d8:	9305      	str	r3, [sp, #20]
    35da:	4a05      	ldr	r2, [pc, #20]	; (35f0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    35dc:	9b05      	ldr	r3, [sp, #20]
    35de:	60d3      	str	r3, [r2, #12]
    35e0:	bf00      	nop
    35e2:	b006      	add	sp, #24
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	0000b970 	.word	0x0000b970
    35ec:	0000b660 	.word	0x0000b660
    35f0:	40048000 	.word	0x40048000

000035f4 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
    35f4:	b086      	sub	sp, #24
    35f6:	9001      	str	r0, [sp, #4]
    35f8:	9b01      	ldr	r3, [sp, #4]
    35fa:	685b      	ldr	r3, [r3, #4]
    35fc:	4a20      	ldr	r2, [pc, #128]	; (3680 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    35fe:	5cd3      	ldrb	r3, [r2, r3]
    3600:	9304      	str	r3, [sp, #16]
    3602:	9b01      	ldr	r3, [sp, #4]
    3604:	681a      	ldr	r2, [r3, #0]
    3606:	491f      	ldr	r1, [pc, #124]	; (3684 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3608:	4613      	mov	r3, r2
    360a:	00db      	lsls	r3, r3, #3
    360c:	4413      	add	r3, r2
    360e:	440b      	add	r3, r1
    3610:	781b      	ldrb	r3, [r3, #0]
    3612:	9303      	str	r3, [sp, #12]
    3614:	4b1c      	ldr	r3, [pc, #112]	; (3688 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3616:	68db      	ldr	r3, [r3, #12]
    3618:	9305      	str	r3, [sp, #20]
    361a:	9b03      	ldr	r3, [sp, #12]
    361c:	2b03      	cmp	r3, #3
    361e:	d813      	bhi.n	3648 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    3620:	9b03      	ldr	r3, [sp, #12]
    3622:	005b      	lsls	r3, r3, #1
    3624:	3318      	adds	r3, #24
    3626:	2203      	movs	r2, #3
    3628:	fa02 f303 	lsl.w	r3, r2, r3
    362c:	43db      	mvns	r3, r3
    362e:	9a05      	ldr	r2, [sp, #20]
    3630:	4013      	ands	r3, r2
    3632:	9305      	str	r3, [sp, #20]
    3634:	9b03      	ldr	r3, [sp, #12]
    3636:	005b      	lsls	r3, r3, #1
    3638:	3318      	adds	r3, #24
    363a:	9a04      	ldr	r2, [sp, #16]
    363c:	fa02 f303 	lsl.w	r3, r2, r3
    3640:	9a05      	ldr	r2, [sp, #20]
    3642:	4313      	orrs	r3, r2
    3644:	9305      	str	r3, [sp, #20]
    3646:	e014      	b.n	3672 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    3648:	9b03      	ldr	r3, [sp, #12]
    364a:	3b04      	subs	r3, #4
    364c:	005b      	lsls	r3, r3, #1
    364e:	3310      	adds	r3, #16
    3650:	2203      	movs	r2, #3
    3652:	fa02 f303 	lsl.w	r3, r2, r3
    3656:	43db      	mvns	r3, r3
    3658:	9a05      	ldr	r2, [sp, #20]
    365a:	4013      	ands	r3, r2
    365c:	9305      	str	r3, [sp, #20]
    365e:	9b03      	ldr	r3, [sp, #12]
    3660:	3b04      	subs	r3, #4
    3662:	005b      	lsls	r3, r3, #1
    3664:	3310      	adds	r3, #16
    3666:	9a04      	ldr	r2, [sp, #16]
    3668:	fa02 f303 	lsl.w	r3, r2, r3
    366c:	9a05      	ldr	r2, [sp, #20]
    366e:	4313      	orrs	r3, r2
    3670:	9305      	str	r3, [sp, #20]
    3672:	4a05      	ldr	r2, [pc, #20]	; (3688 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3674:	9b05      	ldr	r3, [sp, #20]
    3676:	60d3      	str	r3, [r2, #12]
    3678:	bf00      	nop
    367a:	b006      	add	sp, #24
    367c:	4770      	bx	lr
    367e:	bf00      	nop
    3680:	0000b970 	.word	0x0000b970
    3684:	0000b660 	.word	0x0000b660
    3688:	40048000 	.word	0x40048000

0000368c <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
    368c:	b084      	sub	sp, #16
    368e:	9001      	str	r0, [sp, #4]
    3690:	4b06      	ldr	r3, [pc, #24]	; (36ac <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3692:	685b      	ldr	r3, [r3, #4]
    3694:	9303      	str	r3, [sp, #12]
    3696:	9b03      	ldr	r3, [sp, #12]
    3698:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    369c:	9303      	str	r3, [sp, #12]
    369e:	4a03      	ldr	r2, [pc, #12]	; (36ac <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    36a0:	9b03      	ldr	r3, [sp, #12]
    36a2:	6053      	str	r3, [r2, #4]
    36a4:	bf00      	nop
    36a6:	b004      	add	sp, #16
    36a8:	4770      	bx	lr
    36aa:	bf00      	nop
    36ac:	40048000 	.word	0x40048000

000036b0 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
    36b0:	b084      	sub	sp, #16
    36b2:	9001      	str	r0, [sp, #4]
    36b4:	9b01      	ldr	r3, [sp, #4]
    36b6:	685b      	ldr	r3, [r3, #4]
    36b8:	4a0a      	ldr	r2, [pc, #40]	; (36e4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    36ba:	5cd3      	ldrb	r3, [r2, r3]
    36bc:	9303      	str	r3, [sp, #12]
    36be:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36c0:	685b      	ldr	r3, [r3, #4]
    36c2:	9302      	str	r3, [sp, #8]
    36c4:	9b02      	ldr	r3, [sp, #8]
    36c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    36ca:	9302      	str	r3, [sp, #8]
    36cc:	9b03      	ldr	r3, [sp, #12]
    36ce:	011b      	lsls	r3, r3, #4
    36d0:	9a02      	ldr	r2, [sp, #8]
    36d2:	4313      	orrs	r3, r2
    36d4:	9302      	str	r3, [sp, #8]
    36d6:	4a04      	ldr	r2, [pc, #16]	; (36e8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    36d8:	9b02      	ldr	r3, [sp, #8]
    36da:	6053      	str	r3, [r2, #4]
    36dc:	bf00      	nop
    36de:	b004      	add	sp, #16
    36e0:	4770      	bx	lr
    36e2:	bf00      	nop
    36e4:	0000b970 	.word	0x0000b970
    36e8:	40048000 	.word	0x40048000

000036ec <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
    36ec:	b084      	sub	sp, #16
    36ee:	9001      	str	r0, [sp, #4]
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	490f      	ldr	r1, [pc, #60]	; (3734 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    36f6:	4613      	mov	r3, r2
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	4413      	add	r3, r2
    36fc:	440b      	add	r3, r1
    36fe:	3304      	adds	r3, #4
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	9303      	str	r3, [sp, #12]
    3704:	4a0c      	ldr	r2, [pc, #48]	; (3738 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3706:	9b03      	ldr	r3, [sp, #12]
    3708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    370c:	490a      	ldr	r1, [pc, #40]	; (3738 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    370e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3712:	9b03      	ldr	r3, [sp, #12]
    3714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    3718:	4a07      	ldr	r2, [pc, #28]	; (3738 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    371a:	9b03      	ldr	r3, [sp, #12]
    371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3720:	4905      	ldr	r1, [pc, #20]	; (3738 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3722:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3726:	9b03      	ldr	r3, [sp, #12]
    3728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    372c:	bf00      	nop
    372e:	b004      	add	sp, #16
    3730:	4770      	bx	lr
    3732:	bf00      	nop
    3734:	0000b660 	.word	0x0000b660
    3738:	40065000 	.word	0x40065000

0000373c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
    373c:	b086      	sub	sp, #24
    373e:	9001      	str	r0, [sp, #4]
    3740:	9b01      	ldr	r3, [sp, #4]
    3742:	681a      	ldr	r2, [r3, #0]
    3744:	4912      	ldr	r1, [pc, #72]	; (3790 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3746:	4613      	mov	r3, r2
    3748:	00db      	lsls	r3, r3, #3
    374a:	4413      	add	r3, r2
    374c:	440b      	add	r3, r1
    374e:	3304      	adds	r3, #4
    3750:	781b      	ldrb	r3, [r3, #0]
    3752:	9305      	str	r3, [sp, #20]
    3754:	9b01      	ldr	r3, [sp, #4]
    3756:	685b      	ldr	r3, [r3, #4]
    3758:	4a0e      	ldr	r2, [pc, #56]	; (3794 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    375a:	5cd3      	ldrb	r3, [r2, r3]
    375c:	9304      	str	r3, [sp, #16]
    375e:	4a0e      	ldr	r2, [pc, #56]	; (3798 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3760:	9b05      	ldr	r3, [sp, #20]
    3762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3766:	9303      	str	r3, [sp, #12]
    3768:	9b03      	ldr	r3, [sp, #12]
    376a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    376e:	9303      	str	r3, [sp, #12]
    3770:	9b04      	ldr	r3, [sp, #16]
    3772:	061b      	lsls	r3, r3, #24
    3774:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3778:	9a03      	ldr	r2, [sp, #12]
    377a:	4313      	orrs	r3, r2
    377c:	9303      	str	r3, [sp, #12]
    377e:	4906      	ldr	r1, [pc, #24]	; (3798 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3780:	9b05      	ldr	r3, [sp, #20]
    3782:	9a03      	ldr	r2, [sp, #12]
    3784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    3788:	bf00      	nop
    378a:	b006      	add	sp, #24
    378c:	4770      	bx	lr
    378e:	bf00      	nop
    3790:	0000b660 	.word	0x0000b660
    3794:	0000b9f8 	.word	0x0000b9f8
    3798:	40065000 	.word	0x40065000

0000379c <Clock_Ip_ResetSimTraceSel_TrustedCall>:
    379c:	b084      	sub	sp, #16
    379e:	9001      	str	r0, [sp, #4]
    37a0:	4b0b      	ldr	r3, [pc, #44]	; (37d0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    37a2:	7f1b      	ldrb	r3, [r3, #28]
    37a4:	9303      	str	r3, [sp, #12]
    37a6:	4b0b      	ldr	r3, [pc, #44]	; (37d4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37a8:	685b      	ldr	r3, [r3, #4]
    37aa:	9302      	str	r3, [sp, #8]
    37ac:	9b02      	ldr	r3, [sp, #8]
    37ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37b2:	9302      	str	r3, [sp, #8]
    37b4:	9b03      	ldr	r3, [sp, #12]
    37b6:	031b      	lsls	r3, r3, #12
    37b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37bc:	9a02      	ldr	r2, [sp, #8]
    37be:	4313      	orrs	r3, r2
    37c0:	9302      	str	r3, [sp, #8]
    37c2:	4a04      	ldr	r2, [pc, #16]	; (37d4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    37c4:	9b02      	ldr	r3, [sp, #8]
    37c6:	6053      	str	r3, [r2, #4]
    37c8:	bf00      	nop
    37ca:	b004      	add	sp, #16
    37cc:	4770      	bx	lr
    37ce:	bf00      	nop
    37d0:	0000b970 	.word	0x0000b970
    37d4:	40048000 	.word	0x40048000

000037d8 <Clock_Ip_SetSimTraceSel_TrustedCall>:
    37d8:	b084      	sub	sp, #16
    37da:	9001      	str	r0, [sp, #4]
    37dc:	9b01      	ldr	r3, [sp, #4]
    37de:	685b      	ldr	r3, [r3, #4]
    37e0:	4a0b      	ldr	r2, [pc, #44]	; (3810 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    37e2:	5cd3      	ldrb	r3, [r2, r3]
    37e4:	9303      	str	r3, [sp, #12]
    37e6:	4b0b      	ldr	r3, [pc, #44]	; (3814 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    37e8:	685b      	ldr	r3, [r3, #4]
    37ea:	9302      	str	r3, [sp, #8]
    37ec:	9b02      	ldr	r3, [sp, #8]
    37ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    37f2:	9302      	str	r3, [sp, #8]
    37f4:	9b03      	ldr	r3, [sp, #12]
    37f6:	031b      	lsls	r3, r3, #12
    37f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    37fc:	9a02      	ldr	r2, [sp, #8]
    37fe:	4313      	orrs	r3, r2
    3800:	9302      	str	r3, [sp, #8]
    3802:	4a04      	ldr	r2, [pc, #16]	; (3814 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3804:	9b02      	ldr	r3, [sp, #8]
    3806:	6053      	str	r3, [r2, #4]
    3808:	bf00      	nop
    380a:	b004      	add	sp, #16
    380c:	4770      	bx	lr
    380e:	bf00      	nop
    3810:	0000b970 	.word	0x0000b970
    3814:	40048000 	.word	0x40048000

00003818 <DisableSafeClock>:
    3818:	b500      	push	{lr}
    381a:	b085      	sub	sp, #20
    381c:	9001      	str	r0, [sp, #4]
    381e:	2300      	movs	r3, #0
    3820:	f88d 300b 	strb.w	r3, [sp, #11]
    3824:	9b01      	ldr	r3, [sp, #4]
    3826:	2b00      	cmp	r3, #0
    3828:	d037      	beq.n	389a <DisableSafeClock+0x82>
    382a:	2300      	movs	r3, #0
    382c:	9303      	str	r3, [sp, #12]
    382e:	e02b      	b.n	3888 <DisableSafeClock+0x70>
    3830:	4b29      	ldr	r3, [pc, #164]	; (38d8 <DisableSafeClock+0xc0>)
    3832:	6819      	ldr	r1, [r3, #0]
    3834:	9a03      	ldr	r2, [sp, #12]
    3836:	4613      	mov	r3, r2
    3838:	005b      	lsls	r3, r3, #1
    383a:	4413      	add	r3, r2
    383c:	009b      	lsls	r3, r3, #2
    383e:	440b      	add	r3, r1
    3840:	3314      	adds	r3, #20
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	2b05      	cmp	r3, #5
    3846:	d11c      	bne.n	3882 <DisableSafeClock+0x6a>
    3848:	2301      	movs	r3, #1
    384a:	f88d 300b 	strb.w	r3, [sp, #11]
    384e:	4b22      	ldr	r3, [pc, #136]	; (38d8 <DisableSafeClock+0xc0>)
    3850:	6819      	ldr	r1, [r3, #0]
    3852:	9a03      	ldr	r2, [sp, #12]
    3854:	4613      	mov	r3, r2
    3856:	005b      	lsls	r3, r3, #1
    3858:	4413      	add	r3, r2
    385a:	009b      	lsls	r3, r3, #2
    385c:	440b      	add	r3, r1
    385e:	3318      	adds	r3, #24
    3860:	881b      	ldrh	r3, [r3, #0]
    3862:	2b00      	cmp	r3, #0
    3864:	d118      	bne.n	3898 <DisableSafeClock+0x80>
    3866:	4b1d      	ldr	r3, [pc, #116]	; (38dc <DisableSafeClock+0xc4>)
    3868:	791b      	ldrb	r3, [r3, #4]
    386a:	4619      	mov	r1, r3
    386c:	4a1c      	ldr	r2, [pc, #112]	; (38e0 <DisableSafeClock+0xc8>)
    386e:	460b      	mov	r3, r1
    3870:	005b      	lsls	r3, r3, #1
    3872:	440b      	add	r3, r1
    3874:	009b      	lsls	r3, r3, #2
    3876:	4413      	add	r3, r2
    3878:	3308      	adds	r3, #8
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	2005      	movs	r0, #5
    387e:	4798      	blx	r3
    3880:	e00a      	b.n	3898 <DisableSafeClock+0x80>
    3882:	9b03      	ldr	r3, [sp, #12]
    3884:	3301      	adds	r3, #1
    3886:	9303      	str	r3, [sp, #12]
    3888:	4b13      	ldr	r3, [pc, #76]	; (38d8 <DisableSafeClock+0xc0>)
    388a:	681b      	ldr	r3, [r3, #0]
    388c:	7a1b      	ldrb	r3, [r3, #8]
    388e:	461a      	mov	r2, r3
    3890:	9b03      	ldr	r3, [sp, #12]
    3892:	4293      	cmp	r3, r2
    3894:	d3cc      	bcc.n	3830 <DisableSafeClock+0x18>
    3896:	e000      	b.n	389a <DisableSafeClock+0x82>
    3898:	bf00      	nop
    389a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    389e:	f083 0301 	eor.w	r3, r3, #1
    38a2:	b2db      	uxtb	r3, r3
    38a4:	2b00      	cmp	r3, #0
    38a6:	d013      	beq.n	38d0 <DisableSafeClock+0xb8>
    38a8:	4b0e      	ldr	r3, [pc, #56]	; (38e4 <DisableSafeClock+0xcc>)
    38aa:	781b      	ldrb	r3, [r3, #0]
    38ac:	f083 0301 	eor.w	r3, r3, #1
    38b0:	b2db      	uxtb	r3, r3
    38b2:	2b00      	cmp	r3, #0
    38b4:	d00c      	beq.n	38d0 <DisableSafeClock+0xb8>
    38b6:	4b09      	ldr	r3, [pc, #36]	; (38dc <DisableSafeClock+0xc4>)
    38b8:	791b      	ldrb	r3, [r3, #4]
    38ba:	4619      	mov	r1, r3
    38bc:	4a08      	ldr	r2, [pc, #32]	; (38e0 <DisableSafeClock+0xc8>)
    38be:	460b      	mov	r3, r1
    38c0:	005b      	lsls	r3, r3, #1
    38c2:	440b      	add	r3, r1
    38c4:	009b      	lsls	r3, r3, #2
    38c6:	4413      	add	r3, r2
    38c8:	3308      	adds	r3, #8
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	2005      	movs	r0, #5
    38ce:	4798      	blx	r3
    38d0:	bf00      	nop
    38d2:	b005      	add	sp, #20
    38d4:	f85d fb04 	ldr.w	pc, [sp], #4
    38d8:	1fff8ba8 	.word	0x1fff8ba8
    38dc:	0000b5f0 	.word	0x0000b5f0
    38e0:	0000bc20 	.word	0x0000bc20
    38e4:	1fff8b18 	.word	0x1fff8b18

000038e8 <SetFircToResetValue_TrustedCall>:
    38e8:	4b06      	ldr	r3, [pc, #24]	; (3904 <SetFircToResetValue_TrustedCall+0x1c>)
    38ea:	2200      	movs	r2, #0
    38ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    38f0:	4b04      	ldr	r3, [pc, #16]	; (3904 <SetFircToResetValue_TrustedCall+0x1c>)
    38f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    38f6:	4a03      	ldr	r2, [pc, #12]	; (3904 <SetFircToResetValue_TrustedCall+0x1c>)
    38f8:	f043 0301 	orr.w	r3, r3, #1
    38fc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    3900:	bf00      	nop
    3902:	4770      	bx	lr
    3904:	40064000 	.word	0x40064000

00003908 <SetSimLpoclksRegister_TrustedCall>:
    3908:	b084      	sub	sp, #16
    390a:	9001      	str	r0, [sp, #4]
    390c:	2303      	movs	r3, #3
    390e:	9303      	str	r3, [sp, #12]
    3910:	2300      	movs	r3, #0
    3912:	9302      	str	r3, [sp, #8]
    3914:	e028      	b.n	3968 <SetSimLpoclksRegister_TrustedCall+0x60>
    3916:	9b01      	ldr	r3, [sp, #4]
    3918:	9a02      	ldr	r2, [sp, #8]
    391a:	320d      	adds	r2, #13
    391c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3920:	2b28      	cmp	r3, #40	; 0x28
    3922:	d10b      	bne.n	393c <SetSimLpoclksRegister_TrustedCall+0x34>
    3924:	9a01      	ldr	r2, [sp, #4]
    3926:	9b02      	ldr	r3, [sp, #8]
    3928:	330d      	adds	r3, #13
    392a:	00db      	lsls	r3, r3, #3
    392c:	4413      	add	r3, r2
    392e:	685b      	ldr	r3, [r3, #4]
    3930:	4a2b      	ldr	r2, [pc, #172]	; (39e0 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3932:	5cd3      	ldrb	r3, [r2, r3]
    3934:	011b      	lsls	r3, r3, #4
    3936:	9a03      	ldr	r2, [sp, #12]
    3938:	4313      	orrs	r3, r2
    393a:	9303      	str	r3, [sp, #12]
    393c:	9b01      	ldr	r3, [sp, #4]
    393e:	9a02      	ldr	r2, [sp, #8]
    3940:	320d      	adds	r2, #13
    3942:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3946:	2b29      	cmp	r3, #41	; 0x29
    3948:	d10b      	bne.n	3962 <SetSimLpoclksRegister_TrustedCall+0x5a>
    394a:	9a01      	ldr	r2, [sp, #4]
    394c:	9b02      	ldr	r3, [sp, #8]
    394e:	330d      	adds	r3, #13
    3950:	00db      	lsls	r3, r3, #3
    3952:	4413      	add	r3, r2
    3954:	685b      	ldr	r3, [r3, #4]
    3956:	4a23      	ldr	r2, [pc, #140]	; (39e4 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3958:	5cd3      	ldrb	r3, [r2, r3]
    395a:	009b      	lsls	r3, r3, #2
    395c:	9a03      	ldr	r2, [sp, #12]
    395e:	4313      	orrs	r3, r2
    3960:	9303      	str	r3, [sp, #12]
    3962:	9b02      	ldr	r3, [sp, #8]
    3964:	3301      	adds	r3, #1
    3966:	9302      	str	r3, [sp, #8]
    3968:	9b01      	ldr	r3, [sp, #4]
    396a:	7adb      	ldrb	r3, [r3, #11]
    396c:	461a      	mov	r2, r3
    396e:	9b02      	ldr	r3, [sp, #8]
    3970:	4293      	cmp	r3, r2
    3972:	d3d0      	bcc.n	3916 <SetSimLpoclksRegister_TrustedCall+0xe>
    3974:	2300      	movs	r3, #0
    3976:	9302      	str	r3, [sp, #8]
    3978:	e026      	b.n	39c8 <SetSimLpoclksRegister_TrustedCall+0xc0>
    397a:	9a01      	ldr	r2, [sp, #4]
    397c:	9b02      	ldr	r3, [sp, #8]
    397e:	334e      	adds	r3, #78	; 0x4e
    3980:	00db      	lsls	r3, r3, #3
    3982:	4413      	add	r3, r2
    3984:	685b      	ldr	r3, [r3, #4]
    3986:	2b12      	cmp	r3, #18
    3988:	d109      	bne.n	399e <SetSimLpoclksRegister_TrustedCall+0x96>
    398a:	9a01      	ldr	r2, [sp, #4]
    398c:	9b02      	ldr	r3, [sp, #8]
    398e:	334e      	adds	r3, #78	; 0x4e
    3990:	00db      	lsls	r3, r3, #3
    3992:	4413      	add	r3, r2
    3994:	891b      	ldrh	r3, [r3, #8]
    3996:	005b      	lsls	r3, r3, #1
    3998:	9a03      	ldr	r2, [sp, #12]
    399a:	4313      	orrs	r3, r2
    399c:	9303      	str	r3, [sp, #12]
    399e:	9a01      	ldr	r2, [sp, #4]
    39a0:	9b02      	ldr	r3, [sp, #8]
    39a2:	334e      	adds	r3, #78	; 0x4e
    39a4:	00db      	lsls	r3, r3, #3
    39a6:	4413      	add	r3, r2
    39a8:	685b      	ldr	r3, [r3, #4]
    39aa:	2b13      	cmp	r3, #19
    39ac:	d109      	bne.n	39c2 <SetSimLpoclksRegister_TrustedCall+0xba>
    39ae:	9a01      	ldr	r2, [sp, #4]
    39b0:	9b02      	ldr	r3, [sp, #8]
    39b2:	334e      	adds	r3, #78	; 0x4e
    39b4:	00db      	lsls	r3, r3, #3
    39b6:	4413      	add	r3, r2
    39b8:	891b      	ldrh	r3, [r3, #8]
    39ba:	461a      	mov	r2, r3
    39bc:	9b03      	ldr	r3, [sp, #12]
    39be:	4313      	orrs	r3, r2
    39c0:	9303      	str	r3, [sp, #12]
    39c2:	9b02      	ldr	r3, [sp, #8]
    39c4:	3301      	adds	r3, #1
    39c6:	9302      	str	r3, [sp, #8]
    39c8:	9b01      	ldr	r3, [sp, #4]
    39ca:	7c1b      	ldrb	r3, [r3, #16]
    39cc:	461a      	mov	r2, r3
    39ce:	9b02      	ldr	r3, [sp, #8]
    39d0:	4293      	cmp	r3, r2
    39d2:	d3d2      	bcc.n	397a <SetSimLpoclksRegister_TrustedCall+0x72>
    39d4:	4a04      	ldr	r2, [pc, #16]	; (39e8 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    39d6:	9b03      	ldr	r3, [sp, #12]
    39d8:	6113      	str	r3, [r2, #16]
    39da:	bf00      	nop
    39dc:	b004      	add	sp, #16
    39de:	4770      	bx	lr
    39e0:	0000b970 	.word	0x0000b970
    39e4:	0000ba28 	.word	0x0000ba28
    39e8:	40048000 	.word	0x40048000

000039ec <Clock_Ip_SpecificPlatformInitClock>:
    39ec:	b500      	push	{lr}
    39ee:	b089      	sub	sp, #36	; 0x24
    39f0:	9001      	str	r0, [sp, #4]
    39f2:	2300      	movs	r3, #0
    39f4:	f88d 301f 	strb.w	r3, [sp, #31]
    39f8:	4a21      	ldr	r2, [pc, #132]	; (3a80 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    39fa:	9b01      	ldr	r3, [sp, #4]
    39fc:	6013      	str	r3, [r2, #0]
    39fe:	4b21      	ldr	r3, [pc, #132]	; (3a84 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a00:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a04:	f003 0301 	and.w	r3, r3, #1
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d12e      	bne.n	3a6a <Clock_Ip_SpecificPlatformInitClock+0x7e>
    3a0c:	4b1e      	ldr	r3, [pc, #120]	; (3a88 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a0e:	2200      	movs	r2, #0
    3a10:	701a      	strb	r2, [r3, #0]
    3a12:	f7ff ff69 	bl	38e8 <SetFircToResetValue_TrustedCall>
    3a16:	aa03      	add	r2, sp, #12
    3a18:	a904      	add	r1, sp, #16
    3a1a:	a805      	add	r0, sp, #20
    3a1c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a20:	f7fe f8ae 	bl	1b80 <Clock_Ip_StartTimeout>
    3a24:	4b17      	ldr	r3, [pc, #92]	; (3a84 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3a26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a2a:	0e1b      	lsrs	r3, r3, #24
    3a2c:	f003 0301 	and.w	r3, r3, #1
    3a30:	9306      	str	r3, [sp, #24]
    3a32:	9a03      	ldr	r2, [sp, #12]
    3a34:	a904      	add	r1, sp, #16
    3a36:	ab05      	add	r3, sp, #20
    3a38:	4618      	mov	r0, r3
    3a3a:	f7fe f8bb 	bl	1bb4 <Clock_Ip_TimeoutExpired>
    3a3e:	4603      	mov	r3, r0
    3a40:	f88d 301f 	strb.w	r3, [sp, #31]
    3a44:	9b06      	ldr	r3, [sp, #24]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d106      	bne.n	3a58 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3a4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a4e:	f083 0301 	eor.w	r3, r3, #1
    3a52:	b2db      	uxtb	r3, r3
    3a54:	2b00      	cmp	r3, #0
    3a56:	d1e5      	bne.n	3a24 <Clock_Ip_SpecificPlatformInitClock+0x38>
    3a58:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d007      	beq.n	3a70 <Clock_Ip_SpecificPlatformInitClock+0x84>
    3a60:	2105      	movs	r1, #5
    3a62:	2001      	movs	r0, #1
    3a64:	f7fe f87c 	bl	1b60 <Clock_Ip_ReportClockErrors>
    3a68:	e002      	b.n	3a70 <Clock_Ip_SpecificPlatformInitClock+0x84>
    3a6a:	4b07      	ldr	r3, [pc, #28]	; (3a88 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3a6c:	2201      	movs	r2, #1
    3a6e:	701a      	strb	r2, [r3, #0]
    3a70:	9801      	ldr	r0, [sp, #4]
    3a72:	f7ff ff49 	bl	3908 <SetSimLpoclksRegister_TrustedCall>
    3a76:	bf00      	nop
    3a78:	b009      	add	sp, #36	; 0x24
    3a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a7e:	bf00      	nop
    3a80:	1fff8ba8 	.word	0x1fff8ba8
    3a84:	40064000 	.word	0x40064000
    3a88:	1fff8b18 	.word	0x1fff8b18

00003a8c <getFircConfig>:
    3a8c:	b082      	sub	sp, #8
    3a8e:	2300      	movs	r3, #0
    3a90:	9300      	str	r3, [sp, #0]
    3a92:	4b29      	ldr	r3, [pc, #164]	; (3b38 <getFircConfig+0xac>)
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	2b00      	cmp	r3, #0
    3a98:	d024      	beq.n	3ae4 <getFircConfig+0x58>
    3a9a:	2300      	movs	r3, #0
    3a9c:	9301      	str	r3, [sp, #4]
    3a9e:	e01a      	b.n	3ad6 <getFircConfig+0x4a>
    3aa0:	4b25      	ldr	r3, [pc, #148]	; (3b38 <getFircConfig+0xac>)
    3aa2:	6819      	ldr	r1, [r3, #0]
    3aa4:	9a01      	ldr	r2, [sp, #4]
    3aa6:	4613      	mov	r3, r2
    3aa8:	005b      	lsls	r3, r3, #1
    3aaa:	4413      	add	r3, r2
    3aac:	009b      	lsls	r3, r3, #2
    3aae:	440b      	add	r3, r1
    3ab0:	3314      	adds	r3, #20
    3ab2:	681b      	ldr	r3, [r3, #0]
    3ab4:	2b05      	cmp	r3, #5
    3ab6:	d10b      	bne.n	3ad0 <getFircConfig+0x44>
    3ab8:	4b1f      	ldr	r3, [pc, #124]	; (3b38 <getFircConfig+0xac>)
    3aba:	6819      	ldr	r1, [r3, #0]
    3abc:	9a01      	ldr	r2, [sp, #4]
    3abe:	4613      	mov	r3, r2
    3ac0:	005b      	lsls	r3, r3, #1
    3ac2:	4413      	add	r3, r2
    3ac4:	009b      	lsls	r3, r3, #2
    3ac6:	3310      	adds	r3, #16
    3ac8:	440b      	add	r3, r1
    3aca:	3304      	adds	r3, #4
    3acc:	9300      	str	r3, [sp, #0]
    3ace:	e009      	b.n	3ae4 <getFircConfig+0x58>
    3ad0:	9b01      	ldr	r3, [sp, #4]
    3ad2:	3301      	adds	r3, #1
    3ad4:	9301      	str	r3, [sp, #4]
    3ad6:	4b18      	ldr	r3, [pc, #96]	; (3b38 <getFircConfig+0xac>)
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	7a1b      	ldrb	r3, [r3, #8]
    3adc:	461a      	mov	r2, r3
    3ade:	9b01      	ldr	r3, [sp, #4]
    3ae0:	4293      	cmp	r3, r2
    3ae2:	d3dd      	bcc.n	3aa0 <getFircConfig+0x14>
    3ae4:	9b00      	ldr	r3, [sp, #0]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d121      	bne.n	3b2e <getFircConfig+0xa2>
    3aea:	4b14      	ldr	r3, [pc, #80]	; (3b3c <getFircConfig+0xb0>)
    3aec:	9300      	str	r3, [sp, #0]
    3aee:	4b13      	ldr	r3, [pc, #76]	; (3b3c <getFircConfig+0xb0>)
    3af0:	2205      	movs	r2, #5
    3af2:	601a      	str	r2, [r3, #0]
    3af4:	4b12      	ldr	r3, [pc, #72]	; (3b40 <getFircConfig+0xb4>)
    3af6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3afa:	b29b      	uxth	r3, r3
    3afc:	f003 0301 	and.w	r3, r3, #1
    3b00:	b29a      	uxth	r2, r3
    3b02:	4b0e      	ldr	r3, [pc, #56]	; (3b3c <getFircConfig+0xb0>)
    3b04:	809a      	strh	r2, [r3, #4]
    3b06:	4b0e      	ldr	r3, [pc, #56]	; (3b40 <getFircConfig+0xb4>)
    3b08:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3b0c:	b2db      	uxtb	r3, r3
    3b0e:	f003 0303 	and.w	r3, r3, #3
    3b12:	b2da      	uxtb	r2, r3
    3b14:	4b09      	ldr	r3, [pc, #36]	; (3b3c <getFircConfig+0xb0>)
    3b16:	71da      	strb	r2, [r3, #7]
    3b18:	4b09      	ldr	r3, [pc, #36]	; (3b40 <getFircConfig+0xb4>)
    3b1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b1e:	b2db      	uxtb	r3, r3
    3b20:	10db      	asrs	r3, r3, #3
    3b22:	b2db      	uxtb	r3, r3
    3b24:	f003 0301 	and.w	r3, r3, #1
    3b28:	b2da      	uxtb	r2, r3
    3b2a:	4b04      	ldr	r3, [pc, #16]	; (3b3c <getFircConfig+0xb0>)
    3b2c:	719a      	strb	r2, [r3, #6]
    3b2e:	9b00      	ldr	r3, [sp, #0]
    3b30:	4618      	mov	r0, r3
    3b32:	b002      	add	sp, #8
    3b34:	4770      	bx	lr
    3b36:	bf00      	nop
    3b38:	1fff8ba8 	.word	0x1fff8ba8
    3b3c:	1fff8c14 	.word	0x1fff8c14
    3b40:	40064000 	.word	0x40064000

00003b44 <getSoscConfig>:
    3b44:	b082      	sub	sp, #8
    3b46:	2300      	movs	r3, #0
    3b48:	9300      	str	r3, [sp, #0]
    3b4a:	4b20      	ldr	r3, [pc, #128]	; (3bcc <getSoscConfig+0x88>)
    3b4c:	681b      	ldr	r3, [r3, #0]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d024      	beq.n	3b9c <getSoscConfig+0x58>
    3b52:	2300      	movs	r3, #0
    3b54:	9301      	str	r3, [sp, #4]
    3b56:	e01a      	b.n	3b8e <getSoscConfig+0x4a>
    3b58:	4b1c      	ldr	r3, [pc, #112]	; (3bcc <getSoscConfig+0x88>)
    3b5a:	6819      	ldr	r1, [r3, #0]
    3b5c:	9a01      	ldr	r2, [sp, #4]
    3b5e:	4613      	mov	r3, r2
    3b60:	009b      	lsls	r3, r3, #2
    3b62:	4413      	add	r3, r2
    3b64:	009b      	lsls	r3, r3, #2
    3b66:	440b      	add	r3, r1
    3b68:	332c      	adds	r3, #44	; 0x2c
    3b6a:	681b      	ldr	r3, [r3, #0]
    3b6c:	2b08      	cmp	r3, #8
    3b6e:	d10b      	bne.n	3b88 <getSoscConfig+0x44>
    3b70:	4b16      	ldr	r3, [pc, #88]	; (3bcc <getSoscConfig+0x88>)
    3b72:	6819      	ldr	r1, [r3, #0]
    3b74:	9a01      	ldr	r2, [sp, #4]
    3b76:	4613      	mov	r3, r2
    3b78:	009b      	lsls	r3, r3, #2
    3b7a:	4413      	add	r3, r2
    3b7c:	009b      	lsls	r3, r3, #2
    3b7e:	3328      	adds	r3, #40	; 0x28
    3b80:	440b      	add	r3, r1
    3b82:	3304      	adds	r3, #4
    3b84:	9300      	str	r3, [sp, #0]
    3b86:	e009      	b.n	3b9c <getSoscConfig+0x58>
    3b88:	9b01      	ldr	r3, [sp, #4]
    3b8a:	3301      	adds	r3, #1
    3b8c:	9301      	str	r3, [sp, #4]
    3b8e:	4b0f      	ldr	r3, [pc, #60]	; (3bcc <getSoscConfig+0x88>)
    3b90:	681b      	ldr	r3, [r3, #0]
    3b92:	7a5b      	ldrb	r3, [r3, #9]
    3b94:	461a      	mov	r2, r3
    3b96:	9b01      	ldr	r3, [sp, #4]
    3b98:	4293      	cmp	r3, r2
    3b9a:	d3dd      	bcc.n	3b58 <getSoscConfig+0x14>
    3b9c:	9b00      	ldr	r3, [sp, #0]
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d110      	bne.n	3bc4 <getSoscConfig+0x80>
    3ba2:	4b0b      	ldr	r3, [pc, #44]	; (3bd0 <getSoscConfig+0x8c>)
    3ba4:	9300      	str	r3, [sp, #0]
    3ba6:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <getSoscConfig+0x8c>)
    3ba8:	2208      	movs	r2, #8
    3baa:	601a      	str	r2, [r3, #0]
    3bac:	4b09      	ldr	r3, [pc, #36]	; (3bd4 <getSoscConfig+0x90>)
    3bae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3bb2:	b29b      	uxth	r3, r3
    3bb4:	f003 0301 	and.w	r3, r3, #1
    3bb8:	b29a      	uxth	r2, r3
    3bba:	4b05      	ldr	r3, [pc, #20]	; (3bd0 <getSoscConfig+0x8c>)
    3bbc:	811a      	strh	r2, [r3, #8]
    3bbe:	4b04      	ldr	r3, [pc, #16]	; (3bd0 <getSoscConfig+0x8c>)
    3bc0:	4a05      	ldr	r2, [pc, #20]	; (3bd8 <getSoscConfig+0x94>)
    3bc2:	605a      	str	r2, [r3, #4]
    3bc4:	9b00      	ldr	r3, [sp, #0]
    3bc6:	4618      	mov	r0, r3
    3bc8:	b002      	add	sp, #8
    3bca:	4770      	bx	lr
    3bcc:	1fff8ba8 	.word	0x1fff8ba8
    3bd0:	1fff8c20 	.word	0x1fff8c20
    3bd4:	40064000 	.word	0x40064000
    3bd8:	02625a00 	.word	0x02625a00

00003bdc <getSpllConfig>:
    3bdc:	b082      	sub	sp, #8
    3bde:	2300      	movs	r3, #0
    3be0:	9300      	str	r3, [sp, #0]
    3be2:	4b28      	ldr	r3, [pc, #160]	; (3c84 <getSpllConfig+0xa8>)
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d023      	beq.n	3c32 <getSpllConfig+0x56>
    3bea:	2300      	movs	r3, #0
    3bec:	9301      	str	r3, [sp, #4]
    3bee:	e019      	b.n	3c24 <getSpllConfig+0x48>
    3bf0:	4b24      	ldr	r3, [pc, #144]	; (3c84 <getSpllConfig+0xa8>)
    3bf2:	6819      	ldr	r1, [r3, #0]
    3bf4:	9a01      	ldr	r2, [sp, #4]
    3bf6:	4613      	mov	r3, r2
    3bf8:	009b      	lsls	r3, r3, #2
    3bfa:	4413      	add	r3, r2
    3bfc:	00db      	lsls	r3, r3, #3
    3bfe:	440b      	add	r3, r1
    3c00:	3340      	adds	r3, #64	; 0x40
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	2b09      	cmp	r3, #9
    3c06:	d10a      	bne.n	3c1e <getSpllConfig+0x42>
    3c08:	4b1e      	ldr	r3, [pc, #120]	; (3c84 <getSpllConfig+0xa8>)
    3c0a:	6819      	ldr	r1, [r3, #0]
    3c0c:	9a01      	ldr	r2, [sp, #4]
    3c0e:	4613      	mov	r3, r2
    3c10:	009b      	lsls	r3, r3, #2
    3c12:	4413      	add	r3, r2
    3c14:	00db      	lsls	r3, r3, #3
    3c16:	3340      	adds	r3, #64	; 0x40
    3c18:	440b      	add	r3, r1
    3c1a:	9300      	str	r3, [sp, #0]
    3c1c:	e009      	b.n	3c32 <getSpllConfig+0x56>
    3c1e:	9b01      	ldr	r3, [sp, #4]
    3c20:	3301      	adds	r3, #1
    3c22:	9301      	str	r3, [sp, #4]
    3c24:	4b17      	ldr	r3, [pc, #92]	; (3c84 <getSpllConfig+0xa8>)
    3c26:	681b      	ldr	r3, [r3, #0]
    3c28:	7a9b      	ldrb	r3, [r3, #10]
    3c2a:	461a      	mov	r2, r3
    3c2c:	9b01      	ldr	r3, [sp, #4]
    3c2e:	4293      	cmp	r3, r2
    3c30:	d3de      	bcc.n	3bf0 <getSpllConfig+0x14>
    3c32:	9b00      	ldr	r3, [sp, #0]
    3c34:	2b00      	cmp	r3, #0
    3c36:	d121      	bne.n	3c7c <getSpllConfig+0xa0>
    3c38:	4b13      	ldr	r3, [pc, #76]	; (3c88 <getSpllConfig+0xac>)
    3c3a:	9300      	str	r3, [sp, #0]
    3c3c:	4b12      	ldr	r3, [pc, #72]	; (3c88 <getSpllConfig+0xac>)
    3c3e:	2209      	movs	r2, #9
    3c40:	601a      	str	r2, [r3, #0]
    3c42:	4b12      	ldr	r3, [pc, #72]	; (3c8c <getSpllConfig+0xb0>)
    3c44:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c48:	b29b      	uxth	r3, r3
    3c4a:	f003 0301 	and.w	r3, r3, #1
    3c4e:	b29a      	uxth	r2, r3
    3c50:	4b0d      	ldr	r3, [pc, #52]	; (3c88 <getSpllConfig+0xac>)
    3c52:	809a      	strh	r2, [r3, #4]
    3c54:	4b0d      	ldr	r3, [pc, #52]	; (3c8c <getSpllConfig+0xb0>)
    3c56:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c5a:	0a1b      	lsrs	r3, r3, #8
    3c5c:	b2db      	uxtb	r3, r3
    3c5e:	f003 0307 	and.w	r3, r3, #7
    3c62:	b2da      	uxtb	r2, r3
    3c64:	4b08      	ldr	r3, [pc, #32]	; (3c88 <getSpllConfig+0xac>)
    3c66:	735a      	strb	r2, [r3, #13]
    3c68:	4b08      	ldr	r3, [pc, #32]	; (3c8c <getSpllConfig+0xb0>)
    3c6a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3c6e:	0c1b      	lsrs	r3, r3, #16
    3c70:	b2db      	uxtb	r3, r3
    3c72:	f003 031f 	and.w	r3, r3, #31
    3c76:	b2da      	uxtb	r2, r3
    3c78:	4b03      	ldr	r3, [pc, #12]	; (3c88 <getSpllConfig+0xac>)
    3c7a:	751a      	strb	r2, [r3, #20]
    3c7c:	9b00      	ldr	r3, [sp, #0]
    3c7e:	4618      	mov	r0, r3
    3c80:	b002      	add	sp, #8
    3c82:	4770      	bx	lr
    3c84:	1fff8ba8 	.word	0x1fff8ba8
    3c88:	1fff8c34 	.word	0x1fff8c34
    3c8c:	40064000 	.word	0x40064000

00003c90 <getSelectorConfig>:
    3c90:	b086      	sub	sp, #24
    3c92:	9001      	str	r0, [sp, #4]
    3c94:	2300      	movs	r3, #0
    3c96:	9305      	str	r3, [sp, #20]
    3c98:	9b01      	ldr	r3, [sp, #4]
    3c9a:	2b1b      	cmp	r3, #27
    3c9c:	d00f      	beq.n	3cbe <getSelectorConfig+0x2e>
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	2b1b      	cmp	r3, #27
    3ca2:	d80f      	bhi.n	3cc4 <getSelectorConfig+0x34>
    3ca4:	9b01      	ldr	r3, [sp, #4]
    3ca6:	2b19      	cmp	r3, #25
    3ca8:	d003      	beq.n	3cb2 <getSelectorConfig+0x22>
    3caa:	9b01      	ldr	r3, [sp, #4]
    3cac:	2b1a      	cmp	r3, #26
    3cae:	d003      	beq.n	3cb8 <getSelectorConfig+0x28>
    3cb0:	e008      	b.n	3cc4 <getSelectorConfig+0x34>
    3cb2:	2300      	movs	r3, #0
    3cb4:	9304      	str	r3, [sp, #16]
    3cb6:	e008      	b.n	3cca <getSelectorConfig+0x3a>
    3cb8:	2301      	movs	r3, #1
    3cba:	9304      	str	r3, [sp, #16]
    3cbc:	e005      	b.n	3cca <getSelectorConfig+0x3a>
    3cbe:	2302      	movs	r3, #2
    3cc0:	9304      	str	r3, [sp, #16]
    3cc2:	e002      	b.n	3cca <getSelectorConfig+0x3a>
    3cc4:	2300      	movs	r3, #0
    3cc6:	9304      	str	r3, [sp, #16]
    3cc8:	bf00      	nop
    3cca:	4b36      	ldr	r3, [pc, #216]	; (3da4 <getSelectorConfig+0x114>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d01d      	beq.n	3d0e <getSelectorConfig+0x7e>
    3cd2:	2300      	movs	r3, #0
    3cd4:	9303      	str	r3, [sp, #12]
    3cd6:	e013      	b.n	3d00 <getSelectorConfig+0x70>
    3cd8:	4b32      	ldr	r3, [pc, #200]	; (3da4 <getSelectorConfig+0x114>)
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	9a03      	ldr	r2, [sp, #12]
    3cde:	320d      	adds	r2, #13
    3ce0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3ce4:	9a01      	ldr	r2, [sp, #4]
    3ce6:	429a      	cmp	r2, r3
    3ce8:	d107      	bne.n	3cfa <getSelectorConfig+0x6a>
    3cea:	4b2e      	ldr	r3, [pc, #184]	; (3da4 <getSelectorConfig+0x114>)
    3cec:	681a      	ldr	r2, [r3, #0]
    3cee:	9b03      	ldr	r3, [sp, #12]
    3cf0:	330d      	adds	r3, #13
    3cf2:	00db      	lsls	r3, r3, #3
    3cf4:	4413      	add	r3, r2
    3cf6:	9305      	str	r3, [sp, #20]
    3cf8:	e009      	b.n	3d0e <getSelectorConfig+0x7e>
    3cfa:	9b03      	ldr	r3, [sp, #12]
    3cfc:	3301      	adds	r3, #1
    3cfe:	9303      	str	r3, [sp, #12]
    3d00:	4b28      	ldr	r3, [pc, #160]	; (3da4 <getSelectorConfig+0x114>)
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	7adb      	ldrb	r3, [r3, #11]
    3d06:	461a      	mov	r2, r3
    3d08:	9b03      	ldr	r3, [sp, #12]
    3d0a:	4293      	cmp	r3, r2
    3d0c:	d3e4      	bcc.n	3cd8 <getSelectorConfig+0x48>
    3d0e:	9b05      	ldr	r3, [sp, #20]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d140      	bne.n	3d96 <getSelectorConfig+0x106>
    3d14:	9b04      	ldr	r3, [sp, #16]
    3d16:	00db      	lsls	r3, r3, #3
    3d18:	4a23      	ldr	r2, [pc, #140]	; (3da8 <getSelectorConfig+0x118>)
    3d1a:	4413      	add	r3, r2
    3d1c:	9305      	str	r3, [sp, #20]
    3d1e:	4922      	ldr	r1, [pc, #136]	; (3da8 <getSelectorConfig+0x118>)
    3d20:	9b04      	ldr	r3, [sp, #16]
    3d22:	9a01      	ldr	r2, [sp, #4]
    3d24:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    3d28:	9b01      	ldr	r3, [sp, #4]
    3d2a:	2b1b      	cmp	r3, #27
    3d2c:	d025      	beq.n	3d7a <getSelectorConfig+0xea>
    3d2e:	9b01      	ldr	r3, [sp, #4]
    3d30:	2b1b      	cmp	r3, #27
    3d32:	d832      	bhi.n	3d9a <getSelectorConfig+0x10a>
    3d34:	9b01      	ldr	r3, [sp, #4]
    3d36:	2b19      	cmp	r3, #25
    3d38:	d003      	beq.n	3d42 <getSelectorConfig+0xb2>
    3d3a:	9b01      	ldr	r3, [sp, #4]
    3d3c:	2b1a      	cmp	r3, #26
    3d3e:	d00e      	beq.n	3d5e <getSelectorConfig+0xce>
    3d40:	e02b      	b.n	3d9a <getSelectorConfig+0x10a>
    3d42:	4b1a      	ldr	r3, [pc, #104]	; (3dac <getSelectorConfig+0x11c>)
    3d44:	695b      	ldr	r3, [r3, #20]
    3d46:	0e1b      	lsrs	r3, r3, #24
    3d48:	f003 030f 	and.w	r3, r3, #15
    3d4c:	4a18      	ldr	r2, [pc, #96]	; (3db0 <getSelectorConfig+0x120>)
    3d4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d52:	4915      	ldr	r1, [pc, #84]	; (3da8 <getSelectorConfig+0x118>)
    3d54:	9b04      	ldr	r3, [sp, #16]
    3d56:	00db      	lsls	r3, r3, #3
    3d58:	440b      	add	r3, r1
    3d5a:	605a      	str	r2, [r3, #4]
    3d5c:	e01e      	b.n	3d9c <getSelectorConfig+0x10c>
    3d5e:	4b13      	ldr	r3, [pc, #76]	; (3dac <getSelectorConfig+0x11c>)
    3d60:	699b      	ldr	r3, [r3, #24]
    3d62:	0e1b      	lsrs	r3, r3, #24
    3d64:	f003 030f 	and.w	r3, r3, #15
    3d68:	4a11      	ldr	r2, [pc, #68]	; (3db0 <getSelectorConfig+0x120>)
    3d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d6e:	490e      	ldr	r1, [pc, #56]	; (3da8 <getSelectorConfig+0x118>)
    3d70:	9b04      	ldr	r3, [sp, #16]
    3d72:	00db      	lsls	r3, r3, #3
    3d74:	440b      	add	r3, r1
    3d76:	605a      	str	r2, [r3, #4]
    3d78:	e010      	b.n	3d9c <getSelectorConfig+0x10c>
    3d7a:	4b0c      	ldr	r3, [pc, #48]	; (3dac <getSelectorConfig+0x11c>)
    3d7c:	69db      	ldr	r3, [r3, #28]
    3d7e:	0e1b      	lsrs	r3, r3, #24
    3d80:	f003 030f 	and.w	r3, r3, #15
    3d84:	4a0a      	ldr	r2, [pc, #40]	; (3db0 <getSelectorConfig+0x120>)
    3d86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3d8a:	4907      	ldr	r1, [pc, #28]	; (3da8 <getSelectorConfig+0x118>)
    3d8c:	9b04      	ldr	r3, [sp, #16]
    3d8e:	00db      	lsls	r3, r3, #3
    3d90:	440b      	add	r3, r1
    3d92:	605a      	str	r2, [r3, #4]
    3d94:	e002      	b.n	3d9c <getSelectorConfig+0x10c>
    3d96:	bf00      	nop
    3d98:	e000      	b.n	3d9c <getSelectorConfig+0x10c>
    3d9a:	bf00      	nop
    3d9c:	9b05      	ldr	r3, [sp, #20]
    3d9e:	4618      	mov	r0, r3
    3da0:	b006      	add	sp, #24
    3da2:	4770      	bx	lr
    3da4:	1fff8ba8 	.word	0x1fff8ba8
    3da8:	1fff8c5c 	.word	0x1fff8c5c
    3dac:	40064000 	.word	0x40064000
    3db0:	0000bcf0 	.word	0x0000bcf0

00003db4 <getCoreDividerConfig>:
    3db4:	b086      	sub	sp, #24
    3db6:	9001      	str	r0, [sp, #4]
    3db8:	2300      	movs	r3, #0
    3dba:	9305      	str	r3, [sp, #20]
    3dbc:	2300      	movs	r3, #0
    3dbe:	9304      	str	r3, [sp, #16]
    3dc0:	9b01      	ldr	r3, [sp, #4]
    3dc2:	2b1f      	cmp	r3, #31
    3dc4:	d00f      	beq.n	3de6 <getCoreDividerConfig+0x32>
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	2b1f      	cmp	r3, #31
    3dca:	d80f      	bhi.n	3dec <getCoreDividerConfig+0x38>
    3dcc:	9b01      	ldr	r3, [sp, #4]
    3dce:	2b1d      	cmp	r3, #29
    3dd0:	d003      	beq.n	3dda <getCoreDividerConfig+0x26>
    3dd2:	9b01      	ldr	r3, [sp, #4]
    3dd4:	2b1e      	cmp	r3, #30
    3dd6:	d003      	beq.n	3de0 <getCoreDividerConfig+0x2c>
    3dd8:	e008      	b.n	3dec <getCoreDividerConfig+0x38>
    3dda:	2300      	movs	r3, #0
    3ddc:	9304      	str	r3, [sp, #16]
    3dde:	e006      	b.n	3dee <getCoreDividerConfig+0x3a>
    3de0:	2301      	movs	r3, #1
    3de2:	9304      	str	r3, [sp, #16]
    3de4:	e003      	b.n	3dee <getCoreDividerConfig+0x3a>
    3de6:	2302      	movs	r3, #2
    3de8:	9304      	str	r3, [sp, #16]
    3dea:	e000      	b.n	3dee <getCoreDividerConfig+0x3a>
    3dec:	bf00      	nop
    3dee:	4b41      	ldr	r3, [pc, #260]	; (3ef4 <getCoreDividerConfig+0x140>)
    3df0:	681b      	ldr	r3, [r3, #0]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d026      	beq.n	3e44 <getCoreDividerConfig+0x90>
    3df6:	2300      	movs	r3, #0
    3df8:	9303      	str	r3, [sp, #12]
    3dfa:	e01c      	b.n	3e36 <getCoreDividerConfig+0x82>
    3dfc:	4b3d      	ldr	r3, [pc, #244]	; (3ef4 <getCoreDividerConfig+0x140>)
    3dfe:	6819      	ldr	r1, [r3, #0]
    3e00:	9a03      	ldr	r2, [sp, #12]
    3e02:	4613      	mov	r3, r2
    3e04:	005b      	lsls	r3, r3, #1
    3e06:	4413      	add	r3, r2
    3e08:	009b      	lsls	r3, r3, #2
    3e0a:	440b      	add	r3, r1
    3e0c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	9a01      	ldr	r2, [sp, #4]
    3e14:	429a      	cmp	r2, r3
    3e16:	d10b      	bne.n	3e30 <getCoreDividerConfig+0x7c>
    3e18:	4b36      	ldr	r3, [pc, #216]	; (3ef4 <getCoreDividerConfig+0x140>)
    3e1a:	6819      	ldr	r1, [r3, #0]
    3e1c:	9a03      	ldr	r2, [sp, #12]
    3e1e:	4613      	mov	r3, r2
    3e20:	005b      	lsls	r3, r3, #1
    3e22:	4413      	add	r3, r2
    3e24:	009b      	lsls	r3, r3, #2
    3e26:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3e2a:	440b      	add	r3, r1
    3e2c:	9305      	str	r3, [sp, #20]
    3e2e:	e009      	b.n	3e44 <getCoreDividerConfig+0x90>
    3e30:	9b03      	ldr	r3, [sp, #12]
    3e32:	3301      	adds	r3, #1
    3e34:	9303      	str	r3, [sp, #12]
    3e36:	4b2f      	ldr	r3, [pc, #188]	; (3ef4 <getCoreDividerConfig+0x140>)
    3e38:	681b      	ldr	r3, [r3, #0]
    3e3a:	7b1b      	ldrb	r3, [r3, #12]
    3e3c:	461a      	mov	r2, r3
    3e3e:	9b03      	ldr	r3, [sp, #12]
    3e40:	4293      	cmp	r3, r2
    3e42:	d3db      	bcc.n	3dfc <getCoreDividerConfig+0x48>
    3e44:	9b05      	ldr	r3, [sp, #20]
    3e46:	2b00      	cmp	r3, #0
    3e48:	d14d      	bne.n	3ee6 <getCoreDividerConfig+0x132>
    3e4a:	9a04      	ldr	r2, [sp, #16]
    3e4c:	4613      	mov	r3, r2
    3e4e:	005b      	lsls	r3, r3, #1
    3e50:	4413      	add	r3, r2
    3e52:	009b      	lsls	r3, r3, #2
    3e54:	4a28      	ldr	r2, [pc, #160]	; (3ef8 <getCoreDividerConfig+0x144>)
    3e56:	4413      	add	r3, r2
    3e58:	9305      	str	r3, [sp, #20]
    3e5a:	4927      	ldr	r1, [pc, #156]	; (3ef8 <getCoreDividerConfig+0x144>)
    3e5c:	9a04      	ldr	r2, [sp, #16]
    3e5e:	4613      	mov	r3, r2
    3e60:	005b      	lsls	r3, r3, #1
    3e62:	4413      	add	r3, r2
    3e64:	009b      	lsls	r3, r3, #2
    3e66:	440b      	add	r3, r1
    3e68:	9a01      	ldr	r2, [sp, #4]
    3e6a:	601a      	str	r2, [r3, #0]
    3e6c:	9b01      	ldr	r3, [sp, #4]
    3e6e:	2b1f      	cmp	r3, #31
    3e70:	d029      	beq.n	3ec6 <getCoreDividerConfig+0x112>
    3e72:	9b01      	ldr	r3, [sp, #4]
    3e74:	2b1f      	cmp	r3, #31
    3e76:	d838      	bhi.n	3eea <getCoreDividerConfig+0x136>
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	2b1d      	cmp	r3, #29
    3e7c:	d003      	beq.n	3e86 <getCoreDividerConfig+0xd2>
    3e7e:	9b01      	ldr	r3, [sp, #4]
    3e80:	2b1e      	cmp	r3, #30
    3e82:	d010      	beq.n	3ea6 <getCoreDividerConfig+0xf2>
    3e84:	e031      	b.n	3eea <getCoreDividerConfig+0x136>
    3e86:	4b1d      	ldr	r3, [pc, #116]	; (3efc <getCoreDividerConfig+0x148>)
    3e88:	695b      	ldr	r3, [r3, #20]
    3e8a:	0c1b      	lsrs	r3, r3, #16
    3e8c:	f003 030f 	and.w	r3, r3, #15
    3e90:	1c59      	adds	r1, r3, #1
    3e92:	4819      	ldr	r0, [pc, #100]	; (3ef8 <getCoreDividerConfig+0x144>)
    3e94:	9a04      	ldr	r2, [sp, #16]
    3e96:	4613      	mov	r3, r2
    3e98:	005b      	lsls	r3, r3, #1
    3e9a:	4413      	add	r3, r2
    3e9c:	009b      	lsls	r3, r3, #2
    3e9e:	4403      	add	r3, r0
    3ea0:	3304      	adds	r3, #4
    3ea2:	6019      	str	r1, [r3, #0]
    3ea4:	e022      	b.n	3eec <getCoreDividerConfig+0x138>
    3ea6:	4b15      	ldr	r3, [pc, #84]	; (3efc <getCoreDividerConfig+0x148>)
    3ea8:	699b      	ldr	r3, [r3, #24]
    3eaa:	0c1b      	lsrs	r3, r3, #16
    3eac:	f003 030f 	and.w	r3, r3, #15
    3eb0:	1c59      	adds	r1, r3, #1
    3eb2:	4811      	ldr	r0, [pc, #68]	; (3ef8 <getCoreDividerConfig+0x144>)
    3eb4:	9a04      	ldr	r2, [sp, #16]
    3eb6:	4613      	mov	r3, r2
    3eb8:	005b      	lsls	r3, r3, #1
    3eba:	4413      	add	r3, r2
    3ebc:	009b      	lsls	r3, r3, #2
    3ebe:	4403      	add	r3, r0
    3ec0:	3304      	adds	r3, #4
    3ec2:	6019      	str	r1, [r3, #0]
    3ec4:	e012      	b.n	3eec <getCoreDividerConfig+0x138>
    3ec6:	4b0d      	ldr	r3, [pc, #52]	; (3efc <getCoreDividerConfig+0x148>)
    3ec8:	69db      	ldr	r3, [r3, #28]
    3eca:	0c1b      	lsrs	r3, r3, #16
    3ecc:	f003 030f 	and.w	r3, r3, #15
    3ed0:	1c59      	adds	r1, r3, #1
    3ed2:	4809      	ldr	r0, [pc, #36]	; (3ef8 <getCoreDividerConfig+0x144>)
    3ed4:	9a04      	ldr	r2, [sp, #16]
    3ed6:	4613      	mov	r3, r2
    3ed8:	005b      	lsls	r3, r3, #1
    3eda:	4413      	add	r3, r2
    3edc:	009b      	lsls	r3, r3, #2
    3ede:	4403      	add	r3, r0
    3ee0:	3304      	adds	r3, #4
    3ee2:	6019      	str	r1, [r3, #0]
    3ee4:	e002      	b.n	3eec <getCoreDividerConfig+0x138>
    3ee6:	bf00      	nop
    3ee8:	e000      	b.n	3eec <getCoreDividerConfig+0x138>
    3eea:	bf00      	nop
    3eec:	9b05      	ldr	r3, [sp, #20]
    3eee:	4618      	mov	r0, r3
    3ef0:	b006      	add	sp, #24
    3ef2:	4770      	bx	lr
    3ef4:	1fff8ba8 	.word	0x1fff8ba8
    3ef8:	1fff8c74 	.word	0x1fff8c74
    3efc:	40064000 	.word	0x40064000

00003f00 <getBusDividerConfig>:
    3f00:	b086      	sub	sp, #24
    3f02:	9001      	str	r0, [sp, #4]
    3f04:	2300      	movs	r3, #0
    3f06:	9305      	str	r3, [sp, #20]
    3f08:	2300      	movs	r3, #0
    3f0a:	9304      	str	r3, [sp, #16]
    3f0c:	9b01      	ldr	r3, [sp, #4]
    3f0e:	2b23      	cmp	r3, #35	; 0x23
    3f10:	d00f      	beq.n	3f32 <getBusDividerConfig+0x32>
    3f12:	9b01      	ldr	r3, [sp, #4]
    3f14:	2b23      	cmp	r3, #35	; 0x23
    3f16:	d80f      	bhi.n	3f38 <getBusDividerConfig+0x38>
    3f18:	9b01      	ldr	r3, [sp, #4]
    3f1a:	2b21      	cmp	r3, #33	; 0x21
    3f1c:	d003      	beq.n	3f26 <getBusDividerConfig+0x26>
    3f1e:	9b01      	ldr	r3, [sp, #4]
    3f20:	2b22      	cmp	r3, #34	; 0x22
    3f22:	d003      	beq.n	3f2c <getBusDividerConfig+0x2c>
    3f24:	e008      	b.n	3f38 <getBusDividerConfig+0x38>
    3f26:	2300      	movs	r3, #0
    3f28:	9304      	str	r3, [sp, #16]
    3f2a:	e006      	b.n	3f3a <getBusDividerConfig+0x3a>
    3f2c:	2301      	movs	r3, #1
    3f2e:	9304      	str	r3, [sp, #16]
    3f30:	e003      	b.n	3f3a <getBusDividerConfig+0x3a>
    3f32:	2302      	movs	r3, #2
    3f34:	9304      	str	r3, [sp, #16]
    3f36:	e000      	b.n	3f3a <getBusDividerConfig+0x3a>
    3f38:	bf00      	nop
    3f3a:	4b41      	ldr	r3, [pc, #260]	; (4040 <getBusDividerConfig+0x140>)
    3f3c:	681b      	ldr	r3, [r3, #0]
    3f3e:	2b00      	cmp	r3, #0
    3f40:	d026      	beq.n	3f90 <getBusDividerConfig+0x90>
    3f42:	2300      	movs	r3, #0
    3f44:	9303      	str	r3, [sp, #12]
    3f46:	e01c      	b.n	3f82 <getBusDividerConfig+0x82>
    3f48:	4b3d      	ldr	r3, [pc, #244]	; (4040 <getBusDividerConfig+0x140>)
    3f4a:	6819      	ldr	r1, [r3, #0]
    3f4c:	9a03      	ldr	r2, [sp, #12]
    3f4e:	4613      	mov	r3, r2
    3f50:	005b      	lsls	r3, r3, #1
    3f52:	4413      	add	r3, r2
    3f54:	009b      	lsls	r3, r3, #2
    3f56:	440b      	add	r3, r1
    3f58:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	9a01      	ldr	r2, [sp, #4]
    3f60:	429a      	cmp	r2, r3
    3f62:	d10b      	bne.n	3f7c <getBusDividerConfig+0x7c>
    3f64:	4b36      	ldr	r3, [pc, #216]	; (4040 <getBusDividerConfig+0x140>)
    3f66:	6819      	ldr	r1, [r3, #0]
    3f68:	9a03      	ldr	r2, [sp, #12]
    3f6a:	4613      	mov	r3, r2
    3f6c:	005b      	lsls	r3, r3, #1
    3f6e:	4413      	add	r3, r2
    3f70:	009b      	lsls	r3, r3, #2
    3f72:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f76:	440b      	add	r3, r1
    3f78:	9305      	str	r3, [sp, #20]
    3f7a:	e009      	b.n	3f90 <getBusDividerConfig+0x90>
    3f7c:	9b03      	ldr	r3, [sp, #12]
    3f7e:	3301      	adds	r3, #1
    3f80:	9303      	str	r3, [sp, #12]
    3f82:	4b2f      	ldr	r3, [pc, #188]	; (4040 <getBusDividerConfig+0x140>)
    3f84:	681b      	ldr	r3, [r3, #0]
    3f86:	7b1b      	ldrb	r3, [r3, #12]
    3f88:	461a      	mov	r2, r3
    3f8a:	9b03      	ldr	r3, [sp, #12]
    3f8c:	4293      	cmp	r3, r2
    3f8e:	d3db      	bcc.n	3f48 <getBusDividerConfig+0x48>
    3f90:	9b05      	ldr	r3, [sp, #20]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d14d      	bne.n	4032 <getBusDividerConfig+0x132>
    3f96:	9a04      	ldr	r2, [sp, #16]
    3f98:	4613      	mov	r3, r2
    3f9a:	005b      	lsls	r3, r3, #1
    3f9c:	4413      	add	r3, r2
    3f9e:	009b      	lsls	r3, r3, #2
    3fa0:	4a28      	ldr	r2, [pc, #160]	; (4044 <getBusDividerConfig+0x144>)
    3fa2:	4413      	add	r3, r2
    3fa4:	9305      	str	r3, [sp, #20]
    3fa6:	4927      	ldr	r1, [pc, #156]	; (4044 <getBusDividerConfig+0x144>)
    3fa8:	9a04      	ldr	r2, [sp, #16]
    3faa:	4613      	mov	r3, r2
    3fac:	005b      	lsls	r3, r3, #1
    3fae:	4413      	add	r3, r2
    3fb0:	009b      	lsls	r3, r3, #2
    3fb2:	440b      	add	r3, r1
    3fb4:	9a01      	ldr	r2, [sp, #4]
    3fb6:	601a      	str	r2, [r3, #0]
    3fb8:	9b01      	ldr	r3, [sp, #4]
    3fba:	2b23      	cmp	r3, #35	; 0x23
    3fbc:	d029      	beq.n	4012 <getBusDividerConfig+0x112>
    3fbe:	9b01      	ldr	r3, [sp, #4]
    3fc0:	2b23      	cmp	r3, #35	; 0x23
    3fc2:	d838      	bhi.n	4036 <getBusDividerConfig+0x136>
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	2b21      	cmp	r3, #33	; 0x21
    3fc8:	d003      	beq.n	3fd2 <getBusDividerConfig+0xd2>
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	2b22      	cmp	r3, #34	; 0x22
    3fce:	d010      	beq.n	3ff2 <getBusDividerConfig+0xf2>
    3fd0:	e031      	b.n	4036 <getBusDividerConfig+0x136>
    3fd2:	4b1d      	ldr	r3, [pc, #116]	; (4048 <getBusDividerConfig+0x148>)
    3fd4:	695b      	ldr	r3, [r3, #20]
    3fd6:	091b      	lsrs	r3, r3, #4
    3fd8:	f003 030f 	and.w	r3, r3, #15
    3fdc:	1c59      	adds	r1, r3, #1
    3fde:	4819      	ldr	r0, [pc, #100]	; (4044 <getBusDividerConfig+0x144>)
    3fe0:	9a04      	ldr	r2, [sp, #16]
    3fe2:	4613      	mov	r3, r2
    3fe4:	005b      	lsls	r3, r3, #1
    3fe6:	4413      	add	r3, r2
    3fe8:	009b      	lsls	r3, r3, #2
    3fea:	4403      	add	r3, r0
    3fec:	3304      	adds	r3, #4
    3fee:	6019      	str	r1, [r3, #0]
    3ff0:	e022      	b.n	4038 <getBusDividerConfig+0x138>
    3ff2:	4b15      	ldr	r3, [pc, #84]	; (4048 <getBusDividerConfig+0x148>)
    3ff4:	699b      	ldr	r3, [r3, #24]
    3ff6:	091b      	lsrs	r3, r3, #4
    3ff8:	f003 030f 	and.w	r3, r3, #15
    3ffc:	1c59      	adds	r1, r3, #1
    3ffe:	4811      	ldr	r0, [pc, #68]	; (4044 <getBusDividerConfig+0x144>)
    4000:	9a04      	ldr	r2, [sp, #16]
    4002:	4613      	mov	r3, r2
    4004:	005b      	lsls	r3, r3, #1
    4006:	4413      	add	r3, r2
    4008:	009b      	lsls	r3, r3, #2
    400a:	4403      	add	r3, r0
    400c:	3304      	adds	r3, #4
    400e:	6019      	str	r1, [r3, #0]
    4010:	e012      	b.n	4038 <getBusDividerConfig+0x138>
    4012:	4b0d      	ldr	r3, [pc, #52]	; (4048 <getBusDividerConfig+0x148>)
    4014:	69db      	ldr	r3, [r3, #28]
    4016:	091b      	lsrs	r3, r3, #4
    4018:	f003 030f 	and.w	r3, r3, #15
    401c:	1c59      	adds	r1, r3, #1
    401e:	4809      	ldr	r0, [pc, #36]	; (4044 <getBusDividerConfig+0x144>)
    4020:	9a04      	ldr	r2, [sp, #16]
    4022:	4613      	mov	r3, r2
    4024:	005b      	lsls	r3, r3, #1
    4026:	4413      	add	r3, r2
    4028:	009b      	lsls	r3, r3, #2
    402a:	4403      	add	r3, r0
    402c:	3304      	adds	r3, #4
    402e:	6019      	str	r1, [r3, #0]
    4030:	e002      	b.n	4038 <getBusDividerConfig+0x138>
    4032:	bf00      	nop
    4034:	e000      	b.n	4038 <getBusDividerConfig+0x138>
    4036:	bf00      	nop
    4038:	9b05      	ldr	r3, [sp, #20]
    403a:	4618      	mov	r0, r3
    403c:	b006      	add	sp, #24
    403e:	4770      	bx	lr
    4040:	1fff8ba8 	.word	0x1fff8ba8
    4044:	1fff8c98 	.word	0x1fff8c98
    4048:	40064000 	.word	0x40064000

0000404c <getSlowDividerConfig>:
    404c:	b086      	sub	sp, #24
    404e:	9001      	str	r0, [sp, #4]
    4050:	2300      	movs	r3, #0
    4052:	9305      	str	r3, [sp, #20]
    4054:	2300      	movs	r3, #0
    4056:	9304      	str	r3, [sp, #16]
    4058:	9b01      	ldr	r3, [sp, #4]
    405a:	2b27      	cmp	r3, #39	; 0x27
    405c:	d00f      	beq.n	407e <getSlowDividerConfig+0x32>
    405e:	9b01      	ldr	r3, [sp, #4]
    4060:	2b27      	cmp	r3, #39	; 0x27
    4062:	d80f      	bhi.n	4084 <getSlowDividerConfig+0x38>
    4064:	9b01      	ldr	r3, [sp, #4]
    4066:	2b25      	cmp	r3, #37	; 0x25
    4068:	d003      	beq.n	4072 <getSlowDividerConfig+0x26>
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	2b26      	cmp	r3, #38	; 0x26
    406e:	d003      	beq.n	4078 <getSlowDividerConfig+0x2c>
    4070:	e008      	b.n	4084 <getSlowDividerConfig+0x38>
    4072:	2300      	movs	r3, #0
    4074:	9304      	str	r3, [sp, #16]
    4076:	e006      	b.n	4086 <getSlowDividerConfig+0x3a>
    4078:	2301      	movs	r3, #1
    407a:	9304      	str	r3, [sp, #16]
    407c:	e003      	b.n	4086 <getSlowDividerConfig+0x3a>
    407e:	2302      	movs	r3, #2
    4080:	9304      	str	r3, [sp, #16]
    4082:	e000      	b.n	4086 <getSlowDividerConfig+0x3a>
    4084:	bf00      	nop
    4086:	4b40      	ldr	r3, [pc, #256]	; (4188 <getSlowDividerConfig+0x13c>)
    4088:	681b      	ldr	r3, [r3, #0]
    408a:	2b00      	cmp	r3, #0
    408c:	d026      	beq.n	40dc <getSlowDividerConfig+0x90>
    408e:	2300      	movs	r3, #0
    4090:	9303      	str	r3, [sp, #12]
    4092:	e01c      	b.n	40ce <getSlowDividerConfig+0x82>
    4094:	4b3c      	ldr	r3, [pc, #240]	; (4188 <getSlowDividerConfig+0x13c>)
    4096:	6819      	ldr	r1, [r3, #0]
    4098:	9a03      	ldr	r2, [sp, #12]
    409a:	4613      	mov	r3, r2
    409c:	005b      	lsls	r3, r3, #1
    409e:	4413      	add	r3, r2
    40a0:	009b      	lsls	r3, r3, #2
    40a2:	440b      	add	r3, r1
    40a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	9a01      	ldr	r2, [sp, #4]
    40ac:	429a      	cmp	r2, r3
    40ae:	d10b      	bne.n	40c8 <getSlowDividerConfig+0x7c>
    40b0:	4b35      	ldr	r3, [pc, #212]	; (4188 <getSlowDividerConfig+0x13c>)
    40b2:	6819      	ldr	r1, [r3, #0]
    40b4:	9a03      	ldr	r2, [sp, #12]
    40b6:	4613      	mov	r3, r2
    40b8:	005b      	lsls	r3, r3, #1
    40ba:	4413      	add	r3, r2
    40bc:	009b      	lsls	r3, r3, #2
    40be:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    40c2:	440b      	add	r3, r1
    40c4:	9305      	str	r3, [sp, #20]
    40c6:	e009      	b.n	40dc <getSlowDividerConfig+0x90>
    40c8:	9b03      	ldr	r3, [sp, #12]
    40ca:	3301      	adds	r3, #1
    40cc:	9303      	str	r3, [sp, #12]
    40ce:	4b2e      	ldr	r3, [pc, #184]	; (4188 <getSlowDividerConfig+0x13c>)
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	7b1b      	ldrb	r3, [r3, #12]
    40d4:	461a      	mov	r2, r3
    40d6:	9b03      	ldr	r3, [sp, #12]
    40d8:	4293      	cmp	r3, r2
    40da:	d3db      	bcc.n	4094 <getSlowDividerConfig+0x48>
    40dc:	9b05      	ldr	r3, [sp, #20]
    40de:	2b00      	cmp	r3, #0
    40e0:	d14a      	bne.n	4178 <getSlowDividerConfig+0x12c>
    40e2:	9a04      	ldr	r2, [sp, #16]
    40e4:	4613      	mov	r3, r2
    40e6:	005b      	lsls	r3, r3, #1
    40e8:	4413      	add	r3, r2
    40ea:	009b      	lsls	r3, r3, #2
    40ec:	4a27      	ldr	r2, [pc, #156]	; (418c <getSlowDividerConfig+0x140>)
    40ee:	4413      	add	r3, r2
    40f0:	9305      	str	r3, [sp, #20]
    40f2:	4926      	ldr	r1, [pc, #152]	; (418c <getSlowDividerConfig+0x140>)
    40f4:	9a04      	ldr	r2, [sp, #16]
    40f6:	4613      	mov	r3, r2
    40f8:	005b      	lsls	r3, r3, #1
    40fa:	4413      	add	r3, r2
    40fc:	009b      	lsls	r3, r3, #2
    40fe:	440b      	add	r3, r1
    4100:	9a01      	ldr	r2, [sp, #4]
    4102:	601a      	str	r2, [r3, #0]
    4104:	9b01      	ldr	r3, [sp, #4]
    4106:	2b27      	cmp	r3, #39	; 0x27
    4108:	d027      	beq.n	415a <getSlowDividerConfig+0x10e>
    410a:	9b01      	ldr	r3, [sp, #4]
    410c:	2b27      	cmp	r3, #39	; 0x27
    410e:	d835      	bhi.n	417c <getSlowDividerConfig+0x130>
    4110:	9b01      	ldr	r3, [sp, #4]
    4112:	2b25      	cmp	r3, #37	; 0x25
    4114:	d003      	beq.n	411e <getSlowDividerConfig+0xd2>
    4116:	9b01      	ldr	r3, [sp, #4]
    4118:	2b26      	cmp	r3, #38	; 0x26
    411a:	d00f      	beq.n	413c <getSlowDividerConfig+0xf0>
    411c:	e02e      	b.n	417c <getSlowDividerConfig+0x130>
    411e:	4b1c      	ldr	r3, [pc, #112]	; (4190 <getSlowDividerConfig+0x144>)
    4120:	695b      	ldr	r3, [r3, #20]
    4122:	f003 030f 	and.w	r3, r3, #15
    4126:	1c59      	adds	r1, r3, #1
    4128:	4818      	ldr	r0, [pc, #96]	; (418c <getSlowDividerConfig+0x140>)
    412a:	9a04      	ldr	r2, [sp, #16]
    412c:	4613      	mov	r3, r2
    412e:	005b      	lsls	r3, r3, #1
    4130:	4413      	add	r3, r2
    4132:	009b      	lsls	r3, r3, #2
    4134:	4403      	add	r3, r0
    4136:	3304      	adds	r3, #4
    4138:	6019      	str	r1, [r3, #0]
    413a:	e020      	b.n	417e <getSlowDividerConfig+0x132>
    413c:	4b14      	ldr	r3, [pc, #80]	; (4190 <getSlowDividerConfig+0x144>)
    413e:	699b      	ldr	r3, [r3, #24]
    4140:	f003 030f 	and.w	r3, r3, #15
    4144:	1c59      	adds	r1, r3, #1
    4146:	4811      	ldr	r0, [pc, #68]	; (418c <getSlowDividerConfig+0x140>)
    4148:	9a04      	ldr	r2, [sp, #16]
    414a:	4613      	mov	r3, r2
    414c:	005b      	lsls	r3, r3, #1
    414e:	4413      	add	r3, r2
    4150:	009b      	lsls	r3, r3, #2
    4152:	4403      	add	r3, r0
    4154:	3304      	adds	r3, #4
    4156:	6019      	str	r1, [r3, #0]
    4158:	e011      	b.n	417e <getSlowDividerConfig+0x132>
    415a:	4b0d      	ldr	r3, [pc, #52]	; (4190 <getSlowDividerConfig+0x144>)
    415c:	69db      	ldr	r3, [r3, #28]
    415e:	f003 030f 	and.w	r3, r3, #15
    4162:	1c59      	adds	r1, r3, #1
    4164:	4809      	ldr	r0, [pc, #36]	; (418c <getSlowDividerConfig+0x140>)
    4166:	9a04      	ldr	r2, [sp, #16]
    4168:	4613      	mov	r3, r2
    416a:	005b      	lsls	r3, r3, #1
    416c:	4413      	add	r3, r2
    416e:	009b      	lsls	r3, r3, #2
    4170:	4403      	add	r3, r0
    4172:	3304      	adds	r3, #4
    4174:	6019      	str	r1, [r3, #0]
    4176:	e002      	b.n	417e <getSlowDividerConfig+0x132>
    4178:	bf00      	nop
    417a:	e000      	b.n	417e <getSlowDividerConfig+0x132>
    417c:	bf00      	nop
    417e:	9b05      	ldr	r3, [sp, #20]
    4180:	4618      	mov	r0, r3
    4182:	b006      	add	sp, #24
    4184:	4770      	bx	lr
    4186:	bf00      	nop
    4188:	1fff8ba8 	.word	0x1fff8ba8
    418c:	1fff8cbc 	.word	0x1fff8cbc
    4190:	40064000 	.word	0x40064000

00004194 <Clock_Ip_ClockInitializeObjects>:
    4194:	b500      	push	{lr}
    4196:	b083      	sub	sp, #12
    4198:	9001      	str	r0, [sp, #4]
    419a:	4b64      	ldr	r3, [pc, #400]	; (432c <Clock_Ip_ClockInitializeObjects+0x198>)
    419c:	781b      	ldrb	r3, [r3, #0]
    419e:	f083 0301 	eor.w	r3, r3, #1
    41a2:	b2db      	uxtb	r3, r3
    41a4:	2b00      	cmp	r3, #0
    41a6:	d05b      	beq.n	4260 <Clock_Ip_ClockInitializeObjects+0xcc>
    41a8:	4b60      	ldr	r3, [pc, #384]	; (432c <Clock_Ip_ClockInitializeObjects+0x198>)
    41aa:	2201      	movs	r2, #1
    41ac:	701a      	strb	r2, [r3, #0]
    41ae:	4b60      	ldr	r3, [pc, #384]	; (4330 <Clock_Ip_ClockInitializeObjects+0x19c>)
    41b0:	785b      	ldrb	r3, [r3, #1]
    41b2:	461a      	mov	r2, r3
    41b4:	4613      	mov	r3, r2
    41b6:	009b      	lsls	r3, r3, #2
    41b8:	4413      	add	r3, r2
    41ba:	009b      	lsls	r3, r3, #2
    41bc:	4a5d      	ldr	r2, [pc, #372]	; (4334 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    41be:	4413      	add	r3, r2
    41c0:	4a5d      	ldr	r2, [pc, #372]	; (4338 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    41c2:	6013      	str	r3, [r2, #0]
    41c4:	4b5d      	ldr	r3, [pc, #372]	; (433c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    41c6:	785b      	ldrb	r3, [r3, #1]
    41c8:	461a      	mov	r2, r3
    41ca:	4613      	mov	r3, r2
    41cc:	009b      	lsls	r3, r3, #2
    41ce:	4413      	add	r3, r2
    41d0:	009b      	lsls	r3, r3, #2
    41d2:	4a5b      	ldr	r2, [pc, #364]	; (4340 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    41d4:	4413      	add	r3, r2
    41d6:	4a5b      	ldr	r2, [pc, #364]	; (4344 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    41d8:	6013      	str	r3, [r2, #0]
    41da:	4b5b      	ldr	r3, [pc, #364]	; (4348 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    41dc:	791b      	ldrb	r3, [r3, #4]
    41de:	461a      	mov	r2, r3
    41e0:	4613      	mov	r3, r2
    41e2:	005b      	lsls	r3, r3, #1
    41e4:	4413      	add	r3, r2
    41e6:	009b      	lsls	r3, r3, #2
    41e8:	4a58      	ldr	r2, [pc, #352]	; (434c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    41ea:	4413      	add	r3, r2
    41ec:	4a58      	ldr	r2, [pc, #352]	; (4350 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    41ee:	6013      	str	r3, [r2, #0]
    41f0:	4b58      	ldr	r3, [pc, #352]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    41f2:	795b      	ldrb	r3, [r3, #5]
    41f4:	00db      	lsls	r3, r3, #3
    41f6:	4a58      	ldr	r2, [pc, #352]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    41f8:	4413      	add	r3, r2
    41fa:	4a58      	ldr	r2, [pc, #352]	; (435c <Clock_Ip_ClockInitializeObjects+0x1c8>)
    41fc:	6013      	str	r3, [r2, #0]
    41fe:	4b55      	ldr	r3, [pc, #340]	; (4354 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4200:	79db      	ldrb	r3, [r3, #7]
    4202:	00db      	lsls	r3, r3, #3
    4204:	4a54      	ldr	r2, [pc, #336]	; (4358 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4206:	4413      	add	r3, r2
    4208:	4a55      	ldr	r2, [pc, #340]	; (4360 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    420a:	6013      	str	r3, [r2, #0]
    420c:	4b55      	ldr	r3, [pc, #340]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    420e:	799b      	ldrb	r3, [r3, #6]
    4210:	009b      	lsls	r3, r3, #2
    4212:	4a55      	ldr	r2, [pc, #340]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4214:	4413      	add	r3, r2
    4216:	4a55      	ldr	r2, [pc, #340]	; (436c <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4218:	6013      	str	r3, [r2, #0]
    421a:	4b52      	ldr	r3, [pc, #328]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    421c:	7a1b      	ldrb	r3, [r3, #8]
    421e:	009b      	lsls	r3, r3, #2
    4220:	4a51      	ldr	r2, [pc, #324]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4222:	4413      	add	r3, r2
    4224:	4a52      	ldr	r2, [pc, #328]	; (4370 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4226:	6013      	str	r3, [r2, #0]
    4228:	4b4e      	ldr	r3, [pc, #312]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    422a:	7a5b      	ldrb	r3, [r3, #9]
    422c:	009b      	lsls	r3, r3, #2
    422e:	4a4e      	ldr	r2, [pc, #312]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4230:	4413      	add	r3, r2
    4232:	4a50      	ldr	r2, [pc, #320]	; (4374 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4234:	6013      	str	r3, [r2, #0]
    4236:	4b4b      	ldr	r3, [pc, #300]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4238:	7adb      	ldrb	r3, [r3, #11]
    423a:	009b      	lsls	r3, r3, #2
    423c:	4a4a      	ldr	r2, [pc, #296]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    423e:	4413      	add	r3, r2
    4240:	4a4d      	ldr	r2, [pc, #308]	; (4378 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4242:	6013      	str	r3, [r2, #0]
    4244:	4b47      	ldr	r3, [pc, #284]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4246:	7b1b      	ldrb	r3, [r3, #12]
    4248:	009b      	lsls	r3, r3, #2
    424a:	4a47      	ldr	r2, [pc, #284]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    424c:	4413      	add	r3, r2
    424e:	4a4b      	ldr	r2, [pc, #300]	; (437c <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4250:	6013      	str	r3, [r2, #0]
    4252:	4b44      	ldr	r3, [pc, #272]	; (4364 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4254:	7b9b      	ldrb	r3, [r3, #14]
    4256:	009b      	lsls	r3, r3, #2
    4258:	4a43      	ldr	r2, [pc, #268]	; (4368 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    425a:	4413      	add	r3, r2
    425c:	4a48      	ldr	r2, [pc, #288]	; (4380 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    425e:	6013      	str	r3, [r2, #0]
    4260:	4b48      	ldr	r3, [pc, #288]	; (4384 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	2b00      	cmp	r3, #0
    4266:	d002      	beq.n	426e <Clock_Ip_ClockInitializeObjects+0xda>
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	2b00      	cmp	r3, #0
    426c:	d003      	beq.n	4276 <Clock_Ip_ClockInitializeObjects+0xe2>
    426e:	4b46      	ldr	r3, [pc, #280]	; (4388 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d056      	beq.n	4324 <Clock_Ip_ClockInitializeObjects+0x190>
    4276:	f7ff fc09 	bl	3a8c <getFircConfig>
    427a:	4603      	mov	r3, r0
    427c:	4a43      	ldr	r2, [pc, #268]	; (438c <Clock_Ip_ClockInitializeObjects+0x1f8>)
    427e:	6013      	str	r3, [r2, #0]
    4280:	f7ff fc60 	bl	3b44 <getSoscConfig>
    4284:	4603      	mov	r3, r0
    4286:	4a42      	ldr	r2, [pc, #264]	; (4390 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    4288:	6013      	str	r3, [r2, #0]
    428a:	f7ff fca7 	bl	3bdc <getSpllConfig>
    428e:	4603      	mov	r3, r0
    4290:	4a40      	ldr	r2, [pc, #256]	; (4394 <Clock_Ip_ClockInitializeObjects+0x200>)
    4292:	6013      	str	r3, [r2, #0]
    4294:	2019      	movs	r0, #25
    4296:	f7ff fcfb 	bl	3c90 <getSelectorConfig>
    429a:	4603      	mov	r3, r0
    429c:	4a3e      	ldr	r2, [pc, #248]	; (4398 <Clock_Ip_ClockInitializeObjects+0x204>)
    429e:	6013      	str	r3, [r2, #0]
    42a0:	201a      	movs	r0, #26
    42a2:	f7ff fcf5 	bl	3c90 <getSelectorConfig>
    42a6:	4603      	mov	r3, r0
    42a8:	4a3c      	ldr	r2, [pc, #240]	; (439c <Clock_Ip_ClockInitializeObjects+0x208>)
    42aa:	6013      	str	r3, [r2, #0]
    42ac:	201b      	movs	r0, #27
    42ae:	f7ff fcef 	bl	3c90 <getSelectorConfig>
    42b2:	4603      	mov	r3, r0
    42b4:	4a3a      	ldr	r2, [pc, #232]	; (43a0 <Clock_Ip_ClockInitializeObjects+0x20c>)
    42b6:	6013      	str	r3, [r2, #0]
    42b8:	201d      	movs	r0, #29
    42ba:	f7ff fd7b 	bl	3db4 <getCoreDividerConfig>
    42be:	4603      	mov	r3, r0
    42c0:	4a38      	ldr	r2, [pc, #224]	; (43a4 <Clock_Ip_ClockInitializeObjects+0x210>)
    42c2:	6013      	str	r3, [r2, #0]
    42c4:	201e      	movs	r0, #30
    42c6:	f7ff fd75 	bl	3db4 <getCoreDividerConfig>
    42ca:	4603      	mov	r3, r0
    42cc:	4a36      	ldr	r2, [pc, #216]	; (43a8 <Clock_Ip_ClockInitializeObjects+0x214>)
    42ce:	6013      	str	r3, [r2, #0]
    42d0:	201f      	movs	r0, #31
    42d2:	f7ff fd6f 	bl	3db4 <getCoreDividerConfig>
    42d6:	4603      	mov	r3, r0
    42d8:	4a34      	ldr	r2, [pc, #208]	; (43ac <Clock_Ip_ClockInitializeObjects+0x218>)
    42da:	6013      	str	r3, [r2, #0]
    42dc:	2021      	movs	r0, #33	; 0x21
    42de:	f7ff fe0f 	bl	3f00 <getBusDividerConfig>
    42e2:	4603      	mov	r3, r0
    42e4:	4a32      	ldr	r2, [pc, #200]	; (43b0 <Clock_Ip_ClockInitializeObjects+0x21c>)
    42e6:	6013      	str	r3, [r2, #0]
    42e8:	2022      	movs	r0, #34	; 0x22
    42ea:	f7ff fe09 	bl	3f00 <getBusDividerConfig>
    42ee:	4603      	mov	r3, r0
    42f0:	4a30      	ldr	r2, [pc, #192]	; (43b4 <Clock_Ip_ClockInitializeObjects+0x220>)
    42f2:	6013      	str	r3, [r2, #0]
    42f4:	2023      	movs	r0, #35	; 0x23
    42f6:	f7ff fe03 	bl	3f00 <getBusDividerConfig>
    42fa:	4603      	mov	r3, r0
    42fc:	4a2e      	ldr	r2, [pc, #184]	; (43b8 <Clock_Ip_ClockInitializeObjects+0x224>)
    42fe:	6013      	str	r3, [r2, #0]
    4300:	2025      	movs	r0, #37	; 0x25
    4302:	f7ff fea3 	bl	404c <getSlowDividerConfig>
    4306:	4603      	mov	r3, r0
    4308:	4a2c      	ldr	r2, [pc, #176]	; (43bc <Clock_Ip_ClockInitializeObjects+0x228>)
    430a:	6013      	str	r3, [r2, #0]
    430c:	2026      	movs	r0, #38	; 0x26
    430e:	f7ff fe9d 	bl	404c <getSlowDividerConfig>
    4312:	4603      	mov	r3, r0
    4314:	4a2a      	ldr	r2, [pc, #168]	; (43c0 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4316:	6013      	str	r3, [r2, #0]
    4318:	2027      	movs	r0, #39	; 0x27
    431a:	f7ff fe97 	bl	404c <getSlowDividerConfig>
    431e:	4603      	mov	r3, r0
    4320:	4a28      	ldr	r2, [pc, #160]	; (43c4 <Clock_Ip_ClockInitializeObjects+0x230>)
    4322:	6013      	str	r3, [r2, #0]
    4324:	bf00      	nop
    4326:	b003      	add	sp, #12
    4328:	f85d fb04 	ldr.w	pc, [sp], #4
    432c:	1fff8ce0 	.word	0x1fff8ce0
    4330:	0000b620 	.word	0x0000b620
    4334:	0000bc6c 	.word	0x0000bc6c
    4338:	1fff8bac 	.word	0x1fff8bac
    433c:	0000b5e0 	.word	0x0000b5e0
    4340:	0000bbb4 	.word	0x0000bbb4
    4344:	1fff8bb0 	.word	0x1fff8bb0
    4348:	0000b5f0 	.word	0x0000b5f0
    434c:	0000bc20 	.word	0x0000bc20
    4350:	1fff8bb4 	.word	0x1fff8bb4
    4354:	0000b630 	.word	0x0000b630
    4358:	0000bc98 	.word	0x0000bc98
    435c:	1fff8bb8 	.word	0x1fff8bb8
    4360:	1fff8bf4 	.word	0x1fff8bf4
    4364:	0000b5c0 	.word	0x0000b5c0
    4368:	0000bb70 	.word	0x0000bb70
    436c:	1fff8bbc 	.word	0x1fff8bbc
    4370:	1fff8bf8 	.word	0x1fff8bf8
    4374:	1fff8bc0 	.word	0x1fff8bc0
    4378:	1fff8bfc 	.word	0x1fff8bfc
    437c:	1fff8bc4 	.word	0x1fff8bc4
    4380:	1fff8c00 	.word	0x1fff8c00
    4384:	1fff8b19 	.word	0x1fff8b19
    4388:	1fff8b10 	.word	0x1fff8b10
    438c:	1fff8bc8 	.word	0x1fff8bc8
    4390:	1fff8bcc 	.word	0x1fff8bcc
    4394:	1fff8bd0 	.word	0x1fff8bd0
    4398:	1fff8bd4 	.word	0x1fff8bd4
    439c:	1fff8bd8 	.word	0x1fff8bd8
    43a0:	1fff8c04 	.word	0x1fff8c04
    43a4:	1fff8bdc 	.word	0x1fff8bdc
    43a8:	1fff8be0 	.word	0x1fff8be0
    43ac:	1fff8c08 	.word	0x1fff8c08
    43b0:	1fff8be4 	.word	0x1fff8be4
    43b4:	1fff8be8 	.word	0x1fff8be8
    43b8:	1fff8c0c 	.word	0x1fff8c0c
    43bc:	1fff8bec 	.word	0x1fff8bec
    43c0:	1fff8bf0 	.word	0x1fff8bf0
    43c4:	1fff8c10 	.word	0x1fff8c10

000043c8 <Clock_Ip_ClockPowerModeChangeNotification>:
    43c8:	b500      	push	{lr}
    43ca:	b083      	sub	sp, #12
    43cc:	9001      	str	r0, [sp, #4]
    43ce:	9100      	str	r1, [sp, #0]
    43d0:	9b01      	ldr	r3, [sp, #4]
    43d2:	2b03      	cmp	r3, #3
    43d4:	f000 8090 	beq.w	44f8 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    43d8:	9b01      	ldr	r3, [sp, #4]
    43da:	2b03      	cmp	r3, #3
    43dc:	f200 80d3 	bhi.w	4586 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43e0:	9b01      	ldr	r3, [sp, #4]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d040      	beq.n	4468 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    43e6:	9b01      	ldr	r3, [sp, #4]
    43e8:	3b01      	subs	r3, #1
    43ea:	2b01      	cmp	r3, #1
    43ec:	f200 80cb 	bhi.w	4586 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    43f0:	9b00      	ldr	r3, [sp, #0]
    43f2:	2b00      	cmp	r3, #0
    43f4:	f040 80c9 	bne.w	458a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
    43f8:	4b68      	ldr	r3, [pc, #416]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    43fa:	2200      	movs	r2, #0
    43fc:	701a      	strb	r2, [r3, #0]
    43fe:	4b68      	ldr	r3, [pc, #416]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4400:	681b      	ldr	r3, [r3, #0]
    4402:	685b      	ldr	r3, [r3, #4]
    4404:	4a67      	ldr	r2, [pc, #412]	; (45a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4406:	6812      	ldr	r2, [r2, #0]
    4408:	4610      	mov	r0, r2
    440a:	4798      	blx	r3
    440c:	4b66      	ldr	r3, [pc, #408]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	681b      	ldr	r3, [r3, #0]
    4412:	4a66      	ldr	r2, [pc, #408]	; (45ac <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4414:	6812      	ldr	r2, [r2, #0]
    4416:	4610      	mov	r0, r2
    4418:	4798      	blx	r3
    441a:	4b65      	ldr	r3, [pc, #404]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	681b      	ldr	r3, [r3, #0]
    4420:	4a64      	ldr	r2, [pc, #400]	; (45b4 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4422:	6812      	ldr	r2, [r2, #0]
    4424:	4610      	mov	r0, r2
    4426:	4798      	blx	r3
    4428:	4b63      	ldr	r3, [pc, #396]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    442a:	681b      	ldr	r3, [r3, #0]
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	4a63      	ldr	r2, [pc, #396]	; (45bc <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4430:	6812      	ldr	r2, [r2, #0]
    4432:	4610      	mov	r0, r2
    4434:	4798      	blx	r3
    4436:	4b62      	ldr	r3, [pc, #392]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4438:	681b      	ldr	r3, [r3, #0]
    443a:	691b      	ldr	r3, [r3, #16]
    443c:	4a61      	ldr	r2, [pc, #388]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    443e:	6812      	ldr	r2, [r2, #0]
    4440:	6812      	ldr	r2, [r2, #0]
    4442:	4610      	mov	r0, r2
    4444:	4798      	blx	r3
    4446:	4b60      	ldr	r3, [pc, #384]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4448:	681b      	ldr	r3, [r3, #0]
    444a:	68db      	ldr	r3, [r3, #12]
    444c:	4a5f      	ldr	r2, [pc, #380]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    444e:	6812      	ldr	r2, [r2, #0]
    4450:	6812      	ldr	r2, [r2, #0]
    4452:	4610      	mov	r0, r2
    4454:	4798      	blx	r3
    4456:	4b5e      	ldr	r3, [pc, #376]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4458:	681b      	ldr	r3, [r3, #0]
    445a:	689b      	ldr	r3, [r3, #8]
    445c:	4a5d      	ldr	r2, [pc, #372]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    445e:	6812      	ldr	r2, [r2, #0]
    4460:	6812      	ldr	r2, [r2, #0]
    4462:	4610      	mov	r0, r2
    4464:	4798      	blx	r3
    4466:	e090      	b.n	458a <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
    4468:	9b00      	ldr	r3, [sp, #0]
    446a:	2b02      	cmp	r3, #2
    446c:	f040 808f 	bne.w	458e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
    4470:	4b4a      	ldr	r3, [pc, #296]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4472:	2201      	movs	r2, #1
    4474:	701a      	strb	r2, [r3, #0]
    4476:	4b56      	ldr	r3, [pc, #344]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	685b      	ldr	r3, [r3, #4]
    447c:	4a55      	ldr	r2, [pc, #340]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    447e:	6812      	ldr	r2, [r2, #0]
    4480:	4610      	mov	r0, r2
    4482:	4798      	blx	r3
    4484:	4b50      	ldr	r3, [pc, #320]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	691b      	ldr	r3, [r3, #16]
    448a:	4a50      	ldr	r2, [pc, #320]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    448c:	6812      	ldr	r2, [r2, #0]
    448e:	4610      	mov	r0, r2
    4490:	4798      	blx	r3
    4492:	4b4d      	ldr	r3, [pc, #308]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4494:	681b      	ldr	r3, [r3, #0]
    4496:	689b      	ldr	r3, [r3, #8]
    4498:	4a4c      	ldr	r2, [pc, #304]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    449a:	6812      	ldr	r2, [r2, #0]
    449c:	4610      	mov	r0, r2
    449e:	4798      	blx	r3
    44a0:	4b47      	ldr	r3, [pc, #284]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	68db      	ldr	r3, [r3, #12]
    44a6:	4a47      	ldr	r2, [pc, #284]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44a8:	6812      	ldr	r2, [r2, #0]
    44aa:	4610      	mov	r0, r2
    44ac:	4798      	blx	r3
    44ae:	4b44      	ldr	r3, [pc, #272]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	689b      	ldr	r3, [r3, #8]
    44b4:	4a43      	ldr	r2, [pc, #268]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    44b6:	6812      	ldr	r2, [r2, #0]
    44b8:	6812      	ldr	r2, [r2, #0]
    44ba:	4610      	mov	r0, r2
    44bc:	4798      	blx	r3
    44be:	4b38      	ldr	r3, [pc, #224]	; (45a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    44c0:	681b      	ldr	r3, [r3, #0]
    44c2:	685b      	ldr	r3, [r3, #4]
    44c4:	4a44      	ldr	r2, [pc, #272]	; (45d8 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    44c6:	6812      	ldr	r2, [r2, #0]
    44c8:	4610      	mov	r0, r2
    44ca:	4798      	blx	r3
    44cc:	4b36      	ldr	r3, [pc, #216]	; (45a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	4a42      	ldr	r2, [pc, #264]	; (45dc <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    44d4:	6812      	ldr	r2, [r2, #0]
    44d6:	4610      	mov	r0, r2
    44d8:	4798      	blx	r3
    44da:	4b35      	ldr	r3, [pc, #212]	; (45b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	681b      	ldr	r3, [r3, #0]
    44e0:	4a3f      	ldr	r2, [pc, #252]	; (45e0 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    44e2:	6812      	ldr	r2, [r2, #0]
    44e4:	4610      	mov	r0, r2
    44e6:	4798      	blx	r3
    44e8:	4b33      	ldr	r3, [pc, #204]	; (45b8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	681b      	ldr	r3, [r3, #0]
    44ee:	4a3d      	ldr	r2, [pc, #244]	; (45e4 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    44f0:	6812      	ldr	r2, [r2, #0]
    44f2:	4610      	mov	r0, r2
    44f4:	4798      	blx	r3
    44f6:	e04a      	b.n	458e <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
    44f8:	9b00      	ldr	r3, [sp, #0]
    44fa:	2b02      	cmp	r3, #2
    44fc:	d149      	bne.n	4592 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
    44fe:	4b27      	ldr	r3, [pc, #156]	; (459c <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4500:	2201      	movs	r2, #1
    4502:	701a      	strb	r2, [r3, #0]
    4504:	4b32      	ldr	r3, [pc, #200]	; (45d0 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4506:	681b      	ldr	r3, [r3, #0]
    4508:	685b      	ldr	r3, [r3, #4]
    450a:	4a32      	ldr	r2, [pc, #200]	; (45d4 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    450c:	6812      	ldr	r2, [r2, #0]
    450e:	4610      	mov	r0, r2
    4510:	4798      	blx	r3
    4512:	4b2d      	ldr	r3, [pc, #180]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	691b      	ldr	r3, [r3, #16]
    4518:	4a2c      	ldr	r2, [pc, #176]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    451a:	6812      	ldr	r2, [r2, #0]
    451c:	4610      	mov	r0, r2
    451e:	4798      	blx	r3
    4520:	4b29      	ldr	r3, [pc, #164]	; (45c8 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4522:	681b      	ldr	r3, [r3, #0]
    4524:	689b      	ldr	r3, [r3, #8]
    4526:	4a29      	ldr	r2, [pc, #164]	; (45cc <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4528:	6812      	ldr	r2, [r2, #0]
    452a:	4610      	mov	r0, r2
    452c:	4798      	blx	r3
    452e:	4b24      	ldr	r3, [pc, #144]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	68db      	ldr	r3, [r3, #12]
    4534:	4a23      	ldr	r2, [pc, #140]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4536:	6812      	ldr	r2, [r2, #0]
    4538:	4610      	mov	r0, r2
    453a:	4798      	blx	r3
    453c:	4b20      	ldr	r3, [pc, #128]	; (45c0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	689b      	ldr	r3, [r3, #8]
    4542:	4a20      	ldr	r2, [pc, #128]	; (45c4 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4544:	6812      	ldr	r2, [r2, #0]
    4546:	6812      	ldr	r2, [r2, #0]
    4548:	4610      	mov	r0, r2
    454a:	4798      	blx	r3
    454c:	4b26      	ldr	r3, [pc, #152]	; (45e8 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	685b      	ldr	r3, [r3, #4]
    4552:	4a26      	ldr	r2, [pc, #152]	; (45ec <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4554:	6812      	ldr	r2, [r2, #0]
    4556:	4610      	mov	r0, r2
    4558:	4798      	blx	r3
    455a:	4b25      	ldr	r3, [pc, #148]	; (45f0 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    455c:	681b      	ldr	r3, [r3, #0]
    455e:	681b      	ldr	r3, [r3, #0]
    4560:	4a24      	ldr	r2, [pc, #144]	; (45f4 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4562:	6812      	ldr	r2, [r2, #0]
    4564:	4610      	mov	r0, r2
    4566:	4798      	blx	r3
    4568:	4b23      	ldr	r3, [pc, #140]	; (45f8 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	681b      	ldr	r3, [r3, #0]
    456e:	4a23      	ldr	r2, [pc, #140]	; (45fc <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4570:	6812      	ldr	r2, [r2, #0]
    4572:	4610      	mov	r0, r2
    4574:	4798      	blx	r3
    4576:	4b22      	ldr	r3, [pc, #136]	; (4600 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	681b      	ldr	r3, [r3, #0]
    457c:	4a21      	ldr	r2, [pc, #132]	; (4604 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    457e:	6812      	ldr	r2, [r2, #0]
    4580:	4610      	mov	r0, r2
    4582:	4798      	blx	r3
    4584:	e005      	b.n	4592 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
    4586:	bf00      	nop
    4588:	e004      	b.n	4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    458a:	bf00      	nop
    458c:	e002      	b.n	4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    458e:	bf00      	nop
    4590:	e000      	b.n	4594 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
    4592:	bf00      	nop
    4594:	bf00      	nop
    4596:	b003      	add	sp, #12
    4598:	f85d fb04 	ldr.w	pc, [sp], #4
    459c:	1fff8b19 	.word	0x1fff8b19
    45a0:	1fff8bb8 	.word	0x1fff8bb8
    45a4:	1fff8bd8 	.word	0x1fff8bd8
    45a8:	1fff8bbc 	.word	0x1fff8bbc
    45ac:	1fff8be0 	.word	0x1fff8be0
    45b0:	1fff8bc0 	.word	0x1fff8bc0
    45b4:	1fff8be8 	.word	0x1fff8be8
    45b8:	1fff8bc4 	.word	0x1fff8bc4
    45bc:	1fff8bf0 	.word	0x1fff8bf0
    45c0:	1fff8bac 	.word	0x1fff8bac
    45c4:	1fff8bd0 	.word	0x1fff8bd0
    45c8:	1fff8bb0 	.word	0x1fff8bb0
    45cc:	1fff8bcc 	.word	0x1fff8bcc
    45d0:	1fff8bb4 	.word	0x1fff8bb4
    45d4:	1fff8bc8 	.word	0x1fff8bc8
    45d8:	1fff8bd4 	.word	0x1fff8bd4
    45dc:	1fff8bdc 	.word	0x1fff8bdc
    45e0:	1fff8be4 	.word	0x1fff8be4
    45e4:	1fff8bec 	.word	0x1fff8bec
    45e8:	1fff8bf4 	.word	0x1fff8bf4
    45ec:	1fff8c04 	.word	0x1fff8c04
    45f0:	1fff8bf8 	.word	0x1fff8bf8
    45f4:	1fff8c08 	.word	0x1fff8c08
    45f8:	1fff8bfc 	.word	0x1fff8bfc
    45fc:	1fff8c0c 	.word	0x1fff8c0c
    4600:	1fff8c00 	.word	0x1fff8c00
    4604:	1fff8c10 	.word	0x1fff8c10

00004608 <Clock_Ip_Command>:
    4608:	b500      	push	{lr}
    460a:	b083      	sub	sp, #12
    460c:	9001      	str	r0, [sp, #4]
    460e:	9100      	str	r1, [sp, #0]
    4610:	9b00      	ldr	r3, [sp, #0]
    4612:	2b04      	cmp	r3, #4
    4614:	d010      	beq.n	4638 <Clock_Ip_Command+0x30>
    4616:	9b00      	ldr	r3, [sp, #0]
    4618:	2b04      	cmp	r3, #4
    461a:	d811      	bhi.n	4640 <Clock_Ip_Command+0x38>
    461c:	9b00      	ldr	r3, [sp, #0]
    461e:	2b01      	cmp	r3, #1
    4620:	d006      	beq.n	4630 <Clock_Ip_Command+0x28>
    4622:	9b00      	ldr	r3, [sp, #0]
    4624:	2b02      	cmp	r3, #2
    4626:	d10b      	bne.n	4640 <Clock_Ip_Command+0x38>
    4628:	9801      	ldr	r0, [sp, #4]
    462a:	f7ff fdb3 	bl	4194 <Clock_Ip_ClockInitializeObjects>
    462e:	e008      	b.n	4642 <Clock_Ip_Command+0x3a>
    4630:	9801      	ldr	r0, [sp, #4]
    4632:	f7ff f9db 	bl	39ec <Clock_Ip_SpecificPlatformInitClock>
    4636:	e004      	b.n	4642 <Clock_Ip_Command+0x3a>
    4638:	9801      	ldr	r0, [sp, #4]
    463a:	f7ff f8ed 	bl	3818 <DisableSafeClock>
    463e:	e000      	b.n	4642 <Clock_Ip_Command+0x3a>
    4640:	bf00      	nop
    4642:	bf00      	nop
    4644:	b003      	add	sp, #12
    4646:	f85d fb04 	ldr.w	pc, [sp], #4
    464a:	bf00      	nop

0000464c <Mcu_Init>:
    464c:	b500      	push	{lr}
    464e:	b085      	sub	sp, #20
    4650:	9001      	str	r0, [sp, #4]
    4652:	4a20      	ldr	r2, [pc, #128]	; (46d4 <Mcu_Init+0x88>)
    4654:	9b01      	ldr	r3, [sp, #4]
    4656:	6013      	str	r3, [r2, #0]
    4658:	2300      	movs	r3, #0
    465a:	9303      	str	r3, [sp, #12]
    465c:	e010      	b.n	4680 <Mcu_Init+0x34>
    465e:	4b1d      	ldr	r3, [pc, #116]	; (46d4 <Mcu_Init+0x88>)
    4660:	681b      	ldr	r3, [r3, #0]
    4662:	6919      	ldr	r1, [r3, #16]
    4664:	9a03      	ldr	r2, [sp, #12]
    4666:	4613      	mov	r3, r2
    4668:	005b      	lsls	r3, r3, #1
    466a:	4413      	add	r3, r2
    466c:	009b      	lsls	r3, r3, #2
    466e:	440b      	add	r3, r1
    4670:	681b      	ldr	r3, [r3, #0]
    4672:	9a03      	ldr	r2, [sp, #12]
    4674:	b2d1      	uxtb	r1, r2
    4676:	4a18      	ldr	r2, [pc, #96]	; (46d8 <Mcu_Init+0x8c>)
    4678:	54d1      	strb	r1, [r2, r3]
    467a:	9b03      	ldr	r3, [sp, #12]
    467c:	3301      	adds	r3, #1
    467e:	9303      	str	r3, [sp, #12]
    4680:	4b14      	ldr	r3, [pc, #80]	; (46d4 <Mcu_Init+0x88>)
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	689b      	ldr	r3, [r3, #8]
    4686:	9a03      	ldr	r2, [sp, #12]
    4688:	429a      	cmp	r2, r3
    468a:	d3e8      	bcc.n	465e <Mcu_Init+0x12>
    468c:	2300      	movs	r3, #0
    468e:	9303      	str	r3, [sp, #12]
    4690:	e010      	b.n	46b4 <Mcu_Init+0x68>
    4692:	4b10      	ldr	r3, [pc, #64]	; (46d4 <Mcu_Init+0x88>)
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	6959      	ldr	r1, [r3, #20]
    4698:	9a03      	ldr	r2, [sp, #12]
    469a:	4613      	mov	r3, r2
    469c:	01db      	lsls	r3, r3, #7
    469e:	1a9b      	subs	r3, r3, r2
    46a0:	00db      	lsls	r3, r3, #3
    46a2:	440b      	add	r3, r1
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	9a03      	ldr	r2, [sp, #12]
    46a8:	b2d1      	uxtb	r1, r2
    46aa:	4a0c      	ldr	r2, [pc, #48]	; (46dc <Mcu_Init+0x90>)
    46ac:	54d1      	strb	r1, [r2, r3]
    46ae:	9b03      	ldr	r3, [sp, #12]
    46b0:	3301      	adds	r3, #1
    46b2:	9303      	str	r3, [sp, #12]
    46b4:	4b07      	ldr	r3, [pc, #28]	; (46d4 <Mcu_Init+0x88>)
    46b6:	681b      	ldr	r3, [r3, #0]
    46b8:	68db      	ldr	r3, [r3, #12]
    46ba:	9a03      	ldr	r2, [sp, #12]
    46bc:	429a      	cmp	r2, r3
    46be:	d3e8      	bcc.n	4692 <Mcu_Init+0x46>
    46c0:	4b04      	ldr	r3, [pc, #16]	; (46d4 <Mcu_Init+0x88>)
    46c2:	681b      	ldr	r3, [r3, #0]
    46c4:	699b      	ldr	r3, [r3, #24]
    46c6:	4618      	mov	r0, r3
    46c8:	f000 f88a 	bl	47e0 <Mcu_Ipw_Init>
    46cc:	bf00      	nop
    46ce:	b005      	add	sp, #20
    46d0:	f85d fb04 	ldr.w	pc, [sp], #4
    46d4:	1fff8cec 	.word	0x1fff8cec
    46d8:	1fff8ce8 	.word	0x1fff8ce8
    46dc:	1fff8ce4 	.word	0x1fff8ce4

000046e0 <Mcu_InitRamSection>:
    46e0:	b084      	sub	sp, #16
    46e2:	9001      	str	r0, [sp, #4]
    46e4:	2301      	movs	r3, #1
    46e6:	f88d 300f 	strb.w	r3, [sp, #15]
    46ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    46ee:	4618      	mov	r0, r3
    46f0:	b004      	add	sp, #16
    46f2:	4770      	bx	lr

000046f4 <Mcu_InitClock>:
    46f4:	b500      	push	{lr}
    46f6:	b085      	sub	sp, #20
    46f8:	9001      	str	r0, [sp, #4]
    46fa:	4a0e      	ldr	r2, [pc, #56]	; (4734 <Mcu_InitClock+0x40>)
    46fc:	9b01      	ldr	r3, [sp, #4]
    46fe:	4413      	add	r3, r2
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	f88d 300f 	strb.w	r3, [sp, #15]
    4706:	4b0c      	ldr	r3, [pc, #48]	; (4738 <Mcu_InitClock+0x44>)
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	6959      	ldr	r1, [r3, #20]
    470c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4710:	4613      	mov	r3, r2
    4712:	01db      	lsls	r3, r3, #7
    4714:	1a9b      	subs	r3, r3, r2
    4716:	00db      	lsls	r3, r3, #3
    4718:	440b      	add	r3, r1
    471a:	4618      	mov	r0, r3
    471c:	f000 f86a 	bl	47f4 <Mcu_Ipw_InitClock>
    4720:	2300      	movs	r3, #0
    4722:	f88d 300e 	strb.w	r3, [sp, #14]
    4726:	f89d 300e 	ldrb.w	r3, [sp, #14]
    472a:	4618      	mov	r0, r3
    472c:	b005      	add	sp, #20
    472e:	f85d fb04 	ldr.w	pc, [sp], #4
    4732:	bf00      	nop
    4734:	1fff8ce4 	.word	0x1fff8ce4
    4738:	1fff8cec 	.word	0x1fff8cec

0000473c <Mcu_SetMode>:
    473c:	b500      	push	{lr}
    473e:	b085      	sub	sp, #20
    4740:	9001      	str	r0, [sp, #4]
    4742:	4a0d      	ldr	r2, [pc, #52]	; (4778 <Mcu_SetMode+0x3c>)
    4744:	9b01      	ldr	r3, [sp, #4]
    4746:	4413      	add	r3, r2
    4748:	781b      	ldrb	r3, [r3, #0]
    474a:	f88d 300f 	strb.w	r3, [sp, #15]
    474e:	f004 fa13 	bl	8b78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>
    4752:	4b0a      	ldr	r3, [pc, #40]	; (477c <Mcu_SetMode+0x40>)
    4754:	681b      	ldr	r3, [r3, #0]
    4756:	6919      	ldr	r1, [r3, #16]
    4758:	f89d 200f 	ldrb.w	r2, [sp, #15]
    475c:	4613      	mov	r3, r2
    475e:	005b      	lsls	r3, r3, #1
    4760:	4413      	add	r3, r2
    4762:	009b      	lsls	r3, r3, #2
    4764:	440b      	add	r3, r1
    4766:	4618      	mov	r0, r3
    4768:	f000 f84e 	bl	4808 <Mcu_Ipw_SetMode>
    476c:	f004 fa30 	bl	8bd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
    4770:	bf00      	nop
    4772:	b005      	add	sp, #20
    4774:	f85d fb04 	ldr.w	pc, [sp], #4
    4778:	1fff8ce8 	.word	0x1fff8ce8
    477c:	1fff8cec 	.word	0x1fff8cec

00004780 <Mcu_GetPllStatus>:
    4780:	b082      	sub	sp, #8
    4782:	2302      	movs	r3, #2
    4784:	9301      	str	r3, [sp, #4]
    4786:	9b01      	ldr	r3, [sp, #4]
    4788:	4618      	mov	r0, r3
    478a:	b002      	add	sp, #8
    478c:	4770      	bx	lr

0000478e <Mcu_GetResetReason>:
    478e:	b500      	push	{lr}
    4790:	b083      	sub	sp, #12
    4792:	f000 f843 	bl	481c <Mcu_Ipw_GetResetReason>
    4796:	9001      	str	r0, [sp, #4]
    4798:	9b01      	ldr	r3, [sp, #4]
    479a:	4618      	mov	r0, r3
    479c:	b003      	add	sp, #12
    479e:	f85d fb04 	ldr.w	pc, [sp], #4

000047a2 <Mcu_GetResetRawValue>:
    47a2:	b500      	push	{lr}
    47a4:	b083      	sub	sp, #12
    47a6:	f000 f83f 	bl	4828 <Mcu_Ipw_GetResetRawValue>
    47aa:	9001      	str	r0, [sp, #4]
    47ac:	9b01      	ldr	r3, [sp, #4]
    47ae:	4618      	mov	r0, r3
    47b0:	b003      	add	sp, #12
    47b2:	f85d fb04 	ldr.w	pc, [sp], #4

000047b6 <Mcu_SleepOnExit>:
    47b6:	b500      	push	{lr}
    47b8:	b083      	sub	sp, #12
    47ba:	9001      	str	r0, [sp, #4]
    47bc:	9801      	ldr	r0, [sp, #4]
    47be:	f000 f839 	bl	4834 <Mcu_Ipw_SleepOnExit>
    47c2:	bf00      	nop
    47c4:	b003      	add	sp, #12
    47c6:	f85d fb04 	ldr.w	pc, [sp], #4

000047ca <Mcu_ClkSrcFailureNotification>:
    47ca:	b082      	sub	sp, #8
    47cc:	9001      	str	r0, [sp, #4]
    47ce:	4b03      	ldr	r3, [pc, #12]	; (47dc <Mcu_ClkSrcFailureNotification+0x12>)
    47d0:	681b      	ldr	r3, [r3, #0]
    47d2:	2b00      	cmp	r3, #0
    47d4:	bf00      	nop
    47d6:	b002      	add	sp, #8
    47d8:	4770      	bx	lr
    47da:	bf00      	nop
    47dc:	1fff8cec 	.word	0x1fff8cec

000047e0 <Mcu_Ipw_Init>:
    47e0:	b500      	push	{lr}
    47e2:	b083      	sub	sp, #12
    47e4:	9001      	str	r0, [sp, #4]
    47e6:	9801      	ldr	r0, [sp, #4]
    47e8:	f000 f882 	bl	48f0 <Power_Ip_Init>
    47ec:	bf00      	nop
    47ee:	b003      	add	sp, #12
    47f0:	f85d fb04 	ldr.w	pc, [sp], #4

000047f4 <Mcu_Ipw_InitClock>:
    47f4:	b500      	push	{lr}
    47f6:	b083      	sub	sp, #12
    47f8:	9001      	str	r0, [sp, #4]
    47fa:	9801      	ldr	r0, [sp, #4]
    47fc:	f7fc fc6a 	bl	10d4 <Clock_Ip_InitClock>
    4800:	bf00      	nop
    4802:	b003      	add	sp, #12
    4804:	f85d fb04 	ldr.w	pc, [sp], #4

00004808 <Mcu_Ipw_SetMode>:
    4808:	b500      	push	{lr}
    480a:	b083      	sub	sp, #12
    480c:	9001      	str	r0, [sp, #4]
    480e:	9801      	ldr	r0, [sp, #4]
    4810:	f000 f820 	bl	4854 <Power_Ip_SetMode>
    4814:	bf00      	nop
    4816:	b003      	add	sp, #12
    4818:	f85d fb04 	ldr.w	pc, [sp], #4

0000481c <Mcu_Ipw_GetResetReason>:
    481c:	b508      	push	{r3, lr}
    481e:	f000 f84f 	bl	48c0 <Power_Ip_GetResetReason>
    4822:	4603      	mov	r3, r0
    4824:	4618      	mov	r0, r3
    4826:	bd08      	pop	{r3, pc}

00004828 <Mcu_Ipw_GetResetRawValue>:
    4828:	b508      	push	{r3, lr}
    482a:	f000 f857 	bl	48dc <Power_Ip_GetResetRawValue>
    482e:	4603      	mov	r3, r0
    4830:	4618      	mov	r0, r3
    4832:	bd08      	pop	{r3, pc}

00004834 <Mcu_Ipw_SleepOnExit>:
    4834:	b500      	push	{lr}
    4836:	b083      	sub	sp, #12
    4838:	9001      	str	r0, [sp, #4]
    483a:	9b01      	ldr	r3, [sp, #4]
    483c:	2b00      	cmp	r3, #0
    483e:	d102      	bne.n	4846 <Mcu_Ipw_SleepOnExit+0x12>
    4840:	f000 f86c 	bl	491c <Power_Ip_DisableSleepOnExit>
    4844:	e001      	b.n	484a <Mcu_Ipw_SleepOnExit+0x16>
    4846:	f000 f86e 	bl	4926 <Power_Ip_EnableSleepOnExit>
    484a:	bf00      	nop
    484c:	b003      	add	sp, #12
    484e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004854 <Power_Ip_SetMode>:
    4854:	b500      	push	{lr}
    4856:	b085      	sub	sp, #20
    4858:	9001      	str	r0, [sp, #4]
    485a:	9b01      	ldr	r3, [sp, #4]
    485c:	685b      	ldr	r3, [r3, #4]
    485e:	9302      	str	r3, [sp, #8]
    4860:	9802      	ldr	r0, [sp, #8]
    4862:	f000 f9f5 	bl	4c50 <Power_Ip_SMC_ModeCheckEntry>
    4866:	4603      	mov	r3, r0
    4868:	2b00      	cmp	r3, #0
    486a:	d002      	beq.n	4872 <Power_Ip_SetMode+0x1e>
    486c:	2301      	movs	r3, #1
    486e:	9303      	str	r3, [sp, #12]
    4870:	e003      	b.n	487a <Power_Ip_SetMode+0x26>
    4872:	9801      	ldr	r0, [sp, #4]
    4874:	f000 fa1e 	bl	4cb4 <Power_Ip_SMC_ModeConfig>
    4878:	9003      	str	r0, [sp, #12]
    487a:	9b03      	ldr	r3, [sp, #12]
    487c:	2b01      	cmp	r3, #1
    487e:	d103      	bne.n	4888 <Power_Ip_SetMode+0x34>
    4880:	21ff      	movs	r1, #255	; 0xff
    4882:	2003      	movs	r0, #3
    4884:	f000 f8f4 	bl	4a70 <Power_Ip_ReportPowerErrors>
    4888:	bf00      	nop
    488a:	b005      	add	sp, #20
    488c:	f85d fb04 	ldr.w	pc, [sp], #4

00004890 <Power_Ip_ConvertIntergeToResetType>:
    4890:	b084      	sub	sp, #16
    4892:	9001      	str	r0, [sp, #4]
    4894:	230c      	movs	r3, #12
    4896:	9303      	str	r3, [sp, #12]
    4898:	4a08      	ldr	r2, [pc, #32]	; (48bc <Power_Ip_ConvertIntergeToResetType+0x2c>)
    489a:	9b01      	ldr	r3, [sp, #4]
    489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48a0:	2b0e      	cmp	r3, #14
    48a2:	d805      	bhi.n	48b0 <Power_Ip_ConvertIntergeToResetType+0x20>
    48a4:	4a05      	ldr	r2, [pc, #20]	; (48bc <Power_Ip_ConvertIntergeToResetType+0x2c>)
    48a6:	9b01      	ldr	r3, [sp, #4]
    48a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    48ac:	9303      	str	r3, [sp, #12]
    48ae:	e001      	b.n	48b4 <Power_Ip_ConvertIntergeToResetType+0x24>
    48b0:	230c      	movs	r3, #12
    48b2:	9303      	str	r3, [sp, #12]
    48b4:	9b03      	ldr	r3, [sp, #12]
    48b6:	4618      	mov	r0, r3
    48b8:	b004      	add	sp, #16
    48ba:	4770      	bx	lr
    48bc:	0000bd0c 	.word	0x0000bd0c

000048c0 <Power_Ip_GetResetReason>:
    48c0:	b500      	push	{lr}
    48c2:	b083      	sub	sp, #12
    48c4:	f000 f940 	bl	4b48 <Power_Ip_RCM_GetResetReason>
    48c8:	9001      	str	r0, [sp, #4]
    48ca:	9801      	ldr	r0, [sp, #4]
    48cc:	f7ff ffe0 	bl	4890 <Power_Ip_ConvertIntergeToResetType>
    48d0:	9000      	str	r0, [sp, #0]
    48d2:	9b00      	ldr	r3, [sp, #0]
    48d4:	4618      	mov	r0, r3
    48d6:	b003      	add	sp, #12
    48d8:	f85d fb04 	ldr.w	pc, [sp], #4

000048dc <Power_Ip_GetResetRawValue>:
    48dc:	b500      	push	{lr}
    48de:	b083      	sub	sp, #12
    48e0:	f000 f98a 	bl	4bf8 <Power_Ip_RCM_GetResetRawValue>
    48e4:	9001      	str	r0, [sp, #4]
    48e6:	9b01      	ldr	r3, [sp, #4]
    48e8:	4618      	mov	r0, r3
    48ea:	b003      	add	sp, #12
    48ec:	f85d fb04 	ldr.w	pc, [sp], #4

000048f0 <Power_Ip_Init>:
    48f0:	b500      	push	{lr}
    48f2:	b083      	sub	sp, #12
    48f4:	9001      	str	r0, [sp, #4]
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	681b      	ldr	r3, [r3, #0]
    48fa:	4618      	mov	r0, r3
    48fc:	f000 f90e 	bl	4b1c <Power_Ip_RCM_ResetInit>
    4900:	9b01      	ldr	r3, [sp, #4]
    4902:	685b      	ldr	r3, [r3, #4]
    4904:	4618      	mov	r0, r3
    4906:	f000 f86d 	bl	49e4 <Power_Ip_PMC_PowerInit>
    490a:	9b01      	ldr	r3, [sp, #4]
    490c:	689b      	ldr	r3, [r3, #8]
    490e:	4618      	mov	r0, r3
    4910:	f000 f990 	bl	4c34 <Power_Ip_SMC_AllowedModesConfig>
    4914:	bf00      	nop
    4916:	b003      	add	sp, #12
    4918:	f85d fb04 	ldr.w	pc, [sp], #4

0000491c <Power_Ip_DisableSleepOnExit>:
    491c:	b508      	push	{r3, lr}
    491e:	f000 f811 	bl	4944 <Power_Ip_CM4_DisableSleepOnExit>
    4922:	bf00      	nop
    4924:	bd08      	pop	{r3, pc}

00004926 <Power_Ip_EnableSleepOnExit>:
    4926:	b508      	push	{r3, lr}
    4928:	f000 f820 	bl	496c <Power_Ip_CM4_EnableSleepOnExit>
    492c:	bf00      	nop
    492e:	bd08      	pop	{r3, pc}

00004930 <Power_Ip_InstallNotificationsCallback>:
    4930:	b082      	sub	sp, #8
    4932:	9001      	str	r0, [sp, #4]
    4934:	4a02      	ldr	r2, [pc, #8]	; (4940 <Power_Ip_InstallNotificationsCallback+0x10>)
    4936:	9b01      	ldr	r3, [sp, #4]
    4938:	6013      	str	r3, [r2, #0]
    493a:	bf00      	nop
    493c:	b002      	add	sp, #8
    493e:	4770      	bx	lr
    4940:	1fff8b1c 	.word	0x1fff8b1c

00004944 <Power_Ip_CM4_DisableSleepOnExit>:
    4944:	b082      	sub	sp, #8
    4946:	2300      	movs	r3, #0
    4948:	9301      	str	r3, [sp, #4]
    494a:	4b07      	ldr	r3, [pc, #28]	; (4968 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	685b      	ldr	r3, [r3, #4]
    4950:	9301      	str	r3, [sp, #4]
    4952:	9b01      	ldr	r3, [sp, #4]
    4954:	f023 0302 	bic.w	r3, r3, #2
    4958:	9301      	str	r3, [sp, #4]
    495a:	4b03      	ldr	r3, [pc, #12]	; (4968 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	9a01      	ldr	r2, [sp, #4]
    4960:	605a      	str	r2, [r3, #4]
    4962:	bf00      	nop
    4964:	b002      	add	sp, #8
    4966:	4770      	bx	lr
    4968:	1fff8b20 	.word	0x1fff8b20

0000496c <Power_Ip_CM4_EnableSleepOnExit>:
    496c:	b082      	sub	sp, #8
    496e:	2300      	movs	r3, #0
    4970:	9301      	str	r3, [sp, #4]
    4972:	4b07      	ldr	r3, [pc, #28]	; (4990 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4974:	681b      	ldr	r3, [r3, #0]
    4976:	685b      	ldr	r3, [r3, #4]
    4978:	9301      	str	r3, [sp, #4]
    497a:	9b01      	ldr	r3, [sp, #4]
    497c:	f043 0302 	orr.w	r3, r3, #2
    4980:	9301      	str	r3, [sp, #4]
    4982:	4b03      	ldr	r3, [pc, #12]	; (4990 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4984:	681b      	ldr	r3, [r3, #0]
    4986:	9a01      	ldr	r2, [sp, #4]
    4988:	605a      	str	r2, [r3, #4]
    498a:	bf00      	nop
    498c:	b002      	add	sp, #8
    498e:	4770      	bx	lr
    4990:	1fff8b20 	.word	0x1fff8b20

00004994 <Power_Ip_CM4_EnableDeepSleep>:
    4994:	b082      	sub	sp, #8
    4996:	2300      	movs	r3, #0
    4998:	9301      	str	r3, [sp, #4]
    499a:	4b07      	ldr	r3, [pc, #28]	; (49b8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    499c:	681b      	ldr	r3, [r3, #0]
    499e:	685b      	ldr	r3, [r3, #4]
    49a0:	9301      	str	r3, [sp, #4]
    49a2:	9b01      	ldr	r3, [sp, #4]
    49a4:	f043 0304 	orr.w	r3, r3, #4
    49a8:	9301      	str	r3, [sp, #4]
    49aa:	4b03      	ldr	r3, [pc, #12]	; (49b8 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	9a01      	ldr	r2, [sp, #4]
    49b0:	605a      	str	r2, [r3, #4]
    49b2:	bf00      	nop
    49b4:	b002      	add	sp, #8
    49b6:	4770      	bx	lr
    49b8:	1fff8b20 	.word	0x1fff8b20

000049bc <Power_Ip_CM4_DisableDeepSleep>:
    49bc:	b082      	sub	sp, #8
    49be:	2300      	movs	r3, #0
    49c0:	9301      	str	r3, [sp, #4]
    49c2:	4b07      	ldr	r3, [pc, #28]	; (49e0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49c4:	681b      	ldr	r3, [r3, #0]
    49c6:	685b      	ldr	r3, [r3, #4]
    49c8:	9301      	str	r3, [sp, #4]
    49ca:	9b01      	ldr	r3, [sp, #4]
    49cc:	f023 0304 	bic.w	r3, r3, #4
    49d0:	9301      	str	r3, [sp, #4]
    49d2:	4b03      	ldr	r3, [pc, #12]	; (49e0 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	9a01      	ldr	r2, [sp, #4]
    49d8:	605a      	str	r2, [r3, #4]
    49da:	bf00      	nop
    49dc:	b002      	add	sp, #8
    49de:	4770      	bx	lr
    49e0:	1fff8b20 	.word	0x1fff8b20

000049e4 <Power_Ip_PMC_PowerInit>:
    49e4:	b084      	sub	sp, #16
    49e6:	9001      	str	r0, [sp, #4]
    49e8:	4b20      	ldr	r3, [pc, #128]	; (4a6c <Power_Ip_PMC_PowerInit+0x88>)
    49ea:	781b      	ldrb	r3, [r3, #0]
    49ec:	f88d 300f 	strb.w	r3, [sp, #15]
    49f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    49f4:	f003 030f 	and.w	r3, r3, #15
    49f8:	f88d 300f 	strb.w	r3, [sp, #15]
    49fc:	9b01      	ldr	r3, [sp, #4]
    49fe:	781a      	ldrb	r2, [r3, #0]
    4a00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a04:	4313      	orrs	r3, r2
    4a06:	f88d 300f 	strb.w	r3, [sp, #15]
    4a0a:	4a18      	ldr	r2, [pc, #96]	; (4a6c <Power_Ip_PMC_PowerInit+0x88>)
    4a0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a10:	7013      	strb	r3, [r2, #0]
    4a12:	4b16      	ldr	r3, [pc, #88]	; (4a6c <Power_Ip_PMC_PowerInit+0x88>)
    4a14:	785b      	ldrb	r3, [r3, #1]
    4a16:	f88d 300f 	strb.w	r3, [sp, #15]
    4a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a1e:	f003 031f 	and.w	r3, r3, #31
    4a22:	f88d 300f 	strb.w	r3, [sp, #15]
    4a26:	9b01      	ldr	r3, [sp, #4]
    4a28:	785a      	ldrb	r2, [r3, #1]
    4a2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a2e:	4313      	orrs	r3, r2
    4a30:	f88d 300f 	strb.w	r3, [sp, #15]
    4a34:	4a0d      	ldr	r2, [pc, #52]	; (4a6c <Power_Ip_PMC_PowerInit+0x88>)
    4a36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a3a:	7053      	strb	r3, [r2, #1]
    4a3c:	4b0b      	ldr	r3, [pc, #44]	; (4a6c <Power_Ip_PMC_PowerInit+0x88>)
    4a3e:	789b      	ldrb	r3, [r3, #2]
    4a40:	f88d 300f 	strb.w	r3, [sp, #15]
    4a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4a4c:	f88d 300f 	strb.w	r3, [sp, #15]
    4a50:	9b01      	ldr	r3, [sp, #4]
    4a52:	789a      	ldrb	r2, [r3, #2]
    4a54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a58:	4313      	orrs	r3, r2
    4a5a:	f88d 300f 	strb.w	r3, [sp, #15]
    4a5e:	4a03      	ldr	r2, [pc, #12]	; (4a6c <Power_Ip_PMC_PowerInit+0x88>)
    4a60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a64:	7093      	strb	r3, [r2, #2]
    4a66:	bf00      	nop
    4a68:	b004      	add	sp, #16
    4a6a:	4770      	bx	lr
    4a6c:	4007d000 	.word	0x4007d000

00004a70 <Power_Ip_ReportPowerErrors>:
    4a70:	b500      	push	{lr}
    4a72:	b083      	sub	sp, #12
    4a74:	9001      	str	r0, [sp, #4]
    4a76:	460b      	mov	r3, r1
    4a78:	f88d 3003 	strb.w	r3, [sp, #3]
    4a7c:	4b05      	ldr	r3, [pc, #20]	; (4a94 <Power_Ip_ReportPowerErrors+0x24>)
    4a7e:	681b      	ldr	r3, [r3, #0]
    4a80:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4a84:	4611      	mov	r1, r2
    4a86:	9801      	ldr	r0, [sp, #4]
    4a88:	4798      	blx	r3
    4a8a:	bf00      	nop
    4a8c:	b003      	add	sp, #12
    4a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a92:	bf00      	nop
    4a94:	1fff8b1c 	.word	0x1fff8b1c

00004a98 <Power_Ip_ReportPowerErrorsEmptyCallback>:
    4a98:	b082      	sub	sp, #8
    4a9a:	9001      	str	r0, [sp, #4]
    4a9c:	460b      	mov	r3, r1
    4a9e:	f88d 3003 	strb.w	r3, [sp, #3]
    4aa2:	bf00      	nop
    4aa4:	b002      	add	sp, #8
    4aa6:	4770      	bx	lr

00004aa8 <Power_Ip_StartTimeout>:
    4aa8:	b500      	push	{lr}
    4aaa:	b085      	sub	sp, #20
    4aac:	9003      	str	r0, [sp, #12]
    4aae:	9102      	str	r1, [sp, #8]
    4ab0:	9201      	str	r2, [sp, #4]
    4ab2:	9300      	str	r3, [sp, #0]
    4ab4:	2000      	movs	r0, #0
    4ab6:	f7fc f83c 	bl	b32 <OsIf_GetCounter>
    4aba:	4602      	mov	r2, r0
    4abc:	9b03      	ldr	r3, [sp, #12]
    4abe:	601a      	str	r2, [r3, #0]
    4ac0:	9b02      	ldr	r3, [sp, #8]
    4ac2:	2200      	movs	r2, #0
    4ac4:	601a      	str	r2, [r3, #0]
    4ac6:	2100      	movs	r1, #0
    4ac8:	9800      	ldr	r0, [sp, #0]
    4aca:	f7fc f87e 	bl	bca <OsIf_MicrosToTicks>
    4ace:	4602      	mov	r2, r0
    4ad0:	9b01      	ldr	r3, [sp, #4]
    4ad2:	601a      	str	r2, [r3, #0]
    4ad4:	bf00      	nop
    4ad6:	b005      	add	sp, #20
    4ad8:	f85d fb04 	ldr.w	pc, [sp], #4

00004adc <Power_Ip_TimeoutExpired>:
    4adc:	b500      	push	{lr}
    4ade:	b087      	sub	sp, #28
    4ae0:	9003      	str	r0, [sp, #12]
    4ae2:	9102      	str	r1, [sp, #8]
    4ae4:	9201      	str	r2, [sp, #4]
    4ae6:	2300      	movs	r3, #0
    4ae8:	f88d 3017 	strb.w	r3, [sp, #23]
    4aec:	2100      	movs	r1, #0
    4aee:	9803      	ldr	r0, [sp, #12]
    4af0:	f7fc f838 	bl	b64 <OsIf_GetElapsed>
    4af4:	4602      	mov	r2, r0
    4af6:	9b02      	ldr	r3, [sp, #8]
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	441a      	add	r2, r3
    4afc:	9b02      	ldr	r3, [sp, #8]
    4afe:	601a      	str	r2, [r3, #0]
    4b00:	9b02      	ldr	r3, [sp, #8]
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	9a01      	ldr	r2, [sp, #4]
    4b06:	429a      	cmp	r2, r3
    4b08:	d802      	bhi.n	4b10 <Power_Ip_TimeoutExpired+0x34>
    4b0a:	2301      	movs	r3, #1
    4b0c:	f88d 3017 	strb.w	r3, [sp, #23]
    4b10:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4b14:	4618      	mov	r0, r3
    4b16:	b007      	add	sp, #28
    4b18:	f85d fb04 	ldr.w	pc, [sp], #4

00004b1c <Power_Ip_RCM_ResetInit>:
    4b1c:	b082      	sub	sp, #8
    4b1e:	9001      	str	r0, [sp, #4]
    4b20:	9b01      	ldr	r3, [sp, #4]
    4b22:	681a      	ldr	r2, [r3, #0]
    4b24:	4907      	ldr	r1, [pc, #28]	; (4b44 <Power_Ip_RCM_ResetInit+0x28>)
    4b26:	f641 7307 	movw	r3, #7943	; 0x1f07
    4b2a:	4013      	ands	r3, r2
    4b2c:	60cb      	str	r3, [r1, #12]
    4b2e:	9b01      	ldr	r3, [sp, #4]
    4b30:	685a      	ldr	r2, [r3, #4]
    4b32:	4904      	ldr	r1, [pc, #16]	; (4b44 <Power_Ip_RCM_ResetInit+0x28>)
    4b34:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4b38:	4013      	ands	r3, r2
    4b3a:	61cb      	str	r3, [r1, #28]
    4b3c:	bf00      	nop
    4b3e:	b002      	add	sp, #8
    4b40:	4770      	bx	lr
    4b42:	bf00      	nop
    4b44:	4007f000 	.word	0x4007f000

00004b48 <Power_Ip_RCM_GetResetReason>:
    4b48:	b088      	sub	sp, #32
    4b4a:	230c      	movs	r3, #12
    4b4c:	9307      	str	r3, [sp, #28]
    4b4e:	2300      	movs	r3, #0
    4b50:	9303      	str	r3, [sp, #12]
    4b52:	2300      	movs	r3, #0
    4b54:	9305      	str	r3, [sp, #20]
    4b56:	2300      	movs	r3, #0
    4b58:	9304      	str	r3, [sp, #16]
    4b5a:	4b25      	ldr	r3, [pc, #148]	; (4bf0 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b5c:	699a      	ldr	r2, [r3, #24]
    4b5e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b62:	4013      	ands	r3, r2
    4b64:	9303      	str	r3, [sp, #12]
    4b66:	9b03      	ldr	r3, [sp, #12]
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d008      	beq.n	4b7e <Power_Ip_RCM_GetResetReason+0x36>
    4b6c:	4920      	ldr	r1, [pc, #128]	; (4bf0 <Power_Ip_RCM_GetResetReason+0xa8>)
    4b6e:	9a03      	ldr	r2, [sp, #12]
    4b70:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b74:	4013      	ands	r3, r2
    4b76:	618b      	str	r3, [r1, #24]
    4b78:	4a1e      	ldr	r2, [pc, #120]	; (4bf4 <Power_Ip_RCM_GetResetReason+0xac>)
    4b7a:	9b03      	ldr	r3, [sp, #12]
    4b7c:	6013      	str	r3, [r2, #0]
    4b7e:	4b1d      	ldr	r3, [pc, #116]	; (4bf4 <Power_Ip_RCM_GetResetReason+0xac>)
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	9302      	str	r3, [sp, #8]
    4b84:	9a02      	ldr	r2, [sp, #8]
    4b86:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4b8a:	4013      	ands	r3, r2
    4b8c:	2b82      	cmp	r3, #130	; 0x82
    4b8e:	d102      	bne.n	4b96 <Power_Ip_RCM_GetResetReason+0x4e>
    4b90:	2305      	movs	r3, #5
    4b92:	9307      	str	r3, [sp, #28]
    4b94:	e027      	b.n	4be6 <Power_Ip_RCM_GetResetReason+0x9e>
    4b96:	2300      	movs	r3, #0
    4b98:	9306      	str	r3, [sp, #24]
    4b9a:	e021      	b.n	4be0 <Power_Ip_RCM_GetResetReason+0x98>
    4b9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4ba0:	9b06      	ldr	r3, [sp, #24]
    4ba2:	fa22 f303 	lsr.w	r3, r2, r3
    4ba6:	9301      	str	r3, [sp, #4]
    4ba8:	9a01      	ldr	r2, [sp, #4]
    4baa:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4bae:	4013      	ands	r3, r2
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d012      	beq.n	4bda <Power_Ip_RCM_GetResetReason+0x92>
    4bb4:	9a01      	ldr	r2, [sp, #4]
    4bb6:	9b02      	ldr	r3, [sp, #8]
    4bb8:	4013      	ands	r3, r2
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d00a      	beq.n	4bd4 <Power_Ip_RCM_GetResetReason+0x8c>
    4bbe:	9b05      	ldr	r3, [sp, #20]
    4bc0:	9307      	str	r3, [sp, #28]
    4bc2:	9b04      	ldr	r3, [sp, #16]
    4bc4:	3301      	adds	r3, #1
    4bc6:	9304      	str	r3, [sp, #16]
    4bc8:	9b04      	ldr	r3, [sp, #16]
    4bca:	2b01      	cmp	r3, #1
    4bcc:	d902      	bls.n	4bd4 <Power_Ip_RCM_GetResetReason+0x8c>
    4bce:	230d      	movs	r3, #13
    4bd0:	9307      	str	r3, [sp, #28]
    4bd2:	e008      	b.n	4be6 <Power_Ip_RCM_GetResetReason+0x9e>
    4bd4:	9b05      	ldr	r3, [sp, #20]
    4bd6:	3301      	adds	r3, #1
    4bd8:	9305      	str	r3, [sp, #20]
    4bda:	9b06      	ldr	r3, [sp, #24]
    4bdc:	3301      	adds	r3, #1
    4bde:	9306      	str	r3, [sp, #24]
    4be0:	9b06      	ldr	r3, [sp, #24]
    4be2:	2b1f      	cmp	r3, #31
    4be4:	d9da      	bls.n	4b9c <Power_Ip_RCM_GetResetReason+0x54>
    4be6:	9b07      	ldr	r3, [sp, #28]
    4be8:	4618      	mov	r0, r3
    4bea:	b008      	add	sp, #32
    4bec:	4770      	bx	lr
    4bee:	bf00      	nop
    4bf0:	4007f000 	.word	0x4007f000
    4bf4:	1fff8cf0 	.word	0x1fff8cf0

00004bf8 <Power_Ip_RCM_GetResetRawValue>:
    4bf8:	b082      	sub	sp, #8
    4bfa:	4b0c      	ldr	r3, [pc, #48]	; (4c2c <Power_Ip_RCM_GetResetRawValue+0x34>)
    4bfc:	699a      	ldr	r2, [r3, #24]
    4bfe:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c02:	4013      	ands	r3, r2
    4c04:	9301      	str	r3, [sp, #4]
    4c06:	9b01      	ldr	r3, [sp, #4]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d008      	beq.n	4c1e <Power_Ip_RCM_GetResetRawValue+0x26>
    4c0c:	4907      	ldr	r1, [pc, #28]	; (4c2c <Power_Ip_RCM_GetResetRawValue+0x34>)
    4c0e:	9a01      	ldr	r2, [sp, #4]
    4c10:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c14:	4013      	ands	r3, r2
    4c16:	618b      	str	r3, [r1, #24]
    4c18:	4a05      	ldr	r2, [pc, #20]	; (4c30 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c1a:	9b01      	ldr	r3, [sp, #4]
    4c1c:	6013      	str	r3, [r2, #0]
    4c1e:	4b04      	ldr	r3, [pc, #16]	; (4c30 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	9300      	str	r3, [sp, #0]
    4c24:	9b00      	ldr	r3, [sp, #0]
    4c26:	4618      	mov	r0, r3
    4c28:	b002      	add	sp, #8
    4c2a:	4770      	bx	lr
    4c2c:	4007f000 	.word	0x4007f000
    4c30:	1fff8cf0 	.word	0x1fff8cf0

00004c34 <Power_Ip_SMC_AllowedModesConfig>:
    4c34:	b082      	sub	sp, #8
    4c36:	9001      	str	r0, [sp, #4]
    4c38:	9b01      	ldr	r3, [sp, #4]
    4c3a:	681b      	ldr	r3, [r3, #0]
    4c3c:	4a03      	ldr	r2, [pc, #12]	; (4c4c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4c3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4c42:	6093      	str	r3, [r2, #8]
    4c44:	bf00      	nop
    4c46:	b002      	add	sp, #8
    4c48:	4770      	bx	lr
    4c4a:	bf00      	nop
    4c4c:	4007e000 	.word	0x4007e000

00004c50 <Power_Ip_SMC_ModeCheckEntry>:
    4c50:	b084      	sub	sp, #16
    4c52:	9001      	str	r0, [sp, #4]
    4c54:	2301      	movs	r3, #1
    4c56:	9303      	str	r3, [sp, #12]
    4c58:	4b15      	ldr	r3, [pc, #84]	; (4cb0 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4c5a:	695b      	ldr	r3, [r3, #20]
    4c5c:	b2db      	uxtb	r3, r3
    4c5e:	9302      	str	r3, [sp, #8]
    4c60:	9b01      	ldr	r3, [sp, #4]
    4c62:	2b02      	cmp	r3, #2
    4c64:	d012      	beq.n	4c8c <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4c66:	9b01      	ldr	r3, [sp, #4]
    4c68:	2b02      	cmp	r3, #2
    4c6a:	d818      	bhi.n	4c9e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c6c:	9b01      	ldr	r3, [sp, #4]
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d003      	beq.n	4c7a <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4c72:	9b01      	ldr	r3, [sp, #4]
    4c74:	2b01      	cmp	r3, #1
    4c76:	d003      	beq.n	4c80 <Power_Ip_SMC_ModeCheckEntry+0x30>
    4c78:	e011      	b.n	4c9e <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4c7a:	2300      	movs	r3, #0
    4c7c:	9303      	str	r3, [sp, #12]
    4c7e:	e013      	b.n	4ca8 <Power_Ip_SMC_ModeCheckEntry+0x58>
    4c80:	9b02      	ldr	r3, [sp, #8]
    4c82:	2b01      	cmp	r3, #1
    4c84:	d10d      	bne.n	4ca2 <Power_Ip_SMC_ModeCheckEntry+0x52>
    4c86:	2300      	movs	r3, #0
    4c88:	9303      	str	r3, [sp, #12]
    4c8a:	e00a      	b.n	4ca2 <Power_Ip_SMC_ModeCheckEntry+0x52>
    4c8c:	9b02      	ldr	r3, [sp, #8]
    4c8e:	2b01      	cmp	r3, #1
    4c90:	d002      	beq.n	4c98 <Power_Ip_SMC_ModeCheckEntry+0x48>
    4c92:	9b02      	ldr	r3, [sp, #8]
    4c94:	2b10      	cmp	r3, #16
    4c96:	d106      	bne.n	4ca6 <Power_Ip_SMC_ModeCheckEntry+0x56>
    4c98:	2300      	movs	r3, #0
    4c9a:	9303      	str	r3, [sp, #12]
    4c9c:	e003      	b.n	4ca6 <Power_Ip_SMC_ModeCheckEntry+0x56>
    4c9e:	bf00      	nop
    4ca0:	e002      	b.n	4ca8 <Power_Ip_SMC_ModeCheckEntry+0x58>
    4ca2:	bf00      	nop
    4ca4:	e000      	b.n	4ca8 <Power_Ip_SMC_ModeCheckEntry+0x58>
    4ca6:	bf00      	nop
    4ca8:	9b03      	ldr	r3, [sp, #12]
    4caa:	4618      	mov	r0, r3
    4cac:	b004      	add	sp, #16
    4cae:	4770      	bx	lr
    4cb0:	4007e000 	.word	0x4007e000

00004cb4 <Power_Ip_SMC_ModeConfig>:
    4cb4:	b500      	push	{lr}
    4cb6:	b08b      	sub	sp, #44	; 0x2c
    4cb8:	9001      	str	r0, [sp, #4]
    4cba:	2300      	movs	r3, #0
    4cbc:	9309      	str	r3, [sp, #36]	; 0x24
    4cbe:	2300      	movs	r3, #0
    4cc0:	9308      	str	r3, [sp, #32]
    4cc2:	2300      	movs	r3, #0
    4cc4:	f88d 301f 	strb.w	r3, [sp, #31]
    4cc8:	9b01      	ldr	r3, [sp, #4]
    4cca:	685b      	ldr	r3, [r3, #4]
    4ccc:	9308      	str	r3, [sp, #32]
    4cce:	9b08      	ldr	r3, [sp, #32]
    4cd0:	2b02      	cmp	r3, #2
    4cd2:	d076      	beq.n	4dc2 <Power_Ip_SMC_ModeConfig+0x10e>
    4cd4:	9b08      	ldr	r3, [sp, #32]
    4cd6:	2b02      	cmp	r3, #2
    4cd8:	f200 80ab 	bhi.w	4e32 <Power_Ip_SMC_ModeConfig+0x17e>
    4cdc:	9b08      	ldr	r3, [sp, #32]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d003      	beq.n	4cea <Power_Ip_SMC_ModeConfig+0x36>
    4ce2:	9b08      	ldr	r3, [sp, #32]
    4ce4:	2b01      	cmp	r3, #1
    4ce6:	d034      	beq.n	4d52 <Power_Ip_SMC_ModeConfig+0x9e>
    4ce8:	e0a3      	b.n	4e32 <Power_Ip_SMC_ModeConfig+0x17e>
    4cea:	4b58      	ldr	r3, [pc, #352]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4cec:	68db      	ldr	r3, [r3, #12]
    4cee:	9306      	str	r3, [sp, #24]
    4cf0:	9b06      	ldr	r3, [sp, #24]
    4cf2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4cf6:	9306      	str	r3, [sp, #24]
    4cf8:	4a54      	ldr	r2, [pc, #336]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4cfa:	9b06      	ldr	r3, [sp, #24]
    4cfc:	60d3      	str	r3, [r2, #12]
    4cfe:	aa02      	add	r2, sp, #8
    4d00:	a903      	add	r1, sp, #12
    4d02:	a804      	add	r0, sp, #16
    4d04:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d08:	f7ff fece 	bl	4aa8 <Power_Ip_StartTimeout>
    4d0c:	9a02      	ldr	r2, [sp, #8]
    4d0e:	a903      	add	r1, sp, #12
    4d10:	ab04      	add	r3, sp, #16
    4d12:	4618      	mov	r0, r3
    4d14:	f7ff fee2 	bl	4adc <Power_Ip_TimeoutExpired>
    4d18:	4603      	mov	r3, r0
    4d1a:	f88d 301f 	strb.w	r3, [sp, #31]
    4d1e:	4b4b      	ldr	r3, [pc, #300]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4d20:	695b      	ldr	r3, [r3, #20]
    4d22:	f003 0301 	and.w	r3, r3, #1
    4d26:	9305      	str	r3, [sp, #20]
    4d28:	9b05      	ldr	r3, [sp, #20]
    4d2a:	2b01      	cmp	r3, #1
    4d2c:	d006      	beq.n	4d3c <Power_Ip_SMC_ModeConfig+0x88>
    4d2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d32:	f083 0301 	eor.w	r3, r3, #1
    4d36:	b2db      	uxtb	r3, r3
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d1e7      	bne.n	4d0c <Power_Ip_SMC_ModeConfig+0x58>
    4d3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d079      	beq.n	4e38 <Power_Ip_SMC_ModeConfig+0x184>
    4d44:	2301      	movs	r3, #1
    4d46:	9309      	str	r3, [sp, #36]	; 0x24
    4d48:	21ff      	movs	r1, #255	; 0xff
    4d4a:	2000      	movs	r0, #0
    4d4c:	f7ff fe90 	bl	4a70 <Power_Ip_ReportPowerErrors>
    4d50:	e072      	b.n	4e38 <Power_Ip_SMC_ModeConfig+0x184>
    4d52:	4b3e      	ldr	r3, [pc, #248]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4d54:	68db      	ldr	r3, [r3, #12]
    4d56:	9306      	str	r3, [sp, #24]
    4d58:	9b06      	ldr	r3, [sp, #24]
    4d5a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4d5e:	9306      	str	r3, [sp, #24]
    4d60:	9b06      	ldr	r3, [sp, #24]
    4d62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4d66:	9306      	str	r3, [sp, #24]
    4d68:	4a38      	ldr	r2, [pc, #224]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4d6a:	9b06      	ldr	r3, [sp, #24]
    4d6c:	60d3      	str	r3, [r2, #12]
    4d6e:	aa02      	add	r2, sp, #8
    4d70:	a903      	add	r1, sp, #12
    4d72:	a804      	add	r0, sp, #16
    4d74:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d78:	f7ff fe96 	bl	4aa8 <Power_Ip_StartTimeout>
    4d7c:	9a02      	ldr	r2, [sp, #8]
    4d7e:	a903      	add	r1, sp, #12
    4d80:	ab04      	add	r3, sp, #16
    4d82:	4618      	mov	r0, r3
    4d84:	f7ff feaa 	bl	4adc <Power_Ip_TimeoutExpired>
    4d88:	4603      	mov	r3, r0
    4d8a:	f88d 301f 	strb.w	r3, [sp, #31]
    4d8e:	4b2f      	ldr	r3, [pc, #188]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4d90:	695b      	ldr	r3, [r3, #20]
    4d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4d96:	9305      	str	r3, [sp, #20]
    4d98:	9b05      	ldr	r3, [sp, #20]
    4d9a:	2b80      	cmp	r3, #128	; 0x80
    4d9c:	d006      	beq.n	4dac <Power_Ip_SMC_ModeConfig+0xf8>
    4d9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4da2:	f083 0301 	eor.w	r3, r3, #1
    4da6:	b2db      	uxtb	r3, r3
    4da8:	2b00      	cmp	r3, #0
    4daa:	d1e7      	bne.n	4d7c <Power_Ip_SMC_ModeConfig+0xc8>
    4dac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4db0:	2b00      	cmp	r3, #0
    4db2:	d043      	beq.n	4e3c <Power_Ip_SMC_ModeConfig+0x188>
    4db4:	2301      	movs	r3, #1
    4db6:	9309      	str	r3, [sp, #36]	; 0x24
    4db8:	21ff      	movs	r1, #255	; 0xff
    4dba:	2000      	movs	r0, #0
    4dbc:	f7ff fe58 	bl	4a70 <Power_Ip_ReportPowerErrors>
    4dc0:	e03c      	b.n	4e3c <Power_Ip_SMC_ModeConfig+0x188>
    4dc2:	4b22      	ldr	r3, [pc, #136]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4dc4:	68db      	ldr	r3, [r3, #12]
    4dc6:	9306      	str	r3, [sp, #24]
    4dc8:	9b06      	ldr	r3, [sp, #24]
    4dca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4dce:	9306      	str	r3, [sp, #24]
    4dd0:	9b06      	ldr	r3, [sp, #24]
    4dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4dd6:	9306      	str	r3, [sp, #24]
    4dd8:	4a1c      	ldr	r2, [pc, #112]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4dda:	9b06      	ldr	r3, [sp, #24]
    4ddc:	60d3      	str	r3, [r2, #12]
    4dde:	aa02      	add	r2, sp, #8
    4de0:	a903      	add	r1, sp, #12
    4de2:	a804      	add	r0, sp, #16
    4de4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4de8:	f7ff fe5e 	bl	4aa8 <Power_Ip_StartTimeout>
    4dec:	9a02      	ldr	r2, [sp, #8]
    4dee:	a903      	add	r1, sp, #12
    4df0:	ab04      	add	r3, sp, #16
    4df2:	4618      	mov	r0, r3
    4df4:	f7ff fe72 	bl	4adc <Power_Ip_TimeoutExpired>
    4df8:	4603      	mov	r3, r0
    4dfa:	f88d 301f 	strb.w	r3, [sp, #31]
    4dfe:	4b13      	ldr	r3, [pc, #76]	; (4e4c <Power_Ip_SMC_ModeConfig+0x198>)
    4e00:	695b      	ldr	r3, [r3, #20]
    4e02:	f003 0304 	and.w	r3, r3, #4
    4e06:	9305      	str	r3, [sp, #20]
    4e08:	9b05      	ldr	r3, [sp, #20]
    4e0a:	2b04      	cmp	r3, #4
    4e0c:	d006      	beq.n	4e1c <Power_Ip_SMC_ModeConfig+0x168>
    4e0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e12:	f083 0301 	eor.w	r3, r3, #1
    4e16:	b2db      	uxtb	r3, r3
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d1e7      	bne.n	4dec <Power_Ip_SMC_ModeConfig+0x138>
    4e1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d00d      	beq.n	4e40 <Power_Ip_SMC_ModeConfig+0x18c>
    4e24:	2301      	movs	r3, #1
    4e26:	9309      	str	r3, [sp, #36]	; 0x24
    4e28:	21ff      	movs	r1, #255	; 0xff
    4e2a:	2000      	movs	r0, #0
    4e2c:	f7ff fe20 	bl	4a70 <Power_Ip_ReportPowerErrors>
    4e30:	e006      	b.n	4e40 <Power_Ip_SMC_ModeConfig+0x18c>
    4e32:	2301      	movs	r3, #1
    4e34:	9309      	str	r3, [sp, #36]	; 0x24
    4e36:	e004      	b.n	4e42 <Power_Ip_SMC_ModeConfig+0x18e>
    4e38:	bf00      	nop
    4e3a:	e002      	b.n	4e42 <Power_Ip_SMC_ModeConfig+0x18e>
    4e3c:	bf00      	nop
    4e3e:	e000      	b.n	4e42 <Power_Ip_SMC_ModeConfig+0x18e>
    4e40:	bf00      	nop
    4e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e44:	4618      	mov	r0, r3
    4e46:	b00b      	add	sp, #44	; 0x2c
    4e48:	f85d fb04 	ldr.w	pc, [sp], #4
    4e4c:	4007e000 	.word	0x4007e000

00004e50 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    4e50:	b500      	push	{lr}
    4e52:	b085      	sub	sp, #20
    4e54:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    4e56:	9b01      	ldr	r3, [sp, #4]
    4e58:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    4e5a:	9803      	ldr	r0, [sp, #12]
    4e5c:	f000 fbc8 	bl	55f0 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    4e60:	4a03      	ldr	r2, [pc, #12]	; (4e70 <Port_Init+0x20>)
    4e62:	9b03      	ldr	r3, [sp, #12]
    4e64:	6013      	str	r3, [r2, #0]
        }
    }
}
    4e66:	bf00      	nop
    4e68:	b005      	add	sp, #20
    4e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    4e6e:	bf00      	nop
    4e70:	1fff8cf4 	.word	0x1fff8cf4

00004e74 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    4e74:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    4e76:	4b03      	ldr	r3, [pc, #12]	; (4e84 <Port_RefreshPortDirection+0x10>)
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	4618      	mov	r0, r3
    4e7c:	f000 fc10 	bl	56a0 <Port_Ipw_RefreshPortDirection>
    }
}
    4e80:	bf00      	nop
    4e82:	bd08      	pop	{r3, pc}
    4e84:	1fff8cf4 	.word	0x1fff8cf4

00004e88 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    4e88:	b086      	sub	sp, #24
    4e8a:	9003      	str	r0, [sp, #12]
    4e8c:	9102      	str	r1, [sp, #8]
    4e8e:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    4e90:	23ff      	movs	r3, #255	; 0xff
    4e92:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    4e94:	9b03      	ldr	r3, [sp, #12]
    4e96:	4a39      	ldr	r2, [pc, #228]	; (4f7c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    4e98:	4293      	cmp	r3, r2
    4e9a:	d151      	bne.n	4f40 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    4e9c:	9b02      	ldr	r3, [sp, #8]
    4e9e:	2b10      	cmp	r3, #16
    4ea0:	d867      	bhi.n	4f72 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    4ea2:	a201      	add	r2, pc, #4	; (adr r2, 4ea8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    4ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4ea8:	00004eed 	.word	0x00004eed
    4eac:	00004efb 	.word	0x00004efb
    4eb0:	00004f73 	.word	0x00004f73
    4eb4:	00004f73 	.word	0x00004f73
    4eb8:	00004f73 	.word	0x00004f73
    4ebc:	00004f73 	.word	0x00004f73
    4ec0:	00004f73 	.word	0x00004f73
    4ec4:	00004f73 	.word	0x00004f73
    4ec8:	00004f73 	.word	0x00004f73
    4ecc:	00004f73 	.word	0x00004f73
    4ed0:	00004f73 	.word	0x00004f73
    4ed4:	00004f73 	.word	0x00004f73
    4ed8:	00004f73 	.word	0x00004f73
    4edc:	00004f09 	.word	0x00004f09
    4ee0:	00004f17 	.word	0x00004f17
    4ee4:	00004f25 	.word	0x00004f25
    4ee8:	00004f33 	.word	0x00004f33
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    4eec:	2301      	movs	r3, #1
    4eee:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4ef0:	9a05      	ldr	r2, [sp, #20]
    4ef2:	9b01      	ldr	r3, [sp, #4]
    4ef4:	4313      	orrs	r3, r2
    4ef6:	9305      	str	r3, [sp, #20]
                break;
    4ef8:	e03c      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    4efa:	2302      	movs	r3, #2
    4efc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4efe:	9a05      	ldr	r2, [sp, #20]
    4f00:	9b01      	ldr	r3, [sp, #4]
    4f02:	4313      	orrs	r3, r2
    4f04:	9305      	str	r3, [sp, #20]
                break;
    4f06:	e035      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    4f08:	2304      	movs	r3, #4
    4f0a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f0c:	9a05      	ldr	r2, [sp, #20]
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	4313      	orrs	r3, r2
    4f12:	9305      	str	r3, [sp, #20]
                break;
    4f14:	e02e      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    4f16:	2308      	movs	r3, #8
    4f18:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    4f1a:	9a05      	ldr	r2, [sp, #20]
    4f1c:	9b01      	ldr	r3, [sp, #4]
    4f1e:	4313      	orrs	r3, r2
    4f20:	9305      	str	r3, [sp, #20]
                break;
    4f22:	e027      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    4f24:	230e      	movs	r3, #14
    4f26:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f28:	9a05      	ldr	r2, [sp, #20]
    4f2a:	9b01      	ldr	r3, [sp, #4]
    4f2c:	4013      	ands	r3, r2
    4f2e:	9305      	str	r3, [sp, #20]
                break;
    4f30:	e020      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    4f32:	230d      	movs	r3, #13
    4f34:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f36:	9a05      	ldr	r2, [sp, #20]
    4f38:	9b01      	ldr	r3, [sp, #4]
    4f3a:	4013      	ands	r3, r2
    4f3c:	9305      	str	r3, [sp, #20]
                break;
    4f3e:	e019      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    4f40:	9b03      	ldr	r3, [sp, #12]
    4f42:	4a0f      	ldr	r2, [pc, #60]	; (4f80 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    4f44:	4293      	cmp	r3, r2
    4f46:	d115      	bne.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    4f48:	9b02      	ldr	r3, [sp, #8]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d003      	beq.n	4f56 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    4f4e:	9b02      	ldr	r3, [sp, #8]
    4f50:	2b01      	cmp	r3, #1
    4f52:	d007      	beq.n	4f64 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    4f54:	e00e      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    4f56:	230b      	movs	r3, #11
    4f58:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f5a:	9a05      	ldr	r2, [sp, #20]
    4f5c:	9b01      	ldr	r3, [sp, #4]
    4f5e:	4013      	ands	r3, r2
    4f60:	9305      	str	r3, [sp, #20]
                break;
    4f62:	e007      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    4f64:	2307      	movs	r3, #7
    4f66:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    4f68:	9a05      	ldr	r2, [sp, #20]
    4f6a:	9b01      	ldr	r3, [sp, #4]
    4f6c:	4013      	ands	r3, r2
    4f6e:	9305      	str	r3, [sp, #20]
                break;
    4f70:	e000      	b.n	4f74 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    4f72:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    4f74:	9b05      	ldr	r3, [sp, #20]
}
    4f76:	4618      	mov	r0, r3
    4f78:	b006      	add	sp, #24
    4f7a:	4770      	bx	lr
    4f7c:	4004a000 	.word	0x4004a000
    4f80:	4004b000 	.word	0x4004b000

00004f84 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    4f84:	b500      	push	{lr}
    4f86:	b089      	sub	sp, #36	; 0x24
    4f88:	9003      	str	r0, [sp, #12]
    4f8a:	9102      	str	r1, [sp, #8]
    4f8c:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    4f8e:	9b01      	ldr	r3, [sp, #4]
    4f90:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    4f92:	9b01      	ldr	r3, [sp, #4]
    4f94:	2b08      	cmp	r3, #8
    4f96:	d121      	bne.n	4fdc <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    4f98:	4b13      	ldr	r3, [pc, #76]	; (4fe8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4f9a:	685b      	ldr	r3, [r3, #4]
    4f9c:	f003 030f 	and.w	r3, r3, #15
    4fa0:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    4fa2:	9a06      	ldr	r2, [sp, #24]
    4fa4:	9902      	ldr	r1, [sp, #8]
    4fa6:	9803      	ldr	r0, [sp, #12]
    4fa8:	f7ff ff6e 	bl	4e88 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    4fac:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    4fae:	9b05      	ldr	r3, [sp, #20]
    4fb0:	2bff      	cmp	r3, #255	; 0xff
    4fb2:	d011      	beq.n	4fd8 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    4fb4:	f004 f870 	bl	9098 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    4fb8:	4b0b      	ldr	r3, [pc, #44]	; (4fe8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fba:	685b      	ldr	r3, [r3, #4]
    4fbc:	4a0a      	ldr	r2, [pc, #40]	; (4fe8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fbe:	f023 030f 	bic.w	r3, r3, #15
    4fc2:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    4fc4:	4b08      	ldr	r3, [pc, #32]	; (4fe8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fc6:	685a      	ldr	r2, [r3, #4]
    4fc8:	9b05      	ldr	r3, [sp, #20]
    4fca:	f003 030f 	and.w	r3, r3, #15
    4fce:	4906      	ldr	r1, [pc, #24]	; (4fe8 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    4fd0:	4313      	orrs	r3, r2
    4fd2:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    4fd4:	f004 f88c 	bl	90f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    4fd8:	2300      	movs	r3, #0
    4fda:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    4fdc:	9b07      	ldr	r3, [sp, #28]
}
    4fde:	4618      	mov	r0, r3
    4fe0:	b009      	add	sp, #36	; 0x24
    4fe2:	f85d fb04 	ldr.w	pc, [sp], #4
    4fe6:	bf00      	nop
    4fe8:	40048000 	.word	0x40048000

00004fec <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    4fec:	b500      	push	{lr}
    4fee:	b087      	sub	sp, #28
    4ff0:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    4ff2:	2300      	movs	r3, #0
    4ff4:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    4ff6:	2300      	movs	r3, #0
    4ff8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    4ffa:	2300      	movs	r3, #0
    4ffc:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    4ffe:	9b01      	ldr	r3, [sp, #4]
    5000:	68db      	ldr	r3, [r3, #12]
    5002:	2b02      	cmp	r3, #2
    5004:	d00a      	beq.n	501c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5006:	9b05      	ldr	r3, [sp, #20]
    5008:	f043 0302 	orr.w	r3, r3, #2
    500c:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	68db      	ldr	r3, [r3, #12]
    5012:	f003 0301 	and.w	r3, r3, #1
    5016:	9a05      	ldr	r2, [sp, #20]
    5018:	4313      	orrs	r3, r2
    501a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	699b      	ldr	r3, [r3, #24]
    5020:	019b      	lsls	r3, r3, #6
    5022:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5026:	9a05      	ldr	r2, [sp, #20]
    5028:	4313      	orrs	r3, r2
    502a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    502c:	9b01      	ldr	r3, [sp, #4]
    502e:	6a1b      	ldr	r3, [r3, #32]
    5030:	03db      	lsls	r3, r3, #15
    5032:	b29b      	uxth	r3, r3
    5034:	9a05      	ldr	r2, [sp, #20]
    5036:	4313      	orrs	r3, r2
    5038:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    503a:	9b01      	ldr	r3, [sp, #4]
    503c:	7f1b      	ldrb	r3, [r3, #28]
    503e:	2b00      	cmp	r3, #0
    5040:	d001      	beq.n	5046 <Port_Ci_Port_Ip_PinInit+0x5a>
    5042:	2310      	movs	r3, #16
    5044:	e000      	b.n	5048 <Port_Ci_Port_Ip_PinInit+0x5c>
    5046:	2300      	movs	r3, #0
    5048:	9a05      	ldr	r2, [sp, #20]
    504a:	4313      	orrs	r3, r2
    504c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    504e:	9b01      	ldr	r3, [sp, #4]
    5050:	691b      	ldr	r3, [r3, #16]
    5052:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5054:	9b01      	ldr	r3, [sp, #4]
    5056:	6818      	ldr	r0, [r3, #0]
    5058:	9b01      	ldr	r3, [sp, #4]
    505a:	689b      	ldr	r3, [r3, #8]
    505c:	9a04      	ldr	r2, [sp, #16]
    505e:	4619      	mov	r1, r3
    5060:	f7ff ff90 	bl	4f84 <Port_Ci_Port_Ip_ConfigureInterleave>
    5064:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5066:	9b03      	ldr	r3, [sp, #12]
    5068:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    506a:	9b04      	ldr	r3, [sp, #16]
    506c:	021b      	lsls	r3, r3, #8
    506e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5072:	9a05      	ldr	r2, [sp, #20]
    5074:	4313      	orrs	r3, r2
    5076:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5078:	f003 fe74 	bl	8d64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    507c:	9b01      	ldr	r3, [sp, #4]
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5084:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5086:	9b01      	ldr	r3, [sp, #4]
    5088:	689b      	ldr	r3, [r3, #8]
    508a:	2201      	movs	r2, #1
    508c:	fa02 f303 	lsl.w	r3, r2, r3
    5090:	43db      	mvns	r3, r3
    5092:	9a02      	ldr	r2, [sp, #8]
    5094:	4013      	ands	r3, r2
    5096:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5098:	9b01      	ldr	r3, [sp, #4]
    509a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    509e:	2b00      	cmp	r3, #0
    50a0:	d001      	beq.n	50a6 <Port_Ci_Port_Ip_PinInit+0xba>
    50a2:	2201      	movs	r2, #1
    50a4:	e000      	b.n	50a8 <Port_Ci_Port_Ip_PinInit+0xbc>
    50a6:	2200      	movs	r2, #0
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	689b      	ldr	r3, [r3, #8]
    50ac:	fa02 f303 	lsl.w	r3, r2, r3
    50b0:	9a02      	ldr	r2, [sp, #8]
    50b2:	4313      	orrs	r3, r2
    50b4:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    50b6:	9b01      	ldr	r3, [sp, #4]
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	9a02      	ldr	r2, [sp, #8]
    50bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    50c0:	f003 fe7c 	bl	8dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    50c4:	9b04      	ldr	r3, [sp, #16]
    50c6:	2b01      	cmp	r3, #1
    50c8:	d16d      	bne.n	51a6 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    50ca:	9b01      	ldr	r3, [sp, #4]
    50cc:	695b      	ldr	r3, [r3, #20]
    50ce:	2b02      	cmp	r3, #2
    50d0:	d138      	bne.n	5144 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    50d2:	9b01      	ldr	r3, [sp, #4]
    50d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50d8:	2b01      	cmp	r3, #1
    50da:	d10f      	bne.n	50fc <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    50dc:	f003 fe94 	bl	8e08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    50e0:	9b01      	ldr	r3, [sp, #4]
    50e2:	685b      	ldr	r3, [r3, #4]
    50e4:	6859      	ldr	r1, [r3, #4]
    50e6:	9b01      	ldr	r3, [sp, #4]
    50e8:	689b      	ldr	r3, [r3, #8]
    50ea:	2201      	movs	r2, #1
    50ec:	409a      	lsls	r2, r3
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	685b      	ldr	r3, [r3, #4]
    50f2:	430a      	orrs	r2, r1
    50f4:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    50f6:	f003 feb3 	bl	8e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    50fa:	e013      	b.n	5124 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    50fc:	9b01      	ldr	r3, [sp, #4]
    50fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5102:	2b00      	cmp	r3, #0
    5104:	d10e      	bne.n	5124 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5106:	f003 fed1 	bl	8eac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    510a:	9b01      	ldr	r3, [sp, #4]
    510c:	685b      	ldr	r3, [r3, #4]
    510e:	6899      	ldr	r1, [r3, #8]
    5110:	9b01      	ldr	r3, [sp, #4]
    5112:	689b      	ldr	r3, [r3, #8]
    5114:	2201      	movs	r2, #1
    5116:	409a      	lsls	r2, r3
    5118:	9b01      	ldr	r3, [sp, #4]
    511a:	685b      	ldr	r3, [r3, #4]
    511c:	430a      	orrs	r2, r1
    511e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5120:	f003 fef0 	bl	8f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5124:	f003 ff14 	bl	8f50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5128:	9b01      	ldr	r3, [sp, #4]
    512a:	685b      	ldr	r3, [r3, #4]
    512c:	6959      	ldr	r1, [r3, #20]
    512e:	9b01      	ldr	r3, [sp, #4]
    5130:	689b      	ldr	r3, [r3, #8]
    5132:	2201      	movs	r2, #1
    5134:	409a      	lsls	r2, r3
    5136:	9b01      	ldr	r3, [sp, #4]
    5138:	685b      	ldr	r3, [r3, #4]
    513a:	430a      	orrs	r2, r1
    513c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    513e:	f003 ff33 	bl	8fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5142:	e030      	b.n	51a6 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5144:	f003 ff04 	bl	8f50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5148:	9b01      	ldr	r3, [sp, #4]
    514a:	685b      	ldr	r3, [r3, #4]
    514c:	6959      	ldr	r1, [r3, #20]
    514e:	9b01      	ldr	r3, [sp, #4]
    5150:	689b      	ldr	r3, [r3, #8]
    5152:	2201      	movs	r2, #1
    5154:	fa02 f303 	lsl.w	r3, r2, r3
    5158:	43da      	mvns	r2, r3
    515a:	9b01      	ldr	r3, [sp, #4]
    515c:	685b      	ldr	r3, [r3, #4]
    515e:	400a      	ands	r2, r1
    5160:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5162:	f003 ff21 	bl	8fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5166:	f003 ff45 	bl	8ff4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    516a:	9b01      	ldr	r3, [sp, #4]
    516c:	685b      	ldr	r3, [r3, #4]
    516e:	6999      	ldr	r1, [r3, #24]
    5170:	9b01      	ldr	r3, [sp, #4]
    5172:	689b      	ldr	r3, [r3, #8]
    5174:	2201      	movs	r2, #1
    5176:	fa02 f303 	lsl.w	r3, r2, r3
    517a:	43da      	mvns	r2, r3
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	685b      	ldr	r3, [r3, #4]
    5180:	400a      	ands	r2, r1
    5182:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5184:	9b01      	ldr	r3, [sp, #4]
    5186:	695b      	ldr	r3, [r3, #20]
    5188:	2b03      	cmp	r3, #3
    518a:	d10a      	bne.n	51a2 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	685b      	ldr	r3, [r3, #4]
    5190:	6999      	ldr	r1, [r3, #24]
    5192:	9b01      	ldr	r3, [sp, #4]
    5194:	689b      	ldr	r3, [r3, #8]
    5196:	2201      	movs	r2, #1
    5198:	409a      	lsls	r2, r3
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	685b      	ldr	r3, [r3, #4]
    519e:	430a      	orrs	r2, r1
    51a0:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    51a2:	f003 ff53 	bl	904c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    51a6:	9b01      	ldr	r3, [sp, #4]
    51a8:	681b      	ldr	r3, [r3, #0]
    51aa:	9a01      	ldr	r2, [sp, #4]
    51ac:	6892      	ldr	r2, [r2, #8]
    51ae:	9905      	ldr	r1, [sp, #20]
    51b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    51b4:	bf00      	nop
    51b6:	b007      	add	sp, #28
    51b8:	f85d fb04 	ldr.w	pc, [sp], #4

000051bc <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    51bc:	b500      	push	{lr}
    51be:	b085      	sub	sp, #20
    51c0:	9001      	str	r0, [sp, #4]
    51c2:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    51c4:	2300      	movs	r3, #0
    51c6:	9303      	str	r3, [sp, #12]
    51c8:	e00d      	b.n	51e6 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    51ca:	9a03      	ldr	r2, [sp, #12]
    51cc:	4613      	mov	r3, r2
    51ce:	009b      	lsls	r3, r3, #2
    51d0:	4413      	add	r3, r2
    51d2:	00db      	lsls	r3, r3, #3
    51d4:	461a      	mov	r2, r3
    51d6:	9b00      	ldr	r3, [sp, #0]
    51d8:	4413      	add	r3, r2
    51da:	4618      	mov	r0, r3
    51dc:	f7ff ff06 	bl	4fec <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    51e0:	9b03      	ldr	r3, [sp, #12]
    51e2:	3301      	adds	r3, #1
    51e4:	9303      	str	r3, [sp, #12]
    51e6:	9a03      	ldr	r2, [sp, #12]
    51e8:	9b01      	ldr	r3, [sp, #4]
    51ea:	429a      	cmp	r2, r3
    51ec:	d3ed      	bcc.n	51ca <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    51ee:	2300      	movs	r3, #0
}
    51f0:	4618      	mov	r0, r3
    51f2:	b005      	add	sp, #20
    51f4:	f85d fb04 	ldr.w	pc, [sp], #4

000051f8 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    51f8:	b500      	push	{lr}
    51fa:	b087      	sub	sp, #28
    51fc:	9003      	str	r0, [sp, #12]
    51fe:	9102      	str	r1, [sp, #8]
    5200:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5202:	9a01      	ldr	r2, [sp, #4]
    5204:	9902      	ldr	r1, [sp, #8]
    5206:	9803      	ldr	r0, [sp, #12]
    5208:	f7ff febc 	bl	4f84 <Port_Ci_Port_Ip_ConfigureInterleave>
    520c:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    520e:	f003 ff95 	bl	913c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5212:	9b03      	ldr	r3, [sp, #12]
    5214:	9a02      	ldr	r2, [sp, #8]
    5216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    521a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    521c:	9b04      	ldr	r3, [sp, #16]
    521e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5222:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5224:	9b05      	ldr	r3, [sp, #20]
    5226:	021b      	lsls	r3, r3, #8
    5228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    522c:	9a04      	ldr	r2, [sp, #16]
    522e:	4313      	orrs	r3, r2
    5230:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5232:	9b03      	ldr	r3, [sp, #12]
    5234:	9a02      	ldr	r2, [sp, #8]
    5236:	9904      	ldr	r1, [sp, #16]
    5238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    523c:	f003 ffaa 	bl	9194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5240:	bf00      	nop
    5242:	b007      	add	sp, #28
    5244:	f85d fb04 	ldr.w	pc, [sp], #4

00005248 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5248:	b500      	push	{lr}
    524a:	b083      	sub	sp, #12
    524c:	9001      	str	r0, [sp, #4]
    524e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5250:	f003 ffc6 	bl	91e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5254:	9b01      	ldr	r3, [sp, #4]
    5256:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    525a:	2101      	movs	r1, #1
    525c:	9b00      	ldr	r3, [sp, #0]
    525e:	fa01 f303 	lsl.w	r3, r1, r3
    5262:	431a      	orrs	r2, r3
    5264:	9b01      	ldr	r3, [sp, #4]
    5266:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    526a:	f003 ffe5 	bl	9238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    526e:	bf00      	nop
    5270:	b003      	add	sp, #12
    5272:	f85d fb04 	ldr.w	pc, [sp], #4

00005276 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5276:	b500      	push	{lr}
    5278:	b083      	sub	sp, #12
    527a:	9001      	str	r0, [sp, #4]
    527c:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    527e:	f004 f801 	bl	9284 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5282:	9b01      	ldr	r3, [sp, #4]
    5284:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    5288:	2101      	movs	r1, #1
    528a:	9b00      	ldr	r3, [sp, #0]
    528c:	fa01 f303 	lsl.w	r3, r1, r3
    5290:	43db      	mvns	r3, r3
    5292:	401a      	ands	r2, r3
    5294:	9b01      	ldr	r3, [sp, #4]
    5296:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    529a:	f004 f81f 	bl	92dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    529e:	bf00      	nop
    52a0:	b003      	add	sp, #12
    52a2:	f85d fb04 	ldr.w	pc, [sp], #4

000052a6 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    52a6:	b082      	sub	sp, #8
    52a8:	9001      	str	r0, [sp, #4]
    52aa:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    52ac:	9b00      	ldr	r3, [sp, #0]
    52ae:	785b      	ldrb	r3, [r3, #1]
    52b0:	f003 0201 	and.w	r2, r3, #1
    52b4:	9b01      	ldr	r3, [sp, #4]
    52b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    52ba:	9b00      	ldr	r3, [sp, #0]
    52bc:	789b      	ldrb	r3, [r3, #2]
    52be:	f003 021f 	and.w	r2, r3, #31
    52c2:	9b01      	ldr	r3, [sp, #4]
    52c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    52c8:	bf00      	nop
    52ca:	b002      	add	sp, #8
    52cc:	4770      	bx	lr

000052ce <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    52ce:	b086      	sub	sp, #24
    52d0:	9003      	str	r0, [sp, #12]
    52d2:	9301      	str	r3, [sp, #4]
    52d4:	460b      	mov	r3, r1
    52d6:	f8ad 300a 	strh.w	r3, [sp, #10]
    52da:	4613      	mov	r3, r2
    52dc:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    52e0:	2300      	movs	r3, #0
    52e2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    52e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52ea:	f043 0301 	orr.w	r3, r3, #1
    52ee:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    52f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52f6:	f043 0302 	orr.w	r3, r3, #2
    52fa:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    52fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5302:	f043 0310 	orr.w	r3, r3, #16
    5306:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    530a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    530e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5312:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5316:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    531a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    531e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5322:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    532a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    532e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5332:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5336:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    533a:	4013      	ands	r3, r2
    533c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5340:	9b01      	ldr	r3, [sp, #4]
    5342:	2b00      	cmp	r3, #0
    5344:	d003      	beq.n	534e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	2b01      	cmp	r3, #1
    534a:	d00a      	beq.n	5362 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    534c:	e013      	b.n	5376 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    534e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5352:	041a      	lsls	r2, r3, #16
    5354:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5358:	431a      	orrs	r2, r3
    535a:	9b03      	ldr	r3, [sp, #12]
    535c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5360:	e009      	b.n	5376 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5362:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5366:	041a      	lsls	r2, r3, #16
    5368:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    536c:	431a      	orrs	r2, r3
    536e:	9b03      	ldr	r3, [sp, #12]
    5370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5374:	bf00      	nop
    }
}
    5376:	bf00      	nop
    5378:	b006      	add	sp, #24
    537a:	4770      	bx	lr

0000537c <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    537c:	b500      	push	{lr}
    537e:	b087      	sub	sp, #28
    5380:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5382:	9b01      	ldr	r3, [sp, #4]
    5384:	885b      	ldrh	r3, [r3, #2]
    5386:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	689b      	ldr	r3, [r3, #8]
    538e:	7a1b      	ldrb	r3, [r3, #8]
    5390:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5394:	9b01      	ldr	r3, [sp, #4]
    5396:	689b      	ldr	r3, [r3, #8]
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	689b      	ldr	r3, [r3, #8]
    53a0:	685b      	ldr	r3, [r3, #4]
    53a2:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    53a4:	2300      	movs	r3, #0
    53a6:	f8ad 3016 	strh.w	r3, [sp, #22]
    53aa:	e111      	b.n	55d0 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    53ac:	9b02      	ldr	r3, [sp, #8]
    53ae:	2b02      	cmp	r3, #2
    53b0:	d169      	bne.n	5486 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    53b2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53b6:	2b01      	cmp	r3, #1
    53b8:	d11a      	bne.n	53f0 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53ba:	9b01      	ldr	r3, [sp, #4]
    53bc:	685a      	ldr	r2, [r3, #4]
    53be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53c2:	005b      	lsls	r3, r3, #1
    53c4:	4413      	add	r3, r2
    53c6:	881b      	ldrh	r3, [r3, #0]
    53c8:	f003 021f 	and.w	r2, r3, #31
    53cc:	9b01      	ldr	r3, [sp, #4]
    53ce:	6859      	ldr	r1, [r3, #4]
    53d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    53d4:	005b      	lsls	r3, r3, #1
    53d6:	440b      	add	r3, r1
    53d8:	881b      	ldrh	r3, [r3, #0]
    53da:	095b      	lsrs	r3, r3, #5
    53dc:	b29b      	uxth	r3, r3
    53de:	4619      	mov	r1, r3
    53e0:	4b81      	ldr	r3, [pc, #516]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    53e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    53e6:	2101      	movs	r1, #1
    53e8:	fa01 f202 	lsl.w	r2, r1, r2
    53ec:	605a      	str	r2, [r3, #4]
    53ee:	e01d      	b.n	542c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    53f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d119      	bne.n	542c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    53f8:	9b01      	ldr	r3, [sp, #4]
    53fa:	685a      	ldr	r2, [r3, #4]
    53fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5400:	005b      	lsls	r3, r3, #1
    5402:	4413      	add	r3, r2
    5404:	881b      	ldrh	r3, [r3, #0]
    5406:	f003 021f 	and.w	r2, r3, #31
    540a:	9b01      	ldr	r3, [sp, #4]
    540c:	6859      	ldr	r1, [r3, #4]
    540e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5412:	005b      	lsls	r3, r3, #1
    5414:	440b      	add	r3, r1
    5416:	881b      	ldrh	r3, [r3, #0]
    5418:	095b      	lsrs	r3, r3, #5
    541a:	b29b      	uxth	r3, r3
    541c:	4619      	mov	r1, r3
    541e:	4b72      	ldr	r3, [pc, #456]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5424:	2101      	movs	r1, #1
    5426:	fa01 f202 	lsl.w	r2, r1, r2
    542a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    542c:	f003 ff7c 	bl	9328 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	685a      	ldr	r2, [r3, #4]
    5434:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5438:	005b      	lsls	r3, r3, #1
    543a:	4413      	add	r3, r2
    543c:	881b      	ldrh	r3, [r3, #0]
    543e:	095b      	lsrs	r3, r3, #5
    5440:	b29b      	uxth	r3, r3
    5442:	461a      	mov	r2, r3
    5444:	4b68      	ldr	r3, [pc, #416]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    544a:	6959      	ldr	r1, [r3, #20]
    544c:	9b01      	ldr	r3, [sp, #4]
    544e:	685a      	ldr	r2, [r3, #4]
    5450:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5454:	005b      	lsls	r3, r3, #1
    5456:	4413      	add	r3, r2
    5458:	881b      	ldrh	r3, [r3, #0]
    545a:	f003 031f 	and.w	r3, r3, #31
    545e:	2201      	movs	r2, #1
    5460:	409a      	lsls	r2, r3
    5462:	9b01      	ldr	r3, [sp, #4]
    5464:	6858      	ldr	r0, [r3, #4]
    5466:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    546a:	005b      	lsls	r3, r3, #1
    546c:	4403      	add	r3, r0
    546e:	881b      	ldrh	r3, [r3, #0]
    5470:	095b      	lsrs	r3, r3, #5
    5472:	b29b      	uxth	r3, r3
    5474:	4618      	mov	r0, r3
    5476:	4b5c      	ldr	r3, [pc, #368]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5478:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    547c:	430a      	orrs	r2, r1
    547e:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5480:	f003 ff7e 	bl	9380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5484:	e086      	b.n	5594 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5486:	f003 ff4f 	bl	9328 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    548a:	9b01      	ldr	r3, [sp, #4]
    548c:	685a      	ldr	r2, [r3, #4]
    548e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5492:	005b      	lsls	r3, r3, #1
    5494:	4413      	add	r3, r2
    5496:	881b      	ldrh	r3, [r3, #0]
    5498:	095b      	lsrs	r3, r3, #5
    549a:	b29b      	uxth	r3, r3
    549c:	461a      	mov	r2, r3
    549e:	4b52      	ldr	r3, [pc, #328]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    54a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    54a4:	6959      	ldr	r1, [r3, #20]
    54a6:	9b01      	ldr	r3, [sp, #4]
    54a8:	685a      	ldr	r2, [r3, #4]
    54aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ae:	005b      	lsls	r3, r3, #1
    54b0:	4413      	add	r3, r2
    54b2:	881b      	ldrh	r3, [r3, #0]
    54b4:	f003 031f 	and.w	r3, r3, #31
    54b8:	2201      	movs	r2, #1
    54ba:	fa02 f303 	lsl.w	r3, r2, r3
    54be:	43da      	mvns	r2, r3
    54c0:	9b01      	ldr	r3, [sp, #4]
    54c2:	6858      	ldr	r0, [r3, #4]
    54c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54c8:	005b      	lsls	r3, r3, #1
    54ca:	4403      	add	r3, r0
    54cc:	881b      	ldrh	r3, [r3, #0]
    54ce:	095b      	lsrs	r3, r3, #5
    54d0:	b29b      	uxth	r3, r3
    54d2:	4618      	mov	r0, r3
    54d4:	4b44      	ldr	r3, [pc, #272]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    54d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    54da:	400a      	ands	r2, r1
    54dc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    54de:	f003 ff4f 	bl	9380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    54e2:	f003 ff73 	bl	93cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    54e6:	9b01      	ldr	r3, [sp, #4]
    54e8:	685a      	ldr	r2, [r3, #4]
    54ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    54ee:	005b      	lsls	r3, r3, #1
    54f0:	4413      	add	r3, r2
    54f2:	881b      	ldrh	r3, [r3, #0]
    54f4:	095b      	lsrs	r3, r3, #5
    54f6:	b29b      	uxth	r3, r3
    54f8:	461a      	mov	r2, r3
    54fa:	4b3b      	ldr	r3, [pc, #236]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    54fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5500:	6999      	ldr	r1, [r3, #24]
    5502:	9b01      	ldr	r3, [sp, #4]
    5504:	685a      	ldr	r2, [r3, #4]
    5506:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    550a:	005b      	lsls	r3, r3, #1
    550c:	4413      	add	r3, r2
    550e:	881b      	ldrh	r3, [r3, #0]
    5510:	f003 031f 	and.w	r3, r3, #31
    5514:	2201      	movs	r2, #1
    5516:	fa02 f303 	lsl.w	r3, r2, r3
    551a:	43da      	mvns	r2, r3
    551c:	9b01      	ldr	r3, [sp, #4]
    551e:	6858      	ldr	r0, [r3, #4]
    5520:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5524:	005b      	lsls	r3, r3, #1
    5526:	4403      	add	r3, r0
    5528:	881b      	ldrh	r3, [r3, #0]
    552a:	095b      	lsrs	r3, r3, #5
    552c:	b29b      	uxth	r3, r3
    552e:	4618      	mov	r0, r3
    5530:	4b2d      	ldr	r3, [pc, #180]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5532:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5536:	400a      	ands	r2, r1
    5538:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    553a:	9b02      	ldr	r3, [sp, #8]
    553c:	2b03      	cmp	r3, #3
    553e:	d127      	bne.n	5590 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5540:	9b01      	ldr	r3, [sp, #4]
    5542:	685a      	ldr	r2, [r3, #4]
    5544:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5548:	005b      	lsls	r3, r3, #1
    554a:	4413      	add	r3, r2
    554c:	881b      	ldrh	r3, [r3, #0]
    554e:	095b      	lsrs	r3, r3, #5
    5550:	b29b      	uxth	r3, r3
    5552:	461a      	mov	r2, r3
    5554:	4b24      	ldr	r3, [pc, #144]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    555a:	6999      	ldr	r1, [r3, #24]
    555c:	9b01      	ldr	r3, [sp, #4]
    555e:	685a      	ldr	r2, [r3, #4]
    5560:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5564:	005b      	lsls	r3, r3, #1
    5566:	4413      	add	r3, r2
    5568:	881b      	ldrh	r3, [r3, #0]
    556a:	f003 031f 	and.w	r3, r3, #31
    556e:	2201      	movs	r2, #1
    5570:	409a      	lsls	r2, r3
    5572:	9b01      	ldr	r3, [sp, #4]
    5574:	6858      	ldr	r0, [r3, #4]
    5576:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    557a:	005b      	lsls	r3, r3, #1
    557c:	4403      	add	r3, r0
    557e:	881b      	ldrh	r3, [r3, #0]
    5580:	095b      	lsrs	r3, r3, #5
    5582:	b29b      	uxth	r3, r3
    5584:	4618      	mov	r0, r3
    5586:	4b18      	ldr	r3, [pc, #96]	; (55e8 <Port_Ipw_Init_UnusedPins+0x26c>)
    5588:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    558c:	430a      	orrs	r2, r1
    558e:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5590:	f003 ff48 	bl	9424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5594:	9b01      	ldr	r3, [sp, #4]
    5596:	685a      	ldr	r2, [r3, #4]
    5598:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    559c:	005b      	lsls	r3, r3, #1
    559e:	4413      	add	r3, r2
    55a0:	881b      	ldrh	r3, [r3, #0]
    55a2:	095b      	lsrs	r3, r3, #5
    55a4:	b29b      	uxth	r3, r3
    55a6:	461a      	mov	r2, r3
    55a8:	4b10      	ldr	r3, [pc, #64]	; (55ec <Port_Ipw_Init_UnusedPins+0x270>)
    55aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    55ae:	9a01      	ldr	r2, [sp, #4]
    55b0:	6851      	ldr	r1, [r2, #4]
    55b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55b6:	0052      	lsls	r2, r2, #1
    55b8:	440a      	add	r2, r1
    55ba:	8812      	ldrh	r2, [r2, #0]
    55bc:	f002 021f 	and.w	r2, r2, #31
    55c0:	9903      	ldr	r1, [sp, #12]
    55c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    55c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55ca:	3301      	adds	r3, #1
    55cc:	f8ad 3016 	strh.w	r3, [sp, #22]
    55d0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55d4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    55d8:	429a      	cmp	r2, r3
    55da:	f4ff aee7 	bcc.w	53ac <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    55de:	bf00      	nop
    55e0:	bf00      	nop
    55e2:	b007      	add	sp, #28
    55e4:	f85d fb04 	ldr.w	pc, [sp], #4
    55e8:	0000bd5c 	.word	0x0000bd5c
    55ec:	0000bd48 	.word	0x0000bd48

000055f0 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    55f0:	b500      	push	{lr}
    55f2:	b085      	sub	sp, #20
    55f4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    55f6:	9b01      	ldr	r3, [sp, #4]
    55f8:	7c1b      	ldrb	r3, [r3, #16]
    55fa:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    55fe:	2300      	movs	r3, #0
    5600:	f8ad 300e 	strh.w	r3, [sp, #14]
    5604:	e035      	b.n	5672 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5606:	9b01      	ldr	r3, [sp, #4]
    5608:	695a      	ldr	r2, [r3, #20]
    560a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    560e:	00db      	lsls	r3, r3, #3
    5610:	4413      	add	r3, r2
    5612:	781b      	ldrb	r3, [r3, #0]
    5614:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5618:	f89d 300c 	ldrb.w	r3, [sp, #12]
    561c:	4a1f      	ldr	r2, [pc, #124]	; (569c <Port_Ipw_Init+0xac>)
    561e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5622:	9b01      	ldr	r3, [sp, #4]
    5624:	695a      	ldr	r2, [r3, #20]
    5626:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    562a:	00db      	lsls	r3, r3, #3
    562c:	4413      	add	r3, r2
    562e:	4619      	mov	r1, r3
    5630:	f7ff fe39 	bl	52a6 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5634:	f004 f864 	bl	9700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5638:	f89d 300c 	ldrb.w	r3, [sp, #12]
    563c:	4a17      	ldr	r2, [pc, #92]	; (569c <Port_Ipw_Init+0xac>)
    563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5642:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5646:	9b01      	ldr	r3, [sp, #4]
    5648:	695a      	ldr	r2, [r3, #20]
    564a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    564e:	00db      	lsls	r3, r3, #3
    5650:	4413      	add	r3, r2
    5652:	685a      	ldr	r2, [r3, #4]
    5654:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5658:	4810      	ldr	r0, [pc, #64]	; (569c <Port_Ipw_Init+0xac>)
    565a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    565e:	430a      	orrs	r2, r1
    5660:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5664:	f004 f878 	bl	9758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5668:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    566c:	3301      	adds	r3, #1
    566e:	f8ad 300e 	strh.w	r3, [sp, #14]
    5672:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5676:	b29b      	uxth	r3, r3
    5678:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    567c:	429a      	cmp	r2, r3
    567e:	d3c2      	bcc.n	5606 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5680:	9b01      	ldr	r3, [sp, #4]
    5682:	6a1b      	ldr	r3, [r3, #32]
    5684:	4619      	mov	r1, r3
    5686:	2003      	movs	r0, #3
    5688:	f7ff fd98 	bl	51bc <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    568c:	9801      	ldr	r0, [sp, #4]
    568e:	f7ff fe75 	bl	537c <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5692:	bf00      	nop
    5694:	b005      	add	sp, #20
    5696:	f85d fb04 	ldr.w	pc, [sp], #4
    569a:	bf00      	nop
    569c:	0000bd48 	.word	0x0000bd48

000056a0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    56a0:	b500      	push	{lr}
    56a2:	b085      	sub	sp, #20
    56a4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    56a6:	9b01      	ldr	r3, [sp, #4]
    56a8:	881b      	ldrh	r3, [r3, #0]
    56aa:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    56ae:	2300      	movs	r3, #0
    56b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    56b4:	e0d2      	b.n	585c <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    56b6:	9b01      	ldr	r3, [sp, #4]
    56b8:	68d9      	ldr	r1, [r3, #12]
    56ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56be:	4613      	mov	r3, r2
    56c0:	009b      	lsls	r3, r3, #2
    56c2:	4413      	add	r3, r2
    56c4:	009b      	lsls	r3, r3, #2
    56c6:	440b      	add	r3, r1
    56c8:	7c5b      	ldrb	r3, [r3, #17]
    56ca:	f083 0301 	eor.w	r3, r3, #1
    56ce:	b2db      	uxtb	r3, r3
    56d0:	2b00      	cmp	r3, #0
    56d2:	f000 80be 	beq.w	5852 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    56d6:	9b01      	ldr	r3, [sp, #4]
    56d8:	68d9      	ldr	r1, [r3, #12]
    56da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56de:	4613      	mov	r3, r2
    56e0:	009b      	lsls	r3, r3, #2
    56e2:	4413      	add	r3, r2
    56e4:	009b      	lsls	r3, r3, #2
    56e6:	440b      	add	r3, r1
    56e8:	7c1b      	ldrb	r3, [r3, #16]
    56ea:	2b00      	cmp	r3, #0
    56ec:	f000 80b1 	beq.w	5852 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    56f0:	9b01      	ldr	r3, [sp, #4]
    56f2:	68d9      	ldr	r1, [r3, #12]
    56f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56f8:	4613      	mov	r3, r2
    56fa:	009b      	lsls	r3, r3, #2
    56fc:	4413      	add	r3, r2
    56fe:	009b      	lsls	r3, r3, #2
    5700:	440b      	add	r3, r1
    5702:	881b      	ldrh	r3, [r3, #0]
    5704:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5708:	9b01      	ldr	r3, [sp, #4]
    570a:	68d9      	ldr	r1, [r3, #12]
    570c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5710:	4613      	mov	r3, r2
    5712:	009b      	lsls	r3, r3, #2
    5714:	4413      	add	r3, r2
    5716:	009b      	lsls	r3, r3, #2
    5718:	440b      	add	r3, r1
    571a:	68db      	ldr	r3, [r3, #12]
    571c:	2b02      	cmp	r3, #2
    571e:	d11d      	bne.n	575c <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5720:	f004 f936 	bl	9990 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5724:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5728:	095b      	lsrs	r3, r3, #5
    572a:	b29b      	uxth	r3, r3
    572c:	461a      	mov	r2, r3
    572e:	4b51      	ldr	r3, [pc, #324]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5734:	6959      	ldr	r1, [r3, #20]
    5736:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    573a:	f003 031f 	and.w	r3, r3, #31
    573e:	2201      	movs	r2, #1
    5740:	409a      	lsls	r2, r3
    5742:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5746:	095b      	lsrs	r3, r3, #5
    5748:	b29b      	uxth	r3, r3
    574a:	4618      	mov	r0, r3
    574c:	4b49      	ldr	r3, [pc, #292]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    574e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5752:	430a      	orrs	r2, r1
    5754:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5756:	f004 f947 	bl	99e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    575a:	e07a      	b.n	5852 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	68d9      	ldr	r1, [r3, #12]
    5760:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5764:	4613      	mov	r3, r2
    5766:	009b      	lsls	r3, r3, #2
    5768:	4413      	add	r3, r2
    576a:	009b      	lsls	r3, r3, #2
    576c:	440b      	add	r3, r1
    576e:	68db      	ldr	r3, [r3, #12]
    5770:	2b01      	cmp	r3, #1
    5772:	d00b      	beq.n	578c <Port_Ipw_RefreshPortDirection+0xec>
    5774:	9b01      	ldr	r3, [sp, #4]
    5776:	68d9      	ldr	r1, [r3, #12]
    5778:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    577c:	4613      	mov	r3, r2
    577e:	009b      	lsls	r3, r3, #2
    5780:	4413      	add	r3, r2
    5782:	009b      	lsls	r3, r3, #2
    5784:	440b      	add	r3, r1
    5786:	68db      	ldr	r3, [r3, #12]
    5788:	2b03      	cmp	r3, #3
    578a:	d162      	bne.n	5852 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    578c:	f004 f900 	bl	9990 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5790:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5794:	095b      	lsrs	r3, r3, #5
    5796:	b29b      	uxth	r3, r3
    5798:	461a      	mov	r2, r3
    579a:	4b36      	ldr	r3, [pc, #216]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57a0:	6959      	ldr	r1, [r3, #20]
    57a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57a6:	f003 031f 	and.w	r3, r3, #31
    57aa:	2201      	movs	r2, #1
    57ac:	fa02 f303 	lsl.w	r3, r2, r3
    57b0:	43da      	mvns	r2, r3
    57b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57b6:	095b      	lsrs	r3, r3, #5
    57b8:	b29b      	uxth	r3, r3
    57ba:	4618      	mov	r0, r3
    57bc:	4b2d      	ldr	r3, [pc, #180]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    57c2:	400a      	ands	r2, r1
    57c4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    57c6:	f004 f90f 	bl	99e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    57ca:	f004 f933 	bl	9a34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    57ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57d2:	095b      	lsrs	r3, r3, #5
    57d4:	b29b      	uxth	r3, r3
    57d6:	461a      	mov	r2, r3
    57d8:	4b26      	ldr	r3, [pc, #152]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57de:	6999      	ldr	r1, [r3, #24]
    57e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57e4:	f003 031f 	and.w	r3, r3, #31
    57e8:	2201      	movs	r2, #1
    57ea:	fa02 f303 	lsl.w	r3, r2, r3
    57ee:	43da      	mvns	r2, r3
    57f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57f4:	095b      	lsrs	r3, r3, #5
    57f6:	b29b      	uxth	r3, r3
    57f8:	4618      	mov	r0, r3
    57fa:	4b1e      	ldr	r3, [pc, #120]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    57fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5800:	400a      	ands	r2, r1
    5802:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5804:	9b01      	ldr	r3, [sp, #4]
    5806:	68d9      	ldr	r1, [r3, #12]
    5808:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    580c:	4613      	mov	r3, r2
    580e:	009b      	lsls	r3, r3, #2
    5810:	4413      	add	r3, r2
    5812:	009b      	lsls	r3, r3, #2
    5814:	440b      	add	r3, r1
    5816:	68db      	ldr	r3, [r3, #12]
    5818:	2b03      	cmp	r3, #3
    581a:	d118      	bne.n	584e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    581c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5820:	095b      	lsrs	r3, r3, #5
    5822:	b29b      	uxth	r3, r3
    5824:	461a      	mov	r2, r3
    5826:	4b13      	ldr	r3, [pc, #76]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    582c:	6999      	ldr	r1, [r3, #24]
    582e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5832:	f003 031f 	and.w	r3, r3, #31
    5836:	2201      	movs	r2, #1
    5838:	409a      	lsls	r2, r3
    583a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    583e:	095b      	lsrs	r3, r3, #5
    5840:	b29b      	uxth	r3, r3
    5842:	4618      	mov	r0, r3
    5844:	4b0b      	ldr	r3, [pc, #44]	; (5874 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5846:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    584a:	430a      	orrs	r2, r1
    584c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    584e:	f004 f91d 	bl	9a8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5852:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5856:	3301      	adds	r3, #1
    5858:	f8ad 300e 	strh.w	r3, [sp, #14]
    585c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5860:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5864:	429a      	cmp	r2, r3
    5866:	f4ff af26 	bcc.w	56b6 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    586a:	bf00      	nop
    586c:	bf00      	nop
    586e:	b005      	add	sp, #20
    5870:	f85d fb04 	ldr.w	pc, [sp], #4
    5874:	0000bd5c 	.word	0x0000bd5c

00005878 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    5878:	b082      	sub	sp, #8
    587a:	9001      	str	r0, [sp, #4]
    587c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    587e:	9b01      	ldr	r3, [sp, #4]
    5880:	681b      	ldr	r3, [r3, #0]
    5882:	f023 0207 	bic.w	r2, r3, #7
    5886:	9b00      	ldr	r3, [sp, #0]
    5888:	f003 0307 	and.w	r3, r3, #7
    588c:	431a      	orrs	r2, r3
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	601a      	str	r2, [r3, #0]
}
    5892:	bf00      	nop
    5894:	b002      	add	sp, #8
    5896:	4770      	bx	lr

00005898 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    5898:	b082      	sub	sp, #8
    589a:	9001      	str	r0, [sp, #4]
    589c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    589e:	9b01      	ldr	r3, [sp, #4]
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	f023 0218 	bic.w	r2, r3, #24
    58a6:	9b00      	ldr	r3, [sp, #0]
    58a8:	00db      	lsls	r3, r3, #3
    58aa:	f003 0318 	and.w	r3, r3, #24
    58ae:	431a      	orrs	r2, r3
    58b0:	9b01      	ldr	r3, [sp, #4]
    58b2:	601a      	str	r2, [r3, #0]
}
    58b4:	bf00      	nop
    58b6:	b002      	add	sp, #8
    58b8:	4770      	bx	lr

000058ba <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    58ba:	b082      	sub	sp, #8
    58bc:	9001      	str	r0, [sp, #4]
    58be:	460b      	mov	r3, r1
    58c0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    58c4:	9b01      	ldr	r3, [sp, #4]
    58c6:	681b      	ldr	r3, [r3, #0]
    58c8:	f023 0320 	bic.w	r3, r3, #32
    58cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    58d0:	2a00      	cmp	r2, #0
    58d2:	d001      	beq.n	58d8 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    58d4:	2220      	movs	r2, #32
    58d6:	e000      	b.n	58da <Ftm_Pwm_Ip_SetCpwms+0x20>
    58d8:	2200      	movs	r2, #0
    58da:	431a      	orrs	r2, r3
    58dc:	9b01      	ldr	r3, [sp, #4]
    58de:	601a      	str	r2, [r3, #0]
}
    58e0:	bf00      	nop
    58e2:	b002      	add	sp, #8
    58e4:	4770      	bx	lr

000058e6 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    58e6:	b082      	sub	sp, #8
    58e8:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    58ea:	9b01      	ldr	r3, [sp, #4]
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	f003 0320 	and.w	r3, r3, #32
    58f2:	2b00      	cmp	r3, #0
    58f4:	bf14      	ite	ne
    58f6:	2301      	movne	r3, #1
    58f8:	2300      	moveq	r3, #0
    58fa:	b2db      	uxtb	r3, r3
}
    58fc:	4618      	mov	r0, r3
    58fe:	b002      	add	sp, #8
    5900:	4770      	bx	lr

00005902 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    5902:	b082      	sub	sp, #8
    5904:	9001      	str	r0, [sp, #4]
    5906:	460b      	mov	r3, r1
    5908:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    590c:	9b01      	ldr	r3, [sp, #4]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5914:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5918:	2a00      	cmp	r2, #0
    591a:	d002      	beq.n	5922 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    591c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5920:	e000      	b.n	5924 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    5922:	2200      	movs	r2, #0
    5924:	431a      	orrs	r2, r3
    5926:	9b01      	ldr	r3, [sp, #4]
    5928:	601a      	str	r2, [r3, #0]
}
    592a:	bf00      	nop
    592c:	b002      	add	sp, #8
    592e:	4770      	bx	lr

00005930 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    5930:	b082      	sub	sp, #8
    5932:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    5934:	9b01      	ldr	r3, [sp, #4]
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    593c:	9b01      	ldr	r3, [sp, #4]
    593e:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    5940:	bf00      	nop
    5942:	b002      	add	sp, #8
    5944:	4770      	bx	lr

00005946 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    5946:	b082      	sub	sp, #8
    5948:	9001      	str	r0, [sp, #4]
    594a:	460b      	mov	r3, r1
    594c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    5950:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5954:	3310      	adds	r3, #16
    5956:	2201      	movs	r2, #1
    5958:	409a      	lsls	r2, r3
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	681b      	ldr	r3, [r3, #0]
    595e:	431a      	orrs	r2, r3
    5960:	9b01      	ldr	r3, [sp, #4]
    5962:	601a      	str	r2, [r3, #0]
}
    5964:	bf00      	nop
    5966:	b002      	add	sp, #8
    5968:	4770      	bx	lr

0000596a <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    596a:	b082      	sub	sp, #8
    596c:	9001      	str	r0, [sp, #4]
    596e:	460b      	mov	r3, r1
    5970:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    5974:	9b01      	ldr	r3, [sp, #4]
    5976:	685b      	ldr	r3, [r3, #4]
    5978:	0c1b      	lsrs	r3, r3, #16
    597a:	041b      	lsls	r3, r3, #16
    597c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5980:	431a      	orrs	r2, r3
    5982:	9b01      	ldr	r3, [sp, #4]
    5984:	605a      	str	r2, [r3, #4]
}
    5986:	bf00      	nop
    5988:	b002      	add	sp, #8
    598a:	4770      	bx	lr

0000598c <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    598c:	b082      	sub	sp, #8
    598e:	9001      	str	r0, [sp, #4]
    5990:	460b      	mov	r3, r1
    5992:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    5996:	9b01      	ldr	r3, [sp, #4]
    5998:	689b      	ldr	r3, [r3, #8]
    599a:	0c1b      	lsrs	r3, r3, #16
    599c:	041b      	lsls	r3, r3, #16
    599e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    59a2:	431a      	orrs	r2, r3
    59a4:	9b01      	ldr	r3, [sp, #4]
    59a6:	609a      	str	r2, [r3, #8]
}
    59a8:	bf00      	nop
    59aa:	b002      	add	sp, #8
    59ac:	4770      	bx	lr

000059ae <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    59ae:	b084      	sub	sp, #16
    59b0:	9001      	str	r0, [sp, #4]
    59b2:	460b      	mov	r3, r1
    59b4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    59b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    59bc:	9a01      	ldr	r2, [sp, #4]
    59be:	3301      	adds	r3, #1
    59c0:	00db      	lsls	r3, r3, #3
    59c2:	4413      	add	r3, r2
    59c4:	685b      	ldr	r3, [r3, #4]
    59c6:	089b      	lsrs	r3, r3, #2
    59c8:	b2db      	uxtb	r3, r3
    59ca:	f003 0301 	and.w	r3, r3, #1
    59ce:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    59d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    59d6:	9a01      	ldr	r2, [sp, #4]
    59d8:	3301      	adds	r3, #1
    59da:	00db      	lsls	r3, r3, #3
    59dc:	4413      	add	r3, r2
    59de:	685b      	ldr	r3, [r3, #4]
    59e0:	08db      	lsrs	r3, r3, #3
    59e2:	b2db      	uxtb	r3, r3
    59e4:	005b      	lsls	r3, r3, #1
    59e6:	b2db      	uxtb	r3, r3
    59e8:	f003 0302 	and.w	r3, r3, #2
    59ec:	b2da      	uxtb	r2, r3
    59ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    59f2:	4313      	orrs	r3, r2
    59f4:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    59f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    59fc:	4618      	mov	r0, r3
    59fe:	b004      	add	sp, #16
    5a00:	4770      	bx	lr

00005a02 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    5a02:	b086      	sub	sp, #24
    5a04:	9003      	str	r0, [sp, #12]
    5a06:	460b      	mov	r3, r1
    5a08:	9201      	str	r2, [sp, #4]
    5a0a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    5a0e:	9b01      	ldr	r3, [sp, #4]
    5a10:	009b      	lsls	r3, r3, #2
    5a12:	f003 0304 	and.w	r3, r3, #4
    5a16:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    5a18:	9b01      	ldr	r3, [sp, #4]
    5a1a:	009b      	lsls	r3, r3, #2
    5a1c:	f003 0308 	and.w	r3, r3, #8
    5a20:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    5a22:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a26:	9a03      	ldr	r2, [sp, #12]
    5a28:	3301      	adds	r3, #1
    5a2a:	00db      	lsls	r3, r3, #3
    5a2c:	4413      	add	r3, r2
    5a2e:	685b      	ldr	r3, [r3, #4]
    5a30:	f023 0104 	bic.w	r1, r3, #4
    5a34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a38:	9a05      	ldr	r2, [sp, #20]
    5a3a:	430a      	orrs	r2, r1
    5a3c:	9903      	ldr	r1, [sp, #12]
    5a3e:	3301      	adds	r3, #1
    5a40:	00db      	lsls	r3, r3, #3
    5a42:	440b      	add	r3, r1
    5a44:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    5a46:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a4a:	9a03      	ldr	r2, [sp, #12]
    5a4c:	3301      	adds	r3, #1
    5a4e:	00db      	lsls	r3, r3, #3
    5a50:	4413      	add	r3, r2
    5a52:	685b      	ldr	r3, [r3, #4]
    5a54:	f023 0108 	bic.w	r1, r3, #8
    5a58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a5c:	9a04      	ldr	r2, [sp, #16]
    5a5e:	430a      	orrs	r2, r1
    5a60:	9903      	ldr	r1, [sp, #12]
    5a62:	3301      	adds	r3, #1
    5a64:	00db      	lsls	r3, r3, #3
    5a66:	440b      	add	r3, r1
    5a68:	605a      	str	r2, [r3, #4]
}
    5a6a:	bf00      	nop
    5a6c:	b006      	add	sp, #24
    5a6e:	4770      	bx	lr

00005a70 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    5a70:	b086      	sub	sp, #24
    5a72:	9003      	str	r0, [sp, #12]
    5a74:	460b      	mov	r3, r1
    5a76:	9201      	str	r2, [sp, #4]
    5a78:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	009b      	lsls	r3, r3, #2
    5a80:	f003 0310 	and.w	r3, r3, #16
    5a84:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    5a86:	9b01      	ldr	r3, [sp, #4]
    5a88:	009b      	lsls	r3, r3, #2
    5a8a:	f003 0320 	and.w	r3, r3, #32
    5a8e:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    5a90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5a94:	9a03      	ldr	r2, [sp, #12]
    5a96:	3301      	adds	r3, #1
    5a98:	00db      	lsls	r3, r3, #3
    5a9a:	4413      	add	r3, r2
    5a9c:	685b      	ldr	r3, [r3, #4]
    5a9e:	f023 0110 	bic.w	r1, r3, #16
    5aa2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5aa6:	9a05      	ldr	r2, [sp, #20]
    5aa8:	430a      	orrs	r2, r1
    5aaa:	9903      	ldr	r1, [sp, #12]
    5aac:	3301      	adds	r3, #1
    5aae:	00db      	lsls	r3, r3, #3
    5ab0:	440b      	add	r3, r1
    5ab2:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    5ab4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5ab8:	9a03      	ldr	r2, [sp, #12]
    5aba:	3301      	adds	r3, #1
    5abc:	00db      	lsls	r3, r3, #3
    5abe:	4413      	add	r3, r2
    5ac0:	685b      	ldr	r3, [r3, #4]
    5ac2:	f023 0120 	bic.w	r1, r3, #32
    5ac6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5aca:	9a04      	ldr	r2, [sp, #16]
    5acc:	430a      	orrs	r2, r1
    5ace:	9903      	ldr	r1, [sp, #12]
    5ad0:	3301      	adds	r3, #1
    5ad2:	00db      	lsls	r3, r3, #3
    5ad4:	440b      	add	r3, r1
    5ad6:	605a      	str	r2, [r3, #4]
}
    5ad8:	bf00      	nop
    5ada:	b006      	add	sp, #24
    5adc:	4770      	bx	lr

00005ade <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    5ade:	b084      	sub	sp, #16
    5ae0:	9001      	str	r0, [sp, #4]
    5ae2:	460b      	mov	r3, r1
    5ae4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    5ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5aec:	9a01      	ldr	r2, [sp, #4]
    5aee:	3301      	adds	r3, #1
    5af0:	00db      	lsls	r3, r3, #3
    5af2:	4413      	add	r3, r2
    5af4:	685b      	ldr	r3, [r3, #4]
    5af6:	091b      	lsrs	r3, r3, #4
    5af8:	b2db      	uxtb	r3, r3
    5afa:	f003 0301 	and.w	r3, r3, #1
    5afe:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    5b02:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b06:	9a01      	ldr	r2, [sp, #4]
    5b08:	3301      	adds	r3, #1
    5b0a:	00db      	lsls	r3, r3, #3
    5b0c:	4413      	add	r3, r2
    5b0e:	685b      	ldr	r3, [r3, #4]
    5b10:	095b      	lsrs	r3, r3, #5
    5b12:	b2db      	uxtb	r3, r3
    5b14:	005b      	lsls	r3, r3, #1
    5b16:	b2db      	uxtb	r3, r3
    5b18:	f003 0302 	and.w	r3, r3, #2
    5b1c:	b2da      	uxtb	r2, r3
    5b1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b22:	4313      	orrs	r3, r2
    5b24:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    5b28:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5b2c:	4618      	mov	r0, r3
    5b2e:	b004      	add	sp, #16
    5b30:	4770      	bx	lr

00005b32 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    5b32:	b082      	sub	sp, #8
    5b34:	9001      	str	r0, [sp, #4]
    5b36:	460b      	mov	r3, r1
    5b38:	f88d 3003 	strb.w	r3, [sp, #3]
    5b3c:	4613      	mov	r3, r2
    5b3e:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    5b42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b46:	9a01      	ldr	r2, [sp, #4]
    5b48:	3301      	adds	r3, #1
    5b4a:	00db      	lsls	r3, r3, #3
    5b4c:	4413      	add	r3, r2
    5b4e:	685b      	ldr	r3, [r3, #4]
    5b50:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    5b54:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d001      	beq.n	5b60 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    5b5c:	2140      	movs	r1, #64	; 0x40
    5b5e:	e000      	b.n	5b62 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    5b60:	2100      	movs	r1, #0
    5b62:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b66:	430a      	orrs	r2, r1
    5b68:	9901      	ldr	r1, [sp, #4]
    5b6a:	3301      	adds	r3, #1
    5b6c:	00db      	lsls	r3, r3, #3
    5b6e:	440b      	add	r3, r1
    5b70:	605a      	str	r2, [r3, #4]
}
    5b72:	bf00      	nop
    5b74:	b002      	add	sp, #8
    5b76:	4770      	bx	lr

00005b78 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    5b78:	b082      	sub	sp, #8
    5b7a:	9001      	str	r0, [sp, #4]
    5b7c:	460b      	mov	r3, r1
    5b7e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    5b82:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b86:	9a01      	ldr	r2, [sp, #4]
    5b88:	3301      	adds	r3, #1
    5b8a:	00db      	lsls	r3, r3, #3
    5b8c:	4413      	add	r3, r2
    5b8e:	685a      	ldr	r2, [r3, #4]
    5b90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5b98:	9901      	ldr	r1, [sp, #4]
    5b9a:	3301      	adds	r3, #1
    5b9c:	00db      	lsls	r3, r3, #3
    5b9e:	440b      	add	r3, r1
    5ba0:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    5ba2:	bf00      	nop
    5ba4:	b002      	add	sp, #8
    5ba6:	4770      	bx	lr

00005ba8 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    5ba8:	b082      	sub	sp, #8
    5baa:	9001      	str	r0, [sp, #4]
    5bac:	460b      	mov	r3, r1
    5bae:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    5bb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5bb6:	9a01      	ldr	r2, [sp, #4]
    5bb8:	3301      	adds	r3, #1
    5bba:	00db      	lsls	r3, r3, #3
    5bbc:	4413      	add	r3, r2
    5bbe:	685b      	ldr	r3, [r3, #4]
    5bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	bf14      	ite	ne
    5bc8:	2301      	movne	r3, #1
    5bca:	2300      	moveq	r3, #0
    5bcc:	b2db      	uxtb	r3, r3
}
    5bce:	4618      	mov	r0, r3
    5bd0:	b002      	add	sp, #8
    5bd2:	4770      	bx	lr

00005bd4 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    5bd4:	b082      	sub	sp, #8
    5bd6:	9001      	str	r0, [sp, #4]
    5bd8:	460b      	mov	r3, r1
    5bda:	f88d 3003 	strb.w	r3, [sp, #3]
    5bde:	4613      	mov	r3, r2
    5be0:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    5be4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5be8:	f8bd 2000 	ldrh.w	r2, [sp]
    5bec:	9901      	ldr	r1, [sp, #4]
    5bee:	3301      	adds	r3, #1
    5bf0:	00db      	lsls	r3, r3, #3
    5bf2:	440b      	add	r3, r1
    5bf4:	609a      	str	r2, [r3, #8]
}
    5bf6:	bf00      	nop
    5bf8:	b002      	add	sp, #8
    5bfa:	4770      	bx	lr

00005bfc <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    5bfc:	b082      	sub	sp, #8
    5bfe:	9001      	str	r0, [sp, #4]
    5c00:	460b      	mov	r3, r1
    5c02:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    5c06:	9b01      	ldr	r3, [sp, #4]
    5c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c0a:	0c1b      	lsrs	r3, r3, #16
    5c0c:	041b      	lsls	r3, r3, #16
    5c0e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    5c12:	431a      	orrs	r2, r3
    5c14:	9b01      	ldr	r3, [sp, #4]
    5c16:	64da      	str	r2, [r3, #76]	; 0x4c
}
    5c18:	bf00      	nop
    5c1a:	b002      	add	sp, #8
    5c1c:	4770      	bx	lr

00005c1e <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    5c1e:	b082      	sub	sp, #8
    5c20:	9001      	str	r0, [sp, #4]
    5c22:	460b      	mov	r3, r1
    5c24:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    5c28:	9b01      	ldr	r3, [sp, #4]
    5c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c2c:	f023 0301 	bic.w	r3, r3, #1
    5c30:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c34:	2a00      	cmp	r2, #0
    5c36:	d001      	beq.n	5c3c <Ftm_Pwm_Ip_Enable+0x1e>
    5c38:	2201      	movs	r2, #1
    5c3a:	e000      	b.n	5c3e <Ftm_Pwm_Ip_Enable+0x20>
    5c3c:	2200      	movs	r2, #0
    5c3e:	431a      	orrs	r2, r3
    5c40:	9b01      	ldr	r3, [sp, #4]
    5c42:	655a      	str	r2, [r3, #84]	; 0x54
}
    5c44:	bf00      	nop
    5c46:	b002      	add	sp, #8
    5c48:	4770      	bx	lr

00005c4a <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    5c4a:	b082      	sub	sp, #8
    5c4c:	9001      	str	r0, [sp, #4]
    5c4e:	460b      	mov	r3, r1
    5c50:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5c54:	9b01      	ldr	r3, [sp, #4]
    5c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5c58:	f023 0308 	bic.w	r3, r3, #8
    5c5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c60:	2a00      	cmp	r2, #0
    5c62:	d001      	beq.n	5c68 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    5c64:	2208      	movs	r2, #8
    5c66:	e000      	b.n	5c6a <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    5c68:	2200      	movs	r2, #0
    5c6a:	431a      	orrs	r2, r3
    5c6c:	9b01      	ldr	r3, [sp, #4]
    5c6e:	655a      	str	r2, [r3, #84]	; 0x54
}
    5c70:	bf00      	nop
    5c72:	b002      	add	sp, #8
    5c74:	4770      	bx	lr

00005c76 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5c76:	b082      	sub	sp, #8
    5c78:	9001      	str	r0, [sp, #4]
    5c7a:	460b      	mov	r3, r1
    5c7c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    5c80:	9b01      	ldr	r3, [sp, #4]
    5c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5c84:	f023 0301 	bic.w	r3, r3, #1
    5c88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5c8c:	2a00      	cmp	r2, #0
    5c8e:	d001      	beq.n	5c94 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    5c90:	2201      	movs	r2, #1
    5c92:	e000      	b.n	5c96 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    5c94:	2200      	movs	r2, #0
    5c96:	431a      	orrs	r2, r3
    5c98:	9b01      	ldr	r3, [sp, #4]
    5c9a:	659a      	str	r2, [r3, #88]	; 0x58
}
    5c9c:	bf00      	nop
    5c9e:	b002      	add	sp, #8
    5ca0:	4770      	bx	lr

00005ca2 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    5ca2:	b082      	sub	sp, #8
    5ca4:	9001      	str	r0, [sp, #4]
    5ca6:	460b      	mov	r3, r1
    5ca8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    5cac:	9b01      	ldr	r3, [sp, #4]
    5cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5cb0:	f023 0302 	bic.w	r3, r3, #2
    5cb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5cb8:	2a00      	cmp	r2, #0
    5cba:	d001      	beq.n	5cc0 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    5cbc:	2202      	movs	r2, #2
    5cbe:	e000      	b.n	5cc2 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    5cc0:	2200      	movs	r2, #0
    5cc2:	431a      	orrs	r2, r3
    5cc4:	9b01      	ldr	r3, [sp, #4]
    5cc6:	659a      	str	r2, [r3, #88]	; 0x58
}
    5cc8:	bf00      	nop
    5cca:	b002      	add	sp, #8
    5ccc:	4770      	bx	lr

00005cce <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    5cce:	b082      	sub	sp, #8
    5cd0:	9001      	str	r0, [sp, #4]
    5cd2:	460b      	mov	r3, r1
    5cd4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    5cd8:	9b01      	ldr	r3, [sp, #4]
    5cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5cdc:	f023 0308 	bic.w	r3, r3, #8
    5ce0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ce4:	2a00      	cmp	r2, #0
    5ce6:	d001      	beq.n	5cec <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    5ce8:	2208      	movs	r2, #8
    5cea:	e000      	b.n	5cee <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    5cec:	2200      	movs	r2, #0
    5cee:	431a      	orrs	r2, r3
    5cf0:	9b01      	ldr	r3, [sp, #4]
    5cf2:	659a      	str	r2, [r3, #88]	; 0x58
}
    5cf4:	bf00      	nop
    5cf6:	b002      	add	sp, #8
    5cf8:	4770      	bx	lr

00005cfa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    5cfa:	b082      	sub	sp, #8
    5cfc:	9001      	str	r0, [sp, #4]
    5cfe:	460b      	mov	r3, r1
    5d00:	f88d 3003 	strb.w	r3, [sp, #3]
    5d04:	4613      	mov	r3, r2
    5d06:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5d0a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d00a      	beq.n	5d28 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    5d12:	9b01      	ldr	r3, [sp, #4]
    5d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d1a:	2110      	movs	r1, #16
    5d1c:	fa01 f303 	lsl.w	r3, r1, r3
    5d20:	431a      	orrs	r2, r3
    5d22:	9b01      	ldr	r3, [sp, #4]
    5d24:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    5d26:	e00a      	b.n	5d3e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    5d2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5d30:	2110      	movs	r1, #16
    5d32:	fa01 f303 	lsl.w	r3, r1, r3
    5d36:	43db      	mvns	r3, r3
    5d38:	401a      	ands	r2, r3
    5d3a:	9b01      	ldr	r3, [sp, #4]
    5d3c:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d3e:	bf00      	nop
    5d40:	b002      	add	sp, #8
    5d42:	4770      	bx	lr

00005d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    5d44:	b082      	sub	sp, #8
    5d46:	9001      	str	r0, [sp, #4]
    5d48:	460b      	mov	r3, r1
    5d4a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    5d4e:	9b01      	ldr	r3, [sp, #4]
    5d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    5d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5d56:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5d5a:	2a00      	cmp	r2, #0
    5d5c:	d001      	beq.n	5d62 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    5d5e:	2280      	movs	r2, #128	; 0x80
    5d60:	e000      	b.n	5d64 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    5d62:	2200      	movs	r2, #0
    5d64:	431a      	orrs	r2, r3
    5d66:	9b01      	ldr	r3, [sp, #4]
    5d68:	659a      	str	r2, [r3, #88]	; 0x58
}
    5d6a:	bf00      	nop
    5d6c:	b002      	add	sp, #8
    5d6e:	4770      	bx	lr

00005d70 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    5d70:	b084      	sub	sp, #16
    5d72:	9003      	str	r0, [sp, #12]
    5d74:	460b      	mov	r3, r1
    5d76:	9201      	str	r2, [sp, #4]
    5d78:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    5d7c:	9b01      	ldr	r3, [sp, #4]
    5d7e:	2b01      	cmp	r3, #1
    5d80:	d10a      	bne.n	5d98 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    5d82:	9b03      	ldr	r3, [sp, #12]
    5d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5d86:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5d8a:	2101      	movs	r1, #1
    5d8c:	fa01 f303 	lsl.w	r3, r1, r3
    5d90:	431a      	orrs	r2, r3
    5d92:	9b03      	ldr	r3, [sp, #12]
    5d94:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    5d96:	e00a      	b.n	5dae <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    5d98:	9b03      	ldr	r3, [sp, #12]
    5d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    5d9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5da0:	2101      	movs	r1, #1
    5da2:	fa01 f303 	lsl.w	r3, r1, r3
    5da6:	43db      	mvns	r3, r3
    5da8:	401a      	ands	r2, r3
    5daa:	9b03      	ldr	r3, [sp, #12]
    5dac:	65da      	str	r2, [r3, #92]	; 0x5c
}
    5dae:	bf00      	nop
    5db0:	b004      	add	sp, #16
    5db2:	4770      	bx	lr

00005db4 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    5db4:	b082      	sub	sp, #8
    5db6:	9001      	str	r0, [sp, #4]
    5db8:	460b      	mov	r3, r1
    5dba:	f88d 3003 	strb.w	r3, [sp, #3]
    5dbe:	4613      	mov	r3, r2
    5dc0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    5dc4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d00a      	beq.n	5de2 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    5dcc:	9b01      	ldr	r3, [sp, #4]
    5dce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5dd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5dd4:	2101      	movs	r1, #1
    5dd6:	fa01 f303 	lsl.w	r3, r1, r3
    5dda:	431a      	orrs	r2, r3
    5ddc:	9b01      	ldr	r3, [sp, #4]
    5dde:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    5de0:	e00a      	b.n	5df8 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    5de2:	9b01      	ldr	r3, [sp, #4]
    5de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5de6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5dea:	2101      	movs	r1, #1
    5dec:	fa01 f303 	lsl.w	r3, r1, r3
    5df0:	43db      	mvns	r3, r3
    5df2:	401a      	ands	r2, r3
    5df4:	9b01      	ldr	r3, [sp, #4]
    5df6:	661a      	str	r2, [r3, #96]	; 0x60
}
    5df8:	bf00      	nop
    5dfa:	b002      	add	sp, #8
    5dfc:	4770      	bx	lr

00005dfe <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    5dfe:	b082      	sub	sp, #8
    5e00:	9001      	str	r0, [sp, #4]
    5e02:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    5e04:	9b01      	ldr	r3, [sp, #4]
    5e06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e08:	9b00      	ldr	r3, [sp, #0]
    5e0a:	43db      	mvns	r3, r3
    5e0c:	401a      	ands	r2, r3
    5e0e:	9b00      	ldr	r3, [sp, #0]
    5e10:	431a      	orrs	r2, r3
    5e12:	9b01      	ldr	r3, [sp, #4]
    5e14:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e16:	bf00      	nop
    5e18:	b002      	add	sp, #8
    5e1a:	4770      	bx	lr

00005e1c <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    5e1c:	b082      	sub	sp, #8
    5e1e:	9001      	str	r0, [sp, #4]
    5e20:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    5e26:	9b00      	ldr	r3, [sp, #0]
    5e28:	43db      	mvns	r3, r3
    5e2a:	401a      	ands	r2, r3
    5e2c:	9b01      	ldr	r3, [sp, #4]
    5e2e:	661a      	str	r2, [r3, #96]	; 0x60
}
    5e30:	bf00      	nop
    5e32:	b002      	add	sp, #8
    5e34:	4770      	bx	lr

00005e36 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5e36:	b082      	sub	sp, #8
    5e38:	9001      	str	r0, [sp, #4]
    5e3a:	460b      	mov	r3, r1
    5e3c:	f88d 3003 	strb.w	r3, [sp, #3]
    5e40:	4613      	mov	r3, r2
    5e42:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5e46:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d00b      	beq.n	5e66 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5e4e:	9b01      	ldr	r3, [sp, #4]
    5e50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e52:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e56:	00db      	lsls	r3, r3, #3
    5e58:	2101      	movs	r1, #1
    5e5a:	fa01 f303 	lsl.w	r3, r1, r3
    5e5e:	431a      	orrs	r2, r3
    5e60:	9b01      	ldr	r3, [sp, #4]
    5e62:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5e64:	e00b      	b.n	5e7e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5e66:	9b01      	ldr	r3, [sp, #4]
    5e68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e6e:	00db      	lsls	r3, r3, #3
    5e70:	2101      	movs	r1, #1
    5e72:	fa01 f303 	lsl.w	r3, r1, r3
    5e76:	43db      	mvns	r3, r3
    5e78:	401a      	ands	r2, r3
    5e7a:	9b01      	ldr	r3, [sp, #4]
    5e7c:	665a      	str	r2, [r3, #100]	; 0x64
}
    5e7e:	bf00      	nop
    5e80:	b002      	add	sp, #8
    5e82:	4770      	bx	lr

00005e84 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    5e84:	b082      	sub	sp, #8
    5e86:	9001      	str	r0, [sp, #4]
    5e88:	460b      	mov	r3, r1
    5e8a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    5e8e:	9b01      	ldr	r3, [sp, #4]
    5e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5e92:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e96:	00db      	lsls	r3, r3, #3
    5e98:	fa22 f303 	lsr.w	r3, r2, r3
    5e9c:	f003 0301 	and.w	r3, r3, #1
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	bf14      	ite	ne
    5ea4:	2301      	movne	r3, #1
    5ea6:	2300      	moveq	r3, #0
    5ea8:	b2db      	uxtb	r3, r3
}
    5eaa:	4618      	mov	r0, r3
    5eac:	b002      	add	sp, #8
    5eae:	4770      	bx	lr

00005eb0 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    5eb0:	b082      	sub	sp, #8
    5eb2:	9001      	str	r0, [sp, #4]
    5eb4:	460b      	mov	r3, r1
    5eb6:	f88d 3003 	strb.w	r3, [sp, #3]
    5eba:	4613      	mov	r3, r2
    5ebc:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    5ec0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d00b      	beq.n	5ee0 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5ec8:	9b01      	ldr	r3, [sp, #4]
    5eca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ecc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ed0:	00db      	lsls	r3, r3, #3
    5ed2:	2102      	movs	r1, #2
    5ed4:	fa01 f303 	lsl.w	r3, r1, r3
    5ed8:	431a      	orrs	r2, r3
    5eda:	9b01      	ldr	r3, [sp, #4]
    5edc:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5ede:	e00b      	b.n	5ef8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5ee0:	9b01      	ldr	r3, [sp, #4]
    5ee2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5ee4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ee8:	00db      	lsls	r3, r3, #3
    5eea:	2102      	movs	r1, #2
    5eec:	fa01 f303 	lsl.w	r3, r1, r3
    5ef0:	43db      	mvns	r3, r3
    5ef2:	401a      	ands	r2, r3
    5ef4:	9b01      	ldr	r3, [sp, #4]
    5ef6:	665a      	str	r2, [r3, #100]	; 0x64
}
    5ef8:	bf00      	nop
    5efa:	b002      	add	sp, #8
    5efc:	4770      	bx	lr

00005efe <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5efe:	b082      	sub	sp, #8
    5f00:	9001      	str	r0, [sp, #4]
    5f02:	460b      	mov	r3, r1
    5f04:	f88d 3003 	strb.w	r3, [sp, #3]
    5f08:	4613      	mov	r3, r2
    5f0a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f0e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d00b      	beq.n	5f2e <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f16:	9b01      	ldr	r3, [sp, #4]
    5f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f1e:	00db      	lsls	r3, r3, #3
    5f20:	2110      	movs	r1, #16
    5f22:	fa01 f303 	lsl.w	r3, r1, r3
    5f26:	431a      	orrs	r2, r3
    5f28:	9b01      	ldr	r3, [sp, #4]
    5f2a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f2c:	e00b      	b.n	5f46 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f2e:	9b01      	ldr	r3, [sp, #4]
    5f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f36:	00db      	lsls	r3, r3, #3
    5f38:	2110      	movs	r1, #16
    5f3a:	fa01 f303 	lsl.w	r3, r1, r3
    5f3e:	43db      	mvns	r3, r3
    5f40:	401a      	ands	r2, r3
    5f42:	9b01      	ldr	r3, [sp, #4]
    5f44:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f46:	bf00      	nop
    5f48:	b002      	add	sp, #8
    5f4a:	4770      	bx	lr

00005f4c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    5f4c:	b082      	sub	sp, #8
    5f4e:	9001      	str	r0, [sp, #4]
    5f50:	460b      	mov	r3, r1
    5f52:	f88d 3003 	strb.w	r3, [sp, #3]
    5f56:	4613      	mov	r3, r2
    5f58:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5f5c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5f60:	2b00      	cmp	r3, #0
    5f62:	d00b      	beq.n	5f7c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f6c:	00db      	lsls	r3, r3, #3
    5f6e:	2120      	movs	r1, #32
    5f70:	fa01 f303 	lsl.w	r3, r1, r3
    5f74:	431a      	orrs	r2, r3
    5f76:	9b01      	ldr	r3, [sp, #4]
    5f78:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5f7a:	e00b      	b.n	5f94 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5f7c:	9b01      	ldr	r3, [sp, #4]
    5f7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5f80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f84:	00db      	lsls	r3, r3, #3
    5f86:	2120      	movs	r1, #32
    5f88:	fa01 f303 	lsl.w	r3, r1, r3
    5f8c:	43db      	mvns	r3, r3
    5f8e:	401a      	ands	r2, r3
    5f90:	9b01      	ldr	r3, [sp, #4]
    5f92:	665a      	str	r2, [r3, #100]	; 0x64
}
    5f94:	bf00      	nop
    5f96:	b002      	add	sp, #8
    5f98:	4770      	bx	lr

00005f9a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    5f9a:	b082      	sub	sp, #8
    5f9c:	9001      	str	r0, [sp, #4]
    5f9e:	460b      	mov	r3, r1
    5fa0:	f88d 3003 	strb.w	r3, [sp, #3]
    5fa4:	4613      	mov	r3, r2
    5fa6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    5faa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d00b      	beq.n	5fca <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fba:	00db      	lsls	r3, r3, #3
    5fbc:	2180      	movs	r1, #128	; 0x80
    5fbe:	fa01 f303 	lsl.w	r3, r1, r3
    5fc2:	431a      	orrs	r2, r3
    5fc4:	9b01      	ldr	r3, [sp, #4]
    5fc6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    5fc8:	e00b      	b.n	5fe2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    5fca:	9b01      	ldr	r3, [sp, #4]
    5fcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    5fce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fd2:	00db      	lsls	r3, r3, #3
    5fd4:	2180      	movs	r1, #128	; 0x80
    5fd6:	fa01 f303 	lsl.w	r3, r1, r3
    5fda:	43db      	mvns	r3, r3
    5fdc:	401a      	ands	r2, r3
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	665a      	str	r2, [r3, #100]	; 0x64
}
    5fe2:	bf00      	nop
    5fe4:	b002      	add	sp, #8
    5fe6:	4770      	bx	lr

00005fe8 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    5fe8:	b082      	sub	sp, #8
    5fea:	9001      	str	r0, [sp, #4]
    5fec:	460b      	mov	r3, r1
    5fee:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5ff6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    5ffa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6002:	431a      	orrs	r2, r3
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	669a      	str	r2, [r3, #104]	; 0x68
}
    6008:	bf00      	nop
    600a:	b002      	add	sp, #8
    600c:	4770      	bx	lr

0000600e <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    600e:	b082      	sub	sp, #8
    6010:	9001      	str	r0, [sp, #4]
    6012:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    6014:	9b01      	ldr	r3, [sp, #4]
    6016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6018:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    601c:	9b00      	ldr	r3, [sp, #0]
    601e:	b2db      	uxtb	r3, r3
    6020:	019b      	lsls	r3, r3, #6
    6022:	b2db      	uxtb	r3, r3
    6024:	431a      	orrs	r2, r3
    6026:	9b01      	ldr	r3, [sp, #4]
    6028:	669a      	str	r2, [r3, #104]	; 0x68
}
    602a:	bf00      	nop
    602c:	b002      	add	sp, #8
    602e:	4770      	bx	lr

00006030 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    6030:	b082      	sub	sp, #8
    6032:	9001      	str	r0, [sp, #4]
    6034:	460b      	mov	r3, r1
    6036:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    603a:	9b01      	ldr	r3, [sp, #4]
    603c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    603e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    6042:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6046:	041b      	lsls	r3, r3, #16
    6048:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    604c:	431a      	orrs	r2, r3
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	669a      	str	r2, [r3, #104]	; 0x68
}
    6052:	bf00      	nop
    6054:	b002      	add	sp, #8
    6056:	4770      	bx	lr

00006058 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    6058:	b082      	sub	sp, #8
    605a:	9001      	str	r0, [sp, #4]
    605c:	460b      	mov	r3, r1
    605e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    6062:	9b01      	ldr	r3, [sp, #4]
    6064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    6066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    606a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    606e:	2a00      	cmp	r2, #0
    6070:	d001      	beq.n	6076 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    6072:	2240      	movs	r2, #64	; 0x40
    6074:	e000      	b.n	6078 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    6076:	2200      	movs	r2, #0
    6078:	431a      	orrs	r2, r3
    607a:	9b01      	ldr	r3, [sp, #4]
    607c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    607e:	bf00      	nop
    6080:	b002      	add	sp, #8
    6082:	4770      	bx	lr

00006084 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    6084:	b082      	sub	sp, #8
    6086:	9001      	str	r0, [sp, #4]
    6088:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    608e:	9b00      	ldr	r3, [sp, #0]
    6090:	43db      	mvns	r3, r3
    6092:	401a      	ands	r2, r3
    6094:	9b01      	ldr	r3, [sp, #4]
    6096:	66da      	str	r2, [r3, #108]	; 0x6c
}
    6098:	bf00      	nop
    609a:	b002      	add	sp, #8
    609c:	4770      	bx	lr

0000609e <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    609e:	b082      	sub	sp, #8
    60a0:	9001      	str	r0, [sp, #4]
    60a2:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    60a8:	9b00      	ldr	r3, [sp, #0]
    60aa:	43db      	mvns	r3, r3
    60ac:	401a      	ands	r2, r3
    60ae:	9b00      	ldr	r3, [sp, #0]
    60b0:	431a      	orrs	r2, r3
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	66da      	str	r2, [r3, #108]	; 0x6c
}
    60b6:	bf00      	nop
    60b8:	b002      	add	sp, #8
    60ba:	4770      	bx	lr

000060bc <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    60bc:	b084      	sub	sp, #16
    60be:	9003      	str	r0, [sp, #12]
    60c0:	460b      	mov	r3, r1
    60c2:	9201      	str	r2, [sp, #4]
    60c4:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    60c8:	9b01      	ldr	r3, [sp, #4]
    60ca:	2b00      	cmp	r3, #0
    60cc:	d10b      	bne.n	60e6 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    60ce:	9b03      	ldr	r3, [sp, #12]
    60d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    60d6:	2101      	movs	r1, #1
    60d8:	fa01 f303 	lsl.w	r3, r1, r3
    60dc:	43db      	mvns	r3, r3
    60de:	401a      	ands	r2, r3
    60e0:	9b03      	ldr	r3, [sp, #12]
    60e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    60e4:	e009      	b.n	60fa <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    60e6:	9b03      	ldr	r3, [sp, #12]
    60e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    60ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    60ee:	2101      	movs	r1, #1
    60f0:	fa01 f303 	lsl.w	r3, r1, r3
    60f4:	431a      	orrs	r2, r3
    60f6:	9b03      	ldr	r3, [sp, #12]
    60f8:	671a      	str	r2, [r3, #112]	; 0x70
}
    60fa:	bf00      	nop
    60fc:	b004      	add	sp, #16
    60fe:	4770      	bx	lr

00006100 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    6100:	b082      	sub	sp, #8
    6102:	9001      	str	r0, [sp, #4]
    6104:	460b      	mov	r3, r1
    6106:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    610a:	9b01      	ldr	r3, [sp, #4]
    610c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    610e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6112:	fa22 f303 	lsr.w	r3, r2, r3
    6116:	f003 0301 	and.w	r3, r3, #1
    611a:	2b01      	cmp	r3, #1
    611c:	bf0c      	ite	eq
    611e:	2301      	moveq	r3, #1
    6120:	2300      	movne	r3, #0
    6122:	b2db      	uxtb	r3, r3
}
    6124:	4618      	mov	r0, r3
    6126:	b002      	add	sp, #8
    6128:	4770      	bx	lr

0000612a <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    612a:	b082      	sub	sp, #8
    612c:	9001      	str	r0, [sp, #4]
    612e:	460b      	mov	r3, r1
    6130:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    613a:	f023 021f 	bic.w	r2, r3, #31
    613e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6142:	f003 031f 	and.w	r3, r3, #31
    6146:	431a      	orrs	r2, r3
    6148:	9b01      	ldr	r3, [sp, #4]
    614a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    614e:	bf00      	nop
    6150:	b002      	add	sp, #8
    6152:	4770      	bx	lr

00006154 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    6154:	b082      	sub	sp, #8
    6156:	9001      	str	r0, [sp, #4]
    6158:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    615a:	9b01      	ldr	r3, [sp, #4]
    615c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6160:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    6164:	9b00      	ldr	r3, [sp, #0]
    6166:	019b      	lsls	r3, r3, #6
    6168:	b2db      	uxtb	r3, r3
    616a:	431a      	orrs	r2, r3
    616c:	9b01      	ldr	r3, [sp, #4]
    616e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    6172:	bf00      	nop
    6174:	b002      	add	sp, #8
    6176:	4770      	bx	lr

00006178 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    6178:	b082      	sub	sp, #8
    617a:	9001      	str	r0, [sp, #4]
    617c:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    617e:	9b01      	ldr	r3, [sp, #4]
    6180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    6184:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    6188:	9b00      	ldr	r3, [sp, #0]
    618a:	02db      	lsls	r3, r3, #11
    618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6190:	431a      	orrs	r2, r3
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    6198:	bf00      	nop
    619a:	b002      	add	sp, #8
    619c:	4770      	bx	lr

0000619e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    619e:	b082      	sub	sp, #8
    61a0:	9001      	str	r0, [sp, #4]
    61a2:	460b      	mov	r3, r1
    61a4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    61ae:	f023 0301 	bic.w	r3, r3, #1
    61b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    61b6:	2a00      	cmp	r2, #0
    61b8:	d001      	beq.n	61be <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    61ba:	2201      	movs	r2, #1
    61bc:	e000      	b.n	61c0 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    61be:	2200      	movs	r2, #0
    61c0:	431a      	orrs	r2, r3
    61c2:	9b01      	ldr	r3, [sp, #4]
    61c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    61c8:	bf00      	nop
    61ca:	b002      	add	sp, #8
    61cc:	4770      	bx	lr

000061ce <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    61ce:	b082      	sub	sp, #8
    61d0:	9001      	str	r0, [sp, #4]
    61d2:	460b      	mov	r3, r1
    61d4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    61d8:	9b01      	ldr	r3, [sp, #4]
    61da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    61de:	f023 0304 	bic.w	r3, r3, #4
    61e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    61e6:	2a00      	cmp	r2, #0
    61e8:	d001      	beq.n	61ee <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    61ea:	2204      	movs	r2, #4
    61ec:	e000      	b.n	61f0 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    61ee:	2200      	movs	r2, #0
    61f0:	431a      	orrs	r2, r3
    61f2:	9b01      	ldr	r3, [sp, #4]
    61f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    61f8:	bf00      	nop
    61fa:	b002      	add	sp, #8
    61fc:	4770      	bx	lr

000061fe <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    61fe:	b082      	sub	sp, #8
    6200:	9001      	str	r0, [sp, #4]
    6202:	460b      	mov	r3, r1
    6204:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    6208:	9b01      	ldr	r3, [sp, #4]
    620a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    620e:	f023 0310 	bic.w	r3, r3, #16
    6212:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6216:	2a00      	cmp	r2, #0
    6218:	d001      	beq.n	621e <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    621a:	2210      	movs	r2, #16
    621c:	e000      	b.n	6220 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    621e:	2200      	movs	r2, #0
    6220:	431a      	orrs	r2, r3
    6222:	9b01      	ldr	r3, [sp, #4]
    6224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6228:	bf00      	nop
    622a:	b002      	add	sp, #8
    622c:	4770      	bx	lr

0000622e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    622e:	b082      	sub	sp, #8
    6230:	9001      	str	r0, [sp, #4]
    6232:	460b      	mov	r3, r1
    6234:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    6238:	9b01      	ldr	r3, [sp, #4]
    623a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    623e:	f023 0320 	bic.w	r3, r3, #32
    6242:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6246:	2a00      	cmp	r2, #0
    6248:	d001      	beq.n	624e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    624a:	2220      	movs	r2, #32
    624c:	e000      	b.n	6250 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    624e:	2200      	movs	r2, #0
    6250:	431a      	orrs	r2, r3
    6252:	9b01      	ldr	r3, [sp, #4]
    6254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6258:	bf00      	nop
    625a:	b002      	add	sp, #8
    625c:	4770      	bx	lr

0000625e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    625e:	b082      	sub	sp, #8
    6260:	9001      	str	r0, [sp, #4]
    6262:	460b      	mov	r3, r1
    6264:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    626e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6272:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6276:	2a00      	cmp	r2, #0
    6278:	d001      	beq.n	627e <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    627a:	2280      	movs	r2, #128	; 0x80
    627c:	e000      	b.n	6280 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    627e:	2200      	movs	r2, #0
    6280:	431a      	orrs	r2, r3
    6282:	9b01      	ldr	r3, [sp, #4]
    6284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6288:	bf00      	nop
    628a:	b002      	add	sp, #8
    628c:	4770      	bx	lr

0000628e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    628e:	b082      	sub	sp, #8
    6290:	9001      	str	r0, [sp, #4]
    6292:	460b      	mov	r3, r1
    6294:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    6298:	9b01      	ldr	r3, [sp, #4]
    629a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    629e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    62a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62a6:	2a00      	cmp	r2, #0
    62a8:	d002      	beq.n	62b0 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    62aa:	f44f 7280 	mov.w	r2, #256	; 0x100
    62ae:	e000      	b.n	62b2 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    62b0:	2200      	movs	r2, #0
    62b2:	431a      	orrs	r2, r3
    62b4:	9b01      	ldr	r3, [sp, #4]
    62b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62ba:	bf00      	nop
    62bc:	b002      	add	sp, #8
    62be:	4770      	bx	lr

000062c0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    62c0:	b082      	sub	sp, #8
    62c2:	9001      	str	r0, [sp, #4]
    62c4:	460b      	mov	r3, r1
    62c6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    62ca:	9b01      	ldr	r3, [sp, #4]
    62cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    62d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    62d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    62d8:	2a00      	cmp	r2, #0
    62da:	d002      	beq.n	62e2 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    62dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    62e0:	e000      	b.n	62e4 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    62e2:	2200      	movs	r2, #0
    62e4:	431a      	orrs	r2, r3
    62e6:	9b01      	ldr	r3, [sp, #4]
    62e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    62ec:	bf00      	nop
    62ee:	b002      	add	sp, #8
    62f0:	4770      	bx	lr

000062f2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    62f2:	b082      	sub	sp, #8
    62f4:	9001      	str	r0, [sp, #4]
    62f6:	460b      	mov	r3, r1
    62f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    62fc:	9b01      	ldr	r3, [sp, #4]
    62fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6306:	f89d 2003 	ldrb.w	r2, [sp, #3]
    630a:	2a00      	cmp	r2, #0
    630c:	d002      	beq.n	6314 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    630e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6312:	e000      	b.n	6316 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    6314:	2200      	movs	r2, #0
    6316:	431a      	orrs	r2, r3
    6318:	9b01      	ldr	r3, [sp, #4]
    631a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    631e:	bf00      	nop
    6320:	b002      	add	sp, #8
    6322:	4770      	bx	lr

00006324 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6324:	b082      	sub	sp, #8
    6326:	9001      	str	r0, [sp, #4]
    6328:	460b      	mov	r3, r1
    632a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    632e:	9b01      	ldr	r3, [sp, #4]
    6330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    6338:	f89d 2003 	ldrb.w	r2, [sp, #3]
    633c:	2a00      	cmp	r2, #0
    633e:	d002      	beq.n	6346 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    6340:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6344:	e000      	b.n	6348 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    6346:	2200      	movs	r2, #0
    6348:	431a      	orrs	r2, r3
    634a:	9b01      	ldr	r3, [sp, #4]
    634c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6350:	bf00      	nop
    6352:	b002      	add	sp, #8
    6354:	4770      	bx	lr

00006356 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6356:	b082      	sub	sp, #8
    6358:	9001      	str	r0, [sp, #4]
    635a:	460b      	mov	r3, r1
    635c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    6360:	9b01      	ldr	r3, [sp, #4]
    6362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    636a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    636e:	2a00      	cmp	r2, #0
    6370:	d002      	beq.n	6378 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    6372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    6376:	e000      	b.n	637a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    6378:	2200      	movs	r2, #0
    637a:	431a      	orrs	r2, r3
    637c:	9b01      	ldr	r3, [sp, #4]
    637e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6382:	bf00      	nop
    6384:	b002      	add	sp, #8
    6386:	4770      	bx	lr

00006388 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    6388:	b082      	sub	sp, #8
    638a:	9001      	str	r0, [sp, #4]
    638c:	460b      	mov	r3, r1
    638e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    6392:	9b01      	ldr	r3, [sp, #4]
    6394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    6398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    639c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63a0:	2a00      	cmp	r2, #0
    63a2:	d002      	beq.n	63aa <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    63a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    63a8:	e000      	b.n	63ac <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    63aa:	2200      	movs	r2, #0
    63ac:	431a      	orrs	r2, r3
    63ae:	9b01      	ldr	r3, [sp, #4]
    63b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63b4:	bf00      	nop
    63b6:	b002      	add	sp, #8
    63b8:	4770      	bx	lr

000063ba <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    63ba:	b082      	sub	sp, #8
    63bc:	9001      	str	r0, [sp, #4]
    63be:	460b      	mov	r3, r1
    63c0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    63c4:	9b01      	ldr	r3, [sp, #4]
    63c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    63ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    63d2:	2a00      	cmp	r2, #0
    63d4:	d002      	beq.n	63dc <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    63d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    63da:	e000      	b.n	63de <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    63dc:	2200      	movs	r2, #0
    63de:	431a      	orrs	r2, r3
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    63e6:	bf00      	nop
    63e8:	b002      	add	sp, #8
    63ea:	4770      	bx	lr

000063ec <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    63ec:	b082      	sub	sp, #8
    63ee:	9001      	str	r0, [sp, #4]
    63f0:	460b      	mov	r3, r1
    63f2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    63f6:	9b01      	ldr	r3, [sp, #4]
    63f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    63fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    6400:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6404:	2a00      	cmp	r2, #0
    6406:	d002      	beq.n	640e <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    6408:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    640c:	e000      	b.n	6410 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    640e:	2200      	movs	r2, #0
    6410:	431a      	orrs	r2, r3
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    6418:	bf00      	nop
    641a:	b002      	add	sp, #8
    641c:	4770      	bx	lr

0000641e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    641e:	b082      	sub	sp, #8
    6420:	9001      	str	r0, [sp, #4]
    6422:	460b      	mov	r3, r1
    6424:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    642e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    6432:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6436:	2a00      	cmp	r2, #0
    6438:	d002      	beq.n	6440 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    643a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    643e:	e000      	b.n	6442 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    6440:	2200      	movs	r2, #0
    6442:	431a      	orrs	r2, r3
    6444:	9b01      	ldr	r3, [sp, #4]
    6446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    644a:	bf00      	nop
    644c:	b002      	add	sp, #8
    644e:	4770      	bx	lr

00006450 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    6450:	b084      	sub	sp, #16
    6452:	9001      	str	r0, [sp, #4]
    6454:	460b      	mov	r3, r1
    6456:	f88d 3003 	strb.w	r3, [sp, #3]
    645a:	4613      	mov	r3, r2
    645c:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    6460:	9b01      	ldr	r3, [sp, #4]
    6462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6464:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6468:	fa22 f303 	lsr.w	r3, r2, r3
    646c:	b2db      	uxtb	r3, r3
    646e:	f003 0301 	and.w	r3, r3, #1
    6472:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    6476:	f89d 300f 	ldrb.w	r3, [sp, #15]
    647a:	2b00      	cmp	r3, #0
    647c:	bf14      	ite	ne
    647e:	2301      	movne	r3, #1
    6480:	2300      	moveq	r3, #0
    6482:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    6486:	f89d 2002 	ldrb.w	r2, [sp, #2]
    648a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    648e:	429a      	cmp	r2, r3
    6490:	d00d      	beq.n	64ae <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    6492:	9b01      	ldr	r3, [sp, #4]
    6494:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    6498:	f89d 3003 	ldrb.w	r3, [sp, #3]
    649c:	3308      	adds	r3, #8
    649e:	2101      	movs	r1, #1
    64a0:	fa01 f303 	lsl.w	r3, r1, r3
    64a4:	431a      	orrs	r2, r3
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    64ac:	e00d      	b.n	64ca <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    64ae:	9b01      	ldr	r3, [sp, #4]
    64b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64b8:	3308      	adds	r3, #8
    64ba:	2101      	movs	r1, #1
    64bc:	fa01 f303 	lsl.w	r3, r1, r3
    64c0:	43db      	mvns	r3, r3
    64c2:	401a      	ands	r2, r3
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    64ca:	bf00      	nop
    64cc:	b004      	add	sp, #16
    64ce:	4770      	bx	lr

000064d0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    64d0:	b082      	sub	sp, #8
    64d2:	9001      	str	r0, [sp, #4]
    64d4:	460b      	mov	r3, r1
    64d6:	f88d 3003 	strb.w	r3, [sp, #3]
    64da:	4613      	mov	r3, r2
    64dc:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    64e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    64e4:	2b00      	cmp	r3, #0
    64e6:	d00c      	beq.n	6502 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    64e8:	9b01      	ldr	r3, [sp, #4]
    64ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    64ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    64f2:	2101      	movs	r1, #1
    64f4:	fa01 f303 	lsl.w	r3, r1, r3
    64f8:	431a      	orrs	r2, r3
    64fa:	9b01      	ldr	r3, [sp, #4]
    64fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    6500:	e00c      	b.n	651c <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    6502:	9b01      	ldr	r3, [sp, #4]
    6504:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    6508:	f89d 3003 	ldrb.w	r3, [sp, #3]
    650c:	2101      	movs	r1, #1
    650e:	fa01 f303 	lsl.w	r3, r1, r3
    6512:	43db      	mvns	r3, r3
    6514:	401a      	ands	r2, r3
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    651c:	bf00      	nop
    651e:	b002      	add	sp, #8
    6520:	4770      	bx	lr

00006522 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    6522:	b082      	sub	sp, #8
    6524:	9001      	str	r0, [sp, #4]
    6526:	460b      	mov	r3, r1
    6528:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    652c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6530:	9b01      	ldr	r3, [sp, #4]
    6532:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6536:	bf00      	nop
    6538:	b002      	add	sp, #8
    653a:	4770      	bx	lr

0000653c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    653c:	b082      	sub	sp, #8
    653e:	9001      	str	r0, [sp, #4]
    6540:	460b      	mov	r3, r1
    6542:	f88d 3003 	strb.w	r3, [sp, #3]
    6546:	4613      	mov	r3, r2
    6548:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    654c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6550:	2b00      	cmp	r3, #0
    6552:	d00c      	beq.n	656e <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    6554:	9b01      	ldr	r3, [sp, #4]
    6556:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    655a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    655e:	2101      	movs	r1, #1
    6560:	fa01 f303 	lsl.w	r3, r1, r3
    6564:	431a      	orrs	r2, r3
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    656c:	e00c      	b.n	6588 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    656e:	9b01      	ldr	r3, [sp, #4]
    6570:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6574:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6578:	2101      	movs	r1, #1
    657a:	fa01 f303 	lsl.w	r3, r1, r3
    657e:	43db      	mvns	r3, r3
    6580:	401a      	ands	r2, r3
    6582:	9b01      	ldr	r3, [sp, #4]
    6584:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    6588:	bf00      	nop
    658a:	b002      	add	sp, #8
    658c:	4770      	bx	lr

0000658e <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    658e:	b082      	sub	sp, #8
    6590:	9001      	str	r0, [sp, #4]
    6592:	460b      	mov	r3, r1
    6594:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    6598:	f89d 3003 	ldrb.w	r3, [sp, #3]
    659c:	2b00      	cmp	r3, #0
    659e:	d008      	beq.n	65b2 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    65a0:	9b01      	ldr	r3, [sp, #4]
    65a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    65b0:	e007      	b.n	65c2 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    65b2:	9b01      	ldr	r3, [sp, #4]
    65b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    65bc:	9b01      	ldr	r3, [sp, #4]
    65be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    65c2:	bf00      	nop
    65c4:	b002      	add	sp, #8
    65c6:	4770      	bx	lr

000065c8 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    65c8:	b082      	sub	sp, #8
    65ca:	9001      	str	r0, [sp, #4]
    65cc:	460b      	mov	r3, r1
    65ce:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    65d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    65dc:	bf00      	nop
    65de:	b002      	add	sp, #8
    65e0:	4770      	bx	lr

000065e2 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    65e2:	b082      	sub	sp, #8
    65e4:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    65e6:	9b01      	ldr	r3, [sp, #4]
    65e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    65ec:	b29b      	uxth	r3, r3
}
    65ee:	4618      	mov	r0, r3
    65f0:	b002      	add	sp, #8
    65f2:	4770      	bx	lr

000065f4 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    65f4:	b082      	sub	sp, #8
    65f6:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    65fc:	b29b      	uxth	r3, r3
}
    65fe:	4618      	mov	r0, r3
    6600:	b002      	add	sp, #8
    6602:	4770      	bx	lr

00006604 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    6604:	b500      	push	{lr}
    6606:	b085      	sub	sp, #20
    6608:	9001      	str	r0, [sp, #4]
    660a:	460b      	mov	r3, r1
    660c:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    6610:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6614:	085b      	lsrs	r3, r3, #1
    6616:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    661a:	9b01      	ldr	r3, [sp, #4]
    661c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    661e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6622:	00db      	lsls	r3, r3, #3
    6624:	2101      	movs	r1, #1
    6626:	fa01 f303 	lsl.w	r3, r1, r3
    662a:	401a      	ands	r2, r3
    662c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6630:	00db      	lsls	r3, r3, #3
    6632:	fa22 f303 	lsr.w	r3, r2, r3
    6636:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    663a:	9b01      	ldr	r3, [sp, #4]
    663c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    663e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6642:	00db      	lsls	r3, r3, #3
    6644:	2180      	movs	r1, #128	; 0x80
    6646:	fa01 f303 	lsl.w	r3, r1, r3
    664a:	401a      	ands	r2, r3
    664c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6650:	00db      	lsls	r3, r3, #3
    6652:	fa22 f303 	lsr.w	r3, r2, r3
    6656:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    665a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    665e:	2b80      	cmp	r3, #128	; 0x80
    6660:	d101      	bne.n	6666 <Ftm_Pwm_Ip_GetChannelMode+0x62>
    6662:	2301      	movs	r3, #1
    6664:	e000      	b.n	6668 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    6666:	2300      	movs	r3, #0
    6668:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    666c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6670:	4619      	mov	r1, r3
    6672:	9801      	ldr	r0, [sp, #4]
    6674:	f7ff f99b 	bl	59ae <Ftm_Pwm_Ip_GetChnEdgeLevel>
    6678:	4603      	mov	r3, r0
    667a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    667e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6682:	4619      	mov	r1, r3
    6684:	9801      	ldr	r0, [sp, #4]
    6686:	f7ff fa2a 	bl	5ade <Ftm_Pwm_Ip_GetChnMode>
    668a:	4603      	mov	r3, r0
    668c:	009b      	lsls	r3, r3, #2
    668e:	b2da      	uxtb	r2, r3
    6690:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6694:	4313      	orrs	r3, r2
    6696:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    669a:	9801      	ldr	r0, [sp, #4]
    669c:	f7ff f923 	bl	58e6 <Ftm_Pwm_Ip_GetCpwms>
    66a0:	4603      	mov	r3, r0
    66a2:	b2db      	uxtb	r3, r3
    66a4:	011b      	lsls	r3, r3, #4
    66a6:	b2da      	uxtb	r2, r3
    66a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66ac:	4313      	orrs	r3, r2
    66ae:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    66b2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    66b6:	015b      	lsls	r3, r3, #5
    66b8:	b2da      	uxtb	r2, r3
    66ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66be:	4313      	orrs	r3, r2
    66c0:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    66c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    66c8:	019b      	lsls	r3, r3, #6
    66ca:	b2da      	uxtb	r2, r3
    66cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66d0:	4313      	orrs	r3, r2
    66d2:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    66d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    66da:	2b62      	cmp	r3, #98	; 0x62
    66dc:	d055      	beq.n	678a <Ftm_Pwm_Ip_GetChannelMode+0x186>
    66de:	2b62      	cmp	r3, #98	; 0x62
    66e0:	dc59      	bgt.n	6796 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66e2:	2b22      	cmp	r3, #34	; 0x22
    66e4:	dc3c      	bgt.n	6760 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    66e6:	2b09      	cmp	r3, #9
    66e8:	db55      	blt.n	6796 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66ea:	3b09      	subs	r3, #9
    66ec:	2b19      	cmp	r3, #25
    66ee:	d852      	bhi.n	6796 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    66f0:	a201      	add	r2, pc, #4	; (adr r2, 66f8 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    66f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    66f6:	bf00      	nop
    66f8:	0000676d 	.word	0x0000676d
    66fc:	00006767 	.word	0x00006767
    6700:	00006797 	.word	0x00006797
    6704:	00006797 	.word	0x00006797
    6708:	00006797 	.word	0x00006797
    670c:	00006797 	.word	0x00006797
    6710:	00006797 	.word	0x00006797
    6714:	00006797 	.word	0x00006797
    6718:	00006779 	.word	0x00006779
    671c:	00006773 	.word	0x00006773
    6720:	00006797 	.word	0x00006797
    6724:	00006797 	.word	0x00006797
    6728:	00006797 	.word	0x00006797
    672c:	00006797 	.word	0x00006797
    6730:	00006797 	.word	0x00006797
    6734:	00006797 	.word	0x00006797
    6738:	00006797 	.word	0x00006797
    673c:	00006797 	.word	0x00006797
    6740:	00006797 	.word	0x00006797
    6744:	00006797 	.word	0x00006797
    6748:	00006797 	.word	0x00006797
    674c:	00006797 	.word	0x00006797
    6750:	00006797 	.word	0x00006797
    6754:	00006797 	.word	0x00006797
    6758:	00006785 	.word	0x00006785
    675c:	0000677f 	.word	0x0000677f
    6760:	2b61      	cmp	r3, #97	; 0x61
    6762:	d015      	beq.n	6790 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    6764:	e017      	b.n	6796 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    6766:	230a      	movs	r3, #10
    6768:	9303      	str	r3, [sp, #12]
            break;
    676a:	e017      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    676c:	2309      	movs	r3, #9
    676e:	9303      	str	r3, [sp, #12]
            break;
    6770:	e014      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    6772:	2312      	movs	r3, #18
    6774:	9303      	str	r3, [sp, #12]
            break;
    6776:	e011      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    6778:	2311      	movs	r3, #17
    677a:	9303      	str	r3, [sp, #12]
            break;
    677c:	e00e      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    677e:	2322      	movs	r3, #34	; 0x22
    6780:	9303      	str	r3, [sp, #12]
            break;
    6782:	e00b      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    6784:	2321      	movs	r3, #33	; 0x21
    6786:	9303      	str	r3, [sp, #12]
            break;
    6788:	e008      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    678a:	2362      	movs	r3, #98	; 0x62
    678c:	9303      	str	r3, [sp, #12]
            break;
    678e:	e005      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    6790:	2361      	movs	r3, #97	; 0x61
    6792:	9303      	str	r3, [sp, #12]
            break;
    6794:	e002      	b.n	679c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    6796:	23ff      	movs	r3, #255	; 0xff
    6798:	9303      	str	r3, [sp, #12]
            break;
    679a:	bf00      	nop
    }

    return ChMode; 
    679c:	9b03      	ldr	r3, [sp, #12]
}
    679e:	4618      	mov	r0, r3
    67a0:	b005      	add	sp, #20
    67a2:	f85d fb04 	ldr.w	pc, [sp], #4

000067a6 <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    67a6:	b082      	sub	sp, #8
    67a8:	9001      	str	r0, [sp, #4]
    67aa:	460b      	mov	r3, r1
    67ac:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    67b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    67b4:	2b00      	cmp	r3, #0
    67b6:	d006      	beq.n	67c6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    67b8:	9b01      	ldr	r3, [sp, #4]
    67ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    67bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    67c4:	e00b      	b.n	67de <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    67c6:	9b01      	ldr	r3, [sp, #4]
    67c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    67ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    67ce:	2b00      	cmp	r3, #0
    67d0:	d005      	beq.n	67de <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    67d6:	f043 0204 	orr.w	r2, r3, #4
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	655a      	str	r2, [r3, #84]	; 0x54
}
    67de:	bf00      	nop
    67e0:	b002      	add	sp, #8
    67e2:	4770      	bx	lr

000067e4 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    67e4:	b500      	push	{lr}
    67e6:	b085      	sub	sp, #20
    67e8:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    67ea:	2100      	movs	r1, #0
    67ec:	9801      	ldr	r0, [sp, #4]
    67ee:	f7ff ffda 	bl	67a6 <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    67f2:	9b01      	ldr	r3, [sp, #4]
    67f4:	681a      	ldr	r2, [r3, #0]
    67f6:	9b01      	ldr	r3, [sp, #4]
    67f8:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    67fa:	9b01      	ldr	r3, [sp, #4]
    67fc:	2200      	movs	r2, #0
    67fe:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	2200      	movs	r2, #0
    6804:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    6806:	9b01      	ldr	r3, [sp, #4]
    6808:	2200      	movs	r2, #0
    680a:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    680c:	9b01      	ldr	r3, [sp, #4]
    680e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    6814:	9b01      	ldr	r3, [sp, #4]
    6816:	2204      	movs	r2, #4
    6818:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    681a:	9b01      	ldr	r3, [sp, #4]
    681c:	2200      	movs	r2, #0
    681e:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    6820:	9b01      	ldr	r3, [sp, #4]
    6822:	2200      	movs	r2, #0
    6824:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    6826:	9b01      	ldr	r3, [sp, #4]
    6828:	2200      	movs	r2, #0
    682a:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	2200      	movs	r2, #0
    6830:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    6832:	9b01      	ldr	r3, [sp, #4]
    6834:	2200      	movs	r2, #0
    6836:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    6838:	9b01      	ldr	r3, [sp, #4]
    683a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    683c:	9b01      	ldr	r3, [sp, #4]
    683e:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    6840:	9b01      	ldr	r3, [sp, #4]
    6842:	2200      	movs	r2, #0
    6844:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    6846:	9b01      	ldr	r3, [sp, #4]
    6848:	2200      	movs	r2, #0
    684a:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    684c:	9b01      	ldr	r3, [sp, #4]
    684e:	2200      	movs	r2, #0
    6850:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    6852:	9b01      	ldr	r3, [sp, #4]
    6854:	2200      	movs	r2, #0
    6856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	2200      	movs	r2, #0
    685e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	2200      	movs	r2, #0
    6866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    686a:	9b01      	ldr	r3, [sp, #4]
    686c:	2200      	movs	r2, #0
    686e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    6872:	9b01      	ldr	r3, [sp, #4]
    6874:	2200      	movs	r2, #0
    6876:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    687a:	9b01      	ldr	r3, [sp, #4]
    687c:	2200      	movs	r2, #0
    687e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    6882:	9b01      	ldr	r3, [sp, #4]
    6884:	2200      	movs	r2, #0
    6886:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    688a:	2300      	movs	r3, #0
    688c:	f88d 300f 	strb.w	r3, [sp, #15]
    6890:	e014      	b.n	68bc <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    6892:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6896:	9a01      	ldr	r2, [sp, #4]
    6898:	3301      	adds	r3, #1
    689a:	00db      	lsls	r3, r3, #3
    689c:	4413      	add	r3, r2
    689e:	2200      	movs	r2, #0
    68a0:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    68a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    68a6:	9a01      	ldr	r2, [sp, #4]
    68a8:	3301      	adds	r3, #1
    68aa:	00db      	lsls	r3, r3, #3
    68ac:	4413      	add	r3, r2
    68ae:	2200      	movs	r2, #0
    68b0:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    68b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    68b6:	3301      	adds	r3, #1
    68b8:	f88d 300f 	strb.w	r3, [sp, #15]
    68bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    68c0:	2b07      	cmp	r3, #7
    68c2:	d9e6      	bls.n	6892 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    68c4:	bf00      	nop
    68c6:	bf00      	nop
    68c8:	b005      	add	sp, #20
    68ca:	f85d fb04 	ldr.w	pc, [sp], #4

000068ce <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    68ce:	b084      	sub	sp, #16
    68d0:	9001      	str	r0, [sp, #4]
    68d2:	460b      	mov	r3, r1
    68d4:	f88d 3003 	strb.w	r3, [sp, #3]
    68d8:	4613      	mov	r3, r2
    68da:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    68de:	2300      	movs	r3, #0
    68e0:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    68e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68e6:	2b01      	cmp	r3, #1
    68e8:	d806      	bhi.n	68f8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    68ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68ee:	2210      	movs	r2, #16
    68f0:	fa02 f303 	lsl.w	r3, r2, r3
    68f4:	9303      	str	r3, [sp, #12]
    68f6:	e013      	b.n	6920 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    68f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    68fc:	2b05      	cmp	r3, #5
    68fe:	d807      	bhi.n	6910 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    6900:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6904:	3b02      	subs	r3, #2
    6906:	2201      	movs	r2, #1
    6908:	fa02 f303 	lsl.w	r3, r2, r3
    690c:	9303      	str	r3, [sp, #12]
    690e:	e007      	b.n	6920 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    6910:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6914:	3b06      	subs	r3, #6
    6916:	f44f 7280 	mov.w	r2, #256	; 0x100
    691a:	fa02 f303 	lsl.w	r3, r2, r3
    691e:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    6920:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6924:	2b00      	cmp	r3, #0
    6926:	d006      	beq.n	6936 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    6928:	9b01      	ldr	r3, [sp, #4]
    692a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    692c:	9b03      	ldr	r3, [sp, #12]
    692e:	431a      	orrs	r2, r3
    6930:	9b01      	ldr	r3, [sp, #4]
    6932:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    6934:	e006      	b.n	6944 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    6936:	9b01      	ldr	r3, [sp, #4]
    6938:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    693a:	9b03      	ldr	r3, [sp, #12]
    693c:	43db      	mvns	r3, r3
    693e:	401a      	ands	r2, r3
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	66da      	str	r2, [r3, #108]	; 0x6c
}
    6944:	bf00      	nop
    6946:	b004      	add	sp, #16
    6948:	4770      	bx	lr

0000694a <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    694a:	b082      	sub	sp, #8
    694c:	9001      	str	r0, [sp, #4]
    694e:	9100      	str	r1, [sp, #0]
    6950:	9b00      	ldr	r3, [sp, #0]
    6952:	2b03      	cmp	r3, #3
    6954:	d82a      	bhi.n	69ac <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    6956:	a201      	add	r2, pc, #4	; (adr r2, 695c <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    6958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    695c:	0000696d 	.word	0x0000696d
    6960:	0000697b 	.word	0x0000697b
    6964:	0000698d 	.word	0x0000698d
    6968:	0000699f 	.word	0x0000699f
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6970:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    6974:	9b01      	ldr	r3, [sp, #4]
    6976:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    6978:	e019      	b.n	69ae <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    697a:	9b01      	ldr	r3, [sp, #4]
    697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    697e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6982:	f043 0220 	orr.w	r2, r3, #32
    6986:	9b01      	ldr	r3, [sp, #4]
    6988:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    698a:	e010      	b.n	69ae <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    698c:	9b01      	ldr	r3, [sp, #4]
    698e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6990:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    699c:	e007      	b.n	69ae <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    699e:	9b01      	ldr	r3, [sp, #4]
    69a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    69a2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    69a6:	9b01      	ldr	r3, [sp, #4]
    69a8:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    69aa:	e000      	b.n	69ae <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    69ac:	bf00      	nop
    }
}
    69ae:	bf00      	nop
    69b0:	b002      	add	sp, #8
    69b2:	4770      	bx	lr

000069b4 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    69b4:	b082      	sub	sp, #8
    69b6:	9001      	str	r0, [sp, #4]
    69b8:	460b      	mov	r3, r1
    69ba:	f88d 3003 	strb.w	r3, [sp, #3]
    69be:	4613      	mov	r3, r2
    69c0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    69c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    69c8:	2b00      	cmp	r3, #0
    69ca:	d00b      	beq.n	69e4 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    69cc:	9b01      	ldr	r3, [sp, #4]
    69ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    69d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    69d4:	00db      	lsls	r3, r3, #3
    69d6:	2140      	movs	r1, #64	; 0x40
    69d8:	fa01 f303 	lsl.w	r3, r1, r3
    69dc:	431a      	orrs	r2, r3
    69de:	9b01      	ldr	r3, [sp, #4]
    69e0:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    69e2:	e00b      	b.n	69fc <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    69e4:	9b01      	ldr	r3, [sp, #4]
    69e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    69e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    69ec:	00db      	lsls	r3, r3, #3
    69ee:	2140      	movs	r1, #64	; 0x40
    69f0:	fa01 f303 	lsl.w	r3, r1, r3
    69f4:	43db      	mvns	r3, r3
    69f6:	401a      	ands	r2, r3
    69f8:	9b01      	ldr	r3, [sp, #4]
    69fa:	665a      	str	r2, [r3, #100]	; 0x64
}
    69fc:	bf00      	nop
    69fe:	b002      	add	sp, #8
    6a00:	4770      	bx	lr

00006a02 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    6a02:	b082      	sub	sp, #8
    6a04:	9001      	str	r0, [sp, #4]
    6a06:	460b      	mov	r3, r1
    6a08:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    6a0c:	9b01      	ldr	r3, [sp, #4]
    6a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6a14:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6a18:	2a00      	cmp	r2, #0
    6a1a:	d001      	beq.n	6a20 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    6a1c:	2280      	movs	r2, #128	; 0x80
    6a1e:	e000      	b.n	6a22 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    6a20:	2200      	movs	r2, #0
    6a22:	431a      	orrs	r2, r3
    6a24:	9b01      	ldr	r3, [sp, #4]
    6a26:	655a      	str	r2, [r3, #84]	; 0x54
}
    6a28:	bf00      	nop
    6a2a:	b002      	add	sp, #8
    6a2c:	4770      	bx	lr

00006a2e <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    6a2e:	b082      	sub	sp, #8
    6a30:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    6a32:	9b01      	ldr	r3, [sp, #4]
    6a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    6a3a:	9b01      	ldr	r3, [sp, #4]
    6a3c:	675a      	str	r2, [r3, #116]	; 0x74
}
    6a3e:	bf00      	nop
    6a40:	b002      	add	sp, #8
    6a42:	4770      	bx	lr

00006a44 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    6a44:	b082      	sub	sp, #8
    6a46:	9001      	str	r0, [sp, #4]
    6a48:	460b      	mov	r3, r1
    6a4a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6a52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    6a56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6a5a:	021b      	lsls	r3, r3, #8
    6a5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    6a60:	431a      	orrs	r2, r3
    6a62:	9b01      	ldr	r3, [sp, #4]
    6a64:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6a66:	bf00      	nop
    6a68:	b002      	add	sp, #8
    6a6a:	4770      	bx	lr

00006a6c <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    6a6c:	b082      	sub	sp, #8
    6a6e:	9001      	str	r0, [sp, #4]
    6a70:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    6a72:	9b01      	ldr	r3, [sp, #4]
    6a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    6a76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6a7a:	9a00      	ldr	r2, [sp, #0]
    6a7c:	2a00      	cmp	r2, #0
    6a7e:	d002      	beq.n	6a86 <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    6a80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6a84:	e000      	b.n	6a88 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    6a86:	2200      	movs	r2, #0
    6a88:	431a      	orrs	r2, r3
    6a8a:	9b01      	ldr	r3, [sp, #4]
    6a8c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6a8e:	bf00      	nop
    6a90:	b002      	add	sp, #8
    6a92:	4770      	bx	lr

00006a94 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    6a94:	b086      	sub	sp, #24
    6a96:	9003      	str	r0, [sp, #12]
    6a98:	460b      	mov	r3, r1
    6a9a:	9201      	str	r2, [sp, #4]
    6a9c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    6aa0:	9b01      	ldr	r3, [sp, #4]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	bf14      	ite	ne
    6aa6:	2301      	movne	r3, #1
    6aa8:	2300      	moveq	r3, #0
    6aaa:	b2db      	uxtb	r3, r3
    6aac:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    6aae:	9b03      	ldr	r3, [sp, #12]
    6ab0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6ab4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ab8:	2101      	movs	r1, #1
    6aba:	fa01 f303 	lsl.w	r3, r1, r3
    6abe:	43db      	mvns	r3, r3
    6ac0:	401a      	ands	r2, r3
    6ac2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ac6:	9905      	ldr	r1, [sp, #20]
    6ac8:	fa01 f303 	lsl.w	r3, r1, r3
    6acc:	431a      	orrs	r2, r3
    6ace:	9b03      	ldr	r3, [sp, #12]
    6ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    6ad4:	bf00      	nop
    6ad6:	b006      	add	sp, #24
    6ad8:	4770      	bx	lr

00006ada <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    6ada:	b084      	sub	sp, #16
    6adc:	9001      	str	r0, [sp, #4]
    6ade:	460b      	mov	r3, r1
    6ae0:	f88d 3003 	strb.w	r3, [sp, #3]
    6ae4:	4613      	mov	r3, r2
    6ae6:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    6aea:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6aee:	2b00      	cmp	r3, #0
    6af0:	d001      	beq.n	6af6 <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    6af2:	2301      	movs	r3, #1
    6af4:	e000      	b.n	6af8 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    6af6:	2300      	movs	r3, #0
    6af8:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    6afa:	9b01      	ldr	r3, [sp, #4]
    6afc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6afe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b02:	2101      	movs	r1, #1
    6b04:	fa01 f303 	lsl.w	r3, r1, r3
    6b08:	43db      	mvns	r3, r3
    6b0a:	401a      	ands	r2, r3
    6b0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b10:	9903      	ldr	r1, [sp, #12]
    6b12:	fa01 f303 	lsl.w	r3, r1, r3
    6b16:	431a      	orrs	r2, r3
    6b18:	9b01      	ldr	r3, [sp, #4]
    6b1a:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6b1c:	bf00      	nop
    6b1e:	b004      	add	sp, #16
    6b20:	4770      	bx	lr

00006b22 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    6b22:	b084      	sub	sp, #16
    6b24:	9001      	str	r0, [sp, #4]
    6b26:	460b      	mov	r3, r1
    6b28:	f88d 3003 	strb.w	r3, [sp, #3]
    6b2c:	4613      	mov	r3, r2
    6b2e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    6b32:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6b36:	2b00      	cmp	r3, #0
    6b38:	d001      	beq.n	6b3e <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    6b3a:	2301      	movs	r3, #1
    6b3c:	e000      	b.n	6b40 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    6b3e:	2300      	movs	r3, #0
    6b40:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    6b42:	9b01      	ldr	r3, [sp, #4]
    6b44:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    6b46:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b4a:	2110      	movs	r1, #16
    6b4c:	fa01 f303 	lsl.w	r3, r1, r3
    6b50:	43db      	mvns	r3, r3
    6b52:	401a      	ands	r2, r3
    6b54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b58:	9903      	ldr	r1, [sp, #12]
    6b5a:	fa01 f303 	lsl.w	r3, r1, r3
    6b5e:	011b      	lsls	r3, r3, #4
    6b60:	431a      	orrs	r2, r3
    6b62:	9b01      	ldr	r3, [sp, #4]
    6b64:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6b66:	bf00      	nop
    6b68:	b004      	add	sp, #16
    6b6a:	4770      	bx	lr

00006b6c <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    6b6c:	b082      	sub	sp, #8
    6b6e:	9001      	str	r0, [sp, #4]
    6b70:	460b      	mov	r3, r1
    6b72:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    6b76:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6b7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6b7e:	409a      	lsls	r2, r3
    6b80:	9b01      	ldr	r3, [sp, #4]
    6b82:	6a1b      	ldr	r3, [r3, #32]
    6b84:	431a      	orrs	r2, r3
    6b86:	9b01      	ldr	r3, [sp, #4]
    6b88:	621a      	str	r2, [r3, #32]
}
    6b8a:	bf00      	nop
    6b8c:	b002      	add	sp, #8
    6b8e:	4770      	bx	lr

00006b90 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    6b90:	b084      	sub	sp, #16
    6b92:	4603      	mov	r3, r0
    6b94:	f88d 3007 	strb.w	r3, [sp, #7]
    6b98:	460b      	mov	r3, r1
    6b9a:	f8ad 3004 	strh.w	r3, [sp, #4]
    6b9e:	4613      	mov	r3, r2
    6ba0:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    6ba4:	2300      	movs	r3, #0
    6ba6:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    6baa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bae:	4a17      	ldr	r2, [pc, #92]	; (6c0c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6bb4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6bb8:	429a      	cmp	r2, r3
    6bba:	d107      	bne.n	6bcc <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    6bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bc0:	4a12      	ldr	r2, [pc, #72]	; (6c0c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6bc6:	f8ad 300e 	strh.w	r3, [sp, #14]
    6bca:	e019      	b.n	6c00 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    6bcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d104      	bne.n	6bde <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    6bd4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6bd8:	f8ad 300e 	strh.w	r3, [sp, #14]
    6bdc:	e010      	b.n	6c00 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    6bde:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    6be2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6be6:	4413      	add	r3, r2
    6be8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6bec:	4907      	ldr	r1, [pc, #28]	; (6c0c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    6bee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    6bf2:	fb93 f1f2 	sdiv	r1, r3, r2
    6bf6:	fb01 f202 	mul.w	r2, r1, r2
    6bfa:	1a9b      	subs	r3, r3, r2
    6bfc:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    6c00:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    6c04:	4618      	mov	r0, r3
    6c06:	b004      	add	sp, #16
    6c08:	4770      	bx	lr
    6c0a:	bf00      	nop
    6c0c:	1fff8cfc 	.word	0x1fff8cfc

00006c10 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    6c10:	b500      	push	{lr}
    6c12:	b085      	sub	sp, #20
    6c14:	4603      	mov	r3, r0
    6c16:	9100      	str	r1, [sp, #0]
    6c18:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c20:	4a40      	ldr	r2, [pc, #256]	; (6d24 <Ftm_Pwm_Ip_InitPair+0x114>)
    6c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c26:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    6c28:	2300      	movs	r3, #0
    6c2a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    6c2e:	2300      	movs	r3, #0
    6c30:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    6c34:	9b00      	ldr	r3, [sp, #0]
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	005b      	lsls	r3, r3, #1
    6c3a:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    6c3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c42:	3301      	adds	r3, #1
    6c44:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    6c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c4c:	9a00      	ldr	r2, [sp, #0]
    6c4e:	7812      	ldrb	r2, [r2, #0]
    6c50:	4610      	mov	r0, r2
    6c52:	9a00      	ldr	r2, [sp, #0]
    6c54:	8951      	ldrh	r1, [r2, #10]
    6c56:	4a34      	ldr	r2, [pc, #208]	; (6d28 <Ftm_Pwm_Ip_InitPair+0x118>)
    6c58:	009b      	lsls	r3, r3, #2
    6c5a:	4403      	add	r3, r0
    6c5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    6c60:	9b00      	ldr	r3, [sp, #0]
    6c62:	7819      	ldrb	r1, [r3, #0]
    6c64:	9b00      	ldr	r3, [sp, #0]
    6c66:	789b      	ldrb	r3, [r3, #2]
    6c68:	461a      	mov	r2, r3
    6c6a:	9803      	ldr	r0, [sp, #12]
    6c6c:	f7ff f920 	bl	5eb0 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    6c70:	9b00      	ldr	r3, [sp, #0]
    6c72:	789b      	ldrb	r3, [r3, #2]
    6c74:	2b00      	cmp	r3, #0
    6c76:	d02f      	beq.n	6cd8 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    6c78:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6c7c:	4619      	mov	r1, r3
    6c7e:	9803      	ldr	r0, [sp, #12]
    6c80:	f7ff fa3e 	bl	6100 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    6c84:	4603      	mov	r3, r0
    6c86:	2b01      	cmp	r3, #1
    6c88:	d113      	bne.n	6cb2 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6c8a:	9b00      	ldr	r3, [sp, #0]
    6c8c:	685b      	ldr	r3, [r3, #4]
    6c8e:	2b01      	cmp	r3, #1
    6c90:	d107      	bne.n	6ca2 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6c92:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6c96:	2200      	movs	r2, #0
    6c98:	4619      	mov	r1, r3
    6c9a:	9803      	ldr	r0, [sp, #12]
    6c9c:	f7ff fa0e 	bl	60bc <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6ca0:	e01a      	b.n	6cd8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6ca2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6ca6:	2201      	movs	r2, #1
    6ca8:	4619      	mov	r1, r3
    6caa:	9803      	ldr	r0, [sp, #12]
    6cac:	f7ff fa06 	bl	60bc <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6cb0:	e012      	b.n	6cd8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    6cb2:	9b00      	ldr	r3, [sp, #0]
    6cb4:	685b      	ldr	r3, [r3, #4]
    6cb6:	2b01      	cmp	r3, #1
    6cb8:	d107      	bne.n	6cca <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    6cba:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cbe:	2201      	movs	r2, #1
    6cc0:	4619      	mov	r1, r3
    6cc2:	9803      	ldr	r0, [sp, #12]
    6cc4:	f7ff f9fa 	bl	60bc <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    6cc8:	e006      	b.n	6cd8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    6cca:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cce:	2200      	movs	r2, #0
    6cd0:	4619      	mov	r1, r3
    6cd2:	9803      	ldr	r0, [sp, #12]
    6cd4:	f7ff f9f2 	bl	60bc <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    6cd8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6cdc:	4619      	mov	r1, r3
    6cde:	9803      	ldr	r0, [sp, #12]
    6ce0:	f7fe fe31 	bl	5946 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    6ce4:	9b00      	ldr	r3, [sp, #0]
    6ce6:	7819      	ldrb	r1, [r3, #0]
    6ce8:	9b00      	ldr	r3, [sp, #0]
    6cea:	7a5b      	ldrb	r3, [r3, #9]
    6cec:	461a      	mov	r2, r3
    6cee:	9803      	ldr	r0, [sp, #12]
    6cf0:	f7ff f92c 	bl	5f4c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    6cf4:	9b00      	ldr	r3, [sp, #0]
    6cf6:	7819      	ldrb	r1, [r3, #0]
    6cf8:	9b00      	ldr	r3, [sp, #0]
    6cfa:	785b      	ldrb	r3, [r3, #1]
    6cfc:	461a      	mov	r2, r3
    6cfe:	9803      	ldr	r0, [sp, #12]
    6d00:	f7ff f8fd 	bl	5efe <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    6d04:	9b00      	ldr	r3, [sp, #0]
    6d06:	7a1a      	ldrb	r2, [r3, #8]
    6d08:	f89d 300a 	ldrb.w	r3, [sp, #10]
    6d0c:	4619      	mov	r1, r3
    6d0e:	9803      	ldr	r0, [sp, #12]
    6d10:	f7ff fddd 	bl	68ce <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    6d14:	2101      	movs	r1, #1
    6d16:	9803      	ldr	r0, [sp, #12]
    6d18:	f7ff f814 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    6d1c:	bf00      	nop
    6d1e:	b005      	add	sp, #20
    6d20:	f85d fb04 	ldr.w	pc, [sp], #4
    6d24:	0000bd70 	.word	0x0000bd70
    6d28:	1fff8d44 	.word	0x1fff8d44

00006d2c <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    6d2c:	b500      	push	{lr}
    6d2e:	b085      	sub	sp, #20
    6d30:	4603      	mov	r3, r0
    6d32:	460a      	mov	r2, r1
    6d34:	f88d 3007 	strb.w	r3, [sp, #7]
    6d38:	4613      	mov	r3, r2
    6d3a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d42:	4a0a      	ldr	r2, [pc, #40]	; (6d6c <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    6d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d48:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    6d4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d4e:	2200      	movs	r2, #0
    6d50:	4619      	mov	r1, r3
    6d52:	9803      	ldr	r0, [sp, #12]
    6d54:	f7fe feed 	bl	5b32 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    6d58:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6d5c:	4619      	mov	r1, r3
    6d5e:	9803      	ldr	r0, [sp, #12]
    6d60:	f7fe ff0a 	bl	5b78 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    6d64:	bf00      	nop
    6d66:	b005      	add	sp, #20
    6d68:	f85d fb04 	ldr.w	pc, [sp], #4
    6d6c:	0000bd70 	.word	0x0000bd70

00006d70 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6d70:	b500      	push	{lr}
    6d72:	b085      	sub	sp, #20
    6d74:	4603      	mov	r3, r0
    6d76:	9100      	str	r1, [sp, #0]
    6d78:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d80:	4a53      	ldr	r2, [pc, #332]	; (6ed0 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    6d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d86:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    6d88:	9b00      	ldr	r3, [sp, #0]
    6d8a:	681b      	ldr	r3, [r3, #0]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d002      	beq.n	6d96 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    6d90:	2b01      	cmp	r3, #1
    6d92:	d04c      	beq.n	6e2e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    6d94:	e097      	b.n	6ec6 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6d96:	9b00      	ldr	r3, [sp, #0]
    6d98:	699b      	ldr	r3, [r3, #24]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	bf14      	ite	ne
    6d9e:	2301      	movne	r3, #1
    6da0:	2300      	moveq	r3, #0
    6da2:	b2db      	uxtb	r3, r3
    6da4:	4619      	mov	r1, r3
    6da6:	9803      	ldr	r0, [sp, #12]
    6da8:	f7ff faa3 	bl	62f2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    6dac:	2100      	movs	r1, #0
    6dae:	9803      	ldr	r0, [sp, #12]
    6db0:	f7ff fb1c 	bl	63ec <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6db4:	9b00      	ldr	r3, [sp, #0]
    6db6:	691b      	ldr	r3, [r3, #16]
    6db8:	2b00      	cmp	r3, #0
    6dba:	bf14      	ite	ne
    6dbc:	2301      	movne	r3, #1
    6dbe:	2300      	moveq	r3, #0
    6dc0:	b2db      	uxtb	r3, r3
    6dc2:	4619      	mov	r1, r3
    6dc4:	9803      	ldr	r0, [sp, #12]
    6dc6:	f7ff faad 	bl	6324 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6dca:	2100      	movs	r1, #0
    6dcc:	9803      	ldr	r0, [sp, #12]
    6dce:	f7ff fb26 	bl	641e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6dd2:	9b00      	ldr	r3, [sp, #0]
    6dd4:	695b      	ldr	r3, [r3, #20]
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	bf14      	ite	ne
    6dda:	2301      	movne	r3, #1
    6ddc:	2300      	moveq	r3, #0
    6dde:	b2db      	uxtb	r3, r3
    6de0:	4619      	mov	r1, r3
    6de2:	9803      	ldr	r0, [sp, #12]
    6de4:	f7ff fab7 	bl	6356 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    6de8:	2100      	movs	r1, #0
    6dea:	9803      	ldr	r0, [sp, #12]
    6dec:	f7ff fb17 	bl	641e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6df0:	9b00      	ldr	r3, [sp, #0]
    6df2:	69db      	ldr	r3, [r3, #28]
    6df4:	2b00      	cmp	r3, #0
    6df6:	bf14      	ite	ne
    6df8:	2301      	movne	r3, #1
    6dfa:	2300      	moveq	r3, #0
    6dfc:	b2db      	uxtb	r3, r3
    6dfe:	4619      	mov	r1, r3
    6e00:	9803      	ldr	r0, [sp, #12]
    6e02:	f7ff fa5d 	bl	62c0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    6e06:	2100      	movs	r1, #0
    6e08:	9803      	ldr	r0, [sp, #12]
    6e0a:	f7ff fad6 	bl	63ba <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e0e:	9b00      	ldr	r3, [sp, #0]
    6e10:	6a1b      	ldr	r3, [r3, #32]
    6e12:	2b00      	cmp	r3, #0
    6e14:	bf14      	ite	ne
    6e16:	2301      	movne	r3, #1
    6e18:	2300      	moveq	r3, #0
    6e1a:	b2db      	uxtb	r3, r3
    6e1c:	4619      	mov	r1, r3
    6e1e:	9803      	ldr	r0, [sp, #12]
    6e20:	f7ff fa35 	bl	628e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    6e24:	2100      	movs	r1, #0
    6e26:	9803      	ldr	r0, [sp, #12]
    6e28:	f7ff faae 	bl	6388 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6e2c:	e04b      	b.n	6ec6 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    6e2e:	2100      	movs	r1, #0
    6e30:	9803      	ldr	r0, [sp, #12]
    6e32:	f7ff fa5e 	bl	62f2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    6e36:	9b00      	ldr	r3, [sp, #0]
    6e38:	699b      	ldr	r3, [r3, #24]
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	bf14      	ite	ne
    6e3e:	2301      	movne	r3, #1
    6e40:	2300      	moveq	r3, #0
    6e42:	b2db      	uxtb	r3, r3
    6e44:	4619      	mov	r1, r3
    6e46:	9803      	ldr	r0, [sp, #12]
    6e48:	f7ff fad0 	bl	63ec <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6e4c:	2100      	movs	r1, #0
    6e4e:	9803      	ldr	r0, [sp, #12]
    6e50:	f7ff fa68 	bl	6324 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e54:	9b00      	ldr	r3, [sp, #0]
    6e56:	691b      	ldr	r3, [r3, #16]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	bf14      	ite	ne
    6e5c:	2301      	movne	r3, #1
    6e5e:	2300      	moveq	r3, #0
    6e60:	b2db      	uxtb	r3, r3
    6e62:	4619      	mov	r1, r3
    6e64:	9803      	ldr	r0, [sp, #12]
    6e66:	f7ff fada 	bl	641e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    6e6a:	2100      	movs	r1, #0
    6e6c:	9803      	ldr	r0, [sp, #12]
    6e6e:	f7ff fa72 	bl	6356 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    6e72:	9b00      	ldr	r3, [sp, #0]
    6e74:	695b      	ldr	r3, [r3, #20]
    6e76:	2b00      	cmp	r3, #0
    6e78:	bf14      	ite	ne
    6e7a:	2301      	movne	r3, #1
    6e7c:	2300      	moveq	r3, #0
    6e7e:	b2db      	uxtb	r3, r3
    6e80:	4619      	mov	r1, r3
    6e82:	9803      	ldr	r0, [sp, #12]
    6e84:	f7ff facb 	bl	641e <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    6e88:	2100      	movs	r1, #0
    6e8a:	9803      	ldr	r0, [sp, #12]
    6e8c:	f7ff fa18 	bl	62c0 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6e90:	9b00      	ldr	r3, [sp, #0]
    6e92:	69db      	ldr	r3, [r3, #28]
    6e94:	2b00      	cmp	r3, #0
    6e96:	bf14      	ite	ne
    6e98:	2301      	movne	r3, #1
    6e9a:	2300      	moveq	r3, #0
    6e9c:	b2db      	uxtb	r3, r3
    6e9e:	4619      	mov	r1, r3
    6ea0:	9803      	ldr	r0, [sp, #12]
    6ea2:	f7ff fa8a 	bl	63ba <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    6ea6:	2100      	movs	r1, #0
    6ea8:	9803      	ldr	r0, [sp, #12]
    6eaa:	f7ff f9f0 	bl	628e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    6eae:	9b00      	ldr	r3, [sp, #0]
    6eb0:	6a1b      	ldr	r3, [r3, #32]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	bf14      	ite	ne
    6eb6:	2301      	movne	r3, #1
    6eb8:	2300      	moveq	r3, #0
    6eba:	b2db      	uxtb	r3, r3
    6ebc:	4619      	mov	r1, r3
    6ebe:	9803      	ldr	r0, [sp, #12]
    6ec0:	f7ff fa62 	bl	6388 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    6ec4:	bf00      	nop
    }
}
    6ec6:	bf00      	nop
    6ec8:	b005      	add	sp, #20
    6eca:	f85d fb04 	ldr.w	pc, [sp], #4
    6ece:	bf00      	nop
    6ed0:	0000bd70 	.word	0x0000bd70

00006ed4 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6ed4:	b500      	push	{lr}
    6ed6:	b085      	sub	sp, #20
    6ed8:	4603      	mov	r3, r0
    6eda:	9100      	str	r1, [sp, #0]
    6edc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ee4:	4a19      	ldr	r2, [pc, #100]	; (6f4c <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    6ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eea:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6eec:	9b00      	ldr	r3, [sp, #0]
    6eee:	699b      	ldr	r3, [r3, #24]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	bf14      	ite	ne
    6ef4:	2301      	movne	r3, #1
    6ef6:	2300      	moveq	r3, #0
    6ef8:	b2db      	uxtb	r3, r3
    6efa:	4619      	mov	r1, r3
    6efc:	9803      	ldr	r0, [sp, #12]
    6efe:	f7fe fee6 	bl	5cce <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f02:	9b00      	ldr	r3, [sp, #0]
    6f04:	691b      	ldr	r3, [r3, #16]
    6f06:	2b00      	cmp	r3, #0
    6f08:	bf14      	ite	ne
    6f0a:	2301      	movne	r3, #1
    6f0c:	2300      	moveq	r3, #0
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	4619      	mov	r1, r3
    6f12:	9803      	ldr	r0, [sp, #12]
    6f14:	f7ff f973 	bl	61fe <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f18:	9b00      	ldr	r3, [sp, #0]
    6f1a:	695b      	ldr	r3, [r3, #20]
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	bf14      	ite	ne
    6f20:	2301      	movne	r3, #1
    6f22:	2300      	moveq	r3, #0
    6f24:	b2db      	uxtb	r3, r3
    6f26:	4619      	mov	r1, r3
    6f28:	9803      	ldr	r0, [sp, #12]
    6f2a:	f7ff f980 	bl	622e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    6f2e:	9b00      	ldr	r3, [sp, #0]
    6f30:	69db      	ldr	r3, [r3, #28]
    6f32:	2b00      	cmp	r3, #0
    6f34:	bf14      	ite	ne
    6f36:	2301      	movne	r3, #1
    6f38:	2300      	moveq	r3, #0
    6f3a:	b2db      	uxtb	r3, r3
    6f3c:	4619      	mov	r1, r3
    6f3e:	9803      	ldr	r0, [sp, #12]
    6f40:	f7ff f945 	bl	61ce <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    6f44:	bf00      	nop
    6f46:	b005      	add	sp, #20
    6f48:	f85d fb04 	ldr.w	pc, [sp], #4
    6f4c:	0000bd70 	.word	0x0000bd70

00006f50 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    6f50:	b500      	push	{lr}
    6f52:	b087      	sub	sp, #28
    6f54:	4603      	mov	r3, r0
    6f56:	9100      	str	r1, [sp, #0]
    6f58:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    6f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f60:	4a42      	ldr	r2, [pc, #264]	; (706c <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    6f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f66:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    6f68:	2300      	movs	r3, #0
    6f6a:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    6f6c:	2300      	movs	r3, #0
    6f6e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    6f72:	9b00      	ldr	r3, [sp, #0]
    6f74:	791b      	ldrb	r3, [r3, #4]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d107      	bne.n	6f8a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6f7a:	9b00      	ldr	r3, [sp, #0]
    6f7c:	795b      	ldrb	r3, [r3, #5]
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d103      	bne.n	6f8a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    6f82:	9b00      	ldr	r3, [sp, #0]
    6f84:	799b      	ldrb	r3, [r3, #6]
    6f86:	2b00      	cmp	r3, #0
    6f88:	d001      	beq.n	6f8e <Ftm_Pwm_Ip_UpdateSync+0x3e>
    6f8a:	2301      	movs	r3, #1
    6f8c:	e000      	b.n	6f90 <Ftm_Pwm_Ip_UpdateSync+0x40>
    6f8e:	2300      	movs	r3, #0
    6f90:	f88d 300f 	strb.w	r3, [sp, #15]
    6f94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f98:	f003 0301 	and.w	r3, r3, #1
    6f9c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    6fa0:	9b00      	ldr	r3, [sp, #0]
    6fa2:	681b      	ldr	r3, [r3, #0]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d105      	bne.n	6fb4 <Ftm_Pwm_Ip_UpdateSync+0x64>
    6fa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6fac:	2b00      	cmp	r3, #0
    6fae:	d001      	beq.n	6fb4 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    6fb0:	2301      	movs	r3, #1
    6fb2:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    6fb4:	9b00      	ldr	r3, [sp, #0]
    6fb6:	6a1b      	ldr	r3, [r3, #32]
    6fb8:	2b02      	cmp	r3, #2
    6fba:	d101      	bne.n	6fc0 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    6fbc:	2301      	movs	r3, #1
    6fbe:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    6fc0:	9b05      	ldr	r3, [sp, #20]
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d14c      	bne.n	7060 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    6fc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fca:	9900      	ldr	r1, [sp, #0]
    6fcc:	4618      	mov	r0, r3
    6fce:	f7ff fecf 	bl	6d70 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    6fd2:	2101      	movs	r1, #1
    6fd4:	9804      	ldr	r0, [sp, #16]
    6fd6:	f7ff f942 	bl	625e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    6fda:	9b00      	ldr	r3, [sp, #0]
    6fdc:	791b      	ldrb	r3, [r3, #4]
    6fde:	461a      	mov	r2, r3
    6fe0:	2100      	movs	r1, #0
    6fe2:	9804      	ldr	r0, [sp, #16]
    6fe4:	f7fe fe89 	bl	5cfa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    6fe8:	9b00      	ldr	r3, [sp, #0]
    6fea:	795b      	ldrb	r3, [r3, #5]
    6fec:	461a      	mov	r2, r3
    6fee:	2101      	movs	r1, #1
    6ff0:	9804      	ldr	r0, [sp, #16]
    6ff2:	f7fe fe82 	bl	5cfa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    6ff6:	9b00      	ldr	r3, [sp, #0]
    6ff8:	799b      	ldrb	r3, [r3, #6]
    6ffa:	461a      	mov	r2, r3
    6ffc:	2102      	movs	r1, #2
    6ffe:	9804      	ldr	r0, [sp, #16]
    7000:	f7fe fe7b 	bl	5cfa <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    7004:	9b00      	ldr	r3, [sp, #0]
    7006:	79db      	ldrb	r3, [r3, #7]
    7008:	4619      	mov	r1, r3
    700a:	9804      	ldr	r0, [sp, #16]
    700c:	f7ff f8c7 	bl	619e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    7010:	9b00      	ldr	r3, [sp, #0]
    7012:	7a1b      	ldrb	r3, [r3, #8]
    7014:	4619      	mov	r1, r3
    7016:	9804      	ldr	r0, [sp, #16]
    7018:	f7fe fe43 	bl	5ca2 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    701c:	9b00      	ldr	r3, [sp, #0]
    701e:	7a5b      	ldrb	r3, [r3, #9]
    7020:	4619      	mov	r1, r3
    7022:	9804      	ldr	r0, [sp, #16]
    7024:	f7fe fe27 	bl	5c76 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    7028:	9b00      	ldr	r3, [sp, #0]
    702a:	7a9b      	ldrb	r3, [r3, #10]
    702c:	2b00      	cmp	r3, #0
    702e:	d005      	beq.n	703c <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    7030:	9b00      	ldr	r3, [sp, #0]
    7032:	899b      	ldrh	r3, [r3, #12]
    7034:	4619      	mov	r1, r3
    7036:	9804      	ldr	r0, [sp, #16]
    7038:	f7ff fac6 	bl	65c8 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    703c:	9b00      	ldr	r3, [sp, #0]
    703e:	7a9b      	ldrb	r3, [r3, #10]
    7040:	4619      	mov	r1, r3
    7042:	9804      	ldr	r0, [sp, #16]
    7044:	f7ff faa3 	bl	658e <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    7048:	9b00      	ldr	r3, [sp, #0]
    704a:	7b9b      	ldrb	r3, [r3, #14]
    704c:	4619      	mov	r1, r3
    704e:	9804      	ldr	r0, [sp, #16]
    7050:	f7ff f86b 	bl	612a <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    7054:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7058:	9900      	ldr	r1, [sp, #0]
    705a:	4618      	mov	r0, r3
    705c:	f7ff ff3a 	bl	6ed4 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    7060:	9b05      	ldr	r3, [sp, #20]
}
    7062:	4618      	mov	r0, r3
    7064:	b007      	add	sp, #28
    7066:	f85d fb04 	ldr.w	pc, [sp], #4
    706a:	bf00      	nop
    706c:	0000bd70 	.word	0x0000bd70

00007070 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7070:	b500      	push	{lr}
    7072:	b085      	sub	sp, #20
    7074:	4603      	mov	r3, r0
    7076:	9100      	str	r1, [sp, #0]
    7078:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    707c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7080:	4a1f      	ldr	r2, [pc, #124]	; (7100 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    7082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7086:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    7088:	9803      	ldr	r0, [sp, #12]
    708a:	f7ff fbab 	bl	67e4 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    708e:	2100      	movs	r1, #0
    7090:	9803      	ldr	r0, [sp, #12]
    7092:	f7fe fc01 	bl	5898 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    7096:	9803      	ldr	r0, [sp, #12]
    7098:	f7fe fc4a 	bl	5930 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    709c:	9b00      	ldr	r3, [sp, #0]
    709e:	68db      	ldr	r3, [r3, #12]
    70a0:	2b00      	cmp	r3, #0
    70a2:	bf14      	ite	ne
    70a4:	2301      	movne	r3, #1
    70a6:	2300      	moveq	r3, #0
    70a8:	b2db      	uxtb	r3, r3
    70aa:	4619      	mov	r1, r3
    70ac:	9803      	ldr	r0, [sp, #12]
    70ae:	f7fe fc04 	bl	58ba <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    70b2:	2100      	movs	r1, #0
    70b4:	9803      	ldr	r0, [sp, #12]
    70b6:	f7fe fdb2 	bl	5c1e <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    70ba:	9b00      	ldr	r3, [sp, #0]
    70bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70be:	4619      	mov	r1, r3
    70c0:	9803      	ldr	r0, [sp, #12]
    70c2:	f7ff f847 	bl	6154 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    70c6:	9b00      	ldr	r3, [sp, #0]
    70c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    70ca:	b2db      	uxtb	r3, r3
    70cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70d0:	b2db      	uxtb	r3, r3
    70d2:	4619      	mov	r1, r3
    70d4:	9803      	ldr	r0, [sp, #12]
    70d6:	f7fe ff87 	bl	5fe8 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    70da:	9b00      	ldr	r3, [sp, #0]
    70dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    70de:	099b      	lsrs	r3, r3, #6
    70e0:	b29b      	uxth	r3, r3
    70e2:	b2db      	uxtb	r3, r3
    70e4:	4619      	mov	r1, r3
    70e6:	9803      	ldr	r0, [sp, #12]
    70e8:	f7fe ffa2 	bl	6030 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    70ec:	9b00      	ldr	r3, [sp, #0]
    70ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    70f0:	4619      	mov	r1, r3
    70f2:	9803      	ldr	r0, [sp, #12]
    70f4:	f7fe ff8b 	bl	600e <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    70f8:	bf00      	nop
    70fa:	b005      	add	sp, #20
    70fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7100:	0000bd70 	.word	0x0000bd70

00007104 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7104:	b500      	push	{lr}
    7106:	b085      	sub	sp, #20
    7108:	4603      	mov	r3, r0
    710a:	9100      	str	r1, [sp, #0]
    710c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7110:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7114:	4a39      	ldr	r2, [pc, #228]	; (71fc <Ftm_Pwm_Ip_InitInstance+0xf8>)
    7116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    711a:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    711c:	4b38      	ldr	r3, [pc, #224]	; (7200 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    711e:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    7120:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7124:	4619      	mov	r1, r3
    7126:	9802      	ldr	r0, [sp, #8]
    7128:	f7ff fd20 	bl	6b6c <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    712c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7130:	9900      	ldr	r1, [sp, #0]
    7132:	4618      	mov	r0, r3
    7134:	f7ff ff9c 	bl	7070 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    7138:	9b00      	ldr	r3, [sp, #0]
    713a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    713c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7140:	4611      	mov	r1, r2
    7142:	4618      	mov	r0, r3
    7144:	f7ff ff04 	bl	6f50 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    7148:	2100      	movs	r1, #0
    714a:	9803      	ldr	r0, [sp, #12]
    714c:	f7fe fd56 	bl	5bfc <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    7150:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7154:	9a00      	ldr	r2, [sp, #0]
    7156:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    7158:	4a2a      	ldr	r2, [pc, #168]	; (7204 <Ftm_Pwm_Ip_InitInstance+0x100>)
    715a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    715e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7162:	9a00      	ldr	r2, [sp, #0]
    7164:	6812      	ldr	r2, [r2, #0]
    7166:	4928      	ldr	r1, [pc, #160]	; (7208 <Ftm_Pwm_Ip_InitInstance+0x104>)
    7168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    716c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7170:	9a00      	ldr	r2, [sp, #0]
    7172:	6852      	ldr	r2, [r2, #4]
    7174:	4925      	ldr	r1, [pc, #148]	; (720c <Ftm_Pwm_Ip_InitInstance+0x108>)
    7176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    717a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    717e:	9a00      	ldr	r2, [sp, #0]
    7180:	6892      	ldr	r2, [r2, #8]
    7182:	4923      	ldr	r1, [pc, #140]	; (7210 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    7184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    7188:	9b00      	ldr	r3, [sp, #0]
    718a:	7c1b      	ldrb	r3, [r3, #16]
    718c:	2b00      	cmp	r3, #0
    718e:	d00e      	beq.n	71ae <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    7190:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7194:	9a00      	ldr	r2, [sp, #0]
    7196:	6952      	ldr	r2, [r2, #20]
    7198:	491e      	ldr	r1, [pc, #120]	; (7214 <Ftm_Pwm_Ip_InitInstance+0x110>)
    719a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    719e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71a2:	9a00      	ldr	r2, [sp, #0]
    71a4:	6992      	ldr	r2, [r2, #24]
    71a6:	491b      	ldr	r1, [pc, #108]	; (7214 <Ftm_Pwm_Ip_InitInstance+0x110>)
    71a8:	00db      	lsls	r3, r3, #3
    71aa:	440b      	add	r3, r1
    71ac:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    71ae:	9b00      	ldr	r3, [sp, #0]
    71b0:	68db      	ldr	r3, [r3, #12]
    71b2:	2b01      	cmp	r3, #1
    71b4:	d108      	bne.n	71c8 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    71b6:	9b00      	ldr	r3, [sp, #0]
    71b8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    71ba:	085b      	lsrs	r3, r3, #1
    71bc:	b29b      	uxth	r3, r3
    71be:	4619      	mov	r1, r3
    71c0:	9803      	ldr	r0, [sp, #12]
    71c2:	f7fe fbe3 	bl	598c <Ftm_Pwm_Ip_SetMod>
    71c6:	e007      	b.n	71d8 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    71c8:	9b00      	ldr	r3, [sp, #0]
    71ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    71cc:	3b01      	subs	r3, #1
    71ce:	b29b      	uxth	r3, r3
    71d0:	4619      	mov	r1, r3
    71d2:	9803      	ldr	r0, [sp, #12]
    71d4:	f7fe fbda 	bl	598c <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    71d8:	9b00      	ldr	r3, [sp, #0]
    71da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    71de:	4619      	mov	r1, r3
    71e0:	9803      	ldr	r0, [sp, #12]
    71e2:	f7fe ff39 	bl	6058 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    71e6:	9b00      	ldr	r3, [sp, #0]
    71e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    71ea:	4619      	mov	r1, r3
    71ec:	9803      	ldr	r0, [sp, #12]
    71ee:	f7fe ffc3 	bl	6178 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    71f2:	bf00      	nop
    71f4:	b005      	add	sp, #20
    71f6:	f85d fb04 	ldr.w	pc, [sp], #4
    71fa:	bf00      	nop
    71fc:	0000bd70 	.word	0x0000bd70
    7200:	40048000 	.word	0x40048000
    7204:	1fff8cfc 	.word	0x1fff8cfc
    7208:	1fff8ff4 	.word	0x1fff8ff4
    720c:	1fff9004 	.word	0x1fff9004
    7210:	1fff9014 	.word	0x1fff9014
    7214:	1fff8ea4 	.word	0x1fff8ea4

00007218 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    7218:	b500      	push	{lr}
    721a:	b085      	sub	sp, #20
    721c:	4603      	mov	r3, r0
    721e:	9100      	str	r1, [sp, #0]
    7220:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7228:	4a1a      	ldr	r2, [pc, #104]	; (7294 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    722a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    722e:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    7230:	9b00      	ldr	r3, [sp, #0]
    7232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    7236:	4619      	mov	r1, r3
    7238:	9803      	ldr	r0, [sp, #12]
    723a:	f7ff fc03 	bl	6a44 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    723e:	9b00      	ldr	r3, [sp, #0]
    7240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7242:	4619      	mov	r1, r3
    7244:	9803      	ldr	r0, [sp, #12]
    7246:	f7ff fc11 	bl	6a6c <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    724a:	9b00      	ldr	r3, [sp, #0]
    724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    724e:	4619      	mov	r1, r3
    7250:	9803      	ldr	r0, [sp, #12]
    7252:	f7ff fb7a 	bl	694a <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    7256:	2101      	movs	r1, #1
    7258:	9803      	ldr	r0, [sp, #12]
    725a:	f7fe fce0 	bl	5c1e <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    725e:	2101      	movs	r1, #1
    7260:	9803      	ldr	r0, [sp, #12]
    7262:	f7fe fcf2 	bl	5c4a <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    7266:	9b00      	ldr	r3, [sp, #0]
    7268:	685b      	ldr	r3, [r3, #4]
    726a:	4619      	mov	r1, r3
    726c:	9803      	ldr	r0, [sp, #12]
    726e:	f7fe fb03 	bl	5878 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    7272:	9b00      	ldr	r3, [sp, #0]
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	4619      	mov	r1, r3
    7278:	9803      	ldr	r0, [sp, #12]
    727a:	f7fe fb0d 	bl	5898 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    727e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7282:	4a05      	ldr	r2, [pc, #20]	; (7298 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    7284:	2101      	movs	r1, #1
    7286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    728a:	bf00      	nop
    728c:	b005      	add	sp, #20
    728e:	f85d fb04 	ldr.w	pc, [sp], #4
    7292:	bf00      	nop
    7294:	0000bd70 	.word	0x0000bd70
    7298:	1fff8ec4 	.word	0x1fff8ec4

0000729c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    729c:	b500      	push	{lr}
    729e:	b085      	sub	sp, #20
    72a0:	4603      	mov	r3, r0
    72a2:	9100      	str	r1, [sp, #0]
    72a4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    72a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    72ac:	4a37      	ldr	r2, [pc, #220]	; (738c <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    72ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72b2:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    72b4:	2300      	movs	r3, #0
    72b6:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    72ba:	2300      	movs	r3, #0
    72bc:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    72c0:	9b00      	ldr	r3, [sp, #0]
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    72c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    72cc:	085b      	lsrs	r3, r3, #1
    72ce:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    72d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72d6:	2201      	movs	r2, #1
    72d8:	4619      	mov	r1, r3
    72da:	9803      	ldr	r0, [sp, #12]
    72dc:	f7fe fe36 	bl	5f4c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    72e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72e4:	2201      	movs	r2, #1
    72e6:	4619      	mov	r1, r3
    72e8:	9803      	ldr	r0, [sp, #12]
    72ea:	f7ff fb63 	bl	69b4 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72ee:	9b00      	ldr	r3, [sp, #0]
    72f0:	685b      	ldr	r3, [r3, #4]
    72f2:	2b22      	cmp	r3, #34	; 0x22
    72f4:	d003      	beq.n	72fe <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    72f6:	9b00      	ldr	r3, [sp, #0]
    72f8:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    72fa:	2b21      	cmp	r3, #33	; 0x21
    72fc:	d113      	bne.n	7326 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    72fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7302:	005b      	lsls	r3, r3, #1
    7304:	b2db      	uxtb	r3, r3
    7306:	3301      	adds	r3, #1
    7308:	b2d9      	uxtb	r1, r3
    730a:	9b00      	ldr	r3, [sp, #0]
    730c:	685b      	ldr	r3, [r3, #4]
    730e:	461a      	mov	r2, r3
    7310:	9803      	ldr	r0, [sp, #12]
    7312:	f7fe fb76 	bl	5a02 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    7316:	f89d 300a 	ldrb.w	r3, [sp, #10]
    731a:	2201      	movs	r2, #1
    731c:	4619      	mov	r1, r3
    731e:	9803      	ldr	r0, [sp, #12]
    7320:	f7fe fd89 	bl	5e36 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    7324:	e021      	b.n	736a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7326:	9b00      	ldr	r3, [sp, #0]
    7328:	685b      	ldr	r3, [r3, #4]
    732a:	2b62      	cmp	r3, #98	; 0x62
    732c:	d003      	beq.n	7336 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    732e:	9b00      	ldr	r3, [sp, #0]
    7330:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    7332:	2b61      	cmp	r3, #97	; 0x61
    7334:	d119      	bne.n	736a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    7336:	f89d 300a 	ldrb.w	r3, [sp, #10]
    733a:	005b      	lsls	r3, r3, #1
    733c:	b2db      	uxtb	r3, r3
    733e:	3301      	adds	r3, #1
    7340:	b2d9      	uxtb	r1, r3
    7342:	9b00      	ldr	r3, [sp, #0]
    7344:	685b      	ldr	r3, [r3, #4]
    7346:	461a      	mov	r2, r3
    7348:	9803      	ldr	r0, [sp, #12]
    734a:	f7fe fb5a 	bl	5a02 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    734e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7352:	2201      	movs	r2, #1
    7354:	4619      	mov	r1, r3
    7356:	9803      	ldr	r0, [sp, #12]
    7358:	f7fe fd6d 	bl	5e36 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    735c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7360:	2201      	movs	r2, #1
    7362:	4619      	mov	r1, r3
    7364:	9803      	ldr	r0, [sp, #12]
    7366:	f7fe fe18 	bl	5f9a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    736a:	9b00      	ldr	r3, [sp, #0]
    736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    736e:	2b00      	cmp	r3, #0
    7370:	d007      	beq.n	7382 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    7372:	9b00      	ldr	r3, [sp, #0]
    7374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7376:	f89d 3007 	ldrb.w	r3, [sp, #7]
    737a:	4611      	mov	r1, r2
    737c:	4618      	mov	r0, r3
    737e:	f7ff fc47 	bl	6c10 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    7382:	bf00      	nop
    7384:	b005      	add	sp, #20
    7386:	f85d fb04 	ldr.w	pc, [sp], #4
    738a:	bf00      	nop
    738c:	0000bd70 	.word	0x0000bd70

00007390 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    7390:	b500      	push	{lr}
    7392:	b085      	sub	sp, #20
    7394:	4603      	mov	r3, r0
    7396:	9100      	str	r1, [sp, #0]
    7398:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    739c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    73a0:	4a15      	ldr	r2, [pc, #84]	; (73f8 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    73a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73a6:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    73a8:	9b00      	ldr	r3, [sp, #0]
    73aa:	7819      	ldrb	r1, [r3, #0]
    73ac:	9b00      	ldr	r3, [sp, #0]
    73ae:	7ddb      	ldrb	r3, [r3, #23]
    73b0:	461a      	mov	r2, r3
    73b2:	9803      	ldr	r0, [sp, #12]
    73b4:	f7ff fa8b 	bl	68ce <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    73b8:	9b00      	ldr	r3, [sp, #0]
    73ba:	7819      	ldrb	r1, [r3, #0]
    73bc:	9b00      	ldr	r3, [sp, #0]
    73be:	7e1b      	ldrb	r3, [r3, #24]
    73c0:	461a      	mov	r2, r3
    73c2:	9803      	ldr	r0, [sp, #12]
    73c4:	f7ff f8ba 	bl	653c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    73c8:	9b00      	ldr	r3, [sp, #0]
    73ca:	7819      	ldrb	r1, [r3, #0]
    73cc:	9b00      	ldr	r3, [sp, #0]
    73ce:	7d5b      	ldrb	r3, [r3, #21]
    73d0:	461a      	mov	r2, r3
    73d2:	9803      	ldr	r0, [sp, #12]
    73d4:	f7ff f87c 	bl	64d0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    73d8:	9b00      	ldr	r3, [sp, #0]
    73da:	7819      	ldrb	r1, [r3, #0]
    73dc:	9b00      	ldr	r3, [sp, #0]
    73de:	7d9b      	ldrb	r3, [r3, #22]
    73e0:	461a      	mov	r2, r3
    73e2:	9803      	ldr	r0, [sp, #12]
    73e4:	f7ff f834 	bl	6450 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    73e8:	2101      	movs	r1, #1
    73ea:	9803      	ldr	r0, [sp, #12]
    73ec:	f7fe fcaa 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    73f0:	bf00      	nop
    73f2:	b005      	add	sp, #20
    73f4:	f85d fb04 	ldr.w	pc, [sp], #4
    73f8:	0000bd70 	.word	0x0000bd70

000073fc <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    73fc:	b500      	push	{lr}
    73fe:	b085      	sub	sp, #20
    7400:	4603      	mov	r3, r0
    7402:	9100      	str	r1, [sp, #0]
    7404:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7408:	f89d 3007 	ldrb.w	r3, [sp, #7]
    740c:	4a48      	ldr	r2, [pc, #288]	; (7530 <Ftm_Pwm_Ip_InitChannel+0x134>)
    740e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7412:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    7414:	2300      	movs	r3, #0
    7416:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    741a:	9b00      	ldr	r3, [sp, #0]
    741c:	781b      	ldrb	r3, [r3, #0]
    741e:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    7422:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7426:	f89d 300b 	ldrb.w	r3, [sp, #11]
    742a:	9900      	ldr	r1, [sp, #0]
    742c:	8b48      	ldrh	r0, [r1, #26]
    742e:	4941      	ldr	r1, [pc, #260]	; (7534 <Ftm_Pwm_Ip_InitChannel+0x138>)
    7430:	00d2      	lsls	r2, r2, #3
    7432:	4413      	add	r3, r2
    7434:	4602      	mov	r2, r0
    7436:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    743a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    743e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7442:	9a00      	ldr	r2, [sp, #0]
    7444:	69d2      	ldr	r2, [r2, #28]
    7446:	483c      	ldr	r0, [pc, #240]	; (7538 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    7448:	00c9      	lsls	r1, r1, #3
    744a:	440b      	add	r3, r1
    744c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    7450:	9b00      	ldr	r3, [sp, #0]
    7452:	6a1a      	ldr	r2, [r3, #32]
    7454:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7458:	4619      	mov	r1, r3
    745a:	9803      	ldr	r0, [sp, #12]
    745c:	f7fe fe2e 	bl	60bc <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    7460:	9b00      	ldr	r3, [sp, #0]
    7462:	69da      	ldr	r2, [r3, #28]
    7464:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7468:	4619      	mov	r1, r3
    746a:	9803      	ldr	r0, [sp, #12]
    746c:	f7fe fc80 	bl	5d70 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    7470:	9b00      	ldr	r3, [sp, #0]
    7472:	685a      	ldr	r2, [r3, #4]
    7474:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7478:	4619      	mov	r1, r3
    747a:	9803      	ldr	r0, [sp, #12]
    747c:	f7fe fac1 	bl	5a02 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    7480:	9b00      	ldr	r3, [sp, #0]
    7482:	685a      	ldr	r2, [r3, #4]
    7484:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7488:	4619      	mov	r1, r3
    748a:	9803      	ldr	r0, [sp, #12]
    748c:	f7fe faf0 	bl	5a70 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    7490:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7494:	9900      	ldr	r1, [sp, #0]
    7496:	4618      	mov	r0, r3
    7498:	f7ff ff00 	bl	729c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    749c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    74a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74a4:	4923      	ldr	r1, [pc, #140]	; (7534 <Ftm_Pwm_Ip_InitChannel+0x138>)
    74a6:	00d2      	lsls	r2, r2, #3
    74a8:	4413      	add	r3, r2
    74aa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    74ae:	f89d 100b 	ldrb.w	r1, [sp, #11]
    74b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    74b6:	2301      	movs	r3, #1
    74b8:	f000 f9c0 	bl	783c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    74bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74c0:	9900      	ldr	r1, [sp, #0]
    74c2:	4618      	mov	r0, r3
    74c4:	f7ff ff64 	bl	7390 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    74c8:	9b00      	ldr	r3, [sp, #0]
    74ca:	7d1b      	ldrb	r3, [r3, #20]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d005      	beq.n	74dc <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    74d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74d4:	4619      	mov	r1, r3
    74d6:	9803      	ldr	r0, [sp, #12]
    74d8:	f7fe fa35 	bl	5946 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    74dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    74e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    74e4:	4915      	ldr	r1, [pc, #84]	; (753c <Ftm_Pwm_Ip_InitChannel+0x140>)
    74e6:	00d2      	lsls	r2, r2, #3
    74e8:	4413      	add	r3, r2
    74ea:	2201      	movs	r2, #1
    74ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    74f0:	9b00      	ldr	r3, [sp, #0]
    74f2:	7a1b      	ldrb	r3, [r3, #8]
    74f4:	2b00      	cmp	r3, #0
    74f6:	d016      	beq.n	7526 <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    74f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    74fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7500:	9a00      	ldr	r2, [sp, #0]
    7502:	68d2      	ldr	r2, [r2, #12]
    7504:	480e      	ldr	r0, [pc, #56]	; (7540 <Ftm_Pwm_Ip_InitChannel+0x144>)
    7506:	00c9      	lsls	r1, r1, #3
    7508:	440b      	add	r3, r1
    750a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    750e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    7512:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7516:	9a00      	ldr	r2, [sp, #0]
    7518:	6912      	ldr	r2, [r2, #16]
    751a:	4809      	ldr	r0, [pc, #36]	; (7540 <Ftm_Pwm_Ip_InitChannel+0x144>)
    751c:	00c9      	lsls	r1, r1, #3
    751e:	440b      	add	r3, r1
    7520:	00db      	lsls	r3, r3, #3
    7522:	4403      	add	r3, r0
    7524:	605a      	str	r2, [r3, #4]
    }

}
    7526:	bf00      	nop
    7528:	b005      	add	sp, #20
    752a:	f85d fb04 	ldr.w	pc, [sp], #4
    752e:	bf00      	nop
    7530:	0000bd70 	.word	0x0000bd70
    7534:	1fff8d04 	.word	0x1fff8d04
    7538:	1fff8f74 	.word	0x1fff8f74
    753c:	1fff8ed4 	.word	0x1fff8ed4
    7540:	1fff8da4 	.word	0x1fff8da4

00007544 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    7544:	b500      	push	{lr}
    7546:	b085      	sub	sp, #20
    7548:	4603      	mov	r3, r0
    754a:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    754e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7552:	4a17      	ldr	r2, [pc, #92]	; (75b0 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    7554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7558:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    755a:	2100      	movs	r1, #0
    755c:	9803      	ldr	r0, [sp, #12]
    755e:	f7fe f99b 	bl	5898 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    7562:	2100      	movs	r1, #0
    7564:	9803      	ldr	r0, [sp, #12]
    7566:	f7fe fd63 	bl	6030 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    756a:	2101      	movs	r1, #1
    756c:	9803      	ldr	r0, [sp, #12]
    756e:	f7fe fd4e 	bl	600e <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    7572:	2100      	movs	r1, #0
    7574:	9803      	ldr	r0, [sp, #12]
    7576:	f7fe fd37 	bl	5fe8 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    757a:	2100      	movs	r1, #0
    757c:	9803      	ldr	r0, [sp, #12]
    757e:	f7fe fde9 	bl	6154 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7582:	2100      	movs	r1, #0
    7584:	9803      	ldr	r0, [sp, #12]
    7586:	f7fe f9bc 	bl	5902 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    758a:	2100      	movs	r1, #0
    758c:	9803      	ldr	r0, [sp, #12]
    758e:	f7fe f9fd 	bl	598c <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    7592:	2100      	movs	r1, #0
    7594:	9803      	ldr	r0, [sp, #12]
    7596:	f7fe f9e8 	bl	596a <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    759a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    759e:	4a05      	ldr	r2, [pc, #20]	; (75b4 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    75a0:	2100      	movs	r1, #0
    75a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    75a6:	bf00      	nop
    75a8:	b005      	add	sp, #20
    75aa:	f85d fb04 	ldr.w	pc, [sp], #4
    75ae:	bf00      	nop
    75b0:	0000bd70 	.word	0x0000bd70
    75b4:	1fff8ec4 	.word	0x1fff8ec4

000075b8 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    75b8:	b500      	push	{lr}
    75ba:	b085      	sub	sp, #20
    75bc:	4603      	mov	r3, r0
    75be:	460a      	mov	r2, r1
    75c0:	f88d 3007 	strb.w	r3, [sp, #7]
    75c4:	4613      	mov	r3, r2
    75c6:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    75ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75ce:	4a29      	ldr	r2, [pc, #164]	; (7674 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    75d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d4:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    75d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75da:	085b      	lsrs	r3, r3, #1
    75dc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    75e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    75e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75e8:	4611      	mov	r1, r2
    75ea:	4618      	mov	r0, r3
    75ec:	f7ff fb9e 	bl	6d2c <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    75f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    75f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    75f8:	491f      	ldr	r1, [pc, #124]	; (7678 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    75fa:	00d2      	lsls	r2, r2, #3
    75fc:	4413      	add	r3, r2
    75fe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    7602:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7606:	f89d 0007 	ldrb.w	r0, [sp, #7]
    760a:	2301      	movs	r3, #1
    760c:	f000 fa4c 	bl	7aa8 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    7610:	2100      	movs	r1, #0
    7612:	9803      	ldr	r0, [sp, #12]
    7614:	f7fe fb96 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    7618:	2101      	movs	r1, #1
    761a:	9803      	ldr	r0, [sp, #12]
    761c:	f7fe fb57 	bl	5cce <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    7620:	2101      	movs	r1, #1
    7622:	9803      	ldr	r0, [sp, #12]
    7624:	f7fe fe65 	bl	62f2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    7628:	f89d 3006 	ldrb.w	r3, [sp, #6]
    762c:	2200      	movs	r2, #0
    762e:	4619      	mov	r1, r3
    7630:	9803      	ldr	r0, [sp, #12]
    7632:	f7fe fbbf 	bl	5db4 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    7636:	2101      	movs	r1, #1
    7638:	9803      	ldr	r0, [sp, #12]
    763a:	f7fe fb83 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    763e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7642:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7646:	005b      	lsls	r3, r3, #1
    7648:	490c      	ldr	r1, [pc, #48]	; (767c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    764a:	00d2      	lsls	r2, r2, #3
    764c:	440a      	add	r2, r1
    764e:	4413      	add	r3, r2
    7650:	2200      	movs	r2, #0
    7652:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    7654:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7658:	f89d 300b 	ldrb.w	r3, [sp, #11]
    765c:	005b      	lsls	r3, r3, #1
    765e:	3301      	adds	r3, #1
    7660:	4906      	ldr	r1, [pc, #24]	; (767c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    7662:	00d2      	lsls	r2, r2, #3
    7664:	440a      	add	r2, r1
    7666:	4413      	add	r3, r2
    7668:	2200      	movs	r2, #0
    766a:	701a      	strb	r2, [r3, #0]

}
    766c:	bf00      	nop
    766e:	b005      	add	sp, #20
    7670:	f85d fb04 	ldr.w	pc, [sp], #4
    7674:	0000bd70 	.word	0x0000bd70
    7678:	1fff8f74 	.word	0x1fff8f74
    767c:	1fff8f54 	.word	0x1fff8f54

00007680 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    7680:	b500      	push	{lr}
    7682:	b085      	sub	sp, #20
    7684:	4603      	mov	r3, r0
    7686:	9100      	str	r1, [sp, #0]
    7688:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    768c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7690:	4a15      	ldr	r2, [pc, #84]	; (76e8 <Ftm_Pwm_Ip_InitChFault+0x68>)
    7692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7696:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    7698:	9b00      	ldr	r3, [sp, #0]
    769a:	7819      	ldrb	r1, [r3, #0]
    769c:	9b00      	ldr	r3, [sp, #0]
    769e:	685b      	ldr	r3, [r3, #4]
    76a0:	461a      	mov	r2, r3
    76a2:	9803      	ldr	r0, [sp, #12]
    76a4:	f7ff f9f6 	bl	6a94 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    76a8:	9b00      	ldr	r3, [sp, #0]
    76aa:	7819      	ldrb	r1, [r3, #0]
    76ac:	9b00      	ldr	r3, [sp, #0]
    76ae:	7a1b      	ldrb	r3, [r3, #8]
    76b0:	461a      	mov	r2, r3
    76b2:	9803      	ldr	r0, [sp, #12]
    76b4:	f7ff fa35 	bl	6b22 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    76b8:	9b00      	ldr	r3, [sp, #0]
    76ba:	781b      	ldrb	r3, [r3, #0]
    76bc:	2201      	movs	r2, #1
    76be:	4619      	mov	r1, r3
    76c0:	9803      	ldr	r0, [sp, #12]
    76c2:	f7ff fa0a 	bl	6ada <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    76c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76ca:	9a00      	ldr	r2, [sp, #0]
    76cc:	7812      	ldrb	r2, [r2, #0]
    76ce:	4610      	mov	r0, r2
    76d0:	9a00      	ldr	r2, [sp, #0]
    76d2:	68d2      	ldr	r2, [r2, #12]
    76d4:	4905      	ldr	r1, [pc, #20]	; (76ec <Ftm_Pwm_Ip_InitChFault+0x6c>)
    76d6:	009b      	lsls	r3, r3, #2
    76d8:	4403      	add	r3, r0
    76da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76de:	bf00      	nop
    76e0:	b005      	add	sp, #20
    76e2:	f85d fb04 	ldr.w	pc, [sp], #4
    76e6:	bf00      	nop
    76e8:	0000bd70 	.word	0x0000bd70
    76ec:	1fff8d64 	.word	0x1fff8d64

000076f0 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    76f0:	b500      	push	{lr}
    76f2:	b085      	sub	sp, #20
    76f4:	4603      	mov	r3, r0
    76f6:	9100      	str	r1, [sp, #0]
    76f8:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    76fc:	2300      	movs	r3, #0
    76fe:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    7702:	4b29      	ldr	r3, [pc, #164]	; (77a8 <Ftm_Pwm_Ip_Init+0xb8>)
    7704:	2200      	movs	r2, #0
    7706:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    7708:	9b00      	ldr	r3, [sp, #0]
    770a:	681a      	ldr	r2, [r3, #0]
    770c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7710:	4611      	mov	r1, r2
    7712:	4618      	mov	r0, r3
    7714:	f7ff fcf6 	bl	7104 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    7718:	2300      	movs	r3, #0
    771a:	f88d 300f 	strb.w	r3, [sp, #15]
    771e:	e011      	b.n	7744 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    7720:	9b00      	ldr	r3, [sp, #0]
    7722:	685a      	ldr	r2, [r3, #4]
    7724:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7728:	009b      	lsls	r3, r3, #2
    772a:	4413      	add	r3, r2
    772c:	681a      	ldr	r2, [r3, #0]
    772e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7732:	4611      	mov	r1, r2
    7734:	4618      	mov	r0, r3
    7736:	f7ff fe61 	bl	73fc <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    773a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    773e:	3301      	adds	r3, #1
    7740:	f88d 300f 	strb.w	r3, [sp, #15]
    7744:	9b00      	ldr	r3, [sp, #0]
    7746:	7a1b      	ldrb	r3, [r3, #8]
    7748:	f89d 200f 	ldrb.w	r2, [sp, #15]
    774c:	429a      	cmp	r2, r3
    774e:	d3e7      	bcc.n	7720 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    7750:	9b00      	ldr	r3, [sp, #0]
    7752:	7c1b      	ldrb	r3, [r3, #16]
    7754:	2b00      	cmp	r3, #0
    7756:	d01b      	beq.n	7790 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    7758:	2300      	movs	r3, #0
    775a:	f88d 300f 	strb.w	r3, [sp, #15]
    775e:	e011      	b.n	7784 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    7760:	9b00      	ldr	r3, [sp, #0]
    7762:	68da      	ldr	r2, [r3, #12]
    7764:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7768:	009b      	lsls	r3, r3, #2
    776a:	4413      	add	r3, r2
    776c:	681a      	ldr	r2, [r3, #0]
    776e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7772:	4611      	mov	r1, r2
    7774:	4618      	mov	r0, r3
    7776:	f7ff ff83 	bl	7680 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    777a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    777e:	3301      	adds	r3, #1
    7780:	f88d 300f 	strb.w	r3, [sp, #15]
    7784:	9b00      	ldr	r3, [sp, #0]
    7786:	7c1b      	ldrb	r3, [r3, #16]
    7788:	f89d 200f 	ldrb.w	r2, [sp, #15]
    778c:	429a      	cmp	r2, r3
    778e:	d3e7      	bcc.n	7760 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    7790:	9b00      	ldr	r3, [sp, #0]
    7792:	681a      	ldr	r2, [r3, #0]
    7794:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7798:	4611      	mov	r1, r2
    779a:	4618      	mov	r0, r3
    779c:	f7ff fd3c 	bl	7218 <Ftm_Pwm_Ip_InitInstanceStart>
}
    77a0:	bf00      	nop
    77a2:	b005      	add	sp, #20
    77a4:	f85d fb04 	ldr.w	pc, [sp], #4
    77a8:	1fff8cf8 	.word	0x1fff8cf8

000077ac <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    77ac:	b500      	push	{lr}
    77ae:	b085      	sub	sp, #20
    77b0:	4603      	mov	r3, r0
    77b2:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    77b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77ba:	4a1e      	ldr	r2, [pc, #120]	; (7834 <Ftm_Pwm_Ip_DeInit+0x88>)
    77bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c0:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    77c2:	2300      	movs	r3, #0
    77c4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    77c8:	9802      	ldr	r0, [sp, #8]
    77ca:	f7ff f80b 	bl	67e4 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    77ce:	2300      	movs	r3, #0
    77d0:	f88d 300f 	strb.w	r3, [sp, #15]
    77d4:	e021      	b.n	781a <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    77d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    77de:	4916      	ldr	r1, [pc, #88]	; (7838 <Ftm_Pwm_Ip_DeInit+0x8c>)
    77e0:	00d2      	lsls	r2, r2, #3
    77e2:	4413      	add	r3, r2
    77e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    77e8:	2b00      	cmp	r3, #0
    77ea:	d011      	beq.n	7810 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    77ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    77f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77f4:	4611      	mov	r1, r2
    77f6:	4618      	mov	r0, r3
    77f8:	f7ff fede 	bl	75b8 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    77fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7800:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7804:	490c      	ldr	r1, [pc, #48]	; (7838 <Ftm_Pwm_Ip_DeInit+0x8c>)
    7806:	00d2      	lsls	r2, r2, #3
    7808:	4413      	add	r3, r2
    780a:	2200      	movs	r2, #0
    780c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    7810:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7814:	3301      	adds	r3, #1
    7816:	f88d 300f 	strb.w	r3, [sp, #15]
    781a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    781e:	2b07      	cmp	r3, #7
    7820:	d9d9      	bls.n	77d6 <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    7822:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7826:	4618      	mov	r0, r3
    7828:	f7ff fe8c 	bl	7544 <Ftm_Pwm_Ip_DeInitInstance>
}
    782c:	bf00      	nop
    782e:	b005      	add	sp, #20
    7830:	f85d fb04 	ldr.w	pc, [sp], #4
    7834:	0000bd70 	.word	0x0000bd70
    7838:	1fff8ed4 	.word	0x1fff8ed4

0000783c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    783c:	b510      	push	{r4, lr}
    783e:	b088      	sub	sp, #32
    7840:	4604      	mov	r4, r0
    7842:	4608      	mov	r0, r1
    7844:	4611      	mov	r1, r2
    7846:	461a      	mov	r2, r3
    7848:	4623      	mov	r3, r4
    784a:	f88d 300f 	strb.w	r3, [sp, #15]
    784e:	4603      	mov	r3, r0
    7850:	f88d 300e 	strb.w	r3, [sp, #14]
    7854:	460b      	mov	r3, r1
    7856:	f8ad 300c 	strh.w	r3, [sp, #12]
    785a:	4613      	mov	r3, r2
    785c:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7860:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7864:	4a54      	ldr	r2, [pc, #336]	; (79b8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    7866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    786a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    786c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7870:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    7874:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7878:	085b      	lsrs	r3, r3, #1
    787a:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    787e:	f002 fb69 	bl	9f54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    7882:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7886:	f89d 300e 	ldrb.w	r3, [sp, #14]
    788a:	494c      	ldr	r1, [pc, #304]	; (79bc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    788c:	00d2      	lsls	r2, r2, #3
    788e:	4413      	add	r3, r2
    7890:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7894:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7898:	f89d 300e 	ldrb.w	r3, [sp, #14]
    789c:	4619      	mov	r1, r3
    789e:	9807      	ldr	r0, [sp, #28]
    78a0:	f7fe feb0 	bl	6604 <Ftm_Pwm_Ip_GetChannelMode>
    78a4:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    78a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    78aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    78ae:	4944      	ldr	r1, [pc, #272]	; (79c0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    78b0:	00d2      	lsls	r2, r2, #3
    78b2:	4413      	add	r3, r2
    78b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    78b8:	2b02      	cmp	r3, #2
    78ba:	d111      	bne.n	78e0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    78bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    78c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    78c4:	493e      	ldr	r1, [pc, #248]	; (79c0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    78c6:	00d2      	lsls	r2, r2, #3
    78c8:	4413      	add	r3, r2
    78ca:	2201      	movs	r2, #1
    78cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    78d0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    78d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    78d8:	2300      	movs	r3, #0
    78da:	2200      	movs	r2, #0
    78dc:	f000 f8e4 	bl	7aa8 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    78e0:	9b05      	ldr	r3, [sp, #20]
    78e2:	2b0a      	cmp	r3, #10
    78e4:	d008      	beq.n	78f8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    78e6:	9b05      	ldr	r3, [sp, #20]
    78e8:	2b09      	cmp	r3, #9
    78ea:	d005      	beq.n	78f8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    78ec:	9b05      	ldr	r3, [sp, #20]
    78ee:	2b12      	cmp	r3, #18
    78f0:	d002      	beq.n	78f8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    78f2:	9b05      	ldr	r3, [sp, #20]
    78f4:	2b11      	cmp	r3, #17
    78f6:	d10c      	bne.n	7912 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    78f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    78fc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7900:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7904:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7908:	9300      	str	r3, [sp, #0]
    790a:	2300      	movs	r3, #0
    790c:	f000 f992 	bl	7c34 <Ftm_Pwm_Ip_UpdatePwmChannel>
    7910:	e04c      	b.n	79ac <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7912:	9b05      	ldr	r3, [sp, #20]
    7914:	2b22      	cmp	r3, #34	; 0x22
    7916:	d008      	beq.n	792a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    7918:	9b05      	ldr	r3, [sp, #20]
    791a:	2b62      	cmp	r3, #98	; 0x62
    791c:	d005      	beq.n	792a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    791e:	9b05      	ldr	r3, [sp, #20]
    7920:	2b61      	cmp	r3, #97	; 0x61
    7922:	d002      	beq.n	792a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7924:	9b05      	ldr	r3, [sp, #20]
    7926:	2b21      	cmp	r3, #33	; 0x21
    7928:	d140      	bne.n	79ac <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    792a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    792e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7932:	4924      	ldr	r1, [pc, #144]	; (79c4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7934:	0092      	lsls	r2, r2, #2
    7936:	4413      	add	r3, r2
    7938:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    793c:	2b00      	cmp	r3, #0
    793e:	d10d      	bne.n	795c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    7940:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7944:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7948:	f89d 000f 	ldrb.w	r0, [sp, #15]
    794c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7950:	9300      	str	r3, [sp, #0]
    7952:	4613      	mov	r3, r2
    7954:	2200      	movs	r2, #0
    7956:	f000 f96d 	bl	7c34 <Ftm_Pwm_Ip_UpdatePwmChannel>
    795a:	e027      	b.n	79ac <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    795c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7960:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7964:	4917      	ldr	r1, [pc, #92]	; (79c4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    7966:	0092      	lsls	r2, r2, #2
    7968:	4413      	add	r3, r2
    796a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    796e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7972:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7976:	4618      	mov	r0, r3
    7978:	f7ff f90a 	bl	6b90 <Ftm_Pwm_Ip_CalculatePhaseShift>
    797c:	4603      	mov	r3, r0
    797e:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    7982:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7986:	f89d 3019 	ldrb.w	r3, [sp, #25]
    798a:	490e      	ldr	r1, [pc, #56]	; (79c4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    798c:	0092      	lsls	r2, r2, #2
    798e:	4413      	add	r3, r2
    7990:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    7994:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    7998:	f89d 100e 	ldrb.w	r1, [sp, #14]
    799c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    79a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79a4:	9300      	str	r3, [sp, #0]
    79a6:	4623      	mov	r3, r4
    79a8:	f000 f944 	bl	7c34 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    79ac:	f002 fafe 	bl	9fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    79b0:	bf00      	nop
    79b2:	b008      	add	sp, #32
    79b4:	bd10      	pop	{r4, pc}
    79b6:	bf00      	nop
    79b8:	0000bd70 	.word	0x0000bd70
    79bc:	1fff8d04 	.word	0x1fff8d04
    79c0:	1fff8ed4 	.word	0x1fff8ed4
    79c4:	1fff8d44 	.word	0x1fff8d44

000079c8 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    79c8:	b510      	push	{r4, lr}
    79ca:	b084      	sub	sp, #16
    79cc:	4604      	mov	r4, r0
    79ce:	4608      	mov	r0, r1
    79d0:	4611      	mov	r1, r2
    79d2:	461a      	mov	r2, r3
    79d4:	4623      	mov	r3, r4
    79d6:	f88d 3007 	strb.w	r3, [sp, #7]
    79da:	4603      	mov	r3, r0
    79dc:	f88d 3006 	strb.w	r3, [sp, #6]
    79e0:	460b      	mov	r3, r1
    79e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    79e6:	4613      	mov	r3, r2
    79e8:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    79ec:	2300      	movs	r3, #0
    79ee:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    79f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79f6:	4a29      	ldr	r2, [pc, #164]	; (7a9c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    79f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79fc:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    79fe:	f002 fafb 	bl	9ff8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7a02:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7a06:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a0a:	4925      	ldr	r1, [pc, #148]	; (7aa0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    7a0c:	00d2      	lsls	r2, r2, #3
    7a0e:	4413      	add	r3, r2
    7a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7a14:	2b02      	cmp	r3, #2
    7a16:	d111      	bne.n	7a3c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    7a18:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7a1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a20:	491f      	ldr	r1, [pc, #124]	; (7aa0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    7a22:	00d2      	lsls	r2, r2, #3
    7a24:	4413      	add	r3, r2
    7a26:	2201      	movs	r2, #1
    7a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    7a2c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a30:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a34:	2300      	movs	r3, #0
    7a36:	2200      	movs	r2, #0
    7a38:	f000 f836 	bl	7aa8 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    7a3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a44:	2200      	movs	r2, #0
    7a46:	4618      	mov	r0, r3
    7a48:	f000 f988 	bl	7d5c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    7a4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a50:	4914      	ldr	r1, [pc, #80]	; (7aa4 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    7a52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    7a5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7a5e:	2b00      	cmp	r3, #0
    7a60:	d103      	bne.n	7a6a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    7a62:	2300      	movs	r3, #0
    7a64:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a68:	e003      	b.n	7a72 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    7a6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7a6e:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    7a72:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7a76:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7a7a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a7e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a82:	f7ff fedb 	bl	783c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7a86:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7a8a:	4619      	mov	r1, r3
    7a8c:	9802      	ldr	r0, [sp, #8]
    7a8e:	f7fe f959 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    7a92:	f002 fadd 	bl	a050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    7a96:	bf00      	nop
    7a98:	b004      	add	sp, #16
    7a9a:	bd10      	pop	{r4, pc}
    7a9c:	0000bd70 	.word	0x0000bd70
    7aa0:	1fff8ed4 	.word	0x1fff8ed4
    7aa4:	1fff8cfc 	.word	0x1fff8cfc

00007aa8 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    7aa8:	b500      	push	{lr}
    7aaa:	b089      	sub	sp, #36	; 0x24
    7aac:	9200      	str	r2, [sp, #0]
    7aae:	461a      	mov	r2, r3
    7ab0:	4603      	mov	r3, r0
    7ab2:	f88d 3007 	strb.w	r3, [sp, #7]
    7ab6:	460b      	mov	r3, r1
    7ab8:	f88d 3006 	strb.w	r3, [sp, #6]
    7abc:	4613      	mov	r3, r2
    7abe:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ac6:	4a58      	ldr	r2, [pc, #352]	; (7c28 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    7ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7acc:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    7ace:	2300      	movs	r3, #0
    7ad0:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    7ad4:	2300      	movs	r3, #0
    7ad6:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    7ada:	2300      	movs	r3, #0
    7adc:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    7ae0:	2300      	movs	r3, #0
    7ae2:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7ae6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7aea:	4619      	mov	r1, r3
    7aec:	9805      	ldr	r0, [sp, #20]
    7aee:	f7fe fd89 	bl	6604 <Ftm_Pwm_Ip_GetChannelMode>
    7af2:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    7af4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7af8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7afc:	494b      	ldr	r1, [pc, #300]	; (7c2c <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    7afe:	00d2      	lsls	r2, r2, #3
    7b00:	4413      	add	r3, r2
    7b02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    7b06:	2b02      	cmp	r3, #2
    7b08:	d109      	bne.n	7b1e <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    7b0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7b0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b12:	4947      	ldr	r1, [pc, #284]	; (7c30 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    7b14:	00d2      	lsls	r2, r2, #3
    7b16:	4413      	add	r3, r2
    7b18:	2200      	movs	r2, #0
    7b1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    7b1e:	9805      	ldr	r0, [sp, #20]
    7b20:	f7fe fd5f 	bl	65e2 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    7b24:	4603      	mov	r3, r0
    7b26:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7b2a:	9b03      	ldr	r3, [sp, #12]
    7b2c:	2b22      	cmp	r3, #34	; 0x22
    7b2e:	d008      	beq.n	7b42 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    7b30:	9b03      	ldr	r3, [sp, #12]
    7b32:	2b62      	cmp	r3, #98	; 0x62
    7b34:	d005      	beq.n	7b42 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7b36:	9b03      	ldr	r3, [sp, #12]
    7b38:	2b61      	cmp	r3, #97	; 0x61
    7b3a:	d002      	beq.n	7b42 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7b3c:	9b03      	ldr	r3, [sp, #12]
    7b3e:	2b21      	cmp	r3, #33	; 0x21
    7b40:	d103      	bne.n	7b4a <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    7b42:	2303      	movs	r3, #3
    7b44:	f8ad 301c 	strh.w	r3, [sp, #28]
    7b48:	e002      	b.n	7b50 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    7b4a:	2301      	movs	r3, #1
    7b4c:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    7b50:	9805      	ldr	r0, [sp, #20]
    7b52:	f7fe fd4f 	bl	65f4 <Ftm_Pwm_Ip_GetPolInstance>
    7b56:	4603      	mov	r3, r0
    7b58:	4619      	mov	r1, r3
    7b5a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b62:	fa02 f303 	lsl.w	r3, r2, r3
    7b66:	b29b      	uxth	r3, r3
    7b68:	400b      	ands	r3, r1
    7b6a:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    7b6e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7b72:	021b      	lsls	r3, r3, #8
    7b74:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    7b78:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7b7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b80:	3308      	adds	r3, #8
    7b82:	fa02 f303 	lsl.w	r3, r2, r3
    7b86:	b29b      	uxth	r3, r3
    7b88:	43db      	mvns	r3, r3
    7b8a:	b29a      	uxth	r2, r3
    7b8c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b90:	4013      	ands	r3, r2
    7b92:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    7b96:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d027      	beq.n	7bee <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    7b9e:	9b00      	ldr	r3, [sp, #0]
    7ba0:	2b01      	cmp	r3, #1
    7ba2:	d109      	bne.n	7bb8 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    7ba4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7ba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bac:	3308      	adds	r3, #8
    7bae:	fa02 f303 	lsl.w	r3, r2, r3
    7bb2:	f8ad 301a 	strh.w	r3, [sp, #26]
    7bb6:	e002      	b.n	7bbe <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    7bb8:	2300      	movs	r3, #0
    7bba:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    7bbe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    7bc2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7bc6:	4053      	eors	r3, r2
    7bc8:	b29a      	uxth	r2, r3
    7bca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7bce:	4313      	orrs	r3, r2
    7bd0:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    7bd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7bd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bdc:	fa02 f303 	lsl.w	r3, r2, r3
    7be0:	b29a      	uxth	r2, r3
    7be2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7be6:	4313      	orrs	r3, r2
    7be8:	f8ad 301e 	strh.w	r3, [sp, #30]
    7bec:	e00d      	b.n	7c0a <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    7bee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7bf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7bf6:	fa02 f303 	lsl.w	r3, r2, r3
    7bfa:	b29b      	uxth	r3, r3
    7bfc:	43db      	mvns	r3, r3
    7bfe:	b29a      	uxth	r2, r3
    7c00:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7c04:	4013      	ands	r3, r2
    7c06:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    7c0a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7c0e:	4619      	mov	r1, r3
    7c10:	9805      	ldr	r0, [sp, #20]
    7c12:	f7fe fc86 	bl	6522 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    7c16:	2101      	movs	r1, #1
    7c18:	9805      	ldr	r0, [sp, #20]
    7c1a:	f7fe f893 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    7c1e:	bf00      	nop
    7c20:	b009      	add	sp, #36	; 0x24
    7c22:	f85d fb04 	ldr.w	pc, [sp], #4
    7c26:	bf00      	nop
    7c28:	0000bd70 	.word	0x0000bd70
    7c2c:	1fff8ed4 	.word	0x1fff8ed4
    7c30:	1fff8d04 	.word	0x1fff8d04

00007c34 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    7c34:	b510      	push	{r4, lr}
    7c36:	b086      	sub	sp, #24
    7c38:	4604      	mov	r4, r0
    7c3a:	4608      	mov	r0, r1
    7c3c:	4611      	mov	r1, r2
    7c3e:	461a      	mov	r2, r3
    7c40:	4623      	mov	r3, r4
    7c42:	f88d 3007 	strb.w	r3, [sp, #7]
    7c46:	4603      	mov	r3, r0
    7c48:	f88d 3006 	strb.w	r3, [sp, #6]
    7c4c:	460b      	mov	r3, r1
    7c4e:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c52:	4613      	mov	r3, r2
    7c54:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c5c:	4a3d      	ldr	r2, [pc, #244]	; (7d54 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    7c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c62:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    7c64:	2300      	movs	r3, #0
    7c66:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    7c68:	2300      	movs	r3, #0
    7c6a:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    7c6e:	2300      	movs	r3, #0
    7c70:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    7c74:	2300      	movs	r3, #0
    7c76:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    7c7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7c7e:	085b      	lsrs	r3, r3, #1
    7c80:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    7c84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c88:	4a33      	ldr	r2, [pc, #204]	; (7d58 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    7c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7c8e:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    7c92:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c96:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7c9a:	429a      	cmp	r2, r3
    7c9c:	d805      	bhi.n	7caa <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    7c9e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    7ca2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7ca6:	429a      	cmp	r2, r3
    7ca8:	d903      	bls.n	7cb2 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    7caa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7cae:	2b00      	cmp	r3, #0
    7cb0:	d108      	bne.n	7cc4 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    7cb2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7cb6:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    7cba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cbe:	f8ad 3010 	strh.w	r3, [sp, #16]
    7cc2:	e001      	b.n	7cc8 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    7cc4:	2301      	movs	r3, #1
    7cc6:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    7cc8:	9b05      	ldr	r3, [sp, #20]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d13e      	bne.n	7d4c <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    7cce:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7cd2:	4619      	mov	r1, r3
    7cd4:	9803      	ldr	r0, [sp, #12]
    7cd6:	f7fe f8d5 	bl	5e84 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    7cda:	4603      	mov	r3, r0
    7cdc:	2b00      	cmp	r3, #0
    7cde:	d016      	beq.n	7d0e <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    7ce0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7ce4:	005b      	lsls	r3, r3, #1
    7ce6:	b2db      	uxtb	r3, r3
    7ce8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7cec:	4619      	mov	r1, r3
    7cee:	9803      	ldr	r0, [sp, #12]
    7cf0:	f7fd ff70 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    7cf4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7cf8:	005b      	lsls	r3, r3, #1
    7cfa:	b2db      	uxtb	r3, r3
    7cfc:	3301      	adds	r3, #1
    7cfe:	b2db      	uxtb	r3, r3
    7d00:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    7d04:	4619      	mov	r1, r3
    7d06:	9803      	ldr	r0, [sp, #12]
    7d08:	f7fd ff64 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>
    7d0c:	e018      	b.n	7d40 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7d0e:	9803      	ldr	r0, [sp, #12]
    7d10:	f7fd fde9 	bl	58e6 <Ftm_Pwm_Ip_GetCpwms>
    7d14:	4603      	mov	r3, r0
    7d16:	2b01      	cmp	r3, #1
    7d18:	d10a      	bne.n	7d30 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    7d1a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    7d1e:	085b      	lsrs	r3, r3, #1
    7d20:	b29a      	uxth	r2, r3
    7d22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d26:	4619      	mov	r1, r3
    7d28:	9803      	ldr	r0, [sp, #12]
    7d2a:	f7fd ff53 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>
    7d2e:	e007      	b.n	7d40 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    7d30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    7d34:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d38:	4619      	mov	r1, r3
    7d3a:	9803      	ldr	r0, [sp, #12]
    7d3c:	f7fd ff4a 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7d40:	f89d 3020 	ldrb.w	r3, [sp, #32]
    7d44:	4619      	mov	r1, r3
    7d46:	9803      	ldr	r0, [sp, #12]
    7d48:	f7fd fffc 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    7d4c:	9b05      	ldr	r3, [sp, #20]
}
    7d4e:	4618      	mov	r0, r3
    7d50:	b006      	add	sp, #24
    7d52:	bd10      	pop	{r4, pc}
    7d54:	0000bd70 	.word	0x0000bd70
    7d58:	1fff8cfc 	.word	0x1fff8cfc

00007d5c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    7d5c:	b500      	push	{lr}
    7d5e:	b085      	sub	sp, #20
    7d60:	4603      	mov	r3, r0
    7d62:	9100      	str	r1, [sp, #0]
    7d64:	f88d 3007 	strb.w	r3, [sp, #7]
    7d68:	4613      	mov	r3, r2
    7d6a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d72:	4a16      	ldr	r2, [pc, #88]	; (7dcc <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    7d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d78:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    7d7a:	2300      	movs	r3, #0
    7d7c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    7d7e:	9b00      	ldr	r3, [sp, #0]
    7d80:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    7d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d86:	9a00      	ldr	r2, [sp, #0]
    7d88:	b291      	uxth	r1, r2
    7d8a:	4a11      	ldr	r2, [pc, #68]	; (7dd0 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    7d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    7d90:	9802      	ldr	r0, [sp, #8]
    7d92:	f7fd fda8 	bl	58e6 <Ftm_Pwm_Ip_GetCpwms>
    7d96:	4603      	mov	r3, r0
    7d98:	2b01      	cmp	r3, #1
    7d9a:	d103      	bne.n	7da4 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    7d9c:	9b03      	ldr	r3, [sp, #12]
    7d9e:	085b      	lsrs	r3, r3, #1
    7da0:	9303      	str	r3, [sp, #12]
    7da2:	e002      	b.n	7daa <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    7da4:	9b03      	ldr	r3, [sp, #12]
    7da6:	3b01      	subs	r3, #1
    7da8:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    7daa:	9b03      	ldr	r3, [sp, #12]
    7dac:	b29b      	uxth	r3, r3
    7dae:	4619      	mov	r1, r3
    7db0:	9802      	ldr	r0, [sp, #8]
    7db2:	f7fd fdeb 	bl	598c <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    7db6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7dba:	4619      	mov	r1, r3
    7dbc:	9802      	ldr	r0, [sp, #8]
    7dbe:	f7fd ffc1 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    7dc2:	2300      	movs	r3, #0
}
    7dc4:	4618      	mov	r0, r3
    7dc6:	b005      	add	sp, #20
    7dc8:	f85d fb04 	ldr.w	pc, [sp], #4
    7dcc:	0000bd70 	.word	0x0000bd70
    7dd0:	1fff8cfc 	.word	0x1fff8cfc

00007dd4 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    7dd4:	b500      	push	{lr}
    7dd6:	b085      	sub	sp, #20
    7dd8:	4603      	mov	r3, r0
    7dda:	460a      	mov	r2, r1
    7ddc:	f88d 3007 	strb.w	r3, [sp, #7]
    7de0:	4613      	mov	r3, r2
    7de2:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dea:	4a0d      	ldr	r2, [pc, #52]	; (7e20 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    7dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df0:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    7df2:	f002 f9a5 	bl	a140 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    7df6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7dfa:	4619      	mov	r1, r3
    7dfc:	9802      	ldr	r0, [sp, #8]
    7dfe:	f7fd fed3 	bl	5ba8 <Ftm_Pwm_Ip_GetChOutputValue>
    7e02:	4603      	mov	r3, r0
    7e04:	2b00      	cmp	r3, #0
    7e06:	d002      	beq.n	7e0e <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    7e08:	2301      	movs	r3, #1
    7e0a:	9303      	str	r3, [sp, #12]
    7e0c:	e001      	b.n	7e12 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    7e0e:	2300      	movs	r3, #0
    7e10:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    7e12:	f002 f9c1 	bl	a198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    7e16:	9b03      	ldr	r3, [sp, #12]
}
    7e18:	4618      	mov	r0, r3
    7e1a:	b005      	add	sp, #20
    7e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    7e20:	0000bd70 	.word	0x0000bd70

00007e24 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    7e24:	b500      	push	{lr}
    7e26:	b087      	sub	sp, #28
    7e28:	4603      	mov	r3, r0
    7e2a:	9100      	str	r1, [sp, #0]
    7e2c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e34:	4a38      	ldr	r2, [pc, #224]	; (7f18 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    7e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e3a:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    7e3c:	9b00      	ldr	r3, [sp, #0]
    7e3e:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    7e42:	f002 f9cf 	bl	a1e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7e46:	9b00      	ldr	r3, [sp, #0]
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d014      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
    7e4c:	9b00      	ldr	r3, [sp, #0]
    7e4e:	2b01      	cmp	r3, #1
    7e50:	d011      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7e52:	9b00      	ldr	r3, [sp, #0]
    7e54:	2b02      	cmp	r3, #2
    7e56:	d00e      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7e58:	9b00      	ldr	r3, [sp, #0]
    7e5a:	2b03      	cmp	r3, #3
    7e5c:	d00b      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7e5e:	9b00      	ldr	r3, [sp, #0]
    7e60:	2b04      	cmp	r3, #4
    7e62:	d008      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    7e64:	9b00      	ldr	r3, [sp, #0]
    7e66:	2b05      	cmp	r3, #5
    7e68:	d005      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    7e6a:	9b00      	ldr	r3, [sp, #0]
    7e6c:	2b06      	cmp	r3, #6
    7e6e:	d002      	beq.n	7e76 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    7e70:	9b00      	ldr	r3, [sp, #0]
    7e72:	2b07      	cmp	r3, #7
    7e74:	d136      	bne.n	7ee4 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    7e76:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7e7a:	085b      	lsrs	r3, r3, #1
    7e7c:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    7e80:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7e84:	4619      	mov	r1, r3
    7e86:	9805      	ldr	r0, [sp, #20]
    7e88:	f7fe fbbc 	bl	6604 <Ftm_Pwm_Ip_GetChannelMode>
    7e8c:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    7e8e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e96:	4611      	mov	r1, r2
    7e98:	4618      	mov	r0, r3
    7e9a:	f7fe ff47 	bl	6d2c <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7e9e:	9b03      	ldr	r3, [sp, #12]
    7ea0:	2b22      	cmp	r3, #34	; 0x22
    7ea2:	d008      	beq.n	7eb6 <Ftm_Pwm_Ip_DisableNotification+0x92>
    7ea4:	9b03      	ldr	r3, [sp, #12]
    7ea6:	2b62      	cmp	r3, #98	; 0x62
    7ea8:	d005      	beq.n	7eb6 <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7eaa:	9b03      	ldr	r3, [sp, #12]
    7eac:	2b61      	cmp	r3, #97	; 0x61
    7eae:	d002      	beq.n	7eb6 <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7eb0:	9b03      	ldr	r3, [sp, #12]
    7eb2:	2b21      	cmp	r3, #33	; 0x21
    7eb4:	d129      	bne.n	7f0a <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    7eb6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7eba:	005b      	lsls	r3, r3, #1
    7ebc:	b2da      	uxtb	r2, r3
    7ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ec2:	4611      	mov	r1, r2
    7ec4:	4618      	mov	r0, r3
    7ec6:	f7fe ff31 	bl	6d2c <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    7eca:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7ece:	005b      	lsls	r3, r3, #1
    7ed0:	b2db      	uxtb	r3, r3
    7ed2:	3301      	adds	r3, #1
    7ed4:	b2da      	uxtb	r2, r3
    7ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eda:	4611      	mov	r1, r2
    7edc:	4618      	mov	r0, r3
    7ede:	f7fe ff25 	bl	6d2c <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7ee2:	e012      	b.n	7f0a <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    7ee4:	9b00      	ldr	r3, [sp, #0]
    7ee6:	2b0a      	cmp	r3, #10
    7ee8:	d107      	bne.n	7efa <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    7eea:	2100      	movs	r1, #0
    7eec:	9805      	ldr	r0, [sp, #20]
    7eee:	f7fe fd88 	bl	6a02 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    7ef2:	9805      	ldr	r0, [sp, #20]
    7ef4:	f7fe fd9b 	bl	6a2e <Ftm_Pwm_Ip_ClearFaultFlag>
    7ef8:	e008      	b.n	7f0c <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    7efa:	9805      	ldr	r0, [sp, #20]
    7efc:	f7fd fd18 	bl	5930 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    7f00:	2100      	movs	r1, #0
    7f02:	9805      	ldr	r0, [sp, #20]
    7f04:	f7fd fcfd 	bl	5902 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    7f08:	e000      	b.n	7f0c <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f0a:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    7f0c:	f002 f996 	bl	a23c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    7f10:	bf00      	nop
    7f12:	b007      	add	sp, #28
    7f14:	f85d fb04 	ldr.w	pc, [sp], #4
    7f18:	0000bd70 	.word	0x0000bd70

00007f1c <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    7f1c:	b500      	push	{lr}
    7f1e:	b087      	sub	sp, #28
    7f20:	4603      	mov	r3, r0
    7f22:	460a      	mov	r2, r1
    7f24:	f88d 3007 	strb.w	r3, [sp, #7]
    7f28:	4613      	mov	r3, r2
    7f2a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f32:	4a22      	ldr	r2, [pc, #136]	; (7fbc <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    7f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f38:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    7f3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f3e:	085b      	lsrs	r3, r3, #1
    7f40:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    7f44:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f48:	4619      	mov	r1, r3
    7f4a:	9805      	ldr	r0, [sp, #20]
    7f4c:	f7fe fb5a 	bl	6604 <Ftm_Pwm_Ip_GetChannelMode>
    7f50:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    7f52:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f56:	2201      	movs	r2, #1
    7f58:	4619      	mov	r1, r3
    7f5a:	9805      	ldr	r0, [sp, #20]
    7f5c:	f7fd fde9 	bl	5b32 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    7f60:	9b03      	ldr	r3, [sp, #12]
    7f62:	2b22      	cmp	r3, #34	; 0x22
    7f64:	d008      	beq.n	7f78 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    7f66:	9b03      	ldr	r3, [sp, #12]
    7f68:	2b62      	cmp	r3, #98	; 0x62
    7f6a:	d005      	beq.n	7f78 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    7f6c:	9b03      	ldr	r3, [sp, #12]
    7f6e:	2b61      	cmp	r3, #97	; 0x61
    7f70:	d002      	beq.n	7f78 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    7f72:	9b03      	ldr	r3, [sp, #12]
    7f74:	2b21      	cmp	r3, #33	; 0x21
    7f76:	d11d      	bne.n	7fb4 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    7f78:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f7c:	005b      	lsls	r3, r3, #1
    7f7e:	b2db      	uxtb	r3, r3
    7f80:	3301      	adds	r3, #1
    7f82:	b2db      	uxtb	r3, r3
    7f84:	4619      	mov	r1, r3
    7f86:	9805      	ldr	r0, [sp, #20]
    7f88:	f7fd fdf6 	bl	5b78 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    7f8c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7f90:	005b      	lsls	r3, r3, #1
    7f92:	b2db      	uxtb	r3, r3
    7f94:	2201      	movs	r2, #1
    7f96:	4619      	mov	r1, r3
    7f98:	9805      	ldr	r0, [sp, #20]
    7f9a:	f7fd fdca 	bl	5b32 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    7f9e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7fa2:	005b      	lsls	r3, r3, #1
    7fa4:	b2db      	uxtb	r3, r3
    7fa6:	3301      	adds	r3, #1
    7fa8:	b2db      	uxtb	r3, r3
    7faa:	2201      	movs	r2, #1
    7fac:	4619      	mov	r1, r3
    7fae:	9805      	ldr	r0, [sp, #20]
    7fb0:	f7fd fdbf 	bl	5b32 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    7fb4:	bf00      	nop
    7fb6:	b007      	add	sp, #28
    7fb8:	f85d fb04 	ldr.w	pc, [sp], #4
    7fbc:	0000bd70 	.word	0x0000bd70

00007fc0 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    7fc0:	b500      	push	{lr}
    7fc2:	b085      	sub	sp, #20
    7fc4:	4603      	mov	r3, r0
    7fc6:	9100      	str	r1, [sp, #0]
    7fc8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    7fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7fd0:	4a23      	ldr	r2, [pc, #140]	; (8060 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    7fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fd6:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    7fd8:	9b00      	ldr	r3, [sp, #0]
    7fda:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    7fde:	f002 f953 	bl	a288 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    7fe2:	9b00      	ldr	r3, [sp, #0]
    7fe4:	2b00      	cmp	r3, #0
    7fe6:	d014      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
    7fe8:	9b00      	ldr	r3, [sp, #0]
    7fea:	2b01      	cmp	r3, #1
    7fec:	d011      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    7fee:	9b00      	ldr	r3, [sp, #0]
    7ff0:	2b02      	cmp	r3, #2
    7ff2:	d00e      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    7ff4:	9b00      	ldr	r3, [sp, #0]
    7ff6:	2b03      	cmp	r3, #3
    7ff8:	d00b      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    7ffa:	9b00      	ldr	r3, [sp, #0]
    7ffc:	2b04      	cmp	r3, #4
    7ffe:	d008      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    8000:	9b00      	ldr	r3, [sp, #0]
    8002:	2b05      	cmp	r3, #5
    8004:	d005      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    8006:	9b00      	ldr	r3, [sp, #0]
    8008:	2b06      	cmp	r3, #6
    800a:	d002      	beq.n	8012 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    800c:	9b00      	ldr	r3, [sp, #0]
    800e:	2b07      	cmp	r3, #7
    8010:	d10e      	bne.n	8030 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    8012:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8016:	4619      	mov	r1, r3
    8018:	9803      	ldr	r0, [sp, #12]
    801a:	f7fd fdad 	bl	5b78 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    801e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8026:	4611      	mov	r1, r2
    8028:	4618      	mov	r0, r3
    802a:	f7ff ff77 	bl	7f1c <Ftm_Pwm_Ip_SetNormalNotificationCase>
    802e:	e011      	b.n	8054 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    8030:	9b00      	ldr	r3, [sp, #0]
    8032:	2b0a      	cmp	r3, #10
    8034:	d107      	bne.n	8046 <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    8036:	9803      	ldr	r0, [sp, #12]
    8038:	f7fe fcf9 	bl	6a2e <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    803c:	2101      	movs	r1, #1
    803e:	9803      	ldr	r0, [sp, #12]
    8040:	f7fe fcdf 	bl	6a02 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    8044:	e006      	b.n	8054 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    8046:	9803      	ldr	r0, [sp, #12]
    8048:	f7fd fc72 	bl	5930 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    804c:	2101      	movs	r1, #1
    804e:	9803      	ldr	r0, [sp, #12]
    8050:	f7fd fc57 	bl	5902 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    8054:	f002 f944 	bl	a2e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    8058:	bf00      	nop
    805a:	b005      	add	sp, #20
    805c:	f85d fb04 	ldr.w	pc, [sp], #4
    8060:	0000bd70 	.word	0x0000bd70

00008064 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    8064:	b500      	push	{lr}
    8066:	b085      	sub	sp, #20
    8068:	4603      	mov	r3, r0
    806a:	9100      	str	r1, [sp, #0]
    806c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8070:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8074:	4a0c      	ldr	r2, [pc, #48]	; (80a8 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    8076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    807a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    807c:	9b00      	ldr	r3, [sp, #0]
    807e:	2b01      	cmp	r3, #1
    8080:	d104      	bne.n	808c <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    8082:	2100      	movs	r1, #0
    8084:	9803      	ldr	r0, [sp, #12]
    8086:	f7fd fc07 	bl	5898 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    808a:	e008      	b.n	809e <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    808c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8090:	4a06      	ldr	r2, [pc, #24]	; (80ac <Ftm_Pwm_Ip_SetPowerState+0x48>)
    8092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8096:	4619      	mov	r1, r3
    8098:	9803      	ldr	r0, [sp, #12]
    809a:	f7fd fbfd 	bl	5898 <Ftm_Pwm_Ip_SetClockSource>
}
    809e:	bf00      	nop
    80a0:	b005      	add	sp, #20
    80a2:	f85d fb04 	ldr.w	pc, [sp], #4
    80a6:	bf00      	nop
    80a8:	0000bd70 	.word	0x0000bd70
    80ac:	1fff8ff4 	.word	0x1fff8ff4

000080b0 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    80b0:	b500      	push	{lr}
    80b2:	b085      	sub	sp, #20
    80b4:	4603      	mov	r3, r0
    80b6:	9100      	str	r1, [sp, #0]
    80b8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    80bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80c0:	4a0e      	ldr	r2, [pc, #56]	; (80fc <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    80c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80c6:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    80c8:	9b00      	ldr	r3, [sp, #0]
    80ca:	2b01      	cmp	r3, #1
    80cc:	d109      	bne.n	80e2 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    80ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80d2:	4a0b      	ldr	r2, [pc, #44]	; (8100 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    80d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80d8:	4619      	mov	r1, r3
    80da:	9803      	ldr	r0, [sp, #12]
    80dc:	f7fd fbcc 	bl	5878 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    80e0:	e008      	b.n	80f4 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    80e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80e6:	4a07      	ldr	r2, [pc, #28]	; (8104 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    80e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ec:	4619      	mov	r1, r3
    80ee:	9803      	ldr	r0, [sp, #12]
    80f0:	f7fd fbc2 	bl	5878 <Ftm_Pwm_Ip_SetClockPs>
}
    80f4:	bf00      	nop
    80f6:	b005      	add	sp, #20
    80f8:	f85d fb04 	ldr.w	pc, [sp], #4
    80fc:	0000bd70 	.word	0x0000bd70
    8100:	1fff9014 	.word	0x1fff9014
    8104:	1fff9004 	.word	0x1fff9004

00008108 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    8108:	b500      	push	{lr}
    810a:	b085      	sub	sp, #20
    810c:	4603      	mov	r3, r0
    810e:	460a      	mov	r2, r1
    8110:	f88d 3007 	strb.w	r3, [sp, #7]
    8114:	4613      	mov	r3, r2
    8116:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    811a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    811e:	4a07      	ldr	r2, [pc, #28]	; (813c <Ftm_Pwm_Ip_ResetCounter+0x34>)
    8120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8124:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    8126:	f89d 3006 	ldrb.w	r3, [sp, #6]
    812a:	4619      	mov	r1, r3
    812c:	9803      	ldr	r0, [sp, #12]
    812e:	f7fe f8ae 	bl	628e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    8132:	bf00      	nop
    8134:	b005      	add	sp, #20
    8136:	f85d fb04 	ldr.w	pc, [sp], #4
    813a:	bf00      	nop
    813c:	0000bd70 	.word	0x0000bd70

00008140 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    8140:	b084      	sub	sp, #16
    8142:	4603      	mov	r3, r0
    8144:	460a      	mov	r2, r1
    8146:	f88d 3007 	strb.w	r3, [sp, #7]
    814a:	4613      	mov	r3, r2
    814c:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    8150:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8154:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8158:	4905      	ldr	r1, [pc, #20]	; (8170 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    815a:	00d2      	lsls	r2, r2, #3
    815c:	4413      	add	r3, r2
    815e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8162:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    8166:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    816a:	4618      	mov	r0, r3
    816c:	b004      	add	sp, #16
    816e:	4770      	bx	lr
    8170:	1fff8d04 	.word	0x1fff8d04

00008174 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    8174:	b500      	push	{lr}
    8176:	b087      	sub	sp, #28
    8178:	9202      	str	r2, [sp, #8]
    817a:	9301      	str	r3, [sp, #4]
    817c:	4603      	mov	r3, r0
    817e:	f88d 300f 	strb.w	r3, [sp, #15]
    8182:	460b      	mov	r3, r1
    8184:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8188:	f89d 300f 	ldrb.w	r3, [sp, #15]
    818c:	4a1f      	ldr	r2, [pc, #124]	; (820c <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8192:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    8194:	2300      	movs	r3, #0
    8196:	f88d 3017 	strb.w	r3, [sp, #23]
    819a:	e026      	b.n	81ea <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    819c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81a0:	9a02      	ldr	r2, [sp, #8]
    81a2:	4413      	add	r3, r2
    81a4:	7819      	ldrb	r1, [r3, #0]
    81a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81aa:	005b      	lsls	r3, r3, #1
    81ac:	9a01      	ldr	r2, [sp, #4]
    81ae:	4413      	add	r3, r2
    81b0:	881b      	ldrh	r3, [r3, #0]
    81b2:	461a      	mov	r2, r3
    81b4:	9804      	ldr	r0, [sp, #16]
    81b6:	f7fd fd0d 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    81ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81be:	005b      	lsls	r3, r3, #1
    81c0:	9a01      	ldr	r2, [sp, #4]
    81c2:	441a      	add	r2, r3
    81c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81c8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    81cc:	9802      	ldr	r0, [sp, #8]
    81ce:	4401      	add	r1, r0
    81d0:	7809      	ldrb	r1, [r1, #0]
    81d2:	4608      	mov	r0, r1
    81d4:	8811      	ldrh	r1, [r2, #0]
    81d6:	4a0e      	ldr	r2, [pc, #56]	; (8210 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    81d8:	00db      	lsls	r3, r3, #3
    81da:	4403      	add	r3, r0
    81dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    81e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    81e4:	3301      	adds	r3, #1
    81e6:	f88d 3017 	strb.w	r3, [sp, #23]
    81ea:	f89d 2017 	ldrb.w	r2, [sp, #23]
    81ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81f2:	429a      	cmp	r2, r3
    81f4:	d3d2      	bcc.n	819c <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    81f6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    81fa:	4619      	mov	r1, r3
    81fc:	9804      	ldr	r0, [sp, #16]
    81fe:	f7fd fda1 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    8202:	bf00      	nop
    8204:	b007      	add	sp, #28
    8206:	f85d fb04 	ldr.w	pc, [sp], #4
    820a:	bf00      	nop
    820c:	0000bd70 	.word	0x0000bd70
    8210:	1fff8d04 	.word	0x1fff8d04

00008214 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    8214:	b500      	push	{lr}
    8216:	b085      	sub	sp, #20
    8218:	4603      	mov	r3, r0
    821a:	9100      	str	r1, [sp, #0]
    821c:	f88d 3007 	strb.w	r3, [sp, #7]
    8220:	4613      	mov	r3, r2
    8222:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8226:	f89d 3007 	ldrb.w	r3, [sp, #7]
    822a:	4a0b      	ldr	r2, [pc, #44]	; (8258 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    822c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8230:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    8232:	f002 f8cd 	bl	a3d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    8236:	9900      	ldr	r1, [sp, #0]
    8238:	9803      	ldr	r0, [sp, #12]
    823a:	f7fd fde0 	bl	5dfe <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    823e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8242:	4619      	mov	r1, r3
    8244:	9803      	ldr	r0, [sp, #12]
    8246:	f7fd fd7d 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    824a:	f002 f8ed 	bl	a428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    824e:	bf00      	nop
    8250:	b005      	add	sp, #20
    8252:	f85d fb04 	ldr.w	pc, [sp], #4
    8256:	bf00      	nop
    8258:	0000bd70 	.word	0x0000bd70

0000825c <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    825c:	b500      	push	{lr}
    825e:	b085      	sub	sp, #20
    8260:	4603      	mov	r3, r0
    8262:	9100      	str	r1, [sp, #0]
    8264:	f88d 3007 	strb.w	r3, [sp, #7]
    8268:	4613      	mov	r3, r2
    826a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    826e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8272:	4a0b      	ldr	r2, [pc, #44]	; (82a0 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    8274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8278:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    827a:	f002 f8fb 	bl	a474 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    827e:	9900      	ldr	r1, [sp, #0]
    8280:	9803      	ldr	r0, [sp, #12]
    8282:	f7fd fdcb 	bl	5e1c <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    8286:	f89d 3006 	ldrb.w	r3, [sp, #6]
    828a:	4619      	mov	r1, r3
    828c:	9803      	ldr	r0, [sp, #12]
    828e:	f7fd fd59 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    8292:	f002 f91b 	bl	a4cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    8296:	bf00      	nop
    8298:	b005      	add	sp, #20
    829a:	f85d fb04 	ldr.w	pc, [sp], #4
    829e:	bf00      	nop
    82a0:	0000bd70 	.word	0x0000bd70

000082a4 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    82a4:	b510      	push	{r4, lr}
    82a6:	b084      	sub	sp, #16
    82a8:	4604      	mov	r4, r0
    82aa:	4608      	mov	r0, r1
    82ac:	4611      	mov	r1, r2
    82ae:	461a      	mov	r2, r3
    82b0:	4623      	mov	r3, r4
    82b2:	f88d 3007 	strb.w	r3, [sp, #7]
    82b6:	4603      	mov	r3, r0
    82b8:	f88d 3006 	strb.w	r3, [sp, #6]
    82bc:	460b      	mov	r3, r1
    82be:	f8ad 3004 	strh.w	r3, [sp, #4]
    82c2:	4613      	mov	r3, r2
    82c4:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    82c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82cc:	4a2e      	ldr	r2, [pc, #184]	; (8388 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    82ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d2:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    82d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    82d8:	085b      	lsrs	r3, r3, #1
    82da:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    82de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82e2:	492a      	ldr	r1, [pc, #168]	; (838c <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    82e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    82e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    82ec:	f002 f914 	bl	a518 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    82f0:	9803      	ldr	r0, [sp, #12]
    82f2:	f7fd faf8 	bl	58e6 <Ftm_Pwm_Ip_GetCpwms>
    82f6:	4603      	mov	r3, r0
    82f8:	2b01      	cmp	r3, #1
    82fa:	d108      	bne.n	830e <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    82fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8300:	085b      	lsrs	r3, r3, #1
    8302:	b29b      	uxth	r3, r3
    8304:	4619      	mov	r1, r3
    8306:	9803      	ldr	r0, [sp, #12]
    8308:	f7fd fb40 	bl	598c <Ftm_Pwm_Ip_SetMod>
    830c:	e007      	b.n	831e <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    830e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8312:	3b01      	subs	r3, #1
    8314:	b29b      	uxth	r3, r3
    8316:	4619      	mov	r1, r3
    8318:	9803      	ldr	r0, [sp, #12]
    831a:	f7fd fb37 	bl	598c <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    831e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8322:	005b      	lsls	r3, r3, #1
    8324:	b2db      	uxtb	r3, r3
    8326:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    832a:	4619      	mov	r1, r3
    832c:	9803      	ldr	r0, [sp, #12]
    832e:	f7fd fc51 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    8332:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8336:	085b      	lsrs	r3, r3, #1
    8338:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    833c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8340:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8344:	4912      	ldr	r1, [pc, #72]	; (8390 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    8346:	00d2      	lsls	r2, r2, #3
    8348:	4413      	add	r3, r2
    834a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    834e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    8352:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8356:	005b      	lsls	r3, r3, #1
    8358:	b2db      	uxtb	r3, r3
    835a:	3301      	adds	r3, #1
    835c:	b2d9      	uxtb	r1, r3
    835e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    8362:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    8366:	4413      	add	r3, r2
    8368:	b29b      	uxth	r3, r3
    836a:	461a      	mov	r2, r3
    836c:	9803      	ldr	r0, [sp, #12]
    836e:	f7fd fc31 	bl	5bd4 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    8372:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8376:	4619      	mov	r1, r3
    8378:	9803      	ldr	r0, [sp, #12]
    837a:	f7fd fce3 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    837e:	f002 f8f7 	bl	a570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    8382:	bf00      	nop
    8384:	b004      	add	sp, #16
    8386:	bd10      	pop	{r4, pc}
    8388:	0000bd70 	.word	0x0000bd70
    838c:	1fff8cfc 	.word	0x1fff8cfc
    8390:	1fff8d04 	.word	0x1fff8d04

00008394 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    8394:	b510      	push	{r4, lr}
    8396:	b086      	sub	sp, #24
    8398:	4604      	mov	r4, r0
    839a:	4608      	mov	r0, r1
    839c:	4611      	mov	r1, r2
    839e:	461a      	mov	r2, r3
    83a0:	4623      	mov	r3, r4
    83a2:	f88d 300f 	strb.w	r3, [sp, #15]
    83a6:	4603      	mov	r3, r0
    83a8:	f88d 300e 	strb.w	r3, [sp, #14]
    83ac:	460b      	mov	r3, r1
    83ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    83b2:	4613      	mov	r3, r2
    83b4:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    83b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83bc:	085b      	lsrs	r3, r3, #1
    83be:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    83c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    83ca:	492d      	ldr	r1, [pc, #180]	; (8480 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    83cc:	0092      	lsls	r2, r2, #2
    83ce:	4413      	add	r3, r2
    83d0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    83d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    83d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    83dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83e0:	4928      	ldr	r1, [pc, #160]	; (8484 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    83e2:	00d2      	lsls	r2, r2, #3
    83e4:	4413      	add	r3, r2
    83e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    83ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    83ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    83f2:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    83f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    83fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    83fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8402:	4618      	mov	r0, r3
    8404:	f7fe fbc4 	bl	6b90 <Ftm_Pwm_Ip_CalculatePhaseShift>
    8408:	4603      	mov	r3, r0
    840a:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    840e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    8412:	2b00      	cmp	r3, #0
    8414:	d003      	beq.n	841e <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    8416:	2300      	movs	r3, #0
    8418:	f88d 3017 	strb.w	r3, [sp, #23]
    841c:	e002      	b.n	8424 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    841e:	2301      	movs	r3, #1
    8420:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    8424:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8428:	f89d 300e 	ldrb.w	r3, [sp, #14]
    842c:	4916      	ldr	r1, [pc, #88]	; (8488 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    842e:	00d2      	lsls	r2, r2, #3
    8430:	4413      	add	r3, r2
    8432:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8436:	2b02      	cmp	r3, #2
    8438:	d111      	bne.n	845e <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    843a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    843e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8442:	4911      	ldr	r1, [pc, #68]	; (8488 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    8444:	00d2      	lsls	r2, r2, #3
    8446:	4413      	add	r3, r2
    8448:	2201      	movs	r2, #1
    844a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    844e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8452:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8456:	2300      	movs	r3, #0
    8458:	2200      	movs	r2, #0
    845a:	f7ff fb25 	bl	7aa8 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    845e:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    8462:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    8466:	f89d 100e 	ldrb.w	r1, [sp, #14]
    846a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    846e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8472:	9300      	str	r3, [sp, #0]
    8474:	4623      	mov	r3, r4
    8476:	f7ff fbdd 	bl	7c34 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    847a:	bf00      	nop
    847c:	b006      	add	sp, #24
    847e:	bd10      	pop	{r4, pc}
    8480:	1fff8d44 	.word	0x1fff8d44
    8484:	1fff8d04 	.word	0x1fff8d04
    8488:	1fff8ed4 	.word	0x1fff8ed4

0000848c <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    848c:	b500      	push	{lr}
    848e:	b085      	sub	sp, #20
    8490:	4603      	mov	r3, r0
    8492:	9100      	str	r1, [sp, #0]
    8494:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    8498:	f89d 3007 	ldrb.w	r3, [sp, #7]
    849c:	4a07      	ldr	r2, [pc, #28]	; (84bc <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    849e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84a2:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    84a4:	f002 f88a 	bl	a5bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    84a8:	9900      	ldr	r1, [sp, #0]
    84aa:	9803      	ldr	r0, [sp, #12]
    84ac:	f7fd fdea 	bl	6084 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    84b0:	f002 f8b0 	bl	a614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    84b4:	bf00      	nop
    84b6:	b005      	add	sp, #20
    84b8:	f85d fb04 	ldr.w	pc, [sp], #4
    84bc:	0000bd70 	.word	0x0000bd70

000084c0 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    84c0:	b500      	push	{lr}
    84c2:	b085      	sub	sp, #20
    84c4:	4603      	mov	r3, r0
    84c6:	9100      	str	r1, [sp, #0]
    84c8:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    84d0:	4a07      	ldr	r2, [pc, #28]	; (84f0 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    84d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84d6:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    84d8:	f002 f8c2 	bl	a660 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    84dc:	9900      	ldr	r1, [sp, #0]
    84de:	9803      	ldr	r0, [sp, #12]
    84e0:	f7fd fddd 	bl	609e <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    84e4:	f002 f8e8 	bl	a6b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    84e8:	bf00      	nop
    84ea:	b005      	add	sp, #20
    84ec:	f85d fb04 	ldr.w	pc, [sp], #4
    84f0:	0000bd70 	.word	0x0000bd70

000084f4 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    84f4:	b500      	push	{lr}
    84f6:	b085      	sub	sp, #20
    84f8:	4603      	mov	r3, r0
    84fa:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    84fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8502:	4a08      	ldr	r2, [pc, #32]	; (8524 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    8504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8508:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    850a:	f002 f8fb 	bl	a704 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    850e:	2101      	movs	r1, #1
    8510:	9803      	ldr	r0, [sp, #12]
    8512:	f7fd fc17 	bl	5d44 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    8516:	f002 f921 	bl	a75c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    851a:	bf00      	nop
    851c:	b005      	add	sp, #20
    851e:	f85d fb04 	ldr.w	pc, [sp], #4
    8522:	bf00      	nop
    8524:	0000bd70 	.word	0x0000bd70

00008528 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    8528:	b500      	push	{lr}
    852a:	b085      	sub	sp, #20
    852c:	4603      	mov	r3, r0
    852e:	f88d 3007 	strb.w	r3, [sp, #7]
    8532:	460b      	mov	r3, r1
    8534:	f88d 3006 	strb.w	r3, [sp, #6]
    8538:	4613      	mov	r3, r2
    853a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    853e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8542:	4a17      	ldr	r2, [pc, #92]	; (85a0 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    8544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8548:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    854a:	f002 f92d 	bl	a7a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    854e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8552:	2b3f      	cmp	r3, #63	; 0x3f
    8554:	d80b      	bhi.n	856e <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    8556:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    855a:	b2db      	uxtb	r3, r3
    855c:	4619      	mov	r1, r3
    855e:	9803      	ldr	r0, [sp, #12]
    8560:	f7fd fd42 	bl	5fe8 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    8564:	2100      	movs	r1, #0
    8566:	9803      	ldr	r0, [sp, #12]
    8568:	f7fd fd62 	bl	6030 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    856c:	e012      	b.n	8594 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    856e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8572:	b2db      	uxtb	r3, r3
    8574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8578:	b2db      	uxtb	r3, r3
    857a:	4619      	mov	r1, r3
    857c:	9803      	ldr	r0, [sp, #12]
    857e:	f7fd fd33 	bl	5fe8 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    8582:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8586:	099b      	lsrs	r3, r3, #6
    8588:	b29b      	uxth	r3, r3
    858a:	b2db      	uxtb	r3, r3
    858c:	4619      	mov	r1, r3
    858e:	9803      	ldr	r0, [sp, #12]
    8590:	f7fd fd4e 	bl	6030 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    8594:	f002 f934 	bl	a800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    8598:	bf00      	nop
    859a:	b005      	add	sp, #20
    859c:	f85d fb04 	ldr.w	pc, [sp], #4
    85a0:	0000bd70 	.word	0x0000bd70

000085a4 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    85a4:	b082      	sub	sp, #8
    85a6:	9001      	str	r0, [sp, #4]
    85a8:	460b      	mov	r3, r1
    85aa:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    85ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    85b2:	4618      	mov	r0, r3
    85b4:	b002      	add	sp, #8
    85b6:	4770      	bx	lr

000085b8 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    85b8:	b510      	push	{r4, lr}
    85ba:	b084      	sub	sp, #16
    85bc:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    85be:	2300      	movs	r3, #0
    85c0:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    85c2:	493e      	ldr	r1, [pc, #248]	; (86bc <Pwm_Init+0x104>)
    85c4:	9a02      	ldr	r2, [sp, #8]
    85c6:	4613      	mov	r3, r2
    85c8:	00db      	lsls	r3, r3, #3
    85ca:	1a9b      	subs	r3, r3, r2
    85cc:	009b      	lsls	r3, r3, #2
    85ce:	440b      	add	r3, r1
    85d0:	9a01      	ldr	r2, [sp, #4]
    85d2:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    85d4:	2300      	movs	r3, #0
    85d6:	f88d 300f 	strb.w	r3, [sp, #15]
    85da:	e017      	b.n	860c <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    85dc:	4937      	ldr	r1, [pc, #220]	; (86bc <Pwm_Init+0x104>)
    85de:	9a02      	ldr	r2, [sp, #8]
    85e0:	4613      	mov	r3, r2
    85e2:	00db      	lsls	r3, r3, #3
    85e4:	1a9b      	subs	r3, r3, r2
    85e6:	009b      	lsls	r3, r3, #2
    85e8:	440b      	add	r3, r1
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	68d9      	ldr	r1, [r3, #12]
    85ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    85f2:	4613      	mov	r3, r2
    85f4:	005b      	lsls	r3, r3, #1
    85f6:	4413      	add	r3, r2
    85f8:	009b      	lsls	r3, r3, #2
    85fa:	440b      	add	r3, r1
    85fc:	4618      	mov	r0, r3
    85fe:	f000 f985 	bl	890c <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8602:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8606:	3301      	adds	r3, #1
    8608:	f88d 300f 	strb.w	r3, [sp, #15]
    860c:	492b      	ldr	r1, [pc, #172]	; (86bc <Pwm_Init+0x104>)
    860e:	9a02      	ldr	r2, [sp, #8]
    8610:	4613      	mov	r3, r2
    8612:	00db      	lsls	r3, r3, #3
    8614:	1a9b      	subs	r3, r3, r2
    8616:	009b      	lsls	r3, r3, #2
    8618:	440b      	add	r3, r1
    861a:	681b      	ldr	r3, [r3, #0]
    861c:	7a1b      	ldrb	r3, [r3, #8]
    861e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8622:	429a      	cmp	r2, r3
    8624:	d3da      	bcc.n	85dc <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    8626:	2300      	movs	r3, #0
    8628:	f88d 300f 	strb.w	r3, [sp, #15]
    862c:	e034      	b.n	8698 <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    862e:	4923      	ldr	r1, [pc, #140]	; (86bc <Pwm_Init+0x104>)
    8630:	9a02      	ldr	r2, [sp, #8]
    8632:	4613      	mov	r3, r2
    8634:	00db      	lsls	r3, r3, #3
    8636:	1a9b      	subs	r3, r3, r2
    8638:	009b      	lsls	r3, r3, #2
    863a:	440b      	add	r3, r1
    863c:	681b      	ldr	r3, [r3, #0]
    863e:	6859      	ldr	r1, [r3, #4]
    8640:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8644:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8648:	4613      	mov	r3, r2
    864a:	005b      	lsls	r3, r3, #1
    864c:	4413      	add	r3, r2
    864e:	00db      	lsls	r3, r3, #3
    8650:	4419      	add	r1, r3
    8652:	4c1a      	ldr	r4, [pc, #104]	; (86bc <Pwm_Init+0x104>)
    8654:	9a02      	ldr	r2, [sp, #8]
    8656:	4613      	mov	r3, r2
    8658:	00db      	lsls	r3, r3, #3
    865a:	1a9b      	subs	r3, r3, r2
    865c:	4403      	add	r3, r0
    865e:	3302      	adds	r3, #2
    8660:	009b      	lsls	r3, r3, #2
    8662:	4423      	add	r3, r4
    8664:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    8666:	4915      	ldr	r1, [pc, #84]	; (86bc <Pwm_Init+0x104>)
    8668:	9a02      	ldr	r2, [sp, #8]
    866a:	4613      	mov	r3, r2
    866c:	00db      	lsls	r3, r3, #3
    866e:	1a9b      	subs	r3, r3, r2
    8670:	009b      	lsls	r3, r3, #2
    8672:	440b      	add	r3, r1
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	6859      	ldr	r1, [r3, #4]
    8678:	f89d 200f 	ldrb.w	r2, [sp, #15]
    867c:	4613      	mov	r3, r2
    867e:	005b      	lsls	r3, r3, #1
    8680:	4413      	add	r3, r2
    8682:	00db      	lsls	r3, r3, #3
    8684:	3308      	adds	r3, #8
    8686:	440b      	add	r3, r1
    8688:	4618      	mov	r0, r3
    868a:	f000 f91d 	bl	88c8 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    868e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8692:	3301      	adds	r3, #1
    8694:	f88d 300f 	strb.w	r3, [sp, #15]
    8698:	4908      	ldr	r1, [pc, #32]	; (86bc <Pwm_Init+0x104>)
    869a:	9a02      	ldr	r2, [sp, #8]
    869c:	4613      	mov	r3, r2
    869e:	00db      	lsls	r3, r3, #3
    86a0:	1a9b      	subs	r3, r3, r2
    86a2:	009b      	lsls	r3, r3, #2
    86a4:	440b      	add	r3, r1
    86a6:	681b      	ldr	r3, [r3, #0]
    86a8:	781b      	ldrb	r3, [r3, #0]
    86aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86ae:	429a      	cmp	r2, r3
    86b0:	d3bd      	bcc.n	862e <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    86b2:	bf00      	nop
    86b4:	bf00      	nop
    86b6:	b004      	add	sp, #16
    86b8:	bd10      	pop	{r4, pc}
    86ba:	bf00      	nop
    86bc:	1fff8b24 	.word	0x1fff8b24

000086c0 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    86c0:	b500      	push	{lr}
    86c2:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    86c4:	2300      	movs	r3, #0
    86c6:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    86c8:	2300      	movs	r3, #0
    86ca:	f88d 300f 	strb.w	r3, [sp, #15]
    86ce:	e02a      	b.n	8726 <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    86d0:	4945      	ldr	r1, [pc, #276]	; (87e8 <Pwm_DeInit+0x128>)
    86d2:	9a02      	ldr	r2, [sp, #8]
    86d4:	4613      	mov	r3, r2
    86d6:	00db      	lsls	r3, r3, #3
    86d8:	1a9b      	subs	r3, r3, r2
    86da:	009b      	lsls	r3, r3, #2
    86dc:	440b      	add	r3, r1
    86de:	330c      	adds	r3, #12
    86e0:	6819      	ldr	r1, [r3, #0]
    86e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    86e6:	4613      	mov	r3, r2
    86e8:	005b      	lsls	r3, r3, #1
    86ea:	4413      	add	r3, r2
    86ec:	00db      	lsls	r3, r3, #3
    86ee:	440b      	add	r3, r1
    86f0:	f103 0008 	add.w	r0, r3, #8
    86f4:	493c      	ldr	r1, [pc, #240]	; (87e8 <Pwm_DeInit+0x128>)
    86f6:	9a02      	ldr	r2, [sp, #8]
    86f8:	4613      	mov	r3, r2
    86fa:	00db      	lsls	r3, r3, #3
    86fc:	1a9b      	subs	r3, r3, r2
    86fe:	009b      	lsls	r3, r3, #2
    8700:	440b      	add	r3, r1
    8702:	330c      	adds	r3, #12
    8704:	6819      	ldr	r1, [r3, #0]
    8706:	f89d 200f 	ldrb.w	r2, [sp, #15]
    870a:	4613      	mov	r3, r2
    870c:	005b      	lsls	r3, r3, #1
    870e:	4413      	add	r3, r2
    8710:	00db      	lsls	r3, r3, #3
    8712:	440b      	add	r3, r1
    8714:	695b      	ldr	r3, [r3, #20]
    8716:	4619      	mov	r1, r3
    8718:	f000 f94e 	bl	89b8 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    871c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8720:	3301      	adds	r3, #1
    8722:	f88d 300f 	strb.w	r3, [sp, #15]
    8726:	4930      	ldr	r1, [pc, #192]	; (87e8 <Pwm_DeInit+0x128>)
    8728:	9a02      	ldr	r2, [sp, #8]
    872a:	4613      	mov	r3, r2
    872c:	00db      	lsls	r3, r3, #3
    872e:	1a9b      	subs	r3, r3, r2
    8730:	009b      	lsls	r3, r3, #2
    8732:	440b      	add	r3, r1
    8734:	681b      	ldr	r3, [r3, #0]
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	f89d 200f 	ldrb.w	r2, [sp, #15]
    873c:	429a      	cmp	r2, r3
    873e:	d3c7      	bcc.n	86d0 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    8740:	4929      	ldr	r1, [pc, #164]	; (87e8 <Pwm_DeInit+0x128>)
    8742:	9a02      	ldr	r2, [sp, #8]
    8744:	4613      	mov	r3, r2
    8746:	00db      	lsls	r3, r3, #3
    8748:	1a9b      	subs	r3, r3, r2
    874a:	009b      	lsls	r3, r3, #2
    874c:	440b      	add	r3, r1
    874e:	681b      	ldr	r3, [r3, #0]
    8750:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8752:	2300      	movs	r3, #0
    8754:	f88d 300f 	strb.w	r3, [sp, #15]
    8758:	e010      	b.n	877c <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    875a:	9b01      	ldr	r3, [sp, #4]
    875c:	68d9      	ldr	r1, [r3, #12]
    875e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8762:	4613      	mov	r3, r2
    8764:	005b      	lsls	r3, r3, #1
    8766:	4413      	add	r3, r2
    8768:	009b      	lsls	r3, r3, #2
    876a:	440b      	add	r3, r1
    876c:	4618      	mov	r0, r3
    876e:	f000 f943 	bl	89f8 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    8772:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8776:	3301      	adds	r3, #1
    8778:	f88d 300f 	strb.w	r3, [sp, #15]
    877c:	491a      	ldr	r1, [pc, #104]	; (87e8 <Pwm_DeInit+0x128>)
    877e:	9a02      	ldr	r2, [sp, #8]
    8780:	4613      	mov	r3, r2
    8782:	00db      	lsls	r3, r3, #3
    8784:	1a9b      	subs	r3, r3, r2
    8786:	009b      	lsls	r3, r3, #2
    8788:	440b      	add	r3, r1
    878a:	681b      	ldr	r3, [r3, #0]
    878c:	7a1b      	ldrb	r3, [r3, #8]
    878e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8792:	429a      	cmp	r2, r3
    8794:	d3e1      	bcc.n	875a <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    8796:	4914      	ldr	r1, [pc, #80]	; (87e8 <Pwm_DeInit+0x128>)
    8798:	9a02      	ldr	r2, [sp, #8]
    879a:	4613      	mov	r3, r2
    879c:	00db      	lsls	r3, r3, #3
    879e:	1a9b      	subs	r3, r3, r2
    87a0:	009b      	lsls	r3, r3, #2
    87a2:	440b      	add	r3, r1
    87a4:	2200      	movs	r2, #0
    87a6:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    87a8:	2300      	movs	r3, #0
    87aa:	f88d 300f 	strb.w	r3, [sp, #15]
    87ae:	e011      	b.n	87d4 <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    87b0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    87b4:	480c      	ldr	r0, [pc, #48]	; (87e8 <Pwm_DeInit+0x128>)
    87b6:	9a02      	ldr	r2, [sp, #8]
    87b8:	4613      	mov	r3, r2
    87ba:	00db      	lsls	r3, r3, #3
    87bc:	1a9b      	subs	r3, r3, r2
    87be:	440b      	add	r3, r1
    87c0:	3302      	adds	r3, #2
    87c2:	009b      	lsls	r3, r3, #2
    87c4:	4403      	add	r3, r0
    87c6:	2200      	movs	r2, #0
    87c8:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    87ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87ce:	3301      	adds	r3, #1
    87d0:	f88d 300f 	strb.w	r3, [sp, #15]
    87d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    87d8:	2b02      	cmp	r3, #2
    87da:	d9e9      	bls.n	87b0 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    87dc:	bf00      	nop
    87de:	bf00      	nop
    87e0:	b005      	add	sp, #20
    87e2:	f85d fb04 	ldr.w	pc, [sp], #4
    87e6:	bf00      	nop
    87e8:	1fff8b24 	.word	0x1fff8b24

000087ec <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    87ec:	b500      	push	{lr}
    87ee:	b087      	sub	sp, #28
    87f0:	4603      	mov	r3, r0
    87f2:	460a      	mov	r2, r1
    87f4:	f88d 3007 	strb.w	r3, [sp, #7]
    87f8:	4613      	mov	r3, r2
    87fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    87fe:	2300      	movs	r3, #0
    8800:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8804:	2300      	movs	r3, #0
    8806:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    8808:	f89d 3007 	ldrb.w	r3, [sp, #7]
    880c:	4619      	mov	r1, r3
    880e:	9804      	ldr	r0, [sp, #16]
    8810:	f7ff fec8 	bl	85a4 <Pwm_GetPartitionChannelIdx>
    8814:	4603      	mov	r3, r0
    8816:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    881a:	490f      	ldr	r1, [pc, #60]	; (8858 <Pwm_SetDutyCycle+0x6c>)
    881c:	9a04      	ldr	r2, [sp, #16]
    881e:	4613      	mov	r3, r2
    8820:	00db      	lsls	r3, r3, #3
    8822:	1a9b      	subs	r3, r3, r2
    8824:	009b      	lsls	r3, r3, #2
    8826:	440b      	add	r3, r1
    8828:	330c      	adds	r3, #12
    882a:	6819      	ldr	r1, [r3, #0]
    882c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8830:	4613      	mov	r3, r2
    8832:	005b      	lsls	r3, r3, #1
    8834:	4413      	add	r3, r2
    8836:	00db      	lsls	r3, r3, #3
    8838:	440b      	add	r3, r1
    883a:	f103 0208 	add.w	r2, r3, #8
    883e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8842:	4611      	mov	r1, r2
    8844:	4618      	mov	r0, r3
    8846:	f000 f8f3 	bl	8a30 <Pwm_Ipw_SetDutyCycle>
    884a:	4603      	mov	r3, r0
    884c:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    8850:	bf00      	nop
    8852:	b007      	add	sp, #28
    8854:	f85d fb04 	ldr.w	pc, [sp], #4
    8858:	1fff8b24 	.word	0x1fff8b24

0000885c <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    885c:	b500      	push	{lr}
    885e:	b085      	sub	sp, #20
    8860:	4603      	mov	r3, r0
    8862:	f88d 3007 	strb.w	r3, [sp, #7]
    8866:	460b      	mov	r3, r1
    8868:	f8ad 3004 	strh.w	r3, [sp, #4]
    886c:	4613      	mov	r3, r2
    886e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    8872:	2300      	movs	r3, #0
    8874:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    8876:	f89d 3007 	ldrb.w	r3, [sp, #7]
    887a:	4619      	mov	r1, r3
    887c:	9803      	ldr	r0, [sp, #12]
    887e:	f7ff fe91 	bl	85a4 <Pwm_GetPartitionChannelIdx>
    8882:	4603      	mov	r3, r0
    8884:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    8888:	490e      	ldr	r1, [pc, #56]	; (88c4 <Pwm_SetPeriodAndDuty+0x68>)
    888a:	9a03      	ldr	r2, [sp, #12]
    888c:	4613      	mov	r3, r2
    888e:	00db      	lsls	r3, r3, #3
    8890:	1a9b      	subs	r3, r3, r2
    8892:	009b      	lsls	r3, r3, #2
    8894:	440b      	add	r3, r1
    8896:	330c      	adds	r3, #12
    8898:	6819      	ldr	r1, [r3, #0]
    889a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    889e:	4613      	mov	r3, r2
    88a0:	005b      	lsls	r3, r3, #1
    88a2:	4413      	add	r3, r2
    88a4:	00db      	lsls	r3, r3, #3
    88a6:	440b      	add	r3, r1
    88a8:	f103 0208 	add.w	r2, r3, #8
    88ac:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    88b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    88b4:	4618      	mov	r0, r3
    88b6:	f000 f907 	bl	8ac8 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    88ba:	bf00      	nop
    88bc:	b005      	add	sp, #20
    88be:	f85d fb04 	ldr.w	pc, [sp], #4
    88c2:	bf00      	nop
    88c4:	1fff8b24 	.word	0x1fff8b24

000088c8 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    88c8:	b410      	push	{r4}
    88ca:	b083      	sub	sp, #12
    88cc:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    88ce:	9b01      	ldr	r3, [sp, #4]
    88d0:	681b      	ldr	r3, [r3, #0]
    88d2:	2b00      	cmp	r3, #0
    88d4:	d010      	beq.n	88f8 <Pwm_Ipw_Init+0x30>
    88d6:	2b01      	cmp	r3, #1
    88d8:	d110      	bne.n	88fc <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    88da:	9b01      	ldr	r3, [sp, #4]
    88dc:	7a1b      	ldrb	r3, [r3, #8]
    88de:	461c      	mov	r4, r3
    88e0:	9b01      	ldr	r3, [sp, #4]
    88e2:	685b      	ldr	r3, [r3, #4]
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	4618      	mov	r0, r3
    88e8:	9b01      	ldr	r3, [sp, #4]
    88ea:	8959      	ldrh	r1, [r3, #10]
    88ec:	4a06      	ldr	r2, [pc, #24]	; (8908 <Pwm_Ipw_Init+0x40>)
    88ee:	00e3      	lsls	r3, r4, #3
    88f0:	4403      	add	r3, r0
    88f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    88f6:	e002      	b.n	88fe <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    88f8:	bf00      	nop
    88fa:	e000      	b.n	88fe <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    88fc:	bf00      	nop
    }
}
    88fe:	bf00      	nop
    8900:	b003      	add	sp, #12
    8902:	f85d 4b04 	ldr.w	r4, [sp], #4
    8906:	4770      	bx	lr
    8908:	1fff90a4 	.word	0x1fff90a4

0000890c <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    890c:	b500      	push	{lr}
    890e:	b085      	sub	sp, #20
    8910:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    8912:	2300      	movs	r3, #0
    8914:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    8918:	2300      	movs	r3, #0
    891a:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    891e:	9b01      	ldr	r3, [sp, #4]
    8920:	685b      	ldr	r3, [r3, #4]
    8922:	2b00      	cmp	r3, #0
    8924:	d03c      	beq.n	89a0 <Pwm_Ipw_InitInstance+0x94>
    8926:	2b01      	cmp	r3, #1
    8928:	d13c      	bne.n	89a4 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    892a:	9b01      	ldr	r3, [sp, #4]
    892c:	689b      	ldr	r3, [r3, #8]
    892e:	2b00      	cmp	r3, #0
    8930:	d03a      	beq.n	89a8 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    8932:	9b01      	ldr	r3, [sp, #4]
    8934:	781a      	ldrb	r2, [r3, #0]
    8936:	9b01      	ldr	r3, [sp, #4]
    8938:	689b      	ldr	r3, [r3, #8]
    893a:	4619      	mov	r1, r3
    893c:	4610      	mov	r0, r2
    893e:	f7fe fed7 	bl	76f0 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    8942:	2300      	movs	r3, #0
    8944:	f88d 300f 	strb.w	r3, [sp, #15]
    8948:	e022      	b.n	8990 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    894a:	9b01      	ldr	r3, [sp, #4]
    894c:	689b      	ldr	r3, [r3, #8]
    894e:	685a      	ldr	r2, [r3, #4]
    8950:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8954:	009b      	lsls	r3, r3, #2
    8956:	4413      	add	r3, r2
    8958:	681b      	ldr	r3, [r3, #0]
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    8960:	9b01      	ldr	r3, [sp, #4]
    8962:	689b      	ldr	r3, [r3, #8]
    8964:	685a      	ldr	r2, [r3, #4]
    8966:	f89d 300f 	ldrb.w	r3, [sp, #15]
    896a:	009b      	lsls	r3, r3, #2
    896c:	4413      	add	r3, r2
    896e:	681a      	ldr	r2, [r3, #0]
    8970:	9b01      	ldr	r3, [sp, #4]
    8972:	781b      	ldrb	r3, [r3, #0]
    8974:	4619      	mov	r1, r3
    8976:	f89d 300e 	ldrb.w	r3, [sp, #14]
    897a:	6a12      	ldr	r2, [r2, #32]
    897c:	480d      	ldr	r0, [pc, #52]	; (89b4 <Pwm_Ipw_InitInstance+0xa8>)
    897e:	00c9      	lsls	r1, r1, #3
    8980:	440b      	add	r3, r1
    8982:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    8986:	f89d 300f 	ldrb.w	r3, [sp, #15]
    898a:	3301      	adds	r3, #1
    898c:	f88d 300f 	strb.w	r3, [sp, #15]
    8990:	9b01      	ldr	r3, [sp, #4]
    8992:	689b      	ldr	r3, [r3, #8]
    8994:	7a1b      	ldrb	r3, [r3, #8]
    8996:	f89d 200f 	ldrb.w	r2, [sp, #15]
    899a:	429a      	cmp	r2, r3
    899c:	d3d5      	bcc.n	894a <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    899e:	e003      	b.n	89a8 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    89a0:	bf00      	nop
    89a2:	e002      	b.n	89aa <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    89a4:	bf00      	nop
    89a6:	e000      	b.n	89aa <Pwm_Ipw_InitInstance+0x9e>
            break;
    89a8:	bf00      	nop
    }
}
    89aa:	bf00      	nop
    89ac:	b005      	add	sp, #20
    89ae:	f85d fb04 	ldr.w	pc, [sp], #4
    89b2:	bf00      	nop
    89b4:	1fff9024 	.word	0x1fff9024

000089b8 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    89b8:	b082      	sub	sp, #8
    89ba:	9001      	str	r0, [sp, #4]
    89bc:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    89be:	9b01      	ldr	r3, [sp, #4]
    89c0:	681b      	ldr	r3, [r3, #0]
    89c2:	2b00      	cmp	r3, #0
    89c4:	d00f      	beq.n	89e6 <Pwm_Ipw_DeInit+0x2e>
    89c6:	2b01      	cmp	r3, #1
    89c8:	d10f      	bne.n	89ea <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    89ca:	9b01      	ldr	r3, [sp, #4]
    89cc:	7a1b      	ldrb	r3, [r3, #8]
    89ce:	4618      	mov	r0, r3
    89d0:	9b01      	ldr	r3, [sp, #4]
    89d2:	685b      	ldr	r3, [r3, #4]
    89d4:	781b      	ldrb	r3, [r3, #0]
    89d6:	4619      	mov	r1, r3
    89d8:	4a06      	ldr	r2, [pc, #24]	; (89f4 <Pwm_Ipw_DeInit+0x3c>)
    89da:	00c3      	lsls	r3, r0, #3
    89dc:	440b      	add	r3, r1
    89de:	2100      	movs	r1, #0
    89e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    89e4:	e002      	b.n	89ec <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    89e6:	bf00      	nop
    89e8:	e000      	b.n	89ec <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    89ea:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    89ec:	bf00      	nop
    89ee:	b002      	add	sp, #8
    89f0:	4770      	bx	lr
    89f2:	bf00      	nop
    89f4:	1fff90a4 	.word	0x1fff90a4

000089f8 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    89f8:	b500      	push	{lr}
    89fa:	b083      	sub	sp, #12
    89fc:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    89fe:	9b01      	ldr	r3, [sp, #4]
    8a00:	685b      	ldr	r3, [r3, #4]
    8a02:	2b00      	cmp	r3, #0
    8a04:	d00b      	beq.n	8a1e <Pwm_Ipw_DeInitInstance+0x26>
    8a06:	2b01      	cmp	r3, #1
    8a08:	d10b      	bne.n	8a22 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    8a0a:	9b01      	ldr	r3, [sp, #4]
    8a0c:	689b      	ldr	r3, [r3, #8]
    8a0e:	2b00      	cmp	r3, #0
    8a10:	d009      	beq.n	8a26 <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    8a12:	9b01      	ldr	r3, [sp, #4]
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	4618      	mov	r0, r3
    8a18:	f7fe fec8 	bl	77ac <Ftm_Pwm_Ip_DeInit>
            }
            break;
    8a1c:	e003      	b.n	8a26 <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    8a1e:	bf00      	nop
    8a20:	e002      	b.n	8a28 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    8a22:	bf00      	nop
    8a24:	e000      	b.n	8a28 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    8a26:	bf00      	nop
    }
}
    8a28:	bf00      	nop
    8a2a:	b003      	add	sp, #12
    8a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00008a30 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    8a30:	b500      	push	{lr}
    8a32:	b085      	sub	sp, #20
    8a34:	4603      	mov	r3, r0
    8a36:	9100      	str	r1, [sp, #0]
    8a38:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    8a3c:	2300      	movs	r3, #0
    8a3e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8a42:	2300      	movs	r3, #0
    8a44:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    8a48:	9b00      	ldr	r3, [sp, #0]
    8a4a:	681b      	ldr	r3, [r3, #0]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d02c      	beq.n	8aaa <Pwm_Ipw_SetDutyCycle+0x7a>
    8a50:	2b01      	cmp	r3, #1
    8a52:	d12c      	bne.n	8aae <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8a54:	9b00      	ldr	r3, [sp, #0]
    8a56:	685b      	ldr	r3, [r3, #4]
    8a58:	2b00      	cmp	r3, #0
    8a5a:	d02a      	beq.n	8ab2 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    8a5c:	9b00      	ldr	r3, [sp, #0]
    8a5e:	7a1b      	ldrb	r3, [r3, #8]
    8a60:	461a      	mov	r2, r3
    8a62:	4b17      	ldr	r3, [pc, #92]	; (8ac0 <Pwm_Ipw_SetDutyCycle+0x90>)
    8a64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8a68:	461a      	mov	r2, r3
    8a6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a6e:	fb02 f303 	mul.w	r3, r2, r3
    8a72:	0bdb      	lsrs	r3, r3, #15
    8a74:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8a78:	9b00      	ldr	r3, [sp, #0]
    8a7a:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8a7c:	9b00      	ldr	r3, [sp, #0]
    8a7e:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    8a80:	7819      	ldrb	r1, [r3, #0]
    8a82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8a86:	2301      	movs	r3, #1
    8a88:	f7fe fed8 	bl	783c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8a8c:	9b00      	ldr	r3, [sp, #0]
    8a8e:	7a1b      	ldrb	r3, [r3, #8]
    8a90:	4618      	mov	r0, r3
    8a92:	9b00      	ldr	r3, [sp, #0]
    8a94:	685b      	ldr	r3, [r3, #4]
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	461a      	mov	r2, r3
    8a9a:	490a      	ldr	r1, [pc, #40]	; (8ac4 <Pwm_Ipw_SetDutyCycle+0x94>)
    8a9c:	00c3      	lsls	r3, r0, #3
    8a9e:	4413      	add	r3, r2
    8aa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8aa4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8aa8:	e003      	b.n	8ab2 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8aaa:	bf00      	nop
    8aac:	e002      	b.n	8ab4 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    8aae:	bf00      	nop
    8ab0:	e000      	b.n	8ab4 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    8ab2:	bf00      	nop
    }

    return RetVal;
    8ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8ab8:	4618      	mov	r0, r3
    8aba:	b005      	add	sp, #20
    8abc:	f85d fb04 	ldr.w	pc, [sp], #4
    8ac0:	1fff8cfc 	.word	0x1fff8cfc
    8ac4:	1fff90a4 	.word	0x1fff90a4

00008ac8 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    8ac8:	b510      	push	{r4, lr}
    8aca:	b086      	sub	sp, #24
    8acc:	4603      	mov	r3, r0
    8ace:	9202      	str	r2, [sp, #8]
    8ad0:	f8ad 300e 	strh.w	r3, [sp, #14]
    8ad4:	460b      	mov	r3, r1
    8ad6:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    8ada:	2300      	movs	r3, #0
    8adc:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    8ae0:	9b02      	ldr	r3, [sp, #8]
    8ae2:	681b      	ldr	r3, [r3, #0]
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	d02a      	beq.n	8b3e <Pwm_Ipw_SetPeriodAndDuty+0x76>
    8ae8:	2b01      	cmp	r3, #1
    8aea:	d12a      	bne.n	8b42 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    8aec:	9b02      	ldr	r3, [sp, #8]
    8aee:	685b      	ldr	r3, [r3, #4]
    8af0:	2b00      	cmp	r3, #0
    8af2:	d028      	beq.n	8b46 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    8af4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8af8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8afc:	fb02 f303 	mul.w	r3, r2, r3
    8b00:	0bdb      	lsrs	r3, r3, #15
    8b02:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    8b06:	9b02      	ldr	r3, [sp, #8]
    8b08:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    8b0a:	9b02      	ldr	r3, [sp, #8]
    8b0c:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    8b0e:	7819      	ldrb	r1, [r3, #0]
    8b10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8b14:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8b18:	2401      	movs	r4, #1
    8b1a:	9400      	str	r4, [sp, #0]
    8b1c:	f7fe ff54 	bl	79c8 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    8b20:	9b02      	ldr	r3, [sp, #8]
    8b22:	7a1b      	ldrb	r3, [r3, #8]
    8b24:	4618      	mov	r0, r3
    8b26:	9b02      	ldr	r3, [sp, #8]
    8b28:	685b      	ldr	r3, [r3, #4]
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	461a      	mov	r2, r3
    8b2e:	4908      	ldr	r1, [pc, #32]	; (8b50 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    8b30:	00c3      	lsls	r3, r0, #3
    8b32:	4413      	add	r3, r2
    8b34:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8b38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    8b3c:	e003      	b.n	8b46 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    8b3e:	bf00      	nop
    8b40:	e002      	b.n	8b48 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    8b42:	bf00      	nop
    8b44:	e000      	b.n	8b48 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    8b46:	bf00      	nop
    }
}
    8b48:	bf00      	nop
    8b4a:	b006      	add	sp, #24
    8b4c:	bd10      	pop	{r4, pc}
    8b4e:	bf00      	nop
    8b50:	1fff90a4 	.word	0x1fff90a4

00008b54 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    8b54:	b084      	sub	sp, #16
    8b56:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    8b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8b5c:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    8b5e:	9b01      	ldr	r3, [sp, #4]
    8b60:	681b      	ldr	r3, [r3, #0]
    8b62:	2b01      	cmp	r3, #1
    8b64:	d103      	bne.n	8b6e <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    8b66:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    8b6a:	9303      	str	r3, [sp, #12]
            break;
    8b6c:	e000      	b.n	8b70 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    8b6e:	bf00      	nop
    }

    return RetVal;
    8b70:	9b03      	ldr	r3, [sp, #12]
}
    8b72:	4618      	mov	r0, r3
    8b74:	b004      	add	sp, #16
    8b76:	4770      	bx	lr

00008b78 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
    8b78:	b500      	push	{lr}
    8b7a:	b083      	sub	sp, #12
    8b7c:	f7f7 ffb0 	bl	ae0 <Sys_GetCoreID>
    8b80:	4603      	mov	r3, r0
    8b82:	9301      	str	r3, [sp, #4]
    8b84:	4a10      	ldr	r2, [pc, #64]	; (8bc8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8b86:	9b01      	ldr	r3, [sp, #4]
    8b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d10d      	bne.n	8bac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    8b90:	f7f7 fec4 	bl	91c <Mcu_schm_read_msr>
    8b94:	9000      	str	r0, [sp, #0]
    8b96:	9b00      	ldr	r3, [sp, #0]
    8b98:	f003 0301 	and.w	r3, r3, #1
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d100      	bne.n	8ba2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
    8ba0:	b672      	cpsid	i
    8ba2:	490a      	ldr	r1, [pc, #40]	; (8bcc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    8ba4:	9b01      	ldr	r3, [sp, #4]
    8ba6:	9a00      	ldr	r2, [sp, #0]
    8ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8bac:	4a06      	ldr	r2, [pc, #24]	; (8bc8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8bae:	9b01      	ldr	r3, [sp, #4]
    8bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb4:	1c5a      	adds	r2, r3, #1
    8bb6:	4904      	ldr	r1, [pc, #16]	; (8bc8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8bb8:	9b01      	ldr	r3, [sp, #4]
    8bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8bbe:	bf00      	nop
    8bc0:	b003      	add	sp, #12
    8bc2:	f85d fb04 	ldr.w	pc, [sp], #4
    8bc6:	bf00      	nop
    8bc8:	1fff90e8 	.word	0x1fff90e8
    8bcc:	1fff90e4 	.word	0x1fff90e4

00008bd0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:
    8bd0:	b500      	push	{lr}
    8bd2:	b083      	sub	sp, #12
    8bd4:	f7f7 ff84 	bl	ae0 <Sys_GetCoreID>
    8bd8:	4603      	mov	r3, r0
    8bda:	9301      	str	r3, [sp, #4]
    8bdc:	4a0d      	ldr	r2, [pc, #52]	; (8c14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8bde:	9b01      	ldr	r3, [sp, #4]
    8be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8be4:	1e5a      	subs	r2, r3, #1
    8be6:	490b      	ldr	r1, [pc, #44]	; (8c14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8be8:	9b01      	ldr	r3, [sp, #4]
    8bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8bee:	4a0a      	ldr	r2, [pc, #40]	; (8c18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    8bf0:	9b01      	ldr	r3, [sp, #4]
    8bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bf6:	f003 0301 	and.w	r3, r3, #1
    8bfa:	2b00      	cmp	r3, #0
    8bfc:	d106      	bne.n	8c0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8bfe:	4a05      	ldr	r2, [pc, #20]	; (8c14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    8c00:	9b01      	ldr	r3, [sp, #4]
    8c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c06:	2b00      	cmp	r3, #0
    8c08:	d100      	bne.n	8c0c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    8c0a:	b662      	cpsie	i
    8c0c:	bf00      	nop
    8c0e:	b003      	add	sp, #12
    8c10:	f85d fb04 	ldr.w	pc, [sp], #4
    8c14:	1fff90e8 	.word	0x1fff90e8
    8c18:	1fff90e4 	.word	0x1fff90e4

00008c1c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:
    8c1c:	b500      	push	{lr}
    8c1e:	b083      	sub	sp, #12
    8c20:	f7f7 ff5e 	bl	ae0 <Sys_GetCoreID>
    8c24:	4603      	mov	r3, r0
    8c26:	9301      	str	r3, [sp, #4]
    8c28:	4a10      	ldr	r2, [pc, #64]	; (8c6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c2a:	9b01      	ldr	r3, [sp, #4]
    8c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c30:	2b00      	cmp	r3, #0
    8c32:	d10d      	bne.n	8c50 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    8c34:	f7f7 fe72 	bl	91c <Mcu_schm_read_msr>
    8c38:	9000      	str	r0, [sp, #0]
    8c3a:	9b00      	ldr	r3, [sp, #0]
    8c3c:	f003 0301 	and.w	r3, r3, #1
    8c40:	2b00      	cmp	r3, #0
    8c42:	d100      	bne.n	8c46 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
    8c44:	b672      	cpsid	i
    8c46:	490a      	ldr	r1, [pc, #40]	; (8c70 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8c48:	9b01      	ldr	r3, [sp, #4]
    8c4a:	9a00      	ldr	r2, [sp, #0]
    8c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c50:	4a06      	ldr	r2, [pc, #24]	; (8c6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c52:	9b01      	ldr	r3, [sp, #4]
    8c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c58:	1c5a      	adds	r2, r3, #1
    8c5a:	4904      	ldr	r1, [pc, #16]	; (8c6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8c5c:	9b01      	ldr	r3, [sp, #4]
    8c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c62:	bf00      	nop
    8c64:	b003      	add	sp, #12
    8c66:	f85d fb04 	ldr.w	pc, [sp], #4
    8c6a:	bf00      	nop
    8c6c:	1fff90f0 	.word	0x1fff90f0
    8c70:	1fff90ec 	.word	0x1fff90ec

00008c74 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:
    8c74:	b500      	push	{lr}
    8c76:	b083      	sub	sp, #12
    8c78:	f7f7 ff32 	bl	ae0 <Sys_GetCoreID>
    8c7c:	4603      	mov	r3, r0
    8c7e:	9301      	str	r3, [sp, #4]
    8c80:	4a0d      	ldr	r2, [pc, #52]	; (8cb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c82:	9b01      	ldr	r3, [sp, #4]
    8c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c88:	1e5a      	subs	r2, r3, #1
    8c8a:	490b      	ldr	r1, [pc, #44]	; (8cb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8c8c:	9b01      	ldr	r3, [sp, #4]
    8c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8c92:	4a0a      	ldr	r2, [pc, #40]	; (8cbc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    8c94:	9b01      	ldr	r3, [sp, #4]
    8c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c9a:	f003 0301 	and.w	r3, r3, #1
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d106      	bne.n	8cb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8ca2:	4a05      	ldr	r2, [pc, #20]	; (8cb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8ca4:	9b01      	ldr	r3, [sp, #4]
    8ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8caa:	2b00      	cmp	r3, #0
    8cac:	d100      	bne.n	8cb0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8cae:	b662      	cpsie	i
    8cb0:	bf00      	nop
    8cb2:	b003      	add	sp, #12
    8cb4:	f85d fb04 	ldr.w	pc, [sp], #4
    8cb8:	1fff90f0 	.word	0x1fff90f0
    8cbc:	1fff90ec 	.word	0x1fff90ec

00008cc0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:
    8cc0:	b500      	push	{lr}
    8cc2:	b083      	sub	sp, #12
    8cc4:	f7f7 ff0c 	bl	ae0 <Sys_GetCoreID>
    8cc8:	4603      	mov	r3, r0
    8cca:	9301      	str	r3, [sp, #4]
    8ccc:	4a10      	ldr	r2, [pc, #64]	; (8d10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8cce:	9b01      	ldr	r3, [sp, #4]
    8cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd4:	2b00      	cmp	r3, #0
    8cd6:	d10d      	bne.n	8cf4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    8cd8:	f7f7 fe20 	bl	91c <Mcu_schm_read_msr>
    8cdc:	9000      	str	r0, [sp, #0]
    8cde:	9b00      	ldr	r3, [sp, #0]
    8ce0:	f003 0301 	and.w	r3, r3, #1
    8ce4:	2b00      	cmp	r3, #0
    8ce6:	d100      	bne.n	8cea <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
    8ce8:	b672      	cpsid	i
    8cea:	490a      	ldr	r1, [pc, #40]	; (8d14 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    8cec:	9b01      	ldr	r3, [sp, #4]
    8cee:	9a00      	ldr	r2, [sp, #0]
    8cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8cf4:	4a06      	ldr	r2, [pc, #24]	; (8d10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8cf6:	9b01      	ldr	r3, [sp, #4]
    8cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cfc:	1c5a      	adds	r2, r3, #1
    8cfe:	4904      	ldr	r1, [pc, #16]	; (8d10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    8d00:	9b01      	ldr	r3, [sp, #4]
    8d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d06:	bf00      	nop
    8d08:	b003      	add	sp, #12
    8d0a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d0e:	bf00      	nop
    8d10:	1fff90f8 	.word	0x1fff90f8
    8d14:	1fff90f4 	.word	0x1fff90f4

00008d18 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:
    8d18:	b500      	push	{lr}
    8d1a:	b083      	sub	sp, #12
    8d1c:	f7f7 fee0 	bl	ae0 <Sys_GetCoreID>
    8d20:	4603      	mov	r3, r0
    8d22:	9301      	str	r3, [sp, #4]
    8d24:	4a0d      	ldr	r2, [pc, #52]	; (8d5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d26:	9b01      	ldr	r3, [sp, #4]
    8d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d2c:	1e5a      	subs	r2, r3, #1
    8d2e:	490b      	ldr	r1, [pc, #44]	; (8d5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d30:	9b01      	ldr	r3, [sp, #4]
    8d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d36:	4a0a      	ldr	r2, [pc, #40]	; (8d60 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8d38:	9b01      	ldr	r3, [sp, #4]
    8d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d3e:	f003 0301 	and.w	r3, r3, #1
    8d42:	2b00      	cmp	r3, #0
    8d44:	d106      	bne.n	8d54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8d46:	4a05      	ldr	r2, [pc, #20]	; (8d5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8d48:	9b01      	ldr	r3, [sp, #4]
    8d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d100      	bne.n	8d54 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8d52:	b662      	cpsie	i
    8d54:	bf00      	nop
    8d56:	b003      	add	sp, #12
    8d58:	f85d fb04 	ldr.w	pc, [sp], #4
    8d5c:	1fff90f8 	.word	0x1fff90f8
    8d60:	1fff90f4 	.word	0x1fff90f4

00008d64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
    8d64:	b500      	push	{lr}
    8d66:	b083      	sub	sp, #12
    8d68:	f7f7 feba 	bl	ae0 <Sys_GetCoreID>
    8d6c:	4603      	mov	r3, r0
    8d6e:	9301      	str	r3, [sp, #4]
    8d70:	4a10      	ldr	r2, [pc, #64]	; (8db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d72:	9b01      	ldr	r3, [sp, #4]
    8d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d10d      	bne.n	8d98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    8d7c:	f7f7 fdd7 	bl	92e <Port_schm_read_msr>
    8d80:	9000      	str	r0, [sp, #0]
    8d82:	9b00      	ldr	r3, [sp, #0]
    8d84:	f003 0301 	and.w	r3, r3, #1
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d100      	bne.n	8d8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
    8d8c:	b672      	cpsid	i
    8d8e:	490a      	ldr	r1, [pc, #40]	; (8db8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8d90:	9b01      	ldr	r3, [sp, #4]
    8d92:	9a00      	ldr	r2, [sp, #0]
    8d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8d98:	4a06      	ldr	r2, [pc, #24]	; (8db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8d9a:	9b01      	ldr	r3, [sp, #4]
    8d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da0:	1c5a      	adds	r2, r3, #1
    8da2:	4904      	ldr	r1, [pc, #16]	; (8db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8da4:	9b01      	ldr	r3, [sp, #4]
    8da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8daa:	bf00      	nop
    8dac:	b003      	add	sp, #12
    8dae:	f85d fb04 	ldr.w	pc, [sp], #4
    8db2:	bf00      	nop
    8db4:	1fff9100 	.word	0x1fff9100
    8db8:	1fff90fc 	.word	0x1fff90fc

00008dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:
    8dbc:	b500      	push	{lr}
    8dbe:	b083      	sub	sp, #12
    8dc0:	f7f7 fe8e 	bl	ae0 <Sys_GetCoreID>
    8dc4:	4603      	mov	r3, r0
    8dc6:	9301      	str	r3, [sp, #4]
    8dc8:	4a0d      	ldr	r2, [pc, #52]	; (8e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8dca:	9b01      	ldr	r3, [sp, #4]
    8dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd0:	1e5a      	subs	r2, r3, #1
    8dd2:	490b      	ldr	r1, [pc, #44]	; (8e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8dd4:	9b01      	ldr	r3, [sp, #4]
    8dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8dda:	4a0a      	ldr	r2, [pc, #40]	; (8e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    8ddc:	9b01      	ldr	r3, [sp, #4]
    8dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de2:	f003 0301 	and.w	r3, r3, #1
    8de6:	2b00      	cmp	r3, #0
    8de8:	d106      	bne.n	8df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8dea:	4a05      	ldr	r2, [pc, #20]	; (8e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    8dec:	9b01      	ldr	r3, [sp, #4]
    8dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d100      	bne.n	8df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    8df6:	b662      	cpsie	i
    8df8:	bf00      	nop
    8dfa:	b003      	add	sp, #12
    8dfc:	f85d fb04 	ldr.w	pc, [sp], #4
    8e00:	1fff9100 	.word	0x1fff9100
    8e04:	1fff90fc 	.word	0x1fff90fc

00008e08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:
    8e08:	b500      	push	{lr}
    8e0a:	b083      	sub	sp, #12
    8e0c:	f7f7 fe68 	bl	ae0 <Sys_GetCoreID>
    8e10:	4603      	mov	r3, r0
    8e12:	9301      	str	r3, [sp, #4]
    8e14:	4a10      	ldr	r2, [pc, #64]	; (8e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e16:	9b01      	ldr	r3, [sp, #4]
    8e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d10d      	bne.n	8e3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    8e20:	f7f7 fd85 	bl	92e <Port_schm_read_msr>
    8e24:	9000      	str	r0, [sp, #0]
    8e26:	9b00      	ldr	r3, [sp, #0]
    8e28:	f003 0301 	and.w	r3, r3, #1
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d100      	bne.n	8e32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
    8e30:	b672      	cpsid	i
    8e32:	490a      	ldr	r1, [pc, #40]	; (8e5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    8e34:	9b01      	ldr	r3, [sp, #4]
    8e36:	9a00      	ldr	r2, [sp, #0]
    8e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e3c:	4a06      	ldr	r2, [pc, #24]	; (8e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e3e:	9b01      	ldr	r3, [sp, #4]
    8e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e44:	1c5a      	adds	r2, r3, #1
    8e46:	4904      	ldr	r1, [pc, #16]	; (8e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8e48:	9b01      	ldr	r3, [sp, #4]
    8e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e4e:	bf00      	nop
    8e50:	b003      	add	sp, #12
    8e52:	f85d fb04 	ldr.w	pc, [sp], #4
    8e56:	bf00      	nop
    8e58:	1fff9108 	.word	0x1fff9108
    8e5c:	1fff9104 	.word	0x1fff9104

00008e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:
    8e60:	b500      	push	{lr}
    8e62:	b083      	sub	sp, #12
    8e64:	f7f7 fe3c 	bl	ae0 <Sys_GetCoreID>
    8e68:	4603      	mov	r3, r0
    8e6a:	9301      	str	r3, [sp, #4]
    8e6c:	4a0d      	ldr	r2, [pc, #52]	; (8ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e6e:	9b01      	ldr	r3, [sp, #4]
    8e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e74:	1e5a      	subs	r2, r3, #1
    8e76:	490b      	ldr	r1, [pc, #44]	; (8ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e78:	9b01      	ldr	r3, [sp, #4]
    8e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8e7e:	4a0a      	ldr	r2, [pc, #40]	; (8ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8e80:	9b01      	ldr	r3, [sp, #4]
    8e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e86:	f003 0301 	and.w	r3, r3, #1
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d106      	bne.n	8e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8e8e:	4a05      	ldr	r2, [pc, #20]	; (8ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8e90:	9b01      	ldr	r3, [sp, #4]
    8e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e96:	2b00      	cmp	r3, #0
    8e98:	d100      	bne.n	8e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    8e9a:	b662      	cpsie	i
    8e9c:	bf00      	nop
    8e9e:	b003      	add	sp, #12
    8ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ea4:	1fff9108 	.word	0x1fff9108
    8ea8:	1fff9104 	.word	0x1fff9104

00008eac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:
    8eac:	b500      	push	{lr}
    8eae:	b083      	sub	sp, #12
    8eb0:	f7f7 fe16 	bl	ae0 <Sys_GetCoreID>
    8eb4:	4603      	mov	r3, r0
    8eb6:	9301      	str	r3, [sp, #4]
    8eb8:	4a10      	ldr	r2, [pc, #64]	; (8efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8eba:	9b01      	ldr	r3, [sp, #4]
    8ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d10d      	bne.n	8ee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    8ec4:	f7f7 fd33 	bl	92e <Port_schm_read_msr>
    8ec8:	9000      	str	r0, [sp, #0]
    8eca:	9b00      	ldr	r3, [sp, #0]
    8ecc:	f003 0301 	and.w	r3, r3, #1
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d100      	bne.n	8ed6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
    8ed4:	b672      	cpsid	i
    8ed6:	490a      	ldr	r1, [pc, #40]	; (8f00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    8ed8:	9b01      	ldr	r3, [sp, #4]
    8eda:	9a00      	ldr	r2, [sp, #0]
    8edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ee0:	4a06      	ldr	r2, [pc, #24]	; (8efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8ee2:	9b01      	ldr	r3, [sp, #4]
    8ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ee8:	1c5a      	adds	r2, r3, #1
    8eea:	4904      	ldr	r1, [pc, #16]	; (8efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    8eec:	9b01      	ldr	r3, [sp, #4]
    8eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8ef2:	bf00      	nop
    8ef4:	b003      	add	sp, #12
    8ef6:	f85d fb04 	ldr.w	pc, [sp], #4
    8efa:	bf00      	nop
    8efc:	1fff9110 	.word	0x1fff9110
    8f00:	1fff910c 	.word	0x1fff910c

00008f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:
    8f04:	b500      	push	{lr}
    8f06:	b083      	sub	sp, #12
    8f08:	f7f7 fdea 	bl	ae0 <Sys_GetCoreID>
    8f0c:	4603      	mov	r3, r0
    8f0e:	9301      	str	r3, [sp, #4]
    8f10:	4a0d      	ldr	r2, [pc, #52]	; (8f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f12:	9b01      	ldr	r3, [sp, #4]
    8f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f18:	1e5a      	subs	r2, r3, #1
    8f1a:	490b      	ldr	r1, [pc, #44]	; (8f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f1c:	9b01      	ldr	r3, [sp, #4]
    8f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f22:	4a0a      	ldr	r2, [pc, #40]	; (8f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    8f24:	9b01      	ldr	r3, [sp, #4]
    8f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f2a:	f003 0301 	and.w	r3, r3, #1
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d106      	bne.n	8f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8f32:	4a05      	ldr	r2, [pc, #20]	; (8f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8f34:	9b01      	ldr	r3, [sp, #4]
    8f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d100      	bne.n	8f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8f3e:	b662      	cpsie	i
    8f40:	bf00      	nop
    8f42:	b003      	add	sp, #12
    8f44:	f85d fb04 	ldr.w	pc, [sp], #4
    8f48:	1fff9110 	.word	0x1fff9110
    8f4c:	1fff910c 	.word	0x1fff910c

00008f50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:
    8f50:	b500      	push	{lr}
    8f52:	b083      	sub	sp, #12
    8f54:	f7f7 fdc4 	bl	ae0 <Sys_GetCoreID>
    8f58:	4603      	mov	r3, r0
    8f5a:	9301      	str	r3, [sp, #4]
    8f5c:	4a10      	ldr	r2, [pc, #64]	; (8fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f5e:	9b01      	ldr	r3, [sp, #4]
    8f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d10d      	bne.n	8f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    8f68:	f7f7 fce1 	bl	92e <Port_schm_read_msr>
    8f6c:	9000      	str	r0, [sp, #0]
    8f6e:	9b00      	ldr	r3, [sp, #0]
    8f70:	f003 0301 	and.w	r3, r3, #1
    8f74:	2b00      	cmp	r3, #0
    8f76:	d100      	bne.n	8f7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
    8f78:	b672      	cpsid	i
    8f7a:	490a      	ldr	r1, [pc, #40]	; (8fa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    8f7c:	9b01      	ldr	r3, [sp, #4]
    8f7e:	9a00      	ldr	r2, [sp, #0]
    8f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f84:	4a06      	ldr	r2, [pc, #24]	; (8fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f86:	9b01      	ldr	r3, [sp, #4]
    8f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f8c:	1c5a      	adds	r2, r3, #1
    8f8e:	4904      	ldr	r1, [pc, #16]	; (8fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8f90:	9b01      	ldr	r3, [sp, #4]
    8f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8f96:	bf00      	nop
    8f98:	b003      	add	sp, #12
    8f9a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f9e:	bf00      	nop
    8fa0:	1fff9118 	.word	0x1fff9118
    8fa4:	1fff9114 	.word	0x1fff9114

00008fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:
    8fa8:	b500      	push	{lr}
    8faa:	b083      	sub	sp, #12
    8fac:	f7f7 fd98 	bl	ae0 <Sys_GetCoreID>
    8fb0:	4603      	mov	r3, r0
    8fb2:	9301      	str	r3, [sp, #4]
    8fb4:	4a0d      	ldr	r2, [pc, #52]	; (8fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fb6:	9b01      	ldr	r3, [sp, #4]
    8fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fbc:	1e5a      	subs	r2, r3, #1
    8fbe:	490b      	ldr	r1, [pc, #44]	; (8fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fc0:	9b01      	ldr	r3, [sp, #4]
    8fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    8fc6:	4a0a      	ldr	r2, [pc, #40]	; (8ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    8fc8:	9b01      	ldr	r3, [sp, #4]
    8fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fce:	f003 0301 	and.w	r3, r3, #1
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d106      	bne.n	8fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    8fd6:	4a05      	ldr	r2, [pc, #20]	; (8fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8fd8:	9b01      	ldr	r3, [sp, #4]
    8fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d100      	bne.n	8fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    8fe2:	b662      	cpsie	i
    8fe4:	bf00      	nop
    8fe6:	b003      	add	sp, #12
    8fe8:	f85d fb04 	ldr.w	pc, [sp], #4
    8fec:	1fff9118 	.word	0x1fff9118
    8ff0:	1fff9114 	.word	0x1fff9114

00008ff4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:
    8ff4:	b500      	push	{lr}
    8ff6:	b083      	sub	sp, #12
    8ff8:	f7f7 fd72 	bl	ae0 <Sys_GetCoreID>
    8ffc:	4603      	mov	r3, r0
    8ffe:	9301      	str	r3, [sp, #4]
    9000:	4a10      	ldr	r2, [pc, #64]	; (9044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9002:	9b01      	ldr	r3, [sp, #4]
    9004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9008:	2b00      	cmp	r3, #0
    900a:	d10d      	bne.n	9028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    900c:	f7f7 fc8f 	bl	92e <Port_schm_read_msr>
    9010:	9000      	str	r0, [sp, #0]
    9012:	9b00      	ldr	r3, [sp, #0]
    9014:	f003 0301 	and.w	r3, r3, #1
    9018:	2b00      	cmp	r3, #0
    901a:	d100      	bne.n	901e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
    901c:	b672      	cpsid	i
    901e:	490a      	ldr	r1, [pc, #40]	; (9048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    9020:	9b01      	ldr	r3, [sp, #4]
    9022:	9a00      	ldr	r2, [sp, #0]
    9024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9028:	4a06      	ldr	r2, [pc, #24]	; (9044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    902a:	9b01      	ldr	r3, [sp, #4]
    902c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9030:	1c5a      	adds	r2, r3, #1
    9032:	4904      	ldr	r1, [pc, #16]	; (9044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    9034:	9b01      	ldr	r3, [sp, #4]
    9036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    903a:	bf00      	nop
    903c:	b003      	add	sp, #12
    903e:	f85d fb04 	ldr.w	pc, [sp], #4
    9042:	bf00      	nop
    9044:	1fff9120 	.word	0x1fff9120
    9048:	1fff911c 	.word	0x1fff911c

0000904c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:
    904c:	b500      	push	{lr}
    904e:	b083      	sub	sp, #12
    9050:	f7f7 fd46 	bl	ae0 <Sys_GetCoreID>
    9054:	4603      	mov	r3, r0
    9056:	9301      	str	r3, [sp, #4]
    9058:	4a0d      	ldr	r2, [pc, #52]	; (9090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    905a:	9b01      	ldr	r3, [sp, #4]
    905c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9060:	1e5a      	subs	r2, r3, #1
    9062:	490b      	ldr	r1, [pc, #44]	; (9090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    9064:	9b01      	ldr	r3, [sp, #4]
    9066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    906a:	4a0a      	ldr	r2, [pc, #40]	; (9094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    906c:	9b01      	ldr	r3, [sp, #4]
    906e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9072:	f003 0301 	and.w	r3, r3, #1
    9076:	2b00      	cmp	r3, #0
    9078:	d106      	bne.n	9088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    907a:	4a05      	ldr	r2, [pc, #20]	; (9090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    907c:	9b01      	ldr	r3, [sp, #4]
    907e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9082:	2b00      	cmp	r3, #0
    9084:	d100      	bne.n	9088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    9086:	b662      	cpsie	i
    9088:	bf00      	nop
    908a:	b003      	add	sp, #12
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	1fff9120 	.word	0x1fff9120
    9094:	1fff911c 	.word	0x1fff911c

00009098 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:
    9098:	b500      	push	{lr}
    909a:	b083      	sub	sp, #12
    909c:	f7f7 fd20 	bl	ae0 <Sys_GetCoreID>
    90a0:	4603      	mov	r3, r0
    90a2:	9301      	str	r3, [sp, #4]
    90a4:	4a10      	ldr	r2, [pc, #64]	; (90e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90a6:	9b01      	ldr	r3, [sp, #4]
    90a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ac:	2b00      	cmp	r3, #0
    90ae:	d10d      	bne.n	90cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    90b0:	f7f7 fc3d 	bl	92e <Port_schm_read_msr>
    90b4:	9000      	str	r0, [sp, #0]
    90b6:	9b00      	ldr	r3, [sp, #0]
    90b8:	f003 0301 	and.w	r3, r3, #1
    90bc:	2b00      	cmp	r3, #0
    90be:	d100      	bne.n	90c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
    90c0:	b672      	cpsid	i
    90c2:	490a      	ldr	r1, [pc, #40]	; (90ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    90c4:	9b01      	ldr	r3, [sp, #4]
    90c6:	9a00      	ldr	r2, [sp, #0]
    90c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90cc:	4a06      	ldr	r2, [pc, #24]	; (90e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90ce:	9b01      	ldr	r3, [sp, #4]
    90d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90d4:	1c5a      	adds	r2, r3, #1
    90d6:	4904      	ldr	r1, [pc, #16]	; (90e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    90d8:	9b01      	ldr	r3, [sp, #4]
    90da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    90de:	bf00      	nop
    90e0:	b003      	add	sp, #12
    90e2:	f85d fb04 	ldr.w	pc, [sp], #4
    90e6:	bf00      	nop
    90e8:	1fff9128 	.word	0x1fff9128
    90ec:	1fff9124 	.word	0x1fff9124

000090f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:
    90f0:	b500      	push	{lr}
    90f2:	b083      	sub	sp, #12
    90f4:	f7f7 fcf4 	bl	ae0 <Sys_GetCoreID>
    90f8:	4603      	mov	r3, r0
    90fa:	9301      	str	r3, [sp, #4]
    90fc:	4a0d      	ldr	r2, [pc, #52]	; (9134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    90fe:	9b01      	ldr	r3, [sp, #4]
    9100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9104:	1e5a      	subs	r2, r3, #1
    9106:	490b      	ldr	r1, [pc, #44]	; (9134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9108:	9b01      	ldr	r3, [sp, #4]
    910a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    910e:	4a0a      	ldr	r2, [pc, #40]	; (9138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    9110:	9b01      	ldr	r3, [sp, #4]
    9112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9116:	f003 0301 	and.w	r3, r3, #1
    911a:	2b00      	cmp	r3, #0
    911c:	d106      	bne.n	912c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    911e:	4a05      	ldr	r2, [pc, #20]	; (9134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    9120:	9b01      	ldr	r3, [sp, #4]
    9122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9126:	2b00      	cmp	r3, #0
    9128:	d100      	bne.n	912c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    912a:	b662      	cpsie	i
    912c:	bf00      	nop
    912e:	b003      	add	sp, #12
    9130:	f85d fb04 	ldr.w	pc, [sp], #4
    9134:	1fff9128 	.word	0x1fff9128
    9138:	1fff9124 	.word	0x1fff9124

0000913c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:
    913c:	b500      	push	{lr}
    913e:	b083      	sub	sp, #12
    9140:	f7f7 fcce 	bl	ae0 <Sys_GetCoreID>
    9144:	4603      	mov	r3, r0
    9146:	9301      	str	r3, [sp, #4]
    9148:	4a10      	ldr	r2, [pc, #64]	; (918c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    914a:	9b01      	ldr	r3, [sp, #4]
    914c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9150:	2b00      	cmp	r3, #0
    9152:	d10d      	bne.n	9170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    9154:	f7f7 fbeb 	bl	92e <Port_schm_read_msr>
    9158:	9000      	str	r0, [sp, #0]
    915a:	9b00      	ldr	r3, [sp, #0]
    915c:	f003 0301 	and.w	r3, r3, #1
    9160:	2b00      	cmp	r3, #0
    9162:	d100      	bne.n	9166 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
    9164:	b672      	cpsid	i
    9166:	490a      	ldr	r1, [pc, #40]	; (9190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    9168:	9b01      	ldr	r3, [sp, #4]
    916a:	9a00      	ldr	r2, [sp, #0]
    916c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9170:	4a06      	ldr	r2, [pc, #24]	; (918c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    9172:	9b01      	ldr	r3, [sp, #4]
    9174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9178:	1c5a      	adds	r2, r3, #1
    917a:	4904      	ldr	r1, [pc, #16]	; (918c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    917c:	9b01      	ldr	r3, [sp, #4]
    917e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9182:	bf00      	nop
    9184:	b003      	add	sp, #12
    9186:	f85d fb04 	ldr.w	pc, [sp], #4
    918a:	bf00      	nop
    918c:	1fff9130 	.word	0x1fff9130
    9190:	1fff912c 	.word	0x1fff912c

00009194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:
    9194:	b500      	push	{lr}
    9196:	b083      	sub	sp, #12
    9198:	f7f7 fca2 	bl	ae0 <Sys_GetCoreID>
    919c:	4603      	mov	r3, r0
    919e:	9301      	str	r3, [sp, #4]
    91a0:	4a0d      	ldr	r2, [pc, #52]	; (91d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    91a2:	9b01      	ldr	r3, [sp, #4]
    91a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91a8:	1e5a      	subs	r2, r3, #1
    91aa:	490b      	ldr	r1, [pc, #44]	; (91d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    91ac:	9b01      	ldr	r3, [sp, #4]
    91ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    91b2:	4a0a      	ldr	r2, [pc, #40]	; (91dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    91b4:	9b01      	ldr	r3, [sp, #4]
    91b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ba:	f003 0301 	and.w	r3, r3, #1
    91be:	2b00      	cmp	r3, #0
    91c0:	d106      	bne.n	91d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    91c2:	4a05      	ldr	r2, [pc, #20]	; (91d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    91c4:	9b01      	ldr	r3, [sp, #4]
    91c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d100      	bne.n	91d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    91ce:	b662      	cpsie	i
    91d0:	bf00      	nop
    91d2:	b003      	add	sp, #12
    91d4:	f85d fb04 	ldr.w	pc, [sp], #4
    91d8:	1fff9130 	.word	0x1fff9130
    91dc:	1fff912c 	.word	0x1fff912c

000091e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:
    91e0:	b500      	push	{lr}
    91e2:	b083      	sub	sp, #12
    91e4:	f7f7 fc7c 	bl	ae0 <Sys_GetCoreID>
    91e8:	4603      	mov	r3, r0
    91ea:	9301      	str	r3, [sp, #4]
    91ec:	4a10      	ldr	r2, [pc, #64]	; (9230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    91ee:	9b01      	ldr	r3, [sp, #4]
    91f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f4:	2b00      	cmp	r3, #0
    91f6:	d10d      	bne.n	9214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    91f8:	f7f7 fb99 	bl	92e <Port_schm_read_msr>
    91fc:	9000      	str	r0, [sp, #0]
    91fe:	9b00      	ldr	r3, [sp, #0]
    9200:	f003 0301 	and.w	r3, r3, #1
    9204:	2b00      	cmp	r3, #0
    9206:	d100      	bne.n	920a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
    9208:	b672      	cpsid	i
    920a:	490a      	ldr	r1, [pc, #40]	; (9234 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    920c:	9b01      	ldr	r3, [sp, #4]
    920e:	9a00      	ldr	r2, [sp, #0]
    9210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9214:	4a06      	ldr	r2, [pc, #24]	; (9230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    9216:	9b01      	ldr	r3, [sp, #4]
    9218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    921c:	1c5a      	adds	r2, r3, #1
    921e:	4904      	ldr	r1, [pc, #16]	; (9230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    9220:	9b01      	ldr	r3, [sp, #4]
    9222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9226:	bf00      	nop
    9228:	b003      	add	sp, #12
    922a:	f85d fb04 	ldr.w	pc, [sp], #4
    922e:	bf00      	nop
    9230:	1fff9138 	.word	0x1fff9138
    9234:	1fff9134 	.word	0x1fff9134

00009238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:
    9238:	b500      	push	{lr}
    923a:	b083      	sub	sp, #12
    923c:	f7f7 fc50 	bl	ae0 <Sys_GetCoreID>
    9240:	4603      	mov	r3, r0
    9242:	9301      	str	r3, [sp, #4]
    9244:	4a0d      	ldr	r2, [pc, #52]	; (927c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9246:	9b01      	ldr	r3, [sp, #4]
    9248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    924c:	1e5a      	subs	r2, r3, #1
    924e:	490b      	ldr	r1, [pc, #44]	; (927c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9250:	9b01      	ldr	r3, [sp, #4]
    9252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9256:	4a0a      	ldr	r2, [pc, #40]	; (9280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    9258:	9b01      	ldr	r3, [sp, #4]
    925a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    925e:	f003 0301 	and.w	r3, r3, #1
    9262:	2b00      	cmp	r3, #0
    9264:	d106      	bne.n	9274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    9266:	4a05      	ldr	r2, [pc, #20]	; (927c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    9268:	9b01      	ldr	r3, [sp, #4]
    926a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    926e:	2b00      	cmp	r3, #0
    9270:	d100      	bne.n	9274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    9272:	b662      	cpsie	i
    9274:	bf00      	nop
    9276:	b003      	add	sp, #12
    9278:	f85d fb04 	ldr.w	pc, [sp], #4
    927c:	1fff9138 	.word	0x1fff9138
    9280:	1fff9134 	.word	0x1fff9134

00009284 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:
    9284:	b500      	push	{lr}
    9286:	b083      	sub	sp, #12
    9288:	f7f7 fc2a 	bl	ae0 <Sys_GetCoreID>
    928c:	4603      	mov	r3, r0
    928e:	9301      	str	r3, [sp, #4]
    9290:	4a10      	ldr	r2, [pc, #64]	; (92d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    9292:	9b01      	ldr	r3, [sp, #4]
    9294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9298:	2b00      	cmp	r3, #0
    929a:	d10d      	bne.n	92b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    929c:	f7f7 fb47 	bl	92e <Port_schm_read_msr>
    92a0:	9000      	str	r0, [sp, #0]
    92a2:	9b00      	ldr	r3, [sp, #0]
    92a4:	f003 0301 	and.w	r3, r3, #1
    92a8:	2b00      	cmp	r3, #0
    92aa:	d100      	bne.n	92ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
    92ac:	b672      	cpsid	i
    92ae:	490a      	ldr	r1, [pc, #40]	; (92d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	9a00      	ldr	r2, [sp, #0]
    92b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92b8:	4a06      	ldr	r2, [pc, #24]	; (92d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    92ba:	9b01      	ldr	r3, [sp, #4]
    92bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c0:	1c5a      	adds	r2, r3, #1
    92c2:	4904      	ldr	r1, [pc, #16]	; (92d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    92c4:	9b01      	ldr	r3, [sp, #4]
    92c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92ca:	bf00      	nop
    92cc:	b003      	add	sp, #12
    92ce:	f85d fb04 	ldr.w	pc, [sp], #4
    92d2:	bf00      	nop
    92d4:	1fff9140 	.word	0x1fff9140
    92d8:	1fff913c 	.word	0x1fff913c

000092dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:
    92dc:	b500      	push	{lr}
    92de:	b083      	sub	sp, #12
    92e0:	f7f7 fbfe 	bl	ae0 <Sys_GetCoreID>
    92e4:	4603      	mov	r3, r0
    92e6:	9301      	str	r3, [sp, #4]
    92e8:	4a0d      	ldr	r2, [pc, #52]	; (9320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92ea:	9b01      	ldr	r3, [sp, #4]
    92ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f0:	1e5a      	subs	r2, r3, #1
    92f2:	490b      	ldr	r1, [pc, #44]	; (9320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    92f4:	9b01      	ldr	r3, [sp, #4]
    92f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    92fa:	4a0a      	ldr	r2, [pc, #40]	; (9324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    92fc:	9b01      	ldr	r3, [sp, #4]
    92fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9302:	f003 0301 	and.w	r3, r3, #1
    9306:	2b00      	cmp	r3, #0
    9308:	d106      	bne.n	9318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    930a:	4a05      	ldr	r2, [pc, #20]	; (9320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    930c:	9b01      	ldr	r3, [sp, #4]
    930e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9312:	2b00      	cmp	r3, #0
    9314:	d100      	bne.n	9318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    9316:	b662      	cpsie	i
    9318:	bf00      	nop
    931a:	b003      	add	sp, #12
    931c:	f85d fb04 	ldr.w	pc, [sp], #4
    9320:	1fff9140 	.word	0x1fff9140
    9324:	1fff913c 	.word	0x1fff913c

00009328 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:
    9328:	b500      	push	{lr}
    932a:	b083      	sub	sp, #12
    932c:	f7f7 fbd8 	bl	ae0 <Sys_GetCoreID>
    9330:	4603      	mov	r3, r0
    9332:	9301      	str	r3, [sp, #4]
    9334:	4a10      	ldr	r2, [pc, #64]	; (9378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    9336:	9b01      	ldr	r3, [sp, #4]
    9338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    933c:	2b00      	cmp	r3, #0
    933e:	d10d      	bne.n	935c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    9340:	f7f7 faf5 	bl	92e <Port_schm_read_msr>
    9344:	9000      	str	r0, [sp, #0]
    9346:	9b00      	ldr	r3, [sp, #0]
    9348:	f003 0301 	and.w	r3, r3, #1
    934c:	2b00      	cmp	r3, #0
    934e:	d100      	bne.n	9352 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
    9350:	b672      	cpsid	i
    9352:	490a      	ldr	r1, [pc, #40]	; (937c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    9354:	9b01      	ldr	r3, [sp, #4]
    9356:	9a00      	ldr	r2, [sp, #0]
    9358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    935c:	4a06      	ldr	r2, [pc, #24]	; (9378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    935e:	9b01      	ldr	r3, [sp, #4]
    9360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9364:	1c5a      	adds	r2, r3, #1
    9366:	4904      	ldr	r1, [pc, #16]	; (9378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    9368:	9b01      	ldr	r3, [sp, #4]
    936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    936e:	bf00      	nop
    9370:	b003      	add	sp, #12
    9372:	f85d fb04 	ldr.w	pc, [sp], #4
    9376:	bf00      	nop
    9378:	1fff9148 	.word	0x1fff9148
    937c:	1fff9144 	.word	0x1fff9144

00009380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:
    9380:	b500      	push	{lr}
    9382:	b083      	sub	sp, #12
    9384:	f7f7 fbac 	bl	ae0 <Sys_GetCoreID>
    9388:	4603      	mov	r3, r0
    938a:	9301      	str	r3, [sp, #4]
    938c:	4a0d      	ldr	r2, [pc, #52]	; (93c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    938e:	9b01      	ldr	r3, [sp, #4]
    9390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9394:	1e5a      	subs	r2, r3, #1
    9396:	490b      	ldr	r1, [pc, #44]	; (93c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    9398:	9b01      	ldr	r3, [sp, #4]
    939a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    939e:	4a0a      	ldr	r2, [pc, #40]	; (93c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    93a0:	9b01      	ldr	r3, [sp, #4]
    93a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93a6:	f003 0301 	and.w	r3, r3, #1
    93aa:	2b00      	cmp	r3, #0
    93ac:	d106      	bne.n	93bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    93ae:	4a05      	ldr	r2, [pc, #20]	; (93c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    93b0:	9b01      	ldr	r3, [sp, #4]
    93b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b6:	2b00      	cmp	r3, #0
    93b8:	d100      	bne.n	93bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    93ba:	b662      	cpsie	i
    93bc:	bf00      	nop
    93be:	b003      	add	sp, #12
    93c0:	f85d fb04 	ldr.w	pc, [sp], #4
    93c4:	1fff9148 	.word	0x1fff9148
    93c8:	1fff9144 	.word	0x1fff9144

000093cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:
    93cc:	b500      	push	{lr}
    93ce:	b083      	sub	sp, #12
    93d0:	f7f7 fb86 	bl	ae0 <Sys_GetCoreID>
    93d4:	4603      	mov	r3, r0
    93d6:	9301      	str	r3, [sp, #4]
    93d8:	4a10      	ldr	r2, [pc, #64]	; (941c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    93da:	9b01      	ldr	r3, [sp, #4]
    93dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93e0:	2b00      	cmp	r3, #0
    93e2:	d10d      	bne.n	9400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    93e4:	f7f7 faa3 	bl	92e <Port_schm_read_msr>
    93e8:	9000      	str	r0, [sp, #0]
    93ea:	9b00      	ldr	r3, [sp, #0]
    93ec:	f003 0301 	and.w	r3, r3, #1
    93f0:	2b00      	cmp	r3, #0
    93f2:	d100      	bne.n	93f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
    93f4:	b672      	cpsid	i
    93f6:	490a      	ldr	r1, [pc, #40]	; (9420 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    93f8:	9b01      	ldr	r3, [sp, #4]
    93fa:	9a00      	ldr	r2, [sp, #0]
    93fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9400:	4a06      	ldr	r2, [pc, #24]	; (941c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    9402:	9b01      	ldr	r3, [sp, #4]
    9404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9408:	1c5a      	adds	r2, r3, #1
    940a:	4904      	ldr	r1, [pc, #16]	; (941c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    940c:	9b01      	ldr	r3, [sp, #4]
    940e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9412:	bf00      	nop
    9414:	b003      	add	sp, #12
    9416:	f85d fb04 	ldr.w	pc, [sp], #4
    941a:	bf00      	nop
    941c:	1fff9150 	.word	0x1fff9150
    9420:	1fff914c 	.word	0x1fff914c

00009424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:
    9424:	b500      	push	{lr}
    9426:	b083      	sub	sp, #12
    9428:	f7f7 fb5a 	bl	ae0 <Sys_GetCoreID>
    942c:	4603      	mov	r3, r0
    942e:	9301      	str	r3, [sp, #4]
    9430:	4a0d      	ldr	r2, [pc, #52]	; (9468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9432:	9b01      	ldr	r3, [sp, #4]
    9434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9438:	1e5a      	subs	r2, r3, #1
    943a:	490b      	ldr	r1, [pc, #44]	; (9468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    943c:	9b01      	ldr	r3, [sp, #4]
    943e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9442:	4a0a      	ldr	r2, [pc, #40]	; (946c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    9444:	9b01      	ldr	r3, [sp, #4]
    9446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    944a:	f003 0301 	and.w	r3, r3, #1
    944e:	2b00      	cmp	r3, #0
    9450:	d106      	bne.n	9460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    9452:	4a05      	ldr	r2, [pc, #20]	; (9468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    9454:	9b01      	ldr	r3, [sp, #4]
    9456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    945a:	2b00      	cmp	r3, #0
    945c:	d100      	bne.n	9460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    945e:	b662      	cpsie	i
    9460:	bf00      	nop
    9462:	b003      	add	sp, #12
    9464:	f85d fb04 	ldr.w	pc, [sp], #4
    9468:	1fff9150 	.word	0x1fff9150
    946c:	1fff914c 	.word	0x1fff914c

00009470 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:
    9470:	b500      	push	{lr}
    9472:	b083      	sub	sp, #12
    9474:	f7f7 fb34 	bl	ae0 <Sys_GetCoreID>
    9478:	4603      	mov	r3, r0
    947a:	9301      	str	r3, [sp, #4]
    947c:	4a10      	ldr	r2, [pc, #64]	; (94c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    947e:	9b01      	ldr	r3, [sp, #4]
    9480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9484:	2b00      	cmp	r3, #0
    9486:	d10d      	bne.n	94a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    9488:	f7f7 fa51 	bl	92e <Port_schm_read_msr>
    948c:	9000      	str	r0, [sp, #0]
    948e:	9b00      	ldr	r3, [sp, #0]
    9490:	f003 0301 	and.w	r3, r3, #1
    9494:	2b00      	cmp	r3, #0
    9496:	d100      	bne.n	949a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
    9498:	b672      	cpsid	i
    949a:	490a      	ldr	r1, [pc, #40]	; (94c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    949c:	9b01      	ldr	r3, [sp, #4]
    949e:	9a00      	ldr	r2, [sp, #0]
    94a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    94a4:	4a06      	ldr	r2, [pc, #24]	; (94c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    94a6:	9b01      	ldr	r3, [sp, #4]
    94a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ac:	1c5a      	adds	r2, r3, #1
    94ae:	4904      	ldr	r1, [pc, #16]	; (94c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    94b0:	9b01      	ldr	r3, [sp, #4]
    94b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    94b6:	bf00      	nop
    94b8:	b003      	add	sp, #12
    94ba:	f85d fb04 	ldr.w	pc, [sp], #4
    94be:	bf00      	nop
    94c0:	1fff9158 	.word	0x1fff9158
    94c4:	1fff9154 	.word	0x1fff9154

000094c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:
    94c8:	b500      	push	{lr}
    94ca:	b083      	sub	sp, #12
    94cc:	f7f7 fb08 	bl	ae0 <Sys_GetCoreID>
    94d0:	4603      	mov	r3, r0
    94d2:	9301      	str	r3, [sp, #4]
    94d4:	4a0d      	ldr	r2, [pc, #52]	; (950c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94d6:	9b01      	ldr	r3, [sp, #4]
    94d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94dc:	1e5a      	subs	r2, r3, #1
    94de:	490b      	ldr	r1, [pc, #44]	; (950c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94e0:	9b01      	ldr	r3, [sp, #4]
    94e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    94e6:	4a0a      	ldr	r2, [pc, #40]	; (9510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    94e8:	9b01      	ldr	r3, [sp, #4]
    94ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94ee:	f003 0301 	and.w	r3, r3, #1
    94f2:	2b00      	cmp	r3, #0
    94f4:	d106      	bne.n	9504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    94f6:	4a05      	ldr	r2, [pc, #20]	; (950c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    94f8:	9b01      	ldr	r3, [sp, #4]
    94fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94fe:	2b00      	cmp	r3, #0
    9500:	d100      	bne.n	9504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    9502:	b662      	cpsie	i
    9504:	bf00      	nop
    9506:	b003      	add	sp, #12
    9508:	f85d fb04 	ldr.w	pc, [sp], #4
    950c:	1fff9158 	.word	0x1fff9158
    9510:	1fff9154 	.word	0x1fff9154

00009514 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:
    9514:	b500      	push	{lr}
    9516:	b083      	sub	sp, #12
    9518:	f7f7 fae2 	bl	ae0 <Sys_GetCoreID>
    951c:	4603      	mov	r3, r0
    951e:	9301      	str	r3, [sp, #4]
    9520:	4a10      	ldr	r2, [pc, #64]	; (9564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    9522:	9b01      	ldr	r3, [sp, #4]
    9524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9528:	2b00      	cmp	r3, #0
    952a:	d10d      	bne.n	9548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    952c:	f7f7 f9ff 	bl	92e <Port_schm_read_msr>
    9530:	9000      	str	r0, [sp, #0]
    9532:	9b00      	ldr	r3, [sp, #0]
    9534:	f003 0301 	and.w	r3, r3, #1
    9538:	2b00      	cmp	r3, #0
    953a:	d100      	bne.n	953e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
    953c:	b672      	cpsid	i
    953e:	490a      	ldr	r1, [pc, #40]	; (9568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    9540:	9b01      	ldr	r3, [sp, #4]
    9542:	9a00      	ldr	r2, [sp, #0]
    9544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9548:	4a06      	ldr	r2, [pc, #24]	; (9564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    954a:	9b01      	ldr	r3, [sp, #4]
    954c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9550:	1c5a      	adds	r2, r3, #1
    9552:	4904      	ldr	r1, [pc, #16]	; (9564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    9554:	9b01      	ldr	r3, [sp, #4]
    9556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    955a:	bf00      	nop
    955c:	b003      	add	sp, #12
    955e:	f85d fb04 	ldr.w	pc, [sp], #4
    9562:	bf00      	nop
    9564:	1fff9160 	.word	0x1fff9160
    9568:	1fff915c 	.word	0x1fff915c

0000956c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:
    956c:	b500      	push	{lr}
    956e:	b083      	sub	sp, #12
    9570:	f7f7 fab6 	bl	ae0 <Sys_GetCoreID>
    9574:	4603      	mov	r3, r0
    9576:	9301      	str	r3, [sp, #4]
    9578:	4a0d      	ldr	r2, [pc, #52]	; (95b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    957a:	9b01      	ldr	r3, [sp, #4]
    957c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9580:	1e5a      	subs	r2, r3, #1
    9582:	490b      	ldr	r1, [pc, #44]	; (95b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    9584:	9b01      	ldr	r3, [sp, #4]
    9586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    958a:	4a0a      	ldr	r2, [pc, #40]	; (95b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    958c:	9b01      	ldr	r3, [sp, #4]
    958e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9592:	f003 0301 	and.w	r3, r3, #1
    9596:	2b00      	cmp	r3, #0
    9598:	d106      	bne.n	95a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    959a:	4a05      	ldr	r2, [pc, #20]	; (95b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    959c:	9b01      	ldr	r3, [sp, #4]
    959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95a2:	2b00      	cmp	r3, #0
    95a4:	d100      	bne.n	95a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    95a6:	b662      	cpsie	i
    95a8:	bf00      	nop
    95aa:	b003      	add	sp, #12
    95ac:	f85d fb04 	ldr.w	pc, [sp], #4
    95b0:	1fff9160 	.word	0x1fff9160
    95b4:	1fff915c 	.word	0x1fff915c

000095b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:
    95b8:	b500      	push	{lr}
    95ba:	b083      	sub	sp, #12
    95bc:	f7f7 fa90 	bl	ae0 <Sys_GetCoreID>
    95c0:	4603      	mov	r3, r0
    95c2:	9301      	str	r3, [sp, #4]
    95c4:	4a10      	ldr	r2, [pc, #64]	; (9608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95c6:	9b01      	ldr	r3, [sp, #4]
    95c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95cc:	2b00      	cmp	r3, #0
    95ce:	d10d      	bne.n	95ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    95d0:	f7f7 f9ad 	bl	92e <Port_schm_read_msr>
    95d4:	9000      	str	r0, [sp, #0]
    95d6:	9b00      	ldr	r3, [sp, #0]
    95d8:	f003 0301 	and.w	r3, r3, #1
    95dc:	2b00      	cmp	r3, #0
    95de:	d100      	bne.n	95e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
    95e0:	b672      	cpsid	i
    95e2:	490a      	ldr	r1, [pc, #40]	; (960c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    95e4:	9b01      	ldr	r3, [sp, #4]
    95e6:	9a00      	ldr	r2, [sp, #0]
    95e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    95ec:	4a06      	ldr	r2, [pc, #24]	; (9608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95ee:	9b01      	ldr	r3, [sp, #4]
    95f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95f4:	1c5a      	adds	r2, r3, #1
    95f6:	4904      	ldr	r1, [pc, #16]	; (9608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    95f8:	9b01      	ldr	r3, [sp, #4]
    95fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    95fe:	bf00      	nop
    9600:	b003      	add	sp, #12
    9602:	f85d fb04 	ldr.w	pc, [sp], #4
    9606:	bf00      	nop
    9608:	1fff9168 	.word	0x1fff9168
    960c:	1fff9164 	.word	0x1fff9164

00009610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:
    9610:	b500      	push	{lr}
    9612:	b083      	sub	sp, #12
    9614:	f7f7 fa64 	bl	ae0 <Sys_GetCoreID>
    9618:	4603      	mov	r3, r0
    961a:	9301      	str	r3, [sp, #4]
    961c:	4a0d      	ldr	r2, [pc, #52]	; (9654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    961e:	9b01      	ldr	r3, [sp, #4]
    9620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9624:	1e5a      	subs	r2, r3, #1
    9626:	490b      	ldr	r1, [pc, #44]	; (9654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9628:	9b01      	ldr	r3, [sp, #4]
    962a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    962e:	4a0a      	ldr	r2, [pc, #40]	; (9658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    9630:	9b01      	ldr	r3, [sp, #4]
    9632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9636:	f003 0301 	and.w	r3, r3, #1
    963a:	2b00      	cmp	r3, #0
    963c:	d106      	bne.n	964c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    963e:	4a05      	ldr	r2, [pc, #20]	; (9654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9640:	9b01      	ldr	r3, [sp, #4]
    9642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9646:	2b00      	cmp	r3, #0
    9648:	d100      	bne.n	964c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    964a:	b662      	cpsie	i
    964c:	bf00      	nop
    964e:	b003      	add	sp, #12
    9650:	f85d fb04 	ldr.w	pc, [sp], #4
    9654:	1fff9168 	.word	0x1fff9168
    9658:	1fff9164 	.word	0x1fff9164

0000965c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:
    965c:	b500      	push	{lr}
    965e:	b083      	sub	sp, #12
    9660:	f7f7 fa3e 	bl	ae0 <Sys_GetCoreID>
    9664:	4603      	mov	r3, r0
    9666:	9301      	str	r3, [sp, #4]
    9668:	4a10      	ldr	r2, [pc, #64]	; (96ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    966a:	9b01      	ldr	r3, [sp, #4]
    966c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9670:	2b00      	cmp	r3, #0
    9672:	d10d      	bne.n	9690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    9674:	f7f7 f95b 	bl	92e <Port_schm_read_msr>
    9678:	9000      	str	r0, [sp, #0]
    967a:	9b00      	ldr	r3, [sp, #0]
    967c:	f003 0301 	and.w	r3, r3, #1
    9680:	2b00      	cmp	r3, #0
    9682:	d100      	bne.n	9686 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
    9684:	b672      	cpsid	i
    9686:	490a      	ldr	r1, [pc, #40]	; (96b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    9688:	9b01      	ldr	r3, [sp, #4]
    968a:	9a00      	ldr	r2, [sp, #0]
    968c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9690:	4a06      	ldr	r2, [pc, #24]	; (96ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9692:	9b01      	ldr	r3, [sp, #4]
    9694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9698:	1c5a      	adds	r2, r3, #1
    969a:	4904      	ldr	r1, [pc, #16]	; (96ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    969c:	9b01      	ldr	r3, [sp, #4]
    969e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    96a2:	bf00      	nop
    96a4:	b003      	add	sp, #12
    96a6:	f85d fb04 	ldr.w	pc, [sp], #4
    96aa:	bf00      	nop
    96ac:	1fff9170 	.word	0x1fff9170
    96b0:	1fff916c 	.word	0x1fff916c

000096b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:
    96b4:	b500      	push	{lr}
    96b6:	b083      	sub	sp, #12
    96b8:	f7f7 fa12 	bl	ae0 <Sys_GetCoreID>
    96bc:	4603      	mov	r3, r0
    96be:	9301      	str	r3, [sp, #4]
    96c0:	4a0d      	ldr	r2, [pc, #52]	; (96f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96c2:	9b01      	ldr	r3, [sp, #4]
    96c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c8:	1e5a      	subs	r2, r3, #1
    96ca:	490b      	ldr	r1, [pc, #44]	; (96f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96cc:	9b01      	ldr	r3, [sp, #4]
    96ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    96d2:	4a0a      	ldr	r2, [pc, #40]	; (96fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    96d4:	9b01      	ldr	r3, [sp, #4]
    96d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96da:	f003 0301 	and.w	r3, r3, #1
    96de:	2b00      	cmp	r3, #0
    96e0:	d106      	bne.n	96f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    96e2:	4a05      	ldr	r2, [pc, #20]	; (96f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    96e4:	9b01      	ldr	r3, [sp, #4]
    96e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ea:	2b00      	cmp	r3, #0
    96ec:	d100      	bne.n	96f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    96ee:	b662      	cpsie	i
    96f0:	bf00      	nop
    96f2:	b003      	add	sp, #12
    96f4:	f85d fb04 	ldr.w	pc, [sp], #4
    96f8:	1fff9170 	.word	0x1fff9170
    96fc:	1fff916c 	.word	0x1fff916c

00009700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:
    9700:	b500      	push	{lr}
    9702:	b083      	sub	sp, #12
    9704:	f7f7 f9ec 	bl	ae0 <Sys_GetCoreID>
    9708:	4603      	mov	r3, r0
    970a:	9301      	str	r3, [sp, #4]
    970c:	4a10      	ldr	r2, [pc, #64]	; (9750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    970e:	9b01      	ldr	r3, [sp, #4]
    9710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9714:	2b00      	cmp	r3, #0
    9716:	d10d      	bne.n	9734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    9718:	f7f7 f909 	bl	92e <Port_schm_read_msr>
    971c:	9000      	str	r0, [sp, #0]
    971e:	9b00      	ldr	r3, [sp, #0]
    9720:	f003 0301 	and.w	r3, r3, #1
    9724:	2b00      	cmp	r3, #0
    9726:	d100      	bne.n	972a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
    9728:	b672      	cpsid	i
    972a:	490a      	ldr	r1, [pc, #40]	; (9754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    972c:	9b01      	ldr	r3, [sp, #4]
    972e:	9a00      	ldr	r2, [sp, #0]
    9730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9734:	4a06      	ldr	r2, [pc, #24]	; (9750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9736:	9b01      	ldr	r3, [sp, #4]
    9738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    973c:	1c5a      	adds	r2, r3, #1
    973e:	4904      	ldr	r1, [pc, #16]	; (9750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9740:	9b01      	ldr	r3, [sp, #4]
    9742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9746:	bf00      	nop
    9748:	b003      	add	sp, #12
    974a:	f85d fb04 	ldr.w	pc, [sp], #4
    974e:	bf00      	nop
    9750:	1fff9178 	.word	0x1fff9178
    9754:	1fff9174 	.word	0x1fff9174

00009758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:
    9758:	b500      	push	{lr}
    975a:	b083      	sub	sp, #12
    975c:	f7f7 f9c0 	bl	ae0 <Sys_GetCoreID>
    9760:	4603      	mov	r3, r0
    9762:	9301      	str	r3, [sp, #4]
    9764:	4a0d      	ldr	r2, [pc, #52]	; (979c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9766:	9b01      	ldr	r3, [sp, #4]
    9768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976c:	1e5a      	subs	r2, r3, #1
    976e:	490b      	ldr	r1, [pc, #44]	; (979c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9770:	9b01      	ldr	r3, [sp, #4]
    9772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9776:	4a0a      	ldr	r2, [pc, #40]	; (97a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    9778:	9b01      	ldr	r3, [sp, #4]
    977a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    977e:	f003 0301 	and.w	r3, r3, #1
    9782:	2b00      	cmp	r3, #0
    9784:	d106      	bne.n	9794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    9786:	4a05      	ldr	r2, [pc, #20]	; (979c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9788:	9b01      	ldr	r3, [sp, #4]
    978a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    978e:	2b00      	cmp	r3, #0
    9790:	d100      	bne.n	9794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    9792:	b662      	cpsie	i
    9794:	bf00      	nop
    9796:	b003      	add	sp, #12
    9798:	f85d fb04 	ldr.w	pc, [sp], #4
    979c:	1fff9178 	.word	0x1fff9178
    97a0:	1fff9174 	.word	0x1fff9174

000097a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:
    97a4:	b500      	push	{lr}
    97a6:	b083      	sub	sp, #12
    97a8:	f7f7 f99a 	bl	ae0 <Sys_GetCoreID>
    97ac:	4603      	mov	r3, r0
    97ae:	9301      	str	r3, [sp, #4]
    97b0:	4a10      	ldr	r2, [pc, #64]	; (97f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97b2:	9b01      	ldr	r3, [sp, #4]
    97b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b8:	2b00      	cmp	r3, #0
    97ba:	d10d      	bne.n	97d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    97bc:	f7f7 f8b7 	bl	92e <Port_schm_read_msr>
    97c0:	9000      	str	r0, [sp, #0]
    97c2:	9b00      	ldr	r3, [sp, #0]
    97c4:	f003 0301 	and.w	r3, r3, #1
    97c8:	2b00      	cmp	r3, #0
    97ca:	d100      	bne.n	97ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
    97cc:	b672      	cpsid	i
    97ce:	490a      	ldr	r1, [pc, #40]	; (97f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    97d0:	9b01      	ldr	r3, [sp, #4]
    97d2:	9a00      	ldr	r2, [sp, #0]
    97d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97d8:	4a06      	ldr	r2, [pc, #24]	; (97f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97da:	9b01      	ldr	r3, [sp, #4]
    97dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e0:	1c5a      	adds	r2, r3, #1
    97e2:	4904      	ldr	r1, [pc, #16]	; (97f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    97e4:	9b01      	ldr	r3, [sp, #4]
    97e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    97ea:	bf00      	nop
    97ec:	b003      	add	sp, #12
    97ee:	f85d fb04 	ldr.w	pc, [sp], #4
    97f2:	bf00      	nop
    97f4:	1fff9180 	.word	0x1fff9180
    97f8:	1fff917c 	.word	0x1fff917c

000097fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:
    97fc:	b500      	push	{lr}
    97fe:	b083      	sub	sp, #12
    9800:	f7f7 f96e 	bl	ae0 <Sys_GetCoreID>
    9804:	4603      	mov	r3, r0
    9806:	9301      	str	r3, [sp, #4]
    9808:	4a0d      	ldr	r2, [pc, #52]	; (9840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    980a:	9b01      	ldr	r3, [sp, #4]
    980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9810:	1e5a      	subs	r2, r3, #1
    9812:	490b      	ldr	r1, [pc, #44]	; (9840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    9814:	9b01      	ldr	r3, [sp, #4]
    9816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    981a:	4a0a      	ldr	r2, [pc, #40]	; (9844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    981c:	9b01      	ldr	r3, [sp, #4]
    981e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9822:	f003 0301 	and.w	r3, r3, #1
    9826:	2b00      	cmp	r3, #0
    9828:	d106      	bne.n	9838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    982a:	4a05      	ldr	r2, [pc, #20]	; (9840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    982c:	9b01      	ldr	r3, [sp, #4]
    982e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9832:	2b00      	cmp	r3, #0
    9834:	d100      	bne.n	9838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    9836:	b662      	cpsie	i
    9838:	bf00      	nop
    983a:	b003      	add	sp, #12
    983c:	f85d fb04 	ldr.w	pc, [sp], #4
    9840:	1fff9180 	.word	0x1fff9180
    9844:	1fff917c 	.word	0x1fff917c

00009848 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:
    9848:	b500      	push	{lr}
    984a:	b083      	sub	sp, #12
    984c:	f7f7 f948 	bl	ae0 <Sys_GetCoreID>
    9850:	4603      	mov	r3, r0
    9852:	9301      	str	r3, [sp, #4]
    9854:	4a10      	ldr	r2, [pc, #64]	; (9898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9856:	9b01      	ldr	r3, [sp, #4]
    9858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    985c:	2b00      	cmp	r3, #0
    985e:	d10d      	bne.n	987c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    9860:	f7f7 f865 	bl	92e <Port_schm_read_msr>
    9864:	9000      	str	r0, [sp, #0]
    9866:	9b00      	ldr	r3, [sp, #0]
    9868:	f003 0301 	and.w	r3, r3, #1
    986c:	2b00      	cmp	r3, #0
    986e:	d100      	bne.n	9872 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
    9870:	b672      	cpsid	i
    9872:	490a      	ldr	r1, [pc, #40]	; (989c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    9874:	9b01      	ldr	r3, [sp, #4]
    9876:	9a00      	ldr	r2, [sp, #0]
    9878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    987c:	4a06      	ldr	r2, [pc, #24]	; (9898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    987e:	9b01      	ldr	r3, [sp, #4]
    9880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9884:	1c5a      	adds	r2, r3, #1
    9886:	4904      	ldr	r1, [pc, #16]	; (9898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9888:	9b01      	ldr	r3, [sp, #4]
    988a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    988e:	bf00      	nop
    9890:	b003      	add	sp, #12
    9892:	f85d fb04 	ldr.w	pc, [sp], #4
    9896:	bf00      	nop
    9898:	1fff9188 	.word	0x1fff9188
    989c:	1fff9184 	.word	0x1fff9184

000098a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:
    98a0:	b500      	push	{lr}
    98a2:	b083      	sub	sp, #12
    98a4:	f7f7 f91c 	bl	ae0 <Sys_GetCoreID>
    98a8:	4603      	mov	r3, r0
    98aa:	9301      	str	r3, [sp, #4]
    98ac:	4a0d      	ldr	r2, [pc, #52]	; (98e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    98ae:	9b01      	ldr	r3, [sp, #4]
    98b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98b4:	1e5a      	subs	r2, r3, #1
    98b6:	490b      	ldr	r1, [pc, #44]	; (98e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    98b8:	9b01      	ldr	r3, [sp, #4]
    98ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    98be:	4a0a      	ldr	r2, [pc, #40]	; (98e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    98c0:	9b01      	ldr	r3, [sp, #4]
    98c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98c6:	f003 0301 	and.w	r3, r3, #1
    98ca:	2b00      	cmp	r3, #0
    98cc:	d106      	bne.n	98dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    98ce:	4a05      	ldr	r2, [pc, #20]	; (98e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    98d0:	9b01      	ldr	r3, [sp, #4]
    98d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98d6:	2b00      	cmp	r3, #0
    98d8:	d100      	bne.n	98dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    98da:	b662      	cpsie	i
    98dc:	bf00      	nop
    98de:	b003      	add	sp, #12
    98e0:	f85d fb04 	ldr.w	pc, [sp], #4
    98e4:	1fff9188 	.word	0x1fff9188
    98e8:	1fff9184 	.word	0x1fff9184

000098ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:
    98ec:	b500      	push	{lr}
    98ee:	b083      	sub	sp, #12
    98f0:	f7f7 f8f6 	bl	ae0 <Sys_GetCoreID>
    98f4:	4603      	mov	r3, r0
    98f6:	9301      	str	r3, [sp, #4]
    98f8:	4a10      	ldr	r2, [pc, #64]	; (993c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    98fa:	9b01      	ldr	r3, [sp, #4]
    98fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9900:	2b00      	cmp	r3, #0
    9902:	d10d      	bne.n	9920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    9904:	f7f7 f813 	bl	92e <Port_schm_read_msr>
    9908:	9000      	str	r0, [sp, #0]
    990a:	9b00      	ldr	r3, [sp, #0]
    990c:	f003 0301 	and.w	r3, r3, #1
    9910:	2b00      	cmp	r3, #0
    9912:	d100      	bne.n	9916 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
    9914:	b672      	cpsid	i
    9916:	490a      	ldr	r1, [pc, #40]	; (9940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    9918:	9b01      	ldr	r3, [sp, #4]
    991a:	9a00      	ldr	r2, [sp, #0]
    991c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9920:	4a06      	ldr	r2, [pc, #24]	; (993c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    9922:	9b01      	ldr	r3, [sp, #4]
    9924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9928:	1c5a      	adds	r2, r3, #1
    992a:	4904      	ldr	r1, [pc, #16]	; (993c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    992c:	9b01      	ldr	r3, [sp, #4]
    992e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9932:	bf00      	nop
    9934:	b003      	add	sp, #12
    9936:	f85d fb04 	ldr.w	pc, [sp], #4
    993a:	bf00      	nop
    993c:	1fff9190 	.word	0x1fff9190
    9940:	1fff918c 	.word	0x1fff918c

00009944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:
    9944:	b500      	push	{lr}
    9946:	b083      	sub	sp, #12
    9948:	f7f7 f8ca 	bl	ae0 <Sys_GetCoreID>
    994c:	4603      	mov	r3, r0
    994e:	9301      	str	r3, [sp, #4]
    9950:	4a0d      	ldr	r2, [pc, #52]	; (9988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9952:	9b01      	ldr	r3, [sp, #4]
    9954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9958:	1e5a      	subs	r2, r3, #1
    995a:	490b      	ldr	r1, [pc, #44]	; (9988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    995c:	9b01      	ldr	r3, [sp, #4]
    995e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9962:	4a0a      	ldr	r2, [pc, #40]	; (998c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    9964:	9b01      	ldr	r3, [sp, #4]
    9966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    996a:	f003 0301 	and.w	r3, r3, #1
    996e:	2b00      	cmp	r3, #0
    9970:	d106      	bne.n	9980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    9972:	4a05      	ldr	r2, [pc, #20]	; (9988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9974:	9b01      	ldr	r3, [sp, #4]
    9976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    997a:	2b00      	cmp	r3, #0
    997c:	d100      	bne.n	9980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    997e:	b662      	cpsie	i
    9980:	bf00      	nop
    9982:	b003      	add	sp, #12
    9984:	f85d fb04 	ldr.w	pc, [sp], #4
    9988:	1fff9190 	.word	0x1fff9190
    998c:	1fff918c 	.word	0x1fff918c

00009990 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:
    9990:	b500      	push	{lr}
    9992:	b083      	sub	sp, #12
    9994:	f7f7 f8a4 	bl	ae0 <Sys_GetCoreID>
    9998:	4603      	mov	r3, r0
    999a:	9301      	str	r3, [sp, #4]
    999c:	4a10      	ldr	r2, [pc, #64]	; (99e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    999e:	9b01      	ldr	r3, [sp, #4]
    99a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a4:	2b00      	cmp	r3, #0
    99a6:	d10d      	bne.n	99c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    99a8:	f7f6 ffc1 	bl	92e <Port_schm_read_msr>
    99ac:	9000      	str	r0, [sp, #0]
    99ae:	9b00      	ldr	r3, [sp, #0]
    99b0:	f003 0301 	and.w	r3, r3, #1
    99b4:	2b00      	cmp	r3, #0
    99b6:	d100      	bne.n	99ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
    99b8:	b672      	cpsid	i
    99ba:	490a      	ldr	r1, [pc, #40]	; (99e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    99bc:	9b01      	ldr	r3, [sp, #4]
    99be:	9a00      	ldr	r2, [sp, #0]
    99c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99c4:	4a06      	ldr	r2, [pc, #24]	; (99e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    99c6:	9b01      	ldr	r3, [sp, #4]
    99c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99cc:	1c5a      	adds	r2, r3, #1
    99ce:	4904      	ldr	r1, [pc, #16]	; (99e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    99d0:	9b01      	ldr	r3, [sp, #4]
    99d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    99d6:	bf00      	nop
    99d8:	b003      	add	sp, #12
    99da:	f85d fb04 	ldr.w	pc, [sp], #4
    99de:	bf00      	nop
    99e0:	1fff9198 	.word	0x1fff9198
    99e4:	1fff9194 	.word	0x1fff9194

000099e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:
    99e8:	b500      	push	{lr}
    99ea:	b083      	sub	sp, #12
    99ec:	f7f7 f878 	bl	ae0 <Sys_GetCoreID>
    99f0:	4603      	mov	r3, r0
    99f2:	9301      	str	r3, [sp, #4]
    99f4:	4a0d      	ldr	r2, [pc, #52]	; (9a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    99f6:	9b01      	ldr	r3, [sp, #4]
    99f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99fc:	1e5a      	subs	r2, r3, #1
    99fe:	490b      	ldr	r1, [pc, #44]	; (9a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9a00:	9b01      	ldr	r3, [sp, #4]
    9a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a06:	4a0a      	ldr	r2, [pc, #40]	; (9a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    9a08:	9b01      	ldr	r3, [sp, #4]
    9a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a0e:	f003 0301 	and.w	r3, r3, #1
    9a12:	2b00      	cmp	r3, #0
    9a14:	d106      	bne.n	9a24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    9a16:	4a05      	ldr	r2, [pc, #20]	; (9a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    9a18:	9b01      	ldr	r3, [sp, #4]
    9a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d100      	bne.n	9a24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    9a22:	b662      	cpsie	i
    9a24:	bf00      	nop
    9a26:	b003      	add	sp, #12
    9a28:	f85d fb04 	ldr.w	pc, [sp], #4
    9a2c:	1fff9198 	.word	0x1fff9198
    9a30:	1fff9194 	.word	0x1fff9194

00009a34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:
    9a34:	b500      	push	{lr}
    9a36:	b083      	sub	sp, #12
    9a38:	f7f7 f852 	bl	ae0 <Sys_GetCoreID>
    9a3c:	4603      	mov	r3, r0
    9a3e:	9301      	str	r3, [sp, #4]
    9a40:	4a10      	ldr	r2, [pc, #64]	; (9a84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a42:	9b01      	ldr	r3, [sp, #4]
    9a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d10d      	bne.n	9a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    9a4c:	f7f6 ff6f 	bl	92e <Port_schm_read_msr>
    9a50:	9000      	str	r0, [sp, #0]
    9a52:	9b00      	ldr	r3, [sp, #0]
    9a54:	f003 0301 	and.w	r3, r3, #1
    9a58:	2b00      	cmp	r3, #0
    9a5a:	d100      	bne.n	9a5e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
    9a5c:	b672      	cpsid	i
    9a5e:	490a      	ldr	r1, [pc, #40]	; (9a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9a60:	9b01      	ldr	r3, [sp, #4]
    9a62:	9a00      	ldr	r2, [sp, #0]
    9a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a68:	4a06      	ldr	r2, [pc, #24]	; (9a84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a6a:	9b01      	ldr	r3, [sp, #4]
    9a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a70:	1c5a      	adds	r2, r3, #1
    9a72:	4904      	ldr	r1, [pc, #16]	; (9a84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9a74:	9b01      	ldr	r3, [sp, #4]
    9a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9a7a:	bf00      	nop
    9a7c:	b003      	add	sp, #12
    9a7e:	f85d fb04 	ldr.w	pc, [sp], #4
    9a82:	bf00      	nop
    9a84:	1fff91a0 	.word	0x1fff91a0
    9a88:	1fff919c 	.word	0x1fff919c

00009a8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:
    9a8c:	b500      	push	{lr}
    9a8e:	b083      	sub	sp, #12
    9a90:	f7f7 f826 	bl	ae0 <Sys_GetCoreID>
    9a94:	4603      	mov	r3, r0
    9a96:	9301      	str	r3, [sp, #4]
    9a98:	4a0d      	ldr	r2, [pc, #52]	; (9ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9a9a:	9b01      	ldr	r3, [sp, #4]
    9a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa0:	1e5a      	subs	r2, r3, #1
    9aa2:	490b      	ldr	r1, [pc, #44]	; (9ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9aa4:	9b01      	ldr	r3, [sp, #4]
    9aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9aaa:	4a0a      	ldr	r2, [pc, #40]	; (9ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    9aac:	9b01      	ldr	r3, [sp, #4]
    9aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab2:	f003 0301 	and.w	r3, r3, #1
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d106      	bne.n	9ac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9aba:	4a05      	ldr	r2, [pc, #20]	; (9ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9abc:	9b01      	ldr	r3, [sp, #4]
    9abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	d100      	bne.n	9ac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    9ac6:	b662      	cpsie	i
    9ac8:	bf00      	nop
    9aca:	b003      	add	sp, #12
    9acc:	f85d fb04 	ldr.w	pc, [sp], #4
    9ad0:	1fff91a0 	.word	0x1fff91a0
    9ad4:	1fff919c 	.word	0x1fff919c

00009ad8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:
    9ad8:	b500      	push	{lr}
    9ada:	b083      	sub	sp, #12
    9adc:	f7f7 f800 	bl	ae0 <Sys_GetCoreID>
    9ae0:	4603      	mov	r3, r0
    9ae2:	9301      	str	r3, [sp, #4]
    9ae4:	4a10      	ldr	r2, [pc, #64]	; (9b28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9ae6:	9b01      	ldr	r3, [sp, #4]
    9ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aec:	2b00      	cmp	r3, #0
    9aee:	d10d      	bne.n	9b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    9af0:	f7f6 ff1d 	bl	92e <Port_schm_read_msr>
    9af4:	9000      	str	r0, [sp, #0]
    9af6:	9b00      	ldr	r3, [sp, #0]
    9af8:	f003 0301 	and.w	r3, r3, #1
    9afc:	2b00      	cmp	r3, #0
    9afe:	d100      	bne.n	9b02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
    9b00:	b672      	cpsid	i
    9b02:	490a      	ldr	r1, [pc, #40]	; (9b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    9b04:	9b01      	ldr	r3, [sp, #4]
    9b06:	9a00      	ldr	r2, [sp, #0]
    9b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b0c:	4a06      	ldr	r2, [pc, #24]	; (9b28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9b0e:	9b01      	ldr	r3, [sp, #4]
    9b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b14:	1c5a      	adds	r2, r3, #1
    9b16:	4904      	ldr	r1, [pc, #16]	; (9b28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    9b18:	9b01      	ldr	r3, [sp, #4]
    9b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b1e:	bf00      	nop
    9b20:	b003      	add	sp, #12
    9b22:	f85d fb04 	ldr.w	pc, [sp], #4
    9b26:	bf00      	nop
    9b28:	1fff91a8 	.word	0x1fff91a8
    9b2c:	1fff91a4 	.word	0x1fff91a4

00009b30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:
    9b30:	b500      	push	{lr}
    9b32:	b083      	sub	sp, #12
    9b34:	f7f6 ffd4 	bl	ae0 <Sys_GetCoreID>
    9b38:	4603      	mov	r3, r0
    9b3a:	9301      	str	r3, [sp, #4]
    9b3c:	4a0d      	ldr	r2, [pc, #52]	; (9b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b3e:	9b01      	ldr	r3, [sp, #4]
    9b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b44:	1e5a      	subs	r2, r3, #1
    9b46:	490b      	ldr	r1, [pc, #44]	; (9b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b48:	9b01      	ldr	r3, [sp, #4]
    9b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9b4e:	4a0a      	ldr	r2, [pc, #40]	; (9b78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9b50:	9b01      	ldr	r3, [sp, #4]
    9b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b56:	f003 0301 	and.w	r3, r3, #1
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d106      	bne.n	9b6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9b5e:	4a05      	ldr	r2, [pc, #20]	; (9b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9b60:	9b01      	ldr	r3, [sp, #4]
    9b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b66:	2b00      	cmp	r3, #0
    9b68:	d100      	bne.n	9b6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    9b6a:	b662      	cpsie	i
    9b6c:	bf00      	nop
    9b6e:	b003      	add	sp, #12
    9b70:	f85d fb04 	ldr.w	pc, [sp], #4
    9b74:	1fff91a8 	.word	0x1fff91a8
    9b78:	1fff91a4 	.word	0x1fff91a4

00009b7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:
    9b7c:	b500      	push	{lr}
    9b7e:	b083      	sub	sp, #12
    9b80:	f7f6 ffae 	bl	ae0 <Sys_GetCoreID>
    9b84:	4603      	mov	r3, r0
    9b86:	9301      	str	r3, [sp, #4]
    9b88:	4a10      	ldr	r2, [pc, #64]	; (9bcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9b8a:	9b01      	ldr	r3, [sp, #4]
    9b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b90:	2b00      	cmp	r3, #0
    9b92:	d10d      	bne.n	9bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    9b94:	f7f6 fecb 	bl	92e <Port_schm_read_msr>
    9b98:	9000      	str	r0, [sp, #0]
    9b9a:	9b00      	ldr	r3, [sp, #0]
    9b9c:	f003 0301 	and.w	r3, r3, #1
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d100      	bne.n	9ba6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
    9ba4:	b672      	cpsid	i
    9ba6:	490a      	ldr	r1, [pc, #40]	; (9bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9ba8:	9b01      	ldr	r3, [sp, #4]
    9baa:	9a00      	ldr	r2, [sp, #0]
    9bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9bb0:	4a06      	ldr	r2, [pc, #24]	; (9bcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9bb2:	9b01      	ldr	r3, [sp, #4]
    9bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bb8:	1c5a      	adds	r2, r3, #1
    9bba:	4904      	ldr	r1, [pc, #16]	; (9bcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9bbc:	9b01      	ldr	r3, [sp, #4]
    9bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9bc2:	bf00      	nop
    9bc4:	b003      	add	sp, #12
    9bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    9bca:	bf00      	nop
    9bcc:	1fff91b0 	.word	0x1fff91b0
    9bd0:	1fff91ac 	.word	0x1fff91ac

00009bd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:
    9bd4:	b500      	push	{lr}
    9bd6:	b083      	sub	sp, #12
    9bd8:	f7f6 ff82 	bl	ae0 <Sys_GetCoreID>
    9bdc:	4603      	mov	r3, r0
    9bde:	9301      	str	r3, [sp, #4]
    9be0:	4a0d      	ldr	r2, [pc, #52]	; (9c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9be2:	9b01      	ldr	r3, [sp, #4]
    9be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be8:	1e5a      	subs	r2, r3, #1
    9bea:	490b      	ldr	r1, [pc, #44]	; (9c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9bec:	9b01      	ldr	r3, [sp, #4]
    9bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9bf2:	4a0a      	ldr	r2, [pc, #40]	; (9c1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    9bf4:	9b01      	ldr	r3, [sp, #4]
    9bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfa:	f003 0301 	and.w	r3, r3, #1
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d106      	bne.n	9c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9c02:	4a05      	ldr	r2, [pc, #20]	; (9c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    9c04:	9b01      	ldr	r3, [sp, #4]
    9c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d100      	bne.n	9c10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    9c0e:	b662      	cpsie	i
    9c10:	bf00      	nop
    9c12:	b003      	add	sp, #12
    9c14:	f85d fb04 	ldr.w	pc, [sp], #4
    9c18:	1fff91b0 	.word	0x1fff91b0
    9c1c:	1fff91ac 	.word	0x1fff91ac

00009c20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:
    9c20:	b500      	push	{lr}
    9c22:	b083      	sub	sp, #12
    9c24:	f7f6 ff5c 	bl	ae0 <Sys_GetCoreID>
    9c28:	4603      	mov	r3, r0
    9c2a:	9301      	str	r3, [sp, #4]
    9c2c:	4a10      	ldr	r2, [pc, #64]	; (9c70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c2e:	9b01      	ldr	r3, [sp, #4]
    9c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c34:	2b00      	cmp	r3, #0
    9c36:	d10d      	bne.n	9c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    9c38:	f7f6 fe79 	bl	92e <Port_schm_read_msr>
    9c3c:	9000      	str	r0, [sp, #0]
    9c3e:	9b00      	ldr	r3, [sp, #0]
    9c40:	f003 0301 	and.w	r3, r3, #1
    9c44:	2b00      	cmp	r3, #0
    9c46:	d100      	bne.n	9c4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
    9c48:	b672      	cpsid	i
    9c4a:	490a      	ldr	r1, [pc, #40]	; (9c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    9c4c:	9b01      	ldr	r3, [sp, #4]
    9c4e:	9a00      	ldr	r2, [sp, #0]
    9c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c54:	4a06      	ldr	r2, [pc, #24]	; (9c70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c56:	9b01      	ldr	r3, [sp, #4]
    9c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c5c:	1c5a      	adds	r2, r3, #1
    9c5e:	4904      	ldr	r1, [pc, #16]	; (9c70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9c60:	9b01      	ldr	r3, [sp, #4]
    9c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c66:	bf00      	nop
    9c68:	b003      	add	sp, #12
    9c6a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c6e:	bf00      	nop
    9c70:	1fff91b8 	.word	0x1fff91b8
    9c74:	1fff91b4 	.word	0x1fff91b4

00009c78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:
    9c78:	b500      	push	{lr}
    9c7a:	b083      	sub	sp, #12
    9c7c:	f7f6 ff30 	bl	ae0 <Sys_GetCoreID>
    9c80:	4603      	mov	r3, r0
    9c82:	9301      	str	r3, [sp, #4]
    9c84:	4a0d      	ldr	r2, [pc, #52]	; (9cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c86:	9b01      	ldr	r3, [sp, #4]
    9c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c8c:	1e5a      	subs	r2, r3, #1
    9c8e:	490b      	ldr	r1, [pc, #44]	; (9cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9c90:	9b01      	ldr	r3, [sp, #4]
    9c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9c96:	4a0a      	ldr	r2, [pc, #40]	; (9cc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9c98:	9b01      	ldr	r3, [sp, #4]
    9c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c9e:	f003 0301 	and.w	r3, r3, #1
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d106      	bne.n	9cb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9ca6:	4a05      	ldr	r2, [pc, #20]	; (9cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9ca8:	9b01      	ldr	r3, [sp, #4]
    9caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d100      	bne.n	9cb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9cb2:	b662      	cpsie	i
    9cb4:	bf00      	nop
    9cb6:	b003      	add	sp, #12
    9cb8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cbc:	1fff91b8 	.word	0x1fff91b8
    9cc0:	1fff91b4 	.word	0x1fff91b4

00009cc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:
    9cc4:	b500      	push	{lr}
    9cc6:	b083      	sub	sp, #12
    9cc8:	f7f6 ff0a 	bl	ae0 <Sys_GetCoreID>
    9ccc:	4603      	mov	r3, r0
    9cce:	9301      	str	r3, [sp, #4]
    9cd0:	4a10      	ldr	r2, [pc, #64]	; (9d14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cd2:	9b01      	ldr	r3, [sp, #4]
    9cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d10d      	bne.n	9cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    9cdc:	f7f6 fe27 	bl	92e <Port_schm_read_msr>
    9ce0:	9000      	str	r0, [sp, #0]
    9ce2:	9b00      	ldr	r3, [sp, #0]
    9ce4:	f003 0301 	and.w	r3, r3, #1
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d100      	bne.n	9cee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
    9cec:	b672      	cpsid	i
    9cee:	490a      	ldr	r1, [pc, #40]	; (9d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    9cf0:	9b01      	ldr	r3, [sp, #4]
    9cf2:	9a00      	ldr	r2, [sp, #0]
    9cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9cf8:	4a06      	ldr	r2, [pc, #24]	; (9d14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9cfa:	9b01      	ldr	r3, [sp, #4]
    9cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d00:	1c5a      	adds	r2, r3, #1
    9d02:	4904      	ldr	r1, [pc, #16]	; (9d14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    9d04:	9b01      	ldr	r3, [sp, #4]
    9d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d0a:	bf00      	nop
    9d0c:	b003      	add	sp, #12
    9d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    9d12:	bf00      	nop
    9d14:	1fff91c0 	.word	0x1fff91c0
    9d18:	1fff91bc 	.word	0x1fff91bc

00009d1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:
    9d1c:	b500      	push	{lr}
    9d1e:	b083      	sub	sp, #12
    9d20:	f7f6 fede 	bl	ae0 <Sys_GetCoreID>
    9d24:	4603      	mov	r3, r0
    9d26:	9301      	str	r3, [sp, #4]
    9d28:	4a0d      	ldr	r2, [pc, #52]	; (9d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d2a:	9b01      	ldr	r3, [sp, #4]
    9d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d30:	1e5a      	subs	r2, r3, #1
    9d32:	490b      	ldr	r1, [pc, #44]	; (9d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d34:	9b01      	ldr	r3, [sp, #4]
    9d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d3a:	4a0a      	ldr	r2, [pc, #40]	; (9d64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    9d3c:	9b01      	ldr	r3, [sp, #4]
    9d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d42:	f003 0301 	and.w	r3, r3, #1
    9d46:	2b00      	cmp	r3, #0
    9d48:	d106      	bne.n	9d58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9d4a:	4a05      	ldr	r2, [pc, #20]	; (9d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9d4c:	9b01      	ldr	r3, [sp, #4]
    9d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d52:	2b00      	cmp	r3, #0
    9d54:	d100      	bne.n	9d58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    9d56:	b662      	cpsie	i
    9d58:	bf00      	nop
    9d5a:	b003      	add	sp, #12
    9d5c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d60:	1fff91c0 	.word	0x1fff91c0
    9d64:	1fff91bc 	.word	0x1fff91bc

00009d68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:
    9d68:	b500      	push	{lr}
    9d6a:	b083      	sub	sp, #12
    9d6c:	f7f6 feb8 	bl	ae0 <Sys_GetCoreID>
    9d70:	4603      	mov	r3, r0
    9d72:	9301      	str	r3, [sp, #4]
    9d74:	4a10      	ldr	r2, [pc, #64]	; (9db8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d76:	9b01      	ldr	r3, [sp, #4]
    9d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d10d      	bne.n	9d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    9d80:	f7f6 fdd5 	bl	92e <Port_schm_read_msr>
    9d84:	9000      	str	r0, [sp, #0]
    9d86:	9b00      	ldr	r3, [sp, #0]
    9d88:	f003 0301 	and.w	r3, r3, #1
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d100      	bne.n	9d92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
    9d90:	b672      	cpsid	i
    9d92:	490a      	ldr	r1, [pc, #40]	; (9dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    9d94:	9b01      	ldr	r3, [sp, #4]
    9d96:	9a00      	ldr	r2, [sp, #0]
    9d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9d9c:	4a06      	ldr	r2, [pc, #24]	; (9db8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9d9e:	9b01      	ldr	r3, [sp, #4]
    9da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9da4:	1c5a      	adds	r2, r3, #1
    9da6:	4904      	ldr	r1, [pc, #16]	; (9db8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9da8:	9b01      	ldr	r3, [sp, #4]
    9daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9dae:	bf00      	nop
    9db0:	b003      	add	sp, #12
    9db2:	f85d fb04 	ldr.w	pc, [sp], #4
    9db6:	bf00      	nop
    9db8:	1fff91c8 	.word	0x1fff91c8
    9dbc:	1fff91c4 	.word	0x1fff91c4

00009dc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:
    9dc0:	b500      	push	{lr}
    9dc2:	b083      	sub	sp, #12
    9dc4:	f7f6 fe8c 	bl	ae0 <Sys_GetCoreID>
    9dc8:	4603      	mov	r3, r0
    9dca:	9301      	str	r3, [sp, #4]
    9dcc:	4a0d      	ldr	r2, [pc, #52]	; (9e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9dce:	9b01      	ldr	r3, [sp, #4]
    9dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dd4:	1e5a      	subs	r2, r3, #1
    9dd6:	490b      	ldr	r1, [pc, #44]	; (9e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9dd8:	9b01      	ldr	r3, [sp, #4]
    9dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9dde:	4a0a      	ldr	r2, [pc, #40]	; (9e08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    9de0:	9b01      	ldr	r3, [sp, #4]
    9de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9de6:	f003 0301 	and.w	r3, r3, #1
    9dea:	2b00      	cmp	r3, #0
    9dec:	d106      	bne.n	9dfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9dee:	4a05      	ldr	r2, [pc, #20]	; (9e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    9df0:	9b01      	ldr	r3, [sp, #4]
    9df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df6:	2b00      	cmp	r3, #0
    9df8:	d100      	bne.n	9dfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    9dfa:	b662      	cpsie	i
    9dfc:	bf00      	nop
    9dfe:	b003      	add	sp, #12
    9e00:	f85d fb04 	ldr.w	pc, [sp], #4
    9e04:	1fff91c8 	.word	0x1fff91c8
    9e08:	1fff91c4 	.word	0x1fff91c4

00009e0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:
    9e0c:	b500      	push	{lr}
    9e0e:	b083      	sub	sp, #12
    9e10:	f7f6 fe66 	bl	ae0 <Sys_GetCoreID>
    9e14:	4603      	mov	r3, r0
    9e16:	9301      	str	r3, [sp, #4]
    9e18:	4a10      	ldr	r2, [pc, #64]	; (9e5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e1a:	9b01      	ldr	r3, [sp, #4]
    9e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e20:	2b00      	cmp	r3, #0
    9e22:	d10d      	bne.n	9e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    9e24:	f7f6 fd83 	bl	92e <Port_schm_read_msr>
    9e28:	9000      	str	r0, [sp, #0]
    9e2a:	9b00      	ldr	r3, [sp, #0]
    9e2c:	f003 0301 	and.w	r3, r3, #1
    9e30:	2b00      	cmp	r3, #0
    9e32:	d100      	bne.n	9e36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
    9e34:	b672      	cpsid	i
    9e36:	490a      	ldr	r1, [pc, #40]	; (9e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9e38:	9b01      	ldr	r3, [sp, #4]
    9e3a:	9a00      	ldr	r2, [sp, #0]
    9e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e40:	4a06      	ldr	r2, [pc, #24]	; (9e5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e42:	9b01      	ldr	r3, [sp, #4]
    9e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e48:	1c5a      	adds	r2, r3, #1
    9e4a:	4904      	ldr	r1, [pc, #16]	; (9e5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9e4c:	9b01      	ldr	r3, [sp, #4]
    9e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e52:	bf00      	nop
    9e54:	b003      	add	sp, #12
    9e56:	f85d fb04 	ldr.w	pc, [sp], #4
    9e5a:	bf00      	nop
    9e5c:	1fff91d0 	.word	0x1fff91d0
    9e60:	1fff91cc 	.word	0x1fff91cc

00009e64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:
    9e64:	b500      	push	{lr}
    9e66:	b083      	sub	sp, #12
    9e68:	f7f6 fe3a 	bl	ae0 <Sys_GetCoreID>
    9e6c:	4603      	mov	r3, r0
    9e6e:	9301      	str	r3, [sp, #4]
    9e70:	4a0d      	ldr	r2, [pc, #52]	; (9ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e72:	9b01      	ldr	r3, [sp, #4]
    9e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e78:	1e5a      	subs	r2, r3, #1
    9e7a:	490b      	ldr	r1, [pc, #44]	; (9ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e7c:	9b01      	ldr	r3, [sp, #4]
    9e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9e82:	4a0a      	ldr	r2, [pc, #40]	; (9eac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    9e84:	9b01      	ldr	r3, [sp, #4]
    9e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e8a:	f003 0301 	and.w	r3, r3, #1
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d106      	bne.n	9ea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9e92:	4a05      	ldr	r2, [pc, #20]	; (9ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9e94:	9b01      	ldr	r3, [sp, #4]
    9e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d100      	bne.n	9ea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9e9e:	b662      	cpsie	i
    9ea0:	bf00      	nop
    9ea2:	b003      	add	sp, #12
    9ea4:	f85d fb04 	ldr.w	pc, [sp], #4
    9ea8:	1fff91d0 	.word	0x1fff91d0
    9eac:	1fff91cc 	.word	0x1fff91cc

00009eb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:
    9eb0:	b500      	push	{lr}
    9eb2:	b083      	sub	sp, #12
    9eb4:	f7f6 fe14 	bl	ae0 <Sys_GetCoreID>
    9eb8:	4603      	mov	r3, r0
    9eba:	9301      	str	r3, [sp, #4]
    9ebc:	4a10      	ldr	r2, [pc, #64]	; (9f00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9ebe:	9b01      	ldr	r3, [sp, #4]
    9ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d10d      	bne.n	9ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    9ec8:	f7f6 fd31 	bl	92e <Port_schm_read_msr>
    9ecc:	9000      	str	r0, [sp, #0]
    9ece:	9b00      	ldr	r3, [sp, #0]
    9ed0:	f003 0301 	and.w	r3, r3, #1
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d100      	bne.n	9eda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
    9ed8:	b672      	cpsid	i
    9eda:	490a      	ldr	r1, [pc, #40]	; (9f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    9edc:	9b01      	ldr	r3, [sp, #4]
    9ede:	9a00      	ldr	r2, [sp, #0]
    9ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ee4:	4a06      	ldr	r2, [pc, #24]	; (9f00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9ee6:	9b01      	ldr	r3, [sp, #4]
    9ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eec:	1c5a      	adds	r2, r3, #1
    9eee:	4904      	ldr	r1, [pc, #16]	; (9f00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    9ef0:	9b01      	ldr	r3, [sp, #4]
    9ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9ef6:	bf00      	nop
    9ef8:	b003      	add	sp, #12
    9efa:	f85d fb04 	ldr.w	pc, [sp], #4
    9efe:	bf00      	nop
    9f00:	1fff91d8 	.word	0x1fff91d8
    9f04:	1fff91d4 	.word	0x1fff91d4

00009f08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:
    9f08:	b500      	push	{lr}
    9f0a:	b083      	sub	sp, #12
    9f0c:	f7f6 fde8 	bl	ae0 <Sys_GetCoreID>
    9f10:	4603      	mov	r3, r0
    9f12:	9301      	str	r3, [sp, #4]
    9f14:	4a0d      	ldr	r2, [pc, #52]	; (9f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f16:	9b01      	ldr	r3, [sp, #4]
    9f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f1c:	1e5a      	subs	r2, r3, #1
    9f1e:	490b      	ldr	r1, [pc, #44]	; (9f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f20:	9b01      	ldr	r3, [sp, #4]
    9f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f26:	4a0a      	ldr	r2, [pc, #40]	; (9f50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    9f28:	9b01      	ldr	r3, [sp, #4]
    9f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f2e:	f003 0301 	and.w	r3, r3, #1
    9f32:	2b00      	cmp	r3, #0
    9f34:	d106      	bne.n	9f44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9f36:	4a05      	ldr	r2, [pc, #20]	; (9f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9f38:	9b01      	ldr	r3, [sp, #4]
    9f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f3e:	2b00      	cmp	r3, #0
    9f40:	d100      	bne.n	9f44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9f42:	b662      	cpsie	i
    9f44:	bf00      	nop
    9f46:	b003      	add	sp, #12
    9f48:	f85d fb04 	ldr.w	pc, [sp], #4
    9f4c:	1fff91d8 	.word	0x1fff91d8
    9f50:	1fff91d4 	.word	0x1fff91d4

00009f54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
    9f54:	b500      	push	{lr}
    9f56:	b083      	sub	sp, #12
    9f58:	f7f6 fdc2 	bl	ae0 <Sys_GetCoreID>
    9f5c:	4603      	mov	r3, r0
    9f5e:	9301      	str	r3, [sp, #4]
    9f60:	4a10      	ldr	r2, [pc, #64]	; (9fa4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f62:	9b01      	ldr	r3, [sp, #4]
    9f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f68:	2b00      	cmp	r3, #0
    9f6a:	d10d      	bne.n	9f88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    9f6c:	f7f6 fce8 	bl	940 <Pwm_schm_read_msr>
    9f70:	9000      	str	r0, [sp, #0]
    9f72:	9b00      	ldr	r3, [sp, #0]
    9f74:	f003 0301 	and.w	r3, r3, #1
    9f78:	2b00      	cmp	r3, #0
    9f7a:	d100      	bne.n	9f7e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
    9f7c:	b672      	cpsid	i
    9f7e:	490a      	ldr	r1, [pc, #40]	; (9fa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
    9f80:	9b01      	ldr	r3, [sp, #4]
    9f82:	9a00      	ldr	r2, [sp, #0]
    9f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f88:	4a06      	ldr	r2, [pc, #24]	; (9fa4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f8a:	9b01      	ldr	r3, [sp, #4]
    9f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f90:	1c5a      	adds	r2, r3, #1
    9f92:	4904      	ldr	r1, [pc, #16]	; (9fa4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
    9f94:	9b01      	ldr	r3, [sp, #4]
    9f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9f9a:	bf00      	nop
    9f9c:	b003      	add	sp, #12
    9f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    9fa2:	bf00      	nop
    9fa4:	1fff91e0 	.word	0x1fff91e0
    9fa8:	1fff91dc 	.word	0x1fff91dc

00009fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:
    9fac:	b500      	push	{lr}
    9fae:	b083      	sub	sp, #12
    9fb0:	f7f6 fd96 	bl	ae0 <Sys_GetCoreID>
    9fb4:	4603      	mov	r3, r0
    9fb6:	9301      	str	r3, [sp, #4]
    9fb8:	4a0d      	ldr	r2, [pc, #52]	; (9ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9fba:	9b01      	ldr	r3, [sp, #4]
    9fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fc0:	1e5a      	subs	r2, r3, #1
    9fc2:	490b      	ldr	r1, [pc, #44]	; (9ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9fc4:	9b01      	ldr	r3, [sp, #4]
    9fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    9fca:	4a0a      	ldr	r2, [pc, #40]	; (9ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
    9fcc:	9b01      	ldr	r3, [sp, #4]
    9fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd2:	f003 0301 	and.w	r3, r3, #1
    9fd6:	2b00      	cmp	r3, #0
    9fd8:	d106      	bne.n	9fe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    9fda:	4a05      	ldr	r2, [pc, #20]	; (9ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
    9fdc:	9b01      	ldr	r3, [sp, #4]
    9fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d100      	bne.n	9fe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    9fe6:	b662      	cpsie	i
    9fe8:	bf00      	nop
    9fea:	b003      	add	sp, #12
    9fec:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff0:	1fff91e0 	.word	0x1fff91e0
    9ff4:	1fff91dc 	.word	0x1fff91dc

00009ff8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:
    9ff8:	b500      	push	{lr}
    9ffa:	b083      	sub	sp, #12
    9ffc:	f7f6 fd70 	bl	ae0 <Sys_GetCoreID>
    a000:	4603      	mov	r3, r0
    a002:	9301      	str	r3, [sp, #4]
    a004:	4a10      	ldr	r2, [pc, #64]	; (a048 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a006:	9b01      	ldr	r3, [sp, #4]
    a008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a00c:	2b00      	cmp	r3, #0
    a00e:	d10d      	bne.n	a02c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    a010:	f7f6 fc96 	bl	940 <Pwm_schm_read_msr>
    a014:	9000      	str	r0, [sp, #0]
    a016:	9b00      	ldr	r3, [sp, #0]
    a018:	f003 0301 	and.w	r3, r3, #1
    a01c:	2b00      	cmp	r3, #0
    a01e:	d100      	bne.n	a022 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
    a020:	b672      	cpsid	i
    a022:	490a      	ldr	r1, [pc, #40]	; (a04c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
    a024:	9b01      	ldr	r3, [sp, #4]
    a026:	9a00      	ldr	r2, [sp, #0]
    a028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a02c:	4a06      	ldr	r2, [pc, #24]	; (a048 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a02e:	9b01      	ldr	r3, [sp, #4]
    a030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a034:	1c5a      	adds	r2, r3, #1
    a036:	4904      	ldr	r1, [pc, #16]	; (a048 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
    a038:	9b01      	ldr	r3, [sp, #4]
    a03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a03e:	bf00      	nop
    a040:	b003      	add	sp, #12
    a042:	f85d fb04 	ldr.w	pc, [sp], #4
    a046:	bf00      	nop
    a048:	1fff91e8 	.word	0x1fff91e8
    a04c:	1fff91e4 	.word	0x1fff91e4

0000a050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:
    a050:	b500      	push	{lr}
    a052:	b083      	sub	sp, #12
    a054:	f7f6 fd44 	bl	ae0 <Sys_GetCoreID>
    a058:	4603      	mov	r3, r0
    a05a:	9301      	str	r3, [sp, #4]
    a05c:	4a0d      	ldr	r2, [pc, #52]	; (a094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a05e:	9b01      	ldr	r3, [sp, #4]
    a060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a064:	1e5a      	subs	r2, r3, #1
    a066:	490b      	ldr	r1, [pc, #44]	; (a094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a068:	9b01      	ldr	r3, [sp, #4]
    a06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a06e:	4a0a      	ldr	r2, [pc, #40]	; (a098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
    a070:	9b01      	ldr	r3, [sp, #4]
    a072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a076:	f003 0301 	and.w	r3, r3, #1
    a07a:	2b00      	cmp	r3, #0
    a07c:	d106      	bne.n	a08c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a07e:	4a05      	ldr	r2, [pc, #20]	; (a094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
    a080:	9b01      	ldr	r3, [sp, #4]
    a082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a086:	2b00      	cmp	r3, #0
    a088:	d100      	bne.n	a08c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    a08a:	b662      	cpsie	i
    a08c:	bf00      	nop
    a08e:	b003      	add	sp, #12
    a090:	f85d fb04 	ldr.w	pc, [sp], #4
    a094:	1fff91e8 	.word	0x1fff91e8
    a098:	1fff91e4 	.word	0x1fff91e4

0000a09c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:
    a09c:	b500      	push	{lr}
    a09e:	b083      	sub	sp, #12
    a0a0:	f7f6 fd1e 	bl	ae0 <Sys_GetCoreID>
    a0a4:	4603      	mov	r3, r0
    a0a6:	9301      	str	r3, [sp, #4]
    a0a8:	4a10      	ldr	r2, [pc, #64]	; (a0ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0aa:	9b01      	ldr	r3, [sp, #4]
    a0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0b0:	2b00      	cmp	r3, #0
    a0b2:	d10d      	bne.n	a0d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    a0b4:	f7f6 fc44 	bl	940 <Pwm_schm_read_msr>
    a0b8:	9000      	str	r0, [sp, #0]
    a0ba:	9b00      	ldr	r3, [sp, #0]
    a0bc:	f003 0301 	and.w	r3, r3, #1
    a0c0:	2b00      	cmp	r3, #0
    a0c2:	d100      	bne.n	a0c6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
    a0c4:	b672      	cpsid	i
    a0c6:	490a      	ldr	r1, [pc, #40]	; (a0f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
    a0c8:	9b01      	ldr	r3, [sp, #4]
    a0ca:	9a00      	ldr	r2, [sp, #0]
    a0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0d0:	4a06      	ldr	r2, [pc, #24]	; (a0ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0d2:	9b01      	ldr	r3, [sp, #4]
    a0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0d8:	1c5a      	adds	r2, r3, #1
    a0da:	4904      	ldr	r1, [pc, #16]	; (a0ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
    a0dc:	9b01      	ldr	r3, [sp, #4]
    a0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a0e2:	bf00      	nop
    a0e4:	b003      	add	sp, #12
    a0e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a0ea:	bf00      	nop
    a0ec:	1fff91f0 	.word	0x1fff91f0
    a0f0:	1fff91ec 	.word	0x1fff91ec

0000a0f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:
    a0f4:	b500      	push	{lr}
    a0f6:	b083      	sub	sp, #12
    a0f8:	f7f6 fcf2 	bl	ae0 <Sys_GetCoreID>
    a0fc:	4603      	mov	r3, r0
    a0fe:	9301      	str	r3, [sp, #4]
    a100:	4a0d      	ldr	r2, [pc, #52]	; (a138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a102:	9b01      	ldr	r3, [sp, #4]
    a104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a108:	1e5a      	subs	r2, r3, #1
    a10a:	490b      	ldr	r1, [pc, #44]	; (a138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a10c:	9b01      	ldr	r3, [sp, #4]
    a10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a112:	4a0a      	ldr	r2, [pc, #40]	; (a13c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
    a114:	9b01      	ldr	r3, [sp, #4]
    a116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11a:	f003 0301 	and.w	r3, r3, #1
    a11e:	2b00      	cmp	r3, #0
    a120:	d106      	bne.n	a130 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a122:	4a05      	ldr	r2, [pc, #20]	; (a138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
    a124:	9b01      	ldr	r3, [sp, #4]
    a126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a12a:	2b00      	cmp	r3, #0
    a12c:	d100      	bne.n	a130 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    a12e:	b662      	cpsie	i
    a130:	bf00      	nop
    a132:	b003      	add	sp, #12
    a134:	f85d fb04 	ldr.w	pc, [sp], #4
    a138:	1fff91f0 	.word	0x1fff91f0
    a13c:	1fff91ec 	.word	0x1fff91ec

0000a140 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:
    a140:	b500      	push	{lr}
    a142:	b083      	sub	sp, #12
    a144:	f7f6 fccc 	bl	ae0 <Sys_GetCoreID>
    a148:	4603      	mov	r3, r0
    a14a:	9301      	str	r3, [sp, #4]
    a14c:	4a10      	ldr	r2, [pc, #64]	; (a190 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a14e:	9b01      	ldr	r3, [sp, #4]
    a150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a154:	2b00      	cmp	r3, #0
    a156:	d10d      	bne.n	a174 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    a158:	f7f6 fbf2 	bl	940 <Pwm_schm_read_msr>
    a15c:	9000      	str	r0, [sp, #0]
    a15e:	9b00      	ldr	r3, [sp, #0]
    a160:	f003 0301 	and.w	r3, r3, #1
    a164:	2b00      	cmp	r3, #0
    a166:	d100      	bne.n	a16a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
    a168:	b672      	cpsid	i
    a16a:	490a      	ldr	r1, [pc, #40]	; (a194 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
    a16c:	9b01      	ldr	r3, [sp, #4]
    a16e:	9a00      	ldr	r2, [sp, #0]
    a170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a174:	4a06      	ldr	r2, [pc, #24]	; (a190 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a176:	9b01      	ldr	r3, [sp, #4]
    a178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a17c:	1c5a      	adds	r2, r3, #1
    a17e:	4904      	ldr	r1, [pc, #16]	; (a190 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
    a180:	9b01      	ldr	r3, [sp, #4]
    a182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a186:	bf00      	nop
    a188:	b003      	add	sp, #12
    a18a:	f85d fb04 	ldr.w	pc, [sp], #4
    a18e:	bf00      	nop
    a190:	1fff91f8 	.word	0x1fff91f8
    a194:	1fff91f4 	.word	0x1fff91f4

0000a198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:
    a198:	b500      	push	{lr}
    a19a:	b083      	sub	sp, #12
    a19c:	f7f6 fca0 	bl	ae0 <Sys_GetCoreID>
    a1a0:	4603      	mov	r3, r0
    a1a2:	9301      	str	r3, [sp, #4]
    a1a4:	4a0d      	ldr	r2, [pc, #52]	; (a1dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a1a6:	9b01      	ldr	r3, [sp, #4]
    a1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ac:	1e5a      	subs	r2, r3, #1
    a1ae:	490b      	ldr	r1, [pc, #44]	; (a1dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a1b0:	9b01      	ldr	r3, [sp, #4]
    a1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a1b6:	4a0a      	ldr	r2, [pc, #40]	; (a1e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
    a1b8:	9b01      	ldr	r3, [sp, #4]
    a1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1be:	f003 0301 	and.w	r3, r3, #1
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d106      	bne.n	a1d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a1c6:	4a05      	ldr	r2, [pc, #20]	; (a1dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
    a1c8:	9b01      	ldr	r3, [sp, #4]
    a1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d100      	bne.n	a1d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    a1d2:	b662      	cpsie	i
    a1d4:	bf00      	nop
    a1d6:	b003      	add	sp, #12
    a1d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a1dc:	1fff91f8 	.word	0x1fff91f8
    a1e0:	1fff91f4 	.word	0x1fff91f4

0000a1e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:
    a1e4:	b500      	push	{lr}
    a1e6:	b083      	sub	sp, #12
    a1e8:	f7f6 fc7a 	bl	ae0 <Sys_GetCoreID>
    a1ec:	4603      	mov	r3, r0
    a1ee:	9301      	str	r3, [sp, #4]
    a1f0:	4a10      	ldr	r2, [pc, #64]	; (a234 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a1f2:	9b01      	ldr	r3, [sp, #4]
    a1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d10d      	bne.n	a218 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    a1fc:	f7f6 fba0 	bl	940 <Pwm_schm_read_msr>
    a200:	9000      	str	r0, [sp, #0]
    a202:	9b00      	ldr	r3, [sp, #0]
    a204:	f003 0301 	and.w	r3, r3, #1
    a208:	2b00      	cmp	r3, #0
    a20a:	d100      	bne.n	a20e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
    a20c:	b672      	cpsid	i
    a20e:	490a      	ldr	r1, [pc, #40]	; (a238 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
    a210:	9b01      	ldr	r3, [sp, #4]
    a212:	9a00      	ldr	r2, [sp, #0]
    a214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a218:	4a06      	ldr	r2, [pc, #24]	; (a234 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a21a:	9b01      	ldr	r3, [sp, #4]
    a21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a220:	1c5a      	adds	r2, r3, #1
    a222:	4904      	ldr	r1, [pc, #16]	; (a234 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
    a224:	9b01      	ldr	r3, [sp, #4]
    a226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a22a:	bf00      	nop
    a22c:	b003      	add	sp, #12
    a22e:	f85d fb04 	ldr.w	pc, [sp], #4
    a232:	bf00      	nop
    a234:	1fff9200 	.word	0x1fff9200
    a238:	1fff91fc 	.word	0x1fff91fc

0000a23c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:
    a23c:	b500      	push	{lr}
    a23e:	b083      	sub	sp, #12
    a240:	f7f6 fc4e 	bl	ae0 <Sys_GetCoreID>
    a244:	4603      	mov	r3, r0
    a246:	9301      	str	r3, [sp, #4]
    a248:	4a0d      	ldr	r2, [pc, #52]	; (a280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a24a:	9b01      	ldr	r3, [sp, #4]
    a24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a250:	1e5a      	subs	r2, r3, #1
    a252:	490b      	ldr	r1, [pc, #44]	; (a280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a254:	9b01      	ldr	r3, [sp, #4]
    a256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a25a:	4a0a      	ldr	r2, [pc, #40]	; (a284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
    a25c:	9b01      	ldr	r3, [sp, #4]
    a25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a262:	f003 0301 	and.w	r3, r3, #1
    a266:	2b00      	cmp	r3, #0
    a268:	d106      	bne.n	a278 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a26a:	4a05      	ldr	r2, [pc, #20]	; (a280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
    a26c:	9b01      	ldr	r3, [sp, #4]
    a26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a272:	2b00      	cmp	r3, #0
    a274:	d100      	bne.n	a278 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    a276:	b662      	cpsie	i
    a278:	bf00      	nop
    a27a:	b003      	add	sp, #12
    a27c:	f85d fb04 	ldr.w	pc, [sp], #4
    a280:	1fff9200 	.word	0x1fff9200
    a284:	1fff91fc 	.word	0x1fff91fc

0000a288 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:
    a288:	b500      	push	{lr}
    a28a:	b083      	sub	sp, #12
    a28c:	f7f6 fc28 	bl	ae0 <Sys_GetCoreID>
    a290:	4603      	mov	r3, r0
    a292:	9301      	str	r3, [sp, #4]
    a294:	4a10      	ldr	r2, [pc, #64]	; (a2d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a296:	9b01      	ldr	r3, [sp, #4]
    a298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a29c:	2b00      	cmp	r3, #0
    a29e:	d10d      	bne.n	a2bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    a2a0:	f7f6 fb4e 	bl	940 <Pwm_schm_read_msr>
    a2a4:	9000      	str	r0, [sp, #0]
    a2a6:	9b00      	ldr	r3, [sp, #0]
    a2a8:	f003 0301 	and.w	r3, r3, #1
    a2ac:	2b00      	cmp	r3, #0
    a2ae:	d100      	bne.n	a2b2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
    a2b0:	b672      	cpsid	i
    a2b2:	490a      	ldr	r1, [pc, #40]	; (a2dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
    a2b4:	9b01      	ldr	r3, [sp, #4]
    a2b6:	9a00      	ldr	r2, [sp, #0]
    a2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2bc:	4a06      	ldr	r2, [pc, #24]	; (a2d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a2be:	9b01      	ldr	r3, [sp, #4]
    a2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c4:	1c5a      	adds	r2, r3, #1
    a2c6:	4904      	ldr	r1, [pc, #16]	; (a2d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
    a2c8:	9b01      	ldr	r3, [sp, #4]
    a2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2ce:	bf00      	nop
    a2d0:	b003      	add	sp, #12
    a2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2d6:	bf00      	nop
    a2d8:	1fff9208 	.word	0x1fff9208
    a2dc:	1fff9204 	.word	0x1fff9204

0000a2e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:
    a2e0:	b500      	push	{lr}
    a2e2:	b083      	sub	sp, #12
    a2e4:	f7f6 fbfc 	bl	ae0 <Sys_GetCoreID>
    a2e8:	4603      	mov	r3, r0
    a2ea:	9301      	str	r3, [sp, #4]
    a2ec:	4a0d      	ldr	r2, [pc, #52]	; (a324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2ee:	9b01      	ldr	r3, [sp, #4]
    a2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f4:	1e5a      	subs	r2, r3, #1
    a2f6:	490b      	ldr	r1, [pc, #44]	; (a324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a2f8:	9b01      	ldr	r3, [sp, #4]
    a2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a2fe:	4a0a      	ldr	r2, [pc, #40]	; (a328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
    a300:	9b01      	ldr	r3, [sp, #4]
    a302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a306:	f003 0301 	and.w	r3, r3, #1
    a30a:	2b00      	cmp	r3, #0
    a30c:	d106      	bne.n	a31c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a30e:	4a05      	ldr	r2, [pc, #20]	; (a324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
    a310:	9b01      	ldr	r3, [sp, #4]
    a312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a316:	2b00      	cmp	r3, #0
    a318:	d100      	bne.n	a31c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    a31a:	b662      	cpsie	i
    a31c:	bf00      	nop
    a31e:	b003      	add	sp, #12
    a320:	f85d fb04 	ldr.w	pc, [sp], #4
    a324:	1fff9208 	.word	0x1fff9208
    a328:	1fff9204 	.word	0x1fff9204

0000a32c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:
    a32c:	b500      	push	{lr}
    a32e:	b083      	sub	sp, #12
    a330:	f7f6 fbd6 	bl	ae0 <Sys_GetCoreID>
    a334:	4603      	mov	r3, r0
    a336:	9301      	str	r3, [sp, #4]
    a338:	4a10      	ldr	r2, [pc, #64]	; (a37c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a33a:	9b01      	ldr	r3, [sp, #4]
    a33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a340:	2b00      	cmp	r3, #0
    a342:	d10d      	bne.n	a360 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    a344:	f7f6 fafc 	bl	940 <Pwm_schm_read_msr>
    a348:	9000      	str	r0, [sp, #0]
    a34a:	9b00      	ldr	r3, [sp, #0]
    a34c:	f003 0301 	and.w	r3, r3, #1
    a350:	2b00      	cmp	r3, #0
    a352:	d100      	bne.n	a356 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
    a354:	b672      	cpsid	i
    a356:	490a      	ldr	r1, [pc, #40]	; (a380 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
    a358:	9b01      	ldr	r3, [sp, #4]
    a35a:	9a00      	ldr	r2, [sp, #0]
    a35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a360:	4a06      	ldr	r2, [pc, #24]	; (a37c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a362:	9b01      	ldr	r3, [sp, #4]
    a364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a368:	1c5a      	adds	r2, r3, #1
    a36a:	4904      	ldr	r1, [pc, #16]	; (a37c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
    a36c:	9b01      	ldr	r3, [sp, #4]
    a36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a372:	bf00      	nop
    a374:	b003      	add	sp, #12
    a376:	f85d fb04 	ldr.w	pc, [sp], #4
    a37a:	bf00      	nop
    a37c:	1fff9210 	.word	0x1fff9210
    a380:	1fff920c 	.word	0x1fff920c

0000a384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:
    a384:	b500      	push	{lr}
    a386:	b083      	sub	sp, #12
    a388:	f7f6 fbaa 	bl	ae0 <Sys_GetCoreID>
    a38c:	4603      	mov	r3, r0
    a38e:	9301      	str	r3, [sp, #4]
    a390:	4a0d      	ldr	r2, [pc, #52]	; (a3c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a392:	9b01      	ldr	r3, [sp, #4]
    a394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a398:	1e5a      	subs	r2, r3, #1
    a39a:	490b      	ldr	r1, [pc, #44]	; (a3c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a39c:	9b01      	ldr	r3, [sp, #4]
    a39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a3a2:	4a0a      	ldr	r2, [pc, #40]	; (a3cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
    a3a4:	9b01      	ldr	r3, [sp, #4]
    a3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3aa:	f003 0301 	and.w	r3, r3, #1
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d106      	bne.n	a3c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a3b2:	4a05      	ldr	r2, [pc, #20]	; (a3c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
    a3b4:	9b01      	ldr	r3, [sp, #4]
    a3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3ba:	2b00      	cmp	r3, #0
    a3bc:	d100      	bne.n	a3c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    a3be:	b662      	cpsie	i
    a3c0:	bf00      	nop
    a3c2:	b003      	add	sp, #12
    a3c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a3c8:	1fff9210 	.word	0x1fff9210
    a3cc:	1fff920c 	.word	0x1fff920c

0000a3d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:
    a3d0:	b500      	push	{lr}
    a3d2:	b083      	sub	sp, #12
    a3d4:	f7f6 fb84 	bl	ae0 <Sys_GetCoreID>
    a3d8:	4603      	mov	r3, r0
    a3da:	9301      	str	r3, [sp, #4]
    a3dc:	4a10      	ldr	r2, [pc, #64]	; (a420 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a3de:	9b01      	ldr	r3, [sp, #4]
    a3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d10d      	bne.n	a404 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    a3e8:	f7f6 faaa 	bl	940 <Pwm_schm_read_msr>
    a3ec:	9000      	str	r0, [sp, #0]
    a3ee:	9b00      	ldr	r3, [sp, #0]
    a3f0:	f003 0301 	and.w	r3, r3, #1
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d100      	bne.n	a3fa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
    a3f8:	b672      	cpsid	i
    a3fa:	490a      	ldr	r1, [pc, #40]	; (a424 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
    a3fc:	9b01      	ldr	r3, [sp, #4]
    a3fe:	9a00      	ldr	r2, [sp, #0]
    a400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a404:	4a06      	ldr	r2, [pc, #24]	; (a420 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a406:	9b01      	ldr	r3, [sp, #4]
    a408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a40c:	1c5a      	adds	r2, r3, #1
    a40e:	4904      	ldr	r1, [pc, #16]	; (a420 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
    a410:	9b01      	ldr	r3, [sp, #4]
    a412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a416:	bf00      	nop
    a418:	b003      	add	sp, #12
    a41a:	f85d fb04 	ldr.w	pc, [sp], #4
    a41e:	bf00      	nop
    a420:	1fff9218 	.word	0x1fff9218
    a424:	1fff9214 	.word	0x1fff9214

0000a428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:
    a428:	b500      	push	{lr}
    a42a:	b083      	sub	sp, #12
    a42c:	f7f6 fb58 	bl	ae0 <Sys_GetCoreID>
    a430:	4603      	mov	r3, r0
    a432:	9301      	str	r3, [sp, #4]
    a434:	4a0d      	ldr	r2, [pc, #52]	; (a46c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a436:	9b01      	ldr	r3, [sp, #4]
    a438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43c:	1e5a      	subs	r2, r3, #1
    a43e:	490b      	ldr	r1, [pc, #44]	; (a46c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a440:	9b01      	ldr	r3, [sp, #4]
    a442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a446:	4a0a      	ldr	r2, [pc, #40]	; (a470 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
    a448:	9b01      	ldr	r3, [sp, #4]
    a44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a44e:	f003 0301 	and.w	r3, r3, #1
    a452:	2b00      	cmp	r3, #0
    a454:	d106      	bne.n	a464 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a456:	4a05      	ldr	r2, [pc, #20]	; (a46c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
    a458:	9b01      	ldr	r3, [sp, #4]
    a45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a45e:	2b00      	cmp	r3, #0
    a460:	d100      	bne.n	a464 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    a462:	b662      	cpsie	i
    a464:	bf00      	nop
    a466:	b003      	add	sp, #12
    a468:	f85d fb04 	ldr.w	pc, [sp], #4
    a46c:	1fff9218 	.word	0x1fff9218
    a470:	1fff9214 	.word	0x1fff9214

0000a474 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:
    a474:	b500      	push	{lr}
    a476:	b083      	sub	sp, #12
    a478:	f7f6 fb32 	bl	ae0 <Sys_GetCoreID>
    a47c:	4603      	mov	r3, r0
    a47e:	9301      	str	r3, [sp, #4]
    a480:	4a10      	ldr	r2, [pc, #64]	; (a4c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a482:	9b01      	ldr	r3, [sp, #4]
    a484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a488:	2b00      	cmp	r3, #0
    a48a:	d10d      	bne.n	a4a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    a48c:	f7f6 fa58 	bl	940 <Pwm_schm_read_msr>
    a490:	9000      	str	r0, [sp, #0]
    a492:	9b00      	ldr	r3, [sp, #0]
    a494:	f003 0301 	and.w	r3, r3, #1
    a498:	2b00      	cmp	r3, #0
    a49a:	d100      	bne.n	a49e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
    a49c:	b672      	cpsid	i
    a49e:	490a      	ldr	r1, [pc, #40]	; (a4c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
    a4a0:	9b01      	ldr	r3, [sp, #4]
    a4a2:	9a00      	ldr	r2, [sp, #0]
    a4a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a4a8:	4a06      	ldr	r2, [pc, #24]	; (a4c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a4aa:	9b01      	ldr	r3, [sp, #4]
    a4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b0:	1c5a      	adds	r2, r3, #1
    a4b2:	4904      	ldr	r1, [pc, #16]	; (a4c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
    a4b4:	9b01      	ldr	r3, [sp, #4]
    a4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a4ba:	bf00      	nop
    a4bc:	b003      	add	sp, #12
    a4be:	f85d fb04 	ldr.w	pc, [sp], #4
    a4c2:	bf00      	nop
    a4c4:	1fff9220 	.word	0x1fff9220
    a4c8:	1fff921c 	.word	0x1fff921c

0000a4cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:
    a4cc:	b500      	push	{lr}
    a4ce:	b083      	sub	sp, #12
    a4d0:	f7f6 fb06 	bl	ae0 <Sys_GetCoreID>
    a4d4:	4603      	mov	r3, r0
    a4d6:	9301      	str	r3, [sp, #4]
    a4d8:	4a0d      	ldr	r2, [pc, #52]	; (a510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4da:	9b01      	ldr	r3, [sp, #4]
    a4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4e0:	1e5a      	subs	r2, r3, #1
    a4e2:	490b      	ldr	r1, [pc, #44]	; (a510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4e4:	9b01      	ldr	r3, [sp, #4]
    a4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a4ea:	4a0a      	ldr	r2, [pc, #40]	; (a514 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
    a4ec:	9b01      	ldr	r3, [sp, #4]
    a4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f2:	f003 0301 	and.w	r3, r3, #1
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d106      	bne.n	a508 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a4fa:	4a05      	ldr	r2, [pc, #20]	; (a510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
    a4fc:	9b01      	ldr	r3, [sp, #4]
    a4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a502:	2b00      	cmp	r3, #0
    a504:	d100      	bne.n	a508 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    a506:	b662      	cpsie	i
    a508:	bf00      	nop
    a50a:	b003      	add	sp, #12
    a50c:	f85d fb04 	ldr.w	pc, [sp], #4
    a510:	1fff9220 	.word	0x1fff9220
    a514:	1fff921c 	.word	0x1fff921c

0000a518 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:
    a518:	b500      	push	{lr}
    a51a:	b083      	sub	sp, #12
    a51c:	f7f6 fae0 	bl	ae0 <Sys_GetCoreID>
    a520:	4603      	mov	r3, r0
    a522:	9301      	str	r3, [sp, #4]
    a524:	4a10      	ldr	r2, [pc, #64]	; (a568 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a526:	9b01      	ldr	r3, [sp, #4]
    a528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a52c:	2b00      	cmp	r3, #0
    a52e:	d10d      	bne.n	a54c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    a530:	f7f6 fa06 	bl	940 <Pwm_schm_read_msr>
    a534:	9000      	str	r0, [sp, #0]
    a536:	9b00      	ldr	r3, [sp, #0]
    a538:	f003 0301 	and.w	r3, r3, #1
    a53c:	2b00      	cmp	r3, #0
    a53e:	d100      	bne.n	a542 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
    a540:	b672      	cpsid	i
    a542:	490a      	ldr	r1, [pc, #40]	; (a56c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
    a544:	9b01      	ldr	r3, [sp, #4]
    a546:	9a00      	ldr	r2, [sp, #0]
    a548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a54c:	4a06      	ldr	r2, [pc, #24]	; (a568 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a54e:	9b01      	ldr	r3, [sp, #4]
    a550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a554:	1c5a      	adds	r2, r3, #1
    a556:	4904      	ldr	r1, [pc, #16]	; (a568 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
    a558:	9b01      	ldr	r3, [sp, #4]
    a55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a55e:	bf00      	nop
    a560:	b003      	add	sp, #12
    a562:	f85d fb04 	ldr.w	pc, [sp], #4
    a566:	bf00      	nop
    a568:	1fff9228 	.word	0x1fff9228
    a56c:	1fff9224 	.word	0x1fff9224

0000a570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:
    a570:	b500      	push	{lr}
    a572:	b083      	sub	sp, #12
    a574:	f7f6 fab4 	bl	ae0 <Sys_GetCoreID>
    a578:	4603      	mov	r3, r0
    a57a:	9301      	str	r3, [sp, #4]
    a57c:	4a0d      	ldr	r2, [pc, #52]	; (a5b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a57e:	9b01      	ldr	r3, [sp, #4]
    a580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a584:	1e5a      	subs	r2, r3, #1
    a586:	490b      	ldr	r1, [pc, #44]	; (a5b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a588:	9b01      	ldr	r3, [sp, #4]
    a58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a58e:	4a0a      	ldr	r2, [pc, #40]	; (a5b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
    a590:	9b01      	ldr	r3, [sp, #4]
    a592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a596:	f003 0301 	and.w	r3, r3, #1
    a59a:	2b00      	cmp	r3, #0
    a59c:	d106      	bne.n	a5ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a59e:	4a05      	ldr	r2, [pc, #20]	; (a5b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
    a5a0:	9b01      	ldr	r3, [sp, #4]
    a5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5a6:	2b00      	cmp	r3, #0
    a5a8:	d100      	bne.n	a5ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    a5aa:	b662      	cpsie	i
    a5ac:	bf00      	nop
    a5ae:	b003      	add	sp, #12
    a5b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a5b4:	1fff9228 	.word	0x1fff9228
    a5b8:	1fff9224 	.word	0x1fff9224

0000a5bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:
    a5bc:	b500      	push	{lr}
    a5be:	b083      	sub	sp, #12
    a5c0:	f7f6 fa8e 	bl	ae0 <Sys_GetCoreID>
    a5c4:	4603      	mov	r3, r0
    a5c6:	9301      	str	r3, [sp, #4]
    a5c8:	4a10      	ldr	r2, [pc, #64]	; (a60c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5ca:	9b01      	ldr	r3, [sp, #4]
    a5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5d0:	2b00      	cmp	r3, #0
    a5d2:	d10d      	bne.n	a5f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    a5d4:	f7f6 f9b4 	bl	940 <Pwm_schm_read_msr>
    a5d8:	9000      	str	r0, [sp, #0]
    a5da:	9b00      	ldr	r3, [sp, #0]
    a5dc:	f003 0301 	and.w	r3, r3, #1
    a5e0:	2b00      	cmp	r3, #0
    a5e2:	d100      	bne.n	a5e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
    a5e4:	b672      	cpsid	i
    a5e6:	490a      	ldr	r1, [pc, #40]	; (a610 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
    a5e8:	9b01      	ldr	r3, [sp, #4]
    a5ea:	9a00      	ldr	r2, [sp, #0]
    a5ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a5f0:	4a06      	ldr	r2, [pc, #24]	; (a60c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5f2:	9b01      	ldr	r3, [sp, #4]
    a5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5f8:	1c5a      	adds	r2, r3, #1
    a5fa:	4904      	ldr	r1, [pc, #16]	; (a60c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
    a5fc:	9b01      	ldr	r3, [sp, #4]
    a5fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a602:	bf00      	nop
    a604:	b003      	add	sp, #12
    a606:	f85d fb04 	ldr.w	pc, [sp], #4
    a60a:	bf00      	nop
    a60c:	1fff9230 	.word	0x1fff9230
    a610:	1fff922c 	.word	0x1fff922c

0000a614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:
    a614:	b500      	push	{lr}
    a616:	b083      	sub	sp, #12
    a618:	f7f6 fa62 	bl	ae0 <Sys_GetCoreID>
    a61c:	4603      	mov	r3, r0
    a61e:	9301      	str	r3, [sp, #4]
    a620:	4a0d      	ldr	r2, [pc, #52]	; (a658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a622:	9b01      	ldr	r3, [sp, #4]
    a624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a628:	1e5a      	subs	r2, r3, #1
    a62a:	490b      	ldr	r1, [pc, #44]	; (a658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a62c:	9b01      	ldr	r3, [sp, #4]
    a62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a632:	4a0a      	ldr	r2, [pc, #40]	; (a65c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
    a634:	9b01      	ldr	r3, [sp, #4]
    a636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a63a:	f003 0301 	and.w	r3, r3, #1
    a63e:	2b00      	cmp	r3, #0
    a640:	d106      	bne.n	a650 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a642:	4a05      	ldr	r2, [pc, #20]	; (a658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
    a644:	9b01      	ldr	r3, [sp, #4]
    a646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a64a:	2b00      	cmp	r3, #0
    a64c:	d100      	bne.n	a650 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    a64e:	b662      	cpsie	i
    a650:	bf00      	nop
    a652:	b003      	add	sp, #12
    a654:	f85d fb04 	ldr.w	pc, [sp], #4
    a658:	1fff9230 	.word	0x1fff9230
    a65c:	1fff922c 	.word	0x1fff922c

0000a660 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:
    a660:	b500      	push	{lr}
    a662:	b083      	sub	sp, #12
    a664:	f7f6 fa3c 	bl	ae0 <Sys_GetCoreID>
    a668:	4603      	mov	r3, r0
    a66a:	9301      	str	r3, [sp, #4]
    a66c:	4a10      	ldr	r2, [pc, #64]	; (a6b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a66e:	9b01      	ldr	r3, [sp, #4]
    a670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a674:	2b00      	cmp	r3, #0
    a676:	d10d      	bne.n	a694 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    a678:	f7f6 f962 	bl	940 <Pwm_schm_read_msr>
    a67c:	9000      	str	r0, [sp, #0]
    a67e:	9b00      	ldr	r3, [sp, #0]
    a680:	f003 0301 	and.w	r3, r3, #1
    a684:	2b00      	cmp	r3, #0
    a686:	d100      	bne.n	a68a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
    a688:	b672      	cpsid	i
    a68a:	490a      	ldr	r1, [pc, #40]	; (a6b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
    a68c:	9b01      	ldr	r3, [sp, #4]
    a68e:	9a00      	ldr	r2, [sp, #0]
    a690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a694:	4a06      	ldr	r2, [pc, #24]	; (a6b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a696:	9b01      	ldr	r3, [sp, #4]
    a698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a69c:	1c5a      	adds	r2, r3, #1
    a69e:	4904      	ldr	r1, [pc, #16]	; (a6b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
    a6a0:	9b01      	ldr	r3, [sp, #4]
    a6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a6a6:	bf00      	nop
    a6a8:	b003      	add	sp, #12
    a6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    a6ae:	bf00      	nop
    a6b0:	1fff9238 	.word	0x1fff9238
    a6b4:	1fff9234 	.word	0x1fff9234

0000a6b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:
    a6b8:	b500      	push	{lr}
    a6ba:	b083      	sub	sp, #12
    a6bc:	f7f6 fa10 	bl	ae0 <Sys_GetCoreID>
    a6c0:	4603      	mov	r3, r0
    a6c2:	9301      	str	r3, [sp, #4]
    a6c4:	4a0d      	ldr	r2, [pc, #52]	; (a6fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6c6:	9b01      	ldr	r3, [sp, #4]
    a6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6cc:	1e5a      	subs	r2, r3, #1
    a6ce:	490b      	ldr	r1, [pc, #44]	; (a6fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6d0:	9b01      	ldr	r3, [sp, #4]
    a6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a6d6:	4a0a      	ldr	r2, [pc, #40]	; (a700 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
    a6d8:	9b01      	ldr	r3, [sp, #4]
    a6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6de:	f003 0301 	and.w	r3, r3, #1
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d106      	bne.n	a6f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a6e6:	4a05      	ldr	r2, [pc, #20]	; (a6fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
    a6e8:	9b01      	ldr	r3, [sp, #4]
    a6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6ee:	2b00      	cmp	r3, #0
    a6f0:	d100      	bne.n	a6f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    a6f2:	b662      	cpsie	i
    a6f4:	bf00      	nop
    a6f6:	b003      	add	sp, #12
    a6f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a6fc:	1fff9238 	.word	0x1fff9238
    a700:	1fff9234 	.word	0x1fff9234

0000a704 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:
    a704:	b500      	push	{lr}
    a706:	b083      	sub	sp, #12
    a708:	f7f6 f9ea 	bl	ae0 <Sys_GetCoreID>
    a70c:	4603      	mov	r3, r0
    a70e:	9301      	str	r3, [sp, #4]
    a710:	4a10      	ldr	r2, [pc, #64]	; (a754 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a712:	9b01      	ldr	r3, [sp, #4]
    a714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a718:	2b00      	cmp	r3, #0
    a71a:	d10d      	bne.n	a738 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    a71c:	f7f6 f910 	bl	940 <Pwm_schm_read_msr>
    a720:	9000      	str	r0, [sp, #0]
    a722:	9b00      	ldr	r3, [sp, #0]
    a724:	f003 0301 	and.w	r3, r3, #1
    a728:	2b00      	cmp	r3, #0
    a72a:	d100      	bne.n	a72e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
    a72c:	b672      	cpsid	i
    a72e:	490a      	ldr	r1, [pc, #40]	; (a758 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
    a730:	9b01      	ldr	r3, [sp, #4]
    a732:	9a00      	ldr	r2, [sp, #0]
    a734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a738:	4a06      	ldr	r2, [pc, #24]	; (a754 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a73a:	9b01      	ldr	r3, [sp, #4]
    a73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a740:	1c5a      	adds	r2, r3, #1
    a742:	4904      	ldr	r1, [pc, #16]	; (a754 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
    a744:	9b01      	ldr	r3, [sp, #4]
    a746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a74a:	bf00      	nop
    a74c:	b003      	add	sp, #12
    a74e:	f85d fb04 	ldr.w	pc, [sp], #4
    a752:	bf00      	nop
    a754:	1fff9240 	.word	0x1fff9240
    a758:	1fff923c 	.word	0x1fff923c

0000a75c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:
    a75c:	b500      	push	{lr}
    a75e:	b083      	sub	sp, #12
    a760:	f7f6 f9be 	bl	ae0 <Sys_GetCoreID>
    a764:	4603      	mov	r3, r0
    a766:	9301      	str	r3, [sp, #4]
    a768:	4a0d      	ldr	r2, [pc, #52]	; (a7a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a76a:	9b01      	ldr	r3, [sp, #4]
    a76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a770:	1e5a      	subs	r2, r3, #1
    a772:	490b      	ldr	r1, [pc, #44]	; (a7a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a774:	9b01      	ldr	r3, [sp, #4]
    a776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a77a:	4a0a      	ldr	r2, [pc, #40]	; (a7a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
    a77c:	9b01      	ldr	r3, [sp, #4]
    a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a782:	f003 0301 	and.w	r3, r3, #1
    a786:	2b00      	cmp	r3, #0
    a788:	d106      	bne.n	a798 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a78a:	4a05      	ldr	r2, [pc, #20]	; (a7a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
    a78c:	9b01      	ldr	r3, [sp, #4]
    a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a792:	2b00      	cmp	r3, #0
    a794:	d100      	bne.n	a798 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    a796:	b662      	cpsie	i
    a798:	bf00      	nop
    a79a:	b003      	add	sp, #12
    a79c:	f85d fb04 	ldr.w	pc, [sp], #4
    a7a0:	1fff9240 	.word	0x1fff9240
    a7a4:	1fff923c 	.word	0x1fff923c

0000a7a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:
    a7a8:	b500      	push	{lr}
    a7aa:	b083      	sub	sp, #12
    a7ac:	f7f6 f998 	bl	ae0 <Sys_GetCoreID>
    a7b0:	4603      	mov	r3, r0
    a7b2:	9301      	str	r3, [sp, #4]
    a7b4:	4a10      	ldr	r2, [pc, #64]	; (a7f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7b6:	9b01      	ldr	r3, [sp, #4]
    a7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7bc:	2b00      	cmp	r3, #0
    a7be:	d10d      	bne.n	a7dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    a7c0:	f7f6 f8be 	bl	940 <Pwm_schm_read_msr>
    a7c4:	9000      	str	r0, [sp, #0]
    a7c6:	9b00      	ldr	r3, [sp, #0]
    a7c8:	f003 0301 	and.w	r3, r3, #1
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	d100      	bne.n	a7d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
    a7d0:	b672      	cpsid	i
    a7d2:	490a      	ldr	r1, [pc, #40]	; (a7fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	9a00      	ldr	r2, [sp, #0]
    a7d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7dc:	4a06      	ldr	r2, [pc, #24]	; (a7f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7de:	9b01      	ldr	r3, [sp, #4]
    a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7e4:	1c5a      	adds	r2, r3, #1
    a7e6:	4904      	ldr	r1, [pc, #16]	; (a7f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
    a7e8:	9b01      	ldr	r3, [sp, #4]
    a7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a7ee:	bf00      	nop
    a7f0:	b003      	add	sp, #12
    a7f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7f6:	bf00      	nop
    a7f8:	1fff9248 	.word	0x1fff9248
    a7fc:	1fff9244 	.word	0x1fff9244

0000a800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:
    a800:	b500      	push	{lr}
    a802:	b083      	sub	sp, #12
    a804:	f7f6 f96c 	bl	ae0 <Sys_GetCoreID>
    a808:	4603      	mov	r3, r0
    a80a:	9301      	str	r3, [sp, #4]
    a80c:	4a0d      	ldr	r2, [pc, #52]	; (a844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a80e:	9b01      	ldr	r3, [sp, #4]
    a810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a814:	1e5a      	subs	r2, r3, #1
    a816:	490b      	ldr	r1, [pc, #44]	; (a844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a818:	9b01      	ldr	r3, [sp, #4]
    a81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a81e:	4a0a      	ldr	r2, [pc, #40]	; (a848 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
    a820:	9b01      	ldr	r3, [sp, #4]
    a822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a826:	f003 0301 	and.w	r3, r3, #1
    a82a:	2b00      	cmp	r3, #0
    a82c:	d106      	bne.n	a83c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a82e:	4a05      	ldr	r2, [pc, #20]	; (a844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
    a830:	9b01      	ldr	r3, [sp, #4]
    a832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a836:	2b00      	cmp	r3, #0
    a838:	d100      	bne.n	a83c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    a83a:	b662      	cpsie	i
    a83c:	bf00      	nop
    a83e:	b003      	add	sp, #12
    a840:	f85d fb04 	ldr.w	pc, [sp], #4
    a844:	1fff9248 	.word	0x1fff9248
    a848:	1fff9244 	.word	0x1fff9244

0000a84c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:
    a84c:	b500      	push	{lr}
    a84e:	b083      	sub	sp, #12
    a850:	f7f6 f946 	bl	ae0 <Sys_GetCoreID>
    a854:	4603      	mov	r3, r0
    a856:	9301      	str	r3, [sp, #4]
    a858:	4a10      	ldr	r2, [pc, #64]	; (a89c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a85a:	9b01      	ldr	r3, [sp, #4]
    a85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a860:	2b00      	cmp	r3, #0
    a862:	d10d      	bne.n	a880 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    a864:	f7f6 f86c 	bl	940 <Pwm_schm_read_msr>
    a868:	9000      	str	r0, [sp, #0]
    a86a:	9b00      	ldr	r3, [sp, #0]
    a86c:	f003 0301 	and.w	r3, r3, #1
    a870:	2b00      	cmp	r3, #0
    a872:	d100      	bne.n	a876 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
    a874:	b672      	cpsid	i
    a876:	490a      	ldr	r1, [pc, #40]	; (a8a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
    a878:	9b01      	ldr	r3, [sp, #4]
    a87a:	9a00      	ldr	r2, [sp, #0]
    a87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a880:	4a06      	ldr	r2, [pc, #24]	; (a89c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a882:	9b01      	ldr	r3, [sp, #4]
    a884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a888:	1c5a      	adds	r2, r3, #1
    a88a:	4904      	ldr	r1, [pc, #16]	; (a89c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
    a88c:	9b01      	ldr	r3, [sp, #4]
    a88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a892:	bf00      	nop
    a894:	b003      	add	sp, #12
    a896:	f85d fb04 	ldr.w	pc, [sp], #4
    a89a:	bf00      	nop
    a89c:	1fff9250 	.word	0x1fff9250
    a8a0:	1fff924c 	.word	0x1fff924c

0000a8a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:
    a8a4:	b500      	push	{lr}
    a8a6:	b083      	sub	sp, #12
    a8a8:	f7f6 f91a 	bl	ae0 <Sys_GetCoreID>
    a8ac:	4603      	mov	r3, r0
    a8ae:	9301      	str	r3, [sp, #4]
    a8b0:	4a0d      	ldr	r2, [pc, #52]	; (a8e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8b2:	9b01      	ldr	r3, [sp, #4]
    a8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8b8:	1e5a      	subs	r2, r3, #1
    a8ba:	490b      	ldr	r1, [pc, #44]	; (a8e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8bc:	9b01      	ldr	r3, [sp, #4]
    a8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a8c2:	4a0a      	ldr	r2, [pc, #40]	; (a8ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
    a8c4:	9b01      	ldr	r3, [sp, #4]
    a8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ca:	f003 0301 	and.w	r3, r3, #1
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d106      	bne.n	a8e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a8d2:	4a05      	ldr	r2, [pc, #20]	; (a8e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
    a8d4:	9b01      	ldr	r3, [sp, #4]
    a8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8da:	2b00      	cmp	r3, #0
    a8dc:	d100      	bne.n	a8e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    a8de:	b662      	cpsie	i
    a8e0:	bf00      	nop
    a8e2:	b003      	add	sp, #12
    a8e4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8e8:	1fff9250 	.word	0x1fff9250
    a8ec:	1fff924c 	.word	0x1fff924c

0000a8f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:
    a8f0:	b500      	push	{lr}
    a8f2:	b083      	sub	sp, #12
    a8f4:	f7f6 f8f4 	bl	ae0 <Sys_GetCoreID>
    a8f8:	4603      	mov	r3, r0
    a8fa:	9301      	str	r3, [sp, #4]
    a8fc:	4a10      	ldr	r2, [pc, #64]	; (a940 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a8fe:	9b01      	ldr	r3, [sp, #4]
    a900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a904:	2b00      	cmp	r3, #0
    a906:	d10d      	bne.n	a924 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    a908:	f7f6 f81a 	bl	940 <Pwm_schm_read_msr>
    a90c:	9000      	str	r0, [sp, #0]
    a90e:	9b00      	ldr	r3, [sp, #0]
    a910:	f003 0301 	and.w	r3, r3, #1
    a914:	2b00      	cmp	r3, #0
    a916:	d100      	bne.n	a91a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
    a918:	b672      	cpsid	i
    a91a:	490a      	ldr	r1, [pc, #40]	; (a944 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
    a91c:	9b01      	ldr	r3, [sp, #4]
    a91e:	9a00      	ldr	r2, [sp, #0]
    a920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a924:	4a06      	ldr	r2, [pc, #24]	; (a940 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a926:	9b01      	ldr	r3, [sp, #4]
    a928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a92c:	1c5a      	adds	r2, r3, #1
    a92e:	4904      	ldr	r1, [pc, #16]	; (a940 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
    a930:	9b01      	ldr	r3, [sp, #4]
    a932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a936:	bf00      	nop
    a938:	b003      	add	sp, #12
    a93a:	f85d fb04 	ldr.w	pc, [sp], #4
    a93e:	bf00      	nop
    a940:	1fff9258 	.word	0x1fff9258
    a944:	1fff9254 	.word	0x1fff9254

0000a948 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:
    a948:	b500      	push	{lr}
    a94a:	b083      	sub	sp, #12
    a94c:	f7f6 f8c8 	bl	ae0 <Sys_GetCoreID>
    a950:	4603      	mov	r3, r0
    a952:	9301      	str	r3, [sp, #4]
    a954:	4a0d      	ldr	r2, [pc, #52]	; (a98c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a956:	9b01      	ldr	r3, [sp, #4]
    a958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a95c:	1e5a      	subs	r2, r3, #1
    a95e:	490b      	ldr	r1, [pc, #44]	; (a98c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a960:	9b01      	ldr	r3, [sp, #4]
    a962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a966:	4a0a      	ldr	r2, [pc, #40]	; (a990 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
    a968:	9b01      	ldr	r3, [sp, #4]
    a96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a96e:	f003 0301 	and.w	r3, r3, #1
    a972:	2b00      	cmp	r3, #0
    a974:	d106      	bne.n	a984 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a976:	4a05      	ldr	r2, [pc, #20]	; (a98c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
    a978:	9b01      	ldr	r3, [sp, #4]
    a97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a97e:	2b00      	cmp	r3, #0
    a980:	d100      	bne.n	a984 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    a982:	b662      	cpsie	i
    a984:	bf00      	nop
    a986:	b003      	add	sp, #12
    a988:	f85d fb04 	ldr.w	pc, [sp], #4
    a98c:	1fff9258 	.word	0x1fff9258
    a990:	1fff9254 	.word	0x1fff9254

0000a994 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:
    a994:	b500      	push	{lr}
    a996:	b083      	sub	sp, #12
    a998:	f7f6 f8a2 	bl	ae0 <Sys_GetCoreID>
    a99c:	4603      	mov	r3, r0
    a99e:	9301      	str	r3, [sp, #4]
    a9a0:	4a10      	ldr	r2, [pc, #64]	; (a9e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a9a2:	9b01      	ldr	r3, [sp, #4]
    a9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d10d      	bne.n	a9c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    a9ac:	f7f5 ffc8 	bl	940 <Pwm_schm_read_msr>
    a9b0:	9000      	str	r0, [sp, #0]
    a9b2:	9b00      	ldr	r3, [sp, #0]
    a9b4:	f003 0301 	and.w	r3, r3, #1
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d100      	bne.n	a9be <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
    a9bc:	b672      	cpsid	i
    a9be:	490a      	ldr	r1, [pc, #40]	; (a9e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
    a9c0:	9b01      	ldr	r3, [sp, #4]
    a9c2:	9a00      	ldr	r2, [sp, #0]
    a9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9c8:	4a06      	ldr	r2, [pc, #24]	; (a9e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a9ca:	9b01      	ldr	r3, [sp, #4]
    a9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d0:	1c5a      	adds	r2, r3, #1
    a9d2:	4904      	ldr	r1, [pc, #16]	; (a9e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
    a9d4:	9b01      	ldr	r3, [sp, #4]
    a9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    a9da:	bf00      	nop
    a9dc:	b003      	add	sp, #12
    a9de:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e2:	bf00      	nop
    a9e4:	1fff9260 	.word	0x1fff9260
    a9e8:	1fff925c 	.word	0x1fff925c

0000a9ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:
    a9ec:	b500      	push	{lr}
    a9ee:	b083      	sub	sp, #12
    a9f0:	f7f6 f876 	bl	ae0 <Sys_GetCoreID>
    a9f4:	4603      	mov	r3, r0
    a9f6:	9301      	str	r3, [sp, #4]
    a9f8:	4a0d      	ldr	r2, [pc, #52]	; (aa30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    a9fa:	9b01      	ldr	r3, [sp, #4]
    a9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa00:	1e5a      	subs	r2, r3, #1
    aa02:	490b      	ldr	r1, [pc, #44]	; (aa30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    aa04:	9b01      	ldr	r3, [sp, #4]
    aa06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa0a:	4a0a      	ldr	r2, [pc, #40]	; (aa34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
    aa0c:	9b01      	ldr	r3, [sp, #4]
    aa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa12:	f003 0301 	and.w	r3, r3, #1
    aa16:	2b00      	cmp	r3, #0
    aa18:	d106      	bne.n	aa28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    aa1a:	4a05      	ldr	r2, [pc, #20]	; (aa30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
    aa1c:	9b01      	ldr	r3, [sp, #4]
    aa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa22:	2b00      	cmp	r3, #0
    aa24:	d100      	bne.n	aa28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    aa26:	b662      	cpsie	i
    aa28:	bf00      	nop
    aa2a:	b003      	add	sp, #12
    aa2c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa30:	1fff9260 	.word	0x1fff9260
    aa34:	1fff925c 	.word	0x1fff925c

0000aa38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:
    aa38:	b500      	push	{lr}
    aa3a:	b083      	sub	sp, #12
    aa3c:	f7f6 f850 	bl	ae0 <Sys_GetCoreID>
    aa40:	4603      	mov	r3, r0
    aa42:	9301      	str	r3, [sp, #4]
    aa44:	4a10      	ldr	r2, [pc, #64]	; (aa88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa46:	9b01      	ldr	r3, [sp, #4]
    aa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d10d      	bne.n	aa6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    aa50:	f7f5 ff76 	bl	940 <Pwm_schm_read_msr>
    aa54:	9000      	str	r0, [sp, #0]
    aa56:	9b00      	ldr	r3, [sp, #0]
    aa58:	f003 0301 	and.w	r3, r3, #1
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d100      	bne.n	aa62 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
    aa60:	b672      	cpsid	i
    aa62:	490a      	ldr	r1, [pc, #40]	; (aa8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
    aa64:	9b01      	ldr	r3, [sp, #4]
    aa66:	9a00      	ldr	r2, [sp, #0]
    aa68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa6c:	4a06      	ldr	r2, [pc, #24]	; (aa88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa6e:	9b01      	ldr	r3, [sp, #4]
    aa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa74:	1c5a      	adds	r2, r3, #1
    aa76:	4904      	ldr	r1, [pc, #16]	; (aa88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
    aa78:	9b01      	ldr	r3, [sp, #4]
    aa7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aa7e:	bf00      	nop
    aa80:	b003      	add	sp, #12
    aa82:	f85d fb04 	ldr.w	pc, [sp], #4
    aa86:	bf00      	nop
    aa88:	1fff9268 	.word	0x1fff9268
    aa8c:	1fff9264 	.word	0x1fff9264

0000aa90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:
    aa90:	b500      	push	{lr}
    aa92:	b083      	sub	sp, #12
    aa94:	f7f6 f824 	bl	ae0 <Sys_GetCoreID>
    aa98:	4603      	mov	r3, r0
    aa9a:	9301      	str	r3, [sp, #4]
    aa9c:	4a0d      	ldr	r2, [pc, #52]	; (aad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aa9e:	9b01      	ldr	r3, [sp, #4]
    aaa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa4:	1e5a      	subs	r2, r3, #1
    aaa6:	490b      	ldr	r1, [pc, #44]	; (aad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aaa8:	9b01      	ldr	r3, [sp, #4]
    aaaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aaae:	4a0a      	ldr	r2, [pc, #40]	; (aad8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
    aab0:	9b01      	ldr	r3, [sp, #4]
    aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab6:	f003 0301 	and.w	r3, r3, #1
    aaba:	2b00      	cmp	r3, #0
    aabc:	d106      	bne.n	aacc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    aabe:	4a05      	ldr	r2, [pc, #20]	; (aad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
    aac0:	9b01      	ldr	r3, [sp, #4]
    aac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d100      	bne.n	aacc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    aaca:	b662      	cpsie	i
    aacc:	bf00      	nop
    aace:	b003      	add	sp, #12
    aad0:	f85d fb04 	ldr.w	pc, [sp], #4
    aad4:	1fff9268 	.word	0x1fff9268
    aad8:	1fff9264 	.word	0x1fff9264

0000aadc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:
    aadc:	b500      	push	{lr}
    aade:	b083      	sub	sp, #12
    aae0:	f7f5 fffe 	bl	ae0 <Sys_GetCoreID>
    aae4:	4603      	mov	r3, r0
    aae6:	9301      	str	r3, [sp, #4]
    aae8:	4a10      	ldr	r2, [pc, #64]	; (ab2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    aaea:	9b01      	ldr	r3, [sp, #4]
    aaec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d10d      	bne.n	ab10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    aaf4:	f7f5 ff24 	bl	940 <Pwm_schm_read_msr>
    aaf8:	9000      	str	r0, [sp, #0]
    aafa:	9b00      	ldr	r3, [sp, #0]
    aafc:	f003 0301 	and.w	r3, r3, #1
    ab00:	2b00      	cmp	r3, #0
    ab02:	d100      	bne.n	ab06 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
    ab04:	b672      	cpsid	i
    ab06:	490a      	ldr	r1, [pc, #40]	; (ab30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
    ab08:	9b01      	ldr	r3, [sp, #4]
    ab0a:	9a00      	ldr	r2, [sp, #0]
    ab0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab10:	4a06      	ldr	r2, [pc, #24]	; (ab2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab12:	9b01      	ldr	r3, [sp, #4]
    ab14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab18:	1c5a      	adds	r2, r3, #1
    ab1a:	4904      	ldr	r1, [pc, #16]	; (ab2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
    ab1c:	9b01      	ldr	r3, [sp, #4]
    ab1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab22:	bf00      	nop
    ab24:	b003      	add	sp, #12
    ab26:	f85d fb04 	ldr.w	pc, [sp], #4
    ab2a:	bf00      	nop
    ab2c:	1fff9270 	.word	0x1fff9270
    ab30:	1fff926c 	.word	0x1fff926c

0000ab34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:
    ab34:	b500      	push	{lr}
    ab36:	b083      	sub	sp, #12
    ab38:	f7f5 ffd2 	bl	ae0 <Sys_GetCoreID>
    ab3c:	4603      	mov	r3, r0
    ab3e:	9301      	str	r3, [sp, #4]
    ab40:	4a0d      	ldr	r2, [pc, #52]	; (ab78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab42:	9b01      	ldr	r3, [sp, #4]
    ab44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab48:	1e5a      	subs	r2, r3, #1
    ab4a:	490b      	ldr	r1, [pc, #44]	; (ab78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab4c:	9b01      	ldr	r3, [sp, #4]
    ab4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ab52:	4a0a      	ldr	r2, [pc, #40]	; (ab7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
    ab54:	9b01      	ldr	r3, [sp, #4]
    ab56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab5a:	f003 0301 	and.w	r3, r3, #1
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d106      	bne.n	ab70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    ab62:	4a05      	ldr	r2, [pc, #20]	; (ab78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
    ab64:	9b01      	ldr	r3, [sp, #4]
    ab66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d100      	bne.n	ab70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    ab6e:	b662      	cpsie	i
    ab70:	bf00      	nop
    ab72:	b003      	add	sp, #12
    ab74:	f85d fb04 	ldr.w	pc, [sp], #4
    ab78:	1fff9270 	.word	0x1fff9270
    ab7c:	1fff926c 	.word	0x1fff926c

0000ab80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:
    ab80:	b500      	push	{lr}
    ab82:	b083      	sub	sp, #12
    ab84:	f7f5 ffac 	bl	ae0 <Sys_GetCoreID>
    ab88:	4603      	mov	r3, r0
    ab8a:	9301      	str	r3, [sp, #4]
    ab8c:	4a10      	ldr	r2, [pc, #64]	; (abd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    ab8e:	9b01      	ldr	r3, [sp, #4]
    ab90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab94:	2b00      	cmp	r3, #0
    ab96:	d10d      	bne.n	abb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    ab98:	f7f5 fed2 	bl	940 <Pwm_schm_read_msr>
    ab9c:	9000      	str	r0, [sp, #0]
    ab9e:	9b00      	ldr	r3, [sp, #0]
    aba0:	f003 0301 	and.w	r3, r3, #1
    aba4:	2b00      	cmp	r3, #0
    aba6:	d100      	bne.n	abaa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
    aba8:	b672      	cpsid	i
    abaa:	490a      	ldr	r1, [pc, #40]	; (abd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
    abac:	9b01      	ldr	r3, [sp, #4]
    abae:	9a00      	ldr	r2, [sp, #0]
    abb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    abb4:	4a06      	ldr	r2, [pc, #24]	; (abd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    abb6:	9b01      	ldr	r3, [sp, #4]
    abb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abbc:	1c5a      	adds	r2, r3, #1
    abbe:	4904      	ldr	r1, [pc, #16]	; (abd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
    abc0:	9b01      	ldr	r3, [sp, #4]
    abc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    abc6:	bf00      	nop
    abc8:	b003      	add	sp, #12
    abca:	f85d fb04 	ldr.w	pc, [sp], #4
    abce:	bf00      	nop
    abd0:	1fff9278 	.word	0x1fff9278
    abd4:	1fff9274 	.word	0x1fff9274

0000abd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:
    abd8:	b500      	push	{lr}
    abda:	b083      	sub	sp, #12
    abdc:	f7f5 ff80 	bl	ae0 <Sys_GetCoreID>
    abe0:	4603      	mov	r3, r0
    abe2:	9301      	str	r3, [sp, #4]
    abe4:	4a0d      	ldr	r2, [pc, #52]	; (ac1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abe6:	9b01      	ldr	r3, [sp, #4]
    abe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abec:	1e5a      	subs	r2, r3, #1
    abee:	490b      	ldr	r1, [pc, #44]	; (ac1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    abf0:	9b01      	ldr	r3, [sp, #4]
    abf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    abf6:	4a0a      	ldr	r2, [pc, #40]	; (ac20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
    abf8:	9b01      	ldr	r3, [sp, #4]
    abfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abfe:	f003 0301 	and.w	r3, r3, #1
    ac02:	2b00      	cmp	r3, #0
    ac04:	d106      	bne.n	ac14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    ac06:	4a05      	ldr	r2, [pc, #20]	; (ac1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
    ac08:	9b01      	ldr	r3, [sp, #4]
    ac0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d100      	bne.n	ac14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    ac12:	b662      	cpsie	i
    ac14:	bf00      	nop
    ac16:	b003      	add	sp, #12
    ac18:	f85d fb04 	ldr.w	pc, [sp], #4
    ac1c:	1fff9278 	.word	0x1fff9278
    ac20:	1fff9274 	.word	0x1fff9274

0000ac24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:
    ac24:	b500      	push	{lr}
    ac26:	b083      	sub	sp, #12
    ac28:	f7f5 ff5a 	bl	ae0 <Sys_GetCoreID>
    ac2c:	4603      	mov	r3, r0
    ac2e:	9301      	str	r3, [sp, #4]
    ac30:	4a10      	ldr	r2, [pc, #64]	; (ac74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac32:	9b01      	ldr	r3, [sp, #4]
    ac34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac38:	2b00      	cmp	r3, #0
    ac3a:	d10d      	bne.n	ac58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    ac3c:	f7f5 fe80 	bl	940 <Pwm_schm_read_msr>
    ac40:	9000      	str	r0, [sp, #0]
    ac42:	9b00      	ldr	r3, [sp, #0]
    ac44:	f003 0301 	and.w	r3, r3, #1
    ac48:	2b00      	cmp	r3, #0
    ac4a:	d100      	bne.n	ac4e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
    ac4c:	b672      	cpsid	i
    ac4e:	490a      	ldr	r1, [pc, #40]	; (ac78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
    ac50:	9b01      	ldr	r3, [sp, #4]
    ac52:	9a00      	ldr	r2, [sp, #0]
    ac54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac58:	4a06      	ldr	r2, [pc, #24]	; (ac74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac5a:	9b01      	ldr	r3, [sp, #4]
    ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac60:	1c5a      	adds	r2, r3, #1
    ac62:	4904      	ldr	r1, [pc, #16]	; (ac74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
    ac64:	9b01      	ldr	r3, [sp, #4]
    ac66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac6a:	bf00      	nop
    ac6c:	b003      	add	sp, #12
    ac6e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac72:	bf00      	nop
    ac74:	1fff9280 	.word	0x1fff9280
    ac78:	1fff927c 	.word	0x1fff927c

0000ac7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:
    ac7c:	b500      	push	{lr}
    ac7e:	b083      	sub	sp, #12
    ac80:	f7f5 ff2e 	bl	ae0 <Sys_GetCoreID>
    ac84:	4603      	mov	r3, r0
    ac86:	9301      	str	r3, [sp, #4]
    ac88:	4a0d      	ldr	r2, [pc, #52]	; (acc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac8a:	9b01      	ldr	r3, [sp, #4]
    ac8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac90:	1e5a      	subs	r2, r3, #1
    ac92:	490b      	ldr	r1, [pc, #44]	; (acc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    ac94:	9b01      	ldr	r3, [sp, #4]
    ac96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ac9a:	4a0a      	ldr	r2, [pc, #40]	; (acc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
    ac9c:	9b01      	ldr	r3, [sp, #4]
    ac9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca2:	f003 0301 	and.w	r3, r3, #1
    aca6:	2b00      	cmp	r3, #0
    aca8:	d106      	bne.n	acb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    acaa:	4a05      	ldr	r2, [pc, #20]	; (acc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
    acac:	9b01      	ldr	r3, [sp, #4]
    acae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb2:	2b00      	cmp	r3, #0
    acb4:	d100      	bne.n	acb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    acb6:	b662      	cpsie	i
    acb8:	bf00      	nop
    acba:	b003      	add	sp, #12
    acbc:	f85d fb04 	ldr.w	pc, [sp], #4
    acc0:	1fff9280 	.word	0x1fff9280
    acc4:	1fff927c 	.word	0x1fff927c

0000acc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:
    acc8:	b500      	push	{lr}
    acca:	b083      	sub	sp, #12
    accc:	f7f5 ff08 	bl	ae0 <Sys_GetCoreID>
    acd0:	4603      	mov	r3, r0
    acd2:	9301      	str	r3, [sp, #4]
    acd4:	4a10      	ldr	r2, [pc, #64]	; (ad18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acd6:	9b01      	ldr	r3, [sp, #4]
    acd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acdc:	2b00      	cmp	r3, #0
    acde:	d10d      	bne.n	acfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    ace0:	f7f5 fe2e 	bl	940 <Pwm_schm_read_msr>
    ace4:	9000      	str	r0, [sp, #0]
    ace6:	9b00      	ldr	r3, [sp, #0]
    ace8:	f003 0301 	and.w	r3, r3, #1
    acec:	2b00      	cmp	r3, #0
    acee:	d100      	bne.n	acf2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
    acf0:	b672      	cpsid	i
    acf2:	490a      	ldr	r1, [pc, #40]	; (ad1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
    acf4:	9b01      	ldr	r3, [sp, #4]
    acf6:	9a00      	ldr	r2, [sp, #0]
    acf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    acfc:	4a06      	ldr	r2, [pc, #24]	; (ad18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    acfe:	9b01      	ldr	r3, [sp, #4]
    ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad04:	1c5a      	adds	r2, r3, #1
    ad06:	4904      	ldr	r1, [pc, #16]	; (ad18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
    ad08:	9b01      	ldr	r3, [sp, #4]
    ad0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad0e:	bf00      	nop
    ad10:	b003      	add	sp, #12
    ad12:	f85d fb04 	ldr.w	pc, [sp], #4
    ad16:	bf00      	nop
    ad18:	1fff9288 	.word	0x1fff9288
    ad1c:	1fff9284 	.word	0x1fff9284

0000ad20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:
    ad20:	b500      	push	{lr}
    ad22:	b083      	sub	sp, #12
    ad24:	f7f5 fedc 	bl	ae0 <Sys_GetCoreID>
    ad28:	4603      	mov	r3, r0
    ad2a:	9301      	str	r3, [sp, #4]
    ad2c:	4a0d      	ldr	r2, [pc, #52]	; (ad64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad2e:	9b01      	ldr	r3, [sp, #4]
    ad30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad34:	1e5a      	subs	r2, r3, #1
    ad36:	490b      	ldr	r1, [pc, #44]	; (ad64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad38:	9b01      	ldr	r3, [sp, #4]
    ad3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ad3e:	4a0a      	ldr	r2, [pc, #40]	; (ad68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
    ad40:	9b01      	ldr	r3, [sp, #4]
    ad42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad46:	f003 0301 	and.w	r3, r3, #1
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	d106      	bne.n	ad5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    ad4e:	4a05      	ldr	r2, [pc, #20]	; (ad64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
    ad50:	9b01      	ldr	r3, [sp, #4]
    ad52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d100      	bne.n	ad5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    ad5a:	b662      	cpsie	i
    ad5c:	bf00      	nop
    ad5e:	b003      	add	sp, #12
    ad60:	f85d fb04 	ldr.w	pc, [sp], #4
    ad64:	1fff9288 	.word	0x1fff9288
    ad68:	1fff9284 	.word	0x1fff9284

0000ad6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:
    ad6c:	b500      	push	{lr}
    ad6e:	b083      	sub	sp, #12
    ad70:	f7f5 feb6 	bl	ae0 <Sys_GetCoreID>
    ad74:	4603      	mov	r3, r0
    ad76:	9301      	str	r3, [sp, #4]
    ad78:	4a10      	ldr	r2, [pc, #64]	; (adbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ad7a:	9b01      	ldr	r3, [sp, #4]
    ad7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad80:	2b00      	cmp	r3, #0
    ad82:	d10d      	bne.n	ada0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    ad84:	f7f5 fddc 	bl	940 <Pwm_schm_read_msr>
    ad88:	9000      	str	r0, [sp, #0]
    ad8a:	9b00      	ldr	r3, [sp, #0]
    ad8c:	f003 0301 	and.w	r3, r3, #1
    ad90:	2b00      	cmp	r3, #0
    ad92:	d100      	bne.n	ad96 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
    ad94:	b672      	cpsid	i
    ad96:	490a      	ldr	r1, [pc, #40]	; (adc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
    ad98:	9b01      	ldr	r3, [sp, #4]
    ad9a:	9a00      	ldr	r2, [sp, #0]
    ad9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ada0:	4a06      	ldr	r2, [pc, #24]	; (adbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    ada2:	9b01      	ldr	r3, [sp, #4]
    ada4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ada8:	1c5a      	adds	r2, r3, #1
    adaa:	4904      	ldr	r1, [pc, #16]	; (adbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
    adac:	9b01      	ldr	r3, [sp, #4]
    adae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    adb2:	bf00      	nop
    adb4:	b003      	add	sp, #12
    adb6:	f85d fb04 	ldr.w	pc, [sp], #4
    adba:	bf00      	nop
    adbc:	1fff9290 	.word	0x1fff9290
    adc0:	1fff928c 	.word	0x1fff928c

0000adc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:
    adc4:	b500      	push	{lr}
    adc6:	b083      	sub	sp, #12
    adc8:	f7f5 fe8a 	bl	ae0 <Sys_GetCoreID>
    adcc:	4603      	mov	r3, r0
    adce:	9301      	str	r3, [sp, #4]
    add0:	4a0d      	ldr	r2, [pc, #52]	; (ae08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    add2:	9b01      	ldr	r3, [sp, #4]
    add4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add8:	1e5a      	subs	r2, r3, #1
    adda:	490b      	ldr	r1, [pc, #44]	; (ae08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    addc:	9b01      	ldr	r3, [sp, #4]
    adde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ade2:	4a0a      	ldr	r2, [pc, #40]	; (ae0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
    ade4:	9b01      	ldr	r3, [sp, #4]
    ade6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adea:	f003 0301 	and.w	r3, r3, #1
    adee:	2b00      	cmp	r3, #0
    adf0:	d106      	bne.n	ae00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    adf2:	4a05      	ldr	r2, [pc, #20]	; (ae08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
    adf4:	9b01      	ldr	r3, [sp, #4]
    adf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d100      	bne.n	ae00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    adfe:	b662      	cpsie	i
    ae00:	bf00      	nop
    ae02:	b003      	add	sp, #12
    ae04:	f85d fb04 	ldr.w	pc, [sp], #4
    ae08:	1fff9290 	.word	0x1fff9290
    ae0c:	1fff928c 	.word	0x1fff928c

0000ae10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:
    ae10:	b500      	push	{lr}
    ae12:	b083      	sub	sp, #12
    ae14:	f7f5 fe64 	bl	ae0 <Sys_GetCoreID>
    ae18:	4603      	mov	r3, r0
    ae1a:	9301      	str	r3, [sp, #4]
    ae1c:	4a10      	ldr	r2, [pc, #64]	; (ae60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae1e:	9b01      	ldr	r3, [sp, #4]
    ae20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae24:	2b00      	cmp	r3, #0
    ae26:	d10d      	bne.n	ae44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    ae28:	f7f5 fd8a 	bl	940 <Pwm_schm_read_msr>
    ae2c:	9000      	str	r0, [sp, #0]
    ae2e:	9b00      	ldr	r3, [sp, #0]
    ae30:	f003 0301 	and.w	r3, r3, #1
    ae34:	2b00      	cmp	r3, #0
    ae36:	d100      	bne.n	ae3a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
    ae38:	b672      	cpsid	i
    ae3a:	490a      	ldr	r1, [pc, #40]	; (ae64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
    ae3c:	9b01      	ldr	r3, [sp, #4]
    ae3e:	9a00      	ldr	r2, [sp, #0]
    ae40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae44:	4a06      	ldr	r2, [pc, #24]	; (ae60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae46:	9b01      	ldr	r3, [sp, #4]
    ae48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae4c:	1c5a      	adds	r2, r3, #1
    ae4e:	4904      	ldr	r1, [pc, #16]	; (ae60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
    ae50:	9b01      	ldr	r3, [sp, #4]
    ae52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae56:	bf00      	nop
    ae58:	b003      	add	sp, #12
    ae5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae5e:	bf00      	nop
    ae60:	1fff9298 	.word	0x1fff9298
    ae64:	1fff9294 	.word	0x1fff9294

0000ae68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:
    ae68:	b500      	push	{lr}
    ae6a:	b083      	sub	sp, #12
    ae6c:	f7f5 fe38 	bl	ae0 <Sys_GetCoreID>
    ae70:	4603      	mov	r3, r0
    ae72:	9301      	str	r3, [sp, #4]
    ae74:	4a0d      	ldr	r2, [pc, #52]	; (aeac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae76:	9b01      	ldr	r3, [sp, #4]
    ae78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae7c:	1e5a      	subs	r2, r3, #1
    ae7e:	490b      	ldr	r1, [pc, #44]	; (aeac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae80:	9b01      	ldr	r3, [sp, #4]
    ae82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ae86:	4a0a      	ldr	r2, [pc, #40]	; (aeb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
    ae88:	9b01      	ldr	r3, [sp, #4]
    ae8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae8e:	f003 0301 	and.w	r3, r3, #1
    ae92:	2b00      	cmp	r3, #0
    ae94:	d106      	bne.n	aea4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    ae96:	4a05      	ldr	r2, [pc, #20]	; (aeac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
    ae98:	9b01      	ldr	r3, [sp, #4]
    ae9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae9e:	2b00      	cmp	r3, #0
    aea0:	d100      	bne.n	aea4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    aea2:	b662      	cpsie	i
    aea4:	bf00      	nop
    aea6:	b003      	add	sp, #12
    aea8:	f85d fb04 	ldr.w	pc, [sp], #4
    aeac:	1fff9298 	.word	0x1fff9298
    aeb0:	1fff9294 	.word	0x1fff9294

0000aeb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:
    aeb4:	b500      	push	{lr}
    aeb6:	b083      	sub	sp, #12
    aeb8:	f7f5 fe12 	bl	ae0 <Sys_GetCoreID>
    aebc:	4603      	mov	r3, r0
    aebe:	9301      	str	r3, [sp, #4]
    aec0:	4a10      	ldr	r2, [pc, #64]	; (af04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aec2:	9b01      	ldr	r3, [sp, #4]
    aec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec8:	2b00      	cmp	r3, #0
    aeca:	d10d      	bne.n	aee8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    aecc:	f7f5 fd38 	bl	940 <Pwm_schm_read_msr>
    aed0:	9000      	str	r0, [sp, #0]
    aed2:	9b00      	ldr	r3, [sp, #0]
    aed4:	f003 0301 	and.w	r3, r3, #1
    aed8:	2b00      	cmp	r3, #0
    aeda:	d100      	bne.n	aede <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
    aedc:	b672      	cpsid	i
    aede:	490a      	ldr	r1, [pc, #40]	; (af08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
    aee0:	9b01      	ldr	r3, [sp, #4]
    aee2:	9a00      	ldr	r2, [sp, #0]
    aee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aee8:	4a06      	ldr	r2, [pc, #24]	; (af04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aeea:	9b01      	ldr	r3, [sp, #4]
    aeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef0:	1c5a      	adds	r2, r3, #1
    aef2:	4904      	ldr	r1, [pc, #16]	; (af04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
    aef4:	9b01      	ldr	r3, [sp, #4]
    aef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    aefa:	bf00      	nop
    aefc:	b003      	add	sp, #12
    aefe:	f85d fb04 	ldr.w	pc, [sp], #4
    af02:	bf00      	nop
    af04:	1fff92a0 	.word	0x1fff92a0
    af08:	1fff929c 	.word	0x1fff929c

0000af0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:
    af0c:	b500      	push	{lr}
    af0e:	b083      	sub	sp, #12
    af10:	f7f5 fde6 	bl	ae0 <Sys_GetCoreID>
    af14:	4603      	mov	r3, r0
    af16:	9301      	str	r3, [sp, #4]
    af18:	4a0d      	ldr	r2, [pc, #52]	; (af50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af1a:	9b01      	ldr	r3, [sp, #4]
    af1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af20:	1e5a      	subs	r2, r3, #1
    af22:	490b      	ldr	r1, [pc, #44]	; (af50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af24:	9b01      	ldr	r3, [sp, #4]
    af26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af2a:	4a0a      	ldr	r2, [pc, #40]	; (af54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
    af2c:	9b01      	ldr	r3, [sp, #4]
    af2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af32:	f003 0301 	and.w	r3, r3, #1
    af36:	2b00      	cmp	r3, #0
    af38:	d106      	bne.n	af48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    af3a:	4a05      	ldr	r2, [pc, #20]	; (af50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
    af3c:	9b01      	ldr	r3, [sp, #4]
    af3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af42:	2b00      	cmp	r3, #0
    af44:	d100      	bne.n	af48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    af46:	b662      	cpsie	i
    af48:	bf00      	nop
    af4a:	b003      	add	sp, #12
    af4c:	f85d fb04 	ldr.w	pc, [sp], #4
    af50:	1fff92a0 	.word	0x1fff92a0
    af54:	1fff929c 	.word	0x1fff929c

0000af58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:
    af58:	b500      	push	{lr}
    af5a:	b083      	sub	sp, #12
    af5c:	f7f5 fdc0 	bl	ae0 <Sys_GetCoreID>
    af60:	4603      	mov	r3, r0
    af62:	9301      	str	r3, [sp, #4]
    af64:	4a10      	ldr	r2, [pc, #64]	; (afa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af66:	9b01      	ldr	r3, [sp, #4]
    af68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d10d      	bne.n	af8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    af70:	f7f5 fce6 	bl	940 <Pwm_schm_read_msr>
    af74:	9000      	str	r0, [sp, #0]
    af76:	9b00      	ldr	r3, [sp, #0]
    af78:	f003 0301 	and.w	r3, r3, #1
    af7c:	2b00      	cmp	r3, #0
    af7e:	d100      	bne.n	af82 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
    af80:	b672      	cpsid	i
    af82:	490a      	ldr	r1, [pc, #40]	; (afac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
    af84:	9b01      	ldr	r3, [sp, #4]
    af86:	9a00      	ldr	r2, [sp, #0]
    af88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af8c:	4a06      	ldr	r2, [pc, #24]	; (afa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af8e:	9b01      	ldr	r3, [sp, #4]
    af90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af94:	1c5a      	adds	r2, r3, #1
    af96:	4904      	ldr	r1, [pc, #16]	; (afa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
    af98:	9b01      	ldr	r3, [sp, #4]
    af9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    af9e:	bf00      	nop
    afa0:	b003      	add	sp, #12
    afa2:	f85d fb04 	ldr.w	pc, [sp], #4
    afa6:	bf00      	nop
    afa8:	1fff92a8 	.word	0x1fff92a8
    afac:	1fff92a4 	.word	0x1fff92a4

0000afb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:
    afb0:	b500      	push	{lr}
    afb2:	b083      	sub	sp, #12
    afb4:	f7f5 fd94 	bl	ae0 <Sys_GetCoreID>
    afb8:	4603      	mov	r3, r0
    afba:	9301      	str	r3, [sp, #4]
    afbc:	4a0d      	ldr	r2, [pc, #52]	; (aff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afbe:	9b01      	ldr	r3, [sp, #4]
    afc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc4:	1e5a      	subs	r2, r3, #1
    afc6:	490b      	ldr	r1, [pc, #44]	; (aff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afc8:	9b01      	ldr	r3, [sp, #4]
    afca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    afce:	4a0a      	ldr	r2, [pc, #40]	; (aff8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
    afd0:	9b01      	ldr	r3, [sp, #4]
    afd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afd6:	f003 0301 	and.w	r3, r3, #1
    afda:	2b00      	cmp	r3, #0
    afdc:	d106      	bne.n	afec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    afde:	4a05      	ldr	r2, [pc, #20]	; (aff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
    afe0:	9b01      	ldr	r3, [sp, #4]
    afe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afe6:	2b00      	cmp	r3, #0
    afe8:	d100      	bne.n	afec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    afea:	b662      	cpsie	i
    afec:	bf00      	nop
    afee:	b003      	add	sp, #12
    aff0:	f85d fb04 	ldr.w	pc, [sp], #4
    aff4:	1fff92a8 	.word	0x1fff92a8
    aff8:	1fff92a4 	.word	0x1fff92a4

0000affc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:
    affc:	b500      	push	{lr}
    affe:	b083      	sub	sp, #12
    b000:	f7f5 fd6e 	bl	ae0 <Sys_GetCoreID>
    b004:	4603      	mov	r3, r0
    b006:	9301      	str	r3, [sp, #4]
    b008:	4a10      	ldr	r2, [pc, #64]	; (b04c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b00a:	9b01      	ldr	r3, [sp, #4]
    b00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b010:	2b00      	cmp	r3, #0
    b012:	d10d      	bne.n	b030 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    b014:	f7f5 fc94 	bl	940 <Pwm_schm_read_msr>
    b018:	9000      	str	r0, [sp, #0]
    b01a:	9b00      	ldr	r3, [sp, #0]
    b01c:	f003 0301 	and.w	r3, r3, #1
    b020:	2b00      	cmp	r3, #0
    b022:	d100      	bne.n	b026 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
    b024:	b672      	cpsid	i
    b026:	490a      	ldr	r1, [pc, #40]	; (b050 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
    b028:	9b01      	ldr	r3, [sp, #4]
    b02a:	9a00      	ldr	r2, [sp, #0]
    b02c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b030:	4a06      	ldr	r2, [pc, #24]	; (b04c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b032:	9b01      	ldr	r3, [sp, #4]
    b034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b038:	1c5a      	adds	r2, r3, #1
    b03a:	4904      	ldr	r1, [pc, #16]	; (b04c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
    b03c:	9b01      	ldr	r3, [sp, #4]
    b03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b042:	bf00      	nop
    b044:	b003      	add	sp, #12
    b046:	f85d fb04 	ldr.w	pc, [sp], #4
    b04a:	bf00      	nop
    b04c:	1fff92b0 	.word	0x1fff92b0
    b050:	1fff92ac 	.word	0x1fff92ac

0000b054 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:
    b054:	b500      	push	{lr}
    b056:	b083      	sub	sp, #12
    b058:	f7f5 fd42 	bl	ae0 <Sys_GetCoreID>
    b05c:	4603      	mov	r3, r0
    b05e:	9301      	str	r3, [sp, #4]
    b060:	4a0d      	ldr	r2, [pc, #52]	; (b098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b062:	9b01      	ldr	r3, [sp, #4]
    b064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b068:	1e5a      	subs	r2, r3, #1
    b06a:	490b      	ldr	r1, [pc, #44]	; (b098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b06c:	9b01      	ldr	r3, [sp, #4]
    b06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b072:	4a0a      	ldr	r2, [pc, #40]	; (b09c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
    b074:	9b01      	ldr	r3, [sp, #4]
    b076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b07a:	f003 0301 	and.w	r3, r3, #1
    b07e:	2b00      	cmp	r3, #0
    b080:	d106      	bne.n	b090 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b082:	4a05      	ldr	r2, [pc, #20]	; (b098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
    b084:	9b01      	ldr	r3, [sp, #4]
    b086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b08a:	2b00      	cmp	r3, #0
    b08c:	d100      	bne.n	b090 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    b08e:	b662      	cpsie	i
    b090:	bf00      	nop
    b092:	b003      	add	sp, #12
    b094:	f85d fb04 	ldr.w	pc, [sp], #4
    b098:	1fff92b0 	.word	0x1fff92b0
    b09c:	1fff92ac 	.word	0x1fff92ac

0000b0a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:
    b0a0:	b500      	push	{lr}
    b0a2:	b083      	sub	sp, #12
    b0a4:	f7f5 fd1c 	bl	ae0 <Sys_GetCoreID>
    b0a8:	4603      	mov	r3, r0
    b0aa:	9301      	str	r3, [sp, #4]
    b0ac:	4a10      	ldr	r2, [pc, #64]	; (b0f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0ae:	9b01      	ldr	r3, [sp, #4]
    b0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d10d      	bne.n	b0d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    b0b8:	f7f5 fc42 	bl	940 <Pwm_schm_read_msr>
    b0bc:	9000      	str	r0, [sp, #0]
    b0be:	9b00      	ldr	r3, [sp, #0]
    b0c0:	f003 0301 	and.w	r3, r3, #1
    b0c4:	2b00      	cmp	r3, #0
    b0c6:	d100      	bne.n	b0ca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
    b0c8:	b672      	cpsid	i
    b0ca:	490a      	ldr	r1, [pc, #40]	; (b0f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
    b0cc:	9b01      	ldr	r3, [sp, #4]
    b0ce:	9a00      	ldr	r2, [sp, #0]
    b0d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0d4:	4a06      	ldr	r2, [pc, #24]	; (b0f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0d6:	9b01      	ldr	r3, [sp, #4]
    b0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0dc:	1c5a      	adds	r2, r3, #1
    b0de:	4904      	ldr	r1, [pc, #16]	; (b0f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
    b0e0:	9b01      	ldr	r3, [sp, #4]
    b0e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b0e6:	bf00      	nop
    b0e8:	b003      	add	sp, #12
    b0ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b0ee:	bf00      	nop
    b0f0:	1fff92b8 	.word	0x1fff92b8
    b0f4:	1fff92b4 	.word	0x1fff92b4

0000b0f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:
    b0f8:	b500      	push	{lr}
    b0fa:	b083      	sub	sp, #12
    b0fc:	f7f5 fcf0 	bl	ae0 <Sys_GetCoreID>
    b100:	4603      	mov	r3, r0
    b102:	9301      	str	r3, [sp, #4]
    b104:	4a0d      	ldr	r2, [pc, #52]	; (b13c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b10c:	1e5a      	subs	r2, r3, #1
    b10e:	490b      	ldr	r1, [pc, #44]	; (b13c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b110:	9b01      	ldr	r3, [sp, #4]
    b112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b116:	4a0a      	ldr	r2, [pc, #40]	; (b140 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
    b118:	9b01      	ldr	r3, [sp, #4]
    b11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b11e:	f003 0301 	and.w	r3, r3, #1
    b122:	2b00      	cmp	r3, #0
    b124:	d106      	bne.n	b134 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b126:	4a05      	ldr	r2, [pc, #20]	; (b13c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
    b128:	9b01      	ldr	r3, [sp, #4]
    b12a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b12e:	2b00      	cmp	r3, #0
    b130:	d100      	bne.n	b134 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    b132:	b662      	cpsie	i
    b134:	bf00      	nop
    b136:	b003      	add	sp, #12
    b138:	f85d fb04 	ldr.w	pc, [sp], #4
    b13c:	1fff92b8 	.word	0x1fff92b8
    b140:	1fff92b4 	.word	0x1fff92b4

0000b144 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:
    b144:	b500      	push	{lr}
    b146:	b083      	sub	sp, #12
    b148:	f7f5 fcca 	bl	ae0 <Sys_GetCoreID>
    b14c:	4603      	mov	r3, r0
    b14e:	9301      	str	r3, [sp, #4]
    b150:	4a10      	ldr	r2, [pc, #64]	; (b194 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b152:	9b01      	ldr	r3, [sp, #4]
    b154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b158:	2b00      	cmp	r3, #0
    b15a:	d10d      	bne.n	b178 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    b15c:	f7f5 fbf0 	bl	940 <Pwm_schm_read_msr>
    b160:	9000      	str	r0, [sp, #0]
    b162:	9b00      	ldr	r3, [sp, #0]
    b164:	f003 0301 	and.w	r3, r3, #1
    b168:	2b00      	cmp	r3, #0
    b16a:	d100      	bne.n	b16e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
    b16c:	b672      	cpsid	i
    b16e:	490a      	ldr	r1, [pc, #40]	; (b198 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
    b170:	9b01      	ldr	r3, [sp, #4]
    b172:	9a00      	ldr	r2, [sp, #0]
    b174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b178:	4a06      	ldr	r2, [pc, #24]	; (b194 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b17a:	9b01      	ldr	r3, [sp, #4]
    b17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b180:	1c5a      	adds	r2, r3, #1
    b182:	4904      	ldr	r1, [pc, #16]	; (b194 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
    b184:	9b01      	ldr	r3, [sp, #4]
    b186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b18a:	bf00      	nop
    b18c:	b003      	add	sp, #12
    b18e:	f85d fb04 	ldr.w	pc, [sp], #4
    b192:	bf00      	nop
    b194:	1fff92c0 	.word	0x1fff92c0
    b198:	1fff92bc 	.word	0x1fff92bc

0000b19c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:
    b19c:	b500      	push	{lr}
    b19e:	b083      	sub	sp, #12
    b1a0:	f7f5 fc9e 	bl	ae0 <Sys_GetCoreID>
    b1a4:	4603      	mov	r3, r0
    b1a6:	9301      	str	r3, [sp, #4]
    b1a8:	4a0d      	ldr	r2, [pc, #52]	; (b1e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b1aa:	9b01      	ldr	r3, [sp, #4]
    b1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1b0:	1e5a      	subs	r2, r3, #1
    b1b2:	490b      	ldr	r1, [pc, #44]	; (b1e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b1b4:	9b01      	ldr	r3, [sp, #4]
    b1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b1ba:	4a0a      	ldr	r2, [pc, #40]	; (b1e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
    b1bc:	9b01      	ldr	r3, [sp, #4]
    b1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1c2:	f003 0301 	and.w	r3, r3, #1
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	d106      	bne.n	b1d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b1ca:	4a05      	ldr	r2, [pc, #20]	; (b1e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
    b1cc:	9b01      	ldr	r3, [sp, #4]
    b1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d2:	2b00      	cmp	r3, #0
    b1d4:	d100      	bne.n	b1d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    b1d6:	b662      	cpsie	i
    b1d8:	bf00      	nop
    b1da:	b003      	add	sp, #12
    b1dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b1e0:	1fff92c0 	.word	0x1fff92c0
    b1e4:	1fff92bc 	.word	0x1fff92bc

0000b1e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:
    b1e8:	b500      	push	{lr}
    b1ea:	b083      	sub	sp, #12
    b1ec:	f7f5 fc78 	bl	ae0 <Sys_GetCoreID>
    b1f0:	4603      	mov	r3, r0
    b1f2:	9301      	str	r3, [sp, #4]
    b1f4:	4a10      	ldr	r2, [pc, #64]	; (b238 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b1f6:	9b01      	ldr	r3, [sp, #4]
    b1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fc:	2b00      	cmp	r3, #0
    b1fe:	d10d      	bne.n	b21c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    b200:	f7f5 fb9e 	bl	940 <Pwm_schm_read_msr>
    b204:	9000      	str	r0, [sp, #0]
    b206:	9b00      	ldr	r3, [sp, #0]
    b208:	f003 0301 	and.w	r3, r3, #1
    b20c:	2b00      	cmp	r3, #0
    b20e:	d100      	bne.n	b212 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
    b210:	b672      	cpsid	i
    b212:	490a      	ldr	r1, [pc, #40]	; (b23c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
    b214:	9b01      	ldr	r3, [sp, #4]
    b216:	9a00      	ldr	r2, [sp, #0]
    b218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b21c:	4a06      	ldr	r2, [pc, #24]	; (b238 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b21e:	9b01      	ldr	r3, [sp, #4]
    b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b224:	1c5a      	adds	r2, r3, #1
    b226:	4904      	ldr	r1, [pc, #16]	; (b238 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
    b228:	9b01      	ldr	r3, [sp, #4]
    b22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b22e:	bf00      	nop
    b230:	b003      	add	sp, #12
    b232:	f85d fb04 	ldr.w	pc, [sp], #4
    b236:	bf00      	nop
    b238:	1fff92c8 	.word	0x1fff92c8
    b23c:	1fff92c4 	.word	0x1fff92c4

0000b240 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:
    b240:	b500      	push	{lr}
    b242:	b083      	sub	sp, #12
    b244:	f7f5 fc4c 	bl	ae0 <Sys_GetCoreID>
    b248:	4603      	mov	r3, r0
    b24a:	9301      	str	r3, [sp, #4]
    b24c:	4a0d      	ldr	r2, [pc, #52]	; (b284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b24e:	9b01      	ldr	r3, [sp, #4]
    b250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b254:	1e5a      	subs	r2, r3, #1
    b256:	490b      	ldr	r1, [pc, #44]	; (b284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b258:	9b01      	ldr	r3, [sp, #4]
    b25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b25e:	4a0a      	ldr	r2, [pc, #40]	; (b288 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
    b260:	9b01      	ldr	r3, [sp, #4]
    b262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b266:	f003 0301 	and.w	r3, r3, #1
    b26a:	2b00      	cmp	r3, #0
    b26c:	d106      	bne.n	b27c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b26e:	4a05      	ldr	r2, [pc, #20]	; (b284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
    b270:	9b01      	ldr	r3, [sp, #4]
    b272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b276:	2b00      	cmp	r3, #0
    b278:	d100      	bne.n	b27c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    b27a:	b662      	cpsie	i
    b27c:	bf00      	nop
    b27e:	b003      	add	sp, #12
    b280:	f85d fb04 	ldr.w	pc, [sp], #4
    b284:	1fff92c8 	.word	0x1fff92c8
    b288:	1fff92c4 	.word	0x1fff92c4

0000b28c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:
    b28c:	b500      	push	{lr}
    b28e:	b083      	sub	sp, #12
    b290:	f7f5 fc26 	bl	ae0 <Sys_GetCoreID>
    b294:	4603      	mov	r3, r0
    b296:	9301      	str	r3, [sp, #4]
    b298:	4a10      	ldr	r2, [pc, #64]	; (b2dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b29a:	9b01      	ldr	r3, [sp, #4]
    b29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d10d      	bne.n	b2c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    b2a4:	f7f5 fb4c 	bl	940 <Pwm_schm_read_msr>
    b2a8:	9000      	str	r0, [sp, #0]
    b2aa:	9b00      	ldr	r3, [sp, #0]
    b2ac:	f003 0301 	and.w	r3, r3, #1
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d100      	bne.n	b2b6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
    b2b4:	b672      	cpsid	i
    b2b6:	490a      	ldr	r1, [pc, #40]	; (b2e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
    b2b8:	9b01      	ldr	r3, [sp, #4]
    b2ba:	9a00      	ldr	r2, [sp, #0]
    b2bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2c0:	4a06      	ldr	r2, [pc, #24]	; (b2dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c8:	1c5a      	adds	r2, r3, #1
    b2ca:	4904      	ldr	r1, [pc, #16]	; (b2dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
    b2cc:	9b01      	ldr	r3, [sp, #4]
    b2ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b2d2:	bf00      	nop
    b2d4:	b003      	add	sp, #12
    b2d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b2da:	bf00      	nop
    b2dc:	1fff92d0 	.word	0x1fff92d0
    b2e0:	1fff92cc 	.word	0x1fff92cc

0000b2e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:
    b2e4:	b500      	push	{lr}
    b2e6:	b083      	sub	sp, #12
    b2e8:	f7f5 fbfa 	bl	ae0 <Sys_GetCoreID>
    b2ec:	4603      	mov	r3, r0
    b2ee:	9301      	str	r3, [sp, #4]
    b2f0:	4a0d      	ldr	r2, [pc, #52]	; (b328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2f2:	9b01      	ldr	r3, [sp, #4]
    b2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f8:	1e5a      	subs	r2, r3, #1
    b2fa:	490b      	ldr	r1, [pc, #44]	; (b328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b2fc:	9b01      	ldr	r3, [sp, #4]
    b2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b302:	4a0a      	ldr	r2, [pc, #40]	; (b32c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
    b304:	9b01      	ldr	r3, [sp, #4]
    b306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b30a:	f003 0301 	and.w	r3, r3, #1
    b30e:	2b00      	cmp	r3, #0
    b310:	d106      	bne.n	b320 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b312:	4a05      	ldr	r2, [pc, #20]	; (b328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
    b314:	9b01      	ldr	r3, [sp, #4]
    b316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b31a:	2b00      	cmp	r3, #0
    b31c:	d100      	bne.n	b320 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    b31e:	b662      	cpsie	i
    b320:	bf00      	nop
    b322:	b003      	add	sp, #12
    b324:	f85d fb04 	ldr.w	pc, [sp], #4
    b328:	1fff92d0 	.word	0x1fff92d0
    b32c:	1fff92cc 	.word	0x1fff92cc

0000b330 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:
    b330:	b500      	push	{lr}
    b332:	b083      	sub	sp, #12
    b334:	f7f5 fbd4 	bl	ae0 <Sys_GetCoreID>
    b338:	4603      	mov	r3, r0
    b33a:	9301      	str	r3, [sp, #4]
    b33c:	4a10      	ldr	r2, [pc, #64]	; (b380 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b33e:	9b01      	ldr	r3, [sp, #4]
    b340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b344:	2b00      	cmp	r3, #0
    b346:	d10d      	bne.n	b364 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    b348:	f7f5 fafa 	bl	940 <Pwm_schm_read_msr>
    b34c:	9000      	str	r0, [sp, #0]
    b34e:	9b00      	ldr	r3, [sp, #0]
    b350:	f003 0301 	and.w	r3, r3, #1
    b354:	2b00      	cmp	r3, #0
    b356:	d100      	bne.n	b35a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
    b358:	b672      	cpsid	i
    b35a:	490a      	ldr	r1, [pc, #40]	; (b384 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
    b35c:	9b01      	ldr	r3, [sp, #4]
    b35e:	9a00      	ldr	r2, [sp, #0]
    b360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b364:	4a06      	ldr	r2, [pc, #24]	; (b380 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b366:	9b01      	ldr	r3, [sp, #4]
    b368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b36c:	1c5a      	adds	r2, r3, #1
    b36e:	4904      	ldr	r1, [pc, #16]	; (b380 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
    b370:	9b01      	ldr	r3, [sp, #4]
    b372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b376:	bf00      	nop
    b378:	b003      	add	sp, #12
    b37a:	f85d fb04 	ldr.w	pc, [sp], #4
    b37e:	bf00      	nop
    b380:	1fff92d8 	.word	0x1fff92d8
    b384:	1fff92d4 	.word	0x1fff92d4

0000b388 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:
    b388:	b500      	push	{lr}
    b38a:	b083      	sub	sp, #12
    b38c:	f7f5 fba8 	bl	ae0 <Sys_GetCoreID>
    b390:	4603      	mov	r3, r0
    b392:	9301      	str	r3, [sp, #4]
    b394:	4a0d      	ldr	r2, [pc, #52]	; (b3cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b396:	9b01      	ldr	r3, [sp, #4]
    b398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b39c:	1e5a      	subs	r2, r3, #1
    b39e:	490b      	ldr	r1, [pc, #44]	; (b3cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b3a0:	9b01      	ldr	r3, [sp, #4]
    b3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b3a6:	4a0a      	ldr	r2, [pc, #40]	; (b3d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
    b3a8:	9b01      	ldr	r3, [sp, #4]
    b3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ae:	f003 0301 	and.w	r3, r3, #1
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	d106      	bne.n	b3c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b3b6:	4a05      	ldr	r2, [pc, #20]	; (b3cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
    b3b8:	9b01      	ldr	r3, [sp, #4]
    b3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3be:	2b00      	cmp	r3, #0
    b3c0:	d100      	bne.n	b3c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    b3c2:	b662      	cpsie	i
    b3c4:	bf00      	nop
    b3c6:	b003      	add	sp, #12
    b3c8:	f85d fb04 	ldr.w	pc, [sp], #4
    b3cc:	1fff92d8 	.word	0x1fff92d8
    b3d0:	1fff92d4 	.word	0x1fff92d4

0000b3d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:
    b3d4:	b500      	push	{lr}
    b3d6:	b083      	sub	sp, #12
    b3d8:	f7f5 fb82 	bl	ae0 <Sys_GetCoreID>
    b3dc:	4603      	mov	r3, r0
    b3de:	9301      	str	r3, [sp, #4]
    b3e0:	4a10      	ldr	r2, [pc, #64]	; (b424 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b3e2:	9b01      	ldr	r3, [sp, #4]
    b3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d10d      	bne.n	b408 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    b3ec:	f7f5 faa8 	bl	940 <Pwm_schm_read_msr>
    b3f0:	9000      	str	r0, [sp, #0]
    b3f2:	9b00      	ldr	r3, [sp, #0]
    b3f4:	f003 0301 	and.w	r3, r3, #1
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d100      	bne.n	b3fe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
    b3fc:	b672      	cpsid	i
    b3fe:	490a      	ldr	r1, [pc, #40]	; (b428 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
    b400:	9b01      	ldr	r3, [sp, #4]
    b402:	9a00      	ldr	r2, [sp, #0]
    b404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b408:	4a06      	ldr	r2, [pc, #24]	; (b424 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b40a:	9b01      	ldr	r3, [sp, #4]
    b40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b410:	1c5a      	adds	r2, r3, #1
    b412:	4904      	ldr	r1, [pc, #16]	; (b424 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
    b414:	9b01      	ldr	r3, [sp, #4]
    b416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b41a:	bf00      	nop
    b41c:	b003      	add	sp, #12
    b41e:	f85d fb04 	ldr.w	pc, [sp], #4
    b422:	bf00      	nop
    b424:	1fff92e0 	.word	0x1fff92e0
    b428:	1fff92dc 	.word	0x1fff92dc

0000b42c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:
    b42c:	b500      	push	{lr}
    b42e:	b083      	sub	sp, #12
    b430:	f7f5 fb56 	bl	ae0 <Sys_GetCoreID>
    b434:	4603      	mov	r3, r0
    b436:	9301      	str	r3, [sp, #4]
    b438:	4a0d      	ldr	r2, [pc, #52]	; (b470 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b43a:	9b01      	ldr	r3, [sp, #4]
    b43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b440:	1e5a      	subs	r2, r3, #1
    b442:	490b      	ldr	r1, [pc, #44]	; (b470 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b444:	9b01      	ldr	r3, [sp, #4]
    b446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b44a:	4a0a      	ldr	r2, [pc, #40]	; (b474 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
    b44c:	9b01      	ldr	r3, [sp, #4]
    b44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b452:	f003 0301 	and.w	r3, r3, #1
    b456:	2b00      	cmp	r3, #0
    b458:	d106      	bne.n	b468 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b45a:	4a05      	ldr	r2, [pc, #20]	; (b470 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
    b45c:	9b01      	ldr	r3, [sp, #4]
    b45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b462:	2b00      	cmp	r3, #0
    b464:	d100      	bne.n	b468 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    b466:	b662      	cpsie	i
    b468:	bf00      	nop
    b46a:	b003      	add	sp, #12
    b46c:	f85d fb04 	ldr.w	pc, [sp], #4
    b470:	1fff92e0 	.word	0x1fff92e0
    b474:	1fff92dc 	.word	0x1fff92dc

0000b478 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:
    b478:	b500      	push	{lr}
    b47a:	b083      	sub	sp, #12
    b47c:	f7f5 fb30 	bl	ae0 <Sys_GetCoreID>
    b480:	4603      	mov	r3, r0
    b482:	9301      	str	r3, [sp, #4]
    b484:	4a10      	ldr	r2, [pc, #64]	; (b4c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b486:	9b01      	ldr	r3, [sp, #4]
    b488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b48c:	2b00      	cmp	r3, #0
    b48e:	d10d      	bne.n	b4ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    b490:	f7f5 fa56 	bl	940 <Pwm_schm_read_msr>
    b494:	9000      	str	r0, [sp, #0]
    b496:	9b00      	ldr	r3, [sp, #0]
    b498:	f003 0301 	and.w	r3, r3, #1
    b49c:	2b00      	cmp	r3, #0
    b49e:	d100      	bne.n	b4a2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
    b4a0:	b672      	cpsid	i
    b4a2:	490a      	ldr	r1, [pc, #40]	; (b4cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
    b4a4:	9b01      	ldr	r3, [sp, #4]
    b4a6:	9a00      	ldr	r2, [sp, #0]
    b4a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b4ac:	4a06      	ldr	r2, [pc, #24]	; (b4c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b4ae:	9b01      	ldr	r3, [sp, #4]
    b4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b4:	1c5a      	adds	r2, r3, #1
    b4b6:	4904      	ldr	r1, [pc, #16]	; (b4c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
    b4b8:	9b01      	ldr	r3, [sp, #4]
    b4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b4be:	bf00      	nop
    b4c0:	b003      	add	sp, #12
    b4c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b4c6:	bf00      	nop
    b4c8:	1fff92e8 	.word	0x1fff92e8
    b4cc:	1fff92e4 	.word	0x1fff92e4

0000b4d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:
    b4d0:	b500      	push	{lr}
    b4d2:	b083      	sub	sp, #12
    b4d4:	f7f5 fb04 	bl	ae0 <Sys_GetCoreID>
    b4d8:	4603      	mov	r3, r0
    b4da:	9301      	str	r3, [sp, #4]
    b4dc:	4a0d      	ldr	r2, [pc, #52]	; (b514 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4de:	9b01      	ldr	r3, [sp, #4]
    b4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4e4:	1e5a      	subs	r2, r3, #1
    b4e6:	490b      	ldr	r1, [pc, #44]	; (b514 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b4e8:	9b01      	ldr	r3, [sp, #4]
    b4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b4ee:	4a0a      	ldr	r2, [pc, #40]	; (b518 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
    b4f0:	9b01      	ldr	r3, [sp, #4]
    b4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f6:	f003 0301 	and.w	r3, r3, #1
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	d106      	bne.n	b50c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b4fe:	4a05      	ldr	r2, [pc, #20]	; (b514 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
    b500:	9b01      	ldr	r3, [sp, #4]
    b502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b506:	2b00      	cmp	r3, #0
    b508:	d100      	bne.n	b50c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    b50a:	b662      	cpsie	i
    b50c:	bf00      	nop
    b50e:	b003      	add	sp, #12
    b510:	f85d fb04 	ldr.w	pc, [sp], #4
    b514:	1fff92e8 	.word	0x1fff92e8
    b518:	1fff92e4 	.word	0x1fff92e4

0000b51c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:
    b51c:	b500      	push	{lr}
    b51e:	b083      	sub	sp, #12
    b520:	f7f5 fade 	bl	ae0 <Sys_GetCoreID>
    b524:	4603      	mov	r3, r0
    b526:	9301      	str	r3, [sp, #4]
    b528:	4a10      	ldr	r2, [pc, #64]	; (b56c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b52a:	9b01      	ldr	r3, [sp, #4]
    b52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b530:	2b00      	cmp	r3, #0
    b532:	d10d      	bne.n	b550 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    b534:	f7f5 fa04 	bl	940 <Pwm_schm_read_msr>
    b538:	9000      	str	r0, [sp, #0]
    b53a:	9b00      	ldr	r3, [sp, #0]
    b53c:	f003 0301 	and.w	r3, r3, #1
    b540:	2b00      	cmp	r3, #0
    b542:	d100      	bne.n	b546 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
    b544:	b672      	cpsid	i
    b546:	490a      	ldr	r1, [pc, #40]	; (b570 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
    b548:	9b01      	ldr	r3, [sp, #4]
    b54a:	9a00      	ldr	r2, [sp, #0]
    b54c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b550:	4a06      	ldr	r2, [pc, #24]	; (b56c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b552:	9b01      	ldr	r3, [sp, #4]
    b554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b558:	1c5a      	adds	r2, r3, #1
    b55a:	4904      	ldr	r1, [pc, #16]	; (b56c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
    b55c:	9b01      	ldr	r3, [sp, #4]
    b55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b562:	bf00      	nop
    b564:	b003      	add	sp, #12
    b566:	f85d fb04 	ldr.w	pc, [sp], #4
    b56a:	bf00      	nop
    b56c:	1fff92f0 	.word	0x1fff92f0
    b570:	1fff92ec 	.word	0x1fff92ec

0000b574 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:
    b574:	b500      	push	{lr}
    b576:	b083      	sub	sp, #12
    b578:	f7f5 fab2 	bl	ae0 <Sys_GetCoreID>
    b57c:	4603      	mov	r3, r0
    b57e:	9301      	str	r3, [sp, #4]
    b580:	4a0d      	ldr	r2, [pc, #52]	; (b5b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b582:	9b01      	ldr	r3, [sp, #4]
    b584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b588:	1e5a      	subs	r2, r3, #1
    b58a:	490b      	ldr	r1, [pc, #44]	; (b5b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b58c:	9b01      	ldr	r3, [sp, #4]
    b58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    b592:	4a0a      	ldr	r2, [pc, #40]	; (b5bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
    b594:	9b01      	ldr	r3, [sp, #4]
    b596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b59a:	f003 0301 	and.w	r3, r3, #1
    b59e:	2b00      	cmp	r3, #0
    b5a0:	d106      	bne.n	b5b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b5a2:	4a05      	ldr	r2, [pc, #20]	; (b5b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
    b5a4:	9b01      	ldr	r3, [sp, #4]
    b5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d100      	bne.n	b5b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    b5ae:	b662      	cpsie	i
    b5b0:	bf00      	nop
    b5b2:	b003      	add	sp, #12
    b5b4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5b8:	1fff92f0 	.word	0x1fff92f0
    b5bc:	1fff92ec 	.word	0x1fff92ec

0000b5c0 <Clock_Ip_au8DividerCallbackIndex>:
    b5c0:	0e0d0c00 06030201 0a070409 000b0805     ................

0000b5d0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000b5e0 <Clock_Ip_au8XoscCallbackIndex>:
    b5e0:	00000100 00000000 00000000 00000000     ................

0000b5f0 <Clock_Ip_au8IrcoscCallbackIndex>:
    b5f0:	03020100 00000004 00000000 00000000     ................

0000b600 <Clock_Ip_au8GateCallbackIndex>:
    b600:	06010200 01040301 00000500 00000000     ................

0000b610 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000b620 <Clock_Ip_au8PllCallbackIndex>:
    b620:	00000100 00000000 00000000 00000000     ................

0000b630 <Clock_Ip_au8SelectorCallbackIndex>:
    b630:	0a090800 03020109 07060504 00000000     ................

0000b640 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000b650 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000b660 <Clock_Ip_au8ClockFeatures>:
	...
    b670:	01000000 00000000 00000000 00000002     ................
    b680:	00000000 00000300 00000000 00040000     ................
    b690:	00000000 05000000 00000000 00000000     ................
    b6a0:	00000006 00000000 00000100 00000000     ................
    b6b0:	00010000 00000000 04000000 00000000     ................
    b6c0:	00000000 00000005 00000001 00000401     ................
    b6d0:	00000200 00050100 00030000 04020000     ................
    b6e0:	04000000 02000000 00000005 00000005     ................
    b6f0:	00000403 00000600 00050300 00070000     ................
    b700:	05000000 00000000 00000000 00000006     ................
	...
    b740:	00050000 00000000 06000000 00000100     ................
    b750:	00000000 00030007 00000000 00000000     ................
    b760:	00000000 00060000 00000000 07000000     ................
    b770:	00000100 00000000 00030008 00000000     ................
	...
    b788:	00090000 00000000 0a000000 00000100     ................
    b798:	00000000 0003000b 00000000 00000000     ................
    b7a8:	00000000 000c0000 00000000 0d000000     ................
    b7b8:	00000100 00000000 0003000e 00000000     ................
    b7c8:	00000800 00000000 00090000 00000000     ................
    b7d8:	0a000000 00000000 00000000 0000000b     ................
    b7e8:	00000000 00000b01 00000000 000b0200     ................
    b7f8:	00000000 0b030000 00000000 00000000     ................
	...
    b810:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    b820:	01000000 00000000 00000000 00000007     ................
    b830:	00007300 00000700 00320000 00090000     .s........2.....
    b840:	02000000 07000000 00000000 00000021     ............!...
    b850:	00000009 00000400 00000900 00030000     ................
    b860:	00070000 61000000 07000000 00000000     .......a........
    b870:	00000024 00000007 00002500 00000700     $........%......
    b880:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    b890:	00000000 00000020 38000004 00003800     .... ......8.8..
    b8a0:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    b8b0:	04000000 00260000 00000026 66000004     ......&.&......f
    b8c0:	00006600 00000400 00370037 00040000     .f......7.7.....
    b8d0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    b8e0:	2e000004 00002e00 00000200 00404040     ............@@@.
    b8f0:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    b900:	0000006b 6c000004 00006c00 00000900     k......l.l......
    b910:	00010000 00090000 00000000 07000000     ................
    b920:	00000000 00000036 00000007 00003100     ....6........1..
    b930:	00000700 00490000 00070000 4a000000     ......I........J
    b940:	07000000 00000000 0000004b 00000007     ........K.......
    b950:	00004c00 00000700 004d0000 00070000     .L........M.....
    b960:	3d000000 03000000 00000000 00000000     ...=............

0000b970 <Clock_Ip_au16SelectorEntryHardwareValue>:
    b970:	01010a03 01010001 04040002 02000603     ................
    b980:	00010810 02020100 00000000 00000007     ................
    b990:	00000009 00000000 00000c0e 00000000     ................
	...

0000b9c8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    b9c8:	00020000 00000300 00000601 00000000     ................
	...

0000b9f8 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    b9f8:	00000700 00000000 02020000 01010303     ................
    ba08:	03020606 00000000 00000000 00000000     ................
	...

0000ba28 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    ba28:	00000001 00000000 02020000 01010303     ................
    ba38:	03020606 00000000 00000000 00000000     ................
	...

0000ba58 <Clock_Ip_au8DividerValueHardwareValue>:
    ba58:	00020100 00000003 00000004 00000000     ................
    ba68:	00000005 00000000 00000000 00000000     ................
    ba78:	00000006 00000000 00000000 00000000     ................
	...
    ba98:	00000007                                ....

0000ba9c <Clock_Ip_apxScgPeriphAsyncDivs>:
    ba9c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000baac <Clock_Ip_aeSourceTypeClockName>:
    baac:	00000000 00000001 00000001 00000001     ................
    babc:	00000001 00000001 00000001 00000001     ................
    bacc:	00000002 00000003 00000001 00000001     ................
    badc:	00000001 00000001 00000002 00000002     ................
    baec:	00000003 00000003 00000001 00000001     ................
    bafc:	00000004 00000004 00000004 00000004     ................
	...

0000bb68 <Clock_Ip_aeHwPllName>:
    bb68:	00000009                                ....

0000bb6c <Clock_Ip_aeHwDfsName>:
    bb6c:	00000057                                W...

0000bb70 <Clock_Ip_axDividerCallbacks>:
    bb70:	00001bf5 00001bff 00001c19 00001c33     ............3...
    bb80:	00001c4d 00001c67 00001c81 00001c9b     M...g...........
    bb90:	00001cb5 00001ccf 00001ce9 00001d03     ................
    bba0:	00001d1d 00001d37 00001d51              ....7...Q...

0000bbac <Clock_Ip_axDividerTriggerCallbacks>:
    bbac:	000020c5 000020c5                       . ... ..

0000bbb4 <Clock_Ip_axExtOscCallbacks>:
    bbb4:	000020d1 000020d1 000020d1 000020db     . ... ... ... ..
    bbc4:	000020d1 000020e5 000020ff 00002119     . ... ... ...!..
    bbd4:	0000219d 000021b1                       .!...!..

0000bbdc <Clock_Ip_axFracDivCallbacks>:
    bbdc:	00002371 00002371 0000237b              q#..q#..{#..

0000bbe8 <Clock_Ip_axGateCallbacks>:
    bbe8:	00002395 0000239f 0000249f 000024b9     .#...#...$...$..
    bbf8:	0000244f 00002469 000023ff 00002419     O$..i$...#...$..
    bc08:	000023af 000023c9 000024ef 00002509     .#...#...$...%..
    bc18:	0000253f 00002559                       ?%..Y%..

0000bc20 <Clock_Ip_axIntOscCallbacks>:
    bc20:	00002705 00002705 0000270f 00002719     .'...'...'...'..
    bc30:	00002733 0000274d 00002761 0000277b     3'..M'..a'..{'..
    bc40:	00002795 000027a9 000027c3 000027dd     .'...'...'...'..
    bc50:	00002885 0000289f 000028b9              .(...(...(..

0000bc5c <Clock_Ip_axCmuCallbacks>:
    bc5c:	00002e55 00002e5f 00002e6b 00002e55     U..._...k...U...

0000bc6c <Clock_Ip_axPllCallbacks>:
    bc6c:	00002e75 00002e75 00002e7f 00002e75     u...u.......u...
    bc7c:	00002e8b 00002e95 00002eaf 00002ec9     ................
    bc8c:	00002f6d 00002f59                       m/..Y/..

0000bc94 <Clock_Ip_axPcfsCallbacks>:
    bc94:	000030c9                                .0..

0000bc98 <Clock_Ip_axSelectorCallbacks>:
    bc98:	000030d5 000030d5 000030df 000030f9     .0...0...0...0..
    bca8:	000030d5 00003113 0000312d 00003147     .0...1..-1..G1..
    bcb8:	00003161 0000317b 00003195 000031af     a1..{1...1...1..
    bcc8:	000031c9 000031e3 000031fd 00003217     .1...1...1...2..
    bcd8:	00003231 0000324b 00003265 0000327f     12..K2..e2...2..
    bce8:	00003299 000032b3                       .2...2..

0000bcf0 <ClockSource>:
    bcf0:	00000000 00000008 00000002 00000005     ................
	...
    bd08:	00000009                                ....

0000bd0c <ResetReasonArray>:
    bd0c:	00000000 00000001 00000002 00000003     ................
    bd1c:	00000004 00000005 00000006 00000007     ................
    bd2c:	00000008 00000009 0000000a 0000000b     ................
    bd3c:	0000000c 0000000d 0000000e              ............

0000bd48 <Port_au32PortCiPortBaseAddr>:
    bd48:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    bd58:	4004d000                                ...@

0000bd5c <Port_au32PortCiGpioBaseAddr>:
    bd5c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    bd6c:	400ff100                                ...@

0000bd70 <Ftm_Pwm_Ip_aFtmBase>:
    bd70:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

0000bd80 <Mcu_aClockConfigPB>:
	...
    bd88:	1c000101 04000010 01000029 00000005     ........).......
    bd98:	00000001 00000000 00000057 00000000     ........W.......
    bda8:	00000000 00000008 007a1200 00000001     ..........z.....
    bdb8:	00000001 00000000 00000057 00000000     ........W.......
    bdc8:	00000057 00000000 00000000 00000000     W...............
	...
    bde8:	00000019 00000005 0000001a 00000002     ................
    bdf8:	0000001b 00000005 0000002a 00000005     ........*.......
    be08:	00000028 0000000e 00000029 00000001     (.......).......
    be18:	00000056 0000001c 00000032 0000002a     V.......2...*...
    be28:	0000002b 00000014 0000002c 00000014     +.......,.......
    be38:	0000002d 00000014 0000002e 00000014     -...............
    be48:	0000003f 00000000 00000040 00000000     ?.......@.......
    be58:	00000041 00000000 00000042 00000000     A.......B.......
    be68:	00000031 00000000 00000045 00000000     1.......E.......
    be78:	00000046 00000000 00000047 00000000     F.......G.......
    be88:	00000044 00000000 00000030 00000000     D.......0.......
    be98:	0000003d 00000000 00000043 00000000     =.......C.......
    bea8:	00000049 00000000 0000004a 00000000     I.......J.......
    beb8:	0000004b 00000000 00000048 00000000     K.......H.......
    bec8:	0000000c 00000001 00000000 0000000d     ................
    bed8:	00000002 00000000 0000000e 00000001     ................
    bee8:	00000000 0000000f 00000001 00000000     ................
    bef8:	0000001d 00000001 00000000 0000001e     ................
    bf08:	00000008 00000000 0000001f 00000001     ................
    bf18:	00000000 00000021 00000001 00000000     ....!...........
    bf28:	00000022 00000002 00000000 00000023     "...........#...
    bf38:	00000001 00000000 00000025 00000003     ........%.......
    bf48:	00000000 00000026 00000004 00000000     ....&...........
    bf58:	00000027 00000002 00000000 00000032     '...........2...
    bf68:	00000001 00000000 00000048 00000001     ........H.......
    bf78:	00000001 00000056 00000001 00000001     ....V...........
    bf88:	00000057 00000000 00000000 00000057     W...........W...
	...
    bfa0:	00000057 00000000 00000000 00000057     W...........W...
	...
    bfb8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    bfd4:	00000014 00007d00 00000015 00007d00     .....}.......}..
    bfe4:	00000016 00007d00 00000017 00008000     .....}..........
    bff4:	00000012 00000001 00000013 00000001     ................
    c004:	00000030 00000000 00000031 00000000     0.......1.......
    c014:	00000032 00000000 00000033 00000000     2.......3.......
    c024:	00000034 00000000 00000035 00000001     4.......5.......
    c034:	00000036 00000000 00000037 00000001     6.......7.......
    c044:	00000038 00000001 00000039 00000000     8.......9.......
    c054:	0000003a 00000000 0000003b 00000000     :.......;.......
    c064:	0000003c 00000000 0000003d 00000000     <.......=.......
    c074:	0000003e 00000000 0000003f 00000001     >.......?.......
    c084:	00000040 00000000 00000041 00000000     @.......A.......
    c094:	00000042 00000000 00000043 00000000     B.......C.......
    c0a4:	00000044 00000000 00000045 00000000     D.......E.......
    c0b4:	00000046 00000000 00000047 00000000     F.......G.......
    c0c4:	00000048 00000000 00000049 00000000     H.......I.......
    c0d4:	0000004a 00000000 0000004b 00000000     J.......K.......
    c0e4:	0000004c 00000001 0000004d 00000001     L.......M.......
    c0f4:	0000004e 00000000 0000004f 00000000     N.......O.......
    c104:	00000050 00000001 00000051 00000001     P.......Q.......
    c114:	00000052 00000001 00000053 00000001     R.......S.......
    c124:	00000054 00000001 00000055 00000000     T.......U.......
    c134:	00000056 00000001 00000057 00000000     V.......W.......
    c144:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000c178 <Ftm_Pwm_Ip_SyncCfg0>:
	...
    c194:	00000003 00000003                       ........

0000c19c <Ftm_Pwm_Ip_InstCfg0>:
    c19c:	00000001 00000007 00000000 00000000     ................
	...
    c1d0:	0000927c 00000001 00000000 00000000     |...............
    c1e0:	00000000 0000c178                       ....x...

0000c1e8 <Ftm_Pwm_Ip_I0_Ch2>:
    c1e8:	00000002 0000000a 00000000 00000000     ................
    c1f8:	00000000 00000001 00000000 00000000     ................
	...

0000c210 <Ftm_Pwm_Ip_I0_Ch0>:
    c210:	00000000 0000000a 00000000 00000000     ................
    c220:	00000000 00000001 00000000 00000000     ................
	...

0000c238 <Ftm_Pwm_Ip_I0_Ch1>:
    c238:	00000001 0000000a 00000000 00000000     ................
    c248:	00000000 00000001 00000000 00000000     ................
	...

0000c260 <Ftm_Pwm_Ip_I0_ChArray>:
    c260:	0000c1e8 0000c210 0000c238              ........8...

0000c26c <Ftm_Pwm_Ip_UserCfg0>:
    c26c:	0000c19c 0000c260 00000003 00000000     ....`...........
    c27c:	00000000                                ....

0000c280 <Mcu_Config>:
    c280:	0000005a 00000000 00000001 00000001     Z...............
    c290:	0000c450 0000bd80 0000c45c              P.......\...

0000c29c <OsIf_xPredefinedConfig>:
    c29c:	00000000 02dc6c00                       .....l..

0000c2a4 <OsIf_apxPredefinedConfig>:
    c2a4:	0000c29c                                ....

0000c2a8 <g_pin_mux_InitConfigArr>:
    c2a8:	4004c000 00000000 00000000 00000002     ...@............
    c2b8:	00000002 00000002 00000000 00000000     ................
	...
    c2d0:	4004c000 00000000 0000000f 00000002     ...@............
    c2e0:	00000002 00000002 00000000 00000000     ................
	...
    c2f8:	4004c000 00000000 00000010 00000002     ...@............
    c308:	00000002 00000002 00000000 00000000     ................
	...

0000c320 <au8Port_PartitionList>:
    c320:	00000001                                ....

0000c324 <au32Port_PinToPartitionMap>:
    c324:	00000001 00000001 00000001              ............

0000c330 <Port_au16NoUnUsedPadsArrayDefault>:
    c330:	00010000 00030002 00070006 00090008     ................
    c340:	000c000b 000e000d 0010000f 00200011     .............. .
    c350:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    c360:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    c370:	00400031 00420041 00460043 00480047     1.@.A.B.C.F.G.H.
    c380:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c390:	00610051 00630062 00650064 00670066     Q.a.b.c.d.e.f.g.
    c3a0:	00690068 006b006a 006d006c 0071006e     h.i.j.k.l.m.n.q.
    c3b0:	00810080 00830082 00850084 00870086     ................
    c3c0:	00890088 008b008a 008d008c 008f008e     ................
    c3d0:	00000090                                ....

0000c3d4 <Port_UnUsedPin>:
    c3d4:	00000100 00000001 00000000              ............

0000c3e0 <Port_aPinConfigDefault>:
    c3e0:	00000060 00000200 00000000 00000002     `...............
    c3f0:	00010000 0000006f 00000200 00000000     ....o...........
    c400:	00000002 00010000 00000070 00000200     ........p.......
    c410:	00000000 00000002 00010000              ............

0000c41c <Port_Config>:
    c41c:	00510003 0000c330 0000c3d4 0000c3e0     ..Q.0...........
	...
    c434:	0000c324 0000c320 0000c2a8              $... .......

0000c440 <Power_Ip_RCM_ConfigPB>:
	...

0000c448 <Power_Ip_PMC_ConfigPB>:
    c448:	00000000                                ....

0000c44c <Power_Ip_SMC_ConfigPB>:
    c44c:	00000000                                ....

0000c450 <Power_Ip_aModeConfigPB>:
	...

0000c45c <Power_Ip_HwIPsConfigPB>:
    c45c:	0000c440 0000c448 0000c44c              @...H...L...

0000c468 <Pwm_Channels_PB>:
	...
    c470:	00000001 0000c1e8 00000000 00000001     ................
    c480:	00000001 00000000 00000001 0000c210     ................
    c490:	00000000 00000001 00000002 00000000     ................
    c4a0:	00000001 0000c238 00000000 00000001     ....8...........

0000c4b0 <Pwm_Instances_PB>:
    c4b0:	00000000 00000001 0000c26c              ........l...

0000c4bc <Pwm_Config>:
    c4bc:	00000003 0000c468 00000001 0000c4b0     ....h...........

0000c4cc <__INIT_TABLE>:
    c4cc:	00000002 	.word	0x00000002
    c4d0:	1fff8b10 	.word	0x1fff8b10
    c4d4:	0000c4f4 	.word	0x0000c4f4
    c4d8:	0000c524 	.word	0x0000c524
    c4dc:	1fff8800 	.word	0x1fff8800
    c4e0:	00000000 	.word	0x00000000
    c4e4:	00000310 	.word	0x00000310

0000c4e8 <__ZERO_TABLE>:
    c4e8:	00000001 	.word	0x00000001
    c4ec:	1fff8b40 	.word	0x1fff8b40
    c4f0:	1fff9300 	.word	0x1fff9300
