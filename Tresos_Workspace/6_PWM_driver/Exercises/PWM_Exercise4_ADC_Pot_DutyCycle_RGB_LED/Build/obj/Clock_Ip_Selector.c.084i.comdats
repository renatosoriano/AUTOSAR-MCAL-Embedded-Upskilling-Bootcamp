Clock_Ip_SetSimTraceSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  struct SIM_Type * _6;

  <bb 2> :
  _1 = Config_8(D)->Value;
  _2 = Clock_Ip_au16SelectorEntryHardwareValue[_1];
  SelectorValue_9 = (uint32) _2;
  _3 = 1074036736B;
  RegValue_10 ={v} _3->CHIPCTL;
  RegValue_11 = RegValue_10 & 4294963199;
  _4 = SelectorValue_9 << 12;
  _5 = _4 & 4096;
  RegValue_12 = RegValue_11 | _5;
  _6 = 1074036736B;
  _6->CHIPCTL ={v} RegValue_12;
  return;

}


Clock_Ip_ResetSimTraceSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  struct SIM_Type * _2;
  long unsigned int _3;
  long unsigned int _4;
  struct SIM_Type * _5;

  <bb 2> :
  _1 = Clock_Ip_au16SelectorEntryHardwareValue[28];
  SelectorValue_7 = (uint32) _1;
  _2 = 1074036736B;
  RegValue_8 ={v} _2->CHIPCTL;
  RegValue_9 = RegValue_8 & 4294963199;
  _3 = SelectorValue_7 << 12;
  _4 = _3 & 4096;
  RegValue_10 = RegValue_9 | _4;
  _5 = 1074036736B;
  _5->CHIPCTL ={v} RegValue_10;
  return;

}


Clock_Ip_SetPccPcsSelect_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 PccIndex;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  struct PCC_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  struct PCC_Type * _8;

  <bb 2> :
  _1 = Config_10(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][4];
  PccIndex_11 = (uint32) _2;
  _3 = Config_10(D)->Value;
  _4 = Clock_Ip_au8SelectorEntryPcsHardwareValue[_3];
  SelectorValue_12 = (uint32) _4;
  _5 = 1074155520B;
  RegValue_13 ={v} _5->PCCn[PccIndex_11];
  RegValue_14 = RegValue_13 & 4177526783;
  _6 = SelectorValue_12 << 24;
  _7 = _6 & 117440512;
  RegValue_15 = RegValue_14 | _7;
  _8 = 1074155520B;
  _8->PCCn[PccIndex_11] ={v} RegValue_15;
  return;

}


Clock_Ip_ResetPccPcsSelect_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 PccIndex;
  <unnamed type> _1;
  unsigned char _2;
  struct PCC_Type * _3;
  long unsigned int _4;
  struct PCC_Type * _5;
  long unsigned int _6;
  struct PCC_Type * _7;
  long unsigned int _8;
  struct PCC_Type * _9;
  long unsigned int _10;

  <bb 2> :
  _1 = Config_12(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][4];
  PccIndex_13 = (uint32) _2;
  _3 = 1074155520B;
  _4 ={v} _3->PCCn[PccIndex_13];
  _5 = 1074155520B;
  _6 = _4 & 3221225471;
  _5->PCCn[PccIndex_13] ={v} _6;
  _7 = 1074155520B;
  _8 ={v} _7->PCCn[PccIndex_13];
  _9 = 1074155520B;
  _10 = _8 & 4177526783;
  _9->PCCn[PccIndex_13] ={v} _10;
  return;

}


Clock_Ip_SetSimClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  struct SIM_Type * _5;

  <bb 2> :
  _1 = Config_7(D)->Value;
  _2 = Clock_Ip_au16SelectorEntryHardwareValue[_1];
  SelectorValue_8 = (uint32) _2;
  _3 = 1074036736B;
  RegValue_9 ={v} _3->CHIPCTL;
  RegValue_10 = RegValue_9 & 4294967055;
  _4 = SelectorValue_8 << 4;
  RegValue_11 = RegValue_10 | _4;
  _5 = 1074036736B;
  _5->CHIPCTL ={v} RegValue_11;
  return;

}


Clock_Ip_ResetSimClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 RegValue;
  struct SIM_Type * _1;
  struct SIM_Type * _2;

  <bb 2> :
  _1 = 1074036736B;
  RegValue_4 ={v} _1->CHIPCTL;
  RegValue_5 = RegValue_4 & 4294965007;
  _2 = 1074036736B;
  _2->CHIPCTL ={v} RegValue_5;
  return;

}


Clock_Ip_SetSimFtmoptSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 Instance;
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  struct SIM_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  struct SIM_Type * _22;

  <bb 2> :
  _1 = Config_25(D)->Value;
  _2 = Clock_Ip_au16SelectorEntryHardwareValue[_1];
  SelectorValue_26 = (uint32) _2;
  _3 = Config_25(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][0];
  Instance_27 = (uint32) _4;
  _5 = 1074036736B;
  RegValue_28 ={v} _5->FTMOPT0;
  if (Instance_27 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = Instance_27 << 1;
  _7 = _6 + 24;
  _8 = 3 << _7;
  _9 = ~_8;
  RegValue_31 = RegValue_28 & _9;
  _10 = Instance_27 << 1;
  _11 = _10 + 24;
  _12 = SelectorValue_26 << _11;
  RegValue_32 = RegValue_31 | _12;
  goto <bb 5>; [INV]

  <bb 4> :
  _13 = Instance_27 + 4294967292;
  _14 = _13 << 1;
  _15 = _14 + 16;
  _16 = 3 << _15;
  _17 = ~_16;
  RegValue_29 = RegValue_28 & _17;
  _18 = Instance_27 + 4294967292;
  _19 = _18 << 1;
  _20 = _19 + 16;
  _21 = SelectorValue_26 << _20;
  RegValue_30 = RegValue_29 | _21;

  <bb 5> :
  # RegValue_23 = PHI <RegValue_32(3), RegValue_30(4)>
  _22 = 1074036736B;
  _22->FTMOPT0 ={v} RegValue_23;
  return;

}


Clock_Ip_ResetSimFtmoptSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 Instance;
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  <unnamed type> _2;
  unsigned char _3;
  struct SIM_Type * _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  struct SIM_Type * _21;

  <bb 2> :
  _1 = Clock_Ip_au16SelectorEntryHardwareValue[5];
  SelectorValue_24 = (uint32) _1;
  _2 = Config_25(D)->Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance_26 = (uint32) _3;
  _4 = 1074036736B;
  RegValue_27 ={v} _4->FTMOPT0;
  if (Instance_26 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = Instance_26 << 1;
  _6 = _5 + 24;
  _7 = 3 << _6;
  _8 = ~_7;
  RegValue_30 = RegValue_27 & _8;
  _9 = Instance_26 << 1;
  _10 = _9 + 24;
  _11 = SelectorValue_24 << _10;
  RegValue_31 = RegValue_30 | _11;
  goto <bb 5>; [INV]

  <bb 4> :
  _12 = Instance_26 + 4294967292;
  _13 = _12 << 1;
  _14 = _13 + 16;
  _15 = 3 << _14;
  _16 = ~_15;
  RegValue_28 = RegValue_27 & _16;
  _17 = Instance_26 + 4294967292;
  _18 = _17 << 1;
  _19 = _18 + 16;
  _20 = SelectorValue_24 << _19;
  RegValue_29 = RegValue_28 | _20;

  <bb 5> :
  # RegValue_22 = PHI <RegValue_31(3), RegValue_29(4)>
  _21 = 1074036736B;
  _21->FTMOPT0 ={v} RegValue_22;
  return;

}


Clock_Ip_SetScgClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SCG_Type * _3;
  long unsigned int _4;
  struct SCG_Type * _5;

  <bb 2> :
  _1 = Config_7(D)->Value;
  _2 = Clock_Ip_au8SelectorEntryScsHardwareValue[_1];
  SelectorValue_8 = (uint32) _2;
  _3 = 1074151424B;
  RegValue_9 ={v} _3->CLKOUTCNFG;
  RegValue_10 = RegValue_9 & 4043309055;
  _4 = SelectorValue_8 << 24;
  RegValue_11 = RegValue_10 | _4;
  _5 = 1074151424B;
  _5->CLKOUTCNFG ={v} RegValue_11;
  return;

}


Clock_Ip_ResetScgClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  struct SCG_Type * _4;

  <bb 2> :
  _1 = Clock_Ip_au8SelectorEntryScsHardwareValue[5];
  SelectorValue_6 = (uint32) _1;
  _2 = 1074151424B;
  RegValue_7 ={v} _2->CLKOUTCNFG;
  RegValue_8 = RegValue_7 & 4043309055;
  _3 = SelectorValue_6 << 24;
  RegValue_9 = RegValue_8 | _3;
  _4 = 1074151424B;
  _4->CLKOUTCNFG ={v} RegValue_9;
  return;

}


Clock_Ip_SetSimLpoSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  struct SIM_Type * _5;

  <bb 2> :
  _1 = Config_7(D)->Value;
  _2 = Clock_Ip_au8SelectorEntrySIMHardwareValue[_1];
  SelectorValue_8 = (uint32) _2;
  _3 = 1074036736B;
  RegValue_9 ={v} _3->LPOCLKS;
  RegValue_10 = RegValue_9 & 4294967283;
  _4 = SelectorValue_8 << 2;
  RegValue_11 = RegValue_10 | _4;
  _5 = 1074036736B;
  _5->LPOCLKS ={v} RegValue_11;
  return;

}


Clock_Ip_ResetSimLpoSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  struct SIM_Type * _2;
  long unsigned int _3;
  struct SIM_Type * _4;

  <bb 2> :
  _1 = Clock_Ip_au8SelectorEntrySIMHardwareValue[1];
  SelectorValue_6 = (uint32) _1;
  _2 = 1074036736B;
  RegValue_7 ={v} _2->LPOCLKS;
  RegValue_8 = RegValue_7 & 4294967283;
  _3 = SelectorValue_6 << 2;
  RegValue_9 = RegValue_8 | _3;
  _4 = 1074036736B;
  _4->LPOCLKS ={v} RegValue_9;
  return;

}


Clock_Ip_SetSimRtcSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  struct SIM_Type * _5;

  <bb 2> :
  _1 = Config_7(D)->Value;
  _2 = Clock_Ip_au16SelectorEntryHardwareValue[_1];
  SelectorValue_8 = (uint32) _2;
  _3 = 1074036736B;
  RegValue_9 ={v} _3->LPOCLKS;
  RegValue_10 = RegValue_9 & 4294967247;
  _4 = SelectorValue_8 << 4;
  RegValue_11 = RegValue_10 | _4;
  _5 = 1074036736B;
  _5->LPOCLKS ={v} RegValue_11;
  return;

}


Clock_Ip_ResetSimRtcSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  struct SIM_Type * _2;
  long unsigned int _3;
  struct SIM_Type * _4;

  <bb 2> :
  _1 = Clock_Ip_au16SelectorEntryHardwareValue[14];
  SelectorValue_6 = (uint32) _1;
  _2 = 1074036736B;
  RegValue_7 ={v} _2->LPOCLKS;
  RegValue_8 = RegValue_7 & 4294967247;
  _3 = SelectorValue_6 << 4;
  RegValue_9 = RegValue_8 | _3;
  _4 = 1074036736B;
  _4->LPOCLKS ={v} RegValue_9;
  return;

}


Clock_Ip_SetScgHsrunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SCG_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  struct SCG_Type * _6;

  <bb 2> :
  _1 = Config_8(D)->Value;
  _2 = Clock_Ip_au8SelectorEntryScsHardwareValue[_1];
  SelectorValue_9 = (uint32) _2;
  _3 = 1074151424B;
  RegValue_10 ={v} _3->HCCR;
  RegValue_11 = RegValue_10 & 4043309055;
  _4 = SelectorValue_9 << 24;
  _5 = _4 & 251658240;
  RegValue_12 = RegValue_11 | _5;
  _6 = 1074151424B;
  _6->HCCR ={v} RegValue_12;
  return;

}


Clock_Ip_ResetScgHsrunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  long unsigned int _4;
  struct SCG_Type * _5;

  <bb 2> :
  _1 = Clock_Ip_au8SelectorEntryScsHardwareValue[5];
  SelectorValue_7 = (uint32) _1;
  _2 = 1074151424B;
  RegValue_8 ={v} _2->HCCR;
  RegValue_9 = RegValue_8 & 4043309055;
  _3 = SelectorValue_7 << 24;
  _4 = _3 & 251658240;
  RegValue_10 = RegValue_9 | _4;
  _5 = 1074151424B;
  _5->HCCR ={v} RegValue_10;
  return;

}


Clock_Ip_SetScgVlprSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SCG_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  struct SCG_Type * _6;

  <bb 2> :
  _1 = Config_8(D)->Value;
  _2 = Clock_Ip_au8SelectorEntryScsHardwareValue[_1];
  SelectorValue_9 = (uint32) _2;
  _3 = 1074151424B;
  RegValue_10 ={v} _3->VCCR;
  RegValue_11 = RegValue_10 & 4043309055;
  _4 = SelectorValue_9 << 24;
  _5 = _4 & 251658240;
  RegValue_12 = RegValue_11 | _5;
  _6 = 1074151424B;
  _6->VCCR ={v} RegValue_12;
  return;

}


Clock_Ip_SetScgRunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  <unnamed type> _1;
  unsigned char _2;
  struct SCG_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  struct SCG_Type * _6;

  <bb 2> :
  _1 = Config_8(D)->Value;
  _2 = Clock_Ip_au8SelectorEntryScsHardwareValue[_1];
  SelectorValue_9 = (uint32) _2;
  _3 = 1074151424B;
  RegValue_10 ={v} _3->RCCR;
  RegValue_11 = RegValue_10 & 4043309055;
  _4 = SelectorValue_9 << 24;
  _5 = _4 & 251658240;
  RegValue_12 = RegValue_11 | _5;
  _6 = 1074151424B;
  _6->RCCR ={v} RegValue_12;
  return;

}


Clock_Ip_ResetScgRunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;
  unsigned char _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  long unsigned int _4;
  struct SCG_Type * _5;

  <bb 2> :
  _1 = Clock_Ip_au8SelectorEntryScsHardwareValue[5];
  SelectorValue_7 = (uint32) _1;
  _2 = 1074151424B;
  RegValue_8 ={v} _2->RCCR;
  RegValue_9 = RegValue_8 & 4043309055;
  _3 = SelectorValue_7 << 24;
  _4 = _3 & 251658240;
  RegValue_10 = RegValue_9 | _4;
  _5 = 1074151424B;
  _5->RCCR ={v} RegValue_10;
  return;

}


Clock_Ip_SetSimTraceSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetSimTraceSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetSimTraceSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetSimTraceSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetPccPcsSelect_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetPccPcsSelect_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetSimClkoutSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetSimClkoutSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetSimFtmoptSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetSimFtmoptSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetScgClkoutSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetScgClkoutSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetSimLpoSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetSimLpoSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetSimLpoSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetSimLpoSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetSimRtcSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetSimRtcSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetSimRtcSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetSimRtcSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetScgHsrunSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetScgHsrunSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetScgVlprSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetScgVlprSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_SetScgRunSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_SetScgRunSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_ResetScgRunSel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  if (Config_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_ResetScgRunSel_TrustedCall (Config_2(D));

  <bb 4> :
  return;

}


Clock_Ip_CallbackSelectorEmpty (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  return;

}


