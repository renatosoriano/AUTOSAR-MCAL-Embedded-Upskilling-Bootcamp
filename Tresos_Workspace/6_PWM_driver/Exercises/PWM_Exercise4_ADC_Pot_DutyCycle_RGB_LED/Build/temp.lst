
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c1f 	.word	0x00000c1f
  10:	00000c21 	.word	0x00000c21
  14:	00000c23 	.word	0x00000c23
  18:	00000c25 	.word	0x00000c25
	...
  2c:	00000c27 	.word	0x00000c27
  30:	00000c29 	.word	0x00000c29
  34:	00000000 	.word	0x00000000
  38:	00000c2b 	.word	0x00000c2b
  3c:	00000c2d 	.word	0x00000c2d
  40:	00000c2f 	.word	0x00000c2f
  44:	00000c2f 	.word	0x00000c2f
  48:	00000c2f 	.word	0x00000c2f
  4c:	00000c2f 	.word	0x00000c2f
  50:	00000c2f 	.word	0x00000c2f
  54:	00000c2f 	.word	0x00000c2f
  58:	00000c2f 	.word	0x00000c2f
  5c:	00000c2f 	.word	0x00000c2f
  60:	00000c2f 	.word	0x00000c2f
  64:	00000c2f 	.word	0x00000c2f
  68:	00000c2f 	.word	0x00000c2f
  6c:	00000c2f 	.word	0x00000c2f
  70:	00000c2f 	.word	0x00000c2f
  74:	00000c2f 	.word	0x00000c2f
  78:	00000c2f 	.word	0x00000c2f
  7c:	00000c2f 	.word	0x00000c2f
  80:	00000c2f 	.word	0x00000c2f
  84:	00000c2f 	.word	0x00000c2f
  88:	00000c2f 	.word	0x00000c2f
  8c:	00000c2f 	.word	0x00000c2f
  90:	00000c2f 	.word	0x00000c2f
  94:	00000c2f 	.word	0x00000c2f
  98:	00000c2f 	.word	0x00000c2f
  9c:	00000c2f 	.word	0x00000c2f
  a0:	00000c2f 	.word	0x00000c2f
  a4:	00000c2f 	.word	0x00000c2f
  a8:	00000c2f 	.word	0x00000c2f
  ac:	00000c2f 	.word	0x00000c2f
  b0:	00000c2f 	.word	0x00000c2f
  b4:	00000c2f 	.word	0x00000c2f
  b8:	00000c2f 	.word	0x00000c2f
  bc:	00000c2f 	.word	0x00000c2f
  c0:	00000c2f 	.word	0x00000c2f
  c4:	00000c2f 	.word	0x00000c2f
  c8:	00000c2f 	.word	0x00000c2f
  cc:	00000c2f 	.word	0x00000c2f
  d0:	00000c2f 	.word	0x00000c2f
  d4:	00000c2f 	.word	0x00000c2f
  d8:	00000c2f 	.word	0x00000c2f
  dc:	00000c2f 	.word	0x00000c2f
  e0:	00000c2f 	.word	0x00000c2f
  e4:	00000c2f 	.word	0x00000c2f
  e8:	00000c2f 	.word	0x00000c2f
  ec:	00000c2f 	.word	0x00000c2f
  f0:	00000c2f 	.word	0x00000c2f
  f4:	00000c2f 	.word	0x00000c2f
  f8:	00000c2f 	.word	0x00000c2f
  fc:	00000c2f 	.word	0x00000c2f
 100:	00000c2f 	.word	0x00000c2f
 104:	00000c2f 	.word	0x00000c2f
 108:	00000c2f 	.word	0x00000c2f
 10c:	00000c2f 	.word	0x00000c2f
 110:	00000c2f 	.word	0x00000c2f
 114:	00000c2f 	.word	0x00000c2f
 118:	00000c2f 	.word	0x00000c2f
 11c:	00000c2f 	.word	0x00000c2f
 120:	00000c2f 	.word	0x00000c2f
 124:	00000c2f 	.word	0x00000c2f
 128:	00000c2f 	.word	0x00000c2f
 12c:	00000c2f 	.word	0x00000c2f
 130:	00000c2f 	.word	0x00000c2f
 134:	00000c2f 	.word	0x00000c2f
 138:	00000c2f 	.word	0x00000c2f
 13c:	00000c2f 	.word	0x00000c2f
 140:	00000c2f 	.word	0x00000c2f
 144:	00000c2f 	.word	0x00000c2f
 148:	00000c2f 	.word	0x00000c2f
 14c:	00000c2f 	.word	0x00000c2f
 150:	00000c2f 	.word	0x00000c2f
 154:	00000c2f 	.word	0x00000c2f
 158:	00000c2f 	.word	0x00000c2f
 15c:	00000c2f 	.word	0x00000c2f
 160:	00000c2f 	.word	0x00000c2f
 164:	00000c2f 	.word	0x00000c2f
 168:	00000c2f 	.word	0x00000c2f
 16c:	00000c2f 	.word	0x00000c2f
 170:	00000c2f 	.word	0x00000c2f
 174:	00000c2f 	.word	0x00000c2f
 178:	00000c2f 	.word	0x00000c2f
 17c:	00000c2f 	.word	0x00000c2f
 180:	00000c2f 	.word	0x00000c2f
 184:	00000c2f 	.word	0x00000c2f
 188:	00000c2f 	.word	0x00000c2f
 18c:	00000c2f 	.word	0x00000c2f
 190:	00000c2f 	.word	0x00000c2f
 194:	00000c2f 	.word	0x00000c2f
 198:	00000c2f 	.word	0x00000c2f
 19c:	00000c2f 	.word	0x00000c2f
 1a0:	00000c2f 	.word	0x00000c2f
 1a4:	00000c2f 	.word	0x00000c2f
 1a8:	00000c2f 	.word	0x00000c2f
 1ac:	00000c2f 	.word	0x00000c2f
 1b0:	00000c2f 	.word	0x00000c2f
 1b4:	00000c2f 	.word	0x00000c2f
 1b8:	00000c2f 	.word	0x00000c2f
 1bc:	00000c2f 	.word	0x00000c2f
 1c0:	00000c2f 	.word	0x00000c2f
 1c4:	00000c2f 	.word	0x00000c2f
 1c8:	00000c2f 	.word	0x00000c2f
 1cc:	00000c2f 	.word	0x00000c2f
 1d0:	00000c2f 	.word	0x00000c2f
 1d4:	00000c2f 	.word	0x00000c2f
 1d8:	00000c2f 	.word	0x00000c2f
 1dc:	00000c2f 	.word	0x00000c2f
 1e0:	00000c2f 	.word	0x00000c2f
 1e4:	00000c2f 	.word	0x00000c2f
 1e8:	00000c2f 	.word	0x00000c2f
 1ec:	00000c2f 	.word	0x00000c2f
 1f0:	00000c2f 	.word	0x00000c2f
 1f4:	00000c2f 	.word	0x00000c2f
 1f8:	00000c2f 	.word	0x00000c2f
 1fc:	00000c2f 	.word	0x00000c2f
 200:	00000c2f 	.word	0x00000c2f
 204:	00000c2f 	.word	0x00000c2f
 208:	00000c2f 	.word	0x00000c2f
 20c:	00000c2f 	.word	0x00000c2f
 210:	00000c2f 	.word	0x00000c2f
 214:	00000c2f 	.word	0x00000c2f
 218:	00000c2f 	.word	0x00000c2f
 21c:	00000c2f 	.word	0x00000c2f
 220:	00000c2f 	.word	0x00000c2f
 224:	00000c2f 	.word	0x00000c2f
 228:	00000c2f 	.word	0x00000c2f
 22c:	00000c2f 	.word	0x00000c2f
 230:	00000c2f 	.word	0x00000c2f
 234:	00000c2f 	.word	0x00000c2f
 238:	00000c2f 	.word	0x00000c2f
 23c:	00000c2f 	.word	0x00000c2f
 240:	00000c2f 	.word	0x00000c2f
 244:	00000c2f 	.word	0x00000c2f
 248:	00000c2f 	.word	0x00000c2f
 24c:	00000c2f 	.word	0x00000c2f
 250:	00000c2f 	.word	0x00000c2f
 254:	00000c2f 	.word	0x00000c2f
 258:	00000c2f 	.word	0x00000c2f
 25c:	00000c2f 	.word	0x00000c2f
 260:	00000c2f 	.word	0x00000c2f
 264:	00000c2f 	.word	0x00000c2f
 268:	00000c2f 	.word	0x00000c2f
 26c:	00000c2f 	.word	0x00000c2f
 270:	00000c2f 	.word	0x00000c2f
 274:	00000c2f 	.word	0x00000c2f
 278:	00000c2f 	.word	0x00000c2f
 27c:	00000c2f 	.word	0x00000c2f
 280:	00000c2f 	.word	0x00000c2f
 284:	00000c2f 	.word	0x00000c2f
 288:	00000c2f 	.word	0x00000c2f
 28c:	00000c2f 	.word	0x00000c2f
 290:	00000c2f 	.word	0x00000c2f
 294:	00000c2f 	.word	0x00000c2f
 298:	00000c2f 	.word	0x00000c2f
 29c:	00000c2f 	.word	0x00000c2f
 2a0:	00000c2f 	.word	0x00000c2f
 2a4:	00000c2f 	.word	0x00000c2f
 2a8:	00000c2f 	.word	0x00000c2f
 2ac:	00000c2f 	.word	0x00000c2f
 2b0:	00000c2f 	.word	0x00000c2f
 2b4:	00000c2f 	.word	0x00000c2f
 2b8:	00000c2f 	.word	0x00000c2f
 2bc:	00000c2f 	.word	0x00000c2f
 2c0:	00000c2f 	.word	0x00000c2f
 2c4:	00000c2f 	.word	0x00000c2f
 2c8:	00000c2f 	.word	0x00000c2f
 2cc:	00000c2f 	.word	0x00000c2f
 2d0:	00000c2f 	.word	0x00000c2f
 2d4:	00000c2f 	.word	0x00000c2f
 2d8:	00000c2f 	.word	0x00000c2f
 2dc:	00000c2f 	.word	0x00000c2f
 2e0:	00000c2f 	.word	0x00000c2f
 2e4:	00000c2f 	.word	0x00000c2f
 2e8:	00000c2f 	.word	0x00000c2f
 2ec:	00000c2f 	.word	0x00000c2f
 2f0:	00000c2f 	.word	0x00000c2f
 2f4:	00000c2f 	.word	0x00000c2f
 2f8:	00000c2f 	.word	0x00000c2f
 2fc:	00000c2f 	.word	0x00000c2f
 300:	00000c2f 	.word	0x00000c2f
 304:	00000c2f 	.word	0x00000c2f
 308:	00000c2f 	.word	0x00000c2f
 30c:	00000c2f 	.word	0x00000c2f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb03 	bl	a8c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbc2 	bl	c14 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9704 	.word	0x1fff9704

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb0d 	bl	bb8 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
    Adc_CalibrationStatusType CalibStatus;
    Adc_ValueGroupType    AdcReadGroupBuffer[2];
    Adc_ValueGroupType    ResultBuffer[2];

    uint16_t adcvalue1_Pot1 = 0;
     8b4:	2300      	movs	r3, #0
     8b6:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t adcvalue1_Pot2 = 0;
     8ba:	2300      	movs	r3, #0
     8bc:	f8ad 3014 	strh.w	r3, [sp, #20]

    uint8_t step;
    uint16_t dutyCycle;

    EcuM_Init();
     8c0:	f000 f876 	bl	9b0 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     8c4:	f000 fb46 	bl	f54 <SEGGER_RTT_Init>

    /* By default ADC0-CH8 is not connected to B13, but with this function
    it will, this is called Interleave, read RM page 1194*/
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
     8c8:	2208      	movs	r2, #8
     8ca:	210d      	movs	r1, #13
     8cc:	4834      	ldr	r0, [pc, #208]	; (9a0 <main+0xf0>)
     8ce:	f005 fcc5 	bl	625c <Port_Ci_Port_Ip_SetMuxModeSel>

    /* Calibrate ADC module */
    Adc_Calibrate( AdcHwUnit_0, &CalibStatus );
     8d2:	ab03      	add	r3, sp, #12
     8d4:	4619      	mov	r1, r3
     8d6:	2000      	movs	r0, #0
     8d8:	f007 f9ce 	bl	7c78 <Adc_Calibrate>
    /* Set the memory buffer to store conversions */
    Adc_SetupResultBuffer(AdcGroup_0, ResultBuffer);
     8dc:	ab01      	add	r3, sp, #4
     8de:	4619      	mov	r1, r3
     8e0:	2000      	movs	r0, #0
     8e2:	f006 ff6b 	bl	77bc <Adc_SetupResultBuffer>

    //Not caring of using this RGB LEDs now, so OFF
    Pwm_SetPeriodAndDuty( PwmChannel_1, 37500, 0x8000 );
     8e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     8ea:	f249 217c 	movw	r1, #37500	; 0x927c
     8ee:	2001      	movs	r0, #1
     8f0:	f00d f9a0 	bl	dc34 <Pwm_SetPeriodAndDuty>
    Pwm_SetPeriodAndDuty( PwmChannel_2, 37500, 0x8000 );
     8f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     8f8:	f249 217c 	movw	r1, #37500	; 0x927c
     8fc:	2002      	movs	r0, #2
     8fe:	f00d f999 	bl	dc34 <Pwm_SetPeriodAndDuty>

    while( 1u )
    {
        /* Software trigger conversion */
        Adc_StartGroupConversion( AdcGroup_0 );
     902:	2000      	movs	r0, #0
     904:	f006 fff4 	bl	78f0 <Adc_StartGroupConversion>
        /* Wait until the conversion is done */
        while( Adc_GetGroupStatus( AdcGroup_0 ) == ADC_BUSY );
     908:	bf00      	nop
     90a:	2000      	movs	r0, #0
     90c:	f007 f8cd 	bl	7aaa <Adc_GetGroupStatus>
     910:	4603      	mov	r3, r0
     912:	2b01      	cmp	r3, #1
     914:	d0f9      	beq.n	90a <main+0x5a>

        /* Read ready conversion */
        Adc_ReadGroup( AdcGroup_0, AdcReadGroupBuffer );
     916:	ab02      	add	r3, sp, #8
     918:	4619      	mov	r1, r3
     91a:	2000      	movs	r0, #0
     91c:	f007 f880 	bl	7a20 <Adc_ReadGroup>

        adcvalue1_Pot1 = AdcReadGroupBuffer[AdcChannel_0];
     920:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     924:	f8ad 3016 	strh.w	r3, [sp, #22]
        adcvalue1_Pot2 = AdcReadGroupBuffer[AdcChannel_1];
     928:	f8bd 300a 	ldrh.w	r3, [sp, #10]
     92c:	f8ad 3014 	strh.w	r3, [sp, #20]
        - NUM_STEPS: The number of discrete duty cycle steps (9).
        - step: The current step index, calculated in the previous line.
        */

        // Using method 2 with Pot1
        step = (adcvalue1_Pot1 * 9) / 2703;
     930:	f8bd 2016 	ldrh.w	r2, [sp, #22]
     934:	4613      	mov	r3, r2
     936:	00db      	lsls	r3, r3, #3
     938:	4413      	add	r3, r2
     93a:	4a1a      	ldr	r2, [pc, #104]	; (9a4 <main+0xf4>)
     93c:	fb82 1203 	smull	r1, r2, r2, r3
     940:	1292      	asrs	r2, r2, #10
     942:	17db      	asrs	r3, r3, #31
     944:	1ad3      	subs	r3, r2, r3
     946:	f88d 3013 	strb.w	r3, [sp, #19]
        dutyCycle = 3277 + step * (29491 - 3277) / 9;
     94a:	f89d 3013 	ldrb.w	r3, [sp, #19]
     94e:	f246 6266 	movw	r2, #26214	; 0x6666
     952:	fb02 f303 	mul.w	r3, r2, r3
     956:	4a14      	ldr	r2, [pc, #80]	; (9a8 <main+0xf8>)
     958:	fb82 1203 	smull	r1, r2, r2, r3
     95c:	1052      	asrs	r2, r2, #1
     95e:	17db      	asrs	r3, r3, #31
     960:	1ad3      	subs	r3, r2, r3
     962:	b29b      	uxth	r3, r3
     964:	f603 43cd 	addw	r3, r3, #3277	; 0xccd
     968:	f8ad 3010 	strh.w	r3, [sp, #16]

        Pwm_SetPeriodAndDuty( PwmChannel_0, 37500, dutyCycle );
     96c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     970:	461a      	mov	r2, r3
     972:	f249 217c 	movw	r1, #37500	; 0x927c
     976:	2000      	movs	r0, #0
     978:	f00d f95c 	bl	dc34 <Pwm_SetPeriodAndDuty>

        SEGGER_RTT_printf( 0, "Step percentaje: %d, RGB Raw Duty Cycle: %d\n", 
     97c:	f89d 2013 	ldrb.w	r2, [sp, #19]
     980:	4613      	mov	r3, r2
     982:	009b      	lsls	r3, r3, #2
     984:	4413      	add	r3, r2
     986:	005b      	lsls	r3, r3, #1
     988:	461a      	mov	r2, r3
     98a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     98e:	4907      	ldr	r1, [pc, #28]	; (9ac <main+0xfc>)
     990:	2000      	movs	r0, #0
     992:	f000 fe47 	bl	1624 <SEGGER_RTT_printf>
        step*10, dutyCycle );  

        Delay( 500u );
     996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     99a:	f000 f82d 	bl	9f8 <Delay>
        Adc_StartGroupConversion( AdcGroup_0 );
     99e:	e7b0      	b.n	902 <main+0x52>
     9a0:	4004a000 	.word	0x4004a000
     9a4:	60fb8c75 	.word	0x60fb8c75
     9a8:	38e38e39 	.word	0x38e38e39
     9ac:	000149c4 	.word	0x000149c4

000009b0 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     9b0:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     9b2:	480d      	ldr	r0, [pc, #52]	; (9e8 <EcuM_Init+0x38>)
     9b4:	f004 fe7c 	bl	56b0 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     9b8:	2000      	movs	r0, #0
     9ba:	f004 fecd 	bl	5758 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     9be:	2000      	movs	r0, #0
     9c0:	f004 feee 	bl	57a0 <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     9c4:	2000      	movs	r0, #0
     9c6:	f001 f8de 	bl	1b86 <OsIf_Init>
    /*Enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     9ca:	2000      	movs	r0, #0
     9cc:	f000 ffd8 	bl	1980 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin ADC0-SE5 (B1) and ADC0-SE8 (B13) */
    Port_Init( &Port_Config );
     9d0:	4806      	ldr	r0, [pc, #24]	; (9ec <EcuM_Init+0x3c>)
     9d2:	f005 fa6f 	bl	5eb4 <Port_Init>

    /* Init the ADC with the paramters set in Tresos*/
    Adc_Init( &Adc_Config );
     9d6:	4806      	ldr	r0, [pc, #24]	; (9f0 <EcuM_Init+0x40>)
     9d8:	f006 fea2 	bl	7720 <Adc_Init>

    Pwm_Init( &Pwm_Config );
     9dc:	4805      	ldr	r0, [pc, #20]	; (9f4 <EcuM_Init+0x44>)
     9de:	f00c ffd7 	bl	d990 <Pwm_Init>
}
     9e2:	bf00      	nop
     9e4:	bd08      	pop	{r3, pc}
     9e6:	bf00      	nop
     9e8:	000157d4 	.word	0x000157d4
     9ec:	00015a1c 	.word	0x00015a1c
     9f0:	000152a4 	.word	0x000152a4
     9f4:	00015abc 	.word	0x00015abc

000009f8 <Delay>:

/* This is dummy delay function prepared just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     9f8:	b500      	push	{lr}
     9fa:	b087      	sub	sp, #28
     9fc:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     9fe:	9b01      	ldr	r3, [sp, #4]
     a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a04:	fb02 f303 	mul.w	r3, r2, r3
     a08:	2101      	movs	r1, #1
     a0a:	4618      	mov	r0, r3
     a0c:	f001 f910 	bl	1c30 <OsIf_MicrosToTicks>
     a10:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     a12:	2001      	movs	r0, #1
     a14:	f001 f8c0 	bl	1b98 <OsIf_GetCounter>
     a18:	4603      	mov	r3, r0
     a1a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     a1c:	2300      	movs	r3, #0
     a1e:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     a20:	ab03      	add	r3, sp, #12
     a22:	2101      	movs	r1, #1
     a24:	4618      	mov	r0, r3
     a26:	f001 f8d0 	bl	1bca <OsIf_GetElapsed>
     a2a:	4602      	mov	r2, r0
     a2c:	9b05      	ldr	r3, [sp, #20]
     a2e:	4413      	add	r3, r2
     a30:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     a32:	9a05      	ldr	r2, [sp, #20]
     a34:	9b04      	ldr	r3, [sp, #16]
     a36:	429a      	cmp	r2, r3
     a38:	d3f2      	bcc.n	a20 <Delay+0x28>
}
     a3a:	bf00      	nop
     a3c:	bf00      	nop
     a3e:	b007      	add	sp, #28
     a40:	f85d fb04 	ldr.w	pc, [sp], #4

00000a44 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     a44:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a46:	f3ef 8310 	mrs	r3, PRIMASK
     a4a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a4c:	4623      	mov	r3, r4
}
     a4e:	4618      	mov	r0, r3
     a50:	f85d 4b04 	ldr.w	r4, [sp], #4
     a54:	4770      	bx	lr

00000a56 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a56:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a58:	f3ef 8310 	mrs	r3, PRIMASK
     a5c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a5e:	4623      	mov	r3, r4
}
     a60:	4618      	mov	r0, r3
     a62:	f85d 4b04 	ldr.w	r4, [sp], #4
     a66:	4770      	bx	lr

00000a68 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a68:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a6a:	f3ef 8310 	mrs	r3, PRIMASK
     a6e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a70:	4623      	mov	r3, r4
}
     a72:	4618      	mov	r0, r3
     a74:	f85d 4b04 	ldr.w	r4, [sp], #4
     a78:	4770      	bx	lr

00000a7a <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     a7a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a7c:	f3ef 8310 	mrs	r3, PRIMASK
     a80:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a82:	4623      	mov	r3, r4
}
     a84:	4618      	mov	r0, r3
     a86:	f85d 4b04 	ldr.w	r4, [sp], #4
     a8a:	4770      	bx	lr

00000a8c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a8c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a8e:	2300      	movs	r3, #0
     a90:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a92:	2300      	movs	r3, #0
     a94:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a96:	2300      	movs	r3, #0
     a98:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a9a:	2300      	movs	r3, #0
     a9c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a9e:	4b44      	ldr	r3, [pc, #272]	; (bb0 <init_data_bss+0x124>)
     aa0:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     aa2:	4b44      	ldr	r3, [pc, #272]	; (bb4 <init_data_bss+0x128>)
     aa4:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     aa6:	9b05      	ldr	r3, [sp, #20]
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     aac:	9b05      	ldr	r3, [sp, #20]
     aae:	3304      	adds	r3, #4
     ab0:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     ab2:	9b05      	ldr	r3, [sp, #20]
     ab4:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     ab6:	2300      	movs	r3, #0
     ab8:	9309      	str	r3, [sp, #36]	; 0x24
     aba:	e03d      	b.n	b38 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     abe:	4613      	mov	r3, r2
     ac0:	005b      	lsls	r3, r3, #1
     ac2:	4413      	add	r3, r2
     ac4:	009b      	lsls	r3, r3, #2
     ac6:	461a      	mov	r2, r3
     ac8:	9b03      	ldr	r3, [sp, #12]
     aca:	4413      	add	r3, r2
     acc:	685b      	ldr	r3, [r3, #4]
     ace:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ad2:	4613      	mov	r3, r2
     ad4:	005b      	lsls	r3, r3, #1
     ad6:	4413      	add	r3, r2
     ad8:	009b      	lsls	r3, r3, #2
     ada:	461a      	mov	r2, r3
     adc:	9b03      	ldr	r3, [sp, #12]
     ade:	4413      	add	r3, r2
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae6:	4613      	mov	r3, r2
     ae8:	005b      	lsls	r3, r3, #1
     aea:	4413      	add	r3, r2
     aec:	009b      	lsls	r3, r3, #2
     aee:	461a      	mov	r2, r3
     af0:	9b03      	ldr	r3, [sp, #12]
     af2:	4413      	add	r3, r2
     af4:	689b      	ldr	r3, [r3, #8]
     af6:	4619      	mov	r1, r3
     af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     afa:	4613      	mov	r3, r2
     afc:	005b      	lsls	r3, r3, #1
     afe:	4413      	add	r3, r2
     b00:	009b      	lsls	r3, r3, #2
     b02:	461a      	mov	r2, r3
     b04:	9b03      	ldr	r3, [sp, #12]
     b06:	4413      	add	r3, r2
     b08:	685b      	ldr	r3, [r3, #4]
     b0a:	1acb      	subs	r3, r1, r3
     b0c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b0e:	2300      	movs	r3, #0
     b10:	9308      	str	r3, [sp, #32]
     b12:	e00a      	b.n	b2a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b14:	9a00      	ldr	r2, [sp, #0]
     b16:	9b08      	ldr	r3, [sp, #32]
     b18:	441a      	add	r2, r3
     b1a:	9901      	ldr	r1, [sp, #4]
     b1c:	9b08      	ldr	r3, [sp, #32]
     b1e:	440b      	add	r3, r1
     b20:	7812      	ldrb	r2, [r2, #0]
     b22:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b24:	9b08      	ldr	r3, [sp, #32]
     b26:	3301      	adds	r3, #1
     b28:	9308      	str	r3, [sp, #32]
     b2a:	9a08      	ldr	r2, [sp, #32]
     b2c:	9b06      	ldr	r3, [sp, #24]
     b2e:	429a      	cmp	r2, r3
     b30:	d3f0      	bcc.n	b14 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b34:	3301      	adds	r3, #1
     b36:	9309      	str	r3, [sp, #36]	; 0x24
     b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b3a:	9b07      	ldr	r3, [sp, #28]
     b3c:	429a      	cmp	r2, r3
     b3e:	d3bd      	bcc.n	abc <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b40:	9b04      	ldr	r3, [sp, #16]
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b46:	9b04      	ldr	r3, [sp, #16]
     b48:	3304      	adds	r3, #4
     b4a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b4c:	9b04      	ldr	r3, [sp, #16]
     b4e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b50:	2300      	movs	r3, #0
     b52:	9309      	str	r3, [sp, #36]	; 0x24
     b54:	e024      	b.n	ba0 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b58:	00db      	lsls	r3, r3, #3
     b5a:	9a02      	ldr	r2, [sp, #8]
     b5c:	4413      	add	r3, r2
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b64:	00db      	lsls	r3, r3, #3
     b66:	9a02      	ldr	r2, [sp, #8]
     b68:	4413      	add	r3, r2
     b6a:	685b      	ldr	r3, [r3, #4]
     b6c:	4619      	mov	r1, r3
     b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b70:	00db      	lsls	r3, r3, #3
     b72:	9a02      	ldr	r2, [sp, #8]
     b74:	4413      	add	r3, r2
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	1acb      	subs	r3, r1, r3
     b7a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b7c:	2300      	movs	r3, #0
     b7e:	9308      	str	r3, [sp, #32]
     b80:	e007      	b.n	b92 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b82:	9a01      	ldr	r2, [sp, #4]
     b84:	9b08      	ldr	r3, [sp, #32]
     b86:	4413      	add	r3, r2
     b88:	2200      	movs	r2, #0
     b8a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b8c:	9b08      	ldr	r3, [sp, #32]
     b8e:	3301      	adds	r3, #1
     b90:	9308      	str	r3, [sp, #32]
     b92:	9a08      	ldr	r2, [sp, #32]
     b94:	9b06      	ldr	r3, [sp, #24]
     b96:	429a      	cmp	r2, r3
     b98:	d3f3      	bcc.n	b82 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b9c:	3301      	adds	r3, #1
     b9e:	9309      	str	r3, [sp, #36]	; 0x24
     ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ba2:	9b07      	ldr	r3, [sp, #28]
     ba4:	429a      	cmp	r2, r3
     ba6:	d3d6      	bcc.n	b56 <init_data_bss+0xca>
        }
    }
}
     ba8:	bf00      	nop
     baa:	bf00      	nop
     bac:	b00a      	add	sp, #40	; 0x28
     bae:	4770      	bx	lr
     bb0:	00015af0 	.word	0x00015af0
     bb4:	00015b0c 	.word	0x00015b0c

00000bb8 <sys_m4_cache_init>:
{
     bb8:	b084      	sub	sp, #16
     bba:	4603      	mov	r3, r0
     bbc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bc0:	2300      	movs	r3, #0
     bc2:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bca:	2b00      	cmp	r3, #0
     bcc:	d118      	bne.n	c00 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     bce:	4b10      	ldr	r3, [pc, #64]	; (c10 <sys_m4_cache_init+0x58>)
     bd0:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bd4:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bd6:	4b0e      	ldr	r3, [pc, #56]	; (c10 <sys_m4_cache_init+0x58>)
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	4a0d      	ldr	r2, [pc, #52]	; (c10 <sys_m4_cache_init+0x58>)
     bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     be0:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     be2:	bf00      	nop
     be4:	4b0a      	ldr	r3, [pc, #40]	; (c10 <sys_m4_cache_init+0x58>)
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bf0:	d0f8      	beq.n	be4 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bf2:	4b07      	ldr	r3, [pc, #28]	; (c10 <sys_m4_cache_init+0x58>)
     bf4:	681b      	ldr	r3, [r3, #0]
     bf6:	4a06      	ldr	r2, [pc, #24]	; (c10 <sys_m4_cache_init+0x58>)
     bf8:	f043 0301 	orr.w	r3, r3, #1
     bfc:	6013      	str	r3, [r2, #0]
     bfe:	e002      	b.n	c06 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     c00:	2301      	movs	r3, #1
     c02:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c06:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c0a:	4618      	mov	r0, r3
     c0c:	b004      	add	sp, #16
     c0e:	4770      	bx	lr
     c10:	e0082000 	.word	0xe0082000

00000c14 <startup_go_to_user_mode>:
}
     c14:	bf00      	nop
     c16:	4770      	bx	lr

00000c18 <Sys_GetCoreID>:
    return 0U;
     c18:	2300      	movs	r3, #0
}
     c1a:	4618      	mov	r0, r3
     c1c:	4770      	bx	lr

00000c1e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c1e:	e7fe      	b.n	c1e <HardFault_Handler>

00000c20 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c20:	e7fe      	b.n	c20 <MemManage_Handler>

00000c22 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c22:	e7fe      	b.n	c22 <BusFault_Handler>

00000c24 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c24:	e7fe      	b.n	c24 <UsageFault_Handler>

00000c26 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c26:	e7fe      	b.n	c26 <SVC_Handler>

00000c28 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c28:	e7fe      	b.n	c28 <DebugMon_Handler>

00000c2a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c2a:	e7fe      	b.n	c2a <PendSV_Handler>

00000c2c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c2c:	e7fe      	b.n	c2c <SysTick_Handler>

00000c2e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c2e:	e7fe      	b.n	c2e <undefined_handler>

00000c30 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c30:	b500      	push	{lr}
     c32:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c34:	4b26      	ldr	r3, [pc, #152]	; (cd0 <_DoInit+0xa0>)
     c36:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c38:	22a8      	movs	r2, #168	; 0xa8
     c3a:	2100      	movs	r1, #0
     c3c:	9800      	ldr	r0, [sp, #0]
     c3e:	f000 fd13 	bl	1668 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c42:	9b00      	ldr	r3, [sp, #0]
     c44:	2203      	movs	r2, #3
     c46:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c48:	9b00      	ldr	r3, [sp, #0]
     c4a:	2203      	movs	r2, #3
     c4c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	4a20      	ldr	r2, [pc, #128]	; (cd4 <_DoInit+0xa4>)
     c52:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c54:	9b00      	ldr	r3, [sp, #0]
     c56:	4a20      	ldr	r2, [pc, #128]	; (cd8 <_DoInit+0xa8>)
     c58:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c5a:	9b00      	ldr	r3, [sp, #0]
     c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c60:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c62:	9b00      	ldr	r3, [sp, #0]
     c64:	2200      	movs	r2, #0
     c66:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c68:	9b00      	ldr	r3, [sp, #0]
     c6a:	2200      	movs	r2, #0
     c6c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c6e:	9b00      	ldr	r3, [sp, #0]
     c70:	2200      	movs	r2, #0
     c72:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c74:	9b00      	ldr	r3, [sp, #0]
     c76:	4a17      	ldr	r2, [pc, #92]	; (cd4 <_DoInit+0xa4>)
     c78:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c7a:	9b00      	ldr	r3, [sp, #0]
     c7c:	4a17      	ldr	r2, [pc, #92]	; (cdc <_DoInit+0xac>)
     c7e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c80:	9b00      	ldr	r3, [sp, #0]
     c82:	2210      	movs	r2, #16
     c84:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c86:	9b00      	ldr	r3, [sp, #0]
     c88:	2200      	movs	r2, #0
     c8a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c8c:	9b00      	ldr	r3, [sp, #0]
     c8e:	2200      	movs	r2, #0
     c90:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c92:	9b00      	ldr	r3, [sp, #0]
     c94:	2200      	movs	r2, #0
     c96:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c98:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c9c:	2300      	movs	r3, #0
     c9e:	9301      	str	r3, [sp, #4]
     ca0:	e00c      	b.n	cbc <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	f1c3 030f 	rsb	r3, r3, #15
     ca8:	4a0d      	ldr	r2, [pc, #52]	; (ce0 <_DoInit+0xb0>)
     caa:	5cd1      	ldrb	r1, [r2, r3]
     cac:	9a00      	ldr	r2, [sp, #0]
     cae:	9b01      	ldr	r3, [sp, #4]
     cb0:	4413      	add	r3, r2
     cb2:	460a      	mov	r2, r1
     cb4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     cb6:	9b01      	ldr	r3, [sp, #4]
     cb8:	3301      	adds	r3, #1
     cba:	9301      	str	r3, [sp, #4]
     cbc:	9b01      	ldr	r3, [sp, #4]
     cbe:	2b0f      	cmp	r3, #15
     cc0:	d9ef      	bls.n	ca2 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cc2:	f3bf 8f5f 	dmb	sy
}
     cc6:	bf00      	nop
     cc8:	b003      	add	sp, #12
     cca:	f85d fb04 	ldr.w	pc, [sp], #4
     cce:	bf00      	nop
     cd0:	1fff9708 	.word	0x1fff9708
     cd4:	000149f4 	.word	0x000149f4
     cd8:	1fff97b0 	.word	0x1fff97b0
     cdc:	1fff9bb0 	.word	0x1fff9bb0
     ce0:	00015acc 	.word	0x00015acc

00000ce4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     ce4:	b500      	push	{lr}
     ce6:	b08b      	sub	sp, #44	; 0x2c
     ce8:	9003      	str	r0, [sp, #12]
     cea:	9102      	str	r1, [sp, #8]
     cec:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     cee:	2300      	movs	r3, #0
     cf0:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     cf2:	9b03      	ldr	r3, [sp, #12]
     cf4:	68db      	ldr	r3, [r3, #12]
     cf6:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     cf8:	9b03      	ldr	r3, [sp, #12]
     cfa:	691b      	ldr	r3, [r3, #16]
     cfc:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cfe:	9a06      	ldr	r2, [sp, #24]
     d00:	9b07      	ldr	r3, [sp, #28]
     d02:	429a      	cmp	r2, r3
     d04:	d905      	bls.n	d12 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     d06:	9a06      	ldr	r2, [sp, #24]
     d08:	9b07      	ldr	r3, [sp, #28]
     d0a:	1ad3      	subs	r3, r2, r3
     d0c:	3b01      	subs	r3, #1
     d0e:	9309      	str	r3, [sp, #36]	; 0x24
     d10:	e007      	b.n	d22 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d12:	9b03      	ldr	r3, [sp, #12]
     d14:	689a      	ldr	r2, [r3, #8]
     d16:	9906      	ldr	r1, [sp, #24]
     d18:	9b07      	ldr	r3, [sp, #28]
     d1a:	1acb      	subs	r3, r1, r3
     d1c:	4413      	add	r3, r2
     d1e:	3b01      	subs	r3, #1
     d20:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d22:	9b03      	ldr	r3, [sp, #12]
     d24:	689a      	ldr	r2, [r3, #8]
     d26:	9b07      	ldr	r3, [sp, #28]
     d28:	1ad3      	subs	r3, r2, r3
     d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d2c:	4293      	cmp	r3, r2
     d2e:	bf28      	it	cs
     d30:	4613      	movcs	r3, r2
     d32:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d36:	9b01      	ldr	r3, [sp, #4]
     d38:	4293      	cmp	r3, r2
     d3a:	bf28      	it	cs
     d3c:	4613      	movcs	r3, r2
     d3e:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d40:	9b03      	ldr	r3, [sp, #12]
     d42:	685a      	ldr	r2, [r3, #4]
     d44:	9b07      	ldr	r3, [sp, #28]
     d46:	4413      	add	r3, r2
     d48:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d4c:	9902      	ldr	r1, [sp, #8]
     d4e:	9805      	ldr	r0, [sp, #20]
     d50:	f000 fc7c 	bl	164c <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d54:	9a08      	ldr	r2, [sp, #32]
     d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d58:	4413      	add	r3, r2
     d5a:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d5c:	9a02      	ldr	r2, [sp, #8]
     d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d60:	4413      	add	r3, r2
     d62:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d64:	9a01      	ldr	r2, [sp, #4]
     d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d68:	1ad3      	subs	r3, r2, r3
     d6a:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d6c:	9a07      	ldr	r2, [sp, #28]
     d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d70:	4413      	add	r3, r2
     d72:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d74:	9b03      	ldr	r3, [sp, #12]
     d76:	689b      	ldr	r3, [r3, #8]
     d78:	9a07      	ldr	r2, [sp, #28]
     d7a:	429a      	cmp	r2, r3
     d7c:	d101      	bne.n	d82 <_WriteBlocking+0x9e>
      WrOff = 0u;
     d7e:	2300      	movs	r3, #0
     d80:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d82:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d86:	9b03      	ldr	r3, [sp, #12]
     d88:	9a07      	ldr	r2, [sp, #28]
     d8a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d8c:	9b01      	ldr	r3, [sp, #4]
     d8e:	2b00      	cmp	r3, #0
     d90:	d1b2      	bne.n	cf8 <_WriteBlocking+0x14>
  return NumBytesWritten;
     d92:	9b08      	ldr	r3, [sp, #32]
}
     d94:	4618      	mov	r0, r3
     d96:	b00b      	add	sp, #44	; 0x2c
     d98:	f85d fb04 	ldr.w	pc, [sp], #4

00000d9c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d9c:	b500      	push	{lr}
     d9e:	b089      	sub	sp, #36	; 0x24
     da0:	9003      	str	r0, [sp, #12]
     da2:	9102      	str	r1, [sp, #8]
     da4:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     da6:	9b03      	ldr	r3, [sp, #12]
     da8:	68db      	ldr	r3, [r3, #12]
     daa:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     dac:	9b03      	ldr	r3, [sp, #12]
     dae:	689a      	ldr	r2, [r3, #8]
     db0:	9b07      	ldr	r3, [sp, #28]
     db2:	1ad3      	subs	r3, r2, r3
     db4:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     db6:	9a06      	ldr	r2, [sp, #24]
     db8:	9b01      	ldr	r3, [sp, #4]
     dba:	429a      	cmp	r2, r3
     dbc:	d911      	bls.n	de2 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dbe:	9b03      	ldr	r3, [sp, #12]
     dc0:	685a      	ldr	r2, [r3, #4]
     dc2:	9b07      	ldr	r3, [sp, #28]
     dc4:	4413      	add	r3, r2
     dc6:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     dc8:	9a01      	ldr	r2, [sp, #4]
     dca:	9902      	ldr	r1, [sp, #8]
     dcc:	9804      	ldr	r0, [sp, #16]
     dce:	f000 fc3d 	bl	164c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dd2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     dd6:	9a07      	ldr	r2, [sp, #28]
     dd8:	9b01      	ldr	r3, [sp, #4]
     dda:	441a      	add	r2, r3
     ddc:	9b03      	ldr	r3, [sp, #12]
     dde:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     de0:	e01f      	b.n	e22 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     de2:	9b06      	ldr	r3, [sp, #24]
     de4:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     de6:	9b03      	ldr	r3, [sp, #12]
     de8:	685a      	ldr	r2, [r3, #4]
     dea:	9b07      	ldr	r3, [sp, #28]
     dec:	4413      	add	r3, r2
     dee:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     df0:	9a05      	ldr	r2, [sp, #20]
     df2:	9902      	ldr	r1, [sp, #8]
     df4:	9804      	ldr	r0, [sp, #16]
     df6:	f000 fc29 	bl	164c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     dfa:	9a01      	ldr	r2, [sp, #4]
     dfc:	9b06      	ldr	r3, [sp, #24]
     dfe:	1ad3      	subs	r3, r2, r3
     e00:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     e02:	9b03      	ldr	r3, [sp, #12]
     e04:	685b      	ldr	r3, [r3, #4]
     e06:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     e08:	9a02      	ldr	r2, [sp, #8]
     e0a:	9b06      	ldr	r3, [sp, #24]
     e0c:	4413      	add	r3, r2
     e0e:	9a05      	ldr	r2, [sp, #20]
     e10:	4619      	mov	r1, r3
     e12:	9804      	ldr	r0, [sp, #16]
     e14:	f000 fc1a 	bl	164c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e18:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e1c:	9b03      	ldr	r3, [sp, #12]
     e1e:	9a05      	ldr	r2, [sp, #20]
     e20:	60da      	str	r2, [r3, #12]
}
     e22:	bf00      	nop
     e24:	b009      	add	sp, #36	; 0x24
     e26:	f85d fb04 	ldr.w	pc, [sp], #4

00000e2a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e2a:	b086      	sub	sp, #24
     e2c:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e2e:	9b01      	ldr	r3, [sp, #4]
     e30:	691b      	ldr	r3, [r3, #16]
     e32:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e34:	9b01      	ldr	r3, [sp, #4]
     e36:	68db      	ldr	r3, [r3, #12]
     e38:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e3a:	9a04      	ldr	r2, [sp, #16]
     e3c:	9b03      	ldr	r3, [sp, #12]
     e3e:	429a      	cmp	r2, r3
     e40:	d808      	bhi.n	e54 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e42:	9b01      	ldr	r3, [sp, #4]
     e44:	689a      	ldr	r2, [r3, #8]
     e46:	9b03      	ldr	r3, [sp, #12]
     e48:	1ad2      	subs	r2, r2, r3
     e4a:	9b04      	ldr	r3, [sp, #16]
     e4c:	4413      	add	r3, r2
     e4e:	3b01      	subs	r3, #1
     e50:	9305      	str	r3, [sp, #20]
     e52:	e004      	b.n	e5e <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e54:	9a04      	ldr	r2, [sp, #16]
     e56:	9b03      	ldr	r3, [sp, #12]
     e58:	1ad3      	subs	r3, r2, r3
     e5a:	3b01      	subs	r3, #1
     e5c:	9305      	str	r3, [sp, #20]
  }
  return r;
     e5e:	9b05      	ldr	r3, [sp, #20]
}
     e60:	4618      	mov	r0, r3
     e62:	b006      	add	sp, #24
     e64:	4770      	bx	lr
	...

00000e68 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e68:	b500      	push	{lr}
     e6a:	b089      	sub	sp, #36	; 0x24
     e6c:	9003      	str	r0, [sp, #12]
     e6e:	9102      	str	r1, [sp, #8]
     e70:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e72:	9b02      	ldr	r3, [sp, #8]
     e74:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e76:	9b03      	ldr	r3, [sp, #12]
     e78:	1c5a      	adds	r2, r3, #1
     e7a:	4613      	mov	r3, r2
     e7c:	005b      	lsls	r3, r3, #1
     e7e:	4413      	add	r3, r2
     e80:	00db      	lsls	r3, r3, #3
     e82:	4a20      	ldr	r2, [pc, #128]	; (f04 <SEGGER_RTT_WriteNoLock+0x9c>)
     e84:	4413      	add	r3, r2
     e86:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e88:	9b05      	ldr	r3, [sp, #20]
     e8a:	695b      	ldr	r3, [r3, #20]
     e8c:	2b02      	cmp	r3, #2
     e8e:	d029      	beq.n	ee4 <SEGGER_RTT_WriteNoLock+0x7c>
     e90:	2b02      	cmp	r3, #2
     e92:	d82e      	bhi.n	ef2 <SEGGER_RTT_WriteNoLock+0x8a>
     e94:	2b00      	cmp	r3, #0
     e96:	d002      	beq.n	e9e <SEGGER_RTT_WriteNoLock+0x36>
     e98:	2b01      	cmp	r3, #1
     e9a:	d013      	beq.n	ec4 <SEGGER_RTT_WriteNoLock+0x5c>
     e9c:	e029      	b.n	ef2 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e9e:	9805      	ldr	r0, [sp, #20]
     ea0:	f7ff ffc3 	bl	e2a <_GetAvailWriteSpace>
     ea4:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     ea6:	9a04      	ldr	r2, [sp, #16]
     ea8:	9b01      	ldr	r3, [sp, #4]
     eaa:	429a      	cmp	r2, r3
     eac:	d202      	bcs.n	eb4 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     eae:	2300      	movs	r3, #0
     eb0:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     eb2:	e021      	b.n	ef8 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     eb4:	9b01      	ldr	r3, [sp, #4]
     eb6:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     eb8:	9a01      	ldr	r2, [sp, #4]
     eba:	9906      	ldr	r1, [sp, #24]
     ebc:	9805      	ldr	r0, [sp, #20]
     ebe:	f7ff ff6d 	bl	d9c <_WriteNoCheck>
    break;
     ec2:	e019      	b.n	ef8 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     ec4:	9805      	ldr	r0, [sp, #20]
     ec6:	f7ff ffb0 	bl	e2a <_GetAvailWriteSpace>
     eca:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     ecc:	9a01      	ldr	r2, [sp, #4]
     ece:	9b04      	ldr	r3, [sp, #16]
     ed0:	4293      	cmp	r3, r2
     ed2:	bf28      	it	cs
     ed4:	4613      	movcs	r3, r2
     ed6:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     ed8:	9a07      	ldr	r2, [sp, #28]
     eda:	9906      	ldr	r1, [sp, #24]
     edc:	9805      	ldr	r0, [sp, #20]
     ede:	f7ff ff5d 	bl	d9c <_WriteNoCheck>
    break;
     ee2:	e009      	b.n	ef8 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     ee4:	9a01      	ldr	r2, [sp, #4]
     ee6:	9906      	ldr	r1, [sp, #24]
     ee8:	9805      	ldr	r0, [sp, #20]
     eea:	f7ff fefb 	bl	ce4 <_WriteBlocking>
     eee:	9007      	str	r0, [sp, #28]
    break;
     ef0:	e002      	b.n	ef8 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     ef2:	2300      	movs	r3, #0
     ef4:	9307      	str	r3, [sp, #28]
    break;
     ef6:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     ef8:	9b07      	ldr	r3, [sp, #28]
}
     efa:	4618      	mov	r0, r3
     efc:	b009      	add	sp, #36	; 0x24
     efe:	f85d fb04 	ldr.w	pc, [sp], #4
     f02:	bf00      	nop
     f04:	1fff9708 	.word	0x1fff9708

00000f08 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f08:	b500      	push	{lr}
     f0a:	b089      	sub	sp, #36	; 0x24
     f0c:	9003      	str	r0, [sp, #12]
     f0e:	9102      	str	r1, [sp, #8]
     f10:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f12:	4b0f      	ldr	r3, [pc, #60]	; (f50 <SEGGER_RTT_Write+0x48>)
     f14:	9307      	str	r3, [sp, #28]
     f16:	9b07      	ldr	r3, [sp, #28]
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	b2db      	uxtb	r3, r3
     f1c:	2b53      	cmp	r3, #83	; 0x53
     f1e:	d001      	beq.n	f24 <SEGGER_RTT_Write+0x1c>
     f20:	f7ff fe86 	bl	c30 <_DoInit>
  SEGGER_RTT_LOCK();
     f24:	f3ef 8311 	mrs	r3, BASEPRI
     f28:	f04f 0120 	mov.w	r1, #32
     f2c:	f381 8811 	msr	BASEPRI, r1
     f30:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f32:	9a01      	ldr	r2, [sp, #4]
     f34:	9902      	ldr	r1, [sp, #8]
     f36:	9803      	ldr	r0, [sp, #12]
     f38:	f7ff ff96 	bl	e68 <SEGGER_RTT_WriteNoLock>
     f3c:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f3e:	9b06      	ldr	r3, [sp, #24]
     f40:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f44:	9b05      	ldr	r3, [sp, #20]
}
     f46:	4618      	mov	r0, r3
     f48:	b009      	add	sp, #36	; 0x24
     f4a:	f85d fb04 	ldr.w	pc, [sp], #4
     f4e:	bf00      	nop
     f50:	1fff9708 	.word	0x1fff9708

00000f54 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f54:	b508      	push	{r3, lr}
  _DoInit();
     f56:	f7ff fe6b 	bl	c30 <_DoInit>
}
     f5a:	bf00      	nop
     f5c:	bd08      	pop	{r3, pc}

00000f5e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f5e:	b500      	push	{lr}
     f60:	b085      	sub	sp, #20
     f62:	9001      	str	r0, [sp, #4]
     f64:	460b      	mov	r3, r1
     f66:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f6a:	9b01      	ldr	r3, [sp, #4]
     f6c:	689b      	ldr	r3, [r3, #8]
     f6e:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f70:	9b03      	ldr	r3, [sp, #12]
     f72:	1c5a      	adds	r2, r3, #1
     f74:	9b01      	ldr	r3, [sp, #4]
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	429a      	cmp	r2, r3
     f7a:	d80f      	bhi.n	f9c <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f7c:	9b01      	ldr	r3, [sp, #4]
     f7e:	681a      	ldr	r2, [r3, #0]
     f80:	9b03      	ldr	r3, [sp, #12]
     f82:	4413      	add	r3, r2
     f84:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f88:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f8a:	9b03      	ldr	r3, [sp, #12]
     f8c:	1c5a      	adds	r2, r3, #1
     f8e:	9b01      	ldr	r3, [sp, #4]
     f90:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f92:	9b01      	ldr	r3, [sp, #4]
     f94:	68db      	ldr	r3, [r3, #12]
     f96:	1c5a      	adds	r2, r3, #1
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	689a      	ldr	r2, [r3, #8]
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	429a      	cmp	r2, r3
     fa6:	d115      	bne.n	fd4 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     fa8:	9b01      	ldr	r3, [sp, #4]
     faa:	6918      	ldr	r0, [r3, #16]
     fac:	9b01      	ldr	r3, [sp, #4]
     fae:	6819      	ldr	r1, [r3, #0]
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	689b      	ldr	r3, [r3, #8]
     fb4:	461a      	mov	r2, r3
     fb6:	f7ff ffa7 	bl	f08 <SEGGER_RTT_Write>
     fba:	4602      	mov	r2, r0
     fbc:	9b01      	ldr	r3, [sp, #4]
     fbe:	689b      	ldr	r3, [r3, #8]
     fc0:	429a      	cmp	r2, r3
     fc2:	d004      	beq.n	fce <_StoreChar+0x70>
      p->ReturnValue = -1;
     fc4:	9b01      	ldr	r3, [sp, #4]
     fc6:	f04f 32ff 	mov.w	r2, #4294967295
     fca:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fcc:	e002      	b.n	fd4 <_StoreChar+0x76>
      p->Cnt = 0u;
     fce:	9b01      	ldr	r3, [sp, #4]
     fd0:	2200      	movs	r2, #0
     fd2:	609a      	str	r2, [r3, #8]
}
     fd4:	bf00      	nop
     fd6:	b005      	add	sp, #20
     fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00000fdc <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fdc:	b500      	push	{lr}
     fde:	b08b      	sub	sp, #44	; 0x2c
     fe0:	9003      	str	r0, [sp, #12]
     fe2:	9102      	str	r1, [sp, #8]
     fe4:	9201      	str	r2, [sp, #4]
     fe6:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fe8:	9b02      	ldr	r3, [sp, #8]
     fea:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fec:	2301      	movs	r3, #1
     fee:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     ff0:	2301      	movs	r3, #1
     ff2:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     ff4:	e007      	b.n	1006 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     ff6:	9a08      	ldr	r2, [sp, #32]
     ff8:	9b01      	ldr	r3, [sp, #4]
     ffa:	fbb2 f3f3 	udiv	r3, r2, r3
     ffe:	9308      	str	r3, [sp, #32]
    Width++;
    1000:	9b07      	ldr	r3, [sp, #28]
    1002:	3301      	adds	r3, #1
    1004:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1006:	9a08      	ldr	r2, [sp, #32]
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	429a      	cmp	r2, r3
    100c:	d2f3      	bcs.n	ff6 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    100e:	9a00      	ldr	r2, [sp, #0]
    1010:	9b07      	ldr	r3, [sp, #28]
    1012:	429a      	cmp	r2, r3
    1014:	d901      	bls.n	101a <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1016:	9b00      	ldr	r3, [sp, #0]
    1018:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    101a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    101c:	f003 0301 	and.w	r3, r3, #1
    1020:	2b00      	cmp	r3, #0
    1022:	d128      	bne.n	1076 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1026:	2b00      	cmp	r3, #0
    1028:	d025      	beq.n	1076 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    102a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    102c:	f003 0302 	and.w	r3, r3, #2
    1030:	2b00      	cmp	r3, #0
    1032:	d006      	beq.n	1042 <_PrintUnsigned+0x66>
    1034:	9b00      	ldr	r3, [sp, #0]
    1036:	2b00      	cmp	r3, #0
    1038:	d103      	bne.n	1042 <_PrintUnsigned+0x66>
        c = '0';
    103a:	2330      	movs	r3, #48	; 0x30
    103c:	f88d 301b 	strb.w	r3, [sp, #27]
    1040:	e002      	b.n	1048 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1042:	2320      	movs	r3, #32
    1044:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1048:	e00c      	b.n	1064 <_PrintUnsigned+0x88>
        FieldWidth--;
    104a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    104c:	3b01      	subs	r3, #1
    104e:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1050:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1054:	4619      	mov	r1, r3
    1056:	9803      	ldr	r0, [sp, #12]
    1058:	f7ff ff81 	bl	f5e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    105c:	9b03      	ldr	r3, [sp, #12]
    105e:	68db      	ldr	r3, [r3, #12]
    1060:	2b00      	cmp	r3, #0
    1062:	db07      	blt.n	1074 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1066:	2b00      	cmp	r3, #0
    1068:	d005      	beq.n	1076 <_PrintUnsigned+0x9a>
    106a:	9a07      	ldr	r2, [sp, #28]
    106c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    106e:	429a      	cmp	r2, r3
    1070:	d3eb      	bcc.n	104a <_PrintUnsigned+0x6e>
    1072:	e000      	b.n	1076 <_PrintUnsigned+0x9a>
          break;
    1074:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1076:	9b03      	ldr	r3, [sp, #12]
    1078:	68db      	ldr	r3, [r3, #12]
    107a:	2b00      	cmp	r3, #0
    107c:	db55      	blt.n	112a <__BSS_SRAM_SIZE+0xaa>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    107e:	9b00      	ldr	r3, [sp, #0]
    1080:	2b01      	cmp	r3, #1
    1082:	d903      	bls.n	108c <__BSS_SRAM_SIZE+0xc>
        NumDigits--;
    1084:	9b00      	ldr	r3, [sp, #0]
    1086:	3b01      	subs	r3, #1
    1088:	9300      	str	r3, [sp, #0]
    108a:	e009      	b.n	10a0 <__BSS_SRAM_SIZE+0x20>
      } else {
        Div = v / Digit;
    108c:	9a02      	ldr	r2, [sp, #8]
    108e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1090:	fbb2 f3f3 	udiv	r3, r2, r3
    1094:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1096:	9a05      	ldr	r2, [sp, #20]
    1098:	9b01      	ldr	r3, [sp, #4]
    109a:	429a      	cmp	r2, r3
    109c:	d200      	bcs.n	10a0 <__BSS_SRAM_SIZE+0x20>
          break;
    109e:	e005      	b.n	10ac <__BSS_SRAM_SIZE+0x2c>
        }
      }
      Digit *= Base;
    10a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10a2:	9a01      	ldr	r2, [sp, #4]
    10a4:	fb02 f303 	mul.w	r3, r2, r3
    10a8:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10aa:	e7e8      	b.n	107e <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10ac:	9a02      	ldr	r2, [sp, #8]
    10ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10b0:	fbb2 f3f3 	udiv	r3, r2, r3
    10b4:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10b6:	9b05      	ldr	r3, [sp, #20]
    10b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10ba:	fb02 f303 	mul.w	r3, r2, r3
    10be:	9a02      	ldr	r2, [sp, #8]
    10c0:	1ad3      	subs	r3, r2, r3
    10c2:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    10c4:	4a1b      	ldr	r2, [pc, #108]	; (1134 <__BSS_SRAM_SIZE+0xb4>)
    10c6:	9b05      	ldr	r3, [sp, #20]
    10c8:	4413      	add	r3, r2
    10ca:	781b      	ldrb	r3, [r3, #0]
    10cc:	4619      	mov	r1, r3
    10ce:	9803      	ldr	r0, [sp, #12]
    10d0:	f7ff ff45 	bl	f5e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10d4:	9b03      	ldr	r3, [sp, #12]
    10d6:	68db      	ldr	r3, [r3, #12]
    10d8:	2b00      	cmp	r3, #0
    10da:	db08      	blt.n	10ee <__BSS_SRAM_SIZE+0x6e>
        break;
      }
      Digit /= Base;
    10dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10de:	9b01      	ldr	r3, [sp, #4]
    10e0:	fbb2 f3f3 	udiv	r3, r2, r3
    10e4:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10e8:	2b00      	cmp	r3, #0
    10ea:	d1df      	bne.n	10ac <__BSS_SRAM_SIZE+0x2c>
    10ec:	e000      	b.n	10f0 <__BSS_SRAM_SIZE+0x70>
        break;
    10ee:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10f2:	f003 0301 	and.w	r3, r3, #1
    10f6:	2b00      	cmp	r3, #0
    10f8:	d017      	beq.n	112a <__BSS_SRAM_SIZE+0xaa>
      if (FieldWidth != 0u) {
    10fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10fc:	2b00      	cmp	r3, #0
    10fe:	d014      	beq.n	112a <__BSS_SRAM_SIZE+0xaa>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1100:	e00a      	b.n	1118 <__BSS_SRAM_SIZE+0x98>
          FieldWidth--;
    1102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1104:	3b01      	subs	r3, #1
    1106:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1108:	2120      	movs	r1, #32
    110a:	9803      	ldr	r0, [sp, #12]
    110c:	f7ff ff27 	bl	f5e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1110:	9b03      	ldr	r3, [sp, #12]
    1112:	68db      	ldr	r3, [r3, #12]
    1114:	2b00      	cmp	r3, #0
    1116:	db07      	blt.n	1128 <__BSS_SRAM_SIZE+0xa8>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    111a:	2b00      	cmp	r3, #0
    111c:	d005      	beq.n	112a <__BSS_SRAM_SIZE+0xaa>
    111e:	9a07      	ldr	r2, [sp, #28]
    1120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1122:	429a      	cmp	r2, r3
    1124:	d3ed      	bcc.n	1102 <__BSS_SRAM_SIZE+0x82>
          }
        }
      }
    }
  }
}
    1126:	e000      	b.n	112a <__BSS_SRAM_SIZE+0xaa>
            break;
    1128:	bf00      	nop
}
    112a:	bf00      	nop
    112c:	b00b      	add	sp, #44	; 0x2c
    112e:	f85d fb04 	ldr.w	pc, [sp], #4
    1132:	bf00      	nop
    1134:	00015ae0 	.word	0x00015ae0

00001138 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1138:	b500      	push	{lr}
    113a:	b089      	sub	sp, #36	; 0x24
    113c:	9005      	str	r0, [sp, #20]
    113e:	9104      	str	r1, [sp, #16]
    1140:	9203      	str	r2, [sp, #12]
    1142:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1144:	9b04      	ldr	r3, [sp, #16]
    1146:	2b00      	cmp	r3, #0
    1148:	bfb8      	it	lt
    114a:	425b      	neglt	r3, r3
    114c:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    114e:	2301      	movs	r3, #1
    1150:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1152:	e007      	b.n	1164 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1154:	9b03      	ldr	r3, [sp, #12]
    1156:	9a06      	ldr	r2, [sp, #24]
    1158:	fb92 f3f3 	sdiv	r3, r2, r3
    115c:	9306      	str	r3, [sp, #24]
    Width++;
    115e:	9b07      	ldr	r3, [sp, #28]
    1160:	3301      	adds	r3, #1
    1162:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1164:	9b03      	ldr	r3, [sp, #12]
    1166:	9a06      	ldr	r2, [sp, #24]
    1168:	429a      	cmp	r2, r3
    116a:	daf3      	bge.n	1154 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    116c:	9a02      	ldr	r2, [sp, #8]
    116e:	9b07      	ldr	r3, [sp, #28]
    1170:	429a      	cmp	r2, r3
    1172:	d901      	bls.n	1178 <_PrintInt+0x40>
    Width = NumDigits;
    1174:	9b02      	ldr	r3, [sp, #8]
    1176:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    117a:	2b00      	cmp	r3, #0
    117c:	d00a      	beq.n	1194 <_PrintInt+0x5c>
    117e:	9b04      	ldr	r3, [sp, #16]
    1180:	2b00      	cmp	r3, #0
    1182:	db04      	blt.n	118e <_PrintInt+0x56>
    1184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1186:	f003 0304 	and.w	r3, r3, #4
    118a:	2b00      	cmp	r3, #0
    118c:	d002      	beq.n	1194 <_PrintInt+0x5c>
    FieldWidth--;
    118e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1190:	3b01      	subs	r3, #1
    1192:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1196:	f003 0302 	and.w	r3, r3, #2
    119a:	2b00      	cmp	r3, #0
    119c:	d002      	beq.n	11a4 <_PrintInt+0x6c>
    119e:	9b02      	ldr	r3, [sp, #8]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d01c      	beq.n	11de <_PrintInt+0xa6>
    11a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11a6:	f003 0301 	and.w	r3, r3, #1
    11aa:	2b00      	cmp	r3, #0
    11ac:	d117      	bne.n	11de <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b0:	2b00      	cmp	r3, #0
    11b2:	d014      	beq.n	11de <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11b4:	e00a      	b.n	11cc <_PrintInt+0x94>
        FieldWidth--;
    11b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b8:	3b01      	subs	r3, #1
    11ba:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    11bc:	2120      	movs	r1, #32
    11be:	9805      	ldr	r0, [sp, #20]
    11c0:	f7ff fecd 	bl	f5e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    11c4:	9b05      	ldr	r3, [sp, #20]
    11c6:	68db      	ldr	r3, [r3, #12]
    11c8:	2b00      	cmp	r3, #0
    11ca:	db07      	blt.n	11dc <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ce:	2b00      	cmp	r3, #0
    11d0:	d005      	beq.n	11de <_PrintInt+0xa6>
    11d2:	9a07      	ldr	r2, [sp, #28]
    11d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d6:	429a      	cmp	r2, r3
    11d8:	d3ed      	bcc.n	11b6 <_PrintInt+0x7e>
    11da:	e000      	b.n	11de <_PrintInt+0xa6>
          break;
    11dc:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11de:	9b05      	ldr	r3, [sp, #20]
    11e0:	68db      	ldr	r3, [r3, #12]
    11e2:	2b00      	cmp	r3, #0
    11e4:	db4a      	blt.n	127c <_PrintInt+0x144>
    if (v < 0) {
    11e6:	9b04      	ldr	r3, [sp, #16]
    11e8:	2b00      	cmp	r3, #0
    11ea:	da07      	bge.n	11fc <_PrintInt+0xc4>
      v = -v;
    11ec:	9b04      	ldr	r3, [sp, #16]
    11ee:	425b      	negs	r3, r3
    11f0:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11f2:	212d      	movs	r1, #45	; 0x2d
    11f4:	9805      	ldr	r0, [sp, #20]
    11f6:	f7ff feb2 	bl	f5e <_StoreChar>
    11fa:	e008      	b.n	120e <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11fe:	f003 0304 	and.w	r3, r3, #4
    1202:	2b00      	cmp	r3, #0
    1204:	d003      	beq.n	120e <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1206:	212b      	movs	r1, #43	; 0x2b
    1208:	9805      	ldr	r0, [sp, #20]
    120a:	f7ff fea8 	bl	f5e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    120e:	9b05      	ldr	r3, [sp, #20]
    1210:	68db      	ldr	r3, [r3, #12]
    1212:	2b00      	cmp	r3, #0
    1214:	db32      	blt.n	127c <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1218:	f003 0302 	and.w	r3, r3, #2
    121c:	2b00      	cmp	r3, #0
    121e:	d01f      	beq.n	1260 <_PrintInt+0x128>
    1220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1222:	f003 0301 	and.w	r3, r3, #1
    1226:	2b00      	cmp	r3, #0
    1228:	d11a      	bne.n	1260 <_PrintInt+0x128>
    122a:	9b02      	ldr	r3, [sp, #8]
    122c:	2b00      	cmp	r3, #0
    122e:	d117      	bne.n	1260 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1232:	2b00      	cmp	r3, #0
    1234:	d014      	beq.n	1260 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1236:	e00a      	b.n	124e <_PrintInt+0x116>
            FieldWidth--;
    1238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    123a:	3b01      	subs	r3, #1
    123c:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    123e:	2130      	movs	r1, #48	; 0x30
    1240:	9805      	ldr	r0, [sp, #20]
    1242:	f7ff fe8c 	bl	f5e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1246:	9b05      	ldr	r3, [sp, #20]
    1248:	68db      	ldr	r3, [r3, #12]
    124a:	2b00      	cmp	r3, #0
    124c:	db07      	blt.n	125e <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    124e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1250:	2b00      	cmp	r3, #0
    1252:	d005      	beq.n	1260 <_PrintInt+0x128>
    1254:	9a07      	ldr	r2, [sp, #28]
    1256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1258:	429a      	cmp	r2, r3
    125a:	d3ed      	bcc.n	1238 <_PrintInt+0x100>
    125c:	e000      	b.n	1260 <_PrintInt+0x128>
              break;
    125e:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1260:	9b05      	ldr	r3, [sp, #20]
    1262:	68db      	ldr	r3, [r3, #12]
    1264:	2b00      	cmp	r3, #0
    1266:	db09      	blt.n	127c <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1268:	9904      	ldr	r1, [sp, #16]
    126a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    126c:	9301      	str	r3, [sp, #4]
    126e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1270:	9300      	str	r3, [sp, #0]
    1272:	9b02      	ldr	r3, [sp, #8]
    1274:	9a03      	ldr	r2, [sp, #12]
    1276:	9805      	ldr	r0, [sp, #20]
    1278:	f7ff feb0 	bl	fdc <_PrintUnsigned>
      }
    }
  }
}
    127c:	bf00      	nop
    127e:	b009      	add	sp, #36	; 0x24
    1280:	f85d fb04 	ldr.w	pc, [sp], #4

00001284 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1284:	b500      	push	{lr}
    1286:	b0a3      	sub	sp, #140	; 0x8c
    1288:	9005      	str	r0, [sp, #20]
    128a:	9104      	str	r1, [sp, #16]
    128c:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    128e:	ab06      	add	r3, sp, #24
    1290:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1292:	2340      	movs	r3, #64	; 0x40
    1294:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1296:	2300      	movs	r3, #0
    1298:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    129a:	9b05      	ldr	r3, [sp, #20]
    129c:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    129e:	2300      	movs	r3, #0
    12a0:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    12a2:	9b04      	ldr	r3, [sp, #16]
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    12aa:	9b04      	ldr	r3, [sp, #16]
    12ac:	3301      	adds	r3, #1
    12ae:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12b0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12b4:	2b00      	cmp	r3, #0
    12b6:	f000 819c 	beq.w	15f2 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12ba:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12be:	2b25      	cmp	r3, #37	; 0x25
    12c0:	f040 818b 	bne.w	15da <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    12c4:	2300      	movs	r3, #0
    12c6:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    12c8:	2301      	movs	r3, #1
    12ca:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12cc:	9b04      	ldr	r3, [sp, #16]
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12d4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12d8:	3b23      	subs	r3, #35	; 0x23
    12da:	2b0d      	cmp	r3, #13
    12dc:	d83e      	bhi.n	135c <SEGGER_RTT_vprintf+0xd8>
    12de:	a201      	add	r2, pc, #4	; (adr r2, 12e4 <SEGGER_RTT_vprintf+0x60>)
    12e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12e4:	0000134d 	.word	0x0000134d
    12e8:	0000135d 	.word	0x0000135d
    12ec:	0000135d 	.word	0x0000135d
    12f0:	0000135d 	.word	0x0000135d
    12f4:	0000135d 	.word	0x0000135d
    12f8:	0000135d 	.word	0x0000135d
    12fc:	0000135d 	.word	0x0000135d
    1300:	0000135d 	.word	0x0000135d
    1304:	0000133d 	.word	0x0000133d
    1308:	0000135d 	.word	0x0000135d
    130c:	0000131d 	.word	0x0000131d
    1310:	0000135d 	.word	0x0000135d
    1314:	0000135d 	.word	0x0000135d
    1318:	0000132d 	.word	0x0000132d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    131c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    131e:	f043 0301 	orr.w	r3, r3, #1
    1322:	931e      	str	r3, [sp, #120]	; 0x78
    1324:	9b04      	ldr	r3, [sp, #16]
    1326:	3301      	adds	r3, #1
    1328:	9304      	str	r3, [sp, #16]
    132a:	e01a      	b.n	1362 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    132c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    132e:	f043 0302 	orr.w	r3, r3, #2
    1332:	931e      	str	r3, [sp, #120]	; 0x78
    1334:	9b04      	ldr	r3, [sp, #16]
    1336:	3301      	adds	r3, #1
    1338:	9304      	str	r3, [sp, #16]
    133a:	e012      	b.n	1362 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    133c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    133e:	f043 0304 	orr.w	r3, r3, #4
    1342:	931e      	str	r3, [sp, #120]	; 0x78
    1344:	9b04      	ldr	r3, [sp, #16]
    1346:	3301      	adds	r3, #1
    1348:	9304      	str	r3, [sp, #16]
    134a:	e00a      	b.n	1362 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    134c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    134e:	f043 0308 	orr.w	r3, r3, #8
    1352:	931e      	str	r3, [sp, #120]	; 0x78
    1354:	9b04      	ldr	r3, [sp, #16]
    1356:	3301      	adds	r3, #1
    1358:	9304      	str	r3, [sp, #16]
    135a:	e002      	b.n	1362 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    135c:	2300      	movs	r3, #0
    135e:	9320      	str	r3, [sp, #128]	; 0x80
    1360:	bf00      	nop
        }
      } while (v);
    1362:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1364:	2b00      	cmp	r3, #0
    1366:	d1b1      	bne.n	12cc <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1368:	2300      	movs	r3, #0
    136a:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    136c:	9b04      	ldr	r3, [sp, #16]
    136e:	781b      	ldrb	r3, [r3, #0]
    1370:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1374:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1378:	2b2f      	cmp	r3, #47	; 0x2f
    137a:	d912      	bls.n	13a2 <SEGGER_RTT_vprintf+0x11e>
    137c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1380:	2b39      	cmp	r3, #57	; 0x39
    1382:	d80e      	bhi.n	13a2 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1384:	9b04      	ldr	r3, [sp, #16]
    1386:	3301      	adds	r3, #1
    1388:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    138a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    138c:	4613      	mov	r3, r2
    138e:	009b      	lsls	r3, r3, #2
    1390:	4413      	add	r3, r2
    1392:	005b      	lsls	r3, r3, #1
    1394:	461a      	mov	r2, r3
    1396:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    139a:	4413      	add	r3, r2
    139c:	3b30      	subs	r3, #48	; 0x30
    139e:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    13a0:	e7e4      	b.n	136c <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    13a2:	2300      	movs	r3, #0
    13a4:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    13a6:	9b04      	ldr	r3, [sp, #16]
    13a8:	781b      	ldrb	r3, [r3, #0]
    13aa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13ae:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13b2:	2b2e      	cmp	r3, #46	; 0x2e
    13b4:	d11d      	bne.n	13f2 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13b6:	9b04      	ldr	r3, [sp, #16]
    13b8:	3301      	adds	r3, #1
    13ba:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    13bc:	9b04      	ldr	r3, [sp, #16]
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    13c4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c8:	2b2f      	cmp	r3, #47	; 0x2f
    13ca:	d912      	bls.n	13f2 <SEGGER_RTT_vprintf+0x16e>
    13cc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13d0:	2b39      	cmp	r3, #57	; 0x39
    13d2:	d80e      	bhi.n	13f2 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    13d4:	9b04      	ldr	r3, [sp, #16]
    13d6:	3301      	adds	r3, #1
    13d8:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13dc:	4613      	mov	r3, r2
    13de:	009b      	lsls	r3, r3, #2
    13e0:	4413      	add	r3, r2
    13e2:	005b      	lsls	r3, r3, #1
    13e4:	461a      	mov	r2, r3
    13e6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13ea:	4413      	add	r3, r2
    13ec:	3b30      	subs	r3, #48	; 0x30
    13ee:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13f0:	e7e4      	b.n	13bc <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13f2:	9b04      	ldr	r3, [sp, #16]
    13f4:	781b      	ldrb	r3, [r3, #0]
    13f6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13fa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13fe:	2b6c      	cmp	r3, #108	; 0x6c
    1400:	d003      	beq.n	140a <SEGGER_RTT_vprintf+0x186>
    1402:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1406:	2b68      	cmp	r3, #104	; 0x68
    1408:	d107      	bne.n	141a <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    140a:	9b04      	ldr	r3, [sp, #16]
    140c:	3301      	adds	r3, #1
    140e:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1410:	9b04      	ldr	r3, [sp, #16]
    1412:	781b      	ldrb	r3, [r3, #0]
    1414:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1418:	e7ef      	b.n	13fa <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    141a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    141e:	2b25      	cmp	r3, #37	; 0x25
    1420:	f000 80d0 	beq.w	15c4 <SEGGER_RTT_vprintf+0x340>
    1424:	2b25      	cmp	r3, #37	; 0x25
    1426:	f2c0 80d3 	blt.w	15d0 <SEGGER_RTT_vprintf+0x34c>
    142a:	2b78      	cmp	r3, #120	; 0x78
    142c:	f300 80d0 	bgt.w	15d0 <SEGGER_RTT_vprintf+0x34c>
    1430:	2b58      	cmp	r3, #88	; 0x58
    1432:	f2c0 80cd 	blt.w	15d0 <SEGGER_RTT_vprintf+0x34c>
    1436:	3b58      	subs	r3, #88	; 0x58
    1438:	2b20      	cmp	r3, #32
    143a:	f200 80c9 	bhi.w	15d0 <SEGGER_RTT_vprintf+0x34c>
    143e:	a201      	add	r2, pc, #4	; (adr r2, 1444 <SEGGER_RTT_vprintf+0x1c0>)
    1440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1444:	00001535 	.word	0x00001535
    1448:	000015d1 	.word	0x000015d1
    144c:	000015d1 	.word	0x000015d1
    1450:	000015d1 	.word	0x000015d1
    1454:	000015d1 	.word	0x000015d1
    1458:	000015d1 	.word	0x000015d1
    145c:	000015d1 	.word	0x000015d1
    1460:	000015d1 	.word	0x000015d1
    1464:	000015d1 	.word	0x000015d1
    1468:	000015d1 	.word	0x000015d1
    146c:	000015d1 	.word	0x000015d1
    1470:	000014c9 	.word	0x000014c9
    1474:	000014ed 	.word	0x000014ed
    1478:	000015d1 	.word	0x000015d1
    147c:	000015d1 	.word	0x000015d1
    1480:	000015d1 	.word	0x000015d1
    1484:	000015d1 	.word	0x000015d1
    1488:	000015d1 	.word	0x000015d1
    148c:	000015d1 	.word	0x000015d1
    1490:	000015d1 	.word	0x000015d1
    1494:	000015d1 	.word	0x000015d1
    1498:	000015d1 	.word	0x000015d1
    149c:	000015d1 	.word	0x000015d1
    14a0:	000015d1 	.word	0x000015d1
    14a4:	000015a1 	.word	0x000015a1
    14a8:	000015d1 	.word	0x000015d1
    14ac:	000015d1 	.word	0x000015d1
    14b0:	00001559 	.word	0x00001559
    14b4:	000015d1 	.word	0x000015d1
    14b8:	00001511 	.word	0x00001511
    14bc:	000015d1 	.word	0x000015d1
    14c0:	000015d1 	.word	0x000015d1
    14c4:	00001535 	.word	0x00001535
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    14c8:	9b03      	ldr	r3, [sp, #12]
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	1d19      	adds	r1, r3, #4
    14ce:	9a03      	ldr	r2, [sp, #12]
    14d0:	6011      	str	r1, [r2, #0]
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14d8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14dc:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14e0:	ab16      	add	r3, sp, #88	; 0x58
    14e2:	4611      	mov	r1, r2
    14e4:	4618      	mov	r0, r3
    14e6:	f7ff fd3a 	bl	f5e <_StoreChar>
        break;
    14ea:	e072      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14ec:	9b03      	ldr	r3, [sp, #12]
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	1d19      	adds	r1, r3, #4
    14f2:	9a03      	ldr	r2, [sp, #12]
    14f4:	6011      	str	r1, [r2, #0]
    14f6:	681b      	ldr	r3, [r3, #0]
    14f8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14fa:	a816      	add	r0, sp, #88	; 0x58
    14fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14fe:	9301      	str	r3, [sp, #4]
    1500:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1502:	9300      	str	r3, [sp, #0]
    1504:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1506:	220a      	movs	r2, #10
    1508:	9920      	ldr	r1, [sp, #128]	; 0x80
    150a:	f7ff fe15 	bl	1138 <_PrintInt>
        break;
    150e:	e060      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1510:	9b03      	ldr	r3, [sp, #12]
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	1d19      	adds	r1, r3, #4
    1516:	9a03      	ldr	r2, [sp, #12]
    1518:	6011      	str	r1, [r2, #0]
    151a:	681b      	ldr	r3, [r3, #0]
    151c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    151e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1520:	a816      	add	r0, sp, #88	; 0x58
    1522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1524:	9301      	str	r3, [sp, #4]
    1526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1528:	9300      	str	r3, [sp, #0]
    152a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    152c:	220a      	movs	r2, #10
    152e:	f7ff fd55 	bl	fdc <_PrintUnsigned>
        break;
    1532:	e04e      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1534:	9b03      	ldr	r3, [sp, #12]
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	1d19      	adds	r1, r3, #4
    153a:	9a03      	ldr	r2, [sp, #12]
    153c:	6011      	str	r1, [r2, #0]
    153e:	681b      	ldr	r3, [r3, #0]
    1540:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1542:	9920      	ldr	r1, [sp, #128]	; 0x80
    1544:	a816      	add	r0, sp, #88	; 0x58
    1546:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1548:	9301      	str	r3, [sp, #4]
    154a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    154c:	9300      	str	r3, [sp, #0]
    154e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1550:	2210      	movs	r2, #16
    1552:	f7ff fd43 	bl	fdc <_PrintUnsigned>
        break;
    1556:	e03c      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1558:	9b03      	ldr	r3, [sp, #12]
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	1d19      	adds	r1, r3, #4
    155e:	9a03      	ldr	r2, [sp, #12]
    1560:	6011      	str	r1, [r2, #0]
    1562:	681b      	ldr	r3, [r3, #0]
    1564:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1566:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1568:	2b00      	cmp	r3, #0
    156a:	d101      	bne.n	1570 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    156c:	4b2c      	ldr	r3, [pc, #176]	; (1620 <SEGGER_RTT_vprintf+0x39c>)
    156e:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1570:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1572:	781b      	ldrb	r3, [r3, #0]
    1574:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1578:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    157a:	3301      	adds	r3, #1
    157c:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    157e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1582:	2b00      	cmp	r3, #0
    1584:	d00a      	beq.n	159c <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1586:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    158a:	ab16      	add	r3, sp, #88	; 0x58
    158c:	4611      	mov	r1, r2
    158e:	4618      	mov	r0, r3
    1590:	f7ff fce5 	bl	f5e <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1594:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1596:	2b00      	cmp	r3, #0
    1598:	daea      	bge.n	1570 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    159a:	e01a      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
              break;
    159c:	bf00      	nop
        break;
    159e:	e018      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    15a0:	9b03      	ldr	r3, [sp, #12]
    15a2:	681b      	ldr	r3, [r3, #0]
    15a4:	1d19      	adds	r1, r3, #4
    15a6:	9a03      	ldr	r2, [sp, #12]
    15a8:	6011      	str	r1, [r2, #0]
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15ae:	9920      	ldr	r1, [sp, #128]	; 0x80
    15b0:	a816      	add	r0, sp, #88	; 0x58
    15b2:	2300      	movs	r3, #0
    15b4:	9301      	str	r3, [sp, #4]
    15b6:	2308      	movs	r3, #8
    15b8:	9300      	str	r3, [sp, #0]
    15ba:	2308      	movs	r3, #8
    15bc:	2210      	movs	r2, #16
    15be:	f7ff fd0d 	bl	fdc <_PrintUnsigned>
        break;
    15c2:	e006      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    15c4:	ab16      	add	r3, sp, #88	; 0x58
    15c6:	2125      	movs	r1, #37	; 0x25
    15c8:	4618      	mov	r0, r3
    15ca:	f7ff fcc8 	bl	f5e <_StoreChar>
        break;
    15ce:	e000      	b.n	15d2 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    15d0:	bf00      	nop
      }
      sFormat++;
    15d2:	9b04      	ldr	r3, [sp, #16]
    15d4:	3301      	adds	r3, #1
    15d6:	9304      	str	r3, [sp, #16]
    15d8:	e006      	b.n	15e8 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    15da:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15de:	ab16      	add	r3, sp, #88	; 0x58
    15e0:	4611      	mov	r1, r2
    15e2:	4618      	mov	r0, r3
    15e4:	f7ff fcbb 	bl	f5e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ea:	2b00      	cmp	r3, #0
    15ec:	f6bf ae59 	bge.w	12a2 <SEGGER_RTT_vprintf+0x1e>
    15f0:	e000      	b.n	15f4 <SEGGER_RTT_vprintf+0x370>
      break;
    15f2:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15f6:	2b00      	cmp	r3, #0
    15f8:	dd0c      	ble.n	1614 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15fc:	2b00      	cmp	r3, #0
    15fe:	d005      	beq.n	160c <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1600:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1602:	ab06      	add	r3, sp, #24
    1604:	4619      	mov	r1, r3
    1606:	9805      	ldr	r0, [sp, #20]
    1608:	f7ff fc7e 	bl	f08 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    160c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    160e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1610:	4413      	add	r3, r2
    1612:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1614:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1616:	4618      	mov	r0, r3
    1618:	b023      	add	sp, #140	; 0x8c
    161a:	f85d fb04 	ldr.w	pc, [sp], #4
    161e:	bf00      	nop
    1620:	00014a00 	.word	0x00014a00

00001624 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1624:	b40e      	push	{r1, r2, r3}
    1626:	b500      	push	{lr}
    1628:	b084      	sub	sp, #16
    162a:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    162c:	ab06      	add	r3, sp, #24
    162e:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1630:	ab02      	add	r3, sp, #8
    1632:	461a      	mov	r2, r3
    1634:	9905      	ldr	r1, [sp, #20]
    1636:	9801      	ldr	r0, [sp, #4]
    1638:	f7ff fe24 	bl	1284 <SEGGER_RTT_vprintf>
    163c:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    163e:	9b03      	ldr	r3, [sp, #12]
}
    1640:	4618      	mov	r0, r3
    1642:	b004      	add	sp, #16
    1644:	f85d eb04 	ldr.w	lr, [sp], #4
    1648:	b003      	add	sp, #12
    164a:	4770      	bx	lr

0000164c <memcpy>:
    164c:	440a      	add	r2, r1
    164e:	4291      	cmp	r1, r2
    1650:	f100 33ff 	add.w	r3, r0, #4294967295
    1654:	d100      	bne.n	1658 <memcpy+0xc>
    1656:	4770      	bx	lr
    1658:	b510      	push	{r4, lr}
    165a:	f811 4b01 	ldrb.w	r4, [r1], #1
    165e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1662:	4291      	cmp	r1, r2
    1664:	d1f9      	bne.n	165a <memcpy+0xe>
    1666:	bd10      	pop	{r4, pc}

00001668 <memset>:
    1668:	4402      	add	r2, r0
    166a:	4603      	mov	r3, r0
    166c:	4293      	cmp	r3, r2
    166e:	d100      	bne.n	1672 <memset+0xa>
    1670:	4770      	bx	lr
    1672:	f803 1b01 	strb.w	r1, [r3], #1
    1676:	e7f9      	b.n	166c <memset+0x4>

00001678 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1678:	b086      	sub	sp, #24
    167a:	9003      	str	r0, [sp, #12]
    167c:	9102      	str	r1, [sp, #8]
    167e:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1680:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1684:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1688:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    168a:	9b01      	ldr	r3, [sp, #4]
    168c:	2b00      	cmp	r3, #0
    168e:	d007      	beq.n	16a0 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1690:	9b03      	ldr	r3, [sp, #12]
    1692:	3310      	adds	r3, #16
    1694:	009b      	lsls	r3, r3, #2
    1696:	9a05      	ldr	r2, [sp, #20]
    1698:	4413      	add	r3, r2
    169a:	681a      	ldr	r2, [r3, #0]
    169c:	9b01      	ldr	r3, [sp, #4]
    169e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    16a0:	9b03      	ldr	r3, [sp, #12]
    16a2:	3310      	adds	r3, #16
    16a4:	009b      	lsls	r3, r3, #2
    16a6:	9a05      	ldr	r2, [sp, #20]
    16a8:	4413      	add	r3, r2
    16aa:	9a02      	ldr	r2, [sp, #8]
    16ac:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    16ae:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    16b2:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    16b6:	bf00      	nop
    16b8:	b006      	add	sp, #24
    16ba:	4770      	bx	lr

000016bc <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16bc:	b082      	sub	sp, #8
    16be:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16c0:	9b01      	ldr	r3, [sp, #4]
    16c2:	f003 021f 	and.w	r2, r3, #31
    16c6:	4905      	ldr	r1, [pc, #20]	; (16dc <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    16c8:	9b01      	ldr	r3, [sp, #4]
    16ca:	095b      	lsrs	r3, r3, #5
    16cc:	2001      	movs	r0, #1
    16ce:	fa00 f202 	lsl.w	r2, r0, r2
    16d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16d6:	bf00      	nop
    16d8:	b002      	add	sp, #8
    16da:	4770      	bx	lr
    16dc:	e000e100 	.word	0xe000e100

000016e0 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16e0:	b082      	sub	sp, #8
    16e2:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16e4:	9b01      	ldr	r3, [sp, #4]
    16e6:	f003 021f 	and.w	r2, r3, #31
    16ea:	4906      	ldr	r1, [pc, #24]	; (1704 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    16ec:	9b01      	ldr	r3, [sp, #4]
    16ee:	095b      	lsrs	r3, r3, #5
    16f0:	2001      	movs	r0, #1
    16f2:	fa00 f202 	lsl.w	r2, r0, r2
    16f6:	3320      	adds	r3, #32
    16f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16fc:	bf00      	nop
    16fe:	b002      	add	sp, #8
    1700:	4770      	bx	lr
    1702:	bf00      	nop
    1704:	e000e100 	.word	0xe000e100

00001708 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1708:	b084      	sub	sp, #16
    170a:	9001      	str	r0, [sp, #4]
    170c:	460b      	mov	r3, r1
    170e:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1712:	2304      	movs	r3, #4
    1714:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1718:	f89d 2003 	ldrb.w	r2, [sp, #3]
    171c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1720:	fa02 f103 	lsl.w	r1, r2, r3
    1724:	4a04      	ldr	r2, [pc, #16]	; (1738 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1726:	9b01      	ldr	r3, [sp, #4]
    1728:	b2c9      	uxtb	r1, r1
    172a:	4413      	add	r3, r2
    172c:	460a      	mov	r2, r1
    172e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1732:	bf00      	nop
    1734:	b004      	add	sp, #16
    1736:	4770      	bx	lr
    1738:	e000e100 	.word	0xe000e100

0000173c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    173c:	b084      	sub	sp, #16
    173e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1740:	2304      	movs	r3, #4
    1742:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1746:	4a09      	ldr	r2, [pc, #36]	; (176c <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	4413      	add	r3, r2
    174c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1750:	b2db      	uxtb	r3, r3
    1752:	461a      	mov	r2, r3
    1754:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1758:	fa42 f303 	asr.w	r3, r2, r3
    175c:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1760:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1764:	4618      	mov	r0, r3
    1766:	b004      	add	sp, #16
    1768:	4770      	bx	lr
    176a:	bf00      	nop
    176c:	e000e100 	.word	0xe000e100

00001770 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1770:	b082      	sub	sp, #8
    1772:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1774:	9b01      	ldr	r3, [sp, #4]
    1776:	f003 021f 	and.w	r2, r3, #31
    177a:	4906      	ldr	r1, [pc, #24]	; (1794 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    177c:	9b01      	ldr	r3, [sp, #4]
    177e:	095b      	lsrs	r3, r3, #5
    1780:	2001      	movs	r0, #1
    1782:	fa00 f202 	lsl.w	r2, r0, r2
    1786:	3360      	adds	r3, #96	; 0x60
    1788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    178c:	bf00      	nop
    178e:	b002      	add	sp, #8
    1790:	4770      	bx	lr
    1792:	bf00      	nop
    1794:	e000e100 	.word	0xe000e100

00001798 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1798:	b500      	push	{lr}
    179a:	b085      	sub	sp, #20
    179c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    179e:	2300      	movs	r3, #0
    17a0:	9303      	str	r3, [sp, #12]
    17a2:	e05d      	b.n	1860 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17a4:	9b01      	ldr	r3, [sp, #4]
    17a6:	6859      	ldr	r1, [r3, #4]
    17a8:	9a03      	ldr	r2, [sp, #12]
    17aa:	4613      	mov	r3, r2
    17ac:	005b      	lsls	r3, r3, #1
    17ae:	4413      	add	r3, r2
    17b0:	009b      	lsls	r3, r3, #2
    17b2:	440b      	add	r3, r1
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	4618      	mov	r0, r3
    17b8:	f000 f899 	bl	18ee <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17bc:	9b01      	ldr	r3, [sp, #4]
    17be:	6859      	ldr	r1, [r3, #4]
    17c0:	9a03      	ldr	r2, [sp, #12]
    17c2:	4613      	mov	r3, r2
    17c4:	005b      	lsls	r3, r3, #1
    17c6:	4413      	add	r3, r2
    17c8:	009b      	lsls	r3, r3, #2
    17ca:	440b      	add	r3, r1
    17cc:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    17ce:	9b01      	ldr	r3, [sp, #4]
    17d0:	6859      	ldr	r1, [r3, #4]
    17d2:	9a03      	ldr	r2, [sp, #12]
    17d4:	4613      	mov	r3, r2
    17d6:	005b      	lsls	r3, r3, #1
    17d8:	4413      	add	r3, r2
    17da:	009b      	lsls	r3, r3, #2
    17dc:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17de:	795b      	ldrb	r3, [r3, #5]
    17e0:	4619      	mov	r1, r3
    17e2:	f000 f869 	bl	18b8 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17e6:	9b01      	ldr	r3, [sp, #4]
    17e8:	6859      	ldr	r1, [r3, #4]
    17ea:	9a03      	ldr	r2, [sp, #12]
    17ec:	4613      	mov	r3, r2
    17ee:	005b      	lsls	r3, r3, #1
    17f0:	4413      	add	r3, r2
    17f2:	009b      	lsls	r3, r3, #2
    17f4:	440b      	add	r3, r1
    17f6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    17f8:	9b01      	ldr	r3, [sp, #4]
    17fa:	6859      	ldr	r1, [r3, #4]
    17fc:	9a03      	ldr	r2, [sp, #12]
    17fe:	4613      	mov	r3, r2
    1800:	005b      	lsls	r3, r3, #1
    1802:	4413      	add	r3, r2
    1804:	009b      	lsls	r3, r3, #2
    1806:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1808:	689b      	ldr	r3, [r3, #8]
    180a:	2200      	movs	r2, #0
    180c:	4619      	mov	r1, r3
    180e:	f000 f831 	bl	1874 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1812:	9b01      	ldr	r3, [sp, #4]
    1814:	6859      	ldr	r1, [r3, #4]
    1816:	9a03      	ldr	r2, [sp, #12]
    1818:	4613      	mov	r3, r2
    181a:	005b      	lsls	r3, r3, #1
    181c:	4413      	add	r3, r2
    181e:	009b      	lsls	r3, r3, #2
    1820:	440b      	add	r3, r1
    1822:	791b      	ldrb	r3, [r3, #4]
    1824:	2b00      	cmp	r3, #0
    1826:	d00c      	beq.n	1842 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1828:	9b01      	ldr	r3, [sp, #4]
    182a:	6859      	ldr	r1, [r3, #4]
    182c:	9a03      	ldr	r2, [sp, #12]
    182e:	4613      	mov	r3, r2
    1830:	005b      	lsls	r3, r3, #1
    1832:	4413      	add	r3, r2
    1834:	009b      	lsls	r3, r3, #2
    1836:	440b      	add	r3, r1
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	4618      	mov	r0, r3
    183c:	f000 f828 	bl	1890 <IntCtrl_Ip_EnableIrq>
    1840:	e00b      	b.n	185a <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1842:	9b01      	ldr	r3, [sp, #4]
    1844:	6859      	ldr	r1, [r3, #4]
    1846:	9a03      	ldr	r2, [sp, #12]
    1848:	4613      	mov	r3, r2
    184a:	005b      	lsls	r3, r3, #1
    184c:	4413      	add	r3, r2
    184e:	009b      	lsls	r3, r3, #2
    1850:	440b      	add	r3, r1
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	4618      	mov	r0, r3
    1856:	f000 f825 	bl	18a4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    185a:	9b03      	ldr	r3, [sp, #12]
    185c:	3301      	adds	r3, #1
    185e:	9303      	str	r3, [sp, #12]
    1860:	9b01      	ldr	r3, [sp, #4]
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	9a03      	ldr	r2, [sp, #12]
    1866:	429a      	cmp	r2, r3
    1868:	d39c      	bcc.n	17a4 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    186a:	2300      	movs	r3, #0
}
    186c:	4618      	mov	r0, r3
    186e:	b005      	add	sp, #20
    1870:	f85d fb04 	ldr.w	pc, [sp], #4

00001874 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1874:	b500      	push	{lr}
    1876:	b085      	sub	sp, #20
    1878:	9003      	str	r0, [sp, #12]
    187a:	9102      	str	r1, [sp, #8]
    187c:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    187e:	9a01      	ldr	r2, [sp, #4]
    1880:	9902      	ldr	r1, [sp, #8]
    1882:	9803      	ldr	r0, [sp, #12]
    1884:	f7ff fef8 	bl	1678 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1888:	bf00      	nop
    188a:	b005      	add	sp, #20
    188c:	f85d fb04 	ldr.w	pc, [sp], #4

00001890 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1890:	b500      	push	{lr}
    1892:	b083      	sub	sp, #12
    1894:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1896:	9801      	ldr	r0, [sp, #4]
    1898:	f7ff ff10 	bl	16bc <IntCtrl_Ip_EnableIrqPrivileged>
}
    189c:	bf00      	nop
    189e:	b003      	add	sp, #12
    18a0:	f85d fb04 	ldr.w	pc, [sp], #4

000018a4 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    18a4:	b500      	push	{lr}
    18a6:	b083      	sub	sp, #12
    18a8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    18aa:	9801      	ldr	r0, [sp, #4]
    18ac:	f7ff ff18 	bl	16e0 <IntCtrl_Ip_DisableIrqPrivileged>
}
    18b0:	bf00      	nop
    18b2:	b003      	add	sp, #12
    18b4:	f85d fb04 	ldr.w	pc, [sp], #4

000018b8 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18b8:	b500      	push	{lr}
    18ba:	b083      	sub	sp, #12
    18bc:	9001      	str	r0, [sp, #4]
    18be:	460b      	mov	r3, r1
    18c0:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    18c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18c8:	4619      	mov	r1, r3
    18ca:	9801      	ldr	r0, [sp, #4]
    18cc:	f7ff ff1c 	bl	1708 <IntCtrl_Ip_SetPriorityPrivileged>
}
    18d0:	bf00      	nop
    18d2:	b003      	add	sp, #12
    18d4:	f85d fb04 	ldr.w	pc, [sp], #4

000018d8 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    18d8:	b500      	push	{lr}
    18da:	b083      	sub	sp, #12
    18dc:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    18de:	9801      	ldr	r0, [sp, #4]
    18e0:	f7ff ff2c 	bl	173c <IntCtrl_Ip_GetPriorityPrivileged>
    18e4:	4603      	mov	r3, r0
}
    18e6:	4618      	mov	r0, r3
    18e8:	b003      	add	sp, #12
    18ea:	f85d fb04 	ldr.w	pc, [sp], #4

000018ee <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    18ee:	b500      	push	{lr}
    18f0:	b083      	sub	sp, #12
    18f2:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    18f4:	9801      	ldr	r0, [sp, #4]
    18f6:	f7ff ff3b 	bl	1770 <IntCtrl_Ip_ClearPendingPrivileged>
}
    18fa:	bf00      	nop
    18fc:	b003      	add	sp, #12
    18fe:	f85d fb04 	ldr.w	pc, [sp], #4
    1902:	bf00      	nop

00001904 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1904:	b500      	push	{lr}
    1906:	b083      	sub	sp, #12
    1908:	9001      	str	r0, [sp, #4]
    190a:	460b      	mov	r3, r1
    190c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1910:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1914:	2b00      	cmp	r3, #0
    1916:	d003      	beq.n	1920 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1918:	9801      	ldr	r0, [sp, #4]
    191a:	f7ff ffb9 	bl	1890 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    191e:	e002      	b.n	1926 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1920:	9801      	ldr	r0, [sp, #4]
    1922:	f7ff ffbf 	bl	18a4 <IntCtrl_Ip_DisableIrq>
}
    1926:	bf00      	nop
    1928:	b003      	add	sp, #12
    192a:	f85d fb04 	ldr.w	pc, [sp], #4

0000192e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    192e:	b500      	push	{lr}
    1930:	b083      	sub	sp, #12
    1932:	9001      	str	r0, [sp, #4]
    1934:	460b      	mov	r3, r1
    1936:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    193a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    193e:	4619      	mov	r1, r3
    1940:	9801      	ldr	r0, [sp, #4]
    1942:	f7ff ffb9 	bl	18b8 <IntCtrl_Ip_SetPriority>
}
    1946:	bf00      	nop
    1948:	b003      	add	sp, #12
    194a:	f85d fb04 	ldr.w	pc, [sp], #4

0000194e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    194e:	b500      	push	{lr}
    1950:	b083      	sub	sp, #12
    1952:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1954:	9801      	ldr	r0, [sp, #4]
    1956:	f7ff ffbf 	bl	18d8 <IntCtrl_Ip_GetPriority>
    195a:	4603      	mov	r3, r0
}
    195c:	4618      	mov	r0, r3
    195e:	b003      	add	sp, #12
    1960:	f85d fb04 	ldr.w	pc, [sp], #4

00001964 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1964:	b500      	push	{lr}
    1966:	b085      	sub	sp, #20
    1968:	9003      	str	r0, [sp, #12]
    196a:	9102      	str	r1, [sp, #8]
    196c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    196e:	9a01      	ldr	r2, [sp, #4]
    1970:	9902      	ldr	r1, [sp, #8]
    1972:	9803      	ldr	r0, [sp, #12]
    1974:	f7ff ff7e 	bl	1874 <IntCtrl_Ip_InstallHandler>
}
    1978:	bf00      	nop
    197a:	b005      	add	sp, #20
    197c:	f85d fb04 	ldr.w	pc, [sp], #4

00001980 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1980:	b500      	push	{lr}
    1982:	b085      	sub	sp, #20
    1984:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1986:	2300      	movs	r3, #0
    1988:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    198c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1990:	4a05      	ldr	r2, [pc, #20]	; (19a8 <Platform_Init+0x28>)
    1992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1996:	681b      	ldr	r3, [r3, #0]
    1998:	4618      	mov	r0, r3
    199a:	f000 f8c7 	bl	1b2c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    199e:	bf00      	nop
    19a0:	b005      	add	sp, #20
    19a2:	f85d fb04 	ldr.w	pc, [sp], #4
    19a6:	bf00      	nop
    19a8:	00015820 	.word	0x00015820

000019ac <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    19ac:	b500      	push	{lr}
    19ae:	b085      	sub	sp, #20
    19b0:	9001      	str	r0, [sp, #4]
    19b2:	460b      	mov	r3, r1
    19b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19b8:	2300      	movs	r3, #0
    19ba:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    19be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19c2:	4619      	mov	r1, r3
    19c4:	9801      	ldr	r0, [sp, #4]
    19c6:	f7ff ff9d 	bl	1904 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    19ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19ce:	4618      	mov	r0, r3
    19d0:	b005      	add	sp, #20
    19d2:	f85d fb04 	ldr.w	pc, [sp], #4

000019d6 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    19d6:	b500      	push	{lr}
    19d8:	b085      	sub	sp, #20
    19da:	9001      	str	r0, [sp, #4]
    19dc:	460b      	mov	r3, r1
    19de:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19e2:	2300      	movs	r3, #0
    19e4:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    19e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19ec:	4619      	mov	r1, r3
    19ee:	9801      	ldr	r0, [sp, #4]
    19f0:	f7ff ff9d 	bl	192e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    19f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19f8:	4618      	mov	r0, r3
    19fa:	b005      	add	sp, #20
    19fc:	f85d fb04 	ldr.w	pc, [sp], #4

00001a00 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1a00:	b500      	push	{lr}
    1a02:	b085      	sub	sp, #20
    1a04:	9001      	str	r0, [sp, #4]
    1a06:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a08:	2300      	movs	r3, #0
    1a0a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1a0e:	9801      	ldr	r0, [sp, #4]
    1a10:	f7ff ff9d 	bl	194e <Platform_Ipw_GetIrqPriority>
    1a14:	4603      	mov	r3, r0
    1a16:	461a      	mov	r2, r3
    1a18:	9b00      	ldr	r3, [sp, #0]
    1a1a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1a1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a20:	4618      	mov	r0, r3
    1a22:	b005      	add	sp, #20
    1a24:	f85d fb04 	ldr.w	pc, [sp], #4

00001a28 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a28:	b500      	push	{lr}
    1a2a:	b087      	sub	sp, #28
    1a2c:	9003      	str	r0, [sp, #12]
    1a2e:	9102      	str	r1, [sp, #8]
    1a30:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a32:	2300      	movs	r3, #0
    1a34:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a38:	9a01      	ldr	r2, [sp, #4]
    1a3a:	9902      	ldr	r1, [sp, #8]
    1a3c:	9803      	ldr	r0, [sp, #12]
    1a3e:	f7ff ff91 	bl	1964 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a42:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a46:	4618      	mov	r0, r3
    1a48:	b007      	add	sp, #28
    1a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    1a4e:	bf00      	nop

00001a50 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a50:	b500      	push	{lr}
    1a52:	b085      	sub	sp, #20
    1a54:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a56:	2300      	movs	r3, #0
    1a58:	9303      	str	r3, [sp, #12]
    1a5a:	e05d      	b.n	1b18 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a5c:	9b01      	ldr	r3, [sp, #4]
    1a5e:	6859      	ldr	r1, [r3, #4]
    1a60:	9a03      	ldr	r2, [sp, #12]
    1a62:	4613      	mov	r3, r2
    1a64:	005b      	lsls	r3, r3, #1
    1a66:	4413      	add	r3, r2
    1a68:	009b      	lsls	r3, r3, #2
    1a6a:	440b      	add	r3, r1
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	4618      	mov	r0, r3
    1a70:	f7ff ff3d 	bl	18ee <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a74:	9b01      	ldr	r3, [sp, #4]
    1a76:	6859      	ldr	r1, [r3, #4]
    1a78:	9a03      	ldr	r2, [sp, #12]
    1a7a:	4613      	mov	r3, r2
    1a7c:	005b      	lsls	r3, r3, #1
    1a7e:	4413      	add	r3, r2
    1a80:	009b      	lsls	r3, r3, #2
    1a82:	440b      	add	r3, r1
    1a84:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a86:	9b01      	ldr	r3, [sp, #4]
    1a88:	6859      	ldr	r1, [r3, #4]
    1a8a:	9a03      	ldr	r2, [sp, #12]
    1a8c:	4613      	mov	r3, r2
    1a8e:	005b      	lsls	r3, r3, #1
    1a90:	4413      	add	r3, r2
    1a92:	009b      	lsls	r3, r3, #2
    1a94:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a96:	795b      	ldrb	r3, [r3, #5]
    1a98:	4619      	mov	r1, r3
    1a9a:	f7ff ff0d 	bl	18b8 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a9e:	9b01      	ldr	r3, [sp, #4]
    1aa0:	6859      	ldr	r1, [r3, #4]
    1aa2:	9a03      	ldr	r2, [sp, #12]
    1aa4:	4613      	mov	r3, r2
    1aa6:	005b      	lsls	r3, r3, #1
    1aa8:	4413      	add	r3, r2
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	440b      	add	r3, r1
    1aae:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1ab0:	9b01      	ldr	r3, [sp, #4]
    1ab2:	6859      	ldr	r1, [r3, #4]
    1ab4:	9a03      	ldr	r2, [sp, #12]
    1ab6:	4613      	mov	r3, r2
    1ab8:	005b      	lsls	r3, r3, #1
    1aba:	4413      	add	r3, r2
    1abc:	009b      	lsls	r3, r3, #2
    1abe:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ac0:	689b      	ldr	r3, [r3, #8]
    1ac2:	2200      	movs	r2, #0
    1ac4:	4619      	mov	r1, r3
    1ac6:	f7ff fed5 	bl	1874 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1aca:	9b01      	ldr	r3, [sp, #4]
    1acc:	6859      	ldr	r1, [r3, #4]
    1ace:	9a03      	ldr	r2, [sp, #12]
    1ad0:	4613      	mov	r3, r2
    1ad2:	005b      	lsls	r3, r3, #1
    1ad4:	4413      	add	r3, r2
    1ad6:	009b      	lsls	r3, r3, #2
    1ad8:	440b      	add	r3, r1
    1ada:	791b      	ldrb	r3, [r3, #4]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d00c      	beq.n	1afa <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ae0:	9b01      	ldr	r3, [sp, #4]
    1ae2:	6859      	ldr	r1, [r3, #4]
    1ae4:	9a03      	ldr	r2, [sp, #12]
    1ae6:	4613      	mov	r3, r2
    1ae8:	005b      	lsls	r3, r3, #1
    1aea:	4413      	add	r3, r2
    1aec:	009b      	lsls	r3, r3, #2
    1aee:	440b      	add	r3, r1
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	4618      	mov	r0, r3
    1af4:	f7ff fecc 	bl	1890 <IntCtrl_Ip_EnableIrq>
    1af8:	e00b      	b.n	1b12 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1afa:	9b01      	ldr	r3, [sp, #4]
    1afc:	6859      	ldr	r1, [r3, #4]
    1afe:	9a03      	ldr	r2, [sp, #12]
    1b00:	4613      	mov	r3, r2
    1b02:	005b      	lsls	r3, r3, #1
    1b04:	4413      	add	r3, r2
    1b06:	009b      	lsls	r3, r3, #2
    1b08:	440b      	add	r3, r1
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	4618      	mov	r0, r3
    1b0e:	f7ff fec9 	bl	18a4 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1b12:	9b03      	ldr	r3, [sp, #12]
    1b14:	3301      	adds	r3, #1
    1b16:	9303      	str	r3, [sp, #12]
    1b18:	9b01      	ldr	r3, [sp, #4]
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	9a03      	ldr	r2, [sp, #12]
    1b1e:	429a      	cmp	r2, r3
    1b20:	d39c      	bcc.n	1a5c <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1b22:	2300      	movs	r3, #0
}
    1b24:	4618      	mov	r0, r3
    1b26:	b005      	add	sp, #20
    1b28:	f85d fb04 	ldr.w	pc, [sp], #4

00001b2c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b2c:	b500      	push	{lr}
    1b2e:	b085      	sub	sp, #20
    1b30:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b32:	2300      	movs	r3, #0
    1b34:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b38:	9b01      	ldr	r3, [sp, #4]
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d007      	beq.n	1b50 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b40:	9b01      	ldr	r3, [sp, #4]
    1b42:	681b      	ldr	r3, [r3, #0]
    1b44:	4618      	mov	r0, r3
    1b46:	f7ff ff83 	bl	1a50 <Platform_Ipw_InitIntCtrl>
    1b4a:	4603      	mov	r3, r0
    1b4c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b54:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b56:	bf00      	nop
    1b58:	b005      	add	sp, #20
    1b5a:	f85d fb04 	ldr.w	pc, [sp], #4

00001b5e <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b5e:	2300      	movs	r3, #0
}
    1b60:	4618      	mov	r0, r3
    1b62:	4770      	bx	lr

00001b64 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b64:	b082      	sub	sp, #8
    1b66:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b68:	2301      	movs	r3, #1
}
    1b6a:	4618      	mov	r0, r3
    1b6c:	b002      	add	sp, #8
    1b6e:	4770      	bx	lr

00001b70 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b70:	b082      	sub	sp, #8
    1b72:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b74:	bf00      	nop
    1b76:	b002      	add	sp, #8
    1b78:	4770      	bx	lr

00001b7a <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b7a:	b082      	sub	sp, #8
    1b7c:	9001      	str	r0, [sp, #4]
    return Micros;
    1b7e:	9b01      	ldr	r3, [sp, #4]
}
    1b80:	4618      	mov	r0, r3
    1b82:	b002      	add	sp, #8
    1b84:	4770      	bx	lr

00001b86 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b86:	b500      	push	{lr}
    1b88:	b083      	sub	sp, #12
    1b8a:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b8c:	f000 f86c 	bl	1c68 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b90:	bf00      	nop
    1b92:	b003      	add	sp, #12
    1b94:	f85d fb04 	ldr.w	pc, [sp], #4

00001b98 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b98:	b500      	push	{lr}
    1b9a:	b085      	sub	sp, #20
    1b9c:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b9e:	2300      	movs	r3, #0
    1ba0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1ba2:	9b01      	ldr	r3, [sp, #4]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d003      	beq.n	1bb0 <OsIf_GetCounter+0x18>
    1ba8:	9b01      	ldr	r3, [sp, #4]
    1baa:	2b01      	cmp	r3, #1
    1bac:	d004      	beq.n	1bb8 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bae:	e007      	b.n	1bc0 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1bb0:	f7ff ffd5 	bl	1b5e <OsIf_Timer_Dummy_GetCounter>
    1bb4:	9003      	str	r0, [sp, #12]
            break;
    1bb6:	e003      	b.n	1bc0 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1bb8:	f000 f872 	bl	1ca0 <OsIf_Timer_System_GetCounter>
    1bbc:	9003      	str	r0, [sp, #12]
            break;
    1bbe:	bf00      	nop
    }

    return Value;
    1bc0:	9b03      	ldr	r3, [sp, #12]
}
    1bc2:	4618      	mov	r0, r3
    1bc4:	b005      	add	sp, #20
    1bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00001bca <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1bca:	b500      	push	{lr}
    1bcc:	b085      	sub	sp, #20
    1bce:	9001      	str	r0, [sp, #4]
    1bd0:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1bd2:	2300      	movs	r3, #0
    1bd4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bd6:	9b00      	ldr	r3, [sp, #0]
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d003      	beq.n	1be4 <OsIf_GetElapsed+0x1a>
    1bdc:	9b00      	ldr	r3, [sp, #0]
    1bde:	2b01      	cmp	r3, #1
    1be0:	d005      	beq.n	1bee <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1be2:	e009      	b.n	1bf8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1be4:	9801      	ldr	r0, [sp, #4]
    1be6:	f7ff ffbd 	bl	1b64 <OsIf_Timer_Dummy_GetElapsed>
    1bea:	9003      	str	r0, [sp, #12]
            break;
    1bec:	e004      	b.n	1bf8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1bee:	9801      	ldr	r0, [sp, #4]
    1bf0:	f000 f864 	bl	1cbc <OsIf_Timer_System_GetElapsed>
    1bf4:	9003      	str	r0, [sp, #12]
            break;
    1bf6:	bf00      	nop
    }

    return Value;
    1bf8:	9b03      	ldr	r3, [sp, #12]
}
    1bfa:	4618      	mov	r0, r3
    1bfc:	b005      	add	sp, #20
    1bfe:	f85d fb04 	ldr.w	pc, [sp], #4

00001c02 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1c02:	b500      	push	{lr}
    1c04:	b083      	sub	sp, #12
    1c06:	9001      	str	r0, [sp, #4]
    1c08:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1c0a:	9b00      	ldr	r3, [sp, #0]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d003      	beq.n	1c18 <OsIf_SetTimerFrequency+0x16>
    1c10:	9b00      	ldr	r3, [sp, #0]
    1c12:	2b01      	cmp	r3, #1
    1c14:	d004      	beq.n	1c20 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c16:	e007      	b.n	1c28 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c18:	9801      	ldr	r0, [sp, #4]
    1c1a:	f7ff ffa9 	bl	1b70 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c1e:	e003      	b.n	1c28 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c20:	9801      	ldr	r0, [sp, #4]
    1c22:	f000 f85b 	bl	1cdc <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c26:	bf00      	nop
    }
}
    1c28:	bf00      	nop
    1c2a:	b003      	add	sp, #12
    1c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001c30 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c30:	b500      	push	{lr}
    1c32:	b085      	sub	sp, #20
    1c34:	9001      	str	r0, [sp, #4]
    1c36:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c38:	2300      	movs	r3, #0
    1c3a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c3c:	9b00      	ldr	r3, [sp, #0]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d003      	beq.n	1c4a <OsIf_MicrosToTicks+0x1a>
    1c42:	9b00      	ldr	r3, [sp, #0]
    1c44:	2b01      	cmp	r3, #1
    1c46:	d005      	beq.n	1c54 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c48:	e009      	b.n	1c5e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c4a:	9801      	ldr	r0, [sp, #4]
    1c4c:	f7ff ff95 	bl	1b7a <OsIf_Timer_Dummy_MicrosToTicks>
    1c50:	9003      	str	r0, [sp, #12]
            break;
    1c52:	e004      	b.n	1c5e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c54:	9801      	ldr	r0, [sp, #4]
    1c56:	f000 f84f 	bl	1cf8 <OsIf_Timer_System_MicrosToTicks>
    1c5a:	9003      	str	r0, [sp, #12]
            break;
    1c5c:	bf00      	nop
    }

    return Value;
    1c5e:	9b03      	ldr	r3, [sp, #12]
}
    1c60:	4618      	mov	r0, r3
    1c62:	b005      	add	sp, #20
    1c64:	f85d fb04 	ldr.w	pc, [sp], #4

00001c68 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c68:	b500      	push	{lr}
    1c6a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c6c:	2300      	movs	r3, #0
    1c6e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c70:	4a09      	ldr	r2, [pc, #36]	; (1c98 <OsIf_Timer_System_Init+0x30>)
    1c72:	9b01      	ldr	r3, [sp, #4]
    1c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c78:	685a      	ldr	r2, [r3, #4]
    1c7a:	4908      	ldr	r1, [pc, #32]	; (1c9c <OsIf_Timer_System_Init+0x34>)
    1c7c:	9b01      	ldr	r3, [sp, #4]
    1c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c82:	4a06      	ldr	r2, [pc, #24]	; (1c9c <OsIf_Timer_System_Init+0x34>)
    1c84:	9b01      	ldr	r3, [sp, #4]
    1c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c8a:	4618      	mov	r0, r3
    1c8c:	f000 f868 	bl	1d60 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c90:	bf00      	nop
    1c92:	b003      	add	sp, #12
    1c94:	f85d fb04 	ldr.w	pc, [sp], #4
    1c98:	000157f8 	.word	0x000157f8
    1c9c:	1fff8b40 	.word	0x1fff8b40

00001ca0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1ca0:	b500      	push	{lr}
    1ca2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1ca4:	2300      	movs	r3, #0
    1ca6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ca8:	2300      	movs	r3, #0
    1caa:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1cac:	f000 f86c 	bl	1d88 <OsIf_Timer_System_Internal_GetCounter>
    1cb0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1cb2:	9b01      	ldr	r3, [sp, #4]
}
    1cb4:	4618      	mov	r0, r3
    1cb6:	b003      	add	sp, #12
    1cb8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cbc <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1cbc:	b500      	push	{lr}
    1cbe:	b085      	sub	sp, #20
    1cc0:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1cc2:	2300      	movs	r3, #0
    1cc4:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1cc6:	2300      	movs	r3, #0
    1cc8:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1cca:	9801      	ldr	r0, [sp, #4]
    1ccc:	f000 f864 	bl	1d98 <OsIf_Timer_System_Internal_GetElapsed>
    1cd0:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1cd2:	9b03      	ldr	r3, [sp, #12]
}
    1cd4:	4618      	mov	r0, r3
    1cd6:	b005      	add	sp, #20
    1cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cdc <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cdc:	b084      	sub	sp, #16
    1cde:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ce0:	2300      	movs	r3, #0
    1ce2:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1ce4:	4903      	ldr	r1, [pc, #12]	; (1cf4 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1ce6:	9b03      	ldr	r3, [sp, #12]
    1ce8:	9a01      	ldr	r2, [sp, #4]
    1cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1cee:	bf00      	nop
    1cf0:	b004      	add	sp, #16
    1cf2:	4770      	bx	lr
    1cf4:	1fff8b40 	.word	0x1fff8b40

00001cf8 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfa:	b087      	sub	sp, #28
    1cfc:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1cfe:	2100      	movs	r1, #0
    1d00:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1d02:	2100      	movs	r1, #0
    1d04:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1d06:	9901      	ldr	r1, [sp, #4]
    1d08:	2000      	movs	r0, #0
    1d0a:	460e      	mov	r6, r1
    1d0c:	4607      	mov	r7, r0
    1d0e:	4812      	ldr	r0, [pc, #72]	; (1d58 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1d10:	9904      	ldr	r1, [sp, #16]
    1d12:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d16:	2000      	movs	r0, #0
    1d18:	460c      	mov	r4, r1
    1d1a:	4605      	mov	r5, r0
    1d1c:	fb04 f007 	mul.w	r0, r4, r7
    1d20:	fb06 f105 	mul.w	r1, r6, r5
    1d24:	4401      	add	r1, r0
    1d26:	fba6 2304 	umull	r2, r3, r6, r4
    1d2a:	4419      	add	r1, r3
    1d2c:	460b      	mov	r3, r1
    1d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d32:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d3a:	4a08      	ldr	r2, [pc, #32]	; (1d5c <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d3c:	f04f 0300 	mov.w	r3, #0
    1d40:	f7fe fc30 	bl	5a4 <__aeabi_uldivmod>
    1d44:	4602      	mov	r2, r0
    1d46:	460b      	mov	r3, r1
    1d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d4c:	9b02      	ldr	r3, [sp, #8]
    1d4e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d50:	9b05      	ldr	r3, [sp, #20]
}
    1d52:	4618      	mov	r0, r3
    1d54:	b007      	add	sp, #28
    1d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d58:	1fff8b40 	.word	0x1fff8b40
    1d5c:	000f4240 	.word	0x000f4240

00001d60 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d60:	b082      	sub	sp, #8
    1d62:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d64:	4b07      	ldr	r3, [pc, #28]	; (1d84 <OsIf_Timer_System_Internal_Init+0x24>)
    1d66:	2200      	movs	r2, #0
    1d68:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d6a:	4b06      	ldr	r3, [pc, #24]	; (1d84 <OsIf_Timer_System_Internal_Init+0x24>)
    1d6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d70:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d72:	4b04      	ldr	r3, [pc, #16]	; (1d84 <OsIf_Timer_System_Internal_Init+0x24>)
    1d74:	2200      	movs	r2, #0
    1d76:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d78:	4b02      	ldr	r3, [pc, #8]	; (1d84 <OsIf_Timer_System_Internal_Init+0x24>)
    1d7a:	2205      	movs	r2, #5
    1d7c:	601a      	str	r2, [r3, #0]
}
    1d7e:	bf00      	nop
    1d80:	b002      	add	sp, #8
    1d82:	4770      	bx	lr
    1d84:	e000e010 	.word	0xe000e010

00001d88 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d88:	4b02      	ldr	r3, [pc, #8]	; (1d94 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d8a:	689b      	ldr	r3, [r3, #8]
    1d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d90:	4618      	mov	r0, r3
    1d92:	4770      	bx	lr
    1d94:	e000e010 	.word	0xe000e010

00001d98 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d98:	b084      	sub	sp, #16
    1d9a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d9c:	4b10      	ldr	r3, [pc, #64]	; (1de0 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d9e:	689b      	ldr	r3, [r3, #8]
    1da0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1da4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1da6:	2300      	movs	r3, #0
    1da8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1daa:	9b01      	ldr	r3, [sp, #4]
    1dac:	681b      	ldr	r3, [r3, #0]
    1dae:	9a02      	ldr	r2, [sp, #8]
    1db0:	429a      	cmp	r2, r3
    1db2:	d909      	bls.n	1dc8 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1db4:	9b01      	ldr	r3, [sp, #4]
    1db6:	681a      	ldr	r2, [r3, #0]
    1db8:	9b02      	ldr	r3, [sp, #8]
    1dba:	1ad3      	subs	r3, r2, r3
    1dbc:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1dc0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1dc4:	9303      	str	r3, [sp, #12]
    1dc6:	e004      	b.n	1dd2 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1dc8:	9b01      	ldr	r3, [sp, #4]
    1dca:	681a      	ldr	r2, [r3, #0]
    1dcc:	9b02      	ldr	r3, [sp, #8]
    1dce:	1ad3      	subs	r3, r2, r3
    1dd0:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1dd2:	9b01      	ldr	r3, [sp, #4]
    1dd4:	9a02      	ldr	r2, [sp, #8]
    1dd6:	601a      	str	r2, [r3, #0]

    return dif;
    1dd8:	9b03      	ldr	r3, [sp, #12]
}
    1dda:	4618      	mov	r0, r3
    1ddc:	b004      	add	sp, #16
    1dde:	4770      	bx	lr
    1de0:	e000e010 	.word	0xe000e010

00001de4 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1de4:	b082      	sub	sp, #8
    1de6:	9001      	str	r0, [sp, #4]
    1de8:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1dea:	bf00      	nop
    1dec:	b002      	add	sp, #8
    1dee:	4770      	bx	lr

00001df0 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1df0:	b500      	push	{lr}
    1df2:	b085      	sub	sp, #20
    1df4:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1df6:	4b24      	ldr	r3, [pc, #144]	; (1e88 <Clock_Ip_UpdateDriverContext+0x98>)
    1df8:	2201      	movs	r2, #1
    1dfa:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1dfc:	4b23      	ldr	r3, [pc, #140]	; (1e8c <Clock_Ip_UpdateDriverContext+0x9c>)
    1dfe:	681b      	ldr	r3, [r3, #0]
    1e00:	2102      	movs	r1, #2
    1e02:	4618      	mov	r0, r3
    1e04:	f003 fc32 	bl	566c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e08:	2300      	movs	r3, #0
    1e0a:	f88d 300f 	strb.w	r3, [sp, #15]
    1e0e:	e015      	b.n	1e3c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1e10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e14:	9a01      	ldr	r2, [sp, #4]
    1e16:	334a      	adds	r3, #74	; 0x4a
    1e18:	00db      	lsls	r3, r3, #3
    1e1a:	4413      	add	r3, r2
    1e1c:	6858      	ldr	r0, [r3, #4]
    1e1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e22:	9a01      	ldr	r2, [sp, #4]
    1e24:	334a      	adds	r3, #74	; 0x4a
    1e26:	00db      	lsls	r3, r3, #3
    1e28:	4413      	add	r3, r2
    1e2a:	689b      	ldr	r3, [r3, #8]
    1e2c:	4619      	mov	r1, r3
    1e2e:	f001 fadc 	bl	33ea <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e32:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e36:	3301      	adds	r3, #1
    1e38:	f88d 300f 	strb.w	r3, [sp, #15]
    1e3c:	9b01      	ldr	r3, [sp, #4]
    1e3e:	7bdb      	ldrb	r3, [r3, #15]
    1e40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e44:	429a      	cmp	r2, r3
    1e46:	d3e3      	bcc.n	1e10 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e48:	f000 f824 	bl	1e94 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e4c:	2301      	movs	r3, #1
    1e4e:	f88d 300f 	strb.w	r3, [sp, #15]
    1e52:	e00e      	b.n	1e72 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e54:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e58:	9b01      	ldr	r3, [sp, #4]
    1e5a:	327e      	adds	r2, #126	; 0x7e
    1e5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e60:	490b      	ldr	r1, [pc, #44]	; (1e90 <Clock_Ip_UpdateDriverContext+0xa0>)
    1e62:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e66:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e6c:	3301      	adds	r3, #1
    1e6e:	f88d 300f 	strb.w	r3, [sp, #15]
    1e72:	9b01      	ldr	r3, [sp, #4]
    1e74:	7cdb      	ldrb	r3, [r3, #19]
    1e76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e7a:	429a      	cmp	r2, r3
    1e7c:	d3ea      	bcc.n	1e54 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e7e:	bf00      	nop
    1e80:	bf00      	nop
    1e82:	b005      	add	sp, #20
    1e84:	f85d fb04 	ldr.w	pc, [sp], #4
    1e88:	1fff8b10 	.word	0x1fff8b10
    1e8c:	1fff8b44 	.word	0x1fff8b44
    1e90:	1fff8b50 	.word	0x1fff8b50

00001e94 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e94:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e96:	4b23      	ldr	r3, [pc, #140]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e98:	781b      	ldrb	r3, [r3, #0]
    1e9a:	f083 0301 	eor.w	r3, r3, #1
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d03d      	beq.n	1f20 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1ea4:	4b1f      	ldr	r3, [pc, #124]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1ea6:	2201      	movs	r2, #1
    1ea8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1eaa:	4b1f      	ldr	r3, [pc, #124]	; (1f28 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1eac:	685b      	ldr	r3, [r3, #4]
    1eae:	2100      	movs	r1, #0
    1eb0:	2000      	movs	r0, #0
    1eb2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1eb4:	4b1c      	ldr	r3, [pc, #112]	; (1f28 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1eb6:	689b      	ldr	r3, [r3, #8]
    1eb8:	2057      	movs	r0, #87	; 0x57
    1eba:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ebc:	4b1b      	ldr	r3, [pc, #108]	; (1f2c <Clock_Ip_CallEmptyCallbacks+0x98>)
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	2000      	movs	r0, #0
    1ec2:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1ec4:	4b1a      	ldr	r3, [pc, #104]	; (1f30 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1ec6:	681b      	ldr	r3, [r3, #0]
    1ec8:	2000      	movs	r0, #0
    1eca:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1ecc:	4b19      	ldr	r3, [pc, #100]	; (1f34 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	2000      	movs	r0, #0
    1ed2:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ed4:	4b18      	ldr	r3, [pc, #96]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1ed6:	685b      	ldr	r3, [r3, #4]
    1ed8:	2000      	movs	r0, #0
    1eda:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1edc:	4b16      	ldr	r3, [pc, #88]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1ede:	689b      	ldr	r3, [r3, #8]
    1ee0:	2057      	movs	r0, #87	; 0x57
    1ee2:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ee4:	4b15      	ldr	r3, [pc, #84]	; (1f3c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	2000      	movs	r0, #0
    1eea:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1eec:	4b13      	ldr	r3, [pc, #76]	; (1f3c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1eee:	685b      	ldr	r3, [r3, #4]
    1ef0:	2100      	movs	r1, #0
    1ef2:	2057      	movs	r0, #87	; 0x57
    1ef4:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ef6:	4b12      	ldr	r3, [pc, #72]	; (1f40 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	2000      	movs	r0, #0
    1efc:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1efe:	4b11      	ldr	r3, [pc, #68]	; (1f44 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f00:	685b      	ldr	r3, [r3, #4]
    1f02:	2000      	movs	r0, #0
    1f04:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f06:	4b0f      	ldr	r3, [pc, #60]	; (1f44 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f08:	689b      	ldr	r3, [r3, #8]
    1f0a:	2057      	movs	r0, #87	; 0x57
    1f0c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f0e:	4b0e      	ldr	r3, [pc, #56]	; (1f48 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1f10:	685b      	ldr	r3, [r3, #4]
    1f12:	2000      	movs	r0, #0
    1f14:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f16:	4b0d      	ldr	r3, [pc, #52]	; (1f4c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	2100      	movs	r1, #0
    1f1c:	2000      	movs	r0, #0
    1f1e:	4798      	blx	r3
    }
}
    1f20:	bf00      	nop
    1f22:	bd08      	pop	{r3, pc}
    1f24:	1fff8b48 	.word	0x1fff8b48
    1f28:	000150a4 	.word	0x000150a4
    1f2c:	00014fb8 	.word	0x00014fb8
    1f30:	00014ff4 	.word	0x00014ff4
    1f34:	00014ffc 	.word	0x00014ffc
    1f38:	00015024 	.word	0x00015024
    1f3c:	00015030 	.word	0x00015030
    1f40:	00015068 	.word	0x00015068
    1f44:	000150b4 	.word	0x000150b4
    1f48:	000150e0 	.word	0x000150e0
    1f4c:	000150dc 	.word	0x000150dc

00001f50 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f50:	b500      	push	{lr}
    1f52:	b085      	sub	sp, #20
    1f54:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	7adb      	ldrb	r3, [r3, #11]
    1f5a:	9303      	str	r3, [sp, #12]
    1f5c:	e01f      	b.n	1f9e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f5e:	9b03      	ldr	r3, [sp, #12]
    1f60:	1e5a      	subs	r2, r3, #1
    1f62:	9b01      	ldr	r3, [sp, #4]
    1f64:	320d      	adds	r2, #13
    1f66:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f6a:	495a      	ldr	r1, [pc, #360]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f6c:	4613      	mov	r3, r2
    1f6e:	00db      	lsls	r3, r3, #3
    1f70:	4413      	add	r3, r2
    1f72:	440b      	add	r3, r1
    1f74:	3301      	adds	r3, #1
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	461a      	mov	r2, r3
    1f7a:	4b57      	ldr	r3, [pc, #348]	; (20d8 <Clock_Ip_ResetClockConfiguration+0x188>)
    1f7c:	5c9b      	ldrb	r3, [r3, r2]
    1f7e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f80:	4a56      	ldr	r2, [pc, #344]	; (20dc <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f82:	9b02      	ldr	r3, [sp, #8]
    1f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f88:	9a03      	ldr	r2, [sp, #12]
    1f8a:	3a01      	subs	r2, #1
    1f8c:	320d      	adds	r2, #13
    1f8e:	00d2      	lsls	r2, r2, #3
    1f90:	9901      	ldr	r1, [sp, #4]
    1f92:	440a      	add	r2, r1
    1f94:	4610      	mov	r0, r2
    1f96:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f98:	9b03      	ldr	r3, [sp, #12]
    1f9a:	3b01      	subs	r3, #1
    1f9c:	9303      	str	r3, [sp, #12]
    1f9e:	9b03      	ldr	r3, [sp, #12]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d1dc      	bne.n	1f5e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fa4:	9b01      	ldr	r3, [sp, #4]
    1fa6:	7b9b      	ldrb	r3, [r3, #14]
    1fa8:	9303      	str	r3, [sp, #12]
    1faa:	e026      	b.n	1ffa <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fac:	9b03      	ldr	r3, [sp, #12]
    1fae:	3b01      	subs	r3, #1
    1fb0:	9a01      	ldr	r2, [sp, #4]
    1fb2:	3324      	adds	r3, #36	; 0x24
    1fb4:	011b      	lsls	r3, r3, #4
    1fb6:	4413      	add	r3, r2
    1fb8:	3304      	adds	r3, #4
    1fba:	681a      	ldr	r2, [r3, #0]
    1fbc:	4945      	ldr	r1, [pc, #276]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fbe:	4613      	mov	r3, r2
    1fc0:	00db      	lsls	r3, r3, #3
    1fc2:	4413      	add	r3, r2
    1fc4:	440b      	add	r3, r1
    1fc6:	3301      	adds	r3, #1
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	461a      	mov	r2, r3
    1fcc:	4b44      	ldr	r3, [pc, #272]	; (20e0 <Clock_Ip_ResetClockConfiguration+0x190>)
    1fce:	5c9b      	ldrb	r3, [r3, r2]
    1fd0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1fd2:	4944      	ldr	r1, [pc, #272]	; (20e4 <Clock_Ip_ResetClockConfiguration+0x194>)
    1fd4:	9a02      	ldr	r2, [sp, #8]
    1fd6:	4613      	mov	r3, r2
    1fd8:	005b      	lsls	r3, r3, #1
    1fda:	4413      	add	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	440b      	add	r3, r1
    1fe0:	681b      	ldr	r3, [r3, #0]
    1fe2:	9a03      	ldr	r2, [sp, #12]
    1fe4:	3a01      	subs	r2, #1
    1fe6:	3224      	adds	r2, #36	; 0x24
    1fe8:	0112      	lsls	r2, r2, #4
    1fea:	9901      	ldr	r1, [sp, #4]
    1fec:	440a      	add	r2, r1
    1fee:	3204      	adds	r2, #4
    1ff0:	4610      	mov	r0, r2
    1ff2:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1ff4:	9b03      	ldr	r3, [sp, #12]
    1ff6:	3b01      	subs	r3, #1
    1ff8:	9303      	str	r3, [sp, #12]
    1ffa:	9b03      	ldr	r3, [sp, #12]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d1d5      	bne.n	1fac <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2000:	9b01      	ldr	r3, [sp, #4]
    2002:	7a9b      	ldrb	r3, [r3, #10]
    2004:	9303      	str	r3, [sp, #12]
    2006:	e02a      	b.n	205e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2008:	9b03      	ldr	r3, [sp, #12]
    200a:	1e5a      	subs	r2, r3, #1
    200c:	9901      	ldr	r1, [sp, #4]
    200e:	4613      	mov	r3, r2
    2010:	009b      	lsls	r3, r3, #2
    2012:	4413      	add	r3, r2
    2014:	00db      	lsls	r3, r3, #3
    2016:	440b      	add	r3, r1
    2018:	3340      	adds	r3, #64	; 0x40
    201a:	681a      	ldr	r2, [r3, #0]
    201c:	492d      	ldr	r1, [pc, #180]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x184>)
    201e:	4613      	mov	r3, r2
    2020:	00db      	lsls	r3, r3, #3
    2022:	4413      	add	r3, r2
    2024:	440b      	add	r3, r1
    2026:	3301      	adds	r3, #1
    2028:	781b      	ldrb	r3, [r3, #0]
    202a:	461a      	mov	r2, r3
    202c:	4b2e      	ldr	r3, [pc, #184]	; (20e8 <Clock_Ip_ResetClockConfiguration+0x198>)
    202e:	5c9b      	ldrb	r3, [r3, r2]
    2030:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2032:	492e      	ldr	r1, [pc, #184]	; (20ec <Clock_Ip_ResetClockConfiguration+0x19c>)
    2034:	9a02      	ldr	r2, [sp, #8]
    2036:	4613      	mov	r3, r2
    2038:	009b      	lsls	r3, r3, #2
    203a:	4413      	add	r3, r2
    203c:	009b      	lsls	r3, r3, #2
    203e:	440b      	add	r3, r1
    2040:	6819      	ldr	r1, [r3, #0]
    2042:	9b03      	ldr	r3, [sp, #12]
    2044:	1e5a      	subs	r2, r3, #1
    2046:	4613      	mov	r3, r2
    2048:	009b      	lsls	r3, r3, #2
    204a:	4413      	add	r3, r2
    204c:	00db      	lsls	r3, r3, #3
    204e:	3340      	adds	r3, #64	; 0x40
    2050:	9a01      	ldr	r2, [sp, #4]
    2052:	4413      	add	r3, r2
    2054:	4618      	mov	r0, r3
    2056:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2058:	9b03      	ldr	r3, [sp, #12]
    205a:	3b01      	subs	r3, #1
    205c:	9303      	str	r3, [sp, #12]
    205e:	9b03      	ldr	r3, [sp, #12]
    2060:	2b00      	cmp	r3, #0
    2062:	d1d1      	bne.n	2008 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2064:	9b01      	ldr	r3, [sp, #4]
    2066:	7a5b      	ldrb	r3, [r3, #9]
    2068:	9303      	str	r3, [sp, #12]
    206a:	e02b      	b.n	20c4 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    206c:	9b03      	ldr	r3, [sp, #12]
    206e:	1e5a      	subs	r2, r3, #1
    2070:	9901      	ldr	r1, [sp, #4]
    2072:	4613      	mov	r3, r2
    2074:	009b      	lsls	r3, r3, #2
    2076:	4413      	add	r3, r2
    2078:	009b      	lsls	r3, r3, #2
    207a:	440b      	add	r3, r1
    207c:	332c      	adds	r3, #44	; 0x2c
    207e:	681a      	ldr	r2, [r3, #0]
    2080:	4914      	ldr	r1, [pc, #80]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x184>)
    2082:	4613      	mov	r3, r2
    2084:	00db      	lsls	r3, r3, #3
    2086:	4413      	add	r3, r2
    2088:	440b      	add	r3, r1
    208a:	3301      	adds	r3, #1
    208c:	781b      	ldrb	r3, [r3, #0]
    208e:	461a      	mov	r2, r3
    2090:	4b17      	ldr	r3, [pc, #92]	; (20f0 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2092:	5c9b      	ldrb	r3, [r3, r2]
    2094:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2096:	4917      	ldr	r1, [pc, #92]	; (20f4 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2098:	9a02      	ldr	r2, [sp, #8]
    209a:	4613      	mov	r3, r2
    209c:	009b      	lsls	r3, r3, #2
    209e:	4413      	add	r3, r2
    20a0:	009b      	lsls	r3, r3, #2
    20a2:	440b      	add	r3, r1
    20a4:	6819      	ldr	r1, [r3, #0]
    20a6:	9b03      	ldr	r3, [sp, #12]
    20a8:	1e5a      	subs	r2, r3, #1
    20aa:	4613      	mov	r3, r2
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	4413      	add	r3, r2
    20b0:	009b      	lsls	r3, r3, #2
    20b2:	3328      	adds	r3, #40	; 0x28
    20b4:	9a01      	ldr	r2, [sp, #4]
    20b6:	4413      	add	r3, r2
    20b8:	3304      	adds	r3, #4
    20ba:	4618      	mov	r0, r3
    20bc:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20be:	9b03      	ldr	r3, [sp, #12]
    20c0:	3b01      	subs	r3, #1
    20c2:	9303      	str	r3, [sp, #12]
    20c4:	9b03      	ldr	r3, [sp, #12]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d1d0      	bne.n	206c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    20ca:	bf00      	nop
    20cc:	bf00      	nop
    20ce:	b005      	add	sp, #20
    20d0:	f85d fb04 	ldr.w	pc, [sp], #4
    20d4:	00014aa8 	.word	0x00014aa8
    20d8:	00014a78 	.word	0x00014a78
    20dc:	000150e0 	.word	0x000150e0
    20e0:	00014a58 	.word	0x00014a58
    20e4:	00015024 	.word	0x00015024
    20e8:	00014a68 	.word	0x00014a68
    20ec:	000150b4 	.word	0x000150b4
    20f0:	00014a28 	.word	0x00014a28
    20f4:	00014ffc 	.word	0x00014ffc

000020f8 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    20f8:	b500      	push	{lr}
    20fa:	b085      	sub	sp, #20
    20fc:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    20fe:	2301      	movs	r3, #1
    2100:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2102:	9801      	ldr	r0, [sp, #4]
    2104:	f000 f818 	bl	2138 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2108:	4b0a      	ldr	r3, [pc, #40]	; (2134 <Clock_Ip_Init+0x3c>)
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	2b00      	cmp	r3, #0
    210e:	d00a      	beq.n	2126 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2110:	f000 fb74 	bl	27fc <Clock_Ip_GetPllStatus>
    2114:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2116:	9b02      	ldr	r3, [sp, #8]
    2118:	2b00      	cmp	r3, #0
    211a:	d106      	bne.n	212a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    211c:	f000 fbf2 	bl	2904 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2120:	2300      	movs	r3, #0
    2122:	9303      	str	r3, [sp, #12]
    2124:	e001      	b.n	212a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2126:	2300      	movs	r3, #0
    2128:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    212a:	9b03      	ldr	r3, [sp, #12]
}
    212c:	4618      	mov	r0, r3
    212e:	b005      	add	sp, #20
    2130:	f85d fb04 	ldr.w	pc, [sp], #4
    2134:	1fff8b4c 	.word	0x1fff8b4c

00002138 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2138:	b510      	push	{r4, lr}
    213a:	b084      	sub	sp, #16
    213c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    213e:	4a9f      	ldr	r2, [pc, #636]	; (23bc <Clock_Ip_InitClock+0x284>)
    2140:	9b01      	ldr	r3, [sp, #4]
    2142:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2144:	2101      	movs	r1, #1
    2146:	9801      	ldr	r0, [sp, #4]
    2148:	f003 fa90 	bl	566c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    214c:	4b9b      	ldr	r3, [pc, #620]	; (23bc <Clock_Ip_InitClock+0x284>)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d030      	beq.n	21b6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2154:	2300      	movs	r3, #0
    2156:	9303      	str	r3, [sp, #12]
    2158:	e027      	b.n	21aa <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    215a:	9901      	ldr	r1, [sp, #4]
    215c:	9a03      	ldr	r2, [sp, #12]
    215e:	4613      	mov	r3, r2
    2160:	009b      	lsls	r3, r3, #2
    2162:	4413      	add	r3, r2
    2164:	009b      	lsls	r3, r3, #2
    2166:	440b      	add	r3, r1
    2168:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    216c:	681a      	ldr	r2, [r3, #0]
    216e:	4994      	ldr	r1, [pc, #592]	; (23c0 <Clock_Ip_InitClock+0x288>)
    2170:	4613      	mov	r3, r2
    2172:	00db      	lsls	r3, r3, #3
    2174:	4413      	add	r3, r2
    2176:	440b      	add	r3, r1
    2178:	3301      	adds	r3, #1
    217a:	781b      	ldrb	r3, [r3, #0]
    217c:	461a      	mov	r2, r3
    217e:	4b91      	ldr	r3, [pc, #580]	; (23c4 <Clock_Ip_InitClock+0x28c>)
    2180:	5c9b      	ldrb	r3, [r3, r2]
    2182:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2184:	4a90      	ldr	r2, [pc, #576]	; (23c8 <Clock_Ip_InitClock+0x290>)
    2186:	9b02      	ldr	r3, [sp, #8]
    2188:	011b      	lsls	r3, r3, #4
    218a:	4413      	add	r3, r2
    218c:	6819      	ldr	r1, [r3, #0]
    218e:	9a03      	ldr	r2, [sp, #12]
    2190:	4613      	mov	r3, r2
    2192:	009b      	lsls	r3, r3, #2
    2194:	4413      	add	r3, r2
    2196:	009b      	lsls	r3, r3, #2
    2198:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    219c:	9a01      	ldr	r2, [sp, #4]
    219e:	4413      	add	r3, r2
    21a0:	4618      	mov	r0, r3
    21a2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    21a4:	9b03      	ldr	r3, [sp, #12]
    21a6:	3301      	adds	r3, #1
    21a8:	9303      	str	r3, [sp, #12]
    21aa:	9b01      	ldr	r3, [sp, #4]
    21ac:	7c9b      	ldrb	r3, [r3, #18]
    21ae:	461a      	mov	r2, r3
    21b0:	9b03      	ldr	r3, [sp, #12]
    21b2:	4293      	cmp	r3, r2
    21b4:	d3d1      	bcc.n	215a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21b6:	9801      	ldr	r0, [sp, #4]
    21b8:	f7ff feca 	bl	1f50 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21bc:	2300      	movs	r3, #0
    21be:	9303      	str	r3, [sp, #12]
    21c0:	e029      	b.n	2216 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21c2:	9901      	ldr	r1, [sp, #4]
    21c4:	9a03      	ldr	r2, [sp, #12]
    21c6:	4613      	mov	r3, r2
    21c8:	005b      	lsls	r3, r3, #1
    21ca:	4413      	add	r3, r2
    21cc:	009b      	lsls	r3, r3, #2
    21ce:	440b      	add	r3, r1
    21d0:	3314      	adds	r3, #20
    21d2:	681a      	ldr	r2, [r3, #0]
    21d4:	497a      	ldr	r1, [pc, #488]	; (23c0 <Clock_Ip_InitClock+0x288>)
    21d6:	4613      	mov	r3, r2
    21d8:	00db      	lsls	r3, r3, #3
    21da:	4413      	add	r3, r2
    21dc:	440b      	add	r3, r1
    21de:	3301      	adds	r3, #1
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	461a      	mov	r2, r3
    21e4:	4b79      	ldr	r3, [pc, #484]	; (23cc <Clock_Ip_InitClock+0x294>)
    21e6:	5c9b      	ldrb	r3, [r3, r2]
    21e8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    21ea:	4979      	ldr	r1, [pc, #484]	; (23d0 <Clock_Ip_InitClock+0x298>)
    21ec:	9a02      	ldr	r2, [sp, #8]
    21ee:	4613      	mov	r3, r2
    21f0:	005b      	lsls	r3, r3, #1
    21f2:	4413      	add	r3, r2
    21f4:	009b      	lsls	r3, r3, #2
    21f6:	440b      	add	r3, r1
    21f8:	6819      	ldr	r1, [r3, #0]
    21fa:	9a03      	ldr	r2, [sp, #12]
    21fc:	4613      	mov	r3, r2
    21fe:	005b      	lsls	r3, r3, #1
    2200:	4413      	add	r3, r2
    2202:	009b      	lsls	r3, r3, #2
    2204:	3310      	adds	r3, #16
    2206:	9a01      	ldr	r2, [sp, #4]
    2208:	4413      	add	r3, r2
    220a:	3304      	adds	r3, #4
    220c:	4618      	mov	r0, r3
    220e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2210:	9b03      	ldr	r3, [sp, #12]
    2212:	3301      	adds	r3, #1
    2214:	9303      	str	r3, [sp, #12]
    2216:	9b01      	ldr	r3, [sp, #4]
    2218:	7a1b      	ldrb	r3, [r3, #8]
    221a:	461a      	mov	r2, r3
    221c:	9b03      	ldr	r3, [sp, #12]
    221e:	4293      	cmp	r3, r2
    2220:	d3cf      	bcc.n	21c2 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2222:	2300      	movs	r3, #0
    2224:	9303      	str	r3, [sp, #12]
    2226:	e02a      	b.n	227e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2228:	9901      	ldr	r1, [sp, #4]
    222a:	9a03      	ldr	r2, [sp, #12]
    222c:	4613      	mov	r3, r2
    222e:	009b      	lsls	r3, r3, #2
    2230:	4413      	add	r3, r2
    2232:	009b      	lsls	r3, r3, #2
    2234:	440b      	add	r3, r1
    2236:	332c      	adds	r3, #44	; 0x2c
    2238:	681a      	ldr	r2, [r3, #0]
    223a:	4961      	ldr	r1, [pc, #388]	; (23c0 <Clock_Ip_InitClock+0x288>)
    223c:	4613      	mov	r3, r2
    223e:	00db      	lsls	r3, r3, #3
    2240:	4413      	add	r3, r2
    2242:	440b      	add	r3, r1
    2244:	3301      	adds	r3, #1
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	461a      	mov	r2, r3
    224a:	4b62      	ldr	r3, [pc, #392]	; (23d4 <Clock_Ip_InitClock+0x29c>)
    224c:	5c9b      	ldrb	r3, [r3, r2]
    224e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2250:	4961      	ldr	r1, [pc, #388]	; (23d8 <Clock_Ip_InitClock+0x2a0>)
    2252:	9a02      	ldr	r2, [sp, #8]
    2254:	4613      	mov	r3, r2
    2256:	009b      	lsls	r3, r3, #2
    2258:	4413      	add	r3, r2
    225a:	009b      	lsls	r3, r3, #2
    225c:	440b      	add	r3, r1
    225e:	3304      	adds	r3, #4
    2260:	6819      	ldr	r1, [r3, #0]
    2262:	9a03      	ldr	r2, [sp, #12]
    2264:	4613      	mov	r3, r2
    2266:	009b      	lsls	r3, r3, #2
    2268:	4413      	add	r3, r2
    226a:	009b      	lsls	r3, r3, #2
    226c:	3328      	adds	r3, #40	; 0x28
    226e:	9a01      	ldr	r2, [sp, #4]
    2270:	4413      	add	r3, r2
    2272:	3304      	adds	r3, #4
    2274:	4618      	mov	r0, r3
    2276:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2278:	9b03      	ldr	r3, [sp, #12]
    227a:	3301      	adds	r3, #1
    227c:	9303      	str	r3, [sp, #12]
    227e:	9b01      	ldr	r3, [sp, #4]
    2280:	7a5b      	ldrb	r3, [r3, #9]
    2282:	461a      	mov	r2, r3
    2284:	9b03      	ldr	r3, [sp, #12]
    2286:	4293      	cmp	r3, r2
    2288:	d3ce      	bcc.n	2228 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    228a:	9801      	ldr	r0, [sp, #4]
    228c:	f7ff fdb0 	bl	1df0 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2290:	2300      	movs	r3, #0
    2292:	9303      	str	r3, [sp, #12]
    2294:	e028      	b.n	22e8 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2296:	9901      	ldr	r1, [sp, #4]
    2298:	9a03      	ldr	r2, [sp, #12]
    229a:	4613      	mov	r3, r2
    229c:	009b      	lsls	r3, r3, #2
    229e:	4413      	add	r3, r2
    22a0:	009b      	lsls	r3, r3, #2
    22a2:	440b      	add	r3, r1
    22a4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    22a8:	681a      	ldr	r2, [r3, #0]
    22aa:	4945      	ldr	r1, [pc, #276]	; (23c0 <Clock_Ip_InitClock+0x288>)
    22ac:	4613      	mov	r3, r2
    22ae:	00db      	lsls	r3, r3, #3
    22b0:	4413      	add	r3, r2
    22b2:	440b      	add	r3, r1
    22b4:	3301      	adds	r3, #1
    22b6:	781b      	ldrb	r3, [r3, #0]
    22b8:	461a      	mov	r2, r3
    22ba:	4b48      	ldr	r3, [pc, #288]	; (23dc <Clock_Ip_InitClock+0x2a4>)
    22bc:	5c9b      	ldrb	r3, [r3, r2]
    22be:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    22c0:	4a47      	ldr	r2, [pc, #284]	; (23e0 <Clock_Ip_InitClock+0x2a8>)
    22c2:	9b02      	ldr	r3, [sp, #8]
    22c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    22c8:	9a03      	ldr	r2, [sp, #12]
    22ca:	4613      	mov	r3, r2
    22cc:	009b      	lsls	r3, r3, #2
    22ce:	4413      	add	r3, r2
    22d0:	009b      	lsls	r3, r3, #2
    22d2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22d6:	9a01      	ldr	r2, [sp, #4]
    22d8:	4413      	add	r3, r2
    22da:	3304      	adds	r3, #4
    22dc:	9903      	ldr	r1, [sp, #12]
    22de:	4618      	mov	r0, r3
    22e0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22e2:	9b03      	ldr	r3, [sp, #12]
    22e4:	3301      	adds	r3, #1
    22e6:	9303      	str	r3, [sp, #12]
    22e8:	9b01      	ldr	r3, [sp, #4]
    22ea:	7c5b      	ldrb	r3, [r3, #17]
    22ec:	461a      	mov	r2, r3
    22ee:	9b03      	ldr	r3, [sp, #12]
    22f0:	4293      	cmp	r3, r2
    22f2:	d3d0      	bcc.n	2296 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22f4:	2300      	movs	r3, #0
    22f6:	9303      	str	r3, [sp, #12]
    22f8:	e026      	b.n	2348 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22fa:	9901      	ldr	r1, [sp, #4]
    22fc:	9a03      	ldr	r2, [sp, #12]
    22fe:	4613      	mov	r3, r2
    2300:	005b      	lsls	r3, r3, #1
    2302:	4413      	add	r3, r2
    2304:	009b      	lsls	r3, r3, #2
    2306:	440b      	add	r3, r1
    2308:	f503 730e 	add.w	r3, r3, #568	; 0x238
    230c:	681a      	ldr	r2, [r3, #0]
    230e:	492c      	ldr	r1, [pc, #176]	; (23c0 <Clock_Ip_InitClock+0x288>)
    2310:	4613      	mov	r3, r2
    2312:	00db      	lsls	r3, r3, #3
    2314:	4413      	add	r3, r2
    2316:	440b      	add	r3, r1
    2318:	3301      	adds	r3, #1
    231a:	781b      	ldrb	r3, [r3, #0]
    231c:	461a      	mov	r2, r3
    231e:	4b31      	ldr	r3, [pc, #196]	; (23e4 <Clock_Ip_InitClock+0x2ac>)
    2320:	5c9b      	ldrb	r3, [r3, r2]
    2322:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2324:	4a30      	ldr	r2, [pc, #192]	; (23e8 <Clock_Ip_InitClock+0x2b0>)
    2326:	9b02      	ldr	r3, [sp, #8]
    2328:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    232c:	9a03      	ldr	r2, [sp, #12]
    232e:	4613      	mov	r3, r2
    2330:	005b      	lsls	r3, r3, #1
    2332:	4413      	add	r3, r2
    2334:	009b      	lsls	r3, r3, #2
    2336:	f503 730e 	add.w	r3, r3, #568	; 0x238
    233a:	9a01      	ldr	r2, [sp, #4]
    233c:	4413      	add	r3, r2
    233e:	4618      	mov	r0, r3
    2340:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	3301      	adds	r3, #1
    2346:	9303      	str	r3, [sp, #12]
    2348:	9b01      	ldr	r3, [sp, #4]
    234a:	7b5b      	ldrb	r3, [r3, #13]
    234c:	461a      	mov	r2, r3
    234e:	9b03      	ldr	r3, [sp, #12]
    2350:	4293      	cmp	r3, r2
    2352:	d3d2      	bcc.n	22fa <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2354:	2300      	movs	r3, #0
    2356:	9303      	str	r3, [sp, #12]
    2358:	e026      	b.n	23a8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    235a:	9901      	ldr	r1, [sp, #4]
    235c:	9a03      	ldr	r2, [sp, #12]
    235e:	4613      	mov	r3, r2
    2360:	005b      	lsls	r3, r3, #1
    2362:	4413      	add	r3, r2
    2364:	009b      	lsls	r3, r3, #2
    2366:	440b      	add	r3, r1
    2368:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    236c:	681a      	ldr	r2, [r3, #0]
    236e:	4914      	ldr	r1, [pc, #80]	; (23c0 <Clock_Ip_InitClock+0x288>)
    2370:	4613      	mov	r3, r2
    2372:	00db      	lsls	r3, r3, #3
    2374:	4413      	add	r3, r2
    2376:	440b      	add	r3, r1
    2378:	3301      	adds	r3, #1
    237a:	781b      	ldrb	r3, [r3, #0]
    237c:	461a      	mov	r2, r3
    237e:	4b1b      	ldr	r3, [pc, #108]	; (23ec <Clock_Ip_InitClock+0x2b4>)
    2380:	5c9b      	ldrb	r3, [r3, r2]
    2382:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2384:	4a1a      	ldr	r2, [pc, #104]	; (23f0 <Clock_Ip_InitClock+0x2b8>)
    2386:	9b02      	ldr	r3, [sp, #8]
    2388:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    238c:	9a03      	ldr	r2, [sp, #12]
    238e:	4613      	mov	r3, r2
    2390:	005b      	lsls	r3, r3, #1
    2392:	4413      	add	r3, r2
    2394:	009b      	lsls	r3, r3, #2
    2396:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    239a:	9a01      	ldr	r2, [sp, #4]
    239c:	4413      	add	r3, r2
    239e:	4618      	mov	r0, r3
    23a0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    23a2:	9b03      	ldr	r3, [sp, #12]
    23a4:	3301      	adds	r3, #1
    23a6:	9303      	str	r3, [sp, #12]
    23a8:	9b01      	ldr	r3, [sp, #4]
    23aa:	7b1b      	ldrb	r3, [r3, #12]
    23ac:	461a      	mov	r2, r3
    23ae:	9b03      	ldr	r3, [sp, #12]
    23b0:	4293      	cmp	r3, r2
    23b2:	d3d2      	bcc.n	235a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23b4:	2300      	movs	r3, #0
    23b6:	9303      	str	r3, [sp, #12]
    23b8:	e044      	b.n	2444 <Clock_Ip_InitClock+0x30c>
    23ba:	bf00      	nop
    23bc:	1fff8b44 	.word	0x1fff8b44
    23c0:	00014aa8 	.word	0x00014aa8
    23c4:	00014a98 	.word	0x00014a98
    23c8:	000150a4 	.word	0x000150a4
    23cc:	00014a38 	.word	0x00014a38
    23d0:	00015068 	.word	0x00015068
    23d4:	00014a28 	.word	0x00014a28
    23d8:	00014ffc 	.word	0x00014ffc
    23dc:	00014a88 	.word	0x00014a88
    23e0:	000150dc 	.word	0x000150dc
    23e4:	00014a18 	.word	0x00014a18
    23e8:	00014ff4 	.word	0x00014ff4
    23ec:	00014a08 	.word	0x00014a08
    23f0:	00014fb8 	.word	0x00014fb8
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    23f4:	9901      	ldr	r1, [sp, #4]
    23f6:	9a03      	ldr	r2, [sp, #12]
    23f8:	4613      	mov	r3, r2
    23fa:	005b      	lsls	r3, r3, #1
    23fc:	4413      	add	r3, r2
    23fe:	009b      	lsls	r3, r3, #2
    2400:	440b      	add	r3, r1
    2402:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2406:	681a      	ldr	r2, [r3, #0]
    2408:	49ac      	ldr	r1, [pc, #688]	; (26bc <Clock_Ip_InitClock+0x584>)
    240a:	4613      	mov	r3, r2
    240c:	00db      	lsls	r3, r3, #3
    240e:	4413      	add	r3, r2
    2410:	440b      	add	r3, r1
    2412:	3301      	adds	r3, #1
    2414:	781b      	ldrb	r3, [r3, #0]
    2416:	461a      	mov	r2, r3
    2418:	4ba9      	ldr	r3, [pc, #676]	; (26c0 <Clock_Ip_InitClock+0x588>)
    241a:	5c9b      	ldrb	r3, [r3, r2]
    241c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    241e:	4aa9      	ldr	r2, [pc, #676]	; (26c4 <Clock_Ip_InitClock+0x58c>)
    2420:	9b02      	ldr	r3, [sp, #8]
    2422:	00db      	lsls	r3, r3, #3
    2424:	4413      	add	r3, r2
    2426:	6859      	ldr	r1, [r3, #4]
    2428:	9a03      	ldr	r2, [sp, #12]
    242a:	4613      	mov	r3, r2
    242c:	005b      	lsls	r3, r3, #1
    242e:	4413      	add	r3, r2
    2430:	009b      	lsls	r3, r3, #2
    2432:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2436:	9a01      	ldr	r2, [sp, #4]
    2438:	4413      	add	r3, r2
    243a:	4618      	mov	r0, r3
    243c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    243e:	9b03      	ldr	r3, [sp, #12]
    2440:	3301      	adds	r3, #1
    2442:	9303      	str	r3, [sp, #12]
    2444:	9b01      	ldr	r3, [sp, #4]
    2446:	7b5b      	ldrb	r3, [r3, #13]
    2448:	461a      	mov	r2, r3
    244a:	9b03      	ldr	r3, [sp, #12]
    244c:	4293      	cmp	r3, r2
    244e:	d3d1      	bcc.n	23f4 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2450:	2300      	movs	r3, #0
    2452:	9303      	str	r3, [sp, #12]
    2454:	e029      	b.n	24aa <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2456:	9901      	ldr	r1, [sp, #4]
    2458:	9a03      	ldr	r2, [sp, #12]
    245a:	4613      	mov	r3, r2
    245c:	009b      	lsls	r3, r3, #2
    245e:	4413      	add	r3, r2
    2460:	00db      	lsls	r3, r3, #3
    2462:	440b      	add	r3, r1
    2464:	3340      	adds	r3, #64	; 0x40
    2466:	681a      	ldr	r2, [r3, #0]
    2468:	4994      	ldr	r1, [pc, #592]	; (26bc <Clock_Ip_InitClock+0x584>)
    246a:	4613      	mov	r3, r2
    246c:	00db      	lsls	r3, r3, #3
    246e:	4413      	add	r3, r2
    2470:	440b      	add	r3, r1
    2472:	3301      	adds	r3, #1
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	461a      	mov	r2, r3
    2478:	4b93      	ldr	r3, [pc, #588]	; (26c8 <Clock_Ip_InitClock+0x590>)
    247a:	5c9b      	ldrb	r3, [r3, r2]
    247c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    247e:	4993      	ldr	r1, [pc, #588]	; (26cc <Clock_Ip_InitClock+0x594>)
    2480:	9a02      	ldr	r2, [sp, #8]
    2482:	4613      	mov	r3, r2
    2484:	009b      	lsls	r3, r3, #2
    2486:	4413      	add	r3, r2
    2488:	009b      	lsls	r3, r3, #2
    248a:	440b      	add	r3, r1
    248c:	3304      	adds	r3, #4
    248e:	6819      	ldr	r1, [r3, #0]
    2490:	9a03      	ldr	r2, [sp, #12]
    2492:	4613      	mov	r3, r2
    2494:	009b      	lsls	r3, r3, #2
    2496:	4413      	add	r3, r2
    2498:	00db      	lsls	r3, r3, #3
    249a:	3340      	adds	r3, #64	; 0x40
    249c:	9a01      	ldr	r2, [sp, #4]
    249e:	4413      	add	r3, r2
    24a0:	4618      	mov	r0, r3
    24a2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    24a4:	9b03      	ldr	r3, [sp, #12]
    24a6:	3301      	adds	r3, #1
    24a8:	9303      	str	r3, [sp, #12]
    24aa:	9b01      	ldr	r3, [sp, #4]
    24ac:	7a9b      	ldrb	r3, [r3, #10]
    24ae:	461a      	mov	r2, r3
    24b0:	9b03      	ldr	r3, [sp, #12]
    24b2:	4293      	cmp	r3, r2
    24b4:	d3cf      	bcc.n	2456 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24b6:	2300      	movs	r3, #0
    24b8:	9303      	str	r3, [sp, #12]
    24ba:	e029      	b.n	2510 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24bc:	9901      	ldr	r1, [sp, #4]
    24be:	9a03      	ldr	r2, [sp, #12]
    24c0:	4613      	mov	r3, r2
    24c2:	009b      	lsls	r3, r3, #2
    24c4:	4413      	add	r3, r2
    24c6:	009b      	lsls	r3, r3, #2
    24c8:	440b      	add	r3, r1
    24ca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24ce:	681a      	ldr	r2, [r3, #0]
    24d0:	497a      	ldr	r1, [pc, #488]	; (26bc <Clock_Ip_InitClock+0x584>)
    24d2:	4613      	mov	r3, r2
    24d4:	00db      	lsls	r3, r3, #3
    24d6:	4413      	add	r3, r2
    24d8:	440b      	add	r3, r1
    24da:	3301      	adds	r3, #1
    24dc:	781b      	ldrb	r3, [r3, #0]
    24de:	461a      	mov	r2, r3
    24e0:	4b7b      	ldr	r3, [pc, #492]	; (26d0 <Clock_Ip_InitClock+0x598>)
    24e2:	5c9b      	ldrb	r3, [r3, r2]
    24e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    24e6:	4a7b      	ldr	r2, [pc, #492]	; (26d4 <Clock_Ip_InitClock+0x59c>)
    24e8:	9b02      	ldr	r3, [sp, #8]
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	4413      	add	r3, r2
    24ee:	3304      	adds	r3, #4
    24f0:	681c      	ldr	r4, [r3, #0]
    24f2:	9a03      	ldr	r2, [sp, #12]
    24f4:	4613      	mov	r3, r2
    24f6:	009b      	lsls	r3, r3, #2
    24f8:	4413      	add	r3, r2
    24fa:	009b      	lsls	r3, r3, #2
    24fc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2500:	9a01      	ldr	r2, [sp, #4]
    2502:	4413      	add	r3, r2
    2504:	9903      	ldr	r1, [sp, #12]
    2506:	4618      	mov	r0, r3
    2508:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    250a:	9b03      	ldr	r3, [sp, #12]
    250c:	3301      	adds	r3, #1
    250e:	9303      	str	r3, [sp, #12]
    2510:	9b01      	ldr	r3, [sp, #4]
    2512:	7c9b      	ldrb	r3, [r3, #18]
    2514:	461a      	mov	r2, r3
    2516:	9b03      	ldr	r3, [sp, #12]
    2518:	4293      	cmp	r3, r2
    251a:	d3cf      	bcc.n	24bc <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    251c:	2300      	movs	r3, #0
    251e:	9303      	str	r3, [sp, #12]
    2520:	e02a      	b.n	2578 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2522:	9901      	ldr	r1, [sp, #4]
    2524:	9a03      	ldr	r2, [sp, #12]
    2526:	4613      	mov	r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	4413      	add	r3, r2
    252c:	009b      	lsls	r3, r3, #2
    252e:	440b      	add	r3, r1
    2530:	332c      	adds	r3, #44	; 0x2c
    2532:	681a      	ldr	r2, [r3, #0]
    2534:	4961      	ldr	r1, [pc, #388]	; (26bc <Clock_Ip_InitClock+0x584>)
    2536:	4613      	mov	r3, r2
    2538:	00db      	lsls	r3, r3, #3
    253a:	4413      	add	r3, r2
    253c:	440b      	add	r3, r1
    253e:	3301      	adds	r3, #1
    2540:	781b      	ldrb	r3, [r3, #0]
    2542:	461a      	mov	r2, r3
    2544:	4b64      	ldr	r3, [pc, #400]	; (26d8 <Clock_Ip_InitClock+0x5a0>)
    2546:	5c9b      	ldrb	r3, [r3, r2]
    2548:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    254a:	4964      	ldr	r1, [pc, #400]	; (26dc <Clock_Ip_InitClock+0x5a4>)
    254c:	9a02      	ldr	r2, [sp, #8]
    254e:	4613      	mov	r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	4413      	add	r3, r2
    2554:	009b      	lsls	r3, r3, #2
    2556:	440b      	add	r3, r1
    2558:	3308      	adds	r3, #8
    255a:	6819      	ldr	r1, [r3, #0]
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	4613      	mov	r3, r2
    2560:	009b      	lsls	r3, r3, #2
    2562:	4413      	add	r3, r2
    2564:	009b      	lsls	r3, r3, #2
    2566:	3328      	adds	r3, #40	; 0x28
    2568:	9a01      	ldr	r2, [sp, #4]
    256a:	4413      	add	r3, r2
    256c:	3304      	adds	r3, #4
    256e:	4618      	mov	r0, r3
    2570:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2572:	9b03      	ldr	r3, [sp, #12]
    2574:	3301      	adds	r3, #1
    2576:	9303      	str	r3, [sp, #12]
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	7a5b      	ldrb	r3, [r3, #9]
    257c:	461a      	mov	r2, r3
    257e:	9b03      	ldr	r3, [sp, #12]
    2580:	4293      	cmp	r3, r2
    2582:	d3ce      	bcc.n	2522 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2584:	2300      	movs	r3, #0
    2586:	9303      	str	r3, [sp, #12]
    2588:	e029      	b.n	25de <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    258a:	9901      	ldr	r1, [sp, #4]
    258c:	9a03      	ldr	r2, [sp, #12]
    258e:	4613      	mov	r3, r2
    2590:	009b      	lsls	r3, r3, #2
    2592:	4413      	add	r3, r2
    2594:	00db      	lsls	r3, r3, #3
    2596:	440b      	add	r3, r1
    2598:	3340      	adds	r3, #64	; 0x40
    259a:	681a      	ldr	r2, [r3, #0]
    259c:	4947      	ldr	r1, [pc, #284]	; (26bc <Clock_Ip_InitClock+0x584>)
    259e:	4613      	mov	r3, r2
    25a0:	00db      	lsls	r3, r3, #3
    25a2:	4413      	add	r3, r2
    25a4:	440b      	add	r3, r1
    25a6:	3301      	adds	r3, #1
    25a8:	781b      	ldrb	r3, [r3, #0]
    25aa:	461a      	mov	r2, r3
    25ac:	4b46      	ldr	r3, [pc, #280]	; (26c8 <Clock_Ip_InitClock+0x590>)
    25ae:	5c9b      	ldrb	r3, [r3, r2]
    25b0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    25b2:	4946      	ldr	r1, [pc, #280]	; (26cc <Clock_Ip_InitClock+0x594>)
    25b4:	9a02      	ldr	r2, [sp, #8]
    25b6:	4613      	mov	r3, r2
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	4413      	add	r3, r2
    25bc:	009b      	lsls	r3, r3, #2
    25be:	440b      	add	r3, r1
    25c0:	330c      	adds	r3, #12
    25c2:	6819      	ldr	r1, [r3, #0]
    25c4:	9a03      	ldr	r2, [sp, #12]
    25c6:	4613      	mov	r3, r2
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	4413      	add	r3, r2
    25cc:	00db      	lsls	r3, r3, #3
    25ce:	3340      	adds	r3, #64	; 0x40
    25d0:	9a01      	ldr	r2, [sp, #4]
    25d2:	4413      	add	r3, r2
    25d4:	4618      	mov	r0, r3
    25d6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25d8:	9b03      	ldr	r3, [sp, #12]
    25da:	3301      	adds	r3, #1
    25dc:	9303      	str	r3, [sp, #12]
    25de:	9b01      	ldr	r3, [sp, #4]
    25e0:	7a9b      	ldrb	r3, [r3, #10]
    25e2:	461a      	mov	r2, r3
    25e4:	9b03      	ldr	r3, [sp, #12]
    25e6:	4293      	cmp	r3, r2
    25e8:	d3cf      	bcc.n	258a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25ea:	2300      	movs	r3, #0
    25ec:	9303      	str	r3, [sp, #12]
    25ee:	e025      	b.n	263c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    25f0:	9a01      	ldr	r2, [sp, #4]
    25f2:	9b03      	ldr	r3, [sp, #12]
    25f4:	3324      	adds	r3, #36	; 0x24
    25f6:	011b      	lsls	r3, r3, #4
    25f8:	4413      	add	r3, r2
    25fa:	3304      	adds	r3, #4
    25fc:	681a      	ldr	r2, [r3, #0]
    25fe:	492f      	ldr	r1, [pc, #188]	; (26bc <Clock_Ip_InitClock+0x584>)
    2600:	4613      	mov	r3, r2
    2602:	00db      	lsls	r3, r3, #3
    2604:	4413      	add	r3, r2
    2606:	440b      	add	r3, r1
    2608:	3301      	adds	r3, #1
    260a:	781b      	ldrb	r3, [r3, #0]
    260c:	461a      	mov	r2, r3
    260e:	4b34      	ldr	r3, [pc, #208]	; (26e0 <Clock_Ip_InitClock+0x5a8>)
    2610:	5c9b      	ldrb	r3, [r3, r2]
    2612:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2614:	4933      	ldr	r1, [pc, #204]	; (26e4 <Clock_Ip_InitClock+0x5ac>)
    2616:	9a02      	ldr	r2, [sp, #8]
    2618:	4613      	mov	r3, r2
    261a:	005b      	lsls	r3, r3, #1
    261c:	4413      	add	r3, r2
    261e:	009b      	lsls	r3, r3, #2
    2620:	440b      	add	r3, r1
    2622:	3304      	adds	r3, #4
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	9a03      	ldr	r2, [sp, #12]
    2628:	3224      	adds	r2, #36	; 0x24
    262a:	0112      	lsls	r2, r2, #4
    262c:	9901      	ldr	r1, [sp, #4]
    262e:	440a      	add	r2, r1
    2630:	3204      	adds	r2, #4
    2632:	4610      	mov	r0, r2
    2634:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	3301      	adds	r3, #1
    263a:	9303      	str	r3, [sp, #12]
    263c:	9b01      	ldr	r3, [sp, #4]
    263e:	7b9b      	ldrb	r3, [r3, #14]
    2640:	461a      	mov	r2, r3
    2642:	9b03      	ldr	r3, [sp, #12]
    2644:	4293      	cmp	r3, r2
    2646:	d3d3      	bcc.n	25f0 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2648:	4b27      	ldr	r3, [pc, #156]	; (26e8 <Clock_Ip_InitClock+0x5b0>)
    264a:	2200      	movs	r2, #0
    264c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    264e:	4b26      	ldr	r3, [pc, #152]	; (26e8 <Clock_Ip_InitClock+0x5b0>)
    2650:	2200      	movs	r2, #0
    2652:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2654:	4b24      	ldr	r3, [pc, #144]	; (26e8 <Clock_Ip_InitClock+0x5b0>)
    2656:	2201      	movs	r2, #1
    2658:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    265a:	4b23      	ldr	r3, [pc, #140]	; (26e8 <Clock_Ip_InitClock+0x5b0>)
    265c:	2200      	movs	r2, #0
    265e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2660:	f000 fa9c 	bl	2b9c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2664:	2300      	movs	r3, #0
    2666:	9303      	str	r3, [sp, #12]
    2668:	e04c      	b.n	2704 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    266a:	9a01      	ldr	r2, [sp, #4]
    266c:	9b03      	ldr	r3, [sp, #12]
    266e:	330d      	adds	r3, #13
    2670:	00db      	lsls	r3, r3, #3
    2672:	4413      	add	r3, r2
    2674:	685b      	ldr	r3, [r3, #4]
    2676:	4a1d      	ldr	r2, [pc, #116]	; (26ec <Clock_Ip_InitClock+0x5b4>)
    2678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    267c:	2b03      	cmp	r3, #3
    267e:	d03b      	beq.n	26f8 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2680:	9b01      	ldr	r3, [sp, #4]
    2682:	9a03      	ldr	r2, [sp, #12]
    2684:	320d      	adds	r2, #13
    2686:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    268a:	490c      	ldr	r1, [pc, #48]	; (26bc <Clock_Ip_InitClock+0x584>)
    268c:	4613      	mov	r3, r2
    268e:	00db      	lsls	r3, r3, #3
    2690:	4413      	add	r3, r2
    2692:	440b      	add	r3, r1
    2694:	3301      	adds	r3, #1
    2696:	781b      	ldrb	r3, [r3, #0]
    2698:	461a      	mov	r2, r3
    269a:	4b15      	ldr	r3, [pc, #84]	; (26f0 <Clock_Ip_InitClock+0x5b8>)
    269c:	5c9b      	ldrb	r3, [r3, r2]
    269e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    26a0:	4a14      	ldr	r2, [pc, #80]	; (26f4 <Clock_Ip_InitClock+0x5bc>)
    26a2:	9b02      	ldr	r3, [sp, #8]
    26a4:	00db      	lsls	r3, r3, #3
    26a6:	4413      	add	r3, r2
    26a8:	685b      	ldr	r3, [r3, #4]
    26aa:	9a03      	ldr	r2, [sp, #12]
    26ac:	320d      	adds	r2, #13
    26ae:	00d2      	lsls	r2, r2, #3
    26b0:	9901      	ldr	r1, [sp, #4]
    26b2:	440a      	add	r2, r1
    26b4:	4610      	mov	r0, r2
    26b6:	4798      	blx	r3
    26b8:	e021      	b.n	26fe <Clock_Ip_InitClock+0x5c6>
    26ba:	bf00      	nop
    26bc:	00014aa8 	.word	0x00014aa8
    26c0:	00014a18 	.word	0x00014a18
    26c4:	00014ff4 	.word	0x00014ff4
    26c8:	00014a68 	.word	0x00014a68
    26cc:	000150b4 	.word	0x000150b4
    26d0:	00014a98 	.word	0x00014a98
    26d4:	000150a4 	.word	0x000150a4
    26d8:	00014a28 	.word	0x00014a28
    26dc:	00014ffc 	.word	0x00014ffc
    26e0:	00014a58 	.word	0x00014a58
    26e4:	00015024 	.word	0x00015024
    26e8:	1fff8b4c 	.word	0x1fff8b4c
    26ec:	00014ef4 	.word	0x00014ef4
    26f0:	00014a78 	.word	0x00014a78
    26f4:	000150e0 	.word	0x000150e0
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    26f8:	4b3a      	ldr	r3, [pc, #232]	; (27e4 <Clock_Ip_InitClock+0x6ac>)
    26fa:	2201      	movs	r2, #1
    26fc:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	3301      	adds	r3, #1
    2702:	9303      	str	r3, [sp, #12]
    2704:	9b01      	ldr	r3, [sp, #4]
    2706:	7adb      	ldrb	r3, [r3, #11]
    2708:	461a      	mov	r2, r3
    270a:	9b03      	ldr	r3, [sp, #12]
    270c:	4293      	cmp	r3, r2
    270e:	d3ac      	bcc.n	266a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2710:	4b34      	ldr	r3, [pc, #208]	; (27e4 <Clock_Ip_InitClock+0x6ac>)
    2712:	781b      	ldrb	r3, [r3, #0]
    2714:	f083 0301 	eor.w	r3, r3, #1
    2718:	b2db      	uxtb	r3, r3
    271a:	2b00      	cmp	r3, #0
    271c:	d05e      	beq.n	27dc <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    271e:	2300      	movs	r3, #0
    2720:	9303      	str	r3, [sp, #12]
    2722:	e01f      	b.n	2764 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2724:	9a01      	ldr	r2, [sp, #4]
    2726:	9b03      	ldr	r3, [sp, #12]
    2728:	334e      	adds	r3, #78	; 0x4e
    272a:	00db      	lsls	r3, r3, #3
    272c:	4413      	add	r3, r2
    272e:	685a      	ldr	r2, [r3, #4]
    2730:	492d      	ldr	r1, [pc, #180]	; (27e8 <Clock_Ip_InitClock+0x6b0>)
    2732:	4613      	mov	r3, r2
    2734:	00db      	lsls	r3, r3, #3
    2736:	4413      	add	r3, r2
    2738:	440b      	add	r3, r1
    273a:	3301      	adds	r3, #1
    273c:	781b      	ldrb	r3, [r3, #0]
    273e:	461a      	mov	r2, r3
    2740:	4b2a      	ldr	r3, [pc, #168]	; (27ec <Clock_Ip_InitClock+0x6b4>)
    2742:	5c9b      	ldrb	r3, [r3, r2]
    2744:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2746:	4a2a      	ldr	r2, [pc, #168]	; (27f0 <Clock_Ip_InitClock+0x6b8>)
    2748:	9b02      	ldr	r3, [sp, #8]
    274a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    274e:	9a03      	ldr	r2, [sp, #12]
    2750:	324e      	adds	r2, #78	; 0x4e
    2752:	00d2      	lsls	r2, r2, #3
    2754:	9901      	ldr	r1, [sp, #4]
    2756:	440a      	add	r2, r1
    2758:	3204      	adds	r2, #4
    275a:	4610      	mov	r0, r2
    275c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    275e:	9b03      	ldr	r3, [sp, #12]
    2760:	3301      	adds	r3, #1
    2762:	9303      	str	r3, [sp, #12]
    2764:	9b01      	ldr	r3, [sp, #4]
    2766:	7c1b      	ldrb	r3, [r3, #16]
    2768:	461a      	mov	r2, r3
    276a:	9b03      	ldr	r3, [sp, #12]
    276c:	4293      	cmp	r3, r2
    276e:	d3d9      	bcc.n	2724 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2770:	2300      	movs	r3, #0
    2772:	9303      	str	r3, [sp, #12]
    2774:	e028      	b.n	27c8 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2776:	9901      	ldr	r1, [sp, #4]
    2778:	9a03      	ldr	r2, [sp, #12]
    277a:	4613      	mov	r3, r2
    277c:	009b      	lsls	r3, r3, #2
    277e:	4413      	add	r3, r2
    2780:	009b      	lsls	r3, r3, #2
    2782:	440b      	add	r3, r1
    2784:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2788:	681a      	ldr	r2, [r3, #0]
    278a:	4917      	ldr	r1, [pc, #92]	; (27e8 <Clock_Ip_InitClock+0x6b0>)
    278c:	4613      	mov	r3, r2
    278e:	00db      	lsls	r3, r3, #3
    2790:	4413      	add	r3, r2
    2792:	440b      	add	r3, r1
    2794:	3301      	adds	r3, #1
    2796:	781b      	ldrb	r3, [r3, #0]
    2798:	461a      	mov	r2, r3
    279a:	4b16      	ldr	r3, [pc, #88]	; (27f4 <Clock_Ip_InitClock+0x6bc>)
    279c:	5c9b      	ldrb	r3, [r3, r2]
    279e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    27a0:	4a15      	ldr	r2, [pc, #84]	; (27f8 <Clock_Ip_InitClock+0x6c0>)
    27a2:	9b02      	ldr	r3, [sp, #8]
    27a4:	011b      	lsls	r3, r3, #4
    27a6:	4413      	add	r3, r2
    27a8:	330c      	adds	r3, #12
    27aa:	6819      	ldr	r1, [r3, #0]
    27ac:	9a03      	ldr	r2, [sp, #12]
    27ae:	4613      	mov	r3, r2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	4413      	add	r3, r2
    27b4:	009b      	lsls	r3, r3, #2
    27b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27ba:	9a01      	ldr	r2, [sp, #4]
    27bc:	4413      	add	r3, r2
    27be:	4618      	mov	r0, r3
    27c0:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27c2:	9b03      	ldr	r3, [sp, #12]
    27c4:	3301      	adds	r3, #1
    27c6:	9303      	str	r3, [sp, #12]
    27c8:	9b01      	ldr	r3, [sp, #4]
    27ca:	7c9b      	ldrb	r3, [r3, #18]
    27cc:	461a      	mov	r2, r3
    27ce:	9b03      	ldr	r3, [sp, #12]
    27d0:	4293      	cmp	r3, r2
    27d2:	d3d0      	bcc.n	2776 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27d4:	2104      	movs	r1, #4
    27d6:	9801      	ldr	r0, [sp, #4]
    27d8:	f002 ff48 	bl	566c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27dc:	bf00      	nop
    27de:	b004      	add	sp, #16
    27e0:	bd10      	pop	{r4, pc}
    27e2:	bf00      	nop
    27e4:	1fff8b4c 	.word	0x1fff8b4c
    27e8:	00014aa8 	.word	0x00014aa8
    27ec:	00014a48 	.word	0x00014a48
    27f0:	00015030 	.word	0x00015030
    27f4:	00014a98 	.word	0x00014a98
    27f8:	000150a4 	.word	0x000150a4

000027fc <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    27fc:	b500      	push	{lr}
    27fe:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2800:	2302      	movs	r3, #2
    2802:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2804:	2300      	movs	r3, #0
    2806:	9304      	str	r3, [sp, #16]
    2808:	e02c      	b.n	2864 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    280a:	4a36      	ldr	r2, [pc, #216]	; (28e4 <Clock_Ip_GetPllStatus+0xe8>)
    280c:	9b04      	ldr	r3, [sp, #16]
    280e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2812:	4935      	ldr	r1, [pc, #212]	; (28e8 <Clock_Ip_GetPllStatus+0xec>)
    2814:	4613      	mov	r3, r2
    2816:	00db      	lsls	r3, r3, #3
    2818:	4413      	add	r3, r2
    281a:	440b      	add	r3, r1
    281c:	3301      	adds	r3, #1
    281e:	781b      	ldrb	r3, [r3, #0]
    2820:	461a      	mov	r2, r3
    2822:	4b32      	ldr	r3, [pc, #200]	; (28ec <Clock_Ip_GetPllStatus+0xf0>)
    2824:	5c9b      	ldrb	r3, [r3, r2]
    2826:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2828:	4931      	ldr	r1, [pc, #196]	; (28f0 <Clock_Ip_GetPllStatus+0xf4>)
    282a:	9a03      	ldr	r2, [sp, #12]
    282c:	4613      	mov	r3, r2
    282e:	009b      	lsls	r3, r3, #2
    2830:	4413      	add	r3, r2
    2832:	009b      	lsls	r3, r3, #2
    2834:	440b      	add	r3, r1
    2836:	3308      	adds	r3, #8
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	492a      	ldr	r1, [pc, #168]	; (28e4 <Clock_Ip_GetPllStatus+0xe8>)
    283c:	9a04      	ldr	r2, [sp, #16]
    283e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2842:	4610      	mov	r0, r2
    2844:	4798      	blx	r3
    2846:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2848:	9b02      	ldr	r3, [sp, #8]
    284a:	2b01      	cmp	r3, #1
    284c:	d102      	bne.n	2854 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    284e:	2301      	movs	r3, #1
    2850:	9305      	str	r3, [sp, #20]
            break;
    2852:	e00d      	b.n	2870 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2854:	9b02      	ldr	r3, [sp, #8]
    2856:	2b02      	cmp	r3, #2
    2858:	d101      	bne.n	285e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    285a:	2300      	movs	r3, #0
    285c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    285e:	9b04      	ldr	r3, [sp, #16]
    2860:	3301      	adds	r3, #1
    2862:	9304      	str	r3, [sp, #16]
    2864:	4b23      	ldr	r3, [pc, #140]	; (28f4 <Clock_Ip_GetPllStatus+0xf8>)
    2866:	789b      	ldrb	r3, [r3, #2]
    2868:	461a      	mov	r2, r3
    286a:	9b04      	ldr	r3, [sp, #16]
    286c:	4293      	cmp	r3, r2
    286e:	d3cc      	bcc.n	280a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2870:	9b05      	ldr	r3, [sp, #20]
    2872:	2b00      	cmp	r3, #0
    2874:	d130      	bne.n	28d8 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2876:	2300      	movs	r3, #0
    2878:	9304      	str	r3, [sp, #16]
    287a:	e027      	b.n	28cc <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    287c:	4a1e      	ldr	r2, [pc, #120]	; (28f8 <Clock_Ip_GetPllStatus+0xfc>)
    287e:	9b04      	ldr	r3, [sp, #16]
    2880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2884:	4918      	ldr	r1, [pc, #96]	; (28e8 <Clock_Ip_GetPllStatus+0xec>)
    2886:	4613      	mov	r3, r2
    2888:	00db      	lsls	r3, r3, #3
    288a:	4413      	add	r3, r2
    288c:	440b      	add	r3, r1
    288e:	3301      	adds	r3, #1
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	461a      	mov	r2, r3
    2894:	4b19      	ldr	r3, [pc, #100]	; (28fc <Clock_Ip_GetPllStatus+0x100>)
    2896:	5c9b      	ldrb	r3, [r3, r2]
    2898:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    289a:	4919      	ldr	r1, [pc, #100]	; (2900 <Clock_Ip_GetPllStatus+0x104>)
    289c:	9a03      	ldr	r2, [sp, #12]
    289e:	4613      	mov	r3, r2
    28a0:	005b      	lsls	r3, r3, #1
    28a2:	4413      	add	r3, r2
    28a4:	009b      	lsls	r3, r3, #2
    28a6:	440b      	add	r3, r1
    28a8:	3308      	adds	r3, #8
    28aa:	681b      	ldr	r3, [r3, #0]
    28ac:	4912      	ldr	r1, [pc, #72]	; (28f8 <Clock_Ip_GetPllStatus+0xfc>)
    28ae:	9a04      	ldr	r2, [sp, #16]
    28b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28b4:	4610      	mov	r0, r2
    28b6:	4798      	blx	r3
    28b8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28ba:	9b01      	ldr	r3, [sp, #4]
    28bc:	2b01      	cmp	r3, #1
    28be:	d102      	bne.n	28c6 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    28c0:	2301      	movs	r3, #1
    28c2:	9305      	str	r3, [sp, #20]
                break;
    28c4:	e008      	b.n	28d8 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28c6:	9b04      	ldr	r3, [sp, #16]
    28c8:	3301      	adds	r3, #1
    28ca:	9304      	str	r3, [sp, #16]
    28cc:	4b09      	ldr	r3, [pc, #36]	; (28f4 <Clock_Ip_GetPllStatus+0xf8>)
    28ce:	78db      	ldrb	r3, [r3, #3]
    28d0:	461a      	mov	r2, r3
    28d2:	9b04      	ldr	r3, [sp, #16]
    28d4:	4293      	cmp	r3, r2
    28d6:	d3d1      	bcc.n	287c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28d8:	9b05      	ldr	r3, [sp, #20]
}
    28da:	4618      	mov	r0, r3
    28dc:	b007      	add	sp, #28
    28de:	f85d fb04 	ldr.w	pc, [sp], #4
    28e2:	bf00      	nop
    28e4:	00014fb0 	.word	0x00014fb0
    28e8:	00014aa8 	.word	0x00014aa8
    28ec:	00014a68 	.word	0x00014a68
    28f0:	000150b4 	.word	0x000150b4
    28f4:	1fff8b4c 	.word	0x1fff8b4c
    28f8:	00014fb4 	.word	0x00014fb4
    28fc:	00014a58 	.word	0x00014a58
    2900:	00015024 	.word	0x00015024

00002904 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2904:	b500      	push	{lr}
    2906:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2908:	4b55      	ldr	r3, [pc, #340]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    290a:	681b      	ldr	r3, [r3, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	f000 80a2 	beq.w	2a56 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2912:	2300      	movs	r3, #0
    2914:	9301      	str	r3, [sp, #4]
    2916:	e02c      	b.n	2972 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2918:	4b51      	ldr	r3, [pc, #324]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    291a:	681a      	ldr	r2, [r3, #0]
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	330d      	adds	r3, #13
    2920:	00db      	lsls	r3, r3, #3
    2922:	4413      	add	r3, r2
    2924:	685b      	ldr	r3, [r3, #4]
    2926:	4a4f      	ldr	r2, [pc, #316]	; (2a64 <Clock_Ip_DistributePll+0x160>)
    2928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    292c:	2b03      	cmp	r3, #3
    292e:	d11d      	bne.n	296c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2930:	4b4b      	ldr	r3, [pc, #300]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	9a01      	ldr	r2, [sp, #4]
    2936:	320d      	adds	r2, #13
    2938:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    293c:	494a      	ldr	r1, [pc, #296]	; (2a68 <Clock_Ip_DistributePll+0x164>)
    293e:	4613      	mov	r3, r2
    2940:	00db      	lsls	r3, r3, #3
    2942:	4413      	add	r3, r2
    2944:	440b      	add	r3, r1
    2946:	3301      	adds	r3, #1
    2948:	781b      	ldrb	r3, [r3, #0]
    294a:	461a      	mov	r2, r3
    294c:	4b47      	ldr	r3, [pc, #284]	; (2a6c <Clock_Ip_DistributePll+0x168>)
    294e:	5c9b      	ldrb	r3, [r3, r2]
    2950:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2952:	4a47      	ldr	r2, [pc, #284]	; (2a70 <Clock_Ip_DistributePll+0x16c>)
    2954:	9b00      	ldr	r3, [sp, #0]
    2956:	00db      	lsls	r3, r3, #3
    2958:	4413      	add	r3, r2
    295a:	685b      	ldr	r3, [r3, #4]
    295c:	4a40      	ldr	r2, [pc, #256]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    295e:	6811      	ldr	r1, [r2, #0]
    2960:	9a01      	ldr	r2, [sp, #4]
    2962:	320d      	adds	r2, #13
    2964:	00d2      	lsls	r2, r2, #3
    2966:	440a      	add	r2, r1
    2968:	4610      	mov	r0, r2
    296a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    296c:	9b01      	ldr	r3, [sp, #4]
    296e:	3301      	adds	r3, #1
    2970:	9301      	str	r3, [sp, #4]
    2972:	4b3b      	ldr	r3, [pc, #236]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    2974:	681b      	ldr	r3, [r3, #0]
    2976:	7adb      	ldrb	r3, [r3, #11]
    2978:	461a      	mov	r2, r3
    297a:	9b01      	ldr	r3, [sp, #4]
    297c:	4293      	cmp	r3, r2
    297e:	d3cb      	bcc.n	2918 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2980:	4b3c      	ldr	r3, [pc, #240]	; (2a74 <Clock_Ip_DistributePll+0x170>)
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	2b00      	cmp	r3, #0
    2986:	d066      	beq.n	2a56 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2988:	2300      	movs	r3, #0
    298a:	9301      	str	r3, [sp, #4]
    298c:	e021      	b.n	29d2 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    298e:	4b34      	ldr	r3, [pc, #208]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    2990:	681a      	ldr	r2, [r3, #0]
    2992:	9b01      	ldr	r3, [sp, #4]
    2994:	334e      	adds	r3, #78	; 0x4e
    2996:	00db      	lsls	r3, r3, #3
    2998:	4413      	add	r3, r2
    299a:	685a      	ldr	r2, [r3, #4]
    299c:	4932      	ldr	r1, [pc, #200]	; (2a68 <Clock_Ip_DistributePll+0x164>)
    299e:	4613      	mov	r3, r2
    29a0:	00db      	lsls	r3, r3, #3
    29a2:	4413      	add	r3, r2
    29a4:	440b      	add	r3, r1
    29a6:	3301      	adds	r3, #1
    29a8:	781b      	ldrb	r3, [r3, #0]
    29aa:	461a      	mov	r2, r3
    29ac:	4b32      	ldr	r3, [pc, #200]	; (2a78 <Clock_Ip_DistributePll+0x174>)
    29ae:	5c9b      	ldrb	r3, [r3, r2]
    29b0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    29b2:	4a32      	ldr	r2, [pc, #200]	; (2a7c <Clock_Ip_DistributePll+0x178>)
    29b4:	9b00      	ldr	r3, [sp, #0]
    29b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29ba:	4a29      	ldr	r2, [pc, #164]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    29bc:	6811      	ldr	r1, [r2, #0]
    29be:	9a01      	ldr	r2, [sp, #4]
    29c0:	324e      	adds	r2, #78	; 0x4e
    29c2:	00d2      	lsls	r2, r2, #3
    29c4:	440a      	add	r2, r1
    29c6:	3204      	adds	r2, #4
    29c8:	4610      	mov	r0, r2
    29ca:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29cc:	9b01      	ldr	r3, [sp, #4]
    29ce:	3301      	adds	r3, #1
    29d0:	9301      	str	r3, [sp, #4]
    29d2:	4b23      	ldr	r3, [pc, #140]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	7c1b      	ldrb	r3, [r3, #16]
    29d8:	461a      	mov	r2, r3
    29da:	9b01      	ldr	r3, [sp, #4]
    29dc:	4293      	cmp	r3, r2
    29de:	d3d6      	bcc.n	298e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29e0:	2300      	movs	r3, #0
    29e2:	9301      	str	r3, [sp, #4]
    29e4:	e02a      	b.n	2a3c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29e6:	4b1e      	ldr	r3, [pc, #120]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    29e8:	6819      	ldr	r1, [r3, #0]
    29ea:	9a01      	ldr	r2, [sp, #4]
    29ec:	4613      	mov	r3, r2
    29ee:	009b      	lsls	r3, r3, #2
    29f0:	4413      	add	r3, r2
    29f2:	009b      	lsls	r3, r3, #2
    29f4:	440b      	add	r3, r1
    29f6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29fa:	681a      	ldr	r2, [r3, #0]
    29fc:	491a      	ldr	r1, [pc, #104]	; (2a68 <Clock_Ip_DistributePll+0x164>)
    29fe:	4613      	mov	r3, r2
    2a00:	00db      	lsls	r3, r3, #3
    2a02:	4413      	add	r3, r2
    2a04:	440b      	add	r3, r1
    2a06:	3301      	adds	r3, #1
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	461a      	mov	r2, r3
    2a0c:	4b1c      	ldr	r3, [pc, #112]	; (2a80 <Clock_Ip_DistributePll+0x17c>)
    2a0e:	5c9b      	ldrb	r3, [r3, r2]
    2a10:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2a12:	4a1c      	ldr	r2, [pc, #112]	; (2a84 <Clock_Ip_DistributePll+0x180>)
    2a14:	9b00      	ldr	r3, [sp, #0]
    2a16:	011b      	lsls	r3, r3, #4
    2a18:	4413      	add	r3, r2
    2a1a:	330c      	adds	r3, #12
    2a1c:	6819      	ldr	r1, [r3, #0]
    2a1e:	4b10      	ldr	r3, [pc, #64]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    2a20:	6818      	ldr	r0, [r3, #0]
    2a22:	9a01      	ldr	r2, [sp, #4]
    2a24:	4613      	mov	r3, r2
    2a26:	009b      	lsls	r3, r3, #2
    2a28:	4413      	add	r3, r2
    2a2a:	009b      	lsls	r3, r3, #2
    2a2c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a30:	4403      	add	r3, r0
    2a32:	4618      	mov	r0, r3
    2a34:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a36:	9b01      	ldr	r3, [sp, #4]
    2a38:	3301      	adds	r3, #1
    2a3a:	9301      	str	r3, [sp, #4]
    2a3c:	4b08      	ldr	r3, [pc, #32]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	7c9b      	ldrb	r3, [r3, #18]
    2a42:	461a      	mov	r2, r3
    2a44:	9b01      	ldr	r3, [sp, #4]
    2a46:	4293      	cmp	r3, r2
    2a48:	d3cd      	bcc.n	29e6 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <Clock_Ip_DistributePll+0x15c>)
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	2104      	movs	r1, #4
    2a50:	4618      	mov	r0, r3
    2a52:	f002 fe0b 	bl	566c <Clock_Ip_Command>
        }
    }
}
    2a56:	bf00      	nop
    2a58:	b003      	add	sp, #12
    2a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a5e:	bf00      	nop
    2a60:	1fff8b44 	.word	0x1fff8b44
    2a64:	00014ef4 	.word	0x00014ef4
    2a68:	00014aa8 	.word	0x00014aa8
    2a6c:	00014a78 	.word	0x00014a78
    2a70:	000150e0 	.word	0x000150e0
    2a74:	1fff8b4c 	.word	0x1fff8b4c
    2a78:	00014a48 	.word	0x00014a48
    2a7c:	00015030 	.word	0x00015030
    2a80:	00014a98 	.word	0x00014a98
    2a84:	000150a4 	.word	0x000150a4

00002a88 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a88:	b500      	push	{lr}
    2a8a:	b085      	sub	sp, #20
    2a8c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a8e:	490c      	ldr	r1, [pc, #48]	; (2ac0 <Clock_Ip_DisableClockMonitor+0x38>)
    2a90:	9a01      	ldr	r2, [sp, #4]
    2a92:	4613      	mov	r3, r2
    2a94:	00db      	lsls	r3, r3, #3
    2a96:	4413      	add	r3, r2
    2a98:	440b      	add	r3, r1
    2a9a:	3301      	adds	r3, #1
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	461a      	mov	r2, r3
    2aa0:	4b08      	ldr	r3, [pc, #32]	; (2ac4 <Clock_Ip_DisableClockMonitor+0x3c>)
    2aa2:	5c9b      	ldrb	r3, [r3, r2]
    2aa4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2aa6:	4a08      	ldr	r2, [pc, #32]	; (2ac8 <Clock_Ip_DisableClockMonitor+0x40>)
    2aa8:	9b03      	ldr	r3, [sp, #12]
    2aaa:	011b      	lsls	r3, r3, #4
    2aac:	4413      	add	r3, r2
    2aae:	3308      	adds	r3, #8
    2ab0:	681b      	ldr	r3, [r3, #0]
    2ab2:	9801      	ldr	r0, [sp, #4]
    2ab4:	4798      	blx	r3
}
    2ab6:	bf00      	nop
    2ab8:	b005      	add	sp, #20
    2aba:	f85d fb04 	ldr.w	pc, [sp], #4
    2abe:	bf00      	nop
    2ac0:	00014aa8 	.word	0x00014aa8
    2ac4:	00014a98 	.word	0x00014a98
    2ac8:	000150a4 	.word	0x000150a4

00002acc <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2acc:	b082      	sub	sp, #8
    2ace:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2ad0:	4a02      	ldr	r2, [pc, #8]	; (2adc <Clock_Ip_InstallNotificationsCallback+0x10>)
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	6013      	str	r3, [r2, #0]
}
    2ad6:	bf00      	nop
    2ad8:	b002      	add	sp, #8
    2ada:	4770      	bx	lr
    2adc:	1fff8b14 	.word	0x1fff8b14

00002ae0 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2ae0:	b500      	push	{lr}
    2ae2:	b085      	sub	sp, #20
    2ae4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ae6:	490c      	ldr	r1, [pc, #48]	; (2b18 <Clock_Ip_DisableModuleClock+0x38>)
    2ae8:	9a01      	ldr	r2, [sp, #4]
    2aea:	4613      	mov	r3, r2
    2aec:	00db      	lsls	r3, r3, #3
    2aee:	4413      	add	r3, r2
    2af0:	440b      	add	r3, r1
    2af2:	3301      	adds	r3, #1
    2af4:	781b      	ldrb	r3, [r3, #0]
    2af6:	461a      	mov	r2, r3
    2af8:	4b08      	ldr	r3, [pc, #32]	; (2b1c <Clock_Ip_DisableModuleClock+0x3c>)
    2afa:	5c9b      	ldrb	r3, [r3, r2]
    2afc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2afe:	4a08      	ldr	r2, [pc, #32]	; (2b20 <Clock_Ip_DisableModuleClock+0x40>)
    2b00:	9b03      	ldr	r3, [sp, #12]
    2b02:	00db      	lsls	r3, r3, #3
    2b04:	4413      	add	r3, r2
    2b06:	685b      	ldr	r3, [r3, #4]
    2b08:	2101      	movs	r1, #1
    2b0a:	9801      	ldr	r0, [sp, #4]
    2b0c:	4798      	blx	r3
}
    2b0e:	bf00      	nop
    2b10:	b005      	add	sp, #20
    2b12:	f85d fb04 	ldr.w	pc, [sp], #4
    2b16:	bf00      	nop
    2b18:	00014aa8 	.word	0x00014aa8
    2b1c:	00014a48 	.word	0x00014a48
    2b20:	00015030 	.word	0x00015030

00002b24 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b24:	b500      	push	{lr}
    2b26:	b085      	sub	sp, #20
    2b28:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b2a:	490c      	ldr	r1, [pc, #48]	; (2b5c <Clock_Ip_EnableModuleClock+0x38>)
    2b2c:	9a01      	ldr	r2, [sp, #4]
    2b2e:	4613      	mov	r3, r2
    2b30:	00db      	lsls	r3, r3, #3
    2b32:	4413      	add	r3, r2
    2b34:	440b      	add	r3, r1
    2b36:	3301      	adds	r3, #1
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	461a      	mov	r2, r3
    2b3c:	4b08      	ldr	r3, [pc, #32]	; (2b60 <Clock_Ip_EnableModuleClock+0x3c>)
    2b3e:	5c9b      	ldrb	r3, [r3, r2]
    2b40:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b42:	4a08      	ldr	r2, [pc, #32]	; (2b64 <Clock_Ip_EnableModuleClock+0x40>)
    2b44:	9b03      	ldr	r3, [sp, #12]
    2b46:	00db      	lsls	r3, r3, #3
    2b48:	4413      	add	r3, r2
    2b4a:	685b      	ldr	r3, [r3, #4]
    2b4c:	2100      	movs	r1, #0
    2b4e:	9801      	ldr	r0, [sp, #4]
    2b50:	4798      	blx	r3
}
    2b52:	bf00      	nop
    2b54:	b005      	add	sp, #20
    2b56:	f85d fb04 	ldr.w	pc, [sp], #4
    2b5a:	bf00      	nop
    2b5c:	00014aa8 	.word	0x00014aa8
    2b60:	00014a48 	.word	0x00014a48
    2b64:	00015030 	.word	0x00015030

00002b68 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b68:	b500      	push	{lr}
    2b6a:	b083      	sub	sp, #12
    2b6c:	9001      	str	r0, [sp, #4]
    2b6e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b70:	4b08      	ldr	r3, [pc, #32]	; (2b94 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b72:	2200      	movs	r2, #0
    2b74:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b76:	4b08      	ldr	r3, [pc, #32]	; (2b98 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	2102      	movs	r1, #2
    2b7c:	4618      	mov	r0, r3
    2b7e:	f002 fd75 	bl	566c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b82:	9900      	ldr	r1, [sp, #0]
    2b84:	9801      	ldr	r0, [sp, #4]
    2b86:	f002 fc51 	bl	542c <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b8a:	bf00      	nop
    2b8c:	b003      	add	sp, #12
    2b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b92:	bf00      	nop
    2b94:	1fff8b10 	.word	0x1fff8b10
    2b98:	1fff8b44 	.word	0x1fff8b44

00002b9c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b9c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b9e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2ba2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2ba4:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <Clock_Ip_SetWaitStates+0x24>)
    2ba6:	785b      	ldrb	r3, [r3, #1]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d005      	beq.n	2bb8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2bac:	9b01      	ldr	r3, [sp, #4]
    2bae:	3b01      	subs	r3, #1
    2bb0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2bb2:	9b01      	ldr	r3, [sp, #4]
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d1f9      	bne.n	2bac <Clock_Ip_SetWaitStates+0x10>
    }
}
    2bb8:	bf00      	nop
    2bba:	b002      	add	sp, #8
    2bbc:	4770      	bx	lr
    2bbe:	bf00      	nop
    2bc0:	1fff8b4c 	.word	0x1fff8b4c

00002bc4 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2bc4:	b500      	push	{lr}
    2bc6:	b083      	sub	sp, #12
    2bc8:	9001      	str	r0, [sp, #4]
    2bca:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2bcc:	4b04      	ldr	r3, [pc, #16]	; (2be0 <Clock_Ip_ReportClockErrors+0x1c>)
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	9900      	ldr	r1, [sp, #0]
    2bd2:	9801      	ldr	r0, [sp, #4]
    2bd4:	4798      	blx	r3
}
    2bd6:	bf00      	nop
    2bd8:	b003      	add	sp, #12
    2bda:	f85d fb04 	ldr.w	pc, [sp], #4
    2bde:	bf00      	nop
    2be0:	1fff8b14 	.word	0x1fff8b14

00002be4 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2be4:	b500      	push	{lr}
    2be6:	b085      	sub	sp, #20
    2be8:	9003      	str	r0, [sp, #12]
    2bea:	9102      	str	r1, [sp, #8]
    2bec:	9201      	str	r2, [sp, #4]
    2bee:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2bf0:	2000      	movs	r0, #0
    2bf2:	f7fe ffd1 	bl	1b98 <OsIf_GetCounter>
    2bf6:	4602      	mov	r2, r0
    2bf8:	9b03      	ldr	r3, [sp, #12]
    2bfa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2bfc:	9b02      	ldr	r3, [sp, #8]
    2bfe:	2200      	movs	r2, #0
    2c00:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2c02:	2100      	movs	r1, #0
    2c04:	9800      	ldr	r0, [sp, #0]
    2c06:	f7ff f813 	bl	1c30 <OsIf_MicrosToTicks>
    2c0a:	4602      	mov	r2, r0
    2c0c:	9b01      	ldr	r3, [sp, #4]
    2c0e:	601a      	str	r2, [r3, #0]
}
    2c10:	bf00      	nop
    2c12:	b005      	add	sp, #20
    2c14:	f85d fb04 	ldr.w	pc, [sp], #4

00002c18 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c18:	b500      	push	{lr}
    2c1a:	b087      	sub	sp, #28
    2c1c:	9003      	str	r0, [sp, #12]
    2c1e:	9102      	str	r1, [sp, #8]
    2c20:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c22:	2300      	movs	r3, #0
    2c24:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c28:	2100      	movs	r1, #0
    2c2a:	9803      	ldr	r0, [sp, #12]
    2c2c:	f7fe ffcd 	bl	1bca <OsIf_GetElapsed>
    2c30:	4602      	mov	r2, r0
    2c32:	9b02      	ldr	r3, [sp, #8]
    2c34:	681b      	ldr	r3, [r3, #0]
    2c36:	441a      	add	r2, r3
    2c38:	9b02      	ldr	r3, [sp, #8]
    2c3a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c3c:	9b02      	ldr	r3, [sp, #8]
    2c3e:	681b      	ldr	r3, [r3, #0]
    2c40:	9a01      	ldr	r2, [sp, #4]
    2c42:	429a      	cmp	r2, r3
    2c44:	d802      	bhi.n	2c4c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c46:	2301      	movs	r3, #1
    2c48:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c50:	4618      	mov	r0, r3
    2c52:	b007      	add	sp, #28
    2c54:	f85d fb04 	ldr.w	pc, [sp], #4

00002c58 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c58:	b082      	sub	sp, #8
    2c5a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c5c:	bf00      	nop
    2c5e:	b002      	add	sp, #8
    2c60:	4770      	bx	lr

00002c62 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c62:	b500      	push	{lr}
    2c64:	b083      	sub	sp, #12
    2c66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c68:	9b01      	ldr	r3, [sp, #4]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d002      	beq.n	2c74 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c6e:	9801      	ldr	r0, [sp, #4]
    2c70:	f000 f8ad 	bl	2dce <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c74:	bf00      	nop
    2c76:	b003      	add	sp, #12
    2c78:	f85d fb04 	ldr.w	pc, [sp], #4

00002c7c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c7c:	b500      	push	{lr}
    2c7e:	b083      	sub	sp, #12
    2c80:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c82:	9b01      	ldr	r3, [sp, #4]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d002      	beq.n	2c8e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c88:	9801      	ldr	r0, [sp, #4]
    2c8a:	f000 f8cd 	bl	2e28 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c8e:	bf00      	nop
    2c90:	b003      	add	sp, #12
    2c92:	f85d fb04 	ldr.w	pc, [sp], #4

00002c96 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c96:	b500      	push	{lr}
    2c98:	b083      	sub	sp, #12
    2c9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c9c:	9b01      	ldr	r3, [sp, #4]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d002      	beq.n	2ca8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2ca2:	9801      	ldr	r0, [sp, #4]
    2ca4:	f000 f8ee 	bl	2e84 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ca8:	bf00      	nop
    2caa:	b003      	add	sp, #12
    2cac:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cb0:	b500      	push	{lr}
    2cb2:	b083      	sub	sp, #12
    2cb4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cb6:	9b01      	ldr	r3, [sp, #4]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d002      	beq.n	2cc2 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2cbc:	9801      	ldr	r0, [sp, #4]
    2cbe:	f000 f8f9 	bl	2eb4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cc2:	bf00      	nop
    2cc4:	b003      	add	sp, #12
    2cc6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cca <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cca:	b500      	push	{lr}
    2ccc:	b083      	sub	sp, #12
    2cce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd0:	9b01      	ldr	r3, [sp, #4]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d002      	beq.n	2cdc <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2cd6:	9801      	ldr	r0, [sp, #4]
    2cd8:	f000 f904 	bl	2ee4 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cdc:	bf00      	nop
    2cde:	b003      	add	sp, #12
    2ce0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ce4 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2ce4:	b500      	push	{lr}
    2ce6:	b083      	sub	sp, #12
    2ce8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d002      	beq.n	2cf6 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2cf0:	9801      	ldr	r0, [sp, #4]
    2cf2:	f000 f90f 	bl	2f14 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cf6:	bf00      	nop
    2cf8:	b003      	add	sp, #12
    2cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00002cfe <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cfe:	b500      	push	{lr}
    2d00:	b083      	sub	sp, #12
    2d02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d002      	beq.n	2d10 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2d0a:	9801      	ldr	r0, [sp, #4]
    2d0c:	f000 f91a 	bl	2f44 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d10:	bf00      	nop
    2d12:	b003      	add	sp, #12
    2d14:	f85d fb04 	ldr.w	pc, [sp], #4

00002d18 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d18:	b500      	push	{lr}
    2d1a:	b083      	sub	sp, #12
    2d1c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d1e:	9b01      	ldr	r3, [sp, #4]
    2d20:	2b00      	cmp	r3, #0
    2d22:	d002      	beq.n	2d2a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d24:	9801      	ldr	r0, [sp, #4]
    2d26:	f000 f925 	bl	2f74 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d2a:	bf00      	nop
    2d2c:	b003      	add	sp, #12
    2d2e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d32 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d32:	b500      	push	{lr}
    2d34:	b083      	sub	sp, #12
    2d36:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d38:	9b01      	ldr	r3, [sp, #4]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d002      	beq.n	2d44 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d3e:	9801      	ldr	r0, [sp, #4]
    2d40:	f000 f930 	bl	2fa4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d44:	bf00      	nop
    2d46:	b003      	add	sp, #12
    2d48:	f85d fb04 	ldr.w	pc, [sp], #4

00002d4c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d4c:	b500      	push	{lr}
    2d4e:	b083      	sub	sp, #12
    2d50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d002      	beq.n	2d5e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d58:	9801      	ldr	r0, [sp, #4]
    2d5a:	f000 f93b 	bl	2fd4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d5e:	bf00      	nop
    2d60:	b003      	add	sp, #12
    2d62:	f85d fb04 	ldr.w	pc, [sp], #4

00002d66 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d66:	b500      	push	{lr}
    2d68:	b083      	sub	sp, #12
    2d6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d6c:	9b01      	ldr	r3, [sp, #4]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d002      	beq.n	2d78 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d72:	9801      	ldr	r0, [sp, #4]
    2d74:	f000 f946 	bl	3004 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d78:	bf00      	nop
    2d7a:	b003      	add	sp, #12
    2d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d80 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d80:	b500      	push	{lr}
    2d82:	b083      	sub	sp, #12
    2d84:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d86:	9b01      	ldr	r3, [sp, #4]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d002      	beq.n	2d92 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d8c:	9801      	ldr	r0, [sp, #4]
    2d8e:	f000 f951 	bl	3034 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d92:	bf00      	nop
    2d94:	b003      	add	sp, #12
    2d96:	f85d fb04 	ldr.w	pc, [sp], #4

00002d9a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d9a:	b500      	push	{lr}
    2d9c:	b083      	sub	sp, #12
    2d9e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2da0:	9b01      	ldr	r3, [sp, #4]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d002      	beq.n	2dac <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2da6:	9801      	ldr	r0, [sp, #4]
    2da8:	f000 f95e 	bl	3068 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dac:	bf00      	nop
    2dae:	b003      	add	sp, #12
    2db0:	f85d fb04 	ldr.w	pc, [sp], #4

00002db4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2db4:	b500      	push	{lr}
    2db6:	b083      	sub	sp, #12
    2db8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dba:	9b01      	ldr	r3, [sp, #4]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d002      	beq.n	2dc6 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2dc0:	9801      	ldr	r0, [sp, #4]
    2dc2:	f000 f98b 	bl	30dc <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dc6:	bf00      	nop
    2dc8:	b003      	add	sp, #12
    2dca:	f85d fb04 	ldr.w	pc, [sp], #4

00002dce <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dce:	b086      	sub	sp, #24
    2dd0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2dd2:	9b01      	ldr	r3, [sp, #4]
    2dd4:	681a      	ldr	r2, [r3, #0]
    2dd6:	4911      	ldr	r1, [pc, #68]	; (2e1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2dd8:	4613      	mov	r3, r2
    2dda:	00db      	lsls	r3, r3, #3
    2ddc:	4413      	add	r3, r2
    2dde:	440b      	add	r3, r1
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2de4:	9b01      	ldr	r3, [sp, #4]
    2de6:	685b      	ldr	r3, [r3, #4]
    2de8:	4a0d      	ldr	r2, [pc, #52]	; (2e20 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2dea:	5cd3      	ldrb	r3, [r2, r3]
    2dec:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2dee:	4a0d      	ldr	r2, [pc, #52]	; (2e24 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2df0:	9b05      	ldr	r3, [sp, #20]
    2df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2dfa:	9b03      	ldr	r3, [sp, #12]
    2dfc:	f023 0307 	bic.w	r3, r3, #7
    2e00:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2e02:	9a03      	ldr	r2, [sp, #12]
    2e04:	9b04      	ldr	r3, [sp, #16]
    2e06:	4313      	orrs	r3, r2
    2e08:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e0a:	4a06      	ldr	r2, [pc, #24]	; (2e24 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e0c:	9b05      	ldr	r3, [sp, #20]
    2e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e12:	9a03      	ldr	r2, [sp, #12]
    2e14:	601a      	str	r2, [r3, #0]
}
    2e16:	bf00      	nop
    2e18:	b006      	add	sp, #24
    2e1a:	4770      	bx	lr
    2e1c:	00014aa8 	.word	0x00014aa8
    2e20:	00014ea0 	.word	0x00014ea0
    2e24:	00014ee4 	.word	0x00014ee4

00002e28 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e28:	b086      	sub	sp, #24
    2e2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e2c:	9b01      	ldr	r3, [sp, #4]
    2e2e:	681a      	ldr	r2, [r3, #0]
    2e30:	4911      	ldr	r1, [pc, #68]	; (2e78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e32:	4613      	mov	r3, r2
    2e34:	00db      	lsls	r3, r3, #3
    2e36:	4413      	add	r3, r2
    2e38:	440b      	add	r3, r1
    2e3a:	781b      	ldrb	r3, [r3, #0]
    2e3c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e3e:	9b01      	ldr	r3, [sp, #4]
    2e40:	685b      	ldr	r3, [r3, #4]
    2e42:	4a0e      	ldr	r2, [pc, #56]	; (2e7c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e44:	5cd3      	ldrb	r3, [r2, r3]
    2e46:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e48:	4a0d      	ldr	r2, [pc, #52]	; (2e80 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e4a:	9b05      	ldr	r3, [sp, #20]
    2e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e50:	681b      	ldr	r3, [r3, #0]
    2e52:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e54:	9b03      	ldr	r3, [sp, #12]
    2e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e5a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e5c:	9b04      	ldr	r3, [sp, #16]
    2e5e:	021b      	lsls	r3, r3, #8
    2e60:	9a03      	ldr	r2, [sp, #12]
    2e62:	4313      	orrs	r3, r2
    2e64:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e66:	4a06      	ldr	r2, [pc, #24]	; (2e80 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e68:	9b05      	ldr	r3, [sp, #20]
    2e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e6e:	9a03      	ldr	r2, [sp, #12]
    2e70:	601a      	str	r2, [r3, #0]
}
    2e72:	bf00      	nop
    2e74:	b006      	add	sp, #24
    2e76:	4770      	bx	lr
    2e78:	00014aa8 	.word	0x00014aa8
    2e7c:	00014ea0 	.word	0x00014ea0
    2e80:	00014ee4 	.word	0x00014ee4

00002e84 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e84:	b084      	sub	sp, #16
    2e86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e88:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e8a:	695b      	ldr	r3, [r3, #20]
    2e8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e8e:	9b03      	ldr	r3, [sp, #12]
    2e90:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e94:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e96:	9b01      	ldr	r3, [sp, #4]
    2e98:	685b      	ldr	r3, [r3, #4]
    2e9a:	3b01      	subs	r3, #1
    2e9c:	041b      	lsls	r3, r3, #16
    2e9e:	9a03      	ldr	r2, [sp, #12]
    2ea0:	4313      	orrs	r3, r2
    2ea2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ea4:	4a02      	ldr	r2, [pc, #8]	; (2eb0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2ea6:	9b03      	ldr	r3, [sp, #12]
    2ea8:	6153      	str	r3, [r2, #20]
}
    2eaa:	bf00      	nop
    2eac:	b004      	add	sp, #16
    2eae:	4770      	bx	lr
    2eb0:	40064000 	.word	0x40064000

00002eb4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2eb4:	b084      	sub	sp, #16
    2eb6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2eb8:	4b09      	ldr	r3, [pc, #36]	; (2ee0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2eba:	695b      	ldr	r3, [r3, #20]
    2ebc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2ebe:	9b03      	ldr	r3, [sp, #12]
    2ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ec4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2ec6:	9b01      	ldr	r3, [sp, #4]
    2ec8:	685b      	ldr	r3, [r3, #4]
    2eca:	3b01      	subs	r3, #1
    2ecc:	011b      	lsls	r3, r3, #4
    2ece:	9a03      	ldr	r2, [sp, #12]
    2ed0:	4313      	orrs	r3, r2
    2ed2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ed4:	4a02      	ldr	r2, [pc, #8]	; (2ee0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2ed6:	9b03      	ldr	r3, [sp, #12]
    2ed8:	6153      	str	r3, [r2, #20]
}
    2eda:	bf00      	nop
    2edc:	b004      	add	sp, #16
    2ede:	4770      	bx	lr
    2ee0:	40064000 	.word	0x40064000

00002ee4 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ee4:	b084      	sub	sp, #16
    2ee6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ee8:	4b09      	ldr	r3, [pc, #36]	; (2f10 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2eea:	695b      	ldr	r3, [r3, #20]
    2eec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2eee:	9b03      	ldr	r3, [sp, #12]
    2ef0:	f023 030f 	bic.w	r3, r3, #15
    2ef4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2ef6:	9b01      	ldr	r3, [sp, #4]
    2ef8:	685b      	ldr	r3, [r3, #4]
    2efa:	3b01      	subs	r3, #1
    2efc:	9a03      	ldr	r2, [sp, #12]
    2efe:	4313      	orrs	r3, r2
    2f00:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2f02:	4a03      	ldr	r2, [pc, #12]	; (2f10 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f04:	9b03      	ldr	r3, [sp, #12]
    2f06:	6153      	str	r3, [r2, #20]
}
    2f08:	bf00      	nop
    2f0a:	b004      	add	sp, #16
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	40064000 	.word	0x40064000

00002f14 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f14:	b084      	sub	sp, #16
    2f16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f18:	4b09      	ldr	r3, [pc, #36]	; (2f40 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f1a:	699b      	ldr	r3, [r3, #24]
    2f1c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f1e:	9b03      	ldr	r3, [sp, #12]
    2f20:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f24:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f26:	9b01      	ldr	r3, [sp, #4]
    2f28:	685b      	ldr	r3, [r3, #4]
    2f2a:	3b01      	subs	r3, #1
    2f2c:	041b      	lsls	r3, r3, #16
    2f2e:	9a03      	ldr	r2, [sp, #12]
    2f30:	4313      	orrs	r3, r2
    2f32:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f34:	4a02      	ldr	r2, [pc, #8]	; (2f40 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f36:	9b03      	ldr	r3, [sp, #12]
    2f38:	6193      	str	r3, [r2, #24]
}
    2f3a:	bf00      	nop
    2f3c:	b004      	add	sp, #16
    2f3e:	4770      	bx	lr
    2f40:	40064000 	.word	0x40064000

00002f44 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f44:	b084      	sub	sp, #16
    2f46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f48:	4b09      	ldr	r3, [pc, #36]	; (2f70 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f4a:	699b      	ldr	r3, [r3, #24]
    2f4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f4e:	9b03      	ldr	r3, [sp, #12]
    2f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f54:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f56:	9b01      	ldr	r3, [sp, #4]
    2f58:	685b      	ldr	r3, [r3, #4]
    2f5a:	3b01      	subs	r3, #1
    2f5c:	011b      	lsls	r3, r3, #4
    2f5e:	9a03      	ldr	r2, [sp, #12]
    2f60:	4313      	orrs	r3, r2
    2f62:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f64:	4a02      	ldr	r2, [pc, #8]	; (2f70 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f66:	9b03      	ldr	r3, [sp, #12]
    2f68:	6193      	str	r3, [r2, #24]
}
    2f6a:	bf00      	nop
    2f6c:	b004      	add	sp, #16
    2f6e:	4770      	bx	lr
    2f70:	40064000 	.word	0x40064000

00002f74 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f74:	b084      	sub	sp, #16
    2f76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f78:	4b09      	ldr	r3, [pc, #36]	; (2fa0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f7a:	699b      	ldr	r3, [r3, #24]
    2f7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f7e:	9b03      	ldr	r3, [sp, #12]
    2f80:	f023 030f 	bic.w	r3, r3, #15
    2f84:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f86:	9b01      	ldr	r3, [sp, #4]
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	3b01      	subs	r3, #1
    2f8c:	9a03      	ldr	r2, [sp, #12]
    2f8e:	4313      	orrs	r3, r2
    2f90:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f92:	4a03      	ldr	r2, [pc, #12]	; (2fa0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f94:	9b03      	ldr	r3, [sp, #12]
    2f96:	6193      	str	r3, [r2, #24]
}
    2f98:	bf00      	nop
    2f9a:	b004      	add	sp, #16
    2f9c:	4770      	bx	lr
    2f9e:	bf00      	nop
    2fa0:	40064000 	.word	0x40064000

00002fa4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fa4:	b084      	sub	sp, #16
    2fa6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fa8:	4b09      	ldr	r3, [pc, #36]	; (2fd0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2faa:	69db      	ldr	r3, [r3, #28]
    2fac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2fae:	9b03      	ldr	r3, [sp, #12]
    2fb0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2fb4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2fb6:	9b01      	ldr	r3, [sp, #4]
    2fb8:	685b      	ldr	r3, [r3, #4]
    2fba:	3b01      	subs	r3, #1
    2fbc:	041b      	lsls	r3, r3, #16
    2fbe:	9a03      	ldr	r2, [sp, #12]
    2fc0:	4313      	orrs	r3, r2
    2fc2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fc4:	4a02      	ldr	r2, [pc, #8]	; (2fd0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fc6:	9b03      	ldr	r3, [sp, #12]
    2fc8:	61d3      	str	r3, [r2, #28]
}
    2fca:	bf00      	nop
    2fcc:	b004      	add	sp, #16
    2fce:	4770      	bx	lr
    2fd0:	40064000 	.word	0x40064000

00002fd4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fd4:	b084      	sub	sp, #16
    2fd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fd8:	4b09      	ldr	r3, [pc, #36]	; (3000 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fda:	69db      	ldr	r3, [r3, #28]
    2fdc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2fde:	9b03      	ldr	r3, [sp, #12]
    2fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2fe4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2fe6:	9b01      	ldr	r3, [sp, #4]
    2fe8:	685b      	ldr	r3, [r3, #4]
    2fea:	3b01      	subs	r3, #1
    2fec:	011b      	lsls	r3, r3, #4
    2fee:	9a03      	ldr	r2, [sp, #12]
    2ff0:	4313      	orrs	r3, r2
    2ff2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ff4:	4a02      	ldr	r2, [pc, #8]	; (3000 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2ff6:	9b03      	ldr	r3, [sp, #12]
    2ff8:	61d3      	str	r3, [r2, #28]
}
    2ffa:	bf00      	nop
    2ffc:	b004      	add	sp, #16
    2ffe:	4770      	bx	lr
    3000:	40064000 	.word	0x40064000

00003004 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3004:	b084      	sub	sp, #16
    3006:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3008:	4b09      	ldr	r3, [pc, #36]	; (3030 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    300a:	69db      	ldr	r3, [r3, #28]
    300c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    300e:	9b03      	ldr	r3, [sp, #12]
    3010:	f023 030f 	bic.w	r3, r3, #15
    3014:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3016:	9b01      	ldr	r3, [sp, #4]
    3018:	685b      	ldr	r3, [r3, #4]
    301a:	3b01      	subs	r3, #1
    301c:	9a03      	ldr	r2, [sp, #12]
    301e:	4313      	orrs	r3, r2
    3020:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3022:	4a03      	ldr	r2, [pc, #12]	; (3030 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3024:	9b03      	ldr	r3, [sp, #12]
    3026:	61d3      	str	r3, [r2, #28]
}
    3028:	bf00      	nop
    302a:	b004      	add	sp, #16
    302c:	4770      	bx	lr
    302e:	bf00      	nop
    3030:	40064000 	.word	0x40064000

00003034 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3034:	b084      	sub	sp, #16
    3036:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3038:	4b0a      	ldr	r3, [pc, #40]	; (3064 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    303a:	685b      	ldr	r3, [r3, #4]
    303c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    303e:	9b03      	ldr	r3, [sp, #12]
    3040:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3044:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	685b      	ldr	r3, [r3, #4]
    304a:	3b01      	subs	r3, #1
    304c:	021b      	lsls	r3, r3, #8
    304e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3052:	9a03      	ldr	r2, [sp, #12]
    3054:	4313      	orrs	r3, r2
    3056:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3058:	4a02      	ldr	r2, [pc, #8]	; (3064 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    305a:	9b03      	ldr	r3, [sp, #12]
    305c:	6053      	str	r3, [r2, #4]
}
    305e:	bf00      	nop
    3060:	b004      	add	sp, #16
    3062:	4770      	bx	lr
    3064:	40048000 	.word	0x40048000

00003068 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3068:	b084      	sub	sp, #16
    306a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    306c:	4919      	ldr	r1, [pc, #100]	; (30d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	681a      	ldr	r2, [r3, #0]
    3072:	4819      	ldr	r0, [pc, #100]	; (30d8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3074:	4613      	mov	r3, r2
    3076:	00db      	lsls	r3, r3, #3
    3078:	4413      	add	r3, r2
    307a:	4403      	add	r3, r0
    307c:	3305      	adds	r3, #5
    307e:	781b      	ldrb	r3, [r3, #0]
    3080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3084:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3086:	9b03      	ldr	r3, [sp, #12]
    3088:	f023 030f 	bic.w	r3, r3, #15
    308c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	685b      	ldr	r3, [r3, #4]
    3092:	3b01      	subs	r3, #1
    3094:	f003 0307 	and.w	r3, r3, #7
    3098:	9a03      	ldr	r2, [sp, #12]
    309a:	4313      	orrs	r3, r2
    309c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    309e:	9b01      	ldr	r3, [sp, #4]
    30a0:	7a1b      	ldrb	r3, [r3, #8]
    30a2:	3b01      	subs	r3, #1
    30a4:	00db      	lsls	r3, r3, #3
    30a6:	f003 0308 	and.w	r3, r3, #8
    30aa:	9a03      	ldr	r2, [sp, #12]
    30ac:	4313      	orrs	r3, r2
    30ae:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    30b0:	4908      	ldr	r1, [pc, #32]	; (30d4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30b2:	9b01      	ldr	r3, [sp, #4]
    30b4:	681a      	ldr	r2, [r3, #0]
    30b6:	4808      	ldr	r0, [pc, #32]	; (30d8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30b8:	4613      	mov	r3, r2
    30ba:	00db      	lsls	r3, r3, #3
    30bc:	4413      	add	r3, r2
    30be:	4403      	add	r3, r0
    30c0:	3305      	adds	r3, #5
    30c2:	781b      	ldrb	r3, [r3, #0]
    30c4:	461a      	mov	r2, r3
    30c6:	9b03      	ldr	r3, [sp, #12]
    30c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30cc:	bf00      	nop
    30ce:	b004      	add	sp, #16
    30d0:	4770      	bx	lr
    30d2:	bf00      	nop
    30d4:	40065000 	.word	0x40065000
    30d8:	00014aa8 	.word	0x00014aa8

000030dc <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30dc:	b084      	sub	sp, #16
    30de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    30e0:	4b10      	ldr	r3, [pc, #64]	; (3124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30e4:	4a0f      	ldr	r2, [pc, #60]	; (3124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    30ea:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    30ec:	4b0d      	ldr	r3, [pc, #52]	; (3124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    30f2:	9b03      	ldr	r3, [sp, #12]
    30f4:	f023 030f 	bic.w	r3, r3, #15
    30f8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30fa:	9b01      	ldr	r3, [sp, #4]
    30fc:	685b      	ldr	r3, [r3, #4]
    30fe:	3b01      	subs	r3, #1
    3100:	005b      	lsls	r3, r3, #1
    3102:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3106:	9b01      	ldr	r3, [sp, #4]
    3108:	7a1b      	ldrb	r3, [r3, #8]
    310a:	3b01      	subs	r3, #1
    310c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3110:	4313      	orrs	r3, r2
    3112:	9a03      	ldr	r2, [sp, #12]
    3114:	4313      	orrs	r3, r2
    3116:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3118:	4a02      	ldr	r2, [pc, #8]	; (3124 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    311a:	9b03      	ldr	r3, [sp, #12]
    311c:	6693      	str	r3, [r2, #104]	; 0x68
}
    311e:	bf00      	nop
    3120:	b004      	add	sp, #16
    3122:	4770      	bx	lr
    3124:	40048000 	.word	0x40048000

00003128 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3128:	b082      	sub	sp, #8
    312a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    312c:	bf00      	nop
    312e:	b002      	add	sp, #8
    3130:	4770      	bx	lr
	...

00003134 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3134:	b082      	sub	sp, #8
    3136:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3138:	bf00      	nop
    313a:	b002      	add	sp, #8
    313c:	4770      	bx	lr

0000313e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    313e:	b082      	sub	sp, #8
    3140:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3142:	bf00      	nop
    3144:	b002      	add	sp, #8
    3146:	4770      	bx	lr

00003148 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3148:	b500      	push	{lr}
    314a:	b083      	sub	sp, #12
    314c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    314e:	9b01      	ldr	r3, [sp, #4]
    3150:	2b00      	cmp	r3, #0
    3152:	d002      	beq.n	315a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3154:	9801      	ldr	r0, [sp, #4]
    3156:	f000 f86a 	bl	322e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    315a:	bf00      	nop
    315c:	b003      	add	sp, #12
    315e:	f85d fb04 	ldr.w	pc, [sp], #4

00003162 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3162:	b500      	push	{lr}
    3164:	b083      	sub	sp, #12
    3166:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3168:	9b01      	ldr	r3, [sp, #4]
    316a:	2b00      	cmp	r3, #0
    316c:	d002      	beq.n	3174 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    316e:	9801      	ldr	r0, [sp, #4]
    3170:	f000 f884 	bl	327c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3174:	bf00      	nop
    3176:	b003      	add	sp, #12
    3178:	f85d fb04 	ldr.w	pc, [sp], #4

0000317c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    317c:	b500      	push	{lr}
    317e:	b089      	sub	sp, #36	; 0x24
    3180:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3182:	2300      	movs	r3, #0
    3184:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3188:	9b01      	ldr	r3, [sp, #4]
    318a:	2b00      	cmp	r3, #0
    318c:	d031      	beq.n	31f2 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    318e:	4b1b      	ldr	r3, [pc, #108]	; (31fc <Clock_Ip_CompleteSOSC+0x80>)
    3190:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3194:	f003 0301 	and.w	r3, r3, #1
    3198:	2b00      	cmp	r3, #0
    319a:	d02a      	beq.n	31f2 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    319c:	aa03      	add	r2, sp, #12
    319e:	a904      	add	r1, sp, #16
    31a0:	a805      	add	r0, sp, #20
    31a2:	f24c 3350 	movw	r3, #50000	; 0xc350
    31a6:	f7ff fd1d 	bl	2be4 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    31aa:	4b14      	ldr	r3, [pc, #80]	; (31fc <Clock_Ip_CompleteSOSC+0x80>)
    31ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31b0:	0e1b      	lsrs	r3, r3, #24
    31b2:	f003 0301 	and.w	r3, r3, #1
    31b6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31b8:	9a03      	ldr	r2, [sp, #12]
    31ba:	a904      	add	r1, sp, #16
    31bc:	ab05      	add	r3, sp, #20
    31be:	4618      	mov	r0, r3
    31c0:	f7ff fd2a 	bl	2c18 <Clock_Ip_TimeoutExpired>
    31c4:	4603      	mov	r3, r0
    31c6:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    31ca:	9b06      	ldr	r3, [sp, #24]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d106      	bne.n	31de <Clock_Ip_CompleteSOSC+0x62>
    31d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31d4:	f083 0301 	eor.w	r3, r3, #1
    31d8:	b2db      	uxtb	r3, r3
    31da:	2b00      	cmp	r3, #0
    31dc:	d1e5      	bne.n	31aa <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31e2:	2b00      	cmp	r3, #0
    31e4:	d005      	beq.n	31f2 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31e6:	9b01      	ldr	r3, [sp, #4]
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	4619      	mov	r1, r3
    31ec:	2001      	movs	r0, #1
    31ee:	f7ff fce9 	bl	2bc4 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    31f2:	bf00      	nop
    31f4:	b009      	add	sp, #36	; 0x24
    31f6:	f85d fb04 	ldr.w	pc, [sp], #4
    31fa:	bf00      	nop
    31fc:	40064000 	.word	0x40064000

00003200 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3200:	b500      	push	{lr}
    3202:	b083      	sub	sp, #12
    3204:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3206:	9801      	ldr	r0, [sp, #4]
    3208:	f000 f8c0 	bl	338c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    320c:	bf00      	nop
    320e:	b003      	add	sp, #12
    3210:	f85d fb04 	ldr.w	pc, [sp], #4

00003214 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3214:	b500      	push	{lr}
    3216:	b083      	sub	sp, #12
    3218:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	2b00      	cmp	r3, #0
    321e:	d002      	beq.n	3226 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3220:	9801      	ldr	r0, [sp, #4]
    3222:	f000 f8c3 	bl	33ac <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3226:	bf00      	nop
    3228:	b003      	add	sp, #12
    322a:	f85d fb04 	ldr.w	pc, [sp], #4

0000322e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    322e:	b082      	sub	sp, #8
    3230:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3232:	4b11      	ldr	r3, [pc, #68]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3234:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3238:	4a0f      	ldr	r2, [pc, #60]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    323a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    323e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3242:	4b0d      	ldr	r3, [pc, #52]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3244:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3248:	4a0b      	ldr	r2, [pc, #44]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    324e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3252:	4b09      	ldr	r3, [pc, #36]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3254:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3258:	4a07      	ldr	r2, [pc, #28]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    325a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    325e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3262:	4b05      	ldr	r3, [pc, #20]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3264:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3268:	4a03      	ldr	r2, [pc, #12]	; (3278 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    326a:	f023 0301 	bic.w	r3, r3, #1
    326e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3272:	bf00      	nop
    3274:	b002      	add	sp, #8
    3276:	4770      	bx	lr
    3278:	40064000 	.word	0x40064000

0000327c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    327c:	b082      	sub	sp, #8
    327e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3280:	9b01      	ldr	r3, [sp, #4]
    3282:	891b      	ldrh	r3, [r3, #8]
    3284:	2b01      	cmp	r3, #1
    3286:	d174      	bne.n	3372 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3288:	9b01      	ldr	r3, [sp, #4]
    328a:	7bdb      	ldrb	r3, [r3, #15]
    328c:	2b00      	cmp	r3, #0
    328e:	d002      	beq.n	3296 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3290:	2b01      	cmp	r3, #1
    3292:	d009      	beq.n	32a8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3294:	e011      	b.n	32ba <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3296:	4b39      	ldr	r3, [pc, #228]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3298:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    329c:	4a37      	ldr	r2, [pc, #220]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329e:	f023 0308 	bic.w	r3, r3, #8
    32a2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32a6:	e008      	b.n	32ba <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    32a8:	4b34      	ldr	r3, [pc, #208]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32ae:	4a33      	ldr	r2, [pc, #204]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32b0:	f043 0308 	orr.w	r3, r3, #8
    32b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32b8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32ba:	4b30      	ldr	r3, [pc, #192]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32c0:	4a2e      	ldr	r2, [pc, #184]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    32c6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    32ca:	9b01      	ldr	r3, [sp, #4]
    32cc:	685b      	ldr	r3, [r3, #4]
    32ce:	4a2c      	ldr	r2, [pc, #176]	; (3380 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32d0:	4293      	cmp	r3, r2
    32d2:	d90d      	bls.n	32f0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32d4:	9b01      	ldr	r3, [sp, #4]
    32d6:	685b      	ldr	r3, [r3, #4]
    32d8:	4a2a      	ldr	r2, [pc, #168]	; (3384 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32da:	4293      	cmp	r3, r2
    32dc:	d208      	bcs.n	32f0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32de:	4b27      	ldr	r3, [pc, #156]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e4:	4a25      	ldr	r2, [pc, #148]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e6:	f043 0320 	orr.w	r3, r3, #32
    32ea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32ee:	e007      	b.n	3300 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    32f0:	4b22      	ldr	r3, [pc, #136]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32f6:	4a21      	ldr	r2, [pc, #132]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    32fc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3300:	9b01      	ldr	r3, [sp, #4]
    3302:	7b1b      	ldrb	r3, [r3, #12]
    3304:	2b00      	cmp	r3, #0
    3306:	d108      	bne.n	331a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3308:	4b1c      	ldr	r3, [pc, #112]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    330a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    330e:	4a1b      	ldr	r2, [pc, #108]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3310:	f043 0304 	orr.w	r3, r3, #4
    3314:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3318:	e007      	b.n	332a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    331a:	4b18      	ldr	r3, [pc, #96]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    331c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3320:	4a16      	ldr	r2, [pc, #88]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3322:	f023 0304 	bic.w	r3, r3, #4
    3326:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    332a:	9b01      	ldr	r3, [sp, #4]
    332c:	7c1b      	ldrb	r3, [r3, #16]
    332e:	2b02      	cmp	r3, #2
    3330:	d011      	beq.n	3356 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3332:	2b02      	cmp	r3, #2
    3334:	dc14      	bgt.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3336:	2b00      	cmp	r3, #0
    3338:	d002      	beq.n	3340 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    333a:	2b01      	cmp	r3, #1
    333c:	d005      	beq.n	334a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    333e:	e00f      	b.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3340:	4b0e      	ldr	r3, [pc, #56]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3342:	2201      	movs	r2, #1
    3344:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3348:	e014      	b.n	3374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    334a:	4b0c      	ldr	r3, [pc, #48]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    334c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3350:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3354:	e00e      	b.n	3374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3356:	4b09      	ldr	r3, [pc, #36]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3358:	4a0b      	ldr	r2, [pc, #44]	; (3388 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    335a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    335e:	e009      	b.n	3374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3360:	4b06      	ldr	r3, [pc, #24]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3362:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3366:	4a05      	ldr	r2, [pc, #20]	; (337c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3368:	f043 0301 	orr.w	r3, r3, #1
    336c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3370:	e000      	b.n	3374 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3372:	bf00      	nop
}
    3374:	bf00      	nop
    3376:	b002      	add	sp, #8
    3378:	4770      	bx	lr
    337a:	bf00      	nop
    337c:	40064000 	.word	0x40064000
    3380:	003d08ff 	.word	0x003d08ff
    3384:	007a1200 	.word	0x007a1200
    3388:	00030001 	.word	0x00030001

0000338c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    338c:	b082      	sub	sp, #8
    338e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3390:	4b05      	ldr	r3, [pc, #20]	; (33a8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3392:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3396:	4a04      	ldr	r2, [pc, #16]	; (33a8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3398:	f023 0301 	bic.w	r3, r3, #1
    339c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    33a0:	bf00      	nop
    33a2:	b002      	add	sp, #8
    33a4:	4770      	bx	lr
    33a6:	bf00      	nop
    33a8:	40064000 	.word	0x40064000

000033ac <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    33ac:	b082      	sub	sp, #8
    33ae:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    33b0:	9b01      	ldr	r3, [sp, #4]
    33b2:	891b      	ldrh	r3, [r3, #8]
    33b4:	2b01      	cmp	r3, #1
    33b6:	d107      	bne.n	33c8 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33b8:	4b05      	ldr	r3, [pc, #20]	; (33d0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33be:	4a04      	ldr	r2, [pc, #16]	; (33d0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33c0:	f043 0301 	orr.w	r3, r3, #1
    33c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    33c8:	bf00      	nop
    33ca:	b002      	add	sp, #8
    33cc:	4770      	bx	lr
    33ce:	bf00      	nop
    33d0:	40064000 	.word	0x40064000

000033d4 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33d4:	b082      	sub	sp, #8
    33d6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33d8:	bf00      	nop
    33da:	b002      	add	sp, #8
    33dc:	4770      	bx	lr

000033de <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33de:	b082      	sub	sp, #8
    33e0:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    33e2:	2300      	movs	r3, #0
}
    33e4:	4618      	mov	r0, r3
    33e6:	b002      	add	sp, #8
    33e8:	4770      	bx	lr

000033ea <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    33ea:	b082      	sub	sp, #8
    33ec:	9001      	str	r0, [sp, #4]
    33ee:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    33f0:	bf00      	nop
    33f2:	b002      	add	sp, #8
    33f4:	4770      	bx	lr
	...

000033f8 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    33f8:	b082      	sub	sp, #8
    33fa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33fc:	bf00      	nop
    33fe:	b002      	add	sp, #8
    3400:	4770      	bx	lr

00003402 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3402:	b082      	sub	sp, #8
    3404:	9001      	str	r0, [sp, #4]
    3406:	460b      	mov	r3, r1
    3408:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    340c:	bf00      	nop
    340e:	b002      	add	sp, #8
    3410:	4770      	bx	lr

00003412 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3412:	b500      	push	{lr}
    3414:	b083      	sub	sp, #12
    3416:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3418:	9b01      	ldr	r3, [sp, #4]
    341a:	2b00      	cmp	r3, #0
    341c:	d002      	beq.n	3424 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    341e:	9801      	ldr	r0, [sp, #4]
    3420:	f000 f8e7 	bl	35f2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3424:	bf00      	nop
    3426:	b003      	add	sp, #12
    3428:	f85d fb04 	ldr.w	pc, [sp], #4

0000342c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    342c:	b500      	push	{lr}
    342e:	b085      	sub	sp, #20
    3430:	9001      	str	r0, [sp, #4]
    3432:	460b      	mov	r3, r1
    3434:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3438:	9b01      	ldr	r3, [sp, #4]
    343a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    343c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3440:	2b00      	cmp	r3, #0
    3442:	d003      	beq.n	344c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3444:	2300      	movs	r3, #0
    3446:	f8ad 300c 	strh.w	r3, [sp, #12]
    344a:	e002      	b.n	3452 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    344c:	2301      	movs	r3, #1
    344e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3452:	ab02      	add	r3, sp, #8
    3454:	4618      	mov	r0, r3
    3456:	f7ff ffdc 	bl	3412 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    345a:	bf00      	nop
    345c:	b005      	add	sp, #20
    345e:	f85d fb04 	ldr.w	pc, [sp], #4

00003462 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3462:	b500      	push	{lr}
    3464:	b083      	sub	sp, #12
    3466:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3468:	9b01      	ldr	r3, [sp, #4]
    346a:	2b00      	cmp	r3, #0
    346c:	d002      	beq.n	3474 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    346e:	9801      	ldr	r0, [sp, #4]
    3470:	f000 f8d6 	bl	3620 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3474:	bf00      	nop
    3476:	b003      	add	sp, #12
    3478:	f85d fb04 	ldr.w	pc, [sp], #4

0000347c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    347c:	b500      	push	{lr}
    347e:	b085      	sub	sp, #20
    3480:	9001      	str	r0, [sp, #4]
    3482:	460b      	mov	r3, r1
    3484:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3488:	9b01      	ldr	r3, [sp, #4]
    348a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    348c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3490:	2b00      	cmp	r3, #0
    3492:	d003      	beq.n	349c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3494:	2300      	movs	r3, #0
    3496:	f8ad 300c 	strh.w	r3, [sp, #12]
    349a:	e002      	b.n	34a2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    349c:	2301      	movs	r3, #1
    349e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    34a2:	ab02      	add	r3, sp, #8
    34a4:	4618      	mov	r0, r3
    34a6:	f7ff ffdc 	bl	3462 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    34aa:	bf00      	nop
    34ac:	b005      	add	sp, #20
    34ae:	f85d fb04 	ldr.w	pc, [sp], #4

000034b2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    34b2:	b500      	push	{lr}
    34b4:	b083      	sub	sp, #12
    34b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34b8:	9b01      	ldr	r3, [sp, #4]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d002      	beq.n	34c4 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    34be:	9801      	ldr	r0, [sp, #4]
    34c0:	f000 f8c6 	bl	3650 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34c4:	bf00      	nop
    34c6:	b003      	add	sp, #12
    34c8:	f85d fb04 	ldr.w	pc, [sp], #4

000034cc <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34cc:	b500      	push	{lr}
    34ce:	b085      	sub	sp, #20
    34d0:	9001      	str	r0, [sp, #4]
    34d2:	460b      	mov	r3, r1
    34d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d003      	beq.n	34ec <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    34e4:	2300      	movs	r3, #0
    34e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    34ea:	e002      	b.n	34f2 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34ec:	2301      	movs	r3, #1
    34ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    34f2:	ab02      	add	r3, sp, #8
    34f4:	4618      	mov	r0, r3
    34f6:	f7ff ffdc 	bl	34b2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    34fa:	bf00      	nop
    34fc:	b005      	add	sp, #20
    34fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003502 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3502:	b500      	push	{lr}
    3504:	b083      	sub	sp, #12
    3506:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3508:	9b01      	ldr	r3, [sp, #4]
    350a:	2b00      	cmp	r3, #0
    350c:	d002      	beq.n	3514 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    350e:	9801      	ldr	r0, [sp, #4]
    3510:	f000 f8b6 	bl	3680 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3514:	bf00      	nop
    3516:	b003      	add	sp, #12
    3518:	f85d fb04 	ldr.w	pc, [sp], #4

0000351c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    351c:	b500      	push	{lr}
    351e:	b085      	sub	sp, #20
    3520:	9001      	str	r0, [sp, #4]
    3522:	460b      	mov	r3, r1
    3524:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3528:	9b01      	ldr	r3, [sp, #4]
    352a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    352c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3530:	2b00      	cmp	r3, #0
    3532:	d003      	beq.n	353c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3534:	2300      	movs	r3, #0
    3536:	f8ad 300c 	strh.w	r3, [sp, #12]
    353a:	e002      	b.n	3542 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    353c:	2301      	movs	r3, #1
    353e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3542:	ab02      	add	r3, sp, #8
    3544:	4618      	mov	r0, r3
    3546:	f7ff ffdc 	bl	3502 <Clock_Ip_ClockSetPccCgcEnable>
}
    354a:	bf00      	nop
    354c:	b005      	add	sp, #20
    354e:	f85d fb04 	ldr.w	pc, [sp], #4

00003552 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3552:	b500      	push	{lr}
    3554:	b083      	sub	sp, #12
    3556:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3558:	9b01      	ldr	r3, [sp, #4]
    355a:	2b00      	cmp	r3, #0
    355c:	d002      	beq.n	3564 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    355e:	9801      	ldr	r0, [sp, #4]
    3560:	f000 f8bc 	bl	36dc <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3564:	bf00      	nop
    3566:	b003      	add	sp, #12
    3568:	f85d fb04 	ldr.w	pc, [sp], #4

0000356c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    356c:	b500      	push	{lr}
    356e:	b085      	sub	sp, #20
    3570:	9001      	str	r0, [sp, #4]
    3572:	460b      	mov	r3, r1
    3574:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3578:	9b01      	ldr	r3, [sp, #4]
    357a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    357c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3580:	2b00      	cmp	r3, #0
    3582:	d003      	beq.n	358c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3584:	2300      	movs	r3, #0
    3586:	f8ad 300c 	strh.w	r3, [sp, #12]
    358a:	e002      	b.n	3592 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    358c:	2301      	movs	r3, #1
    358e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3592:	ab02      	add	r3, sp, #8
    3594:	4618      	mov	r0, r3
    3596:	f7ff ffdc 	bl	3552 <Clock_Ip_ClockSetSimGate>
}
    359a:	bf00      	nop
    359c:	b005      	add	sp, #20
    359e:	f85d fb04 	ldr.w	pc, [sp], #4

000035a2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    35a2:	b500      	push	{lr}
    35a4:	b083      	sub	sp, #12
    35a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35a8:	9b01      	ldr	r3, [sp, #4]
    35aa:	2b00      	cmp	r3, #0
    35ac:	d002      	beq.n	35b4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    35ae:	9801      	ldr	r0, [sp, #4]
    35b0:	f000 f8c0 	bl	3734 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35b4:	bf00      	nop
    35b6:	b003      	add	sp, #12
    35b8:	f85d fb04 	ldr.w	pc, [sp], #4

000035bc <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    35bc:	b500      	push	{lr}
    35be:	b085      	sub	sp, #20
    35c0:	9001      	str	r0, [sp, #4]
    35c2:	460b      	mov	r3, r1
    35c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35c8:	9b01      	ldr	r3, [sp, #4]
    35ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35d0:	2b00      	cmp	r3, #0
    35d2:	d003      	beq.n	35dc <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35d4:	2300      	movs	r3, #0
    35d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    35da:	e002      	b.n	35e2 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35dc:	2301      	movs	r3, #1
    35de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    35e2:	ab02      	add	r3, sp, #8
    35e4:	4618      	mov	r0, r3
    35e6:	f7ff ffdc 	bl	35a2 <Clock_Ip_ClockSetSimTraceEnable>
}
    35ea:	bf00      	nop
    35ec:	b005      	add	sp, #20
    35ee:	f85d fb04 	ldr.w	pc, [sp], #4

000035f2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35f2:	b084      	sub	sp, #16
    35f4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35f6:	4b09      	ldr	r3, [pc, #36]	; (361c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35f8:	691b      	ldr	r3, [r3, #16]
    35fa:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    35fc:	9b03      	ldr	r3, [sp, #12]
    35fe:	f023 0301 	bic.w	r3, r3, #1
    3602:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3604:	9b01      	ldr	r3, [sp, #4]
    3606:	889b      	ldrh	r3, [r3, #4]
    3608:	461a      	mov	r2, r3
    360a:	9b03      	ldr	r3, [sp, #12]
    360c:	4313      	orrs	r3, r2
    360e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3610:	4a02      	ldr	r2, [pc, #8]	; (361c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3612:	9b03      	ldr	r3, [sp, #12]
    3614:	6113      	str	r3, [r2, #16]
}
    3616:	bf00      	nop
    3618:	b004      	add	sp, #16
    361a:	4770      	bx	lr
    361c:	40048000 	.word	0x40048000

00003620 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3620:	b084      	sub	sp, #16
    3622:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3624:	4b09      	ldr	r3, [pc, #36]	; (364c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3626:	691b      	ldr	r3, [r3, #16]
    3628:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    362a:	9b03      	ldr	r3, [sp, #12]
    362c:	f023 0302 	bic.w	r3, r3, #2
    3630:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3632:	9b01      	ldr	r3, [sp, #4]
    3634:	889b      	ldrh	r3, [r3, #4]
    3636:	005b      	lsls	r3, r3, #1
    3638:	9a03      	ldr	r2, [sp, #12]
    363a:	4313      	orrs	r3, r2
    363c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    363e:	4a03      	ldr	r2, [pc, #12]	; (364c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3640:	9b03      	ldr	r3, [sp, #12]
    3642:	6113      	str	r3, [r2, #16]
}
    3644:	bf00      	nop
    3646:	b004      	add	sp, #16
    3648:	4770      	bx	lr
    364a:	bf00      	nop
    364c:	40048000 	.word	0x40048000

00003650 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3650:	b084      	sub	sp, #16
    3652:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3654:	4b09      	ldr	r3, [pc, #36]	; (367c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3656:	685b      	ldr	r3, [r3, #4]
    3658:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    365a:	9b03      	ldr	r3, [sp, #12]
    365c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3660:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3662:	9b01      	ldr	r3, [sp, #4]
    3664:	889b      	ldrh	r3, [r3, #4]
    3666:	02db      	lsls	r3, r3, #11
    3668:	9a03      	ldr	r2, [sp, #12]
    366a:	4313      	orrs	r3, r2
    366c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    366e:	4a03      	ldr	r2, [pc, #12]	; (367c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3670:	9b03      	ldr	r3, [sp, #12]
    3672:	6053      	str	r3, [r2, #4]
}
    3674:	bf00      	nop
    3676:	b004      	add	sp, #16
    3678:	4770      	bx	lr
    367a:	bf00      	nop
    367c:	40048000 	.word	0x40048000

00003680 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3680:	b084      	sub	sp, #16
    3682:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3684:	4913      	ldr	r1, [pc, #76]	; (36d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	681a      	ldr	r2, [r3, #0]
    368a:	4813      	ldr	r0, [pc, #76]	; (36d8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    368c:	4613      	mov	r3, r2
    368e:	00db      	lsls	r3, r3, #3
    3690:	4413      	add	r3, r2
    3692:	4403      	add	r3, r0
    3694:	3306      	adds	r3, #6
    3696:	781b      	ldrb	r3, [r3, #0]
    3698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    369c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    369e:	9b03      	ldr	r3, [sp, #12]
    36a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    36a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    36a6:	9b01      	ldr	r3, [sp, #4]
    36a8:	889b      	ldrh	r3, [r3, #4]
    36aa:	079b      	lsls	r3, r3, #30
    36ac:	9a03      	ldr	r2, [sp, #12]
    36ae:	4313      	orrs	r3, r2
    36b0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    36b2:	4908      	ldr	r1, [pc, #32]	; (36d4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36b4:	9b01      	ldr	r3, [sp, #4]
    36b6:	681a      	ldr	r2, [r3, #0]
    36b8:	4807      	ldr	r0, [pc, #28]	; (36d8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36ba:	4613      	mov	r3, r2
    36bc:	00db      	lsls	r3, r3, #3
    36be:	4413      	add	r3, r2
    36c0:	4403      	add	r3, r0
    36c2:	3306      	adds	r3, #6
    36c4:	781b      	ldrb	r3, [r3, #0]
    36c6:	461a      	mov	r2, r3
    36c8:	9b03      	ldr	r3, [sp, #12]
    36ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36ce:	bf00      	nop
    36d0:	b004      	add	sp, #16
    36d2:	4770      	bx	lr
    36d4:	40065000 	.word	0x40065000
    36d8:	00014aa8 	.word	0x00014aa8

000036dc <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36dc:	b086      	sub	sp, #24
    36de:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    36e0:	9b01      	ldr	r3, [sp, #4]
    36e2:	889b      	ldrh	r3, [r3, #4]
    36e4:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    36e6:	9b01      	ldr	r3, [sp, #4]
    36e8:	681a      	ldr	r2, [r3, #0]
    36ea:	4910      	ldr	r1, [pc, #64]	; (372c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    36ec:	4613      	mov	r3, r2
    36ee:	00db      	lsls	r3, r3, #3
    36f0:	4413      	add	r3, r2
    36f2:	440b      	add	r3, r1
    36f4:	3306      	adds	r3, #6
    36f6:	781b      	ldrb	r3, [r3, #0]
    36f8:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    36fa:	4b0d      	ldr	r3, [pc, #52]	; (3730 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36fe:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3700:	2201      	movs	r2, #1
    3702:	9b04      	ldr	r3, [sp, #16]
    3704:	fa02 f303 	lsl.w	r3, r2, r3
    3708:	43db      	mvns	r3, r3
    370a:	9a03      	ldr	r2, [sp, #12]
    370c:	4013      	ands	r3, r2
    370e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3710:	9a05      	ldr	r2, [sp, #20]
    3712:	9b04      	ldr	r3, [sp, #16]
    3714:	fa02 f303 	lsl.w	r3, r2, r3
    3718:	9a03      	ldr	r2, [sp, #12]
    371a:	4313      	orrs	r3, r2
    371c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    371e:	4a04      	ldr	r2, [pc, #16]	; (3730 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3720:	9b03      	ldr	r3, [sp, #12]
    3722:	6413      	str	r3, [r2, #64]	; 0x40
}
    3724:	bf00      	nop
    3726:	b006      	add	sp, #24
    3728:	4770      	bx	lr
    372a:	bf00      	nop
    372c:	00014aa8 	.word	0x00014aa8
    3730:	40048000 	.word	0x40048000

00003734 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3734:	b084      	sub	sp, #16
    3736:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3738:	4b0a      	ldr	r3, [pc, #40]	; (3764 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    373a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    373c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    373e:	9b01      	ldr	r3, [sp, #4]
    3740:	889b      	ldrh	r3, [r3, #4]
    3742:	2b01      	cmp	r3, #1
    3744:	d104      	bne.n	3750 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3746:	9b03      	ldr	r3, [sp, #12]
    3748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    374c:	9303      	str	r3, [sp, #12]
    374e:	e003      	b.n	3758 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3750:	9b03      	ldr	r3, [sp, #12]
    3752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3756:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3758:	4a02      	ldr	r2, [pc, #8]	; (3764 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    375a:	9b03      	ldr	r3, [sp, #12]
    375c:	6693      	str	r3, [r2, #104]	; 0x68
}
    375e:	bf00      	nop
    3760:	b004      	add	sp, #16
    3762:	4770      	bx	lr
    3764:	40048000 	.word	0x40048000

00003768 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3768:	b082      	sub	sp, #8
    376a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    376c:	bf00      	nop
    376e:	b002      	add	sp, #8
    3770:	4770      	bx	lr

00003772 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3772:	b082      	sub	sp, #8
    3774:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3776:	bf00      	nop
    3778:	b002      	add	sp, #8
    377a:	4770      	bx	lr

0000377c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    377c:	b500      	push	{lr}
    377e:	b083      	sub	sp, #12
    3780:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3782:	9b01      	ldr	r3, [sp, #4]
    3784:	2b00      	cmp	r3, #0
    3786:	d002      	beq.n	378e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3788:	9801      	ldr	r0, [sp, #4]
    378a:	f000 f8d1 	bl	3930 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    378e:	bf00      	nop
    3790:	b003      	add	sp, #12
    3792:	f85d fb04 	ldr.w	pc, [sp], #4

00003796 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3796:	b500      	push	{lr}
    3798:	b083      	sub	sp, #12
    379a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    379c:	9b01      	ldr	r3, [sp, #4]
    379e:	2b00      	cmp	r3, #0
    37a0:	d002      	beq.n	37a8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    37a2:	9801      	ldr	r0, [sp, #4]
    37a4:	f000 f950 	bl	3a48 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a8:	bf00      	nop
    37aa:	b003      	add	sp, #12
    37ac:	f85d fb04 	ldr.w	pc, [sp], #4

000037b0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    37b0:	b500      	push	{lr}
    37b2:	b083      	sub	sp, #12
    37b4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37b6:	9801      	ldr	r0, [sp, #4]
    37b8:	f000 f98e 	bl	3ad8 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37bc:	bf00      	nop
    37be:	b003      	add	sp, #12
    37c0:	f85d fb04 	ldr.w	pc, [sp], #4

000037c4 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37c4:	b500      	push	{lr}
    37c6:	b083      	sub	sp, #12
    37c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ca:	9b01      	ldr	r3, [sp, #4]
    37cc:	2b00      	cmp	r3, #0
    37ce:	d002      	beq.n	37d6 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37d0:	9801      	ldr	r0, [sp, #4]
    37d2:	f000 f999 	bl	3b08 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d6:	bf00      	nop
    37d8:	b003      	add	sp, #12
    37da:	f85d fb04 	ldr.w	pc, [sp], #4

000037de <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37de:	b500      	push	{lr}
    37e0:	b083      	sub	sp, #12
    37e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e4:	9b01      	ldr	r3, [sp, #4]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d002      	beq.n	37f0 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    37ea:	9801      	ldr	r0, [sp, #4]
    37ec:	f000 f9b0 	bl	3b50 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f0:	bf00      	nop
    37f2:	b003      	add	sp, #12
    37f4:	f85d fb04 	ldr.w	pc, [sp], #4

000037f8 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    37f8:	b500      	push	{lr}
    37fa:	b083      	sub	sp, #12
    37fc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    37fe:	9801      	ldr	r0, [sp, #4]
    3800:	f000 f9ba 	bl	3b78 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3804:	bf00      	nop
    3806:	b003      	add	sp, #12
    3808:	f85d fb04 	ldr.w	pc, [sp], #4

0000380c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    380c:	b500      	push	{lr}
    380e:	b083      	sub	sp, #12
    3810:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3812:	9b01      	ldr	r3, [sp, #4]
    3814:	2b00      	cmp	r3, #0
    3816:	d002      	beq.n	381e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3818:	9801      	ldr	r0, [sp, #4]
    381a:	f000 f9bd 	bl	3b98 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    381e:	bf00      	nop
    3820:	b003      	add	sp, #12
    3822:	f85d fb04 	ldr.w	pc, [sp], #4

00003826 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3826:	b500      	push	{lr}
    3828:	b083      	sub	sp, #12
    382a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	2b00      	cmp	r3, #0
    3830:	d002      	beq.n	3838 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3832:	9801      	ldr	r0, [sp, #4]
    3834:	f000 f9d4 	bl	3be0 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3838:	bf00      	nop
    383a:	b003      	add	sp, #12
    383c:	f85d fb04 	ldr.w	pc, [sp], #4

00003840 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3840:	b500      	push	{lr}
    3842:	b083      	sub	sp, #12
    3844:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3846:	9801      	ldr	r0, [sp, #4]
    3848:	f000 f9de 	bl	3c08 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    384c:	bf00      	nop
    384e:	b003      	add	sp, #12
    3850:	f85d fb04 	ldr.w	pc, [sp], #4

00003854 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3854:	b500      	push	{lr}
    3856:	b089      	sub	sp, #36	; 0x24
    3858:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    385a:	2300      	movs	r3, #0
    385c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3860:	4b20      	ldr	r3, [pc, #128]	; (38e4 <SetInputSouceSytemClock+0x90>)
    3862:	695b      	ldr	r3, [r3, #20]
    3864:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3866:	9b06      	ldr	r3, [sp, #24]
    3868:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    386c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    386e:	9b01      	ldr	r3, [sp, #4]
    3870:	061b      	lsls	r3, r3, #24
    3872:	9a06      	ldr	r2, [sp, #24]
    3874:	4313      	orrs	r3, r2
    3876:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3878:	4a1a      	ldr	r2, [pc, #104]	; (38e4 <SetInputSouceSytemClock+0x90>)
    387a:	9b06      	ldr	r3, [sp, #24]
    387c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    387e:	aa02      	add	r2, sp, #8
    3880:	a903      	add	r1, sp, #12
    3882:	a804      	add	r0, sp, #16
    3884:	f24c 3350 	movw	r3, #50000	; 0xc350
    3888:	f7ff f9ac 	bl	2be4 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    388c:	4b15      	ldr	r3, [pc, #84]	; (38e4 <SetInputSouceSytemClock+0x90>)
    388e:	691b      	ldr	r3, [r3, #16]
    3890:	0e1b      	lsrs	r3, r3, #24
    3892:	f003 030f 	and.w	r3, r3, #15
    3896:	9a01      	ldr	r2, [sp, #4]
    3898:	429a      	cmp	r2, r3
    389a:	bf0c      	ite	eq
    389c:	2301      	moveq	r3, #1
    389e:	2300      	movne	r3, #0
    38a0:	b2db      	uxtb	r3, r3
    38a2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    38a4:	9a02      	ldr	r2, [sp, #8]
    38a6:	a903      	add	r1, sp, #12
    38a8:	ab04      	add	r3, sp, #16
    38aa:	4618      	mov	r0, r3
    38ac:	f7ff f9b4 	bl	2c18 <Clock_Ip_TimeoutExpired>
    38b0:	4603      	mov	r3, r0
    38b2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38b6:	9b05      	ldr	r3, [sp, #20]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d106      	bne.n	38ca <SetInputSouceSytemClock+0x76>
    38bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38c0:	f083 0301 	eor.w	r3, r3, #1
    38c4:	b2db      	uxtb	r3, r3
    38c6:	2b00      	cmp	r3, #0
    38c8:	d1e0      	bne.n	388c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    38ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d003      	beq.n	38da <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38d2:	2105      	movs	r1, #5
    38d4:	2001      	movs	r0, #1
    38d6:	f7ff f975 	bl	2bc4 <Clock_Ip_ReportClockErrors>
    }
}
    38da:	bf00      	nop
    38dc:	b009      	add	sp, #36	; 0x24
    38de:	f85d fb04 	ldr.w	pc, [sp], #4
    38e2:	bf00      	nop
    38e4:	40064000 	.word	0x40064000

000038e8 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38e8:	b500      	push	{lr}
    38ea:	b083      	sub	sp, #12
    38ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ee:	9b01      	ldr	r3, [sp, #4]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d002      	beq.n	38fa <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    38f4:	9801      	ldr	r0, [sp, #4]
    38f6:	f000 f997 	bl	3c28 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38fa:	bf00      	nop
    38fc:	b003      	add	sp, #12
    38fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003902 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3902:	b500      	push	{lr}
    3904:	b083      	sub	sp, #12
    3906:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3908:	9b01      	ldr	r3, [sp, #4]
    390a:	2b00      	cmp	r3, #0
    390c:	d002      	beq.n	3914 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    390e:	9801      	ldr	r0, [sp, #4]
    3910:	f000 fa7e 	bl	3e10 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3914:	bf00      	nop
    3916:	b003      	add	sp, #12
    3918:	f85d fb04 	ldr.w	pc, [sp], #4

0000391c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    391c:	b500      	push	{lr}
    391e:	b083      	sub	sp, #12
    3920:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3922:	9801      	ldr	r0, [sp, #4]
    3924:	f000 fab8 	bl	3e98 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3928:	bf00      	nop
    392a:	b003      	add	sp, #12
    392c:	f85d fb04 	ldr.w	pc, [sp], #4

00003930 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3930:	b500      	push	{lr}
    3932:	b08b      	sub	sp, #44	; 0x2c
    3934:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3936:	2300      	movs	r3, #0
    3938:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    393c:	9b01      	ldr	r3, [sp, #4]
    393e:	2b00      	cmp	r3, #0
    3940:	d10b      	bne.n	395a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3942:	2305      	movs	r3, #5
    3944:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3946:	2301      	movs	r3, #1
    3948:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    394c:	2301      	movs	r3, #1
    394e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3952:	2301      	movs	r3, #1
    3954:	f88d 3010 	strb.w	r3, [sp, #16]
    3958:	e00e      	b.n	3978 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    395a:	9b01      	ldr	r3, [sp, #4]
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3960:	9b01      	ldr	r3, [sp, #4]
    3962:	79db      	ldrb	r3, [r3, #7]
    3964:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3968:	9b01      	ldr	r3, [sp, #4]
    396a:	889b      	ldrh	r3, [r3, #4]
    396c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3970:	9b01      	ldr	r3, [sp, #4]
    3972:	7a1b      	ldrb	r3, [r3, #8]
    3974:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3978:	4b32      	ldr	r3, [pc, #200]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    397a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    397e:	4a31      	ldr	r2, [pc, #196]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3980:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3984:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3988:	4b2e      	ldr	r3, [pc, #184]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    398e:	4a2d      	ldr	r2, [pc, #180]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3990:	f023 0301 	bic.w	r3, r3, #1
    3994:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3998:	4b2a      	ldr	r3, [pc, #168]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    399a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    399e:	4a29      	ldr	r2, [pc, #164]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39a0:	f023 0304 	bic.w	r3, r3, #4
    39a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    39a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    39ac:	2b01      	cmp	r3, #1
    39ae:	d144      	bne.n	3a3a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    39b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39b4:	4a23      	ldr	r2, [pc, #140]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b6:	f003 0301 	and.w	r3, r3, #1
    39ba:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39be:	4b21      	ldr	r3, [pc, #132]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39c4:	4a1f      	ldr	r2, [pc, #124]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c6:	f043 0301 	orr.w	r3, r3, #1
    39ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39ce:	4b1d      	ldr	r3, [pc, #116]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39d8:	009b      	lsls	r3, r3, #2
    39da:	f003 0304 	and.w	r3, r3, #4
    39de:	4919      	ldr	r1, [pc, #100]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39e0:	4313      	orrs	r3, r2
    39e2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39e6:	aa05      	add	r2, sp, #20
    39e8:	a906      	add	r1, sp, #24
    39ea:	a807      	add	r0, sp, #28
    39ec:	f24c 3350 	movw	r3, #50000	; 0xc350
    39f0:	f7ff f8f8 	bl	2be4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39f4:	4b13      	ldr	r3, [pc, #76]	; (3a44 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39fa:	0e1b      	lsrs	r3, r3, #24
    39fc:	f003 0301 	and.w	r3, r3, #1
    3a00:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a02:	9a05      	ldr	r2, [sp, #20]
    3a04:	a906      	add	r1, sp, #24
    3a06:	ab07      	add	r3, sp, #28
    3a08:	4618      	mov	r0, r3
    3a0a:	f7ff f905 	bl	2c18 <Clock_Ip_TimeoutExpired>
    3a0e:	4603      	mov	r3, r0
    3a10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a14:	9b08      	ldr	r3, [sp, #32]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d106      	bne.n	3a28 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a1a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a1e:	f083 0301 	eor.w	r3, r3, #1
    3a22:	b2db      	uxtb	r3, r3
    3a24:	2b00      	cmp	r3, #0
    3a26:	d1e5      	bne.n	39f4 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a28:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d004      	beq.n	3a3a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a30:	9b02      	ldr	r3, [sp, #8]
    3a32:	4619      	mov	r1, r3
    3a34:	2001      	movs	r0, #1
    3a36:	f7ff f8c5 	bl	2bc4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a3a:	bf00      	nop
    3a3c:	b00b      	add	sp, #44	; 0x2c
    3a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a42:	bf00      	nop
    3a44:	40064000 	.word	0x40064000

00003a48 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a48:	b500      	push	{lr}
    3a4a:	b089      	sub	sp, #36	; 0x24
    3a4c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a4e:	2300      	movs	r3, #0
    3a50:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a54:	4b1f      	ldr	r3, [pc, #124]	; (3ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a5a:	4a1e      	ldr	r2, [pc, #120]	; (3ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a5c:	f043 0301 	orr.w	r3, r3, #1
    3a60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a64:	4b1b      	ldr	r3, [pc, #108]	; (3ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a6a:	4a1a      	ldr	r2, [pc, #104]	; (3ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a6c:	f043 0304 	orr.w	r3, r3, #4
    3a70:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a74:	aa03      	add	r2, sp, #12
    3a76:	a904      	add	r1, sp, #16
    3a78:	a805      	add	r0, sp, #20
    3a7a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a7e:	f7ff f8b1 	bl	2be4 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a82:	4b14      	ldr	r3, [pc, #80]	; (3ad4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a88:	0e1b      	lsrs	r3, r3, #24
    3a8a:	f003 0301 	and.w	r3, r3, #1
    3a8e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a90:	9a03      	ldr	r2, [sp, #12]
    3a92:	a904      	add	r1, sp, #16
    3a94:	ab05      	add	r3, sp, #20
    3a96:	4618      	mov	r0, r3
    3a98:	f7ff f8be 	bl	2c18 <Clock_Ip_TimeoutExpired>
    3a9c:	4603      	mov	r3, r0
    3a9e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3aa2:	9b06      	ldr	r3, [sp, #24]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d106      	bne.n	3ab6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3aa8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aac:	f083 0301 	eor.w	r3, r3, #1
    3ab0:	b2db      	uxtb	r3, r3
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d1e5      	bne.n	3a82 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3ab6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d005      	beq.n	3aca <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3abe:	9b01      	ldr	r3, [sp, #4]
    3ac0:	681b      	ldr	r3, [r3, #0]
    3ac2:	4619      	mov	r1, r3
    3ac4:	2001      	movs	r0, #1
    3ac6:	f7ff f87d 	bl	2bc4 <Clock_Ip_ReportClockErrors>
    }
}
    3aca:	bf00      	nop
    3acc:	b009      	add	sp, #36	; 0x24
    3ace:	f85d fb04 	ldr.w	pc, [sp], #4
    3ad2:	bf00      	nop
    3ad4:	40064000 	.word	0x40064000

00003ad8 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3ad8:	b082      	sub	sp, #8
    3ada:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3adc:	4b09      	ldr	r3, [pc, #36]	; (3b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ae2:	4a08      	ldr	r2, [pc, #32]	; (3b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ae4:	f023 0301 	bic.w	r3, r3, #1
    3ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3aec:	4b05      	ldr	r3, [pc, #20]	; (3b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3af2:	4a04      	ldr	r2, [pc, #16]	; (3b04 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3af4:	f023 0304 	bic.w	r3, r3, #4
    3af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3afc:	bf00      	nop
    3afe:	b002      	add	sp, #8
    3b00:	4770      	bx	lr
    3b02:	bf00      	nop
    3b04:	40064000 	.word	0x40064000

00003b08 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b08:	b082      	sub	sp, #8
    3b0a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b0c:	4b0f      	ldr	r3, [pc, #60]	; (3b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b12:	4a0e      	ldr	r2, [pc, #56]	; (3b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b1c:	4b0b      	ldr	r3, [pc, #44]	; (3b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b22:	4a0a      	ldr	r2, [pc, #40]	; (3b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b24:	f023 0304 	bic.w	r3, r3, #4
    3b28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b2c:	4b07      	ldr	r3, [pc, #28]	; (3b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b32:	9b01      	ldr	r3, [sp, #4]
    3b34:	7a1b      	ldrb	r3, [r3, #8]
    3b36:	009b      	lsls	r3, r3, #2
    3b38:	f003 0304 	and.w	r3, r3, #4
    3b3c:	4903      	ldr	r1, [pc, #12]	; (3b4c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b3e:	4313      	orrs	r3, r2
    3b40:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b44:	bf00      	nop
    3b46:	b002      	add	sp, #8
    3b48:	4770      	bx	lr
    3b4a:	bf00      	nop
    3b4c:	40064000 	.word	0x40064000

00003b50 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b50:	b082      	sub	sp, #8
    3b52:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b54:	9b01      	ldr	r3, [sp, #4]
    3b56:	889b      	ldrh	r3, [r3, #4]
    3b58:	2b01      	cmp	r3, #1
    3b5a:	d107      	bne.n	3b6c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b5c:	4b05      	ldr	r3, [pc, #20]	; (3b74 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b62:	4a04      	ldr	r2, [pc, #16]	; (3b74 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b64:	f043 0304 	orr.w	r3, r3, #4
    3b68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b6c:	bf00      	nop
    3b6e:	b002      	add	sp, #8
    3b70:	4770      	bx	lr
    3b72:	bf00      	nop
    3b74:	40064000 	.word	0x40064000

00003b78 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b78:	b082      	sub	sp, #8
    3b7a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b7c:	4b05      	ldr	r3, [pc, #20]	; (3b94 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b82:	4a04      	ldr	r2, [pc, #16]	; (3b94 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b84:	f023 0304 	bic.w	r3, r3, #4
    3b88:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b8c:	bf00      	nop
    3b8e:	b002      	add	sp, #8
    3b90:	4770      	bx	lr
    3b92:	bf00      	nop
    3b94:	40064000 	.word	0x40064000

00003b98 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b98:	b082      	sub	sp, #8
    3b9a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b9c:	4b0f      	ldr	r3, [pc, #60]	; (3bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba2:	4a0e      	ldr	r2, [pc, #56]	; (3bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ba8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3bac:	4b0b      	ldr	r3, [pc, #44]	; (3bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bb2:	4a0a      	ldr	r2, [pc, #40]	; (3bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bb4:	f023 0302 	bic.w	r3, r3, #2
    3bb8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3bbc:	4b07      	ldr	r3, [pc, #28]	; (3bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bc2:	9b01      	ldr	r3, [sp, #4]
    3bc4:	7a5b      	ldrb	r3, [r3, #9]
    3bc6:	005b      	lsls	r3, r3, #1
    3bc8:	f003 0302 	and.w	r3, r3, #2
    3bcc:	4903      	ldr	r1, [pc, #12]	; (3bdc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bce:	4313      	orrs	r3, r2
    3bd0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3bd4:	bf00      	nop
    3bd6:	b002      	add	sp, #8
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop
    3bdc:	40064000 	.word	0x40064000

00003be0 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3be0:	b082      	sub	sp, #8
    3be2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3be4:	9b01      	ldr	r3, [sp, #4]
    3be6:	889b      	ldrh	r3, [r3, #4]
    3be8:	2b01      	cmp	r3, #1
    3bea:	d107      	bne.n	3bfc <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3bec:	4b05      	ldr	r3, [pc, #20]	; (3c04 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bf2:	4a04      	ldr	r2, [pc, #16]	; (3c04 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bf4:	f043 0302 	orr.w	r3, r3, #2
    3bf8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3bfc:	bf00      	nop
    3bfe:	b002      	add	sp, #8
    3c00:	4770      	bx	lr
    3c02:	bf00      	nop
    3c04:	40064000 	.word	0x40064000

00003c08 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3c08:	b082      	sub	sp, #8
    3c0a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3c0c:	4b05      	ldr	r3, [pc, #20]	; (3c24 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c12:	4a04      	ldr	r2, [pc, #16]	; (3c24 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c14:	f023 0302 	bic.w	r3, r3, #2
    3c18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c1c:	bf00      	nop
    3c1e:	b002      	add	sp, #8
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop
    3c24:	40064000 	.word	0x40064000

00003c28 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c28:	b500      	push	{lr}
    3c2a:	b08b      	sub	sp, #44	; 0x2c
    3c2c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c2e:	9b01      	ldr	r3, [sp, #4]
    3c30:	681a      	ldr	r2, [r3, #0]
    3c32:	4975      	ldr	r1, [pc, #468]	; (3e08 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c34:	4613      	mov	r3, r2
    3c36:	00db      	lsls	r3, r3, #3
    3c38:	4413      	add	r3, r2
    3c3a:	440b      	add	r3, r1
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c40:	2300      	movs	r3, #0
    3c42:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c46:	2300      	movs	r3, #0
    3c48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c4c:	4b6f      	ldr	r3, [pc, #444]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c52:	4a6e      	ldr	r2, [pc, #440]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c58:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c5c:	4b6b      	ldr	r3, [pc, #428]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c66:	2b00      	cmp	r3, #0
    3c68:	d07d      	beq.n	3d66 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c6a:	9b01      	ldr	r3, [sp, #4]
    3c6c:	79db      	ldrb	r3, [r3, #7]
    3c6e:	461a      	mov	r2, r3
    3c70:	4b66      	ldr	r3, [pc, #408]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c72:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c76:	f003 0303 	and.w	r3, r3, #3
    3c7a:	429a      	cmp	r2, r3
    3c7c:	d10b      	bne.n	3c96 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c7e:	9b01      	ldr	r3, [sp, #4]
    3c80:	799b      	ldrb	r3, [r3, #6]
    3c82:	461a      	mov	r2, r3
    3c84:	4b61      	ldr	r3, [pc, #388]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c8a:	08db      	lsrs	r3, r3, #3
    3c8c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c90:	429a      	cmp	r2, r3
    3c92:	f000 80b4 	beq.w	3dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c96:	4b5d      	ldr	r3, [pc, #372]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c9c:	f003 0301 	and.w	r3, r3, #1
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d105      	bne.n	3cb0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3ca4:	2301      	movs	r3, #1
    3ca6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3caa:	2000      	movs	r0, #0
    3cac:	f7ff fd66 	bl	377c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3cb0:	2002      	movs	r0, #2
    3cb2:	f7ff fdcf 	bl	3854 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cb6:	4b55      	ldr	r3, [pc, #340]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cbc:	4a53      	ldr	r2, [pc, #332]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cbe:	f023 0301 	bic.w	r3, r3, #1
    3cc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3cc6:	9b01      	ldr	r3, [sp, #4]
    3cc8:	889b      	ldrh	r3, [r3, #4]
    3cca:	2b01      	cmp	r3, #1
    3ccc:	f040 8097 	bne.w	3dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cd0:	9b01      	ldr	r3, [sp, #4]
    3cd2:	79db      	ldrb	r3, [r3, #7]
    3cd4:	4a4d      	ldr	r2, [pc, #308]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd6:	f003 0303 	and.w	r3, r3, #3
    3cda:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cde:	4b4b      	ldr	r3, [pc, #300]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ce0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ce4:	9b01      	ldr	r3, [sp, #4]
    3ce6:	799b      	ldrb	r3, [r3, #6]
    3ce8:	00db      	lsls	r3, r3, #3
    3cea:	f003 0308 	and.w	r3, r3, #8
    3cee:	4313      	orrs	r3, r2
    3cf0:	4a46      	ldr	r2, [pc, #280]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf2:	f043 0301 	orr.w	r3, r3, #1
    3cf6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3cfa:	aa03      	add	r2, sp, #12
    3cfc:	a904      	add	r1, sp, #16
    3cfe:	a805      	add	r0, sp, #20
    3d00:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d04:	f7fe ff6e 	bl	2be4 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d08:	4b40      	ldr	r3, [pc, #256]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d0e:	0e1b      	lsrs	r3, r3, #24
    3d10:	f003 0301 	and.w	r3, r3, #1
    3d14:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d16:	9a03      	ldr	r2, [sp, #12]
    3d18:	a904      	add	r1, sp, #16
    3d1a:	ab05      	add	r3, sp, #20
    3d1c:	4618      	mov	r0, r3
    3d1e:	f7fe ff7b 	bl	2c18 <Clock_Ip_TimeoutExpired>
    3d22:	4603      	mov	r3, r0
    3d24:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d28:	9b06      	ldr	r3, [sp, #24]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d106      	bne.n	3d3c <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d32:	f083 0301 	eor.w	r3, r3, #1
    3d36:	b2db      	uxtb	r3, r3
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d1e5      	bne.n	3d08 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d005      	beq.n	3d50 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d44:	9b01      	ldr	r3, [sp, #4]
    3d46:	681b      	ldr	r3, [r3, #0]
    3d48:	4619      	mov	r1, r3
    3d4a:	2001      	movs	r0, #1
    3d4c:	f7fe ff3a 	bl	2bc4 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d50:	2003      	movs	r0, #3
    3d52:	f7ff fd7f 	bl	3854 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d56:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d04f      	beq.n	3dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d5e:	2002      	movs	r0, #2
    3d60:	f7ff fd26 	bl	37b0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d64:	e04b      	b.n	3dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d66:	4b29      	ldr	r3, [pc, #164]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d68:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d6c:	4a27      	ldr	r2, [pc, #156]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d6e:	f023 0301 	bic.w	r3, r3, #1
    3d72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d76:	9b01      	ldr	r3, [sp, #4]
    3d78:	889b      	ldrh	r3, [r3, #4]
    3d7a:	2b01      	cmp	r3, #1
    3d7c:	d13f      	bne.n	3dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d7e:	9b01      	ldr	r3, [sp, #4]
    3d80:	79db      	ldrb	r3, [r3, #7]
    3d82:	4a22      	ldr	r2, [pc, #136]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d84:	f003 0303 	and.w	r3, r3, #3
    3d88:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d8c:	4b1f      	ldr	r3, [pc, #124]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d8e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d92:	9b01      	ldr	r3, [sp, #4]
    3d94:	799b      	ldrb	r3, [r3, #6]
    3d96:	00db      	lsls	r3, r3, #3
    3d98:	f003 0308 	and.w	r3, r3, #8
    3d9c:	4313      	orrs	r3, r2
    3d9e:	4a1b      	ldr	r2, [pc, #108]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3da0:	f043 0301 	orr.w	r3, r3, #1
    3da4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3da8:	aa03      	add	r2, sp, #12
    3daa:	a904      	add	r1, sp, #16
    3dac:	a805      	add	r0, sp, #20
    3dae:	f24c 3350 	movw	r3, #50000	; 0xc350
    3db2:	f7fe ff17 	bl	2be4 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3db6:	4b15      	ldr	r3, [pc, #84]	; (3e0c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3db8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3dbc:	0e1b      	lsrs	r3, r3, #24
    3dbe:	f003 0301 	and.w	r3, r3, #1
    3dc2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3dc4:	9a03      	ldr	r2, [sp, #12]
    3dc6:	a904      	add	r1, sp, #16
    3dc8:	ab05      	add	r3, sp, #20
    3dca:	4618      	mov	r0, r3
    3dcc:	f7fe ff24 	bl	2c18 <Clock_Ip_TimeoutExpired>
    3dd0:	4603      	mov	r3, r0
    3dd2:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dd6:	9b06      	ldr	r3, [sp, #24]
    3dd8:	2b00      	cmp	r3, #0
    3dda:	d106      	bne.n	3dea <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3ddc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3de0:	f083 0301 	eor.w	r3, r3, #1
    3de4:	b2db      	uxtb	r3, r3
    3de6:	2b00      	cmp	r3, #0
    3de8:	d1e5      	bne.n	3db6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3dea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d005      	beq.n	3dfe <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3df2:	9b01      	ldr	r3, [sp, #4]
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	4619      	mov	r1, r3
    3df8:	2001      	movs	r0, #1
    3dfa:	f7fe fee3 	bl	2bc4 <Clock_Ip_ReportClockErrors>
}
    3dfe:	bf00      	nop
    3e00:	b00b      	add	sp, #44	; 0x2c
    3e02:	f85d fb04 	ldr.w	pc, [sp], #4
    3e06:	bf00      	nop
    3e08:	00014aa8 	.word	0x00014aa8
    3e0c:	40064000 	.word	0x40064000

00003e10 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e10:	b500      	push	{lr}
    3e12:	b089      	sub	sp, #36	; 0x24
    3e14:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e16:	2300      	movs	r3, #0
    3e18:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e1c:	9b01      	ldr	r3, [sp, #4]
    3e1e:	889b      	ldrh	r3, [r3, #4]
    3e20:	2b01      	cmp	r3, #1
    3e22:	d132      	bne.n	3e8a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e24:	4b1b      	ldr	r3, [pc, #108]	; (3e94 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e2a:	4a1a      	ldr	r2, [pc, #104]	; (3e94 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e2c:	f043 0301 	orr.w	r3, r3, #1
    3e30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e34:	aa03      	add	r2, sp, #12
    3e36:	a904      	add	r1, sp, #16
    3e38:	a805      	add	r0, sp, #20
    3e3a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e3e:	f7fe fed1 	bl	2be4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e42:	4b14      	ldr	r3, [pc, #80]	; (3e94 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e48:	0e1b      	lsrs	r3, r3, #24
    3e4a:	f003 0301 	and.w	r3, r3, #1
    3e4e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e50:	9a03      	ldr	r2, [sp, #12]
    3e52:	a904      	add	r1, sp, #16
    3e54:	ab05      	add	r3, sp, #20
    3e56:	4618      	mov	r0, r3
    3e58:	f7fe fede 	bl	2c18 <Clock_Ip_TimeoutExpired>
    3e5c:	4603      	mov	r3, r0
    3e5e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e62:	9b06      	ldr	r3, [sp, #24]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d106      	bne.n	3e76 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e6c:	f083 0301 	eor.w	r3, r3, #1
    3e70:	b2db      	uxtb	r3, r3
    3e72:	2b00      	cmp	r3, #0
    3e74:	d1e5      	bne.n	3e42 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e76:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d005      	beq.n	3e8a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e7e:	9b01      	ldr	r3, [sp, #4]
    3e80:	681b      	ldr	r3, [r3, #0]
    3e82:	4619      	mov	r1, r3
    3e84:	2001      	movs	r0, #1
    3e86:	f7fe fe9d 	bl	2bc4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e8a:	bf00      	nop
    3e8c:	b009      	add	sp, #36	; 0x24
    3e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    3e92:	bf00      	nop
    3e94:	40064000 	.word	0x40064000

00003e98 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e98:	b082      	sub	sp, #8
    3e9a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e9c:	4b05      	ldr	r3, [pc, #20]	; (3eb4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ea2:	4a04      	ldr	r2, [pc, #16]	; (3eb4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ea4:	f023 0301 	bic.w	r3, r3, #1
    3ea8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3eac:	bf00      	nop
    3eae:	b002      	add	sp, #8
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop
    3eb4:	40064000 	.word	0x40064000

00003eb8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3eb8:	b082      	sub	sp, #8
    3eba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ebc:	bf00      	nop
    3ebe:	b002      	add	sp, #8
    3ec0:	4770      	bx	lr

00003ec2 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3ec2:	b082      	sub	sp, #8
    3ec4:	9001      	str	r0, [sp, #4]
    3ec6:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3ec8:	bf00      	nop
    3eca:	b002      	add	sp, #8
    3ecc:	4770      	bx	lr

00003ece <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3ece:	b082      	sub	sp, #8
    3ed0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ed2:	bf00      	nop
    3ed4:	b002      	add	sp, #8
    3ed6:	4770      	bx	lr

00003ed8 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3ed8:	b082      	sub	sp, #8
    3eda:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3edc:	bf00      	nop
    3ede:	b002      	add	sp, #8
    3ee0:	4770      	bx	lr

00003ee2 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3ee2:	b082      	sub	sp, #8
    3ee4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3ee6:	2302      	movs	r3, #2
}
    3ee8:	4618      	mov	r0, r3
    3eea:	b002      	add	sp, #8
    3eec:	4770      	bx	lr

00003eee <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3eee:	b082      	sub	sp, #8
    3ef0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3ef2:	bf00      	nop
    3ef4:	b002      	add	sp, #8
    3ef6:	4770      	bx	lr

00003ef8 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ef8:	b500      	push	{lr}
    3efa:	b083      	sub	sp, #12
    3efc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3efe:	9b01      	ldr	r3, [sp, #4]
    3f00:	2b00      	cmp	r3, #0
    3f02:	d002      	beq.n	3f0a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3f04:	9801      	ldr	r0, [sp, #4]
    3f06:	f000 f870 	bl	3fea <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f0a:	bf00      	nop
    3f0c:	b003      	add	sp, #12
    3f0e:	f85d fb04 	ldr.w	pc, [sp], #4

00003f12 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f12:	b500      	push	{lr}
    3f14:	b083      	sub	sp, #12
    3f16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f18:	9b01      	ldr	r3, [sp, #4]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d002      	beq.n	3f24 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f1e:	9801      	ldr	r0, [sp, #4]
    3f20:	f000 f89a 	bl	4058 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f24:	bf00      	nop
    3f26:	b003      	add	sp, #12
    3f28:	f85d fb04 	ldr.w	pc, [sp], #4

00003f2c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f2c:	b500      	push	{lr}
    3f2e:	b089      	sub	sp, #36	; 0x24
    3f30:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f32:	2301      	movs	r3, #1
    3f34:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f36:	2300      	movs	r3, #0
    3f38:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f3c:	4b1e      	ldr	r3, [pc, #120]	; (3fb8 <Clock_Ip_CompleteSpll+0x8c>)
    3f3e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f42:	f003 0301 	and.w	r3, r3, #1
    3f46:	2b00      	cmp	r3, #0
    3f48:	d02f      	beq.n	3faa <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f4a:	aa02      	add	r2, sp, #8
    3f4c:	a903      	add	r1, sp, #12
    3f4e:	a804      	add	r0, sp, #16
    3f50:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f54:	f7fe fe46 	bl	2be4 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f58:	4b17      	ldr	r3, [pc, #92]	; (3fb8 <Clock_Ip_CompleteSpll+0x8c>)
    3f5a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f5e:	0e1b      	lsrs	r3, r3, #24
    3f60:	f003 0301 	and.w	r3, r3, #1
    3f64:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f66:	9a02      	ldr	r2, [sp, #8]
    3f68:	a903      	add	r1, sp, #12
    3f6a:	ab04      	add	r3, sp, #16
    3f6c:	4618      	mov	r0, r3
    3f6e:	f7fe fe53 	bl	2c18 <Clock_Ip_TimeoutExpired>
    3f72:	4603      	mov	r3, r0
    3f74:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f78:	9b05      	ldr	r3, [sp, #20]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d106      	bne.n	3f8c <Clock_Ip_CompleteSpll+0x60>
    3f7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f82:	f083 0301 	eor.w	r3, r3, #1
    3f86:	b2db      	uxtb	r3, r3
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d1e5      	bne.n	3f58 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f8c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f90:	f083 0301 	eor.w	r3, r3, #1
    3f94:	b2db      	uxtb	r3, r3
    3f96:	2b00      	cmp	r3, #0
    3f98:	d002      	beq.n	3fa0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f9a:	2302      	movs	r3, #2
    3f9c:	9307      	str	r3, [sp, #28]
    3f9e:	e006      	b.n	3fae <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3fa0:	9901      	ldr	r1, [sp, #4]
    3fa2:	2001      	movs	r0, #1
    3fa4:	f7fe fe0e 	bl	2bc4 <Clock_Ip_ReportClockErrors>
    3fa8:	e001      	b.n	3fae <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3faa:	2300      	movs	r3, #0
    3fac:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3fae:	9b07      	ldr	r3, [sp, #28]
}
    3fb0:	4618      	mov	r0, r3
    3fb2:	b009      	add	sp, #36	; 0x24
    3fb4:	f85d fb04 	ldr.w	pc, [sp], #4
    3fb8:	40064000 	.word	0x40064000

00003fbc <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3fbc:	b500      	push	{lr}
    3fbe:	b083      	sub	sp, #12
    3fc0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3fc2:	9801      	ldr	r0, [sp, #4]
    3fc4:	f000 f886 	bl	40d4 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3fc8:	bf00      	nop
    3fca:	b003      	add	sp, #12
    3fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00003fd0 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3fd0:	b500      	push	{lr}
    3fd2:	b083      	sub	sp, #12
    3fd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fd6:	9b01      	ldr	r3, [sp, #4]
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d002      	beq.n	3fe2 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3fdc:	9801      	ldr	r0, [sp, #4]
    3fde:	f000 f891 	bl	4104 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fe2:	bf00      	nop
    3fe4:	b003      	add	sp, #12
    3fe6:	f85d fb04 	ldr.w	pc, [sp], #4

00003fea <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fea:	b082      	sub	sp, #8
    3fec:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3fee:	4b19      	ldr	r3, [pc, #100]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ff4:	4a17      	ldr	r2, [pc, #92]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3ffa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3ffe:	4b15      	ldr	r3, [pc, #84]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4000:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4004:	4a13      	ldr	r2, [pc, #76]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    400a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    400e:	4b11      	ldr	r3, [pc, #68]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4010:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4014:	4a0f      	ldr	r2, [pc, #60]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4016:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    401a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    401e:	4b0d      	ldr	r3, [pc, #52]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4020:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4024:	4a0b      	ldr	r2, [pc, #44]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4026:	f023 0301 	bic.w	r3, r3, #1
    402a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    402e:	4b09      	ldr	r3, [pc, #36]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4030:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4034:	4a07      	ldr	r2, [pc, #28]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4036:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    403a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    403e:	4b05      	ldr	r3, [pc, #20]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4040:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4044:	4a03      	ldr	r2, [pc, #12]	; (4054 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4046:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    404a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    404e:	bf00      	nop
    4050:	b002      	add	sp, #8
    4052:	4770      	bx	lr
    4054:	40064000 	.word	0x40064000

00004058 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4058:	b082      	sub	sp, #8
    405a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    405c:	9b01      	ldr	r3, [sp, #4]
    405e:	889b      	ldrh	r3, [r3, #4]
    4060:	2b01      	cmp	r3, #1
    4062:	d12f      	bne.n	40c4 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4064:	4b1a      	ldr	r3, [pc, #104]	; (40d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4066:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	7b5b      	ldrb	r3, [r3, #13]
    406e:	3b01      	subs	r3, #1
    4070:	021b      	lsls	r3, r3, #8
    4072:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4076:	9b01      	ldr	r3, [sp, #4]
    4078:	7d1b      	ldrb	r3, [r3, #20]
    407a:	3b10      	subs	r3, #16
    407c:	041b      	lsls	r3, r3, #16
    407e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4082:	430b      	orrs	r3, r1
    4084:	4912      	ldr	r1, [pc, #72]	; (40d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4086:	4313      	orrs	r3, r2
    4088:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	7fdb      	ldrb	r3, [r3, #31]
    4090:	2b02      	cmp	r3, #2
    4092:	d011      	beq.n	40b8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4094:	2b02      	cmp	r3, #2
    4096:	dc17      	bgt.n	40c8 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4098:	2b00      	cmp	r3, #0
    409a:	d002      	beq.n	40a2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    409c:	2b01      	cmp	r3, #1
    409e:	d005      	beq.n	40ac <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    40a0:	e012      	b.n	40c8 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    40a2:	4b0b      	ldr	r3, [pc, #44]	; (40d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40a4:	2200      	movs	r2, #0
    40a6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40aa:	e00e      	b.n	40ca <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40ac:	4b08      	ldr	r3, [pc, #32]	; (40d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40b2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40b6:	e008      	b.n	40ca <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40b8:	4b05      	ldr	r3, [pc, #20]	; (40d0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    40be:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40c2:	e002      	b.n	40ca <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    40c4:	bf00      	nop
    40c6:	e000      	b.n	40ca <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    40c8:	bf00      	nop
}
    40ca:	bf00      	nop
    40cc:	b002      	add	sp, #8
    40ce:	4770      	bx	lr
    40d0:	40064000 	.word	0x40064000

000040d4 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40d4:	b082      	sub	sp, #8
    40d6:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40d8:	4b09      	ldr	r3, [pc, #36]	; (4100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40da:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40de:	4a08      	ldr	r2, [pc, #32]	; (4100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    40e4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    40e8:	4b05      	ldr	r3, [pc, #20]	; (4100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40ea:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40ee:	4a04      	ldr	r2, [pc, #16]	; (4100 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40f0:	f023 0301 	bic.w	r3, r3, #1
    40f4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    40f8:	bf00      	nop
    40fa:	b002      	add	sp, #8
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop
    4100:	40064000 	.word	0x40064000

00004104 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4104:	b082      	sub	sp, #8
    4106:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4108:	9b01      	ldr	r3, [sp, #4]
    410a:	889b      	ldrh	r3, [r3, #4]
    410c:	2b01      	cmp	r3, #1
    410e:	d107      	bne.n	4120 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4110:	4b05      	ldr	r3, [pc, #20]	; (4128 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4112:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4116:	4a04      	ldr	r2, [pc, #16]	; (4128 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4118:	f043 0301 	orr.w	r3, r3, #1
    411c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4120:	bf00      	nop
    4122:	b002      	add	sp, #8
    4124:	4770      	bx	lr
    4126:	bf00      	nop
    4128:	40064000 	.word	0x40064000

0000412c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    412c:	b082      	sub	sp, #8
    412e:	9001      	str	r0, [sp, #4]
    4130:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4132:	bf00      	nop
    4134:	b002      	add	sp, #8
    4136:	4770      	bx	lr

00004138 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4138:	b082      	sub	sp, #8
    413a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    413c:	bf00      	nop
    413e:	b002      	add	sp, #8
    4140:	4770      	bx	lr

00004142 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4142:	b500      	push	{lr}
    4144:	b083      	sub	sp, #12
    4146:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4148:	9b01      	ldr	r3, [sp, #4]
    414a:	2b00      	cmp	r3, #0
    414c:	d002      	beq.n	4154 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    414e:	9801      	ldr	r0, [sp, #4]
    4150:	f000 f8ee 	bl	4330 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4154:	bf00      	nop
    4156:	b003      	add	sp, #12
    4158:	f85d fb04 	ldr.w	pc, [sp], #4

0000415c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    415c:	b500      	push	{lr}
    415e:	b083      	sub	sp, #12
    4160:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4162:	9b01      	ldr	r3, [sp, #4]
    4164:	2b00      	cmp	r3, #0
    4166:	d002      	beq.n	416e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4168:	9801      	ldr	r0, [sp, #4]
    416a:	f000 f8ff 	bl	436c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    416e:	bf00      	nop
    4170:	b003      	add	sp, #12
    4172:	f85d fb04 	ldr.w	pc, [sp], #4

00004176 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4176:	b500      	push	{lr}
    4178:	b083      	sub	sp, #12
    417a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    417c:	9b01      	ldr	r3, [sp, #4]
    417e:	2b00      	cmp	r3, #0
    4180:	d002      	beq.n	4188 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4182:	9801      	ldr	r0, [sp, #4]
    4184:	f000 f912 	bl	43ac <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4188:	bf00      	nop
    418a:	b003      	add	sp, #12
    418c:	f85d fb04 	ldr.w	pc, [sp], #4

00004190 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4190:	b500      	push	{lr}
    4192:	b083      	sub	sp, #12
    4194:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4196:	9b01      	ldr	r3, [sp, #4]
    4198:	2b00      	cmp	r3, #0
    419a:	d002      	beq.n	41a2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    419c:	9801      	ldr	r0, [sp, #4]
    419e:	f000 f925 	bl	43ec <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a2:	bf00      	nop
    41a4:	b003      	add	sp, #12
    41a6:	f85d fb04 	ldr.w	pc, [sp], #4

000041aa <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41aa:	b500      	push	{lr}
    41ac:	b083      	sub	sp, #12
    41ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b0:	9b01      	ldr	r3, [sp, #4]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d002      	beq.n	41bc <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41b6:	9801      	ldr	r0, [sp, #4]
    41b8:	f000 f936 	bl	4428 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41bc:	bf00      	nop
    41be:	b003      	add	sp, #12
    41c0:	f85d fb04 	ldr.w	pc, [sp], #4

000041c4 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41c4:	b500      	push	{lr}
    41c6:	b083      	sub	sp, #12
    41c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ca:	9b01      	ldr	r3, [sp, #4]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d002      	beq.n	41d6 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41d0:	9801      	ldr	r0, [sp, #4]
    41d2:	f000 f949 	bl	4468 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41d6:	bf00      	nop
    41d8:	b003      	add	sp, #12
    41da:	f85d fb04 	ldr.w	pc, [sp], #4

000041de <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41de:	b500      	push	{lr}
    41e0:	b083      	sub	sp, #12
    41e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41e4:	9b01      	ldr	r3, [sp, #4]
    41e6:	2b00      	cmp	r3, #0
    41e8:	d002      	beq.n	41f0 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    41ea:	9801      	ldr	r0, [sp, #4]
    41ec:	f000 f958 	bl	44a0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f0:	bf00      	nop
    41f2:	b003      	add	sp, #12
    41f4:	f85d fb04 	ldr.w	pc, [sp], #4

000041f8 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41f8:	b500      	push	{lr}
    41fa:	b083      	sub	sp, #12
    41fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41fe:	9b01      	ldr	r3, [sp, #4]
    4200:	2b00      	cmp	r3, #0
    4202:	d002      	beq.n	420a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4204:	9801      	ldr	r0, [sp, #4]
    4206:	f000 f969 	bl	44dc <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    420a:	bf00      	nop
    420c:	b003      	add	sp, #12
    420e:	f85d fb04 	ldr.w	pc, [sp], #4

00004212 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4212:	b500      	push	{lr}
    4214:	b083      	sub	sp, #12
    4216:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4218:	9b01      	ldr	r3, [sp, #4]
    421a:	2b00      	cmp	r3, #0
    421c:	d002      	beq.n	4224 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    421e:	9801      	ldr	r0, [sp, #4]
    4220:	f000 f978 	bl	4514 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4224:	bf00      	nop
    4226:	b003      	add	sp, #12
    4228:	f85d fb04 	ldr.w	pc, [sp], #4

0000422c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    422c:	b500      	push	{lr}
    422e:	b083      	sub	sp, #12
    4230:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4232:	9b01      	ldr	r3, [sp, #4]
    4234:	2b00      	cmp	r3, #0
    4236:	d002      	beq.n	423e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4238:	9801      	ldr	r0, [sp, #4]
    423a:	f000 f989 	bl	4550 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    423e:	bf00      	nop
    4240:	b003      	add	sp, #12
    4242:	f85d fb04 	ldr.w	pc, [sp], #4

00004246 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4246:	b500      	push	{lr}
    4248:	b083      	sub	sp, #12
    424a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    424c:	9b01      	ldr	r3, [sp, #4]
    424e:	2b00      	cmp	r3, #0
    4250:	d002      	beq.n	4258 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4252:	9801      	ldr	r0, [sp, #4]
    4254:	f000 f998 	bl	4588 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4258:	bf00      	nop
    425a:	b003      	add	sp, #12
    425c:	f85d fb04 	ldr.w	pc, [sp], #4

00004260 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4260:	b500      	push	{lr}
    4262:	b083      	sub	sp, #12
    4264:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	2b00      	cmp	r3, #0
    426a:	d002      	beq.n	4272 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    426c:	9801      	ldr	r0, [sp, #4]
    426e:	f000 f9a9 	bl	45c4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4272:	bf00      	nop
    4274:	b003      	add	sp, #12
    4276:	f85d fb04 	ldr.w	pc, [sp], #4

0000427a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    427a:	b500      	push	{lr}
    427c:	b083      	sub	sp, #12
    427e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4280:	9b01      	ldr	r3, [sp, #4]
    4282:	2b00      	cmp	r3, #0
    4284:	d002      	beq.n	428c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4286:	9801      	ldr	r0, [sp, #4]
    4288:	f000 f9e6 	bl	4658 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    428c:	bf00      	nop
    428e:	b003      	add	sp, #12
    4290:	f85d fb04 	ldr.w	pc, [sp], #4

00004294 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4294:	b500      	push	{lr}
    4296:	b083      	sub	sp, #12
    4298:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    429a:	9b01      	ldr	r3, [sp, #4]
    429c:	2b00      	cmp	r3, #0
    429e:	d002      	beq.n	42a6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    42a0:	9801      	ldr	r0, [sp, #4]
    42a2:	f000 fa25 	bl	46f0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42a6:	bf00      	nop
    42a8:	b003      	add	sp, #12
    42aa:	f85d fb04 	ldr.w	pc, [sp], #4

000042ae <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42ae:	b500      	push	{lr}
    42b0:	b083      	sub	sp, #12
    42b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42b4:	9b01      	ldr	r3, [sp, #4]
    42b6:	2b00      	cmp	r3, #0
    42b8:	d002      	beq.n	42c0 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42ba:	9801      	ldr	r0, [sp, #4]
    42bc:	f000 fa2a 	bl	4714 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42c0:	bf00      	nop
    42c2:	b003      	add	sp, #12
    42c4:	f85d fb04 	ldr.w	pc, [sp], #4

000042c8 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42c8:	b500      	push	{lr}
    42ca:	b083      	sub	sp, #12
    42cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ce:	9b01      	ldr	r3, [sp, #4]
    42d0:	2b00      	cmp	r3, #0
    42d2:	d002      	beq.n	42da <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42d4:	9801      	ldr	r0, [sp, #4]
    42d6:	f000 fa3b 	bl	4750 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42da:	bf00      	nop
    42dc:	b003      	add	sp, #12
    42de:	f85d fb04 	ldr.w	pc, [sp], #4

000042e2 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42e2:	b500      	push	{lr}
    42e4:	b083      	sub	sp, #12
    42e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42e8:	9b01      	ldr	r3, [sp, #4]
    42ea:	2b00      	cmp	r3, #0
    42ec:	d002      	beq.n	42f4 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    42ee:	9801      	ldr	r0, [sp, #4]
    42f0:	f000 fa56 	bl	47a0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42f4:	bf00      	nop
    42f6:	b003      	add	sp, #12
    42f8:	f85d fb04 	ldr.w	pc, [sp], #4

000042fc <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42fc:	b500      	push	{lr}
    42fe:	b083      	sub	sp, #12
    4300:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4302:	9b01      	ldr	r3, [sp, #4]
    4304:	2b00      	cmp	r3, #0
    4306:	d002      	beq.n	430e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4308:	9801      	ldr	r0, [sp, #4]
    430a:	f000 fa79 	bl	4800 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    430e:	bf00      	nop
    4310:	b003      	add	sp, #12
    4312:	f85d fb04 	ldr.w	pc, [sp], #4

00004316 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4316:	b500      	push	{lr}
    4318:	b083      	sub	sp, #12
    431a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    431c:	9b01      	ldr	r3, [sp, #4]
    431e:	2b00      	cmp	r3, #0
    4320:	d002      	beq.n	4328 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4322:	9801      	ldr	r0, [sp, #4]
    4324:	f000 fa8a 	bl	483c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4328:	bf00      	nop
    432a:	b003      	add	sp, #12
    432c:	f85d fb04 	ldr.w	pc, [sp], #4

00004330 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4330:	b084      	sub	sp, #16
    4332:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4334:	4b0b      	ldr	r3, [pc, #44]	; (4364 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4336:	795b      	ldrb	r3, [r3, #5]
    4338:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    433a:	4b0b      	ldr	r3, [pc, #44]	; (4368 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    433c:	695b      	ldr	r3, [r3, #20]
    433e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4340:	9b02      	ldr	r3, [sp, #8]
    4342:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4346:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4348:	9b03      	ldr	r3, [sp, #12]
    434a:	061b      	lsls	r3, r3, #24
    434c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4350:	9a02      	ldr	r2, [sp, #8]
    4352:	4313      	orrs	r3, r2
    4354:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4356:	4a04      	ldr	r2, [pc, #16]	; (4368 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4358:	9b02      	ldr	r3, [sp, #8]
    435a:	6153      	str	r3, [r2, #20]
}
    435c:	bf00      	nop
    435e:	b004      	add	sp, #16
    4360:	4770      	bx	lr
    4362:	bf00      	nop
    4364:	00014e10 	.word	0x00014e10
    4368:	40064000 	.word	0x40064000

0000436c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    436c:	b084      	sub	sp, #16
    436e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4370:	9b01      	ldr	r3, [sp, #4]
    4372:	685b      	ldr	r3, [r3, #4]
    4374:	4a0b      	ldr	r2, [pc, #44]	; (43a4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4376:	5cd3      	ldrb	r3, [r2, r3]
    4378:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    437a:	4b0b      	ldr	r3, [pc, #44]	; (43a8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    437c:	695b      	ldr	r3, [r3, #20]
    437e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4380:	9b02      	ldr	r3, [sp, #8]
    4382:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4386:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4388:	9b03      	ldr	r3, [sp, #12]
    438a:	061b      	lsls	r3, r3, #24
    438c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4390:	9a02      	ldr	r2, [sp, #8]
    4392:	4313      	orrs	r3, r2
    4394:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4396:	4a04      	ldr	r2, [pc, #16]	; (43a8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4398:	9b02      	ldr	r3, [sp, #8]
    439a:	6153      	str	r3, [r2, #20]
}
    439c:	bf00      	nop
    439e:	b004      	add	sp, #16
    43a0:	4770      	bx	lr
    43a2:	bf00      	nop
    43a4:	00014e10 	.word	0x00014e10
    43a8:	40064000 	.word	0x40064000

000043ac <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43ac:	b084      	sub	sp, #16
    43ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43b0:	9b01      	ldr	r3, [sp, #4]
    43b2:	685b      	ldr	r3, [r3, #4]
    43b4:	4a0b      	ldr	r2, [pc, #44]	; (43e4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43b6:	5cd3      	ldrb	r3, [r2, r3]
    43b8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43ba:	4b0b      	ldr	r3, [pc, #44]	; (43e8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43bc:	699b      	ldr	r3, [r3, #24]
    43be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    43c0:	9b02      	ldr	r3, [sp, #8]
    43c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43c6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    43c8:	9b03      	ldr	r3, [sp, #12]
    43ca:	061b      	lsls	r3, r3, #24
    43cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43d0:	9a02      	ldr	r2, [sp, #8]
    43d2:	4313      	orrs	r3, r2
    43d4:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43d6:	4a04      	ldr	r2, [pc, #16]	; (43e8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43d8:	9b02      	ldr	r3, [sp, #8]
    43da:	6193      	str	r3, [r2, #24]
}
    43dc:	bf00      	nop
    43de:	b004      	add	sp, #16
    43e0:	4770      	bx	lr
    43e2:	bf00      	nop
    43e4:	00014e10 	.word	0x00014e10
    43e8:	40064000 	.word	0x40064000

000043ec <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43ec:	b084      	sub	sp, #16
    43ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43f0:	4b0b      	ldr	r3, [pc, #44]	; (4420 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    43f2:	795b      	ldrb	r3, [r3, #5]
    43f4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    43f6:	4b0b      	ldr	r3, [pc, #44]	; (4424 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43f8:	69db      	ldr	r3, [r3, #28]
    43fa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43fc:	9b02      	ldr	r3, [sp, #8]
    43fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4402:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4404:	9b03      	ldr	r3, [sp, #12]
    4406:	061b      	lsls	r3, r3, #24
    4408:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    440c:	9a02      	ldr	r2, [sp, #8]
    440e:	4313      	orrs	r3, r2
    4410:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4412:	4a04      	ldr	r2, [pc, #16]	; (4424 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4414:	9b02      	ldr	r3, [sp, #8]
    4416:	61d3      	str	r3, [r2, #28]
}
    4418:	bf00      	nop
    441a:	b004      	add	sp, #16
    441c:	4770      	bx	lr
    441e:	bf00      	nop
    4420:	00014e10 	.word	0x00014e10
    4424:	40064000 	.word	0x40064000

00004428 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4428:	b084      	sub	sp, #16
    442a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    442c:	9b01      	ldr	r3, [sp, #4]
    442e:	685b      	ldr	r3, [r3, #4]
    4430:	4a0b      	ldr	r2, [pc, #44]	; (4460 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4432:	5cd3      	ldrb	r3, [r2, r3]
    4434:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4436:	4b0b      	ldr	r3, [pc, #44]	; (4464 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4438:	69db      	ldr	r3, [r3, #28]
    443a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    443c:	9b02      	ldr	r3, [sp, #8]
    443e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4442:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4444:	9b03      	ldr	r3, [sp, #12]
    4446:	061b      	lsls	r3, r3, #24
    4448:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    444c:	9a02      	ldr	r2, [sp, #8]
    444e:	4313      	orrs	r3, r2
    4450:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4452:	4a04      	ldr	r2, [pc, #16]	; (4464 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4454:	9b02      	ldr	r3, [sp, #8]
    4456:	61d3      	str	r3, [r2, #28]
}
    4458:	bf00      	nop
    445a:	b004      	add	sp, #16
    445c:	4770      	bx	lr
    445e:	bf00      	nop
    4460:	00014e10 	.word	0x00014e10
    4464:	40064000 	.word	0x40064000

00004468 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4468:	b084      	sub	sp, #16
    446a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    446c:	4b0a      	ldr	r3, [pc, #40]	; (4498 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    446e:	7b9b      	ldrb	r3, [r3, #14]
    4470:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4472:	4b0a      	ldr	r3, [pc, #40]	; (449c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4474:	691b      	ldr	r3, [r3, #16]
    4476:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4478:	9b02      	ldr	r3, [sp, #8]
    447a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    447e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4480:	9b03      	ldr	r3, [sp, #12]
    4482:	011b      	lsls	r3, r3, #4
    4484:	9a02      	ldr	r2, [sp, #8]
    4486:	4313      	orrs	r3, r2
    4488:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    448a:	4a04      	ldr	r2, [pc, #16]	; (449c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    448c:	9b02      	ldr	r3, [sp, #8]
    448e:	6113      	str	r3, [r2, #16]
}
    4490:	bf00      	nop
    4492:	b004      	add	sp, #16
    4494:	4770      	bx	lr
    4496:	bf00      	nop
    4498:	00014db8 	.word	0x00014db8
    449c:	40048000 	.word	0x40048000

000044a0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44a0:	b084      	sub	sp, #16
    44a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44a4:	9b01      	ldr	r3, [sp, #4]
    44a6:	685b      	ldr	r3, [r3, #4]
    44a8:	4a0a      	ldr	r2, [pc, #40]	; (44d4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    44aa:	5cd3      	ldrb	r3, [r2, r3]
    44ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    44ae:	4b0a      	ldr	r3, [pc, #40]	; (44d8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44b0:	691b      	ldr	r3, [r3, #16]
    44b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44b4:	9b02      	ldr	r3, [sp, #8]
    44b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44bc:	9b03      	ldr	r3, [sp, #12]
    44be:	011b      	lsls	r3, r3, #4
    44c0:	9a02      	ldr	r2, [sp, #8]
    44c2:	4313      	orrs	r3, r2
    44c4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44c6:	4a04      	ldr	r2, [pc, #16]	; (44d8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44c8:	9b02      	ldr	r3, [sp, #8]
    44ca:	6113      	str	r3, [r2, #16]
}
    44cc:	bf00      	nop
    44ce:	b004      	add	sp, #16
    44d0:	4770      	bx	lr
    44d2:	bf00      	nop
    44d4:	00014db8 	.word	0x00014db8
    44d8:	40048000 	.word	0x40048000

000044dc <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44dc:	b084      	sub	sp, #16
    44de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44e0:	4b0a      	ldr	r3, [pc, #40]	; (450c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    44e2:	785b      	ldrb	r3, [r3, #1]
    44e4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44e6:	4b0a      	ldr	r3, [pc, #40]	; (4510 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44e8:	691b      	ldr	r3, [r3, #16]
    44ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44ec:	9b02      	ldr	r3, [sp, #8]
    44ee:	f023 030c 	bic.w	r3, r3, #12
    44f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44f4:	9b03      	ldr	r3, [sp, #12]
    44f6:	009b      	lsls	r3, r3, #2
    44f8:	9a02      	ldr	r2, [sp, #8]
    44fa:	4313      	orrs	r3, r2
    44fc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44fe:	4a04      	ldr	r2, [pc, #16]	; (4510 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4500:	9b02      	ldr	r3, [sp, #8]
    4502:	6113      	str	r3, [r2, #16]
}
    4504:	bf00      	nop
    4506:	b004      	add	sp, #16
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	00014e70 	.word	0x00014e70
    4510:	40048000 	.word	0x40048000

00004514 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b084      	sub	sp, #16
    4516:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4518:	9b01      	ldr	r3, [sp, #4]
    451a:	685b      	ldr	r3, [r3, #4]
    451c:	4a0a      	ldr	r2, [pc, #40]	; (4548 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    451e:	5cd3      	ldrb	r3, [r2, r3]
    4520:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4522:	4b0a      	ldr	r3, [pc, #40]	; (454c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4524:	691b      	ldr	r3, [r3, #16]
    4526:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4528:	9b02      	ldr	r3, [sp, #8]
    452a:	f023 030c 	bic.w	r3, r3, #12
    452e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4530:	9b03      	ldr	r3, [sp, #12]
    4532:	009b      	lsls	r3, r3, #2
    4534:	9a02      	ldr	r2, [sp, #8]
    4536:	4313      	orrs	r3, r2
    4538:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    453a:	4a04      	ldr	r2, [pc, #16]	; (454c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    453c:	9b02      	ldr	r3, [sp, #8]
    453e:	6113      	str	r3, [r2, #16]
}
    4540:	bf00      	nop
    4542:	b004      	add	sp, #16
    4544:	4770      	bx	lr
    4546:	bf00      	nop
    4548:	00014e70 	.word	0x00014e70
    454c:	40048000 	.word	0x40048000

00004550 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4550:	b084      	sub	sp, #16
    4552:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4554:	4b0a      	ldr	r3, [pc, #40]	; (4580 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4556:	795b      	ldrb	r3, [r3, #5]
    4558:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    455a:	4b0a      	ldr	r3, [pc, #40]	; (4584 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    455c:	6a1b      	ldr	r3, [r3, #32]
    455e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4560:	9b02      	ldr	r3, [sp, #8]
    4562:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4566:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	061b      	lsls	r3, r3, #24
    456c:	9a02      	ldr	r2, [sp, #8]
    456e:	4313      	orrs	r3, r2
    4570:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4572:	4a04      	ldr	r2, [pc, #16]	; (4584 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4574:	9b02      	ldr	r3, [sp, #8]
    4576:	6213      	str	r3, [r2, #32]
}
    4578:	bf00      	nop
    457a:	b004      	add	sp, #16
    457c:	4770      	bx	lr
    457e:	bf00      	nop
    4580:	00014e10 	.word	0x00014e10
    4584:	40064000 	.word	0x40064000

00004588 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4588:	b084      	sub	sp, #16
    458a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    458c:	9b01      	ldr	r3, [sp, #4]
    458e:	685b      	ldr	r3, [r3, #4]
    4590:	4a0a      	ldr	r2, [pc, #40]	; (45bc <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4592:	5cd3      	ldrb	r3, [r2, r3]
    4594:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4596:	4b0a      	ldr	r3, [pc, #40]	; (45c0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4598:	6a1b      	ldr	r3, [r3, #32]
    459a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    459c:	9b02      	ldr	r3, [sp, #8]
    459e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45a2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45a4:	9b03      	ldr	r3, [sp, #12]
    45a6:	061b      	lsls	r3, r3, #24
    45a8:	9a02      	ldr	r2, [sp, #8]
    45aa:	4313      	orrs	r3, r2
    45ac:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45ae:	4a04      	ldr	r2, [pc, #16]	; (45c0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45b0:	9b02      	ldr	r3, [sp, #8]
    45b2:	6213      	str	r3, [r2, #32]
}
    45b4:	bf00      	nop
    45b6:	b004      	add	sp, #16
    45b8:	4770      	bx	lr
    45ba:	bf00      	nop
    45bc:	00014e10 	.word	0x00014e10
    45c0:	40064000 	.word	0x40064000

000045c4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45c4:	b086      	sub	sp, #24
    45c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c8:	4b20      	ldr	r3, [pc, #128]	; (464c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    45ca:	795b      	ldrb	r3, [r3, #5]
    45cc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45ce:	9b01      	ldr	r3, [sp, #4]
    45d0:	681a      	ldr	r2, [r3, #0]
    45d2:	491f      	ldr	r1, [pc, #124]	; (4650 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45d4:	4613      	mov	r3, r2
    45d6:	00db      	lsls	r3, r3, #3
    45d8:	4413      	add	r3, r2
    45da:	440b      	add	r3, r1
    45dc:	781b      	ldrb	r3, [r3, #0]
    45de:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45e0:	4b1c      	ldr	r3, [pc, #112]	; (4654 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45e2:	68db      	ldr	r3, [r3, #12]
    45e4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45e6:	9b03      	ldr	r3, [sp, #12]
    45e8:	2b03      	cmp	r3, #3
    45ea:	d813      	bhi.n	4614 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45ec:	9b03      	ldr	r3, [sp, #12]
    45ee:	005b      	lsls	r3, r3, #1
    45f0:	3318      	adds	r3, #24
    45f2:	2203      	movs	r2, #3
    45f4:	fa02 f303 	lsl.w	r3, r2, r3
    45f8:	43db      	mvns	r3, r3
    45fa:	9a05      	ldr	r2, [sp, #20]
    45fc:	4013      	ands	r3, r2
    45fe:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4600:	9b03      	ldr	r3, [sp, #12]
    4602:	005b      	lsls	r3, r3, #1
    4604:	3318      	adds	r3, #24
    4606:	9a04      	ldr	r2, [sp, #16]
    4608:	fa02 f303 	lsl.w	r3, r2, r3
    460c:	9a05      	ldr	r2, [sp, #20]
    460e:	4313      	orrs	r3, r2
    4610:	9305      	str	r3, [sp, #20]
    4612:	e014      	b.n	463e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4614:	9b03      	ldr	r3, [sp, #12]
    4616:	3b04      	subs	r3, #4
    4618:	005b      	lsls	r3, r3, #1
    461a:	3310      	adds	r3, #16
    461c:	2203      	movs	r2, #3
    461e:	fa02 f303 	lsl.w	r3, r2, r3
    4622:	43db      	mvns	r3, r3
    4624:	9a05      	ldr	r2, [sp, #20]
    4626:	4013      	ands	r3, r2
    4628:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    462a:	9b03      	ldr	r3, [sp, #12]
    462c:	3b04      	subs	r3, #4
    462e:	005b      	lsls	r3, r3, #1
    4630:	3310      	adds	r3, #16
    4632:	9a04      	ldr	r2, [sp, #16]
    4634:	fa02 f303 	lsl.w	r3, r2, r3
    4638:	9a05      	ldr	r2, [sp, #20]
    463a:	4313      	orrs	r3, r2
    463c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    463e:	4a05      	ldr	r2, [pc, #20]	; (4654 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4640:	9b05      	ldr	r3, [sp, #20]
    4642:	60d3      	str	r3, [r2, #12]
}
    4644:	bf00      	nop
    4646:	b006      	add	sp, #24
    4648:	4770      	bx	lr
    464a:	bf00      	nop
    464c:	00014db8 	.word	0x00014db8
    4650:	00014aa8 	.word	0x00014aa8
    4654:	40048000 	.word	0x40048000

00004658 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4658:	b086      	sub	sp, #24
    465a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    465c:	9b01      	ldr	r3, [sp, #4]
    465e:	685b      	ldr	r3, [r3, #4]
    4660:	4a20      	ldr	r2, [pc, #128]	; (46e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4662:	5cd3      	ldrb	r3, [r2, r3]
    4664:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4666:	9b01      	ldr	r3, [sp, #4]
    4668:	681a      	ldr	r2, [r3, #0]
    466a:	491f      	ldr	r1, [pc, #124]	; (46e8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    466c:	4613      	mov	r3, r2
    466e:	00db      	lsls	r3, r3, #3
    4670:	4413      	add	r3, r2
    4672:	440b      	add	r3, r1
    4674:	781b      	ldrb	r3, [r3, #0]
    4676:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4678:	4b1c      	ldr	r3, [pc, #112]	; (46ec <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    467a:	68db      	ldr	r3, [r3, #12]
    467c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    467e:	9b03      	ldr	r3, [sp, #12]
    4680:	2b03      	cmp	r3, #3
    4682:	d813      	bhi.n	46ac <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4684:	9b03      	ldr	r3, [sp, #12]
    4686:	005b      	lsls	r3, r3, #1
    4688:	3318      	adds	r3, #24
    468a:	2203      	movs	r2, #3
    468c:	fa02 f303 	lsl.w	r3, r2, r3
    4690:	43db      	mvns	r3, r3
    4692:	9a05      	ldr	r2, [sp, #20]
    4694:	4013      	ands	r3, r2
    4696:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	005b      	lsls	r3, r3, #1
    469c:	3318      	adds	r3, #24
    469e:	9a04      	ldr	r2, [sp, #16]
    46a0:	fa02 f303 	lsl.w	r3, r2, r3
    46a4:	9a05      	ldr	r2, [sp, #20]
    46a6:	4313      	orrs	r3, r2
    46a8:	9305      	str	r3, [sp, #20]
    46aa:	e014      	b.n	46d6 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    46ac:	9b03      	ldr	r3, [sp, #12]
    46ae:	3b04      	subs	r3, #4
    46b0:	005b      	lsls	r3, r3, #1
    46b2:	3310      	adds	r3, #16
    46b4:	2203      	movs	r2, #3
    46b6:	fa02 f303 	lsl.w	r3, r2, r3
    46ba:	43db      	mvns	r3, r3
    46bc:	9a05      	ldr	r2, [sp, #20]
    46be:	4013      	ands	r3, r2
    46c0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    46c2:	9b03      	ldr	r3, [sp, #12]
    46c4:	3b04      	subs	r3, #4
    46c6:	005b      	lsls	r3, r3, #1
    46c8:	3310      	adds	r3, #16
    46ca:	9a04      	ldr	r2, [sp, #16]
    46cc:	fa02 f303 	lsl.w	r3, r2, r3
    46d0:	9a05      	ldr	r2, [sp, #20]
    46d2:	4313      	orrs	r3, r2
    46d4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46d6:	4a05      	ldr	r2, [pc, #20]	; (46ec <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46d8:	9b05      	ldr	r3, [sp, #20]
    46da:	60d3      	str	r3, [r2, #12]
}
    46dc:	bf00      	nop
    46de:	b006      	add	sp, #24
    46e0:	4770      	bx	lr
    46e2:	bf00      	nop
    46e4:	00014db8 	.word	0x00014db8
    46e8:	00014aa8 	.word	0x00014aa8
    46ec:	40048000 	.word	0x40048000

000046f0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46f0:	b084      	sub	sp, #16
    46f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    46f4:	4b06      	ldr	r3, [pc, #24]	; (4710 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46f6:	685b      	ldr	r3, [r3, #4]
    46f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    46fa:	9b03      	ldr	r3, [sp, #12]
    46fc:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4700:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4702:	4a03      	ldr	r2, [pc, #12]	; (4710 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4704:	9b03      	ldr	r3, [sp, #12]
    4706:	6053      	str	r3, [r2, #4]
}
    4708:	bf00      	nop
    470a:	b004      	add	sp, #16
    470c:	4770      	bx	lr
    470e:	bf00      	nop
    4710:	40048000 	.word	0x40048000

00004714 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4714:	b084      	sub	sp, #16
    4716:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	685b      	ldr	r3, [r3, #4]
    471c:	4a0a      	ldr	r2, [pc, #40]	; (4748 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    471e:	5cd3      	ldrb	r3, [r2, r3]
    4720:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4722:	4b0a      	ldr	r3, [pc, #40]	; (474c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4724:	685b      	ldr	r3, [r3, #4]
    4726:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4728:	9b02      	ldr	r3, [sp, #8]
    472a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    472e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4730:	9b03      	ldr	r3, [sp, #12]
    4732:	011b      	lsls	r3, r3, #4
    4734:	9a02      	ldr	r2, [sp, #8]
    4736:	4313      	orrs	r3, r2
    4738:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    473a:	4a04      	ldr	r2, [pc, #16]	; (474c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    473c:	9b02      	ldr	r3, [sp, #8]
    473e:	6053      	str	r3, [r2, #4]
}
    4740:	bf00      	nop
    4742:	b004      	add	sp, #16
    4744:	4770      	bx	lr
    4746:	bf00      	nop
    4748:	00014db8 	.word	0x00014db8
    474c:	40048000 	.word	0x40048000

00004750 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4750:	b084      	sub	sp, #16
    4752:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4754:	9b01      	ldr	r3, [sp, #4]
    4756:	681a      	ldr	r2, [r3, #0]
    4758:	490f      	ldr	r1, [pc, #60]	; (4798 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    475a:	4613      	mov	r3, r2
    475c:	00db      	lsls	r3, r3, #3
    475e:	4413      	add	r3, r2
    4760:	440b      	add	r3, r1
    4762:	3304      	adds	r3, #4
    4764:	781b      	ldrb	r3, [r3, #0]
    4766:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4768:	4a0c      	ldr	r2, [pc, #48]	; (479c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    476a:	9b03      	ldr	r3, [sp, #12]
    476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4770:	490a      	ldr	r1, [pc, #40]	; (479c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4772:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4776:	9b03      	ldr	r3, [sp, #12]
    4778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    477c:	4a07      	ldr	r2, [pc, #28]	; (479c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    477e:	9b03      	ldr	r3, [sp, #12]
    4780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4784:	4905      	ldr	r1, [pc, #20]	; (479c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4786:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    478a:	9b03      	ldr	r3, [sp, #12]
    478c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4790:	bf00      	nop
    4792:	b004      	add	sp, #16
    4794:	4770      	bx	lr
    4796:	bf00      	nop
    4798:	00014aa8 	.word	0x00014aa8
    479c:	40065000 	.word	0x40065000

000047a0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47a0:	b086      	sub	sp, #24
    47a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	681a      	ldr	r2, [r3, #0]
    47a8:	4912      	ldr	r1, [pc, #72]	; (47f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    47aa:	4613      	mov	r3, r2
    47ac:	00db      	lsls	r3, r3, #3
    47ae:	4413      	add	r3, r2
    47b0:	440b      	add	r3, r1
    47b2:	3304      	adds	r3, #4
    47b4:	781b      	ldrb	r3, [r3, #0]
    47b6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47b8:	9b01      	ldr	r3, [sp, #4]
    47ba:	685b      	ldr	r3, [r3, #4]
    47bc:	4a0e      	ldr	r2, [pc, #56]	; (47f8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    47be:	5cd3      	ldrb	r3, [r2, r3]
    47c0:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    47c2:	4a0e      	ldr	r2, [pc, #56]	; (47fc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47c4:	9b05      	ldr	r3, [sp, #20]
    47c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47ca:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47cc:	9b03      	ldr	r3, [sp, #12]
    47ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47d2:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47d4:	9b04      	ldr	r3, [sp, #16]
    47d6:	061b      	lsls	r3, r3, #24
    47d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47dc:	9a03      	ldr	r2, [sp, #12]
    47de:	4313      	orrs	r3, r2
    47e0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    47e2:	4906      	ldr	r1, [pc, #24]	; (47fc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47e4:	9b05      	ldr	r3, [sp, #20]
    47e6:	9a03      	ldr	r2, [sp, #12]
    47e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47ec:	bf00      	nop
    47ee:	b006      	add	sp, #24
    47f0:	4770      	bx	lr
    47f2:	bf00      	nop
    47f4:	00014aa8 	.word	0x00014aa8
    47f8:	00014e40 	.word	0x00014e40
    47fc:	40065000 	.word	0x40065000

00004800 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4800:	b084      	sub	sp, #16
    4802:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4804:	4b0b      	ldr	r3, [pc, #44]	; (4834 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4806:	7f1b      	ldrb	r3, [r3, #28]
    4808:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    480a:	4b0b      	ldr	r3, [pc, #44]	; (4838 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    480c:	685b      	ldr	r3, [r3, #4]
    480e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4810:	9b02      	ldr	r3, [sp, #8]
    4812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4816:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4818:	9b03      	ldr	r3, [sp, #12]
    481a:	031b      	lsls	r3, r3, #12
    481c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4820:	9a02      	ldr	r2, [sp, #8]
    4822:	4313      	orrs	r3, r2
    4824:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4826:	4a04      	ldr	r2, [pc, #16]	; (4838 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4828:	9b02      	ldr	r3, [sp, #8]
    482a:	6053      	str	r3, [r2, #4]
}
    482c:	bf00      	nop
    482e:	b004      	add	sp, #16
    4830:	4770      	bx	lr
    4832:	bf00      	nop
    4834:	00014db8 	.word	0x00014db8
    4838:	40048000 	.word	0x40048000

0000483c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    483c:	b084      	sub	sp, #16
    483e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4840:	9b01      	ldr	r3, [sp, #4]
    4842:	685b      	ldr	r3, [r3, #4]
    4844:	4a0b      	ldr	r2, [pc, #44]	; (4874 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4846:	5cd3      	ldrb	r3, [r2, r3]
    4848:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    484a:	4b0b      	ldr	r3, [pc, #44]	; (4878 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    484c:	685b      	ldr	r3, [r3, #4]
    484e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4850:	9b02      	ldr	r3, [sp, #8]
    4852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4856:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4858:	9b03      	ldr	r3, [sp, #12]
    485a:	031b      	lsls	r3, r3, #12
    485c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4860:	9a02      	ldr	r2, [sp, #8]
    4862:	4313      	orrs	r3, r2
    4864:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4866:	4a04      	ldr	r2, [pc, #16]	; (4878 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4868:	9b02      	ldr	r3, [sp, #8]
    486a:	6053      	str	r3, [r2, #4]
}
    486c:	bf00      	nop
    486e:	b004      	add	sp, #16
    4870:	4770      	bx	lr
    4872:	bf00      	nop
    4874:	00014db8 	.word	0x00014db8
    4878:	40048000 	.word	0x40048000

0000487c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    487c:	b500      	push	{lr}
    487e:	b085      	sub	sp, #20
    4880:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4882:	2300      	movs	r3, #0
    4884:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4888:	9b01      	ldr	r3, [sp, #4]
    488a:	2b00      	cmp	r3, #0
    488c:	d037      	beq.n	48fe <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    488e:	2300      	movs	r3, #0
    4890:	9303      	str	r3, [sp, #12]
    4892:	e02b      	b.n	48ec <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4894:	4b29      	ldr	r3, [pc, #164]	; (493c <DisableSafeClock+0xc0>)
    4896:	6819      	ldr	r1, [r3, #0]
    4898:	9a03      	ldr	r2, [sp, #12]
    489a:	4613      	mov	r3, r2
    489c:	005b      	lsls	r3, r3, #1
    489e:	4413      	add	r3, r2
    48a0:	009b      	lsls	r3, r3, #2
    48a2:	440b      	add	r3, r1
    48a4:	3314      	adds	r3, #20
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	2b05      	cmp	r3, #5
    48aa:	d11c      	bne.n	48e6 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    48ac:	2301      	movs	r3, #1
    48ae:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    48b2:	4b22      	ldr	r3, [pc, #136]	; (493c <DisableSafeClock+0xc0>)
    48b4:	6819      	ldr	r1, [r3, #0]
    48b6:	9a03      	ldr	r2, [sp, #12]
    48b8:	4613      	mov	r3, r2
    48ba:	005b      	lsls	r3, r3, #1
    48bc:	4413      	add	r3, r2
    48be:	009b      	lsls	r3, r3, #2
    48c0:	440b      	add	r3, r1
    48c2:	3318      	adds	r3, #24
    48c4:	881b      	ldrh	r3, [r3, #0]
    48c6:	2b00      	cmp	r3, #0
    48c8:	d118      	bne.n	48fc <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48ca:	4b1d      	ldr	r3, [pc, #116]	; (4940 <DisableSafeClock+0xc4>)
    48cc:	791b      	ldrb	r3, [r3, #4]
    48ce:	4619      	mov	r1, r3
    48d0:	4a1c      	ldr	r2, [pc, #112]	; (4944 <DisableSafeClock+0xc8>)
    48d2:	460b      	mov	r3, r1
    48d4:	005b      	lsls	r3, r3, #1
    48d6:	440b      	add	r3, r1
    48d8:	009b      	lsls	r3, r3, #2
    48da:	4413      	add	r3, r2
    48dc:	3308      	adds	r3, #8
    48de:	681b      	ldr	r3, [r3, #0]
    48e0:	2005      	movs	r0, #5
    48e2:	4798      	blx	r3
                }
                break;
    48e4:	e00a      	b.n	48fc <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48e6:	9b03      	ldr	r3, [sp, #12]
    48e8:	3301      	adds	r3, #1
    48ea:	9303      	str	r3, [sp, #12]
    48ec:	4b13      	ldr	r3, [pc, #76]	; (493c <DisableSafeClock+0xc0>)
    48ee:	681b      	ldr	r3, [r3, #0]
    48f0:	7a1b      	ldrb	r3, [r3, #8]
    48f2:	461a      	mov	r2, r3
    48f4:	9b03      	ldr	r3, [sp, #12]
    48f6:	4293      	cmp	r3, r2
    48f8:	d3cc      	bcc.n	4894 <DisableSafeClock+0x18>
    48fa:	e000      	b.n	48fe <DisableSafeClock+0x82>
                break;
    48fc:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    48fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4902:	f083 0301 	eor.w	r3, r3, #1
    4906:	b2db      	uxtb	r3, r3
    4908:	2b00      	cmp	r3, #0
    490a:	d013      	beq.n	4934 <DisableSafeClock+0xb8>
    490c:	4b0e      	ldr	r3, [pc, #56]	; (4948 <DisableSafeClock+0xcc>)
    490e:	781b      	ldrb	r3, [r3, #0]
    4910:	f083 0301 	eor.w	r3, r3, #1
    4914:	b2db      	uxtb	r3, r3
    4916:	2b00      	cmp	r3, #0
    4918:	d00c      	beq.n	4934 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    491a:	4b09      	ldr	r3, [pc, #36]	; (4940 <DisableSafeClock+0xc4>)
    491c:	791b      	ldrb	r3, [r3, #4]
    491e:	4619      	mov	r1, r3
    4920:	4a08      	ldr	r2, [pc, #32]	; (4944 <DisableSafeClock+0xc8>)
    4922:	460b      	mov	r3, r1
    4924:	005b      	lsls	r3, r3, #1
    4926:	440b      	add	r3, r1
    4928:	009b      	lsls	r3, r3, #2
    492a:	4413      	add	r3, r2
    492c:	3308      	adds	r3, #8
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	2005      	movs	r0, #5
    4932:	4798      	blx	r3
    }
}
    4934:	bf00      	nop
    4936:	b005      	add	sp, #20
    4938:	f85d fb04 	ldr.w	pc, [sp], #4
    493c:	1fff8ba8 	.word	0x1fff8ba8
    4940:	00014a38 	.word	0x00014a38
    4944:	00015068 	.word	0x00015068
    4948:	1fff8b18 	.word	0x1fff8b18

0000494c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    494c:	4b06      	ldr	r3, [pc, #24]	; (4968 <SetFircToResetValue_TrustedCall+0x1c>)
    494e:	2200      	movs	r2, #0
    4950:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <SetFircToResetValue_TrustedCall+0x1c>)
    4956:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    495a:	4a03      	ldr	r2, [pc, #12]	; (4968 <SetFircToResetValue_TrustedCall+0x1c>)
    495c:	f043 0301 	orr.w	r3, r3, #1
    4960:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4964:	bf00      	nop
    4966:	4770      	bx	lr
    4968:	40064000 	.word	0x40064000

0000496c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    496c:	b084      	sub	sp, #16
    496e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4970:	2303      	movs	r3, #3
    4972:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4974:	2300      	movs	r3, #0
    4976:	9302      	str	r3, [sp, #8]
    4978:	e028      	b.n	49cc <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    497a:	9b01      	ldr	r3, [sp, #4]
    497c:	9a02      	ldr	r2, [sp, #8]
    497e:	320d      	adds	r2, #13
    4980:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4984:	2b28      	cmp	r3, #40	; 0x28
    4986:	d10b      	bne.n	49a0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4988:	9a01      	ldr	r2, [sp, #4]
    498a:	9b02      	ldr	r3, [sp, #8]
    498c:	330d      	adds	r3, #13
    498e:	00db      	lsls	r3, r3, #3
    4990:	4413      	add	r3, r2
    4992:	685b      	ldr	r3, [r3, #4]
    4994:	4a2b      	ldr	r2, [pc, #172]	; (4a44 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4996:	5cd3      	ldrb	r3, [r2, r3]
    4998:	011b      	lsls	r3, r3, #4
    499a:	9a03      	ldr	r2, [sp, #12]
    499c:	4313      	orrs	r3, r2
    499e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    49a0:	9b01      	ldr	r3, [sp, #4]
    49a2:	9a02      	ldr	r2, [sp, #8]
    49a4:	320d      	adds	r2, #13
    49a6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49aa:	2b29      	cmp	r3, #41	; 0x29
    49ac:	d10b      	bne.n	49c6 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    49ae:	9a01      	ldr	r2, [sp, #4]
    49b0:	9b02      	ldr	r3, [sp, #8]
    49b2:	330d      	adds	r3, #13
    49b4:	00db      	lsls	r3, r3, #3
    49b6:	4413      	add	r3, r2
    49b8:	685b      	ldr	r3, [r3, #4]
    49ba:	4a23      	ldr	r2, [pc, #140]	; (4a48 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    49bc:	5cd3      	ldrb	r3, [r2, r3]
    49be:	009b      	lsls	r3, r3, #2
    49c0:	9a03      	ldr	r2, [sp, #12]
    49c2:	4313      	orrs	r3, r2
    49c4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49c6:	9b02      	ldr	r3, [sp, #8]
    49c8:	3301      	adds	r3, #1
    49ca:	9302      	str	r3, [sp, #8]
    49cc:	9b01      	ldr	r3, [sp, #4]
    49ce:	7adb      	ldrb	r3, [r3, #11]
    49d0:	461a      	mov	r2, r3
    49d2:	9b02      	ldr	r3, [sp, #8]
    49d4:	4293      	cmp	r3, r2
    49d6:	d3d0      	bcc.n	497a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49d8:	2300      	movs	r3, #0
    49da:	9302      	str	r3, [sp, #8]
    49dc:	e026      	b.n	4a2c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49de:	9a01      	ldr	r2, [sp, #4]
    49e0:	9b02      	ldr	r3, [sp, #8]
    49e2:	334e      	adds	r3, #78	; 0x4e
    49e4:	00db      	lsls	r3, r3, #3
    49e6:	4413      	add	r3, r2
    49e8:	685b      	ldr	r3, [r3, #4]
    49ea:	2b12      	cmp	r3, #18
    49ec:	d109      	bne.n	4a02 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    49ee:	9a01      	ldr	r2, [sp, #4]
    49f0:	9b02      	ldr	r3, [sp, #8]
    49f2:	334e      	adds	r3, #78	; 0x4e
    49f4:	00db      	lsls	r3, r3, #3
    49f6:	4413      	add	r3, r2
    49f8:	891b      	ldrh	r3, [r3, #8]
    49fa:	005b      	lsls	r3, r3, #1
    49fc:	9a03      	ldr	r2, [sp, #12]
    49fe:	4313      	orrs	r3, r2
    4a00:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4a02:	9a01      	ldr	r2, [sp, #4]
    4a04:	9b02      	ldr	r3, [sp, #8]
    4a06:	334e      	adds	r3, #78	; 0x4e
    4a08:	00db      	lsls	r3, r3, #3
    4a0a:	4413      	add	r3, r2
    4a0c:	685b      	ldr	r3, [r3, #4]
    4a0e:	2b13      	cmp	r3, #19
    4a10:	d109      	bne.n	4a26 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4a12:	9a01      	ldr	r2, [sp, #4]
    4a14:	9b02      	ldr	r3, [sp, #8]
    4a16:	334e      	adds	r3, #78	; 0x4e
    4a18:	00db      	lsls	r3, r3, #3
    4a1a:	4413      	add	r3, r2
    4a1c:	891b      	ldrh	r3, [r3, #8]
    4a1e:	461a      	mov	r2, r3
    4a20:	9b03      	ldr	r3, [sp, #12]
    4a22:	4313      	orrs	r3, r2
    4a24:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a26:	9b02      	ldr	r3, [sp, #8]
    4a28:	3301      	adds	r3, #1
    4a2a:	9302      	str	r3, [sp, #8]
    4a2c:	9b01      	ldr	r3, [sp, #4]
    4a2e:	7c1b      	ldrb	r3, [r3, #16]
    4a30:	461a      	mov	r2, r3
    4a32:	9b02      	ldr	r3, [sp, #8]
    4a34:	4293      	cmp	r3, r2
    4a36:	d3d2      	bcc.n	49de <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a38:	4a04      	ldr	r2, [pc, #16]	; (4a4c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a3a:	9b03      	ldr	r3, [sp, #12]
    4a3c:	6113      	str	r3, [r2, #16]
}
    4a3e:	bf00      	nop
    4a40:	b004      	add	sp, #16
    4a42:	4770      	bx	lr
    4a44:	00014db8 	.word	0x00014db8
    4a48:	00014e70 	.word	0x00014e70
    4a4c:	40048000 	.word	0x40048000

00004a50 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a50:	b500      	push	{lr}
    4a52:	b089      	sub	sp, #36	; 0x24
    4a54:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a56:	2300      	movs	r3, #0
    4a58:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a5c:	4a21      	ldr	r2, [pc, #132]	; (4ae4 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a5e:	9b01      	ldr	r3, [sp, #4]
    4a60:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a62:	4b21      	ldr	r3, [pc, #132]	; (4ae8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a64:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a68:	f003 0301 	and.w	r3, r3, #1
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d12e      	bne.n	4ace <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a70:	4b1e      	ldr	r3, [pc, #120]	; (4aec <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a72:	2200      	movs	r2, #0
    4a74:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a76:	f7ff ff69 	bl	494c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a7a:	aa03      	add	r2, sp, #12
    4a7c:	a904      	add	r1, sp, #16
    4a7e:	a805      	add	r0, sp, #20
    4a80:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a84:	f7fe f8ae 	bl	2be4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a88:	4b17      	ldr	r3, [pc, #92]	; (4ae8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a8e:	0e1b      	lsrs	r3, r3, #24
    4a90:	f003 0301 	and.w	r3, r3, #1
    4a94:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a96:	9a03      	ldr	r2, [sp, #12]
    4a98:	a904      	add	r1, sp, #16
    4a9a:	ab05      	add	r3, sp, #20
    4a9c:	4618      	mov	r0, r3
    4a9e:	f7fe f8bb 	bl	2c18 <Clock_Ip_TimeoutExpired>
    4aa2:	4603      	mov	r3, r0
    4aa4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4aa8:	9b06      	ldr	r3, [sp, #24]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d106      	bne.n	4abc <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4aae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ab2:	f083 0301 	eor.w	r3, r3, #1
    4ab6:	b2db      	uxtb	r3, r3
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d1e5      	bne.n	4a88 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4abc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d007      	beq.n	4ad4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4ac4:	2105      	movs	r1, #5
    4ac6:	2001      	movs	r0, #1
    4ac8:	f7fe f87c 	bl	2bc4 <Clock_Ip_ReportClockErrors>
    4acc:	e002      	b.n	4ad4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4ace:	4b07      	ldr	r3, [pc, #28]	; (4aec <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ad0:	2201      	movs	r2, #1
    4ad2:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4ad4:	9801      	ldr	r0, [sp, #4]
    4ad6:	f7ff ff49 	bl	496c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4ada:	bf00      	nop
    4adc:	b009      	add	sp, #36	; 0x24
    4ade:	f85d fb04 	ldr.w	pc, [sp], #4
    4ae2:	bf00      	nop
    4ae4:	1fff8ba8 	.word	0x1fff8ba8
    4ae8:	40064000 	.word	0x40064000
    4aec:	1fff8b18 	.word	0x1fff8b18

00004af0 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4af0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4af2:	2300      	movs	r3, #0
    4af4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4af6:	4b29      	ldr	r3, [pc, #164]	; (4b9c <getFircConfig+0xac>)
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	2b00      	cmp	r3, #0
    4afc:	d024      	beq.n	4b48 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4afe:	2300      	movs	r3, #0
    4b00:	9301      	str	r3, [sp, #4]
    4b02:	e01a      	b.n	4b3a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b04:	4b25      	ldr	r3, [pc, #148]	; (4b9c <getFircConfig+0xac>)
    4b06:	6819      	ldr	r1, [r3, #0]
    4b08:	9a01      	ldr	r2, [sp, #4]
    4b0a:	4613      	mov	r3, r2
    4b0c:	005b      	lsls	r3, r3, #1
    4b0e:	4413      	add	r3, r2
    4b10:	009b      	lsls	r3, r3, #2
    4b12:	440b      	add	r3, r1
    4b14:	3314      	adds	r3, #20
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	2b05      	cmp	r3, #5
    4b1a:	d10b      	bne.n	4b34 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b1c:	4b1f      	ldr	r3, [pc, #124]	; (4b9c <getFircConfig+0xac>)
    4b1e:	6819      	ldr	r1, [r3, #0]
    4b20:	9a01      	ldr	r2, [sp, #4]
    4b22:	4613      	mov	r3, r2
    4b24:	005b      	lsls	r3, r3, #1
    4b26:	4413      	add	r3, r2
    4b28:	009b      	lsls	r3, r3, #2
    4b2a:	3310      	adds	r3, #16
    4b2c:	440b      	add	r3, r1
    4b2e:	3304      	adds	r3, #4
    4b30:	9300      	str	r3, [sp, #0]
                break;
    4b32:	e009      	b.n	4b48 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b34:	9b01      	ldr	r3, [sp, #4]
    4b36:	3301      	adds	r3, #1
    4b38:	9301      	str	r3, [sp, #4]
    4b3a:	4b18      	ldr	r3, [pc, #96]	; (4b9c <getFircConfig+0xac>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	7a1b      	ldrb	r3, [r3, #8]
    4b40:	461a      	mov	r2, r3
    4b42:	9b01      	ldr	r3, [sp, #4]
    4b44:	4293      	cmp	r3, r2
    4b46:	d3dd      	bcc.n	4b04 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b48:	9b00      	ldr	r3, [sp, #0]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d121      	bne.n	4b92 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b4e:	4b14      	ldr	r3, [pc, #80]	; (4ba0 <getFircConfig+0xb0>)
    4b50:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b52:	4b13      	ldr	r3, [pc, #76]	; (4ba0 <getFircConfig+0xb0>)
    4b54:	2205      	movs	r2, #5
    4b56:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b58:	4b12      	ldr	r3, [pc, #72]	; (4ba4 <getFircConfig+0xb4>)
    4b5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b5e:	b29b      	uxth	r3, r3
    4b60:	f003 0301 	and.w	r3, r3, #1
    4b64:	b29a      	uxth	r2, r3
    4b66:	4b0e      	ldr	r3, [pc, #56]	; (4ba0 <getFircConfig+0xb0>)
    4b68:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b6a:	4b0e      	ldr	r3, [pc, #56]	; (4ba4 <getFircConfig+0xb4>)
    4b6c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b70:	b2db      	uxtb	r3, r3
    4b72:	f003 0303 	and.w	r3, r3, #3
    4b76:	b2da      	uxtb	r2, r3
    4b78:	4b09      	ldr	r3, [pc, #36]	; (4ba0 <getFircConfig+0xb0>)
    4b7a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b7c:	4b09      	ldr	r3, [pc, #36]	; (4ba4 <getFircConfig+0xb4>)
    4b7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b82:	b2db      	uxtb	r3, r3
    4b84:	10db      	asrs	r3, r3, #3
    4b86:	b2db      	uxtb	r3, r3
    4b88:	f003 0301 	and.w	r3, r3, #1
    4b8c:	b2da      	uxtb	r2, r3
    4b8e:	4b04      	ldr	r3, [pc, #16]	; (4ba0 <getFircConfig+0xb0>)
    4b90:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b92:	9b00      	ldr	r3, [sp, #0]
}
    4b94:	4618      	mov	r0, r3
    4b96:	b002      	add	sp, #8
    4b98:	4770      	bx	lr
    4b9a:	bf00      	nop
    4b9c:	1fff8ba8 	.word	0x1fff8ba8
    4ba0:	1fff8c14 	.word	0x1fff8c14
    4ba4:	40064000 	.word	0x40064000

00004ba8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4ba8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4baa:	2300      	movs	r3, #0
    4bac:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4bae:	4b20      	ldr	r3, [pc, #128]	; (4c30 <getSoscConfig+0x88>)
    4bb0:	681b      	ldr	r3, [r3, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d024      	beq.n	4c00 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bb6:	2300      	movs	r3, #0
    4bb8:	9301      	str	r3, [sp, #4]
    4bba:	e01a      	b.n	4bf2 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4bbc:	4b1c      	ldr	r3, [pc, #112]	; (4c30 <getSoscConfig+0x88>)
    4bbe:	6819      	ldr	r1, [r3, #0]
    4bc0:	9a01      	ldr	r2, [sp, #4]
    4bc2:	4613      	mov	r3, r2
    4bc4:	009b      	lsls	r3, r3, #2
    4bc6:	4413      	add	r3, r2
    4bc8:	009b      	lsls	r3, r3, #2
    4bca:	440b      	add	r3, r1
    4bcc:	332c      	adds	r3, #44	; 0x2c
    4bce:	681b      	ldr	r3, [r3, #0]
    4bd0:	2b08      	cmp	r3, #8
    4bd2:	d10b      	bne.n	4bec <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4bd4:	4b16      	ldr	r3, [pc, #88]	; (4c30 <getSoscConfig+0x88>)
    4bd6:	6819      	ldr	r1, [r3, #0]
    4bd8:	9a01      	ldr	r2, [sp, #4]
    4bda:	4613      	mov	r3, r2
    4bdc:	009b      	lsls	r3, r3, #2
    4bde:	4413      	add	r3, r2
    4be0:	009b      	lsls	r3, r3, #2
    4be2:	3328      	adds	r3, #40	; 0x28
    4be4:	440b      	add	r3, r1
    4be6:	3304      	adds	r3, #4
    4be8:	9300      	str	r3, [sp, #0]
                break;
    4bea:	e009      	b.n	4c00 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bec:	9b01      	ldr	r3, [sp, #4]
    4bee:	3301      	adds	r3, #1
    4bf0:	9301      	str	r3, [sp, #4]
    4bf2:	4b0f      	ldr	r3, [pc, #60]	; (4c30 <getSoscConfig+0x88>)
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	7a5b      	ldrb	r3, [r3, #9]
    4bf8:	461a      	mov	r2, r3
    4bfa:	9b01      	ldr	r3, [sp, #4]
    4bfc:	4293      	cmp	r3, r2
    4bfe:	d3dd      	bcc.n	4bbc <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c00:	9b00      	ldr	r3, [sp, #0]
    4c02:	2b00      	cmp	r3, #0
    4c04:	d110      	bne.n	4c28 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4c06:	4b0b      	ldr	r3, [pc, #44]	; (4c34 <getSoscConfig+0x8c>)
    4c08:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4c0a:	4b0a      	ldr	r3, [pc, #40]	; (4c34 <getSoscConfig+0x8c>)
    4c0c:	2208      	movs	r2, #8
    4c0e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4c10:	4b09      	ldr	r3, [pc, #36]	; (4c38 <getSoscConfig+0x90>)
    4c12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c16:	b29b      	uxth	r3, r3
    4c18:	f003 0301 	and.w	r3, r3, #1
    4c1c:	b29a      	uxth	r2, r3
    4c1e:	4b05      	ldr	r3, [pc, #20]	; (4c34 <getSoscConfig+0x8c>)
    4c20:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c22:	4b04      	ldr	r3, [pc, #16]	; (4c34 <getSoscConfig+0x8c>)
    4c24:	4a05      	ldr	r2, [pc, #20]	; (4c3c <getSoscConfig+0x94>)
    4c26:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c28:	9b00      	ldr	r3, [sp, #0]
}
    4c2a:	4618      	mov	r0, r3
    4c2c:	b002      	add	sp, #8
    4c2e:	4770      	bx	lr
    4c30:	1fff8ba8 	.word	0x1fff8ba8
    4c34:	1fff8c20 	.word	0x1fff8c20
    4c38:	40064000 	.word	0x40064000
    4c3c:	02625a00 	.word	0x02625a00

00004c40 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c40:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c42:	2300      	movs	r3, #0
    4c44:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c46:	4b28      	ldr	r3, [pc, #160]	; (4ce8 <getSpllConfig+0xa8>)
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d023      	beq.n	4c96 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c4e:	2300      	movs	r3, #0
    4c50:	9301      	str	r3, [sp, #4]
    4c52:	e019      	b.n	4c88 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c54:	4b24      	ldr	r3, [pc, #144]	; (4ce8 <getSpllConfig+0xa8>)
    4c56:	6819      	ldr	r1, [r3, #0]
    4c58:	9a01      	ldr	r2, [sp, #4]
    4c5a:	4613      	mov	r3, r2
    4c5c:	009b      	lsls	r3, r3, #2
    4c5e:	4413      	add	r3, r2
    4c60:	00db      	lsls	r3, r3, #3
    4c62:	440b      	add	r3, r1
    4c64:	3340      	adds	r3, #64	; 0x40
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	2b09      	cmp	r3, #9
    4c6a:	d10a      	bne.n	4c82 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c6c:	4b1e      	ldr	r3, [pc, #120]	; (4ce8 <getSpllConfig+0xa8>)
    4c6e:	6819      	ldr	r1, [r3, #0]
    4c70:	9a01      	ldr	r2, [sp, #4]
    4c72:	4613      	mov	r3, r2
    4c74:	009b      	lsls	r3, r3, #2
    4c76:	4413      	add	r3, r2
    4c78:	00db      	lsls	r3, r3, #3
    4c7a:	3340      	adds	r3, #64	; 0x40
    4c7c:	440b      	add	r3, r1
    4c7e:	9300      	str	r3, [sp, #0]
                break;
    4c80:	e009      	b.n	4c96 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c82:	9b01      	ldr	r3, [sp, #4]
    4c84:	3301      	adds	r3, #1
    4c86:	9301      	str	r3, [sp, #4]
    4c88:	4b17      	ldr	r3, [pc, #92]	; (4ce8 <getSpllConfig+0xa8>)
    4c8a:	681b      	ldr	r3, [r3, #0]
    4c8c:	7a9b      	ldrb	r3, [r3, #10]
    4c8e:	461a      	mov	r2, r3
    4c90:	9b01      	ldr	r3, [sp, #4]
    4c92:	4293      	cmp	r3, r2
    4c94:	d3de      	bcc.n	4c54 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c96:	9b00      	ldr	r3, [sp, #0]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d121      	bne.n	4ce0 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c9c:	4b13      	ldr	r3, [pc, #76]	; (4cec <getSpllConfig+0xac>)
    4c9e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4ca0:	4b12      	ldr	r3, [pc, #72]	; (4cec <getSpllConfig+0xac>)
    4ca2:	2209      	movs	r2, #9
    4ca4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4ca6:	4b12      	ldr	r3, [pc, #72]	; (4cf0 <getSpllConfig+0xb0>)
    4ca8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4cac:	b29b      	uxth	r3, r3
    4cae:	f003 0301 	and.w	r3, r3, #1
    4cb2:	b29a      	uxth	r2, r3
    4cb4:	4b0d      	ldr	r3, [pc, #52]	; (4cec <getSpllConfig+0xac>)
    4cb6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4cb8:	4b0d      	ldr	r3, [pc, #52]	; (4cf0 <getSpllConfig+0xb0>)
    4cba:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cbe:	0a1b      	lsrs	r3, r3, #8
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	f003 0307 	and.w	r3, r3, #7
    4cc6:	b2da      	uxtb	r2, r3
    4cc8:	4b08      	ldr	r3, [pc, #32]	; (4cec <getSpllConfig+0xac>)
    4cca:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4ccc:	4b08      	ldr	r3, [pc, #32]	; (4cf0 <getSpllConfig+0xb0>)
    4cce:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cd2:	0c1b      	lsrs	r3, r3, #16
    4cd4:	b2db      	uxtb	r3, r3
    4cd6:	f003 031f 	and.w	r3, r3, #31
    4cda:	b2da      	uxtb	r2, r3
    4cdc:	4b03      	ldr	r3, [pc, #12]	; (4cec <getSpllConfig+0xac>)
    4cde:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4ce0:	9b00      	ldr	r3, [sp, #0]
}
    4ce2:	4618      	mov	r0, r3
    4ce4:	b002      	add	sp, #8
    4ce6:	4770      	bx	lr
    4ce8:	1fff8ba8 	.word	0x1fff8ba8
    4cec:	1fff8c34 	.word	0x1fff8c34
    4cf0:	40064000 	.word	0x40064000

00004cf4 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4cf4:	b086      	sub	sp, #24
    4cf6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4cf8:	2300      	movs	r3, #0
    4cfa:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4cfc:	9b01      	ldr	r3, [sp, #4]
    4cfe:	2b1b      	cmp	r3, #27
    4d00:	d00f      	beq.n	4d22 <getSelectorConfig+0x2e>
    4d02:	9b01      	ldr	r3, [sp, #4]
    4d04:	2b1b      	cmp	r3, #27
    4d06:	d80f      	bhi.n	4d28 <getSelectorConfig+0x34>
    4d08:	9b01      	ldr	r3, [sp, #4]
    4d0a:	2b19      	cmp	r3, #25
    4d0c:	d003      	beq.n	4d16 <getSelectorConfig+0x22>
    4d0e:	9b01      	ldr	r3, [sp, #4]
    4d10:	2b1a      	cmp	r3, #26
    4d12:	d003      	beq.n	4d1c <getSelectorConfig+0x28>
    4d14:	e008      	b.n	4d28 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d16:	2300      	movs	r3, #0
    4d18:	9304      	str	r3, [sp, #16]
            break;
    4d1a:	e008      	b.n	4d2e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d1c:	2301      	movs	r3, #1
    4d1e:	9304      	str	r3, [sp, #16]
            break;
    4d20:	e005      	b.n	4d2e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d22:	2302      	movs	r3, #2
    4d24:	9304      	str	r3, [sp, #16]
            break;
    4d26:	e002      	b.n	4d2e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d28:	2300      	movs	r3, #0
    4d2a:	9304      	str	r3, [sp, #16]
            break;
    4d2c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d2e:	4b36      	ldr	r3, [pc, #216]	; (4e08 <getSelectorConfig+0x114>)
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	2b00      	cmp	r3, #0
    4d34:	d01d      	beq.n	4d72 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d36:	2300      	movs	r3, #0
    4d38:	9303      	str	r3, [sp, #12]
    4d3a:	e013      	b.n	4d64 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d3c:	4b32      	ldr	r3, [pc, #200]	; (4e08 <getSelectorConfig+0x114>)
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	9a03      	ldr	r2, [sp, #12]
    4d42:	320d      	adds	r2, #13
    4d44:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d48:	9a01      	ldr	r2, [sp, #4]
    4d4a:	429a      	cmp	r2, r3
    4d4c:	d107      	bne.n	4d5e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d4e:	4b2e      	ldr	r3, [pc, #184]	; (4e08 <getSelectorConfig+0x114>)
    4d50:	681a      	ldr	r2, [r3, #0]
    4d52:	9b03      	ldr	r3, [sp, #12]
    4d54:	330d      	adds	r3, #13
    4d56:	00db      	lsls	r3, r3, #3
    4d58:	4413      	add	r3, r2
    4d5a:	9305      	str	r3, [sp, #20]
                break;
    4d5c:	e009      	b.n	4d72 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d5e:	9b03      	ldr	r3, [sp, #12]
    4d60:	3301      	adds	r3, #1
    4d62:	9303      	str	r3, [sp, #12]
    4d64:	4b28      	ldr	r3, [pc, #160]	; (4e08 <getSelectorConfig+0x114>)
    4d66:	681b      	ldr	r3, [r3, #0]
    4d68:	7adb      	ldrb	r3, [r3, #11]
    4d6a:	461a      	mov	r2, r3
    4d6c:	9b03      	ldr	r3, [sp, #12]
    4d6e:	4293      	cmp	r3, r2
    4d70:	d3e4      	bcc.n	4d3c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d72:	9b05      	ldr	r3, [sp, #20]
    4d74:	2b00      	cmp	r3, #0
    4d76:	d140      	bne.n	4dfa <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d78:	9b04      	ldr	r3, [sp, #16]
    4d7a:	00db      	lsls	r3, r3, #3
    4d7c:	4a23      	ldr	r2, [pc, #140]	; (4e0c <getSelectorConfig+0x118>)
    4d7e:	4413      	add	r3, r2
    4d80:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d82:	4922      	ldr	r1, [pc, #136]	; (4e0c <getSelectorConfig+0x118>)
    4d84:	9b04      	ldr	r3, [sp, #16]
    4d86:	9a01      	ldr	r2, [sp, #4]
    4d88:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d8c:	9b01      	ldr	r3, [sp, #4]
    4d8e:	2b1b      	cmp	r3, #27
    4d90:	d025      	beq.n	4dde <getSelectorConfig+0xea>
    4d92:	9b01      	ldr	r3, [sp, #4]
    4d94:	2b1b      	cmp	r3, #27
    4d96:	d832      	bhi.n	4dfe <getSelectorConfig+0x10a>
    4d98:	9b01      	ldr	r3, [sp, #4]
    4d9a:	2b19      	cmp	r3, #25
    4d9c:	d003      	beq.n	4da6 <getSelectorConfig+0xb2>
    4d9e:	9b01      	ldr	r3, [sp, #4]
    4da0:	2b1a      	cmp	r3, #26
    4da2:	d00e      	beq.n	4dc2 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4da4:	e02b      	b.n	4dfe <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4da6:	4b1a      	ldr	r3, [pc, #104]	; (4e10 <getSelectorConfig+0x11c>)
    4da8:	695b      	ldr	r3, [r3, #20]
    4daa:	0e1b      	lsrs	r3, r3, #24
    4dac:	f003 030f 	and.w	r3, r3, #15
    4db0:	4a18      	ldr	r2, [pc, #96]	; (4e14 <getSelectorConfig+0x120>)
    4db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4db6:	4915      	ldr	r1, [pc, #84]	; (4e0c <getSelectorConfig+0x118>)
    4db8:	9b04      	ldr	r3, [sp, #16]
    4dba:	00db      	lsls	r3, r3, #3
    4dbc:	440b      	add	r3, r1
    4dbe:	605a      	str	r2, [r3, #4]
                break;
    4dc0:	e01e      	b.n	4e00 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4dc2:	4b13      	ldr	r3, [pc, #76]	; (4e10 <getSelectorConfig+0x11c>)
    4dc4:	699b      	ldr	r3, [r3, #24]
    4dc6:	0e1b      	lsrs	r3, r3, #24
    4dc8:	f003 030f 	and.w	r3, r3, #15
    4dcc:	4a11      	ldr	r2, [pc, #68]	; (4e14 <getSelectorConfig+0x120>)
    4dce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dd2:	490e      	ldr	r1, [pc, #56]	; (4e0c <getSelectorConfig+0x118>)
    4dd4:	9b04      	ldr	r3, [sp, #16]
    4dd6:	00db      	lsls	r3, r3, #3
    4dd8:	440b      	add	r3, r1
    4dda:	605a      	str	r2, [r3, #4]
                break;
    4ddc:	e010      	b.n	4e00 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4dde:	4b0c      	ldr	r3, [pc, #48]	; (4e10 <getSelectorConfig+0x11c>)
    4de0:	69db      	ldr	r3, [r3, #28]
    4de2:	0e1b      	lsrs	r3, r3, #24
    4de4:	f003 030f 	and.w	r3, r3, #15
    4de8:	4a0a      	ldr	r2, [pc, #40]	; (4e14 <getSelectorConfig+0x120>)
    4dea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dee:	4907      	ldr	r1, [pc, #28]	; (4e0c <getSelectorConfig+0x118>)
    4df0:	9b04      	ldr	r3, [sp, #16]
    4df2:	00db      	lsls	r3, r3, #3
    4df4:	440b      	add	r3, r1
    4df6:	605a      	str	r2, [r3, #4]
                break;
    4df8:	e002      	b.n	4e00 <getSelectorConfig+0x10c>
        }
    }
    4dfa:	bf00      	nop
    4dfc:	e000      	b.n	4e00 <getSelectorConfig+0x10c>
                break;
    4dfe:	bf00      	nop

    return ReturnValue;
    4e00:	9b05      	ldr	r3, [sp, #20]
}
    4e02:	4618      	mov	r0, r3
    4e04:	b006      	add	sp, #24
    4e06:	4770      	bx	lr
    4e08:	1fff8ba8 	.word	0x1fff8ba8
    4e0c:	1fff8c5c 	.word	0x1fff8c5c
    4e10:	40064000 	.word	0x40064000
    4e14:	00015138 	.word	0x00015138

00004e18 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e18:	b086      	sub	sp, #24
    4e1a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e1c:	2300      	movs	r3, #0
    4e1e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e20:	2300      	movs	r3, #0
    4e22:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e24:	9b01      	ldr	r3, [sp, #4]
    4e26:	2b1f      	cmp	r3, #31
    4e28:	d00f      	beq.n	4e4a <getCoreDividerConfig+0x32>
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	2b1f      	cmp	r3, #31
    4e2e:	d80f      	bhi.n	4e50 <getCoreDividerConfig+0x38>
    4e30:	9b01      	ldr	r3, [sp, #4]
    4e32:	2b1d      	cmp	r3, #29
    4e34:	d003      	beq.n	4e3e <getCoreDividerConfig+0x26>
    4e36:	9b01      	ldr	r3, [sp, #4]
    4e38:	2b1e      	cmp	r3, #30
    4e3a:	d003      	beq.n	4e44 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e3c:	e008      	b.n	4e50 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e3e:	2300      	movs	r3, #0
    4e40:	9304      	str	r3, [sp, #16]
            break;
    4e42:	e006      	b.n	4e52 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e44:	2301      	movs	r3, #1
    4e46:	9304      	str	r3, [sp, #16]
            break;
    4e48:	e003      	b.n	4e52 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e4a:	2302      	movs	r3, #2
    4e4c:	9304      	str	r3, [sp, #16]
            break;
    4e4e:	e000      	b.n	4e52 <getCoreDividerConfig+0x3a>
                break;
    4e50:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e52:	4b41      	ldr	r3, [pc, #260]	; (4f58 <getCoreDividerConfig+0x140>)
    4e54:	681b      	ldr	r3, [r3, #0]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d026      	beq.n	4ea8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e5a:	2300      	movs	r3, #0
    4e5c:	9303      	str	r3, [sp, #12]
    4e5e:	e01c      	b.n	4e9a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e60:	4b3d      	ldr	r3, [pc, #244]	; (4f58 <getCoreDividerConfig+0x140>)
    4e62:	6819      	ldr	r1, [r3, #0]
    4e64:	9a03      	ldr	r2, [sp, #12]
    4e66:	4613      	mov	r3, r2
    4e68:	005b      	lsls	r3, r3, #1
    4e6a:	4413      	add	r3, r2
    4e6c:	009b      	lsls	r3, r3, #2
    4e6e:	440b      	add	r3, r1
    4e70:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	9a01      	ldr	r2, [sp, #4]
    4e78:	429a      	cmp	r2, r3
    4e7a:	d10b      	bne.n	4e94 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e7c:	4b36      	ldr	r3, [pc, #216]	; (4f58 <getCoreDividerConfig+0x140>)
    4e7e:	6819      	ldr	r1, [r3, #0]
    4e80:	9a03      	ldr	r2, [sp, #12]
    4e82:	4613      	mov	r3, r2
    4e84:	005b      	lsls	r3, r3, #1
    4e86:	4413      	add	r3, r2
    4e88:	009b      	lsls	r3, r3, #2
    4e8a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e8e:	440b      	add	r3, r1
    4e90:	9305      	str	r3, [sp, #20]
                break;
    4e92:	e009      	b.n	4ea8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e94:	9b03      	ldr	r3, [sp, #12]
    4e96:	3301      	adds	r3, #1
    4e98:	9303      	str	r3, [sp, #12]
    4e9a:	4b2f      	ldr	r3, [pc, #188]	; (4f58 <getCoreDividerConfig+0x140>)
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	7b1b      	ldrb	r3, [r3, #12]
    4ea0:	461a      	mov	r2, r3
    4ea2:	9b03      	ldr	r3, [sp, #12]
    4ea4:	4293      	cmp	r3, r2
    4ea6:	d3db      	bcc.n	4e60 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ea8:	9b05      	ldr	r3, [sp, #20]
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d14d      	bne.n	4f4a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4eae:	9a04      	ldr	r2, [sp, #16]
    4eb0:	4613      	mov	r3, r2
    4eb2:	005b      	lsls	r3, r3, #1
    4eb4:	4413      	add	r3, r2
    4eb6:	009b      	lsls	r3, r3, #2
    4eb8:	4a28      	ldr	r2, [pc, #160]	; (4f5c <getCoreDividerConfig+0x144>)
    4eba:	4413      	add	r3, r2
    4ebc:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4ebe:	4927      	ldr	r1, [pc, #156]	; (4f5c <getCoreDividerConfig+0x144>)
    4ec0:	9a04      	ldr	r2, [sp, #16]
    4ec2:	4613      	mov	r3, r2
    4ec4:	005b      	lsls	r3, r3, #1
    4ec6:	4413      	add	r3, r2
    4ec8:	009b      	lsls	r3, r3, #2
    4eca:	440b      	add	r3, r1
    4ecc:	9a01      	ldr	r2, [sp, #4]
    4ece:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ed0:	9b01      	ldr	r3, [sp, #4]
    4ed2:	2b1f      	cmp	r3, #31
    4ed4:	d029      	beq.n	4f2a <getCoreDividerConfig+0x112>
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	2b1f      	cmp	r3, #31
    4eda:	d838      	bhi.n	4f4e <getCoreDividerConfig+0x136>
    4edc:	9b01      	ldr	r3, [sp, #4]
    4ede:	2b1d      	cmp	r3, #29
    4ee0:	d003      	beq.n	4eea <getCoreDividerConfig+0xd2>
    4ee2:	9b01      	ldr	r3, [sp, #4]
    4ee4:	2b1e      	cmp	r3, #30
    4ee6:	d010      	beq.n	4f0a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ee8:	e031      	b.n	4f4e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4eea:	4b1d      	ldr	r3, [pc, #116]	; (4f60 <getCoreDividerConfig+0x148>)
    4eec:	695b      	ldr	r3, [r3, #20]
    4eee:	0c1b      	lsrs	r3, r3, #16
    4ef0:	f003 030f 	and.w	r3, r3, #15
    4ef4:	1c59      	adds	r1, r3, #1
    4ef6:	4819      	ldr	r0, [pc, #100]	; (4f5c <getCoreDividerConfig+0x144>)
    4ef8:	9a04      	ldr	r2, [sp, #16]
    4efa:	4613      	mov	r3, r2
    4efc:	005b      	lsls	r3, r3, #1
    4efe:	4413      	add	r3, r2
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	4403      	add	r3, r0
    4f04:	3304      	adds	r3, #4
    4f06:	6019      	str	r1, [r3, #0]
                break;
    4f08:	e022      	b.n	4f50 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4f0a:	4b15      	ldr	r3, [pc, #84]	; (4f60 <getCoreDividerConfig+0x148>)
    4f0c:	699b      	ldr	r3, [r3, #24]
    4f0e:	0c1b      	lsrs	r3, r3, #16
    4f10:	f003 030f 	and.w	r3, r3, #15
    4f14:	1c59      	adds	r1, r3, #1
    4f16:	4811      	ldr	r0, [pc, #68]	; (4f5c <getCoreDividerConfig+0x144>)
    4f18:	9a04      	ldr	r2, [sp, #16]
    4f1a:	4613      	mov	r3, r2
    4f1c:	005b      	lsls	r3, r3, #1
    4f1e:	4413      	add	r3, r2
    4f20:	009b      	lsls	r3, r3, #2
    4f22:	4403      	add	r3, r0
    4f24:	3304      	adds	r3, #4
    4f26:	6019      	str	r1, [r3, #0]
                break;
    4f28:	e012      	b.n	4f50 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f2a:	4b0d      	ldr	r3, [pc, #52]	; (4f60 <getCoreDividerConfig+0x148>)
    4f2c:	69db      	ldr	r3, [r3, #28]
    4f2e:	0c1b      	lsrs	r3, r3, #16
    4f30:	f003 030f 	and.w	r3, r3, #15
    4f34:	1c59      	adds	r1, r3, #1
    4f36:	4809      	ldr	r0, [pc, #36]	; (4f5c <getCoreDividerConfig+0x144>)
    4f38:	9a04      	ldr	r2, [sp, #16]
    4f3a:	4613      	mov	r3, r2
    4f3c:	005b      	lsls	r3, r3, #1
    4f3e:	4413      	add	r3, r2
    4f40:	009b      	lsls	r3, r3, #2
    4f42:	4403      	add	r3, r0
    4f44:	3304      	adds	r3, #4
    4f46:	6019      	str	r1, [r3, #0]
                break;
    4f48:	e002      	b.n	4f50 <getCoreDividerConfig+0x138>
        }
    }
    4f4a:	bf00      	nop
    4f4c:	e000      	b.n	4f50 <getCoreDividerConfig+0x138>
                break;
    4f4e:	bf00      	nop

    return ReturnValue;
    4f50:	9b05      	ldr	r3, [sp, #20]
}
    4f52:	4618      	mov	r0, r3
    4f54:	b006      	add	sp, #24
    4f56:	4770      	bx	lr
    4f58:	1fff8ba8 	.word	0x1fff8ba8
    4f5c:	1fff8c74 	.word	0x1fff8c74
    4f60:	40064000 	.word	0x40064000

00004f64 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f64:	b086      	sub	sp, #24
    4f66:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f68:	2300      	movs	r3, #0
    4f6a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f6c:	2300      	movs	r3, #0
    4f6e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f70:	9b01      	ldr	r3, [sp, #4]
    4f72:	2b23      	cmp	r3, #35	; 0x23
    4f74:	d00f      	beq.n	4f96 <getBusDividerConfig+0x32>
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	2b23      	cmp	r3, #35	; 0x23
    4f7a:	d80f      	bhi.n	4f9c <getBusDividerConfig+0x38>
    4f7c:	9b01      	ldr	r3, [sp, #4]
    4f7e:	2b21      	cmp	r3, #33	; 0x21
    4f80:	d003      	beq.n	4f8a <getBusDividerConfig+0x26>
    4f82:	9b01      	ldr	r3, [sp, #4]
    4f84:	2b22      	cmp	r3, #34	; 0x22
    4f86:	d003      	beq.n	4f90 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f88:	e008      	b.n	4f9c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f8a:	2300      	movs	r3, #0
    4f8c:	9304      	str	r3, [sp, #16]
            break;
    4f8e:	e006      	b.n	4f9e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f90:	2301      	movs	r3, #1
    4f92:	9304      	str	r3, [sp, #16]
            break;
    4f94:	e003      	b.n	4f9e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f96:	2302      	movs	r3, #2
    4f98:	9304      	str	r3, [sp, #16]
            break;
    4f9a:	e000      	b.n	4f9e <getBusDividerConfig+0x3a>
                break;
    4f9c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f9e:	4b41      	ldr	r3, [pc, #260]	; (50a4 <getBusDividerConfig+0x140>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d026      	beq.n	4ff4 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fa6:	2300      	movs	r3, #0
    4fa8:	9303      	str	r3, [sp, #12]
    4faa:	e01c      	b.n	4fe6 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4fac:	4b3d      	ldr	r3, [pc, #244]	; (50a4 <getBusDividerConfig+0x140>)
    4fae:	6819      	ldr	r1, [r3, #0]
    4fb0:	9a03      	ldr	r2, [sp, #12]
    4fb2:	4613      	mov	r3, r2
    4fb4:	005b      	lsls	r3, r3, #1
    4fb6:	4413      	add	r3, r2
    4fb8:	009b      	lsls	r3, r3, #2
    4fba:	440b      	add	r3, r1
    4fbc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	9a01      	ldr	r2, [sp, #4]
    4fc4:	429a      	cmp	r2, r3
    4fc6:	d10b      	bne.n	4fe0 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fc8:	4b36      	ldr	r3, [pc, #216]	; (50a4 <getBusDividerConfig+0x140>)
    4fca:	6819      	ldr	r1, [r3, #0]
    4fcc:	9a03      	ldr	r2, [sp, #12]
    4fce:	4613      	mov	r3, r2
    4fd0:	005b      	lsls	r3, r3, #1
    4fd2:	4413      	add	r3, r2
    4fd4:	009b      	lsls	r3, r3, #2
    4fd6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fda:	440b      	add	r3, r1
    4fdc:	9305      	str	r3, [sp, #20]
                break;
    4fde:	e009      	b.n	4ff4 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fe0:	9b03      	ldr	r3, [sp, #12]
    4fe2:	3301      	adds	r3, #1
    4fe4:	9303      	str	r3, [sp, #12]
    4fe6:	4b2f      	ldr	r3, [pc, #188]	; (50a4 <getBusDividerConfig+0x140>)
    4fe8:	681b      	ldr	r3, [r3, #0]
    4fea:	7b1b      	ldrb	r3, [r3, #12]
    4fec:	461a      	mov	r2, r3
    4fee:	9b03      	ldr	r3, [sp, #12]
    4ff0:	4293      	cmp	r3, r2
    4ff2:	d3db      	bcc.n	4fac <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ff4:	9b05      	ldr	r3, [sp, #20]
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d14d      	bne.n	5096 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4ffa:	9a04      	ldr	r2, [sp, #16]
    4ffc:	4613      	mov	r3, r2
    4ffe:	005b      	lsls	r3, r3, #1
    5000:	4413      	add	r3, r2
    5002:	009b      	lsls	r3, r3, #2
    5004:	4a28      	ldr	r2, [pc, #160]	; (50a8 <getBusDividerConfig+0x144>)
    5006:	4413      	add	r3, r2
    5008:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    500a:	4927      	ldr	r1, [pc, #156]	; (50a8 <getBusDividerConfig+0x144>)
    500c:	9a04      	ldr	r2, [sp, #16]
    500e:	4613      	mov	r3, r2
    5010:	005b      	lsls	r3, r3, #1
    5012:	4413      	add	r3, r2
    5014:	009b      	lsls	r3, r3, #2
    5016:	440b      	add	r3, r1
    5018:	9a01      	ldr	r2, [sp, #4]
    501a:	601a      	str	r2, [r3, #0]
        switch(Name)
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	2b23      	cmp	r3, #35	; 0x23
    5020:	d029      	beq.n	5076 <getBusDividerConfig+0x112>
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	2b23      	cmp	r3, #35	; 0x23
    5026:	d838      	bhi.n	509a <getBusDividerConfig+0x136>
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	2b21      	cmp	r3, #33	; 0x21
    502c:	d003      	beq.n	5036 <getBusDividerConfig+0xd2>
    502e:	9b01      	ldr	r3, [sp, #4]
    5030:	2b22      	cmp	r3, #34	; 0x22
    5032:	d010      	beq.n	5056 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5034:	e031      	b.n	509a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5036:	4b1d      	ldr	r3, [pc, #116]	; (50ac <getBusDividerConfig+0x148>)
    5038:	695b      	ldr	r3, [r3, #20]
    503a:	091b      	lsrs	r3, r3, #4
    503c:	f003 030f 	and.w	r3, r3, #15
    5040:	1c59      	adds	r1, r3, #1
    5042:	4819      	ldr	r0, [pc, #100]	; (50a8 <getBusDividerConfig+0x144>)
    5044:	9a04      	ldr	r2, [sp, #16]
    5046:	4613      	mov	r3, r2
    5048:	005b      	lsls	r3, r3, #1
    504a:	4413      	add	r3, r2
    504c:	009b      	lsls	r3, r3, #2
    504e:	4403      	add	r3, r0
    5050:	3304      	adds	r3, #4
    5052:	6019      	str	r1, [r3, #0]
                break;
    5054:	e022      	b.n	509c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5056:	4b15      	ldr	r3, [pc, #84]	; (50ac <getBusDividerConfig+0x148>)
    5058:	699b      	ldr	r3, [r3, #24]
    505a:	091b      	lsrs	r3, r3, #4
    505c:	f003 030f 	and.w	r3, r3, #15
    5060:	1c59      	adds	r1, r3, #1
    5062:	4811      	ldr	r0, [pc, #68]	; (50a8 <getBusDividerConfig+0x144>)
    5064:	9a04      	ldr	r2, [sp, #16]
    5066:	4613      	mov	r3, r2
    5068:	005b      	lsls	r3, r3, #1
    506a:	4413      	add	r3, r2
    506c:	009b      	lsls	r3, r3, #2
    506e:	4403      	add	r3, r0
    5070:	3304      	adds	r3, #4
    5072:	6019      	str	r1, [r3, #0]
                break;
    5074:	e012      	b.n	509c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5076:	4b0d      	ldr	r3, [pc, #52]	; (50ac <getBusDividerConfig+0x148>)
    5078:	69db      	ldr	r3, [r3, #28]
    507a:	091b      	lsrs	r3, r3, #4
    507c:	f003 030f 	and.w	r3, r3, #15
    5080:	1c59      	adds	r1, r3, #1
    5082:	4809      	ldr	r0, [pc, #36]	; (50a8 <getBusDividerConfig+0x144>)
    5084:	9a04      	ldr	r2, [sp, #16]
    5086:	4613      	mov	r3, r2
    5088:	005b      	lsls	r3, r3, #1
    508a:	4413      	add	r3, r2
    508c:	009b      	lsls	r3, r3, #2
    508e:	4403      	add	r3, r0
    5090:	3304      	adds	r3, #4
    5092:	6019      	str	r1, [r3, #0]
                break;
    5094:	e002      	b.n	509c <getBusDividerConfig+0x138>
        }
    }
    5096:	bf00      	nop
    5098:	e000      	b.n	509c <getBusDividerConfig+0x138>
                break;
    509a:	bf00      	nop

    return ReturnValue;
    509c:	9b05      	ldr	r3, [sp, #20]
}
    509e:	4618      	mov	r0, r3
    50a0:	b006      	add	sp, #24
    50a2:	4770      	bx	lr
    50a4:	1fff8ba8 	.word	0x1fff8ba8
    50a8:	1fff8c98 	.word	0x1fff8c98
    50ac:	40064000 	.word	0x40064000

000050b0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    50b0:	b086      	sub	sp, #24
    50b2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50b4:	2300      	movs	r3, #0
    50b6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50b8:	2300      	movs	r3, #0
    50ba:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	2b27      	cmp	r3, #39	; 0x27
    50c0:	d00f      	beq.n	50e2 <getSlowDividerConfig+0x32>
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	2b27      	cmp	r3, #39	; 0x27
    50c6:	d80f      	bhi.n	50e8 <getSlowDividerConfig+0x38>
    50c8:	9b01      	ldr	r3, [sp, #4]
    50ca:	2b25      	cmp	r3, #37	; 0x25
    50cc:	d003      	beq.n	50d6 <getSlowDividerConfig+0x26>
    50ce:	9b01      	ldr	r3, [sp, #4]
    50d0:	2b26      	cmp	r3, #38	; 0x26
    50d2:	d003      	beq.n	50dc <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50d4:	e008      	b.n	50e8 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50d6:	2300      	movs	r3, #0
    50d8:	9304      	str	r3, [sp, #16]
            break;
    50da:	e006      	b.n	50ea <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50dc:	2301      	movs	r3, #1
    50de:	9304      	str	r3, [sp, #16]
            break;
    50e0:	e003      	b.n	50ea <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50e2:	2302      	movs	r3, #2
    50e4:	9304      	str	r3, [sp, #16]
            break;
    50e6:	e000      	b.n	50ea <getSlowDividerConfig+0x3a>
                break;
    50e8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50ea:	4b40      	ldr	r3, [pc, #256]	; (51ec <getSlowDividerConfig+0x13c>)
    50ec:	681b      	ldr	r3, [r3, #0]
    50ee:	2b00      	cmp	r3, #0
    50f0:	d026      	beq.n	5140 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50f2:	2300      	movs	r3, #0
    50f4:	9303      	str	r3, [sp, #12]
    50f6:	e01c      	b.n	5132 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50f8:	4b3c      	ldr	r3, [pc, #240]	; (51ec <getSlowDividerConfig+0x13c>)
    50fa:	6819      	ldr	r1, [r3, #0]
    50fc:	9a03      	ldr	r2, [sp, #12]
    50fe:	4613      	mov	r3, r2
    5100:	005b      	lsls	r3, r3, #1
    5102:	4413      	add	r3, r2
    5104:	009b      	lsls	r3, r3, #2
    5106:	440b      	add	r3, r1
    5108:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	9a01      	ldr	r2, [sp, #4]
    5110:	429a      	cmp	r2, r3
    5112:	d10b      	bne.n	512c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5114:	4b35      	ldr	r3, [pc, #212]	; (51ec <getSlowDividerConfig+0x13c>)
    5116:	6819      	ldr	r1, [r3, #0]
    5118:	9a03      	ldr	r2, [sp, #12]
    511a:	4613      	mov	r3, r2
    511c:	005b      	lsls	r3, r3, #1
    511e:	4413      	add	r3, r2
    5120:	009b      	lsls	r3, r3, #2
    5122:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5126:	440b      	add	r3, r1
    5128:	9305      	str	r3, [sp, #20]
                break;
    512a:	e009      	b.n	5140 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    512c:	9b03      	ldr	r3, [sp, #12]
    512e:	3301      	adds	r3, #1
    5130:	9303      	str	r3, [sp, #12]
    5132:	4b2e      	ldr	r3, [pc, #184]	; (51ec <getSlowDividerConfig+0x13c>)
    5134:	681b      	ldr	r3, [r3, #0]
    5136:	7b1b      	ldrb	r3, [r3, #12]
    5138:	461a      	mov	r2, r3
    513a:	9b03      	ldr	r3, [sp, #12]
    513c:	4293      	cmp	r3, r2
    513e:	d3db      	bcc.n	50f8 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5140:	9b05      	ldr	r3, [sp, #20]
    5142:	2b00      	cmp	r3, #0
    5144:	d14a      	bne.n	51dc <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5146:	9a04      	ldr	r2, [sp, #16]
    5148:	4613      	mov	r3, r2
    514a:	005b      	lsls	r3, r3, #1
    514c:	4413      	add	r3, r2
    514e:	009b      	lsls	r3, r3, #2
    5150:	4a27      	ldr	r2, [pc, #156]	; (51f0 <getSlowDividerConfig+0x140>)
    5152:	4413      	add	r3, r2
    5154:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5156:	4926      	ldr	r1, [pc, #152]	; (51f0 <getSlowDividerConfig+0x140>)
    5158:	9a04      	ldr	r2, [sp, #16]
    515a:	4613      	mov	r3, r2
    515c:	005b      	lsls	r3, r3, #1
    515e:	4413      	add	r3, r2
    5160:	009b      	lsls	r3, r3, #2
    5162:	440b      	add	r3, r1
    5164:	9a01      	ldr	r2, [sp, #4]
    5166:	601a      	str	r2, [r3, #0]
        switch(Name)
    5168:	9b01      	ldr	r3, [sp, #4]
    516a:	2b27      	cmp	r3, #39	; 0x27
    516c:	d027      	beq.n	51be <getSlowDividerConfig+0x10e>
    516e:	9b01      	ldr	r3, [sp, #4]
    5170:	2b27      	cmp	r3, #39	; 0x27
    5172:	d835      	bhi.n	51e0 <getSlowDividerConfig+0x130>
    5174:	9b01      	ldr	r3, [sp, #4]
    5176:	2b25      	cmp	r3, #37	; 0x25
    5178:	d003      	beq.n	5182 <getSlowDividerConfig+0xd2>
    517a:	9b01      	ldr	r3, [sp, #4]
    517c:	2b26      	cmp	r3, #38	; 0x26
    517e:	d00f      	beq.n	51a0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5180:	e02e      	b.n	51e0 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5182:	4b1c      	ldr	r3, [pc, #112]	; (51f4 <getSlowDividerConfig+0x144>)
    5184:	695b      	ldr	r3, [r3, #20]
    5186:	f003 030f 	and.w	r3, r3, #15
    518a:	1c59      	adds	r1, r3, #1
    518c:	4818      	ldr	r0, [pc, #96]	; (51f0 <getSlowDividerConfig+0x140>)
    518e:	9a04      	ldr	r2, [sp, #16]
    5190:	4613      	mov	r3, r2
    5192:	005b      	lsls	r3, r3, #1
    5194:	4413      	add	r3, r2
    5196:	009b      	lsls	r3, r3, #2
    5198:	4403      	add	r3, r0
    519a:	3304      	adds	r3, #4
    519c:	6019      	str	r1, [r3, #0]
                break;
    519e:	e020      	b.n	51e2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    51a0:	4b14      	ldr	r3, [pc, #80]	; (51f4 <getSlowDividerConfig+0x144>)
    51a2:	699b      	ldr	r3, [r3, #24]
    51a4:	f003 030f 	and.w	r3, r3, #15
    51a8:	1c59      	adds	r1, r3, #1
    51aa:	4811      	ldr	r0, [pc, #68]	; (51f0 <getSlowDividerConfig+0x140>)
    51ac:	9a04      	ldr	r2, [sp, #16]
    51ae:	4613      	mov	r3, r2
    51b0:	005b      	lsls	r3, r3, #1
    51b2:	4413      	add	r3, r2
    51b4:	009b      	lsls	r3, r3, #2
    51b6:	4403      	add	r3, r0
    51b8:	3304      	adds	r3, #4
    51ba:	6019      	str	r1, [r3, #0]
                break;
    51bc:	e011      	b.n	51e2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    51be:	4b0d      	ldr	r3, [pc, #52]	; (51f4 <getSlowDividerConfig+0x144>)
    51c0:	69db      	ldr	r3, [r3, #28]
    51c2:	f003 030f 	and.w	r3, r3, #15
    51c6:	1c59      	adds	r1, r3, #1
    51c8:	4809      	ldr	r0, [pc, #36]	; (51f0 <getSlowDividerConfig+0x140>)
    51ca:	9a04      	ldr	r2, [sp, #16]
    51cc:	4613      	mov	r3, r2
    51ce:	005b      	lsls	r3, r3, #1
    51d0:	4413      	add	r3, r2
    51d2:	009b      	lsls	r3, r3, #2
    51d4:	4403      	add	r3, r0
    51d6:	3304      	adds	r3, #4
    51d8:	6019      	str	r1, [r3, #0]
                break;
    51da:	e002      	b.n	51e2 <getSlowDividerConfig+0x132>
        }
    }
    51dc:	bf00      	nop
    51de:	e000      	b.n	51e2 <getSlowDividerConfig+0x132>
                break;
    51e0:	bf00      	nop

    return ReturnValue;
    51e2:	9b05      	ldr	r3, [sp, #20]
}
    51e4:	4618      	mov	r0, r3
    51e6:	b006      	add	sp, #24
    51e8:	4770      	bx	lr
    51ea:	bf00      	nop
    51ec:	1fff8ba8 	.word	0x1fff8ba8
    51f0:	1fff8cbc 	.word	0x1fff8cbc
    51f4:	40064000 	.word	0x40064000

000051f8 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    51f8:	b500      	push	{lr}
    51fa:	b083      	sub	sp, #12
    51fc:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    51fe:	4b64      	ldr	r3, [pc, #400]	; (5390 <Clock_Ip_ClockInitializeObjects+0x198>)
    5200:	781b      	ldrb	r3, [r3, #0]
    5202:	f083 0301 	eor.w	r3, r3, #1
    5206:	b2db      	uxtb	r3, r3
    5208:	2b00      	cmp	r3, #0
    520a:	d05b      	beq.n	52c4 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    520c:	4b60      	ldr	r3, [pc, #384]	; (5390 <Clock_Ip_ClockInitializeObjects+0x198>)
    520e:	2201      	movs	r2, #1
    5210:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5212:	4b60      	ldr	r3, [pc, #384]	; (5394 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5214:	785b      	ldrb	r3, [r3, #1]
    5216:	461a      	mov	r2, r3
    5218:	4613      	mov	r3, r2
    521a:	009b      	lsls	r3, r3, #2
    521c:	4413      	add	r3, r2
    521e:	009b      	lsls	r3, r3, #2
    5220:	4a5d      	ldr	r2, [pc, #372]	; (5398 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5222:	4413      	add	r3, r2
    5224:	4a5d      	ldr	r2, [pc, #372]	; (539c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5226:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5228:	4b5d      	ldr	r3, [pc, #372]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    522a:	785b      	ldrb	r3, [r3, #1]
    522c:	461a      	mov	r2, r3
    522e:	4613      	mov	r3, r2
    5230:	009b      	lsls	r3, r3, #2
    5232:	4413      	add	r3, r2
    5234:	009b      	lsls	r3, r3, #2
    5236:	4a5b      	ldr	r2, [pc, #364]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5238:	4413      	add	r3, r2
    523a:	4a5b      	ldr	r2, [pc, #364]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    523c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    523e:	4b5b      	ldr	r3, [pc, #364]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5240:	791b      	ldrb	r3, [r3, #4]
    5242:	461a      	mov	r2, r3
    5244:	4613      	mov	r3, r2
    5246:	005b      	lsls	r3, r3, #1
    5248:	4413      	add	r3, r2
    524a:	009b      	lsls	r3, r3, #2
    524c:	4a58      	ldr	r2, [pc, #352]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    524e:	4413      	add	r3, r2
    5250:	4a58      	ldr	r2, [pc, #352]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5252:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5254:	4b58      	ldr	r3, [pc, #352]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5256:	795b      	ldrb	r3, [r3, #5]
    5258:	00db      	lsls	r3, r3, #3
    525a:	4a58      	ldr	r2, [pc, #352]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    525c:	4413      	add	r3, r2
    525e:	4a58      	ldr	r2, [pc, #352]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5260:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5262:	4b55      	ldr	r3, [pc, #340]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5264:	79db      	ldrb	r3, [r3, #7]
    5266:	00db      	lsls	r3, r3, #3
    5268:	4a54      	ldr	r2, [pc, #336]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1c4>)
    526a:	4413      	add	r3, r2
    526c:	4a55      	ldr	r2, [pc, #340]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    526e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5270:	4b55      	ldr	r3, [pc, #340]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5272:	799b      	ldrb	r3, [r3, #6]
    5274:	009b      	lsls	r3, r3, #2
    5276:	4a55      	ldr	r2, [pc, #340]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5278:	4413      	add	r3, r2
    527a:	4a55      	ldr	r2, [pc, #340]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    527c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    527e:	4b52      	ldr	r3, [pc, #328]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5280:	7a1b      	ldrb	r3, [r3, #8]
    5282:	009b      	lsls	r3, r3, #2
    5284:	4a51      	ldr	r2, [pc, #324]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5286:	4413      	add	r3, r2
    5288:	4a52      	ldr	r2, [pc, #328]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    528a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    528c:	4b4e      	ldr	r3, [pc, #312]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    528e:	7a5b      	ldrb	r3, [r3, #9]
    5290:	009b      	lsls	r3, r3, #2
    5292:	4a4e      	ldr	r2, [pc, #312]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5294:	4413      	add	r3, r2
    5296:	4a50      	ldr	r2, [pc, #320]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5298:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    529a:	4b4b      	ldr	r3, [pc, #300]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    529c:	7adb      	ldrb	r3, [r3, #11]
    529e:	009b      	lsls	r3, r3, #2
    52a0:	4a4a      	ldr	r2, [pc, #296]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52a2:	4413      	add	r3, r2
    52a4:	4a4d      	ldr	r2, [pc, #308]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1e4>)
    52a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    52a8:	4b47      	ldr	r3, [pc, #284]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52aa:	7b1b      	ldrb	r3, [r3, #12]
    52ac:	009b      	lsls	r3, r3, #2
    52ae:	4a47      	ldr	r2, [pc, #284]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52b0:	4413      	add	r3, r2
    52b2:	4a4b      	ldr	r2, [pc, #300]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52b4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52b6:	4b44      	ldr	r3, [pc, #272]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52b8:	7b9b      	ldrb	r3, [r3, #14]
    52ba:	009b      	lsls	r3, r3, #2
    52bc:	4a43      	ldr	r2, [pc, #268]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52be:	4413      	add	r3, r2
    52c0:	4a48      	ldr	r2, [pc, #288]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    52c2:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    52c4:	4b48      	ldr	r3, [pc, #288]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	2b00      	cmp	r3, #0
    52ca:	d002      	beq.n	52d2 <Clock_Ip_ClockInitializeObjects+0xda>
    52cc:	9b01      	ldr	r3, [sp, #4]
    52ce:	2b00      	cmp	r3, #0
    52d0:	d003      	beq.n	52da <Clock_Ip_ClockInitializeObjects+0xe2>
    52d2:	4b46      	ldr	r3, [pc, #280]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	2b00      	cmp	r3, #0
    52d8:	d056      	beq.n	5388 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52da:	f7ff fc09 	bl	4af0 <getFircConfig>
    52de:	4603      	mov	r3, r0
    52e0:	4a43      	ldr	r2, [pc, #268]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    52e2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    52e4:	f7ff fc60 	bl	4ba8 <getSoscConfig>
    52e8:	4603      	mov	r3, r0
    52ea:	4a42      	ldr	r2, [pc, #264]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    52ec:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    52ee:	f7ff fca7 	bl	4c40 <getSpllConfig>
    52f2:	4603      	mov	r3, r0
    52f4:	4a40      	ldr	r2, [pc, #256]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x200>)
    52f6:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    52f8:	2019      	movs	r0, #25
    52fa:	f7ff fcfb 	bl	4cf4 <getSelectorConfig>
    52fe:	4603      	mov	r3, r0
    5300:	4a3e      	ldr	r2, [pc, #248]	; (53fc <Clock_Ip_ClockInitializeObjects+0x204>)
    5302:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5304:	201a      	movs	r0, #26
    5306:	f7ff fcf5 	bl	4cf4 <getSelectorConfig>
    530a:	4603      	mov	r3, r0
    530c:	4a3c      	ldr	r2, [pc, #240]	; (5400 <Clock_Ip_ClockInitializeObjects+0x208>)
    530e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5310:	201b      	movs	r0, #27
    5312:	f7ff fcef 	bl	4cf4 <getSelectorConfig>
    5316:	4603      	mov	r3, r0
    5318:	4a3a      	ldr	r2, [pc, #232]	; (5404 <Clock_Ip_ClockInitializeObjects+0x20c>)
    531a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    531c:	201d      	movs	r0, #29
    531e:	f7ff fd7b 	bl	4e18 <getCoreDividerConfig>
    5322:	4603      	mov	r3, r0
    5324:	4a38      	ldr	r2, [pc, #224]	; (5408 <Clock_Ip_ClockInitializeObjects+0x210>)
    5326:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5328:	201e      	movs	r0, #30
    532a:	f7ff fd75 	bl	4e18 <getCoreDividerConfig>
    532e:	4603      	mov	r3, r0
    5330:	4a36      	ldr	r2, [pc, #216]	; (540c <Clock_Ip_ClockInitializeObjects+0x214>)
    5332:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5334:	201f      	movs	r0, #31
    5336:	f7ff fd6f 	bl	4e18 <getCoreDividerConfig>
    533a:	4603      	mov	r3, r0
    533c:	4a34      	ldr	r2, [pc, #208]	; (5410 <Clock_Ip_ClockInitializeObjects+0x218>)
    533e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5340:	2021      	movs	r0, #33	; 0x21
    5342:	f7ff fe0f 	bl	4f64 <getBusDividerConfig>
    5346:	4603      	mov	r3, r0
    5348:	4a32      	ldr	r2, [pc, #200]	; (5414 <Clock_Ip_ClockInitializeObjects+0x21c>)
    534a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    534c:	2022      	movs	r0, #34	; 0x22
    534e:	f7ff fe09 	bl	4f64 <getBusDividerConfig>
    5352:	4603      	mov	r3, r0
    5354:	4a30      	ldr	r2, [pc, #192]	; (5418 <Clock_Ip_ClockInitializeObjects+0x220>)
    5356:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5358:	2023      	movs	r0, #35	; 0x23
    535a:	f7ff fe03 	bl	4f64 <getBusDividerConfig>
    535e:	4603      	mov	r3, r0
    5360:	4a2e      	ldr	r2, [pc, #184]	; (541c <Clock_Ip_ClockInitializeObjects+0x224>)
    5362:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5364:	2025      	movs	r0, #37	; 0x25
    5366:	f7ff fea3 	bl	50b0 <getSlowDividerConfig>
    536a:	4603      	mov	r3, r0
    536c:	4a2c      	ldr	r2, [pc, #176]	; (5420 <Clock_Ip_ClockInitializeObjects+0x228>)
    536e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5370:	2026      	movs	r0, #38	; 0x26
    5372:	f7ff fe9d 	bl	50b0 <getSlowDividerConfig>
    5376:	4603      	mov	r3, r0
    5378:	4a2a      	ldr	r2, [pc, #168]	; (5424 <Clock_Ip_ClockInitializeObjects+0x22c>)
    537a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    537c:	2027      	movs	r0, #39	; 0x27
    537e:	f7ff fe97 	bl	50b0 <getSlowDividerConfig>
    5382:	4603      	mov	r3, r0
    5384:	4a28      	ldr	r2, [pc, #160]	; (5428 <Clock_Ip_ClockInitializeObjects+0x230>)
    5386:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5388:	bf00      	nop
    538a:	b003      	add	sp, #12
    538c:	f85d fb04 	ldr.w	pc, [sp], #4
    5390:	1fff8ce0 	.word	0x1fff8ce0
    5394:	00014a68 	.word	0x00014a68
    5398:	000150b4 	.word	0x000150b4
    539c:	1fff8bac 	.word	0x1fff8bac
    53a0:	00014a28 	.word	0x00014a28
    53a4:	00014ffc 	.word	0x00014ffc
    53a8:	1fff8bb0 	.word	0x1fff8bb0
    53ac:	00014a38 	.word	0x00014a38
    53b0:	00015068 	.word	0x00015068
    53b4:	1fff8bb4 	.word	0x1fff8bb4
    53b8:	00014a78 	.word	0x00014a78
    53bc:	000150e0 	.word	0x000150e0
    53c0:	1fff8bb8 	.word	0x1fff8bb8
    53c4:	1fff8bf4 	.word	0x1fff8bf4
    53c8:	00014a08 	.word	0x00014a08
    53cc:	00014fb8 	.word	0x00014fb8
    53d0:	1fff8bbc 	.word	0x1fff8bbc
    53d4:	1fff8bf8 	.word	0x1fff8bf8
    53d8:	1fff8bc0 	.word	0x1fff8bc0
    53dc:	1fff8bfc 	.word	0x1fff8bfc
    53e0:	1fff8bc4 	.word	0x1fff8bc4
    53e4:	1fff8c00 	.word	0x1fff8c00
    53e8:	1fff8b19 	.word	0x1fff8b19
    53ec:	1fff8b10 	.word	0x1fff8b10
    53f0:	1fff8bc8 	.word	0x1fff8bc8
    53f4:	1fff8bcc 	.word	0x1fff8bcc
    53f8:	1fff8bd0 	.word	0x1fff8bd0
    53fc:	1fff8bd4 	.word	0x1fff8bd4
    5400:	1fff8bd8 	.word	0x1fff8bd8
    5404:	1fff8c04 	.word	0x1fff8c04
    5408:	1fff8bdc 	.word	0x1fff8bdc
    540c:	1fff8be0 	.word	0x1fff8be0
    5410:	1fff8c08 	.word	0x1fff8c08
    5414:	1fff8be4 	.word	0x1fff8be4
    5418:	1fff8be8 	.word	0x1fff8be8
    541c:	1fff8c0c 	.word	0x1fff8c0c
    5420:	1fff8bec 	.word	0x1fff8bec
    5424:	1fff8bf0 	.word	0x1fff8bf0
    5428:	1fff8c10 	.word	0x1fff8c10

0000542c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    542c:	b500      	push	{lr}
    542e:	b083      	sub	sp, #12
    5430:	9001      	str	r0, [sp, #4]
    5432:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5434:	9b01      	ldr	r3, [sp, #4]
    5436:	2b03      	cmp	r3, #3
    5438:	f000 8090 	beq.w	555c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    543c:	9b01      	ldr	r3, [sp, #4]
    543e:	2b03      	cmp	r3, #3
    5440:	f200 80d3 	bhi.w	55ea <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5444:	9b01      	ldr	r3, [sp, #4]
    5446:	2b00      	cmp	r3, #0
    5448:	d040      	beq.n	54cc <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    544a:	9b01      	ldr	r3, [sp, #4]
    544c:	3b01      	subs	r3, #1
    544e:	2b01      	cmp	r3, #1
    5450:	f200 80cb 	bhi.w	55ea <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5454:	9b00      	ldr	r3, [sp, #0]
    5456:	2b00      	cmp	r3, #0
    5458:	f040 80c9 	bne.w	55ee <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    545c:	4b68      	ldr	r3, [pc, #416]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    545e:	2200      	movs	r2, #0
    5460:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5462:	4b68      	ldr	r3, [pc, #416]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	685b      	ldr	r3, [r3, #4]
    5468:	4a67      	ldr	r2, [pc, #412]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    546a:	6812      	ldr	r2, [r2, #0]
    546c:	4610      	mov	r0, r2
    546e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5470:	4b66      	ldr	r3, [pc, #408]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	4a66      	ldr	r2, [pc, #408]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5478:	6812      	ldr	r2, [r2, #0]
    547a:	4610      	mov	r0, r2
    547c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    547e:	4b65      	ldr	r3, [pc, #404]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	4a64      	ldr	r2, [pc, #400]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5486:	6812      	ldr	r2, [r2, #0]
    5488:	4610      	mov	r0, r2
    548a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    548c:	4b63      	ldr	r3, [pc, #396]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    548e:	681b      	ldr	r3, [r3, #0]
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	4a63      	ldr	r2, [pc, #396]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5494:	6812      	ldr	r2, [r2, #0]
    5496:	4610      	mov	r0, r2
    5498:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    549a:	4b62      	ldr	r3, [pc, #392]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    549c:	681b      	ldr	r3, [r3, #0]
    549e:	691b      	ldr	r3, [r3, #16]
    54a0:	4a61      	ldr	r2, [pc, #388]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54a2:	6812      	ldr	r2, [r2, #0]
    54a4:	6812      	ldr	r2, [r2, #0]
    54a6:	4610      	mov	r0, r2
    54a8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    54aa:	4b60      	ldr	r3, [pc, #384]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	68db      	ldr	r3, [r3, #12]
    54b0:	4a5f      	ldr	r2, [pc, #380]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54b2:	6812      	ldr	r2, [r2, #0]
    54b4:	6812      	ldr	r2, [r2, #0]
    54b6:	4610      	mov	r0, r2
    54b8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54ba:	4b5e      	ldr	r3, [pc, #376]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	689b      	ldr	r3, [r3, #8]
    54c0:	4a5d      	ldr	r2, [pc, #372]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54c2:	6812      	ldr	r2, [r2, #0]
    54c4:	6812      	ldr	r2, [r2, #0]
    54c6:	4610      	mov	r0, r2
    54c8:	4798      	blx	r3
            }
        }
        break;
    54ca:	e090      	b.n	55ee <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54cc:	9b00      	ldr	r3, [sp, #0]
    54ce:	2b02      	cmp	r3, #2
    54d0:	f040 808f 	bne.w	55f2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54d4:	4b4a      	ldr	r3, [pc, #296]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54d6:	2201      	movs	r2, #1
    54d8:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54da:	4b56      	ldr	r3, [pc, #344]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	685b      	ldr	r3, [r3, #4]
    54e0:	4a55      	ldr	r2, [pc, #340]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54e2:	6812      	ldr	r2, [r2, #0]
    54e4:	4610      	mov	r0, r2
    54e6:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54e8:	4b50      	ldr	r3, [pc, #320]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	691b      	ldr	r3, [r3, #16]
    54ee:	4a50      	ldr	r2, [pc, #320]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54f0:	6812      	ldr	r2, [r2, #0]
    54f2:	4610      	mov	r0, r2
    54f4:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54f6:	4b4d      	ldr	r3, [pc, #308]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	689b      	ldr	r3, [r3, #8]
    54fc:	4a4c      	ldr	r2, [pc, #304]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54fe:	6812      	ldr	r2, [r2, #0]
    5500:	4610      	mov	r0, r2
    5502:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5504:	4b47      	ldr	r3, [pc, #284]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	68db      	ldr	r3, [r3, #12]
    550a:	4a47      	ldr	r2, [pc, #284]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    550c:	6812      	ldr	r2, [r2, #0]
    550e:	4610      	mov	r0, r2
    5510:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5512:	4b44      	ldr	r3, [pc, #272]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	689b      	ldr	r3, [r3, #8]
    5518:	4a43      	ldr	r2, [pc, #268]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    551a:	6812      	ldr	r2, [r2, #0]
    551c:	6812      	ldr	r2, [r2, #0]
    551e:	4610      	mov	r0, r2
    5520:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5522:	4b38      	ldr	r3, [pc, #224]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	685b      	ldr	r3, [r3, #4]
    5528:	4a44      	ldr	r2, [pc, #272]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    552a:	6812      	ldr	r2, [r2, #0]
    552c:	4610      	mov	r0, r2
    552e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5530:	4b36      	ldr	r3, [pc, #216]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	4a42      	ldr	r2, [pc, #264]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5538:	6812      	ldr	r2, [r2, #0]
    553a:	4610      	mov	r0, r2
    553c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    553e:	4b35      	ldr	r3, [pc, #212]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	681b      	ldr	r3, [r3, #0]
    5544:	4a3f      	ldr	r2, [pc, #252]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5546:	6812      	ldr	r2, [r2, #0]
    5548:	4610      	mov	r0, r2
    554a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    554c:	4b33      	ldr	r3, [pc, #204]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    554e:	681b      	ldr	r3, [r3, #0]
    5550:	681b      	ldr	r3, [r3, #0]
    5552:	4a3d      	ldr	r2, [pc, #244]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5554:	6812      	ldr	r2, [r2, #0]
    5556:	4610      	mov	r0, r2
    5558:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    555a:	e04a      	b.n	55f2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    555c:	9b00      	ldr	r3, [sp, #0]
    555e:	2b02      	cmp	r3, #2
    5560:	d149      	bne.n	55f6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5562:	4b27      	ldr	r3, [pc, #156]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5564:	2201      	movs	r2, #1
    5566:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5568:	4b32      	ldr	r3, [pc, #200]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	685b      	ldr	r3, [r3, #4]
    556e:	4a32      	ldr	r2, [pc, #200]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5570:	6812      	ldr	r2, [r2, #0]
    5572:	4610      	mov	r0, r2
    5574:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5576:	4b2d      	ldr	r3, [pc, #180]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	691b      	ldr	r3, [r3, #16]
    557c:	4a2c      	ldr	r2, [pc, #176]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    557e:	6812      	ldr	r2, [r2, #0]
    5580:	4610      	mov	r0, r2
    5582:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5584:	4b29      	ldr	r3, [pc, #164]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	689b      	ldr	r3, [r3, #8]
    558a:	4a29      	ldr	r2, [pc, #164]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    558c:	6812      	ldr	r2, [r2, #0]
    558e:	4610      	mov	r0, r2
    5590:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5592:	4b24      	ldr	r3, [pc, #144]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	68db      	ldr	r3, [r3, #12]
    5598:	4a23      	ldr	r2, [pc, #140]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    559a:	6812      	ldr	r2, [r2, #0]
    559c:	4610      	mov	r0, r2
    559e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    55a0:	4b20      	ldr	r3, [pc, #128]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	689b      	ldr	r3, [r3, #8]
    55a6:	4a20      	ldr	r2, [pc, #128]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55a8:	6812      	ldr	r2, [r2, #0]
    55aa:	6812      	ldr	r2, [r2, #0]
    55ac:	4610      	mov	r0, r2
    55ae:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    55b0:	4b26      	ldr	r3, [pc, #152]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	685b      	ldr	r3, [r3, #4]
    55b6:	4a26      	ldr	r2, [pc, #152]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55b8:	6812      	ldr	r2, [r2, #0]
    55ba:	4610      	mov	r0, r2
    55bc:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    55be:	4b25      	ldr	r3, [pc, #148]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    55c0:	681b      	ldr	r3, [r3, #0]
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	4a24      	ldr	r2, [pc, #144]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    55c6:	6812      	ldr	r2, [r2, #0]
    55c8:	4610      	mov	r0, r2
    55ca:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55cc:	4b23      	ldr	r3, [pc, #140]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	681b      	ldr	r3, [r3, #0]
    55d2:	4a23      	ldr	r2, [pc, #140]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55d4:	6812      	ldr	r2, [r2, #0]
    55d6:	4610      	mov	r0, r2
    55d8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55da:	4b22      	ldr	r3, [pc, #136]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55dc:	681b      	ldr	r3, [r3, #0]
    55de:	681b      	ldr	r3, [r3, #0]
    55e0:	4a21      	ldr	r2, [pc, #132]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    55e2:	6812      	ldr	r2, [r2, #0]
    55e4:	4610      	mov	r0, r2
    55e6:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    55e8:	e005      	b.n	55f6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    55ea:	bf00      	nop
    55ec:	e004      	b.n	55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55ee:	bf00      	nop
    55f0:	e002      	b.n	55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55f2:	bf00      	nop
    55f4:	e000      	b.n	55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55f6:	bf00      	nop
    }

}
    55f8:	bf00      	nop
    55fa:	b003      	add	sp, #12
    55fc:	f85d fb04 	ldr.w	pc, [sp], #4
    5600:	1fff8b19 	.word	0x1fff8b19
    5604:	1fff8bb8 	.word	0x1fff8bb8
    5608:	1fff8bd8 	.word	0x1fff8bd8
    560c:	1fff8bbc 	.word	0x1fff8bbc
    5610:	1fff8be0 	.word	0x1fff8be0
    5614:	1fff8bc0 	.word	0x1fff8bc0
    5618:	1fff8be8 	.word	0x1fff8be8
    561c:	1fff8bc4 	.word	0x1fff8bc4
    5620:	1fff8bf0 	.word	0x1fff8bf0
    5624:	1fff8bac 	.word	0x1fff8bac
    5628:	1fff8bd0 	.word	0x1fff8bd0
    562c:	1fff8bb0 	.word	0x1fff8bb0
    5630:	1fff8bcc 	.word	0x1fff8bcc
    5634:	1fff8bb4 	.word	0x1fff8bb4
    5638:	1fff8bc8 	.word	0x1fff8bc8
    563c:	1fff8bd4 	.word	0x1fff8bd4
    5640:	1fff8bdc 	.word	0x1fff8bdc
    5644:	1fff8be4 	.word	0x1fff8be4
    5648:	1fff8bec 	.word	0x1fff8bec
    564c:	1fff8bf4 	.word	0x1fff8bf4
    5650:	1fff8c04 	.word	0x1fff8c04
    5654:	1fff8bf8 	.word	0x1fff8bf8
    5658:	1fff8c08 	.word	0x1fff8c08
    565c:	1fff8bfc 	.word	0x1fff8bfc
    5660:	1fff8c0c 	.word	0x1fff8c0c
    5664:	1fff8c00 	.word	0x1fff8c00
    5668:	1fff8c10 	.word	0x1fff8c10

0000566c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    566c:	b500      	push	{lr}
    566e:	b083      	sub	sp, #12
    5670:	9001      	str	r0, [sp, #4]
    5672:	9100      	str	r1, [sp, #0]
    switch(Command)
    5674:	9b00      	ldr	r3, [sp, #0]
    5676:	2b04      	cmp	r3, #4
    5678:	d010      	beq.n	569c <Clock_Ip_Command+0x30>
    567a:	9b00      	ldr	r3, [sp, #0]
    567c:	2b04      	cmp	r3, #4
    567e:	d811      	bhi.n	56a4 <Clock_Ip_Command+0x38>
    5680:	9b00      	ldr	r3, [sp, #0]
    5682:	2b01      	cmp	r3, #1
    5684:	d006      	beq.n	5694 <Clock_Ip_Command+0x28>
    5686:	9b00      	ldr	r3, [sp, #0]
    5688:	2b02      	cmp	r3, #2
    568a:	d10b      	bne.n	56a4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    568c:	9801      	ldr	r0, [sp, #4]
    568e:	f7ff fdb3 	bl	51f8 <Clock_Ip_ClockInitializeObjects>
            break;
    5692:	e008      	b.n	56a6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5694:	9801      	ldr	r0, [sp, #4]
    5696:	f7ff f9db 	bl	4a50 <Clock_Ip_SpecificPlatformInitClock>
            break;
    569a:	e004      	b.n	56a6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    569c:	9801      	ldr	r0, [sp, #4]
    569e:	f7ff f8ed 	bl	487c <DisableSafeClock>
            break;
    56a2:	e000      	b.n	56a6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    56a4:	bf00      	nop
    }
}
    56a6:	bf00      	nop
    56a8:	b003      	add	sp, #12
    56aa:	f85d fb04 	ldr.w	pc, [sp], #4
    56ae:	bf00      	nop

000056b0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    56b0:	b500      	push	{lr}
    56b2:	b085      	sub	sp, #20
    56b4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56b6:	4a20      	ldr	r2, [pc, #128]	; (5738 <Mcu_Init+0x88>)
    56b8:	9b01      	ldr	r3, [sp, #4]
    56ba:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56bc:	2300      	movs	r3, #0
    56be:	9303      	str	r3, [sp, #12]
    56c0:	e010      	b.n	56e4 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    56c2:	4b1d      	ldr	r3, [pc, #116]	; (5738 <Mcu_Init+0x88>)
    56c4:	681b      	ldr	r3, [r3, #0]
    56c6:	6919      	ldr	r1, [r3, #16]
    56c8:	9a03      	ldr	r2, [sp, #12]
    56ca:	4613      	mov	r3, r2
    56cc:	005b      	lsls	r3, r3, #1
    56ce:	4413      	add	r3, r2
    56d0:	009b      	lsls	r3, r3, #2
    56d2:	440b      	add	r3, r1
    56d4:	681b      	ldr	r3, [r3, #0]
    56d6:	9a03      	ldr	r2, [sp, #12]
    56d8:	b2d1      	uxtb	r1, r2
    56da:	4a18      	ldr	r2, [pc, #96]	; (573c <Mcu_Init+0x8c>)
    56dc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56de:	9b03      	ldr	r3, [sp, #12]
    56e0:	3301      	adds	r3, #1
    56e2:	9303      	str	r3, [sp, #12]
    56e4:	4b14      	ldr	r3, [pc, #80]	; (5738 <Mcu_Init+0x88>)
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	689b      	ldr	r3, [r3, #8]
    56ea:	9a03      	ldr	r2, [sp, #12]
    56ec:	429a      	cmp	r2, r3
    56ee:	d3e8      	bcc.n	56c2 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56f0:	2300      	movs	r3, #0
    56f2:	9303      	str	r3, [sp, #12]
    56f4:	e010      	b.n	5718 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    56f6:	4b10      	ldr	r3, [pc, #64]	; (5738 <Mcu_Init+0x88>)
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	6959      	ldr	r1, [r3, #20]
    56fc:	9a03      	ldr	r2, [sp, #12]
    56fe:	4613      	mov	r3, r2
    5700:	01db      	lsls	r3, r3, #7
    5702:	1a9b      	subs	r3, r3, r2
    5704:	00db      	lsls	r3, r3, #3
    5706:	440b      	add	r3, r1
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	9a03      	ldr	r2, [sp, #12]
    570c:	b2d1      	uxtb	r1, r2
    570e:	4a0c      	ldr	r2, [pc, #48]	; (5740 <Mcu_Init+0x90>)
    5710:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5712:	9b03      	ldr	r3, [sp, #12]
    5714:	3301      	adds	r3, #1
    5716:	9303      	str	r3, [sp, #12]
    5718:	4b07      	ldr	r3, [pc, #28]	; (5738 <Mcu_Init+0x88>)
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	68db      	ldr	r3, [r3, #12]
    571e:	9a03      	ldr	r2, [sp, #12]
    5720:	429a      	cmp	r2, r3
    5722:	d3e8      	bcc.n	56f6 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5724:	4b04      	ldr	r3, [pc, #16]	; (5738 <Mcu_Init+0x88>)
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	699b      	ldr	r3, [r3, #24]
    572a:	4618      	mov	r0, r3
    572c:	f000 f88a 	bl	5844 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5730:	bf00      	nop
    5732:	b005      	add	sp, #20
    5734:	f85d fb04 	ldr.w	pc, [sp], #4
    5738:	1fff8cec 	.word	0x1fff8cec
    573c:	1fff8ce8 	.word	0x1fff8ce8
    5740:	1fff8ce4 	.word	0x1fff8ce4

00005744 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5744:	b084      	sub	sp, #16
    5746:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5748:	2301      	movs	r3, #1
    574a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    574e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5752:	4618      	mov	r0, r3
    5754:	b004      	add	sp, #16
    5756:	4770      	bx	lr

00005758 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5758:	b500      	push	{lr}
    575a:	b085      	sub	sp, #20
    575c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    575e:	4a0e      	ldr	r2, [pc, #56]	; (5798 <Mcu_InitClock+0x40>)
    5760:	9b01      	ldr	r3, [sp, #4]
    5762:	4413      	add	r3, r2
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    576a:	4b0c      	ldr	r3, [pc, #48]	; (579c <Mcu_InitClock+0x44>)
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	6959      	ldr	r1, [r3, #20]
    5770:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5774:	4613      	mov	r3, r2
    5776:	01db      	lsls	r3, r3, #7
    5778:	1a9b      	subs	r3, r3, r2
    577a:	00db      	lsls	r3, r3, #3
    577c:	440b      	add	r3, r1
    577e:	4618      	mov	r0, r3
    5780:	f000 f86a 	bl	5858 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5784:	2300      	movs	r3, #0
    5786:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    578a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    578e:	4618      	mov	r0, r3
    5790:	b005      	add	sp, #20
    5792:	f85d fb04 	ldr.w	pc, [sp], #4
    5796:	bf00      	nop
    5798:	1fff8ce4 	.word	0x1fff8ce4
    579c:	1fff8cec 	.word	0x1fff8cec

000057a0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    57a0:	b500      	push	{lr}
    57a2:	b085      	sub	sp, #20
    57a4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    57a6:	4a0d      	ldr	r2, [pc, #52]	; (57dc <Mcu_SetMode+0x3c>)
    57a8:	9b01      	ldr	r3, [sp, #4]
    57aa:	4413      	add	r3, r2
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    57b2:	f00c fb31 	bl	11e18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57b6:	4b0a      	ldr	r3, [pc, #40]	; (57e0 <Mcu_SetMode+0x40>)
    57b8:	681b      	ldr	r3, [r3, #0]
    57ba:	6919      	ldr	r1, [r3, #16]
    57bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57c0:	4613      	mov	r3, r2
    57c2:	005b      	lsls	r3, r3, #1
    57c4:	4413      	add	r3, r2
    57c6:	009b      	lsls	r3, r3, #2
    57c8:	440b      	add	r3, r1
    57ca:	4618      	mov	r0, r3
    57cc:	f000 f84e 	bl	586c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57d0:	f00c fb4e 	bl	11e70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57d4:	bf00      	nop
    57d6:	b005      	add	sp, #20
    57d8:	f85d fb04 	ldr.w	pc, [sp], #4
    57dc:	1fff8ce8 	.word	0x1fff8ce8
    57e0:	1fff8cec 	.word	0x1fff8cec

000057e4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    57e4:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    57e6:	2302      	movs	r3, #2
    57e8:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    57ea:	9b01      	ldr	r3, [sp, #4]
}
    57ec:	4618      	mov	r0, r3
    57ee:	b002      	add	sp, #8
    57f0:	4770      	bx	lr

000057f2 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    57f2:	b500      	push	{lr}
    57f4:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    57f6:	f000 f843 	bl	5880 <Mcu_Ipw_GetResetReason>
    57fa:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    57fc:	9b01      	ldr	r3, [sp, #4]
}
    57fe:	4618      	mov	r0, r3
    5800:	b003      	add	sp, #12
    5802:	f85d fb04 	ldr.w	pc, [sp], #4

00005806 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5806:	b500      	push	{lr}
    5808:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    580a:	f000 f83f 	bl	588c <Mcu_Ipw_GetResetRawValue>
    580e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5810:	9b01      	ldr	r3, [sp, #4]
}
    5812:	4618      	mov	r0, r3
    5814:	b003      	add	sp, #12
    5816:	f85d fb04 	ldr.w	pc, [sp], #4

0000581a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    581a:	b500      	push	{lr}
    581c:	b083      	sub	sp, #12
    581e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5820:	9801      	ldr	r0, [sp, #4]
    5822:	f000 f839 	bl	5898 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5826:	bf00      	nop
    5828:	b003      	add	sp, #12
    582a:	f85d fb04 	ldr.w	pc, [sp], #4

0000582e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    582e:	b082      	sub	sp, #8
    5830:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5832:	4b03      	ldr	r3, [pc, #12]	; (5840 <Mcu_ClkSrcFailureNotification+0x12>)
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5838:	bf00      	nop
    583a:	b002      	add	sp, #8
    583c:	4770      	bx	lr
    583e:	bf00      	nop
    5840:	1fff8cec 	.word	0x1fff8cec

00005844 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5844:	b500      	push	{lr}
    5846:	b083      	sub	sp, #12
    5848:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    584a:	9801      	ldr	r0, [sp, #4]
    584c:	f000 f882 	bl	5954 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5850:	bf00      	nop
    5852:	b003      	add	sp, #12
    5854:	f85d fb04 	ldr.w	pc, [sp], #4

00005858 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5858:	b500      	push	{lr}
    585a:	b083      	sub	sp, #12
    585c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    585e:	9801      	ldr	r0, [sp, #4]
    5860:	f7fc fc6a 	bl	2138 <Clock_Ip_InitClock>
}
    5864:	bf00      	nop
    5866:	b003      	add	sp, #12
    5868:	f85d fb04 	ldr.w	pc, [sp], #4

0000586c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    586c:	b500      	push	{lr}
    586e:	b083      	sub	sp, #12
    5870:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5872:	9801      	ldr	r0, [sp, #4]
    5874:	f000 f820 	bl	58b8 <Power_Ip_SetMode>
}
    5878:	bf00      	nop
    587a:	b003      	add	sp, #12
    587c:	f85d fb04 	ldr.w	pc, [sp], #4

00005880 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5880:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5882:	f000 f84f 	bl	5924 <Power_Ip_GetResetReason>
    5886:	4603      	mov	r3, r0
}
    5888:	4618      	mov	r0, r3
    588a:	bd08      	pop	{r3, pc}

0000588c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    588c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    588e:	f000 f857 	bl	5940 <Power_Ip_GetResetRawValue>
    5892:	4603      	mov	r3, r0
}
    5894:	4618      	mov	r0, r3
    5896:	bd08      	pop	{r3, pc}

00005898 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5898:	b500      	push	{lr}
    589a:	b083      	sub	sp, #12
    589c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    589e:	9b01      	ldr	r3, [sp, #4]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d102      	bne.n	58aa <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    58a4:	f000 f86c 	bl	5980 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    58a8:	e001      	b.n	58ae <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    58aa:	f000 f86e 	bl	598a <Power_Ip_EnableSleepOnExit>
}
    58ae:	bf00      	nop
    58b0:	b003      	add	sp, #12
    58b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058b8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58b8:	b500      	push	{lr}
    58ba:	b085      	sub	sp, #20
    58bc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    58be:	9b01      	ldr	r3, [sp, #4]
    58c0:	685b      	ldr	r3, [r3, #4]
    58c2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    58c4:	9802      	ldr	r0, [sp, #8]
    58c6:	f000 f9f5 	bl	5cb4 <Power_Ip_SMC_ModeCheckEntry>
    58ca:	4603      	mov	r3, r0
    58cc:	2b00      	cmp	r3, #0
    58ce:	d002      	beq.n	58d6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58d0:	2301      	movs	r3, #1
    58d2:	9303      	str	r3, [sp, #12]
    58d4:	e003      	b.n	58de <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58d6:	9801      	ldr	r0, [sp, #4]
    58d8:	f000 fa1e 	bl	5d18 <Power_Ip_SMC_ModeConfig>
    58dc:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58de:	9b03      	ldr	r3, [sp, #12]
    58e0:	2b01      	cmp	r3, #1
    58e2:	d103      	bne.n	58ec <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58e4:	21ff      	movs	r1, #255	; 0xff
    58e6:	2003      	movs	r0, #3
    58e8:	f000 f8f4 	bl	5ad4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    58ec:	bf00      	nop
    58ee:	b005      	add	sp, #20
    58f0:	f85d fb04 	ldr.w	pc, [sp], #4

000058f4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    58f4:	b084      	sub	sp, #16
    58f6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    58f8:	230c      	movs	r3, #12
    58fa:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    58fc:	4a08      	ldr	r2, [pc, #32]	; (5920 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58fe:	9b01      	ldr	r3, [sp, #4]
    5900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5904:	2b0e      	cmp	r3, #14
    5906:	d805      	bhi.n	5914 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5908:	4a05      	ldr	r2, [pc, #20]	; (5920 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    590a:	9b01      	ldr	r3, [sp, #4]
    590c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5910:	9303      	str	r3, [sp, #12]
    5912:	e001      	b.n	5918 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5914:	230c      	movs	r3, #12
    5916:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5918:	9b03      	ldr	r3, [sp, #12]
}
    591a:	4618      	mov	r0, r3
    591c:	b004      	add	sp, #16
    591e:	4770      	bx	lr
    5920:	00015154 	.word	0x00015154

00005924 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5924:	b500      	push	{lr}
    5926:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5928:	f000 f940 	bl	5bac <Power_Ip_RCM_GetResetReason>
    592c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    592e:	9801      	ldr	r0, [sp, #4]
    5930:	f7ff ffe0 	bl	58f4 <Power_Ip_ConvertIntergeToResetType>
    5934:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5936:	9b00      	ldr	r3, [sp, #0]
}
    5938:	4618      	mov	r0, r3
    593a:	b003      	add	sp, #12
    593c:	f85d fb04 	ldr.w	pc, [sp], #4

00005940 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5940:	b500      	push	{lr}
    5942:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5944:	f000 f98a 	bl	5c5c <Power_Ip_RCM_GetResetRawValue>
    5948:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    594a:	9b01      	ldr	r3, [sp, #4]
}
    594c:	4618      	mov	r0, r3
    594e:	b003      	add	sp, #12
    5950:	f85d fb04 	ldr.w	pc, [sp], #4

00005954 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5954:	b500      	push	{lr}
    5956:	b083      	sub	sp, #12
    5958:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	681b      	ldr	r3, [r3, #0]
    595e:	4618      	mov	r0, r3
    5960:	f000 f90e 	bl	5b80 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5964:	9b01      	ldr	r3, [sp, #4]
    5966:	685b      	ldr	r3, [r3, #4]
    5968:	4618      	mov	r0, r3
    596a:	f000 f86d 	bl	5a48 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    596e:	9b01      	ldr	r3, [sp, #4]
    5970:	689b      	ldr	r3, [r3, #8]
    5972:	4618      	mov	r0, r3
    5974:	f000 f990 	bl	5c98 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5978:	bf00      	nop
    597a:	b003      	add	sp, #12
    597c:	f85d fb04 	ldr.w	pc, [sp], #4

00005980 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5980:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5982:	f000 f811 	bl	59a8 <Power_Ip_CM4_DisableSleepOnExit>
}
    5986:	bf00      	nop
    5988:	bd08      	pop	{r3, pc}

0000598a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    598a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    598c:	f000 f820 	bl	59d0 <Power_Ip_CM4_EnableSleepOnExit>
}
    5990:	bf00      	nop
    5992:	bd08      	pop	{r3, pc}

00005994 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5994:	b082      	sub	sp, #8
    5996:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5998:	4a02      	ldr	r2, [pc, #8]	; (59a4 <Power_Ip_InstallNotificationsCallback+0x10>)
    599a:	9b01      	ldr	r3, [sp, #4]
    599c:	6013      	str	r3, [r2, #0]
}
    599e:	bf00      	nop
    59a0:	b002      	add	sp, #8
    59a2:	4770      	bx	lr
    59a4:	1fff8b1c 	.word	0x1fff8b1c

000059a8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    59a8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59aa:	2300      	movs	r3, #0
    59ac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59ae:	4b07      	ldr	r3, [pc, #28]	; (59cc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	f023 0302 	bic.w	r3, r3, #2
    59bc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59be:	4b03      	ldr	r3, [pc, #12]	; (59cc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	9a01      	ldr	r2, [sp, #4]
    59c4:	605a      	str	r2, [r3, #4]
}
    59c6:	bf00      	nop
    59c8:	b002      	add	sp, #8
    59ca:	4770      	bx	lr
    59cc:	1fff8b20 	.word	0x1fff8b20

000059d0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59d0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59d2:	2300      	movs	r3, #0
    59d4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59d6:	4b07      	ldr	r3, [pc, #28]	; (59f4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	685b      	ldr	r3, [r3, #4]
    59dc:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59de:	9b01      	ldr	r3, [sp, #4]
    59e0:	f043 0302 	orr.w	r3, r3, #2
    59e4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59e6:	4b03      	ldr	r3, [pc, #12]	; (59f4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	9a01      	ldr	r2, [sp, #4]
    59ec:	605a      	str	r2, [r3, #4]
}
    59ee:	bf00      	nop
    59f0:	b002      	add	sp, #8
    59f2:	4770      	bx	lr
    59f4:	1fff8b20 	.word	0x1fff8b20

000059f8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    59f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59fa:	2300      	movs	r3, #0
    59fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59fe:	4b07      	ldr	r3, [pc, #28]	; (5a1c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	685b      	ldr	r3, [r3, #4]
    5a04:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5a06:	9b01      	ldr	r3, [sp, #4]
    5a08:	f043 0304 	orr.w	r3, r3, #4
    5a0c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a0e:	4b03      	ldr	r3, [pc, #12]	; (5a1c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	9a01      	ldr	r2, [sp, #4]
    5a14:	605a      	str	r2, [r3, #4]
}
    5a16:	bf00      	nop
    5a18:	b002      	add	sp, #8
    5a1a:	4770      	bx	lr
    5a1c:	1fff8b20 	.word	0x1fff8b20

00005a20 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a20:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a22:	2300      	movs	r3, #0
    5a24:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a26:	4b07      	ldr	r3, [pc, #28]	; (5a44 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	685b      	ldr	r3, [r3, #4]
    5a2c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a2e:	9b01      	ldr	r3, [sp, #4]
    5a30:	f023 0304 	bic.w	r3, r3, #4
    5a34:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a36:	4b03      	ldr	r3, [pc, #12]	; (5a44 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	9a01      	ldr	r2, [sp, #4]
    5a3c:	605a      	str	r2, [r3, #4]
}
    5a3e:	bf00      	nop
    5a40:	b002      	add	sp, #8
    5a42:	4770      	bx	lr
    5a44:	1fff8b20 	.word	0x1fff8b20

00005a48 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a48:	b084      	sub	sp, #16
    5a4a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a4c:	4b20      	ldr	r3, [pc, #128]	; (5ad0 <Power_Ip_PMC_PowerInit+0x88>)
    5a4e:	781b      	ldrb	r3, [r3, #0]
    5a50:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a58:	f003 030f 	and.w	r3, r3, #15
    5a5c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a60:	9b01      	ldr	r3, [sp, #4]
    5a62:	781a      	ldrb	r2, [r3, #0]
    5a64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a68:	4313      	orrs	r3, r2
    5a6a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a6e:	4a18      	ldr	r2, [pc, #96]	; (5ad0 <Power_Ip_PMC_PowerInit+0x88>)
    5a70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a74:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a76:	4b16      	ldr	r3, [pc, #88]	; (5ad0 <Power_Ip_PMC_PowerInit+0x88>)
    5a78:	785b      	ldrb	r3, [r3, #1]
    5a7a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a82:	f003 031f 	and.w	r3, r3, #31
    5a86:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a8a:	9b01      	ldr	r3, [sp, #4]
    5a8c:	785a      	ldrb	r2, [r3, #1]
    5a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a92:	4313      	orrs	r3, r2
    5a94:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a98:	4a0d      	ldr	r2, [pc, #52]	; (5ad0 <Power_Ip_PMC_PowerInit+0x88>)
    5a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a9e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5aa0:	4b0b      	ldr	r3, [pc, #44]	; (5ad0 <Power_Ip_PMC_PowerInit+0x88>)
    5aa2:	789b      	ldrb	r3, [r3, #2]
    5aa4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5aa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5ab0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5ab4:	9b01      	ldr	r3, [sp, #4]
    5ab6:	789a      	ldrb	r2, [r3, #2]
    5ab8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5abc:	4313      	orrs	r3, r2
    5abe:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5ac2:	4a03      	ldr	r2, [pc, #12]	; (5ad0 <Power_Ip_PMC_PowerInit+0x88>)
    5ac4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ac8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5aca:	bf00      	nop
    5acc:	b004      	add	sp, #16
    5ace:	4770      	bx	lr
    5ad0:	4007d000 	.word	0x4007d000

00005ad4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ad4:	b500      	push	{lr}
    5ad6:	b083      	sub	sp, #12
    5ad8:	9001      	str	r0, [sp, #4]
    5ada:	460b      	mov	r3, r1
    5adc:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5ae0:	4b05      	ldr	r3, [pc, #20]	; (5af8 <Power_Ip_ReportPowerErrors+0x24>)
    5ae2:	681b      	ldr	r3, [r3, #0]
    5ae4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ae8:	4611      	mov	r1, r2
    5aea:	9801      	ldr	r0, [sp, #4]
    5aec:	4798      	blx	r3
}
    5aee:	bf00      	nop
    5af0:	b003      	add	sp, #12
    5af2:	f85d fb04 	ldr.w	pc, [sp], #4
    5af6:	bf00      	nop
    5af8:	1fff8b1c 	.word	0x1fff8b1c

00005afc <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5afc:	b082      	sub	sp, #8
    5afe:	9001      	str	r0, [sp, #4]
    5b00:	460b      	mov	r3, r1
    5b02:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5b06:	bf00      	nop
    5b08:	b002      	add	sp, #8
    5b0a:	4770      	bx	lr

00005b0c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5b0c:	b500      	push	{lr}
    5b0e:	b085      	sub	sp, #20
    5b10:	9003      	str	r0, [sp, #12]
    5b12:	9102      	str	r1, [sp, #8]
    5b14:	9201      	str	r2, [sp, #4]
    5b16:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b18:	2000      	movs	r0, #0
    5b1a:	f7fc f83d 	bl	1b98 <OsIf_GetCounter>
    5b1e:	4602      	mov	r2, r0
    5b20:	9b03      	ldr	r3, [sp, #12]
    5b22:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b24:	9b02      	ldr	r3, [sp, #8]
    5b26:	2200      	movs	r2, #0
    5b28:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b2a:	2100      	movs	r1, #0
    5b2c:	9800      	ldr	r0, [sp, #0]
    5b2e:	f7fc f87f 	bl	1c30 <OsIf_MicrosToTicks>
    5b32:	4602      	mov	r2, r0
    5b34:	9b01      	ldr	r3, [sp, #4]
    5b36:	601a      	str	r2, [r3, #0]
}
    5b38:	bf00      	nop
    5b3a:	b005      	add	sp, #20
    5b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00005b40 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b40:	b500      	push	{lr}
    5b42:	b087      	sub	sp, #28
    5b44:	9003      	str	r0, [sp, #12]
    5b46:	9102      	str	r1, [sp, #8]
    5b48:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b4a:	2300      	movs	r3, #0
    5b4c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b50:	2100      	movs	r1, #0
    5b52:	9803      	ldr	r0, [sp, #12]
    5b54:	f7fc f839 	bl	1bca <OsIf_GetElapsed>
    5b58:	4602      	mov	r2, r0
    5b5a:	9b02      	ldr	r3, [sp, #8]
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	441a      	add	r2, r3
    5b60:	9b02      	ldr	r3, [sp, #8]
    5b62:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b64:	9b02      	ldr	r3, [sp, #8]
    5b66:	681b      	ldr	r3, [r3, #0]
    5b68:	9a01      	ldr	r2, [sp, #4]
    5b6a:	429a      	cmp	r2, r3
    5b6c:	d802      	bhi.n	5b74 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b6e:	2301      	movs	r3, #1
    5b70:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b74:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b78:	4618      	mov	r0, r3
    5b7a:	b007      	add	sp, #28
    5b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00005b80 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b80:	b082      	sub	sp, #8
    5b82:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b84:	9b01      	ldr	r3, [sp, #4]
    5b86:	681a      	ldr	r2, [r3, #0]
    5b88:	4907      	ldr	r1, [pc, #28]	; (5ba8 <Power_Ip_RCM_ResetInit+0x28>)
    5b8a:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b8e:	4013      	ands	r3, r2
    5b90:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b92:	9b01      	ldr	r3, [sp, #4]
    5b94:	685a      	ldr	r2, [r3, #4]
    5b96:	4904      	ldr	r1, [pc, #16]	; (5ba8 <Power_Ip_RCM_ResetInit+0x28>)
    5b98:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b9c:	4013      	ands	r3, r2
    5b9e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5ba0:	bf00      	nop
    5ba2:	b002      	add	sp, #8
    5ba4:	4770      	bx	lr
    5ba6:	bf00      	nop
    5ba8:	4007f000 	.word	0x4007f000

00005bac <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5bac:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5bae:	230c      	movs	r3, #12
    5bb0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5bb2:	2300      	movs	r3, #0
    5bb4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5bb6:	2300      	movs	r3, #0
    5bb8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5bba:	2300      	movs	r3, #0
    5bbc:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bbe:	4b25      	ldr	r3, [pc, #148]	; (5c54 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bc0:	699a      	ldr	r2, [r3, #24]
    5bc2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc6:	4013      	ands	r3, r2
    5bc8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5bca:	9b03      	ldr	r3, [sp, #12]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d008      	beq.n	5be2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bd0:	4920      	ldr	r1, [pc, #128]	; (5c54 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bd2:	9a03      	ldr	r2, [sp, #12]
    5bd4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bd8:	4013      	ands	r3, r2
    5bda:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bdc:	4a1e      	ldr	r2, [pc, #120]	; (5c58 <Power_Ip_RCM_GetResetReason+0xac>)
    5bde:	9b03      	ldr	r3, [sp, #12]
    5be0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5be2:	4b1d      	ldr	r3, [pc, #116]	; (5c58 <Power_Ip_RCM_GetResetReason+0xac>)
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5be8:	9a02      	ldr	r2, [sp, #8]
    5bea:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bee:	4013      	ands	r3, r2
    5bf0:	2b82      	cmp	r3, #130	; 0x82
    5bf2:	d102      	bne.n	5bfa <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5bf4:	2305      	movs	r3, #5
    5bf6:	9307      	str	r3, [sp, #28]
    5bf8:	e027      	b.n	5c4a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5bfa:	2300      	movs	r3, #0
    5bfc:	9306      	str	r3, [sp, #24]
    5bfe:	e021      	b.n	5c44 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5c00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c04:	9b06      	ldr	r3, [sp, #24]
    5c06:	fa22 f303 	lsr.w	r3, r2, r3
    5c0a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5c0c:	9a01      	ldr	r2, [sp, #4]
    5c0e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5c12:	4013      	ands	r3, r2
    5c14:	2b00      	cmp	r3, #0
    5c16:	d012      	beq.n	5c3e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c18:	9a01      	ldr	r2, [sp, #4]
    5c1a:	9b02      	ldr	r3, [sp, #8]
    5c1c:	4013      	ands	r3, r2
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d00a      	beq.n	5c38 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c22:	9b05      	ldr	r3, [sp, #20]
    5c24:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c26:	9b04      	ldr	r3, [sp, #16]
    5c28:	3301      	adds	r3, #1
    5c2a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c2c:	9b04      	ldr	r3, [sp, #16]
    5c2e:	2b01      	cmp	r3, #1
    5c30:	d902      	bls.n	5c38 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c32:	230d      	movs	r3, #13
    5c34:	9307      	str	r3, [sp, #28]
                        break;
    5c36:	e008      	b.n	5c4a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c38:	9b05      	ldr	r3, [sp, #20]
    5c3a:	3301      	adds	r3, #1
    5c3c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c3e:	9b06      	ldr	r3, [sp, #24]
    5c40:	3301      	adds	r3, #1
    5c42:	9306      	str	r3, [sp, #24]
    5c44:	9b06      	ldr	r3, [sp, #24]
    5c46:	2b1f      	cmp	r3, #31
    5c48:	d9da      	bls.n	5c00 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c4a:	9b07      	ldr	r3, [sp, #28]
}
    5c4c:	4618      	mov	r0, r3
    5c4e:	b008      	add	sp, #32
    5c50:	4770      	bx	lr
    5c52:	bf00      	nop
    5c54:	4007f000 	.word	0x4007f000
    5c58:	1fff8cf0 	.word	0x1fff8cf0

00005c5c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c5c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c5e:	4b0c      	ldr	r3, [pc, #48]	; (5c90 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c60:	699a      	ldr	r2, [r3, #24]
    5c62:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c66:	4013      	ands	r3, r2
    5c68:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c6a:	9b01      	ldr	r3, [sp, #4]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d008      	beq.n	5c82 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c70:	4907      	ldr	r1, [pc, #28]	; (5c90 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c72:	9a01      	ldr	r2, [sp, #4]
    5c74:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c78:	4013      	ands	r3, r2
    5c7a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c7c:	4a05      	ldr	r2, [pc, #20]	; (5c94 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c7e:	9b01      	ldr	r3, [sp, #4]
    5c80:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c82:	4b04      	ldr	r3, [pc, #16]	; (5c94 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c84:	681b      	ldr	r3, [r3, #0]
    5c86:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c88:	9b00      	ldr	r3, [sp, #0]
}
    5c8a:	4618      	mov	r0, r3
    5c8c:	b002      	add	sp, #8
    5c8e:	4770      	bx	lr
    5c90:	4007f000 	.word	0x4007f000
    5c94:	1fff8cf0 	.word	0x1fff8cf0

00005c98 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c98:	b082      	sub	sp, #8
    5c9a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c9c:	9b01      	ldr	r3, [sp, #4]
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	4a03      	ldr	r2, [pc, #12]	; (5cb0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5ca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5ca6:	6093      	str	r3, [r2, #8]
}
    5ca8:	bf00      	nop
    5caa:	b002      	add	sp, #8
    5cac:	4770      	bx	lr
    5cae:	bf00      	nop
    5cb0:	4007e000 	.word	0x4007e000

00005cb4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5cb4:	b084      	sub	sp, #16
    5cb6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5cb8:	2301      	movs	r3, #1
    5cba:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5cbc:	4b15      	ldr	r3, [pc, #84]	; (5d14 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5cbe:	695b      	ldr	r3, [r3, #20]
    5cc0:	b2db      	uxtb	r3, r3
    5cc2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5cc4:	9b01      	ldr	r3, [sp, #4]
    5cc6:	2b02      	cmp	r3, #2
    5cc8:	d012      	beq.n	5cf0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5cca:	9b01      	ldr	r3, [sp, #4]
    5ccc:	2b02      	cmp	r3, #2
    5cce:	d818      	bhi.n	5d02 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d003      	beq.n	5cde <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5cd6:	9b01      	ldr	r3, [sp, #4]
    5cd8:	2b01      	cmp	r3, #1
    5cda:	d003      	beq.n	5ce4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cdc:	e011      	b.n	5d02 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cde:	2300      	movs	r3, #0
    5ce0:	9303      	str	r3, [sp, #12]
            break;
    5ce2:	e013      	b.n	5d0c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5ce4:	9b02      	ldr	r3, [sp, #8]
    5ce6:	2b01      	cmp	r3, #1
    5ce8:	d10d      	bne.n	5d06 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cea:	2300      	movs	r3, #0
    5cec:	9303      	str	r3, [sp, #12]
            break;
    5cee:	e00a      	b.n	5d06 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5cf0:	9b02      	ldr	r3, [sp, #8]
    5cf2:	2b01      	cmp	r3, #1
    5cf4:	d002      	beq.n	5cfc <Power_Ip_SMC_ModeCheckEntry+0x48>
    5cf6:	9b02      	ldr	r3, [sp, #8]
    5cf8:	2b10      	cmp	r3, #16
    5cfa:	d106      	bne.n	5d0a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cfc:	2300      	movs	r3, #0
    5cfe:	9303      	str	r3, [sp, #12]
            break;
    5d00:	e003      	b.n	5d0a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5d02:	bf00      	nop
    5d04:	e002      	b.n	5d0c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d06:	bf00      	nop
    5d08:	e000      	b.n	5d0c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d0a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5d0c:	9b03      	ldr	r3, [sp, #12]
}
    5d0e:	4618      	mov	r0, r3
    5d10:	b004      	add	sp, #16
    5d12:	4770      	bx	lr
    5d14:	4007e000 	.word	0x4007e000

00005d18 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d18:	b500      	push	{lr}
    5d1a:	b08b      	sub	sp, #44	; 0x2c
    5d1c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d1e:	2300      	movs	r3, #0
    5d20:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d22:	2300      	movs	r3, #0
    5d24:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d26:	2300      	movs	r3, #0
    5d28:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d2c:	9b01      	ldr	r3, [sp, #4]
    5d2e:	685b      	ldr	r3, [r3, #4]
    5d30:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d32:	9b08      	ldr	r3, [sp, #32]
    5d34:	2b02      	cmp	r3, #2
    5d36:	d076      	beq.n	5e26 <Power_Ip_SMC_ModeConfig+0x10e>
    5d38:	9b08      	ldr	r3, [sp, #32]
    5d3a:	2b02      	cmp	r3, #2
    5d3c:	f200 80ab 	bhi.w	5e96 <Power_Ip_SMC_ModeConfig+0x17e>
    5d40:	9b08      	ldr	r3, [sp, #32]
    5d42:	2b00      	cmp	r3, #0
    5d44:	d003      	beq.n	5d4e <Power_Ip_SMC_ModeConfig+0x36>
    5d46:	9b08      	ldr	r3, [sp, #32]
    5d48:	2b01      	cmp	r3, #1
    5d4a:	d034      	beq.n	5db6 <Power_Ip_SMC_ModeConfig+0x9e>
    5d4c:	e0a3      	b.n	5e96 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d4e:	4b58      	ldr	r3, [pc, #352]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d50:	68db      	ldr	r3, [r3, #12]
    5d52:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d54:	9b06      	ldr	r3, [sp, #24]
    5d56:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d5a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d5c:	4a54      	ldr	r2, [pc, #336]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d5e:	9b06      	ldr	r3, [sp, #24]
    5d60:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d62:	aa02      	add	r2, sp, #8
    5d64:	a903      	add	r1, sp, #12
    5d66:	a804      	add	r0, sp, #16
    5d68:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d6c:	f7ff fece 	bl	5b0c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d70:	9a02      	ldr	r2, [sp, #8]
    5d72:	a903      	add	r1, sp, #12
    5d74:	ab04      	add	r3, sp, #16
    5d76:	4618      	mov	r0, r3
    5d78:	f7ff fee2 	bl	5b40 <Power_Ip_TimeoutExpired>
    5d7c:	4603      	mov	r3, r0
    5d7e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d82:	4b4b      	ldr	r3, [pc, #300]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5d84:	695b      	ldr	r3, [r3, #20]
    5d86:	f003 0301 	and.w	r3, r3, #1
    5d8a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d8c:	9b05      	ldr	r3, [sp, #20]
    5d8e:	2b01      	cmp	r3, #1
    5d90:	d006      	beq.n	5da0 <Power_Ip_SMC_ModeConfig+0x88>
    5d92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d96:	f083 0301 	eor.w	r3, r3, #1
    5d9a:	b2db      	uxtb	r3, r3
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d1e7      	bne.n	5d70 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5da0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d079      	beq.n	5e9c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5da8:	2301      	movs	r3, #1
    5daa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5dac:	21ff      	movs	r1, #255	; 0xff
    5dae:	2000      	movs	r0, #0
    5db0:	f7ff fe90 	bl	5ad4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5db4:	e072      	b.n	5e9c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5db6:	4b3e      	ldr	r3, [pc, #248]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5db8:	68db      	ldr	r3, [r3, #12]
    5dba:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5dbc:	9b06      	ldr	r3, [sp, #24]
    5dbe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5dc2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5dc4:	9b06      	ldr	r3, [sp, #24]
    5dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5dca:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5dcc:	4a38      	ldr	r2, [pc, #224]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5dce:	9b06      	ldr	r3, [sp, #24]
    5dd0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5dd2:	aa02      	add	r2, sp, #8
    5dd4:	a903      	add	r1, sp, #12
    5dd6:	a804      	add	r0, sp, #16
    5dd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5ddc:	f7ff fe96 	bl	5b0c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5de0:	9a02      	ldr	r2, [sp, #8]
    5de2:	a903      	add	r1, sp, #12
    5de4:	ab04      	add	r3, sp, #16
    5de6:	4618      	mov	r0, r3
    5de8:	f7ff feaa 	bl	5b40 <Power_Ip_TimeoutExpired>
    5dec:	4603      	mov	r3, r0
    5dee:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5df2:	4b2f      	ldr	r3, [pc, #188]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5df4:	695b      	ldr	r3, [r3, #20]
    5df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5dfa:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dfc:	9b05      	ldr	r3, [sp, #20]
    5dfe:	2b80      	cmp	r3, #128	; 0x80
    5e00:	d006      	beq.n	5e10 <Power_Ip_SMC_ModeConfig+0xf8>
    5e02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e06:	f083 0301 	eor.w	r3, r3, #1
    5e0a:	b2db      	uxtb	r3, r3
    5e0c:	2b00      	cmp	r3, #0
    5e0e:	d1e7      	bne.n	5de0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5e10:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e14:	2b00      	cmp	r3, #0
    5e16:	d043      	beq.n	5ea0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e18:	2301      	movs	r3, #1
    5e1a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e1c:	21ff      	movs	r1, #255	; 0xff
    5e1e:	2000      	movs	r0, #0
    5e20:	f7ff fe58 	bl	5ad4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e24:	e03c      	b.n	5ea0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e26:	4b22      	ldr	r3, [pc, #136]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e28:	68db      	ldr	r3, [r3, #12]
    5e2a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e2c:	9b06      	ldr	r3, [sp, #24]
    5e2e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e32:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e34:	9b06      	ldr	r3, [sp, #24]
    5e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e3a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e3c:	4a1c      	ldr	r2, [pc, #112]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e3e:	9b06      	ldr	r3, [sp, #24]
    5e40:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e42:	aa02      	add	r2, sp, #8
    5e44:	a903      	add	r1, sp, #12
    5e46:	a804      	add	r0, sp, #16
    5e48:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e4c:	f7ff fe5e 	bl	5b0c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e50:	9a02      	ldr	r2, [sp, #8]
    5e52:	a903      	add	r1, sp, #12
    5e54:	ab04      	add	r3, sp, #16
    5e56:	4618      	mov	r0, r3
    5e58:	f7ff fe72 	bl	5b40 <Power_Ip_TimeoutExpired>
    5e5c:	4603      	mov	r3, r0
    5e5e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e62:	4b13      	ldr	r3, [pc, #76]	; (5eb0 <Power_Ip_SMC_ModeConfig+0x198>)
    5e64:	695b      	ldr	r3, [r3, #20]
    5e66:	f003 0304 	and.w	r3, r3, #4
    5e6a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e6c:	9b05      	ldr	r3, [sp, #20]
    5e6e:	2b04      	cmp	r3, #4
    5e70:	d006      	beq.n	5e80 <Power_Ip_SMC_ModeConfig+0x168>
    5e72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e76:	f083 0301 	eor.w	r3, r3, #1
    5e7a:	b2db      	uxtb	r3, r3
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	d1e7      	bne.n	5e50 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e84:	2b00      	cmp	r3, #0
    5e86:	d00d      	beq.n	5ea4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e88:	2301      	movs	r3, #1
    5e8a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e8c:	21ff      	movs	r1, #255	; 0xff
    5e8e:	2000      	movs	r0, #0
    5e90:	f7ff fe20 	bl	5ad4 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e94:	e006      	b.n	5ea4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e96:	2301      	movs	r3, #1
    5e98:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e9a:	e004      	b.n	5ea6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e9c:	bf00      	nop
    5e9e:	e002      	b.n	5ea6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ea0:	bf00      	nop
    5ea2:	e000      	b.n	5ea6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ea4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5ea8:	4618      	mov	r0, r3
    5eaa:	b00b      	add	sp, #44	; 0x2c
    5eac:	f85d fb04 	ldr.w	pc, [sp], #4
    5eb0:	4007e000 	.word	0x4007e000

00005eb4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5eb4:	b500      	push	{lr}
    5eb6:	b085      	sub	sp, #20
    5eb8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5eba:	9b01      	ldr	r3, [sp, #4]
    5ebc:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5ebe:	9803      	ldr	r0, [sp, #12]
    5ec0:	f000 fbc8 	bl	6654 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5ec4:	4a03      	ldr	r2, [pc, #12]	; (5ed4 <Port_Init+0x20>)
    5ec6:	9b03      	ldr	r3, [sp, #12]
    5ec8:	6013      	str	r3, [r2, #0]
        }
    }
}
    5eca:	bf00      	nop
    5ecc:	b005      	add	sp, #20
    5ece:	f85d fb04 	ldr.w	pc, [sp], #4
    5ed2:	bf00      	nop
    5ed4:	1fff8cf4 	.word	0x1fff8cf4

00005ed8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5ed8:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5eda:	4b03      	ldr	r3, [pc, #12]	; (5ee8 <Port_RefreshPortDirection+0x10>)
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	4618      	mov	r0, r3
    5ee0:	f000 fc10 	bl	6704 <Port_Ipw_RefreshPortDirection>
    }
}
    5ee4:	bf00      	nop
    5ee6:	bd08      	pop	{r3, pc}
    5ee8:	1fff8cf4 	.word	0x1fff8cf4

00005eec <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5eec:	b086      	sub	sp, #24
    5eee:	9003      	str	r0, [sp, #12]
    5ef0:	9102      	str	r1, [sp, #8]
    5ef2:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5ef4:	23ff      	movs	r3, #255	; 0xff
    5ef6:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5ef8:	9b03      	ldr	r3, [sp, #12]
    5efa:	4a39      	ldr	r2, [pc, #228]	; (5fe0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5efc:	4293      	cmp	r3, r2
    5efe:	d151      	bne.n	5fa4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5f00:	9b02      	ldr	r3, [sp, #8]
    5f02:	2b10      	cmp	r3, #16
    5f04:	d867      	bhi.n	5fd6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5f06:	a201      	add	r2, pc, #4	; (adr r2, 5f0c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f0c:	00005f51 	.word	0x00005f51
    5f10:	00005f5f 	.word	0x00005f5f
    5f14:	00005fd7 	.word	0x00005fd7
    5f18:	00005fd7 	.word	0x00005fd7
    5f1c:	00005fd7 	.word	0x00005fd7
    5f20:	00005fd7 	.word	0x00005fd7
    5f24:	00005fd7 	.word	0x00005fd7
    5f28:	00005fd7 	.word	0x00005fd7
    5f2c:	00005fd7 	.word	0x00005fd7
    5f30:	00005fd7 	.word	0x00005fd7
    5f34:	00005fd7 	.word	0x00005fd7
    5f38:	00005fd7 	.word	0x00005fd7
    5f3c:	00005fd7 	.word	0x00005fd7
    5f40:	00005f6d 	.word	0x00005f6d
    5f44:	00005f7b 	.word	0x00005f7b
    5f48:	00005f89 	.word	0x00005f89
    5f4c:	00005f97 	.word	0x00005f97
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f50:	2301      	movs	r3, #1
    5f52:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f54:	9a05      	ldr	r2, [sp, #20]
    5f56:	9b01      	ldr	r3, [sp, #4]
    5f58:	4313      	orrs	r3, r2
    5f5a:	9305      	str	r3, [sp, #20]
                break;
    5f5c:	e03c      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f5e:	2302      	movs	r3, #2
    5f60:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f62:	9a05      	ldr	r2, [sp, #20]
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	4313      	orrs	r3, r2
    5f68:	9305      	str	r3, [sp, #20]
                break;
    5f6a:	e035      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f6c:	2304      	movs	r3, #4
    5f6e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f70:	9a05      	ldr	r2, [sp, #20]
    5f72:	9b01      	ldr	r3, [sp, #4]
    5f74:	4313      	orrs	r3, r2
    5f76:	9305      	str	r3, [sp, #20]
                break;
    5f78:	e02e      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f7a:	2308      	movs	r3, #8
    5f7c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f7e:	9a05      	ldr	r2, [sp, #20]
    5f80:	9b01      	ldr	r3, [sp, #4]
    5f82:	4313      	orrs	r3, r2
    5f84:	9305      	str	r3, [sp, #20]
                break;
    5f86:	e027      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f88:	230e      	movs	r3, #14
    5f8a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f8c:	9a05      	ldr	r2, [sp, #20]
    5f8e:	9b01      	ldr	r3, [sp, #4]
    5f90:	4013      	ands	r3, r2
    5f92:	9305      	str	r3, [sp, #20]
                break;
    5f94:	e020      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f96:	230d      	movs	r3, #13
    5f98:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f9a:	9a05      	ldr	r2, [sp, #20]
    5f9c:	9b01      	ldr	r3, [sp, #4]
    5f9e:	4013      	ands	r3, r2
    5fa0:	9305      	str	r3, [sp, #20]
                break;
    5fa2:	e019      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5fa4:	9b03      	ldr	r3, [sp, #12]
    5fa6:	4a0f      	ldr	r2, [pc, #60]	; (5fe4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5fa8:	4293      	cmp	r3, r2
    5faa:	d115      	bne.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5fac:	9b02      	ldr	r3, [sp, #8]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d003      	beq.n	5fba <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5fb2:	9b02      	ldr	r3, [sp, #8]
    5fb4:	2b01      	cmp	r3, #1
    5fb6:	d007      	beq.n	5fc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5fb8:	e00e      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5fba:	230b      	movs	r3, #11
    5fbc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fbe:	9a05      	ldr	r2, [sp, #20]
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	4013      	ands	r3, r2
    5fc4:	9305      	str	r3, [sp, #20]
                break;
    5fc6:	e007      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5fc8:	2307      	movs	r3, #7
    5fca:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fcc:	9a05      	ldr	r2, [sp, #20]
    5fce:	9b01      	ldr	r3, [sp, #4]
    5fd0:	4013      	ands	r3, r2
    5fd2:	9305      	str	r3, [sp, #20]
                break;
    5fd4:	e000      	b.n	5fd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5fd6:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5fd8:	9b05      	ldr	r3, [sp, #20]
}
    5fda:	4618      	mov	r0, r3
    5fdc:	b006      	add	sp, #24
    5fde:	4770      	bx	lr
    5fe0:	4004a000 	.word	0x4004a000
    5fe4:	4004b000 	.word	0x4004b000

00005fe8 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5fe8:	b500      	push	{lr}
    5fea:	b089      	sub	sp, #36	; 0x24
    5fec:	9003      	str	r0, [sp, #12]
    5fee:	9102      	str	r1, [sp, #8]
    5ff0:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5ff2:	9b01      	ldr	r3, [sp, #4]
    5ff4:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5ff6:	9b01      	ldr	r3, [sp, #4]
    5ff8:	2b08      	cmp	r3, #8
    5ffa:	d121      	bne.n	6040 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5ffc:	4b13      	ldr	r3, [pc, #76]	; (604c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5ffe:	685b      	ldr	r3, [r3, #4]
    6000:	f003 030f 	and.w	r3, r3, #15
    6004:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6006:	9a06      	ldr	r2, [sp, #24]
    6008:	9902      	ldr	r1, [sp, #8]
    600a:	9803      	ldr	r0, [sp, #12]
    600c:	f7ff ff6e 	bl	5eec <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6010:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6012:	9b05      	ldr	r3, [sp, #20]
    6014:	2bff      	cmp	r3, #255	; 0xff
    6016:	d011      	beq.n	603c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6018:	f00c f98e 	bl	12338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    601c:	4b0b      	ldr	r3, [pc, #44]	; (604c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    601e:	685b      	ldr	r3, [r3, #4]
    6020:	4a0a      	ldr	r2, [pc, #40]	; (604c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6022:	f023 030f 	bic.w	r3, r3, #15
    6026:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6028:	4b08      	ldr	r3, [pc, #32]	; (604c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    602a:	685a      	ldr	r2, [r3, #4]
    602c:	9b05      	ldr	r3, [sp, #20]
    602e:	f003 030f 	and.w	r3, r3, #15
    6032:	4906      	ldr	r1, [pc, #24]	; (604c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6034:	4313      	orrs	r3, r2
    6036:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6038:	f00c f9aa 	bl	12390 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    603c:	2300      	movs	r3, #0
    603e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6040:	9b07      	ldr	r3, [sp, #28]
}
    6042:	4618      	mov	r0, r3
    6044:	b009      	add	sp, #36	; 0x24
    6046:	f85d fb04 	ldr.w	pc, [sp], #4
    604a:	bf00      	nop
    604c:	40048000 	.word	0x40048000

00006050 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6050:	b500      	push	{lr}
    6052:	b087      	sub	sp, #28
    6054:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6056:	2300      	movs	r3, #0
    6058:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    605a:	2300      	movs	r3, #0
    605c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    605e:	2300      	movs	r3, #0
    6060:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6062:	9b01      	ldr	r3, [sp, #4]
    6064:	68db      	ldr	r3, [r3, #12]
    6066:	2b02      	cmp	r3, #2
    6068:	d00a      	beq.n	6080 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    606a:	9b05      	ldr	r3, [sp, #20]
    606c:	f043 0302 	orr.w	r3, r3, #2
    6070:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	68db      	ldr	r3, [r3, #12]
    6076:	f003 0301 	and.w	r3, r3, #1
    607a:	9a05      	ldr	r2, [sp, #20]
    607c:	4313      	orrs	r3, r2
    607e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6080:	9b01      	ldr	r3, [sp, #4]
    6082:	699b      	ldr	r3, [r3, #24]
    6084:	019b      	lsls	r3, r3, #6
    6086:	f003 0340 	and.w	r3, r3, #64	; 0x40
    608a:	9a05      	ldr	r2, [sp, #20]
    608c:	4313      	orrs	r3, r2
    608e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6090:	9b01      	ldr	r3, [sp, #4]
    6092:	6a1b      	ldr	r3, [r3, #32]
    6094:	03db      	lsls	r3, r3, #15
    6096:	b29b      	uxth	r3, r3
    6098:	9a05      	ldr	r2, [sp, #20]
    609a:	4313      	orrs	r3, r2
    609c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    609e:	9b01      	ldr	r3, [sp, #4]
    60a0:	7f1b      	ldrb	r3, [r3, #28]
    60a2:	2b00      	cmp	r3, #0
    60a4:	d001      	beq.n	60aa <Port_Ci_Port_Ip_PinInit+0x5a>
    60a6:	2310      	movs	r3, #16
    60a8:	e000      	b.n	60ac <Port_Ci_Port_Ip_PinInit+0x5c>
    60aa:	2300      	movs	r3, #0
    60ac:	9a05      	ldr	r2, [sp, #20]
    60ae:	4313      	orrs	r3, r2
    60b0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    60b2:	9b01      	ldr	r3, [sp, #4]
    60b4:	691b      	ldr	r3, [r3, #16]
    60b6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	6818      	ldr	r0, [r3, #0]
    60bc:	9b01      	ldr	r3, [sp, #4]
    60be:	689b      	ldr	r3, [r3, #8]
    60c0:	9a04      	ldr	r2, [sp, #16]
    60c2:	4619      	mov	r1, r3
    60c4:	f7ff ff90 	bl	5fe8 <Port_Ci_Port_Ip_ConfigureInterleave>
    60c8:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    60ca:	9b03      	ldr	r3, [sp, #12]
    60cc:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60ce:	9b04      	ldr	r3, [sp, #16]
    60d0:	021b      	lsls	r3, r3, #8
    60d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60d6:	9a05      	ldr	r2, [sp, #20]
    60d8:	4313      	orrs	r3, r2
    60da:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60dc:	f00b ff92 	bl	12004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    60e0:	9b01      	ldr	r3, [sp, #4]
    60e2:	681b      	ldr	r3, [r3, #0]
    60e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    60e8:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    60ea:	9b01      	ldr	r3, [sp, #4]
    60ec:	689b      	ldr	r3, [r3, #8]
    60ee:	2201      	movs	r2, #1
    60f0:	fa02 f303 	lsl.w	r3, r2, r3
    60f4:	43db      	mvns	r3, r3
    60f6:	9a02      	ldr	r2, [sp, #8]
    60f8:	4013      	ands	r3, r2
    60fa:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    60fc:	9b01      	ldr	r3, [sp, #4]
    60fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6102:	2b00      	cmp	r3, #0
    6104:	d001      	beq.n	610a <Port_Ci_Port_Ip_PinInit+0xba>
    6106:	2201      	movs	r2, #1
    6108:	e000      	b.n	610c <Port_Ci_Port_Ip_PinInit+0xbc>
    610a:	2200      	movs	r2, #0
    610c:	9b01      	ldr	r3, [sp, #4]
    610e:	689b      	ldr	r3, [r3, #8]
    6110:	fa02 f303 	lsl.w	r3, r2, r3
    6114:	9a02      	ldr	r2, [sp, #8]
    6116:	4313      	orrs	r3, r2
    6118:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    611a:	9b01      	ldr	r3, [sp, #4]
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	9a02      	ldr	r2, [sp, #8]
    6120:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6124:	f00b ff9a 	bl	1205c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6128:	9b04      	ldr	r3, [sp, #16]
    612a:	2b01      	cmp	r3, #1
    612c:	d16d      	bne.n	620a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	695b      	ldr	r3, [r3, #20]
    6132:	2b02      	cmp	r3, #2
    6134:	d138      	bne.n	61a8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6136:	9b01      	ldr	r3, [sp, #4]
    6138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    613c:	2b01      	cmp	r3, #1
    613e:	d10f      	bne.n	6160 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6140:	f00b ffb2 	bl	120a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	685b      	ldr	r3, [r3, #4]
    6148:	6859      	ldr	r1, [r3, #4]
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	689b      	ldr	r3, [r3, #8]
    614e:	2201      	movs	r2, #1
    6150:	409a      	lsls	r2, r3
    6152:	9b01      	ldr	r3, [sp, #4]
    6154:	685b      	ldr	r3, [r3, #4]
    6156:	430a      	orrs	r2, r1
    6158:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    615a:	f00b ffd1 	bl	12100 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    615e:	e013      	b.n	6188 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6160:	9b01      	ldr	r3, [sp, #4]
    6162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6166:	2b00      	cmp	r3, #0
    6168:	d10e      	bne.n	6188 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    616a:	f00b ffef 	bl	1214c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	685b      	ldr	r3, [r3, #4]
    6172:	6899      	ldr	r1, [r3, #8]
    6174:	9b01      	ldr	r3, [sp, #4]
    6176:	689b      	ldr	r3, [r3, #8]
    6178:	2201      	movs	r2, #1
    617a:	409a      	lsls	r2, r3
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	685b      	ldr	r3, [r3, #4]
    6180:	430a      	orrs	r2, r1
    6182:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6184:	f00c f80e 	bl	121a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6188:	f00c f832 	bl	121f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    618c:	9b01      	ldr	r3, [sp, #4]
    618e:	685b      	ldr	r3, [r3, #4]
    6190:	6959      	ldr	r1, [r3, #20]
    6192:	9b01      	ldr	r3, [sp, #4]
    6194:	689b      	ldr	r3, [r3, #8]
    6196:	2201      	movs	r2, #1
    6198:	409a      	lsls	r2, r3
    619a:	9b01      	ldr	r3, [sp, #4]
    619c:	685b      	ldr	r3, [r3, #4]
    619e:	430a      	orrs	r2, r1
    61a0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61a2:	f00c f851 	bl	12248 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    61a6:	e030      	b.n	620a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61a8:	f00c f822 	bl	121f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	685b      	ldr	r3, [r3, #4]
    61b0:	6959      	ldr	r1, [r3, #20]
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	689b      	ldr	r3, [r3, #8]
    61b6:	2201      	movs	r2, #1
    61b8:	fa02 f303 	lsl.w	r3, r2, r3
    61bc:	43da      	mvns	r2, r3
    61be:	9b01      	ldr	r3, [sp, #4]
    61c0:	685b      	ldr	r3, [r3, #4]
    61c2:	400a      	ands	r2, r1
    61c4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61c6:	f00c f83f 	bl	12248 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    61ca:	f00c f863 	bl	12294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61ce:	9b01      	ldr	r3, [sp, #4]
    61d0:	685b      	ldr	r3, [r3, #4]
    61d2:	6999      	ldr	r1, [r3, #24]
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	689b      	ldr	r3, [r3, #8]
    61d8:	2201      	movs	r2, #1
    61da:	fa02 f303 	lsl.w	r3, r2, r3
    61de:	43da      	mvns	r2, r3
    61e0:	9b01      	ldr	r3, [sp, #4]
    61e2:	685b      	ldr	r3, [r3, #4]
    61e4:	400a      	ands	r2, r1
    61e6:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    61e8:	9b01      	ldr	r3, [sp, #4]
    61ea:	695b      	ldr	r3, [r3, #20]
    61ec:	2b03      	cmp	r3, #3
    61ee:	d10a      	bne.n	6206 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    61f0:	9b01      	ldr	r3, [sp, #4]
    61f2:	685b      	ldr	r3, [r3, #4]
    61f4:	6999      	ldr	r1, [r3, #24]
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	689b      	ldr	r3, [r3, #8]
    61fa:	2201      	movs	r2, #1
    61fc:	409a      	lsls	r2, r3
    61fe:	9b01      	ldr	r3, [sp, #4]
    6200:	685b      	ldr	r3, [r3, #4]
    6202:	430a      	orrs	r2, r1
    6204:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6206:	f00c f871 	bl	122ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    620a:	9b01      	ldr	r3, [sp, #4]
    620c:	681b      	ldr	r3, [r3, #0]
    620e:	9a01      	ldr	r2, [sp, #4]
    6210:	6892      	ldr	r2, [r2, #8]
    6212:	9905      	ldr	r1, [sp, #20]
    6214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6218:	bf00      	nop
    621a:	b007      	add	sp, #28
    621c:	f85d fb04 	ldr.w	pc, [sp], #4

00006220 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6220:	b500      	push	{lr}
    6222:	b085      	sub	sp, #20
    6224:	9001      	str	r0, [sp, #4]
    6226:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6228:	2300      	movs	r3, #0
    622a:	9303      	str	r3, [sp, #12]
    622c:	e00d      	b.n	624a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    622e:	9a03      	ldr	r2, [sp, #12]
    6230:	4613      	mov	r3, r2
    6232:	009b      	lsls	r3, r3, #2
    6234:	4413      	add	r3, r2
    6236:	00db      	lsls	r3, r3, #3
    6238:	461a      	mov	r2, r3
    623a:	9b00      	ldr	r3, [sp, #0]
    623c:	4413      	add	r3, r2
    623e:	4618      	mov	r0, r3
    6240:	f7ff ff06 	bl	6050 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6244:	9b03      	ldr	r3, [sp, #12]
    6246:	3301      	adds	r3, #1
    6248:	9303      	str	r3, [sp, #12]
    624a:	9a03      	ldr	r2, [sp, #12]
    624c:	9b01      	ldr	r3, [sp, #4]
    624e:	429a      	cmp	r2, r3
    6250:	d3ed      	bcc.n	622e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6252:	2300      	movs	r3, #0
}
    6254:	4618      	mov	r0, r3
    6256:	b005      	add	sp, #20
    6258:	f85d fb04 	ldr.w	pc, [sp], #4

0000625c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    625c:	b500      	push	{lr}
    625e:	b087      	sub	sp, #28
    6260:	9003      	str	r0, [sp, #12]
    6262:	9102      	str	r1, [sp, #8]
    6264:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6266:	9a01      	ldr	r2, [sp, #4]
    6268:	9902      	ldr	r1, [sp, #8]
    626a:	9803      	ldr	r0, [sp, #12]
    626c:	f7ff febc 	bl	5fe8 <Port_Ci_Port_Ip_ConfigureInterleave>
    6270:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6272:	f00c f8b3 	bl	123dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6276:	9b03      	ldr	r3, [sp, #12]
    6278:	9a02      	ldr	r2, [sp, #8]
    627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    627e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6280:	9b04      	ldr	r3, [sp, #16]
    6282:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6286:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6288:	9b05      	ldr	r3, [sp, #20]
    628a:	021b      	lsls	r3, r3, #8
    628c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6290:	9a04      	ldr	r2, [sp, #16]
    6292:	4313      	orrs	r3, r2
    6294:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6296:	9b03      	ldr	r3, [sp, #12]
    6298:	9a02      	ldr	r2, [sp, #8]
    629a:	9904      	ldr	r1, [sp, #16]
    629c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    62a0:	f00c f8c8 	bl	12434 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    62a4:	bf00      	nop
    62a6:	b007      	add	sp, #28
    62a8:	f85d fb04 	ldr.w	pc, [sp], #4

000062ac <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62ac:	b500      	push	{lr}
    62ae:	b083      	sub	sp, #12
    62b0:	9001      	str	r0, [sp, #4]
    62b2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62b4:	f00c f8e4 	bl	12480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62b8:	9b01      	ldr	r3, [sp, #4]
    62ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62be:	2101      	movs	r1, #1
    62c0:	9b00      	ldr	r3, [sp, #0]
    62c2:	fa01 f303 	lsl.w	r3, r1, r3
    62c6:	431a      	orrs	r2, r3
    62c8:	9b01      	ldr	r3, [sp, #4]
    62ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62ce:	f00c f903 	bl	124d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62d2:	bf00      	nop
    62d4:	b003      	add	sp, #12
    62d6:	f85d fb04 	ldr.w	pc, [sp], #4

000062da <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62da:	b500      	push	{lr}
    62dc:	b083      	sub	sp, #12
    62de:	9001      	str	r0, [sp, #4]
    62e0:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    62e2:	f00c f91f 	bl	12524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    62e6:	9b01      	ldr	r3, [sp, #4]
    62e8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62ec:	2101      	movs	r1, #1
    62ee:	9b00      	ldr	r3, [sp, #0]
    62f0:	fa01 f303 	lsl.w	r3, r1, r3
    62f4:	43db      	mvns	r3, r3
    62f6:	401a      	ands	r2, r3
    62f8:	9b01      	ldr	r3, [sp, #4]
    62fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    62fe:	f00c f93d 	bl	1257c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6302:	bf00      	nop
    6304:	b003      	add	sp, #12
    6306:	f85d fb04 	ldr.w	pc, [sp], #4

0000630a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    630a:	b082      	sub	sp, #8
    630c:	9001      	str	r0, [sp, #4]
    630e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6310:	9b00      	ldr	r3, [sp, #0]
    6312:	785b      	ldrb	r3, [r3, #1]
    6314:	f003 0201 	and.w	r2, r3, #1
    6318:	9b01      	ldr	r3, [sp, #4]
    631a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    631e:	9b00      	ldr	r3, [sp, #0]
    6320:	789b      	ldrb	r3, [r3, #2]
    6322:	f003 021f 	and.w	r2, r3, #31
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    632c:	bf00      	nop
    632e:	b002      	add	sp, #8
    6330:	4770      	bx	lr

00006332 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6332:	b086      	sub	sp, #24
    6334:	9003      	str	r0, [sp, #12]
    6336:	9301      	str	r3, [sp, #4]
    6338:	460b      	mov	r3, r1
    633a:	f8ad 300a 	strh.w	r3, [sp, #10]
    633e:	4613      	mov	r3, r2
    6340:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6344:	2300      	movs	r3, #0
    6346:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    634a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    634e:	f043 0301 	orr.w	r3, r3, #1
    6352:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6356:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    635a:	f043 0302 	orr.w	r3, r3, #2
    635e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6362:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6366:	f043 0310 	orr.w	r3, r3, #16
    636a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    636e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6376:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    637a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    637e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6382:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6386:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    638a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    638e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6392:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6396:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    639a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    639e:	4013      	ands	r3, r2
    63a0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    63a4:	9b01      	ldr	r3, [sp, #4]
    63a6:	2b00      	cmp	r3, #0
    63a8:	d003      	beq.n	63b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    63aa:	9b01      	ldr	r3, [sp, #4]
    63ac:	2b01      	cmp	r3, #1
    63ae:	d00a      	beq.n	63c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    63b0:	e013      	b.n	63da <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    63b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63b6:	041a      	lsls	r2, r3, #16
    63b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63bc:	431a      	orrs	r2, r3
    63be:	9b03      	ldr	r3, [sp, #12]
    63c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    63c4:	e009      	b.n	63da <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    63c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63ca:	041a      	lsls	r2, r3, #16
    63cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63d0:	431a      	orrs	r2, r3
    63d2:	9b03      	ldr	r3, [sp, #12]
    63d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63d8:	bf00      	nop
    }
}
    63da:	bf00      	nop
    63dc:	b006      	add	sp, #24
    63de:	4770      	bx	lr

000063e0 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    63e0:	b500      	push	{lr}
    63e2:	b087      	sub	sp, #28
    63e4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	885b      	ldrh	r3, [r3, #2]
    63ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    63ee:	9b01      	ldr	r3, [sp, #4]
    63f0:	689b      	ldr	r3, [r3, #8]
    63f2:	7a1b      	ldrb	r3, [r3, #8]
    63f4:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    63f8:	9b01      	ldr	r3, [sp, #4]
    63fa:	689b      	ldr	r3, [r3, #8]
    63fc:	681b      	ldr	r3, [r3, #0]
    63fe:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6400:	9b01      	ldr	r3, [sp, #4]
    6402:	689b      	ldr	r3, [r3, #8]
    6404:	685b      	ldr	r3, [r3, #4]
    6406:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6408:	2300      	movs	r3, #0
    640a:	f8ad 3016 	strh.w	r3, [sp, #22]
    640e:	e111      	b.n	6634 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6410:	9b02      	ldr	r3, [sp, #8]
    6412:	2b02      	cmp	r3, #2
    6414:	d169      	bne.n	64ea <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6416:	f89d 3013 	ldrb.w	r3, [sp, #19]
    641a:	2b01      	cmp	r3, #1
    641c:	d11a      	bne.n	6454 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    641e:	9b01      	ldr	r3, [sp, #4]
    6420:	685a      	ldr	r2, [r3, #4]
    6422:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6426:	005b      	lsls	r3, r3, #1
    6428:	4413      	add	r3, r2
    642a:	881b      	ldrh	r3, [r3, #0]
    642c:	f003 021f 	and.w	r2, r3, #31
    6430:	9b01      	ldr	r3, [sp, #4]
    6432:	6859      	ldr	r1, [r3, #4]
    6434:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6438:	005b      	lsls	r3, r3, #1
    643a:	440b      	add	r3, r1
    643c:	881b      	ldrh	r3, [r3, #0]
    643e:	095b      	lsrs	r3, r3, #5
    6440:	b29b      	uxth	r3, r3
    6442:	4619      	mov	r1, r3
    6444:	4b81      	ldr	r3, [pc, #516]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    6446:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    644a:	2101      	movs	r1, #1
    644c:	fa01 f202 	lsl.w	r2, r1, r2
    6450:	605a      	str	r2, [r3, #4]
    6452:	e01d      	b.n	6490 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6454:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6458:	2b00      	cmp	r3, #0
    645a:	d119      	bne.n	6490 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    645c:	9b01      	ldr	r3, [sp, #4]
    645e:	685a      	ldr	r2, [r3, #4]
    6460:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6464:	005b      	lsls	r3, r3, #1
    6466:	4413      	add	r3, r2
    6468:	881b      	ldrh	r3, [r3, #0]
    646a:	f003 021f 	and.w	r2, r3, #31
    646e:	9b01      	ldr	r3, [sp, #4]
    6470:	6859      	ldr	r1, [r3, #4]
    6472:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6476:	005b      	lsls	r3, r3, #1
    6478:	440b      	add	r3, r1
    647a:	881b      	ldrh	r3, [r3, #0]
    647c:	095b      	lsrs	r3, r3, #5
    647e:	b29b      	uxth	r3, r3
    6480:	4619      	mov	r1, r3
    6482:	4b72      	ldr	r3, [pc, #456]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    6484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6488:	2101      	movs	r1, #1
    648a:	fa01 f202 	lsl.w	r2, r1, r2
    648e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6490:	f00c f89a 	bl	125c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6494:	9b01      	ldr	r3, [sp, #4]
    6496:	685a      	ldr	r2, [r3, #4]
    6498:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    649c:	005b      	lsls	r3, r3, #1
    649e:	4413      	add	r3, r2
    64a0:	881b      	ldrh	r3, [r3, #0]
    64a2:	095b      	lsrs	r3, r3, #5
    64a4:	b29b      	uxth	r3, r3
    64a6:	461a      	mov	r2, r3
    64a8:	4b68      	ldr	r3, [pc, #416]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    64aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64ae:	6959      	ldr	r1, [r3, #20]
    64b0:	9b01      	ldr	r3, [sp, #4]
    64b2:	685a      	ldr	r2, [r3, #4]
    64b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64b8:	005b      	lsls	r3, r3, #1
    64ba:	4413      	add	r3, r2
    64bc:	881b      	ldrh	r3, [r3, #0]
    64be:	f003 031f 	and.w	r3, r3, #31
    64c2:	2201      	movs	r2, #1
    64c4:	409a      	lsls	r2, r3
    64c6:	9b01      	ldr	r3, [sp, #4]
    64c8:	6858      	ldr	r0, [r3, #4]
    64ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ce:	005b      	lsls	r3, r3, #1
    64d0:	4403      	add	r3, r0
    64d2:	881b      	ldrh	r3, [r3, #0]
    64d4:	095b      	lsrs	r3, r3, #5
    64d6:	b29b      	uxth	r3, r3
    64d8:	4618      	mov	r0, r3
    64da:	4b5c      	ldr	r3, [pc, #368]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    64dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64e0:	430a      	orrs	r2, r1
    64e2:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64e4:	f00c f89c 	bl	12620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    64e8:	e086      	b.n	65f8 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64ea:	f00c f86d 	bl	125c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    64ee:	9b01      	ldr	r3, [sp, #4]
    64f0:	685a      	ldr	r2, [r3, #4]
    64f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64f6:	005b      	lsls	r3, r3, #1
    64f8:	4413      	add	r3, r2
    64fa:	881b      	ldrh	r3, [r3, #0]
    64fc:	095b      	lsrs	r3, r3, #5
    64fe:	b29b      	uxth	r3, r3
    6500:	461a      	mov	r2, r3
    6502:	4b52      	ldr	r3, [pc, #328]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    6504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6508:	6959      	ldr	r1, [r3, #20]
    650a:	9b01      	ldr	r3, [sp, #4]
    650c:	685a      	ldr	r2, [r3, #4]
    650e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6512:	005b      	lsls	r3, r3, #1
    6514:	4413      	add	r3, r2
    6516:	881b      	ldrh	r3, [r3, #0]
    6518:	f003 031f 	and.w	r3, r3, #31
    651c:	2201      	movs	r2, #1
    651e:	fa02 f303 	lsl.w	r3, r2, r3
    6522:	43da      	mvns	r2, r3
    6524:	9b01      	ldr	r3, [sp, #4]
    6526:	6858      	ldr	r0, [r3, #4]
    6528:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    652c:	005b      	lsls	r3, r3, #1
    652e:	4403      	add	r3, r0
    6530:	881b      	ldrh	r3, [r3, #0]
    6532:	095b      	lsrs	r3, r3, #5
    6534:	b29b      	uxth	r3, r3
    6536:	4618      	mov	r0, r3
    6538:	4b44      	ldr	r3, [pc, #272]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    653a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    653e:	400a      	ands	r2, r1
    6540:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6542:	f00c f86d 	bl	12620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6546:	f00c f891 	bl	1266c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    654a:	9b01      	ldr	r3, [sp, #4]
    654c:	685a      	ldr	r2, [r3, #4]
    654e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6552:	005b      	lsls	r3, r3, #1
    6554:	4413      	add	r3, r2
    6556:	881b      	ldrh	r3, [r3, #0]
    6558:	095b      	lsrs	r3, r3, #5
    655a:	b29b      	uxth	r3, r3
    655c:	461a      	mov	r2, r3
    655e:	4b3b      	ldr	r3, [pc, #236]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    6560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6564:	6999      	ldr	r1, [r3, #24]
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	685a      	ldr	r2, [r3, #4]
    656a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    656e:	005b      	lsls	r3, r3, #1
    6570:	4413      	add	r3, r2
    6572:	881b      	ldrh	r3, [r3, #0]
    6574:	f003 031f 	and.w	r3, r3, #31
    6578:	2201      	movs	r2, #1
    657a:	fa02 f303 	lsl.w	r3, r2, r3
    657e:	43da      	mvns	r2, r3
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	6858      	ldr	r0, [r3, #4]
    6584:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6588:	005b      	lsls	r3, r3, #1
    658a:	4403      	add	r3, r0
    658c:	881b      	ldrh	r3, [r3, #0]
    658e:	095b      	lsrs	r3, r3, #5
    6590:	b29b      	uxth	r3, r3
    6592:	4618      	mov	r0, r3
    6594:	4b2d      	ldr	r3, [pc, #180]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    6596:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    659a:	400a      	ands	r2, r1
    659c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    659e:	9b02      	ldr	r3, [sp, #8]
    65a0:	2b03      	cmp	r3, #3
    65a2:	d127      	bne.n	65f4 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    65a4:	9b01      	ldr	r3, [sp, #4]
    65a6:	685a      	ldr	r2, [r3, #4]
    65a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65ac:	005b      	lsls	r3, r3, #1
    65ae:	4413      	add	r3, r2
    65b0:	881b      	ldrh	r3, [r3, #0]
    65b2:	095b      	lsrs	r3, r3, #5
    65b4:	b29b      	uxth	r3, r3
    65b6:	461a      	mov	r2, r3
    65b8:	4b24      	ldr	r3, [pc, #144]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    65ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65be:	6999      	ldr	r1, [r3, #24]
    65c0:	9b01      	ldr	r3, [sp, #4]
    65c2:	685a      	ldr	r2, [r3, #4]
    65c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65c8:	005b      	lsls	r3, r3, #1
    65ca:	4413      	add	r3, r2
    65cc:	881b      	ldrh	r3, [r3, #0]
    65ce:	f003 031f 	and.w	r3, r3, #31
    65d2:	2201      	movs	r2, #1
    65d4:	409a      	lsls	r2, r3
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	6858      	ldr	r0, [r3, #4]
    65da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65de:	005b      	lsls	r3, r3, #1
    65e0:	4403      	add	r3, r0
    65e2:	881b      	ldrh	r3, [r3, #0]
    65e4:	095b      	lsrs	r3, r3, #5
    65e6:	b29b      	uxth	r3, r3
    65e8:	4618      	mov	r0, r3
    65ea:	4b18      	ldr	r3, [pc, #96]	; (664c <Port_Ipw_Init_UnusedPins+0x26c>)
    65ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65f0:	430a      	orrs	r2, r1
    65f2:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    65f4:	f00c f866 	bl	126c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	685a      	ldr	r2, [r3, #4]
    65fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6600:	005b      	lsls	r3, r3, #1
    6602:	4413      	add	r3, r2
    6604:	881b      	ldrh	r3, [r3, #0]
    6606:	095b      	lsrs	r3, r3, #5
    6608:	b29b      	uxth	r3, r3
    660a:	461a      	mov	r2, r3
    660c:	4b10      	ldr	r3, [pc, #64]	; (6650 <Port_Ipw_Init_UnusedPins+0x270>)
    660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6612:	9a01      	ldr	r2, [sp, #4]
    6614:	6851      	ldr	r1, [r2, #4]
    6616:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    661a:	0052      	lsls	r2, r2, #1
    661c:	440a      	add	r2, r1
    661e:	8812      	ldrh	r2, [r2, #0]
    6620:	f002 021f 	and.w	r2, r2, #31
    6624:	9903      	ldr	r1, [sp, #12]
    6626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    662a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    662e:	3301      	adds	r3, #1
    6630:	f8ad 3016 	strh.w	r3, [sp, #22]
    6634:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6638:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    663c:	429a      	cmp	r2, r3
    663e:	f4ff aee7 	bcc.w	6410 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6642:	bf00      	nop
    6644:	bf00      	nop
    6646:	b007      	add	sp, #28
    6648:	f85d fb04 	ldr.w	pc, [sp], #4
    664c:	000151a4 	.word	0x000151a4
    6650:	00015190 	.word	0x00015190

00006654 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6654:	b500      	push	{lr}
    6656:	b085      	sub	sp, #20
    6658:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	7c1b      	ldrb	r3, [r3, #16]
    665e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6662:	2300      	movs	r3, #0
    6664:	f8ad 300e 	strh.w	r3, [sp, #14]
    6668:	e035      	b.n	66d6 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    666a:	9b01      	ldr	r3, [sp, #4]
    666c:	695a      	ldr	r2, [r3, #20]
    666e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6672:	00db      	lsls	r3, r3, #3
    6674:	4413      	add	r3, r2
    6676:	781b      	ldrb	r3, [r3, #0]
    6678:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    667c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6680:	4a1f      	ldr	r2, [pc, #124]	; (6700 <Port_Ipw_Init+0xac>)
    6682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6686:	9b01      	ldr	r3, [sp, #4]
    6688:	695a      	ldr	r2, [r3, #20]
    668a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    668e:	00db      	lsls	r3, r3, #3
    6690:	4413      	add	r3, r2
    6692:	4619      	mov	r1, r3
    6694:	f7ff fe39 	bl	630a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6698:	f00c f982 	bl	129a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    669c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66a0:	4a17      	ldr	r2, [pc, #92]	; (6700 <Port_Ipw_Init+0xac>)
    66a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    66aa:	9b01      	ldr	r3, [sp, #4]
    66ac:	695a      	ldr	r2, [r3, #20]
    66ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66b2:	00db      	lsls	r3, r3, #3
    66b4:	4413      	add	r3, r2
    66b6:	685a      	ldr	r2, [r3, #4]
    66b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66bc:	4810      	ldr	r0, [pc, #64]	; (6700 <Port_Ipw_Init+0xac>)
    66be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66c2:	430a      	orrs	r2, r1
    66c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    66c8:	f00c f996 	bl	129f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66d0:	3301      	adds	r3, #1
    66d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    66d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66da:	b29b      	uxth	r3, r3
    66dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66e0:	429a      	cmp	r2, r3
    66e2:	d3c2      	bcc.n	666a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	6a1b      	ldr	r3, [r3, #32]
    66e8:	4619      	mov	r1, r3
    66ea:	2005      	movs	r0, #5
    66ec:	f7ff fd98 	bl	6220 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    66f0:	9801      	ldr	r0, [sp, #4]
    66f2:	f7ff fe75 	bl	63e0 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    66f6:	bf00      	nop
    66f8:	b005      	add	sp, #20
    66fa:	f85d fb04 	ldr.w	pc, [sp], #4
    66fe:	bf00      	nop
    6700:	00015190 	.word	0x00015190

00006704 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6704:	b500      	push	{lr}
    6706:	b085      	sub	sp, #20
    6708:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    670a:	9b01      	ldr	r3, [sp, #4]
    670c:	881b      	ldrh	r3, [r3, #0]
    670e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6712:	2300      	movs	r3, #0
    6714:	f8ad 300e 	strh.w	r3, [sp, #14]
    6718:	e0d2      	b.n	68c0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    671a:	9b01      	ldr	r3, [sp, #4]
    671c:	68d9      	ldr	r1, [r3, #12]
    671e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6722:	4613      	mov	r3, r2
    6724:	009b      	lsls	r3, r3, #2
    6726:	4413      	add	r3, r2
    6728:	009b      	lsls	r3, r3, #2
    672a:	440b      	add	r3, r1
    672c:	7c5b      	ldrb	r3, [r3, #17]
    672e:	f083 0301 	eor.w	r3, r3, #1
    6732:	b2db      	uxtb	r3, r3
    6734:	2b00      	cmp	r3, #0
    6736:	f000 80be 	beq.w	68b6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    673a:	9b01      	ldr	r3, [sp, #4]
    673c:	68d9      	ldr	r1, [r3, #12]
    673e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6742:	4613      	mov	r3, r2
    6744:	009b      	lsls	r3, r3, #2
    6746:	4413      	add	r3, r2
    6748:	009b      	lsls	r3, r3, #2
    674a:	440b      	add	r3, r1
    674c:	7c1b      	ldrb	r3, [r3, #16]
    674e:	2b00      	cmp	r3, #0
    6750:	f000 80b1 	beq.w	68b6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6754:	9b01      	ldr	r3, [sp, #4]
    6756:	68d9      	ldr	r1, [r3, #12]
    6758:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    675c:	4613      	mov	r3, r2
    675e:	009b      	lsls	r3, r3, #2
    6760:	4413      	add	r3, r2
    6762:	009b      	lsls	r3, r3, #2
    6764:	440b      	add	r3, r1
    6766:	881b      	ldrh	r3, [r3, #0]
    6768:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    676c:	9b01      	ldr	r3, [sp, #4]
    676e:	68d9      	ldr	r1, [r3, #12]
    6770:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6774:	4613      	mov	r3, r2
    6776:	009b      	lsls	r3, r3, #2
    6778:	4413      	add	r3, r2
    677a:	009b      	lsls	r3, r3, #2
    677c:	440b      	add	r3, r1
    677e:	68db      	ldr	r3, [r3, #12]
    6780:	2b02      	cmp	r3, #2
    6782:	d11d      	bne.n	67c0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6784:	f00c fa54 	bl	12c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6788:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    678c:	095b      	lsrs	r3, r3, #5
    678e:	b29b      	uxth	r3, r3
    6790:	461a      	mov	r2, r3
    6792:	4b51      	ldr	r3, [pc, #324]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6798:	6959      	ldr	r1, [r3, #20]
    679a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    679e:	f003 031f 	and.w	r3, r3, #31
    67a2:	2201      	movs	r2, #1
    67a4:	409a      	lsls	r2, r3
    67a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67aa:	095b      	lsrs	r3, r3, #5
    67ac:	b29b      	uxth	r3, r3
    67ae:	4618      	mov	r0, r3
    67b0:	4b49      	ldr	r3, [pc, #292]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67b6:	430a      	orrs	r2, r1
    67b8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67ba:	f00c fa65 	bl	12c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    67be:	e07a      	b.n	68b6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	68d9      	ldr	r1, [r3, #12]
    67c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67c8:	4613      	mov	r3, r2
    67ca:	009b      	lsls	r3, r3, #2
    67cc:	4413      	add	r3, r2
    67ce:	009b      	lsls	r3, r3, #2
    67d0:	440b      	add	r3, r1
    67d2:	68db      	ldr	r3, [r3, #12]
    67d4:	2b01      	cmp	r3, #1
    67d6:	d00b      	beq.n	67f0 <Port_Ipw_RefreshPortDirection+0xec>
    67d8:	9b01      	ldr	r3, [sp, #4]
    67da:	68d9      	ldr	r1, [r3, #12]
    67dc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67e0:	4613      	mov	r3, r2
    67e2:	009b      	lsls	r3, r3, #2
    67e4:	4413      	add	r3, r2
    67e6:	009b      	lsls	r3, r3, #2
    67e8:	440b      	add	r3, r1
    67ea:	68db      	ldr	r3, [r3, #12]
    67ec:	2b03      	cmp	r3, #3
    67ee:	d162      	bne.n	68b6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67f0:	f00c fa1e 	bl	12c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67f8:	095b      	lsrs	r3, r3, #5
    67fa:	b29b      	uxth	r3, r3
    67fc:	461a      	mov	r2, r3
    67fe:	4b36      	ldr	r3, [pc, #216]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6804:	6959      	ldr	r1, [r3, #20]
    6806:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    680a:	f003 031f 	and.w	r3, r3, #31
    680e:	2201      	movs	r2, #1
    6810:	fa02 f303 	lsl.w	r3, r2, r3
    6814:	43da      	mvns	r2, r3
    6816:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    681a:	095b      	lsrs	r3, r3, #5
    681c:	b29b      	uxth	r3, r3
    681e:	4618      	mov	r0, r3
    6820:	4b2d      	ldr	r3, [pc, #180]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6822:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6826:	400a      	ands	r2, r1
    6828:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    682a:	f00c fa2d 	bl	12c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    682e:	f00c fa51 	bl	12cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6832:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6836:	095b      	lsrs	r3, r3, #5
    6838:	b29b      	uxth	r3, r3
    683a:	461a      	mov	r2, r3
    683c:	4b26      	ldr	r3, [pc, #152]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6842:	6999      	ldr	r1, [r3, #24]
    6844:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6848:	f003 031f 	and.w	r3, r3, #31
    684c:	2201      	movs	r2, #1
    684e:	fa02 f303 	lsl.w	r3, r2, r3
    6852:	43da      	mvns	r2, r3
    6854:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6858:	095b      	lsrs	r3, r3, #5
    685a:	b29b      	uxth	r3, r3
    685c:	4618      	mov	r0, r3
    685e:	4b1e      	ldr	r3, [pc, #120]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6860:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6864:	400a      	ands	r2, r1
    6866:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6868:	9b01      	ldr	r3, [sp, #4]
    686a:	68d9      	ldr	r1, [r3, #12]
    686c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6870:	4613      	mov	r3, r2
    6872:	009b      	lsls	r3, r3, #2
    6874:	4413      	add	r3, r2
    6876:	009b      	lsls	r3, r3, #2
    6878:	440b      	add	r3, r1
    687a:	68db      	ldr	r3, [r3, #12]
    687c:	2b03      	cmp	r3, #3
    687e:	d118      	bne.n	68b2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6880:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6884:	095b      	lsrs	r3, r3, #5
    6886:	b29b      	uxth	r3, r3
    6888:	461a      	mov	r2, r3
    688a:	4b13      	ldr	r3, [pc, #76]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6890:	6999      	ldr	r1, [r3, #24]
    6892:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6896:	f003 031f 	and.w	r3, r3, #31
    689a:	2201      	movs	r2, #1
    689c:	409a      	lsls	r2, r3
    689e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68a2:	095b      	lsrs	r3, r3, #5
    68a4:	b29b      	uxth	r3, r3
    68a6:	4618      	mov	r0, r3
    68a8:	4b0b      	ldr	r3, [pc, #44]	; (68d8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    68aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68ae:	430a      	orrs	r2, r1
    68b0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    68b2:	f00c fa3b 	bl	12d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68ba:	3301      	adds	r3, #1
    68bc:	f8ad 300e 	strh.w	r3, [sp, #14]
    68c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    68c8:	429a      	cmp	r2, r3
    68ca:	f4ff af26 	bcc.w	671a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68ce:	bf00      	nop
    68d0:	bf00      	nop
    68d2:	b005      	add	sp, #20
    68d4:	f85d fb04 	ldr.w	pc, [sp], #4
    68d8:	000151a4 	.word	0x000151a4

000068dc <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    68dc:	b500      	push	{lr}
    68de:	b083      	sub	sp, #12
    68e0:	4603      	mov	r3, r0
    68e2:	460a      	mov	r2, r1
    68e4:	f88d 3007 	strb.w	r3, [sp, #7]
    68e8:	4613      	mov	r3, r2
    68ea:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    68ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    68f6:	2100      	movs	r1, #0
    68f8:	207b      	movs	r0, #123	; 0x7b
    68fa:	f00d ffed 	bl	148d8 <Det_ReportRuntimeError>
}
    68fe:	bf00      	nop
    6900:	b003      	add	sp, #12
    6902:	f85d fb04 	ldr.w	pc, [sp], #4

00006906 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    6906:	b500      	push	{lr}
    6908:	b085      	sub	sp, #20
    690a:	4603      	mov	r3, r0
    690c:	460a      	mov	r2, r1
    690e:	f88d 3007 	strb.w	r3, [sp, #7]
    6912:	4613      	mov	r3, r2
    6914:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6918:	2300      	movs	r3, #0
    691a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    691e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6922:	4a0c      	ldr	r2, [pc, #48]	; (6954 <Adc_ValidateNotBusyNoQueue+0x4e>)
    6924:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6928:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    692c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6930:	2b00      	cmp	r3, #0
    6932:	d008      	beq.n	6946 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6934:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6938:	210b      	movs	r1, #11
    693a:	4618      	mov	r0, r3
    693c:	f7ff ffce 	bl	68dc <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    6940:	2301      	movs	r3, #1
    6942:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    6946:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    694a:	4618      	mov	r0, r3
    694c:	b005      	add	sp, #20
    694e:	f85d fb04 	ldr.w	pc, [sp], #4
    6952:	bf00      	nop
    6954:	1fff8d10 	.word	0x1fff8d10

00006958 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    6958:	b500      	push	{lr}
    695a:	b085      	sub	sp, #20
    695c:	4603      	mov	r3, r0
    695e:	f8ad 3006 	strh.w	r3, [sp, #6]
    6962:	460b      	mov	r3, r1
    6964:	f88d 3005 	strb.w	r3, [sp, #5]
    6968:	4613      	mov	r3, r2
    696a:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    696e:	2301      	movs	r3, #1
    6970:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    6974:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6978:	4917      	ldr	r1, [pc, #92]	; (69d8 <Adc_ValidateNotBusyNoPrio+0x80>)
    697a:	4613      	mov	r3, r2
    697c:	009b      	lsls	r3, r3, #2
    697e:	4413      	add	r3, r2
    6980:	009b      	lsls	r3, r3, #2
    6982:	440b      	add	r3, r1
    6984:	681b      	ldr	r3, [r3, #0]
    6986:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    6988:	f89d 3005 	ldrb.w	r3, [sp, #5]
    698c:	f083 0301 	eor.w	r3, r3, #1
    6990:	b2db      	uxtb	r3, r3
    6992:	2b00      	cmp	r3, #0
    6994:	d007      	beq.n	69a6 <Adc_ValidateNotBusyNoPrio+0x4e>
    6996:	9b02      	ldr	r3, [sp, #8]
    6998:	2b00      	cmp	r3, #0
    699a:	d004      	beq.n	69a6 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    699c:	210b      	movs	r1, #11
    699e:	2002      	movs	r0, #2
    69a0:	f7ff ff9c 	bl	68dc <Adc_ReportDetRuntimeError>
    69a4:	e011      	b.n	69ca <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    69a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    69aa:	2b00      	cmp	r3, #0
    69ac:	d00a      	beq.n	69c4 <Adc_ValidateNotBusyNoPrio+0x6c>
    69ae:	9b02      	ldr	r3, [sp, #8]
    69b0:	2b00      	cmp	r3, #0
    69b2:	d007      	beq.n	69c4 <Adc_ValidateNotBusyNoPrio+0x6c>
    69b4:	9b02      	ldr	r3, [sp, #8]
    69b6:	2b03      	cmp	r3, #3
    69b8:	d004      	beq.n	69c4 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    69ba:	210b      	movs	r1, #11
    69bc:	2002      	movs	r0, #2
    69be:	f7ff ff8d 	bl	68dc <Adc_ReportDetRuntimeError>
    69c2:	e002      	b.n	69ca <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    69c4:	2300      	movs	r3, #0
    69c6:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    69ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    69ce:	4618      	mov	r0, r3
    69d0:	b005      	add	sp, #20
    69d2:	f85d fb04 	ldr.w	pc, [sp], #4
    69d6:	bf00      	nop
    69d8:	1fff8cfc 	.word	0x1fff8cfc

000069dc <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    69dc:	b500      	push	{lr}
    69de:	b087      	sub	sp, #28
    69e0:	4603      	mov	r3, r0
    69e2:	460a      	mov	r2, r1
    69e4:	f88d 3007 	strb.w	r3, [sp, #7]
    69e8:	4613      	mov	r3, r2
    69ea:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    69ee:	2300      	movs	r3, #0
    69f0:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    69f4:	2300      	movs	r3, #0
    69f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    69fa:	e02c      	b.n	6a56 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    69fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a00:	4a1d      	ldr	r2, [pc, #116]	; (6a78 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a06:	685a      	ldr	r2, [r3, #4]
    6a08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a0c:	2134      	movs	r1, #52	; 0x34
    6a0e:	fb01 f303 	mul.w	r3, r1, r3
    6a12:	4413      	add	r3, r2
    6a14:	881b      	ldrh	r3, [r3, #0]
    6a16:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    6a1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6a1e:	4917      	ldr	r1, [pc, #92]	; (6a7c <Adc_ValidateCheckGroupNotConversion+0xa0>)
    6a20:	4613      	mov	r3, r2
    6a22:	009b      	lsls	r3, r3, #2
    6a24:	4413      	add	r3, r2
    6a26:	009b      	lsls	r3, r3, #2
    6a28:	440b      	add	r3, r1
    6a2a:	681b      	ldr	r3, [r3, #0]
    6a2c:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    6a2e:	9b03      	ldr	r3, [sp, #12]
    6a30:	2b00      	cmp	r3, #0
    6a32:	d00b      	beq.n	6a4c <Adc_ValidateCheckGroupNotConversion+0x70>
    6a34:	9b03      	ldr	r3, [sp, #12]
    6a36:	2b03      	cmp	r3, #3
    6a38:	d008      	beq.n	6a4c <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    6a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a3e:	210b      	movs	r1, #11
    6a40:	4618      	mov	r0, r3
    6a42:	f7ff ff4b 	bl	68dc <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    6a46:	2301      	movs	r3, #1
    6a48:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    6a4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a50:	3301      	adds	r3, #1
    6a52:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a56:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6a5a:	4a07      	ldr	r2, [pc, #28]	; (6a78 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    6a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a60:	891b      	ldrh	r3, [r3, #8]
    6a62:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6a66:	429a      	cmp	r2, r3
    6a68:	d3c8      	bcc.n	69fc <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    6a6a:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    6a6e:	4618      	mov	r0, r3
    6a70:	b007      	add	sp, #28
    6a72:	f85d fb04 	ldr.w	pc, [sp], #4
    6a76:	bf00      	nop
    6a78:	1fff8cf8 	.word	0x1fff8cf8
    6a7c:	1fff8cfc 	.word	0x1fff8cfc

00006a80 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    6a80:	b500      	push	{lr}
    6a82:	b085      	sub	sp, #20
    6a84:	4603      	mov	r3, r0
    6a86:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    6a8a:	2300      	movs	r3, #0
    6a8c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6a90:	2301      	movs	r3, #1
    6a92:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6a96:	2300      	movs	r3, #0
    6a98:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6a9c:	2300      	movs	r3, #0
    6a9e:	f88d 300d 	strb.w	r3, [sp, #13]
    6aa2:	e01d      	b.n	6ae0 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6aa8:	4a1b      	ldr	r2, [pc, #108]	; (6b18 <Adc_ValidateDeInitNotBusy+0x98>)
    6aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aae:	681a      	ldr	r2, [r3, #0]
    6ab0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ab4:	4413      	add	r3, r2
    6ab6:	7f9b      	ldrb	r3, [r3, #30]
    6ab8:	2b01      	cmp	r3, #1
    6aba:	d10c      	bne.n	6ad6 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    6abc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ac0:	2101      	movs	r1, #1
    6ac2:	4618      	mov	r0, r3
    6ac4:	f7ff ff1f 	bl	6906 <Adc_ValidateNotBusyNoQueue>
    6ac8:	4603      	mov	r3, r0
    6aca:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    6ace:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ad2:	2b01      	cmp	r3, #1
    6ad4:	d009      	beq.n	6aea <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6ad6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ada:	3301      	adds	r3, #1
    6adc:	f88d 300d 	strb.w	r3, [sp, #13]
    6ae0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6ae4:	2b01      	cmp	r3, #1
    6ae6:	d9dd      	bls.n	6aa4 <Adc_ValidateDeInitNotBusy+0x24>
    6ae8:	e000      	b.n	6aec <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    6aea:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    6aec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6af0:	2b00      	cmp	r3, #0
    6af2:	d10b      	bne.n	6b0c <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    6af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6af8:	4619      	mov	r1, r3
    6afa:	2001      	movs	r0, #1
    6afc:	f7ff ff6e 	bl	69dc <Adc_ValidateCheckGroupNotConversion>
    6b00:	4603      	mov	r3, r0
    6b02:	2b00      	cmp	r3, #0
    6b04:	d102      	bne.n	6b0c <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    6b06:	2300      	movs	r3, #0
    6b08:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    6b0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6b10:	4618      	mov	r0, r3
    6b12:	b005      	add	sp, #20
    6b14:	f85d fb04 	ldr.w	pc, [sp], #4
    6b18:	1fff8cf8 	.word	0x1fff8cf8

00006b1c <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    6b1c:	b500      	push	{lr}
    6b1e:	b085      	sub	sp, #20
    6b20:	4603      	mov	r3, r0
    6b22:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    6b26:	2301      	movs	r3, #1
    6b28:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    6b2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6b30:	490b      	ldr	r1, [pc, #44]	; (6b60 <Adc_ValidateSetupBufferNotBusy+0x44>)
    6b32:	4613      	mov	r3, r2
    6b34:	009b      	lsls	r3, r3, #2
    6b36:	4413      	add	r3, r2
    6b38:	009b      	lsls	r3, r3, #2
    6b3a:	440b      	add	r3, r1
    6b3c:	681b      	ldr	r3, [r3, #0]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d004      	beq.n	6b4c <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    6b42:	210b      	movs	r1, #11
    6b44:	200c      	movs	r0, #12
    6b46:	f7ff fec9 	bl	68dc <Adc_ReportDetRuntimeError>
    6b4a:	e002      	b.n	6b52 <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    6b4c:	2300      	movs	r3, #0
    6b4e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    6b52:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6b56:	4618      	mov	r0, r3
    6b58:	b005      	add	sp, #20
    6b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    6b5e:	bf00      	nop
    6b60:	1fff8cfc 	.word	0x1fff8cfc

00006b64 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    6b64:	b500      	push	{lr}
    6b66:	b085      	sub	sp, #20
    6b68:	4603      	mov	r3, r0
    6b6a:	460a      	mov	r2, r1
    6b6c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6b70:	4613      	mov	r3, r2
    6b72:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6b76:	2300      	movs	r3, #0
    6b78:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    6b7c:	2300      	movs	r3, #0
    6b7e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    6b82:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6b86:	4a32      	ldr	r2, [pc, #200]	; (6c50 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b8c:	68da      	ldr	r2, [r3, #12]
    6b8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6b92:	005b      	lsls	r3, r3, #1
    6b94:	4413      	add	r3, r2
    6b96:	881b      	ldrh	r3, [r3, #0]
    6b98:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6b9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ba0:	4a2b      	ldr	r2, [pc, #172]	; (6c50 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ba6:	685a      	ldr	r2, [r3, #4]
    6ba8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6bac:	2134      	movs	r1, #52	; 0x34
    6bae:	fb01 f303 	mul.w	r3, r1, r3
    6bb2:	4413      	add	r3, r2
    6bb4:	689b      	ldr	r3, [r3, #8]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d02c      	beq.n	6c14 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6bba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bbe:	4a24      	ldr	r2, [pc, #144]	; (6c50 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc4:	685a      	ldr	r2, [r3, #4]
    6bc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6bca:	2134      	movs	r1, #52	; 0x34
    6bcc:	fb01 f303 	mul.w	r3, r1, r3
    6bd0:	4413      	add	r3, r2
    6bd2:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    6bd4:	2b01      	cmp	r3, #1
    6bd6:	d120      	bne.n	6c1a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6bd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bdc:	4a1c      	ldr	r2, [pc, #112]	; (6c50 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6be2:	685a      	ldr	r2, [r3, #4]
    6be4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6be8:	2134      	movs	r1, #52	; 0x34
    6bea:	fb01 f303 	mul.w	r3, r1, r3
    6bee:	4413      	add	r3, r2
    6bf0:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    6bf2:	2b01      	cmp	r3, #1
    6bf4:	d111      	bne.n	6c1a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    6bf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bfa:	4a15      	ldr	r2, [pc, #84]	; (6c50 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    6bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c00:	685a      	ldr	r2, [r3, #4]
    6c02:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6c06:	2134      	movs	r1, #52	; 0x34
    6c08:	fb01 f303 	mul.w	r3, r1, r3
    6c0c:	4413      	add	r3, r2
    6c0e:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    6c10:	2b00      	cmp	r3, #0
    6c12:	d102      	bne.n	6c1a <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    6c14:	2301      	movs	r3, #1
    6c16:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    6c1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c1e:	2b01      	cmp	r3, #1
    6c20:	d104      	bne.n	6c2c <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    6c22:	210b      	movs	r1, #11
    6c24:	2002      	movs	r0, #2
    6c26:	f7ff fe59 	bl	68dc <Adc_ReportDetRuntimeError>
    6c2a:	e00b      	b.n	6c44 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    6c2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6c30:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6c34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6c38:	4618      	mov	r0, r3
    6c3a:	f7ff fe8d 	bl	6958 <Adc_ValidateNotBusyNoPrio>
    6c3e:	4603      	mov	r3, r0
    6c40:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    6c44:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6c48:	4618      	mov	r0, r3
    6c4a:	b005      	add	sp, #20
    6c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c50:	1fff8cf8 	.word	0x1fff8cf8

00006c54 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    6c54:	b500      	push	{lr}
    6c56:	b085      	sub	sp, #20
    6c58:	4603      	mov	r3, r0
    6c5a:	f88d 3007 	strb.w	r3, [sp, #7]
    6c5e:	460b      	mov	r3, r1
    6c60:	f8ad 3004 	strh.w	r3, [sp, #4]
    6c64:	4613      	mov	r3, r2
    6c66:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    6c6a:	2300      	movs	r3, #0
    6c6c:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    6c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c74:	2b0b      	cmp	r3, #11
    6c76:	d03b      	beq.n	6cf0 <Adc_ValidateStateNotIdle+0x9c>
    6c78:	2b0b      	cmp	r3, #11
    6c7a:	dc4e      	bgt.n	6d1a <Adc_ValidateStateNotIdle+0xc6>
    6c7c:	2b03      	cmp	r3, #3
    6c7e:	d022      	beq.n	6cc6 <Adc_ValidateStateNotIdle+0x72>
    6c80:	2b04      	cmp	r3, #4
    6c82:	d14a      	bne.n	6d1a <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6c84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c88:	492a      	ldr	r1, [pc, #168]	; (6d34 <Adc_ValidateStateNotIdle+0xe0>)
    6c8a:	4613      	mov	r3, r2
    6c8c:	009b      	lsls	r3, r3, #2
    6c8e:	4413      	add	r3, r2
    6c90:	009b      	lsls	r3, r3, #2
    6c92:	440b      	add	r3, r1
    6c94:	681b      	ldr	r3, [r3, #0]
    6c96:	2b00      	cmp	r3, #0
    6c98:	d141      	bne.n	6d1e <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    6c9a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6c9e:	4925      	ldr	r1, [pc, #148]	; (6d34 <Adc_ValidateStateNotIdle+0xe0>)
    6ca0:	4613      	mov	r3, r2
    6ca2:	009b      	lsls	r3, r3, #2
    6ca4:	4413      	add	r3, r2
    6ca6:	009b      	lsls	r3, r3, #2
    6ca8:	440b      	add	r3, r1
    6caa:	3304      	adds	r3, #4
    6cac:	681b      	ldr	r3, [r3, #0]
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d135      	bne.n	6d1e <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb6:	210c      	movs	r1, #12
    6cb8:	4618      	mov	r0, r3
    6cba:	f7ff fe0f 	bl	68dc <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    6cbe:	2301      	movs	r3, #1
    6cc0:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    6cc4:	e02b      	b.n	6d1e <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6cc6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6cca:	491a      	ldr	r1, [pc, #104]	; (6d34 <Adc_ValidateStateNotIdle+0xe0>)
    6ccc:	4613      	mov	r3, r2
    6cce:	009b      	lsls	r3, r3, #2
    6cd0:	4413      	add	r3, r2
    6cd2:	009b      	lsls	r3, r3, #2
    6cd4:	440b      	add	r3, r1
    6cd6:	681b      	ldr	r3, [r3, #0]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d122      	bne.n	6d22 <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ce0:	210c      	movs	r1, #12
    6ce2:	4618      	mov	r0, r3
    6ce4:	f7ff fdfa 	bl	68dc <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    6ce8:	2301      	movs	r3, #1
    6cea:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    6cee:	e018      	b.n	6d22 <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    6cf0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6cf4:	490f      	ldr	r1, [pc, #60]	; (6d34 <Adc_ValidateStateNotIdle+0xe0>)
    6cf6:	4613      	mov	r3, r2
    6cf8:	009b      	lsls	r3, r3, #2
    6cfa:	4413      	add	r3, r2
    6cfc:	009b      	lsls	r3, r3, #2
    6cfe:	440b      	add	r3, r1
    6d00:	681b      	ldr	r3, [r3, #0]
    6d02:	2b00      	cmp	r3, #0
    6d04:	d10f      	bne.n	6d26 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    6d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d0a:	210c      	movs	r1, #12
    6d0c:	4618      	mov	r0, r3
    6d0e:	f7ff fde5 	bl	68dc <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    6d12:	2301      	movs	r3, #1
    6d14:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    6d18:	e005      	b.n	6d26 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    6d1a:	bf00      	nop
    6d1c:	e004      	b.n	6d28 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6d1e:	bf00      	nop
    6d20:	e002      	b.n	6d28 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6d22:	bf00      	nop
    6d24:	e000      	b.n	6d28 <Adc_ValidateStateNotIdle+0xd4>
            break;
    6d26:	bf00      	nop
        }
    }

    return ValidState;
    6d28:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6d2c:	4618      	mov	r0, r3
    6d2e:	b005      	add	sp, #20
    6d30:	f85d fb04 	ldr.w	pc, [sp], #4
    6d34:	1fff8cfc 	.word	0x1fff8cfc

00006d38 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    6d38:	b084      	sub	sp, #16
    6d3a:	4603      	mov	r3, r0
    6d3c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    6d40:	2300      	movs	r3, #0
    6d42:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    6d46:	2300      	movs	r3, #0
    6d48:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6d4c:	2300      	movs	r3, #0
    6d4e:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d52:	e049      	b.n	6de8 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    6d54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d58:	4a2a      	ldr	r2, [pc, #168]	; (6e04 <Adc_InitGroupsStatus+0xcc>)
    6d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d5e:	685a      	ldr	r2, [r3, #4]
    6d60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d64:	2134      	movs	r1, #52	; 0x34
    6d66:	fb01 f303 	mul.w	r3, r1, r3
    6d6a:	4413      	add	r3, r2
    6d6c:	881b      	ldrh	r3, [r3, #0]
    6d6e:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    6d72:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d76:	4924      	ldr	r1, [pc, #144]	; (6e08 <Adc_InitGroupsStatus+0xd0>)
    6d78:	4613      	mov	r3, r2
    6d7a:	009b      	lsls	r3, r3, #2
    6d7c:	4413      	add	r3, r2
    6d7e:	009b      	lsls	r3, r3, #2
    6d80:	440b      	add	r3, r1
    6d82:	2200      	movs	r2, #0
    6d84:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    6d86:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6d8a:	491f      	ldr	r1, [pc, #124]	; (6e08 <Adc_InitGroupsStatus+0xd0>)
    6d8c:	4613      	mov	r3, r2
    6d8e:	009b      	lsls	r3, r3, #2
    6d90:	4413      	add	r3, r2
    6d92:	009b      	lsls	r3, r3, #2
    6d94:	440b      	add	r3, r1
    6d96:	3304      	adds	r3, #4
    6d98:	2200      	movs	r2, #0
    6d9a:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    6d9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6da0:	4919      	ldr	r1, [pc, #100]	; (6e08 <Adc_InitGroupsStatus+0xd0>)
    6da2:	4613      	mov	r3, r2
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	4413      	add	r3, r2
    6da8:	009b      	lsls	r3, r3, #2
    6daa:	440b      	add	r3, r1
    6dac:	3308      	adds	r3, #8
    6dae:	2200      	movs	r2, #0
    6db0:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    6db2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6db6:	4914      	ldr	r1, [pc, #80]	; (6e08 <Adc_InitGroupsStatus+0xd0>)
    6db8:	4613      	mov	r3, r2
    6dba:	009b      	lsls	r3, r3, #2
    6dbc:	4413      	add	r3, r2
    6dbe:	009b      	lsls	r3, r3, #2
    6dc0:	440b      	add	r3, r1
    6dc2:	330c      	adds	r3, #12
    6dc4:	2200      	movs	r2, #0
    6dc6:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    6dc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6dcc:	490e      	ldr	r1, [pc, #56]	; (6e08 <Adc_InitGroupsStatus+0xd0>)
    6dce:	4613      	mov	r3, r2
    6dd0:	009b      	lsls	r3, r3, #2
    6dd2:	4413      	add	r3, r2
    6dd4:	009b      	lsls	r3, r3, #2
    6dd6:	440b      	add	r3, r1
    6dd8:	3310      	adds	r3, #16
    6dda:	2200      	movs	r2, #0
    6ddc:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    6dde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6de2:	3301      	adds	r3, #1
    6de4:	f8ad 300e 	strh.w	r3, [sp, #14]
    6de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dec:	4a05      	ldr	r2, [pc, #20]	; (6e04 <Adc_InitGroupsStatus+0xcc>)
    6dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df2:	891b      	ldrh	r3, [r3, #8]
    6df4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6df8:	429a      	cmp	r2, r3
    6dfa:	d3ab      	bcc.n	6d54 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    6dfc:	bf00      	nop
    6dfe:	bf00      	nop
    6e00:	b004      	add	sp, #16
    6e02:	4770      	bx	lr
    6e04:	1fff8cf8 	.word	0x1fff8cf8
    6e08:	1fff8cfc 	.word	0x1fff8cfc

00006e0c <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    6e0c:	b084      	sub	sp, #16
    6e0e:	4603      	mov	r3, r0
    6e10:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    6e14:	2300      	movs	r3, #0
    6e16:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    6e1a:	2300      	movs	r3, #0
    6e1c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e20:	2300      	movs	r3, #0
    6e22:	f88d 300f 	strb.w	r3, [sp, #15]
    6e26:	e035      	b.n	6e94 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    6e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e2c:	4a1d      	ldr	r2, [pc, #116]	; (6ea4 <Adc_InitUnitStatus+0x98>)
    6e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e32:	681a      	ldr	r2, [r3, #0]
    6e34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e38:	4413      	add	r3, r2
    6e3a:	7f9b      	ldrb	r3, [r3, #30]
    6e3c:	2b01      	cmp	r3, #1
    6e3e:	d124      	bne.n	6e8a <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    6e40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e44:	4a18      	ldr	r2, [pc, #96]	; (6ea8 <Adc_InitUnitStatus+0x9c>)
    6e46:	2100      	movs	r1, #0
    6e48:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6e4c:	2300      	movs	r3, #0
    6e4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e52:	e00f      	b.n	6e74 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    6e54:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6e58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e5c:	4912      	ldr	r1, [pc, #72]	; (6ea8 <Adc_InitUnitStatus+0x9c>)
    6e5e:	0092      	lsls	r2, r2, #2
    6e60:	4413      	add	r3, r2
    6e62:	005b      	lsls	r3, r3, #1
    6e64:	440b      	add	r3, r1
    6e66:	2200      	movs	r2, #0
    6e68:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    6e6a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e6e:	3301      	adds	r3, #1
    6e70:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6e78:	2b01      	cmp	r3, #1
    6e7a:	d9eb      	bls.n	6e54 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    6e7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e80:	4a09      	ldr	r2, [pc, #36]	; (6ea8 <Adc_InitUnitStatus+0x9c>)
    6e82:	00db      	lsls	r3, r3, #3
    6e84:	4413      	add	r3, r2
    6e86:	2200      	movs	r2, #0
    6e88:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    6e8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e8e:	3301      	adds	r3, #1
    6e90:	f88d 300f 	strb.w	r3, [sp, #15]
    6e94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e98:	2b01      	cmp	r3, #1
    6e9a:	d9c5      	bls.n	6e28 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    6e9c:	bf00      	nop
    6e9e:	bf00      	nop
    6ea0:	b004      	add	sp, #16
    6ea2:	4770      	bx	lr
    6ea4:	1fff8cf8 	.word	0x1fff8cf8
    6ea8:	1fff8d10 	.word	0x1fff8d10

00006eac <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    6eac:	b084      	sub	sp, #16
    6eae:	9001      	str	r0, [sp, #4]
    6eb0:	460b      	mov	r3, r1
    6eb2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    6eb6:	2300      	movs	r3, #0
    6eb8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    6ebc:	2301      	movs	r3, #1
    6ebe:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    6ec2:	9b01      	ldr	r3, [sp, #4]
    6ec4:	7c1b      	ldrb	r3, [r3, #16]
    6ec6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6eca:	429a      	cmp	r2, r3
    6ecc:	d11c      	bne.n	6f08 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6ece:	2300      	movs	r3, #0
    6ed0:	f88d 300f 	strb.w	r3, [sp, #15]
    6ed4:	e012      	b.n	6efc <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    6ed6:	9b01      	ldr	r3, [sp, #4]
    6ed8:	695a      	ldr	r2, [r3, #20]
    6eda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ede:	4413      	add	r3, r2
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6ee6:	429a      	cmp	r2, r3
    6ee8:	d103      	bne.n	6ef2 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    6eea:	2300      	movs	r3, #0
    6eec:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    6ef0:	e00a      	b.n	6f08 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    6ef2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ef6:	3301      	adds	r3, #1
    6ef8:	f88d 300f 	strb.w	r3, [sp, #15]
    6efc:	9b01      	ldr	r3, [sp, #4]
    6efe:	7e1b      	ldrb	r3, [r3, #24]
    6f00:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6f04:	429a      	cmp	r2, r3
    6f06:	d3e6      	bcc.n	6ed6 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    6f08:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6f0c:	4618      	mov	r0, r3
    6f0e:	b004      	add	sp, #16
    6f10:	4770      	bx	lr

00006f12 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    6f12:	b500      	push	{lr}
    6f14:	b085      	sub	sp, #20
    6f16:	4603      	mov	r3, r0
    6f18:	f8ad 3006 	strh.w	r3, [sp, #6]
    6f1c:	460b      	mov	r3, r1
    6f1e:	f88d 3005 	strb.w	r3, [sp, #5]
    6f22:	4613      	mov	r3, r2
    6f24:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    6f28:	2300      	movs	r3, #0
    6f2a:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    6f2e:	2300      	movs	r3, #0
    6f30:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    6f34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f38:	493e      	ldr	r1, [pc, #248]	; (7034 <Adc_UpdateStatusStartConversion+0x122>)
    6f3a:	4613      	mov	r3, r2
    6f3c:	009b      	lsls	r3, r3, #2
    6f3e:	4413      	add	r3, r2
    6f40:	009b      	lsls	r3, r3, #2
    6f42:	440b      	add	r3, r1
    6f44:	2201      	movs	r2, #1
    6f46:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    6f48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f4c:	4939      	ldr	r1, [pc, #228]	; (7034 <Adc_UpdateStatusStartConversion+0x122>)
    6f4e:	4613      	mov	r3, r2
    6f50:	009b      	lsls	r3, r3, #2
    6f52:	4413      	add	r3, r2
    6f54:	009b      	lsls	r3, r3, #2
    6f56:	440b      	add	r3, r1
    6f58:	3308      	adds	r3, #8
    6f5a:	2200      	movs	r2, #0
    6f5c:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6f5e:	f007 f849 	bl	dff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6f62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f66:	4a34      	ldr	r2, [pc, #208]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6f68:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6f6c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    6f70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6f74:	2b00      	cmp	r3, #0
    6f76:	d016      	beq.n	6fa6 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    6f78:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6f80:	492d      	ldr	r1, [pc, #180]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6f82:	0092      	lsls	r2, r2, #2
    6f84:	4413      	add	r3, r2
    6f86:	005b      	lsls	r3, r3, #1
    6f88:	440b      	add	r3, r1
    6f8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6f8e:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6f90:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6f94:	4a28      	ldr	r2, [pc, #160]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6f96:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    6f9a:	b292      	uxth	r2, r2
    6f9c:	3201      	adds	r2, #1
    6f9e:	b291      	uxth	r1, r2
    6fa0:	4a25      	ldr	r2, [pc, #148]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6fa2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    6fa6:	f007 f851 	bl	e04c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    6faa:	f007 f823 	bl	dff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    6fae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fb2:	4a21      	ldr	r2, [pc, #132]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6fb4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6fb8:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    6fbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fc0:	4a1d      	ldr	r2, [pc, #116]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6fc2:	00db      	lsls	r3, r3, #3
    6fc4:	4413      	add	r3, r2
    6fc6:	885b      	ldrh	r3, [r3, #2]
    6fc8:	b29b      	uxth	r3, r3
    6fca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6fce:	429a      	cmp	r2, r3
    6fd0:	d003      	beq.n	6fda <Adc_UpdateStatusStartConversion+0xc8>
    6fd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	d125      	bne.n	7026 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    6fda:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fde:	4a16      	ldr	r2, [pc, #88]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6fe0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    6fe4:	b29b      	uxth	r3, r3
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d112      	bne.n	7010 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    6fea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6fee:	4a12      	ldr	r2, [pc, #72]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    6ff0:	00db      	lsls	r3, r3, #3
    6ff2:	4413      	add	r3, r2
    6ff4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6ff8:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    6ffa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6ffe:	4a0e      	ldr	r2, [pc, #56]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    7000:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7004:	b292      	uxth	r2, r2
    7006:	3201      	adds	r2, #1
    7008:	b291      	uxth	r1, r2
    700a:	4a0b      	ldr	r2, [pc, #44]	; (7038 <Adc_UpdateStatusStartConversion+0x126>)
    700c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7010:	f007 f81c 	bl	e04c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7014:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7018:	f89d 3005 	ldrb.w	r3, [sp, #5]
    701c:	4611      	mov	r1, r2
    701e:	4618      	mov	r0, r3
    7020:	f002 fbf2 	bl	9808 <Adc_Ipw_StartNormalConversion>
    7024:	e002      	b.n	702c <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7026:	f007 f811 	bl	e04c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    702a:	bf00      	nop
    702c:	bf00      	nop
    702e:	b005      	add	sp, #20
    7030:	f85d fb04 	ldr.w	pc, [sp], #4
    7034:	1fff8cfc 	.word	0x1fff8cfc
    7038:	1fff8d10 	.word	0x1fff8d10

0000703c <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    703c:	b500      	push	{lr}
    703e:	b085      	sub	sp, #20
    7040:	9001      	str	r0, [sp, #4]
    7042:	4608      	mov	r0, r1
    7044:	4611      	mov	r1, r2
    7046:	461a      	mov	r2, r3
    7048:	4603      	mov	r3, r0
    704a:	f8ad 3002 	strh.w	r3, [sp, #2]
    704e:	460b      	mov	r3, r1
    7050:	f88d 3001 	strb.w	r3, [sp, #1]
    7054:	4613      	mov	r3, r2
    7056:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    705a:	2300      	movs	r3, #0
    705c:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    7060:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7064:	4a26      	ldr	r2, [pc, #152]	; (7100 <Adc_StopSwGroupConversion+0xc4>)
    7066:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    706a:	b29a      	uxth	r2, r3
    706c:	9b01      	ldr	r3, [sp, #4]
    706e:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7070:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7074:	4a22      	ldr	r2, [pc, #136]	; (7100 <Adc_StopSwGroupConversion+0xc4>)
    7076:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    707a:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    707e:	2300      	movs	r3, #0
    7080:	f8ad 300c 	strh.w	r3, [sp, #12]
    7084:	e02f      	b.n	70e6 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    7086:	f89d 2001 	ldrb.w	r2, [sp, #1]
    708a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    708e:	491c      	ldr	r1, [pc, #112]	; (7100 <Adc_StopSwGroupConversion+0xc4>)
    7090:	0092      	lsls	r2, r2, #2
    7092:	4413      	add	r3, r2
    7094:	005b      	lsls	r3, r3, #1
    7096:	440b      	add	r3, r1
    7098:	885b      	ldrh	r3, [r3, #2]
    709a:	b29b      	uxth	r3, r3
    709c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    70a0:	429a      	cmp	r2, r3
    70a2:	d11b      	bne.n	70dc <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    70a4:	9b01      	ldr	r3, [sp, #4]
    70a6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70aa:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    70ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70b0:	2b00      	cmp	r3, #0
    70b2:	d10b      	bne.n	70cc <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    70b4:	f89d 2000 	ldrb.w	r2, [sp]
    70b8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    70bc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    70c0:	4618      	mov	r0, r3
    70c2:	f002 fc4b 	bl	995c <Adc_Ipw_StopCurrentConversion>
    70c6:	4603      	mov	r3, r0
    70c8:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    70cc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    70d4:	4611      	mov	r1, r2
    70d6:	4618      	mov	r0, r3
    70d8:	f001 fd88 	bl	8bec <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    70dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    70e0:	3301      	adds	r3, #1
    70e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    70e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    70ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    70ee:	429a      	cmp	r2, r3
    70f0:	d3c9      	bcc.n	7086 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    70f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    70f6:	4618      	mov	r0, r3
    70f8:	b005      	add	sp, #20
    70fa:	f85d fb04 	ldr.w	pc, [sp], #4
    70fe:	bf00      	nop
    7100:	1fff8d10 	.word	0x1fff8d10

00007104 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    7104:	b500      	push	{lr}
    7106:	b089      	sub	sp, #36	; 0x24
    7108:	4603      	mov	r3, r0
    710a:	f8ad 3006 	strh.w	r3, [sp, #6]
    710e:	460b      	mov	r3, r1
    7110:	f88d 3005 	strb.w	r3, [sp, #5]
    7114:	4613      	mov	r3, r2
    7116:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    711a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    711e:	4a4f      	ldr	r2, [pc, #316]	; (725c <Adc_UpdateStatusStopConversion+0x158>)
    7120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7124:	68da      	ldr	r2, [r3, #12]
    7126:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    712a:	005b      	lsls	r3, r3, #1
    712c:	4413      	add	r3, r2
    712e:	881b      	ldrh	r3, [r3, #0]
    7130:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    7134:	2300      	movs	r3, #0
    7136:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    713a:	2300      	movs	r3, #0
    713c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    7140:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7144:	4a45      	ldr	r2, [pc, #276]	; (725c <Adc_UpdateStatusStopConversion+0x158>)
    7146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    714a:	685a      	ldr	r2, [r3, #4]
    714c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7150:	2134      	movs	r1, #52	; 0x34
    7152:	fb01 f303 	mul.w	r3, r1, r3
    7156:	4413      	add	r3, r2
    7158:	689b      	ldr	r3, [r3, #8]
    715a:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    715c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7160:	4a3e      	ldr	r2, [pc, #248]	; (725c <Adc_UpdateStatusStopConversion+0x158>)
    7162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7166:	685a      	ldr	r2, [r3, #4]
    7168:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    716c:	2134      	movs	r1, #52	; 0x34
    716e:	fb01 f303 	mul.w	r3, r1, r3
    7172:	4413      	add	r3, r2
    7174:	685b      	ldr	r3, [r3, #4]
    7176:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    7178:	f89d 3004 	ldrb.w	r3, [sp, #4]
    717c:	4a37      	ldr	r2, [pc, #220]	; (725c <Adc_UpdateStatusStopConversion+0x158>)
    717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7182:	685a      	ldr	r2, [r3, #4]
    7184:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7188:	2134      	movs	r1, #52	; 0x34
    718a:	fb01 f303 	mul.w	r3, r1, r3
    718e:	4413      	add	r3, r2
    7190:	699b      	ldr	r3, [r3, #24]
    7192:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7194:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7198:	4931      	ldr	r1, [pc, #196]	; (7260 <Adc_UpdateStatusStopConversion+0x15c>)
    719a:	4613      	mov	r3, r2
    719c:	009b      	lsls	r3, r3, #2
    719e:	4413      	add	r3, r2
    71a0:	009b      	lsls	r3, r3, #2
    71a2:	440b      	add	r3, r1
    71a4:	681b      	ldr	r3, [r3, #0]
    71a6:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    71a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71ac:	492c      	ldr	r1, [pc, #176]	; (7260 <Adc_UpdateStatusStopConversion+0x15c>)
    71ae:	4613      	mov	r3, r2
    71b0:	009b      	lsls	r3, r3, #2
    71b2:	4413      	add	r3, r2
    71b4:	009b      	lsls	r3, r3, #2
    71b6:	440b      	add	r3, r1
    71b8:	3308      	adds	r3, #8
    71ba:	2200      	movs	r2, #0
    71bc:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    71be:	9b06      	ldr	r3, [sp, #24]
    71c0:	2b00      	cmp	r3, #0
    71c2:	d005      	beq.n	71d0 <Adc_UpdateStatusStopConversion+0xcc>
    71c4:	9b05      	ldr	r3, [sp, #20]
    71c6:	2b01      	cmp	r3, #1
    71c8:	d110      	bne.n	71ec <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    71ca:	9b04      	ldr	r3, [sp, #16]
    71cc:	2b00      	cmp	r3, #0
    71ce:	d10d      	bne.n	71ec <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    71d0:	9b03      	ldr	r3, [sp, #12]
    71d2:	2b03      	cmp	r3, #3
    71d4:	d10a      	bne.n	71ec <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    71d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    71da:	4921      	ldr	r1, [pc, #132]	; (7260 <Adc_UpdateStatusStopConversion+0x15c>)
    71dc:	4613      	mov	r3, r2
    71de:	009b      	lsls	r3, r3, #2
    71e0:	4413      	add	r3, r2
    71e2:	009b      	lsls	r3, r3, #2
    71e4:	440b      	add	r3, r1
    71e6:	2200      	movs	r2, #0
    71e8:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    71ea:	e032      	b.n	7252 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    71ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
    71f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    71f4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    71f8:	f10d 000a 	add.w	r0, sp, #10
    71fc:	f7ff ff1e 	bl	703c <Adc_StopSwGroupConversion>
    7200:	4603      	mov	r3, r0
    7202:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7206:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    720a:	4915      	ldr	r1, [pc, #84]	; (7260 <Adc_UpdateStatusStopConversion+0x15c>)
    720c:	4613      	mov	r3, r2
    720e:	009b      	lsls	r3, r3, #2
    7210:	4413      	add	r3, r2
    7212:	009b      	lsls	r3, r3, #2
    7214:	440b      	add	r3, r1
    7216:	2200      	movs	r2, #0
    7218:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    721a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    721e:	2b00      	cmp	r3, #0
    7220:	d10f      	bne.n	7242 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7222:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7226:	4a0f      	ldr	r2, [pc, #60]	; (7264 <Adc_UpdateStatusStopConversion+0x160>)
    7228:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    722c:	b29b      	uxth	r3, r3
    722e:	2b00      	cmp	r3, #0
    7230:	d007      	beq.n	7242 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7232:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7236:	f89d 3005 	ldrb.w	r3, [sp, #5]
    723a:	4611      	mov	r1, r2
    723c:	4618      	mov	r0, r3
    723e:	f002 fae3 	bl	9808 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    7242:	f89d 301d 	ldrb.w	r3, [sp, #29]
    7246:	2b01      	cmp	r3, #1
    7248:	d103      	bne.n	7252 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    724a:	212b      	movs	r1, #43	; 0x2b
    724c:	2003      	movs	r0, #3
    724e:	f7ff fb45 	bl	68dc <Adc_ReportDetRuntimeError>
}
    7252:	bf00      	nop
    7254:	b009      	add	sp, #36	; 0x24
    7256:	f85d fb04 	ldr.w	pc, [sp], #4
    725a:	bf00      	nop
    725c:	1fff8cf8 	.word	0x1fff8cf8
    7260:	1fff8cfc 	.word	0x1fff8cfc
    7264:	1fff8d10 	.word	0x1fff8d10

00007268 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    7268:	b500      	push	{lr}
    726a:	b085      	sub	sp, #20
    726c:	4603      	mov	r3, r0
    726e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7272:	460b      	mov	r3, r1
    7274:	f88d 3005 	strb.w	r3, [sp, #5]
    7278:	4613      	mov	r3, r2
    727a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    727e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7282:	4a18      	ldr	r2, [pc, #96]	; (72e4 <Adc_UpdateStatusReadGroup+0x7c>)
    7284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7288:	68da      	ldr	r2, [r3, #12]
    728a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    728e:	005b      	lsls	r3, r3, #1
    7290:	4413      	add	r3, r2
    7292:	881b      	ldrh	r3, [r3, #0]
    7294:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    7298:	f89d 3004 	ldrb.w	r3, [sp, #4]
    729c:	4a11      	ldr	r2, [pc, #68]	; (72e4 <Adc_UpdateStatusReadGroup+0x7c>)
    729e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a2:	685a      	ldr	r2, [r3, #4]
    72a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72a8:	2134      	movs	r1, #52	; 0x34
    72aa:	fb01 f303 	mul.w	r3, r1, r3
    72ae:	4413      	add	r3, r2
    72b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    72b4:	2b01      	cmp	r3, #1
    72b6:	d109      	bne.n	72cc <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    72b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72bc:	f89d 1005 	ldrb.w	r1, [sp, #5]
    72c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72c4:	4618      	mov	r0, r3
    72c6:	f000 f80f 	bl	72e8 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    72ca:	e007      	b.n	72dc <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    72cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    72d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    72d4:	4611      	mov	r1, r2
    72d6:	4618      	mov	r0, r3
    72d8:	f000 f8e8 	bl	74ac <Adc_UpdateStatusReadGroupInt>
}
    72dc:	bf00      	nop
    72de:	b005      	add	sp, #20
    72e0:	f85d fb04 	ldr.w	pc, [sp], #4
    72e4:	1fff8cf8 	.word	0x1fff8cf8

000072e8 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    72e8:	b500      	push	{lr}
    72ea:	b085      	sub	sp, #20
    72ec:	4603      	mov	r3, r0
    72ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    72f2:	460b      	mov	r3, r1
    72f4:	f88d 3005 	strb.w	r3, [sp, #5]
    72f8:	4613      	mov	r3, r2
    72fa:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    72fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7302:	4a2c      	ldr	r2, [pc, #176]	; (73b4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7308:	68da      	ldr	r2, [r3, #12]
    730a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    730e:	005b      	lsls	r3, r3, #1
    7310:	4413      	add	r3, r2
    7312:	881b      	ldrh	r3, [r3, #0]
    7314:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    7318:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    731c:	4926      	ldr	r1, [pc, #152]	; (73b8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    731e:	4613      	mov	r3, r2
    7320:	009b      	lsls	r3, r3, #2
    7322:	4413      	add	r3, r2
    7324:	009b      	lsls	r3, r3, #2
    7326:	440b      	add	r3, r1
    7328:	3304      	adds	r3, #4
    732a:	2201      	movs	r2, #1
    732c:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    732e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7332:	2b00      	cmp	r3, #0
    7334:	d03a      	beq.n	73ac <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    7336:	f89d 3004 	ldrb.w	r3, [sp, #4]
    733a:	4a1e      	ldr	r2, [pc, #120]	; (73b4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    733c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7340:	685a      	ldr	r2, [r3, #4]
    7342:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7346:	2134      	movs	r1, #52	; 0x34
    7348:	fb01 f303 	mul.w	r3, r1, r3
    734c:	4413      	add	r3, r2
    734e:	689b      	ldr	r3, [r3, #8]
    7350:	2b01      	cmp	r3, #1
    7352:	d10a      	bne.n	736a <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7354:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7358:	4917      	ldr	r1, [pc, #92]	; (73b8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    735a:	4613      	mov	r3, r2
    735c:	009b      	lsls	r3, r3, #2
    735e:	4413      	add	r3, r2
    7360:	009b      	lsls	r3, r3, #2
    7362:	440b      	add	r3, r1
    7364:	2201      	movs	r2, #1
    7366:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    7368:	e020      	b.n	73ac <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    736a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    736e:	4a11      	ldr	r2, [pc, #68]	; (73b4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    7370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7374:	685a      	ldr	r2, [r3, #4]
    7376:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    737a:	2134      	movs	r1, #52	; 0x34
    737c:	fb01 f303 	mul.w	r3, r1, r3
    7380:	4413      	add	r3, r2
    7382:	695b      	ldr	r3, [r3, #20]
    7384:	2b00      	cmp	r3, #0
    7386:	d111      	bne.n	73ac <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    7388:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    738c:	490a      	ldr	r1, [pc, #40]	; (73b8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    738e:	4613      	mov	r3, r2
    7390:	009b      	lsls	r3, r3, #2
    7392:	4413      	add	r3, r2
    7394:	009b      	lsls	r3, r3, #2
    7396:	440b      	add	r3, r1
    7398:	2200      	movs	r2, #0
    739a:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    739c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    73a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73a4:	4611      	mov	r1, r2
    73a6:	4618      	mov	r0, r3
    73a8:	f000 f808 	bl	73bc <Adc_UpdateSwQueueIndexNoInt>
}
    73ac:	bf00      	nop
    73ae:	b005      	add	sp, #20
    73b0:	f85d fb04 	ldr.w	pc, [sp], #4
    73b4:	1fff8cf8 	.word	0x1fff8cf8
    73b8:	1fff8cfc 	.word	0x1fff8cfc

000073bc <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    73bc:	b500      	push	{lr}
    73be:	b085      	sub	sp, #20
    73c0:	4603      	mov	r3, r0
    73c2:	460a      	mov	r2, r1
    73c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    73c8:	4613      	mov	r3, r2
    73ca:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    73ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73d2:	4a34      	ldr	r2, [pc, #208]	; (74a4 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    73d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73d8:	68da      	ldr	r2, [r3, #12]
    73da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73de:	005b      	lsls	r3, r3, #1
    73e0:	4413      	add	r3, r2
    73e2:	881b      	ldrh	r3, [r3, #0]
    73e4:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    73e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    73ec:	4a2d      	ldr	r2, [pc, #180]	; (74a4 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    73ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f2:	685a      	ldr	r2, [r3, #4]
    73f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    73f8:	2134      	movs	r1, #52	; 0x34
    73fa:	fb01 f303 	mul.w	r3, r1, r3
    73fe:	4413      	add	r3, r2
    7400:	789b      	ldrb	r3, [r3, #2]
    7402:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    7406:	f89d 300b 	ldrb.w	r3, [sp, #11]
    740a:	4a27      	ldr	r2, [pc, #156]	; (74a8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    740c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7410:	b29b      	uxth	r3, r3
    7412:	2b00      	cmp	r3, #0
    7414:	d041      	beq.n	749a <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    7416:	f89d 300b 	ldrb.w	r3, [sp, #11]
    741a:	4a23      	ldr	r2, [pc, #140]	; (74a8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    741c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7420:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    7424:	2300      	movs	r3, #0
    7426:	f8ad 300e 	strh.w	r3, [sp, #14]
    742a:	e01c      	b.n	7466 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    742c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7430:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7434:	491c      	ldr	r1, [pc, #112]	; (74a8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7436:	0092      	lsls	r2, r2, #2
    7438:	4413      	add	r3, r2
    743a:	005b      	lsls	r3, r3, #1
    743c:	440b      	add	r3, r1
    743e:	885b      	ldrh	r3, [r3, #2]
    7440:	b29b      	uxth	r3, r3
    7442:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7446:	429a      	cmp	r2, r3
    7448:	d108      	bne.n	745c <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    744a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    744e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7452:	4611      	mov	r1, r2
    7454:	4618      	mov	r0, r3
    7456:	f001 fbc9 	bl	8bec <Adc_Ipw_RemoveFromQueue>
                    break;
    745a:	e00a      	b.n	7472 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    745c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7460:	3301      	adds	r3, #1
    7462:	f8ad 300e 	strh.w	r3, [sp, #14]
    7466:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    746a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    746e:	429a      	cmp	r2, r3
    7470:	d3dc      	bcc.n	742c <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    7472:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7476:	2b00      	cmp	r3, #0
    7478:	d10f      	bne.n	749a <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    747a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    747e:	4a0a      	ldr	r2, [pc, #40]	; (74a8 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    7480:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7484:	b29b      	uxth	r3, r3
    7486:	2b00      	cmp	r3, #0
    7488:	d007      	beq.n	749a <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    748a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    748e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7492:	4611      	mov	r1, r2
    7494:	4618      	mov	r0, r3
    7496:	f002 f9b7 	bl	9808 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    749a:	bf00      	nop
    749c:	b005      	add	sp, #20
    749e:	f85d fb04 	ldr.w	pc, [sp], #4
    74a2:	bf00      	nop
    74a4:	1fff8cf8 	.word	0x1fff8cf8
    74a8:	1fff8d10 	.word	0x1fff8d10

000074ac <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    74ac:	b084      	sub	sp, #16
    74ae:	4603      	mov	r3, r0
    74b0:	460a      	mov	r2, r1
    74b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    74b6:	4613      	mov	r3, r2
    74b8:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    74bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    74c0:	4a47      	ldr	r2, [pc, #284]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x134>)
    74c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c6:	68da      	ldr	r2, [r3, #12]
    74c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74cc:	005b      	lsls	r3, r3, #1
    74ce:	4413      	add	r3, r2
    74d0:	881b      	ldrh	r3, [r3, #0]
    74d2:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    74d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74da:	4942      	ldr	r1, [pc, #264]	; (75e4 <Adc_UpdateStatusReadGroupInt+0x138>)
    74dc:	4613      	mov	r3, r2
    74de:	009b      	lsls	r3, r3, #2
    74e0:	4413      	add	r3, r2
    74e2:	009b      	lsls	r3, r3, #2
    74e4:	440b      	add	r3, r1
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	2b02      	cmp	r3, #2
    74ea:	d10a      	bne.n	7502 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    74ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    74f0:	493c      	ldr	r1, [pc, #240]	; (75e4 <Adc_UpdateStatusReadGroupInt+0x138>)
    74f2:	4613      	mov	r3, r2
    74f4:	009b      	lsls	r3, r3, #2
    74f6:	4413      	add	r3, r2
    74f8:	009b      	lsls	r3, r3, #2
    74fa:	440b      	add	r3, r1
    74fc:	2201      	movs	r2, #1
    74fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    7500:	e06a      	b.n	75d8 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7502:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7506:	4937      	ldr	r1, [pc, #220]	; (75e4 <Adc_UpdateStatusReadGroupInt+0x138>)
    7508:	4613      	mov	r3, r2
    750a:	009b      	lsls	r3, r3, #2
    750c:	4413      	add	r3, r2
    750e:	009b      	lsls	r3, r3, #2
    7510:	440b      	add	r3, r1
    7512:	681b      	ldr	r3, [r3, #0]
    7514:	2b03      	cmp	r3, #3
    7516:	d15f      	bne.n	75d8 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7518:	f89d 3005 	ldrb.w	r3, [sp, #5]
    751c:	4a30      	ldr	r2, [pc, #192]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x134>)
    751e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7522:	685a      	ldr	r2, [r3, #4]
    7524:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7528:	2134      	movs	r1, #52	; 0x34
    752a:	fb01 f303 	mul.w	r3, r1, r3
    752e:	4413      	add	r3, r2
    7530:	695b      	ldr	r3, [r3, #20]
    7532:	2b00      	cmp	r3, #0
    7534:	d150      	bne.n	75d8 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    7536:	f89d 3005 	ldrb.w	r3, [sp, #5]
    753a:	4a29      	ldr	r2, [pc, #164]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x134>)
    753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7540:	685a      	ldr	r2, [r3, #4]
    7542:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7546:	2134      	movs	r1, #52	; 0x34
    7548:	fb01 f303 	mul.w	r3, r1, r3
    754c:	4413      	add	r3, r2
    754e:	689b      	ldr	r3, [r3, #8]
    7550:	2b00      	cmp	r3, #0
    7552:	d02c      	beq.n	75ae <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7554:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7558:	4a21      	ldr	r2, [pc, #132]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x134>)
    755a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    755e:	685a      	ldr	r2, [r3, #4]
    7560:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7564:	2134      	movs	r1, #52	; 0x34
    7566:	fb01 f303 	mul.w	r3, r1, r3
    756a:	4413      	add	r3, r2
    756c:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    756e:	2b01      	cmp	r3, #1
    7570:	d128      	bne.n	75c4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7572:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7576:	4a1a      	ldr	r2, [pc, #104]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x134>)
    7578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    757c:	685a      	ldr	r2, [r3, #4]
    757e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7582:	2134      	movs	r1, #52	; 0x34
    7584:	fb01 f303 	mul.w	r3, r1, r3
    7588:	4413      	add	r3, r2
    758a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    758c:	2b01      	cmp	r3, #1
    758e:	d119      	bne.n	75c4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    7590:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7594:	4a12      	ldr	r2, [pc, #72]	; (75e0 <Adc_UpdateStatusReadGroupInt+0x134>)
    7596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    759a:	685a      	ldr	r2, [r3, #4]
    759c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    75a0:	2134      	movs	r1, #52	; 0x34
    75a2:	fb01 f303 	mul.w	r3, r1, r3
    75a6:	4413      	add	r3, r2
    75a8:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    75aa:	2b00      	cmp	r3, #0
    75ac:	d10a      	bne.n	75c4 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    75ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75b2:	490c      	ldr	r1, [pc, #48]	; (75e4 <Adc_UpdateStatusReadGroupInt+0x138>)
    75b4:	4613      	mov	r3, r2
    75b6:	009b      	lsls	r3, r3, #2
    75b8:	4413      	add	r3, r2
    75ba:	009b      	lsls	r3, r3, #2
    75bc:	440b      	add	r3, r1
    75be:	2200      	movs	r2, #0
    75c0:	601a      	str	r2, [r3, #0]
}
    75c2:	e009      	b.n	75d8 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    75c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    75c8:	4906      	ldr	r1, [pc, #24]	; (75e4 <Adc_UpdateStatusReadGroupInt+0x138>)
    75ca:	4613      	mov	r3, r2
    75cc:	009b      	lsls	r3, r3, #2
    75ce:	4413      	add	r3, r2
    75d0:	009b      	lsls	r3, r3, #2
    75d2:	440b      	add	r3, r1
    75d4:	2201      	movs	r2, #1
    75d6:	601a      	str	r2, [r3, #0]
}
    75d8:	bf00      	nop
    75da:	b004      	add	sp, #16
    75dc:	4770      	bx	lr
    75de:	bf00      	nop
    75e0:	1fff8cf8 	.word	0x1fff8cf8
    75e4:	1fff8cfc 	.word	0x1fff8cfc

000075e8 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    75e8:	b084      	sub	sp, #16
    75ea:	4603      	mov	r3, r0
    75ec:	460a      	mov	r2, r1
    75ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    75f2:	4613      	mov	r3, r2
    75f4:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    75f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    75fc:	4a46      	ldr	r2, [pc, #280]	; (7718 <Adc_UpdateStatusAfterGetStream+0x130>)
    75fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7602:	68da      	ldr	r2, [r3, #12]
    7604:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7608:	005b      	lsls	r3, r3, #1
    760a:	4413      	add	r3, r2
    760c:	881b      	ldrh	r3, [r3, #0]
    760e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    7612:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7616:	4941      	ldr	r1, [pc, #260]	; (771c <Adc_UpdateStatusAfterGetStream+0x134>)
    7618:	4613      	mov	r3, r2
    761a:	009b      	lsls	r3, r3, #2
    761c:	4413      	add	r3, r2
    761e:	009b      	lsls	r3, r3, #2
    7620:	440b      	add	r3, r1
    7622:	681b      	ldr	r3, [r3, #0]
    7624:	2b02      	cmp	r3, #2
    7626:	d109      	bne.n	763c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7628:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    762c:	493b      	ldr	r1, [pc, #236]	; (771c <Adc_UpdateStatusAfterGetStream+0x134>)
    762e:	4613      	mov	r3, r2
    7630:	009b      	lsls	r3, r3, #2
    7632:	4413      	add	r3, r2
    7634:	009b      	lsls	r3, r3, #2
    7636:	440b      	add	r3, r1
    7638:	2201      	movs	r2, #1
    763a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    763c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7640:	4936      	ldr	r1, [pc, #216]	; (771c <Adc_UpdateStatusAfterGetStream+0x134>)
    7642:	4613      	mov	r3, r2
    7644:	009b      	lsls	r3, r3, #2
    7646:	4413      	add	r3, r2
    7648:	009b      	lsls	r3, r3, #2
    764a:	440b      	add	r3, r1
    764c:	681b      	ldr	r3, [r3, #0]
    764e:	2b03      	cmp	r3, #3
    7650:	d15f      	bne.n	7712 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    7652:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7656:	4a30      	ldr	r2, [pc, #192]	; (7718 <Adc_UpdateStatusAfterGetStream+0x130>)
    7658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    765c:	685a      	ldr	r2, [r3, #4]
    765e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7662:	2134      	movs	r1, #52	; 0x34
    7664:	fb01 f303 	mul.w	r3, r1, r3
    7668:	4413      	add	r3, r2
    766a:	695b      	ldr	r3, [r3, #20]
    766c:	2b00      	cmp	r3, #0
    766e:	d150      	bne.n	7712 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7670:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7674:	4a28      	ldr	r2, [pc, #160]	; (7718 <Adc_UpdateStatusAfterGetStream+0x130>)
    7676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    767a:	685a      	ldr	r2, [r3, #4]
    767c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7680:	2134      	movs	r1, #52	; 0x34
    7682:	fb01 f303 	mul.w	r3, r1, r3
    7686:	4413      	add	r3, r2
    7688:	689b      	ldr	r3, [r3, #8]
    768a:	2b00      	cmp	r3, #0
    768c:	d02c      	beq.n	76e8 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    768e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7692:	4a21      	ldr	r2, [pc, #132]	; (7718 <Adc_UpdateStatusAfterGetStream+0x130>)
    7694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7698:	685a      	ldr	r2, [r3, #4]
    769a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    769e:	2134      	movs	r1, #52	; 0x34
    76a0:	fb01 f303 	mul.w	r3, r1, r3
    76a4:	4413      	add	r3, r2
    76a6:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    76a8:	2b01      	cmp	r3, #1
    76aa:	d128      	bne.n	76fe <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76b0:	4a19      	ldr	r2, [pc, #100]	; (7718 <Adc_UpdateStatusAfterGetStream+0x130>)
    76b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b6:	685a      	ldr	r2, [r3, #4]
    76b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76bc:	2134      	movs	r1, #52	; 0x34
    76be:	fb01 f303 	mul.w	r3, r1, r3
    76c2:	4413      	add	r3, r2
    76c4:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    76c6:	2b01      	cmp	r3, #1
    76c8:	d119      	bne.n	76fe <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    76ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    76ce:	4a12      	ldr	r2, [pc, #72]	; (7718 <Adc_UpdateStatusAfterGetStream+0x130>)
    76d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76d4:	685a      	ldr	r2, [r3, #4]
    76d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    76da:	2134      	movs	r1, #52	; 0x34
    76dc:	fb01 f303 	mul.w	r3, r1, r3
    76e0:	4413      	add	r3, r2
    76e2:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    76e4:	2b00      	cmp	r3, #0
    76e6:	d10a      	bne.n	76fe <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    76e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    76ec:	490b      	ldr	r1, [pc, #44]	; (771c <Adc_UpdateStatusAfterGetStream+0x134>)
    76ee:	4613      	mov	r3, r2
    76f0:	009b      	lsls	r3, r3, #2
    76f2:	4413      	add	r3, r2
    76f4:	009b      	lsls	r3, r3, #2
    76f6:	440b      	add	r3, r1
    76f8:	2200      	movs	r2, #0
    76fa:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    76fc:	e009      	b.n	7712 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    76fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7702:	4906      	ldr	r1, [pc, #24]	; (771c <Adc_UpdateStatusAfterGetStream+0x134>)
    7704:	4613      	mov	r3, r2
    7706:	009b      	lsls	r3, r3, #2
    7708:	4413      	add	r3, r2
    770a:	009b      	lsls	r3, r3, #2
    770c:	440b      	add	r3, r1
    770e:	2201      	movs	r2, #1
    7710:	601a      	str	r2, [r3, #0]
}
    7712:	bf00      	nop
    7714:	b004      	add	sp, #16
    7716:	4770      	bx	lr
    7718:	1fff8cf8 	.word	0x1fff8cf8
    771c:	1fff8cfc 	.word	0x1fff8cfc

00007720 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    7720:	b500      	push	{lr}
    7722:	b085      	sub	sp, #20
    7724:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    7726:	f002 fa5b 	bl	9be0 <Adc_GetCoreID>
    772a:	4603      	mov	r3, r0
    772c:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7730:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7734:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    7738:	f89d 300c 	ldrb.w	r3, [sp, #12]
    773c:	b2db      	uxtb	r3, r3
    773e:	4619      	mov	r1, r3
    7740:	9801      	ldr	r0, [sp, #4]
    7742:	f7ff fbb3 	bl	6eac <Adc_CheckCurrentCoreId>
    7746:	4603      	mov	r3, r0
    7748:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    774c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7750:	2b00      	cmp	r3, #0
    7752:	d12c      	bne.n	77ae <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    7754:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7758:	b2db      	uxtb	r3, r3
    775a:	4619      	mov	r1, r3
    775c:	4a16      	ldr	r2, [pc, #88]	; (77b8 <Adc_Init+0x98>)
    775e:	9b01      	ldr	r3, [sp, #4]
    7760:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    7764:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7768:	b2db      	uxtb	r3, r3
    776a:	4618      	mov	r0, r3
    776c:	f7ff fb4e 	bl	6e0c <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    7770:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7774:	b2db      	uxtb	r3, r3
    7776:	4618      	mov	r0, r3
    7778:	f7ff fade 	bl	6d38 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    777c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7780:	b2db      	uxtb	r3, r3
    7782:	461a      	mov	r2, r3
    7784:	4b0c      	ldr	r3, [pc, #48]	; (77b8 <Adc_Init+0x98>)
    7786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    778a:	681b      	ldr	r3, [r3, #0]
    778c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7790:	4611      	mov	r1, r2
    7792:	4618      	mov	r0, r3
    7794:	f001 ff78 	bl	9688 <Adc_Ipw_Init>
    7798:	4603      	mov	r3, r0
    779a:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    779e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    77a2:	2b01      	cmp	r3, #1
    77a4:	d103      	bne.n	77ae <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    77a6:	212b      	movs	r1, #43	; 0x2b
    77a8:	2000      	movs	r0, #0
    77aa:	f7ff f897 	bl	68dc <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    77ae:	bf00      	nop
    77b0:	b005      	add	sp, #20
    77b2:	f85d fb04 	ldr.w	pc, [sp], #4
    77b6:	bf00      	nop
    77b8:	1fff8cf8 	.word	0x1fff8cf8

000077bc <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    77bc:	b500      	push	{lr}
    77be:	b085      	sub	sp, #20
    77c0:	4603      	mov	r3, r0
    77c2:	9100      	str	r1, [sp, #0]
    77c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    77c8:	2301      	movs	r3, #1
    77ca:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    77ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    77d2:	4618      	mov	r0, r3
    77d4:	f7ff f9a2 	bl	6b1c <Adc_ValidateSetupBufferNotBusy>
    77d8:	4603      	mov	r3, r0
    77da:	2b00      	cmp	r3, #0
    77dc:	d10d      	bne.n	77fa <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    77de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    77e2:	4909      	ldr	r1, [pc, #36]	; (7808 <Adc_SetupResultBuffer+0x4c>)
    77e4:	4613      	mov	r3, r2
    77e6:	009b      	lsls	r3, r3, #2
    77e8:	4413      	add	r3, r2
    77ea:	009b      	lsls	r3, r3, #2
    77ec:	440b      	add	r3, r1
    77ee:	330c      	adds	r3, #12
    77f0:	9a00      	ldr	r2, [sp, #0]
    77f2:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    77f4:	2300      	movs	r3, #0
    77f6:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    77fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    77fe:	4618      	mov	r0, r3
    7800:	b005      	add	sp, #20
    7802:	f85d fb04 	ldr.w	pc, [sp], #4
    7806:	bf00      	nop
    7808:	1fff8cfc 	.word	0x1fff8cfc

0000780c <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    780c:	b500      	push	{lr}
    780e:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7810:	2300      	movs	r3, #0
    7812:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    7816:	f002 f9e3 	bl	9be0 <Adc_GetCoreID>
    781a:	4603      	mov	r3, r0
    781c:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    7820:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7824:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    7828:	f89d 3002 	ldrb.w	r3, [sp, #2]
    782c:	b2db      	uxtb	r3, r3
    782e:	461a      	mov	r2, r3
    7830:	4b2d      	ldr	r3, [pc, #180]	; (78e8 <Adc_DeInit+0xdc>)
    7832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7836:	f89d 2006 	ldrb.w	r2, [sp, #6]
    783a:	4611      	mov	r1, r2
    783c:	4618      	mov	r0, r3
    783e:	f7ff fb35 	bl	6eac <Adc_CheckCurrentCoreId>
    7842:	4603      	mov	r3, r0
    7844:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    7848:	f89d 3005 	ldrb.w	r3, [sp, #5]
    784c:	2b00      	cmp	r3, #0
    784e:	d147      	bne.n	78e0 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    7850:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7854:	b2db      	uxtb	r3, r3
    7856:	4618      	mov	r0, r3
    7858:	f7ff f912 	bl	6a80 <Adc_ValidateDeInitNotBusy>
    785c:	4603      	mov	r3, r0
    785e:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    7862:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7866:	2b00      	cmp	r3, #0
    7868:	d13a      	bne.n	78e0 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    786a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    786e:	b2db      	uxtb	r3, r3
    7870:	4618      	mov	r0, r3
    7872:	f001 ff4e 	bl	9712 <Adc_Ipw_DeInit>
    7876:	4603      	mov	r3, r0
    7878:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    787c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7880:	2b01      	cmp	r3, #1
    7882:	d103      	bne.n	788c <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    7884:	212b      	movs	r1, #43	; 0x2b
    7886:	2001      	movs	r0, #1
    7888:	f7ff f828 	bl	68dc <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    788c:	2300      	movs	r3, #0
    788e:	f88d 3007 	strb.w	r3, [sp, #7]
    7892:	e019      	b.n	78c8 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7894:	f89d 3002 	ldrb.w	r3, [sp, #2]
    7898:	b2db      	uxtb	r3, r3
    789a:	461a      	mov	r2, r3
    789c:	4b12      	ldr	r3, [pc, #72]	; (78e8 <Adc_DeInit+0xdc>)
    789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78a2:	681a      	ldr	r2, [r3, #0]
    78a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78a8:	4413      	add	r3, r2
    78aa:	7f9b      	ldrb	r3, [r3, #30]
    78ac:	2b01      	cmp	r3, #1
    78ae:	d106      	bne.n	78be <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    78b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78b4:	4a0d      	ldr	r2, [pc, #52]	; (78ec <Adc_DeInit+0xe0>)
    78b6:	00db      	lsls	r3, r3, #3
    78b8:	4413      	add	r3, r2
    78ba:	2200      	movs	r2, #0
    78bc:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    78be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78c2:	3301      	adds	r3, #1
    78c4:	f88d 3007 	strb.w	r3, [sp, #7]
    78c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78cc:	2b01      	cmp	r3, #1
    78ce:	d9e1      	bls.n	7894 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    78d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    78d4:	b2db      	uxtb	r3, r3
    78d6:	4619      	mov	r1, r3
    78d8:	4b03      	ldr	r3, [pc, #12]	; (78e8 <Adc_DeInit+0xdc>)
    78da:	2200      	movs	r2, #0
    78dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    78e0:	bf00      	nop
    78e2:	b003      	add	sp, #12
    78e4:	f85d fb04 	ldr.w	pc, [sp], #4
    78e8:	1fff8cf8 	.word	0x1fff8cf8
    78ec:	1fff8d10 	.word	0x1fff8d10

000078f0 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    78f0:	b500      	push	{lr}
    78f2:	b085      	sub	sp, #20
    78f4:	4603      	mov	r3, r0
    78f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    78fa:	2300      	movs	r3, #0
    78fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7900:	2300      	movs	r3, #0
    7902:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7906:	f002 f96b 	bl	9be0 <Adc_GetCoreID>
    790a:	4603      	mov	r3, r0
    790c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7910:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7914:	b2db      	uxtb	r3, r3
    7916:	461a      	mov	r2, r3
    7918:	4b1a      	ldr	r3, [pc, #104]	; (7984 <Adc_StartGroupConversion+0x94>)
    791a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    791e:	68da      	ldr	r2, [r3, #12]
    7920:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7924:	005b      	lsls	r3, r3, #1
    7926:	4413      	add	r3, r2
    7928:	881b      	ldrh	r3, [r3, #0]
    792a:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    792e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7932:	b2da      	uxtb	r2, r3
    7934:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7938:	4611      	mov	r1, r2
    793a:	4618      	mov	r0, r3
    793c:	f7ff f912 	bl	6b64 <Adc_ValidateStateStartGroupConvNotBusy>
    7940:	4603      	mov	r3, r0
    7942:	2b00      	cmp	r3, #0
    7944:	d11a      	bne.n	797c <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    7946:	f89d 300c 	ldrb.w	r3, [sp, #12]
    794a:	b2db      	uxtb	r3, r3
    794c:	461a      	mov	r2, r3
    794e:	4b0d      	ldr	r3, [pc, #52]	; (7984 <Adc_StartGroupConversion+0x94>)
    7950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7954:	685a      	ldr	r2, [r3, #4]
    7956:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    795a:	2134      	movs	r1, #52	; 0x34
    795c:	fb01 f303 	mul.w	r3, r1, r3
    7960:	4413      	add	r3, r2
    7962:	789b      	ldrb	r3, [r3, #2]
    7964:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    7968:	f89d 300c 	ldrb.w	r3, [sp, #12]
    796c:	b2da      	uxtb	r2, r3
    796e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7976:	4618      	mov	r0, r3
    7978:	f7ff facb 	bl	6f12 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    797c:	bf00      	nop
    797e:	b005      	add	sp, #20
    7980:	f85d fb04 	ldr.w	pc, [sp], #4
    7984:	1fff8cf8 	.word	0x1fff8cf8

00007988 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    7988:	b500      	push	{lr}
    798a:	b085      	sub	sp, #20
    798c:	4603      	mov	r3, r0
    798e:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7992:	2300      	movs	r3, #0
    7994:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    7998:	2300      	movs	r3, #0
    799a:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    799e:	f002 f91f 	bl	9be0 <Adc_GetCoreID>
    79a2:	4603      	mov	r3, r0
    79a4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    79a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79ac:	b2da      	uxtb	r2, r3
    79ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79b2:	4619      	mov	r1, r3
    79b4:	2003      	movs	r0, #3
    79b6:	f7ff f94d 	bl	6c54 <Adc_ValidateStateNotIdle>
    79ba:	4603      	mov	r3, r0
    79bc:	2b00      	cmp	r3, #0
    79be:	d129      	bne.n	7a14 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    79c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79c4:	b2db      	uxtb	r3, r3
    79c6:	461a      	mov	r2, r3
    79c8:	4b14      	ldr	r3, [pc, #80]	; (7a1c <Adc_StopGroupConversion+0x94>)
    79ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79ce:	68da      	ldr	r2, [r3, #12]
    79d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79d4:	005b      	lsls	r3, r3, #1
    79d6:	4413      	add	r3, r2
    79d8:	881b      	ldrh	r3, [r3, #0]
    79da:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    79de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    79e2:	b2db      	uxtb	r3, r3
    79e4:	461a      	mov	r2, r3
    79e6:	4b0d      	ldr	r3, [pc, #52]	; (7a1c <Adc_StopGroupConversion+0x94>)
    79e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79ec:	685a      	ldr	r2, [r3, #4]
    79ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    79f2:	2134      	movs	r1, #52	; 0x34
    79f4:	fb01 f303 	mul.w	r3, r1, r3
    79f8:	4413      	add	r3, r2
    79fa:	789b      	ldrb	r3, [r3, #2]
    79fc:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    7a00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7a04:	b2da      	uxtb	r2, r3
    7a06:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7a0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a0e:	4618      	mov	r0, r3
    7a10:	f7ff fb78 	bl	7104 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    7a14:	bf00      	nop
    7a16:	b005      	add	sp, #20
    7a18:	f85d fb04 	ldr.w	pc, [sp], #4
    7a1c:	1fff8cf8 	.word	0x1fff8cf8

00007a20 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    7a20:	b500      	push	{lr}
    7a22:	b085      	sub	sp, #20
    7a24:	4603      	mov	r3, r0
    7a26:	9100      	str	r1, [sp, #0]
    7a28:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    7a2c:	2301      	movs	r3, #1
    7a2e:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    7a32:	2301      	movs	r3, #1
    7a34:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    7a38:	f002 f8d2 	bl	9be0 <Adc_GetCoreID>
    7a3c:	4603      	mov	r3, r0
    7a3e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    7a42:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a46:	b2da      	uxtb	r2, r3
    7a48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a4c:	4619      	mov	r1, r3
    7a4e:	2004      	movs	r0, #4
    7a50:	f7ff f900 	bl	6c54 <Adc_ValidateStateNotIdle>
    7a54:	4603      	mov	r3, r0
    7a56:	2b00      	cmp	r3, #0
    7a58:	d121      	bne.n	7a9e <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    7a5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a5e:	b2db      	uxtb	r3, r3
    7a60:	f10d 020d 	add.w	r2, sp, #13
    7a64:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7a68:	9900      	ldr	r1, [sp, #0]
    7a6a:	f002 f812 	bl	9a92 <Adc_Ipw_ReadGroup>
    7a6e:	4603      	mov	r3, r0
    7a70:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    7a74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d006      	beq.n	7a8a <Adc_ReadGroup+0x6a>
    7a7c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a80:	f083 0301 	eor.w	r3, r3, #1
    7a84:	b2db      	uxtb	r3, r3
    7a86:	2b00      	cmp	r3, #0
    7a88:	d009      	beq.n	7a9e <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    7a8a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    7a8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7a92:	b2da      	uxtb	r2, r3
    7a94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a98:	4618      	mov	r0, r3
    7a9a:	f7ff fbe5 	bl	7268 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    7a9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7aa2:	4618      	mov	r0, r3
    7aa4:	b005      	add	sp, #20
    7aa6:	f85d fb04 	ldr.w	pc, [sp], #4

00007aaa <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    7aaa:	b084      	sub	sp, #16
    7aac:	4603      	mov	r3, r0
    7aae:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    7ab2:	2300      	movs	r3, #0
    7ab4:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    7ab6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7aba:	4906      	ldr	r1, [pc, #24]	; (7ad4 <Adc_GetGroupStatus+0x2a>)
    7abc:	4613      	mov	r3, r2
    7abe:	009b      	lsls	r3, r3, #2
    7ac0:	4413      	add	r3, r2
    7ac2:	009b      	lsls	r3, r3, #2
    7ac4:	440b      	add	r3, r1
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    7aca:	9b03      	ldr	r3, [sp, #12]
}
    7acc:	4618      	mov	r0, r3
    7ace:	b004      	add	sp, #16
    7ad0:	4770      	bx	lr
    7ad2:	bf00      	nop
    7ad4:	1fff8cfc 	.word	0x1fff8cfc

00007ad8 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    7ad8:	b500      	push	{lr}
    7ada:	b085      	sub	sp, #20
    7adc:	4603      	mov	r3, r0
    7ade:	9100      	str	r1, [sp, #0]
    7ae0:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    7ae4:	f002 f87c 	bl	9be0 <Adc_GetCoreID>
    7ae8:	4603      	mov	r3, r0
    7aea:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    7aee:	2300      	movs	r3, #0
    7af0:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    7af4:	2300      	movs	r3, #0
    7af6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    7afa:	2300      	movs	r3, #0
    7afc:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    7b00:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b04:	b2da      	uxtb	r2, r3
    7b06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b0a:	4619      	mov	r1, r3
    7b0c:	200b      	movs	r0, #11
    7b0e:	f7ff f8a1 	bl	6c54 <Adc_ValidateStateNotIdle>
    7b12:	4603      	mov	r3, r0
    7b14:	2b00      	cmp	r3, #0
    7b16:	f040 808e 	bne.w	7c36 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    7b1a:	9b00      	ldr	r3, [sp, #0]
    7b1c:	2200      	movs	r2, #0
    7b1e:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b24:	4948      	ldr	r1, [pc, #288]	; (7c48 <Adc_GetStreamLastPointer+0x170>)
    7b26:	4613      	mov	r3, r2
    7b28:	009b      	lsls	r3, r3, #2
    7b2a:	4413      	add	r3, r2
    7b2c:	009b      	lsls	r3, r3, #2
    7b2e:	440b      	add	r3, r1
    7b30:	681b      	ldr	r3, [r3, #0]
    7b32:	2b00      	cmp	r3, #0
    7b34:	f000 8082 	beq.w	7c3c <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    7b38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b3c:	4942      	ldr	r1, [pc, #264]	; (7c48 <Adc_GetStreamLastPointer+0x170>)
    7b3e:	4613      	mov	r3, r2
    7b40:	009b      	lsls	r3, r3, #2
    7b42:	4413      	add	r3, r2
    7b44:	009b      	lsls	r3, r3, #2
    7b46:	440b      	add	r3, r1
    7b48:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    7b4a:	2b01      	cmp	r3, #1
    7b4c:	d076      	beq.n	7c3c <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b4e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b52:	b2db      	uxtb	r3, r3
    7b54:	461a      	mov	r2, r3
    7b56:	4b3d      	ldr	r3, [pc, #244]	; (7c4c <Adc_GetStreamLastPointer+0x174>)
    7b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b5c:	68da      	ldr	r2, [r3, #12]
    7b5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b62:	005b      	lsls	r3, r3, #1
    7b64:	4413      	add	r3, r2
    7b66:	881b      	ldrh	r3, [r3, #0]
    7b68:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    7b6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b70:	4935      	ldr	r1, [pc, #212]	; (7c48 <Adc_GetStreamLastPointer+0x170>)
    7b72:	4613      	mov	r3, r2
    7b74:	009b      	lsls	r3, r3, #2
    7b76:	4413      	add	r3, r2
    7b78:	009b      	lsls	r3, r3, #2
    7b7a:	440b      	add	r3, r1
    7b7c:	3308      	adds	r3, #8
    7b7e:	881b      	ldrh	r3, [r3, #0]
    7b80:	b29b      	uxth	r3, r3
    7b82:	2b00      	cmp	r3, #0
    7b84:	d123      	bne.n	7bce <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    7b86:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7b8a:	b2db      	uxtb	r3, r3
    7b8c:	461a      	mov	r2, r3
    7b8e:	4b2f      	ldr	r3, [pc, #188]	; (7c4c <Adc_GetStreamLastPointer+0x174>)
    7b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b94:	685a      	ldr	r2, [r3, #4]
    7b96:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7b9a:	2134      	movs	r1, #52	; 0x34
    7b9c:	fb01 f303 	mul.w	r3, r1, r3
    7ba0:	4413      	add	r3, r2
    7ba2:	8b9b      	ldrh	r3, [r3, #28]
    7ba4:	3b01      	subs	r3, #1
    7ba6:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    7baa:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7bae:	b2db      	uxtb	r3, r3
    7bb0:	461a      	mov	r2, r3
    7bb2:	4b26      	ldr	r3, [pc, #152]	; (7c4c <Adc_GetStreamLastPointer+0x174>)
    7bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bb8:	685a      	ldr	r2, [r3, #4]
    7bba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7bbe:	2134      	movs	r1, #52	; 0x34
    7bc0:	fb01 f303 	mul.w	r3, r1, r3
    7bc4:	4413      	add	r3, r2
    7bc6:	8b9b      	ldrh	r3, [r3, #28]
    7bc8:	f8ad 300e 	strh.w	r3, [sp, #14]
    7bcc:	e019      	b.n	7c02 <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    7bce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7bd2:	491d      	ldr	r1, [pc, #116]	; (7c48 <Adc_GetStreamLastPointer+0x170>)
    7bd4:	4613      	mov	r3, r2
    7bd6:	009b      	lsls	r3, r3, #2
    7bd8:	4413      	add	r3, r2
    7bda:	009b      	lsls	r3, r3, #2
    7bdc:	440b      	add	r3, r1
    7bde:	3308      	adds	r3, #8
    7be0:	881b      	ldrh	r3, [r3, #0]
    7be2:	b29b      	uxth	r3, r3
    7be4:	3b01      	subs	r3, #1
    7be6:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    7bea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7bee:	4916      	ldr	r1, [pc, #88]	; (7c48 <Adc_GetStreamLastPointer+0x170>)
    7bf0:	4613      	mov	r3, r2
    7bf2:	009b      	lsls	r3, r3, #2
    7bf4:	4413      	add	r3, r2
    7bf6:	009b      	lsls	r3, r3, #2
    7bf8:	440b      	add	r3, r1
    7bfa:	3308      	adds	r3, #8
    7bfc:	881b      	ldrh	r3, [r3, #0]
    7bfe:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    7c02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c06:	4910      	ldr	r1, [pc, #64]	; (7c48 <Adc_GetStreamLastPointer+0x170>)
    7c08:	4613      	mov	r3, r2
    7c0a:	009b      	lsls	r3, r3, #2
    7c0c:	4413      	add	r3, r2
    7c0e:	009b      	lsls	r3, r3, #2
    7c10:	440b      	add	r3, r1
    7c12:	330c      	adds	r3, #12
    7c14:	681a      	ldr	r2, [r3, #0]
    7c16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7c1a:	005b      	lsls	r3, r3, #1
    7c1c:	441a      	add	r2, r3
    7c1e:	9b00      	ldr	r3, [sp, #0]
    7c20:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    7c22:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7c26:	b2da      	uxtb	r2, r3
    7c28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c2c:	4611      	mov	r1, r2
    7c2e:	4618      	mov	r0, r3
    7c30:	f7ff fcda 	bl	75e8 <Adc_UpdateStatusAfterGetStream>
    7c34:	e002      	b.n	7c3c <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    7c36:	9b00      	ldr	r3, [sp, #0]
    7c38:	2200      	movs	r2, #0
    7c3a:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    7c3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7c40:	4618      	mov	r0, r3
    7c42:	b005      	add	sp, #20
    7c44:	f85d fb04 	ldr.w	pc, [sp], #4
    7c48:	1fff8cfc 	.word	0x1fff8cfc
    7c4c:	1fff8cf8 	.word	0x1fff8cf8

00007c50 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    7c50:	b082      	sub	sp, #8
    7c52:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    7c54:	9b01      	ldr	r3, [sp, #4]
    7c56:	222b      	movs	r2, #43	; 0x2b
    7c58:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    7c5a:	9b01      	ldr	r3, [sp, #4]
    7c5c:	227b      	movs	r2, #123	; 0x7b
    7c5e:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    7c60:	9b01      	ldr	r3, [sp, #4]
    7c62:	2202      	movs	r2, #2
    7c64:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    7c66:	9b01      	ldr	r3, [sp, #4]
    7c68:	2200      	movs	r2, #0
    7c6a:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    7c6c:	9b01      	ldr	r3, [sp, #4]
    7c6e:	2200      	movs	r2, #0
    7c70:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    7c72:	bf00      	nop
    7c74:	b002      	add	sp, #8
    7c76:	4770      	bx	lr

00007c78 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    7c78:	b500      	push	{lr}
    7c7a:	b085      	sub	sp, #20
    7c7c:	4603      	mov	r3, r0
    7c7e:	9100      	str	r1, [sp, #0]
    7c80:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    7c84:	2300      	movs	r3, #0
    7c86:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    7c8a:	f001 ffa9 	bl	9be0 <Adc_GetCoreID>
    7c8e:	4603      	mov	r3, r0
    7c90:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    7c94:	9b00      	ldr	r3, [sp, #0]
    7c96:	2201      	movs	r2, #1
    7c98:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    7c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c9e:	2129      	movs	r1, #41	; 0x29
    7ca0:	4618      	mov	r0, r3
    7ca2:	f7fe fe30 	bl	6906 <Adc_ValidateNotBusyNoQueue>
    7ca6:	4603      	mov	r3, r0
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d115      	bne.n	7cd8 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    7cac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cb0:	b2db      	uxtb	r3, r3
    7cb2:	4619      	mov	r1, r3
    7cb4:	2029      	movs	r0, #41	; 0x29
    7cb6:	f7fe fe91 	bl	69dc <Adc_ValidateCheckGroupNotConversion>
    7cba:	4603      	mov	r3, r0
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d10b      	bne.n	7cd8 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    7cc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7cc4:	b2da      	uxtb	r2, r3
    7cc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cca:	9900      	ldr	r1, [sp, #0]
    7ccc:	4618      	mov	r0, r3
    7cce:	f001 ff5d 	bl	9b8c <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    7cd2:	2301      	movs	r3, #1
    7cd4:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    7cd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7cdc:	2b00      	cmp	r3, #0
    7cde:	d007      	beq.n	7cf0 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    7ce0:	9b00      	ldr	r3, [sp, #0]
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	2b01      	cmp	r3, #1
    7ce6:	d103      	bne.n	7cf0 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    7ce8:	212b      	movs	r1, #43	; 0x2b
    7cea:	2029      	movs	r0, #41	; 0x29
    7cec:	f7fe fdf6 	bl	68dc <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    7cf0:	bf00      	nop
    7cf2:	b005      	add	sp, #20
    7cf4:	f85d fb04 	ldr.w	pc, [sp], #4

00007cf8 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    7cf8:	b086      	sub	sp, #24
    7cfa:	9003      	str	r0, [sp, #12]
    7cfc:	9102      	str	r1, [sp, #8]
    7cfe:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    7d00:	9b03      	ldr	r3, [sp, #12]
    7d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7d06:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    7d08:	9b02      	ldr	r3, [sp, #8]
    7d0a:	43db      	mvns	r3, r3
    7d0c:	9a05      	ldr	r2, [sp, #20]
    7d0e:	4013      	ands	r3, r2
    7d10:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    7d12:	9a05      	ldr	r2, [sp, #20]
    7d14:	9b01      	ldr	r3, [sp, #4]
    7d16:	4313      	orrs	r3, r2
    7d18:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    7d1a:	9b03      	ldr	r3, [sp, #12]
    7d1c:	9a05      	ldr	r2, [sp, #20]
    7d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7d22:	bf00      	nop
    7d24:	b006      	add	sp, #24
    7d26:	4770      	bx	lr

00007d28 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    7d28:	b086      	sub	sp, #24
    7d2a:	9003      	str	r0, [sp, #12]
    7d2c:	9102      	str	r1, [sp, #8]
    7d2e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    7d30:	9b03      	ldr	r3, [sp, #12]
    7d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7d34:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    7d36:	9b05      	ldr	r3, [sp, #20]
    7d38:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    7d3c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    7d3e:	9b02      	ldr	r3, [sp, #8]
    7d40:	015b      	lsls	r3, r3, #5
    7d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
    7d46:	9a05      	ldr	r2, [sp, #20]
    7d48:	4313      	orrs	r3, r2
    7d4a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    7d4c:	9b01      	ldr	r3, [sp, #4]
    7d4e:	f003 0303 	and.w	r3, r3, #3
    7d52:	9a05      	ldr	r2, [sp, #20]
    7d54:	4313      	orrs	r3, r2
    7d56:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    7d58:	9b03      	ldr	r3, [sp, #12]
    7d5a:	9a05      	ldr	r2, [sp, #20]
    7d5c:	641a      	str	r2, [r3, #64]	; 0x40
}
    7d5e:	bf00      	nop
    7d60:	b006      	add	sp, #24
    7d62:	4770      	bx	lr

00007d64 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    7d64:	b084      	sub	sp, #16
    7d66:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    7d68:	2300      	movs	r3, #0
    7d6a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    7d6c:	9b01      	ldr	r3, [sp, #4]
    7d6e:	095b      	lsrs	r3, r3, #5
    7d70:	f003 0303 	and.w	r3, r3, #3
    7d74:	2b03      	cmp	r3, #3
    7d76:	d00c      	beq.n	7d92 <Adc_HwAcc_GetClockDivide+0x2e>
    7d78:	2b03      	cmp	r3, #3
    7d7a:	d80d      	bhi.n	7d98 <Adc_HwAcc_GetClockDivide+0x34>
    7d7c:	2b01      	cmp	r3, #1
    7d7e:	d002      	beq.n	7d86 <Adc_HwAcc_GetClockDivide+0x22>
    7d80:	2b02      	cmp	r3, #2
    7d82:	d003      	beq.n	7d8c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    7d84:	e008      	b.n	7d98 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    7d86:	2301      	movs	r3, #1
    7d88:	9303      	str	r3, [sp, #12]
            break;
    7d8a:	e006      	b.n	7d9a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    7d8c:	2302      	movs	r3, #2
    7d8e:	9303      	str	r3, [sp, #12]
            break;
    7d90:	e003      	b.n	7d9a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    7d92:	2303      	movs	r3, #3
    7d94:	9303      	str	r3, [sp, #12]
            break;
    7d96:	e000      	b.n	7d9a <Adc_HwAcc_GetClockDivide+0x36>
            break;
    7d98:	bf00      	nop
    }
    return ReturnValue;
    7d9a:	9b03      	ldr	r3, [sp, #12]
}
    7d9c:	4618      	mov	r0, r3
    7d9e:	b004      	add	sp, #16
    7da0:	4770      	bx	lr

00007da2 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    7da2:	b084      	sub	sp, #16
    7da4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    7da6:	2300      	movs	r3, #0
    7da8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    7daa:	9b01      	ldr	r3, [sp, #4]
    7dac:	f003 0303 	and.w	r3, r3, #3
    7db0:	2b03      	cmp	r3, #3
    7db2:	d00c      	beq.n	7dce <Adc_HwAcc_GetInputClock+0x2c>
    7db4:	2b03      	cmp	r3, #3
    7db6:	d80d      	bhi.n	7dd4 <Adc_HwAcc_GetInputClock+0x32>
    7db8:	2b01      	cmp	r3, #1
    7dba:	d002      	beq.n	7dc2 <Adc_HwAcc_GetInputClock+0x20>
    7dbc:	2b02      	cmp	r3, #2
    7dbe:	d003      	beq.n	7dc8 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    7dc0:	e008      	b.n	7dd4 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    7dc2:	2301      	movs	r3, #1
    7dc4:	9303      	str	r3, [sp, #12]
            break;
    7dc6:	e006      	b.n	7dd6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    7dc8:	2302      	movs	r3, #2
    7dca:	9303      	str	r3, [sp, #12]
            break;
    7dcc:	e003      	b.n	7dd6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    7dce:	2303      	movs	r3, #3
    7dd0:	9303      	str	r3, [sp, #12]
            break;
    7dd2:	e000      	b.n	7dd6 <Adc_HwAcc_GetInputClock+0x34>
            break;
    7dd4:	bf00      	nop
    }
    return ReturnValue;
    7dd6:	9b03      	ldr	r3, [sp, #12]
}
    7dd8:	4618      	mov	r0, r3
    7dda:	b004      	add	sp, #16
    7ddc:	4770      	bx	lr

00007dde <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    7dde:	b084      	sub	sp, #16
    7de0:	9001      	str	r0, [sp, #4]
    7de2:	460b      	mov	r3, r1
    7de4:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    7de8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7dec:	2b00      	cmp	r3, #0
    7dee:	d002      	beq.n	7df6 <Adc_HwAcc_SetSampleTime+0x18>
    7df0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7df4:	e000      	b.n	7df8 <Adc_HwAcc_SetSampleTime+0x1a>
    7df6:	2301      	movs	r3, #1
    7df8:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    7dfc:	9b01      	ldr	r3, [sp, #4]
    7dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7e00:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    7e02:	9b02      	ldr	r3, [sp, #8]
    7e04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    7e08:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    7e0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e0e:	9a02      	ldr	r2, [sp, #8]
    7e10:	4313      	orrs	r3, r2
    7e12:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	9a02      	ldr	r2, [sp, #8]
    7e18:	645a      	str	r2, [r3, #68]	; 0x44
}
    7e1a:	bf00      	nop
    7e1c:	b004      	add	sp, #16
    7e1e:	4770      	bx	lr

00007e20 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    7e20:	b086      	sub	sp, #24
    7e22:	9003      	str	r0, [sp, #12]
    7e24:	460b      	mov	r3, r1
    7e26:	9201      	str	r2, [sp, #4]
    7e28:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    7e2c:	9b03      	ldr	r3, [sp, #12]
    7e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    7e32:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    7e34:	9b05      	ldr	r3, [sp, #20]
    7e36:	f023 0307 	bic.w	r3, r3, #7
    7e3a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    7e3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e40:	2b00      	cmp	r3, #0
    7e42:	d001      	beq.n	7e48 <Adc_HwAcc_SetAveraging+0x28>
    7e44:	2304      	movs	r3, #4
    7e46:	e000      	b.n	7e4a <Adc_HwAcc_SetAveraging+0x2a>
    7e48:	2300      	movs	r3, #0
    7e4a:	9a05      	ldr	r2, [sp, #20]
    7e4c:	4313      	orrs	r3, r2
    7e4e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    7e50:	9b01      	ldr	r3, [sp, #4]
    7e52:	f003 0303 	and.w	r3, r3, #3
    7e56:	9a05      	ldr	r2, [sp, #20]
    7e58:	4313      	orrs	r3, r2
    7e5a:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    7e5c:	9b03      	ldr	r3, [sp, #12]
    7e5e:	9a05      	ldr	r2, [sp, #20]
    7e60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7e64:	bf00      	nop
    7e66:	b006      	add	sp, #24
    7e68:	4770      	bx	lr

00007e6a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    7e6a:	b084      	sub	sp, #16
    7e6c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    7e6e:	2300      	movs	r3, #0
    7e70:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    7e72:	9b01      	ldr	r3, [sp, #4]
    7e74:	f003 0303 	and.w	r3, r3, #3
    7e78:	2b03      	cmp	r3, #3
    7e7a:	d00c      	beq.n	7e96 <Adc_HwAcc_GetAverageSelect+0x2c>
    7e7c:	2b03      	cmp	r3, #3
    7e7e:	d80d      	bhi.n	7e9c <Adc_HwAcc_GetAverageSelect+0x32>
    7e80:	2b01      	cmp	r3, #1
    7e82:	d002      	beq.n	7e8a <Adc_HwAcc_GetAverageSelect+0x20>
    7e84:	2b02      	cmp	r3, #2
    7e86:	d003      	beq.n	7e90 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    7e88:	e008      	b.n	7e9c <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    7e8a:	2301      	movs	r3, #1
    7e8c:	9303      	str	r3, [sp, #12]
            break;
    7e8e:	e006      	b.n	7e9e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    7e90:	2302      	movs	r3, #2
    7e92:	9303      	str	r3, [sp, #12]
            break;
    7e94:	e003      	b.n	7e9e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    7e96:	2303      	movs	r3, #3
    7e98:	9303      	str	r3, [sp, #12]
            break;
    7e9a:	e000      	b.n	7e9e <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    7e9c:	bf00      	nop
    }
    return ReturnValue;
    7e9e:	9b03      	ldr	r3, [sp, #12]
}
    7ea0:	4618      	mov	r0, r3
    7ea2:	b004      	add	sp, #16
    7ea4:	4770      	bx	lr

00007ea6 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    7ea6:	b084      	sub	sp, #16
    7ea8:	9001      	str	r0, [sp, #4]
    7eaa:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    7eac:	9b01      	ldr	r3, [sp, #4]
    7eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7eb2:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    7eb4:	9b03      	ldr	r3, [sp, #12]
    7eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7eba:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    7ebc:	9b00      	ldr	r3, [sp, #0]
    7ebe:	019b      	lsls	r3, r3, #6
    7ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ec4:	9a03      	ldr	r2, [sp, #12]
    7ec6:	4313      	orrs	r3, r2
    7ec8:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    7eca:	9b01      	ldr	r3, [sp, #4]
    7ecc:	9a03      	ldr	r2, [sp, #12]
    7ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    7ed2:	bf00      	nop
    7ed4:	b004      	add	sp, #16
    7ed6:	4770      	bx	lr

00007ed8 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    7ed8:	b084      	sub	sp, #16
    7eda:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    7edc:	2300      	movs	r3, #0
    7ede:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    7ee0:	9b01      	ldr	r3, [sp, #4]
    7ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d001      	beq.n	7eee <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    7eea:	2301      	movs	r3, #1
    7eec:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    7eee:	9b03      	ldr	r3, [sp, #12]
}
    7ef0:	4618      	mov	r0, r3
    7ef2:	b004      	add	sp, #16
    7ef4:	4770      	bx	lr

00007ef6 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    7ef6:	b086      	sub	sp, #24
    7ef8:	9003      	str	r0, [sp, #12]
    7efa:	9201      	str	r2, [sp, #4]
    7efc:	461a      	mov	r2, r3
    7efe:	460b      	mov	r3, r1
    7f00:	f88d 300b 	strb.w	r3, [sp, #11]
    7f04:	4613      	mov	r3, r2
    7f06:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    7f0a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f0e:	9b03      	ldr	r3, [sp, #12]
    7f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f14:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    7f16:	9b05      	ldr	r3, [sp, #20]
    7f18:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    7f1c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    7f1e:	9b01      	ldr	r3, [sp, #4]
    7f20:	f003 031f 	and.w	r3, r3, #31
    7f24:	9a05      	ldr	r2, [sp, #20]
    7f26:	4313      	orrs	r3, r2
    7f28:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    7f2a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d001      	beq.n	7f36 <Adc_HwAcc_SetChannel+0x40>
    7f32:	2340      	movs	r3, #64	; 0x40
    7f34:	e000      	b.n	7f38 <Adc_HwAcc_SetChannel+0x42>
    7f36:	2300      	movs	r3, #0
    7f38:	9a05      	ldr	r2, [sp, #20]
    7f3a:	4313      	orrs	r3, r2
    7f3c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    7f3e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7f42:	9b03      	ldr	r3, [sp, #12]
    7f44:	9905      	ldr	r1, [sp, #20]
    7f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7f4a:	bf00      	nop
    7f4c:	b006      	add	sp, #24
    7f4e:	4770      	bx	lr

00007f50 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    7f50:	b082      	sub	sp, #8
    7f52:	9001      	str	r0, [sp, #4]
    7f54:	460b      	mov	r3, r1
    7f56:	f8ad 3002 	strh.w	r3, [sp, #2]
    7f5a:	4613      	mov	r3, r2
    7f5c:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    7f60:	f8bd 3000 	ldrh.w	r3, [sp]
    7f64:	b2da      	uxtb	r2, r3
    7f66:	9b01      	ldr	r3, [sp, #4]
    7f68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    7f6c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7f74:	9b01      	ldr	r3, [sp, #4]
    7f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    7f7a:	bf00      	nop
    7f7c:	b002      	add	sp, #8
    7f7e:	4770      	bx	lr

00007f80 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    7f80:	b082      	sub	sp, #8
    7f82:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    7f84:	9b01      	ldr	r3, [sp, #4]
    7f86:	099b      	lsrs	r3, r3, #6
    7f88:	f003 0301 	and.w	r3, r3, #1
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	bf14      	ite	ne
    7f90:	2301      	movne	r3, #1
    7f92:	2300      	moveq	r3, #0
    7f94:	b2db      	uxtb	r3, r3
}
    7f96:	4618      	mov	r0, r3
    7f98:	b002      	add	sp, #8
    7f9a:	4770      	bx	lr

00007f9c <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    7f9c:	b082      	sub	sp, #8
    7f9e:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    7fa0:	9b01      	ldr	r3, [sp, #4]
    7fa2:	09db      	lsrs	r3, r3, #7
    7fa4:	f003 0301 	and.w	r3, r3, #1
    7fa8:	2b00      	cmp	r3, #0
    7faa:	bf14      	ite	ne
    7fac:	2301      	movne	r3, #1
    7fae:	2300      	moveq	r3, #0
    7fb0:	b2db      	uxtb	r3, r3
}
    7fb2:	4618      	mov	r0, r3
    7fb4:	b002      	add	sp, #8
    7fb6:	4770      	bx	lr

00007fb8 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    7fb8:	b084      	sub	sp, #16
    7fba:	9001      	str	r0, [sp, #4]
    7fbc:	460b      	mov	r3, r1
    7fbe:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    7fc2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7fc6:	9b01      	ldr	r3, [sp, #4]
    7fc8:	3212      	adds	r2, #18
    7fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fce:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    7fd2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7fda:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    7fde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    7fe2:	4618      	mov	r0, r3
    7fe4:	b004      	add	sp, #16
    7fe6:	4770      	bx	lr

00007fe8 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    7fe8:	b500      	push	{lr}
    7fea:	b085      	sub	sp, #20
    7fec:	9003      	str	r0, [sp, #12]
    7fee:	9102      	str	r1, [sp, #8]
    7ff0:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    7ff2:	f007 f8f7 	bl	f1e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    7ff6:	9b02      	ldr	r3, [sp, #8]
    7ff8:	7a59      	ldrb	r1, [r3, #9]
    7ffa:	9b02      	ldr	r3, [sp, #8]
    7ffc:	68db      	ldr	r3, [r3, #12]
    7ffe:	461a      	mov	r2, r3
    8000:	9803      	ldr	r0, [sp, #12]
    8002:	f7ff ff0d 	bl	7e20 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8006:	f007 f919 	bl	f23c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    800a:	f006 ff51 	bl	eeb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    800e:	9901      	ldr	r1, [sp, #4]
    8010:	9803      	ldr	r0, [sp, #12]
    8012:	f7ff ff48 	bl	7ea6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8016:	f006 ff77 	bl	ef08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    801a:	f006 fc67 	bl	e8ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    801e:	9b02      	ldr	r3, [sp, #8]
    8020:	7a1b      	ldrb	r3, [r3, #8]
    8022:	4619      	mov	r1, r3
    8024:	9803      	ldr	r0, [sp, #12]
    8026:	f7ff feda 	bl	7dde <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    802a:	f006 fc8b 	bl	e944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    802e:	f006 fbb9 	bl	e7a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8032:	9b02      	ldr	r3, [sp, #8]
    8034:	6819      	ldr	r1, [r3, #0]
    8036:	9b02      	ldr	r3, [sp, #8]
    8038:	685b      	ldr	r3, [r3, #4]
    803a:	461a      	mov	r2, r3
    803c:	9803      	ldr	r0, [sp, #12]
    803e:	f7ff fe73 	bl	7d28 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    8042:	f006 fbdb 	bl	e7fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    8046:	bf00      	nop
    8048:	b005      	add	sp, #20
    804a:	f85d fb04 	ldr.w	pc, [sp], #4

0000804e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    804e:	b500      	push	{lr}
    8050:	b087      	sub	sp, #28
    8052:	9001      	str	r0, [sp, #4]
    8054:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8056:	4a67      	ldr	r2, [pc, #412]	; (81f4 <Adc_Ip_Init+0x1a6>)
    8058:	9b01      	ldr	r3, [sp, #4]
    805a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    805e:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    8060:	2300      	movs	r3, #0
    8062:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    8064:	2300      	movs	r3, #0
    8066:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    8068:	9b00      	ldr	r3, [sp, #0]
    806a:	6819      	ldr	r1, [r3, #0]
    806c:	9b00      	ldr	r3, [sp, #0]
    806e:	689b      	ldr	r3, [r3, #8]
    8070:	461a      	mov	r2, r3
    8072:	9802      	ldr	r0, [sp, #8]
    8074:	f7ff fe58 	bl	7d28 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8078:	9b00      	ldr	r3, [sp, #0]
    807a:	7b1b      	ldrb	r3, [r3, #12]
    807c:	4619      	mov	r1, r3
    807e:	9802      	ldr	r0, [sp, #8]
    8080:	f7ff fead 	bl	7dde <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8084:	9b00      	ldr	r3, [sp, #0]
    8086:	7b59      	ldrb	r1, [r3, #13]
    8088:	9b00      	ldr	r3, [sp, #0]
    808a:	691b      	ldr	r3, [r3, #16]
    808c:	461a      	mov	r2, r3
    808e:	9802      	ldr	r0, [sp, #8]
    8090:	f7ff fec6 	bl	7e20 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    8094:	9b00      	ldr	r3, [sp, #0]
    8096:	695b      	ldr	r3, [r3, #20]
    8098:	4619      	mov	r1, r3
    809a:	9801      	ldr	r0, [sp, #4]
    809c:	f000 f9ea 	bl	8474 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    80a0:	9b04      	ldr	r3, [sp, #16]
    80a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    80a6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    80a8:	9b00      	ldr	r3, [sp, #0]
    80aa:	699b      	ldr	r3, [r3, #24]
    80ac:	019b      	lsls	r3, r3, #6
    80ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    80b2:	9a05      	ldr	r2, [sp, #20]
    80b4:	4313      	orrs	r3, r2
    80b6:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    80b8:	9b00      	ldr	r3, [sp, #0]
    80ba:	7f1b      	ldrb	r3, [r3, #28]
    80bc:	2b00      	cmp	r3, #0
    80be:	d004      	beq.n	80ca <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    80c0:	9b05      	ldr	r3, [sp, #20]
    80c2:	f043 0304 	orr.w	r3, r3, #4
    80c6:	9305      	str	r3, [sp, #20]
    80c8:	e003      	b.n	80d2 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    80ca:	9b04      	ldr	r3, [sp, #16]
    80cc:	f043 0304 	orr.w	r3, r3, #4
    80d0:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    80d2:	9b04      	ldr	r3, [sp, #16]
    80d4:	f043 0303 	orr.w	r3, r3, #3
    80d8:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    80da:	9b00      	ldr	r3, [sp, #0]
    80dc:	6a1b      	ldr	r3, [r3, #32]
    80de:	f003 0303 	and.w	r3, r3, #3
    80e2:	9a05      	ldr	r2, [sp, #20]
    80e4:	4313      	orrs	r3, r2
    80e6:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    80e8:	9b04      	ldr	r3, [sp, #16]
    80ea:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    80ee:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    80f0:	9b00      	ldr	r3, [sp, #0]
    80f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    80f6:	2b00      	cmp	r3, #0
    80f8:	d001      	beq.n	80fe <Adc_Ip_Init+0xb0>
    80fa:	2320      	movs	r3, #32
    80fc:	e000      	b.n	8100 <Adc_Ip_Init+0xb2>
    80fe:	2300      	movs	r3, #0
    8100:	9a05      	ldr	r2, [sp, #20]
    8102:	4313      	orrs	r3, r2
    8104:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    8106:	9b00      	ldr	r3, [sp, #0]
    8108:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    810c:	2b00      	cmp	r3, #0
    810e:	d001      	beq.n	8114 <Adc_Ip_Init+0xc6>
    8110:	2310      	movs	r3, #16
    8112:	e000      	b.n	8116 <Adc_Ip_Init+0xc8>
    8114:	2300      	movs	r3, #0
    8116:	9a05      	ldr	r2, [sp, #20]
    8118:	4313      	orrs	r3, r2
    811a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    811c:	9b00      	ldr	r3, [sp, #0]
    811e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    8122:	2b00      	cmp	r3, #0
    8124:	d001      	beq.n	812a <Adc_Ip_Init+0xdc>
    8126:	2308      	movs	r3, #8
    8128:	e000      	b.n	812c <Adc_Ip_Init+0xde>
    812a:	2300      	movs	r3, #0
    812c:	9a05      	ldr	r2, [sp, #20]
    812e:	4313      	orrs	r3, r2
    8130:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    8132:	9b00      	ldr	r3, [sp, #0]
    8134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8136:	461a      	mov	r2, r3
    8138:	9b02      	ldr	r3, [sp, #8]
    813a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    813e:	9b00      	ldr	r3, [sp, #0]
    8140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8142:	461a      	mov	r2, r3
    8144:	9b02      	ldr	r3, [sp, #8]
    8146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    814a:	9a05      	ldr	r2, [sp, #20]
    814c:	9904      	ldr	r1, [sp, #16]
    814e:	9802      	ldr	r0, [sp, #8]
    8150:	f7ff fdd2 	bl	7cf8 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    8154:	9b00      	ldr	r3, [sp, #0]
    8156:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    8158:	9b00      	ldr	r3, [sp, #0]
    815a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    815c:	461a      	mov	r2, r3
    815e:	9802      	ldr	r0, [sp, #8]
    8160:	f7ff fef6 	bl	7f50 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    8164:	9b00      	ldr	r3, [sp, #0]
    8166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    816a:	4619      	mov	r1, r3
    816c:	9801      	ldr	r0, [sp, #4]
    816e:	f000 f955 	bl	841c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    8172:	9b00      	ldr	r3, [sp, #0]
    8174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8176:	2b00      	cmp	r3, #0
    8178:	d01c      	beq.n	81b4 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    817a:	2300      	movs	r3, #0
    817c:	f88d 300f 	strb.w	r3, [sp, #15]
    8180:	e011      	b.n	81a6 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    8182:	9b00      	ldr	r3, [sp, #0]
    8184:	6b59      	ldr	r1, [r3, #52]	; 0x34
    8186:	f89d 200f 	ldrb.w	r2, [sp, #15]
    818a:	4613      	mov	r3, r2
    818c:	005b      	lsls	r3, r3, #1
    818e:	4413      	add	r3, r2
    8190:	009b      	lsls	r3, r3, #2
    8192:	440b      	add	r3, r1
    8194:	4619      	mov	r1, r3
    8196:	9801      	ldr	r0, [sp, #4]
    8198:	f000 f9c2 	bl	8520 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    819c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    81a0:	3301      	adds	r3, #1
    81a2:	f88d 300f 	strb.w	r3, [sp, #15]
    81a6:	9b00      	ldr	r3, [sp, #0]
    81a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    81ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    81b0:	429a      	cmp	r2, r3
    81b2:	d3e6      	bcc.n	8182 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    81b4:	9b00      	ldr	r3, [sp, #0]
    81b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    81b8:	490f      	ldr	r1, [pc, #60]	; (81f8 <Adc_Ip_Init+0x1aa>)
    81ba:	9b01      	ldr	r3, [sp, #4]
    81bc:	204c      	movs	r0, #76	; 0x4c
    81be:	fb00 f303 	mul.w	r3, r0, r3
    81c2:	440b      	add	r3, r1
    81c4:	3308      	adds	r3, #8
    81c6:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    81c8:	9b00      	ldr	r3, [sp, #0]
    81ca:	685a      	ldr	r2, [r3, #4]
    81cc:	490a      	ldr	r1, [pc, #40]	; (81f8 <Adc_Ip_Init+0x1aa>)
    81ce:	9b01      	ldr	r3, [sp, #4]
    81d0:	204c      	movs	r0, #76	; 0x4c
    81d2:	fb00 f303 	mul.w	r3, r0, r3
    81d6:	440b      	add	r3, r1
    81d8:	3304      	adds	r3, #4
    81da:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    81dc:	4a06      	ldr	r2, [pc, #24]	; (81f8 <Adc_Ip_Init+0x1aa>)
    81de:	9b01      	ldr	r3, [sp, #4]
    81e0:	214c      	movs	r1, #76	; 0x4c
    81e2:	fb01 f303 	mul.w	r3, r1, r3
    81e6:	4413      	add	r3, r2
    81e8:	2201      	movs	r2, #1
    81ea:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    81ec:	bf00      	nop
    81ee:	b007      	add	sp, #28
    81f0:	f85d fb04 	ldr.w	pc, [sp], #4
    81f4:	000151b8 	.word	0x000151b8
    81f8:	1fff8d20 	.word	0x1fff8d20

000081fc <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    81fc:	b500      	push	{lr}
    81fe:	b0c3      	sub	sp, #268	; 0x10c
    8200:	ab42      	add	r3, sp, #264	; 0x108
    8202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    8206:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    8208:	2300      	movs	r3, #0
    820a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    820c:	2303      	movs	r3, #3
    820e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    8210:	2300      	movs	r3, #0
    8212:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    8214:	230c      	movs	r3, #12
    8216:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    821a:	2300      	movs	r3, #0
    821c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    8220:	2300      	movs	r3, #0
    8222:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    8224:	2300      	movs	r3, #0
    8226:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    8228:	2300      	movs	r3, #0
    822a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    822c:	2300      	movs	r3, #0
    822e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    8232:	2300      	movs	r3, #0
    8234:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    8236:	2300      	movs	r3, #0
    8238:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    823c:	2300      	movs	r3, #0
    823e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    8242:	2300      	movs	r3, #0
    8244:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    8248:	2300      	movs	r3, #0
    824a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    824e:	2300      	movs	r3, #0
    8250:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    8254:	2300      	movs	r3, #0
    8256:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    825a:	2304      	movs	r3, #4
    825c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    8260:	2300      	movs	r3, #0
    8262:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    8266:	2310      	movs	r3, #16
    8268:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    826c:	2300      	movs	r3, #0
    826e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    8272:	e02b      	b.n	82cc <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    8274:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8278:	ab42      	add	r3, sp, #264	; 0x108
    827a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    827e:	4613      	mov	r3, r2
    8280:	005b      	lsls	r3, r3, #1
    8282:	4413      	add	r3, r2
    8284:	009b      	lsls	r3, r3, #2
    8286:	440b      	add	r3, r1
    8288:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    828c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    828e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    8292:	ab42      	add	r3, sp, #264	; 0x108
    8294:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    8298:	4613      	mov	r3, r2
    829a:	005b      	lsls	r3, r3, #1
    829c:	4413      	add	r3, r2
    829e:	009b      	lsls	r3, r3, #2
    82a0:	440b      	add	r3, r1
    82a2:	3304      	adds	r3, #4
    82a4:	221f      	movs	r2, #31
    82a6:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    82a8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    82ac:	ab42      	add	r3, sp, #264	; 0x108
    82ae:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    82b2:	4613      	mov	r3, r2
    82b4:	005b      	lsls	r3, r3, #1
    82b6:	4413      	add	r3, r2
    82b8:	009b      	lsls	r3, r3, #2
    82ba:	440b      	add	r3, r1
    82bc:	3308      	adds	r3, #8
    82be:	2200      	movs	r2, #0
    82c0:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    82c2:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    82c6:	3301      	adds	r3, #1
    82c8:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    82cc:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    82d0:	2b0f      	cmp	r3, #15
    82d2:	d9cf      	bls.n	8274 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    82d4:	ab02      	add	r3, sp, #8
    82d6:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    82d8:	2300      	movs	r3, #0
    82da:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    82dc:	aa32      	add	r2, sp, #200	; 0xc8
    82de:	ab42      	add	r3, sp, #264	; 0x108
    82e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    82e4:	4611      	mov	r1, r2
    82e6:	6818      	ldr	r0, [r3, #0]
    82e8:	f7ff feb1 	bl	804e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    82ec:	4a07      	ldr	r2, [pc, #28]	; (830c <Adc_Ip_DeInit+0x110>)
    82ee:	ab42      	add	r3, sp, #264	; 0x108
    82f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	214c      	movs	r1, #76	; 0x4c
    82f8:	fb01 f303 	mul.w	r3, r1, r3
    82fc:	4413      	add	r3, r2
    82fe:	2200      	movs	r2, #0
    8300:	701a      	strb	r2, [r3, #0]
}
    8302:	bf00      	nop
    8304:	b043      	add	sp, #268	; 0x10c
    8306:	f85d fb04 	ldr.w	pc, [sp], #4
    830a:	bf00      	nop
    830c:	1fff8d20 	.word	0x1fff8d20

00008310 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    8310:	b500      	push	{lr}
    8312:	b087      	sub	sp, #28
    8314:	9003      	str	r0, [sp, #12]
    8316:	460b      	mov	r3, r1
    8318:	9201      	str	r2, [sp, #4]
    831a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    831e:	4a0a      	ldr	r2, [pc, #40]	; (8348 <Adc_Ip_SetAveraging+0x38>)
    8320:	9b03      	ldr	r3, [sp, #12]
    8322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8326:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    8328:	f006 feb8 	bl	f09c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    832c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8330:	9a01      	ldr	r2, [sp, #4]
    8332:	4619      	mov	r1, r3
    8334:	9805      	ldr	r0, [sp, #20]
    8336:	f7ff fd73 	bl	7e20 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    833a:	f006 fedb 	bl	f0f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    833e:	bf00      	nop
    8340:	b007      	add	sp, #28
    8342:	f85d fb04 	ldr.w	pc, [sp], #4
    8346:	bf00      	nop
    8348:	000151b8 	.word	0x000151b8

0000834c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    834c:	b500      	push	{lr}
    834e:	b085      	sub	sp, #20
    8350:	9001      	str	r0, [sp, #4]
    8352:	460b      	mov	r3, r1
    8354:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8358:	4a09      	ldr	r2, [pc, #36]	; (8380 <Adc_Ip_SetSampleTime+0x34>)
    835a:	9b01      	ldr	r3, [sp, #4]
    835c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8360:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    8362:	f006 fb15 	bl	e990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    8366:	f89d 3003 	ldrb.w	r3, [sp, #3]
    836a:	4619      	mov	r1, r3
    836c:	9803      	ldr	r0, [sp, #12]
    836e:	f7ff fd36 	bl	7dde <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    8372:	f006 fb39 	bl	e9e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    8376:	bf00      	nop
    8378:	b005      	add	sp, #20
    837a:	f85d fb04 	ldr.w	pc, [sp], #4
    837e:	bf00      	nop
    8380:	000151b8 	.word	0x000151b8

00008384 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    8384:	b500      	push	{lr}
    8386:	b085      	sub	sp, #20
    8388:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    838a:	4a0a      	ldr	r2, [pc, #40]	; (83b4 <Adc_Ip_EnableDma+0x30>)
    838c:	9b01      	ldr	r3, [sp, #4]
    838e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8392:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    8394:	f006 fe30 	bl	eff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    8398:	9b03      	ldr	r3, [sp, #12]
    839a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    839e:	f043 0204 	orr.w	r2, r3, #4
    83a2:	9b03      	ldr	r3, [sp, #12]
    83a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    83a8:	f006 fe52 	bl	f050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    83ac:	bf00      	nop
    83ae:	b005      	add	sp, #20
    83b0:	f85d fb04 	ldr.w	pc, [sp], #4
    83b4:	000151b8 	.word	0x000151b8

000083b8 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    83b8:	b500      	push	{lr}
    83ba:	b085      	sub	sp, #20
    83bc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83be:	4a0a      	ldr	r2, [pc, #40]	; (83e8 <Adc_Ip_DisableDma+0x30>)
    83c0:	9b01      	ldr	r3, [sp, #4]
    83c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    83c8:	f006 fcce 	bl	ed68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    83cc:	9b03      	ldr	r3, [sp, #12]
    83ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    83d2:	f023 0204 	bic.w	r2, r3, #4
    83d6:	9b03      	ldr	r3, [sp, #12]
    83d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    83dc:	f006 fcf0 	bl	edc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    83e0:	bf00      	nop
    83e2:	b005      	add	sp, #20
    83e4:	f85d fb04 	ldr.w	pc, [sp], #4
    83e8:	000151b8 	.word	0x000151b8

000083ec <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    83ec:	b500      	push	{lr}
    83ee:	b085      	sub	sp, #20
    83f0:	9001      	str	r0, [sp, #4]
    83f2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    83f4:	4a08      	ldr	r2, [pc, #32]	; (8418 <Adc_Ip_SetTriggerMode+0x2c>)
    83f6:	9b01      	ldr	r3, [sp, #4]
    83f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83fc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    83fe:	f006 fd05 	bl	ee0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8402:	9900      	ldr	r1, [sp, #0]
    8404:	9803      	ldr	r0, [sp, #12]
    8406:	f7ff fd4e 	bl	7ea6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    840a:	f006 fd2b 	bl	ee64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    840e:	bf00      	nop
    8410:	b005      	add	sp, #20
    8412:	f85d fb04 	ldr.w	pc, [sp], #4
    8416:	bf00      	nop
    8418:	000151b8 	.word	0x000151b8

0000841c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    841c:	b500      	push	{lr}
    841e:	b085      	sub	sp, #20
    8420:	9001      	str	r0, [sp, #4]
    8422:	460b      	mov	r3, r1
    8424:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8428:	4a11      	ldr	r2, [pc, #68]	; (8470 <Adc_Ip_SetContinuousMode+0x54>)
    842a:	9b01      	ldr	r3, [sp, #4]
    842c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8430:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    8432:	f006 ff29 	bl	f288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    8436:	9b03      	ldr	r3, [sp, #12]
    8438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    843c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    843e:	9b02      	ldr	r3, [sp, #8]
    8440:	f023 0308 	bic.w	r3, r3, #8
    8444:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    8446:	f89d 3003 	ldrb.w	r3, [sp, #3]
    844a:	2b00      	cmp	r3, #0
    844c:	d001      	beq.n	8452 <Adc_Ip_SetContinuousMode+0x36>
    844e:	2308      	movs	r3, #8
    8450:	e000      	b.n	8454 <Adc_Ip_SetContinuousMode+0x38>
    8452:	2300      	movs	r3, #0
    8454:	9a02      	ldr	r2, [sp, #8]
    8456:	4313      	orrs	r3, r2
    8458:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    845a:	9b03      	ldr	r3, [sp, #12]
    845c:	9a02      	ldr	r2, [sp, #8]
    845e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    8462:	f006 ff3d 	bl	f2e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    8466:	bf00      	nop
    8468:	b005      	add	sp, #20
    846a:	f85d fb04 	ldr.w	pc, [sp], #4
    846e:	bf00      	nop
    8470:	000151b8 	.word	0x000151b8

00008474 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    8474:	b500      	push	{lr}
    8476:	b085      	sub	sp, #20
    8478:	9001      	str	r0, [sp, #4]
    847a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    847c:	4a0e      	ldr	r2, [pc, #56]	; (84b8 <Adc_Ip_SetResolution+0x44>)
    847e:	9b01      	ldr	r3, [sp, #4]
    8480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8484:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    8486:	f005 ff4f 	bl	e328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    848a:	9b03      	ldr	r3, [sp, #12]
    848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    848e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    8490:	9b02      	ldr	r3, [sp, #8]
    8492:	f023 030c 	bic.w	r3, r3, #12
    8496:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    8498:	9b00      	ldr	r3, [sp, #0]
    849a:	009b      	lsls	r3, r3, #2
    849c:	f003 030c 	and.w	r3, r3, #12
    84a0:	9a02      	ldr	r2, [sp, #8]
    84a2:	4313      	orrs	r3, r2
    84a4:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    84a6:	9b03      	ldr	r3, [sp, #12]
    84a8:	9a02      	ldr	r2, [sp, #8]
    84aa:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    84ac:	f005 ff68 	bl	e380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    84b0:	bf00      	nop
    84b2:	b005      	add	sp, #20
    84b4:	f85d fb04 	ldr.w	pc, [sp], #4
    84b8:	000151b8 	.word	0x000151b8

000084bc <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    84bc:	b500      	push	{lr}
    84be:	b085      	sub	sp, #20
    84c0:	9001      	str	r0, [sp, #4]
    84c2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    84c4:	4a15      	ldr	r2, [pc, #84]	; (851c <Adc_Ip_SetClockMode+0x60>)
    84c6:	9b01      	ldr	r3, [sp, #4]
    84c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84cc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    84ce:	f006 f8c5 	bl	e65c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    84d2:	9b00      	ldr	r3, [sp, #0]
    84d4:	6819      	ldr	r1, [r3, #0]
    84d6:	9b00      	ldr	r3, [sp, #0]
    84d8:	685b      	ldr	r3, [r3, #4]
    84da:	461a      	mov	r2, r3
    84dc:	9803      	ldr	r0, [sp, #12]
    84de:	f7ff fc23 	bl	7d28 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    84e2:	f006 f8e7 	bl	e6b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    84e6:	f006 f9af 	bl	e848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    84ea:	9b00      	ldr	r3, [sp, #0]
    84ec:	7a1b      	ldrb	r3, [r3, #8]
    84ee:	4619      	mov	r1, r3
    84f0:	9803      	ldr	r0, [sp, #12]
    84f2:	f7ff fc74 	bl	7dde <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    84f6:	f006 f9d3 	bl	e8a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    84fa:	f006 fe21 	bl	f140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    84fe:	9b00      	ldr	r3, [sp, #0]
    8500:	7a59      	ldrb	r1, [r3, #9]
    8502:	9b00      	ldr	r3, [sp, #0]
    8504:	68db      	ldr	r3, [r3, #12]
    8506:	461a      	mov	r2, r3
    8508:	9803      	ldr	r0, [sp, #12]
    850a:	f7ff fc89 	bl	7e20 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    850e:	f006 fe43 	bl	f198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    8512:	bf00      	nop
    8514:	b005      	add	sp, #20
    8516:	f85d fb04 	ldr.w	pc, [sp], #4
    851a:	bf00      	nop
    851c:	000151b8 	.word	0x000151b8

00008520 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    8520:	b510      	push	{r4, lr}
    8522:	b084      	sub	sp, #16
    8524:	9001      	str	r0, [sp, #4]
    8526:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8528:	4a13      	ldr	r2, [pc, #76]	; (8578 <Adc_Ip_ConfigChannel+0x58>)
    852a:	9b01      	ldr	r3, [sp, #4]
    852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8530:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    8532:	9b00      	ldr	r3, [sp, #0]
    8534:	685b      	ldr	r3, [r3, #4]
    8536:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    8538:	f006 fbc4 	bl	ecc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    853c:	9b00      	ldr	r3, [sp, #0]
    853e:	7819      	ldrb	r1, [r3, #0]
    8540:	9b00      	ldr	r3, [sp, #0]
    8542:	7a1b      	ldrb	r3, [r3, #8]
    8544:	9a02      	ldr	r2, [sp, #8]
    8546:	9803      	ldr	r0, [sp, #12]
    8548:	f7ff fcd5 	bl	7ef6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    854c:	f006 fbe6 	bl	ed1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    8550:	9b00      	ldr	r3, [sp, #0]
    8552:	781b      	ldrb	r3, [r3, #0]
    8554:	461c      	mov	r4, r3
    8556:	9b00      	ldr	r3, [sp, #0]
    8558:	6859      	ldr	r1, [r3, #4]
    855a:	4808      	ldr	r0, [pc, #32]	; (857c <Adc_Ip_ConfigChannel+0x5c>)
    855c:	9a01      	ldr	r2, [sp, #4]
    855e:	4613      	mov	r3, r2
    8560:	00db      	lsls	r3, r3, #3
    8562:	4413      	add	r3, r2
    8564:	005b      	lsls	r3, r3, #1
    8566:	4413      	add	r3, r2
    8568:	4423      	add	r3, r4
    856a:	3302      	adds	r3, #2
    856c:	009b      	lsls	r3, r3, #2
    856e:	4403      	add	r3, r0
    8570:	6059      	str	r1, [r3, #4]
}
    8572:	bf00      	nop
    8574:	b004      	add	sp, #16
    8576:	bd10      	pop	{r4, pc}
    8578:	000151b8 	.word	0x000151b8
    857c:	1fff8d20 	.word	0x1fff8d20

00008580 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    8580:	b500      	push	{lr}
    8582:	b089      	sub	sp, #36	; 0x24
    8584:	9001      	str	r0, [sp, #4]
    8586:	460b      	mov	r3, r1
    8588:	f88d 3003 	strb.w	r3, [sp, #3]
    858c:	4613      	mov	r3, r2
    858e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8592:	4a24      	ldr	r2, [pc, #144]	; (8624 <Adc_Ip_SetDisabledChannel+0xa4>)
    8594:	9b01      	ldr	r3, [sp, #4]
    8596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    859a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    859c:	2300      	movs	r3, #0
    859e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    85a0:	2100      	movs	r1, #0
    85a2:	4821      	ldr	r0, [pc, #132]	; (8628 <Adc_Ip_SetDisabledChannel+0xa8>)
    85a4:	f7f9 fb44 	bl	1c30 <OsIf_MicrosToTicks>
    85a8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    85aa:	2000      	movs	r0, #0
    85ac:	f7f9 faf4 	bl	1b98 <OsIf_GetCounter>
    85b0:	4603      	mov	r3, r0
    85b2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    85b4:	2300      	movs	r3, #0
    85b6:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    85b8:	f006 fa3c 	bl	ea34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    85bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85c0:	9b05      	ldr	r3, [sp, #20]
    85c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    85c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85ca:	f043 011f 	orr.w	r1, r3, #31
    85ce:	9b05      	ldr	r3, [sp, #20]
    85d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    85d4:	f006 fa5a 	bl	ea8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    85d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    85dc:	2b00      	cmp	r3, #0
    85de:	d01c      	beq.n	861a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    85e0:	e008      	b.n	85f4 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    85e2:	ab03      	add	r3, sp, #12
    85e4:	2100      	movs	r1, #0
    85e6:	4618      	mov	r0, r3
    85e8:	f7f9 faef 	bl	1bca <OsIf_GetElapsed>
    85ec:	4602      	mov	r2, r0
    85ee:	9b06      	ldr	r3, [sp, #24]
    85f0:	4413      	add	r3, r2
    85f2:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    85f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85f8:	9b05      	ldr	r3, [sp, #20]
    85fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    85fe:	f003 031f 	and.w	r3, r3, #31
    8602:	2b1f      	cmp	r3, #31
    8604:	d003      	beq.n	860e <Adc_Ip_SetDisabledChannel+0x8e>
    8606:	9a06      	ldr	r2, [sp, #24]
    8608:	9b04      	ldr	r3, [sp, #16]
    860a:	429a      	cmp	r2, r3
    860c:	d3e9      	bcc.n	85e2 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    860e:	9a06      	ldr	r2, [sp, #24]
    8610:	9b04      	ldr	r3, [sp, #16]
    8612:	429a      	cmp	r2, r3
    8614:	d301      	bcc.n	861a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    8616:	2302      	movs	r3, #2
    8618:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    861a:	9b07      	ldr	r3, [sp, #28]
}
    861c:	4618      	mov	r0, r3
    861e:	b009      	add	sp, #36	; 0x24
    8620:	f85d fb04 	ldr.w	pc, [sp], #4
    8624:	000151b8 	.word	0x000151b8
    8628:	000186a0 	.word	0x000186a0

0000862c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    862c:	b500      	push	{lr}
    862e:	b087      	sub	sp, #28
    8630:	9003      	str	r0, [sp, #12]
    8632:	9102      	str	r1, [sp, #8]
    8634:	4613      	mov	r3, r2
    8636:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    863a:	4a0a      	ldr	r2, [pc, #40]	; (8664 <Adc_Ip_StartConversion+0x38>)
    863c:	9b03      	ldr	r3, [sp, #12]
    863e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8642:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    8644:	f006 fa48 	bl	ead8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    8648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    864c:	9a02      	ldr	r2, [sp, #8]
    864e:	2100      	movs	r1, #0
    8650:	9805      	ldr	r0, [sp, #20]
    8652:	f7ff fc50 	bl	7ef6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    8656:	f006 fa6b 	bl	eb30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    865a:	bf00      	nop
    865c:	b007      	add	sp, #28
    865e:	f85d fb04 	ldr.w	pc, [sp], #4
    8662:	bf00      	nop
    8664:	000151b8 	.word	0x000151b8

00008668 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    8668:	b084      	sub	sp, #16
    866a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    866c:	4a0b      	ldr	r2, [pc, #44]	; (869c <Adc_Ip_GetConvActiveFlag+0x34>)
    866e:	9b01      	ldr	r3, [sp, #4]
    8670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8674:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    8676:	9b03      	ldr	r3, [sp, #12]
    8678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    867c:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    867e:	9b02      	ldr	r3, [sp, #8]
    8680:	09db      	lsrs	r3, r3, #7
    8682:	f003 0301 	and.w	r3, r3, #1
    8686:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    8688:	9b02      	ldr	r3, [sp, #8]
    868a:	2b00      	cmp	r3, #0
    868c:	bf14      	ite	ne
    868e:	2301      	movne	r3, #1
    8690:	2300      	moveq	r3, #0
    8692:	b2db      	uxtb	r3, r3
}
    8694:	4618      	mov	r0, r3
    8696:	b004      	add	sp, #16
    8698:	4770      	bx	lr
    869a:	bf00      	nop
    869c:	000151b8 	.word	0x000151b8

000086a0 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    86a0:	b500      	push	{lr}
    86a2:	b085      	sub	sp, #20
    86a4:	9001      	str	r0, [sp, #4]
    86a6:	460b      	mov	r3, r1
    86a8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86ac:	4a08      	ldr	r2, [pc, #32]	; (86d0 <Adc_Ip_GetChanInterrupt+0x30>)
    86ae:	9b01      	ldr	r3, [sp, #4]
    86b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    86b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86bc:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    86be:	9803      	ldr	r0, [sp, #12]
    86c0:	f7ff fc5e 	bl	7f80 <Adc_HwAcc_GetAIEN>
    86c4:	4603      	mov	r3, r0
}
    86c6:	4618      	mov	r0, r3
    86c8:	b005      	add	sp, #20
    86ca:	f85d fb04 	ldr.w	pc, [sp], #4
    86ce:	bf00      	nop
    86d0:	000151b8 	.word	0x000151b8

000086d4 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    86d4:	b500      	push	{lr}
    86d6:	b085      	sub	sp, #20
    86d8:	9001      	str	r0, [sp, #4]
    86da:	460b      	mov	r3, r1
    86dc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    86e0:	4a08      	ldr	r2, [pc, #32]	; (8704 <Adc_Ip_GetConvCompleteFlag+0x30>)
    86e2:	9b01      	ldr	r3, [sp, #4]
    86e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    86ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86f0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    86f2:	9803      	ldr	r0, [sp, #12]
    86f4:	f7ff fc52 	bl	7f9c <Adc_HwAcc_GetCOCO>
    86f8:	4603      	mov	r3, r0
}
    86fa:	4618      	mov	r0, r3
    86fc:	b005      	add	sp, #20
    86fe:	f85d fb04 	ldr.w	pc, [sp], #4
    8702:	bf00      	nop
    8704:	000151b8 	.word	0x000151b8

00008708 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    8708:	b500      	push	{lr}
    870a:	b085      	sub	sp, #20
    870c:	9001      	str	r0, [sp, #4]
    870e:	460b      	mov	r3, r1
    8710:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8714:	4a07      	ldr	r2, [pc, #28]	; (8734 <Adc_Ip_GetConvData+0x2c>)
    8716:	9b01      	ldr	r3, [sp, #4]
    8718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    871c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    871e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8722:	4619      	mov	r1, r3
    8724:	9803      	ldr	r0, [sp, #12]
    8726:	f7ff fc47 	bl	7fb8 <Adc_HwAcc_GetData>
    872a:	4603      	mov	r3, r0
}
    872c:	4618      	mov	r0, r3
    872e:	b005      	add	sp, #20
    8730:	f85d fb04 	ldr.w	pc, [sp], #4
    8734:	000151b8 	.word	0x000151b8

00008738 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    8738:	b500      	push	{lr}
    873a:	b093      	sub	sp, #76	; 0x4c
    873c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    873e:	4a59      	ldr	r2, [pc, #356]	; (88a4 <Adc_Ip_DoCalibration+0x16c>)
    8740:	9b01      	ldr	r3, [sp, #4]
    8742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8746:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8748:	2300      	movs	r3, #0
    874a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    874c:	2100      	movs	r1, #0
    874e:	4856      	ldr	r0, [pc, #344]	; (88a8 <Adc_Ip_DoCalibration+0x170>)
    8750:	f7f9 fa6e 	bl	1c30 <OsIf_MicrosToTicks>
    8754:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    8756:	2000      	movs	r0, #0
    8758:	f7f9 fa1e 	bl	1b98 <OsIf_GetCounter>
    875c:	4603      	mov	r3, r0
    875e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    8760:	2300      	movs	r3, #0
    8762:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    8764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    876a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    876c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    876e:	089b      	lsrs	r3, r3, #2
    8770:	f003 0301 	and.w	r3, r3, #1
    8774:	2b00      	cmp	r3, #0
    8776:	bf14      	ite	ne
    8778:	2301      	movne	r3, #1
    877a:	2300      	moveq	r3, #0
    877c:	b2db      	uxtb	r3, r3
    877e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    8782:	980d      	ldr	r0, [sp, #52]	; 0x34
    8784:	f7ff fb71 	bl	7e6a <Adc_HwAcc_GetAverageSelect>
    8788:	4603      	mov	r3, r0
    878a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    878c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    878e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8790:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    8792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8794:	b2db      	uxtb	r3, r3
    8796:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    879a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    87a0:	4618      	mov	r0, r3
    87a2:	f7ff fb99 	bl	7ed8 <Adc_HwAcc_GetTriggerMode>
    87a6:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    87a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    87ac:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    87ae:	980d      	ldr	r0, [sp, #52]	; 0x34
    87b0:	f7ff fad8 	bl	7d64 <Adc_HwAcc_GetClockDivide>
    87b4:	4603      	mov	r3, r0
    87b6:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    87b8:	980d      	ldr	r0, [sp, #52]	; 0x34
    87ba:	f7ff faf2 	bl	7da2 <Adc_HwAcc_GetInputClock>
    87be:	4603      	mov	r3, r0
    87c0:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    87c2:	2301      	movs	r3, #1
    87c4:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    87c8:	2303      	movs	r3, #3
    87ca:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    87cc:	230c      	movs	r3, #12
    87ce:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    87d2:	4a36      	ldr	r2, [pc, #216]	; (88ac <Adc_Ip_DoCalibration+0x174>)
    87d4:	9b01      	ldr	r3, [sp, #4]
    87d6:	214c      	movs	r1, #76	; 0x4c
    87d8:	fb01 f303 	mul.w	r3, r1, r3
    87dc:	4413      	add	r3, r2
    87de:	3304      	adds	r3, #4
    87e0:	681b      	ldr	r3, [r3, #0]
    87e2:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    87e4:	9b08      	ldr	r3, [sp, #32]
    87e6:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    87e8:	ab03      	add	r3, sp, #12
    87ea:	2200      	movs	r2, #0
    87ec:	4619      	mov	r1, r3
    87ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
    87f0:	f7ff fbfa 	bl	7fe8 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    87f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87f6:	2200      	movs	r2, #0
    87f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    87fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    87fe:	2200      	movs	r2, #0
    8800:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    8804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8806:	2200      	movs	r2, #0
    8808:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    880c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    880e:	2200      	movs	r2, #0
    8810:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    8814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8816:	2200      	movs	r2, #0
    8818:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    881c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    881e:	2200      	movs	r2, #0
    8820:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    8824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8826:	2200      	movs	r2, #0
    8828:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    882c:	f006 fcda 	bl	f1e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    8830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8836:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    8838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    883a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    883e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    8840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8846:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    8848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    884a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    884c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8850:	f006 fcf4 	bl	f23c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8854:	e008      	b.n	8868 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    8856:	ab0b      	add	r3, sp, #44	; 0x2c
    8858:	2100      	movs	r1, #0
    885a:	4618      	mov	r0, r3
    885c:	f7f9 f9b5 	bl	1bca <OsIf_GetElapsed>
    8860:	4602      	mov	r2, r0
    8862:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8864:	4413      	add	r3, r2
    8866:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    886a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8872:	2b00      	cmp	r3, #0
    8874:	d003      	beq.n	887e <Adc_Ip_DoCalibration+0x146>
    8876:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    887a:	429a      	cmp	r2, r3
    887c:	d3eb      	bcc.n	8856 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    887e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8882:	429a      	cmp	r2, r3
    8884:	d301      	bcc.n	888a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8886:	2302      	movs	r3, #2
    8888:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    888a:	ab07      	add	r3, sp, #28
    888c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    888e:	4619      	mov	r1, r3
    8890:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8892:	f7ff fba9 	bl	7fe8 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    8896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8898:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    889a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    889c:	4618      	mov	r0, r3
    889e:	b013      	add	sp, #76	; 0x4c
    88a0:	f85d fb04 	ldr.w	pc, [sp], #4
    88a4:	000151b8 	.word	0x000151b8
    88a8:	000186a0 	.word	0x000186a0
    88ac:	1fff8d20 	.word	0x1fff8d20

000088b0 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    88b0:	b500      	push	{lr}
    88b2:	b089      	sub	sp, #36	; 0x24
    88b4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    88b6:	4a1e      	ldr	r2, [pc, #120]	; (8930 <Adc_Ip_ClearLatchedTriggers+0x80>)
    88b8:	9b01      	ldr	r3, [sp, #4]
    88ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88be:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    88c0:	2300      	movs	r3, #0
    88c2:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    88c4:	2100      	movs	r1, #0
    88c6:	481b      	ldr	r0, [pc, #108]	; (8934 <Adc_Ip_ClearLatchedTriggers+0x84>)
    88c8:	f7f9 f9b2 	bl	1c30 <OsIf_MicrosToTicks>
    88cc:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    88ce:	2000      	movs	r0, #0
    88d0:	f7f9 f962 	bl	1b98 <OsIf_GetCounter>
    88d4:	4603      	mov	r3, r0
    88d6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    88d8:	2300      	movs	r3, #0
    88da:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    88dc:	f005 ff10 	bl	e700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    88e0:	9b05      	ldr	r3, [sp, #20]
    88e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    88e8:	9b05      	ldr	r3, [sp, #20]
    88ea:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    88ec:	f005 ff34 	bl	e758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    88f0:	e008      	b.n	8904 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    88f2:	ab03      	add	r3, sp, #12
    88f4:	2100      	movs	r1, #0
    88f6:	4618      	mov	r0, r3
    88f8:	f7f9 f967 	bl	1bca <OsIf_GetElapsed>
    88fc:	4602      	mov	r2, r0
    88fe:	9b06      	ldr	r3, [sp, #24]
    8900:	4413      	add	r3, r2
    8902:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    8904:	9b05      	ldr	r3, [sp, #20]
    8906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    890a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    890e:	2b00      	cmp	r3, #0
    8910:	d003      	beq.n	891a <Adc_Ip_ClearLatchedTriggers+0x6a>
    8912:	9a06      	ldr	r2, [sp, #24]
    8914:	9b04      	ldr	r3, [sp, #16]
    8916:	429a      	cmp	r2, r3
    8918:	d3eb      	bcc.n	88f2 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    891a:	9a06      	ldr	r2, [sp, #24]
    891c:	9b04      	ldr	r3, [sp, #16]
    891e:	429a      	cmp	r2, r3
    8920:	d301      	bcc.n	8926 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    8922:	2302      	movs	r3, #2
    8924:	9307      	str	r3, [sp, #28]
    }

    return Status;
    8926:	9b07      	ldr	r3, [sp, #28]
}
    8928:	4618      	mov	r0, r3
    892a:	b009      	add	sp, #36	; 0x24
    892c:	f85d fb04 	ldr.w	pc, [sp], #4
    8930:	000151b8 	.word	0x000151b8
    8934:	000186a0 	.word	0x000186a0

00008938 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    8938:	b500      	push	{lr}
    893a:	b085      	sub	sp, #20
    893c:	9001      	str	r0, [sp, #4]
    893e:	460b      	mov	r3, r1
    8940:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8944:	4a0c      	ldr	r2, [pc, #48]	; (8978 <Adc_Ip_EnableChannelNotification+0x40>)
    8946:	9b01      	ldr	r3, [sp, #4]
    8948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    894c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    894e:	f006 f915 	bl	eb7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    8952:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8956:	9b03      	ldr	r3, [sp, #12]
    8958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    895c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8960:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    8964:	9b03      	ldr	r3, [sp, #12]
    8966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    896a:	f006 f933 	bl	ebd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    896e:	bf00      	nop
    8970:	b005      	add	sp, #20
    8972:	f85d fb04 	ldr.w	pc, [sp], #4
    8976:	bf00      	nop
    8978:	000151b8 	.word	0x000151b8

0000897c <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    897c:	b500      	push	{lr}
    897e:	b085      	sub	sp, #20
    8980:	9001      	str	r0, [sp, #4]
    8982:	460b      	mov	r3, r1
    8984:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8988:	4a0c      	ldr	r2, [pc, #48]	; (89bc <Adc_Ip_DisableChannelNotification+0x40>)
    898a:	9b01      	ldr	r3, [sp, #4]
    898c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8990:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    8992:	f006 f945 	bl	ec20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    8996:	f89d 2003 	ldrb.w	r2, [sp, #3]
    899a:	9b03      	ldr	r3, [sp, #12]
    899c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89a4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    89a8:	9b03      	ldr	r3, [sp, #12]
    89aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    89ae:	f006 f963 	bl	ec78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    89b2:	bf00      	nop
    89b4:	b005      	add	sp, #20
    89b6:	f85d fb04 	ldr.w	pc, [sp], #4
    89ba:	bf00      	nop
    89bc:	000151b8 	.word	0x000151b8

000089c0 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    89c0:	b500      	push	{lr}
    89c2:	b085      	sub	sp, #20
    89c4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89c6:	4a0a      	ldr	r2, [pc, #40]	; (89f0 <Adc_Ip_ClearTrigErrReg+0x30>)
    89c8:	9b01      	ldr	r3, [sp, #4]
    89ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ce:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    89d0:	f006 fac0 	bl	ef54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    89d4:	9b03      	ldr	r3, [sp, #12]
    89d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    89da:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    89de:	9b03      	ldr	r3, [sp, #12]
    89e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    89e4:	f006 fae2 	bl	efac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    89e8:	bf00      	nop
    89ea:	b005      	add	sp, #20
    89ec:	f85d fb04 	ldr.w	pc, [sp], #4
    89f0:	000151b8 	.word	0x000151b8

000089f4 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    89f4:	b084      	sub	sp, #16
    89f6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    89f8:	4a06      	ldr	r2, [pc, #24]	; (8a14 <Adc_Ip_GetTrigErrReg+0x20>)
    89fa:	9b01      	ldr	r3, [sp, #4]
    89fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a00:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    8a02:	9b03      	ldr	r3, [sp, #12]
    8a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8a08:	0e1b      	lsrs	r3, r3, #24
    8a0a:	f003 030f 	and.w	r3, r3, #15
}
    8a0e:	4618      	mov	r0, r3
    8a10:	b004      	add	sp, #16
    8a12:	4770      	bx	lr
    8a14:	000151b8 	.word	0x000151b8

00008a18 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    8a18:	b082      	sub	sp, #8
    8a1a:	9001      	str	r0, [sp, #4]
    8a1c:	460b      	mov	r3, r1
    8a1e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    8a22:	4a06      	ldr	r2, [pc, #24]	; (8a3c <Adc_Ip_GetDataAddress+0x24>)
    8a24:	9b01      	ldr	r3, [sp, #4]
    8a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8a2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a2e:	3312      	adds	r3, #18
    8a30:	009b      	lsls	r3, r3, #2
    8a32:	4413      	add	r3, r2
}
    8a34:	4618      	mov	r0, r3
    8a36:	b002      	add	sp, #8
    8a38:	4770      	bx	lr
    8a3a:	bf00      	nop
    8a3c:	000151b8 	.word	0x000151b8

00008a40 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    8a40:	b088      	sub	sp, #32
    8a42:	9003      	str	r0, [sp, #12]
    8a44:	9102      	str	r1, [sp, #8]
    8a46:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    8a48:	4a25      	ldr	r2, [pc, #148]	; (8ae0 <Adc_Ip_GetChanData+0xa0>)
    8a4a:	9b03      	ldr	r3, [sp, #12]
    8a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a50:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    8a52:	2300      	movs	r3, #0
    8a54:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    8a56:	2300      	movs	r3, #0
    8a58:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    8a5c:	2300      	movs	r3, #0
    8a5e:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a62:	2300      	movs	r3, #0
    8a64:	f88d 3019 	strb.w	r3, [sp, #25]
    8a68:	e019      	b.n	8a9e <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    8a6a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    8a6e:	481d      	ldr	r0, [pc, #116]	; (8ae4 <Adc_Ip_GetChanData+0xa4>)
    8a70:	9a03      	ldr	r2, [sp, #12]
    8a72:	4613      	mov	r3, r2
    8a74:	00db      	lsls	r3, r3, #3
    8a76:	4413      	add	r3, r2
    8a78:	005b      	lsls	r3, r3, #1
    8a7a:	4413      	add	r3, r2
    8a7c:	440b      	add	r3, r1
    8a7e:	3302      	adds	r3, #2
    8a80:	009b      	lsls	r3, r3, #2
    8a82:	4403      	add	r3, r0
    8a84:	685b      	ldr	r3, [r3, #4]
    8a86:	9a02      	ldr	r2, [sp, #8]
    8a88:	429a      	cmp	r2, r3
    8a8a:	d103      	bne.n	8a94 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    8a8c:	2301      	movs	r3, #1
    8a8e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    8a92:	e008      	b.n	8aa6 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8a94:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8a98:	3301      	adds	r3, #1
    8a9a:	f88d 3019 	strb.w	r3, [sp, #25]
    8a9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    8aa2:	2b0f      	cmp	r3, #15
    8aa4:	d9e1      	bls.n	8a6a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    8aa6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8aaa:	2b00      	cmp	r3, #0
    8aac:	d00e      	beq.n	8acc <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    8aae:	f89d 2019 	ldrb.w	r2, [sp, #25]
    8ab2:	9b05      	ldr	r3, [sp, #20]
    8ab4:	3212      	adds	r2, #18
    8ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8aba:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8abe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8ac6:	f8ad 301a 	strh.w	r3, [sp, #26]
    8aca:	e001      	b.n	8ad0 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    8acc:	2301      	movs	r3, #1
    8ace:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    8ad0:	9b01      	ldr	r3, [sp, #4]
    8ad2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8ad6:	801a      	strh	r2, [r3, #0]

    return Status;
    8ad8:	9b07      	ldr	r3, [sp, #28]
}
    8ada:	4618      	mov	r0, r3
    8adc:	b008      	add	sp, #32
    8ade:	4770      	bx	lr
    8ae0:	000151b8 	.word	0x000151b8
    8ae4:	1fff8d20 	.word	0x1fff8d20

00008ae8 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    8ae8:	b500      	push	{lr}
    8aea:	b085      	sub	sp, #20
    8aec:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    8aee:	2300      	movs	r3, #0
    8af0:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    8af4:	2300      	movs	r3, #0
    8af6:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    8afa:	4a32      	ldr	r2, [pc, #200]	; (8bc4 <Adc_Ip_IRQHandler+0xdc>)
    8afc:	9b01      	ldr	r3, [sp, #4]
    8afe:	214c      	movs	r1, #76	; 0x4c
    8b00:	fb01 f303 	mul.w	r3, r1, r3
    8b04:	4413      	add	r3, r2
    8b06:	781b      	ldrb	r3, [r3, #0]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d040      	beq.n	8b8e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    8b0c:	4a2d      	ldr	r2, [pc, #180]	; (8bc4 <Adc_Ip_IRQHandler+0xdc>)
    8b0e:	9b01      	ldr	r3, [sp, #4]
    8b10:	214c      	movs	r1, #76	; 0x4c
    8b12:	fb01 f303 	mul.w	r3, r1, r3
    8b16:	4413      	add	r3, r2
    8b18:	3308      	adds	r3, #8
    8b1a:	681b      	ldr	r3, [r3, #0]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	d04d      	beq.n	8bbc <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b20:	2300      	movs	r3, #0
    8b22:	f88d 300f 	strb.w	r3, [sp, #15]
    8b26:	e02d      	b.n	8b84 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b28:	4a27      	ldr	r2, [pc, #156]	; (8bc8 <Adc_Ip_IRQHandler+0xe0>)
    8b2a:	9b01      	ldr	r3, [sp, #4]
    8b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b30:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b38:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    8b3a:	9802      	ldr	r0, [sp, #8]
    8b3c:	f7ff fa20 	bl	7f80 <Adc_HwAcc_GetAIEN>
    8b40:	4603      	mov	r3, r0
    8b42:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    8b46:	9802      	ldr	r0, [sp, #8]
    8b48:	f7ff fa28 	bl	7f9c <Adc_HwAcc_GetCOCO>
    8b4c:	4603      	mov	r3, r0
    8b4e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    8b52:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8b56:	2b00      	cmp	r3, #0
    8b58:	d00f      	beq.n	8b7a <Adc_Ip_IRQHandler+0x92>
    8b5a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b5e:	2b00      	cmp	r3, #0
    8b60:	d00b      	beq.n	8b7a <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    8b62:	4a18      	ldr	r2, [pc, #96]	; (8bc4 <Adc_Ip_IRQHandler+0xdc>)
    8b64:	9b01      	ldr	r3, [sp, #4]
    8b66:	214c      	movs	r1, #76	; 0x4c
    8b68:	fb01 f303 	mul.w	r3, r1, r3
    8b6c:	4413      	add	r3, r2
    8b6e:	3308      	adds	r3, #8
    8b70:	681b      	ldr	r3, [r3, #0]
    8b72:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8b76:	4610      	mov	r0, r2
    8b78:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b7e:	3301      	adds	r3, #1
    8b80:	f88d 300f 	strb.w	r3, [sp, #15]
    8b84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b88:	2b0f      	cmp	r3, #15
    8b8a:	d9cd      	bls.n	8b28 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    8b8c:	e016      	b.n	8bbc <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8b8e:	2300      	movs	r3, #0
    8b90:	f88d 300f 	strb.w	r3, [sp, #15]
    8b94:	e00e      	b.n	8bb4 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    8b96:	4a0c      	ldr	r2, [pc, #48]	; (8bc8 <Adc_Ip_IRQHandler+0xe0>)
    8b98:	9b01      	ldr	r3, [sp, #4]
    8b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8ba2:	4611      	mov	r1, r2
    8ba4:	4618      	mov	r0, r3
    8ba6:	f7ff fa07 	bl	7fb8 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    8baa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bae:	3301      	adds	r3, #1
    8bb0:	f88d 300f 	strb.w	r3, [sp, #15]
    8bb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bb8:	2b0f      	cmp	r3, #15
    8bba:	d9ec      	bls.n	8b96 <Adc_Ip_IRQHandler+0xae>
}
    8bbc:	bf00      	nop
    8bbe:	b005      	add	sp, #20
    8bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    8bc4:	1fff8d20 	.word	0x1fff8d20
    8bc8:	000151b8 	.word	0x000151b8

00008bcc <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    8bcc:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    8bce:	2000      	movs	r0, #0
    8bd0:	f7ff ff8a 	bl	8ae8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8bd4:	f3bf 8f4f 	dsb	sy
}
    8bd8:	bf00      	nop
    8bda:	bd08      	pop	{r3, pc}

00008bdc <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    8bdc:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    8bde:	2001      	movs	r0, #1
    8be0:	f7ff ff82 	bl	8ae8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    8be4:	f3bf 8f4f 	dsb	sy
}
    8be8:	bf00      	nop
    8bea:	bd08      	pop	{r3, pc}

00008bec <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    8bec:	b510      	push	{r4, lr}
    8bee:	b084      	sub	sp, #16
    8bf0:	4603      	mov	r3, r0
    8bf2:	460a      	mov	r2, r1
    8bf4:	f88d 3007 	strb.w	r3, [sp, #7]
    8bf8:	4613      	mov	r3, r2
    8bfa:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    8bfe:	2300      	movs	r3, #0
    8c00:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    8c04:	2300      	movs	r3, #0
    8c06:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    8c0a:	f005 f9a1 	bl	df50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c12:	4a24      	ldr	r2, [pc, #144]	; (8ca4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c14:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8c18:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    8c1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c20:	2b01      	cmp	r3, #1
    8c22:	d806      	bhi.n	8c32 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    8c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c28:	4a1e      	ldr	r2, [pc, #120]	; (8ca4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c2a:	2100      	movs	r1, #0
    8c2c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    8c30:	e032      	b.n	8c98 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8c36:	3301      	adds	r3, #1
    8c38:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c3c:	e01b      	b.n	8c76 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    8c3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8c42:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8c46:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c4a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8c4e:	3a01      	subs	r2, #1
    8c50:	4c14      	ldr	r4, [pc, #80]	; (8ca4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c52:	0080      	lsls	r0, r0, #2
    8c54:	4403      	add	r3, r0
    8c56:	005b      	lsls	r3, r3, #1
    8c58:	4423      	add	r3, r4
    8c5a:	885b      	ldrh	r3, [r3, #2]
    8c5c:	b29c      	uxth	r4, r3
    8c5e:	4811      	ldr	r0, [pc, #68]	; (8ca4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c60:	008b      	lsls	r3, r1, #2
    8c62:	4413      	add	r3, r2
    8c64:	005b      	lsls	r3, r3, #1
    8c66:	4403      	add	r3, r0
    8c68:	4622      	mov	r2, r4
    8c6a:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    8c6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8c70:	3301      	adds	r3, #1
    8c72:	f8ad 300e 	strh.w	r3, [sp, #14]
    8c76:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8c7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c7e:	429a      	cmp	r2, r3
    8c80:	d3dd      	bcc.n	8c3e <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    8c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c86:	4a07      	ldr	r2, [pc, #28]	; (8ca4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c88:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    8c8c:	b292      	uxth	r2, r2
    8c8e:	3a01      	subs	r2, #1
    8c90:	b291      	uxth	r1, r2
    8c92:	4a04      	ldr	r2, [pc, #16]	; (8ca4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    8c94:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    8c98:	f005 f986 	bl	dfa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    8c9c:	bf00      	nop
    8c9e:	b004      	add	sp, #16
    8ca0:	bd10      	pop	{r4, pc}
    8ca2:	bf00      	nop
    8ca4:	1fff8d10 	.word	0x1fff8d10

00008ca8 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    8ca8:	b500      	push	{lr}
    8caa:	b087      	sub	sp, #28
    8cac:	9003      	str	r0, [sp, #12]
    8cae:	9102      	str	r1, [sp, #8]
    8cb0:	9201      	str	r2, [sp, #4]
    8cb2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8cb6:	2300      	movs	r3, #0
    8cb8:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8cbc:	9b03      	ldr	r3, [sp, #12]
    8cbe:	789b      	ldrb	r3, [r3, #2]
    8cc0:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8cc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cc8:	4a29      	ldr	r2, [pc, #164]	; (8d70 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cce:	681a      	ldr	r2, [r3, #0]
    8cd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8cd4:	4413      	add	r3, r2
    8cd6:	7c1b      	ldrb	r3, [r3, #16]
    8cd8:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    8cdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ce0:	4a23      	ldr	r2, [pc, #140]	; (8d70 <Adc_Ipw_ReadGroupConvData+0xc8>)
    8ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce6:	681b      	ldr	r3, [r3, #0]
    8ce8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    8cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8cf0:	695b      	ldr	r3, [r3, #20]
    8cf2:	4618      	mov	r0, r3
    8cf4:	f000 fbce 	bl	9494 <Adc_Ipw_CalculateNumsBitShift>
    8cf8:	4603      	mov	r3, r0
    8cfa:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8cfe:	9b03      	ldr	r3, [sp, #12]
    8d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8d04:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d08:	2300      	movs	r3, #0
    8d0a:	f88d 3017 	strb.w	r3, [sp, #23]
    8d0e:	e022      	b.n	8d56 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    8d10:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d14:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d18:	4611      	mov	r1, r2
    8d1a:	4618      	mov	r0, r3
    8d1c:	f7ff fcf4 	bl	8708 <Adc_Ip_GetConvData>
    8d20:	4603      	mov	r3, r0
    8d22:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    8d26:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8d2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d2e:	fa02 f303 	lsl.w	r3, r2, r3
    8d32:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    8d36:	9b01      	ldr	r3, [sp, #4]
    8d38:	2201      	movs	r2, #1
    8d3a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    8d3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d40:	005b      	lsls	r3, r3, #1
    8d42:	9a02      	ldr	r2, [sp, #8]
    8d44:	4413      	add	r3, r2
    8d46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    8d4a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    8d4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d50:	3301      	adds	r3, #1
    8d52:	f88d 3017 	strb.w	r3, [sp, #23]
    8d56:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8d5a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    8d5e:	429a      	cmp	r2, r3
    8d60:	d3d6      	bcc.n	8d10 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    8d62:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    8d66:	4618      	mov	r0, r3
    8d68:	b007      	add	sp, #28
    8d6a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d6e:	bf00      	nop
    8d70:	1fff8cf8 	.word	0x1fff8cf8

00008d74 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    8d74:	b500      	push	{lr}
    8d76:	b087      	sub	sp, #28
    8d78:	9003      	str	r0, [sp, #12]
    8d7a:	9102      	str	r1, [sp, #8]
    8d7c:	9201      	str	r2, [sp, #4]
    8d7e:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    8d82:	2301      	movs	r3, #1
    8d84:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    8d88:	2300      	movs	r3, #0
    8d8a:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    8d8e:	9b03      	ldr	r3, [sp, #12]
    8d90:	789b      	ldrb	r3, [r3, #2]
    8d92:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    8d96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d9a:	4a19      	ldr	r2, [pc, #100]	; (8e00 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    8d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da0:	681a      	ldr	r2, [r3, #0]
    8da2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8da6:	4413      	add	r3, r2
    8da8:	7c1b      	ldrb	r3, [r3, #16]
    8daa:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    8dae:	9b03      	ldr	r3, [sp, #12]
    8db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8db4:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    8db8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    8dbc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8dc0:	2100      	movs	r1, #0
    8dc2:	4618      	mov	r0, r3
    8dc4:	f000 fe2a 	bl	9a1c <Adc_Ipw_CheckValidConversion>
    8dc8:	4603      	mov	r3, r0
    8dca:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    8dce:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d00a      	beq.n	8dec <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    8dd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dda:	9a01      	ldr	r2, [sp, #4]
    8ddc:	9902      	ldr	r1, [sp, #8]
    8dde:	9803      	ldr	r0, [sp, #12]
    8de0:	f7ff ff62 	bl	8ca8 <Adc_Ipw_ReadGroupConvData>
    8de4:	4603      	mov	r3, r0
    8de6:	f88d 3017 	strb.w	r3, [sp, #23]
    8dea:	e002      	b.n	8df2 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    8dec:	2301      	movs	r3, #1
    8dee:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    8df2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8df6:	4618      	mov	r0, r3
    8df8:	b007      	add	sp, #28
    8dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    8dfe:	bf00      	nop
    8e00:	1fff8cf8 	.word	0x1fff8cf8

00008e04 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    8e04:	b088      	sub	sp, #32
    8e06:	4603      	mov	r3, r0
    8e08:	9100      	str	r1, [sp, #0]
    8e0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e0e:	4613      	mov	r3, r2
    8e10:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8e14:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e18:	4a3a      	ldr	r2, [pc, #232]	; (8f04 <Adc_Ipw_WriteDataBuffer+0x100>)
    8e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e1e:	68da      	ldr	r2, [r3, #12]
    8e20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8e24:	005b      	lsls	r3, r3, #1
    8e26:	4413      	add	r3, r2
    8e28:	881b      	ldrh	r3, [r3, #0]
    8e2a:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    8e2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e32:	4a34      	ldr	r2, [pc, #208]	; (8f04 <Adc_Ipw_WriteDataBuffer+0x100>)
    8e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e38:	685a      	ldr	r2, [r3, #4]
    8e3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8e3e:	2134      	movs	r1, #52	; 0x34
    8e40:	fb01 f303 	mul.w	r3, r1, r3
    8e44:	4413      	add	r3, r2
    8e46:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    8e48:	9b04      	ldr	r3, [sp, #16]
    8e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8e4e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    8e52:	2300      	movs	r3, #0
    8e54:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8e56:	2300      	movs	r3, #0
    8e58:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8e5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e60:	4929      	ldr	r1, [pc, #164]	; (8f08 <Adc_Ipw_WriteDataBuffer+0x104>)
    8e62:	4613      	mov	r3, r2
    8e64:	009b      	lsls	r3, r3, #2
    8e66:	4413      	add	r3, r2
    8e68:	009b      	lsls	r3, r3, #2
    8e6a:	440b      	add	r3, r1
    8e6c:	3308      	adds	r3, #8
    8e6e:	881b      	ldrh	r3, [r3, #0]
    8e70:	b29b      	uxth	r3, r3
    8e72:	3b01      	subs	r3, #1
    8e74:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8e78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e7c:	4922      	ldr	r1, [pc, #136]	; (8f08 <Adc_Ipw_WriteDataBuffer+0x104>)
    8e7e:	4613      	mov	r3, r2
    8e80:	009b      	lsls	r3, r3, #2
    8e82:	4413      	add	r3, r2
    8e84:	009b      	lsls	r3, r3, #2
    8e86:	440b      	add	r3, r1
    8e88:	3308      	adds	r3, #8
    8e8a:	881b      	ldrh	r3, [r3, #0]
    8e8c:	b29b      	uxth	r3, r3
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d104      	bne.n	8e9c <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    8e92:	9b04      	ldr	r3, [sp, #16]
    8e94:	8b9b      	ldrh	r3, [r3, #28]
    8e96:	3b01      	subs	r3, #1
    8e98:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8e9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ea0:	4919      	ldr	r1, [pc, #100]	; (8f08 <Adc_Ipw_WriteDataBuffer+0x104>)
    8ea2:	4613      	mov	r3, r2
    8ea4:	009b      	lsls	r3, r3, #2
    8ea6:	4413      	add	r3, r2
    8ea8:	009b      	lsls	r3, r3, #2
    8eaa:	440b      	add	r3, r1
    8eac:	330c      	adds	r3, #12
    8eae:	681a      	ldr	r2, [r3, #0]
    8eb0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8eb4:	005b      	lsls	r3, r3, #1
    8eb6:	4413      	add	r3, r2
    8eb8:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    8eba:	9b04      	ldr	r3, [sp, #16]
    8ebc:	8b9b      	ldrh	r3, [r3, #28]
    8ebe:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    8ec2:	2300      	movs	r3, #0
    8ec4:	f88d 301f 	strb.w	r3, [sp, #31]
    8ec8:	e012      	b.n	8ef0 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    8eca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8ece:	005b      	lsls	r3, r3, #1
    8ed0:	9a00      	ldr	r2, [sp, #0]
    8ed2:	4413      	add	r3, r2
    8ed4:	9a06      	ldr	r2, [sp, #24]
    8ed6:	8812      	ldrh	r2, [r2, #0]
    8ed8:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    8eda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8ede:	005b      	lsls	r3, r3, #1
    8ee0:	9a06      	ldr	r2, [sp, #24]
    8ee2:	4413      	add	r3, r2
    8ee4:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    8ee6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8eea:	3301      	adds	r3, #1
    8eec:	f88d 301f 	strb.w	r3, [sp, #31]
    8ef0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8ef4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ef8:	429a      	cmp	r2, r3
    8efa:	d3e6      	bcc.n	8eca <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    8efc:	bf00      	nop
    8efe:	bf00      	nop
    8f00:	b008      	add	sp, #32
    8f02:	4770      	bx	lr
    8f04:	1fff8cf8 	.word	0x1fff8cf8
    8f08:	1fff8cfc 	.word	0x1fff8cfc

00008f0c <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    8f0c:	b500      	push	{lr}
    8f0e:	b089      	sub	sp, #36	; 0x24
    8f10:	9200      	str	r2, [sp, #0]
    8f12:	461a      	mov	r2, r3
    8f14:	4603      	mov	r3, r0
    8f16:	f88d 3007 	strb.w	r3, [sp, #7]
    8f1a:	460b      	mov	r3, r1
    8f1c:	f8ad 3004 	strh.w	r3, [sp, #4]
    8f20:	4613      	mov	r3, r2
    8f22:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    8f26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f2a:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    8f2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f32:	f003 0307 	and.w	r3, r3, #7
    8f36:	b2db      	uxtb	r3, r3
    8f38:	2b00      	cmp	r3, #0
    8f3a:	d006      	beq.n	8f4a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    8f3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f40:	08db      	lsrs	r3, r3, #3
    8f42:	b2db      	uxtb	r3, r3
    8f44:	3301      	adds	r3, #1
    8f46:	b2db      	uxtb	r3, r3
    8f48:	e003      	b.n	8f52 <Adc_Ipw_ConfigurePdbChannels+0x46>
    8f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f4e:	08db      	lsrs	r3, r3, #3
    8f50:	b2db      	uxtb	r3, r3
    8f52:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    8f56:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8f5a:	4987      	ldr	r1, [pc, #540]	; (9178 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    8f5c:	4613      	mov	r3, r2
    8f5e:	009b      	lsls	r3, r3, #2
    8f60:	4413      	add	r3, r2
    8f62:	009b      	lsls	r3, r3, #2
    8f64:	440b      	add	r3, r1
    8f66:	3310      	adds	r3, #16
    8f68:	781b      	ldrb	r3, [r3, #0]
    8f6a:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    8f6e:	4b83      	ldr	r3, [pc, #524]	; (917c <Adc_Ipw_ConfigurePdbChannels+0x270>)
    8f70:	681b      	ldr	r3, [r3, #0]
    8f72:	681a      	ldr	r2, [r3, #0]
    8f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f78:	4413      	add	r3, r2
    8f7a:	7c1b      	ldrb	r3, [r3, #16]
    8f7c:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    8f80:	9b00      	ldr	r3, [sp, #0]
    8f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8f84:	691b      	ldr	r3, [r3, #16]
    8f86:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    8f88:	2300      	movs	r3, #0
    8f8a:	f88d 301f 	strb.w	r3, [sp, #31]
    8f8e:	e0e6      	b.n	915e <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    8f90:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8f94:	08db      	lsrs	r3, r3, #3
    8f96:	b2db      	uxtb	r3, r3
    8f98:	2b00      	cmp	r3, #0
    8f9a:	d102      	bne.n	8fa2 <Adc_Ipw_ConfigurePdbChannels+0x96>
    8f9c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8fa0:	e000      	b.n	8fa4 <Adc_Ipw_ConfigurePdbChannels+0x98>
    8fa2:	2308      	movs	r3, #8
    8fa4:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    8fa8:	9b00      	ldr	r3, [sp, #0]
    8faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fac:	7bdb      	ldrb	r3, [r3, #15]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d05e      	beq.n	9070 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    8fb2:	9b00      	ldr	r3, [sp, #0]
    8fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8fb6:	7b9b      	ldrb	r3, [r3, #14]
    8fb8:	f083 0301 	eor.w	r3, r3, #1
    8fbc:	b2db      	uxtb	r3, r3
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d02a      	beq.n	9018 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    8fc2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8fc6:	f1c3 0308 	rsb	r3, r3, #8
    8fca:	22ff      	movs	r2, #255	; 0xff
    8fcc:	fa22 f303 	lsr.w	r3, r2, r3
    8fd0:	b2db      	uxtb	r3, r3
    8fd2:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    8fd6:	2300      	movs	r3, #0
    8fd8:	f88d 301e 	strb.w	r3, [sp, #30]
    8fdc:	e015      	b.n	900a <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    8fde:	f89d 0018 	ldrb.w	r0, [sp, #24]
    8fe2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    8fe6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    8fea:	4413      	add	r3, r2
    8fec:	005b      	lsls	r3, r3, #1
    8fee:	9a05      	ldr	r2, [sp, #20]
    8ff0:	4413      	add	r3, r2
    8ff2:	881b      	ldrh	r3, [r3, #0]
    8ff4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    8ff8:	f89d 101f 	ldrb.w	r1, [sp, #31]
    8ffc:	f001 fd06 	bl	aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9000:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9004:	3301      	adds	r3, #1
    9006:	f88d 301e 	strb.w	r3, [sp, #30]
    900a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    900e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9012:	429a      	cmp	r2, r3
    9014:	d3e3      	bcc.n	8fde <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9016:	e051      	b.n	90bc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9018:	f89d 301f 	ldrb.w	r3, [sp, #31]
    901c:	2b00      	cmp	r3, #0
    901e:	d110      	bne.n	9042 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9020:	2301      	movs	r3, #1
    9022:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9026:	9b05      	ldr	r3, [sp, #20]
    9028:	881b      	ldrh	r3, [r3, #0]
    902a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    902e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9032:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9036:	f89d 101f 	ldrb.w	r1, [sp, #31]
    903a:	2200      	movs	r2, #0
    903c:	f001 fce6 	bl	aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    9040:	e03c      	b.n	90bc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    9042:	2301      	movs	r3, #1
    9044:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9048:	9b00      	ldr	r3, [sp, #0]
    904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    904c:	899a      	ldrh	r2, [r3, #12]
    904e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9052:	b29b      	uxth	r3, r3
    9054:	fb12 f303 	smulbb	r3, r2, r3
    9058:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    905c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9060:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9064:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9068:	2200      	movs	r2, #0
    906a:	f001 fccf 	bl	aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    906e:	e025      	b.n	90bc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    9070:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9074:	2b00      	cmp	r3, #0
    9076:	d10b      	bne.n	9090 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    9078:	2301      	movs	r3, #1
    907a:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    907e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9082:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9086:	2300      	movs	r3, #0
    9088:	2200      	movs	r2, #0
    908a:	f001 fcbf 	bl	aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    908e:	e015      	b.n	90bc <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9090:	2301      	movs	r3, #1
    9092:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    9096:	9b00      	ldr	r3, [sp, #0]
    9098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    909a:	899a      	ldrh	r2, [r3, #12]
    909c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90a0:	b29b      	uxth	r3, r3
    90a2:	fb12 f303 	smulbb	r3, r2, r3
    90a6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    90aa:	f89d 0018 	ldrb.w	r0, [sp, #24]
    90ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    90b2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    90b6:	2200      	movs	r2, #0
    90b8:	f001 fca8 	bl	aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    90bc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    90c0:	4618      	mov	r0, r3
    90c2:	f001 fb77 	bl	a7b4 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    90c6:	f89d 201d 	ldrb.w	r2, [sp, #29]
    90ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90ce:	1ad3      	subs	r3, r2, r3
    90d0:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    90d4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90d8:	b29a      	uxth	r2, r3
    90da:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    90de:	4413      	add	r3, r2
    90e0:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    90e4:	9b00      	ldr	r3, [sp, #0]
    90e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    90e8:	7b9b      	ldrb	r3, [r3, #14]
    90ea:	2b00      	cmp	r3, #0
    90ec:	d01d      	beq.n	912a <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    90ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    90f2:	2b00      	cmp	r3, #0
    90f4:	d10c      	bne.n	9110 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    90f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    90fa:	f1c3 0308 	rsb	r3, r3, #8
    90fe:	22ff      	movs	r2, #255	; 0xff
    9100:	fa22 f303 	lsr.w	r3, r2, r3
    9104:	b2db      	uxtb	r3, r3
    9106:	3b01      	subs	r3, #1
    9108:	b2db      	uxtb	r3, r3
    910a:	f88d 300e 	strb.w	r3, [sp, #14]
    910e:	e00f      	b.n	9130 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    9110:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9114:	f1c3 0308 	rsb	r3, r3, #8
    9118:	22ff      	movs	r2, #255	; 0xff
    911a:	fa22 f303 	lsr.w	r3, r2, r3
    911e:	b2db      	uxtb	r3, r3
    9120:	3b01      	subs	r3, #1
    9122:	b2db      	uxtb	r3, r3
    9124:	f88d 300e 	strb.w	r3, [sp, #14]
    9128:	e002      	b.n	9130 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    912a:	2300      	movs	r3, #0
    912c:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9130:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9134:	f1c3 0308 	rsb	r3, r3, #8
    9138:	22ff      	movs	r2, #255	; 0xff
    913a:	fa22 f303 	lsr.w	r3, r2, r3
    913e:	b2db      	uxtb	r3, r3
    9140:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    9144:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9148:	aa03      	add	r2, sp, #12
    914a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    914e:	4618      	mov	r0, r3
    9150:	f001 fb6c 	bl	a82c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9154:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9158:	3301      	adds	r3, #1
    915a:	f88d 301f 	strb.w	r3, [sp, #31]
    915e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9162:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9166:	429a      	cmp	r2, r3
    9168:	f4ff af12 	bcc.w	8f90 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    916c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9170:	4618      	mov	r0, r3
    9172:	b009      	add	sp, #36	; 0x24
    9174:	f85d fb04 	ldr.w	pc, [sp], #4
    9178:	1fff8cfc 	.word	0x1fff8cfc
    917c:	1fff8cf8 	.word	0x1fff8cf8

00009180 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    9180:	b500      	push	{lr}
    9182:	b089      	sub	sp, #36	; 0x24
    9184:	9202      	str	r2, [sp, #8]
    9186:	9301      	str	r3, [sp, #4]
    9188:	4603      	mov	r3, r0
    918a:	f88d 300f 	strb.w	r3, [sp, #15]
    918e:	460b      	mov	r3, r1
    9190:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    9194:	2300      	movs	r3, #0
    9196:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    919a:	4b62      	ldr	r3, [pc, #392]	; (9324 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    919c:	681b      	ldr	r3, [r3, #0]
    919e:	681a      	ldr	r2, [r3, #0]
    91a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91a4:	4413      	add	r3, r2
    91a6:	7c1b      	ldrb	r3, [r3, #16]
    91a8:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    91ac:	9b02      	ldr	r3, [sp, #8]
    91ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    91b0:	691b      	ldr	r3, [r3, #16]
    91b2:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    91b4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91b8:	f003 0307 	and.w	r3, r3, #7
    91bc:	b2db      	uxtb	r3, r3
    91be:	2b00      	cmp	r3, #0
    91c0:	d006      	beq.n	91d0 <Adc_Ipw_ConfigurePdbConversion+0x50>
    91c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91c6:	08db      	lsrs	r3, r3, #3
    91c8:	b2db      	uxtb	r3, r3
    91ca:	3301      	adds	r3, #1
    91cc:	b2db      	uxtb	r3, r3
    91ce:	e003      	b.n	91d8 <Adc_Ipw_ConfigurePdbConversion+0x58>
    91d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91d4:	08db      	lsrs	r3, r3, #3
    91d6:	b2db      	uxtb	r3, r3
    91d8:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    91dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    91e0:	4618      	mov	r0, r3
    91e2:	f001 fa51 	bl	a688 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    91e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    91ea:	9901      	ldr	r1, [sp, #4]
    91ec:	4618      	mov	r0, r3
    91ee:	f001 fa79 	bl	a6e4 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    91f2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    91f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    91fa:	f89d 000f 	ldrb.w	r0, [sp, #15]
    91fe:	9a02      	ldr	r2, [sp, #8]
    9200:	f7ff fe84 	bl	8f0c <Adc_Ipw_ConfigurePdbChannels>
    9204:	4603      	mov	r3, r0
    9206:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    920a:	9b02      	ldr	r3, [sp, #8]
    920c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    920e:	7bdb      	ldrb	r3, [r3, #15]
    9210:	2b00      	cmp	r3, #0
    9212:	d02f      	beq.n	9274 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9214:	9b02      	ldr	r3, [sp, #8]
    9216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9218:	7b9b      	ldrb	r3, [r3, #14]
    921a:	f083 0301 	eor.w	r3, r3, #1
    921e:	b2db      	uxtb	r3, r3
    9220:	2b00      	cmp	r3, #0
    9222:	d017      	beq.n	9254 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    9224:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9228:	493f      	ldr	r1, [pc, #252]	; (9328 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    922a:	4613      	mov	r3, r2
    922c:	009b      	lsls	r3, r3, #2
    922e:	4413      	add	r3, r2
    9230:	009b      	lsls	r3, r3, #2
    9232:	440b      	add	r3, r1
    9234:	3310      	adds	r3, #16
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	461a      	mov	r2, r3
    923a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    923e:	4413      	add	r3, r2
    9240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9244:	3b01      	subs	r3, #1
    9246:	005b      	lsls	r3, r3, #1
    9248:	9a05      	ldr	r2, [sp, #20]
    924a:	4413      	add	r3, r2
    924c:	881b      	ldrh	r3, [r3, #0]
    924e:	f8ad 301c 	strh.w	r3, [sp, #28]
    9252:	e01a      	b.n	928a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    9254:	9b05      	ldr	r3, [sp, #20]
    9256:	881a      	ldrh	r2, [r3, #0]
    9258:	9b02      	ldr	r3, [sp, #8]
    925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    925c:	8999      	ldrh	r1, [r3, #12]
    925e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9262:	3b01      	subs	r3, #1
    9264:	b29b      	uxth	r3, r3
    9266:	fb11 f303 	smulbb	r3, r1, r3
    926a:	b29b      	uxth	r3, r3
    926c:	4413      	add	r3, r2
    926e:	f8ad 301c 	strh.w	r3, [sp, #28]
    9272:	e00a      	b.n	928a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    9274:	9b02      	ldr	r3, [sp, #8]
    9276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9278:	899a      	ldrh	r2, [r3, #12]
    927a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    927e:	3b01      	subs	r3, #1
    9280:	b29b      	uxth	r3, r3
    9282:	fb12 f303 	smulbb	r3, r2, r3
    9286:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    928a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    928e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    9292:	4611      	mov	r1, r2
    9294:	4618      	mov	r0, r3
    9296:	f001 faa5 	bl	a7e4 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    929a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    929e:	4618      	mov	r0, r3
    92a0:	f001 fa88 	bl	a7b4 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    92a4:	2300      	movs	r3, #0
    92a6:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    92aa:	2300      	movs	r3, #0
    92ac:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    92b0:	2300      	movs	r3, #0
    92b2:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    92b6:	e00c      	b.n	92d2 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    92b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    92bc:	aa04      	add	r2, sp, #16
    92be:	f89d 101f 	ldrb.w	r1, [sp, #31]
    92c2:	4618      	mov	r0, r3
    92c4:	f001 fab2 	bl	a82c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    92c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92cc:	3301      	adds	r3, #1
    92ce:	f88d 301f 	strb.w	r3, [sp, #31]
    92d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92d6:	2b01      	cmp	r3, #1
    92d8:	d9ee      	bls.n	92b8 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    92da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    92de:	4912      	ldr	r1, [pc, #72]	; (9328 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    92e0:	4613      	mov	r3, r2
    92e2:	009b      	lsls	r3, r3, #2
    92e4:	4413      	add	r3, r2
    92e6:	009b      	lsls	r3, r3, #2
    92e8:	440b      	add	r3, r1
    92ea:	3310      	adds	r3, #16
    92ec:	7819      	ldrb	r1, [r3, #0]
    92ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    92f2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    92f6:	440b      	add	r3, r1
    92f8:	b2d8      	uxtb	r0, r3
    92fa:	490b      	ldr	r1, [pc, #44]	; (9328 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    92fc:	4613      	mov	r3, r2
    92fe:	009b      	lsls	r3, r3, #2
    9300:	4413      	add	r3, r2
    9302:	009b      	lsls	r3, r3, #2
    9304:	440b      	add	r3, r1
    9306:	3310      	adds	r3, #16
    9308:	4602      	mov	r2, r0
    930a:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    930c:	9b01      	ldr	r3, [sp, #4]
    930e:	2b0f      	cmp	r3, #15
    9310:	d104      	bne.n	931c <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9312:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9316:	4618      	mov	r0, r3
    9318:	f001 fa24 	bl	a764 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    931c:	bf00      	nop
    931e:	b009      	add	sp, #36	; 0x24
    9320:	f85d fb04 	ldr.w	pc, [sp], #4
    9324:	1fff8cf8 	.word	0x1fff8cf8
    9328:	1fff8cfc 	.word	0x1fff8cfc

0000932c <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    932c:	b500      	push	{lr}
    932e:	b087      	sub	sp, #28
    9330:	4603      	mov	r3, r0
    9332:	f88d 3007 	strb.w	r3, [sp, #7]
    9336:	460b      	mov	r3, r1
    9338:	f8ad 3004 	strh.w	r3, [sp, #4]
    933c:	4613      	mov	r3, r2
    933e:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9342:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9346:	4a36      	ldr	r2, [pc, #216]	; (9420 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    934c:	68da      	ldr	r2, [r3, #12]
    934e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9352:	005b      	lsls	r3, r3, #1
    9354:	4413      	add	r3, r2
    9356:	881b      	ldrh	r3, [r3, #0]
    9358:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    935c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9360:	4a2f      	ldr	r2, [pc, #188]	; (9420 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    9362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9366:	681a      	ldr	r2, [r3, #0]
    9368:	f89d 3007 	ldrb.w	r3, [sp, #7]
    936c:	4413      	add	r3, r2
    936e:	7c1b      	ldrb	r3, [r3, #16]
    9370:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    9374:	2300      	movs	r3, #0
    9376:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    937a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    937e:	4618      	mov	r0, r3
    9380:	f001 fb6e 	bl	aa60 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    9384:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9388:	4a25      	ldr	r2, [pc, #148]	; (9420 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    938a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    938e:	685a      	ldr	r2, [r3, #4]
    9390:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9394:	2134      	movs	r1, #52	; 0x34
    9396:	fb01 f303 	mul.w	r3, r1, r3
    939a:	4413      	add	r3, r2
    939c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    93a0:	2b01      	cmp	r3, #1
    93a2:	d114      	bne.n	93ce <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    93a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93a8:	4a1d      	ldr	r2, [pc, #116]	; (9420 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    93aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ae:	685a      	ldr	r2, [r3, #4]
    93b0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    93b4:	2134      	movs	r1, #52	; 0x34
    93b6:	fb01 f303 	mul.w	r3, r1, r3
    93ba:	4413      	add	r3, r2
    93bc:	689b      	ldr	r3, [r3, #8]
    93be:	2b01      	cmp	r3, #1
    93c0:	d105      	bne.n	93ce <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    93c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93c6:	2100      	movs	r1, #0
    93c8:	4618      	mov	r0, r3
    93ca:	f7ff f827 	bl	841c <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    93ce:	2300      	movs	r3, #0
    93d0:	f88d 3016 	strb.w	r3, [sp, #22]
    93d4:	e013      	b.n	93fe <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    93d6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    93da:	f89d 1016 	ldrb.w	r1, [sp, #22]
    93de:	2201      	movs	r2, #1
    93e0:	4618      	mov	r0, r3
    93e2:	f7ff f8cd 	bl	8580 <Adc_Ip_SetDisabledChannel>
    93e6:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    93e8:	9b03      	ldr	r3, [sp, #12]
    93ea:	2b02      	cmp	r3, #2
    93ec:	d102      	bne.n	93f4 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    93ee:	2301      	movs	r3, #1
    93f0:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    93f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93f8:	3301      	adds	r3, #1
    93fa:	f88d 3016 	strb.w	r3, [sp, #22]
    93fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9402:	4a08      	ldr	r2, [pc, #32]	; (9424 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    9404:	00db      	lsls	r3, r3, #3
    9406:	4413      	add	r3, r2
    9408:	799b      	ldrb	r3, [r3, #6]
    940a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    940e:	429a      	cmp	r2, r3
    9410:	d3e1      	bcc.n	93d6 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    9412:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9416:	4618      	mov	r0, r3
    9418:	b007      	add	sp, #28
    941a:	f85d fb04 	ldr.w	pc, [sp], #4
    941e:	bf00      	nop
    9420:	1fff8cf8 	.word	0x1fff8cf8
    9424:	1fff8d10 	.word	0x1fff8d10

00009428 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    9428:	b500      	push	{lr}
    942a:	b085      	sub	sp, #20
    942c:	4603      	mov	r3, r0
    942e:	9100      	str	r1, [sp, #0]
    9430:	f88d 3007 	strb.w	r3, [sp, #7]
    9434:	4613      	mov	r3, r2
    9436:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    943a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    943e:	4a14      	ldr	r2, [pc, #80]	; (9490 <Adc_Ipw_PrepareGroupStart+0x68>)
    9440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9444:	681a      	ldr	r2, [r3, #0]
    9446:	f89d 3007 	ldrb.w	r3, [sp, #7]
    944a:	4413      	add	r3, r2
    944c:	7c1b      	ldrb	r3, [r3, #16]
    944e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    9452:	9b00      	ldr	r3, [sp, #0]
    9454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9456:	781b      	ldrb	r3, [r3, #0]
    9458:	2b01      	cmp	r3, #1
    945a:	d108      	bne.n	946e <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    945c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9460:	9b00      	ldr	r3, [sp, #0]
    9462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9464:	685b      	ldr	r3, [r3, #4]
    9466:	461a      	mov	r2, r3
    9468:	2101      	movs	r1, #1
    946a:	f7fe ff51 	bl	8310 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    946e:	9b00      	ldr	r3, [sp, #0]
    9470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9472:	7a1b      	ldrb	r3, [r3, #8]
    9474:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    9478:	f89d 300f 	ldrb.w	r3, [sp, #15]
    947c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9480:	4611      	mov	r1, r2
    9482:	4618      	mov	r0, r3
    9484:	f7fe ff62 	bl	834c <Adc_Ip_SetSampleTime>
}
    9488:	bf00      	nop
    948a:	b005      	add	sp, #20
    948c:	f85d fb04 	ldr.w	pc, [sp], #4
    9490:	1fff8cf8 	.word	0x1fff8cf8

00009494 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    9494:	b084      	sub	sp, #16
    9496:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    9498:	2300      	movs	r3, #0
    949a:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    949e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    94a2:	4618      	mov	r0, r3
    94a4:	b004      	add	sp, #16
    94a6:	4770      	bx	lr

000094a8 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    94a8:	b500      	push	{lr}
    94aa:	b08f      	sub	sp, #60	; 0x3c
    94ac:	9202      	str	r2, [sp, #8]
    94ae:	461a      	mov	r2, r3
    94b0:	4603      	mov	r3, r0
    94b2:	f88d 300f 	strb.w	r3, [sp, #15]
    94b6:	460b      	mov	r3, r1
    94b8:	f8ad 300c 	strh.w	r3, [sp, #12]
    94bc:	4613      	mov	r3, r2
    94be:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    94c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94c6:	4a6d      	ldr	r2, [pc, #436]	; (967c <Adc_Ipw_ConfigureConversion+0x1d4>)
    94c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94cc:	68da      	ldr	r2, [r3, #12]
    94ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    94d2:	005b      	lsls	r3, r3, #1
    94d4:	4413      	add	r3, r2
    94d6:	881b      	ldrh	r3, [r3, #0]
    94d8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    94dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94e0:	4a66      	ldr	r2, [pc, #408]	; (967c <Adc_Ipw_ConfigureConversion+0x1d4>)
    94e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94e6:	685a      	ldr	r2, [r3, #4]
    94e8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    94ec:	2134      	movs	r1, #52	; 0x34
    94ee:	fb01 f303 	mul.w	r3, r1, r3
    94f2:	4413      	add	r3, r2
    94f4:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    94f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94fa:	4a60      	ldr	r2, [pc, #384]	; (967c <Adc_Ipw_ConfigureConversion+0x1d4>)
    94fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9500:	681a      	ldr	r2, [r3, #0]
    9502:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9506:	4413      	add	r3, r2
    9508:	7c1b      	ldrb	r3, [r3, #16]
    950a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    950e:	2300      	movs	r3, #0
    9510:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9512:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9516:	495a      	ldr	r1, [pc, #360]	; (9680 <Adc_Ipw_ConfigureConversion+0x1d8>)
    9518:	4613      	mov	r3, r2
    951a:	009b      	lsls	r3, r3, #2
    951c:	4413      	add	r3, r2
    951e:	009b      	lsls	r3, r3, #2
    9520:	440b      	add	r3, r1
    9522:	3310      	adds	r3, #16
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    952a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    952c:	6a1b      	ldr	r3, [r3, #32]
    952e:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9530:	2300      	movs	r3, #0
    9532:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9536:	e030      	b.n	959a <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    9538:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    953c:	4a4f      	ldr	r2, [pc, #316]	; (967c <Adc_Ipw_ConfigureConversion+0x1d4>)
    953e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9542:	681b      	ldr	r3, [r3, #0]
    9544:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    954c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    954e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9552:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9556:	440b      	add	r3, r1
    9558:	005b      	lsls	r3, r3, #1
    955a:	990a      	ldr	r1, [sp, #40]	; 0x28
    955c:	440b      	add	r3, r1
    955e:	881b      	ldrh	r3, [r3, #0]
    9560:	4619      	mov	r1, r3
    9562:	460b      	mov	r3, r1
    9564:	005b      	lsls	r3, r3, #1
    9566:	440b      	add	r3, r1
    9568:	009b      	lsls	r3, r3, #2
    956a:	4413      	add	r3, r2
    956c:	685b      	ldr	r3, [r3, #4]
    956e:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    9570:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9574:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    9578:	9b08      	ldr	r3, [sp, #32]
    957a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    957c:	2300      	movs	r3, #0
    957e:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9582:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9586:	aa05      	add	r2, sp, #20
    9588:	4611      	mov	r1, r2
    958a:	4618      	mov	r0, r3
    958c:	f7fe ffc8 	bl	8520 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    9590:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9594:	3301      	adds	r3, #1
    9596:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    959a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    959e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    95a2:	3b01      	subs	r3, #1
    95a4:	429a      	cmp	r2, r3
    95a6:	d3c7      	bcc.n	9538 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    95a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    95ac:	4a33      	ldr	r2, [pc, #204]	; (967c <Adc_Ipw_ConfigureConversion+0x1d4>)
    95ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95b2:	681b      	ldr	r3, [r3, #0]
    95b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    95b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    95be:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    95c2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95c6:	440b      	add	r3, r1
    95c8:	005b      	lsls	r3, r3, #1
    95ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    95cc:	440b      	add	r3, r1
    95ce:	881b      	ldrh	r3, [r3, #0]
    95d0:	4619      	mov	r1, r3
    95d2:	460b      	mov	r3, r1
    95d4:	005b      	lsls	r3, r3, #1
    95d6:	440b      	add	r3, r1
    95d8:	009b      	lsls	r3, r3, #2
    95da:	4413      	add	r3, r2
    95dc:	685b      	ldr	r3, [r3, #4]
    95de:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    95e0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    95e4:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    95e8:	9b08      	ldr	r3, [sp, #32]
    95ea:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    95ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    95ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    95f2:	2b00      	cmp	r3, #0
    95f4:	d103      	bne.n	95fe <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    95f6:	2301      	movs	r3, #1
    95f8:	f88d 301c 	strb.w	r3, [sp, #28]
    95fc:	e002      	b.n	9604 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    95fe:	2300      	movs	r3, #0
    9600:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    9604:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9608:	aa05      	add	r2, sp, #20
    960a:	4611      	mov	r1, r2
    960c:	4618      	mov	r0, r3
    960e:	f7fe ff87 	bl	8520 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    9612:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9616:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    961a:	e014      	b.n	9646 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    961c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9620:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    9624:	231f      	movs	r3, #31
    9626:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    9628:	2300      	movs	r3, #0
    962a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    962e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9632:	aa05      	add	r2, sp, #20
    9634:	4611      	mov	r1, r2
    9636:	4618      	mov	r0, r3
    9638:	f7fe ff72 	bl	8520 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    963c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9640:	3301      	adds	r3, #1
    9642:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    9646:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    964a:	2b0f      	cmp	r3, #15
    964c:	d9e6      	bls.n	961c <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    964e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9652:	4a0c      	ldr	r2, [pc, #48]	; (9684 <Adc_Ipw_ConfigureConversion+0x1dc>)
    9654:	00db      	lsls	r3, r3, #3
    9656:	4413      	add	r3, r2
    9658:	f89d 200e 	ldrb.w	r2, [sp, #14]
    965c:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    965e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9662:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9666:	f89d 300e 	ldrb.w	r3, [sp, #14]
    966a:	9300      	str	r3, [sp, #0]
    966c:	9b02      	ldr	r3, [sp, #8]
    966e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9670:	f7ff fd86 	bl	9180 <Adc_Ipw_ConfigurePdbConversion>
}
    9674:	bf00      	nop
    9676:	b00f      	add	sp, #60	; 0x3c
    9678:	f85d fb04 	ldr.w	pc, [sp], #4
    967c:	1fff8cf8 	.word	0x1fff8cf8
    9680:	1fff8cfc 	.word	0x1fff8cfc
    9684:	1fff8d10 	.word	0x1fff8d10

00009688 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    9688:	b500      	push	{lr}
    968a:	b085      	sub	sp, #20
    968c:	9001      	str	r0, [sp, #4]
    968e:	460b      	mov	r3, r1
    9690:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9694:	2300      	movs	r3, #0
    9696:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    969a:	2300      	movs	r3, #0
    969c:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    96a0:	2300      	movs	r3, #0
    96a2:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96a6:	2300      	movs	r3, #0
    96a8:	f88d 300f 	strb.w	r3, [sp, #15]
    96ac:	e027      	b.n	96fe <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    96ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96b2:	9a01      	ldr	r2, [sp, #4]
    96b4:	4413      	add	r3, r2
    96b6:	7f9b      	ldrb	r3, [r3, #30]
    96b8:	2b01      	cmp	r3, #1
    96ba:	d11b      	bne.n	96f4 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    96bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96c0:	9a01      	ldr	r2, [sp, #4]
    96c2:	4413      	add	r3, r2
    96c4:	7c1b      	ldrb	r3, [r3, #16]
    96c6:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    96ca:	f89d 000e 	ldrb.w	r0, [sp, #14]
    96ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    96d2:	9b01      	ldr	r3, [sp, #4]
    96d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96d8:	4619      	mov	r1, r3
    96da:	f7fe fcb8 	bl	804e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    96de:	f89d 000e 	ldrb.w	r0, [sp, #14]
    96e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    96e6:	9b01      	ldr	r3, [sp, #4]
    96e8:	3202      	adds	r2, #2
    96ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96ee:	4619      	mov	r1, r3
    96f0:	f000 fe9d 	bl	a42e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    96f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96f8:	3301      	adds	r3, #1
    96fa:	f88d 300f 	strb.w	r3, [sp, #15]
    96fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9702:	2b00      	cmp	r3, #0
    9704:	d0d3      	beq.n	96ae <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    9706:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    970a:	4618      	mov	r0, r3
    970c:	b005      	add	sp, #20
    970e:	f85d fb04 	ldr.w	pc, [sp], #4

00009712 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    9712:	b500      	push	{lr}
    9714:	b087      	sub	sp, #28
    9716:	4603      	mov	r3, r0
    9718:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    971c:	2300      	movs	r3, #0
    971e:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9722:	2300      	movs	r3, #0
    9724:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    9728:	2300      	movs	r3, #0
    972a:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    972e:	2300      	movs	r3, #0
    9730:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    9734:	2300      	movs	r3, #0
    9736:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    973a:	2300      	movs	r3, #0
    973c:	f88d 3017 	strb.w	r3, [sp, #23]
    9740:	e026      	b.n	9790 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9742:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9746:	4a2e      	ldr	r2, [pc, #184]	; (9800 <Adc_Ipw_DeInit+0xee>)
    9748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    974c:	681a      	ldr	r2, [r3, #0]
    974e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9752:	4413      	add	r3, r2
    9754:	7f9b      	ldrb	r3, [r3, #30]
    9756:	2b01      	cmp	r3, #1
    9758:	d115      	bne.n	9786 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    975a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    975e:	4a28      	ldr	r2, [pc, #160]	; (9800 <Adc_Ipw_DeInit+0xee>)
    9760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9764:	681a      	ldr	r2, [r3, #0]
    9766:	f89d 3017 	ldrb.w	r3, [sp, #23]
    976a:	4413      	add	r3, r2
    976c:	7c1b      	ldrb	r3, [r3, #16]
    976e:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    9772:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9776:	4618      	mov	r0, r3
    9778:	f7fe fd40 	bl	81fc <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    977c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9780:	4618      	mov	r0, r3
    9782:	f000 fefd 	bl	a580 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    9786:	f89d 3017 	ldrb.w	r3, [sp, #23]
    978a:	3301      	adds	r3, #1
    978c:	f88d 3017 	strb.w	r3, [sp, #23]
    9790:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9794:	2b00      	cmp	r3, #0
    9796:	d0d4      	beq.n	9742 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9798:	2300      	movs	r3, #0
    979a:	f8ad 3014 	strh.w	r3, [sp, #20]
    979e:	e01e      	b.n	97de <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    97a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97a4:	4a16      	ldr	r2, [pc, #88]	; (9800 <Adc_Ipw_DeInit+0xee>)
    97a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97aa:	685a      	ldr	r2, [r3, #4]
    97ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    97b0:	2134      	movs	r1, #52	; 0x34
    97b2:	fb01 f303 	mul.w	r3, r1, r3
    97b6:	4413      	add	r3, r2
    97b8:	881b      	ldrh	r3, [r3, #0]
    97ba:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    97be:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    97c2:	4910      	ldr	r1, [pc, #64]	; (9804 <Adc_Ipw_DeInit+0xf2>)
    97c4:	4613      	mov	r3, r2
    97c6:	009b      	lsls	r3, r3, #2
    97c8:	4413      	add	r3, r2
    97ca:	009b      	lsls	r3, r3, #2
    97cc:	440b      	add	r3, r1
    97ce:	330c      	adds	r3, #12
    97d0:	2200      	movs	r2, #0
    97d2:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    97d4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    97d8:	3301      	adds	r3, #1
    97da:	f8ad 3014 	strh.w	r3, [sp, #20]
    97de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97e2:	4a07      	ldr	r2, [pc, #28]	; (9800 <Adc_Ipw_DeInit+0xee>)
    97e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e8:	891b      	ldrh	r3, [r3, #8]
    97ea:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    97ee:	429a      	cmp	r2, r3
    97f0:	d3d6      	bcc.n	97a0 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    97f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    97f6:	4618      	mov	r0, r3
    97f8:	b007      	add	sp, #28
    97fa:	f85d fb04 	ldr.w	pc, [sp], #4
    97fe:	bf00      	nop
    9800:	1fff8cf8 	.word	0x1fff8cf8
    9804:	1fff8cfc 	.word	0x1fff8cfc

00009808 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    9808:	b500      	push	{lr}
    980a:	b089      	sub	sp, #36	; 0x24
    980c:	4603      	mov	r3, r0
    980e:	460a      	mov	r2, r1
    9810:	f88d 300f 	strb.w	r3, [sp, #15]
    9814:	4613      	mov	r3, r2
    9816:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    981a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    981e:	4a4c      	ldr	r2, [pc, #304]	; (9950 <Adc_Ipw_StartNormalConversion+0x148>)
    9820:	00db      	lsls	r3, r3, #3
    9822:	4413      	add	r3, r2
    9824:	885b      	ldrh	r3, [r3, #2]
    9826:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    982a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    982e:	4a49      	ldr	r2, [pc, #292]	; (9954 <Adc_Ipw_StartNormalConversion+0x14c>)
    9830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9834:	68da      	ldr	r2, [r3, #12]
    9836:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    983a:	005b      	lsls	r3, r3, #1
    983c:	4413      	add	r3, r2
    983e:	881b      	ldrh	r3, [r3, #0]
    9840:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    9844:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9848:	4a42      	ldr	r2, [pc, #264]	; (9954 <Adc_Ipw_StartNormalConversion+0x14c>)
    984a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    984e:	685a      	ldr	r2, [r3, #4]
    9850:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9854:	2134      	movs	r1, #52	; 0x34
    9856:	fb01 f303 	mul.w	r3, r1, r3
    985a:	4413      	add	r3, r2
    985c:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    985e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9862:	4a3c      	ldr	r2, [pc, #240]	; (9954 <Adc_Ipw_StartNormalConversion+0x14c>)
    9864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9868:	681a      	ldr	r2, [r3, #0]
    986a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    986e:	4413      	add	r3, r2
    9870:	7c1b      	ldrb	r3, [r3, #16]
    9872:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    9876:	f89d 300f 	ldrb.w	r3, [sp, #15]
    987a:	4a35      	ldr	r2, [pc, #212]	; (9950 <Adc_Ipw_StartNormalConversion+0x148>)
    987c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9880:	b29b      	uxth	r3, r3
    9882:	2b00      	cmp	r3, #0
    9884:	d05f      	beq.n	9946 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    9886:	f89d 200e 	ldrb.w	r2, [sp, #14]
    988a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    988e:	9905      	ldr	r1, [sp, #20]
    9890:	4618      	mov	r0, r3
    9892:	f7ff fdc9 	bl	9428 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9896:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    989a:	492f      	ldr	r1, [pc, #188]	; (9958 <Adc_Ipw_StartNormalConversion+0x150>)
    989c:	4613      	mov	r3, r2
    989e:	009b      	lsls	r3, r3, #2
    98a0:	4413      	add	r3, r2
    98a2:	009b      	lsls	r3, r3, #2
    98a4:	440b      	add	r3, r1
    98a6:	3310      	adds	r3, #16
    98a8:	2200      	movs	r2, #0
    98aa:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    98ac:	9b05      	ldr	r3, [sp, #20]
    98ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    98b2:	2b0f      	cmp	r3, #15
    98b4:	d806      	bhi.n	98c4 <Adc_Ipw_StartNormalConversion+0xbc>
    98b6:	9b05      	ldr	r3, [sp, #20]
    98b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    98bc:	f003 030f 	and.w	r3, r3, #15
    98c0:	b2db      	uxtb	r3, r3
    98c2:	e000      	b.n	98c6 <Adc_Ipw_StartNormalConversion+0xbe>
    98c4:	2310      	movs	r3, #16
    98c6:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    98ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98ce:	4a20      	ldr	r2, [pc, #128]	; (9950 <Adc_Ipw_StartNormalConversion+0x148>)
    98d0:	00db      	lsls	r3, r3, #3
    98d2:	4413      	add	r3, r2
    98d4:	799b      	ldrb	r3, [r3, #6]
    98d6:	2b00      	cmp	r3, #0
    98d8:	d107      	bne.n	98ea <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    98da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    98de:	4a1c      	ldr	r2, [pc, #112]	; (9950 <Adc_Ipw_StartNormalConversion+0x148>)
    98e0:	00db      	lsls	r3, r3, #3
    98e2:	4413      	add	r3, r2
    98e4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    98e8:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    98ea:	2300      	movs	r3, #0
    98ec:	f88d 301f 	strb.w	r3, [sp, #31]
    98f0:	e00c      	b.n	990c <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    98f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    98f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    98fa:	4611      	mov	r1, r2
    98fc:	4618      	mov	r0, r3
    98fe:	f7fe ff03 	bl	8708 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9902:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9906:	3301      	adds	r3, #1
    9908:	f88d 301f 	strb.w	r3, [sp, #31]
    990c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9910:	4a0f      	ldr	r2, [pc, #60]	; (9950 <Adc_Ipw_StartNormalConversion+0x148>)
    9912:	00db      	lsls	r3, r3, #3
    9914:	4413      	add	r3, r2
    9916:	799b      	ldrb	r3, [r3, #6]
    9918:	f89d 201f 	ldrb.w	r2, [sp, #31]
    991c:	429a      	cmp	r2, r3
    991e:	d3e8      	bcc.n	98f2 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    9920:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9924:	2101      	movs	r1, #1
    9926:	4618      	mov	r0, r3
    9928:	f7fe fd60 	bl	83ec <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    992c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    9930:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    9934:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9938:	f89d 300e 	ldrb.w	r3, [sp, #14]
    993c:	9300      	str	r3, [sp, #0]
    993e:	4613      	mov	r3, r2
    9940:	220f      	movs	r2, #15
    9942:	f7ff fdb1 	bl	94a8 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    9946:	bf00      	nop
    9948:	b009      	add	sp, #36	; 0x24
    994a:	f85d fb04 	ldr.w	pc, [sp], #4
    994e:	bf00      	nop
    9950:	1fff8d10 	.word	0x1fff8d10
    9954:	1fff8cf8 	.word	0x1fff8cf8
    9958:	1fff8cfc 	.word	0x1fff8cfc

0000995c <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    995c:	b500      	push	{lr}
    995e:	b085      	sub	sp, #20
    9960:	4603      	mov	r3, r0
    9962:	f88d 3007 	strb.w	r3, [sp, #7]
    9966:	460b      	mov	r3, r1
    9968:	f8ad 3004 	strh.w	r3, [sp, #4]
    996c:	4613      	mov	r3, r2
    996e:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9972:	2300      	movs	r3, #0
    9974:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9978:	f89d 3006 	ldrb.w	r3, [sp, #6]
    997c:	4a24      	ldr	r2, [pc, #144]	; (9a10 <Adc_Ipw_StopCurrentConversion+0xb4>)
    997e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9982:	681a      	ldr	r2, [r3, #0]
    9984:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9988:	4413      	add	r3, r2
    998a:	7c1b      	ldrb	r3, [r3, #16]
    998c:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    9990:	2300      	movs	r3, #0
    9992:	f88d 300f 	strb.w	r3, [sp, #15]
    9996:	e014      	b.n	99c2 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    9998:	f89d 300d 	ldrb.w	r3, [sp, #13]
    999c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    99a0:	2200      	movs	r2, #0
    99a2:	4618      	mov	r0, r3
    99a4:	f7fe fdec 	bl	8580 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    99a8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    99ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99b0:	4611      	mov	r1, r2
    99b2:	4618      	mov	r0, r3
    99b4:	f7fe fea8 	bl	8708 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    99b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99bc:	3301      	adds	r3, #1
    99be:	f88d 300f 	strb.w	r3, [sp, #15]
    99c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99c6:	4a13      	ldr	r2, [pc, #76]	; (9a14 <Adc_Ipw_StopCurrentConversion+0xb8>)
    99c8:	00db      	lsls	r3, r3, #3
    99ca:	4413      	add	r3, r2
    99cc:	799b      	ldrb	r3, [r3, #6]
    99ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    99d2:	429a      	cmp	r2, r3
    99d4:	d3e0      	bcc.n	9998 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    99d6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    99da:	490f      	ldr	r1, [pc, #60]	; (9a18 <Adc_Ipw_StopCurrentConversion+0xbc>)
    99dc:	4613      	mov	r3, r2
    99de:	009b      	lsls	r3, r3, #2
    99e0:	4413      	add	r3, r2
    99e2:	009b      	lsls	r3, r3, #2
    99e4:	440b      	add	r3, r1
    99e6:	3310      	adds	r3, #16
    99e8:	2200      	movs	r2, #0
    99ea:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    99ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
    99f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    99f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99f8:	4618      	mov	r0, r3
    99fa:	f7ff fc97 	bl	932c <Adc_Ipw_StopConversionCheckTimeout>
    99fe:	4603      	mov	r3, r0
    9a00:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    9a04:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9a08:	4618      	mov	r0, r3
    9a0a:	b005      	add	sp, #20
    9a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    9a10:	1fff8cf8 	.word	0x1fff8cf8
    9a14:	1fff8d10 	.word	0x1fff8d10
    9a18:	1fff8cfc 	.word	0x1fff8cfc

00009a1c <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    9a1c:	b500      	push	{lr}
    9a1e:	b085      	sub	sp, #20
    9a20:	4603      	mov	r3, r0
    9a22:	f88d 3007 	strb.w	r3, [sp, #7]
    9a26:	460b      	mov	r3, r1
    9a28:	f88d 3006 	strb.w	r3, [sp, #6]
    9a2c:	4613      	mov	r3, r2
    9a2e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    9a32:	2301      	movs	r3, #1
    9a34:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    9a38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a3c:	f88d 300f 	strb.w	r3, [sp, #15]
    9a40:	e019      	b.n	9a76 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    9a42:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9a46:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9a4e:	1ad3      	subs	r3, r2, r3
    9a50:	b2db      	uxtb	r3, r3
    9a52:	4619      	mov	r1, r3
    9a54:	f7fe fe3e 	bl	86d4 <Adc_Ip_GetConvCompleteFlag>
    9a58:	4603      	mov	r3, r0
    9a5a:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    9a5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a62:	f083 0301 	eor.w	r3, r3, #1
    9a66:	b2db      	uxtb	r3, r3
    9a68:	2b00      	cmp	r3, #0
    9a6a:	d10b      	bne.n	9a84 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    9a6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a70:	3301      	adds	r3, #1
    9a72:	f88d 300f 	strb.w	r3, [sp, #15]
    9a76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9a7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a7e:	429a      	cmp	r2, r3
    9a80:	d3df      	bcc.n	9a42 <Adc_Ipw_CheckValidConversion+0x26>
    9a82:	e000      	b.n	9a86 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    9a84:	bf00      	nop
        }
    }

    return ValidConversion;
    9a86:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9a8a:	4618      	mov	r0, r3
    9a8c:	b005      	add	sp, #20
    9a8e:	f85d fb04 	ldr.w	pc, [sp], #4

00009a92 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    9a92:	b500      	push	{lr}
    9a94:	b089      	sub	sp, #36	; 0x24
    9a96:	9102      	str	r1, [sp, #8]
    9a98:	9201      	str	r2, [sp, #4]
    9a9a:	461a      	mov	r2, r3
    9a9c:	4603      	mov	r3, r0
    9a9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9aa2:	4613      	mov	r3, r2
    9aa4:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    9aa8:	2300      	movs	r3, #0
    9aaa:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9aae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9ab2:	4a33      	ldr	r2, [pc, #204]	; (9b80 <Adc_Ipw_ReadGroup+0xee>)
    9ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab8:	68da      	ldr	r2, [r3, #12]
    9aba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9abe:	005b      	lsls	r3, r3, #1
    9ac0:	4413      	add	r3, r2
    9ac2:	881b      	ldrh	r3, [r3, #0]
    9ac4:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9ac8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9acc:	4a2c      	ldr	r2, [pc, #176]	; (9b80 <Adc_Ipw_ReadGroup+0xee>)
    9ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad2:	685a      	ldr	r2, [r3, #4]
    9ad4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    9ad8:	2134      	movs	r1, #52	; 0x34
    9ada:	fb01 f303 	mul.w	r3, r1, r3
    9ade:	4413      	add	r3, r2
    9ae0:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9ae2:	9b06      	ldr	r3, [sp, #24]
    9ae4:	789b      	ldrb	r3, [r3, #2]
    9ae6:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    9aea:	9b06      	ldr	r3, [sp, #24]
    9aec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9af0:	2b01      	cmp	r3, #1
    9af2:	d124      	bne.n	9b3e <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    9af4:	9b06      	ldr	r3, [sp, #24]
    9af6:	68db      	ldr	r3, [r3, #12]
    9af8:	2b00      	cmp	r3, #0
    9afa:	d111      	bne.n	9b20 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    9afc:	9b06      	ldr	r3, [sp, #24]
    9afe:	695b      	ldr	r3, [r3, #20]
    9b00:	2b00      	cmp	r3, #0
    9b02:	d10d      	bne.n	9b20 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    9b04:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b08:	4a1e      	ldr	r2, [pc, #120]	; (9b84 <Adc_Ipw_ReadGroup+0xf2>)
    9b0a:	00db      	lsls	r3, r3, #3
    9b0c:	4413      	add	r3, r2
    9b0e:	885b      	ldrh	r3, [r3, #2]
    9b10:	b29b      	uxth	r3, r3
    9b12:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9b16:	429a      	cmp	r2, r3
    9b18:	d002      	beq.n	9b20 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9b1a:	2301      	movs	r3, #1
    9b1c:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9b20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d124      	bne.n	9b72 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    9b28:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b2c:	9a01      	ldr	r2, [sp, #4]
    9b2e:	9902      	ldr	r1, [sp, #8]
    9b30:	9806      	ldr	r0, [sp, #24]
    9b32:	f7ff f91f 	bl	8d74 <Adc_Ipw_ReadGroupNoInt>
    9b36:	4603      	mov	r3, r0
    9b38:	f88d 301f 	strb.w	r3, [sp, #31]
    9b3c:	e019      	b.n	9b72 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9b3e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9b42:	4911      	ldr	r1, [pc, #68]	; (9b88 <Adc_Ipw_ReadGroup+0xf6>)
    9b44:	4613      	mov	r3, r2
    9b46:	009b      	lsls	r3, r3, #2
    9b48:	4413      	add	r3, r2
    9b4a:	009b      	lsls	r3, r3, #2
    9b4c:	440b      	add	r3, r1
    9b4e:	681b      	ldr	r3, [r3, #0]
    9b50:	2b01      	cmp	r3, #1
    9b52:	d102      	bne.n	9b5a <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9b54:	2301      	movs	r3, #1
    9b56:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    9b5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9b5e:	2b00      	cmp	r3, #0
    9b60:	d107      	bne.n	9b72 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    9b62:	f89d 200d 	ldrb.w	r2, [sp, #13]
    9b66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b6a:	9902      	ldr	r1, [sp, #8]
    9b6c:	4618      	mov	r0, r3
    9b6e:	f7ff f949 	bl	8e04 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    9b72:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    9b76:	4618      	mov	r0, r3
    9b78:	b009      	add	sp, #36	; 0x24
    9b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    9b7e:	bf00      	nop
    9b80:	1fff8cf8 	.word	0x1fff8cf8
    9b84:	1fff8d10 	.word	0x1fff8d10
    9b88:	1fff8cfc 	.word	0x1fff8cfc

00009b8c <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    9b8c:	b500      	push	{lr}
    9b8e:	b085      	sub	sp, #20
    9b90:	4603      	mov	r3, r0
    9b92:	9100      	str	r1, [sp, #0]
    9b94:	f88d 3007 	strb.w	r3, [sp, #7]
    9b98:	4613      	mov	r3, r2
    9b9a:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9b9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ba2:	4a0e      	ldr	r2, [pc, #56]	; (9bdc <Adc_Ipw_Calibrate+0x50>)
    9ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba8:	681a      	ldr	r2, [r3, #0]
    9baa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bae:	4413      	add	r3, r2
    9bb0:	7c1b      	ldrb	r3, [r3, #16]
    9bb2:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    9bb6:	9b00      	ldr	r3, [sp, #0]
    9bb8:	2200      	movs	r2, #0
    9bba:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    9bbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bc0:	4618      	mov	r0, r3
    9bc2:	f7fe fdb9 	bl	8738 <Adc_Ip_DoCalibration>
    9bc6:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    9bc8:	9b02      	ldr	r3, [sp, #8]
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d002      	beq.n	9bd4 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    9bce:	9b00      	ldr	r3, [sp, #0]
    9bd0:	2201      	movs	r2, #1
    9bd2:	701a      	strb	r2, [r3, #0]
    }
}
    9bd4:	bf00      	nop
    9bd6:	b005      	add	sp, #20
    9bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    9bdc:	1fff8cf8 	.word	0x1fff8cf8

00009be0 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    9be0:	2300      	movs	r3, #0
}
    9be2:	4618      	mov	r0, r3
    9be4:	4770      	bx	lr
    9be6:	bf00      	nop

00009be8 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    9be8:	b500      	push	{lr}
    9bea:	b083      	sub	sp, #12
    9bec:	4603      	mov	r3, r0
    9bee:	460a      	mov	r2, r1
    9bf0:	f88d 3007 	strb.w	r3, [sp, #7]
    9bf4:	4613      	mov	r3, r2
    9bf6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    9bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bfe:	2100      	movs	r1, #0
    9c00:	4618      	mov	r0, r3
    9c02:	f7fe fff3 	bl	8bec <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c0a:	4a09      	ldr	r2, [pc, #36]	; (9c30 <Adc_Ipw_UpdateQueue+0x48>)
    9c0c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c10:	b29b      	uxth	r3, r3
    9c12:	2b00      	cmp	r3, #0
    9c14:	d007      	beq.n	9c26 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9c16:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9c1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c1e:	4611      	mov	r1, r2
    9c20:	4618      	mov	r0, r3
    9c22:	f7ff fdf1 	bl	9808 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    9c26:	bf00      	nop
    9c28:	b003      	add	sp, #12
    9c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c2e:	bf00      	nop
    9c30:	1fff8d10 	.word	0x1fff8d10

00009c34 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    9c34:	b510      	push	{r4, lr}
    9c36:	b08a      	sub	sp, #40	; 0x28
    9c38:	4604      	mov	r4, r0
    9c3a:	4608      	mov	r0, r1
    9c3c:	4611      	mov	r1, r2
    9c3e:	461a      	mov	r2, r3
    9c40:	4623      	mov	r3, r4
    9c42:	f88d 300f 	strb.w	r3, [sp, #15]
    9c46:	4603      	mov	r3, r0
    9c48:	f8ad 300c 	strh.w	r3, [sp, #12]
    9c4c:	460b      	mov	r3, r1
    9c4e:	f8ad 300a 	strh.w	r3, [sp, #10]
    9c52:	4613      	mov	r3, r2
    9c54:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9c58:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c5c:	4a68      	ldr	r2, [pc, #416]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c62:	68da      	ldr	r2, [r3, #12]
    9c64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c68:	005b      	lsls	r3, r3, #1
    9c6a:	4413      	add	r3, r2
    9c6c:	881b      	ldrh	r3, [r3, #0]
    9c6e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    9c72:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9c76:	4963      	ldr	r1, [pc, #396]	; (9e04 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9c78:	4613      	mov	r3, r2
    9c7a:	009b      	lsls	r3, r3, #2
    9c7c:	4413      	add	r3, r2
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	440b      	add	r3, r1
    9c82:	3310      	adds	r3, #16
    9c84:	781b      	ldrb	r3, [r3, #0]
    9c86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    9c8a:	2300      	movs	r3, #0
    9c8c:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9c8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9c92:	4a5b      	ldr	r2, [pc, #364]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c98:	681a      	ldr	r2, [r3, #0]
    9c9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c9e:	4413      	add	r3, r2
    9ca0:	7c1b      	ldrb	r3, [r3, #16]
    9ca2:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    9ca6:	2300      	movs	r3, #0
    9ca8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    9cac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cb0:	4a53      	ldr	r2, [pc, #332]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb6:	681b      	ldr	r3, [r3, #0]
    9cb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9cc0:	695b      	ldr	r3, [r3, #20]
    9cc2:	4618      	mov	r0, r3
    9cc4:	f7ff fbe6 	bl	9494 <Adc_Ipw_CalculateNumsBitShift>
    9cc8:	4603      	mov	r3, r0
    9cca:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9cce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cd2:	4a4b      	ldr	r2, [pc, #300]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd8:	685a      	ldr	r2, [r3, #4]
    9cda:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cde:	2134      	movs	r1, #52	; 0x34
    9ce0:	fb01 f303 	mul.w	r3, r1, r3
    9ce4:	4413      	add	r3, r2
    9ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9cea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9cee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9cf2:	4a43      	ldr	r2, [pc, #268]	; (9e00 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    9cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf8:	685a      	ldr	r2, [r3, #4]
    9cfa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9cfe:	2134      	movs	r1, #52	; 0x34
    9d00:	fb01 f303 	mul.w	r3, r1, r3
    9d04:	4413      	add	r3, r2
    9d06:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    9d08:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9d0c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9d10:	429a      	cmp	r2, r3
    9d12:	d870      	bhi.n	9df6 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    9d14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d18:	f003 030f 	and.w	r3, r3, #15
    9d1c:	b2db      	uxtb	r3, r3
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d104      	bne.n	9d2c <Adc_Ipw_CheckConversionChannels+0xf8>
    9d22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d26:	3b10      	subs	r3, #16
    9d28:	b2db      	uxtb	r3, r3
    9d2a:	e004      	b.n	9d36 <Adc_Ipw_CheckConversionChannels+0x102>
    9d2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9d30:	f023 030f 	bic.w	r3, r3, #15
    9d34:	b2db      	uxtb	r3, r3
    9d36:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    9d3a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d3e:	4931      	ldr	r1, [pc, #196]	; (9e04 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d40:	4613      	mov	r3, r2
    9d42:	009b      	lsls	r3, r3, #2
    9d44:	4413      	add	r3, r2
    9d46:	009b      	lsls	r3, r3, #2
    9d48:	440b      	add	r3, r1
    9d4a:	330c      	adds	r3, #12
    9d4c:	6819      	ldr	r1, [r3, #0]
    9d4e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9d52:	482c      	ldr	r0, [pc, #176]	; (9e04 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    9d54:	4613      	mov	r3, r2
    9d56:	009b      	lsls	r3, r3, #2
    9d58:	4413      	add	r3, r2
    9d5a:	009b      	lsls	r3, r3, #2
    9d5c:	4403      	add	r3, r0
    9d5e:	3308      	adds	r3, #8
    9d60:	881b      	ldrh	r3, [r3, #0]
    9d62:	b29b      	uxth	r3, r3
    9d64:	005b      	lsls	r3, r3, #1
    9d66:	440b      	add	r3, r1
    9d68:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    9d6a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    9d6e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    9d72:	f89d 301b 	ldrb.w	r3, [sp, #27]
    9d76:	4618      	mov	r0, r3
    9d78:	f7ff fe50 	bl	9a1c <Adc_Ipw_CheckValidConversion>
    9d7c:	4603      	mov	r3, r0
    9d7e:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    9d82:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d86:	2b00      	cmp	r3, #0
    9d88:	d032      	beq.n	9df0 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    9d8a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d8e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9d92:	e026      	b.n	9de2 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    9d94:	f89d 001b 	ldrb.w	r0, [sp, #27]
    9d98:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9d9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9da0:	1ad3      	subs	r3, r2, r3
    9da2:	b2db      	uxtb	r3, r3
    9da4:	4619      	mov	r1, r3
    9da6:	f7fe fcaf 	bl	8708 <Adc_Ip_GetConvData>
    9daa:	4603      	mov	r3, r0
    9dac:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    9db0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9db4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9db8:	fa02 f303 	lsl.w	r3, r2, r3
    9dbc:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    9dc0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    9dc4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    9dc8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    9dcc:	9300      	str	r3, [sp, #0]
    9dce:	460b      	mov	r3, r1
    9dd0:	9907      	ldr	r1, [sp, #28]
    9dd2:	9805      	ldr	r0, [sp, #20]
    9dd4:	f000 fa02 	bl	a1dc <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    9dd8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9ddc:	3301      	adds	r3, #1
    9dde:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9de2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    9de6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9dea:	429a      	cmp	r2, r3
    9dec:	d3d2      	bcc.n	9d94 <Adc_Ipw_CheckConversionChannels+0x160>
    9dee:	e002      	b.n	9df6 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    9df0:	2301      	movs	r3, #1
    9df2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    9df6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    9dfa:	4618      	mov	r0, r3
    9dfc:	b00a      	add	sp, #40	; 0x28
    9dfe:	bd10      	pop	{r4, pc}
    9e00:	1fff8cf8 	.word	0x1fff8cf8
    9e04:	1fff8cfc 	.word	0x1fff8cfc

00009e08 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    9e08:	b500      	push	{lr}
    9e0a:	b087      	sub	sp, #28
    9e0c:	4603      	mov	r3, r0
    9e0e:	f88d 300f 	strb.w	r3, [sp, #15]
    9e12:	460b      	mov	r3, r1
    9e14:	f8ad 300c 	strh.w	r3, [sp, #12]
    9e18:	4613      	mov	r3, r2
    9e1a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9e1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e22:	4a33      	ldr	r2, [pc, #204]	; (9ef0 <Adc_Ipw_RestartConversion+0xe8>)
    9e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e28:	68da      	ldr	r2, [r3, #12]
    9e2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9e2e:	005b      	lsls	r3, r3, #1
    9e30:	4413      	add	r3, r2
    9e32:	881b      	ldrh	r3, [r3, #0]
    9e34:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9e38:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e3c:	4a2c      	ldr	r2, [pc, #176]	; (9ef0 <Adc_Ipw_RestartConversion+0xe8>)
    9e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e42:	681a      	ldr	r2, [r3, #0]
    9e44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e48:	4413      	add	r3, r2
    9e4a:	7c1b      	ldrb	r3, [r3, #16]
    9e4c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    9e50:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e54:	4a26      	ldr	r2, [pc, #152]	; (9ef0 <Adc_Ipw_RestartConversion+0xe8>)
    9e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e5a:	685a      	ldr	r2, [r3, #4]
    9e5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9e60:	2134      	movs	r1, #52	; 0x34
    9e62:	fb01 f303 	mul.w	r3, r1, r3
    9e66:	4413      	add	r3, r2
    9e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e6c:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    9e70:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e74:	2b0f      	cmp	r3, #15
    9e76:	d805      	bhi.n	9e84 <Adc_Ipw_RestartConversion+0x7c>
    9e78:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e7c:	f003 030f 	and.w	r3, r3, #15
    9e80:	b2db      	uxtb	r3, r3
    9e82:	e000      	b.n	9e86 <Adc_Ipw_RestartConversion+0x7e>
    9e84:	2310      	movs	r3, #16
    9e86:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    9e8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9e8e:	2b10      	cmp	r3, #16
    9e90:	d811      	bhi.n	9eb6 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    9e92:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9e96:	4917      	ldr	r1, [pc, #92]	; (9ef4 <Adc_Ipw_RestartConversion+0xec>)
    9e98:	4613      	mov	r3, r2
    9e9a:	009b      	lsls	r3, r3, #2
    9e9c:	4413      	add	r3, r2
    9e9e:	009b      	lsls	r3, r3, #2
    9ea0:	440b      	add	r3, r1
    9ea2:	3310      	adds	r3, #16
    9ea4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    9ea8:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    9eaa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9eae:	4618      	mov	r0, r3
    9eb0:	f000 fc58 	bl	a764 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    9eb4:	e017      	b.n	9ee6 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    9eb6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9eba:	490e      	ldr	r1, [pc, #56]	; (9ef4 <Adc_Ipw_RestartConversion+0xec>)
    9ebc:	4613      	mov	r3, r2
    9ebe:	009b      	lsls	r3, r3, #2
    9ec0:	4413      	add	r3, r2
    9ec2:	009b      	lsls	r3, r3, #2
    9ec4:	440b      	add	r3, r1
    9ec6:	3310      	adds	r3, #16
    9ec8:	2200      	movs	r2, #0
    9eca:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    9ecc:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9ed0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9ed4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9ed8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9edc:	9300      	str	r3, [sp, #0]
    9ede:	4613      	mov	r3, r2
    9ee0:	220f      	movs	r2, #15
    9ee2:	f7ff fae1 	bl	94a8 <Adc_Ipw_ConfigureConversion>
}
    9ee6:	bf00      	nop
    9ee8:	b007      	add	sp, #28
    9eea:	f85d fb04 	ldr.w	pc, [sp], #4
    9eee:	bf00      	nop
    9ef0:	1fff8cf8 	.word	0x1fff8cf8
    9ef4:	1fff8cfc 	.word	0x1fff8cfc

00009ef8 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    9ef8:	b084      	sub	sp, #16
    9efa:	4603      	mov	r3, r0
    9efc:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    9f00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9f04:	4907      	ldr	r1, [pc, #28]	; (9f24 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    9f06:	4613      	mov	r3, r2
    9f08:	009b      	lsls	r3, r3, #2
    9f0a:	4413      	add	r3, r2
    9f0c:	009b      	lsls	r3, r3, #2
    9f0e:	440b      	add	r3, r1
    9f10:	3308      	adds	r3, #8
    9f12:	881b      	ldrh	r3, [r3, #0]
    9f14:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    9f18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    9f1c:	4618      	mov	r0, r3
    9f1e:	b004      	add	sp, #16
    9f20:	4770      	bx	lr
    9f22:	bf00      	nop
    9f24:	1fff8cfc 	.word	0x1fff8cfc

00009f28 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    9f28:	b510      	push	{r4, lr}
    9f2a:	b084      	sub	sp, #16
    9f2c:	4604      	mov	r4, r0
    9f2e:	4608      	mov	r0, r1
    9f30:	4611      	mov	r1, r2
    9f32:	461a      	mov	r2, r3
    9f34:	4623      	mov	r3, r4
    9f36:	f88d 3007 	strb.w	r3, [sp, #7]
    9f3a:	4603      	mov	r3, r0
    9f3c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9f40:	460b      	mov	r3, r1
    9f42:	f8ad 3002 	strh.w	r3, [sp, #2]
    9f46:	4613      	mov	r3, r2
    9f48:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9f4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f50:	4a4f      	ldr	r2, [pc, #316]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f56:	68da      	ldr	r2, [r3, #12]
    9f58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9f5c:	005b      	lsls	r3, r3, #1
    9f5e:	4413      	add	r3, r2
    9f60:	881b      	ldrh	r3, [r3, #0]
    9f62:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9f66:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f6a:	494a      	ldr	r1, [pc, #296]	; (a094 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f6c:	4613      	mov	r3, r2
    9f6e:	009b      	lsls	r3, r3, #2
    9f70:	4413      	add	r3, r2
    9f72:	009b      	lsls	r3, r3, #2
    9f74:	440b      	add	r3, r1
    9f76:	3304      	adds	r3, #4
    9f78:	2201      	movs	r2, #1
    9f7a:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    9f7c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f80:	4944      	ldr	r1, [pc, #272]	; (a094 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f82:	4613      	mov	r3, r2
    9f84:	009b      	lsls	r3, r3, #2
    9f86:	4413      	add	r3, r2
    9f88:	009b      	lsls	r3, r3, #2
    9f8a:	440b      	add	r3, r1
    9f8c:	681b      	ldr	r3, [r3, #0]
    9f8e:	2b01      	cmp	r3, #1
    9f90:	d109      	bne.n	9fa6 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    9f92:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f96:	493f      	ldr	r1, [pc, #252]	; (a094 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9f98:	4613      	mov	r3, r2
    9f9a:	009b      	lsls	r3, r3, #2
    9f9c:	4413      	add	r3, r2
    9f9e:	009b      	lsls	r3, r3, #2
    9fa0:	440b      	add	r3, r1
    9fa2:	2202      	movs	r2, #2
    9fa4:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    9fa6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9faa:	4618      	mov	r0, r3
    9fac:	f7ff ffa4 	bl	9ef8 <Adc_Ipw_GetCurrentSampleCount>
    9fb0:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    9fb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    9fb6:	9a02      	ldr	r2, [sp, #8]
    9fb8:	429a      	cmp	r2, r3
    9fba:	d35d      	bcc.n	a078 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    9fbc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9fc0:	4934      	ldr	r1, [pc, #208]	; (a094 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    9fc2:	4613      	mov	r3, r2
    9fc4:	009b      	lsls	r3, r3, #2
    9fc6:	4413      	add	r3, r2
    9fc8:	009b      	lsls	r3, r3, #2
    9fca:	440b      	add	r3, r1
    9fcc:	2203      	movs	r2, #3
    9fce:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    9fd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fd4:	4a2e      	ldr	r2, [pc, #184]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fda:	685a      	ldr	r2, [r3, #4]
    9fdc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9fe0:	2134      	movs	r1, #52	; 0x34
    9fe2:	fb01 f303 	mul.w	r3, r1, r3
    9fe6:	4413      	add	r3, r2
    9fe8:	699b      	ldr	r3, [r3, #24]
    9fea:	2b00      	cmp	r3, #0
    9fec:	d117      	bne.n	a01e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    9fee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ff2:	4a27      	ldr	r2, [pc, #156]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    9ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ff8:	685a      	ldr	r2, [r3, #4]
    9ffa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ffe:	2134      	movs	r1, #52	; 0x34
    a000:	fb01 f303 	mul.w	r3, r1, r3
    a004:	4413      	add	r3, r2
    a006:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    a008:	2b01      	cmp	r3, #1
    a00a:	d108      	bne.n	a01e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    a00c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a010:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a014:	4611      	mov	r1, r2
    a016:	4618      	mov	r0, r3
    a018:	f7ff fde6 	bl	9be8 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    a01c:	e035      	b.n	a08a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    a01e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a022:	4a1b      	ldr	r2, [pc, #108]	; (a090 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    a024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a028:	685a      	ldr	r2, [r3, #4]
    a02a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a02e:	2134      	movs	r1, #52	; 0x34
    a030:	fb01 f303 	mul.w	r3, r1, r3
    a034:	4413      	add	r3, r2
    a036:	689b      	ldr	r3, [r3, #8]
    a038:	2b01      	cmp	r3, #1
    a03a:	d114      	bne.n	a066 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    a03c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a040:	4914      	ldr	r1, [pc, #80]	; (a094 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    a042:	4613      	mov	r3, r2
    a044:	009b      	lsls	r3, r3, #2
    a046:	4413      	add	r3, r2
    a048:	009b      	lsls	r3, r3, #2
    a04a:	440b      	add	r3, r1
    a04c:	3308      	adds	r3, #8
    a04e:	2200      	movs	r2, #0
    a050:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a052:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a056:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a05a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a05e:	4618      	mov	r0, r3
    a060:	f7ff fed2 	bl	9e08 <Adc_Ipw_RestartConversion>
}
    a064:	e011      	b.n	a08a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    a066:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a06a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a06e:	4611      	mov	r1, r2
    a070:	4618      	mov	r0, r3
    a072:	f7ff fdb9 	bl	9be8 <Adc_Ipw_UpdateQueue>
}
    a076:	e008      	b.n	a08a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    a078:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a07c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a080:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a084:	4618      	mov	r0, r3
    a086:	f7ff febf 	bl	9e08 <Adc_Ipw_RestartConversion>
}
    a08a:	bf00      	nop
    a08c:	b004      	add	sp, #16
    a08e:	bd10      	pop	{r4, pc}
    a090:	1fff8cf8 	.word	0x1fff8cf8
    a094:	1fff8cfc 	.word	0x1fff8cfc

0000a098 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    a098:	b510      	push	{r4, lr}
    a09a:	b088      	sub	sp, #32
    a09c:	4604      	mov	r4, r0
    a09e:	4608      	mov	r0, r1
    a0a0:	4611      	mov	r1, r2
    a0a2:	461a      	mov	r2, r3
    a0a4:	4623      	mov	r3, r4
    a0a6:	f88d 300f 	strb.w	r3, [sp, #15]
    a0aa:	4603      	mov	r3, r0
    a0ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    a0b0:	460b      	mov	r3, r1
    a0b2:	f88d 300e 	strb.w	r3, [sp, #14]
    a0b6:	4613      	mov	r3, r2
    a0b8:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a0bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0c0:	4a44      	ldr	r2, [pc, #272]	; (a1d4 <Adc_Ipw_EndConversion+0x13c>)
    a0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0c6:	68da      	ldr	r2, [r3, #12]
    a0c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a0cc:	005b      	lsls	r3, r3, #1
    a0ce:	4413      	add	r3, r2
    a0d0:	881b      	ldrh	r3, [r3, #0]
    a0d2:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a0d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0da:	4a3e      	ldr	r2, [pc, #248]	; (a1d4 <Adc_Ipw_EndConversion+0x13c>)
    a0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0e0:	685a      	ldr	r2, [r3, #4]
    a0e2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    a0e6:	2134      	movs	r1, #52	; 0x34
    a0e8:	fb01 f303 	mul.w	r3, r1, r3
    a0ec:	4413      	add	r3, r2
    a0ee:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    a0f0:	9b06      	ldr	r3, [sp, #24]
    a0f2:	8b9a      	ldrh	r2, [r3, #28]
    a0f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a0fc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a100:	f7ff fd98 	bl	9c34 <Adc_Ipw_CheckConversionChannels>
    a104:	4603      	mov	r3, r0
    a106:	2b00      	cmp	r3, #0
    a108:	d160      	bne.n	a1cc <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    a10a:	9b06      	ldr	r3, [sp, #24]
    a10c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a110:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    a114:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a118:	492f      	ldr	r1, [pc, #188]	; (a1d8 <Adc_Ipw_EndConversion+0x140>)
    a11a:	4613      	mov	r3, r2
    a11c:	009b      	lsls	r3, r3, #2
    a11e:	4413      	add	r3, r2
    a120:	009b      	lsls	r3, r3, #2
    a122:	440b      	add	r3, r1
    a124:	3310      	adds	r3, #16
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a12c:	429a      	cmp	r2, r3
    a12e:	d929      	bls.n	a184 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    a130:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a134:	4928      	ldr	r1, [pc, #160]	; (a1d8 <Adc_Ipw_EndConversion+0x140>)
    a136:	4613      	mov	r3, r2
    a138:	009b      	lsls	r3, r3, #2
    a13a:	4413      	add	r3, r2
    a13c:	009b      	lsls	r3, r3, #2
    a13e:	440b      	add	r3, r1
    a140:	3310      	adds	r3, #16
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a148:	1ad3      	subs	r3, r2, r3
    a14a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    a14e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a152:	2b0f      	cmp	r3, #15
    a154:	d805      	bhi.n	a162 <Adc_Ipw_EndConversion+0xca>
    a156:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a15a:	f003 030f 	and.w	r3, r3, #15
    a15e:	b2db      	uxtb	r3, r3
    a160:	e000      	b.n	a164 <Adc_Ipw_EndConversion+0xcc>
    a162:	2310      	movs	r3, #16
    a164:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    a168:	f89d 2015 	ldrb.w	r2, [sp, #21]
    a16c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a170:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a174:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a178:	9300      	str	r3, [sp, #0]
    a17a:	4613      	mov	r3, r2
    a17c:	220f      	movs	r2, #15
    a17e:	f7ff f993 	bl	94a8 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    a182:	e023      	b.n	a1cc <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    a184:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a188:	4913      	ldr	r1, [pc, #76]	; (a1d8 <Adc_Ipw_EndConversion+0x140>)
    a18a:	4613      	mov	r3, r2
    a18c:	009b      	lsls	r3, r3, #2
    a18e:	4413      	add	r3, r2
    a190:	009b      	lsls	r3, r3, #2
    a192:	440b      	add	r3, r1
    a194:	3308      	adds	r3, #8
    a196:	881b      	ldrh	r3, [r3, #0]
    a198:	b29b      	uxth	r3, r3
    a19a:	3301      	adds	r3, #1
    a19c:	b298      	uxth	r0, r3
    a19e:	490e      	ldr	r1, [pc, #56]	; (a1d8 <Adc_Ipw_EndConversion+0x140>)
    a1a0:	4613      	mov	r3, r2
    a1a2:	009b      	lsls	r3, r3, #2
    a1a4:	4413      	add	r3, r2
    a1a6:	009b      	lsls	r3, r3, #2
    a1a8:	440b      	add	r3, r1
    a1aa:	3308      	adds	r3, #8
    a1ac:	4602      	mov	r2, r0
    a1ae:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    a1b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1b4:	2b00      	cmp	r3, #0
    a1b6:	d009      	beq.n	a1cc <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    a1b8:	9b06      	ldr	r3, [sp, #24]
    a1ba:	8b9a      	ldrh	r2, [r3, #28]
    a1bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a1c4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a1c8:	f7ff feae 	bl	9f28 <Adc_Ipw_UpdateSoftwareGroupState>
}
    a1cc:	bf00      	nop
    a1ce:	b008      	add	sp, #32
    a1d0:	bd10      	pop	{r4, pc}
    a1d2:	bf00      	nop
    a1d4:	1fff8cf8 	.word	0x1fff8cf8
    a1d8:	1fff8cfc 	.word	0x1fff8cfc

0000a1dc <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    a1dc:	b084      	sub	sp, #16
    a1de:	9003      	str	r0, [sp, #12]
    a1e0:	9102      	str	r1, [sp, #8]
    a1e2:	4611      	mov	r1, r2
    a1e4:	461a      	mov	r2, r3
    a1e6:	460b      	mov	r3, r1
    a1e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    a1ec:	4613      	mov	r3, r2
    a1ee:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    a1f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a1f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a1fa:	fb02 f303 	mul.w	r3, r2, r3
    a1fe:	005b      	lsls	r3, r3, #1
    a200:	9a02      	ldr	r2, [sp, #8]
    a202:	4413      	add	r3, r2
    a204:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a208:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    a20a:	bf00      	nop
    a20c:	b004      	add	sp, #16
    a20e:	4770      	bx	lr

0000a210 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    a210:	b500      	push	{lr}
    a212:	b085      	sub	sp, #20
    a214:	4603      	mov	r3, r0
    a216:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    a21a:	f7ff fce1 	bl	9be0 <Adc_GetCoreID>
    a21e:	4603      	mov	r3, r0
    a220:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    a224:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a228:	b2db      	uxtb	r3, r3
    a22a:	461a      	mov	r2, r3
    a22c:	4b14      	ldr	r3, [pc, #80]	; (a280 <Adc_Ipw_EndConversionNotification+0x70>)
    a22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a232:	681a      	ldr	r2, [r3, #0]
    a234:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a238:	4413      	add	r3, r2
    a23a:	f893 3020 	ldrb.w	r3, [r3, #32]
    a23e:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    a242:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a246:	4a0f      	ldr	r2, [pc, #60]	; (a284 <Adc_Ipw_EndConversionNotification+0x74>)
    a248:	00db      	lsls	r3, r3, #3
    a24a:	4413      	add	r3, r2
    a24c:	885b      	ldrh	r3, [r3, #2]
    a24e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    a252:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a256:	4a0b      	ldr	r2, [pc, #44]	; (a284 <Adc_Ipw_EndConversionNotification+0x74>)
    a258:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a25c:	b29b      	uxth	r3, r3
    a25e:	2b00      	cmp	r3, #0
    a260:	d009      	beq.n	a276 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    a262:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a266:	b2db      	uxtb	r3, r3
    a268:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a26c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a270:	2201      	movs	r2, #1
    a272:	f7ff ff11 	bl	a098 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    a276:	bf00      	nop
    a278:	b005      	add	sp, #20
    a27a:	f85d fb04 	ldr.w	pc, [sp], #4
    a27e:	bf00      	nop
    a280:	1fff8cf8 	.word	0x1fff8cf8
    a284:	1fff8d10 	.word	0x1fff8d10

0000a288 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    a288:	b500      	push	{lr}
    a28a:	b085      	sub	sp, #20
    a28c:	4603      	mov	r3, r0
    a28e:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    a292:	2300      	movs	r3, #0
    a294:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    a298:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a29c:	4618      	mov	r0, r3
    a29e:	f7ff ffb7 	bl	a210 <Adc_Ipw_EndConversionNotification>
}
    a2a2:	bf00      	nop
    a2a4:	b005      	add	sp, #20
    a2a6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2aa:	bf00      	nop

0000a2ac <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    a2ac:	b084      	sub	sp, #16
    a2ae:	9003      	str	r0, [sp, #12]
    a2b0:	9201      	str	r2, [sp, #4]
    a2b2:	461a      	mov	r2, r3
    a2b4:	460b      	mov	r3, r1
    a2b6:	f88d 300b 	strb.w	r3, [sp, #11]
    a2ba:	4613      	mov	r3, r2
    a2bc:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    a2c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d016      	beq.n	a2f6 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    a2c8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2cc:	9903      	ldr	r1, [sp, #12]
    a2ce:	4613      	mov	r3, r2
    a2d0:	009b      	lsls	r3, r3, #2
    a2d2:	4413      	add	r3, r2
    a2d4:	00db      	lsls	r3, r3, #3
    a2d6:	440b      	add	r3, r1
    a2d8:	3310      	adds	r3, #16
    a2da:	6819      	ldr	r1, [r3, #0]
    a2dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2e0:	9b01      	ldr	r3, [sp, #4]
    a2e2:	4319      	orrs	r1, r3
    a2e4:	9803      	ldr	r0, [sp, #12]
    a2e6:	4613      	mov	r3, r2
    a2e8:	009b      	lsls	r3, r3, #2
    a2ea:	4413      	add	r3, r2
    a2ec:	00db      	lsls	r3, r3, #3
    a2ee:	4403      	add	r3, r0
    a2f0:	3310      	adds	r3, #16
    a2f2:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    a2f4:	e016      	b.n	a324 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    a2f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a2fa:	9903      	ldr	r1, [sp, #12]
    a2fc:	4613      	mov	r3, r2
    a2fe:	009b      	lsls	r3, r3, #2
    a300:	4413      	add	r3, r2
    a302:	00db      	lsls	r3, r3, #3
    a304:	440b      	add	r3, r1
    a306:	3310      	adds	r3, #16
    a308:	6819      	ldr	r1, [r3, #0]
    a30a:	9b01      	ldr	r3, [sp, #4]
    a30c:	43db      	mvns	r3, r3
    a30e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a312:	4019      	ands	r1, r3
    a314:	9803      	ldr	r0, [sp, #12]
    a316:	4613      	mov	r3, r2
    a318:	009b      	lsls	r3, r3, #2
    a31a:	4413      	add	r3, r2
    a31c:	00db      	lsls	r3, r3, #3
    a31e:	4403      	add	r3, r0
    a320:	3310      	adds	r3, #16
    a322:	6019      	str	r1, [r3, #0]
}
    a324:	bf00      	nop
    a326:	b004      	add	sp, #16
    a328:	4770      	bx	lr

0000a32a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    a32a:	b082      	sub	sp, #8
    a32c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    a32e:	9b01      	ldr	r3, [sp, #4]
    a330:	681b      	ldr	r3, [r3, #0]
    a332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    a336:	9b01      	ldr	r3, [sp, #4]
    a338:	601a      	str	r2, [r3, #0]
}
    a33a:	bf00      	nop
    a33c:	b002      	add	sp, #8
    a33e:	4770      	bx	lr

0000a340 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    a340:	b082      	sub	sp, #8
    a342:	9001      	str	r0, [sp, #4]
    a344:	460b      	mov	r3, r1
    a346:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    a34a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a34e:	2b00      	cmp	r3, #0
    a350:	d006      	beq.n	a360 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    a352:	9b01      	ldr	r3, [sp, #4]
    a354:	681b      	ldr	r3, [r3, #0]
    a356:	f043 0202 	orr.w	r2, r3, #2
    a35a:	9b01      	ldr	r3, [sp, #4]
    a35c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    a35e:	e005      	b.n	a36c <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    a360:	9b01      	ldr	r3, [sp, #4]
    a362:	681b      	ldr	r3, [r3, #0]
    a364:	f023 0202 	bic.w	r2, r3, #2
    a368:	9b01      	ldr	r3, [sp, #4]
    a36a:	601a      	str	r2, [r3, #0]
}
    a36c:	bf00      	nop
    a36e:	b002      	add	sp, #8
    a370:	4770      	bx	lr

0000a372 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a372:	b086      	sub	sp, #24
    a374:	9003      	str	r0, [sp, #12]
    a376:	460b      	mov	r3, r1
    a378:	9201      	str	r2, [sp, #4]
    a37a:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    a37e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a382:	9903      	ldr	r1, [sp, #12]
    a384:	4613      	mov	r3, r2
    a386:	009b      	lsls	r3, r3, #2
    a388:	4413      	add	r3, r2
    a38a:	00db      	lsls	r3, r3, #3
    a38c:	440b      	add	r3, r1
    a38e:	3310      	adds	r3, #16
    a390:	681b      	ldr	r3, [r3, #0]
    a392:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    a394:	9b05      	ldr	r3, [sp, #20]
    a396:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    a39a:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    a39c:	9b01      	ldr	r3, [sp, #4]
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	461a      	mov	r2, r3
    a3a2:	9b05      	ldr	r3, [sp, #20]
    a3a4:	4313      	orrs	r3, r2
    a3a6:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    a3a8:	9b01      	ldr	r3, [sp, #4]
    a3aa:	785b      	ldrb	r3, [r3, #1]
    a3ac:	021b      	lsls	r3, r3, #8
    a3ae:	b29b      	uxth	r3, r3
    a3b0:	9a05      	ldr	r2, [sp, #20]
    a3b2:	4313      	orrs	r3, r2
    a3b4:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    a3b6:	9b01      	ldr	r3, [sp, #4]
    a3b8:	789b      	ldrb	r3, [r3, #2]
    a3ba:	041b      	lsls	r3, r3, #16
    a3bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a3c0:	9a05      	ldr	r2, [sp, #20]
    a3c2:	4313      	orrs	r3, r2
    a3c4:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    a3c6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a3ca:	9903      	ldr	r1, [sp, #12]
    a3cc:	4613      	mov	r3, r2
    a3ce:	009b      	lsls	r3, r3, #2
    a3d0:	4413      	add	r3, r2
    a3d2:	00db      	lsls	r3, r3, #3
    a3d4:	440b      	add	r3, r1
    a3d6:	3310      	adds	r3, #16
    a3d8:	9a05      	ldr	r2, [sp, #20]
    a3da:	601a      	str	r2, [r3, #0]
}
    a3dc:	bf00      	nop
    a3de:	b006      	add	sp, #24
    a3e0:	4770      	bx	lr

0000a3e2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    a3e2:	b082      	sub	sp, #8
    a3e4:	9001      	str	r0, [sp, #4]
    a3e6:	460b      	mov	r3, r1
    a3e8:	f88d 3003 	strb.w	r3, [sp, #3]
    a3ec:	4613      	mov	r3, r2
    a3ee:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    a3f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3f6:	9901      	ldr	r1, [sp, #4]
    a3f8:	4613      	mov	r3, r2
    a3fa:	009b      	lsls	r3, r3, #2
    a3fc:	4413      	add	r3, r2
    a3fe:	00db      	lsls	r3, r3, #3
    a400:	440b      	add	r3, r1
    a402:	3314      	adds	r3, #20
    a404:	6819      	ldr	r1, [r3, #0]
    a406:	f8bd 3000 	ldrh.w	r3, [sp]
    a40a:	041b      	lsls	r3, r3, #16
    a40c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a410:	43db      	mvns	r3, r3
    a412:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a416:	4019      	ands	r1, r3
    a418:	9801      	ldr	r0, [sp, #4]
    a41a:	4613      	mov	r3, r2
    a41c:	009b      	lsls	r3, r3, #2
    a41e:	4413      	add	r3, r2
    a420:	00db      	lsls	r3, r3, #3
    a422:	4403      	add	r3, r0
    a424:	3314      	adds	r3, #20
    a426:	6019      	str	r1, [r3, #0]
}
    a428:	bf00      	nop
    a42a:	b002      	add	sp, #8
    a42c:	4770      	bx	lr

0000a42e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    a42e:	b500      	push	{lr}
    a430:	b087      	sub	sp, #28
    a432:	9001      	str	r0, [sp, #4]
    a434:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a436:	4a50      	ldr	r2, [pc, #320]	; (a578 <Pdb_Adc_Ip_Init+0x14a>)
    a438:	9b01      	ldr	r3, [sp, #4]
    a43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43e:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    a440:	2300      	movs	r3, #0
    a442:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    a444:	9b00      	ldr	r3, [sp, #0]
    a446:	681b      	ldr	r3, [r3, #0]
    a448:	049b      	lsls	r3, r3, #18
    a44a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    a44e:	9a04      	ldr	r2, [sp, #16]
    a450:	4313      	orrs	r3, r2
    a452:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    a454:	9b00      	ldr	r3, [sp, #0]
    a456:	685b      	ldr	r3, [r3, #4]
    a458:	031b      	lsls	r3, r3, #12
    a45a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a45e:	9a04      	ldr	r2, [sp, #16]
    a460:	4313      	orrs	r3, r2
    a462:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    a464:	9b00      	ldr	r3, [sp, #0]
    a466:	689b      	ldr	r3, [r3, #8]
    a468:	009b      	lsls	r3, r3, #2
    a46a:	f003 030c 	and.w	r3, r3, #12
    a46e:	9a04      	ldr	r2, [sp, #16]
    a470:	4313      	orrs	r3, r2
    a472:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    a474:	9b00      	ldr	r3, [sp, #0]
    a476:	68db      	ldr	r3, [r3, #12]
    a478:	021b      	lsls	r3, r3, #8
    a47a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a47e:	9a04      	ldr	r2, [sp, #16]
    a480:	4313      	orrs	r3, r2
    a482:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    a484:	9b00      	ldr	r3, [sp, #0]
    a486:	7c1b      	ldrb	r3, [r3, #16]
    a488:	2b00      	cmp	r3, #0
    a48a:	d003      	beq.n	a494 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    a48c:	9b04      	ldr	r3, [sp, #16]
    a48e:	f043 0302 	orr.w	r3, r3, #2
    a492:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    a494:	9b00      	ldr	r3, [sp, #0]
    a496:	7c5b      	ldrb	r3, [r3, #17]
    a498:	2b00      	cmp	r3, #0
    a49a:	d003      	beq.n	a4a4 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    a49c:	9b04      	ldr	r3, [sp, #16]
    a49e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a4a2:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    a4a4:	9b00      	ldr	r3, [sp, #0]
    a4a6:	69db      	ldr	r3, [r3, #28]
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d003      	beq.n	a4b4 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    a4ac:	9b04      	ldr	r3, [sp, #16]
    a4ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a4b2:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    a4b4:	9b03      	ldr	r3, [sp, #12]
    a4b6:	9a04      	ldr	r2, [sp, #16]
    a4b8:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    a4ba:	9b00      	ldr	r3, [sp, #0]
    a4bc:	8a5b      	ldrh	r3, [r3, #18]
    a4be:	4619      	mov	r1, r3
    a4c0:	9801      	ldr	r0, [sp, #4]
    a4c2:	f000 f98f 	bl	a7e4 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    a4c6:	9b00      	ldr	r3, [sp, #0]
    a4c8:	7d1b      	ldrb	r3, [r3, #20]
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d03e      	beq.n	a54c <Pdb_Adc_Ip_Init+0x11e>
    a4ce:	9b00      	ldr	r3, [sp, #0]
    a4d0:	699b      	ldr	r3, [r3, #24]
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	d03a      	beq.n	a54c <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a4d6:	2300      	movs	r3, #0
    a4d8:	f88d 3017 	strb.w	r3, [sp, #23]
    a4dc:	e030      	b.n	a540 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    a4de:	9b00      	ldr	r3, [sp, #0]
    a4e0:	6999      	ldr	r1, [r3, #24]
    a4e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a4e6:	4613      	mov	r3, r2
    a4e8:	009b      	lsls	r3, r3, #2
    a4ea:	4413      	add	r3, r2
    a4ec:	009b      	lsls	r3, r3, #2
    a4ee:	440b      	add	r3, r1
    a4f0:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    a4f2:	9b02      	ldr	r3, [sp, #8]
    a4f4:	7819      	ldrb	r1, [r3, #0]
    a4f6:	9b02      	ldr	r3, [sp, #8]
    a4f8:	3301      	adds	r3, #1
    a4fa:	461a      	mov	r2, r3
    a4fc:	9803      	ldr	r0, [sp, #12]
    a4fe:	f7ff ff38 	bl	a372 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a502:	2300      	movs	r3, #0
    a504:	f88d 3016 	strb.w	r3, [sp, #22]
    a508:	e011      	b.n	a52e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    a50a:	9b02      	ldr	r3, [sp, #8]
    a50c:	7819      	ldrb	r1, [r3, #0]
    a50e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a512:	9a02      	ldr	r2, [sp, #8]
    a514:	005b      	lsls	r3, r3, #1
    a516:	4413      	add	r3, r2
    a518:	889b      	ldrh	r3, [r3, #4]
    a51a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a51e:	9801      	ldr	r0, [sp, #4]
    a520:	f000 fa74 	bl	aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a524:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a528:	3301      	adds	r3, #1
    a52a:	f88d 3016 	strb.w	r3, [sp, #22]
    a52e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a532:	2b07      	cmp	r3, #7
    a534:	d9e9      	bls.n	a50a <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    a536:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a53a:	3301      	adds	r3, #1
    a53c:	f88d 3017 	strb.w	r3, [sp, #23]
    a540:	9b00      	ldr	r3, [sp, #0]
    a542:	7d1b      	ldrb	r3, [r3, #20]
    a544:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a548:	429a      	cmp	r2, r3
    a54a:	d3c8      	bcc.n	a4de <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    a54c:	9801      	ldr	r0, [sp, #4]
    a54e:	f000 f89b 	bl	a688 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    a552:	9801      	ldr	r0, [sp, #4]
    a554:	f000 f92e 	bl	a7b4 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    a558:	9b00      	ldr	r3, [sp, #0]
    a55a:	69da      	ldr	r2, [r3, #28]
    a55c:	4907      	ldr	r1, [pc, #28]	; (a57c <Pdb_Adc_Ip_Init+0x14e>)
    a55e:	9b01      	ldr	r3, [sp, #4]
    a560:	00db      	lsls	r3, r3, #3
    a562:	440b      	add	r3, r1
    a564:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    a566:	4a05      	ldr	r2, [pc, #20]	; (a57c <Pdb_Adc_Ip_Init+0x14e>)
    a568:	9b01      	ldr	r3, [sp, #4]
    a56a:	2101      	movs	r1, #1
    a56c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a570:	bf00      	nop
    a572:	b007      	add	sp, #28
    a574:	f85d fb04 	ldr.w	pc, [sp], #4
    a578:	000151c0 	.word	0x000151c0
    a57c:	1fff8db8 	.word	0x1fff8db8

0000a580 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    a580:	b500      	push	{lr}
    a582:	b097      	sub	sp, #92	; 0x5c
    a584:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    a586:	2300      	movs	r3, #0
    a588:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    a58a:	2300      	movs	r3, #0
    a58c:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    a58e:	2300      	movs	r3, #0
    a590:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    a592:	2300      	movs	r3, #0
    a594:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    a596:	2300      	movs	r3, #0
    a598:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    a59c:	2300      	movs	r3, #0
    a59e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    a5a2:	2300      	movs	r3, #0
    a5a4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    a5a8:	2302      	movs	r3, #2
    a5aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a5ae:	2300      	movs	r3, #0
    a5b0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a5b4:	e04d      	b.n	a652 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    a5b6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5ba:	4613      	mov	r3, r2
    a5bc:	009b      	lsls	r3, r3, #2
    a5be:	4413      	add	r3, r2
    a5c0:	009b      	lsls	r3, r3, #2
    a5c2:	aa16      	add	r2, sp, #88	; 0x58
    a5c4:	4413      	add	r3, r2
    a5c6:	3b4c      	subs	r3, #76	; 0x4c
    a5c8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5cc:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    a5ce:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5d2:	4613      	mov	r3, r2
    a5d4:	009b      	lsls	r3, r3, #2
    a5d6:	4413      	add	r3, r2
    a5d8:	009b      	lsls	r3, r3, #2
    a5da:	aa16      	add	r2, sp, #88	; 0x58
    a5dc:	4413      	add	r3, r2
    a5de:	3b4b      	subs	r3, #75	; 0x4b
    a5e0:	2200      	movs	r2, #0
    a5e2:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    a5e4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5e8:	4613      	mov	r3, r2
    a5ea:	009b      	lsls	r3, r3, #2
    a5ec:	4413      	add	r3, r2
    a5ee:	009b      	lsls	r3, r3, #2
    a5f0:	aa16      	add	r2, sp, #88	; 0x58
    a5f2:	4413      	add	r3, r2
    a5f4:	3b4a      	subs	r3, #74	; 0x4a
    a5f6:	2200      	movs	r2, #0
    a5f8:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    a5fa:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a5fe:	4613      	mov	r3, r2
    a600:	009b      	lsls	r3, r3, #2
    a602:	4413      	add	r3, r2
    a604:	009b      	lsls	r3, r3, #2
    a606:	aa16      	add	r2, sp, #88	; 0x58
    a608:	4413      	add	r3, r2
    a60a:	3b49      	subs	r3, #73	; 0x49
    a60c:	2200      	movs	r2, #0
    a60e:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a610:	2300      	movs	r3, #0
    a612:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a616:	e013      	b.n	a640 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    a618:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    a61c:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    a620:	4613      	mov	r3, r2
    a622:	009b      	lsls	r3, r3, #2
    a624:	4413      	add	r3, r2
    a626:	005b      	lsls	r3, r3, #1
    a628:	440b      	add	r3, r1
    a62a:	005b      	lsls	r3, r3, #1
    a62c:	aa16      	add	r2, sp, #88	; 0x58
    a62e:	4413      	add	r3, r2
    a630:	2200      	movs	r2, #0
    a632:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    a636:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a63a:	3301      	adds	r3, #1
    a63c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    a640:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    a644:	2b07      	cmp	r3, #7
    a646:	d9e7      	bls.n	a618 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    a648:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a64c:	3301      	adds	r3, #1
    a64e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    a652:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    a656:	2b01      	cmp	r3, #1
    a658:	d9ad      	bls.n	a5b6 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    a65a:	ab03      	add	r3, sp, #12
    a65c:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    a65e:	2300      	movs	r3, #0
    a660:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    a662:	ab0d      	add	r3, sp, #52	; 0x34
    a664:	4619      	mov	r1, r3
    a666:	9801      	ldr	r0, [sp, #4]
    a668:	f7ff fee1 	bl	a42e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    a66c:	9801      	ldr	r0, [sp, #4]
    a66e:	f000 f823 	bl	a6b8 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    a672:	4a04      	ldr	r2, [pc, #16]	; (a684 <Pdb_Adc_Ip_DeInit+0x104>)
    a674:	9b01      	ldr	r3, [sp, #4]
    a676:	2100      	movs	r1, #0
    a678:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    a67c:	bf00      	nop
    a67e:	b017      	add	sp, #92	; 0x5c
    a680:	f85d fb04 	ldr.w	pc, [sp], #4
    a684:	1fff8db8 	.word	0x1fff8db8

0000a688 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    a688:	b500      	push	{lr}
    a68a:	b085      	sub	sp, #20
    a68c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a68e:	4a09      	ldr	r2, [pc, #36]	; (a6b4 <Pdb_Adc_Ip_Enable+0x2c>)
    a690:	9b01      	ldr	r3, [sp, #4]
    a692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a696:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    a698:	f004 ff3e 	bl	f518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    a69c:	9b03      	ldr	r3, [sp, #12]
    a69e:	681b      	ldr	r3, [r3, #0]
    a6a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    a6a4:	9b03      	ldr	r3, [sp, #12]
    a6a6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    a6a8:	f004 ff62 	bl	f570 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    a6ac:	bf00      	nop
    a6ae:	b005      	add	sp, #20
    a6b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a6b4:	000151c0 	.word	0x000151c0

0000a6b8 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    a6b8:	b500      	push	{lr}
    a6ba:	b085      	sub	sp, #20
    a6bc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6be:	4a08      	ldr	r2, [pc, #32]	; (a6e0 <Pdb_Adc_Ip_Disable+0x28>)
    a6c0:	9b01      	ldr	r3, [sp, #4]
    a6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6c6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    a6c8:	f004 ff78 	bl	f5bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    a6cc:	9803      	ldr	r0, [sp, #12]
    a6ce:	f7ff fe2c 	bl	a32a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    a6d2:	f004 ff9f 	bl	f614 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    a6d6:	bf00      	nop
    a6d8:	b005      	add	sp, #20
    a6da:	f85d fb04 	ldr.w	pc, [sp], #4
    a6de:	bf00      	nop
    a6e0:	000151c0 	.word	0x000151c0

0000a6e4 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    a6e4:	b500      	push	{lr}
    a6e6:	b085      	sub	sp, #20
    a6e8:	9001      	str	r0, [sp, #4]
    a6ea:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a6ec:	4a0e      	ldr	r2, [pc, #56]	; (a728 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    a6ee:	9b01      	ldr	r3, [sp, #4]
    a6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f4:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    a6f6:	f004 ffb3 	bl	f660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    a6fa:	9b03      	ldr	r3, [sp, #12]
    a6fc:	681b      	ldr	r3, [r3, #0]
    a6fe:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    a700:	9b02      	ldr	r3, [sp, #8]
    a702:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    a706:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    a708:	9b00      	ldr	r3, [sp, #0]
    a70a:	021b      	lsls	r3, r3, #8
    a70c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a710:	9a02      	ldr	r2, [sp, #8]
    a712:	4313      	orrs	r3, r2
    a714:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    a716:	9b03      	ldr	r3, [sp, #12]
    a718:	9a02      	ldr	r2, [sp, #8]
    a71a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    a71c:	f004 ffcc 	bl	f6b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    a720:	bf00      	nop
    a722:	b005      	add	sp, #20
    a724:	f85d fb04 	ldr.w	pc, [sp], #4
    a728:	000151c0 	.word	0x000151c0

0000a72c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    a72c:	b500      	push	{lr}
    a72e:	b085      	sub	sp, #20
    a730:	9001      	str	r0, [sp, #4]
    a732:	460b      	mov	r3, r1
    a734:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a738:	4a09      	ldr	r2, [pc, #36]	; (a760 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    a73a:	9b01      	ldr	r3, [sp, #4]
    a73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a740:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    a742:	f004 ffdf 	bl	f704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    a746:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a74a:	4619      	mov	r1, r3
    a74c:	9803      	ldr	r0, [sp, #12]
    a74e:	f7ff fdf7 	bl	a340 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    a752:	f005 f803 	bl	f75c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    a756:	bf00      	nop
    a758:	b005      	add	sp, #20
    a75a:	f85d fb04 	ldr.w	pc, [sp], #4
    a75e:	bf00      	nop
    a760:	000151c0 	.word	0x000151c0

0000a764 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    a764:	b500      	push	{lr}
    a766:	b085      	sub	sp, #20
    a768:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a76a:	4a09      	ldr	r2, [pc, #36]	; (a790 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    a76c:	9b01      	ldr	r3, [sp, #4]
    a76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a772:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    a774:	f005 f818 	bl	f7a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    a778:	9b03      	ldr	r3, [sp, #12]
    a77a:	681b      	ldr	r3, [r3, #0]
    a77c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    a780:	9b03      	ldr	r3, [sp, #12]
    a782:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    a784:	f005 f83c 	bl	f800 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    a788:	bf00      	nop
    a78a:	b005      	add	sp, #20
    a78c:	f85d fb04 	ldr.w	pc, [sp], #4
    a790:	000151c0 	.word	0x000151c0

0000a794 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    a794:	b084      	sub	sp, #16
    a796:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a798:	4a05      	ldr	r2, [pc, #20]	; (a7b0 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    a79a:	9b01      	ldr	r3, [sp, #4]
    a79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7a0:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    a7a2:	9b03      	ldr	r3, [sp, #12]
    a7a4:	689b      	ldr	r3, [r3, #8]
    a7a6:	b29b      	uxth	r3, r3
}
    a7a8:	4618      	mov	r0, r3
    a7aa:	b004      	add	sp, #16
    a7ac:	4770      	bx	lr
    a7ae:	bf00      	nop
    a7b0:	000151c0 	.word	0x000151c0

0000a7b4 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    a7b4:	b500      	push	{lr}
    a7b6:	b085      	sub	sp, #20
    a7b8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7ba:	4a09      	ldr	r2, [pc, #36]	; (a7e0 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    a7bc:	9b01      	ldr	r3, [sp, #4]
    a7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c2:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    a7c4:	f005 f842 	bl	f84c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    a7c8:	9b03      	ldr	r3, [sp, #12]
    a7ca:	681b      	ldr	r3, [r3, #0]
    a7cc:	f043 0201 	orr.w	r2, r3, #1
    a7d0:	9b03      	ldr	r3, [sp, #12]
    a7d2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    a7d4:	f005 f866 	bl	f8a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    a7d8:	bf00      	nop
    a7da:	b005      	add	sp, #20
    a7dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a7e0:	000151c0 	.word	0x000151c0

0000a7e4 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    a7e4:	b500      	push	{lr}
    a7e6:	b085      	sub	sp, #20
    a7e8:	9001      	str	r0, [sp, #4]
    a7ea:	460b      	mov	r3, r1
    a7ec:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a7f0:	4a0d      	ldr	r2, [pc, #52]	; (a828 <Pdb_Adc_Ip_SetModulus+0x44>)
    a7f2:	9b01      	ldr	r3, [sp, #4]
    a7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7f8:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    a7fa:	f005 fb09 	bl	fe10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    a7fe:	9b03      	ldr	r3, [sp, #12]
    a800:	685b      	ldr	r3, [r3, #4]
    a802:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    a804:	9b02      	ldr	r3, [sp, #8]
    a806:	0c1b      	lsrs	r3, r3, #16
    a808:	041b      	lsls	r3, r3, #16
    a80a:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    a80c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a810:	9a02      	ldr	r2, [sp, #8]
    a812:	4313      	orrs	r3, r2
    a814:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    a816:	9b03      	ldr	r3, [sp, #12]
    a818:	9a02      	ldr	r2, [sp, #8]
    a81a:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    a81c:	f005 fb24 	bl	fe68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    a820:	bf00      	nop
    a822:	b005      	add	sp, #20
    a824:	f85d fb04 	ldr.w	pc, [sp], #4
    a828:	000151c0 	.word	0x000151c0

0000a82c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    a82c:	b500      	push	{lr}
    a82e:	b087      	sub	sp, #28
    a830:	9003      	str	r0, [sp, #12]
    a832:	460b      	mov	r3, r1
    a834:	9201      	str	r2, [sp, #4]
    a836:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a83a:	4a0a      	ldr	r2, [pc, #40]	; (a864 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    a83c:	9b03      	ldr	r3, [sp, #12]
    a83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a842:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    a844:	f005 f8a6 	bl	f994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    a848:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a84c:	9a01      	ldr	r2, [sp, #4]
    a84e:	4619      	mov	r1, r3
    a850:	9805      	ldr	r0, [sp, #20]
    a852:	f7ff fd8e 	bl	a372 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    a856:	f005 f8c9 	bl	f9ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    a85a:	bf00      	nop
    a85c:	b007      	add	sp, #28
    a85e:	f85d fb04 	ldr.w	pc, [sp], #4
    a862:	bf00      	nop
    a864:	000151c0 	.word	0x000151c0

0000a868 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    a868:	b084      	sub	sp, #16
    a86a:	9001      	str	r0, [sp, #4]
    a86c:	460b      	mov	r3, r1
    a86e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a872:	4a0c      	ldr	r2, [pc, #48]	; (a8a4 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    a874:	9b01      	ldr	r3, [sp, #4]
    a876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a87a:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    a87c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a880:	9903      	ldr	r1, [sp, #12]
    a882:	4613      	mov	r3, r2
    a884:	009b      	lsls	r3, r3, #2
    a886:	4413      	add	r3, r2
    a888:	00db      	lsls	r3, r3, #3
    a88a:	440b      	add	r3, r1
    a88c:	3314      	adds	r3, #20
    a88e:	681b      	ldr	r3, [r3, #0]
    a890:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    a892:	9b02      	ldr	r3, [sp, #8]
    a894:	0c1b      	lsrs	r3, r3, #16
    a896:	b2db      	uxtb	r3, r3
    a898:	9302      	str	r3, [sp, #8]

    return Result;
    a89a:	9b02      	ldr	r3, [sp, #8]
}
    a89c:	4618      	mov	r0, r3
    a89e:	b004      	add	sp, #16
    a8a0:	4770      	bx	lr
    a8a2:	bf00      	nop
    a8a4:	000151c0 	.word	0x000151c0

0000a8a8 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    a8a8:	b500      	push	{lr}
    a8aa:	b085      	sub	sp, #20
    a8ac:	9001      	str	r0, [sp, #4]
    a8ae:	460b      	mov	r3, r1
    a8b0:	f88d 3003 	strb.w	r3, [sp, #3]
    a8b4:	4613      	mov	r3, r2
    a8b6:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a8ba:	4a0a      	ldr	r2, [pc, #40]	; (a8e4 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    a8bc:	9b01      	ldr	r3, [sp, #4]
    a8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8c2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    a8c4:	f005 fa00 	bl	fcc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    a8c8:	f8bd 2000 	ldrh.w	r2, [sp]
    a8cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a8d0:	4619      	mov	r1, r3
    a8d2:	9803      	ldr	r0, [sp, #12]
    a8d4:	f7ff fd85 	bl	a3e2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    a8d8:	f005 fa22 	bl	fd20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    a8dc:	bf00      	nop
    a8de:	b005      	add	sp, #20
    a8e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8e4:	000151c0 	.word	0x000151c0

0000a8e8 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    a8e8:	b500      	push	{lr}
    a8ea:	b085      	sub	sp, #20
    a8ec:	9001      	str	r0, [sp, #4]
    a8ee:	4608      	mov	r0, r1
    a8f0:	4611      	mov	r1, r2
    a8f2:	461a      	mov	r2, r3
    a8f4:	4603      	mov	r3, r0
    a8f6:	f88d 3003 	strb.w	r3, [sp, #3]
    a8fa:	460b      	mov	r3, r1
    a8fc:	f88d 3002 	strb.w	r3, [sp, #2]
    a900:	4613      	mov	r3, r2
    a902:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a906:	4a10      	ldr	r2, [pc, #64]	; (a948 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    a908:	9b01      	ldr	r3, [sp, #4]
    a90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a90e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a910:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a914:	2201      	movs	r2, #1
    a916:	fa02 f303 	lsl.w	r3, r2, r3
    a91a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    a91c:	9b02      	ldr	r3, [sp, #8]
    a91e:	041b      	lsls	r3, r3, #16
    a920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a924:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    a926:	f005 f887 	bl	fa38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a92a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a92e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a932:	9a02      	ldr	r2, [sp, #8]
    a934:	9803      	ldr	r0, [sp, #12]
    a936:	f7ff fcb9 	bl	a2ac <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    a93a:	f005 f8a9 	bl	fa90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    a93e:	bf00      	nop
    a940:	b005      	add	sp, #20
    a942:	f85d fb04 	ldr.w	pc, [sp], #4
    a946:	bf00      	nop
    a948:	000151c0 	.word	0x000151c0

0000a94c <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    a94c:	b500      	push	{lr}
    a94e:	b085      	sub	sp, #20
    a950:	9001      	str	r0, [sp, #4]
    a952:	4608      	mov	r0, r1
    a954:	4611      	mov	r1, r2
    a956:	461a      	mov	r2, r3
    a958:	4603      	mov	r3, r0
    a95a:	f88d 3003 	strb.w	r3, [sp, #3]
    a95e:	460b      	mov	r3, r1
    a960:	f88d 3002 	strb.w	r3, [sp, #2]
    a964:	4613      	mov	r3, r2
    a966:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a96a:	4a0f      	ldr	r2, [pc, #60]	; (a9a8 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    a96c:	9b01      	ldr	r3, [sp, #4]
    a96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a972:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a974:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a978:	2201      	movs	r2, #1
    a97a:	fa02 f303 	lsl.w	r3, r2, r3
    a97e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    a980:	9b02      	ldr	r3, [sp, #8]
    a982:	b2db      	uxtb	r3, r3
    a984:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    a986:	f005 f8a9 	bl	fadc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a98a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a98e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a992:	9a02      	ldr	r2, [sp, #8]
    a994:	9803      	ldr	r0, [sp, #12]
    a996:	f7ff fc89 	bl	a2ac <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    a99a:	f005 f8cb 	bl	fb34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    a99e:	bf00      	nop
    a9a0:	b005      	add	sp, #20
    a9a2:	f85d fb04 	ldr.w	pc, [sp], #4
    a9a6:	bf00      	nop
    a9a8:	000151c0 	.word	0x000151c0

0000a9ac <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    a9ac:	b500      	push	{lr}
    a9ae:	b085      	sub	sp, #20
    a9b0:	9001      	str	r0, [sp, #4]
    a9b2:	4608      	mov	r0, r1
    a9b4:	4611      	mov	r1, r2
    a9b6:	461a      	mov	r2, r3
    a9b8:	4603      	mov	r3, r0
    a9ba:	f88d 3003 	strb.w	r3, [sp, #3]
    a9be:	460b      	mov	r3, r1
    a9c0:	f88d 3002 	strb.w	r3, [sp, #2]
    a9c4:	4613      	mov	r3, r2
    a9c6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    a9ca:	4a0f      	ldr	r2, [pc, #60]	; (aa08 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    a9cc:	9b01      	ldr	r3, [sp, #4]
    a9ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    a9d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a9d8:	2201      	movs	r2, #1
    a9da:	fa02 f303 	lsl.w	r3, r2, r3
    a9de:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    a9e0:	9b02      	ldr	r3, [sp, #8]
    a9e2:	021b      	lsls	r3, r3, #8
    a9e4:	b29b      	uxth	r3, r3
    a9e6:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    a9e8:	f005 f8ca 	bl	fb80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    a9ec:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a9f0:	f89d 1003 	ldrb.w	r1, [sp, #3]
    a9f4:	9a02      	ldr	r2, [sp, #8]
    a9f6:	9803      	ldr	r0, [sp, #12]
    a9f8:	f7ff fc58 	bl	a2ac <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    a9fc:	f005 f8ec 	bl	fbd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    aa00:	bf00      	nop
    aa02:	b005      	add	sp, #20
    aa04:	f85d fb04 	ldr.w	pc, [sp], #4
    aa08:	000151c0 	.word	0x000151c0

0000aa0c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    aa0c:	b410      	push	{r4}
    aa0e:	b085      	sub	sp, #20
    aa10:	9001      	str	r0, [sp, #4]
    aa12:	4608      	mov	r0, r1
    aa14:	4611      	mov	r1, r2
    aa16:	461a      	mov	r2, r3
    aa18:	4603      	mov	r3, r0
    aa1a:	f88d 3003 	strb.w	r3, [sp, #3]
    aa1e:	460b      	mov	r3, r1
    aa20:	f88d 3002 	strb.w	r3, [sp, #2]
    aa24:	4613      	mov	r3, r2
    aa26:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa2a:	4a0c      	ldr	r2, [pc, #48]	; (aa5c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    aa2c:	9b01      	ldr	r3, [sp, #4]
    aa2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa32:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    aa34:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aa38:	f89d 4002 	ldrb.w	r4, [sp, #2]
    aa3c:	f8bd 0000 	ldrh.w	r0, [sp]
    aa40:	9903      	ldr	r1, [sp, #12]
    aa42:	4613      	mov	r3, r2
    aa44:	009b      	lsls	r3, r3, #2
    aa46:	4413      	add	r3, r2
    aa48:	005b      	lsls	r3, r3, #1
    aa4a:	4423      	add	r3, r4
    aa4c:	3306      	adds	r3, #6
    aa4e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    aa52:	bf00      	nop
    aa54:	b005      	add	sp, #20
    aa56:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa5a:	4770      	bx	lr
    aa5c:	000151c0 	.word	0x000151c0

0000aa60 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    aa60:	b500      	push	{lr}
    aa62:	b087      	sub	sp, #28
    aa64:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aa66:	4a19      	ldr	r2, [pc, #100]	; (aacc <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    aa68:	9b01      	ldr	r3, [sp, #4]
    aa6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    aa70:	2300      	movs	r3, #0
    aa72:	f88d 300c 	strb.w	r3, [sp, #12]
    aa76:	2300      	movs	r3, #0
    aa78:	f88d 300d 	strb.w	r3, [sp, #13]
    aa7c:	2300      	movs	r3, #0
    aa7e:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    aa82:	f004 ff35 	bl	f8f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    aa86:	9804      	ldr	r0, [sp, #16]
    aa88:	f7ff fc4f 	bl	a32a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    aa8c:	2100      	movs	r1, #0
    aa8e:	9804      	ldr	r0, [sp, #16]
    aa90:	f7ff fc56 	bl	a340 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    aa94:	f004 ff58 	bl	f948 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aa98:	2300      	movs	r3, #0
    aa9a:	f88d 3017 	strb.w	r3, [sp, #23]
    aa9e:	e00b      	b.n	aab8 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    aaa0:	aa03      	add	r2, sp, #12
    aaa2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aaa6:	4619      	mov	r1, r3
    aaa8:	9804      	ldr	r0, [sp, #16]
    aaaa:	f000 f899 	bl	abe0 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    aaae:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aab2:	3301      	adds	r3, #1
    aab4:	f88d 3017 	strb.w	r3, [sp, #23]
    aab8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aabc:	2b01      	cmp	r3, #1
    aabe:	d9ef      	bls.n	aaa0 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    aac0:	bf00      	nop
    aac2:	bf00      	nop
    aac4:	b007      	add	sp, #28
    aac6:	f85d fb04 	ldr.w	pc, [sp], #4
    aaca:	bf00      	nop
    aacc:	000151c0 	.word	0x000151c0

0000aad0 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    aad0:	b500      	push	{lr}
    aad2:	b087      	sub	sp, #28
    aad4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    aad6:	4a40      	ldr	r2, [pc, #256]	; (abd8 <Pdb_Adc_Ip_IRQHandler+0x108>)
    aad8:	9b01      	ldr	r3, [sp, #4]
    aada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aade:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    aae0:	4a3e      	ldr	r2, [pc, #248]	; (abdc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aae2:	9b01      	ldr	r3, [sp, #4]
    aae4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d04d      	beq.n	ab88 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    aaec:	9b04      	ldr	r3, [sp, #16]
    aaee:	681b      	ldr	r3, [r3, #0]
    aaf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d06a      	beq.n	abce <Pdb_Adc_Ip_IRQHandler+0xfe>
    aaf8:	4a38      	ldr	r2, [pc, #224]	; (abdc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    aafa:	9b01      	ldr	r3, [sp, #4]
    aafc:	00db      	lsls	r3, r3, #3
    aafe:	4413      	add	r3, r2
    ab00:	685b      	ldr	r3, [r3, #4]
    ab02:	2b00      	cmp	r3, #0
    ab04:	d063      	beq.n	abce <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab06:	2300      	movs	r3, #0
    ab08:	f88d 3017 	strb.w	r3, [sp, #23]
    ab0c:	e037      	b.n	ab7e <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    ab0e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab12:	9904      	ldr	r1, [sp, #16]
    ab14:	4613      	mov	r3, r2
    ab16:	009b      	lsls	r3, r3, #2
    ab18:	4413      	add	r3, r2
    ab1a:	00db      	lsls	r3, r3, #3
    ab1c:	440b      	add	r3, r1
    ab1e:	3314      	adds	r3, #20
    ab20:	681b      	ldr	r3, [r3, #0]
    ab22:	b29b      	uxth	r3, r3
    ab24:	b2db      	uxtb	r3, r3
    ab26:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    ab2a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d020      	beq.n	ab74 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab32:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab36:	9904      	ldr	r1, [sp, #16]
    ab38:	4613      	mov	r3, r2
    ab3a:	009b      	lsls	r3, r3, #2
    ab3c:	4413      	add	r3, r2
    ab3e:	00db      	lsls	r3, r3, #3
    ab40:	440b      	add	r3, r1
    ab42:	3314      	adds	r3, #20
    ab44:	681b      	ldr	r3, [r3, #0]
    ab46:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ab4e:	9804      	ldr	r0, [sp, #16]
    ab50:	4613      	mov	r3, r2
    ab52:	009b      	lsls	r3, r3, #2
    ab54:	4413      	add	r3, r2
    ab56:	00db      	lsls	r3, r3, #3
    ab58:	4403      	add	r3, r0
    ab5a:	3314      	adds	r3, #20
    ab5c:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    ab5e:	4a1f      	ldr	r2, [pc, #124]	; (abdc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    ab60:	9b01      	ldr	r3, [sp, #4]
    ab62:	00db      	lsls	r3, r3, #3
    ab64:	4413      	add	r3, r2
    ab66:	685b      	ldr	r3, [r3, #4]
    ab68:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    ab6c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab70:	4610      	mov	r0, r2
    ab72:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab74:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab78:	3301      	adds	r3, #1
    ab7a:	f88d 3017 	strb.w	r3, [sp, #23]
    ab7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ab82:	2b01      	cmp	r3, #1
    ab84:	d9c3      	bls.n	ab0e <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    ab86:	e022      	b.n	abce <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ab88:	2300      	movs	r3, #0
    ab8a:	f88d 3017 	strb.w	r3, [sp, #23]
    ab8e:	e01a      	b.n	abc6 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ab90:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ab94:	9904      	ldr	r1, [sp, #16]
    ab96:	4613      	mov	r3, r2
    ab98:	009b      	lsls	r3, r3, #2
    ab9a:	4413      	add	r3, r2
    ab9c:	00db      	lsls	r3, r3, #3
    ab9e:	440b      	add	r3, r1
    aba0:	3314      	adds	r3, #20
    aba2:	681b      	ldr	r3, [r3, #0]
    aba4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    aba8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    abac:	9804      	ldr	r0, [sp, #16]
    abae:	4613      	mov	r3, r2
    abb0:	009b      	lsls	r3, r3, #2
    abb2:	4413      	add	r3, r2
    abb4:	00db      	lsls	r3, r3, #3
    abb6:	4403      	add	r3, r0
    abb8:	3314      	adds	r3, #20
    abba:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    abbc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abc0:	3301      	adds	r3, #1
    abc2:	f88d 3017 	strb.w	r3, [sp, #23]
    abc6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    abca:	2b01      	cmp	r3, #1
    abcc:	d9e0      	bls.n	ab90 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    abce:	bf00      	nop
    abd0:	b007      	add	sp, #28
    abd2:	f85d fb04 	ldr.w	pc, [sp], #4
    abd6:	bf00      	nop
    abd8:	000151c0 	.word	0x000151c0
    abdc:	1fff8db8 	.word	0x1fff8db8

0000abe0 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    abe0:	b500      	push	{lr}
    abe2:	b085      	sub	sp, #20
    abe4:	9003      	str	r0, [sp, #12]
    abe6:	460b      	mov	r3, r1
    abe8:	9201      	str	r2, [sp, #4]
    abea:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    abee:	f005 f819 	bl	fc24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    abf2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    abf6:	9a01      	ldr	r2, [sp, #4]
    abf8:	4619      	mov	r1, r3
    abfa:	9803      	ldr	r0, [sp, #12]
    abfc:	f7ff fbb9 	bl	a372 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    ac00:	f005 f83c 	bl	fc7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    ac04:	f005 f8b2 	bl	fd6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    ac08:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac0c:	22ff      	movs	r2, #255	; 0xff
    ac0e:	4619      	mov	r1, r3
    ac10:	9803      	ldr	r0, [sp, #12]
    ac12:	f7ff fbe6 	bl	a3e2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    ac16:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ac1a:	9903      	ldr	r1, [sp, #12]
    ac1c:	4613      	mov	r3, r2
    ac1e:	009b      	lsls	r3, r3, #2
    ac20:	4413      	add	r3, r2
    ac22:	00db      	lsls	r3, r3, #3
    ac24:	440b      	add	r3, r1
    ac26:	3314      	adds	r3, #20
    ac28:	681b      	ldr	r3, [r3, #0]
    ac2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ac2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    ac32:	9803      	ldr	r0, [sp, #12]
    ac34:	4613      	mov	r3, r2
    ac36:	009b      	lsls	r3, r3, #2
    ac38:	4413      	add	r3, r2
    ac3a:	00db      	lsls	r3, r3, #3
    ac3c:	4403      	add	r3, r0
    ac3e:	3314      	adds	r3, #20
    ac40:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    ac42:	f005 f8bf 	bl	fdc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    ac46:	bf00      	nop
    ac48:	b005      	add	sp, #20
    ac4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac4e:	bf00      	nop

0000ac50 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    ac50:	b082      	sub	sp, #8
    ac52:	9001      	str	r0, [sp, #4]
    ac54:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    ac56:	9b01      	ldr	r3, [sp, #4]
    ac58:	681b      	ldr	r3, [r3, #0]
    ac5a:	f023 0207 	bic.w	r2, r3, #7
    ac5e:	9b00      	ldr	r3, [sp, #0]
    ac60:	f003 0307 	and.w	r3, r3, #7
    ac64:	431a      	orrs	r2, r3
    ac66:	9b01      	ldr	r3, [sp, #4]
    ac68:	601a      	str	r2, [r3, #0]
}
    ac6a:	bf00      	nop
    ac6c:	b002      	add	sp, #8
    ac6e:	4770      	bx	lr

0000ac70 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    ac70:	b082      	sub	sp, #8
    ac72:	9001      	str	r0, [sp, #4]
    ac74:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    ac76:	9b01      	ldr	r3, [sp, #4]
    ac78:	681b      	ldr	r3, [r3, #0]
    ac7a:	f023 0218 	bic.w	r2, r3, #24
    ac7e:	9b00      	ldr	r3, [sp, #0]
    ac80:	00db      	lsls	r3, r3, #3
    ac82:	f003 0318 	and.w	r3, r3, #24
    ac86:	431a      	orrs	r2, r3
    ac88:	9b01      	ldr	r3, [sp, #4]
    ac8a:	601a      	str	r2, [r3, #0]
}
    ac8c:	bf00      	nop
    ac8e:	b002      	add	sp, #8
    ac90:	4770      	bx	lr

0000ac92 <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    ac92:	b082      	sub	sp, #8
    ac94:	9001      	str	r0, [sp, #4]
    ac96:	460b      	mov	r3, r1
    ac98:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    ac9c:	9b01      	ldr	r3, [sp, #4]
    ac9e:	681b      	ldr	r3, [r3, #0]
    aca0:	f023 0320 	bic.w	r3, r3, #32
    aca4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aca8:	2a00      	cmp	r2, #0
    acaa:	d001      	beq.n	acb0 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    acac:	2220      	movs	r2, #32
    acae:	e000      	b.n	acb2 <Ftm_Pwm_Ip_SetCpwms+0x20>
    acb0:	2200      	movs	r2, #0
    acb2:	431a      	orrs	r2, r3
    acb4:	9b01      	ldr	r3, [sp, #4]
    acb6:	601a      	str	r2, [r3, #0]
}
    acb8:	bf00      	nop
    acba:	b002      	add	sp, #8
    acbc:	4770      	bx	lr

0000acbe <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    acbe:	b082      	sub	sp, #8
    acc0:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    acc2:	9b01      	ldr	r3, [sp, #4]
    acc4:	681b      	ldr	r3, [r3, #0]
    acc6:	f003 0320 	and.w	r3, r3, #32
    acca:	2b00      	cmp	r3, #0
    accc:	bf14      	ite	ne
    acce:	2301      	movne	r3, #1
    acd0:	2300      	moveq	r3, #0
    acd2:	b2db      	uxtb	r3, r3
}
    acd4:	4618      	mov	r0, r3
    acd6:	b002      	add	sp, #8
    acd8:	4770      	bx	lr

0000acda <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    acda:	b082      	sub	sp, #8
    acdc:	9001      	str	r0, [sp, #4]
    acde:	460b      	mov	r3, r1
    ace0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    ace4:	9b01      	ldr	r3, [sp, #4]
    ace6:	681b      	ldr	r3, [r3, #0]
    ace8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    acec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    acf0:	2a00      	cmp	r2, #0
    acf2:	d002      	beq.n	acfa <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    acf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    acf8:	e000      	b.n	acfc <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    acfa:	2200      	movs	r2, #0
    acfc:	431a      	orrs	r2, r3
    acfe:	9b01      	ldr	r3, [sp, #4]
    ad00:	601a      	str	r2, [r3, #0]
}
    ad02:	bf00      	nop
    ad04:	b002      	add	sp, #8
    ad06:	4770      	bx	lr

0000ad08 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    ad08:	b082      	sub	sp, #8
    ad0a:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    ad0c:	9b01      	ldr	r3, [sp, #4]
    ad0e:	681b      	ldr	r3, [r3, #0]
    ad10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    ad14:	9b01      	ldr	r3, [sp, #4]
    ad16:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    ad18:	bf00      	nop
    ad1a:	b002      	add	sp, #8
    ad1c:	4770      	bx	lr

0000ad1e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    ad1e:	b082      	sub	sp, #8
    ad20:	9001      	str	r0, [sp, #4]
    ad22:	460b      	mov	r3, r1
    ad24:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    ad28:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ad2c:	3310      	adds	r3, #16
    ad2e:	2201      	movs	r2, #1
    ad30:	409a      	lsls	r2, r3
    ad32:	9b01      	ldr	r3, [sp, #4]
    ad34:	681b      	ldr	r3, [r3, #0]
    ad36:	431a      	orrs	r2, r3
    ad38:	9b01      	ldr	r3, [sp, #4]
    ad3a:	601a      	str	r2, [r3, #0]
}
    ad3c:	bf00      	nop
    ad3e:	b002      	add	sp, #8
    ad40:	4770      	bx	lr

0000ad42 <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    ad42:	b082      	sub	sp, #8
    ad44:	9001      	str	r0, [sp, #4]
    ad46:	460b      	mov	r3, r1
    ad48:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    ad4c:	9b01      	ldr	r3, [sp, #4]
    ad4e:	685b      	ldr	r3, [r3, #4]
    ad50:	0c1b      	lsrs	r3, r3, #16
    ad52:	041b      	lsls	r3, r3, #16
    ad54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    ad58:	431a      	orrs	r2, r3
    ad5a:	9b01      	ldr	r3, [sp, #4]
    ad5c:	605a      	str	r2, [r3, #4]
}
    ad5e:	bf00      	nop
    ad60:	b002      	add	sp, #8
    ad62:	4770      	bx	lr

0000ad64 <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    ad64:	b082      	sub	sp, #8
    ad66:	9001      	str	r0, [sp, #4]
    ad68:	460b      	mov	r3, r1
    ad6a:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    ad6e:	9b01      	ldr	r3, [sp, #4]
    ad70:	689b      	ldr	r3, [r3, #8]
    ad72:	0c1b      	lsrs	r3, r3, #16
    ad74:	041b      	lsls	r3, r3, #16
    ad76:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    ad7a:	431a      	orrs	r2, r3
    ad7c:	9b01      	ldr	r3, [sp, #4]
    ad7e:	609a      	str	r2, [r3, #8]
}
    ad80:	bf00      	nop
    ad82:	b002      	add	sp, #8
    ad84:	4770      	bx	lr

0000ad86 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    ad86:	b084      	sub	sp, #16
    ad88:	9001      	str	r0, [sp, #4]
    ad8a:	460b      	mov	r3, r1
    ad8c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    ad90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ad94:	9a01      	ldr	r2, [sp, #4]
    ad96:	3301      	adds	r3, #1
    ad98:	00db      	lsls	r3, r3, #3
    ad9a:	4413      	add	r3, r2
    ad9c:	685b      	ldr	r3, [r3, #4]
    ad9e:	089b      	lsrs	r3, r3, #2
    ada0:	b2db      	uxtb	r3, r3
    ada2:	f003 0301 	and.w	r3, r3, #1
    ada6:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    adaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    adae:	9a01      	ldr	r2, [sp, #4]
    adb0:	3301      	adds	r3, #1
    adb2:	00db      	lsls	r3, r3, #3
    adb4:	4413      	add	r3, r2
    adb6:	685b      	ldr	r3, [r3, #4]
    adb8:	08db      	lsrs	r3, r3, #3
    adba:	b2db      	uxtb	r3, r3
    adbc:	005b      	lsls	r3, r3, #1
    adbe:	b2db      	uxtb	r3, r3
    adc0:	f003 0302 	and.w	r3, r3, #2
    adc4:	b2da      	uxtb	r2, r3
    adc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    adca:	4313      	orrs	r3, r2
    adcc:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    add0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    add4:	4618      	mov	r0, r3
    add6:	b004      	add	sp, #16
    add8:	4770      	bx	lr

0000adda <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    adda:	b086      	sub	sp, #24
    addc:	9003      	str	r0, [sp, #12]
    adde:	460b      	mov	r3, r1
    ade0:	9201      	str	r2, [sp, #4]
    ade2:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    ade6:	9b01      	ldr	r3, [sp, #4]
    ade8:	009b      	lsls	r3, r3, #2
    adea:	f003 0304 	and.w	r3, r3, #4
    adee:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    adf0:	9b01      	ldr	r3, [sp, #4]
    adf2:	009b      	lsls	r3, r3, #2
    adf4:	f003 0308 	and.w	r3, r3, #8
    adf8:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    adfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adfe:	9a03      	ldr	r2, [sp, #12]
    ae00:	3301      	adds	r3, #1
    ae02:	00db      	lsls	r3, r3, #3
    ae04:	4413      	add	r3, r2
    ae06:	685b      	ldr	r3, [r3, #4]
    ae08:	f023 0104 	bic.w	r1, r3, #4
    ae0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae10:	9a05      	ldr	r2, [sp, #20]
    ae12:	430a      	orrs	r2, r1
    ae14:	9903      	ldr	r1, [sp, #12]
    ae16:	3301      	adds	r3, #1
    ae18:	00db      	lsls	r3, r3, #3
    ae1a:	440b      	add	r3, r1
    ae1c:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    ae1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae22:	9a03      	ldr	r2, [sp, #12]
    ae24:	3301      	adds	r3, #1
    ae26:	00db      	lsls	r3, r3, #3
    ae28:	4413      	add	r3, r2
    ae2a:	685b      	ldr	r3, [r3, #4]
    ae2c:	f023 0108 	bic.w	r1, r3, #8
    ae30:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae34:	9a04      	ldr	r2, [sp, #16]
    ae36:	430a      	orrs	r2, r1
    ae38:	9903      	ldr	r1, [sp, #12]
    ae3a:	3301      	adds	r3, #1
    ae3c:	00db      	lsls	r3, r3, #3
    ae3e:	440b      	add	r3, r1
    ae40:	605a      	str	r2, [r3, #4]
}
    ae42:	bf00      	nop
    ae44:	b006      	add	sp, #24
    ae46:	4770      	bx	lr

0000ae48 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    ae48:	b086      	sub	sp, #24
    ae4a:	9003      	str	r0, [sp, #12]
    ae4c:	460b      	mov	r3, r1
    ae4e:	9201      	str	r2, [sp, #4]
    ae50:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    ae54:	9b01      	ldr	r3, [sp, #4]
    ae56:	009b      	lsls	r3, r3, #2
    ae58:	f003 0310 	and.w	r3, r3, #16
    ae5c:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    ae5e:	9b01      	ldr	r3, [sp, #4]
    ae60:	009b      	lsls	r3, r3, #2
    ae62:	f003 0320 	and.w	r3, r3, #32
    ae66:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    ae68:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae6c:	9a03      	ldr	r2, [sp, #12]
    ae6e:	3301      	adds	r3, #1
    ae70:	00db      	lsls	r3, r3, #3
    ae72:	4413      	add	r3, r2
    ae74:	685b      	ldr	r3, [r3, #4]
    ae76:	f023 0110 	bic.w	r1, r3, #16
    ae7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae7e:	9a05      	ldr	r2, [sp, #20]
    ae80:	430a      	orrs	r2, r1
    ae82:	9903      	ldr	r1, [sp, #12]
    ae84:	3301      	adds	r3, #1
    ae86:	00db      	lsls	r3, r3, #3
    ae88:	440b      	add	r3, r1
    ae8a:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    ae8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae90:	9a03      	ldr	r2, [sp, #12]
    ae92:	3301      	adds	r3, #1
    ae94:	00db      	lsls	r3, r3, #3
    ae96:	4413      	add	r3, r2
    ae98:	685b      	ldr	r3, [r3, #4]
    ae9a:	f023 0120 	bic.w	r1, r3, #32
    ae9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aea2:	9a04      	ldr	r2, [sp, #16]
    aea4:	430a      	orrs	r2, r1
    aea6:	9903      	ldr	r1, [sp, #12]
    aea8:	3301      	adds	r3, #1
    aeaa:	00db      	lsls	r3, r3, #3
    aeac:	440b      	add	r3, r1
    aeae:	605a      	str	r2, [r3, #4]
}
    aeb0:	bf00      	nop
    aeb2:	b006      	add	sp, #24
    aeb4:	4770      	bx	lr

0000aeb6 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    aeb6:	b084      	sub	sp, #16
    aeb8:	9001      	str	r0, [sp, #4]
    aeba:	460b      	mov	r3, r1
    aebc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    aec0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aec4:	9a01      	ldr	r2, [sp, #4]
    aec6:	3301      	adds	r3, #1
    aec8:	00db      	lsls	r3, r3, #3
    aeca:	4413      	add	r3, r2
    aecc:	685b      	ldr	r3, [r3, #4]
    aece:	091b      	lsrs	r3, r3, #4
    aed0:	b2db      	uxtb	r3, r3
    aed2:	f003 0301 	and.w	r3, r3, #1
    aed6:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    aeda:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aede:	9a01      	ldr	r2, [sp, #4]
    aee0:	3301      	adds	r3, #1
    aee2:	00db      	lsls	r3, r3, #3
    aee4:	4413      	add	r3, r2
    aee6:	685b      	ldr	r3, [r3, #4]
    aee8:	095b      	lsrs	r3, r3, #5
    aeea:	b2db      	uxtb	r3, r3
    aeec:	005b      	lsls	r3, r3, #1
    aeee:	b2db      	uxtb	r3, r3
    aef0:	f003 0302 	and.w	r3, r3, #2
    aef4:	b2da      	uxtb	r2, r3
    aef6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aefa:	4313      	orrs	r3, r2
    aefc:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    af00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    af04:	4618      	mov	r0, r3
    af06:	b004      	add	sp, #16
    af08:	4770      	bx	lr

0000af0a <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    af0a:	b082      	sub	sp, #8
    af0c:	9001      	str	r0, [sp, #4]
    af0e:	460b      	mov	r3, r1
    af10:	f88d 3003 	strb.w	r3, [sp, #3]
    af14:	4613      	mov	r3, r2
    af16:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    af1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af1e:	9a01      	ldr	r2, [sp, #4]
    af20:	3301      	adds	r3, #1
    af22:	00db      	lsls	r3, r3, #3
    af24:	4413      	add	r3, r2
    af26:	685b      	ldr	r3, [r3, #4]
    af28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    af2c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    af30:	2b00      	cmp	r3, #0
    af32:	d001      	beq.n	af38 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    af34:	2140      	movs	r1, #64	; 0x40
    af36:	e000      	b.n	af3a <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    af38:	2100      	movs	r1, #0
    af3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af3e:	430a      	orrs	r2, r1
    af40:	9901      	ldr	r1, [sp, #4]
    af42:	3301      	adds	r3, #1
    af44:	00db      	lsls	r3, r3, #3
    af46:	440b      	add	r3, r1
    af48:	605a      	str	r2, [r3, #4]
}
    af4a:	bf00      	nop
    af4c:	b002      	add	sp, #8
    af4e:	4770      	bx	lr

0000af50 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    af50:	b082      	sub	sp, #8
    af52:	9001      	str	r0, [sp, #4]
    af54:	460b      	mov	r3, r1
    af56:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    af5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af5e:	9a01      	ldr	r2, [sp, #4]
    af60:	3301      	adds	r3, #1
    af62:	00db      	lsls	r3, r3, #3
    af64:	4413      	add	r3, r2
    af66:	685a      	ldr	r2, [r3, #4]
    af68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    af70:	9901      	ldr	r1, [sp, #4]
    af72:	3301      	adds	r3, #1
    af74:	00db      	lsls	r3, r3, #3
    af76:	440b      	add	r3, r1
    af78:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    af7a:	bf00      	nop
    af7c:	b002      	add	sp, #8
    af7e:	4770      	bx	lr

0000af80 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    af80:	b082      	sub	sp, #8
    af82:	9001      	str	r0, [sp, #4]
    af84:	460b      	mov	r3, r1
    af86:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    af8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af8e:	9a01      	ldr	r2, [sp, #4]
    af90:	3301      	adds	r3, #1
    af92:	00db      	lsls	r3, r3, #3
    af94:	4413      	add	r3, r2
    af96:	685b      	ldr	r3, [r3, #4]
    af98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    af9c:	2b00      	cmp	r3, #0
    af9e:	bf14      	ite	ne
    afa0:	2301      	movne	r3, #1
    afa2:	2300      	moveq	r3, #0
    afa4:	b2db      	uxtb	r3, r3
}
    afa6:	4618      	mov	r0, r3
    afa8:	b002      	add	sp, #8
    afaa:	4770      	bx	lr

0000afac <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    afac:	b082      	sub	sp, #8
    afae:	9001      	str	r0, [sp, #4]
    afb0:	460b      	mov	r3, r1
    afb2:	f88d 3003 	strb.w	r3, [sp, #3]
    afb6:	4613      	mov	r3, r2
    afb8:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    afbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    afc0:	f8bd 2000 	ldrh.w	r2, [sp]
    afc4:	9901      	ldr	r1, [sp, #4]
    afc6:	3301      	adds	r3, #1
    afc8:	00db      	lsls	r3, r3, #3
    afca:	440b      	add	r3, r1
    afcc:	609a      	str	r2, [r3, #8]
}
    afce:	bf00      	nop
    afd0:	b002      	add	sp, #8
    afd2:	4770      	bx	lr

0000afd4 <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    afd4:	b082      	sub	sp, #8
    afd6:	9001      	str	r0, [sp, #4]
    afd8:	460b      	mov	r3, r1
    afda:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    afde:	9b01      	ldr	r3, [sp, #4]
    afe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    afe2:	0c1b      	lsrs	r3, r3, #16
    afe4:	041b      	lsls	r3, r3, #16
    afe6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    afea:	431a      	orrs	r2, r3
    afec:	9b01      	ldr	r3, [sp, #4]
    afee:	64da      	str	r2, [r3, #76]	; 0x4c
}
    aff0:	bf00      	nop
    aff2:	b002      	add	sp, #8
    aff4:	4770      	bx	lr

0000aff6 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    aff6:	b082      	sub	sp, #8
    aff8:	9001      	str	r0, [sp, #4]
    affa:	460b      	mov	r3, r1
    affc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    b000:	9b01      	ldr	r3, [sp, #4]
    b002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b004:	f023 0301 	bic.w	r3, r3, #1
    b008:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b00c:	2a00      	cmp	r2, #0
    b00e:	d001      	beq.n	b014 <Ftm_Pwm_Ip_Enable+0x1e>
    b010:	2201      	movs	r2, #1
    b012:	e000      	b.n	b016 <Ftm_Pwm_Ip_Enable+0x20>
    b014:	2200      	movs	r2, #0
    b016:	431a      	orrs	r2, r3
    b018:	9b01      	ldr	r3, [sp, #4]
    b01a:	655a      	str	r2, [r3, #84]	; 0x54
}
    b01c:	bf00      	nop
    b01e:	b002      	add	sp, #8
    b020:	4770      	bx	lr

0000b022 <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    b022:	b082      	sub	sp, #8
    b024:	9001      	str	r0, [sp, #4]
    b026:	460b      	mov	r3, r1
    b028:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    b02c:	9b01      	ldr	r3, [sp, #4]
    b02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b030:	f023 0308 	bic.w	r3, r3, #8
    b034:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b038:	2a00      	cmp	r2, #0
    b03a:	d001      	beq.n	b040 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    b03c:	2208      	movs	r2, #8
    b03e:	e000      	b.n	b042 <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    b040:	2200      	movs	r2, #0
    b042:	431a      	orrs	r2, r3
    b044:	9b01      	ldr	r3, [sp, #4]
    b046:	655a      	str	r2, [r3, #84]	; 0x54
}
    b048:	bf00      	nop
    b04a:	b002      	add	sp, #8
    b04c:	4770      	bx	lr

0000b04e <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    b04e:	b082      	sub	sp, #8
    b050:	9001      	str	r0, [sp, #4]
    b052:	460b      	mov	r3, r1
    b054:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    b058:	9b01      	ldr	r3, [sp, #4]
    b05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b05c:	f023 0301 	bic.w	r3, r3, #1
    b060:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b064:	2a00      	cmp	r2, #0
    b066:	d001      	beq.n	b06c <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    b068:	2201      	movs	r2, #1
    b06a:	e000      	b.n	b06e <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    b06c:	2200      	movs	r2, #0
    b06e:	431a      	orrs	r2, r3
    b070:	9b01      	ldr	r3, [sp, #4]
    b072:	659a      	str	r2, [r3, #88]	; 0x58
}
    b074:	bf00      	nop
    b076:	b002      	add	sp, #8
    b078:	4770      	bx	lr

0000b07a <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    b07a:	b082      	sub	sp, #8
    b07c:	9001      	str	r0, [sp, #4]
    b07e:	460b      	mov	r3, r1
    b080:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    b084:	9b01      	ldr	r3, [sp, #4]
    b086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b088:	f023 0302 	bic.w	r3, r3, #2
    b08c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b090:	2a00      	cmp	r2, #0
    b092:	d001      	beq.n	b098 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    b094:	2202      	movs	r2, #2
    b096:	e000      	b.n	b09a <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    b098:	2200      	movs	r2, #0
    b09a:	431a      	orrs	r2, r3
    b09c:	9b01      	ldr	r3, [sp, #4]
    b09e:	659a      	str	r2, [r3, #88]	; 0x58
}
    b0a0:	bf00      	nop
    b0a2:	b002      	add	sp, #8
    b0a4:	4770      	bx	lr

0000b0a6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    b0a6:	b082      	sub	sp, #8
    b0a8:	9001      	str	r0, [sp, #4]
    b0aa:	460b      	mov	r3, r1
    b0ac:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    b0b0:	9b01      	ldr	r3, [sp, #4]
    b0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b0b4:	f023 0308 	bic.w	r3, r3, #8
    b0b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0bc:	2a00      	cmp	r2, #0
    b0be:	d001      	beq.n	b0c4 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    b0c0:	2208      	movs	r2, #8
    b0c2:	e000      	b.n	b0c6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    b0c4:	2200      	movs	r2, #0
    b0c6:	431a      	orrs	r2, r3
    b0c8:	9b01      	ldr	r3, [sp, #4]
    b0ca:	659a      	str	r2, [r3, #88]	; 0x58
}
    b0cc:	bf00      	nop
    b0ce:	b002      	add	sp, #8
    b0d0:	4770      	bx	lr

0000b0d2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    b0d2:	b082      	sub	sp, #8
    b0d4:	9001      	str	r0, [sp, #4]
    b0d6:	460b      	mov	r3, r1
    b0d8:	f88d 3003 	strb.w	r3, [sp, #3]
    b0dc:	4613      	mov	r3, r2
    b0de:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b0e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b0e6:	2b00      	cmp	r3, #0
    b0e8:	d00a      	beq.n	b100 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    b0ea:	9b01      	ldr	r3, [sp, #4]
    b0ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    b0ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b0f2:	2110      	movs	r1, #16
    b0f4:	fa01 f303 	lsl.w	r3, r1, r3
    b0f8:	431a      	orrs	r2, r3
    b0fa:	9b01      	ldr	r3, [sp, #4]
    b0fc:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    b0fe:	e00a      	b.n	b116 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    b104:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b108:	2110      	movs	r1, #16
    b10a:	fa01 f303 	lsl.w	r3, r1, r3
    b10e:	43db      	mvns	r3, r3
    b110:	401a      	ands	r2, r3
    b112:	9b01      	ldr	r3, [sp, #4]
    b114:	659a      	str	r2, [r3, #88]	; 0x58
}
    b116:	bf00      	nop
    b118:	b002      	add	sp, #8
    b11a:	4770      	bx	lr

0000b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    b11c:	b082      	sub	sp, #8
    b11e:	9001      	str	r0, [sp, #4]
    b120:	460b      	mov	r3, r1
    b122:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    b126:	9b01      	ldr	r3, [sp, #4]
    b128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    b12a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b12e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b132:	2a00      	cmp	r2, #0
    b134:	d001      	beq.n	b13a <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    b136:	2280      	movs	r2, #128	; 0x80
    b138:	e000      	b.n	b13c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    b13a:	2200      	movs	r2, #0
    b13c:	431a      	orrs	r2, r3
    b13e:	9b01      	ldr	r3, [sp, #4]
    b140:	659a      	str	r2, [r3, #88]	; 0x58
}
    b142:	bf00      	nop
    b144:	b002      	add	sp, #8
    b146:	4770      	bx	lr

0000b148 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    b148:	b084      	sub	sp, #16
    b14a:	9003      	str	r0, [sp, #12]
    b14c:	460b      	mov	r3, r1
    b14e:	9201      	str	r2, [sp, #4]
    b150:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    b154:	9b01      	ldr	r3, [sp, #4]
    b156:	2b01      	cmp	r3, #1
    b158:	d10a      	bne.n	b170 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    b15a:	9b03      	ldr	r3, [sp, #12]
    b15c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b15e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b162:	2101      	movs	r1, #1
    b164:	fa01 f303 	lsl.w	r3, r1, r3
    b168:	431a      	orrs	r2, r3
    b16a:	9b03      	ldr	r3, [sp, #12]
    b16c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    b16e:	e00a      	b.n	b186 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    b170:	9b03      	ldr	r3, [sp, #12]
    b172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b174:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b178:	2101      	movs	r1, #1
    b17a:	fa01 f303 	lsl.w	r3, r1, r3
    b17e:	43db      	mvns	r3, r3
    b180:	401a      	ands	r2, r3
    b182:	9b03      	ldr	r3, [sp, #12]
    b184:	65da      	str	r2, [r3, #92]	; 0x5c
}
    b186:	bf00      	nop
    b188:	b004      	add	sp, #16
    b18a:	4770      	bx	lr

0000b18c <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    b18c:	b082      	sub	sp, #8
    b18e:	9001      	str	r0, [sp, #4]
    b190:	460b      	mov	r3, r1
    b192:	f88d 3003 	strb.w	r3, [sp, #3]
    b196:	4613      	mov	r3, r2
    b198:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    b19c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d00a      	beq.n	b1ba <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    b1a4:	9b01      	ldr	r3, [sp, #4]
    b1a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b1a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b1ac:	2101      	movs	r1, #1
    b1ae:	fa01 f303 	lsl.w	r3, r1, r3
    b1b2:	431a      	orrs	r2, r3
    b1b4:	9b01      	ldr	r3, [sp, #4]
    b1b6:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    b1b8:	e00a      	b.n	b1d0 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    b1ba:	9b01      	ldr	r3, [sp, #4]
    b1bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b1be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b1c2:	2101      	movs	r1, #1
    b1c4:	fa01 f303 	lsl.w	r3, r1, r3
    b1c8:	43db      	mvns	r3, r3
    b1ca:	401a      	ands	r2, r3
    b1cc:	9b01      	ldr	r3, [sp, #4]
    b1ce:	661a      	str	r2, [r3, #96]	; 0x60
}
    b1d0:	bf00      	nop
    b1d2:	b002      	add	sp, #8
    b1d4:	4770      	bx	lr

0000b1d6 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    b1d6:	b082      	sub	sp, #8
    b1d8:	9001      	str	r0, [sp, #4]
    b1da:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    b1dc:	9b01      	ldr	r3, [sp, #4]
    b1de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b1e0:	9b00      	ldr	r3, [sp, #0]
    b1e2:	43db      	mvns	r3, r3
    b1e4:	401a      	ands	r2, r3
    b1e6:	9b00      	ldr	r3, [sp, #0]
    b1e8:	431a      	orrs	r2, r3
    b1ea:	9b01      	ldr	r3, [sp, #4]
    b1ec:	661a      	str	r2, [r3, #96]	; 0x60
}
    b1ee:	bf00      	nop
    b1f0:	b002      	add	sp, #8
    b1f2:	4770      	bx	lr

0000b1f4 <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    b1f4:	b082      	sub	sp, #8
    b1f6:	9001      	str	r0, [sp, #4]
    b1f8:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    b1fa:	9b01      	ldr	r3, [sp, #4]
    b1fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b1fe:	9b00      	ldr	r3, [sp, #0]
    b200:	43db      	mvns	r3, r3
    b202:	401a      	ands	r2, r3
    b204:	9b01      	ldr	r3, [sp, #4]
    b206:	661a      	str	r2, [r3, #96]	; 0x60
}
    b208:	bf00      	nop
    b20a:	b002      	add	sp, #8
    b20c:	4770      	bx	lr

0000b20e <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    b20e:	b082      	sub	sp, #8
    b210:	9001      	str	r0, [sp, #4]
    b212:	460b      	mov	r3, r1
    b214:	f88d 3003 	strb.w	r3, [sp, #3]
    b218:	4613      	mov	r3, r2
    b21a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b21e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b222:	2b00      	cmp	r3, #0
    b224:	d00b      	beq.n	b23e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b226:	9b01      	ldr	r3, [sp, #4]
    b228:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b22a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b22e:	00db      	lsls	r3, r3, #3
    b230:	2101      	movs	r1, #1
    b232:	fa01 f303 	lsl.w	r3, r1, r3
    b236:	431a      	orrs	r2, r3
    b238:	9b01      	ldr	r3, [sp, #4]
    b23a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b23c:	e00b      	b.n	b256 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b242:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b246:	00db      	lsls	r3, r3, #3
    b248:	2101      	movs	r1, #1
    b24a:	fa01 f303 	lsl.w	r3, r1, r3
    b24e:	43db      	mvns	r3, r3
    b250:	401a      	ands	r2, r3
    b252:	9b01      	ldr	r3, [sp, #4]
    b254:	665a      	str	r2, [r3, #100]	; 0x64
}
    b256:	bf00      	nop
    b258:	b002      	add	sp, #8
    b25a:	4770      	bx	lr

0000b25c <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    b25c:	b082      	sub	sp, #8
    b25e:	9001      	str	r0, [sp, #4]
    b260:	460b      	mov	r3, r1
    b262:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    b266:	9b01      	ldr	r3, [sp, #4]
    b268:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b26a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b26e:	00db      	lsls	r3, r3, #3
    b270:	fa22 f303 	lsr.w	r3, r2, r3
    b274:	f003 0301 	and.w	r3, r3, #1
    b278:	2b00      	cmp	r3, #0
    b27a:	bf14      	ite	ne
    b27c:	2301      	movne	r3, #1
    b27e:	2300      	moveq	r3, #0
    b280:	b2db      	uxtb	r3, r3
}
    b282:	4618      	mov	r0, r3
    b284:	b002      	add	sp, #8
    b286:	4770      	bx	lr

0000b288 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    b288:	b082      	sub	sp, #8
    b28a:	9001      	str	r0, [sp, #4]
    b28c:	460b      	mov	r3, r1
    b28e:	f88d 3003 	strb.w	r3, [sp, #3]
    b292:	4613      	mov	r3, r2
    b294:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    b298:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b29c:	2b00      	cmp	r3, #0
    b29e:	d00b      	beq.n	b2b8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b2a0:	9b01      	ldr	r3, [sp, #4]
    b2a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b2a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b2a8:	00db      	lsls	r3, r3, #3
    b2aa:	2102      	movs	r1, #2
    b2ac:	fa01 f303 	lsl.w	r3, r1, r3
    b2b0:	431a      	orrs	r2, r3
    b2b2:	9b01      	ldr	r3, [sp, #4]
    b2b4:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b2b6:	e00b      	b.n	b2d0 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b2b8:	9b01      	ldr	r3, [sp, #4]
    b2ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b2bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b2c0:	00db      	lsls	r3, r3, #3
    b2c2:	2102      	movs	r1, #2
    b2c4:	fa01 f303 	lsl.w	r3, r1, r3
    b2c8:	43db      	mvns	r3, r3
    b2ca:	401a      	ands	r2, r3
    b2cc:	9b01      	ldr	r3, [sp, #4]
    b2ce:	665a      	str	r2, [r3, #100]	; 0x64
}
    b2d0:	bf00      	nop
    b2d2:	b002      	add	sp, #8
    b2d4:	4770      	bx	lr

0000b2d6 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    b2d6:	b082      	sub	sp, #8
    b2d8:	9001      	str	r0, [sp, #4]
    b2da:	460b      	mov	r3, r1
    b2dc:	f88d 3003 	strb.w	r3, [sp, #3]
    b2e0:	4613      	mov	r3, r2
    b2e2:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b2e6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	d00b      	beq.n	b306 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b2ee:	9b01      	ldr	r3, [sp, #4]
    b2f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b2f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b2f6:	00db      	lsls	r3, r3, #3
    b2f8:	2110      	movs	r1, #16
    b2fa:	fa01 f303 	lsl.w	r3, r1, r3
    b2fe:	431a      	orrs	r2, r3
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b304:	e00b      	b.n	b31e <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b306:	9b01      	ldr	r3, [sp, #4]
    b308:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b30a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b30e:	00db      	lsls	r3, r3, #3
    b310:	2110      	movs	r1, #16
    b312:	fa01 f303 	lsl.w	r3, r1, r3
    b316:	43db      	mvns	r3, r3
    b318:	401a      	ands	r2, r3
    b31a:	9b01      	ldr	r3, [sp, #4]
    b31c:	665a      	str	r2, [r3, #100]	; 0x64
}
    b31e:	bf00      	nop
    b320:	b002      	add	sp, #8
    b322:	4770      	bx	lr

0000b324 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    b324:	b082      	sub	sp, #8
    b326:	9001      	str	r0, [sp, #4]
    b328:	460b      	mov	r3, r1
    b32a:	f88d 3003 	strb.w	r3, [sp, #3]
    b32e:	4613      	mov	r3, r2
    b330:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b334:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b338:	2b00      	cmp	r3, #0
    b33a:	d00b      	beq.n	b354 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b33c:	9b01      	ldr	r3, [sp, #4]
    b33e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b340:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b344:	00db      	lsls	r3, r3, #3
    b346:	2120      	movs	r1, #32
    b348:	fa01 f303 	lsl.w	r3, r1, r3
    b34c:	431a      	orrs	r2, r3
    b34e:	9b01      	ldr	r3, [sp, #4]
    b350:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b352:	e00b      	b.n	b36c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b354:	9b01      	ldr	r3, [sp, #4]
    b356:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b358:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b35c:	00db      	lsls	r3, r3, #3
    b35e:	2120      	movs	r1, #32
    b360:	fa01 f303 	lsl.w	r3, r1, r3
    b364:	43db      	mvns	r3, r3
    b366:	401a      	ands	r2, r3
    b368:	9b01      	ldr	r3, [sp, #4]
    b36a:	665a      	str	r2, [r3, #100]	; 0x64
}
    b36c:	bf00      	nop
    b36e:	b002      	add	sp, #8
    b370:	4770      	bx	lr

0000b372 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    b372:	b082      	sub	sp, #8
    b374:	9001      	str	r0, [sp, #4]
    b376:	460b      	mov	r3, r1
    b378:	f88d 3003 	strb.w	r3, [sp, #3]
    b37c:	4613      	mov	r3, r2
    b37e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b382:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b386:	2b00      	cmp	r3, #0
    b388:	d00b      	beq.n	b3a2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    b38a:	9b01      	ldr	r3, [sp, #4]
    b38c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b38e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b392:	00db      	lsls	r3, r3, #3
    b394:	2180      	movs	r1, #128	; 0x80
    b396:	fa01 f303 	lsl.w	r3, r1, r3
    b39a:	431a      	orrs	r2, r3
    b39c:	9b01      	ldr	r3, [sp, #4]
    b39e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    b3a0:	e00b      	b.n	b3ba <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b3a2:	9b01      	ldr	r3, [sp, #4]
    b3a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b3a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b3aa:	00db      	lsls	r3, r3, #3
    b3ac:	2180      	movs	r1, #128	; 0x80
    b3ae:	fa01 f303 	lsl.w	r3, r1, r3
    b3b2:	43db      	mvns	r3, r3
    b3b4:	401a      	ands	r2, r3
    b3b6:	9b01      	ldr	r3, [sp, #4]
    b3b8:	665a      	str	r2, [r3, #100]	; 0x64
}
    b3ba:	bf00      	nop
    b3bc:	b002      	add	sp, #8
    b3be:	4770      	bx	lr

0000b3c0 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    b3c0:	b082      	sub	sp, #8
    b3c2:	9001      	str	r0, [sp, #4]
    b3c4:	460b      	mov	r3, r1
    b3c6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    b3ca:	9b01      	ldr	r3, [sp, #4]
    b3cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b3ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    b3d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b3d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b3da:	431a      	orrs	r2, r3
    b3dc:	9b01      	ldr	r3, [sp, #4]
    b3de:	669a      	str	r2, [r3, #104]	; 0x68
}
    b3e0:	bf00      	nop
    b3e2:	b002      	add	sp, #8
    b3e4:	4770      	bx	lr

0000b3e6 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    b3e6:	b082      	sub	sp, #8
    b3e8:	9001      	str	r0, [sp, #4]
    b3ea:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    b3ec:	9b01      	ldr	r3, [sp, #4]
    b3ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b3f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    b3f4:	9b00      	ldr	r3, [sp, #0]
    b3f6:	b2db      	uxtb	r3, r3
    b3f8:	019b      	lsls	r3, r3, #6
    b3fa:	b2db      	uxtb	r3, r3
    b3fc:	431a      	orrs	r2, r3
    b3fe:	9b01      	ldr	r3, [sp, #4]
    b400:	669a      	str	r2, [r3, #104]	; 0x68
}
    b402:	bf00      	nop
    b404:	b002      	add	sp, #8
    b406:	4770      	bx	lr

0000b408 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    b408:	b082      	sub	sp, #8
    b40a:	9001      	str	r0, [sp, #4]
    b40c:	460b      	mov	r3, r1
    b40e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    b412:	9b01      	ldr	r3, [sp, #4]
    b414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b416:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    b41a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b41e:	041b      	lsls	r3, r3, #16
    b420:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b424:	431a      	orrs	r2, r3
    b426:	9b01      	ldr	r3, [sp, #4]
    b428:	669a      	str	r2, [r3, #104]	; 0x68
}
    b42a:	bf00      	nop
    b42c:	b002      	add	sp, #8
    b42e:	4770      	bx	lr

0000b430 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    b430:	b082      	sub	sp, #8
    b432:	9001      	str	r0, [sp, #4]
    b434:	460b      	mov	r3, r1
    b436:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    b43a:	9b01      	ldr	r3, [sp, #4]
    b43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b442:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b446:	2a00      	cmp	r2, #0
    b448:	d001      	beq.n	b44e <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    b44a:	2240      	movs	r2, #64	; 0x40
    b44c:	e000      	b.n	b450 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    b44e:	2200      	movs	r2, #0
    b450:	431a      	orrs	r2, r3
    b452:	9b01      	ldr	r3, [sp, #4]
    b454:	66da      	str	r2, [r3, #108]	; 0x6c
}
    b456:	bf00      	nop
    b458:	b002      	add	sp, #8
    b45a:	4770      	bx	lr

0000b45c <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    b45c:	b082      	sub	sp, #8
    b45e:	9001      	str	r0, [sp, #4]
    b460:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b466:	9b00      	ldr	r3, [sp, #0]
    b468:	43db      	mvns	r3, r3
    b46a:	401a      	ands	r2, r3
    b46c:	9b01      	ldr	r3, [sp, #4]
    b46e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    b470:	bf00      	nop
    b472:	b002      	add	sp, #8
    b474:	4770      	bx	lr

0000b476 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    b476:	b082      	sub	sp, #8
    b478:	9001      	str	r0, [sp, #4]
    b47a:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    b47c:	9b01      	ldr	r3, [sp, #4]
    b47e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b480:	9b00      	ldr	r3, [sp, #0]
    b482:	43db      	mvns	r3, r3
    b484:	401a      	ands	r2, r3
    b486:	9b00      	ldr	r3, [sp, #0]
    b488:	431a      	orrs	r2, r3
    b48a:	9b01      	ldr	r3, [sp, #4]
    b48c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    b48e:	bf00      	nop
    b490:	b002      	add	sp, #8
    b492:	4770      	bx	lr

0000b494 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    b494:	b084      	sub	sp, #16
    b496:	9003      	str	r0, [sp, #12]
    b498:	460b      	mov	r3, r1
    b49a:	9201      	str	r2, [sp, #4]
    b49c:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    b4a0:	9b01      	ldr	r3, [sp, #4]
    b4a2:	2b00      	cmp	r3, #0
    b4a4:	d10b      	bne.n	b4be <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    b4a6:	9b03      	ldr	r3, [sp, #12]
    b4a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b4aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4ae:	2101      	movs	r1, #1
    b4b0:	fa01 f303 	lsl.w	r3, r1, r3
    b4b4:	43db      	mvns	r3, r3
    b4b6:	401a      	ands	r2, r3
    b4b8:	9b03      	ldr	r3, [sp, #12]
    b4ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    b4bc:	e009      	b.n	b4d2 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    b4be:	9b03      	ldr	r3, [sp, #12]
    b4c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b4c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4c6:	2101      	movs	r1, #1
    b4c8:	fa01 f303 	lsl.w	r3, r1, r3
    b4cc:	431a      	orrs	r2, r3
    b4ce:	9b03      	ldr	r3, [sp, #12]
    b4d0:	671a      	str	r2, [r3, #112]	; 0x70
}
    b4d2:	bf00      	nop
    b4d4:	b004      	add	sp, #16
    b4d6:	4770      	bx	lr

0000b4d8 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    b4d8:	b082      	sub	sp, #8
    b4da:	9001      	str	r0, [sp, #4]
    b4dc:	460b      	mov	r3, r1
    b4de:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    b4e2:	9b01      	ldr	r3, [sp, #4]
    b4e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b4e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b4ea:	fa22 f303 	lsr.w	r3, r2, r3
    b4ee:	f003 0301 	and.w	r3, r3, #1
    b4f2:	2b01      	cmp	r3, #1
    b4f4:	bf0c      	ite	eq
    b4f6:	2301      	moveq	r3, #1
    b4f8:	2300      	movne	r3, #0
    b4fa:	b2db      	uxtb	r3, r3
}
    b4fc:	4618      	mov	r0, r3
    b4fe:	b002      	add	sp, #8
    b500:	4770      	bx	lr

0000b502 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    b502:	b082      	sub	sp, #8
    b504:	9001      	str	r0, [sp, #4]
    b506:	460b      	mov	r3, r1
    b508:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    b50c:	9b01      	ldr	r3, [sp, #4]
    b50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b512:	f023 021f 	bic.w	r2, r3, #31
    b516:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b51a:	f003 031f 	and.w	r3, r3, #31
    b51e:	431a      	orrs	r2, r3
    b520:	9b01      	ldr	r3, [sp, #4]
    b522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b526:	bf00      	nop
    b528:	b002      	add	sp, #8
    b52a:	4770      	bx	lr

0000b52c <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    b52c:	b082      	sub	sp, #8
    b52e:	9001      	str	r0, [sp, #4]
    b530:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    b532:	9b01      	ldr	r3, [sp, #4]
    b534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b538:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    b53c:	9b00      	ldr	r3, [sp, #0]
    b53e:	019b      	lsls	r3, r3, #6
    b540:	b2db      	uxtb	r3, r3
    b542:	431a      	orrs	r2, r3
    b544:	9b01      	ldr	r3, [sp, #4]
    b546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b54a:	bf00      	nop
    b54c:	b002      	add	sp, #8
    b54e:	4770      	bx	lr

0000b550 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    b550:	b082      	sub	sp, #8
    b552:	9001      	str	r0, [sp, #4]
    b554:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    b556:	9b01      	ldr	r3, [sp, #4]
    b558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    b55c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    b560:	9b00      	ldr	r3, [sp, #0]
    b562:	02db      	lsls	r3, r3, #11
    b564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b568:	431a      	orrs	r2, r3
    b56a:	9b01      	ldr	r3, [sp, #4]
    b56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    b570:	bf00      	nop
    b572:	b002      	add	sp, #8
    b574:	4770      	bx	lr

0000b576 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    b576:	b082      	sub	sp, #8
    b578:	9001      	str	r0, [sp, #4]
    b57a:	460b      	mov	r3, r1
    b57c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    b580:	9b01      	ldr	r3, [sp, #4]
    b582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b586:	f023 0301 	bic.w	r3, r3, #1
    b58a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b58e:	2a00      	cmp	r2, #0
    b590:	d001      	beq.n	b596 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    b592:	2201      	movs	r2, #1
    b594:	e000      	b.n	b598 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    b596:	2200      	movs	r2, #0
    b598:	431a      	orrs	r2, r3
    b59a:	9b01      	ldr	r3, [sp, #4]
    b59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b5a0:	bf00      	nop
    b5a2:	b002      	add	sp, #8
    b5a4:	4770      	bx	lr

0000b5a6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    b5a6:	b082      	sub	sp, #8
    b5a8:	9001      	str	r0, [sp, #4]
    b5aa:	460b      	mov	r3, r1
    b5ac:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    b5b0:	9b01      	ldr	r3, [sp, #4]
    b5b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b5b6:	f023 0304 	bic.w	r3, r3, #4
    b5ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b5be:	2a00      	cmp	r2, #0
    b5c0:	d001      	beq.n	b5c6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    b5c2:	2204      	movs	r2, #4
    b5c4:	e000      	b.n	b5c8 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    b5c6:	2200      	movs	r2, #0
    b5c8:	431a      	orrs	r2, r3
    b5ca:	9b01      	ldr	r3, [sp, #4]
    b5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b5d0:	bf00      	nop
    b5d2:	b002      	add	sp, #8
    b5d4:	4770      	bx	lr

0000b5d6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    b5d6:	b082      	sub	sp, #8
    b5d8:	9001      	str	r0, [sp, #4]
    b5da:	460b      	mov	r3, r1
    b5dc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    b5e0:	9b01      	ldr	r3, [sp, #4]
    b5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b5e6:	f023 0310 	bic.w	r3, r3, #16
    b5ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b5ee:	2a00      	cmp	r2, #0
    b5f0:	d001      	beq.n	b5f6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    b5f2:	2210      	movs	r2, #16
    b5f4:	e000      	b.n	b5f8 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    b5f6:	2200      	movs	r2, #0
    b5f8:	431a      	orrs	r2, r3
    b5fa:	9b01      	ldr	r3, [sp, #4]
    b5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b600:	bf00      	nop
    b602:	b002      	add	sp, #8
    b604:	4770      	bx	lr

0000b606 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    b606:	b082      	sub	sp, #8
    b608:	9001      	str	r0, [sp, #4]
    b60a:	460b      	mov	r3, r1
    b60c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b616:	f023 0320 	bic.w	r3, r3, #32
    b61a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b61e:	2a00      	cmp	r2, #0
    b620:	d001      	beq.n	b626 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    b622:	2220      	movs	r2, #32
    b624:	e000      	b.n	b628 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    b626:	2200      	movs	r2, #0
    b628:	431a      	orrs	r2, r3
    b62a:	9b01      	ldr	r3, [sp, #4]
    b62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b630:	bf00      	nop
    b632:	b002      	add	sp, #8
    b634:	4770      	bx	lr

0000b636 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    b636:	b082      	sub	sp, #8
    b638:	9001      	str	r0, [sp, #4]
    b63a:	460b      	mov	r3, r1
    b63c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    b640:	9b01      	ldr	r3, [sp, #4]
    b642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b64a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b64e:	2a00      	cmp	r2, #0
    b650:	d001      	beq.n	b656 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    b652:	2280      	movs	r2, #128	; 0x80
    b654:	e000      	b.n	b658 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    b656:	2200      	movs	r2, #0
    b658:	431a      	orrs	r2, r3
    b65a:	9b01      	ldr	r3, [sp, #4]
    b65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b660:	bf00      	nop
    b662:	b002      	add	sp, #8
    b664:	4770      	bx	lr

0000b666 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    b666:	b082      	sub	sp, #8
    b668:	9001      	str	r0, [sp, #4]
    b66a:	460b      	mov	r3, r1
    b66c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    b670:	9b01      	ldr	r3, [sp, #4]
    b672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b67a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b67e:	2a00      	cmp	r2, #0
    b680:	d002      	beq.n	b688 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    b682:	f44f 7280 	mov.w	r2, #256	; 0x100
    b686:	e000      	b.n	b68a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    b688:	2200      	movs	r2, #0
    b68a:	431a      	orrs	r2, r3
    b68c:	9b01      	ldr	r3, [sp, #4]
    b68e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b692:	bf00      	nop
    b694:	b002      	add	sp, #8
    b696:	4770      	bx	lr

0000b698 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    b698:	b082      	sub	sp, #8
    b69a:	9001      	str	r0, [sp, #4]
    b69c:	460b      	mov	r3, r1
    b69e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    b6a2:	9b01      	ldr	r3, [sp, #4]
    b6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b6a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    b6ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b6b0:	2a00      	cmp	r2, #0
    b6b2:	d002      	beq.n	b6ba <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    b6b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    b6b8:	e000      	b.n	b6bc <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    b6ba:	2200      	movs	r2, #0
    b6bc:	431a      	orrs	r2, r3
    b6be:	9b01      	ldr	r3, [sp, #4]
    b6c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b6c4:	bf00      	nop
    b6c6:	b002      	add	sp, #8
    b6c8:	4770      	bx	lr

0000b6ca <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b6ca:	b082      	sub	sp, #8
    b6cc:	9001      	str	r0, [sp, #4]
    b6ce:	460b      	mov	r3, r1
    b6d0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    b6d4:	9b01      	ldr	r3, [sp, #4]
    b6d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b6da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b6de:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b6e2:	2a00      	cmp	r2, #0
    b6e4:	d002      	beq.n	b6ec <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    b6e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b6ea:	e000      	b.n	b6ee <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    b6ec:	2200      	movs	r2, #0
    b6ee:	431a      	orrs	r2, r3
    b6f0:	9b01      	ldr	r3, [sp, #4]
    b6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b6f6:	bf00      	nop
    b6f8:	b002      	add	sp, #8
    b6fa:	4770      	bx	lr

0000b6fc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b6fc:	b082      	sub	sp, #8
    b6fe:	9001      	str	r0, [sp, #4]
    b700:	460b      	mov	r3, r1
    b702:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    b706:	9b01      	ldr	r3, [sp, #4]
    b708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b70c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b710:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b714:	2a00      	cmp	r2, #0
    b716:	d002      	beq.n	b71e <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    b718:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b71c:	e000      	b.n	b720 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    b71e:	2200      	movs	r2, #0
    b720:	431a      	orrs	r2, r3
    b722:	9b01      	ldr	r3, [sp, #4]
    b724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b728:	bf00      	nop
    b72a:	b002      	add	sp, #8
    b72c:	4770      	bx	lr

0000b72e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b72e:	b082      	sub	sp, #8
    b730:	9001      	str	r0, [sp, #4]
    b732:	460b      	mov	r3, r1
    b734:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    b738:	9b01      	ldr	r3, [sp, #4]
    b73a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b73e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b742:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b746:	2a00      	cmp	r2, #0
    b748:	d002      	beq.n	b750 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    b74a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b74e:	e000      	b.n	b752 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    b750:	2200      	movs	r2, #0
    b752:	431a      	orrs	r2, r3
    b754:	9b01      	ldr	r3, [sp, #4]
    b756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b75a:	bf00      	nop
    b75c:	b002      	add	sp, #8
    b75e:	4770      	bx	lr

0000b760 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b760:	b082      	sub	sp, #8
    b762:	9001      	str	r0, [sp, #4]
    b764:	460b      	mov	r3, r1
    b766:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    b76a:	9b01      	ldr	r3, [sp, #4]
    b76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b774:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b778:	2a00      	cmp	r2, #0
    b77a:	d002      	beq.n	b782 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    b77c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b780:	e000      	b.n	b784 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    b782:	2200      	movs	r2, #0
    b784:	431a      	orrs	r2, r3
    b786:	9b01      	ldr	r3, [sp, #4]
    b788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b78c:	bf00      	nop
    b78e:	b002      	add	sp, #8
    b790:	4770      	bx	lr

0000b792 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    b792:	b082      	sub	sp, #8
    b794:	9001      	str	r0, [sp, #4]
    b796:	460b      	mov	r3, r1
    b798:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    b79c:	9b01      	ldr	r3, [sp, #4]
    b79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b7a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b7a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7aa:	2a00      	cmp	r2, #0
    b7ac:	d002      	beq.n	b7b4 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    b7ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b7b2:	e000      	b.n	b7b6 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    b7b4:	2200      	movs	r2, #0
    b7b6:	431a      	orrs	r2, r3
    b7b8:	9b01      	ldr	r3, [sp, #4]
    b7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b7be:	bf00      	nop
    b7c0:	b002      	add	sp, #8
    b7c2:	4770      	bx	lr

0000b7c4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b7c4:	b082      	sub	sp, #8
    b7c6:	9001      	str	r0, [sp, #4]
    b7c8:	460b      	mov	r3, r1
    b7ca:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    b7ce:	9b01      	ldr	r3, [sp, #4]
    b7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b7d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    b7d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b7dc:	2a00      	cmp	r2, #0
    b7de:	d002      	beq.n	b7e6 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    b7e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    b7e4:	e000      	b.n	b7e8 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    b7e6:	2200      	movs	r2, #0
    b7e8:	431a      	orrs	r2, r3
    b7ea:	9b01      	ldr	r3, [sp, #4]
    b7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b7f0:	bf00      	nop
    b7f2:	b002      	add	sp, #8
    b7f4:	4770      	bx	lr

0000b7f6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    b7f6:	b082      	sub	sp, #8
    b7f8:	9001      	str	r0, [sp, #4]
    b7fa:	460b      	mov	r3, r1
    b7fc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    b800:	9b01      	ldr	r3, [sp, #4]
    b802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    b806:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    b80a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b80e:	2a00      	cmp	r2, #0
    b810:	d002      	beq.n	b818 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    b812:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    b816:	e000      	b.n	b81a <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    b818:	2200      	movs	r2, #0
    b81a:	431a      	orrs	r2, r3
    b81c:	9b01      	ldr	r3, [sp, #4]
    b81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    b822:	bf00      	nop
    b824:	b002      	add	sp, #8
    b826:	4770      	bx	lr

0000b828 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    b828:	b084      	sub	sp, #16
    b82a:	9001      	str	r0, [sp, #4]
    b82c:	460b      	mov	r3, r1
    b82e:	f88d 3003 	strb.w	r3, [sp, #3]
    b832:	4613      	mov	r3, r2
    b834:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    b838:	9b01      	ldr	r3, [sp, #4]
    b83a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b83c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b840:	fa22 f303 	lsr.w	r3, r2, r3
    b844:	b2db      	uxtb	r3, r3
    b846:	f003 0301 	and.w	r3, r3, #1
    b84a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    b84e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b852:	2b00      	cmp	r3, #0
    b854:	bf14      	ite	ne
    b856:	2301      	movne	r3, #1
    b858:	2300      	moveq	r3, #0
    b85a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    b85e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    b862:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b866:	429a      	cmp	r2, r3
    b868:	d00d      	beq.n	b886 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    b86a:	9b01      	ldr	r3, [sp, #4]
    b86c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    b870:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b874:	3308      	adds	r3, #8
    b876:	2101      	movs	r1, #1
    b878:	fa01 f303 	lsl.w	r3, r1, r3
    b87c:	431a      	orrs	r2, r3
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    b884:	e00d      	b.n	b8a2 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    b886:	9b01      	ldr	r3, [sp, #4]
    b888:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    b88c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b890:	3308      	adds	r3, #8
    b892:	2101      	movs	r1, #1
    b894:	fa01 f303 	lsl.w	r3, r1, r3
    b898:	43db      	mvns	r3, r3
    b89a:	401a      	ands	r2, r3
    b89c:	9b01      	ldr	r3, [sp, #4]
    b89e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    b8a2:	bf00      	nop
    b8a4:	b004      	add	sp, #16
    b8a6:	4770      	bx	lr

0000b8a8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    b8a8:	b082      	sub	sp, #8
    b8aa:	9001      	str	r0, [sp, #4]
    b8ac:	460b      	mov	r3, r1
    b8ae:	f88d 3003 	strb.w	r3, [sp, #3]
    b8b2:	4613      	mov	r3, r2
    b8b4:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b8b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b8bc:	2b00      	cmp	r3, #0
    b8be:	d00c      	beq.n	b8da <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    b8c0:	9b01      	ldr	r3, [sp, #4]
    b8c2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    b8c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b8ca:	2101      	movs	r1, #1
    b8cc:	fa01 f303 	lsl.w	r3, r1, r3
    b8d0:	431a      	orrs	r2, r3
    b8d2:	9b01      	ldr	r3, [sp, #4]
    b8d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    b8d8:	e00c      	b.n	b8f4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    b8da:	9b01      	ldr	r3, [sp, #4]
    b8dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    b8e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b8e4:	2101      	movs	r1, #1
    b8e6:	fa01 f303 	lsl.w	r3, r1, r3
    b8ea:	43db      	mvns	r3, r3
    b8ec:	401a      	ands	r2, r3
    b8ee:	9b01      	ldr	r3, [sp, #4]
    b8f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    b8f4:	bf00      	nop
    b8f6:	b002      	add	sp, #8
    b8f8:	4770      	bx	lr

0000b8fa <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    b8fa:	b082      	sub	sp, #8
    b8fc:	9001      	str	r0, [sp, #4]
    b8fe:	460b      	mov	r3, r1
    b900:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    b904:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    b908:	9b01      	ldr	r3, [sp, #4]
    b90a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    b90e:	bf00      	nop
    b910:	b002      	add	sp, #8
    b912:	4770      	bx	lr

0000b914 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    b914:	b082      	sub	sp, #8
    b916:	9001      	str	r0, [sp, #4]
    b918:	460b      	mov	r3, r1
    b91a:	f88d 3003 	strb.w	r3, [sp, #3]
    b91e:	4613      	mov	r3, r2
    b920:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    b924:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b928:	2b00      	cmp	r3, #0
    b92a:	d00c      	beq.n	b946 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    b92c:	9b01      	ldr	r3, [sp, #4]
    b92e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    b932:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b936:	2101      	movs	r1, #1
    b938:	fa01 f303 	lsl.w	r3, r1, r3
    b93c:	431a      	orrs	r2, r3
    b93e:	9b01      	ldr	r3, [sp, #4]
    b940:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    b944:	e00c      	b.n	b960 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    b946:	9b01      	ldr	r3, [sp, #4]
    b948:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    b94c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b950:	2101      	movs	r1, #1
    b952:	fa01 f303 	lsl.w	r3, r1, r3
    b956:	43db      	mvns	r3, r3
    b958:	401a      	ands	r2, r3
    b95a:	9b01      	ldr	r3, [sp, #4]
    b95c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    b960:	bf00      	nop
    b962:	b002      	add	sp, #8
    b964:	4770      	bx	lr

0000b966 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    b966:	b082      	sub	sp, #8
    b968:	9001      	str	r0, [sp, #4]
    b96a:	460b      	mov	r3, r1
    b96c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    b970:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b974:	2b00      	cmp	r3, #0
    b976:	d008      	beq.n	b98a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    b978:	9b01      	ldr	r3, [sp, #4]
    b97a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    b97e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b982:	9b01      	ldr	r3, [sp, #4]
    b984:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    b988:	e007      	b.n	b99a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    b98a:	9b01      	ldr	r3, [sp, #4]
    b98c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    b990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    b994:	9b01      	ldr	r3, [sp, #4]
    b996:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    b99a:	bf00      	nop
    b99c:	b002      	add	sp, #8
    b99e:	4770      	bx	lr

0000b9a0 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    b9a0:	b082      	sub	sp, #8
    b9a2:	9001      	str	r0, [sp, #4]
    b9a4:	460b      	mov	r3, r1
    b9a6:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    b9aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    b9ae:	9b01      	ldr	r3, [sp, #4]
    b9b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    b9b4:	bf00      	nop
    b9b6:	b002      	add	sp, #8
    b9b8:	4770      	bx	lr

0000b9ba <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    b9ba:	b082      	sub	sp, #8
    b9bc:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    b9be:	9b01      	ldr	r3, [sp, #4]
    b9c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b9c4:	b29b      	uxth	r3, r3
}
    b9c6:	4618      	mov	r0, r3
    b9c8:	b002      	add	sp, #8
    b9ca:	4770      	bx	lr

0000b9cc <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    b9cc:	b082      	sub	sp, #8
    b9ce:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    b9d0:	9b01      	ldr	r3, [sp, #4]
    b9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    b9d4:	b29b      	uxth	r3, r3
}
    b9d6:	4618      	mov	r0, r3
    b9d8:	b002      	add	sp, #8
    b9da:	4770      	bx	lr

0000b9dc <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    b9dc:	b500      	push	{lr}
    b9de:	b085      	sub	sp, #20
    b9e0:	9001      	str	r0, [sp, #4]
    b9e2:	460b      	mov	r3, r1
    b9e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    b9e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b9ec:	085b      	lsrs	r3, r3, #1
    b9ee:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    b9f2:	9b01      	ldr	r3, [sp, #4]
    b9f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    b9f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9fa:	00db      	lsls	r3, r3, #3
    b9fc:	2101      	movs	r1, #1
    b9fe:	fa01 f303 	lsl.w	r3, r1, r3
    ba02:	401a      	ands	r2, r3
    ba04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba08:	00db      	lsls	r3, r3, #3
    ba0a:	fa22 f303 	lsr.w	r3, r2, r3
    ba0e:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    ba12:	9b01      	ldr	r3, [sp, #4]
    ba14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ba16:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba1a:	00db      	lsls	r3, r3, #3
    ba1c:	2180      	movs	r1, #128	; 0x80
    ba1e:	fa01 f303 	lsl.w	r3, r1, r3
    ba22:	401a      	ands	r2, r3
    ba24:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba28:	00db      	lsls	r3, r3, #3
    ba2a:	fa22 f303 	lsr.w	r3, r2, r3
    ba2e:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    ba32:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ba36:	2b80      	cmp	r3, #128	; 0x80
    ba38:	d101      	bne.n	ba3e <Ftm_Pwm_Ip_GetChannelMode+0x62>
    ba3a:	2301      	movs	r3, #1
    ba3c:	e000      	b.n	ba40 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    ba3e:	2300      	movs	r3, #0
    ba40:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    ba44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ba48:	4619      	mov	r1, r3
    ba4a:	9801      	ldr	r0, [sp, #4]
    ba4c:	f7ff f99b 	bl	ad86 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    ba50:	4603      	mov	r3, r0
    ba52:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    ba56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ba5a:	4619      	mov	r1, r3
    ba5c:	9801      	ldr	r0, [sp, #4]
    ba5e:	f7ff fa2a 	bl	aeb6 <Ftm_Pwm_Ip_GetChnMode>
    ba62:	4603      	mov	r3, r0
    ba64:	009b      	lsls	r3, r3, #2
    ba66:	b2da      	uxtb	r2, r3
    ba68:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ba6c:	4313      	orrs	r3, r2
    ba6e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    ba72:	9801      	ldr	r0, [sp, #4]
    ba74:	f7ff f923 	bl	acbe <Ftm_Pwm_Ip_GetCpwms>
    ba78:	4603      	mov	r3, r0
    ba7a:	b2db      	uxtb	r3, r3
    ba7c:	011b      	lsls	r3, r3, #4
    ba7e:	b2da      	uxtb	r2, r3
    ba80:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ba84:	4313      	orrs	r3, r2
    ba86:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    ba8a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ba8e:	015b      	lsls	r3, r3, #5
    ba90:	b2da      	uxtb	r2, r3
    ba92:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ba96:	4313      	orrs	r3, r2
    ba98:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    ba9c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    baa0:	019b      	lsls	r3, r3, #6
    baa2:	b2da      	uxtb	r2, r3
    baa4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    baa8:	4313      	orrs	r3, r2
    baaa:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    baae:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bab2:	2b62      	cmp	r3, #98	; 0x62
    bab4:	d055      	beq.n	bb62 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    bab6:	2b62      	cmp	r3, #98	; 0x62
    bab8:	dc59      	bgt.n	bb6e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    baba:	2b22      	cmp	r3, #34	; 0x22
    babc:	dc3c      	bgt.n	bb38 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    babe:	2b09      	cmp	r3, #9
    bac0:	db55      	blt.n	bb6e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    bac2:	3b09      	subs	r3, #9
    bac4:	2b19      	cmp	r3, #25
    bac6:	d852      	bhi.n	bb6e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    bac8:	a201      	add	r2, pc, #4	; (adr r2, bad0 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    baca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bace:	bf00      	nop
    bad0:	0000bb45 	.word	0x0000bb45
    bad4:	0000bb3f 	.word	0x0000bb3f
    bad8:	0000bb6f 	.word	0x0000bb6f
    badc:	0000bb6f 	.word	0x0000bb6f
    bae0:	0000bb6f 	.word	0x0000bb6f
    bae4:	0000bb6f 	.word	0x0000bb6f
    bae8:	0000bb6f 	.word	0x0000bb6f
    baec:	0000bb6f 	.word	0x0000bb6f
    baf0:	0000bb51 	.word	0x0000bb51
    baf4:	0000bb4b 	.word	0x0000bb4b
    baf8:	0000bb6f 	.word	0x0000bb6f
    bafc:	0000bb6f 	.word	0x0000bb6f
    bb00:	0000bb6f 	.word	0x0000bb6f
    bb04:	0000bb6f 	.word	0x0000bb6f
    bb08:	0000bb6f 	.word	0x0000bb6f
    bb0c:	0000bb6f 	.word	0x0000bb6f
    bb10:	0000bb6f 	.word	0x0000bb6f
    bb14:	0000bb6f 	.word	0x0000bb6f
    bb18:	0000bb6f 	.word	0x0000bb6f
    bb1c:	0000bb6f 	.word	0x0000bb6f
    bb20:	0000bb6f 	.word	0x0000bb6f
    bb24:	0000bb6f 	.word	0x0000bb6f
    bb28:	0000bb6f 	.word	0x0000bb6f
    bb2c:	0000bb6f 	.word	0x0000bb6f
    bb30:	0000bb5d 	.word	0x0000bb5d
    bb34:	0000bb57 	.word	0x0000bb57
    bb38:	2b61      	cmp	r3, #97	; 0x61
    bb3a:	d015      	beq.n	bb68 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    bb3c:	e017      	b.n	bb6e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    bb3e:	230a      	movs	r3, #10
    bb40:	9303      	str	r3, [sp, #12]
            break;
    bb42:	e017      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    bb44:	2309      	movs	r3, #9
    bb46:	9303      	str	r3, [sp, #12]
            break;
    bb48:	e014      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    bb4a:	2312      	movs	r3, #18
    bb4c:	9303      	str	r3, [sp, #12]
            break;
    bb4e:	e011      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    bb50:	2311      	movs	r3, #17
    bb52:	9303      	str	r3, [sp, #12]
            break;
    bb54:	e00e      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    bb56:	2322      	movs	r3, #34	; 0x22
    bb58:	9303      	str	r3, [sp, #12]
            break;
    bb5a:	e00b      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    bb5c:	2321      	movs	r3, #33	; 0x21
    bb5e:	9303      	str	r3, [sp, #12]
            break;
    bb60:	e008      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    bb62:	2362      	movs	r3, #98	; 0x62
    bb64:	9303      	str	r3, [sp, #12]
            break;
    bb66:	e005      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    bb68:	2361      	movs	r3, #97	; 0x61
    bb6a:	9303      	str	r3, [sp, #12]
            break;
    bb6c:	e002      	b.n	bb74 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    bb6e:	23ff      	movs	r3, #255	; 0xff
    bb70:	9303      	str	r3, [sp, #12]
            break;
    bb72:	bf00      	nop
    }

    return ChMode; 
    bb74:	9b03      	ldr	r3, [sp, #12]
}
    bb76:	4618      	mov	r0, r3
    bb78:	b005      	add	sp, #20
    bb7a:	f85d fb04 	ldr.w	pc, [sp], #4

0000bb7e <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    bb7e:	b082      	sub	sp, #8
    bb80:	9001      	str	r0, [sp, #4]
    bb82:	460b      	mov	r3, r1
    bb84:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    bb88:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bb8c:	2b00      	cmp	r3, #0
    bb8e:	d006      	beq.n	bb9e <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    bb90:	9b01      	ldr	r3, [sp, #4]
    bb92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    bb94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    bb98:	9b01      	ldr	r3, [sp, #4]
    bb9a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    bb9c:	e00b      	b.n	bbb6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    bb9e:	9b01      	ldr	r3, [sp, #4]
    bba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    bba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bba6:	2b00      	cmp	r3, #0
    bba8:	d005      	beq.n	bbb6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    bbaa:	9b01      	ldr	r3, [sp, #4]
    bbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bbae:	f043 0204 	orr.w	r2, r3, #4
    bbb2:	9b01      	ldr	r3, [sp, #4]
    bbb4:	655a      	str	r2, [r3, #84]	; 0x54
}
    bbb6:	bf00      	nop
    bbb8:	b002      	add	sp, #8
    bbba:	4770      	bx	lr

0000bbbc <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bbbc:	b500      	push	{lr}
    bbbe:	b085      	sub	sp, #20
    bbc0:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    bbc2:	2100      	movs	r1, #0
    bbc4:	9801      	ldr	r0, [sp, #4]
    bbc6:	f7ff ffda 	bl	bb7e <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    bbca:	9b01      	ldr	r3, [sp, #4]
    bbcc:	681a      	ldr	r2, [r3, #0]
    bbce:	9b01      	ldr	r3, [sp, #4]
    bbd0:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    bbd2:	9b01      	ldr	r3, [sp, #4]
    bbd4:	2200      	movs	r2, #0
    bbd6:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    bbd8:	9b01      	ldr	r3, [sp, #4]
    bbda:	2200      	movs	r2, #0
    bbdc:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    bbde:	9b01      	ldr	r3, [sp, #4]
    bbe0:	2200      	movs	r2, #0
    bbe2:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    bbe8:	9b01      	ldr	r3, [sp, #4]
    bbea:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    bbec:	9b01      	ldr	r3, [sp, #4]
    bbee:	2204      	movs	r2, #4
    bbf0:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    bbf2:	9b01      	ldr	r3, [sp, #4]
    bbf4:	2200      	movs	r2, #0
    bbf6:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    bbf8:	9b01      	ldr	r3, [sp, #4]
    bbfa:	2200      	movs	r2, #0
    bbfc:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    bbfe:	9b01      	ldr	r3, [sp, #4]
    bc00:	2200      	movs	r2, #0
    bc02:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    bc04:	9b01      	ldr	r3, [sp, #4]
    bc06:	2200      	movs	r2, #0
    bc08:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    bc0a:	9b01      	ldr	r3, [sp, #4]
    bc0c:	2200      	movs	r2, #0
    bc0e:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    bc10:	9b01      	ldr	r3, [sp, #4]
    bc12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    bc14:	9b01      	ldr	r3, [sp, #4]
    bc16:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    bc18:	9b01      	ldr	r3, [sp, #4]
    bc1a:	2200      	movs	r2, #0
    bc1c:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    bc1e:	9b01      	ldr	r3, [sp, #4]
    bc20:	2200      	movs	r2, #0
    bc22:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    bc24:	9b01      	ldr	r3, [sp, #4]
    bc26:	2200      	movs	r2, #0
    bc28:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    bc2a:	9b01      	ldr	r3, [sp, #4]
    bc2c:	2200      	movs	r2, #0
    bc2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    bc32:	9b01      	ldr	r3, [sp, #4]
    bc34:	2200      	movs	r2, #0
    bc36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    bc3a:	9b01      	ldr	r3, [sp, #4]
    bc3c:	2200      	movs	r2, #0
    bc3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    bc42:	9b01      	ldr	r3, [sp, #4]
    bc44:	2200      	movs	r2, #0
    bc46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    bc4a:	9b01      	ldr	r3, [sp, #4]
    bc4c:	2200      	movs	r2, #0
    bc4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    bc52:	9b01      	ldr	r3, [sp, #4]
    bc54:	2200      	movs	r2, #0
    bc56:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    bc5a:	9b01      	ldr	r3, [sp, #4]
    bc5c:	2200      	movs	r2, #0
    bc5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    bc62:	2300      	movs	r3, #0
    bc64:	f88d 300f 	strb.w	r3, [sp, #15]
    bc68:	e014      	b.n	bc94 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    bc6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc6e:	9a01      	ldr	r2, [sp, #4]
    bc70:	3301      	adds	r3, #1
    bc72:	00db      	lsls	r3, r3, #3
    bc74:	4413      	add	r3, r2
    bc76:	2200      	movs	r2, #0
    bc78:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    bc7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc7e:	9a01      	ldr	r2, [sp, #4]
    bc80:	3301      	adds	r3, #1
    bc82:	00db      	lsls	r3, r3, #3
    bc84:	4413      	add	r3, r2
    bc86:	2200      	movs	r2, #0
    bc88:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    bc8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc8e:	3301      	adds	r3, #1
    bc90:	f88d 300f 	strb.w	r3, [sp, #15]
    bc94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc98:	2b07      	cmp	r3, #7
    bc9a:	d9e6      	bls.n	bc6a <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    bc9c:	bf00      	nop
    bc9e:	bf00      	nop
    bca0:	b005      	add	sp, #20
    bca2:	f85d fb04 	ldr.w	pc, [sp], #4

0000bca6 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    bca6:	b084      	sub	sp, #16
    bca8:	9001      	str	r0, [sp, #4]
    bcaa:	460b      	mov	r3, r1
    bcac:	f88d 3003 	strb.w	r3, [sp, #3]
    bcb0:	4613      	mov	r3, r2
    bcb2:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    bcb6:	2300      	movs	r3, #0
    bcb8:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    bcba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcbe:	2b01      	cmp	r3, #1
    bcc0:	d806      	bhi.n	bcd0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    bcc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcc6:	2210      	movs	r2, #16
    bcc8:	fa02 f303 	lsl.w	r3, r2, r3
    bccc:	9303      	str	r3, [sp, #12]
    bcce:	e013      	b.n	bcf8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    bcd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcd4:	2b05      	cmp	r3, #5
    bcd6:	d807      	bhi.n	bce8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    bcd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcdc:	3b02      	subs	r3, #2
    bcde:	2201      	movs	r2, #1
    bce0:	fa02 f303 	lsl.w	r3, r2, r3
    bce4:	9303      	str	r3, [sp, #12]
    bce6:	e007      	b.n	bcf8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    bce8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bcec:	3b06      	subs	r3, #6
    bcee:	f44f 7280 	mov.w	r2, #256	; 0x100
    bcf2:	fa02 f303 	lsl.w	r3, r2, r3
    bcf6:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    bcf8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d006      	beq.n	bd0e <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    bd00:	9b01      	ldr	r3, [sp, #4]
    bd02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    bd04:	9b03      	ldr	r3, [sp, #12]
    bd06:	431a      	orrs	r2, r3
    bd08:	9b01      	ldr	r3, [sp, #4]
    bd0a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    bd0c:	e006      	b.n	bd1c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    bd0e:	9b01      	ldr	r3, [sp, #4]
    bd10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    bd12:	9b03      	ldr	r3, [sp, #12]
    bd14:	43db      	mvns	r3, r3
    bd16:	401a      	ands	r2, r3
    bd18:	9b01      	ldr	r3, [sp, #4]
    bd1a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    bd1c:	bf00      	nop
    bd1e:	b004      	add	sp, #16
    bd20:	4770      	bx	lr

0000bd22 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    bd22:	b082      	sub	sp, #8
    bd24:	9001      	str	r0, [sp, #4]
    bd26:	9100      	str	r1, [sp, #0]
    bd28:	9b00      	ldr	r3, [sp, #0]
    bd2a:	2b03      	cmp	r3, #3
    bd2c:	d82a      	bhi.n	bd84 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    bd2e:	a201      	add	r2, pc, #4	; (adr r2, bd34 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd34:	0000bd45 	.word	0x0000bd45
    bd38:	0000bd53 	.word	0x0000bd53
    bd3c:	0000bd65 	.word	0x0000bd65
    bd40:	0000bd77 	.word	0x0000bd77
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    bd44:	9b01      	ldr	r3, [sp, #4]
    bd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bd48:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    bd4c:	9b01      	ldr	r3, [sp, #4]
    bd4e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    bd50:	e019      	b.n	bd86 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bd56:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    bd5a:	f043 0220 	orr.w	r2, r3, #32
    bd5e:	9b01      	ldr	r3, [sp, #4]
    bd60:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    bd62:	e010      	b.n	bd86 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    bd64:	9b01      	ldr	r3, [sp, #4]
    bd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bd68:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    bd6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    bd70:	9b01      	ldr	r3, [sp, #4]
    bd72:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    bd74:	e007      	b.n	bd86 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    bd76:	9b01      	ldr	r3, [sp, #4]
    bd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bd7a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    bd7e:	9b01      	ldr	r3, [sp, #4]
    bd80:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    bd82:	e000      	b.n	bd86 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    bd84:	bf00      	nop
    }
}
    bd86:	bf00      	nop
    bd88:	b002      	add	sp, #8
    bd8a:	4770      	bx	lr

0000bd8c <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    bd8c:	b082      	sub	sp, #8
    bd8e:	9001      	str	r0, [sp, #4]
    bd90:	460b      	mov	r3, r1
    bd92:	f88d 3003 	strb.w	r3, [sp, #3]
    bd96:	4613      	mov	r3, r2
    bd98:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    bd9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bda0:	2b00      	cmp	r3, #0
    bda2:	d00b      	beq.n	bdbc <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    bda4:	9b01      	ldr	r3, [sp, #4]
    bda6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    bda8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bdac:	00db      	lsls	r3, r3, #3
    bdae:	2140      	movs	r1, #64	; 0x40
    bdb0:	fa01 f303 	lsl.w	r3, r1, r3
    bdb4:	431a      	orrs	r2, r3
    bdb6:	9b01      	ldr	r3, [sp, #4]
    bdb8:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    bdba:	e00b      	b.n	bdd4 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    bdbc:	9b01      	ldr	r3, [sp, #4]
    bdbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    bdc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bdc4:	00db      	lsls	r3, r3, #3
    bdc6:	2140      	movs	r1, #64	; 0x40
    bdc8:	fa01 f303 	lsl.w	r3, r1, r3
    bdcc:	43db      	mvns	r3, r3
    bdce:	401a      	ands	r2, r3
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	665a      	str	r2, [r3, #100]	; 0x64
}
    bdd4:	bf00      	nop
    bdd6:	b002      	add	sp, #8
    bdd8:	4770      	bx	lr

0000bdda <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    bdda:	b082      	sub	sp, #8
    bddc:	9001      	str	r0, [sp, #4]
    bdde:	460b      	mov	r3, r1
    bde0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    bde4:	9b01      	ldr	r3, [sp, #4]
    bde6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bde8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bdec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bdf0:	2a00      	cmp	r2, #0
    bdf2:	d001      	beq.n	bdf8 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    bdf4:	2280      	movs	r2, #128	; 0x80
    bdf6:	e000      	b.n	bdfa <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    bdf8:	2200      	movs	r2, #0
    bdfa:	431a      	orrs	r2, r3
    bdfc:	9b01      	ldr	r3, [sp, #4]
    bdfe:	655a      	str	r2, [r3, #84]	; 0x54
}
    be00:	bf00      	nop
    be02:	b002      	add	sp, #8
    be04:	4770      	bx	lr

0000be06 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    be06:	b082      	sub	sp, #8
    be08:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    be0a:	9b01      	ldr	r3, [sp, #4]
    be0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    be0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    be12:	9b01      	ldr	r3, [sp, #4]
    be14:	675a      	str	r2, [r3, #116]	; 0x74
}
    be16:	bf00      	nop
    be18:	b002      	add	sp, #8
    be1a:	4770      	bx	lr

0000be1c <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    be1c:	b082      	sub	sp, #8
    be1e:	9001      	str	r0, [sp, #4]
    be20:	460b      	mov	r3, r1
    be22:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    be26:	9b01      	ldr	r3, [sp, #4]
    be28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    be2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    be2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    be32:	021b      	lsls	r3, r3, #8
    be34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    be38:	431a      	orrs	r2, r3
    be3a:	9b01      	ldr	r3, [sp, #4]
    be3c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    be3e:	bf00      	nop
    be40:	b002      	add	sp, #8
    be42:	4770      	bx	lr

0000be44 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    be44:	b082      	sub	sp, #8
    be46:	9001      	str	r0, [sp, #4]
    be48:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    be4a:	9b01      	ldr	r3, [sp, #4]
    be4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    be4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    be52:	9a00      	ldr	r2, [sp, #0]
    be54:	2a00      	cmp	r2, #0
    be56:	d002      	beq.n	be5e <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    be58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    be5c:	e000      	b.n	be60 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    be5e:	2200      	movs	r2, #0
    be60:	431a      	orrs	r2, r3
    be62:	9b01      	ldr	r3, [sp, #4]
    be64:	67da      	str	r2, [r3, #124]	; 0x7c
}
    be66:	bf00      	nop
    be68:	b002      	add	sp, #8
    be6a:	4770      	bx	lr

0000be6c <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    be6c:	b086      	sub	sp, #24
    be6e:	9003      	str	r0, [sp, #12]
    be70:	460b      	mov	r3, r1
    be72:	9201      	str	r2, [sp, #4]
    be74:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    be78:	9b01      	ldr	r3, [sp, #4]
    be7a:	2b00      	cmp	r3, #0
    be7c:	bf14      	ite	ne
    be7e:	2301      	movne	r3, #1
    be80:	2300      	moveq	r3, #0
    be82:	b2db      	uxtb	r3, r3
    be84:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    be86:	9b03      	ldr	r3, [sp, #12]
    be88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    be8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be90:	2101      	movs	r1, #1
    be92:	fa01 f303 	lsl.w	r3, r1, r3
    be96:	43db      	mvns	r3, r3
    be98:	401a      	ands	r2, r3
    be9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be9e:	9905      	ldr	r1, [sp, #20]
    bea0:	fa01 f303 	lsl.w	r3, r1, r3
    bea4:	431a      	orrs	r2, r3
    bea6:	9b03      	ldr	r3, [sp, #12]
    bea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    beac:	bf00      	nop
    beae:	b006      	add	sp, #24
    beb0:	4770      	bx	lr

0000beb2 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    beb2:	b084      	sub	sp, #16
    beb4:	9001      	str	r0, [sp, #4]
    beb6:	460b      	mov	r3, r1
    beb8:	f88d 3003 	strb.w	r3, [sp, #3]
    bebc:	4613      	mov	r3, r2
    bebe:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    bec2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bec6:	2b00      	cmp	r3, #0
    bec8:	d001      	beq.n	bece <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    beca:	2301      	movs	r3, #1
    becc:	e000      	b.n	bed0 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    bece:	2300      	movs	r3, #0
    bed0:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    bed2:	9b01      	ldr	r3, [sp, #4]
    bed4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    bed6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    beda:	2101      	movs	r1, #1
    bedc:	fa01 f303 	lsl.w	r3, r1, r3
    bee0:	43db      	mvns	r3, r3
    bee2:	401a      	ands	r2, r3
    bee4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bee8:	9903      	ldr	r1, [sp, #12]
    beea:	fa01 f303 	lsl.w	r3, r1, r3
    beee:	431a      	orrs	r2, r3
    bef0:	9b01      	ldr	r3, [sp, #4]
    bef2:	67da      	str	r2, [r3, #124]	; 0x7c
}
    bef4:	bf00      	nop
    bef6:	b004      	add	sp, #16
    bef8:	4770      	bx	lr

0000befa <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    befa:	b084      	sub	sp, #16
    befc:	9001      	str	r0, [sp, #4]
    befe:	460b      	mov	r3, r1
    bf00:	f88d 3003 	strb.w	r3, [sp, #3]
    bf04:	4613      	mov	r3, r2
    bf06:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    bf0a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d001      	beq.n	bf16 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    bf12:	2301      	movs	r3, #1
    bf14:	e000      	b.n	bf18 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    bf16:	2300      	movs	r3, #0
    bf18:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    bf1a:	9b01      	ldr	r3, [sp, #4]
    bf1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    bf1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf22:	2110      	movs	r1, #16
    bf24:	fa01 f303 	lsl.w	r3, r1, r3
    bf28:	43db      	mvns	r3, r3
    bf2a:	401a      	ands	r2, r3
    bf2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf30:	9903      	ldr	r1, [sp, #12]
    bf32:	fa01 f303 	lsl.w	r3, r1, r3
    bf36:	011b      	lsls	r3, r3, #4
    bf38:	431a      	orrs	r2, r3
    bf3a:	9b01      	ldr	r3, [sp, #4]
    bf3c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    bf3e:	bf00      	nop
    bf40:	b004      	add	sp, #16
    bf42:	4770      	bx	lr

0000bf44 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    bf44:	b082      	sub	sp, #8
    bf46:	9001      	str	r0, [sp, #4]
    bf48:	460b      	mov	r3, r1
    bf4a:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    bf4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bf56:	409a      	lsls	r2, r3
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	6a1b      	ldr	r3, [r3, #32]
    bf5c:	431a      	orrs	r2, r3
    bf5e:	9b01      	ldr	r3, [sp, #4]
    bf60:	621a      	str	r2, [r3, #32]
}
    bf62:	bf00      	nop
    bf64:	b002      	add	sp, #8
    bf66:	4770      	bx	lr

0000bf68 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    bf68:	b084      	sub	sp, #16
    bf6a:	4603      	mov	r3, r0
    bf6c:	f88d 3007 	strb.w	r3, [sp, #7]
    bf70:	460b      	mov	r3, r1
    bf72:	f8ad 3004 	strh.w	r3, [sp, #4]
    bf76:	4613      	mov	r3, r2
    bf78:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    bf7c:	2300      	movs	r3, #0
    bf7e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    bf82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf86:	4a17      	ldr	r2, [pc, #92]	; (bfe4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    bf88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    bf8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    bf90:	429a      	cmp	r2, r3
    bf92:	d107      	bne.n	bfa4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    bf94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf98:	4a12      	ldr	r2, [pc, #72]	; (bfe4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    bf9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    bf9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    bfa2:	e019      	b.n	bfd8 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    bfa4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d104      	bne.n	bfb6 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    bfac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    bfb0:	f8ad 300e 	strh.w	r3, [sp, #14]
    bfb4:	e010      	b.n	bfd8 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    bfb6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bfba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    bfbe:	4413      	add	r3, r2
    bfc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    bfc4:	4907      	ldr	r1, [pc, #28]	; (bfe4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    bfc6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    bfca:	fb93 f1f2 	sdiv	r1, r3, r2
    bfce:	fb01 f202 	mul.w	r2, r1, r2
    bfd2:	1a9b      	subs	r3, r3, r2
    bfd4:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    bfd8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    bfdc:	4618      	mov	r0, r3
    bfde:	b004      	add	sp, #16
    bfe0:	4770      	bx	lr
    bfe2:	bf00      	nop
    bfe4:	1fff8dcc 	.word	0x1fff8dcc

0000bfe8 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    bfe8:	b500      	push	{lr}
    bfea:	b085      	sub	sp, #20
    bfec:	4603      	mov	r3, r0
    bfee:	9100      	str	r1, [sp, #0]
    bff0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    bff4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bff8:	4a40      	ldr	r2, [pc, #256]	; (c0fc <Ftm_Pwm_Ip_InitPair+0x114>)
    bffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bffe:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    c000:	2300      	movs	r3, #0
    c002:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    c006:	2300      	movs	r3, #0
    c008:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    c00c:	9b00      	ldr	r3, [sp, #0]
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	005b      	lsls	r3, r3, #1
    c012:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    c016:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c01a:	3301      	adds	r3, #1
    c01c:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    c020:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c024:	9a00      	ldr	r2, [sp, #0]
    c026:	7812      	ldrb	r2, [r2, #0]
    c028:	4610      	mov	r0, r2
    c02a:	9a00      	ldr	r2, [sp, #0]
    c02c:	8951      	ldrh	r1, [r2, #10]
    c02e:	4a34      	ldr	r2, [pc, #208]	; (c100 <Ftm_Pwm_Ip_InitPair+0x118>)
    c030:	009b      	lsls	r3, r3, #2
    c032:	4403      	add	r3, r0
    c034:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    c038:	9b00      	ldr	r3, [sp, #0]
    c03a:	7819      	ldrb	r1, [r3, #0]
    c03c:	9b00      	ldr	r3, [sp, #0]
    c03e:	789b      	ldrb	r3, [r3, #2]
    c040:	461a      	mov	r2, r3
    c042:	9803      	ldr	r0, [sp, #12]
    c044:	f7ff f920 	bl	b288 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    c048:	9b00      	ldr	r3, [sp, #0]
    c04a:	789b      	ldrb	r3, [r3, #2]
    c04c:	2b00      	cmp	r3, #0
    c04e:	d02f      	beq.n	c0b0 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    c050:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c054:	4619      	mov	r1, r3
    c056:	9803      	ldr	r0, [sp, #12]
    c058:	f7ff fa3e 	bl	b4d8 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    c05c:	4603      	mov	r3, r0
    c05e:	2b01      	cmp	r3, #1
    c060:	d113      	bne.n	c08a <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    c062:	9b00      	ldr	r3, [sp, #0]
    c064:	685b      	ldr	r3, [r3, #4]
    c066:	2b01      	cmp	r3, #1
    c068:	d107      	bne.n	c07a <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    c06a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c06e:	2200      	movs	r2, #0
    c070:	4619      	mov	r1, r3
    c072:	9803      	ldr	r0, [sp, #12]
    c074:	f7ff fa0e 	bl	b494 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    c078:	e01a      	b.n	c0b0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    c07a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c07e:	2201      	movs	r2, #1
    c080:	4619      	mov	r1, r3
    c082:	9803      	ldr	r0, [sp, #12]
    c084:	f7ff fa06 	bl	b494 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    c088:	e012      	b.n	c0b0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    c08a:	9b00      	ldr	r3, [sp, #0]
    c08c:	685b      	ldr	r3, [r3, #4]
    c08e:	2b01      	cmp	r3, #1
    c090:	d107      	bne.n	c0a2 <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    c092:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c096:	2201      	movs	r2, #1
    c098:	4619      	mov	r1, r3
    c09a:	9803      	ldr	r0, [sp, #12]
    c09c:	f7ff f9fa 	bl	b494 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    c0a0:	e006      	b.n	c0b0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    c0a2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c0a6:	2200      	movs	r2, #0
    c0a8:	4619      	mov	r1, r3
    c0aa:	9803      	ldr	r0, [sp, #12]
    c0ac:	f7ff f9f2 	bl	b494 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    c0b0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c0b4:	4619      	mov	r1, r3
    c0b6:	9803      	ldr	r0, [sp, #12]
    c0b8:	f7fe fe31 	bl	ad1e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    c0bc:	9b00      	ldr	r3, [sp, #0]
    c0be:	7819      	ldrb	r1, [r3, #0]
    c0c0:	9b00      	ldr	r3, [sp, #0]
    c0c2:	7a5b      	ldrb	r3, [r3, #9]
    c0c4:	461a      	mov	r2, r3
    c0c6:	9803      	ldr	r0, [sp, #12]
    c0c8:	f7ff f92c 	bl	b324 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    c0cc:	9b00      	ldr	r3, [sp, #0]
    c0ce:	7819      	ldrb	r1, [r3, #0]
    c0d0:	9b00      	ldr	r3, [sp, #0]
    c0d2:	785b      	ldrb	r3, [r3, #1]
    c0d4:	461a      	mov	r2, r3
    c0d6:	9803      	ldr	r0, [sp, #12]
    c0d8:	f7ff f8fd 	bl	b2d6 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    c0dc:	9b00      	ldr	r3, [sp, #0]
    c0de:	7a1a      	ldrb	r2, [r3, #8]
    c0e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c0e4:	4619      	mov	r1, r3
    c0e6:	9803      	ldr	r0, [sp, #12]
    c0e8:	f7ff fddd 	bl	bca6 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    c0ec:	2101      	movs	r1, #1
    c0ee:	9803      	ldr	r0, [sp, #12]
    c0f0:	f7ff f814 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    c0f4:	bf00      	nop
    c0f6:	b005      	add	sp, #20
    c0f8:	f85d fb04 	ldr.w	pc, [sp], #4
    c0fc:	000151c8 	.word	0x000151c8
    c100:	1fff8e14 	.word	0x1fff8e14

0000c104 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    c104:	b500      	push	{lr}
    c106:	b085      	sub	sp, #20
    c108:	4603      	mov	r3, r0
    c10a:	460a      	mov	r2, r1
    c10c:	f88d 3007 	strb.w	r3, [sp, #7]
    c110:	4613      	mov	r3, r2
    c112:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c116:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c11a:	4a0a      	ldr	r2, [pc, #40]	; (c144 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    c11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c120:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    c122:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c126:	2200      	movs	r2, #0
    c128:	4619      	mov	r1, r3
    c12a:	9803      	ldr	r0, [sp, #12]
    c12c:	f7fe feed 	bl	af0a <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    c130:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c134:	4619      	mov	r1, r3
    c136:	9803      	ldr	r0, [sp, #12]
    c138:	f7fe ff0a 	bl	af50 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    c13c:	bf00      	nop
    c13e:	b005      	add	sp, #20
    c140:	f85d fb04 	ldr.w	pc, [sp], #4
    c144:	000151c8 	.word	0x000151c8

0000c148 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    c148:	b500      	push	{lr}
    c14a:	b085      	sub	sp, #20
    c14c:	4603      	mov	r3, r0
    c14e:	9100      	str	r1, [sp, #0]
    c150:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c154:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c158:	4a53      	ldr	r2, [pc, #332]	; (c2a8 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c15e:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    c160:	9b00      	ldr	r3, [sp, #0]
    c162:	681b      	ldr	r3, [r3, #0]
    c164:	2b00      	cmp	r3, #0
    c166:	d002      	beq.n	c16e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    c168:	2b01      	cmp	r3, #1
    c16a:	d04c      	beq.n	c206 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    c16c:	e097      	b.n	c29e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    c16e:	9b00      	ldr	r3, [sp, #0]
    c170:	699b      	ldr	r3, [r3, #24]
    c172:	2b00      	cmp	r3, #0
    c174:	bf14      	ite	ne
    c176:	2301      	movne	r3, #1
    c178:	2300      	moveq	r3, #0
    c17a:	b2db      	uxtb	r3, r3
    c17c:	4619      	mov	r1, r3
    c17e:	9803      	ldr	r0, [sp, #12]
    c180:	f7ff faa3 	bl	b6ca <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    c184:	2100      	movs	r1, #0
    c186:	9803      	ldr	r0, [sp, #12]
    c188:	f7ff fb1c 	bl	b7c4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    c18c:	9b00      	ldr	r3, [sp, #0]
    c18e:	691b      	ldr	r3, [r3, #16]
    c190:	2b00      	cmp	r3, #0
    c192:	bf14      	ite	ne
    c194:	2301      	movne	r3, #1
    c196:	2300      	moveq	r3, #0
    c198:	b2db      	uxtb	r3, r3
    c19a:	4619      	mov	r1, r3
    c19c:	9803      	ldr	r0, [sp, #12]
    c19e:	f7ff faad 	bl	b6fc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    c1a2:	2100      	movs	r1, #0
    c1a4:	9803      	ldr	r0, [sp, #12]
    c1a6:	f7ff fb26 	bl	b7f6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    c1aa:	9b00      	ldr	r3, [sp, #0]
    c1ac:	695b      	ldr	r3, [r3, #20]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	bf14      	ite	ne
    c1b2:	2301      	movne	r3, #1
    c1b4:	2300      	moveq	r3, #0
    c1b6:	b2db      	uxtb	r3, r3
    c1b8:	4619      	mov	r1, r3
    c1ba:	9803      	ldr	r0, [sp, #12]
    c1bc:	f7ff fab7 	bl	b72e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    c1c0:	2100      	movs	r1, #0
    c1c2:	9803      	ldr	r0, [sp, #12]
    c1c4:	f7ff fb17 	bl	b7f6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c1c8:	9b00      	ldr	r3, [sp, #0]
    c1ca:	69db      	ldr	r3, [r3, #28]
    c1cc:	2b00      	cmp	r3, #0
    c1ce:	bf14      	ite	ne
    c1d0:	2301      	movne	r3, #1
    c1d2:	2300      	moveq	r3, #0
    c1d4:	b2db      	uxtb	r3, r3
    c1d6:	4619      	mov	r1, r3
    c1d8:	9803      	ldr	r0, [sp, #12]
    c1da:	f7ff fa5d 	bl	b698 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    c1de:	2100      	movs	r1, #0
    c1e0:	9803      	ldr	r0, [sp, #12]
    c1e2:	f7ff fad6 	bl	b792 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c1e6:	9b00      	ldr	r3, [sp, #0]
    c1e8:	6a1b      	ldr	r3, [r3, #32]
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	bf14      	ite	ne
    c1ee:	2301      	movne	r3, #1
    c1f0:	2300      	moveq	r3, #0
    c1f2:	b2db      	uxtb	r3, r3
    c1f4:	4619      	mov	r1, r3
    c1f6:	9803      	ldr	r0, [sp, #12]
    c1f8:	f7ff fa35 	bl	b666 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    c1fc:	2100      	movs	r1, #0
    c1fe:	9803      	ldr	r0, [sp, #12]
    c200:	f7ff faae 	bl	b760 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    c204:	e04b      	b.n	c29e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    c206:	2100      	movs	r1, #0
    c208:	9803      	ldr	r0, [sp, #12]
    c20a:	f7ff fa5e 	bl	b6ca <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    c20e:	9b00      	ldr	r3, [sp, #0]
    c210:	699b      	ldr	r3, [r3, #24]
    c212:	2b00      	cmp	r3, #0
    c214:	bf14      	ite	ne
    c216:	2301      	movne	r3, #1
    c218:	2300      	moveq	r3, #0
    c21a:	b2db      	uxtb	r3, r3
    c21c:	4619      	mov	r1, r3
    c21e:	9803      	ldr	r0, [sp, #12]
    c220:	f7ff fad0 	bl	b7c4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    c224:	2100      	movs	r1, #0
    c226:	9803      	ldr	r0, [sp, #12]
    c228:	f7ff fa68 	bl	b6fc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    c22c:	9b00      	ldr	r3, [sp, #0]
    c22e:	691b      	ldr	r3, [r3, #16]
    c230:	2b00      	cmp	r3, #0
    c232:	bf14      	ite	ne
    c234:	2301      	movne	r3, #1
    c236:	2300      	moveq	r3, #0
    c238:	b2db      	uxtb	r3, r3
    c23a:	4619      	mov	r1, r3
    c23c:	9803      	ldr	r0, [sp, #12]
    c23e:	f7ff fada 	bl	b7f6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    c242:	2100      	movs	r1, #0
    c244:	9803      	ldr	r0, [sp, #12]
    c246:	f7ff fa72 	bl	b72e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    c24a:	9b00      	ldr	r3, [sp, #0]
    c24c:	695b      	ldr	r3, [r3, #20]
    c24e:	2b00      	cmp	r3, #0
    c250:	bf14      	ite	ne
    c252:	2301      	movne	r3, #1
    c254:	2300      	moveq	r3, #0
    c256:	b2db      	uxtb	r3, r3
    c258:	4619      	mov	r1, r3
    c25a:	9803      	ldr	r0, [sp, #12]
    c25c:	f7ff facb 	bl	b7f6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    c260:	2100      	movs	r1, #0
    c262:	9803      	ldr	r0, [sp, #12]
    c264:	f7ff fa18 	bl	b698 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c268:	9b00      	ldr	r3, [sp, #0]
    c26a:	69db      	ldr	r3, [r3, #28]
    c26c:	2b00      	cmp	r3, #0
    c26e:	bf14      	ite	ne
    c270:	2301      	movne	r3, #1
    c272:	2300      	moveq	r3, #0
    c274:	b2db      	uxtb	r3, r3
    c276:	4619      	mov	r1, r3
    c278:	9803      	ldr	r0, [sp, #12]
    c27a:	f7ff fa8a 	bl	b792 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    c27e:	2100      	movs	r1, #0
    c280:	9803      	ldr	r0, [sp, #12]
    c282:	f7ff f9f0 	bl	b666 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    c286:	9b00      	ldr	r3, [sp, #0]
    c288:	6a1b      	ldr	r3, [r3, #32]
    c28a:	2b00      	cmp	r3, #0
    c28c:	bf14      	ite	ne
    c28e:	2301      	movne	r3, #1
    c290:	2300      	moveq	r3, #0
    c292:	b2db      	uxtb	r3, r3
    c294:	4619      	mov	r1, r3
    c296:	9803      	ldr	r0, [sp, #12]
    c298:	f7ff fa62 	bl	b760 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    c29c:	bf00      	nop
    }
}
    c29e:	bf00      	nop
    c2a0:	b005      	add	sp, #20
    c2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a6:	bf00      	nop
    c2a8:	000151c8 	.word	0x000151c8

0000c2ac <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    c2ac:	b500      	push	{lr}
    c2ae:	b085      	sub	sp, #20
    c2b0:	4603      	mov	r3, r0
    c2b2:	9100      	str	r1, [sp, #0]
    c2b4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c2b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2bc:	4a19      	ldr	r2, [pc, #100]	; (c324 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    c2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2c2:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c2c4:	9b00      	ldr	r3, [sp, #0]
    c2c6:	699b      	ldr	r3, [r3, #24]
    c2c8:	2b00      	cmp	r3, #0
    c2ca:	bf14      	ite	ne
    c2cc:	2301      	movne	r3, #1
    c2ce:	2300      	moveq	r3, #0
    c2d0:	b2db      	uxtb	r3, r3
    c2d2:	4619      	mov	r1, r3
    c2d4:	9803      	ldr	r0, [sp, #12]
    c2d6:	f7fe fee6 	bl	b0a6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c2da:	9b00      	ldr	r3, [sp, #0]
    c2dc:	691b      	ldr	r3, [r3, #16]
    c2de:	2b00      	cmp	r3, #0
    c2e0:	bf14      	ite	ne
    c2e2:	2301      	movne	r3, #1
    c2e4:	2300      	moveq	r3, #0
    c2e6:	b2db      	uxtb	r3, r3
    c2e8:	4619      	mov	r1, r3
    c2ea:	9803      	ldr	r0, [sp, #12]
    c2ec:	f7ff f973 	bl	b5d6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c2f0:	9b00      	ldr	r3, [sp, #0]
    c2f2:	695b      	ldr	r3, [r3, #20]
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	bf14      	ite	ne
    c2f8:	2301      	movne	r3, #1
    c2fa:	2300      	moveq	r3, #0
    c2fc:	b2db      	uxtb	r3, r3
    c2fe:	4619      	mov	r1, r3
    c300:	9803      	ldr	r0, [sp, #12]
    c302:	f7ff f980 	bl	b606 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    c306:	9b00      	ldr	r3, [sp, #0]
    c308:	69db      	ldr	r3, [r3, #28]
    c30a:	2b00      	cmp	r3, #0
    c30c:	bf14      	ite	ne
    c30e:	2301      	movne	r3, #1
    c310:	2300      	moveq	r3, #0
    c312:	b2db      	uxtb	r3, r3
    c314:	4619      	mov	r1, r3
    c316:	9803      	ldr	r0, [sp, #12]
    c318:	f7ff f945 	bl	b5a6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    c31c:	bf00      	nop
    c31e:	b005      	add	sp, #20
    c320:	f85d fb04 	ldr.w	pc, [sp], #4
    c324:	000151c8 	.word	0x000151c8

0000c328 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    c328:	b500      	push	{lr}
    c32a:	b087      	sub	sp, #28
    c32c:	4603      	mov	r3, r0
    c32e:	9100      	str	r1, [sp, #0]
    c330:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c334:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c338:	4a42      	ldr	r2, [pc, #264]	; (c444 <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    c33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c33e:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    c340:	2300      	movs	r3, #0
    c342:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    c344:	2300      	movs	r3, #0
    c346:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    c34a:	9b00      	ldr	r3, [sp, #0]
    c34c:	791b      	ldrb	r3, [r3, #4]
    c34e:	2b00      	cmp	r3, #0
    c350:	d107      	bne.n	c362 <Ftm_Pwm_Ip_UpdateSync+0x3a>
    c352:	9b00      	ldr	r3, [sp, #0]
    c354:	795b      	ldrb	r3, [r3, #5]
    c356:	2b00      	cmp	r3, #0
    c358:	d103      	bne.n	c362 <Ftm_Pwm_Ip_UpdateSync+0x3a>
    c35a:	9b00      	ldr	r3, [sp, #0]
    c35c:	799b      	ldrb	r3, [r3, #6]
    c35e:	2b00      	cmp	r3, #0
    c360:	d001      	beq.n	c366 <Ftm_Pwm_Ip_UpdateSync+0x3e>
    c362:	2301      	movs	r3, #1
    c364:	e000      	b.n	c368 <Ftm_Pwm_Ip_UpdateSync+0x40>
    c366:	2300      	movs	r3, #0
    c368:	f88d 300f 	strb.w	r3, [sp, #15]
    c36c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c370:	f003 0301 	and.w	r3, r3, #1
    c374:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    c378:	9b00      	ldr	r3, [sp, #0]
    c37a:	681b      	ldr	r3, [r3, #0]
    c37c:	2b00      	cmp	r3, #0
    c37e:	d105      	bne.n	c38c <Ftm_Pwm_Ip_UpdateSync+0x64>
    c380:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c384:	2b00      	cmp	r3, #0
    c386:	d001      	beq.n	c38c <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    c388:	2301      	movs	r3, #1
    c38a:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    c38c:	9b00      	ldr	r3, [sp, #0]
    c38e:	6a1b      	ldr	r3, [r3, #32]
    c390:	2b02      	cmp	r3, #2
    c392:	d101      	bne.n	c398 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    c394:	2301      	movs	r3, #1
    c396:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    c398:	9b05      	ldr	r3, [sp, #20]
    c39a:	2b00      	cmp	r3, #0
    c39c:	d14c      	bne.n	c438 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    c39e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c3a2:	9900      	ldr	r1, [sp, #0]
    c3a4:	4618      	mov	r0, r3
    c3a6:	f7ff fecf 	bl	c148 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    c3aa:	2101      	movs	r1, #1
    c3ac:	9804      	ldr	r0, [sp, #16]
    c3ae:	f7ff f942 	bl	b636 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    c3b2:	9b00      	ldr	r3, [sp, #0]
    c3b4:	791b      	ldrb	r3, [r3, #4]
    c3b6:	461a      	mov	r2, r3
    c3b8:	2100      	movs	r1, #0
    c3ba:	9804      	ldr	r0, [sp, #16]
    c3bc:	f7fe fe89 	bl	b0d2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    c3c0:	9b00      	ldr	r3, [sp, #0]
    c3c2:	795b      	ldrb	r3, [r3, #5]
    c3c4:	461a      	mov	r2, r3
    c3c6:	2101      	movs	r1, #1
    c3c8:	9804      	ldr	r0, [sp, #16]
    c3ca:	f7fe fe82 	bl	b0d2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    c3ce:	9b00      	ldr	r3, [sp, #0]
    c3d0:	799b      	ldrb	r3, [r3, #6]
    c3d2:	461a      	mov	r2, r3
    c3d4:	2102      	movs	r1, #2
    c3d6:	9804      	ldr	r0, [sp, #16]
    c3d8:	f7fe fe7b 	bl	b0d2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    c3dc:	9b00      	ldr	r3, [sp, #0]
    c3de:	79db      	ldrb	r3, [r3, #7]
    c3e0:	4619      	mov	r1, r3
    c3e2:	9804      	ldr	r0, [sp, #16]
    c3e4:	f7ff f8c7 	bl	b576 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    c3e8:	9b00      	ldr	r3, [sp, #0]
    c3ea:	7a1b      	ldrb	r3, [r3, #8]
    c3ec:	4619      	mov	r1, r3
    c3ee:	9804      	ldr	r0, [sp, #16]
    c3f0:	f7fe fe43 	bl	b07a <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    c3f4:	9b00      	ldr	r3, [sp, #0]
    c3f6:	7a5b      	ldrb	r3, [r3, #9]
    c3f8:	4619      	mov	r1, r3
    c3fa:	9804      	ldr	r0, [sp, #16]
    c3fc:	f7fe fe27 	bl	b04e <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    c400:	9b00      	ldr	r3, [sp, #0]
    c402:	7a9b      	ldrb	r3, [r3, #10]
    c404:	2b00      	cmp	r3, #0
    c406:	d005      	beq.n	c414 <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    c408:	9b00      	ldr	r3, [sp, #0]
    c40a:	899b      	ldrh	r3, [r3, #12]
    c40c:	4619      	mov	r1, r3
    c40e:	9804      	ldr	r0, [sp, #16]
    c410:	f7ff fac6 	bl	b9a0 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    c414:	9b00      	ldr	r3, [sp, #0]
    c416:	7a9b      	ldrb	r3, [r3, #10]
    c418:	4619      	mov	r1, r3
    c41a:	9804      	ldr	r0, [sp, #16]
    c41c:	f7ff faa3 	bl	b966 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    c420:	9b00      	ldr	r3, [sp, #0]
    c422:	7b9b      	ldrb	r3, [r3, #14]
    c424:	4619      	mov	r1, r3
    c426:	9804      	ldr	r0, [sp, #16]
    c428:	f7ff f86b 	bl	b502 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    c42c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c430:	9900      	ldr	r1, [sp, #0]
    c432:	4618      	mov	r0, r3
    c434:	f7ff ff3a 	bl	c2ac <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    c438:	9b05      	ldr	r3, [sp, #20]
}
    c43a:	4618      	mov	r0, r3
    c43c:	b007      	add	sp, #28
    c43e:	f85d fb04 	ldr.w	pc, [sp], #4
    c442:	bf00      	nop
    c444:	000151c8 	.word	0x000151c8

0000c448 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    c448:	b500      	push	{lr}
    c44a:	b085      	sub	sp, #20
    c44c:	4603      	mov	r3, r0
    c44e:	9100      	str	r1, [sp, #0]
    c450:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c458:	4a1f      	ldr	r2, [pc, #124]	; (c4d8 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    c45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c45e:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    c460:	9803      	ldr	r0, [sp, #12]
    c462:	f7ff fbab 	bl	bbbc <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    c466:	2100      	movs	r1, #0
    c468:	9803      	ldr	r0, [sp, #12]
    c46a:	f7fe fc01 	bl	ac70 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    c46e:	9803      	ldr	r0, [sp, #12]
    c470:	f7fe fc4a 	bl	ad08 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    c474:	9b00      	ldr	r3, [sp, #0]
    c476:	68db      	ldr	r3, [r3, #12]
    c478:	2b00      	cmp	r3, #0
    c47a:	bf14      	ite	ne
    c47c:	2301      	movne	r3, #1
    c47e:	2300      	moveq	r3, #0
    c480:	b2db      	uxtb	r3, r3
    c482:	4619      	mov	r1, r3
    c484:	9803      	ldr	r0, [sp, #12]
    c486:	f7fe fc04 	bl	ac92 <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    c48a:	2100      	movs	r1, #0
    c48c:	9803      	ldr	r0, [sp, #12]
    c48e:	f7fe fdb2 	bl	aff6 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    c492:	9b00      	ldr	r3, [sp, #0]
    c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c496:	4619      	mov	r1, r3
    c498:	9803      	ldr	r0, [sp, #12]
    c49a:	f7ff f847 	bl	b52c <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    c49e:	9b00      	ldr	r3, [sp, #0]
    c4a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    c4a2:	b2db      	uxtb	r3, r3
    c4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c4a8:	b2db      	uxtb	r3, r3
    c4aa:	4619      	mov	r1, r3
    c4ac:	9803      	ldr	r0, [sp, #12]
    c4ae:	f7fe ff87 	bl	b3c0 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    c4b2:	9b00      	ldr	r3, [sp, #0]
    c4b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    c4b6:	099b      	lsrs	r3, r3, #6
    c4b8:	b29b      	uxth	r3, r3
    c4ba:	b2db      	uxtb	r3, r3
    c4bc:	4619      	mov	r1, r3
    c4be:	9803      	ldr	r0, [sp, #12]
    c4c0:	f7fe ffa2 	bl	b408 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    c4c4:	9b00      	ldr	r3, [sp, #0]
    c4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c4c8:	4619      	mov	r1, r3
    c4ca:	9803      	ldr	r0, [sp, #12]
    c4cc:	f7fe ff8b 	bl	b3e6 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    c4d0:	bf00      	nop
    c4d2:	b005      	add	sp, #20
    c4d4:	f85d fb04 	ldr.w	pc, [sp], #4
    c4d8:	000151c8 	.word	0x000151c8

0000c4dc <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    c4dc:	b500      	push	{lr}
    c4de:	b085      	sub	sp, #20
    c4e0:	4603      	mov	r3, r0
    c4e2:	9100      	str	r1, [sp, #0]
    c4e4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c4ec:	4a39      	ldr	r2, [pc, #228]	; (c5d4 <Ftm_Pwm_Ip_InitInstance+0xf8>)
    c4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4f2:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    c4f4:	4b38      	ldr	r3, [pc, #224]	; (c5d8 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    c4f6:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    c4f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c4fc:	4619      	mov	r1, r3
    c4fe:	9802      	ldr	r0, [sp, #8]
    c500:	f7ff fd20 	bl	bf44 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    c504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c508:	9900      	ldr	r1, [sp, #0]
    c50a:	4618      	mov	r0, r3
    c50c:	f7ff ff9c 	bl	c448 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    c510:	9b00      	ldr	r3, [sp, #0]
    c512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c514:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c518:	4611      	mov	r1, r2
    c51a:	4618      	mov	r0, r3
    c51c:	f7ff ff04 	bl	c328 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    c520:	2100      	movs	r1, #0
    c522:	9803      	ldr	r0, [sp, #12]
    c524:	f7fe fd56 	bl	afd4 <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    c528:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c52c:	9a00      	ldr	r2, [sp, #0]
    c52e:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    c530:	4a2a      	ldr	r2, [pc, #168]	; (c5dc <Ftm_Pwm_Ip_InitInstance+0x100>)
    c532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    c536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c53a:	9a00      	ldr	r2, [sp, #0]
    c53c:	6812      	ldr	r2, [r2, #0]
    c53e:	4928      	ldr	r1, [pc, #160]	; (c5e0 <Ftm_Pwm_Ip_InitInstance+0x104>)
    c540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    c544:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c548:	9a00      	ldr	r2, [sp, #0]
    c54a:	6852      	ldr	r2, [r2, #4]
    c54c:	4925      	ldr	r1, [pc, #148]	; (c5e4 <Ftm_Pwm_Ip_InitInstance+0x108>)
    c54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    c552:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c556:	9a00      	ldr	r2, [sp, #0]
    c558:	6892      	ldr	r2, [r2, #8]
    c55a:	4923      	ldr	r1, [pc, #140]	; (c5e8 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    c55c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    c560:	9b00      	ldr	r3, [sp, #0]
    c562:	7c1b      	ldrb	r3, [r3, #16]
    c564:	2b00      	cmp	r3, #0
    c566:	d00e      	beq.n	c586 <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    c568:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c56c:	9a00      	ldr	r2, [sp, #0]
    c56e:	6952      	ldr	r2, [r2, #20]
    c570:	491e      	ldr	r1, [pc, #120]	; (c5ec <Ftm_Pwm_Ip_InitInstance+0x110>)
    c572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    c576:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c57a:	9a00      	ldr	r2, [sp, #0]
    c57c:	6992      	ldr	r2, [r2, #24]
    c57e:	491b      	ldr	r1, [pc, #108]	; (c5ec <Ftm_Pwm_Ip_InitInstance+0x110>)
    c580:	00db      	lsls	r3, r3, #3
    c582:	440b      	add	r3, r1
    c584:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    c586:	9b00      	ldr	r3, [sp, #0]
    c588:	68db      	ldr	r3, [r3, #12]
    c58a:	2b01      	cmp	r3, #1
    c58c:	d108      	bne.n	c5a0 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    c58e:	9b00      	ldr	r3, [sp, #0]
    c590:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    c592:	085b      	lsrs	r3, r3, #1
    c594:	b29b      	uxth	r3, r3
    c596:	4619      	mov	r1, r3
    c598:	9803      	ldr	r0, [sp, #12]
    c59a:	f7fe fbe3 	bl	ad64 <Ftm_Pwm_Ip_SetMod>
    c59e:	e007      	b.n	c5b0 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    c5a0:	9b00      	ldr	r3, [sp, #0]
    c5a2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    c5a4:	3b01      	subs	r3, #1
    c5a6:	b29b      	uxth	r3, r3
    c5a8:	4619      	mov	r1, r3
    c5aa:	9803      	ldr	r0, [sp, #12]
    c5ac:	f7fe fbda 	bl	ad64 <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    c5b0:	9b00      	ldr	r3, [sp, #0]
    c5b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    c5b6:	4619      	mov	r1, r3
    c5b8:	9803      	ldr	r0, [sp, #12]
    c5ba:	f7fe ff39 	bl	b430 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    c5be:	9b00      	ldr	r3, [sp, #0]
    c5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c5c2:	4619      	mov	r1, r3
    c5c4:	9803      	ldr	r0, [sp, #12]
    c5c6:	f7fe ffc3 	bl	b550 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    c5ca:	bf00      	nop
    c5cc:	b005      	add	sp, #20
    c5ce:	f85d fb04 	ldr.w	pc, [sp], #4
    c5d2:	bf00      	nop
    c5d4:	000151c8 	.word	0x000151c8
    c5d8:	40048000 	.word	0x40048000
    c5dc:	1fff8dcc 	.word	0x1fff8dcc
    c5e0:	1fff90c4 	.word	0x1fff90c4
    c5e4:	1fff90d4 	.word	0x1fff90d4
    c5e8:	1fff90e4 	.word	0x1fff90e4
    c5ec:	1fff8f74 	.word	0x1fff8f74

0000c5f0 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    c5f0:	b500      	push	{lr}
    c5f2:	b085      	sub	sp, #20
    c5f4:	4603      	mov	r3, r0
    c5f6:	9100      	str	r1, [sp, #0]
    c5f8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c5fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c600:	4a1a      	ldr	r2, [pc, #104]	; (c66c <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    c602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c606:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    c608:	9b00      	ldr	r3, [sp, #0]
    c60a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    c60e:	4619      	mov	r1, r3
    c610:	9803      	ldr	r0, [sp, #12]
    c612:	f7ff fc03 	bl	be1c <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    c616:	9b00      	ldr	r3, [sp, #0]
    c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c61a:	4619      	mov	r1, r3
    c61c:	9803      	ldr	r0, [sp, #12]
    c61e:	f7ff fc11 	bl	be44 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    c622:	9b00      	ldr	r3, [sp, #0]
    c624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c626:	4619      	mov	r1, r3
    c628:	9803      	ldr	r0, [sp, #12]
    c62a:	f7ff fb7a 	bl	bd22 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    c62e:	2101      	movs	r1, #1
    c630:	9803      	ldr	r0, [sp, #12]
    c632:	f7fe fce0 	bl	aff6 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    c636:	2101      	movs	r1, #1
    c638:	9803      	ldr	r0, [sp, #12]
    c63a:	f7fe fcf2 	bl	b022 <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    c63e:	9b00      	ldr	r3, [sp, #0]
    c640:	685b      	ldr	r3, [r3, #4]
    c642:	4619      	mov	r1, r3
    c644:	9803      	ldr	r0, [sp, #12]
    c646:	f7fe fb03 	bl	ac50 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    c64a:	9b00      	ldr	r3, [sp, #0]
    c64c:	681b      	ldr	r3, [r3, #0]
    c64e:	4619      	mov	r1, r3
    c650:	9803      	ldr	r0, [sp, #12]
    c652:	f7fe fb0d 	bl	ac70 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    c656:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c65a:	4a05      	ldr	r2, [pc, #20]	; (c670 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    c65c:	2101      	movs	r1, #1
    c65e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    c662:	bf00      	nop
    c664:	b005      	add	sp, #20
    c666:	f85d fb04 	ldr.w	pc, [sp], #4
    c66a:	bf00      	nop
    c66c:	000151c8 	.word	0x000151c8
    c670:	1fff8f94 	.word	0x1fff8f94

0000c674 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    c674:	b500      	push	{lr}
    c676:	b085      	sub	sp, #20
    c678:	4603      	mov	r3, r0
    c67a:	9100      	str	r1, [sp, #0]
    c67c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c680:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c684:	4a37      	ldr	r2, [pc, #220]	; (c764 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    c686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c68a:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    c68c:	2300      	movs	r3, #0
    c68e:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    c692:	2300      	movs	r3, #0
    c694:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    c698:	9b00      	ldr	r3, [sp, #0]
    c69a:	781b      	ldrb	r3, [r3, #0]
    c69c:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    c6a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c6a4:	085b      	lsrs	r3, r3, #1
    c6a6:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    c6aa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c6ae:	2201      	movs	r2, #1
    c6b0:	4619      	mov	r1, r3
    c6b2:	9803      	ldr	r0, [sp, #12]
    c6b4:	f7fe fe36 	bl	b324 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    c6b8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c6bc:	2201      	movs	r2, #1
    c6be:	4619      	mov	r1, r3
    c6c0:	9803      	ldr	r0, [sp, #12]
    c6c2:	f7ff fb63 	bl	bd8c <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c6c6:	9b00      	ldr	r3, [sp, #0]
    c6c8:	685b      	ldr	r3, [r3, #4]
    c6ca:	2b22      	cmp	r3, #34	; 0x22
    c6cc:	d003      	beq.n	c6d6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    c6ce:	9b00      	ldr	r3, [sp, #0]
    c6d0:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c6d2:	2b21      	cmp	r3, #33	; 0x21
    c6d4:	d113      	bne.n	c6fe <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    c6d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c6da:	005b      	lsls	r3, r3, #1
    c6dc:	b2db      	uxtb	r3, r3
    c6de:	3301      	adds	r3, #1
    c6e0:	b2d9      	uxtb	r1, r3
    c6e2:	9b00      	ldr	r3, [sp, #0]
    c6e4:	685b      	ldr	r3, [r3, #4]
    c6e6:	461a      	mov	r2, r3
    c6e8:	9803      	ldr	r0, [sp, #12]
    c6ea:	f7fe fb76 	bl	adda <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    c6ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c6f2:	2201      	movs	r2, #1
    c6f4:	4619      	mov	r1, r3
    c6f6:	9803      	ldr	r0, [sp, #12]
    c6f8:	f7fe fd89 	bl	b20e <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    c6fc:	e021      	b.n	c742 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c6fe:	9b00      	ldr	r3, [sp, #0]
    c700:	685b      	ldr	r3, [r3, #4]
    c702:	2b62      	cmp	r3, #98	; 0x62
    c704:	d003      	beq.n	c70e <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    c706:	9b00      	ldr	r3, [sp, #0]
    c708:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    c70a:	2b61      	cmp	r3, #97	; 0x61
    c70c:	d119      	bne.n	c742 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    c70e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c712:	005b      	lsls	r3, r3, #1
    c714:	b2db      	uxtb	r3, r3
    c716:	3301      	adds	r3, #1
    c718:	b2d9      	uxtb	r1, r3
    c71a:	9b00      	ldr	r3, [sp, #0]
    c71c:	685b      	ldr	r3, [r3, #4]
    c71e:	461a      	mov	r2, r3
    c720:	9803      	ldr	r0, [sp, #12]
    c722:	f7fe fb5a 	bl	adda <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    c726:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c72a:	2201      	movs	r2, #1
    c72c:	4619      	mov	r1, r3
    c72e:	9803      	ldr	r0, [sp, #12]
    c730:	f7fe fd6d 	bl	b20e <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    c734:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c738:	2201      	movs	r2, #1
    c73a:	4619      	mov	r1, r3
    c73c:	9803      	ldr	r0, [sp, #12]
    c73e:	f7fe fe18 	bl	b372 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    c742:	9b00      	ldr	r3, [sp, #0]
    c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c746:	2b00      	cmp	r3, #0
    c748:	d007      	beq.n	c75a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    c74a:	9b00      	ldr	r3, [sp, #0]
    c74c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c74e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c752:	4611      	mov	r1, r2
    c754:	4618      	mov	r0, r3
    c756:	f7ff fc47 	bl	bfe8 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    c75a:	bf00      	nop
    c75c:	b005      	add	sp, #20
    c75e:	f85d fb04 	ldr.w	pc, [sp], #4
    c762:	bf00      	nop
    c764:	000151c8 	.word	0x000151c8

0000c768 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    c768:	b500      	push	{lr}
    c76a:	b085      	sub	sp, #20
    c76c:	4603      	mov	r3, r0
    c76e:	9100      	str	r1, [sp, #0]
    c770:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c774:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c778:	4a15      	ldr	r2, [pc, #84]	; (c7d0 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    c77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c77e:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    c780:	9b00      	ldr	r3, [sp, #0]
    c782:	7819      	ldrb	r1, [r3, #0]
    c784:	9b00      	ldr	r3, [sp, #0]
    c786:	7ddb      	ldrb	r3, [r3, #23]
    c788:	461a      	mov	r2, r3
    c78a:	9803      	ldr	r0, [sp, #12]
    c78c:	f7ff fa8b 	bl	bca6 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    c790:	9b00      	ldr	r3, [sp, #0]
    c792:	7819      	ldrb	r1, [r3, #0]
    c794:	9b00      	ldr	r3, [sp, #0]
    c796:	7e1b      	ldrb	r3, [r3, #24]
    c798:	461a      	mov	r2, r3
    c79a:	9803      	ldr	r0, [sp, #12]
    c79c:	f7ff f8ba 	bl	b914 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    c7a0:	9b00      	ldr	r3, [sp, #0]
    c7a2:	7819      	ldrb	r1, [r3, #0]
    c7a4:	9b00      	ldr	r3, [sp, #0]
    c7a6:	7d5b      	ldrb	r3, [r3, #21]
    c7a8:	461a      	mov	r2, r3
    c7aa:	9803      	ldr	r0, [sp, #12]
    c7ac:	f7ff f87c 	bl	b8a8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    c7b0:	9b00      	ldr	r3, [sp, #0]
    c7b2:	7819      	ldrb	r1, [r3, #0]
    c7b4:	9b00      	ldr	r3, [sp, #0]
    c7b6:	7d9b      	ldrb	r3, [r3, #22]
    c7b8:	461a      	mov	r2, r3
    c7ba:	9803      	ldr	r0, [sp, #12]
    c7bc:	f7ff f834 	bl	b828 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    c7c0:	2101      	movs	r1, #1
    c7c2:	9803      	ldr	r0, [sp, #12]
    c7c4:	f7fe fcaa 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    c7c8:	bf00      	nop
    c7ca:	b005      	add	sp, #20
    c7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d0:	000151c8 	.word	0x000151c8

0000c7d4 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    c7d4:	b500      	push	{lr}
    c7d6:	b085      	sub	sp, #20
    c7d8:	4603      	mov	r3, r0
    c7da:	9100      	str	r1, [sp, #0]
    c7dc:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c7e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7e4:	4a48      	ldr	r2, [pc, #288]	; (c908 <Ftm_Pwm_Ip_InitChannel+0x134>)
    c7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7ea:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    c7ec:	2300      	movs	r3, #0
    c7ee:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    c7f2:	9b00      	ldr	r3, [sp, #0]
    c7f4:	781b      	ldrb	r3, [r3, #0]
    c7f6:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    c7fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c7fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c802:	9900      	ldr	r1, [sp, #0]
    c804:	8b48      	ldrh	r0, [r1, #26]
    c806:	4941      	ldr	r1, [pc, #260]	; (c90c <Ftm_Pwm_Ip_InitChannel+0x138>)
    c808:	00d2      	lsls	r2, r2, #3
    c80a:	4413      	add	r3, r2
    c80c:	4602      	mov	r2, r0
    c80e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    c812:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c816:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c81a:	9a00      	ldr	r2, [sp, #0]
    c81c:	69d2      	ldr	r2, [r2, #28]
    c81e:	483c      	ldr	r0, [pc, #240]	; (c910 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    c820:	00c9      	lsls	r1, r1, #3
    c822:	440b      	add	r3, r1
    c824:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    c828:	9b00      	ldr	r3, [sp, #0]
    c82a:	6a1a      	ldr	r2, [r3, #32]
    c82c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c830:	4619      	mov	r1, r3
    c832:	9803      	ldr	r0, [sp, #12]
    c834:	f7fe fe2e 	bl	b494 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    c838:	9b00      	ldr	r3, [sp, #0]
    c83a:	69da      	ldr	r2, [r3, #28]
    c83c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c840:	4619      	mov	r1, r3
    c842:	9803      	ldr	r0, [sp, #12]
    c844:	f7fe fc80 	bl	b148 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    c848:	9b00      	ldr	r3, [sp, #0]
    c84a:	685a      	ldr	r2, [r3, #4]
    c84c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c850:	4619      	mov	r1, r3
    c852:	9803      	ldr	r0, [sp, #12]
    c854:	f7fe fac1 	bl	adda <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    c858:	9b00      	ldr	r3, [sp, #0]
    c85a:	685a      	ldr	r2, [r3, #4]
    c85c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c860:	4619      	mov	r1, r3
    c862:	9803      	ldr	r0, [sp, #12]
    c864:	f7fe faf0 	bl	ae48 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    c868:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c86c:	9900      	ldr	r1, [sp, #0]
    c86e:	4618      	mov	r0, r3
    c870:	f7ff ff00 	bl	c674 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    c874:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c878:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c87c:	4923      	ldr	r1, [pc, #140]	; (c90c <Ftm_Pwm_Ip_InitChannel+0x138>)
    c87e:	00d2      	lsls	r2, r2, #3
    c880:	4413      	add	r3, r2
    c882:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    c886:	f89d 100b 	ldrb.w	r1, [sp, #11]
    c88a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c88e:	2301      	movs	r3, #1
    c890:	f000 f9c0 	bl	cc14 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    c894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c898:	9900      	ldr	r1, [sp, #0]
    c89a:	4618      	mov	r0, r3
    c89c:	f7ff ff64 	bl	c768 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    c8a0:	9b00      	ldr	r3, [sp, #0]
    c8a2:	7d1b      	ldrb	r3, [r3, #20]
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d005      	beq.n	c8b4 <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    c8a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c8ac:	4619      	mov	r1, r3
    c8ae:	9803      	ldr	r0, [sp, #12]
    c8b0:	f7fe fa35 	bl	ad1e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    c8b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c8b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c8bc:	4915      	ldr	r1, [pc, #84]	; (c914 <Ftm_Pwm_Ip_InitChannel+0x140>)
    c8be:	00d2      	lsls	r2, r2, #3
    c8c0:	4413      	add	r3, r2
    c8c2:	2201      	movs	r2, #1
    c8c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    c8c8:	9b00      	ldr	r3, [sp, #0]
    c8ca:	7a1b      	ldrb	r3, [r3, #8]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d016      	beq.n	c8fe <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    c8d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c8d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c8d8:	9a00      	ldr	r2, [sp, #0]
    c8da:	68d2      	ldr	r2, [r2, #12]
    c8dc:	480e      	ldr	r0, [pc, #56]	; (c918 <Ftm_Pwm_Ip_InitChannel+0x144>)
    c8de:	00c9      	lsls	r1, r1, #3
    c8e0:	440b      	add	r3, r1
    c8e2:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    c8e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    c8ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c8ee:	9a00      	ldr	r2, [sp, #0]
    c8f0:	6912      	ldr	r2, [r2, #16]
    c8f2:	4809      	ldr	r0, [pc, #36]	; (c918 <Ftm_Pwm_Ip_InitChannel+0x144>)
    c8f4:	00c9      	lsls	r1, r1, #3
    c8f6:	440b      	add	r3, r1
    c8f8:	00db      	lsls	r3, r3, #3
    c8fa:	4403      	add	r3, r0
    c8fc:	605a      	str	r2, [r3, #4]
    }

}
    c8fe:	bf00      	nop
    c900:	b005      	add	sp, #20
    c902:	f85d fb04 	ldr.w	pc, [sp], #4
    c906:	bf00      	nop
    c908:	000151c8 	.word	0x000151c8
    c90c:	1fff8dd4 	.word	0x1fff8dd4
    c910:	1fff9044 	.word	0x1fff9044
    c914:	1fff8fa4 	.word	0x1fff8fa4
    c918:	1fff8e74 	.word	0x1fff8e74

0000c91c <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    c91c:	b500      	push	{lr}
    c91e:	b085      	sub	sp, #20
    c920:	4603      	mov	r3, r0
    c922:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c926:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c92a:	4a17      	ldr	r2, [pc, #92]	; (c988 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    c92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c930:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    c932:	2100      	movs	r1, #0
    c934:	9803      	ldr	r0, [sp, #12]
    c936:	f7fe f99b 	bl	ac70 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    c93a:	2100      	movs	r1, #0
    c93c:	9803      	ldr	r0, [sp, #12]
    c93e:	f7fe fd63 	bl	b408 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    c942:	2101      	movs	r1, #1
    c944:	9803      	ldr	r0, [sp, #12]
    c946:	f7fe fd4e 	bl	b3e6 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    c94a:	2100      	movs	r1, #0
    c94c:	9803      	ldr	r0, [sp, #12]
    c94e:	f7fe fd37 	bl	b3c0 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    c952:	2100      	movs	r1, #0
    c954:	9803      	ldr	r0, [sp, #12]
    c956:	f7fe fde9 	bl	b52c <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    c95a:	2100      	movs	r1, #0
    c95c:	9803      	ldr	r0, [sp, #12]
    c95e:	f7fe f9bc 	bl	acda <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    c962:	2100      	movs	r1, #0
    c964:	9803      	ldr	r0, [sp, #12]
    c966:	f7fe f9fd 	bl	ad64 <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    c96a:	2100      	movs	r1, #0
    c96c:	9803      	ldr	r0, [sp, #12]
    c96e:	f7fe f9e8 	bl	ad42 <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    c972:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c976:	4a05      	ldr	r2, [pc, #20]	; (c98c <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    c978:	2100      	movs	r1, #0
    c97a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    c97e:	bf00      	nop
    c980:	b005      	add	sp, #20
    c982:	f85d fb04 	ldr.w	pc, [sp], #4
    c986:	bf00      	nop
    c988:	000151c8 	.word	0x000151c8
    c98c:	1fff8f94 	.word	0x1fff8f94

0000c990 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    c990:	b500      	push	{lr}
    c992:	b085      	sub	sp, #20
    c994:	4603      	mov	r3, r0
    c996:	460a      	mov	r2, r1
    c998:	f88d 3007 	strb.w	r3, [sp, #7]
    c99c:	4613      	mov	r3, r2
    c99e:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    c9a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9a6:	4a29      	ldr	r2, [pc, #164]	; (ca4c <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    c9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9ac:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    c9ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9b2:	085b      	lsrs	r3, r3, #1
    c9b4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    c9b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c9bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9c0:	4611      	mov	r1, r2
    c9c2:	4618      	mov	r0, r3
    c9c4:	f7ff fb9e 	bl	c104 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    c9c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c9cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9d0:	491f      	ldr	r1, [pc, #124]	; (ca50 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    c9d2:	00d2      	lsls	r2, r2, #3
    c9d4:	4413      	add	r3, r2
    c9d6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c9da:	f89d 1006 	ldrb.w	r1, [sp, #6]
    c9de:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c9e2:	2301      	movs	r3, #1
    c9e4:	f000 fa4c 	bl	ce80 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    c9e8:	2100      	movs	r1, #0
    c9ea:	9803      	ldr	r0, [sp, #12]
    c9ec:	f7fe fb96 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    c9f0:	2101      	movs	r1, #1
    c9f2:	9803      	ldr	r0, [sp, #12]
    c9f4:	f7fe fb57 	bl	b0a6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    c9f8:	2101      	movs	r1, #1
    c9fa:	9803      	ldr	r0, [sp, #12]
    c9fc:	f7fe fe65 	bl	b6ca <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    ca00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ca04:	2200      	movs	r2, #0
    ca06:	4619      	mov	r1, r3
    ca08:	9803      	ldr	r0, [sp, #12]
    ca0a:	f7fe fbbf 	bl	b18c <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ca0e:	2101      	movs	r1, #1
    ca10:	9803      	ldr	r0, [sp, #12]
    ca12:	f7fe fb83 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    ca16:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ca1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca1e:	005b      	lsls	r3, r3, #1
    ca20:	490c      	ldr	r1, [pc, #48]	; (ca54 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    ca22:	00d2      	lsls	r2, r2, #3
    ca24:	440a      	add	r2, r1
    ca26:	4413      	add	r3, r2
    ca28:	2200      	movs	r2, #0
    ca2a:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    ca2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ca30:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca34:	005b      	lsls	r3, r3, #1
    ca36:	3301      	adds	r3, #1
    ca38:	4906      	ldr	r1, [pc, #24]	; (ca54 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    ca3a:	00d2      	lsls	r2, r2, #3
    ca3c:	440a      	add	r2, r1
    ca3e:	4413      	add	r3, r2
    ca40:	2200      	movs	r2, #0
    ca42:	701a      	strb	r2, [r3, #0]

}
    ca44:	bf00      	nop
    ca46:	b005      	add	sp, #20
    ca48:	f85d fb04 	ldr.w	pc, [sp], #4
    ca4c:	000151c8 	.word	0x000151c8
    ca50:	1fff9044 	.word	0x1fff9044
    ca54:	1fff9024 	.word	0x1fff9024

0000ca58 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    ca58:	b500      	push	{lr}
    ca5a:	b085      	sub	sp, #20
    ca5c:	4603      	mov	r3, r0
    ca5e:	9100      	str	r1, [sp, #0]
    ca60:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ca64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca68:	4a15      	ldr	r2, [pc, #84]	; (cac0 <Ftm_Pwm_Ip_InitChFault+0x68>)
    ca6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca6e:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    ca70:	9b00      	ldr	r3, [sp, #0]
    ca72:	7819      	ldrb	r1, [r3, #0]
    ca74:	9b00      	ldr	r3, [sp, #0]
    ca76:	685b      	ldr	r3, [r3, #4]
    ca78:	461a      	mov	r2, r3
    ca7a:	9803      	ldr	r0, [sp, #12]
    ca7c:	f7ff f9f6 	bl	be6c <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    ca80:	9b00      	ldr	r3, [sp, #0]
    ca82:	7819      	ldrb	r1, [r3, #0]
    ca84:	9b00      	ldr	r3, [sp, #0]
    ca86:	7a1b      	ldrb	r3, [r3, #8]
    ca88:	461a      	mov	r2, r3
    ca8a:	9803      	ldr	r0, [sp, #12]
    ca8c:	f7ff fa35 	bl	befa <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    ca90:	9b00      	ldr	r3, [sp, #0]
    ca92:	781b      	ldrb	r3, [r3, #0]
    ca94:	2201      	movs	r2, #1
    ca96:	4619      	mov	r1, r3
    ca98:	9803      	ldr	r0, [sp, #12]
    ca9a:	f7ff fa0a 	bl	beb2 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    ca9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    caa2:	9a00      	ldr	r2, [sp, #0]
    caa4:	7812      	ldrb	r2, [r2, #0]
    caa6:	4610      	mov	r0, r2
    caa8:	9a00      	ldr	r2, [sp, #0]
    caaa:	68d2      	ldr	r2, [r2, #12]
    caac:	4905      	ldr	r1, [pc, #20]	; (cac4 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    caae:	009b      	lsls	r3, r3, #2
    cab0:	4403      	add	r3, r0
    cab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cab6:	bf00      	nop
    cab8:	b005      	add	sp, #20
    caba:	f85d fb04 	ldr.w	pc, [sp], #4
    cabe:	bf00      	nop
    cac0:	000151c8 	.word	0x000151c8
    cac4:	1fff8e34 	.word	0x1fff8e34

0000cac8 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    cac8:	b500      	push	{lr}
    caca:	b085      	sub	sp, #20
    cacc:	4603      	mov	r3, r0
    cace:	9100      	str	r1, [sp, #0]
    cad0:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    cad4:	2300      	movs	r3, #0
    cad6:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    cada:	4b29      	ldr	r3, [pc, #164]	; (cb80 <Ftm_Pwm_Ip_Init+0xb8>)
    cadc:	2200      	movs	r2, #0
    cade:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    cae0:	9b00      	ldr	r3, [sp, #0]
    cae2:	681a      	ldr	r2, [r3, #0]
    cae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cae8:	4611      	mov	r1, r2
    caea:	4618      	mov	r0, r3
    caec:	f7ff fcf6 	bl	c4dc <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    caf0:	2300      	movs	r3, #0
    caf2:	f88d 300f 	strb.w	r3, [sp, #15]
    caf6:	e011      	b.n	cb1c <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    caf8:	9b00      	ldr	r3, [sp, #0]
    cafa:	685a      	ldr	r2, [r3, #4]
    cafc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb00:	009b      	lsls	r3, r3, #2
    cb02:	4413      	add	r3, r2
    cb04:	681a      	ldr	r2, [r3, #0]
    cb06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb0a:	4611      	mov	r1, r2
    cb0c:	4618      	mov	r0, r3
    cb0e:	f7ff fe61 	bl	c7d4 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    cb12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb16:	3301      	adds	r3, #1
    cb18:	f88d 300f 	strb.w	r3, [sp, #15]
    cb1c:	9b00      	ldr	r3, [sp, #0]
    cb1e:	7a1b      	ldrb	r3, [r3, #8]
    cb20:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cb24:	429a      	cmp	r2, r3
    cb26:	d3e7      	bcc.n	caf8 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    cb28:	9b00      	ldr	r3, [sp, #0]
    cb2a:	7c1b      	ldrb	r3, [r3, #16]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d01b      	beq.n	cb68 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    cb30:	2300      	movs	r3, #0
    cb32:	f88d 300f 	strb.w	r3, [sp, #15]
    cb36:	e011      	b.n	cb5c <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    cb38:	9b00      	ldr	r3, [sp, #0]
    cb3a:	68da      	ldr	r2, [r3, #12]
    cb3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb40:	009b      	lsls	r3, r3, #2
    cb42:	4413      	add	r3, r2
    cb44:	681a      	ldr	r2, [r3, #0]
    cb46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb4a:	4611      	mov	r1, r2
    cb4c:	4618      	mov	r0, r3
    cb4e:	f7ff ff83 	bl	ca58 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    cb52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cb56:	3301      	adds	r3, #1
    cb58:	f88d 300f 	strb.w	r3, [sp, #15]
    cb5c:	9b00      	ldr	r3, [sp, #0]
    cb5e:	7c1b      	ldrb	r3, [r3, #16]
    cb60:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cb64:	429a      	cmp	r2, r3
    cb66:	d3e7      	bcc.n	cb38 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    cb68:	9b00      	ldr	r3, [sp, #0]
    cb6a:	681a      	ldr	r2, [r3, #0]
    cb6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb70:	4611      	mov	r1, r2
    cb72:	4618      	mov	r0, r3
    cb74:	f7ff fd3c 	bl	c5f0 <Ftm_Pwm_Ip_InitInstanceStart>
}
    cb78:	bf00      	nop
    cb7a:	b005      	add	sp, #20
    cb7c:	f85d fb04 	ldr.w	pc, [sp], #4
    cb80:	1fff8dc8 	.word	0x1fff8dc8

0000cb84 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    cb84:	b500      	push	{lr}
    cb86:	b085      	sub	sp, #20
    cb88:	4603      	mov	r3, r0
    cb8a:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cb8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cb92:	4a1e      	ldr	r2, [pc, #120]	; (cc0c <Ftm_Pwm_Ip_DeInit+0x88>)
    cb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb98:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    cb9a:	2300      	movs	r3, #0
    cb9c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    cba0:	9802      	ldr	r0, [sp, #8]
    cba2:	f7ff f80b 	bl	bbbc <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    cba6:	2300      	movs	r3, #0
    cba8:	f88d 300f 	strb.w	r3, [sp, #15]
    cbac:	e021      	b.n	cbf2 <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    cbae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbb6:	4916      	ldr	r1, [pc, #88]	; (cc10 <Ftm_Pwm_Ip_DeInit+0x8c>)
    cbb8:	00d2      	lsls	r2, r2, #3
    cbba:	4413      	add	r3, r2
    cbbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d011      	beq.n	cbe8 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    cbc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cbc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cbcc:	4611      	mov	r1, r2
    cbce:	4618      	mov	r0, r3
    cbd0:	f7ff fede 	bl	c990 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    cbd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cbd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbdc:	490c      	ldr	r1, [pc, #48]	; (cc10 <Ftm_Pwm_Ip_DeInit+0x8c>)
    cbde:	00d2      	lsls	r2, r2, #3
    cbe0:	4413      	add	r3, r2
    cbe2:	2200      	movs	r2, #0
    cbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    cbe8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbec:	3301      	adds	r3, #1
    cbee:	f88d 300f 	strb.w	r3, [sp, #15]
    cbf2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cbf6:	2b07      	cmp	r3, #7
    cbf8:	d9d9      	bls.n	cbae <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    cbfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cbfe:	4618      	mov	r0, r3
    cc00:	f7ff fe8c 	bl	c91c <Ftm_Pwm_Ip_DeInitInstance>
}
    cc04:	bf00      	nop
    cc06:	b005      	add	sp, #20
    cc08:	f85d fb04 	ldr.w	pc, [sp], #4
    cc0c:	000151c8 	.word	0x000151c8
    cc10:	1fff8fa4 	.word	0x1fff8fa4

0000cc14 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    cc14:	b510      	push	{r4, lr}
    cc16:	b088      	sub	sp, #32
    cc18:	4604      	mov	r4, r0
    cc1a:	4608      	mov	r0, r1
    cc1c:	4611      	mov	r1, r2
    cc1e:	461a      	mov	r2, r3
    cc20:	4623      	mov	r3, r4
    cc22:	f88d 300f 	strb.w	r3, [sp, #15]
    cc26:	4603      	mov	r3, r0
    cc28:	f88d 300e 	strb.w	r3, [sp, #14]
    cc2c:	460b      	mov	r3, r1
    cc2e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cc32:	4613      	mov	r3, r2
    cc34:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cc38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc3c:	4a54      	ldr	r2, [pc, #336]	; (cd90 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    cc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc42:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    cc44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cc48:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    cc4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc50:	085b      	lsrs	r3, r3, #1
    cc52:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    cc56:	f006 facd 	bl	131f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    cc5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cc5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc62:	494c      	ldr	r1, [pc, #304]	; (cd94 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    cc64:	00d2      	lsls	r2, r2, #3
    cc66:	4413      	add	r3, r2
    cc68:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    cc6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    cc70:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc74:	4619      	mov	r1, r3
    cc76:	9807      	ldr	r0, [sp, #28]
    cc78:	f7fe feb0 	bl	b9dc <Ftm_Pwm_Ip_GetChannelMode>
    cc7c:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    cc7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cc82:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc86:	4944      	ldr	r1, [pc, #272]	; (cd98 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    cc88:	00d2      	lsls	r2, r2, #3
    cc8a:	4413      	add	r3, r2
    cc8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cc90:	2b02      	cmp	r3, #2
    cc92:	d111      	bne.n	ccb8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    cc94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cc98:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cc9c:	493e      	ldr	r1, [pc, #248]	; (cd98 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    cc9e:	00d2      	lsls	r2, r2, #3
    cca0:	4413      	add	r3, r2
    cca2:	2201      	movs	r2, #1
    cca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    cca8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccac:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ccb0:	2300      	movs	r3, #0
    ccb2:	2200      	movs	r2, #0
    ccb4:	f000 f8e4 	bl	ce80 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    ccb8:	9b05      	ldr	r3, [sp, #20]
    ccba:	2b0a      	cmp	r3, #10
    ccbc:	d008      	beq.n	ccd0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    ccbe:	9b05      	ldr	r3, [sp, #20]
    ccc0:	2b09      	cmp	r3, #9
    ccc2:	d005      	beq.n	ccd0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    ccc4:	9b05      	ldr	r3, [sp, #20]
    ccc6:	2b12      	cmp	r3, #18
    ccc8:	d002      	beq.n	ccd0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    ccca:	9b05      	ldr	r3, [sp, #20]
    cccc:	2b11      	cmp	r3, #17
    ccce:	d10c      	bne.n	ccea <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    ccd0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    ccd4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    ccd8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ccdc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cce0:	9300      	str	r3, [sp, #0]
    cce2:	2300      	movs	r3, #0
    cce4:	f000 f992 	bl	d00c <Ftm_Pwm_Ip_UpdatePwmChannel>
    cce8:	e04c      	b.n	cd84 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ccea:	9b05      	ldr	r3, [sp, #20]
    ccec:	2b22      	cmp	r3, #34	; 0x22
    ccee:	d008      	beq.n	cd02 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    ccf0:	9b05      	ldr	r3, [sp, #20]
    ccf2:	2b62      	cmp	r3, #98	; 0x62
    ccf4:	d005      	beq.n	cd02 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    ccf6:	9b05      	ldr	r3, [sp, #20]
    ccf8:	2b61      	cmp	r3, #97	; 0x61
    ccfa:	d002      	beq.n	cd02 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    ccfc:	9b05      	ldr	r3, [sp, #20]
    ccfe:	2b21      	cmp	r3, #33	; 0x21
    cd00:	d140      	bne.n	cd84 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    cd02:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cd06:	f89d 3019 	ldrb.w	r3, [sp, #25]
    cd0a:	4924      	ldr	r1, [pc, #144]	; (cd9c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    cd0c:	0092      	lsls	r2, r2, #2
    cd0e:	4413      	add	r3, r2
    cd10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    cd14:	2b00      	cmp	r3, #0
    cd16:	d10d      	bne.n	cd34 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    cd18:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    cd1c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd20:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd24:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cd28:	9300      	str	r3, [sp, #0]
    cd2a:	4613      	mov	r3, r2
    cd2c:	2200      	movs	r2, #0
    cd2e:	f000 f96d 	bl	d00c <Ftm_Pwm_Ip_UpdatePwmChannel>
    cd32:	e027      	b.n	cd84 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    cd34:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cd38:	f89d 3019 	ldrb.w	r3, [sp, #25]
    cd3c:	4917      	ldr	r1, [pc, #92]	; (cd9c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    cd3e:	0092      	lsls	r2, r2, #2
    cd40:	4413      	add	r3, r2
    cd42:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    cd46:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    cd4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cd4e:	4618      	mov	r0, r3
    cd50:	f7ff f90a 	bl	bf68 <Ftm_Pwm_Ip_CalculatePhaseShift>
    cd54:	4603      	mov	r3, r0
    cd56:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    cd5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    cd5e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    cd62:	490e      	ldr	r1, [pc, #56]	; (cd9c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    cd64:	0092      	lsls	r2, r2, #2
    cd66:	4413      	add	r3, r2
    cd68:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    cd6c:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    cd70:	f89d 100e 	ldrb.w	r1, [sp, #14]
    cd74:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cd78:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cd7c:	9300      	str	r3, [sp, #0]
    cd7e:	4623      	mov	r3, r4
    cd80:	f000 f944 	bl	d00c <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    cd84:	f006 fa62 	bl	1324c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    cd88:	bf00      	nop
    cd8a:	b008      	add	sp, #32
    cd8c:	bd10      	pop	{r4, pc}
    cd8e:	bf00      	nop
    cd90:	000151c8 	.word	0x000151c8
    cd94:	1fff8dd4 	.word	0x1fff8dd4
    cd98:	1fff8fa4 	.word	0x1fff8fa4
    cd9c:	1fff8e14 	.word	0x1fff8e14

0000cda0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    cda0:	b510      	push	{r4, lr}
    cda2:	b084      	sub	sp, #16
    cda4:	4604      	mov	r4, r0
    cda6:	4608      	mov	r0, r1
    cda8:	4611      	mov	r1, r2
    cdaa:	461a      	mov	r2, r3
    cdac:	4623      	mov	r3, r4
    cdae:	f88d 3007 	strb.w	r3, [sp, #7]
    cdb2:	4603      	mov	r3, r0
    cdb4:	f88d 3006 	strb.w	r3, [sp, #6]
    cdb8:	460b      	mov	r3, r1
    cdba:	f8ad 3004 	strh.w	r3, [sp, #4]
    cdbe:	4613      	mov	r3, r2
    cdc0:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    cdc4:	2300      	movs	r3, #0
    cdc6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cdca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cdce:	4a29      	ldr	r2, [pc, #164]	; (ce74 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    cdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdd4:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    cdd6:	f006 fa5f 	bl	13298 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    cdda:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cdde:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cde2:	4925      	ldr	r1, [pc, #148]	; (ce78 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    cde4:	00d2      	lsls	r2, r2, #3
    cde6:	4413      	add	r3, r2
    cde8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cdec:	2b02      	cmp	r3, #2
    cdee:	d111      	bne.n	ce14 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    cdf0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cdf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cdf8:	491f      	ldr	r1, [pc, #124]	; (ce78 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    cdfa:	00d2      	lsls	r2, r2, #3
    cdfc:	4413      	add	r3, r2
    cdfe:	2201      	movs	r2, #1
    ce00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    ce04:	f89d 1006 	ldrb.w	r1, [sp, #6]
    ce08:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ce0c:	2300      	movs	r3, #0
    ce0e:	2200      	movs	r2, #0
    ce10:	f000 f836 	bl	ce80 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    ce14:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ce18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce1c:	2200      	movs	r2, #0
    ce1e:	4618      	mov	r0, r3
    ce20:	f000 f988 	bl	d134 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    ce24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce28:	4914      	ldr	r1, [pc, #80]	; (ce7c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    ce2a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ce2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    ce32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d103      	bne.n	ce42 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    ce3a:	2300      	movs	r3, #0
    ce3c:	f8ad 300e 	strh.w	r3, [sp, #14]
    ce40:	e003      	b.n	ce4a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    ce42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ce46:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    ce4a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ce4e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ce52:	f89d 1006 	ldrb.w	r1, [sp, #6]
    ce56:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ce5a:	f7ff fedb 	bl	cc14 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    ce5e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ce62:	4619      	mov	r1, r3
    ce64:	9802      	ldr	r0, [sp, #8]
    ce66:	f7fe f959 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    ce6a:	f006 fa41 	bl	132f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    ce6e:	bf00      	nop
    ce70:	b004      	add	sp, #16
    ce72:	bd10      	pop	{r4, pc}
    ce74:	000151c8 	.word	0x000151c8
    ce78:	1fff8fa4 	.word	0x1fff8fa4
    ce7c:	1fff8dcc 	.word	0x1fff8dcc

0000ce80 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    ce80:	b500      	push	{lr}
    ce82:	b089      	sub	sp, #36	; 0x24
    ce84:	9200      	str	r2, [sp, #0]
    ce86:	461a      	mov	r2, r3
    ce88:	4603      	mov	r3, r0
    ce8a:	f88d 3007 	strb.w	r3, [sp, #7]
    ce8e:	460b      	mov	r3, r1
    ce90:	f88d 3006 	strb.w	r3, [sp, #6]
    ce94:	4613      	mov	r3, r2
    ce96:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ce9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ce9e:	4a58      	ldr	r2, [pc, #352]	; (d000 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    cea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea4:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    cea6:	2300      	movs	r3, #0
    cea8:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    ceac:	2300      	movs	r3, #0
    ceae:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    ceb2:	2300      	movs	r3, #0
    ceb4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    ceb8:	2300      	movs	r3, #0
    ceba:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    cebe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cec2:	4619      	mov	r1, r3
    cec4:	9805      	ldr	r0, [sp, #20]
    cec6:	f7fe fd89 	bl	b9dc <Ftm_Pwm_Ip_GetChannelMode>
    ceca:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    cecc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ced0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ced4:	494b      	ldr	r1, [pc, #300]	; (d004 <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    ced6:	00d2      	lsls	r2, r2, #3
    ced8:	4413      	add	r3, r2
    ceda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cede:	2b02      	cmp	r3, #2
    cee0:	d109      	bne.n	cef6 <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    cee2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cee6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ceea:	4947      	ldr	r1, [pc, #284]	; (d008 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    ceec:	00d2      	lsls	r2, r2, #3
    ceee:	4413      	add	r3, r2
    cef0:	2200      	movs	r2, #0
    cef2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    cef6:	9805      	ldr	r0, [sp, #20]
    cef8:	f7fe fd5f 	bl	b9ba <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    cefc:	4603      	mov	r3, r0
    cefe:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    cf02:	9b03      	ldr	r3, [sp, #12]
    cf04:	2b22      	cmp	r3, #34	; 0x22
    cf06:	d008      	beq.n	cf1a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    cf08:	9b03      	ldr	r3, [sp, #12]
    cf0a:	2b62      	cmp	r3, #98	; 0x62
    cf0c:	d005      	beq.n	cf1a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    cf0e:	9b03      	ldr	r3, [sp, #12]
    cf10:	2b61      	cmp	r3, #97	; 0x61
    cf12:	d002      	beq.n	cf1a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    cf14:	9b03      	ldr	r3, [sp, #12]
    cf16:	2b21      	cmp	r3, #33	; 0x21
    cf18:	d103      	bne.n	cf22 <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    cf1a:	2303      	movs	r3, #3
    cf1c:	f8ad 301c 	strh.w	r3, [sp, #28]
    cf20:	e002      	b.n	cf28 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    cf22:	2301      	movs	r3, #1
    cf24:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    cf28:	9805      	ldr	r0, [sp, #20]
    cf2a:	f7fe fd4f 	bl	b9cc <Ftm_Pwm_Ip_GetPolInstance>
    cf2e:	4603      	mov	r3, r0
    cf30:	4619      	mov	r1, r3
    cf32:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cf36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cf3a:	fa02 f303 	lsl.w	r3, r2, r3
    cf3e:	b29b      	uxth	r3, r3
    cf40:	400b      	ands	r3, r1
    cf42:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    cf46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    cf4a:	021b      	lsls	r3, r3, #8
    cf4c:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    cf50:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cf54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cf58:	3308      	adds	r3, #8
    cf5a:	fa02 f303 	lsl.w	r3, r2, r3
    cf5e:	b29b      	uxth	r3, r3
    cf60:	43db      	mvns	r3, r3
    cf62:	b29a      	uxth	r2, r3
    cf64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    cf68:	4013      	ands	r3, r2
    cf6a:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    cf6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d027      	beq.n	cfc6 <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    cf76:	9b00      	ldr	r3, [sp, #0]
    cf78:	2b01      	cmp	r3, #1
    cf7a:	d109      	bne.n	cf90 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    cf7c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cf80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cf84:	3308      	adds	r3, #8
    cf86:	fa02 f303 	lsl.w	r3, r2, r3
    cf8a:	f8ad 301a 	strh.w	r3, [sp, #26]
    cf8e:	e002      	b.n	cf96 <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    cf90:	2300      	movs	r3, #0
    cf92:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    cf96:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    cf9a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    cf9e:	4053      	eors	r3, r2
    cfa0:	b29a      	uxth	r2, r3
    cfa2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    cfa6:	4313      	orrs	r3, r2
    cfa8:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    cfac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cfb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cfb4:	fa02 f303 	lsl.w	r3, r2, r3
    cfb8:	b29a      	uxth	r2, r3
    cfba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    cfbe:	4313      	orrs	r3, r2
    cfc0:	f8ad 301e 	strh.w	r3, [sp, #30]
    cfc4:	e00d      	b.n	cfe2 <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    cfc6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cfca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cfce:	fa02 f303 	lsl.w	r3, r2, r3
    cfd2:	b29b      	uxth	r3, r3
    cfd4:	43db      	mvns	r3, r3
    cfd6:	b29a      	uxth	r2, r3
    cfd8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    cfdc:	4013      	ands	r3, r2
    cfde:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    cfe2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    cfe6:	4619      	mov	r1, r3
    cfe8:	9805      	ldr	r0, [sp, #20]
    cfea:	f7fe fc86 	bl	b8fa <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    cfee:	2101      	movs	r1, #1
    cff0:	9805      	ldr	r0, [sp, #20]
    cff2:	f7fe f893 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    cff6:	bf00      	nop
    cff8:	b009      	add	sp, #36	; 0x24
    cffa:	f85d fb04 	ldr.w	pc, [sp], #4
    cffe:	bf00      	nop
    d000:	000151c8 	.word	0x000151c8
    d004:	1fff8fa4 	.word	0x1fff8fa4
    d008:	1fff8dd4 	.word	0x1fff8dd4

0000d00c <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    d00c:	b510      	push	{r4, lr}
    d00e:	b086      	sub	sp, #24
    d010:	4604      	mov	r4, r0
    d012:	4608      	mov	r0, r1
    d014:	4611      	mov	r1, r2
    d016:	461a      	mov	r2, r3
    d018:	4623      	mov	r3, r4
    d01a:	f88d 3007 	strb.w	r3, [sp, #7]
    d01e:	4603      	mov	r3, r0
    d020:	f88d 3006 	strb.w	r3, [sp, #6]
    d024:	460b      	mov	r3, r1
    d026:	f8ad 3004 	strh.w	r3, [sp, #4]
    d02a:	4613      	mov	r3, r2
    d02c:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d030:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d034:	4a3d      	ldr	r2, [pc, #244]	; (d12c <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    d036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d03a:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    d03c:	2300      	movs	r3, #0
    d03e:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    d040:	2300      	movs	r3, #0
    d042:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    d046:	2300      	movs	r3, #0
    d048:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    d04c:	2300      	movs	r3, #0
    d04e:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    d052:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d056:	085b      	lsrs	r3, r3, #1
    d058:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    d05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d060:	4a33      	ldr	r2, [pc, #204]	; (d130 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    d062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d066:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    d06a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d06e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d072:	429a      	cmp	r2, r3
    d074:	d805      	bhi.n	d082 <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    d076:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d07a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d07e:	429a      	cmp	r2, r3
    d080:	d903      	bls.n	d08a <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    d082:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d086:	2b00      	cmp	r3, #0
    d088:	d108      	bne.n	d09c <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    d08a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d08e:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    d092:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    d096:	f8ad 3010 	strh.w	r3, [sp, #16]
    d09a:	e001      	b.n	d0a0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d09c:	2301      	movs	r3, #1
    d09e:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    d0a0:	9b05      	ldr	r3, [sp, #20]
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	d13e      	bne.n	d124 <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    d0a6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    d0aa:	4619      	mov	r1, r3
    d0ac:	9803      	ldr	r0, [sp, #12]
    d0ae:	f7fe f8d5 	bl	b25c <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    d0b2:	4603      	mov	r3, r0
    d0b4:	2b00      	cmp	r3, #0
    d0b6:	d016      	beq.n	d0e6 <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    d0b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    d0bc:	005b      	lsls	r3, r3, #1
    d0be:	b2db      	uxtb	r3, r3
    d0c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    d0c4:	4619      	mov	r1, r3
    d0c6:	9803      	ldr	r0, [sp, #12]
    d0c8:	f7fd ff70 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    d0cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    d0d0:	005b      	lsls	r3, r3, #1
    d0d2:	b2db      	uxtb	r3, r3
    d0d4:	3301      	adds	r3, #1
    d0d6:	b2db      	uxtb	r3, r3
    d0d8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    d0dc:	4619      	mov	r1, r3
    d0de:	9803      	ldr	r0, [sp, #12]
    d0e0:	f7fd ff64 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>
    d0e4:	e018      	b.n	d118 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    d0e6:	9803      	ldr	r0, [sp, #12]
    d0e8:	f7fd fde9 	bl	acbe <Ftm_Pwm_Ip_GetCpwms>
    d0ec:	4603      	mov	r3, r0
    d0ee:	2b01      	cmp	r3, #1
    d0f0:	d10a      	bne.n	d108 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    d0f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    d0f6:	085b      	lsrs	r3, r3, #1
    d0f8:	b29a      	uxth	r2, r3
    d0fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d0fe:	4619      	mov	r1, r3
    d100:	9803      	ldr	r0, [sp, #12]
    d102:	f7fd ff53 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>
    d106:	e007      	b.n	d118 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    d108:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    d10c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d110:	4619      	mov	r1, r3
    d112:	9803      	ldr	r0, [sp, #12]
    d114:	f7fd ff4a 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d118:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d11c:	4619      	mov	r1, r3
    d11e:	9803      	ldr	r0, [sp, #12]
    d120:	f7fd fffc 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    d124:	9b05      	ldr	r3, [sp, #20]
}
    d126:	4618      	mov	r0, r3
    d128:	b006      	add	sp, #24
    d12a:	bd10      	pop	{r4, pc}
    d12c:	000151c8 	.word	0x000151c8
    d130:	1fff8dcc 	.word	0x1fff8dcc

0000d134 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    d134:	b500      	push	{lr}
    d136:	b085      	sub	sp, #20
    d138:	4603      	mov	r3, r0
    d13a:	9100      	str	r1, [sp, #0]
    d13c:	f88d 3007 	strb.w	r3, [sp, #7]
    d140:	4613      	mov	r3, r2
    d142:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d146:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d14a:	4a16      	ldr	r2, [pc, #88]	; (d1a4 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    d14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d150:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    d152:	2300      	movs	r3, #0
    d154:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    d156:	9b00      	ldr	r3, [sp, #0]
    d158:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    d15a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d15e:	9a00      	ldr	r2, [sp, #0]
    d160:	b291      	uxth	r1, r2
    d162:	4a11      	ldr	r2, [pc, #68]	; (d1a8 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    d164:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    d168:	9802      	ldr	r0, [sp, #8]
    d16a:	f7fd fda8 	bl	acbe <Ftm_Pwm_Ip_GetCpwms>
    d16e:	4603      	mov	r3, r0
    d170:	2b01      	cmp	r3, #1
    d172:	d103      	bne.n	d17c <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    d174:	9b03      	ldr	r3, [sp, #12]
    d176:	085b      	lsrs	r3, r3, #1
    d178:	9303      	str	r3, [sp, #12]
    d17a:	e002      	b.n	d182 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    d17c:	9b03      	ldr	r3, [sp, #12]
    d17e:	3b01      	subs	r3, #1
    d180:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    d182:	9b03      	ldr	r3, [sp, #12]
    d184:	b29b      	uxth	r3, r3
    d186:	4619      	mov	r1, r3
    d188:	9802      	ldr	r0, [sp, #8]
    d18a:	f7fd fdeb 	bl	ad64 <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d18e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d192:	4619      	mov	r1, r3
    d194:	9802      	ldr	r0, [sp, #8]
    d196:	f7fd ffc1 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    d19a:	2300      	movs	r3, #0
}
    d19c:	4618      	mov	r0, r3
    d19e:	b005      	add	sp, #20
    d1a0:	f85d fb04 	ldr.w	pc, [sp], #4
    d1a4:	000151c8 	.word	0x000151c8
    d1a8:	1fff8dcc 	.word	0x1fff8dcc

0000d1ac <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    d1ac:	b500      	push	{lr}
    d1ae:	b085      	sub	sp, #20
    d1b0:	4603      	mov	r3, r0
    d1b2:	460a      	mov	r2, r1
    d1b4:	f88d 3007 	strb.w	r3, [sp, #7]
    d1b8:	4613      	mov	r3, r2
    d1ba:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d1be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1c2:	4a0d      	ldr	r2, [pc, #52]	; (d1f8 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    d1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c8:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    d1ca:	f006 f909 	bl	133e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    d1ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d1d2:	4619      	mov	r1, r3
    d1d4:	9802      	ldr	r0, [sp, #8]
    d1d6:	f7fd fed3 	bl	af80 <Ftm_Pwm_Ip_GetChOutputValue>
    d1da:	4603      	mov	r3, r0
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d002      	beq.n	d1e6 <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    d1e0:	2301      	movs	r3, #1
    d1e2:	9303      	str	r3, [sp, #12]
    d1e4:	e001      	b.n	d1ea <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    d1e6:	2300      	movs	r3, #0
    d1e8:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    d1ea:	f006 f925 	bl	13438 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    d1ee:	9b03      	ldr	r3, [sp, #12]
}
    d1f0:	4618      	mov	r0, r3
    d1f2:	b005      	add	sp, #20
    d1f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d1f8:	000151c8 	.word	0x000151c8

0000d1fc <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    d1fc:	b500      	push	{lr}
    d1fe:	b087      	sub	sp, #28
    d200:	4603      	mov	r3, r0
    d202:	9100      	str	r1, [sp, #0]
    d204:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d20c:	4a38      	ldr	r2, [pc, #224]	; (d2f0 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    d20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d212:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    d214:	9b00      	ldr	r3, [sp, #0]
    d216:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    d21a:	f006 f933 	bl	13484 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    d21e:	9b00      	ldr	r3, [sp, #0]
    d220:	2b00      	cmp	r3, #0
    d222:	d014      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
    d224:	9b00      	ldr	r3, [sp, #0]
    d226:	2b01      	cmp	r3, #1
    d228:	d011      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    d22a:	9b00      	ldr	r3, [sp, #0]
    d22c:	2b02      	cmp	r3, #2
    d22e:	d00e      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    d230:	9b00      	ldr	r3, [sp, #0]
    d232:	2b03      	cmp	r3, #3
    d234:	d00b      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    d236:	9b00      	ldr	r3, [sp, #0]
    d238:	2b04      	cmp	r3, #4
    d23a:	d008      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    d23c:	9b00      	ldr	r3, [sp, #0]
    d23e:	2b05      	cmp	r3, #5
    d240:	d005      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    d242:	9b00      	ldr	r3, [sp, #0]
    d244:	2b06      	cmp	r3, #6
    d246:	d002      	beq.n	d24e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    d248:	9b00      	ldr	r3, [sp, #0]
    d24a:	2b07      	cmp	r3, #7
    d24c:	d136      	bne.n	d2bc <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    d24e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d252:	085b      	lsrs	r3, r3, #1
    d254:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    d258:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d25c:	4619      	mov	r1, r3
    d25e:	9805      	ldr	r0, [sp, #20]
    d260:	f7fe fbbc 	bl	b9dc <Ftm_Pwm_Ip_GetChannelMode>
    d264:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    d266:	f89d 2013 	ldrb.w	r2, [sp, #19]
    d26a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d26e:	4611      	mov	r1, r2
    d270:	4618      	mov	r0, r3
    d272:	f7fe ff47 	bl	c104 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d276:	9b03      	ldr	r3, [sp, #12]
    d278:	2b22      	cmp	r3, #34	; 0x22
    d27a:	d008      	beq.n	d28e <Ftm_Pwm_Ip_DisableNotification+0x92>
    d27c:	9b03      	ldr	r3, [sp, #12]
    d27e:	2b62      	cmp	r3, #98	; 0x62
    d280:	d005      	beq.n	d28e <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    d282:	9b03      	ldr	r3, [sp, #12]
    d284:	2b61      	cmp	r3, #97	; 0x61
    d286:	d002      	beq.n	d28e <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    d288:	9b03      	ldr	r3, [sp, #12]
    d28a:	2b21      	cmp	r3, #33	; 0x21
    d28c:	d129      	bne.n	d2e2 <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    d28e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    d292:	005b      	lsls	r3, r3, #1
    d294:	b2da      	uxtb	r2, r3
    d296:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d29a:	4611      	mov	r1, r2
    d29c:	4618      	mov	r0, r3
    d29e:	f7fe ff31 	bl	c104 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    d2a2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    d2a6:	005b      	lsls	r3, r3, #1
    d2a8:	b2db      	uxtb	r3, r3
    d2aa:	3301      	adds	r3, #1
    d2ac:	b2da      	uxtb	r2, r3
    d2ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2b2:	4611      	mov	r1, r2
    d2b4:	4618      	mov	r0, r3
    d2b6:	f7fe ff25 	bl	c104 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d2ba:	e012      	b.n	d2e2 <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    d2bc:	9b00      	ldr	r3, [sp, #0]
    d2be:	2b0a      	cmp	r3, #10
    d2c0:	d107      	bne.n	d2d2 <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    d2c2:	2100      	movs	r1, #0
    d2c4:	9805      	ldr	r0, [sp, #20]
    d2c6:	f7fe fd88 	bl	bdda <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    d2ca:	9805      	ldr	r0, [sp, #20]
    d2cc:	f7fe fd9b 	bl	be06 <Ftm_Pwm_Ip_ClearFaultFlag>
    d2d0:	e008      	b.n	d2e4 <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d2d2:	9805      	ldr	r0, [sp, #20]
    d2d4:	f7fd fd18 	bl	ad08 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    d2d8:	2100      	movs	r1, #0
    d2da:	9805      	ldr	r0, [sp, #20]
    d2dc:	f7fd fcfd 	bl	acda <Ftm_Pwm_Ip_SetTimerOverflowInt>
    d2e0:	e000      	b.n	d2e4 <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d2e2:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    d2e4:	f006 f8fa 	bl	134dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    d2e8:	bf00      	nop
    d2ea:	b007      	add	sp, #28
    d2ec:	f85d fb04 	ldr.w	pc, [sp], #4
    d2f0:	000151c8 	.word	0x000151c8

0000d2f4 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    d2f4:	b500      	push	{lr}
    d2f6:	b087      	sub	sp, #28
    d2f8:	4603      	mov	r3, r0
    d2fa:	460a      	mov	r2, r1
    d2fc:	f88d 3007 	strb.w	r3, [sp, #7]
    d300:	4613      	mov	r3, r2
    d302:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d306:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d30a:	4a22      	ldr	r2, [pc, #136]	; (d394 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    d30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d310:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    d312:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d316:	085b      	lsrs	r3, r3, #1
    d318:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    d31c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d320:	4619      	mov	r1, r3
    d322:	9805      	ldr	r0, [sp, #20]
    d324:	f7fe fb5a 	bl	b9dc <Ftm_Pwm_Ip_GetChannelMode>
    d328:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    d32a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d32e:	2201      	movs	r2, #1
    d330:	4619      	mov	r1, r3
    d332:	9805      	ldr	r0, [sp, #20]
    d334:	f7fd fde9 	bl	af0a <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    d338:	9b03      	ldr	r3, [sp, #12]
    d33a:	2b22      	cmp	r3, #34	; 0x22
    d33c:	d008      	beq.n	d350 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    d33e:	9b03      	ldr	r3, [sp, #12]
    d340:	2b62      	cmp	r3, #98	; 0x62
    d342:	d005      	beq.n	d350 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    d344:	9b03      	ldr	r3, [sp, #12]
    d346:	2b61      	cmp	r3, #97	; 0x61
    d348:	d002      	beq.n	d350 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    d34a:	9b03      	ldr	r3, [sp, #12]
    d34c:	2b21      	cmp	r3, #33	; 0x21
    d34e:	d11d      	bne.n	d38c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    d350:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d354:	005b      	lsls	r3, r3, #1
    d356:	b2db      	uxtb	r3, r3
    d358:	3301      	adds	r3, #1
    d35a:	b2db      	uxtb	r3, r3
    d35c:	4619      	mov	r1, r3
    d35e:	9805      	ldr	r0, [sp, #20]
    d360:	f7fd fdf6 	bl	af50 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    d364:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d368:	005b      	lsls	r3, r3, #1
    d36a:	b2db      	uxtb	r3, r3
    d36c:	2201      	movs	r2, #1
    d36e:	4619      	mov	r1, r3
    d370:	9805      	ldr	r0, [sp, #20]
    d372:	f7fd fdca 	bl	af0a <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    d376:	f89d 3013 	ldrb.w	r3, [sp, #19]
    d37a:	005b      	lsls	r3, r3, #1
    d37c:	b2db      	uxtb	r3, r3
    d37e:	3301      	adds	r3, #1
    d380:	b2db      	uxtb	r3, r3
    d382:	2201      	movs	r2, #1
    d384:	4619      	mov	r1, r3
    d386:	9805      	ldr	r0, [sp, #20]
    d388:	f7fd fdbf 	bl	af0a <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    d38c:	bf00      	nop
    d38e:	b007      	add	sp, #28
    d390:	f85d fb04 	ldr.w	pc, [sp], #4
    d394:	000151c8 	.word	0x000151c8

0000d398 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    d398:	b500      	push	{lr}
    d39a:	b085      	sub	sp, #20
    d39c:	4603      	mov	r3, r0
    d39e:	9100      	str	r1, [sp, #0]
    d3a0:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d3a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3a8:	4a23      	ldr	r2, [pc, #140]	; (d438 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    d3aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ae:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    d3b0:	9b00      	ldr	r3, [sp, #0]
    d3b2:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    d3b6:	f006 f8b7 	bl	13528 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    d3ba:	9b00      	ldr	r3, [sp, #0]
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d014      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
    d3c0:	9b00      	ldr	r3, [sp, #0]
    d3c2:	2b01      	cmp	r3, #1
    d3c4:	d011      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    d3c6:	9b00      	ldr	r3, [sp, #0]
    d3c8:	2b02      	cmp	r3, #2
    d3ca:	d00e      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    d3cc:	9b00      	ldr	r3, [sp, #0]
    d3ce:	2b03      	cmp	r3, #3
    d3d0:	d00b      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    d3d2:	9b00      	ldr	r3, [sp, #0]
    d3d4:	2b04      	cmp	r3, #4
    d3d6:	d008      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    d3d8:	9b00      	ldr	r3, [sp, #0]
    d3da:	2b05      	cmp	r3, #5
    d3dc:	d005      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    d3de:	9b00      	ldr	r3, [sp, #0]
    d3e0:	2b06      	cmp	r3, #6
    d3e2:	d002      	beq.n	d3ea <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    d3e4:	9b00      	ldr	r3, [sp, #0]
    d3e6:	2b07      	cmp	r3, #7
    d3e8:	d10e      	bne.n	d408 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    d3ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d3ee:	4619      	mov	r1, r3
    d3f0:	9803      	ldr	r0, [sp, #12]
    d3f2:	f7fd fdad 	bl	af50 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    d3f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d3fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3fe:	4611      	mov	r1, r2
    d400:	4618      	mov	r0, r3
    d402:	f7ff ff77 	bl	d2f4 <Ftm_Pwm_Ip_SetNormalNotificationCase>
    d406:	e011      	b.n	d42c <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    d408:	9b00      	ldr	r3, [sp, #0]
    d40a:	2b0a      	cmp	r3, #10
    d40c:	d107      	bne.n	d41e <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    d40e:	9803      	ldr	r0, [sp, #12]
    d410:	f7fe fcf9 	bl	be06 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    d414:	2101      	movs	r1, #1
    d416:	9803      	ldr	r0, [sp, #12]
    d418:	f7fe fcdf 	bl	bdda <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    d41c:	e006      	b.n	d42c <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d41e:	9803      	ldr	r0, [sp, #12]
    d420:	f7fd fc72 	bl	ad08 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    d424:	2101      	movs	r1, #1
    d426:	9803      	ldr	r0, [sp, #12]
    d428:	f7fd fc57 	bl	acda <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    d42c:	f006 f8a8 	bl	13580 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    d430:	bf00      	nop
    d432:	b005      	add	sp, #20
    d434:	f85d fb04 	ldr.w	pc, [sp], #4
    d438:	000151c8 	.word	0x000151c8

0000d43c <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    d43c:	b500      	push	{lr}
    d43e:	b085      	sub	sp, #20
    d440:	4603      	mov	r3, r0
    d442:	9100      	str	r1, [sp, #0]
    d444:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d44c:	4a0c      	ldr	r2, [pc, #48]	; (d480 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    d44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d452:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    d454:	9b00      	ldr	r3, [sp, #0]
    d456:	2b01      	cmp	r3, #1
    d458:	d104      	bne.n	d464 <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d45a:	2100      	movs	r1, #0
    d45c:	9803      	ldr	r0, [sp, #12]
    d45e:	f7fd fc07 	bl	ac70 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    d462:	e008      	b.n	d476 <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    d464:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d468:	4a06      	ldr	r2, [pc, #24]	; (d484 <Ftm_Pwm_Ip_SetPowerState+0x48>)
    d46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d46e:	4619      	mov	r1, r3
    d470:	9803      	ldr	r0, [sp, #12]
    d472:	f7fd fbfd 	bl	ac70 <Ftm_Pwm_Ip_SetClockSource>
}
    d476:	bf00      	nop
    d478:	b005      	add	sp, #20
    d47a:	f85d fb04 	ldr.w	pc, [sp], #4
    d47e:	bf00      	nop
    d480:	000151c8 	.word	0x000151c8
    d484:	1fff90c4 	.word	0x1fff90c4

0000d488 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    d488:	b500      	push	{lr}
    d48a:	b085      	sub	sp, #20
    d48c:	4603      	mov	r3, r0
    d48e:	9100      	str	r1, [sp, #0]
    d490:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d494:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d498:	4a0e      	ldr	r2, [pc, #56]	; (d4d4 <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    d49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d49e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    d4a0:	9b00      	ldr	r3, [sp, #0]
    d4a2:	2b01      	cmp	r3, #1
    d4a4:	d109      	bne.n	d4ba <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    d4a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4aa:	4a0b      	ldr	r2, [pc, #44]	; (d4d8 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    d4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4b0:	4619      	mov	r1, r3
    d4b2:	9803      	ldr	r0, [sp, #12]
    d4b4:	f7fd fbcc 	bl	ac50 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    d4b8:	e008      	b.n	d4cc <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    d4ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4be:	4a07      	ldr	r2, [pc, #28]	; (d4dc <Ftm_Pwm_Ip_SetClockMode+0x54>)
    d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c4:	4619      	mov	r1, r3
    d4c6:	9803      	ldr	r0, [sp, #12]
    d4c8:	f7fd fbc2 	bl	ac50 <Ftm_Pwm_Ip_SetClockPs>
}
    d4cc:	bf00      	nop
    d4ce:	b005      	add	sp, #20
    d4d0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4d4:	000151c8 	.word	0x000151c8
    d4d8:	1fff90e4 	.word	0x1fff90e4
    d4dc:	1fff90d4 	.word	0x1fff90d4

0000d4e0 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    d4e0:	b500      	push	{lr}
    d4e2:	b085      	sub	sp, #20
    d4e4:	4603      	mov	r3, r0
    d4e6:	460a      	mov	r2, r1
    d4e8:	f88d 3007 	strb.w	r3, [sp, #7]
    d4ec:	4613      	mov	r3, r2
    d4ee:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d4f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4f6:	4a07      	ldr	r2, [pc, #28]	; (d514 <Ftm_Pwm_Ip_ResetCounter+0x34>)
    d4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4fc:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    d4fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d502:	4619      	mov	r1, r3
    d504:	9803      	ldr	r0, [sp, #12]
    d506:	f7fe f8ae 	bl	b666 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    d50a:	bf00      	nop
    d50c:	b005      	add	sp, #20
    d50e:	f85d fb04 	ldr.w	pc, [sp], #4
    d512:	bf00      	nop
    d514:	000151c8 	.word	0x000151c8

0000d518 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    d518:	b084      	sub	sp, #16
    d51a:	4603      	mov	r3, r0
    d51c:	460a      	mov	r2, r1
    d51e:	f88d 3007 	strb.w	r3, [sp, #7]
    d522:	4613      	mov	r3, r2
    d524:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    d528:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d52c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d530:	4905      	ldr	r1, [pc, #20]	; (d548 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    d532:	00d2      	lsls	r2, r2, #3
    d534:	4413      	add	r3, r2
    d536:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    d53a:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    d53e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    d542:	4618      	mov	r0, r3
    d544:	b004      	add	sp, #16
    d546:	4770      	bx	lr
    d548:	1fff8dd4 	.word	0x1fff8dd4

0000d54c <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    d54c:	b500      	push	{lr}
    d54e:	b087      	sub	sp, #28
    d550:	9202      	str	r2, [sp, #8]
    d552:	9301      	str	r3, [sp, #4]
    d554:	4603      	mov	r3, r0
    d556:	f88d 300f 	strb.w	r3, [sp, #15]
    d55a:	460b      	mov	r3, r1
    d55c:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d560:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d564:	4a1f      	ldr	r2, [pc, #124]	; (d5e4 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    d566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d56a:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    d56c:	2300      	movs	r3, #0
    d56e:	f88d 3017 	strb.w	r3, [sp, #23]
    d572:	e026      	b.n	d5c2 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    d574:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d578:	9a02      	ldr	r2, [sp, #8]
    d57a:	4413      	add	r3, r2
    d57c:	7819      	ldrb	r1, [r3, #0]
    d57e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d582:	005b      	lsls	r3, r3, #1
    d584:	9a01      	ldr	r2, [sp, #4]
    d586:	4413      	add	r3, r2
    d588:	881b      	ldrh	r3, [r3, #0]
    d58a:	461a      	mov	r2, r3
    d58c:	9804      	ldr	r0, [sp, #16]
    d58e:	f7fd fd0d 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    d592:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d596:	005b      	lsls	r3, r3, #1
    d598:	9a01      	ldr	r2, [sp, #4]
    d59a:	441a      	add	r2, r3
    d59c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d5a0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    d5a4:	9802      	ldr	r0, [sp, #8]
    d5a6:	4401      	add	r1, r0
    d5a8:	7809      	ldrb	r1, [r1, #0]
    d5aa:	4608      	mov	r0, r1
    d5ac:	8811      	ldrh	r1, [r2, #0]
    d5ae:	4a0e      	ldr	r2, [pc, #56]	; (d5e8 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    d5b0:	00db      	lsls	r3, r3, #3
    d5b2:	4403      	add	r3, r0
    d5b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    d5b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d5bc:	3301      	adds	r3, #1
    d5be:	f88d 3017 	strb.w	r3, [sp, #23]
    d5c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d5c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d5ca:	429a      	cmp	r2, r3
    d5cc:	d3d2      	bcc.n	d574 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d5ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d5d2:	4619      	mov	r1, r3
    d5d4:	9804      	ldr	r0, [sp, #16]
    d5d6:	f7fd fda1 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d5da:	bf00      	nop
    d5dc:	b007      	add	sp, #28
    d5de:	f85d fb04 	ldr.w	pc, [sp], #4
    d5e2:	bf00      	nop
    d5e4:	000151c8 	.word	0x000151c8
    d5e8:	1fff8dd4 	.word	0x1fff8dd4

0000d5ec <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    d5ec:	b500      	push	{lr}
    d5ee:	b085      	sub	sp, #20
    d5f0:	4603      	mov	r3, r0
    d5f2:	9100      	str	r1, [sp, #0]
    d5f4:	f88d 3007 	strb.w	r3, [sp, #7]
    d5f8:	4613      	mov	r3, r2
    d5fa:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d5fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d602:	4a0b      	ldr	r2, [pc, #44]	; (d630 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d608:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    d60a:	f006 f831 	bl	13670 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    d60e:	9900      	ldr	r1, [sp, #0]
    d610:	9803      	ldr	r0, [sp, #12]
    d612:	f7fd fde0 	bl	b1d6 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d616:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d61a:	4619      	mov	r1, r3
    d61c:	9803      	ldr	r0, [sp, #12]
    d61e:	f7fd fd7d 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    d622:	f006 f851 	bl	136c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    d626:	bf00      	nop
    d628:	b005      	add	sp, #20
    d62a:	f85d fb04 	ldr.w	pc, [sp], #4
    d62e:	bf00      	nop
    d630:	000151c8 	.word	0x000151c8

0000d634 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    d634:	b500      	push	{lr}
    d636:	b085      	sub	sp, #20
    d638:	4603      	mov	r3, r0
    d63a:	9100      	str	r1, [sp, #0]
    d63c:	f88d 3007 	strb.w	r3, [sp, #7]
    d640:	4613      	mov	r3, r2
    d642:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d646:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d64a:	4a0b      	ldr	r2, [pc, #44]	; (d678 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    d64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d650:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    d652:	f006 f85f 	bl	13714 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    d656:	9900      	ldr	r1, [sp, #0]
    d658:	9803      	ldr	r0, [sp, #12]
    d65a:	f7fd fdcb 	bl	b1f4 <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d65e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d662:	4619      	mov	r1, r3
    d664:	9803      	ldr	r0, [sp, #12]
    d666:	f7fd fd59 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    d66a:	f006 f87f 	bl	1376c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    d66e:	bf00      	nop
    d670:	b005      	add	sp, #20
    d672:	f85d fb04 	ldr.w	pc, [sp], #4
    d676:	bf00      	nop
    d678:	000151c8 	.word	0x000151c8

0000d67c <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    d67c:	b510      	push	{r4, lr}
    d67e:	b084      	sub	sp, #16
    d680:	4604      	mov	r4, r0
    d682:	4608      	mov	r0, r1
    d684:	4611      	mov	r1, r2
    d686:	461a      	mov	r2, r3
    d688:	4623      	mov	r3, r4
    d68a:	f88d 3007 	strb.w	r3, [sp, #7]
    d68e:	4603      	mov	r3, r0
    d690:	f88d 3006 	strb.w	r3, [sp, #6]
    d694:	460b      	mov	r3, r1
    d696:	f8ad 3004 	strh.w	r3, [sp, #4]
    d69a:	4613      	mov	r3, r2
    d69c:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d6a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6a4:	4a2e      	ldr	r2, [pc, #184]	; (d760 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    d6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6aa:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    d6ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d6b0:	085b      	lsrs	r3, r3, #1
    d6b2:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    d6b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d6ba:	492a      	ldr	r1, [pc, #168]	; (d764 <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    d6bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d6c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    d6c4:	f006 f878 	bl	137b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    d6c8:	9803      	ldr	r0, [sp, #12]
    d6ca:	f7fd faf8 	bl	acbe <Ftm_Pwm_Ip_GetCpwms>
    d6ce:	4603      	mov	r3, r0
    d6d0:	2b01      	cmp	r3, #1
    d6d2:	d108      	bne.n	d6e6 <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    d6d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d6d8:	085b      	lsrs	r3, r3, #1
    d6da:	b29b      	uxth	r3, r3
    d6dc:	4619      	mov	r1, r3
    d6de:	9803      	ldr	r0, [sp, #12]
    d6e0:	f7fd fb40 	bl	ad64 <Ftm_Pwm_Ip_SetMod>
    d6e4:	e007      	b.n	d6f6 <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    d6e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d6ea:	3b01      	subs	r3, #1
    d6ec:	b29b      	uxth	r3, r3
    d6ee:	4619      	mov	r1, r3
    d6f0:	9803      	ldr	r0, [sp, #12]
    d6f2:	f7fd fb37 	bl	ad64 <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    d6f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6fa:	005b      	lsls	r3, r3, #1
    d6fc:	b2db      	uxtb	r3, r3
    d6fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d702:	4619      	mov	r1, r3
    d704:	9803      	ldr	r0, [sp, #12]
    d706:	f7fd fc51 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    d70a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d70e:	085b      	lsrs	r3, r3, #1
    d710:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    d714:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d718:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d71c:	4912      	ldr	r1, [pc, #72]	; (d768 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    d71e:	00d2      	lsls	r2, r2, #3
    d720:	4413      	add	r3, r2
    d722:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    d726:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    d72a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d72e:	005b      	lsls	r3, r3, #1
    d730:	b2db      	uxtb	r3, r3
    d732:	3301      	adds	r3, #1
    d734:	b2d9      	uxtb	r1, r3
    d736:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d73a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    d73e:	4413      	add	r3, r2
    d740:	b29b      	uxth	r3, r3
    d742:	461a      	mov	r2, r3
    d744:	9803      	ldr	r0, [sp, #12]
    d746:	f7fd fc31 	bl	afac <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    d74a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d74e:	4619      	mov	r1, r3
    d750:	9803      	ldr	r0, [sp, #12]
    d752:	f7fd fce3 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    d756:	f006 f85b 	bl	13810 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    d75a:	bf00      	nop
    d75c:	b004      	add	sp, #16
    d75e:	bd10      	pop	{r4, pc}
    d760:	000151c8 	.word	0x000151c8
    d764:	1fff8dcc 	.word	0x1fff8dcc
    d768:	1fff8dd4 	.word	0x1fff8dd4

0000d76c <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    d76c:	b510      	push	{r4, lr}
    d76e:	b086      	sub	sp, #24
    d770:	4604      	mov	r4, r0
    d772:	4608      	mov	r0, r1
    d774:	4611      	mov	r1, r2
    d776:	461a      	mov	r2, r3
    d778:	4623      	mov	r3, r4
    d77a:	f88d 300f 	strb.w	r3, [sp, #15]
    d77e:	4603      	mov	r3, r0
    d780:	f88d 300e 	strb.w	r3, [sp, #14]
    d784:	460b      	mov	r3, r1
    d786:	f8ad 300c 	strh.w	r3, [sp, #12]
    d78a:	4613      	mov	r3, r2
    d78c:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    d790:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d794:	085b      	lsrs	r3, r3, #1
    d796:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    d79a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d79e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    d7a2:	492d      	ldr	r1, [pc, #180]	; (d858 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    d7a4:	0092      	lsls	r2, r2, #2
    d7a6:	4413      	add	r3, r2
    d7a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    d7ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    d7b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d7b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d7b8:	4928      	ldr	r1, [pc, #160]	; (d85c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    d7ba:	00d2      	lsls	r2, r2, #3
    d7bc:	4413      	add	r3, r2
    d7be:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    d7c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    d7c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    d7ca:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    d7ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    d7d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    d7d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d7da:	4618      	mov	r0, r3
    d7dc:	f7fe fbc4 	bl	bf68 <Ftm_Pwm_Ip_CalculatePhaseShift>
    d7e0:	4603      	mov	r3, r0
    d7e2:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    d7e6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d7ea:	2b00      	cmp	r3, #0
    d7ec:	d003      	beq.n	d7f6 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    d7ee:	2300      	movs	r3, #0
    d7f0:	f88d 3017 	strb.w	r3, [sp, #23]
    d7f4:	e002      	b.n	d7fc <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    d7f6:	2301      	movs	r3, #1
    d7f8:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    d7fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d800:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d804:	4916      	ldr	r1, [pc, #88]	; (d860 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    d806:	00d2      	lsls	r2, r2, #3
    d808:	4413      	add	r3, r2
    d80a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d80e:	2b02      	cmp	r3, #2
    d810:	d111      	bne.n	d836 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d812:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d816:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d81a:	4911      	ldr	r1, [pc, #68]	; (d860 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    d81c:	00d2      	lsls	r2, r2, #3
    d81e:	4413      	add	r3, r2
    d820:	2201      	movs	r2, #1
    d822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    d826:	f89d 100e 	ldrb.w	r1, [sp, #14]
    d82a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    d82e:	2300      	movs	r3, #0
    d830:	2200      	movs	r2, #0
    d832:	f7ff fb25 	bl	ce80 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    d836:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    d83a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d83e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    d842:	f89d 000f 	ldrb.w	r0, [sp, #15]
    d846:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d84a:	9300      	str	r3, [sp, #0]
    d84c:	4623      	mov	r3, r4
    d84e:	f7ff fbdd 	bl	d00c <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    d852:	bf00      	nop
    d854:	b006      	add	sp, #24
    d856:	bd10      	pop	{r4, pc}
    d858:	1fff8e14 	.word	0x1fff8e14
    d85c:	1fff8dd4 	.word	0x1fff8dd4
    d860:	1fff8fa4 	.word	0x1fff8fa4

0000d864 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    d864:	b500      	push	{lr}
    d866:	b085      	sub	sp, #20
    d868:	4603      	mov	r3, r0
    d86a:	9100      	str	r1, [sp, #0]
    d86c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d870:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d874:	4a07      	ldr	r2, [pc, #28]	; (d894 <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    d876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d87a:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    d87c:	f005 ffee 	bl	1385c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    d880:	9900      	ldr	r1, [sp, #0]
    d882:	9803      	ldr	r0, [sp, #12]
    d884:	f7fd fdea 	bl	b45c <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    d888:	f006 f814 	bl	138b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    d88c:	bf00      	nop
    d88e:	b005      	add	sp, #20
    d890:	f85d fb04 	ldr.w	pc, [sp], #4
    d894:	000151c8 	.word	0x000151c8

0000d898 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    d898:	b500      	push	{lr}
    d89a:	b085      	sub	sp, #20
    d89c:	4603      	mov	r3, r0
    d89e:	9100      	str	r1, [sp, #0]
    d8a0:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d8a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8a8:	4a07      	ldr	r2, [pc, #28]	; (d8c8 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    d8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ae:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    d8b0:	f006 f826 	bl	13900 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    d8b4:	9900      	ldr	r1, [sp, #0]
    d8b6:	9803      	ldr	r0, [sp, #12]
    d8b8:	f7fd fddd 	bl	b476 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    d8bc:	f006 f84c 	bl	13958 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    d8c0:	bf00      	nop
    d8c2:	b005      	add	sp, #20
    d8c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d8c8:	000151c8 	.word	0x000151c8

0000d8cc <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    d8cc:	b500      	push	{lr}
    d8ce:	b085      	sub	sp, #20
    d8d0:	4603      	mov	r3, r0
    d8d2:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d8d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d8da:	4a08      	ldr	r2, [pc, #32]	; (d8fc <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    d8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e0:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    d8e2:	f006 f85f 	bl	139a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d8e6:	2101      	movs	r1, #1
    d8e8:	9803      	ldr	r0, [sp, #12]
    d8ea:	f7fd fc17 	bl	b11c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    d8ee:	f006 f885 	bl	139fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    d8f2:	bf00      	nop
    d8f4:	b005      	add	sp, #20
    d8f6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8fa:	bf00      	nop
    d8fc:	000151c8 	.word	0x000151c8

0000d900 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    d900:	b500      	push	{lr}
    d902:	b085      	sub	sp, #20
    d904:	4603      	mov	r3, r0
    d906:	f88d 3007 	strb.w	r3, [sp, #7]
    d90a:	460b      	mov	r3, r1
    d90c:	f88d 3006 	strb.w	r3, [sp, #6]
    d910:	4613      	mov	r3, r2
    d912:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d916:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d91a:	4a17      	ldr	r2, [pc, #92]	; (d978 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    d91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d920:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    d922:	f006 f891 	bl	13a48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    d926:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d92a:	2b3f      	cmp	r3, #63	; 0x3f
    d92c:	d80b      	bhi.n	d946 <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    d92e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d932:	b2db      	uxtb	r3, r3
    d934:	4619      	mov	r1, r3
    d936:	9803      	ldr	r0, [sp, #12]
    d938:	f7fd fd42 	bl	b3c0 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    d93c:	2100      	movs	r1, #0
    d93e:	9803      	ldr	r0, [sp, #12]
    d940:	f7fd fd62 	bl	b408 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    d944:	e012      	b.n	d96c <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    d946:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d94a:	b2db      	uxtb	r3, r3
    d94c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d950:	b2db      	uxtb	r3, r3
    d952:	4619      	mov	r1, r3
    d954:	9803      	ldr	r0, [sp, #12]
    d956:	f7fd fd33 	bl	b3c0 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    d95a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d95e:	099b      	lsrs	r3, r3, #6
    d960:	b29b      	uxth	r3, r3
    d962:	b2db      	uxtb	r3, r3
    d964:	4619      	mov	r1, r3
    d966:	9803      	ldr	r0, [sp, #12]
    d968:	f7fd fd4e 	bl	b408 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    d96c:	f006 f898 	bl	13aa0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    d970:	bf00      	nop
    d972:	b005      	add	sp, #20
    d974:	f85d fb04 	ldr.w	pc, [sp], #4
    d978:	000151c8 	.word	0x000151c8

0000d97c <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    d97c:	b082      	sub	sp, #8
    d97e:	9001      	str	r0, [sp, #4]
    d980:	460b      	mov	r3, r1
    d982:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    d986:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    d98a:	4618      	mov	r0, r3
    d98c:	b002      	add	sp, #8
    d98e:	4770      	bx	lr

0000d990 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    d990:	b510      	push	{r4, lr}
    d992:	b084      	sub	sp, #16
    d994:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    d996:	2300      	movs	r3, #0
    d998:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    d99a:	493e      	ldr	r1, [pc, #248]	; (da94 <Pwm_Init+0x104>)
    d99c:	9a02      	ldr	r2, [sp, #8]
    d99e:	4613      	mov	r3, r2
    d9a0:	00db      	lsls	r3, r3, #3
    d9a2:	1a9b      	subs	r3, r3, r2
    d9a4:	009b      	lsls	r3, r3, #2
    d9a6:	440b      	add	r3, r1
    d9a8:	9a01      	ldr	r2, [sp, #4]
    d9aa:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    d9ac:	2300      	movs	r3, #0
    d9ae:	f88d 300f 	strb.w	r3, [sp, #15]
    d9b2:	e017      	b.n	d9e4 <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    d9b4:	4937      	ldr	r1, [pc, #220]	; (da94 <Pwm_Init+0x104>)
    d9b6:	9a02      	ldr	r2, [sp, #8]
    d9b8:	4613      	mov	r3, r2
    d9ba:	00db      	lsls	r3, r3, #3
    d9bc:	1a9b      	subs	r3, r3, r2
    d9be:	009b      	lsls	r3, r3, #2
    d9c0:	440b      	add	r3, r1
    d9c2:	681b      	ldr	r3, [r3, #0]
    d9c4:	68d9      	ldr	r1, [r3, #12]
    d9c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d9ca:	4613      	mov	r3, r2
    d9cc:	005b      	lsls	r3, r3, #1
    d9ce:	4413      	add	r3, r2
    d9d0:	009b      	lsls	r3, r3, #2
    d9d2:	440b      	add	r3, r1
    d9d4:	4618      	mov	r0, r3
    d9d6:	f000 f985 	bl	dce4 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    d9da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d9de:	3301      	adds	r3, #1
    d9e0:	f88d 300f 	strb.w	r3, [sp, #15]
    d9e4:	492b      	ldr	r1, [pc, #172]	; (da94 <Pwm_Init+0x104>)
    d9e6:	9a02      	ldr	r2, [sp, #8]
    d9e8:	4613      	mov	r3, r2
    d9ea:	00db      	lsls	r3, r3, #3
    d9ec:	1a9b      	subs	r3, r3, r2
    d9ee:	009b      	lsls	r3, r3, #2
    d9f0:	440b      	add	r3, r1
    d9f2:	681b      	ldr	r3, [r3, #0]
    d9f4:	7a1b      	ldrb	r3, [r3, #8]
    d9f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d9fa:	429a      	cmp	r2, r3
    d9fc:	d3da      	bcc.n	d9b4 <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    d9fe:	2300      	movs	r3, #0
    da00:	f88d 300f 	strb.w	r3, [sp, #15]
    da04:	e034      	b.n	da70 <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    da06:	4923      	ldr	r1, [pc, #140]	; (da94 <Pwm_Init+0x104>)
    da08:	9a02      	ldr	r2, [sp, #8]
    da0a:	4613      	mov	r3, r2
    da0c:	00db      	lsls	r3, r3, #3
    da0e:	1a9b      	subs	r3, r3, r2
    da10:	009b      	lsls	r3, r3, #2
    da12:	440b      	add	r3, r1
    da14:	681b      	ldr	r3, [r3, #0]
    da16:	6859      	ldr	r1, [r3, #4]
    da18:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da1c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    da20:	4613      	mov	r3, r2
    da22:	005b      	lsls	r3, r3, #1
    da24:	4413      	add	r3, r2
    da26:	00db      	lsls	r3, r3, #3
    da28:	4419      	add	r1, r3
    da2a:	4c1a      	ldr	r4, [pc, #104]	; (da94 <Pwm_Init+0x104>)
    da2c:	9a02      	ldr	r2, [sp, #8]
    da2e:	4613      	mov	r3, r2
    da30:	00db      	lsls	r3, r3, #3
    da32:	1a9b      	subs	r3, r3, r2
    da34:	4403      	add	r3, r0
    da36:	3302      	adds	r3, #2
    da38:	009b      	lsls	r3, r3, #2
    da3a:	4423      	add	r3, r4
    da3c:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    da3e:	4915      	ldr	r1, [pc, #84]	; (da94 <Pwm_Init+0x104>)
    da40:	9a02      	ldr	r2, [sp, #8]
    da42:	4613      	mov	r3, r2
    da44:	00db      	lsls	r3, r3, #3
    da46:	1a9b      	subs	r3, r3, r2
    da48:	009b      	lsls	r3, r3, #2
    da4a:	440b      	add	r3, r1
    da4c:	681b      	ldr	r3, [r3, #0]
    da4e:	6859      	ldr	r1, [r3, #4]
    da50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da54:	4613      	mov	r3, r2
    da56:	005b      	lsls	r3, r3, #1
    da58:	4413      	add	r3, r2
    da5a:	00db      	lsls	r3, r3, #3
    da5c:	3308      	adds	r3, #8
    da5e:	440b      	add	r3, r1
    da60:	4618      	mov	r0, r3
    da62:	f000 f91d 	bl	dca0 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    da66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    da6a:	3301      	adds	r3, #1
    da6c:	f88d 300f 	strb.w	r3, [sp, #15]
    da70:	4908      	ldr	r1, [pc, #32]	; (da94 <Pwm_Init+0x104>)
    da72:	9a02      	ldr	r2, [sp, #8]
    da74:	4613      	mov	r3, r2
    da76:	00db      	lsls	r3, r3, #3
    da78:	1a9b      	subs	r3, r3, r2
    da7a:	009b      	lsls	r3, r3, #2
    da7c:	440b      	add	r3, r1
    da7e:	681b      	ldr	r3, [r3, #0]
    da80:	781b      	ldrb	r3, [r3, #0]
    da82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    da86:	429a      	cmp	r2, r3
    da88:	d3bd      	bcc.n	da06 <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    da8a:	bf00      	nop
    da8c:	bf00      	nop
    da8e:	b004      	add	sp, #16
    da90:	bd10      	pop	{r4, pc}
    da92:	bf00      	nop
    da94:	1fff8b24 	.word	0x1fff8b24

0000da98 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    da98:	b500      	push	{lr}
    da9a:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    da9c:	2300      	movs	r3, #0
    da9e:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    daa0:	2300      	movs	r3, #0
    daa2:	f88d 300f 	strb.w	r3, [sp, #15]
    daa6:	e02a      	b.n	dafe <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    daa8:	4945      	ldr	r1, [pc, #276]	; (dbc0 <Pwm_DeInit+0x128>)
    daaa:	9a02      	ldr	r2, [sp, #8]
    daac:	4613      	mov	r3, r2
    daae:	00db      	lsls	r3, r3, #3
    dab0:	1a9b      	subs	r3, r3, r2
    dab2:	009b      	lsls	r3, r3, #2
    dab4:	440b      	add	r3, r1
    dab6:	330c      	adds	r3, #12
    dab8:	6819      	ldr	r1, [r3, #0]
    daba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dabe:	4613      	mov	r3, r2
    dac0:	005b      	lsls	r3, r3, #1
    dac2:	4413      	add	r3, r2
    dac4:	00db      	lsls	r3, r3, #3
    dac6:	440b      	add	r3, r1
    dac8:	f103 0008 	add.w	r0, r3, #8
    dacc:	493c      	ldr	r1, [pc, #240]	; (dbc0 <Pwm_DeInit+0x128>)
    dace:	9a02      	ldr	r2, [sp, #8]
    dad0:	4613      	mov	r3, r2
    dad2:	00db      	lsls	r3, r3, #3
    dad4:	1a9b      	subs	r3, r3, r2
    dad6:	009b      	lsls	r3, r3, #2
    dad8:	440b      	add	r3, r1
    dada:	330c      	adds	r3, #12
    dadc:	6819      	ldr	r1, [r3, #0]
    dade:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dae2:	4613      	mov	r3, r2
    dae4:	005b      	lsls	r3, r3, #1
    dae6:	4413      	add	r3, r2
    dae8:	00db      	lsls	r3, r3, #3
    daea:	440b      	add	r3, r1
    daec:	695b      	ldr	r3, [r3, #20]
    daee:	4619      	mov	r1, r3
    daf0:	f000 f94e 	bl	dd90 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    daf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    daf8:	3301      	adds	r3, #1
    dafa:	f88d 300f 	strb.w	r3, [sp, #15]
    dafe:	4930      	ldr	r1, [pc, #192]	; (dbc0 <Pwm_DeInit+0x128>)
    db00:	9a02      	ldr	r2, [sp, #8]
    db02:	4613      	mov	r3, r2
    db04:	00db      	lsls	r3, r3, #3
    db06:	1a9b      	subs	r3, r3, r2
    db08:	009b      	lsls	r3, r3, #2
    db0a:	440b      	add	r3, r1
    db0c:	681b      	ldr	r3, [r3, #0]
    db0e:	781b      	ldrb	r3, [r3, #0]
    db10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db14:	429a      	cmp	r2, r3
    db16:	d3c7      	bcc.n	daa8 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    db18:	4929      	ldr	r1, [pc, #164]	; (dbc0 <Pwm_DeInit+0x128>)
    db1a:	9a02      	ldr	r2, [sp, #8]
    db1c:	4613      	mov	r3, r2
    db1e:	00db      	lsls	r3, r3, #3
    db20:	1a9b      	subs	r3, r3, r2
    db22:	009b      	lsls	r3, r3, #2
    db24:	440b      	add	r3, r1
    db26:	681b      	ldr	r3, [r3, #0]
    db28:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    db2a:	2300      	movs	r3, #0
    db2c:	f88d 300f 	strb.w	r3, [sp, #15]
    db30:	e010      	b.n	db54 <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    db32:	9b01      	ldr	r3, [sp, #4]
    db34:	68d9      	ldr	r1, [r3, #12]
    db36:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db3a:	4613      	mov	r3, r2
    db3c:	005b      	lsls	r3, r3, #1
    db3e:	4413      	add	r3, r2
    db40:	009b      	lsls	r3, r3, #2
    db42:	440b      	add	r3, r1
    db44:	4618      	mov	r0, r3
    db46:	f000 f943 	bl	ddd0 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    db4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db4e:	3301      	adds	r3, #1
    db50:	f88d 300f 	strb.w	r3, [sp, #15]
    db54:	491a      	ldr	r1, [pc, #104]	; (dbc0 <Pwm_DeInit+0x128>)
    db56:	9a02      	ldr	r2, [sp, #8]
    db58:	4613      	mov	r3, r2
    db5a:	00db      	lsls	r3, r3, #3
    db5c:	1a9b      	subs	r3, r3, r2
    db5e:	009b      	lsls	r3, r3, #2
    db60:	440b      	add	r3, r1
    db62:	681b      	ldr	r3, [r3, #0]
    db64:	7a1b      	ldrb	r3, [r3, #8]
    db66:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db6a:	429a      	cmp	r2, r3
    db6c:	d3e1      	bcc.n	db32 <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    db6e:	4914      	ldr	r1, [pc, #80]	; (dbc0 <Pwm_DeInit+0x128>)
    db70:	9a02      	ldr	r2, [sp, #8]
    db72:	4613      	mov	r3, r2
    db74:	00db      	lsls	r3, r3, #3
    db76:	1a9b      	subs	r3, r3, r2
    db78:	009b      	lsls	r3, r3, #2
    db7a:	440b      	add	r3, r1
    db7c:	2200      	movs	r2, #0
    db7e:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    db80:	2300      	movs	r3, #0
    db82:	f88d 300f 	strb.w	r3, [sp, #15]
    db86:	e011      	b.n	dbac <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    db88:	f89d 100f 	ldrb.w	r1, [sp, #15]
    db8c:	480c      	ldr	r0, [pc, #48]	; (dbc0 <Pwm_DeInit+0x128>)
    db8e:	9a02      	ldr	r2, [sp, #8]
    db90:	4613      	mov	r3, r2
    db92:	00db      	lsls	r3, r3, #3
    db94:	1a9b      	subs	r3, r3, r2
    db96:	440b      	add	r3, r1
    db98:	3302      	adds	r3, #2
    db9a:	009b      	lsls	r3, r3, #2
    db9c:	4403      	add	r3, r0
    db9e:	2200      	movs	r2, #0
    dba0:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    dba2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dba6:	3301      	adds	r3, #1
    dba8:	f88d 300f 	strb.w	r3, [sp, #15]
    dbac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbb0:	2b02      	cmp	r3, #2
    dbb2:	d9e9      	bls.n	db88 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    dbb4:	bf00      	nop
    dbb6:	bf00      	nop
    dbb8:	b005      	add	sp, #20
    dbba:	f85d fb04 	ldr.w	pc, [sp], #4
    dbbe:	bf00      	nop
    dbc0:	1fff8b24 	.word	0x1fff8b24

0000dbc4 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    dbc4:	b500      	push	{lr}
    dbc6:	b087      	sub	sp, #28
    dbc8:	4603      	mov	r3, r0
    dbca:	460a      	mov	r2, r1
    dbcc:	f88d 3007 	strb.w	r3, [sp, #7]
    dbd0:	4613      	mov	r3, r2
    dbd2:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    dbd6:	2300      	movs	r3, #0
    dbd8:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    dbdc:	2300      	movs	r3, #0
    dbde:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    dbe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbe4:	4619      	mov	r1, r3
    dbe6:	9804      	ldr	r0, [sp, #16]
    dbe8:	f7ff fec8 	bl	d97c <Pwm_GetPartitionChannelIdx>
    dbec:	4603      	mov	r3, r0
    dbee:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    dbf2:	490f      	ldr	r1, [pc, #60]	; (dc30 <Pwm_SetDutyCycle+0x6c>)
    dbf4:	9a04      	ldr	r2, [sp, #16]
    dbf6:	4613      	mov	r3, r2
    dbf8:	00db      	lsls	r3, r3, #3
    dbfa:	1a9b      	subs	r3, r3, r2
    dbfc:	009b      	lsls	r3, r3, #2
    dbfe:	440b      	add	r3, r1
    dc00:	330c      	adds	r3, #12
    dc02:	6819      	ldr	r1, [r3, #0]
    dc04:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc08:	4613      	mov	r3, r2
    dc0a:	005b      	lsls	r3, r3, #1
    dc0c:	4413      	add	r3, r2
    dc0e:	00db      	lsls	r3, r3, #3
    dc10:	440b      	add	r3, r1
    dc12:	f103 0208 	add.w	r2, r3, #8
    dc16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dc1a:	4611      	mov	r1, r2
    dc1c:	4618      	mov	r0, r3
    dc1e:	f000 f8f3 	bl	de08 <Pwm_Ipw_SetDutyCycle>
    dc22:	4603      	mov	r3, r0
    dc24:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    dc28:	bf00      	nop
    dc2a:	b007      	add	sp, #28
    dc2c:	f85d fb04 	ldr.w	pc, [sp], #4
    dc30:	1fff8b24 	.word	0x1fff8b24

0000dc34 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    dc34:	b500      	push	{lr}
    dc36:	b085      	sub	sp, #20
    dc38:	4603      	mov	r3, r0
    dc3a:	f88d 3007 	strb.w	r3, [sp, #7]
    dc3e:	460b      	mov	r3, r1
    dc40:	f8ad 3004 	strh.w	r3, [sp, #4]
    dc44:	4613      	mov	r3, r2
    dc46:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    dc4a:	2300      	movs	r3, #0
    dc4c:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    dc4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc52:	4619      	mov	r1, r3
    dc54:	9803      	ldr	r0, [sp, #12]
    dc56:	f7ff fe91 	bl	d97c <Pwm_GetPartitionChannelIdx>
    dc5a:	4603      	mov	r3, r0
    dc5c:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    dc60:	490e      	ldr	r1, [pc, #56]	; (dc9c <Pwm_SetPeriodAndDuty+0x68>)
    dc62:	9a03      	ldr	r2, [sp, #12]
    dc64:	4613      	mov	r3, r2
    dc66:	00db      	lsls	r3, r3, #3
    dc68:	1a9b      	subs	r3, r3, r2
    dc6a:	009b      	lsls	r3, r3, #2
    dc6c:	440b      	add	r3, r1
    dc6e:	330c      	adds	r3, #12
    dc70:	6819      	ldr	r1, [r3, #0]
    dc72:	f89d 200b 	ldrb.w	r2, [sp, #11]
    dc76:	4613      	mov	r3, r2
    dc78:	005b      	lsls	r3, r3, #1
    dc7a:	4413      	add	r3, r2
    dc7c:	00db      	lsls	r3, r3, #3
    dc7e:	440b      	add	r3, r1
    dc80:	f103 0208 	add.w	r2, r3, #8
    dc84:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    dc88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dc8c:	4618      	mov	r0, r3
    dc8e:	f000 f907 	bl	dea0 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    dc92:	bf00      	nop
    dc94:	b005      	add	sp, #20
    dc96:	f85d fb04 	ldr.w	pc, [sp], #4
    dc9a:	bf00      	nop
    dc9c:	1fff8b24 	.word	0x1fff8b24

0000dca0 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    dca0:	b410      	push	{r4}
    dca2:	b083      	sub	sp, #12
    dca4:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    dca6:	9b01      	ldr	r3, [sp, #4]
    dca8:	681b      	ldr	r3, [r3, #0]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d010      	beq.n	dcd0 <Pwm_Ipw_Init+0x30>
    dcae:	2b01      	cmp	r3, #1
    dcb0:	d110      	bne.n	dcd4 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    dcb2:	9b01      	ldr	r3, [sp, #4]
    dcb4:	7a1b      	ldrb	r3, [r3, #8]
    dcb6:	461c      	mov	r4, r3
    dcb8:	9b01      	ldr	r3, [sp, #4]
    dcba:	685b      	ldr	r3, [r3, #4]
    dcbc:	781b      	ldrb	r3, [r3, #0]
    dcbe:	4618      	mov	r0, r3
    dcc0:	9b01      	ldr	r3, [sp, #4]
    dcc2:	8959      	ldrh	r1, [r3, #10]
    dcc4:	4a06      	ldr	r2, [pc, #24]	; (dce0 <Pwm_Ipw_Init+0x40>)
    dcc6:	00e3      	lsls	r3, r4, #3
    dcc8:	4403      	add	r3, r0
    dcca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    dcce:	e002      	b.n	dcd6 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    dcd0:	bf00      	nop
    dcd2:	e000      	b.n	dcd6 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    dcd4:	bf00      	nop
    }
}
    dcd6:	bf00      	nop
    dcd8:	b003      	add	sp, #12
    dcda:	f85d 4b04 	ldr.w	r4, [sp], #4
    dcde:	4770      	bx	lr
    dce0:	1fff9174 	.word	0x1fff9174

0000dce4 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    dce4:	b500      	push	{lr}
    dce6:	b085      	sub	sp, #20
    dce8:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    dcea:	2300      	movs	r3, #0
    dcec:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    dcf0:	2300      	movs	r3, #0
    dcf2:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    dcf6:	9b01      	ldr	r3, [sp, #4]
    dcf8:	685b      	ldr	r3, [r3, #4]
    dcfa:	2b00      	cmp	r3, #0
    dcfc:	d03c      	beq.n	dd78 <Pwm_Ipw_InitInstance+0x94>
    dcfe:	2b01      	cmp	r3, #1
    dd00:	d13c      	bne.n	dd7c <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	689b      	ldr	r3, [r3, #8]
    dd06:	2b00      	cmp	r3, #0
    dd08:	d03a      	beq.n	dd80 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    dd0a:	9b01      	ldr	r3, [sp, #4]
    dd0c:	781a      	ldrb	r2, [r3, #0]
    dd0e:	9b01      	ldr	r3, [sp, #4]
    dd10:	689b      	ldr	r3, [r3, #8]
    dd12:	4619      	mov	r1, r3
    dd14:	4610      	mov	r0, r2
    dd16:	f7fe fed7 	bl	cac8 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    dd1a:	2300      	movs	r3, #0
    dd1c:	f88d 300f 	strb.w	r3, [sp, #15]
    dd20:	e022      	b.n	dd68 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    dd22:	9b01      	ldr	r3, [sp, #4]
    dd24:	689b      	ldr	r3, [r3, #8]
    dd26:	685a      	ldr	r2, [r3, #4]
    dd28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd2c:	009b      	lsls	r3, r3, #2
    dd2e:	4413      	add	r3, r2
    dd30:	681b      	ldr	r3, [r3, #0]
    dd32:	781b      	ldrb	r3, [r3, #0]
    dd34:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    dd38:	9b01      	ldr	r3, [sp, #4]
    dd3a:	689b      	ldr	r3, [r3, #8]
    dd3c:	685a      	ldr	r2, [r3, #4]
    dd3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd42:	009b      	lsls	r3, r3, #2
    dd44:	4413      	add	r3, r2
    dd46:	681a      	ldr	r2, [r3, #0]
    dd48:	9b01      	ldr	r3, [sp, #4]
    dd4a:	781b      	ldrb	r3, [r3, #0]
    dd4c:	4619      	mov	r1, r3
    dd4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dd52:	6a12      	ldr	r2, [r2, #32]
    dd54:	480d      	ldr	r0, [pc, #52]	; (dd8c <Pwm_Ipw_InitInstance+0xa8>)
    dd56:	00c9      	lsls	r1, r1, #3
    dd58:	440b      	add	r3, r1
    dd5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    dd5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd62:	3301      	adds	r3, #1
    dd64:	f88d 300f 	strb.w	r3, [sp, #15]
    dd68:	9b01      	ldr	r3, [sp, #4]
    dd6a:	689b      	ldr	r3, [r3, #8]
    dd6c:	7a1b      	ldrb	r3, [r3, #8]
    dd6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd72:	429a      	cmp	r2, r3
    dd74:	d3d5      	bcc.n	dd22 <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    dd76:	e003      	b.n	dd80 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    dd78:	bf00      	nop
    dd7a:	e002      	b.n	dd82 <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    dd7c:	bf00      	nop
    dd7e:	e000      	b.n	dd82 <Pwm_Ipw_InitInstance+0x9e>
            break;
    dd80:	bf00      	nop
    }
}
    dd82:	bf00      	nop
    dd84:	b005      	add	sp, #20
    dd86:	f85d fb04 	ldr.w	pc, [sp], #4
    dd8a:	bf00      	nop
    dd8c:	1fff90f4 	.word	0x1fff90f4

0000dd90 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    dd90:	b082      	sub	sp, #8
    dd92:	9001      	str	r0, [sp, #4]
    dd94:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    dd96:	9b01      	ldr	r3, [sp, #4]
    dd98:	681b      	ldr	r3, [r3, #0]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d00f      	beq.n	ddbe <Pwm_Ipw_DeInit+0x2e>
    dd9e:	2b01      	cmp	r3, #1
    dda0:	d10f      	bne.n	ddc2 <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    dda2:	9b01      	ldr	r3, [sp, #4]
    dda4:	7a1b      	ldrb	r3, [r3, #8]
    dda6:	4618      	mov	r0, r3
    dda8:	9b01      	ldr	r3, [sp, #4]
    ddaa:	685b      	ldr	r3, [r3, #4]
    ddac:	781b      	ldrb	r3, [r3, #0]
    ddae:	4619      	mov	r1, r3
    ddb0:	4a06      	ldr	r2, [pc, #24]	; (ddcc <Pwm_Ipw_DeInit+0x3c>)
    ddb2:	00c3      	lsls	r3, r0, #3
    ddb4:	440b      	add	r3, r1
    ddb6:	2100      	movs	r1, #0
    ddb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ddbc:	e002      	b.n	ddc4 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ddbe:	bf00      	nop
    ddc0:	e000      	b.n	ddc4 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    ddc2:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    ddc4:	bf00      	nop
    ddc6:	b002      	add	sp, #8
    ddc8:	4770      	bx	lr
    ddca:	bf00      	nop
    ddcc:	1fff9174 	.word	0x1fff9174

0000ddd0 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ddd0:	b500      	push	{lr}
    ddd2:	b083      	sub	sp, #12
    ddd4:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    ddd6:	9b01      	ldr	r3, [sp, #4]
    ddd8:	685b      	ldr	r3, [r3, #4]
    ddda:	2b00      	cmp	r3, #0
    dddc:	d00b      	beq.n	ddf6 <Pwm_Ipw_DeInitInstance+0x26>
    ddde:	2b01      	cmp	r3, #1
    dde0:	d10b      	bne.n	ddfa <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    dde2:	9b01      	ldr	r3, [sp, #4]
    dde4:	689b      	ldr	r3, [r3, #8]
    dde6:	2b00      	cmp	r3, #0
    dde8:	d009      	beq.n	ddfe <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    ddea:	9b01      	ldr	r3, [sp, #4]
    ddec:	781b      	ldrb	r3, [r3, #0]
    ddee:	4618      	mov	r0, r3
    ddf0:	f7fe fec8 	bl	cb84 <Ftm_Pwm_Ip_DeInit>
            }
            break;
    ddf4:	e003      	b.n	ddfe <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ddf6:	bf00      	nop
    ddf8:	e002      	b.n	de00 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    ddfa:	bf00      	nop
    ddfc:	e000      	b.n	de00 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    ddfe:	bf00      	nop
    }
}
    de00:	bf00      	nop
    de02:	b003      	add	sp, #12
    de04:	f85d fb04 	ldr.w	pc, [sp], #4

0000de08 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    de08:	b500      	push	{lr}
    de0a:	b085      	sub	sp, #20
    de0c:	4603      	mov	r3, r0
    de0e:	9100      	str	r1, [sp, #0]
    de10:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    de14:	2300      	movs	r3, #0
    de16:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    de1a:	2300      	movs	r3, #0
    de1c:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    de20:	9b00      	ldr	r3, [sp, #0]
    de22:	681b      	ldr	r3, [r3, #0]
    de24:	2b00      	cmp	r3, #0
    de26:	d02c      	beq.n	de82 <Pwm_Ipw_SetDutyCycle+0x7a>
    de28:	2b01      	cmp	r3, #1
    de2a:	d12c      	bne.n	de86 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    de2c:	9b00      	ldr	r3, [sp, #0]
    de2e:	685b      	ldr	r3, [r3, #4]
    de30:	2b00      	cmp	r3, #0
    de32:	d02a      	beq.n	de8a <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    de34:	9b00      	ldr	r3, [sp, #0]
    de36:	7a1b      	ldrb	r3, [r3, #8]
    de38:	461a      	mov	r2, r3
    de3a:	4b17      	ldr	r3, [pc, #92]	; (de98 <Pwm_Ipw_SetDutyCycle+0x90>)
    de3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    de40:	461a      	mov	r2, r3
    de42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    de46:	fb02 f303 	mul.w	r3, r2, r3
    de4a:	0bdb      	lsrs	r3, r3, #15
    de4c:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    de50:	9b00      	ldr	r3, [sp, #0]
    de52:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    de54:	9b00      	ldr	r3, [sp, #0]
    de56:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    de58:	7819      	ldrb	r1, [r3, #0]
    de5a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    de5e:	2301      	movs	r3, #1
    de60:	f7fe fed8 	bl	cc14 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    de64:	9b00      	ldr	r3, [sp, #0]
    de66:	7a1b      	ldrb	r3, [r3, #8]
    de68:	4618      	mov	r0, r3
    de6a:	9b00      	ldr	r3, [sp, #0]
    de6c:	685b      	ldr	r3, [r3, #4]
    de6e:	781b      	ldrb	r3, [r3, #0]
    de70:	461a      	mov	r2, r3
    de72:	490a      	ldr	r1, [pc, #40]	; (de9c <Pwm_Ipw_SetDutyCycle+0x94>)
    de74:	00c3      	lsls	r3, r0, #3
    de76:	4413      	add	r3, r2
    de78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    de7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    de80:	e003      	b.n	de8a <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    de82:	bf00      	nop
    de84:	e002      	b.n	de8c <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    de86:	bf00      	nop
    de88:	e000      	b.n	de8c <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    de8a:	bf00      	nop
    }

    return RetVal;
    de8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    de90:	4618      	mov	r0, r3
    de92:	b005      	add	sp, #20
    de94:	f85d fb04 	ldr.w	pc, [sp], #4
    de98:	1fff8dcc 	.word	0x1fff8dcc
    de9c:	1fff9174 	.word	0x1fff9174

0000dea0 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    dea0:	b510      	push	{r4, lr}
    dea2:	b086      	sub	sp, #24
    dea4:	4603      	mov	r3, r0
    dea6:	9202      	str	r2, [sp, #8]
    dea8:	f8ad 300e 	strh.w	r3, [sp, #14]
    deac:	460b      	mov	r3, r1
    deae:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    deb2:	2300      	movs	r3, #0
    deb4:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    deb8:	9b02      	ldr	r3, [sp, #8]
    deba:	681b      	ldr	r3, [r3, #0]
    debc:	2b00      	cmp	r3, #0
    debe:	d02a      	beq.n	df16 <Pwm_Ipw_SetPeriodAndDuty+0x76>
    dec0:	2b01      	cmp	r3, #1
    dec2:	d12a      	bne.n	df1a <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    dec4:	9b02      	ldr	r3, [sp, #8]
    dec6:	685b      	ldr	r3, [r3, #4]
    dec8:	2b00      	cmp	r3, #0
    deca:	d028      	beq.n	df1e <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    decc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ded0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ded4:	fb02 f303 	mul.w	r3, r2, r3
    ded8:	0bdb      	lsrs	r3, r3, #15
    deda:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    dede:	9b02      	ldr	r3, [sp, #8]
    dee0:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    dee2:	9b02      	ldr	r3, [sp, #8]
    dee4:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    dee6:	7819      	ldrb	r1, [r3, #0]
    dee8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    deec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    def0:	2401      	movs	r4, #1
    def2:	9400      	str	r4, [sp, #0]
    def4:	f7fe ff54 	bl	cda0 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    def8:	9b02      	ldr	r3, [sp, #8]
    defa:	7a1b      	ldrb	r3, [r3, #8]
    defc:	4618      	mov	r0, r3
    defe:	9b02      	ldr	r3, [sp, #8]
    df00:	685b      	ldr	r3, [r3, #4]
    df02:	781b      	ldrb	r3, [r3, #0]
    df04:	461a      	mov	r2, r3
    df06:	4908      	ldr	r1, [pc, #32]	; (df28 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    df08:	00c3      	lsls	r3, r0, #3
    df0a:	4413      	add	r3, r2
    df0c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    df10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    df14:	e003      	b.n	df1e <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    df16:	bf00      	nop
    df18:	e002      	b.n	df20 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    df1a:	bf00      	nop
    df1c:	e000      	b.n	df20 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    df1e:	bf00      	nop
    }
}
    df20:	bf00      	nop
    df22:	b006      	add	sp, #24
    df24:	bd10      	pop	{r4, pc}
    df26:	bf00      	nop
    df28:	1fff9174 	.word	0x1fff9174

0000df2c <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    df2c:	b084      	sub	sp, #16
    df2e:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    df30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df34:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    df36:	9b01      	ldr	r3, [sp, #4]
    df38:	681b      	ldr	r3, [r3, #0]
    df3a:	2b01      	cmp	r3, #1
    df3c:	d103      	bne.n	df46 <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    df3e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    df42:	9303      	str	r3, [sp, #12]
            break;
    df44:	e000      	b.n	df48 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    df46:	bf00      	nop
    }

    return RetVal;
    df48:	9b03      	ldr	r3, [sp, #12]
}
    df4a:	4618      	mov	r0, r3
    df4c:	b004      	add	sp, #16
    df4e:	4770      	bx	lr

0000df50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    df50:	b500      	push	{lr}
    df52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df54:	f7f2 fe60 	bl	c18 <Sys_GetCoreID>
    df58:	4603      	mov	r3, r0
    df5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    df5c:	4a10      	ldr	r2, [pc, #64]	; (dfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    df5e:	9b01      	ldr	r3, [sp, #4]
    df60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df64:	2b00      	cmp	r3, #0
    df66:	d10d      	bne.n	df84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df68:	f7f2 fd6c 	bl	a44 <Adc_schm_read_msr>
    df6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df6e:	9b00      	ldr	r3, [sp, #0]
    df70:	f003 0301 	and.w	r3, r3, #1
    df74:	2b00      	cmp	r3, #0
    df76:	d100      	bne.n	df7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    df7a:	490a      	ldr	r1, [pc, #40]	; (dfa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    df7c:	9b01      	ldr	r3, [sp, #4]
    df7e:	9a00      	ldr	r2, [sp, #0]
    df80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    df84:	4a06      	ldr	r2, [pc, #24]	; (dfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    df86:	9b01      	ldr	r3, [sp, #4]
    df88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df8c:	1c5a      	adds	r2, r3, #1
    df8e:	4904      	ldr	r1, [pc, #16]	; (dfa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    df90:	9b01      	ldr	r3, [sp, #4]
    df92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df96:	bf00      	nop
    df98:	b003      	add	sp, #12
    df9a:	f85d fb04 	ldr.w	pc, [sp], #4
    df9e:	bf00      	nop
    dfa0:	1fff91b8 	.word	0x1fff91b8
    dfa4:	1fff91b4 	.word	0x1fff91b4

0000dfa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    dfa8:	b500      	push	{lr}
    dfaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfac:	f7f2 fe34 	bl	c18 <Sys_GetCoreID>
    dfb0:	4603      	mov	r3, r0
    dfb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    dfb4:	4a0d      	ldr	r2, [pc, #52]	; (dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    dfb6:	9b01      	ldr	r3, [sp, #4]
    dfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfbc:	1e5a      	subs	r2, r3, #1
    dfbe:	490b      	ldr	r1, [pc, #44]	; (dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    dfc0:	9b01      	ldr	r3, [sp, #4]
    dfc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    dfc6:	4a0a      	ldr	r2, [pc, #40]	; (dff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    dfc8:	9b01      	ldr	r3, [sp, #4]
    dfca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfce:	f003 0301 	and.w	r3, r3, #1
    dfd2:	2b00      	cmp	r3, #0
    dfd4:	d106      	bne.n	dfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    dfd6:	4a05      	ldr	r2, [pc, #20]	; (dfec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    dfd8:	9b01      	ldr	r3, [sp, #4]
    dfda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d100      	bne.n	dfe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dfe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfe4:	bf00      	nop
    dfe6:	b003      	add	sp, #12
    dfe8:	f85d fb04 	ldr.w	pc, [sp], #4
    dfec:	1fff91b8 	.word	0x1fff91b8
    dff0:	1fff91b4 	.word	0x1fff91b4

0000dff4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    dff4:	b500      	push	{lr}
    dff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dff8:	f7f2 fe0e 	bl	c18 <Sys_GetCoreID>
    dffc:	4603      	mov	r3, r0
    dffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    e000:	4a10      	ldr	r2, [pc, #64]	; (e044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    e002:	9b01      	ldr	r3, [sp, #4]
    e004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e008:	2b00      	cmp	r3, #0
    e00a:	d10d      	bne.n	e028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e00c:	f7f2 fd1a 	bl	a44 <Adc_schm_read_msr>
    e010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e012:	9b00      	ldr	r3, [sp, #0]
    e014:	f003 0301 	and.w	r3, r3, #1
    e018:	2b00      	cmp	r3, #0
    e01a:	d100      	bne.n	e01e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e01c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e01e:	490a      	ldr	r1, [pc, #40]	; (e048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    e020:	9b01      	ldr	r3, [sp, #4]
    e022:	9a00      	ldr	r2, [sp, #0]
    e024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    e028:	4a06      	ldr	r2, [pc, #24]	; (e044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    e02a:	9b01      	ldr	r3, [sp, #4]
    e02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e030:	1c5a      	adds	r2, r3, #1
    e032:	4904      	ldr	r1, [pc, #16]	; (e044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    e034:	9b01      	ldr	r3, [sp, #4]
    e036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e03a:	bf00      	nop
    e03c:	b003      	add	sp, #12
    e03e:	f85d fb04 	ldr.w	pc, [sp], #4
    e042:	bf00      	nop
    e044:	1fff91c0 	.word	0x1fff91c0
    e048:	1fff91bc 	.word	0x1fff91bc

0000e04c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    e04c:	b500      	push	{lr}
    e04e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e050:	f7f2 fde2 	bl	c18 <Sys_GetCoreID>
    e054:	4603      	mov	r3, r0
    e056:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    e058:	4a0d      	ldr	r2, [pc, #52]	; (e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    e05a:	9b01      	ldr	r3, [sp, #4]
    e05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e060:	1e5a      	subs	r2, r3, #1
    e062:	490b      	ldr	r1, [pc, #44]	; (e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    e064:	9b01      	ldr	r3, [sp, #4]
    e066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e06a:	4a0a      	ldr	r2, [pc, #40]	; (e094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    e06c:	9b01      	ldr	r3, [sp, #4]
    e06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e072:	f003 0301 	and.w	r3, r3, #1
    e076:	2b00      	cmp	r3, #0
    e078:	d106      	bne.n	e088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    e07a:	4a05      	ldr	r2, [pc, #20]	; (e090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    e07c:	9b01      	ldr	r3, [sp, #4]
    e07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e082:	2b00      	cmp	r3, #0
    e084:	d100      	bne.n	e088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e088:	bf00      	nop
    e08a:	b003      	add	sp, #12
    e08c:	f85d fb04 	ldr.w	pc, [sp], #4
    e090:	1fff91c0 	.word	0x1fff91c0
    e094:	1fff91bc 	.word	0x1fff91bc

0000e098 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    e098:	b500      	push	{lr}
    e09a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e09c:	f7f2 fdbc 	bl	c18 <Sys_GetCoreID>
    e0a0:	4603      	mov	r3, r0
    e0a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    e0a4:	4a10      	ldr	r2, [pc, #64]	; (e0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    e0a6:	9b01      	ldr	r3, [sp, #4]
    e0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d10d      	bne.n	e0cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0b0:	f7f2 fcc8 	bl	a44 <Adc_schm_read_msr>
    e0b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0b6:	9b00      	ldr	r3, [sp, #0]
    e0b8:	f003 0301 	and.w	r3, r3, #1
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d100      	bne.n	e0c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e0c2:	490a      	ldr	r1, [pc, #40]	; (e0ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	9a00      	ldr	r2, [sp, #0]
    e0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    e0cc:	4a06      	ldr	r2, [pc, #24]	; (e0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    e0ce:	9b01      	ldr	r3, [sp, #4]
    e0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0d4:	1c5a      	adds	r2, r3, #1
    e0d6:	4904      	ldr	r1, [pc, #16]	; (e0e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    e0d8:	9b01      	ldr	r3, [sp, #4]
    e0da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e0de:	bf00      	nop
    e0e0:	b003      	add	sp, #12
    e0e2:	f85d fb04 	ldr.w	pc, [sp], #4
    e0e6:	bf00      	nop
    e0e8:	1fff91c8 	.word	0x1fff91c8
    e0ec:	1fff91c4 	.word	0x1fff91c4

0000e0f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    e0f0:	b500      	push	{lr}
    e0f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0f4:	f7f2 fd90 	bl	c18 <Sys_GetCoreID>
    e0f8:	4603      	mov	r3, r0
    e0fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    e0fc:	4a0d      	ldr	r2, [pc, #52]	; (e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    e0fe:	9b01      	ldr	r3, [sp, #4]
    e100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e104:	1e5a      	subs	r2, r3, #1
    e106:	490b      	ldr	r1, [pc, #44]	; (e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    e108:	9b01      	ldr	r3, [sp, #4]
    e10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e10e:	4a0a      	ldr	r2, [pc, #40]	; (e138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    e110:	9b01      	ldr	r3, [sp, #4]
    e112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e116:	f003 0301 	and.w	r3, r3, #1
    e11a:	2b00      	cmp	r3, #0
    e11c:	d106      	bne.n	e12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    e11e:	4a05      	ldr	r2, [pc, #20]	; (e134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    e120:	9b01      	ldr	r3, [sp, #4]
    e122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e126:	2b00      	cmp	r3, #0
    e128:	d100      	bne.n	e12c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e12a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e12c:	bf00      	nop
    e12e:	b003      	add	sp, #12
    e130:	f85d fb04 	ldr.w	pc, [sp], #4
    e134:	1fff91c8 	.word	0x1fff91c8
    e138:	1fff91c4 	.word	0x1fff91c4

0000e13c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    e13c:	b500      	push	{lr}
    e13e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e140:	f7f2 fd6a 	bl	c18 <Sys_GetCoreID>
    e144:	4603      	mov	r3, r0
    e146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    e148:	4a10      	ldr	r2, [pc, #64]	; (e18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    e14a:	9b01      	ldr	r3, [sp, #4]
    e14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e150:	2b00      	cmp	r3, #0
    e152:	d10d      	bne.n	e170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e154:	f7f2 fc76 	bl	a44 <Adc_schm_read_msr>
    e158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e15a:	9b00      	ldr	r3, [sp, #0]
    e15c:	f003 0301 	and.w	r3, r3, #1
    e160:	2b00      	cmp	r3, #0
    e162:	d100      	bne.n	e166 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    e166:	490a      	ldr	r1, [pc, #40]	; (e190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	9a00      	ldr	r2, [sp, #0]
    e16c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    e170:	4a06      	ldr	r2, [pc, #24]	; (e18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    e172:	9b01      	ldr	r3, [sp, #4]
    e174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e178:	1c5a      	adds	r2, r3, #1
    e17a:	4904      	ldr	r1, [pc, #16]	; (e18c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    e17c:	9b01      	ldr	r3, [sp, #4]
    e17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e182:	bf00      	nop
    e184:	b003      	add	sp, #12
    e186:	f85d fb04 	ldr.w	pc, [sp], #4
    e18a:	bf00      	nop
    e18c:	1fff91d0 	.word	0x1fff91d0
    e190:	1fff91cc 	.word	0x1fff91cc

0000e194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    e194:	b500      	push	{lr}
    e196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e198:	f7f2 fd3e 	bl	c18 <Sys_GetCoreID>
    e19c:	4603      	mov	r3, r0
    e19e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    e1a0:	4a0d      	ldr	r2, [pc, #52]	; (e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    e1a2:	9b01      	ldr	r3, [sp, #4]
    e1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a8:	1e5a      	subs	r2, r3, #1
    e1aa:	490b      	ldr	r1, [pc, #44]	; (e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    e1ac:	9b01      	ldr	r3, [sp, #4]
    e1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    e1b2:	4a0a      	ldr	r2, [pc, #40]	; (e1dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    e1b4:	9b01      	ldr	r3, [sp, #4]
    e1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ba:	f003 0301 	and.w	r3, r3, #1
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d106      	bne.n	e1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    e1c2:	4a05      	ldr	r2, [pc, #20]	; (e1d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    e1c4:	9b01      	ldr	r3, [sp, #4]
    e1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d100      	bne.n	e1d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e1ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e1d0:	bf00      	nop
    e1d2:	b003      	add	sp, #12
    e1d4:	f85d fb04 	ldr.w	pc, [sp], #4
    e1d8:	1fff91d0 	.word	0x1fff91d0
    e1dc:	1fff91cc 	.word	0x1fff91cc

0000e1e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    e1e0:	b500      	push	{lr}
    e1e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1e4:	f7f2 fd18 	bl	c18 <Sys_GetCoreID>
    e1e8:	4603      	mov	r3, r0
    e1ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    e1ec:	4a10      	ldr	r2, [pc, #64]	; (e230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d10d      	bne.n	e214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1f8:	f7f2 fc24 	bl	a44 <Adc_schm_read_msr>
    e1fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1fe:	9b00      	ldr	r3, [sp, #0]
    e200:	f003 0301 	and.w	r3, r3, #1
    e204:	2b00      	cmp	r3, #0
    e206:	d100      	bne.n	e20a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    e20a:	490a      	ldr	r1, [pc, #40]	; (e234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    e20c:	9b01      	ldr	r3, [sp, #4]
    e20e:	9a00      	ldr	r2, [sp, #0]
    e210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    e214:	4a06      	ldr	r2, [pc, #24]	; (e230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    e216:	9b01      	ldr	r3, [sp, #4]
    e218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e21c:	1c5a      	adds	r2, r3, #1
    e21e:	4904      	ldr	r1, [pc, #16]	; (e230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    e220:	9b01      	ldr	r3, [sp, #4]
    e222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e226:	bf00      	nop
    e228:	b003      	add	sp, #12
    e22a:	f85d fb04 	ldr.w	pc, [sp], #4
    e22e:	bf00      	nop
    e230:	1fff91d8 	.word	0x1fff91d8
    e234:	1fff91d4 	.word	0x1fff91d4

0000e238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    e238:	b500      	push	{lr}
    e23a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e23c:	f7f2 fcec 	bl	c18 <Sys_GetCoreID>
    e240:	4603      	mov	r3, r0
    e242:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    e244:	4a0d      	ldr	r2, [pc, #52]	; (e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    e246:	9b01      	ldr	r3, [sp, #4]
    e248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e24c:	1e5a      	subs	r2, r3, #1
    e24e:	490b      	ldr	r1, [pc, #44]	; (e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    e250:	9b01      	ldr	r3, [sp, #4]
    e252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    e256:	4a0a      	ldr	r2, [pc, #40]	; (e280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    e258:	9b01      	ldr	r3, [sp, #4]
    e25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25e:	f003 0301 	and.w	r3, r3, #1
    e262:	2b00      	cmp	r3, #0
    e264:	d106      	bne.n	e274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    e266:	4a05      	ldr	r2, [pc, #20]	; (e27c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    e268:	9b01      	ldr	r3, [sp, #4]
    e26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e26e:	2b00      	cmp	r3, #0
    e270:	d100      	bne.n	e274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e274:	bf00      	nop
    e276:	b003      	add	sp, #12
    e278:	f85d fb04 	ldr.w	pc, [sp], #4
    e27c:	1fff91d8 	.word	0x1fff91d8
    e280:	1fff91d4 	.word	0x1fff91d4

0000e284 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    e284:	b500      	push	{lr}
    e286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e288:	f7f2 fcc6 	bl	c18 <Sys_GetCoreID>
    e28c:	4603      	mov	r3, r0
    e28e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    e290:	4a10      	ldr	r2, [pc, #64]	; (e2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    e292:	9b01      	ldr	r3, [sp, #4]
    e294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e298:	2b00      	cmp	r3, #0
    e29a:	d10d      	bne.n	e2b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e29c:	f7f2 fbd2 	bl	a44 <Adc_schm_read_msr>
    e2a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2a2:	9b00      	ldr	r3, [sp, #0]
    e2a4:	f003 0301 	and.w	r3, r3, #1
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d100      	bne.n	e2ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    e2ae:	490a      	ldr	r1, [pc, #40]	; (e2d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    e2b0:	9b01      	ldr	r3, [sp, #4]
    e2b2:	9a00      	ldr	r2, [sp, #0]
    e2b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    e2b8:	4a06      	ldr	r2, [pc, #24]	; (e2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    e2ba:	9b01      	ldr	r3, [sp, #4]
    e2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2c0:	1c5a      	adds	r2, r3, #1
    e2c2:	4904      	ldr	r1, [pc, #16]	; (e2d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    e2c4:	9b01      	ldr	r3, [sp, #4]
    e2c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2ca:	bf00      	nop
    e2cc:	b003      	add	sp, #12
    e2ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e2d2:	bf00      	nop
    e2d4:	1fff91e0 	.word	0x1fff91e0
    e2d8:	1fff91dc 	.word	0x1fff91dc

0000e2dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    e2dc:	b500      	push	{lr}
    e2de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2e0:	f7f2 fc9a 	bl	c18 <Sys_GetCoreID>
    e2e4:	4603      	mov	r3, r0
    e2e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    e2e8:	4a0d      	ldr	r2, [pc, #52]	; (e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    e2ea:	9b01      	ldr	r3, [sp, #4]
    e2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2f0:	1e5a      	subs	r2, r3, #1
    e2f2:	490b      	ldr	r1, [pc, #44]	; (e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    e2f4:	9b01      	ldr	r3, [sp, #4]
    e2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    e2fa:	4a0a      	ldr	r2, [pc, #40]	; (e324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    e2fc:	9b01      	ldr	r3, [sp, #4]
    e2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e302:	f003 0301 	and.w	r3, r3, #1
    e306:	2b00      	cmp	r3, #0
    e308:	d106      	bne.n	e318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    e30a:	4a05      	ldr	r2, [pc, #20]	; (e320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    e30c:	9b01      	ldr	r3, [sp, #4]
    e30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e312:	2b00      	cmp	r3, #0
    e314:	d100      	bne.n	e318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e318:	bf00      	nop
    e31a:	b003      	add	sp, #12
    e31c:	f85d fb04 	ldr.w	pc, [sp], #4
    e320:	1fff91e0 	.word	0x1fff91e0
    e324:	1fff91dc 	.word	0x1fff91dc

0000e328 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    e328:	b500      	push	{lr}
    e32a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e32c:	f7f2 fc74 	bl	c18 <Sys_GetCoreID>
    e330:	4603      	mov	r3, r0
    e332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    e334:	4a10      	ldr	r2, [pc, #64]	; (e378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    e336:	9b01      	ldr	r3, [sp, #4]
    e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33c:	2b00      	cmp	r3, #0
    e33e:	d10d      	bne.n	e35c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e340:	f7f2 fb80 	bl	a44 <Adc_schm_read_msr>
    e344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e346:	9b00      	ldr	r3, [sp, #0]
    e348:	f003 0301 	and.w	r3, r3, #1
    e34c:	2b00      	cmp	r3, #0
    e34e:	d100      	bne.n	e352 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    e352:	490a      	ldr	r1, [pc, #40]	; (e37c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    e354:	9b01      	ldr	r3, [sp, #4]
    e356:	9a00      	ldr	r2, [sp, #0]
    e358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    e35c:	4a06      	ldr	r2, [pc, #24]	; (e378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    e35e:	9b01      	ldr	r3, [sp, #4]
    e360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e364:	1c5a      	adds	r2, r3, #1
    e366:	4904      	ldr	r1, [pc, #16]	; (e378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    e368:	9b01      	ldr	r3, [sp, #4]
    e36a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e36e:	bf00      	nop
    e370:	b003      	add	sp, #12
    e372:	f85d fb04 	ldr.w	pc, [sp], #4
    e376:	bf00      	nop
    e378:	1fff91e8 	.word	0x1fff91e8
    e37c:	1fff91e4 	.word	0x1fff91e4

0000e380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    e380:	b500      	push	{lr}
    e382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e384:	f7f2 fc48 	bl	c18 <Sys_GetCoreID>
    e388:	4603      	mov	r3, r0
    e38a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    e38c:	4a0d      	ldr	r2, [pc, #52]	; (e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    e38e:	9b01      	ldr	r3, [sp, #4]
    e390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e394:	1e5a      	subs	r2, r3, #1
    e396:	490b      	ldr	r1, [pc, #44]	; (e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    e398:	9b01      	ldr	r3, [sp, #4]
    e39a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    e39e:	4a0a      	ldr	r2, [pc, #40]	; (e3c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    e3a0:	9b01      	ldr	r3, [sp, #4]
    e3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a6:	f003 0301 	and.w	r3, r3, #1
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d106      	bne.n	e3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    e3ae:	4a05      	ldr	r2, [pc, #20]	; (e3c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    e3b0:	9b01      	ldr	r3, [sp, #4]
    e3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d100      	bne.n	e3bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3bc:	bf00      	nop
    e3be:	b003      	add	sp, #12
    e3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c4:	1fff91e8 	.word	0x1fff91e8
    e3c8:	1fff91e4 	.word	0x1fff91e4

0000e3cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    e3cc:	b500      	push	{lr}
    e3ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3d0:	f7f2 fc22 	bl	c18 <Sys_GetCoreID>
    e3d4:	4603      	mov	r3, r0
    e3d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    e3d8:	4a10      	ldr	r2, [pc, #64]	; (e41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    e3da:	9b01      	ldr	r3, [sp, #4]
    e3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	d10d      	bne.n	e400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3e4:	f7f2 fb2e 	bl	a44 <Adc_schm_read_msr>
    e3e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3ea:	9b00      	ldr	r3, [sp, #0]
    e3ec:	f003 0301 	and.w	r3, r3, #1
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d100      	bne.n	e3f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    e3f6:	490a      	ldr	r1, [pc, #40]	; (e420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    e3f8:	9b01      	ldr	r3, [sp, #4]
    e3fa:	9a00      	ldr	r2, [sp, #0]
    e3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    e400:	4a06      	ldr	r2, [pc, #24]	; (e41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    e402:	9b01      	ldr	r3, [sp, #4]
    e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e408:	1c5a      	adds	r2, r3, #1
    e40a:	4904      	ldr	r1, [pc, #16]	; (e41c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    e40c:	9b01      	ldr	r3, [sp, #4]
    e40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e412:	bf00      	nop
    e414:	b003      	add	sp, #12
    e416:	f85d fb04 	ldr.w	pc, [sp], #4
    e41a:	bf00      	nop
    e41c:	1fff91f0 	.word	0x1fff91f0
    e420:	1fff91ec 	.word	0x1fff91ec

0000e424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    e424:	b500      	push	{lr}
    e426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e428:	f7f2 fbf6 	bl	c18 <Sys_GetCoreID>
    e42c:	4603      	mov	r3, r0
    e42e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    e430:	4a0d      	ldr	r2, [pc, #52]	; (e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    e432:	9b01      	ldr	r3, [sp, #4]
    e434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e438:	1e5a      	subs	r2, r3, #1
    e43a:	490b      	ldr	r1, [pc, #44]	; (e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    e43c:	9b01      	ldr	r3, [sp, #4]
    e43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    e442:	4a0a      	ldr	r2, [pc, #40]	; (e46c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    e444:	9b01      	ldr	r3, [sp, #4]
    e446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e44a:	f003 0301 	and.w	r3, r3, #1
    e44e:	2b00      	cmp	r3, #0
    e450:	d106      	bne.n	e460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    e452:	4a05      	ldr	r2, [pc, #20]	; (e468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    e454:	9b01      	ldr	r3, [sp, #4]
    e456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e45a:	2b00      	cmp	r3, #0
    e45c:	d100      	bne.n	e460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e45e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e460:	bf00      	nop
    e462:	b003      	add	sp, #12
    e464:	f85d fb04 	ldr.w	pc, [sp], #4
    e468:	1fff91f0 	.word	0x1fff91f0
    e46c:	1fff91ec 	.word	0x1fff91ec

0000e470 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    e470:	b500      	push	{lr}
    e472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e474:	f7f2 fbd0 	bl	c18 <Sys_GetCoreID>
    e478:	4603      	mov	r3, r0
    e47a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    e47c:	4a10      	ldr	r2, [pc, #64]	; (e4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    e47e:	9b01      	ldr	r3, [sp, #4]
    e480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e484:	2b00      	cmp	r3, #0
    e486:	d10d      	bne.n	e4a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e488:	f7f2 fadc 	bl	a44 <Adc_schm_read_msr>
    e48c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e48e:	9b00      	ldr	r3, [sp, #0]
    e490:	f003 0301 	and.w	r3, r3, #1
    e494:	2b00      	cmp	r3, #0
    e496:	d100      	bne.n	e49a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    e49a:	490a      	ldr	r1, [pc, #40]	; (e4c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    e49c:	9b01      	ldr	r3, [sp, #4]
    e49e:	9a00      	ldr	r2, [sp, #0]
    e4a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    e4a4:	4a06      	ldr	r2, [pc, #24]	; (e4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    e4a6:	9b01      	ldr	r3, [sp, #4]
    e4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ac:	1c5a      	adds	r2, r3, #1
    e4ae:	4904      	ldr	r1, [pc, #16]	; (e4c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    e4b0:	9b01      	ldr	r3, [sp, #4]
    e4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4b6:	bf00      	nop
    e4b8:	b003      	add	sp, #12
    e4ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e4be:	bf00      	nop
    e4c0:	1fff91f8 	.word	0x1fff91f8
    e4c4:	1fff91f4 	.word	0x1fff91f4

0000e4c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    e4c8:	b500      	push	{lr}
    e4ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4cc:	f7f2 fba4 	bl	c18 <Sys_GetCoreID>
    e4d0:	4603      	mov	r3, r0
    e4d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    e4d4:	4a0d      	ldr	r2, [pc, #52]	; (e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    e4d6:	9b01      	ldr	r3, [sp, #4]
    e4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4dc:	1e5a      	subs	r2, r3, #1
    e4de:	490b      	ldr	r1, [pc, #44]	; (e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    e4e0:	9b01      	ldr	r3, [sp, #4]
    e4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    e4e6:	4a0a      	ldr	r2, [pc, #40]	; (e510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    e4e8:	9b01      	ldr	r3, [sp, #4]
    e4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ee:	f003 0301 	and.w	r3, r3, #1
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d106      	bne.n	e504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    e4f6:	4a05      	ldr	r2, [pc, #20]	; (e50c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    e4f8:	9b01      	ldr	r3, [sp, #4]
    e4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d100      	bne.n	e504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e504:	bf00      	nop
    e506:	b003      	add	sp, #12
    e508:	f85d fb04 	ldr.w	pc, [sp], #4
    e50c:	1fff91f8 	.word	0x1fff91f8
    e510:	1fff91f4 	.word	0x1fff91f4

0000e514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    e514:	b500      	push	{lr}
    e516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e518:	f7f2 fb7e 	bl	c18 <Sys_GetCoreID>
    e51c:	4603      	mov	r3, r0
    e51e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    e520:	4a10      	ldr	r2, [pc, #64]	; (e564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    e522:	9b01      	ldr	r3, [sp, #4]
    e524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e528:	2b00      	cmp	r3, #0
    e52a:	d10d      	bne.n	e548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e52c:	f7f2 fa8a 	bl	a44 <Adc_schm_read_msr>
    e530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e532:	9b00      	ldr	r3, [sp, #0]
    e534:	f003 0301 	and.w	r3, r3, #1
    e538:	2b00      	cmp	r3, #0
    e53a:	d100      	bne.n	e53e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e53c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    e53e:	490a      	ldr	r1, [pc, #40]	; (e568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	9a00      	ldr	r2, [sp, #0]
    e544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    e548:	4a06      	ldr	r2, [pc, #24]	; (e564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    e54a:	9b01      	ldr	r3, [sp, #4]
    e54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e550:	1c5a      	adds	r2, r3, #1
    e552:	4904      	ldr	r1, [pc, #16]	; (e564 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    e554:	9b01      	ldr	r3, [sp, #4]
    e556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e55a:	bf00      	nop
    e55c:	b003      	add	sp, #12
    e55e:	f85d fb04 	ldr.w	pc, [sp], #4
    e562:	bf00      	nop
    e564:	1fff9200 	.word	0x1fff9200
    e568:	1fff91fc 	.word	0x1fff91fc

0000e56c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    e56c:	b500      	push	{lr}
    e56e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e570:	f7f2 fb52 	bl	c18 <Sys_GetCoreID>
    e574:	4603      	mov	r3, r0
    e576:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    e578:	4a0d      	ldr	r2, [pc, #52]	; (e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    e57a:	9b01      	ldr	r3, [sp, #4]
    e57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e580:	1e5a      	subs	r2, r3, #1
    e582:	490b      	ldr	r1, [pc, #44]	; (e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    e584:	9b01      	ldr	r3, [sp, #4]
    e586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    e58a:	4a0a      	ldr	r2, [pc, #40]	; (e5b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    e58c:	9b01      	ldr	r3, [sp, #4]
    e58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e592:	f003 0301 	and.w	r3, r3, #1
    e596:	2b00      	cmp	r3, #0
    e598:	d106      	bne.n	e5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    e59a:	4a05      	ldr	r2, [pc, #20]	; (e5b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    e59c:	9b01      	ldr	r3, [sp, #4]
    e59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d100      	bne.n	e5a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5a8:	bf00      	nop
    e5aa:	b003      	add	sp, #12
    e5ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e5b0:	1fff9200 	.word	0x1fff9200
    e5b4:	1fff91fc 	.word	0x1fff91fc

0000e5b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    e5b8:	b500      	push	{lr}
    e5ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5bc:	f7f2 fb2c 	bl	c18 <Sys_GetCoreID>
    e5c0:	4603      	mov	r3, r0
    e5c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    e5c4:	4a10      	ldr	r2, [pc, #64]	; (e608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    e5c6:	9b01      	ldr	r3, [sp, #4]
    e5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5cc:	2b00      	cmp	r3, #0
    e5ce:	d10d      	bne.n	e5ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5d0:	f7f2 fa38 	bl	a44 <Adc_schm_read_msr>
    e5d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5d6:	9b00      	ldr	r3, [sp, #0]
    e5d8:	f003 0301 	and.w	r3, r3, #1
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d100      	bne.n	e5e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    e5e2:	490a      	ldr	r1, [pc, #40]	; (e60c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    e5e4:	9b01      	ldr	r3, [sp, #4]
    e5e6:	9a00      	ldr	r2, [sp, #0]
    e5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    e5ec:	4a06      	ldr	r2, [pc, #24]	; (e608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    e5ee:	9b01      	ldr	r3, [sp, #4]
    e5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5f4:	1c5a      	adds	r2, r3, #1
    e5f6:	4904      	ldr	r1, [pc, #16]	; (e608 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    e5f8:	9b01      	ldr	r3, [sp, #4]
    e5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5fe:	bf00      	nop
    e600:	b003      	add	sp, #12
    e602:	f85d fb04 	ldr.w	pc, [sp], #4
    e606:	bf00      	nop
    e608:	1fff9208 	.word	0x1fff9208
    e60c:	1fff9204 	.word	0x1fff9204

0000e610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    e610:	b500      	push	{lr}
    e612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e614:	f7f2 fb00 	bl	c18 <Sys_GetCoreID>
    e618:	4603      	mov	r3, r0
    e61a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    e61c:	4a0d      	ldr	r2, [pc, #52]	; (e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    e61e:	9b01      	ldr	r3, [sp, #4]
    e620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e624:	1e5a      	subs	r2, r3, #1
    e626:	490b      	ldr	r1, [pc, #44]	; (e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    e628:	9b01      	ldr	r3, [sp, #4]
    e62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    e62e:	4a0a      	ldr	r2, [pc, #40]	; (e658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    e630:	9b01      	ldr	r3, [sp, #4]
    e632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e636:	f003 0301 	and.w	r3, r3, #1
    e63a:	2b00      	cmp	r3, #0
    e63c:	d106      	bne.n	e64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    e63e:	4a05      	ldr	r2, [pc, #20]	; (e654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    e640:	9b01      	ldr	r3, [sp, #4]
    e642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e646:	2b00      	cmp	r3, #0
    e648:	d100      	bne.n	e64c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e64a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e64c:	bf00      	nop
    e64e:	b003      	add	sp, #12
    e650:	f85d fb04 	ldr.w	pc, [sp], #4
    e654:	1fff9208 	.word	0x1fff9208
    e658:	1fff9204 	.word	0x1fff9204

0000e65c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    e65c:	b500      	push	{lr}
    e65e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e660:	f7f2 fada 	bl	c18 <Sys_GetCoreID>
    e664:	4603      	mov	r3, r0
    e666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    e668:	4a10      	ldr	r2, [pc, #64]	; (e6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    e66a:	9b01      	ldr	r3, [sp, #4]
    e66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e670:	2b00      	cmp	r3, #0
    e672:	d10d      	bne.n	e690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e674:	f7f2 f9e6 	bl	a44 <Adc_schm_read_msr>
    e678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e67a:	9b00      	ldr	r3, [sp, #0]
    e67c:	f003 0301 	and.w	r3, r3, #1
    e680:	2b00      	cmp	r3, #0
    e682:	d100      	bne.n	e686 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    e686:	490a      	ldr	r1, [pc, #40]	; (e6b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    e688:	9b01      	ldr	r3, [sp, #4]
    e68a:	9a00      	ldr	r2, [sp, #0]
    e68c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    e690:	4a06      	ldr	r2, [pc, #24]	; (e6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    e692:	9b01      	ldr	r3, [sp, #4]
    e694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e698:	1c5a      	adds	r2, r3, #1
    e69a:	4904      	ldr	r1, [pc, #16]	; (e6ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    e69c:	9b01      	ldr	r3, [sp, #4]
    e69e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6a2:	bf00      	nop
    e6a4:	b003      	add	sp, #12
    e6a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e6aa:	bf00      	nop
    e6ac:	1fff9210 	.word	0x1fff9210
    e6b0:	1fff920c 	.word	0x1fff920c

0000e6b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    e6b4:	b500      	push	{lr}
    e6b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6b8:	f7f2 faae 	bl	c18 <Sys_GetCoreID>
    e6bc:	4603      	mov	r3, r0
    e6be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    e6c0:	4a0d      	ldr	r2, [pc, #52]	; (e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    e6c2:	9b01      	ldr	r3, [sp, #4]
    e6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6c8:	1e5a      	subs	r2, r3, #1
    e6ca:	490b      	ldr	r1, [pc, #44]	; (e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    e6cc:	9b01      	ldr	r3, [sp, #4]
    e6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    e6d2:	4a0a      	ldr	r2, [pc, #40]	; (e6fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6da:	f003 0301 	and.w	r3, r3, #1
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d106      	bne.n	e6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    e6e2:	4a05      	ldr	r2, [pc, #20]	; (e6f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    e6e4:	9b01      	ldr	r3, [sp, #4]
    e6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6ea:	2b00      	cmp	r3, #0
    e6ec:	d100      	bne.n	e6f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6f0:	bf00      	nop
    e6f2:	b003      	add	sp, #12
    e6f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e6f8:	1fff9210 	.word	0x1fff9210
    e6fc:	1fff920c 	.word	0x1fff920c

0000e700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    e700:	b500      	push	{lr}
    e702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e704:	f7f2 fa88 	bl	c18 <Sys_GetCoreID>
    e708:	4603      	mov	r3, r0
    e70a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    e70c:	4a10      	ldr	r2, [pc, #64]	; (e750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    e70e:	9b01      	ldr	r3, [sp, #4]
    e710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e714:	2b00      	cmp	r3, #0
    e716:	d10d      	bne.n	e734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e718:	f7f2 f994 	bl	a44 <Adc_schm_read_msr>
    e71c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e71e:	9b00      	ldr	r3, [sp, #0]
    e720:	f003 0301 	and.w	r3, r3, #1
    e724:	2b00      	cmp	r3, #0
    e726:	d100      	bne.n	e72a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    e72a:	490a      	ldr	r1, [pc, #40]	; (e754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	9a00      	ldr	r2, [sp, #0]
    e730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    e734:	4a06      	ldr	r2, [pc, #24]	; (e750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    e736:	9b01      	ldr	r3, [sp, #4]
    e738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e73c:	1c5a      	adds	r2, r3, #1
    e73e:	4904      	ldr	r1, [pc, #16]	; (e750 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    e740:	9b01      	ldr	r3, [sp, #4]
    e742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e746:	bf00      	nop
    e748:	b003      	add	sp, #12
    e74a:	f85d fb04 	ldr.w	pc, [sp], #4
    e74e:	bf00      	nop
    e750:	1fff9218 	.word	0x1fff9218
    e754:	1fff9214 	.word	0x1fff9214

0000e758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    e758:	b500      	push	{lr}
    e75a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e75c:	f7f2 fa5c 	bl	c18 <Sys_GetCoreID>
    e760:	4603      	mov	r3, r0
    e762:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    e764:	4a0d      	ldr	r2, [pc, #52]	; (e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    e766:	9b01      	ldr	r3, [sp, #4]
    e768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e76c:	1e5a      	subs	r2, r3, #1
    e76e:	490b      	ldr	r1, [pc, #44]	; (e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    e770:	9b01      	ldr	r3, [sp, #4]
    e772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    e776:	4a0a      	ldr	r2, [pc, #40]	; (e7a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    e778:	9b01      	ldr	r3, [sp, #4]
    e77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77e:	f003 0301 	and.w	r3, r3, #1
    e782:	2b00      	cmp	r3, #0
    e784:	d106      	bne.n	e794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    e786:	4a05      	ldr	r2, [pc, #20]	; (e79c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    e788:	9b01      	ldr	r3, [sp, #4]
    e78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e78e:	2b00      	cmp	r3, #0
    e790:	d100      	bne.n	e794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e794:	bf00      	nop
    e796:	b003      	add	sp, #12
    e798:	f85d fb04 	ldr.w	pc, [sp], #4
    e79c:	1fff9218 	.word	0x1fff9218
    e7a0:	1fff9214 	.word	0x1fff9214

0000e7a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    e7a4:	b500      	push	{lr}
    e7a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7a8:	f7f2 fa36 	bl	c18 <Sys_GetCoreID>
    e7ac:	4603      	mov	r3, r0
    e7ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    e7b0:	4a10      	ldr	r2, [pc, #64]	; (e7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    e7b2:	9b01      	ldr	r3, [sp, #4]
    e7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d10d      	bne.n	e7d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7bc:	f7f2 f942 	bl	a44 <Adc_schm_read_msr>
    e7c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7c2:	9b00      	ldr	r3, [sp, #0]
    e7c4:	f003 0301 	and.w	r3, r3, #1
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d100      	bne.n	e7ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    e7ce:	490a      	ldr	r1, [pc, #40]	; (e7f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    e7d0:	9b01      	ldr	r3, [sp, #4]
    e7d2:	9a00      	ldr	r2, [sp, #0]
    e7d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    e7d8:	4a06      	ldr	r2, [pc, #24]	; (e7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    e7da:	9b01      	ldr	r3, [sp, #4]
    e7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7e0:	1c5a      	adds	r2, r3, #1
    e7e2:	4904      	ldr	r1, [pc, #16]	; (e7f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    e7e4:	9b01      	ldr	r3, [sp, #4]
    e7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7ea:	bf00      	nop
    e7ec:	b003      	add	sp, #12
    e7ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e7f2:	bf00      	nop
    e7f4:	1fff9220 	.word	0x1fff9220
    e7f8:	1fff921c 	.word	0x1fff921c

0000e7fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    e7fc:	b500      	push	{lr}
    e7fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e800:	f7f2 fa0a 	bl	c18 <Sys_GetCoreID>
    e804:	4603      	mov	r3, r0
    e806:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    e808:	4a0d      	ldr	r2, [pc, #52]	; (e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    e80a:	9b01      	ldr	r3, [sp, #4]
    e80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e810:	1e5a      	subs	r2, r3, #1
    e812:	490b      	ldr	r1, [pc, #44]	; (e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    e814:	9b01      	ldr	r3, [sp, #4]
    e816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    e81a:	4a0a      	ldr	r2, [pc, #40]	; (e844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    e81c:	9b01      	ldr	r3, [sp, #4]
    e81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e822:	f003 0301 	and.w	r3, r3, #1
    e826:	2b00      	cmp	r3, #0
    e828:	d106      	bne.n	e838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    e82a:	4a05      	ldr	r2, [pc, #20]	; (e840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    e82c:	9b01      	ldr	r3, [sp, #4]
    e82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e832:	2b00      	cmp	r3, #0
    e834:	d100      	bne.n	e838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e838:	bf00      	nop
    e83a:	b003      	add	sp, #12
    e83c:	f85d fb04 	ldr.w	pc, [sp], #4
    e840:	1fff9220 	.word	0x1fff9220
    e844:	1fff921c 	.word	0x1fff921c

0000e848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    e848:	b500      	push	{lr}
    e84a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e84c:	f7f2 f9e4 	bl	c18 <Sys_GetCoreID>
    e850:	4603      	mov	r3, r0
    e852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    e854:	4a10      	ldr	r2, [pc, #64]	; (e898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    e856:	9b01      	ldr	r3, [sp, #4]
    e858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e85c:	2b00      	cmp	r3, #0
    e85e:	d10d      	bne.n	e87c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e860:	f7f2 f8f0 	bl	a44 <Adc_schm_read_msr>
    e864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e866:	9b00      	ldr	r3, [sp, #0]
    e868:	f003 0301 	and.w	r3, r3, #1
    e86c:	2b00      	cmp	r3, #0
    e86e:	d100      	bne.n	e872 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    e872:	490a      	ldr	r1, [pc, #40]	; (e89c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    e874:	9b01      	ldr	r3, [sp, #4]
    e876:	9a00      	ldr	r2, [sp, #0]
    e878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    e87c:	4a06      	ldr	r2, [pc, #24]	; (e898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    e87e:	9b01      	ldr	r3, [sp, #4]
    e880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e884:	1c5a      	adds	r2, r3, #1
    e886:	4904      	ldr	r1, [pc, #16]	; (e898 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    e888:	9b01      	ldr	r3, [sp, #4]
    e88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e88e:	bf00      	nop
    e890:	b003      	add	sp, #12
    e892:	f85d fb04 	ldr.w	pc, [sp], #4
    e896:	bf00      	nop
    e898:	1fff9228 	.word	0x1fff9228
    e89c:	1fff9224 	.word	0x1fff9224

0000e8a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    e8a0:	b500      	push	{lr}
    e8a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8a4:	f7f2 f9b8 	bl	c18 <Sys_GetCoreID>
    e8a8:	4603      	mov	r3, r0
    e8aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    e8ac:	4a0d      	ldr	r2, [pc, #52]	; (e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    e8ae:	9b01      	ldr	r3, [sp, #4]
    e8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b4:	1e5a      	subs	r2, r3, #1
    e8b6:	490b      	ldr	r1, [pc, #44]	; (e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    e8b8:	9b01      	ldr	r3, [sp, #4]
    e8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    e8be:	4a0a      	ldr	r2, [pc, #40]	; (e8e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    e8c0:	9b01      	ldr	r3, [sp, #4]
    e8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c6:	f003 0301 	and.w	r3, r3, #1
    e8ca:	2b00      	cmp	r3, #0
    e8cc:	d106      	bne.n	e8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    e8ce:	4a05      	ldr	r2, [pc, #20]	; (e8e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    e8d0:	9b01      	ldr	r3, [sp, #4]
    e8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	d100      	bne.n	e8dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8dc:	bf00      	nop
    e8de:	b003      	add	sp, #12
    e8e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e8e4:	1fff9228 	.word	0x1fff9228
    e8e8:	1fff9224 	.word	0x1fff9224

0000e8ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    e8ec:	b500      	push	{lr}
    e8ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8f0:	f7f2 f992 	bl	c18 <Sys_GetCoreID>
    e8f4:	4603      	mov	r3, r0
    e8f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    e8f8:	4a10      	ldr	r2, [pc, #64]	; (e93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    e8fa:	9b01      	ldr	r3, [sp, #4]
    e8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e900:	2b00      	cmp	r3, #0
    e902:	d10d      	bne.n	e920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e904:	f7f2 f89e 	bl	a44 <Adc_schm_read_msr>
    e908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e90a:	9b00      	ldr	r3, [sp, #0]
    e90c:	f003 0301 	and.w	r3, r3, #1
    e910:	2b00      	cmp	r3, #0
    e912:	d100      	bne.n	e916 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    e916:	490a      	ldr	r1, [pc, #40]	; (e940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	9a00      	ldr	r2, [sp, #0]
    e91c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    e920:	4a06      	ldr	r2, [pc, #24]	; (e93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    e922:	9b01      	ldr	r3, [sp, #4]
    e924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e928:	1c5a      	adds	r2, r3, #1
    e92a:	4904      	ldr	r1, [pc, #16]	; (e93c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    e92c:	9b01      	ldr	r3, [sp, #4]
    e92e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e932:	bf00      	nop
    e934:	b003      	add	sp, #12
    e936:	f85d fb04 	ldr.w	pc, [sp], #4
    e93a:	bf00      	nop
    e93c:	1fff9230 	.word	0x1fff9230
    e940:	1fff922c 	.word	0x1fff922c

0000e944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    e944:	b500      	push	{lr}
    e946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e948:	f7f2 f966 	bl	c18 <Sys_GetCoreID>
    e94c:	4603      	mov	r3, r0
    e94e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    e950:	4a0d      	ldr	r2, [pc, #52]	; (e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    e952:	9b01      	ldr	r3, [sp, #4]
    e954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e958:	1e5a      	subs	r2, r3, #1
    e95a:	490b      	ldr	r1, [pc, #44]	; (e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    e95c:	9b01      	ldr	r3, [sp, #4]
    e95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    e962:	4a0a      	ldr	r2, [pc, #40]	; (e98c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    e964:	9b01      	ldr	r3, [sp, #4]
    e966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e96a:	f003 0301 	and.w	r3, r3, #1
    e96e:	2b00      	cmp	r3, #0
    e970:	d106      	bne.n	e980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    e972:	4a05      	ldr	r2, [pc, #20]	; (e988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    e974:	9b01      	ldr	r3, [sp, #4]
    e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e97a:	2b00      	cmp	r3, #0
    e97c:	d100      	bne.n	e980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e97e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e980:	bf00      	nop
    e982:	b003      	add	sp, #12
    e984:	f85d fb04 	ldr.w	pc, [sp], #4
    e988:	1fff9230 	.word	0x1fff9230
    e98c:	1fff922c 	.word	0x1fff922c

0000e990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    e990:	b500      	push	{lr}
    e992:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e994:	f7f2 f940 	bl	c18 <Sys_GetCoreID>
    e998:	4603      	mov	r3, r0
    e99a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    e99c:	4a10      	ldr	r2, [pc, #64]	; (e9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    e99e:	9b01      	ldr	r3, [sp, #4]
    e9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d10d      	bne.n	e9c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9a8:	f7f2 f84c 	bl	a44 <Adc_schm_read_msr>
    e9ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ae:	9b00      	ldr	r3, [sp, #0]
    e9b0:	f003 0301 	and.w	r3, r3, #1
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d100      	bne.n	e9ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    e9ba:	490a      	ldr	r1, [pc, #40]	; (e9e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    e9bc:	9b01      	ldr	r3, [sp, #4]
    e9be:	9a00      	ldr	r2, [sp, #0]
    e9c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    e9c4:	4a06      	ldr	r2, [pc, #24]	; (e9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    e9c6:	9b01      	ldr	r3, [sp, #4]
    e9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9cc:	1c5a      	adds	r2, r3, #1
    e9ce:	4904      	ldr	r1, [pc, #16]	; (e9e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    e9d0:	9b01      	ldr	r3, [sp, #4]
    e9d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9d6:	bf00      	nop
    e9d8:	b003      	add	sp, #12
    e9da:	f85d fb04 	ldr.w	pc, [sp], #4
    e9de:	bf00      	nop
    e9e0:	1fff9238 	.word	0x1fff9238
    e9e4:	1fff9234 	.word	0x1fff9234

0000e9e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    e9e8:	b500      	push	{lr}
    e9ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9ec:	f7f2 f914 	bl	c18 <Sys_GetCoreID>
    e9f0:	4603      	mov	r3, r0
    e9f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    e9f4:	4a0d      	ldr	r2, [pc, #52]	; (ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    e9f6:	9b01      	ldr	r3, [sp, #4]
    e9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9fc:	1e5a      	subs	r2, r3, #1
    e9fe:	490b      	ldr	r1, [pc, #44]	; (ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    ea00:	9b01      	ldr	r3, [sp, #4]
    ea02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    ea06:	4a0a      	ldr	r2, [pc, #40]	; (ea30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    ea08:	9b01      	ldr	r3, [sp, #4]
    ea0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0e:	f003 0301 	and.w	r3, r3, #1
    ea12:	2b00      	cmp	r3, #0
    ea14:	d106      	bne.n	ea24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    ea16:	4a05      	ldr	r2, [pc, #20]	; (ea2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    ea18:	9b01      	ldr	r3, [sp, #4]
    ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea1e:	2b00      	cmp	r3, #0
    ea20:	d100      	bne.n	ea24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea24:	bf00      	nop
    ea26:	b003      	add	sp, #12
    ea28:	f85d fb04 	ldr.w	pc, [sp], #4
    ea2c:	1fff9238 	.word	0x1fff9238
    ea30:	1fff9234 	.word	0x1fff9234

0000ea34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    ea34:	b500      	push	{lr}
    ea36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea38:	f7f2 f8ee 	bl	c18 <Sys_GetCoreID>
    ea3c:	4603      	mov	r3, r0
    ea3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    ea40:	4a10      	ldr	r2, [pc, #64]	; (ea84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ea42:	9b01      	ldr	r3, [sp, #4]
    ea44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea48:	2b00      	cmp	r3, #0
    ea4a:	d10d      	bne.n	ea68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea4c:	f7f1 fffa 	bl	a44 <Adc_schm_read_msr>
    ea50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea52:	9b00      	ldr	r3, [sp, #0]
    ea54:	f003 0301 	and.w	r3, r3, #1
    ea58:	2b00      	cmp	r3, #0
    ea5a:	d100      	bne.n	ea5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    ea5e:	490a      	ldr	r1, [pc, #40]	; (ea88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	9a00      	ldr	r2, [sp, #0]
    ea64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    ea68:	4a06      	ldr	r2, [pc, #24]	; (ea84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ea6a:	9b01      	ldr	r3, [sp, #4]
    ea6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea70:	1c5a      	adds	r2, r3, #1
    ea72:	4904      	ldr	r1, [pc, #16]	; (ea84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    ea74:	9b01      	ldr	r3, [sp, #4]
    ea76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea7a:	bf00      	nop
    ea7c:	b003      	add	sp, #12
    ea7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea82:	bf00      	nop
    ea84:	1fff9240 	.word	0x1fff9240
    ea88:	1fff923c 	.word	0x1fff923c

0000ea8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    ea8c:	b500      	push	{lr}
    ea8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea90:	f7f2 f8c2 	bl	c18 <Sys_GetCoreID>
    ea94:	4603      	mov	r3, r0
    ea96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    ea98:	4a0d      	ldr	r2, [pc, #52]	; (ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    ea9a:	9b01      	ldr	r3, [sp, #4]
    ea9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaa0:	1e5a      	subs	r2, r3, #1
    eaa2:	490b      	ldr	r1, [pc, #44]	; (ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    eaa4:	9b01      	ldr	r3, [sp, #4]
    eaa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    eaaa:	4a0a      	ldr	r2, [pc, #40]	; (ead4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    eaac:	9b01      	ldr	r3, [sp, #4]
    eaae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eab2:	f003 0301 	and.w	r3, r3, #1
    eab6:	2b00      	cmp	r3, #0
    eab8:	d106      	bne.n	eac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    eaba:	4a05      	ldr	r2, [pc, #20]	; (ead0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    eabc:	9b01      	ldr	r3, [sp, #4]
    eabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d100      	bne.n	eac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eac6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eac8:	bf00      	nop
    eaca:	b003      	add	sp, #12
    eacc:	f85d fb04 	ldr.w	pc, [sp], #4
    ead0:	1fff9240 	.word	0x1fff9240
    ead4:	1fff923c 	.word	0x1fff923c

0000ead8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    ead8:	b500      	push	{lr}
    eada:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eadc:	f7f2 f89c 	bl	c18 <Sys_GetCoreID>
    eae0:	4603      	mov	r3, r0
    eae2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    eae4:	4a10      	ldr	r2, [pc, #64]	; (eb28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    eae6:	9b01      	ldr	r3, [sp, #4]
    eae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaec:	2b00      	cmp	r3, #0
    eaee:	d10d      	bne.n	eb0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eaf0:	f7f1 ffa8 	bl	a44 <Adc_schm_read_msr>
    eaf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eaf6:	9b00      	ldr	r3, [sp, #0]
    eaf8:	f003 0301 	and.w	r3, r3, #1
    eafc:	2b00      	cmp	r3, #0
    eafe:	d100      	bne.n	eb02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    eb02:	490a      	ldr	r1, [pc, #40]	; (eb2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	9a00      	ldr	r2, [sp, #0]
    eb08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    eb0c:	4a06      	ldr	r2, [pc, #24]	; (eb28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    eb0e:	9b01      	ldr	r3, [sp, #4]
    eb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb14:	1c5a      	adds	r2, r3, #1
    eb16:	4904      	ldr	r1, [pc, #16]	; (eb28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    eb18:	9b01      	ldr	r3, [sp, #4]
    eb1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb1e:	bf00      	nop
    eb20:	b003      	add	sp, #12
    eb22:	f85d fb04 	ldr.w	pc, [sp], #4
    eb26:	bf00      	nop
    eb28:	1fff9248 	.word	0x1fff9248
    eb2c:	1fff9244 	.word	0x1fff9244

0000eb30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    eb30:	b500      	push	{lr}
    eb32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb34:	f7f2 f870 	bl	c18 <Sys_GetCoreID>
    eb38:	4603      	mov	r3, r0
    eb3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    eb3c:	4a0d      	ldr	r2, [pc, #52]	; (eb74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    eb3e:	9b01      	ldr	r3, [sp, #4]
    eb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb44:	1e5a      	subs	r2, r3, #1
    eb46:	490b      	ldr	r1, [pc, #44]	; (eb74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    eb48:	9b01      	ldr	r3, [sp, #4]
    eb4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    eb4e:	4a0a      	ldr	r2, [pc, #40]	; (eb78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    eb50:	9b01      	ldr	r3, [sp, #4]
    eb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb56:	f003 0301 	and.w	r3, r3, #1
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	d106      	bne.n	eb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    eb5e:	4a05      	ldr	r2, [pc, #20]	; (eb74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    eb60:	9b01      	ldr	r3, [sp, #4]
    eb62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb66:	2b00      	cmp	r3, #0
    eb68:	d100      	bne.n	eb6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb6c:	bf00      	nop
    eb6e:	b003      	add	sp, #12
    eb70:	f85d fb04 	ldr.w	pc, [sp], #4
    eb74:	1fff9248 	.word	0x1fff9248
    eb78:	1fff9244 	.word	0x1fff9244

0000eb7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    eb7c:	b500      	push	{lr}
    eb7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb80:	f7f2 f84a 	bl	c18 <Sys_GetCoreID>
    eb84:	4603      	mov	r3, r0
    eb86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    eb88:	4a10      	ldr	r2, [pc, #64]	; (ebcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    eb8a:	9b01      	ldr	r3, [sp, #4]
    eb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb90:	2b00      	cmp	r3, #0
    eb92:	d10d      	bne.n	ebb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb94:	f7f1 ff56 	bl	a44 <Adc_schm_read_msr>
    eb98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb9a:	9b00      	ldr	r3, [sp, #0]
    eb9c:	f003 0301 	and.w	r3, r3, #1
    eba0:	2b00      	cmp	r3, #0
    eba2:	d100      	bne.n	eba6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eba4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    eba6:	490a      	ldr	r1, [pc, #40]	; (ebd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	9a00      	ldr	r2, [sp, #0]
    ebac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    ebb0:	4a06      	ldr	r2, [pc, #24]	; (ebcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ebb2:	9b01      	ldr	r3, [sp, #4]
    ebb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebb8:	1c5a      	adds	r2, r3, #1
    ebba:	4904      	ldr	r1, [pc, #16]	; (ebcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    ebbc:	9b01      	ldr	r3, [sp, #4]
    ebbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebc2:	bf00      	nop
    ebc4:	b003      	add	sp, #12
    ebc6:	f85d fb04 	ldr.w	pc, [sp], #4
    ebca:	bf00      	nop
    ebcc:	1fff9250 	.word	0x1fff9250
    ebd0:	1fff924c 	.word	0x1fff924c

0000ebd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    ebd4:	b500      	push	{lr}
    ebd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebd8:	f7f2 f81e 	bl	c18 <Sys_GetCoreID>
    ebdc:	4603      	mov	r3, r0
    ebde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    ebe0:	4a0d      	ldr	r2, [pc, #52]	; (ec18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    ebe2:	9b01      	ldr	r3, [sp, #4]
    ebe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe8:	1e5a      	subs	r2, r3, #1
    ebea:	490b      	ldr	r1, [pc, #44]	; (ec18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    ebec:	9b01      	ldr	r3, [sp, #4]
    ebee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    ebf2:	4a0a      	ldr	r2, [pc, #40]	; (ec1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    ebf4:	9b01      	ldr	r3, [sp, #4]
    ebf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebfa:	f003 0301 	and.w	r3, r3, #1
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d106      	bne.n	ec10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    ec02:	4a05      	ldr	r2, [pc, #20]	; (ec18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    ec04:	9b01      	ldr	r3, [sp, #4]
    ec06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d100      	bne.n	ec10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ec10:	bf00      	nop
    ec12:	b003      	add	sp, #12
    ec14:	f85d fb04 	ldr.w	pc, [sp], #4
    ec18:	1fff9250 	.word	0x1fff9250
    ec1c:	1fff924c 	.word	0x1fff924c

0000ec20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    ec20:	b500      	push	{lr}
    ec22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec24:	f7f1 fff8 	bl	c18 <Sys_GetCoreID>
    ec28:	4603      	mov	r3, r0
    ec2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    ec2c:	4a10      	ldr	r2, [pc, #64]	; (ec70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    ec2e:	9b01      	ldr	r3, [sp, #4]
    ec30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec34:	2b00      	cmp	r3, #0
    ec36:	d10d      	bne.n	ec54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec38:	f7f1 ff04 	bl	a44 <Adc_schm_read_msr>
    ec3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec3e:	9b00      	ldr	r3, [sp, #0]
    ec40:	f003 0301 	and.w	r3, r3, #1
    ec44:	2b00      	cmp	r3, #0
    ec46:	d100      	bne.n	ec4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    ec4a:	490a      	ldr	r1, [pc, #40]	; (ec74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    ec4c:	9b01      	ldr	r3, [sp, #4]
    ec4e:	9a00      	ldr	r2, [sp, #0]
    ec50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    ec54:	4a06      	ldr	r2, [pc, #24]	; (ec70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    ec56:	9b01      	ldr	r3, [sp, #4]
    ec58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec5c:	1c5a      	adds	r2, r3, #1
    ec5e:	4904      	ldr	r1, [pc, #16]	; (ec70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    ec60:	9b01      	ldr	r3, [sp, #4]
    ec62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec66:	bf00      	nop
    ec68:	b003      	add	sp, #12
    ec6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ec6e:	bf00      	nop
    ec70:	1fff9258 	.word	0x1fff9258
    ec74:	1fff9254 	.word	0x1fff9254

0000ec78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    ec78:	b500      	push	{lr}
    ec7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec7c:	f7f1 ffcc 	bl	c18 <Sys_GetCoreID>
    ec80:	4603      	mov	r3, r0
    ec82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    ec84:	4a0d      	ldr	r2, [pc, #52]	; (ecbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    ec86:	9b01      	ldr	r3, [sp, #4]
    ec88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec8c:	1e5a      	subs	r2, r3, #1
    ec8e:	490b      	ldr	r1, [pc, #44]	; (ecbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    ec90:	9b01      	ldr	r3, [sp, #4]
    ec92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    ec96:	4a0a      	ldr	r2, [pc, #40]	; (ecc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    ec98:	9b01      	ldr	r3, [sp, #4]
    ec9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9e:	f003 0301 	and.w	r3, r3, #1
    eca2:	2b00      	cmp	r3, #0
    eca4:	d106      	bne.n	ecb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    eca6:	4a05      	ldr	r2, [pc, #20]	; (ecbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    eca8:	9b01      	ldr	r3, [sp, #4]
    ecaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecae:	2b00      	cmp	r3, #0
    ecb0:	d100      	bne.n	ecb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ecb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ecb4:	bf00      	nop
    ecb6:	b003      	add	sp, #12
    ecb8:	f85d fb04 	ldr.w	pc, [sp], #4
    ecbc:	1fff9258 	.word	0x1fff9258
    ecc0:	1fff9254 	.word	0x1fff9254

0000ecc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ecc4:	b500      	push	{lr}
    ecc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecc8:	f7f1 ffa6 	bl	c18 <Sys_GetCoreID>
    eccc:	4603      	mov	r3, r0
    ecce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    ecd0:	4a10      	ldr	r2, [pc, #64]	; (ed14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ecd2:	9b01      	ldr	r3, [sp, #4]
    ecd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d10d      	bne.n	ecf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecdc:	f7f1 feb2 	bl	a44 <Adc_schm_read_msr>
    ece0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ece2:	9b00      	ldr	r3, [sp, #0]
    ece4:	f003 0301 	and.w	r3, r3, #1
    ece8:	2b00      	cmp	r3, #0
    ecea:	d100      	bne.n	ecee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ecec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    ecee:	490a      	ldr	r1, [pc, #40]	; (ed18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	9a00      	ldr	r2, [sp, #0]
    ecf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    ecf8:	4a06      	ldr	r2, [pc, #24]	; (ed14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ecfa:	9b01      	ldr	r3, [sp, #4]
    ecfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed00:	1c5a      	adds	r2, r3, #1
    ed02:	4904      	ldr	r1, [pc, #16]	; (ed14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    ed04:	9b01      	ldr	r3, [sp, #4]
    ed06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed0a:	bf00      	nop
    ed0c:	b003      	add	sp, #12
    ed0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed12:	bf00      	nop
    ed14:	1fff9260 	.word	0x1fff9260
    ed18:	1fff925c 	.word	0x1fff925c

0000ed1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    ed1c:	b500      	push	{lr}
    ed1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed20:	f7f1 ff7a 	bl	c18 <Sys_GetCoreID>
    ed24:	4603      	mov	r3, r0
    ed26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    ed28:	4a0d      	ldr	r2, [pc, #52]	; (ed60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ed2a:	9b01      	ldr	r3, [sp, #4]
    ed2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed30:	1e5a      	subs	r2, r3, #1
    ed32:	490b      	ldr	r1, [pc, #44]	; (ed60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ed34:	9b01      	ldr	r3, [sp, #4]
    ed36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    ed3a:	4a0a      	ldr	r2, [pc, #40]	; (ed64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    ed3c:	9b01      	ldr	r3, [sp, #4]
    ed3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed42:	f003 0301 	and.w	r3, r3, #1
    ed46:	2b00      	cmp	r3, #0
    ed48:	d106      	bne.n	ed58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    ed4a:	4a05      	ldr	r2, [pc, #20]	; (ed60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    ed4c:	9b01      	ldr	r3, [sp, #4]
    ed4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed52:	2b00      	cmp	r3, #0
    ed54:	d100      	bne.n	ed58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed58:	bf00      	nop
    ed5a:	b003      	add	sp, #12
    ed5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ed60:	1fff9260 	.word	0x1fff9260
    ed64:	1fff925c 	.word	0x1fff925c

0000ed68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    ed68:	b500      	push	{lr}
    ed6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed6c:	f7f1 ff54 	bl	c18 <Sys_GetCoreID>
    ed70:	4603      	mov	r3, r0
    ed72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    ed74:	4a10      	ldr	r2, [pc, #64]	; (edb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    ed76:	9b01      	ldr	r3, [sp, #4]
    ed78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	d10d      	bne.n	ed9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed80:	f7f1 fe60 	bl	a44 <Adc_schm_read_msr>
    ed84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed86:	9b00      	ldr	r3, [sp, #0]
    ed88:	f003 0301 	and.w	r3, r3, #1
    ed8c:	2b00      	cmp	r3, #0
    ed8e:	d100      	bne.n	ed92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    ed92:	490a      	ldr	r1, [pc, #40]	; (edbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    ed94:	9b01      	ldr	r3, [sp, #4]
    ed96:	9a00      	ldr	r2, [sp, #0]
    ed98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    ed9c:	4a06      	ldr	r2, [pc, #24]	; (edb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    ed9e:	9b01      	ldr	r3, [sp, #4]
    eda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eda4:	1c5a      	adds	r2, r3, #1
    eda6:	4904      	ldr	r1, [pc, #16]	; (edb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    eda8:	9b01      	ldr	r3, [sp, #4]
    edaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    edae:	bf00      	nop
    edb0:	b003      	add	sp, #12
    edb2:	f85d fb04 	ldr.w	pc, [sp], #4
    edb6:	bf00      	nop
    edb8:	1fff9268 	.word	0x1fff9268
    edbc:	1fff9264 	.word	0x1fff9264

0000edc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    edc0:	b500      	push	{lr}
    edc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edc4:	f7f1 ff28 	bl	c18 <Sys_GetCoreID>
    edc8:	4603      	mov	r3, r0
    edca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    edcc:	4a0d      	ldr	r2, [pc, #52]	; (ee04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    edce:	9b01      	ldr	r3, [sp, #4]
    edd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd4:	1e5a      	subs	r2, r3, #1
    edd6:	490b      	ldr	r1, [pc, #44]	; (ee04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    edd8:	9b01      	ldr	r3, [sp, #4]
    edda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    edde:	4a0a      	ldr	r2, [pc, #40]	; (ee08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    ede0:	9b01      	ldr	r3, [sp, #4]
    ede2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede6:	f003 0301 	and.w	r3, r3, #1
    edea:	2b00      	cmp	r3, #0
    edec:	d106      	bne.n	edfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    edee:	4a05      	ldr	r2, [pc, #20]	; (ee04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    edf0:	9b01      	ldr	r3, [sp, #4]
    edf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edf6:	2b00      	cmp	r3, #0
    edf8:	d100      	bne.n	edfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    edfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    edfc:	bf00      	nop
    edfe:	b003      	add	sp, #12
    ee00:	f85d fb04 	ldr.w	pc, [sp], #4
    ee04:	1fff9268 	.word	0x1fff9268
    ee08:	1fff9264 	.word	0x1fff9264

0000ee0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ee0c:	b500      	push	{lr}
    ee0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee10:	f7f1 ff02 	bl	c18 <Sys_GetCoreID>
    ee14:	4603      	mov	r3, r0
    ee16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    ee18:	4a10      	ldr	r2, [pc, #64]	; (ee5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ee1a:	9b01      	ldr	r3, [sp, #4]
    ee1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d10d      	bne.n	ee40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee24:	f7f1 fe0e 	bl	a44 <Adc_schm_read_msr>
    ee28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee2a:	9b00      	ldr	r3, [sp, #0]
    ee2c:	f003 0301 	and.w	r3, r3, #1
    ee30:	2b00      	cmp	r3, #0
    ee32:	d100      	bne.n	ee36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ee36:	490a      	ldr	r1, [pc, #40]	; (ee60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    ee38:	9b01      	ldr	r3, [sp, #4]
    ee3a:	9a00      	ldr	r2, [sp, #0]
    ee3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    ee40:	4a06      	ldr	r2, [pc, #24]	; (ee5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ee42:	9b01      	ldr	r3, [sp, #4]
    ee44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee48:	1c5a      	adds	r2, r3, #1
    ee4a:	4904      	ldr	r1, [pc, #16]	; (ee5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ee4c:	9b01      	ldr	r3, [sp, #4]
    ee4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee52:	bf00      	nop
    ee54:	b003      	add	sp, #12
    ee56:	f85d fb04 	ldr.w	pc, [sp], #4
    ee5a:	bf00      	nop
    ee5c:	1fff9270 	.word	0x1fff9270
    ee60:	1fff926c 	.word	0x1fff926c

0000ee64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ee64:	b500      	push	{lr}
    ee66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee68:	f7f1 fed6 	bl	c18 <Sys_GetCoreID>
    ee6c:	4603      	mov	r3, r0
    ee6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    ee70:	4a0d      	ldr	r2, [pc, #52]	; (eea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ee72:	9b01      	ldr	r3, [sp, #4]
    ee74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee78:	1e5a      	subs	r2, r3, #1
    ee7a:	490b      	ldr	r1, [pc, #44]	; (eea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ee7c:	9b01      	ldr	r3, [sp, #4]
    ee7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ee82:	4a0a      	ldr	r2, [pc, #40]	; (eeac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    ee84:	9b01      	ldr	r3, [sp, #4]
    ee86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee8a:	f003 0301 	and.w	r3, r3, #1
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d106      	bne.n	eea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    ee92:	4a05      	ldr	r2, [pc, #20]	; (eea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ee94:	9b01      	ldr	r3, [sp, #4]
    ee96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d100      	bne.n	eea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eea0:	bf00      	nop
    eea2:	b003      	add	sp, #12
    eea4:	f85d fb04 	ldr.w	pc, [sp], #4
    eea8:	1fff9270 	.word	0x1fff9270
    eeac:	1fff926c 	.word	0x1fff926c

0000eeb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    eeb0:	b500      	push	{lr}
    eeb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eeb4:	f7f1 feb0 	bl	c18 <Sys_GetCoreID>
    eeb8:	4603      	mov	r3, r0
    eeba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    eebc:	4a10      	ldr	r2, [pc, #64]	; (ef00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    eebe:	9b01      	ldr	r3, [sp, #4]
    eec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eec4:	2b00      	cmp	r3, #0
    eec6:	d10d      	bne.n	eee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eec8:	f7f1 fdbc 	bl	a44 <Adc_schm_read_msr>
    eecc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eece:	9b00      	ldr	r3, [sp, #0]
    eed0:	f003 0301 	and.w	r3, r3, #1
    eed4:	2b00      	cmp	r3, #0
    eed6:	d100      	bne.n	eeda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eed8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    eeda:	490a      	ldr	r1, [pc, #40]	; (ef04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    eedc:	9b01      	ldr	r3, [sp, #4]
    eede:	9a00      	ldr	r2, [sp, #0]
    eee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
    eee4:	4a06      	ldr	r2, [pc, #24]	; (ef00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    eee6:	9b01      	ldr	r3, [sp, #4]
    eee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeec:	1c5a      	adds	r2, r3, #1
    eeee:	4904      	ldr	r1, [pc, #16]	; (ef00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    eef0:	9b01      	ldr	r3, [sp, #4]
    eef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eef6:	bf00      	nop
    eef8:	b003      	add	sp, #12
    eefa:	f85d fb04 	ldr.w	pc, [sp], #4
    eefe:	bf00      	nop
    ef00:	1fff9278 	.word	0x1fff9278
    ef04:	1fff9274 	.word	0x1fff9274

0000ef08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    ef08:	b500      	push	{lr}
    ef0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef0c:	f7f1 fe84 	bl	c18 <Sys_GetCoreID>
    ef10:	4603      	mov	r3, r0
    ef12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
    ef14:	4a0d      	ldr	r2, [pc, #52]	; (ef4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    ef16:	9b01      	ldr	r3, [sp, #4]
    ef18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef1c:	1e5a      	subs	r2, r3, #1
    ef1e:	490b      	ldr	r1, [pc, #44]	; (ef4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    ef20:	9b01      	ldr	r3, [sp, #4]
    ef22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    ef26:	4a0a      	ldr	r2, [pc, #40]	; (ef50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
    ef28:	9b01      	ldr	r3, [sp, #4]
    ef2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2e:	f003 0301 	and.w	r3, r3, #1
    ef32:	2b00      	cmp	r3, #0
    ef34:	d106      	bne.n	ef44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    ef36:	4a05      	ldr	r2, [pc, #20]	; (ef4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
    ef38:	9b01      	ldr	r3, [sp, #4]
    ef3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d100      	bne.n	ef44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef44:	bf00      	nop
    ef46:	b003      	add	sp, #12
    ef48:	f85d fb04 	ldr.w	pc, [sp], #4
    ef4c:	1fff9278 	.word	0x1fff9278
    ef50:	1fff9274 	.word	0x1fff9274

0000ef54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    ef54:	b500      	push	{lr}
    ef56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef58:	f7f1 fe5e 	bl	c18 <Sys_GetCoreID>
    ef5c:	4603      	mov	r3, r0
    ef5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
    ef60:	4a10      	ldr	r2, [pc, #64]	; (efa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    ef62:	9b01      	ldr	r3, [sp, #4]
    ef64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef68:	2b00      	cmp	r3, #0
    ef6a:	d10d      	bne.n	ef88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef6c:	f7f1 fd6a 	bl	a44 <Adc_schm_read_msr>
    ef70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef72:	9b00      	ldr	r3, [sp, #0]
    ef74:	f003 0301 	and.w	r3, r3, #1
    ef78:	2b00      	cmp	r3, #0
    ef7a:	d100      	bne.n	ef7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    ef7e:	490a      	ldr	r1, [pc, #40]	; (efa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
    ef80:	9b01      	ldr	r3, [sp, #4]
    ef82:	9a00      	ldr	r2, [sp, #0]
    ef84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
    ef88:	4a06      	ldr	r2, [pc, #24]	; (efa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    ef8a:	9b01      	ldr	r3, [sp, #4]
    ef8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef90:	1c5a      	adds	r2, r3, #1
    ef92:	4904      	ldr	r1, [pc, #16]	; (efa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
    ef94:	9b01      	ldr	r3, [sp, #4]
    ef96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef9a:	bf00      	nop
    ef9c:	b003      	add	sp, #12
    ef9e:	f85d fb04 	ldr.w	pc, [sp], #4
    efa2:	bf00      	nop
    efa4:	1fff9280 	.word	0x1fff9280
    efa8:	1fff927c 	.word	0x1fff927c

0000efac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
    efac:	b500      	push	{lr}
    efae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efb0:	f7f1 fe32 	bl	c18 <Sys_GetCoreID>
    efb4:	4603      	mov	r3, r0
    efb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
    efb8:	4a0d      	ldr	r2, [pc, #52]	; (eff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    efba:	9b01      	ldr	r3, [sp, #4]
    efbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efc0:	1e5a      	subs	r2, r3, #1
    efc2:	490b      	ldr	r1, [pc, #44]	; (eff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    efc4:	9b01      	ldr	r3, [sp, #4]
    efc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    efca:	4a0a      	ldr	r2, [pc, #40]	; (eff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
    efcc:	9b01      	ldr	r3, [sp, #4]
    efce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efd2:	f003 0301 	and.w	r3, r3, #1
    efd6:	2b00      	cmp	r3, #0
    efd8:	d106      	bne.n	efe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    efda:	4a05      	ldr	r2, [pc, #20]	; (eff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
    efdc:	9b01      	ldr	r3, [sp, #4]
    efde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efe2:	2b00      	cmp	r3, #0
    efe4:	d100      	bne.n	efe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efe8:	bf00      	nop
    efea:	b003      	add	sp, #12
    efec:	f85d fb04 	ldr.w	pc, [sp], #4
    eff0:	1fff9280 	.word	0x1fff9280
    eff4:	1fff927c 	.word	0x1fff927c

0000eff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    eff8:	b500      	push	{lr}
    effa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    effc:	f7f1 fe0c 	bl	c18 <Sys_GetCoreID>
    f000:	4603      	mov	r3, r0
    f002:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
    f004:	4a10      	ldr	r2, [pc, #64]	; (f048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    f006:	9b01      	ldr	r3, [sp, #4]
    f008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f00c:	2b00      	cmp	r3, #0
    f00e:	d10d      	bne.n	f02c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f010:	f7f1 fd18 	bl	a44 <Adc_schm_read_msr>
    f014:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f016:	9b00      	ldr	r3, [sp, #0]
    f018:	f003 0301 	and.w	r3, r3, #1
    f01c:	2b00      	cmp	r3, #0
    f01e:	d100      	bne.n	f022 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f020:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    f022:	490a      	ldr	r1, [pc, #40]	; (f04c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
    f024:	9b01      	ldr	r3, [sp, #4]
    f026:	9a00      	ldr	r2, [sp, #0]
    f028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
    f02c:	4a06      	ldr	r2, [pc, #24]	; (f048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    f02e:	9b01      	ldr	r3, [sp, #4]
    f030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f034:	1c5a      	adds	r2, r3, #1
    f036:	4904      	ldr	r1, [pc, #16]	; (f048 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
    f038:	9b01      	ldr	r3, [sp, #4]
    f03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f03e:	bf00      	nop
    f040:	b003      	add	sp, #12
    f042:	f85d fb04 	ldr.w	pc, [sp], #4
    f046:	bf00      	nop
    f048:	1fff9288 	.word	0x1fff9288
    f04c:	1fff9284 	.word	0x1fff9284

0000f050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
    f050:	b500      	push	{lr}
    f052:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f054:	f7f1 fde0 	bl	c18 <Sys_GetCoreID>
    f058:	4603      	mov	r3, r0
    f05a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
    f05c:	4a0d      	ldr	r2, [pc, #52]	; (f094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    f05e:	9b01      	ldr	r3, [sp, #4]
    f060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f064:	1e5a      	subs	r2, r3, #1
    f066:	490b      	ldr	r1, [pc, #44]	; (f094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    f068:	9b01      	ldr	r3, [sp, #4]
    f06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    f06e:	4a0a      	ldr	r2, [pc, #40]	; (f098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
    f070:	9b01      	ldr	r3, [sp, #4]
    f072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f076:	f003 0301 	and.w	r3, r3, #1
    f07a:	2b00      	cmp	r3, #0
    f07c:	d106      	bne.n	f08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    f07e:	4a05      	ldr	r2, [pc, #20]	; (f094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
    f080:	9b01      	ldr	r3, [sp, #4]
    f082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f086:	2b00      	cmp	r3, #0
    f088:	d100      	bne.n	f08c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f08a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f08c:	bf00      	nop
    f08e:	b003      	add	sp, #12
    f090:	f85d fb04 	ldr.w	pc, [sp], #4
    f094:	1fff9288 	.word	0x1fff9288
    f098:	1fff9284 	.word	0x1fff9284

0000f09c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    f09c:	b500      	push	{lr}
    f09e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0a0:	f7f1 fdba 	bl	c18 <Sys_GetCoreID>
    f0a4:	4603      	mov	r3, r0
    f0a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
    f0a8:	4a10      	ldr	r2, [pc, #64]	; (f0ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    f0aa:	9b01      	ldr	r3, [sp, #4]
    f0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	d10d      	bne.n	f0d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0b4:	f7f1 fcc6 	bl	a44 <Adc_schm_read_msr>
    f0b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0ba:	9b00      	ldr	r3, [sp, #0]
    f0bc:	f003 0301 	and.w	r3, r3, #1
    f0c0:	2b00      	cmp	r3, #0
    f0c2:	d100      	bne.n	f0c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    f0c6:	490a      	ldr	r1, [pc, #40]	; (f0f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
    f0c8:	9b01      	ldr	r3, [sp, #4]
    f0ca:	9a00      	ldr	r2, [sp, #0]
    f0cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
    f0d0:	4a06      	ldr	r2, [pc, #24]	; (f0ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    f0d2:	9b01      	ldr	r3, [sp, #4]
    f0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0d8:	1c5a      	adds	r2, r3, #1
    f0da:	4904      	ldr	r1, [pc, #16]	; (f0ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
    f0dc:	9b01      	ldr	r3, [sp, #4]
    f0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0e2:	bf00      	nop
    f0e4:	b003      	add	sp, #12
    f0e6:	f85d fb04 	ldr.w	pc, [sp], #4
    f0ea:	bf00      	nop
    f0ec:	1fff9290 	.word	0x1fff9290
    f0f0:	1fff928c 	.word	0x1fff928c

0000f0f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
    f0f4:	b500      	push	{lr}
    f0f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0f8:	f7f1 fd8e 	bl	c18 <Sys_GetCoreID>
    f0fc:	4603      	mov	r3, r0
    f0fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
    f100:	4a0d      	ldr	r2, [pc, #52]	; (f138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    f102:	9b01      	ldr	r3, [sp, #4]
    f104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f108:	1e5a      	subs	r2, r3, #1
    f10a:	490b      	ldr	r1, [pc, #44]	; (f138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    f10c:	9b01      	ldr	r3, [sp, #4]
    f10e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    f112:	4a0a      	ldr	r2, [pc, #40]	; (f13c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
    f114:	9b01      	ldr	r3, [sp, #4]
    f116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f11a:	f003 0301 	and.w	r3, r3, #1
    f11e:	2b00      	cmp	r3, #0
    f120:	d106      	bne.n	f130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    f122:	4a05      	ldr	r2, [pc, #20]	; (f138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
    f124:	9b01      	ldr	r3, [sp, #4]
    f126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f12a:	2b00      	cmp	r3, #0
    f12c:	d100      	bne.n	f130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f12e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f130:	bf00      	nop
    f132:	b003      	add	sp, #12
    f134:	f85d fb04 	ldr.w	pc, [sp], #4
    f138:	1fff9290 	.word	0x1fff9290
    f13c:	1fff928c 	.word	0x1fff928c

0000f140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    f140:	b500      	push	{lr}
    f142:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f144:	f7f1 fd68 	bl	c18 <Sys_GetCoreID>
    f148:	4603      	mov	r3, r0
    f14a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
    f14c:	4a10      	ldr	r2, [pc, #64]	; (f190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    f14e:	9b01      	ldr	r3, [sp, #4]
    f150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f154:	2b00      	cmp	r3, #0
    f156:	d10d      	bne.n	f174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f158:	f7f1 fc74 	bl	a44 <Adc_schm_read_msr>
    f15c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f15e:	9b00      	ldr	r3, [sp, #0]
    f160:	f003 0301 	and.w	r3, r3, #1
    f164:	2b00      	cmp	r3, #0
    f166:	d100      	bne.n	f16a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f168:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
    f16a:	490a      	ldr	r1, [pc, #40]	; (f194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	9a00      	ldr	r2, [sp, #0]
    f170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
    f174:	4a06      	ldr	r2, [pc, #24]	; (f190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    f176:	9b01      	ldr	r3, [sp, #4]
    f178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f17c:	1c5a      	adds	r2, r3, #1
    f17e:	4904      	ldr	r1, [pc, #16]	; (f190 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
    f180:	9b01      	ldr	r3, [sp, #4]
    f182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f186:	bf00      	nop
    f188:	b003      	add	sp, #12
    f18a:	f85d fb04 	ldr.w	pc, [sp], #4
    f18e:	bf00      	nop
    f190:	1fff9298 	.word	0x1fff9298
    f194:	1fff9294 	.word	0x1fff9294

0000f198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
    f198:	b500      	push	{lr}
    f19a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f19c:	f7f1 fd3c 	bl	c18 <Sys_GetCoreID>
    f1a0:	4603      	mov	r3, r0
    f1a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
    f1a4:	4a0d      	ldr	r2, [pc, #52]	; (f1dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    f1a6:	9b01      	ldr	r3, [sp, #4]
    f1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ac:	1e5a      	subs	r2, r3, #1
    f1ae:	490b      	ldr	r1, [pc, #44]	; (f1dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    f1b0:	9b01      	ldr	r3, [sp, #4]
    f1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
    f1b6:	4a0a      	ldr	r2, [pc, #40]	; (f1e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
    f1b8:	9b01      	ldr	r3, [sp, #4]
    f1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1be:	f003 0301 	and.w	r3, r3, #1
    f1c2:	2b00      	cmp	r3, #0
    f1c4:	d106      	bne.n	f1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    f1c6:	4a05      	ldr	r2, [pc, #20]	; (f1dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
    f1c8:	9b01      	ldr	r3, [sp, #4]
    f1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	d100      	bne.n	f1d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1d4:	bf00      	nop
    f1d6:	b003      	add	sp, #12
    f1d8:	f85d fb04 	ldr.w	pc, [sp], #4
    f1dc:	1fff9298 	.word	0x1fff9298
    f1e0:	1fff9294 	.word	0x1fff9294

0000f1e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    f1e4:	b500      	push	{lr}
    f1e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1e8:	f7f1 fd16 	bl	c18 <Sys_GetCoreID>
    f1ec:	4603      	mov	r3, r0
    f1ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
    f1f0:	4a10      	ldr	r2, [pc, #64]	; (f234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    f1f2:	9b01      	ldr	r3, [sp, #4]
    f1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d10d      	bne.n	f218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1fc:	f7f1 fc22 	bl	a44 <Adc_schm_read_msr>
    f200:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f202:	9b00      	ldr	r3, [sp, #0]
    f204:	f003 0301 	and.w	r3, r3, #1
    f208:	2b00      	cmp	r3, #0
    f20a:	d100      	bne.n	f20e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f20c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
    f20e:	490a      	ldr	r1, [pc, #40]	; (f238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	9a00      	ldr	r2, [sp, #0]
    f214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
    f218:	4a06      	ldr	r2, [pc, #24]	; (f234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    f21a:	9b01      	ldr	r3, [sp, #4]
    f21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f220:	1c5a      	adds	r2, r3, #1
    f222:	4904      	ldr	r1, [pc, #16]	; (f234 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
    f224:	9b01      	ldr	r3, [sp, #4]
    f226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f22a:	bf00      	nop
    f22c:	b003      	add	sp, #12
    f22e:	f85d fb04 	ldr.w	pc, [sp], #4
    f232:	bf00      	nop
    f234:	1fff92a0 	.word	0x1fff92a0
    f238:	1fff929c 	.word	0x1fff929c

0000f23c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
    f23c:	b500      	push	{lr}
    f23e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f240:	f7f1 fcea 	bl	c18 <Sys_GetCoreID>
    f244:	4603      	mov	r3, r0
    f246:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
    f248:	4a0d      	ldr	r2, [pc, #52]	; (f280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    f24a:	9b01      	ldr	r3, [sp, #4]
    f24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f250:	1e5a      	subs	r2, r3, #1
    f252:	490b      	ldr	r1, [pc, #44]	; (f280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    f254:	9b01      	ldr	r3, [sp, #4]
    f256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
    f25a:	4a0a      	ldr	r2, [pc, #40]	; (f284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
    f25c:	9b01      	ldr	r3, [sp, #4]
    f25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f262:	f003 0301 	and.w	r3, r3, #1
    f266:	2b00      	cmp	r3, #0
    f268:	d106      	bne.n	f278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    f26a:	4a05      	ldr	r2, [pc, #20]	; (f280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
    f26c:	9b01      	ldr	r3, [sp, #4]
    f26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f272:	2b00      	cmp	r3, #0
    f274:	d100      	bne.n	f278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f276:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f278:	bf00      	nop
    f27a:	b003      	add	sp, #12
    f27c:	f85d fb04 	ldr.w	pc, [sp], #4
    f280:	1fff92a0 	.word	0x1fff92a0
    f284:	1fff929c 	.word	0x1fff929c

0000f288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    f288:	b500      	push	{lr}
    f28a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f28c:	f7f1 fcc4 	bl	c18 <Sys_GetCoreID>
    f290:	4603      	mov	r3, r0
    f292:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
    f294:	4a10      	ldr	r2, [pc, #64]	; (f2d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    f296:	9b01      	ldr	r3, [sp, #4]
    f298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f29c:	2b00      	cmp	r3, #0
    f29e:	d10d      	bne.n	f2bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f2a0:	f7f1 fbd0 	bl	a44 <Adc_schm_read_msr>
    f2a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f2a6:	9b00      	ldr	r3, [sp, #0]
    f2a8:	f003 0301 	and.w	r3, r3, #1
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d100      	bne.n	f2b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f2b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
    f2b2:	490a      	ldr	r1, [pc, #40]	; (f2dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	9a00      	ldr	r2, [sp, #0]
    f2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
    f2bc:	4a06      	ldr	r2, [pc, #24]	; (f2d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    f2be:	9b01      	ldr	r3, [sp, #4]
    f2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2c4:	1c5a      	adds	r2, r3, #1
    f2c6:	4904      	ldr	r1, [pc, #16]	; (f2d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
    f2c8:	9b01      	ldr	r3, [sp, #4]
    f2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2ce:	bf00      	nop
    f2d0:	b003      	add	sp, #12
    f2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f2d6:	bf00      	nop
    f2d8:	1fff92a8 	.word	0x1fff92a8
    f2dc:	1fff92a4 	.word	0x1fff92a4

0000f2e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
    f2e0:	b500      	push	{lr}
    f2e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2e4:	f7f1 fc98 	bl	c18 <Sys_GetCoreID>
    f2e8:	4603      	mov	r3, r0
    f2ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
    f2ec:	4a0d      	ldr	r2, [pc, #52]	; (f324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    f2ee:	9b01      	ldr	r3, [sp, #4]
    f2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f4:	1e5a      	subs	r2, r3, #1
    f2f6:	490b      	ldr	r1, [pc, #44]	; (f324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    f2f8:	9b01      	ldr	r3, [sp, #4]
    f2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
    f2fe:	4a0a      	ldr	r2, [pc, #40]	; (f328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
    f300:	9b01      	ldr	r3, [sp, #4]
    f302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f306:	f003 0301 	and.w	r3, r3, #1
    f30a:	2b00      	cmp	r3, #0
    f30c:	d106      	bne.n	f31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    f30e:	4a05      	ldr	r2, [pc, #20]	; (f324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f316:	2b00      	cmp	r3, #0
    f318:	d100      	bne.n	f31c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f31a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f31c:	bf00      	nop
    f31e:	b003      	add	sp, #12
    f320:	f85d fb04 	ldr.w	pc, [sp], #4
    f324:	1fff92a8 	.word	0x1fff92a8
    f328:	1fff92a4 	.word	0x1fff92a4

0000f32c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    f32c:	b500      	push	{lr}
    f32e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f330:	f7f1 fc72 	bl	c18 <Sys_GetCoreID>
    f334:	4603      	mov	r3, r0
    f336:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
    f338:	4a10      	ldr	r2, [pc, #64]	; (f37c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    f33a:	9b01      	ldr	r3, [sp, #4]
    f33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f340:	2b00      	cmp	r3, #0
    f342:	d10d      	bne.n	f360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f344:	f7f1 fb7e 	bl	a44 <Adc_schm_read_msr>
    f348:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f34a:	9b00      	ldr	r3, [sp, #0]
    f34c:	f003 0301 	and.w	r3, r3, #1
    f350:	2b00      	cmp	r3, #0
    f352:	d100      	bne.n	f356 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f354:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
    f356:	490a      	ldr	r1, [pc, #40]	; (f380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
    f358:	9b01      	ldr	r3, [sp, #4]
    f35a:	9a00      	ldr	r2, [sp, #0]
    f35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
    f360:	4a06      	ldr	r2, [pc, #24]	; (f37c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    f362:	9b01      	ldr	r3, [sp, #4]
    f364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f368:	1c5a      	adds	r2, r3, #1
    f36a:	4904      	ldr	r1, [pc, #16]	; (f37c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
    f36c:	9b01      	ldr	r3, [sp, #4]
    f36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f372:	bf00      	nop
    f374:	b003      	add	sp, #12
    f376:	f85d fb04 	ldr.w	pc, [sp], #4
    f37a:	bf00      	nop
    f37c:	1fff92b0 	.word	0x1fff92b0
    f380:	1fff92ac 	.word	0x1fff92ac

0000f384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
    f384:	b500      	push	{lr}
    f386:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f388:	f7f1 fc46 	bl	c18 <Sys_GetCoreID>
    f38c:	4603      	mov	r3, r0
    f38e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
    f390:	4a0d      	ldr	r2, [pc, #52]	; (f3c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    f392:	9b01      	ldr	r3, [sp, #4]
    f394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f398:	1e5a      	subs	r2, r3, #1
    f39a:	490b      	ldr	r1, [pc, #44]	; (f3c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    f39c:	9b01      	ldr	r3, [sp, #4]
    f39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
    f3a2:	4a0a      	ldr	r2, [pc, #40]	; (f3cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
    f3a4:	9b01      	ldr	r3, [sp, #4]
    f3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3aa:	f003 0301 	and.w	r3, r3, #1
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	d106      	bne.n	f3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    f3b2:	4a05      	ldr	r2, [pc, #20]	; (f3c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
    f3b4:	9b01      	ldr	r3, [sp, #4]
    f3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d100      	bne.n	f3c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3c0:	bf00      	nop
    f3c2:	b003      	add	sp, #12
    f3c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f3c8:	1fff92b0 	.word	0x1fff92b0
    f3cc:	1fff92ac 	.word	0x1fff92ac

0000f3d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    f3d0:	b500      	push	{lr}
    f3d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3d4:	f7f1 fc20 	bl	c18 <Sys_GetCoreID>
    f3d8:	4603      	mov	r3, r0
    f3da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
    f3dc:	4a10      	ldr	r2, [pc, #64]	; (f420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    f3de:	9b01      	ldr	r3, [sp, #4]
    f3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e4:	2b00      	cmp	r3, #0
    f3e6:	d10d      	bne.n	f404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3e8:	f7f1 fb2c 	bl	a44 <Adc_schm_read_msr>
    f3ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3ee:	9b00      	ldr	r3, [sp, #0]
    f3f0:	f003 0301 	and.w	r3, r3, #1
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d100      	bne.n	f3fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
    f3fa:	490a      	ldr	r1, [pc, #40]	; (f424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	9a00      	ldr	r2, [sp, #0]
    f400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
    f404:	4a06      	ldr	r2, [pc, #24]	; (f420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    f406:	9b01      	ldr	r3, [sp, #4]
    f408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f40c:	1c5a      	adds	r2, r3, #1
    f40e:	4904      	ldr	r1, [pc, #16]	; (f420 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
    f410:	9b01      	ldr	r3, [sp, #4]
    f412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f416:	bf00      	nop
    f418:	b003      	add	sp, #12
    f41a:	f85d fb04 	ldr.w	pc, [sp], #4
    f41e:	bf00      	nop
    f420:	1fff92b8 	.word	0x1fff92b8
    f424:	1fff92b4 	.word	0x1fff92b4

0000f428 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
    f428:	b500      	push	{lr}
    f42a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f42c:	f7f1 fbf4 	bl	c18 <Sys_GetCoreID>
    f430:	4603      	mov	r3, r0
    f432:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
    f434:	4a0d      	ldr	r2, [pc, #52]	; (f46c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    f436:	9b01      	ldr	r3, [sp, #4]
    f438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f43c:	1e5a      	subs	r2, r3, #1
    f43e:	490b      	ldr	r1, [pc, #44]	; (f46c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    f440:	9b01      	ldr	r3, [sp, #4]
    f442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
    f446:	4a0a      	ldr	r2, [pc, #40]	; (f470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
    f448:	9b01      	ldr	r3, [sp, #4]
    f44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44e:	f003 0301 	and.w	r3, r3, #1
    f452:	2b00      	cmp	r3, #0
    f454:	d106      	bne.n	f464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    f456:	4a05      	ldr	r2, [pc, #20]	; (f46c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
    f458:	9b01      	ldr	r3, [sp, #4]
    f45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f45e:	2b00      	cmp	r3, #0
    f460:	d100      	bne.n	f464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f462:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f464:	bf00      	nop
    f466:	b003      	add	sp, #12
    f468:	f85d fb04 	ldr.w	pc, [sp], #4
    f46c:	1fff92b8 	.word	0x1fff92b8
    f470:	1fff92b4 	.word	0x1fff92b4

0000f474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    f474:	b500      	push	{lr}
    f476:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f478:	f7f1 fbce 	bl	c18 <Sys_GetCoreID>
    f47c:	4603      	mov	r3, r0
    f47e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
    f480:	4a10      	ldr	r2, [pc, #64]	; (f4c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    f482:	9b01      	ldr	r3, [sp, #4]
    f484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f488:	2b00      	cmp	r3, #0
    f48a:	d10d      	bne.n	f4a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f48c:	f7f1 fada 	bl	a44 <Adc_schm_read_msr>
    f490:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f492:	9b00      	ldr	r3, [sp, #0]
    f494:	f003 0301 	and.w	r3, r3, #1
    f498:	2b00      	cmp	r3, #0
    f49a:	d100      	bne.n	f49e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f49c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
    f49e:	490a      	ldr	r1, [pc, #40]	; (f4c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	9a00      	ldr	r2, [sp, #0]
    f4a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
    f4a8:	4a06      	ldr	r2, [pc, #24]	; (f4c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    f4aa:	9b01      	ldr	r3, [sp, #4]
    f4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4b0:	1c5a      	adds	r2, r3, #1
    f4b2:	4904      	ldr	r1, [pc, #16]	; (f4c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
    f4b4:	9b01      	ldr	r3, [sp, #4]
    f4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4ba:	bf00      	nop
    f4bc:	b003      	add	sp, #12
    f4be:	f85d fb04 	ldr.w	pc, [sp], #4
    f4c2:	bf00      	nop
    f4c4:	1fff92c0 	.word	0x1fff92c0
    f4c8:	1fff92bc 	.word	0x1fff92bc

0000f4cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
    f4cc:	b500      	push	{lr}
    f4ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4d0:	f7f1 fba2 	bl	c18 <Sys_GetCoreID>
    f4d4:	4603      	mov	r3, r0
    f4d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
    f4d8:	4a0d      	ldr	r2, [pc, #52]	; (f510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    f4da:	9b01      	ldr	r3, [sp, #4]
    f4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4e0:	1e5a      	subs	r2, r3, #1
    f4e2:	490b      	ldr	r1, [pc, #44]	; (f510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    f4e4:	9b01      	ldr	r3, [sp, #4]
    f4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
    f4ea:	4a0a      	ldr	r2, [pc, #40]	; (f514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
    f4ec:	9b01      	ldr	r3, [sp, #4]
    f4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4f2:	f003 0301 	and.w	r3, r3, #1
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d106      	bne.n	f508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    f4fa:	4a05      	ldr	r2, [pc, #20]	; (f510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f502:	2b00      	cmp	r3, #0
    f504:	d100      	bne.n	f508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f506:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f508:	bf00      	nop
    f50a:	b003      	add	sp, #12
    f50c:	f85d fb04 	ldr.w	pc, [sp], #4
    f510:	1fff92c0 	.word	0x1fff92c0
    f514:	1fff92bc 	.word	0x1fff92bc

0000f518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    f518:	b500      	push	{lr}
    f51a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f51c:	f7f1 fb7c 	bl	c18 <Sys_GetCoreID>
    f520:	4603      	mov	r3, r0
    f522:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
    f524:	4a10      	ldr	r2, [pc, #64]	; (f568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    f526:	9b01      	ldr	r3, [sp, #4]
    f528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f52c:	2b00      	cmp	r3, #0
    f52e:	d10d      	bne.n	f54c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f530:	f7f1 fa88 	bl	a44 <Adc_schm_read_msr>
    f534:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f536:	9b00      	ldr	r3, [sp, #0]
    f538:	f003 0301 	and.w	r3, r3, #1
    f53c:	2b00      	cmp	r3, #0
    f53e:	d100      	bne.n	f542 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f540:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
    f542:	490a      	ldr	r1, [pc, #40]	; (f56c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
    f544:	9b01      	ldr	r3, [sp, #4]
    f546:	9a00      	ldr	r2, [sp, #0]
    f548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
    f54c:	4a06      	ldr	r2, [pc, #24]	; (f568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    f54e:	9b01      	ldr	r3, [sp, #4]
    f550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f554:	1c5a      	adds	r2, r3, #1
    f556:	4904      	ldr	r1, [pc, #16]	; (f568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
    f558:	9b01      	ldr	r3, [sp, #4]
    f55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f55e:	bf00      	nop
    f560:	b003      	add	sp, #12
    f562:	f85d fb04 	ldr.w	pc, [sp], #4
    f566:	bf00      	nop
    f568:	1fff92c8 	.word	0x1fff92c8
    f56c:	1fff92c4 	.word	0x1fff92c4

0000f570 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
    f570:	b500      	push	{lr}
    f572:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f574:	f7f1 fb50 	bl	c18 <Sys_GetCoreID>
    f578:	4603      	mov	r3, r0
    f57a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
    f57c:	4a0d      	ldr	r2, [pc, #52]	; (f5b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    f57e:	9b01      	ldr	r3, [sp, #4]
    f580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f584:	1e5a      	subs	r2, r3, #1
    f586:	490b      	ldr	r1, [pc, #44]	; (f5b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    f588:	9b01      	ldr	r3, [sp, #4]
    f58a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
    f58e:	4a0a      	ldr	r2, [pc, #40]	; (f5b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
    f590:	9b01      	ldr	r3, [sp, #4]
    f592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f596:	f003 0301 	and.w	r3, r3, #1
    f59a:	2b00      	cmp	r3, #0
    f59c:	d106      	bne.n	f5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    f59e:	4a05      	ldr	r2, [pc, #20]	; (f5b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
    f5a0:	9b01      	ldr	r3, [sp, #4]
    f5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5a6:	2b00      	cmp	r3, #0
    f5a8:	d100      	bne.n	f5ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f5aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f5ac:	bf00      	nop
    f5ae:	b003      	add	sp, #12
    f5b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f5b4:	1fff92c8 	.word	0x1fff92c8
    f5b8:	1fff92c4 	.word	0x1fff92c4

0000f5bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    f5bc:	b500      	push	{lr}
    f5be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5c0:	f7f1 fb2a 	bl	c18 <Sys_GetCoreID>
    f5c4:	4603      	mov	r3, r0
    f5c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
    f5c8:	4a10      	ldr	r2, [pc, #64]	; (f60c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    f5ca:	9b01      	ldr	r3, [sp, #4]
    f5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	d10d      	bne.n	f5f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5d4:	f7f1 fa36 	bl	a44 <Adc_schm_read_msr>
    f5d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5da:	9b00      	ldr	r3, [sp, #0]
    f5dc:	f003 0301 	and.w	r3, r3, #1
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d100      	bne.n	f5e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
    f5e6:	490a      	ldr	r1, [pc, #40]	; (f610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	9a00      	ldr	r2, [sp, #0]
    f5ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
    f5f0:	4a06      	ldr	r2, [pc, #24]	; (f60c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    f5f2:	9b01      	ldr	r3, [sp, #4]
    f5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5f8:	1c5a      	adds	r2, r3, #1
    f5fa:	4904      	ldr	r1, [pc, #16]	; (f60c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
    f5fc:	9b01      	ldr	r3, [sp, #4]
    f5fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f602:	bf00      	nop
    f604:	b003      	add	sp, #12
    f606:	f85d fb04 	ldr.w	pc, [sp], #4
    f60a:	bf00      	nop
    f60c:	1fff92d0 	.word	0x1fff92d0
    f610:	1fff92cc 	.word	0x1fff92cc

0000f614 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
    f614:	b500      	push	{lr}
    f616:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f618:	f7f1 fafe 	bl	c18 <Sys_GetCoreID>
    f61c:	4603      	mov	r3, r0
    f61e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
    f620:	4a0d      	ldr	r2, [pc, #52]	; (f658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    f622:	9b01      	ldr	r3, [sp, #4]
    f624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f628:	1e5a      	subs	r2, r3, #1
    f62a:	490b      	ldr	r1, [pc, #44]	; (f658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    f62c:	9b01      	ldr	r3, [sp, #4]
    f62e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
    f632:	4a0a      	ldr	r2, [pc, #40]	; (f65c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
    f634:	9b01      	ldr	r3, [sp, #4]
    f636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f63a:	f003 0301 	and.w	r3, r3, #1
    f63e:	2b00      	cmp	r3, #0
    f640:	d106      	bne.n	f650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    f642:	4a05      	ldr	r2, [pc, #20]	; (f658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
    f644:	9b01      	ldr	r3, [sp, #4]
    f646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f64a:	2b00      	cmp	r3, #0
    f64c:	d100      	bne.n	f650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f64e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f650:	bf00      	nop
    f652:	b003      	add	sp, #12
    f654:	f85d fb04 	ldr.w	pc, [sp], #4
    f658:	1fff92d0 	.word	0x1fff92d0
    f65c:	1fff92cc 	.word	0x1fff92cc

0000f660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    f660:	b500      	push	{lr}
    f662:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f664:	f7f1 fad8 	bl	c18 <Sys_GetCoreID>
    f668:	4603      	mov	r3, r0
    f66a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
    f66c:	4a10      	ldr	r2, [pc, #64]	; (f6b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    f66e:	9b01      	ldr	r3, [sp, #4]
    f670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f674:	2b00      	cmp	r3, #0
    f676:	d10d      	bne.n	f694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f678:	f7f1 f9e4 	bl	a44 <Adc_schm_read_msr>
    f67c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f67e:	9b00      	ldr	r3, [sp, #0]
    f680:	f003 0301 	and.w	r3, r3, #1
    f684:	2b00      	cmp	r3, #0
    f686:	d100      	bne.n	f68a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f688:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
    f68a:	490a      	ldr	r1, [pc, #40]	; (f6b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
    f68c:	9b01      	ldr	r3, [sp, #4]
    f68e:	9a00      	ldr	r2, [sp, #0]
    f690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
    f694:	4a06      	ldr	r2, [pc, #24]	; (f6b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    f696:	9b01      	ldr	r3, [sp, #4]
    f698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f69c:	1c5a      	adds	r2, r3, #1
    f69e:	4904      	ldr	r1, [pc, #16]	; (f6b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
    f6a0:	9b01      	ldr	r3, [sp, #4]
    f6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6a6:	bf00      	nop
    f6a8:	b003      	add	sp, #12
    f6aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f6ae:	bf00      	nop
    f6b0:	1fff92d8 	.word	0x1fff92d8
    f6b4:	1fff92d4 	.word	0x1fff92d4

0000f6b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
    f6b8:	b500      	push	{lr}
    f6ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6bc:	f7f1 faac 	bl	c18 <Sys_GetCoreID>
    f6c0:	4603      	mov	r3, r0
    f6c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
    f6c4:	4a0d      	ldr	r2, [pc, #52]	; (f6fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    f6c6:	9b01      	ldr	r3, [sp, #4]
    f6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6cc:	1e5a      	subs	r2, r3, #1
    f6ce:	490b      	ldr	r1, [pc, #44]	; (f6fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    f6d0:	9b01      	ldr	r3, [sp, #4]
    f6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
    f6d6:	4a0a      	ldr	r2, [pc, #40]	; (f700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
    f6d8:	9b01      	ldr	r3, [sp, #4]
    f6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6de:	f003 0301 	and.w	r3, r3, #1
    f6e2:	2b00      	cmp	r3, #0
    f6e4:	d106      	bne.n	f6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    f6e6:	4a05      	ldr	r2, [pc, #20]	; (f6fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
    f6e8:	9b01      	ldr	r3, [sp, #4]
    f6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	d100      	bne.n	f6f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f6f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f6f4:	bf00      	nop
    f6f6:	b003      	add	sp, #12
    f6f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f6fc:	1fff92d8 	.word	0x1fff92d8
    f700:	1fff92d4 	.word	0x1fff92d4

0000f704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    f704:	b500      	push	{lr}
    f706:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f708:	f7f1 fa86 	bl	c18 <Sys_GetCoreID>
    f70c:	4603      	mov	r3, r0
    f70e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
    f710:	4a10      	ldr	r2, [pc, #64]	; (f754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    f712:	9b01      	ldr	r3, [sp, #4]
    f714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f718:	2b00      	cmp	r3, #0
    f71a:	d10d      	bne.n	f738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f71c:	f7f1 f992 	bl	a44 <Adc_schm_read_msr>
    f720:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f722:	9b00      	ldr	r3, [sp, #0]
    f724:	f003 0301 	and.w	r3, r3, #1
    f728:	2b00      	cmp	r3, #0
    f72a:	d100      	bne.n	f72e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f72c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
    f72e:	490a      	ldr	r1, [pc, #40]	; (f758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
    f730:	9b01      	ldr	r3, [sp, #4]
    f732:	9a00      	ldr	r2, [sp, #0]
    f734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
    f738:	4a06      	ldr	r2, [pc, #24]	; (f754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    f73a:	9b01      	ldr	r3, [sp, #4]
    f73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f740:	1c5a      	adds	r2, r3, #1
    f742:	4904      	ldr	r1, [pc, #16]	; (f754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
    f744:	9b01      	ldr	r3, [sp, #4]
    f746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f74a:	bf00      	nop
    f74c:	b003      	add	sp, #12
    f74e:	f85d fb04 	ldr.w	pc, [sp], #4
    f752:	bf00      	nop
    f754:	1fff92e0 	.word	0x1fff92e0
    f758:	1fff92dc 	.word	0x1fff92dc

0000f75c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
    f75c:	b500      	push	{lr}
    f75e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f760:	f7f1 fa5a 	bl	c18 <Sys_GetCoreID>
    f764:	4603      	mov	r3, r0
    f766:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
    f768:	4a0d      	ldr	r2, [pc, #52]	; (f7a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    f76a:	9b01      	ldr	r3, [sp, #4]
    f76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f770:	1e5a      	subs	r2, r3, #1
    f772:	490b      	ldr	r1, [pc, #44]	; (f7a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    f774:	9b01      	ldr	r3, [sp, #4]
    f776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
    f77a:	4a0a      	ldr	r2, [pc, #40]	; (f7a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
    f77c:	9b01      	ldr	r3, [sp, #4]
    f77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f782:	f003 0301 	and.w	r3, r3, #1
    f786:	2b00      	cmp	r3, #0
    f788:	d106      	bne.n	f798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    f78a:	4a05      	ldr	r2, [pc, #20]	; (f7a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
    f78c:	9b01      	ldr	r3, [sp, #4]
    f78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f792:	2b00      	cmp	r3, #0
    f794:	d100      	bne.n	f798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f796:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f798:	bf00      	nop
    f79a:	b003      	add	sp, #12
    f79c:	f85d fb04 	ldr.w	pc, [sp], #4
    f7a0:	1fff92e0 	.word	0x1fff92e0
    f7a4:	1fff92dc 	.word	0x1fff92dc

0000f7a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    f7a8:	b500      	push	{lr}
    f7aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7ac:	f7f1 fa34 	bl	c18 <Sys_GetCoreID>
    f7b0:	4603      	mov	r3, r0
    f7b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
    f7b4:	4a10      	ldr	r2, [pc, #64]	; (f7f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    f7b6:	9b01      	ldr	r3, [sp, #4]
    f7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7bc:	2b00      	cmp	r3, #0
    f7be:	d10d      	bne.n	f7dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f7c0:	f7f1 f940 	bl	a44 <Adc_schm_read_msr>
    f7c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f7c6:	9b00      	ldr	r3, [sp, #0]
    f7c8:	f003 0301 	and.w	r3, r3, #1
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d100      	bne.n	f7d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
    f7d2:	490a      	ldr	r1, [pc, #40]	; (f7fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
    f7d4:	9b01      	ldr	r3, [sp, #4]
    f7d6:	9a00      	ldr	r2, [sp, #0]
    f7d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
    f7dc:	4a06      	ldr	r2, [pc, #24]	; (f7f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    f7de:	9b01      	ldr	r3, [sp, #4]
    f7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7e4:	1c5a      	adds	r2, r3, #1
    f7e6:	4904      	ldr	r1, [pc, #16]	; (f7f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
    f7e8:	9b01      	ldr	r3, [sp, #4]
    f7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7ee:	bf00      	nop
    f7f0:	b003      	add	sp, #12
    f7f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f7f6:	bf00      	nop
    f7f8:	1fff92e8 	.word	0x1fff92e8
    f7fc:	1fff92e4 	.word	0x1fff92e4

0000f800 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
    f800:	b500      	push	{lr}
    f802:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f804:	f7f1 fa08 	bl	c18 <Sys_GetCoreID>
    f808:	4603      	mov	r3, r0
    f80a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
    f80c:	4a0d      	ldr	r2, [pc, #52]	; (f844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    f80e:	9b01      	ldr	r3, [sp, #4]
    f810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f814:	1e5a      	subs	r2, r3, #1
    f816:	490b      	ldr	r1, [pc, #44]	; (f844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    f818:	9b01      	ldr	r3, [sp, #4]
    f81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
    f81e:	4a0a      	ldr	r2, [pc, #40]	; (f848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
    f820:	9b01      	ldr	r3, [sp, #4]
    f822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f826:	f003 0301 	and.w	r3, r3, #1
    f82a:	2b00      	cmp	r3, #0
    f82c:	d106      	bne.n	f83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    f82e:	4a05      	ldr	r2, [pc, #20]	; (f844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
    f830:	9b01      	ldr	r3, [sp, #4]
    f832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f836:	2b00      	cmp	r3, #0
    f838:	d100      	bne.n	f83c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f83a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f83c:	bf00      	nop
    f83e:	b003      	add	sp, #12
    f840:	f85d fb04 	ldr.w	pc, [sp], #4
    f844:	1fff92e8 	.word	0x1fff92e8
    f848:	1fff92e4 	.word	0x1fff92e4

0000f84c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    f84c:	b500      	push	{lr}
    f84e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f850:	f7f1 f9e2 	bl	c18 <Sys_GetCoreID>
    f854:	4603      	mov	r3, r0
    f856:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
    f858:	4a10      	ldr	r2, [pc, #64]	; (f89c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    f85a:	9b01      	ldr	r3, [sp, #4]
    f85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f860:	2b00      	cmp	r3, #0
    f862:	d10d      	bne.n	f880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f864:	f7f1 f8ee 	bl	a44 <Adc_schm_read_msr>
    f868:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f86a:	9b00      	ldr	r3, [sp, #0]
    f86c:	f003 0301 	and.w	r3, r3, #1
    f870:	2b00      	cmp	r3, #0
    f872:	d100      	bne.n	f876 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f874:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
    f876:	490a      	ldr	r1, [pc, #40]	; (f8a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
    f878:	9b01      	ldr	r3, [sp, #4]
    f87a:	9a00      	ldr	r2, [sp, #0]
    f87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
    f880:	4a06      	ldr	r2, [pc, #24]	; (f89c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    f882:	9b01      	ldr	r3, [sp, #4]
    f884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f888:	1c5a      	adds	r2, r3, #1
    f88a:	4904      	ldr	r1, [pc, #16]	; (f89c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
    f88c:	9b01      	ldr	r3, [sp, #4]
    f88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f892:	bf00      	nop
    f894:	b003      	add	sp, #12
    f896:	f85d fb04 	ldr.w	pc, [sp], #4
    f89a:	bf00      	nop
    f89c:	1fff92f0 	.word	0x1fff92f0
    f8a0:	1fff92ec 	.word	0x1fff92ec

0000f8a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
    f8a4:	b500      	push	{lr}
    f8a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8a8:	f7f1 f9b6 	bl	c18 <Sys_GetCoreID>
    f8ac:	4603      	mov	r3, r0
    f8ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
    f8b0:	4a0d      	ldr	r2, [pc, #52]	; (f8e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    f8b2:	9b01      	ldr	r3, [sp, #4]
    f8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8b8:	1e5a      	subs	r2, r3, #1
    f8ba:	490b      	ldr	r1, [pc, #44]	; (f8e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    f8bc:	9b01      	ldr	r3, [sp, #4]
    f8be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
    f8c2:	4a0a      	ldr	r2, [pc, #40]	; (f8ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
    f8c4:	9b01      	ldr	r3, [sp, #4]
    f8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8ca:	f003 0301 	and.w	r3, r3, #1
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	d106      	bne.n	f8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    f8d2:	4a05      	ldr	r2, [pc, #20]	; (f8e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
    f8d4:	9b01      	ldr	r3, [sp, #4]
    f8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d100      	bne.n	f8e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8e0:	bf00      	nop
    f8e2:	b003      	add	sp, #12
    f8e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f8e8:	1fff92f0 	.word	0x1fff92f0
    f8ec:	1fff92ec 	.word	0x1fff92ec

0000f8f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    f8f0:	b500      	push	{lr}
    f8f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8f4:	f7f1 f990 	bl	c18 <Sys_GetCoreID>
    f8f8:	4603      	mov	r3, r0
    f8fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
    f8fc:	4a10      	ldr	r2, [pc, #64]	; (f940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    f8fe:	9b01      	ldr	r3, [sp, #4]
    f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f904:	2b00      	cmp	r3, #0
    f906:	d10d      	bne.n	f924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f908:	f7f1 f89c 	bl	a44 <Adc_schm_read_msr>
    f90c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f90e:	9b00      	ldr	r3, [sp, #0]
    f910:	f003 0301 	and.w	r3, r3, #1
    f914:	2b00      	cmp	r3, #0
    f916:	d100      	bne.n	f91a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f918:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
    f91a:	490a      	ldr	r1, [pc, #40]	; (f944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
    f91c:	9b01      	ldr	r3, [sp, #4]
    f91e:	9a00      	ldr	r2, [sp, #0]
    f920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
    f924:	4a06      	ldr	r2, [pc, #24]	; (f940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    f926:	9b01      	ldr	r3, [sp, #4]
    f928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f92c:	1c5a      	adds	r2, r3, #1
    f92e:	4904      	ldr	r1, [pc, #16]	; (f940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
    f930:	9b01      	ldr	r3, [sp, #4]
    f932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f936:	bf00      	nop
    f938:	b003      	add	sp, #12
    f93a:	f85d fb04 	ldr.w	pc, [sp], #4
    f93e:	bf00      	nop
    f940:	1fff92f8 	.word	0x1fff92f8
    f944:	1fff92f4 	.word	0x1fff92f4

0000f948 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
    f948:	b500      	push	{lr}
    f94a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f94c:	f7f1 f964 	bl	c18 <Sys_GetCoreID>
    f950:	4603      	mov	r3, r0
    f952:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
    f954:	4a0d      	ldr	r2, [pc, #52]	; (f98c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    f956:	9b01      	ldr	r3, [sp, #4]
    f958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f95c:	1e5a      	subs	r2, r3, #1
    f95e:	490b      	ldr	r1, [pc, #44]	; (f98c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    f960:	9b01      	ldr	r3, [sp, #4]
    f962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
    f966:	4a0a      	ldr	r2, [pc, #40]	; (f990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
    f968:	9b01      	ldr	r3, [sp, #4]
    f96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f96e:	f003 0301 	and.w	r3, r3, #1
    f972:	2b00      	cmp	r3, #0
    f974:	d106      	bne.n	f984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    f976:	4a05      	ldr	r2, [pc, #20]	; (f98c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
    f978:	9b01      	ldr	r3, [sp, #4]
    f97a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f97e:	2b00      	cmp	r3, #0
    f980:	d100      	bne.n	f984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f982:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f984:	bf00      	nop
    f986:	b003      	add	sp, #12
    f988:	f85d fb04 	ldr.w	pc, [sp], #4
    f98c:	1fff92f8 	.word	0x1fff92f8
    f990:	1fff92f4 	.word	0x1fff92f4

0000f994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    f994:	b500      	push	{lr}
    f996:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f998:	f7f1 f93e 	bl	c18 <Sys_GetCoreID>
    f99c:	4603      	mov	r3, r0
    f99e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
    f9a0:	4a10      	ldr	r2, [pc, #64]	; (f9e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    f9a2:	9b01      	ldr	r3, [sp, #4]
    f9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a8:	2b00      	cmp	r3, #0
    f9aa:	d10d      	bne.n	f9c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f9ac:	f7f1 f84a 	bl	a44 <Adc_schm_read_msr>
    f9b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f9b2:	9b00      	ldr	r3, [sp, #0]
    f9b4:	f003 0301 	and.w	r3, r3, #1
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d100      	bne.n	f9be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f9bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
    f9be:	490a      	ldr	r1, [pc, #40]	; (f9e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
    f9c0:	9b01      	ldr	r3, [sp, #4]
    f9c2:	9a00      	ldr	r2, [sp, #0]
    f9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
    f9c8:	4a06      	ldr	r2, [pc, #24]	; (f9e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    f9ca:	9b01      	ldr	r3, [sp, #4]
    f9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9d0:	1c5a      	adds	r2, r3, #1
    f9d2:	4904      	ldr	r1, [pc, #16]	; (f9e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
    f9d4:	9b01      	ldr	r3, [sp, #4]
    f9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9da:	bf00      	nop
    f9dc:	b003      	add	sp, #12
    f9de:	f85d fb04 	ldr.w	pc, [sp], #4
    f9e2:	bf00      	nop
    f9e4:	1fff9300 	.word	0x1fff9300
    f9e8:	1fff92fc 	.word	0x1fff92fc

0000f9ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
    f9ec:	b500      	push	{lr}
    f9ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9f0:	f7f1 f912 	bl	c18 <Sys_GetCoreID>
    f9f4:	4603      	mov	r3, r0
    f9f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
    f9f8:	4a0d      	ldr	r2, [pc, #52]	; (fa30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    f9fa:	9b01      	ldr	r3, [sp, #4]
    f9fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa00:	1e5a      	subs	r2, r3, #1
    fa02:	490b      	ldr	r1, [pc, #44]	; (fa30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    fa04:	9b01      	ldr	r3, [sp, #4]
    fa06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
    fa0a:	4a0a      	ldr	r2, [pc, #40]	; (fa34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
    fa0c:	9b01      	ldr	r3, [sp, #4]
    fa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa12:	f003 0301 	and.w	r3, r3, #1
    fa16:	2b00      	cmp	r3, #0
    fa18:	d106      	bne.n	fa28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    fa1a:	4a05      	ldr	r2, [pc, #20]	; (fa30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
    fa1c:	9b01      	ldr	r3, [sp, #4]
    fa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa22:	2b00      	cmp	r3, #0
    fa24:	d100      	bne.n	fa28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa28:	bf00      	nop
    fa2a:	b003      	add	sp, #12
    fa2c:	f85d fb04 	ldr.w	pc, [sp], #4
    fa30:	1fff9300 	.word	0x1fff9300
    fa34:	1fff92fc 	.word	0x1fff92fc

0000fa38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    fa38:	b500      	push	{lr}
    fa3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa3c:	f7f1 f8ec 	bl	c18 <Sys_GetCoreID>
    fa40:	4603      	mov	r3, r0
    fa42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
    fa44:	4a10      	ldr	r2, [pc, #64]	; (fa88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    fa46:	9b01      	ldr	r3, [sp, #4]
    fa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa4c:	2b00      	cmp	r3, #0
    fa4e:	d10d      	bne.n	fa6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa50:	f7f0 fff8 	bl	a44 <Adc_schm_read_msr>
    fa54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa56:	9b00      	ldr	r3, [sp, #0]
    fa58:	f003 0301 	and.w	r3, r3, #1
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d100      	bne.n	fa62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
    fa62:	490a      	ldr	r1, [pc, #40]	; (fa8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
    fa64:	9b01      	ldr	r3, [sp, #4]
    fa66:	9a00      	ldr	r2, [sp, #0]
    fa68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
    fa6c:	4a06      	ldr	r2, [pc, #24]	; (fa88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    fa6e:	9b01      	ldr	r3, [sp, #4]
    fa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa74:	1c5a      	adds	r2, r3, #1
    fa76:	4904      	ldr	r1, [pc, #16]	; (fa88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
    fa78:	9b01      	ldr	r3, [sp, #4]
    fa7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa7e:	bf00      	nop
    fa80:	b003      	add	sp, #12
    fa82:	f85d fb04 	ldr.w	pc, [sp], #4
    fa86:	bf00      	nop
    fa88:	1fff9308 	.word	0x1fff9308
    fa8c:	1fff9304 	.word	0x1fff9304

0000fa90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
    fa90:	b500      	push	{lr}
    fa92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa94:	f7f1 f8c0 	bl	c18 <Sys_GetCoreID>
    fa98:	4603      	mov	r3, r0
    fa9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
    fa9c:	4a0d      	ldr	r2, [pc, #52]	; (fad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    fa9e:	9b01      	ldr	r3, [sp, #4]
    faa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faa4:	1e5a      	subs	r2, r3, #1
    faa6:	490b      	ldr	r1, [pc, #44]	; (fad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    faa8:	9b01      	ldr	r3, [sp, #4]
    faaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
    faae:	4a0a      	ldr	r2, [pc, #40]	; (fad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
    fab0:	9b01      	ldr	r3, [sp, #4]
    fab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fab6:	f003 0301 	and.w	r3, r3, #1
    faba:	2b00      	cmp	r3, #0
    fabc:	d106      	bne.n	facc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    fabe:	4a05      	ldr	r2, [pc, #20]	; (fad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
    fac0:	9b01      	ldr	r3, [sp, #4]
    fac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fac6:	2b00      	cmp	r3, #0
    fac8:	d100      	bne.n	facc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    faca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    facc:	bf00      	nop
    face:	b003      	add	sp, #12
    fad0:	f85d fb04 	ldr.w	pc, [sp], #4
    fad4:	1fff9308 	.word	0x1fff9308
    fad8:	1fff9304 	.word	0x1fff9304

0000fadc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    fadc:	b500      	push	{lr}
    fade:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fae0:	f7f1 f89a 	bl	c18 <Sys_GetCoreID>
    fae4:	4603      	mov	r3, r0
    fae6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
    fae8:	4a10      	ldr	r2, [pc, #64]	; (fb2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    faea:	9b01      	ldr	r3, [sp, #4]
    faec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf0:	2b00      	cmp	r3, #0
    faf2:	d10d      	bne.n	fb10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    faf4:	f7f0 ffa6 	bl	a44 <Adc_schm_read_msr>
    faf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fafa:	9b00      	ldr	r3, [sp, #0]
    fafc:	f003 0301 	and.w	r3, r3, #1
    fb00:	2b00      	cmp	r3, #0
    fb02:	d100      	bne.n	fb06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
    fb06:	490a      	ldr	r1, [pc, #40]	; (fb30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
    fb08:	9b01      	ldr	r3, [sp, #4]
    fb0a:	9a00      	ldr	r2, [sp, #0]
    fb0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
    fb10:	4a06      	ldr	r2, [pc, #24]	; (fb2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    fb12:	9b01      	ldr	r3, [sp, #4]
    fb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb18:	1c5a      	adds	r2, r3, #1
    fb1a:	4904      	ldr	r1, [pc, #16]	; (fb2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
    fb1c:	9b01      	ldr	r3, [sp, #4]
    fb1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb22:	bf00      	nop
    fb24:	b003      	add	sp, #12
    fb26:	f85d fb04 	ldr.w	pc, [sp], #4
    fb2a:	bf00      	nop
    fb2c:	1fff9310 	.word	0x1fff9310
    fb30:	1fff930c 	.word	0x1fff930c

0000fb34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
    fb34:	b500      	push	{lr}
    fb36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb38:	f7f1 f86e 	bl	c18 <Sys_GetCoreID>
    fb3c:	4603      	mov	r3, r0
    fb3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
    fb40:	4a0d      	ldr	r2, [pc, #52]	; (fb78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    fb42:	9b01      	ldr	r3, [sp, #4]
    fb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb48:	1e5a      	subs	r2, r3, #1
    fb4a:	490b      	ldr	r1, [pc, #44]	; (fb78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    fb4c:	9b01      	ldr	r3, [sp, #4]
    fb4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
    fb52:	4a0a      	ldr	r2, [pc, #40]	; (fb7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
    fb54:	9b01      	ldr	r3, [sp, #4]
    fb56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb5a:	f003 0301 	and.w	r3, r3, #1
    fb5e:	2b00      	cmp	r3, #0
    fb60:	d106      	bne.n	fb70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    fb62:	4a05      	ldr	r2, [pc, #20]	; (fb78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
    fb64:	9b01      	ldr	r3, [sp, #4]
    fb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	d100      	bne.n	fb70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb70:	bf00      	nop
    fb72:	b003      	add	sp, #12
    fb74:	f85d fb04 	ldr.w	pc, [sp], #4
    fb78:	1fff9310 	.word	0x1fff9310
    fb7c:	1fff930c 	.word	0x1fff930c

0000fb80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    fb80:	b500      	push	{lr}
    fb82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb84:	f7f1 f848 	bl	c18 <Sys_GetCoreID>
    fb88:	4603      	mov	r3, r0
    fb8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
    fb8c:	4a10      	ldr	r2, [pc, #64]	; (fbd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    fb8e:	9b01      	ldr	r3, [sp, #4]
    fb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb94:	2b00      	cmp	r3, #0
    fb96:	d10d      	bne.n	fbb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb98:	f7f0 ff54 	bl	a44 <Adc_schm_read_msr>
    fb9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb9e:	9b00      	ldr	r3, [sp, #0]
    fba0:	f003 0301 	and.w	r3, r3, #1
    fba4:	2b00      	cmp	r3, #0
    fba6:	d100      	bne.n	fbaa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fba8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
    fbaa:	490a      	ldr	r1, [pc, #40]	; (fbd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
    fbac:	9b01      	ldr	r3, [sp, #4]
    fbae:	9a00      	ldr	r2, [sp, #0]
    fbb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
    fbb4:	4a06      	ldr	r2, [pc, #24]	; (fbd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    fbb6:	9b01      	ldr	r3, [sp, #4]
    fbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbbc:	1c5a      	adds	r2, r3, #1
    fbbe:	4904      	ldr	r1, [pc, #16]	; (fbd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
    fbc0:	9b01      	ldr	r3, [sp, #4]
    fbc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fbc6:	bf00      	nop
    fbc8:	b003      	add	sp, #12
    fbca:	f85d fb04 	ldr.w	pc, [sp], #4
    fbce:	bf00      	nop
    fbd0:	1fff9318 	.word	0x1fff9318
    fbd4:	1fff9314 	.word	0x1fff9314

0000fbd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
    fbd8:	b500      	push	{lr}
    fbda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbdc:	f7f1 f81c 	bl	c18 <Sys_GetCoreID>
    fbe0:	4603      	mov	r3, r0
    fbe2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
    fbe4:	4a0d      	ldr	r2, [pc, #52]	; (fc1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    fbe6:	9b01      	ldr	r3, [sp, #4]
    fbe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbec:	1e5a      	subs	r2, r3, #1
    fbee:	490b      	ldr	r1, [pc, #44]	; (fc1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    fbf0:	9b01      	ldr	r3, [sp, #4]
    fbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
    fbf6:	4a0a      	ldr	r2, [pc, #40]	; (fc20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
    fbf8:	9b01      	ldr	r3, [sp, #4]
    fbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbfe:	f003 0301 	and.w	r3, r3, #1
    fc02:	2b00      	cmp	r3, #0
    fc04:	d106      	bne.n	fc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    fc06:	4a05      	ldr	r2, [pc, #20]	; (fc1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
    fc08:	9b01      	ldr	r3, [sp, #4]
    fc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc0e:	2b00      	cmp	r3, #0
    fc10:	d100      	bne.n	fc14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc14:	bf00      	nop
    fc16:	b003      	add	sp, #12
    fc18:	f85d fb04 	ldr.w	pc, [sp], #4
    fc1c:	1fff9318 	.word	0x1fff9318
    fc20:	1fff9314 	.word	0x1fff9314

0000fc24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    fc24:	b500      	push	{lr}
    fc26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc28:	f7f0 fff6 	bl	c18 <Sys_GetCoreID>
    fc2c:	4603      	mov	r3, r0
    fc2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
    fc30:	4a10      	ldr	r2, [pc, #64]	; (fc74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    fc32:	9b01      	ldr	r3, [sp, #4]
    fc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc38:	2b00      	cmp	r3, #0
    fc3a:	d10d      	bne.n	fc58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc3c:	f7f0 ff02 	bl	a44 <Adc_schm_read_msr>
    fc40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc42:	9b00      	ldr	r3, [sp, #0]
    fc44:	f003 0301 	and.w	r3, r3, #1
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d100      	bne.n	fc4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
    fc4e:	490a      	ldr	r1, [pc, #40]	; (fc78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	9a00      	ldr	r2, [sp, #0]
    fc54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
    fc58:	4a06      	ldr	r2, [pc, #24]	; (fc74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    fc5a:	9b01      	ldr	r3, [sp, #4]
    fc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc60:	1c5a      	adds	r2, r3, #1
    fc62:	4904      	ldr	r1, [pc, #16]	; (fc74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
    fc64:	9b01      	ldr	r3, [sp, #4]
    fc66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc6a:	bf00      	nop
    fc6c:	b003      	add	sp, #12
    fc6e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc72:	bf00      	nop
    fc74:	1fff9320 	.word	0x1fff9320
    fc78:	1fff931c 	.word	0x1fff931c

0000fc7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
    fc7c:	b500      	push	{lr}
    fc7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc80:	f7f0 ffca 	bl	c18 <Sys_GetCoreID>
    fc84:	4603      	mov	r3, r0
    fc86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
    fc88:	4a0d      	ldr	r2, [pc, #52]	; (fcc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    fc8a:	9b01      	ldr	r3, [sp, #4]
    fc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc90:	1e5a      	subs	r2, r3, #1
    fc92:	490b      	ldr	r1, [pc, #44]	; (fcc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    fc94:	9b01      	ldr	r3, [sp, #4]
    fc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
    fc9a:	4a0a      	ldr	r2, [pc, #40]	; (fcc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
    fc9c:	9b01      	ldr	r3, [sp, #4]
    fc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fca2:	f003 0301 	and.w	r3, r3, #1
    fca6:	2b00      	cmp	r3, #0
    fca8:	d106      	bne.n	fcb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    fcaa:	4a05      	ldr	r2, [pc, #20]	; (fcc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
    fcac:	9b01      	ldr	r3, [sp, #4]
    fcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	d100      	bne.n	fcb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fcb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fcb8:	bf00      	nop
    fcba:	b003      	add	sp, #12
    fcbc:	f85d fb04 	ldr.w	pc, [sp], #4
    fcc0:	1fff9320 	.word	0x1fff9320
    fcc4:	1fff931c 	.word	0x1fff931c

0000fcc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    fcc8:	b500      	push	{lr}
    fcca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fccc:	f7f0 ffa4 	bl	c18 <Sys_GetCoreID>
    fcd0:	4603      	mov	r3, r0
    fcd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
    fcd4:	4a10      	ldr	r2, [pc, #64]	; (fd18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    fcd6:	9b01      	ldr	r3, [sp, #4]
    fcd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d10d      	bne.n	fcfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fce0:	f7f0 feb0 	bl	a44 <Adc_schm_read_msr>
    fce4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fce6:	9b00      	ldr	r3, [sp, #0]
    fce8:	f003 0301 	and.w	r3, r3, #1
    fcec:	2b00      	cmp	r3, #0
    fcee:	d100      	bne.n	fcf2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fcf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
    fcf2:	490a      	ldr	r1, [pc, #40]	; (fd1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
    fcf4:	9b01      	ldr	r3, [sp, #4]
    fcf6:	9a00      	ldr	r2, [sp, #0]
    fcf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
    fcfc:	4a06      	ldr	r2, [pc, #24]	; (fd18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    fcfe:	9b01      	ldr	r3, [sp, #4]
    fd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd04:	1c5a      	adds	r2, r3, #1
    fd06:	4904      	ldr	r1, [pc, #16]	; (fd18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
    fd08:	9b01      	ldr	r3, [sp, #4]
    fd0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd0e:	bf00      	nop
    fd10:	b003      	add	sp, #12
    fd12:	f85d fb04 	ldr.w	pc, [sp], #4
    fd16:	bf00      	nop
    fd18:	1fff9328 	.word	0x1fff9328
    fd1c:	1fff9324 	.word	0x1fff9324

0000fd20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
    fd20:	b500      	push	{lr}
    fd22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd24:	f7f0 ff78 	bl	c18 <Sys_GetCoreID>
    fd28:	4603      	mov	r3, r0
    fd2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
    fd2c:	4a0d      	ldr	r2, [pc, #52]	; (fd64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    fd2e:	9b01      	ldr	r3, [sp, #4]
    fd30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd34:	1e5a      	subs	r2, r3, #1
    fd36:	490b      	ldr	r1, [pc, #44]	; (fd64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    fd38:	9b01      	ldr	r3, [sp, #4]
    fd3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
    fd3e:	4a0a      	ldr	r2, [pc, #40]	; (fd68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
    fd40:	9b01      	ldr	r3, [sp, #4]
    fd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd46:	f003 0301 	and.w	r3, r3, #1
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d106      	bne.n	fd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    fd4e:	4a05      	ldr	r2, [pc, #20]	; (fd64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
    fd50:	9b01      	ldr	r3, [sp, #4]
    fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd56:	2b00      	cmp	r3, #0
    fd58:	d100      	bne.n	fd5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd5c:	bf00      	nop
    fd5e:	b003      	add	sp, #12
    fd60:	f85d fb04 	ldr.w	pc, [sp], #4
    fd64:	1fff9328 	.word	0x1fff9328
    fd68:	1fff9324 	.word	0x1fff9324

0000fd6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    fd6c:	b500      	push	{lr}
    fd6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd70:	f7f0 ff52 	bl	c18 <Sys_GetCoreID>
    fd74:	4603      	mov	r3, r0
    fd76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
    fd78:	4a10      	ldr	r2, [pc, #64]	; (fdbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    fd7a:	9b01      	ldr	r3, [sp, #4]
    fd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd80:	2b00      	cmp	r3, #0
    fd82:	d10d      	bne.n	fda0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd84:	f7f0 fe5e 	bl	a44 <Adc_schm_read_msr>
    fd88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd8a:	9b00      	ldr	r3, [sp, #0]
    fd8c:	f003 0301 	and.w	r3, r3, #1
    fd90:	2b00      	cmp	r3, #0
    fd92:	d100      	bne.n	fd96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
    fd96:	490a      	ldr	r1, [pc, #40]	; (fdc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
    fd98:	9b01      	ldr	r3, [sp, #4]
    fd9a:	9a00      	ldr	r2, [sp, #0]
    fd9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
    fda0:	4a06      	ldr	r2, [pc, #24]	; (fdbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    fda2:	9b01      	ldr	r3, [sp, #4]
    fda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fda8:	1c5a      	adds	r2, r3, #1
    fdaa:	4904      	ldr	r1, [pc, #16]	; (fdbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
    fdac:	9b01      	ldr	r3, [sp, #4]
    fdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fdb2:	bf00      	nop
    fdb4:	b003      	add	sp, #12
    fdb6:	f85d fb04 	ldr.w	pc, [sp], #4
    fdba:	bf00      	nop
    fdbc:	1fff9330 	.word	0x1fff9330
    fdc0:	1fff932c 	.word	0x1fff932c

0000fdc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
    fdc4:	b500      	push	{lr}
    fdc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdc8:	f7f0 ff26 	bl	c18 <Sys_GetCoreID>
    fdcc:	4603      	mov	r3, r0
    fdce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
    fdd0:	4a0d      	ldr	r2, [pc, #52]	; (fe08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    fdd2:	9b01      	ldr	r3, [sp, #4]
    fdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd8:	1e5a      	subs	r2, r3, #1
    fdda:	490b      	ldr	r1, [pc, #44]	; (fe08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    fddc:	9b01      	ldr	r3, [sp, #4]
    fdde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
    fde2:	4a0a      	ldr	r2, [pc, #40]	; (fe0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
    fde4:	9b01      	ldr	r3, [sp, #4]
    fde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdea:	f003 0301 	and.w	r3, r3, #1
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d106      	bne.n	fe00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    fdf2:	4a05      	ldr	r2, [pc, #20]	; (fe08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
    fdf4:	9b01      	ldr	r3, [sp, #4]
    fdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdfa:	2b00      	cmp	r3, #0
    fdfc:	d100      	bne.n	fe00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe00:	bf00      	nop
    fe02:	b003      	add	sp, #12
    fe04:	f85d fb04 	ldr.w	pc, [sp], #4
    fe08:	1fff9330 	.word	0x1fff9330
    fe0c:	1fff932c 	.word	0x1fff932c

0000fe10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    fe10:	b500      	push	{lr}
    fe12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe14:	f7f0 ff00 	bl	c18 <Sys_GetCoreID>
    fe18:	4603      	mov	r3, r0
    fe1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
    fe1c:	4a10      	ldr	r2, [pc, #64]	; (fe60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    fe1e:	9b01      	ldr	r3, [sp, #4]
    fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe24:	2b00      	cmp	r3, #0
    fe26:	d10d      	bne.n	fe44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe28:	f7f0 fe0c 	bl	a44 <Adc_schm_read_msr>
    fe2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe2e:	9b00      	ldr	r3, [sp, #0]
    fe30:	f003 0301 	and.w	r3, r3, #1
    fe34:	2b00      	cmp	r3, #0
    fe36:	d100      	bne.n	fe3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
    fe3a:	490a      	ldr	r1, [pc, #40]	; (fe64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
    fe3c:	9b01      	ldr	r3, [sp, #4]
    fe3e:	9a00      	ldr	r2, [sp, #0]
    fe40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
    fe44:	4a06      	ldr	r2, [pc, #24]	; (fe60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    fe46:	9b01      	ldr	r3, [sp, #4]
    fe48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe4c:	1c5a      	adds	r2, r3, #1
    fe4e:	4904      	ldr	r1, [pc, #16]	; (fe60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
    fe50:	9b01      	ldr	r3, [sp, #4]
    fe52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe56:	bf00      	nop
    fe58:	b003      	add	sp, #12
    fe5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe5e:	bf00      	nop
    fe60:	1fff9338 	.word	0x1fff9338
    fe64:	1fff9334 	.word	0x1fff9334

0000fe68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
    fe68:	b500      	push	{lr}
    fe6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe6c:	f7f0 fed4 	bl	c18 <Sys_GetCoreID>
    fe70:	4603      	mov	r3, r0
    fe72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
    fe74:	4a0d      	ldr	r2, [pc, #52]	; (feac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    fe76:	9b01      	ldr	r3, [sp, #4]
    fe78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe7c:	1e5a      	subs	r2, r3, #1
    fe7e:	490b      	ldr	r1, [pc, #44]	; (feac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    fe80:	9b01      	ldr	r3, [sp, #4]
    fe82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
    fe86:	4a0a      	ldr	r2, [pc, #40]	; (feb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
    fe88:	9b01      	ldr	r3, [sp, #4]
    fe8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe8e:	f003 0301 	and.w	r3, r3, #1
    fe92:	2b00      	cmp	r3, #0
    fe94:	d106      	bne.n	fea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    fe96:	4a05      	ldr	r2, [pc, #20]	; (feac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
    fe98:	9b01      	ldr	r3, [sp, #4]
    fe9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe9e:	2b00      	cmp	r3, #0
    fea0:	d100      	bne.n	fea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fea2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fea4:	bf00      	nop
    fea6:	b003      	add	sp, #12
    fea8:	f85d fb04 	ldr.w	pc, [sp], #4
    feac:	1fff9338 	.word	0x1fff9338
    feb0:	1fff9334 	.word	0x1fff9334

0000feb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    feb4:	b500      	push	{lr}
    feb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    feb8:	f7f0 feae 	bl	c18 <Sys_GetCoreID>
    febc:	4603      	mov	r3, r0
    febe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
    fec0:	4a10      	ldr	r2, [pc, #64]	; (ff04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    fec2:	9b01      	ldr	r3, [sp, #4]
    fec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec8:	2b00      	cmp	r3, #0
    feca:	d10d      	bne.n	fee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fecc:	f7f0 fdba 	bl	a44 <Adc_schm_read_msr>
    fed0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fed2:	9b00      	ldr	r3, [sp, #0]
    fed4:	f003 0301 	and.w	r3, r3, #1
    fed8:	2b00      	cmp	r3, #0
    feda:	d100      	bne.n	fede <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fedc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
    fede:	490a      	ldr	r1, [pc, #40]	; (ff08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
    fee0:	9b01      	ldr	r3, [sp, #4]
    fee2:	9a00      	ldr	r2, [sp, #0]
    fee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
    fee8:	4a06      	ldr	r2, [pc, #24]	; (ff04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    feea:	9b01      	ldr	r3, [sp, #4]
    feec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef0:	1c5a      	adds	r2, r3, #1
    fef2:	4904      	ldr	r1, [pc, #16]	; (ff04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
    fef4:	9b01      	ldr	r3, [sp, #4]
    fef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fefa:	bf00      	nop
    fefc:	b003      	add	sp, #12
    fefe:	f85d fb04 	ldr.w	pc, [sp], #4
    ff02:	bf00      	nop
    ff04:	1fff9340 	.word	0x1fff9340
    ff08:	1fff933c 	.word	0x1fff933c

0000ff0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
    ff0c:	b500      	push	{lr}
    ff0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff10:	f7f0 fe82 	bl	c18 <Sys_GetCoreID>
    ff14:	4603      	mov	r3, r0
    ff16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
    ff18:	4a0d      	ldr	r2, [pc, #52]	; (ff50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    ff1a:	9b01      	ldr	r3, [sp, #4]
    ff1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff20:	1e5a      	subs	r2, r3, #1
    ff22:	490b      	ldr	r1, [pc, #44]	; (ff50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    ff24:	9b01      	ldr	r3, [sp, #4]
    ff26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
    ff2a:	4a0a      	ldr	r2, [pc, #40]	; (ff54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
    ff2c:	9b01      	ldr	r3, [sp, #4]
    ff2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff32:	f003 0301 	and.w	r3, r3, #1
    ff36:	2b00      	cmp	r3, #0
    ff38:	d106      	bne.n	ff48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    ff3a:	4a05      	ldr	r2, [pc, #20]	; (ff50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
    ff3c:	9b01      	ldr	r3, [sp, #4]
    ff3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff42:	2b00      	cmp	r3, #0
    ff44:	d100      	bne.n	ff48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff48:	bf00      	nop
    ff4a:	b003      	add	sp, #12
    ff4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff50:	1fff9340 	.word	0x1fff9340
    ff54:	1fff933c 	.word	0x1fff933c

0000ff58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ff58:	b500      	push	{lr}
    ff5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff5c:	f7f0 fe5c 	bl	c18 <Sys_GetCoreID>
    ff60:	4603      	mov	r3, r0
    ff62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
    ff64:	4a10      	ldr	r2, [pc, #64]	; (ffa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    ff66:	9b01      	ldr	r3, [sp, #4]
    ff68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff6c:	2b00      	cmp	r3, #0
    ff6e:	d10d      	bne.n	ff8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff70:	f7f0 fd68 	bl	a44 <Adc_schm_read_msr>
    ff74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff76:	9b00      	ldr	r3, [sp, #0]
    ff78:	f003 0301 	and.w	r3, r3, #1
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	d100      	bne.n	ff82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
    ff82:	490a      	ldr	r1, [pc, #40]	; (ffac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
    ff84:	9b01      	ldr	r3, [sp, #4]
    ff86:	9a00      	ldr	r2, [sp, #0]
    ff88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
    ff8c:	4a06      	ldr	r2, [pc, #24]	; (ffa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    ff8e:	9b01      	ldr	r3, [sp, #4]
    ff90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff94:	1c5a      	adds	r2, r3, #1
    ff96:	4904      	ldr	r1, [pc, #16]	; (ffa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
    ff98:	9b01      	ldr	r3, [sp, #4]
    ff9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff9e:	bf00      	nop
    ffa0:	b003      	add	sp, #12
    ffa2:	f85d fb04 	ldr.w	pc, [sp], #4
    ffa6:	bf00      	nop
    ffa8:	1fff9348 	.word	0x1fff9348
    ffac:	1fff9344 	.word	0x1fff9344

0000ffb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
    ffb0:	b500      	push	{lr}
    ffb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffb4:	f7f0 fe30 	bl	c18 <Sys_GetCoreID>
    ffb8:	4603      	mov	r3, r0
    ffba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
    ffbc:	4a0d      	ldr	r2, [pc, #52]	; (fff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ffbe:	9b01      	ldr	r3, [sp, #4]
    ffc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffc4:	1e5a      	subs	r2, r3, #1
    ffc6:	490b      	ldr	r1, [pc, #44]	; (fff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ffc8:	9b01      	ldr	r3, [sp, #4]
    ffca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
    ffce:	4a0a      	ldr	r2, [pc, #40]	; (fff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
    ffd0:	9b01      	ldr	r3, [sp, #4]
    ffd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffd6:	f003 0301 	and.w	r3, r3, #1
    ffda:	2b00      	cmp	r3, #0
    ffdc:	d106      	bne.n	ffec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    ffde:	4a05      	ldr	r2, [pc, #20]	; (fff4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
    ffe0:	9b01      	ldr	r3, [sp, #4]
    ffe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe6:	2b00      	cmp	r3, #0
    ffe8:	d100      	bne.n	ffec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffec:	bf00      	nop
    ffee:	b003      	add	sp, #12
    fff0:	f85d fb04 	ldr.w	pc, [sp], #4
    fff4:	1fff9348 	.word	0x1fff9348
    fff8:	1fff9344 	.word	0x1fff9344

0000fffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
    fffc:	b500      	push	{lr}
    fffe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10000:	f7f0 fe0a 	bl	c18 <Sys_GetCoreID>
   10004:	4603      	mov	r3, r0
   10006:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   10008:	4a10      	ldr	r2, [pc, #64]	; (1004c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1000a:	9b01      	ldr	r3, [sp, #4]
   1000c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10010:	2b00      	cmp	r3, #0
   10012:	d10d      	bne.n	10030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10014:	f7f0 fd16 	bl	a44 <Adc_schm_read_msr>
   10018:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1001a:	9b00      	ldr	r3, [sp, #0]
   1001c:	f003 0301 	and.w	r3, r3, #1
   10020:	2b00      	cmp	r3, #0
   10022:	d100      	bne.n	10026 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10024:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   10026:	490a      	ldr	r1, [pc, #40]	; (10050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   10028:	9b01      	ldr	r3, [sp, #4]
   1002a:	9a00      	ldr	r2, [sp, #0]
   1002c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   10030:	4a06      	ldr	r2, [pc, #24]	; (1004c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   10032:	9b01      	ldr	r3, [sp, #4]
   10034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10038:	1c5a      	adds	r2, r3, #1
   1003a:	4904      	ldr	r1, [pc, #16]	; (1004c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1003c:	9b01      	ldr	r3, [sp, #4]
   1003e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10042:	bf00      	nop
   10044:	b003      	add	sp, #12
   10046:	f85d fb04 	ldr.w	pc, [sp], #4
   1004a:	bf00      	nop
   1004c:	1fff9350 	.word	0x1fff9350
   10050:	1fff934c 	.word	0x1fff934c

00010054 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   10054:	b500      	push	{lr}
   10056:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10058:	f7f0 fdde 	bl	c18 <Sys_GetCoreID>
   1005c:	4603      	mov	r3, r0
   1005e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   10060:	4a0d      	ldr	r2, [pc, #52]	; (10098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   10062:	9b01      	ldr	r3, [sp, #4]
   10064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10068:	1e5a      	subs	r2, r3, #1
   1006a:	490b      	ldr	r1, [pc, #44]	; (10098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   1006c:	9b01      	ldr	r3, [sp, #4]
   1006e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   10072:	4a0a      	ldr	r2, [pc, #40]	; (1009c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   10074:	9b01      	ldr	r3, [sp, #4]
   10076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1007a:	f003 0301 	and.w	r3, r3, #1
   1007e:	2b00      	cmp	r3, #0
   10080:	d106      	bne.n	10090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   10082:	4a05      	ldr	r2, [pc, #20]	; (10098 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   10084:	9b01      	ldr	r3, [sp, #4]
   10086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d100      	bne.n	10090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1008e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10090:	bf00      	nop
   10092:	b003      	add	sp, #12
   10094:	f85d fb04 	ldr.w	pc, [sp], #4
   10098:	1fff9350 	.word	0x1fff9350
   1009c:	1fff934c 	.word	0x1fff934c

000100a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   100a0:	b500      	push	{lr}
   100a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100a4:	f7f0 fdb8 	bl	c18 <Sys_GetCoreID>
   100a8:	4603      	mov	r3, r0
   100aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   100ac:	4a10      	ldr	r2, [pc, #64]	; (100f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   100ae:	9b01      	ldr	r3, [sp, #4]
   100b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b4:	2b00      	cmp	r3, #0
   100b6:	d10d      	bne.n	100d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   100b8:	f7f0 fcc4 	bl	a44 <Adc_schm_read_msr>
   100bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   100be:	9b00      	ldr	r3, [sp, #0]
   100c0:	f003 0301 	and.w	r3, r3, #1
   100c4:	2b00      	cmp	r3, #0
   100c6:	d100      	bne.n	100ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   100ca:	490a      	ldr	r1, [pc, #40]	; (100f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   100cc:	9b01      	ldr	r3, [sp, #4]
   100ce:	9a00      	ldr	r2, [sp, #0]
   100d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   100d4:	4a06      	ldr	r2, [pc, #24]	; (100f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   100d6:	9b01      	ldr	r3, [sp, #4]
   100d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100dc:	1c5a      	adds	r2, r3, #1
   100de:	4904      	ldr	r1, [pc, #16]	; (100f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   100e0:	9b01      	ldr	r3, [sp, #4]
   100e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100e6:	bf00      	nop
   100e8:	b003      	add	sp, #12
   100ea:	f85d fb04 	ldr.w	pc, [sp], #4
   100ee:	bf00      	nop
   100f0:	1fff9358 	.word	0x1fff9358
   100f4:	1fff9354 	.word	0x1fff9354

000100f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   100f8:	b500      	push	{lr}
   100fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100fc:	f7f0 fd8c 	bl	c18 <Sys_GetCoreID>
   10100:	4603      	mov	r3, r0
   10102:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   10104:	4a0d      	ldr	r2, [pc, #52]	; (1013c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   10106:	9b01      	ldr	r3, [sp, #4]
   10108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1010c:	1e5a      	subs	r2, r3, #1
   1010e:	490b      	ldr	r1, [pc, #44]	; (1013c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   10110:	9b01      	ldr	r3, [sp, #4]
   10112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   10116:	4a0a      	ldr	r2, [pc, #40]	; (10140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   10118:	9b01      	ldr	r3, [sp, #4]
   1011a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1011e:	f003 0301 	and.w	r3, r3, #1
   10122:	2b00      	cmp	r3, #0
   10124:	d106      	bne.n	10134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   10126:	4a05      	ldr	r2, [pc, #20]	; (1013c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   10128:	9b01      	ldr	r3, [sp, #4]
   1012a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1012e:	2b00      	cmp	r3, #0
   10130:	d100      	bne.n	10134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10132:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10134:	bf00      	nop
   10136:	b003      	add	sp, #12
   10138:	f85d fb04 	ldr.w	pc, [sp], #4
   1013c:	1fff9358 	.word	0x1fff9358
   10140:	1fff9354 	.word	0x1fff9354

00010144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   10144:	b500      	push	{lr}
   10146:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10148:	f7f0 fd66 	bl	c18 <Sys_GetCoreID>
   1014c:	4603      	mov	r3, r0
   1014e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   10150:	4a10      	ldr	r2, [pc, #64]	; (10194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   10152:	9b01      	ldr	r3, [sp, #4]
   10154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10158:	2b00      	cmp	r3, #0
   1015a:	d10d      	bne.n	10178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1015c:	f7f0 fc72 	bl	a44 <Adc_schm_read_msr>
   10160:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10162:	9b00      	ldr	r3, [sp, #0]
   10164:	f003 0301 	and.w	r3, r3, #1
   10168:	2b00      	cmp	r3, #0
   1016a:	d100      	bne.n	1016e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1016c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   1016e:	490a      	ldr	r1, [pc, #40]	; (10198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   10170:	9b01      	ldr	r3, [sp, #4]
   10172:	9a00      	ldr	r2, [sp, #0]
   10174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   10178:	4a06      	ldr	r2, [pc, #24]	; (10194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1017a:	9b01      	ldr	r3, [sp, #4]
   1017c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10180:	1c5a      	adds	r2, r3, #1
   10182:	4904      	ldr	r1, [pc, #16]	; (10194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   10184:	9b01      	ldr	r3, [sp, #4]
   10186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1018a:	bf00      	nop
   1018c:	b003      	add	sp, #12
   1018e:	f85d fb04 	ldr.w	pc, [sp], #4
   10192:	bf00      	nop
   10194:	1fff9360 	.word	0x1fff9360
   10198:	1fff935c 	.word	0x1fff935c

0001019c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   1019c:	b500      	push	{lr}
   1019e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101a0:	f7f0 fd3a 	bl	c18 <Sys_GetCoreID>
   101a4:	4603      	mov	r3, r0
   101a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   101a8:	4a0d      	ldr	r2, [pc, #52]	; (101e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   101aa:	9b01      	ldr	r3, [sp, #4]
   101ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101b0:	1e5a      	subs	r2, r3, #1
   101b2:	490b      	ldr	r1, [pc, #44]	; (101e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   101b4:	9b01      	ldr	r3, [sp, #4]
   101b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   101ba:	4a0a      	ldr	r2, [pc, #40]	; (101e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   101bc:	9b01      	ldr	r3, [sp, #4]
   101be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101c2:	f003 0301 	and.w	r3, r3, #1
   101c6:	2b00      	cmp	r3, #0
   101c8:	d106      	bne.n	101d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   101ca:	4a05      	ldr	r2, [pc, #20]	; (101e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   101cc:	9b01      	ldr	r3, [sp, #4]
   101ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101d2:	2b00      	cmp	r3, #0
   101d4:	d100      	bne.n	101d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101d8:	bf00      	nop
   101da:	b003      	add	sp, #12
   101dc:	f85d fb04 	ldr.w	pc, [sp], #4
   101e0:	1fff9360 	.word	0x1fff9360
   101e4:	1fff935c 	.word	0x1fff935c

000101e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   101e8:	b500      	push	{lr}
   101ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101ec:	f7f0 fd14 	bl	c18 <Sys_GetCoreID>
   101f0:	4603      	mov	r3, r0
   101f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   101f4:	4a10      	ldr	r2, [pc, #64]	; (10238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   101f6:	9b01      	ldr	r3, [sp, #4]
   101f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101fc:	2b00      	cmp	r3, #0
   101fe:	d10d      	bne.n	1021c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10200:	f7f0 fc20 	bl	a44 <Adc_schm_read_msr>
   10204:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10206:	9b00      	ldr	r3, [sp, #0]
   10208:	f003 0301 	and.w	r3, r3, #1
   1020c:	2b00      	cmp	r3, #0
   1020e:	d100      	bne.n	10212 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10210:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   10212:	490a      	ldr	r1, [pc, #40]	; (1023c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   10214:	9b01      	ldr	r3, [sp, #4]
   10216:	9a00      	ldr	r2, [sp, #0]
   10218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   1021c:	4a06      	ldr	r2, [pc, #24]	; (10238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1021e:	9b01      	ldr	r3, [sp, #4]
   10220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10224:	1c5a      	adds	r2, r3, #1
   10226:	4904      	ldr	r1, [pc, #16]	; (10238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   10228:	9b01      	ldr	r3, [sp, #4]
   1022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1022e:	bf00      	nop
   10230:	b003      	add	sp, #12
   10232:	f85d fb04 	ldr.w	pc, [sp], #4
   10236:	bf00      	nop
   10238:	1fff9368 	.word	0x1fff9368
   1023c:	1fff9364 	.word	0x1fff9364

00010240 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   10240:	b500      	push	{lr}
   10242:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10244:	f7f0 fce8 	bl	c18 <Sys_GetCoreID>
   10248:	4603      	mov	r3, r0
   1024a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   1024c:	4a0d      	ldr	r2, [pc, #52]	; (10284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1024e:	9b01      	ldr	r3, [sp, #4]
   10250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10254:	1e5a      	subs	r2, r3, #1
   10256:	490b      	ldr	r1, [pc, #44]	; (10284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   10258:	9b01      	ldr	r3, [sp, #4]
   1025a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   1025e:	4a0a      	ldr	r2, [pc, #40]	; (10288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   10260:	9b01      	ldr	r3, [sp, #4]
   10262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10266:	f003 0301 	and.w	r3, r3, #1
   1026a:	2b00      	cmp	r3, #0
   1026c:	d106      	bne.n	1027c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   1026e:	4a05      	ldr	r2, [pc, #20]	; (10284 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   10270:	9b01      	ldr	r3, [sp, #4]
   10272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10276:	2b00      	cmp	r3, #0
   10278:	d100      	bne.n	1027c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1027a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1027c:	bf00      	nop
   1027e:	b003      	add	sp, #12
   10280:	f85d fb04 	ldr.w	pc, [sp], #4
   10284:	1fff9368 	.word	0x1fff9368
   10288:	1fff9364 	.word	0x1fff9364

0001028c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   1028c:	b500      	push	{lr}
   1028e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10290:	f7f0 fcc2 	bl	c18 <Sys_GetCoreID>
   10294:	4603      	mov	r3, r0
   10296:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   10298:	4a10      	ldr	r2, [pc, #64]	; (102dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1029a:	9b01      	ldr	r3, [sp, #4]
   1029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a0:	2b00      	cmp	r3, #0
   102a2:	d10d      	bne.n	102c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   102a4:	f7f0 fbce 	bl	a44 <Adc_schm_read_msr>
   102a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   102aa:	9b00      	ldr	r3, [sp, #0]
   102ac:	f003 0301 	and.w	r3, r3, #1
   102b0:	2b00      	cmp	r3, #0
   102b2:	d100      	bne.n	102b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   102b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   102b6:	490a      	ldr	r1, [pc, #40]	; (102e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   102b8:	9b01      	ldr	r3, [sp, #4]
   102ba:	9a00      	ldr	r2, [sp, #0]
   102bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   102c0:	4a06      	ldr	r2, [pc, #24]	; (102dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   102c2:	9b01      	ldr	r3, [sp, #4]
   102c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102c8:	1c5a      	adds	r2, r3, #1
   102ca:	4904      	ldr	r1, [pc, #16]	; (102dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   102cc:	9b01      	ldr	r3, [sp, #4]
   102ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102d2:	bf00      	nop
   102d4:	b003      	add	sp, #12
   102d6:	f85d fb04 	ldr.w	pc, [sp], #4
   102da:	bf00      	nop
   102dc:	1fff9370 	.word	0x1fff9370
   102e0:	1fff936c 	.word	0x1fff936c

000102e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   102e4:	b500      	push	{lr}
   102e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102e8:	f7f0 fc96 	bl	c18 <Sys_GetCoreID>
   102ec:	4603      	mov	r3, r0
   102ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   102f0:	4a0d      	ldr	r2, [pc, #52]	; (10328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   102f2:	9b01      	ldr	r3, [sp, #4]
   102f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102f8:	1e5a      	subs	r2, r3, #1
   102fa:	490b      	ldr	r1, [pc, #44]	; (10328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   102fc:	9b01      	ldr	r3, [sp, #4]
   102fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   10302:	4a0a      	ldr	r2, [pc, #40]	; (1032c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   10304:	9b01      	ldr	r3, [sp, #4]
   10306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1030a:	f003 0301 	and.w	r3, r3, #1
   1030e:	2b00      	cmp	r3, #0
   10310:	d106      	bne.n	10320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   10312:	4a05      	ldr	r2, [pc, #20]	; (10328 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   10314:	9b01      	ldr	r3, [sp, #4]
   10316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1031a:	2b00      	cmp	r3, #0
   1031c:	d100      	bne.n	10320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1031e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10320:	bf00      	nop
   10322:	b003      	add	sp, #12
   10324:	f85d fb04 	ldr.w	pc, [sp], #4
   10328:	1fff9370 	.word	0x1fff9370
   1032c:	1fff936c 	.word	0x1fff936c

00010330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   10330:	b500      	push	{lr}
   10332:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10334:	f7f0 fc70 	bl	c18 <Sys_GetCoreID>
   10338:	4603      	mov	r3, r0
   1033a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   1033c:	4a10      	ldr	r2, [pc, #64]	; (10380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1033e:	9b01      	ldr	r3, [sp, #4]
   10340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10344:	2b00      	cmp	r3, #0
   10346:	d10d      	bne.n	10364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10348:	f7f0 fb7c 	bl	a44 <Adc_schm_read_msr>
   1034c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1034e:	9b00      	ldr	r3, [sp, #0]
   10350:	f003 0301 	and.w	r3, r3, #1
   10354:	2b00      	cmp	r3, #0
   10356:	d100      	bne.n	1035a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10358:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   1035a:	490a      	ldr	r1, [pc, #40]	; (10384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   1035c:	9b01      	ldr	r3, [sp, #4]
   1035e:	9a00      	ldr	r2, [sp, #0]
   10360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   10364:	4a06      	ldr	r2, [pc, #24]	; (10380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   10366:	9b01      	ldr	r3, [sp, #4]
   10368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1036c:	1c5a      	adds	r2, r3, #1
   1036e:	4904      	ldr	r1, [pc, #16]	; (10380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   10370:	9b01      	ldr	r3, [sp, #4]
   10372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10376:	bf00      	nop
   10378:	b003      	add	sp, #12
   1037a:	f85d fb04 	ldr.w	pc, [sp], #4
   1037e:	bf00      	nop
   10380:	1fff9378 	.word	0x1fff9378
   10384:	1fff9374 	.word	0x1fff9374

00010388 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   10388:	b500      	push	{lr}
   1038a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1038c:	f7f0 fc44 	bl	c18 <Sys_GetCoreID>
   10390:	4603      	mov	r3, r0
   10392:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   10394:	4a0d      	ldr	r2, [pc, #52]	; (103cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   10396:	9b01      	ldr	r3, [sp, #4]
   10398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1039c:	1e5a      	subs	r2, r3, #1
   1039e:	490b      	ldr	r1, [pc, #44]	; (103cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   103a0:	9b01      	ldr	r3, [sp, #4]
   103a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   103a6:	4a0a      	ldr	r2, [pc, #40]	; (103d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   103a8:	9b01      	ldr	r3, [sp, #4]
   103aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ae:	f003 0301 	and.w	r3, r3, #1
   103b2:	2b00      	cmp	r3, #0
   103b4:	d106      	bne.n	103c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   103b6:	4a05      	ldr	r2, [pc, #20]	; (103cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   103b8:	9b01      	ldr	r3, [sp, #4]
   103ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103be:	2b00      	cmp	r3, #0
   103c0:	d100      	bne.n	103c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   103c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   103c4:	bf00      	nop
   103c6:	b003      	add	sp, #12
   103c8:	f85d fb04 	ldr.w	pc, [sp], #4
   103cc:	1fff9378 	.word	0x1fff9378
   103d0:	1fff9374 	.word	0x1fff9374

000103d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   103d4:	b500      	push	{lr}
   103d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103d8:	f7f0 fc1e 	bl	c18 <Sys_GetCoreID>
   103dc:	4603      	mov	r3, r0
   103de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   103e0:	4a10      	ldr	r2, [pc, #64]	; (10424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   103e2:	9b01      	ldr	r3, [sp, #4]
   103e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e8:	2b00      	cmp	r3, #0
   103ea:	d10d      	bne.n	10408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103ec:	f7f0 fb2a 	bl	a44 <Adc_schm_read_msr>
   103f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103f2:	9b00      	ldr	r3, [sp, #0]
   103f4:	f003 0301 	and.w	r3, r3, #1
   103f8:	2b00      	cmp	r3, #0
   103fa:	d100      	bne.n	103fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   103fe:	490a      	ldr	r1, [pc, #40]	; (10428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   10400:	9b01      	ldr	r3, [sp, #4]
   10402:	9a00      	ldr	r2, [sp, #0]
   10404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   10408:	4a06      	ldr	r2, [pc, #24]	; (10424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1040a:	9b01      	ldr	r3, [sp, #4]
   1040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10410:	1c5a      	adds	r2, r3, #1
   10412:	4904      	ldr	r1, [pc, #16]	; (10424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   10414:	9b01      	ldr	r3, [sp, #4]
   10416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1041a:	bf00      	nop
   1041c:	b003      	add	sp, #12
   1041e:	f85d fb04 	ldr.w	pc, [sp], #4
   10422:	bf00      	nop
   10424:	1fff9380 	.word	0x1fff9380
   10428:	1fff937c 	.word	0x1fff937c

0001042c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   1042c:	b500      	push	{lr}
   1042e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10430:	f7f0 fbf2 	bl	c18 <Sys_GetCoreID>
   10434:	4603      	mov	r3, r0
   10436:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   10438:	4a0d      	ldr	r2, [pc, #52]	; (10470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1043a:	9b01      	ldr	r3, [sp, #4]
   1043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10440:	1e5a      	subs	r2, r3, #1
   10442:	490b      	ldr	r1, [pc, #44]	; (10470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   10444:	9b01      	ldr	r3, [sp, #4]
   10446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   1044a:	4a0a      	ldr	r2, [pc, #40]	; (10474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   1044c:	9b01      	ldr	r3, [sp, #4]
   1044e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10452:	f003 0301 	and.w	r3, r3, #1
   10456:	2b00      	cmp	r3, #0
   10458:	d106      	bne.n	10468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   1045a:	4a05      	ldr	r2, [pc, #20]	; (10470 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1045c:	9b01      	ldr	r3, [sp, #4]
   1045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10462:	2b00      	cmp	r3, #0
   10464:	d100      	bne.n	10468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10466:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10468:	bf00      	nop
   1046a:	b003      	add	sp, #12
   1046c:	f85d fb04 	ldr.w	pc, [sp], #4
   10470:	1fff9380 	.word	0x1fff9380
   10474:	1fff937c 	.word	0x1fff937c

00010478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   10478:	b500      	push	{lr}
   1047a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1047c:	f7f0 fbcc 	bl	c18 <Sys_GetCoreID>
   10480:	4603      	mov	r3, r0
   10482:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   10484:	4a10      	ldr	r2, [pc, #64]	; (104c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   10486:	9b01      	ldr	r3, [sp, #4]
   10488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1048c:	2b00      	cmp	r3, #0
   1048e:	d10d      	bne.n	104ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10490:	f7f0 fad8 	bl	a44 <Adc_schm_read_msr>
   10494:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10496:	9b00      	ldr	r3, [sp, #0]
   10498:	f003 0301 	and.w	r3, r3, #1
   1049c:	2b00      	cmp	r3, #0
   1049e:	d100      	bne.n	104a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   104a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   104a2:	490a      	ldr	r1, [pc, #40]	; (104cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   104a4:	9b01      	ldr	r3, [sp, #4]
   104a6:	9a00      	ldr	r2, [sp, #0]
   104a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   104ac:	4a06      	ldr	r2, [pc, #24]	; (104c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   104ae:	9b01      	ldr	r3, [sp, #4]
   104b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104b4:	1c5a      	adds	r2, r3, #1
   104b6:	4904      	ldr	r1, [pc, #16]	; (104c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   104be:	bf00      	nop
   104c0:	b003      	add	sp, #12
   104c2:	f85d fb04 	ldr.w	pc, [sp], #4
   104c6:	bf00      	nop
   104c8:	1fff9388 	.word	0x1fff9388
   104cc:	1fff9384 	.word	0x1fff9384

000104d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   104d0:	b500      	push	{lr}
   104d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104d4:	f7f0 fba0 	bl	c18 <Sys_GetCoreID>
   104d8:	4603      	mov	r3, r0
   104da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   104dc:	4a0d      	ldr	r2, [pc, #52]	; (10514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   104de:	9b01      	ldr	r3, [sp, #4]
   104e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104e4:	1e5a      	subs	r2, r3, #1
   104e6:	490b      	ldr	r1, [pc, #44]	; (10514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   104e8:	9b01      	ldr	r3, [sp, #4]
   104ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   104ee:	4a0a      	ldr	r2, [pc, #40]	; (10518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   104f0:	9b01      	ldr	r3, [sp, #4]
   104f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104f6:	f003 0301 	and.w	r3, r3, #1
   104fa:	2b00      	cmp	r3, #0
   104fc:	d106      	bne.n	1050c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   104fe:	4a05      	ldr	r2, [pc, #20]	; (10514 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   10500:	9b01      	ldr	r3, [sp, #4]
   10502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10506:	2b00      	cmp	r3, #0
   10508:	d100      	bne.n	1050c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1050a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1050c:	bf00      	nop
   1050e:	b003      	add	sp, #12
   10510:	f85d fb04 	ldr.w	pc, [sp], #4
   10514:	1fff9388 	.word	0x1fff9388
   10518:	1fff9384 	.word	0x1fff9384

0001051c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   1051c:	b500      	push	{lr}
   1051e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10520:	f7f0 fb7a 	bl	c18 <Sys_GetCoreID>
   10524:	4603      	mov	r3, r0
   10526:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   10528:	4a10      	ldr	r2, [pc, #64]	; (1056c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1052a:	9b01      	ldr	r3, [sp, #4]
   1052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10530:	2b00      	cmp	r3, #0
   10532:	d10d      	bne.n	10550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10534:	f7f0 fa86 	bl	a44 <Adc_schm_read_msr>
   10538:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1053a:	9b00      	ldr	r3, [sp, #0]
   1053c:	f003 0301 	and.w	r3, r3, #1
   10540:	2b00      	cmp	r3, #0
   10542:	d100      	bne.n	10546 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10544:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   10546:	490a      	ldr	r1, [pc, #40]	; (10570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   10548:	9b01      	ldr	r3, [sp, #4]
   1054a:	9a00      	ldr	r2, [sp, #0]
   1054c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   10550:	4a06      	ldr	r2, [pc, #24]	; (1056c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   10552:	9b01      	ldr	r3, [sp, #4]
   10554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10558:	1c5a      	adds	r2, r3, #1
   1055a:	4904      	ldr	r1, [pc, #16]	; (1056c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1055c:	9b01      	ldr	r3, [sp, #4]
   1055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10562:	bf00      	nop
   10564:	b003      	add	sp, #12
   10566:	f85d fb04 	ldr.w	pc, [sp], #4
   1056a:	bf00      	nop
   1056c:	1fff9390 	.word	0x1fff9390
   10570:	1fff938c 	.word	0x1fff938c

00010574 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   10574:	b500      	push	{lr}
   10576:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10578:	f7f0 fb4e 	bl	c18 <Sys_GetCoreID>
   1057c:	4603      	mov	r3, r0
   1057e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   10580:	4a0d      	ldr	r2, [pc, #52]	; (105b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   10582:	9b01      	ldr	r3, [sp, #4]
   10584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10588:	1e5a      	subs	r2, r3, #1
   1058a:	490b      	ldr	r1, [pc, #44]	; (105b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1058c:	9b01      	ldr	r3, [sp, #4]
   1058e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   10592:	4a0a      	ldr	r2, [pc, #40]	; (105bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   10594:	9b01      	ldr	r3, [sp, #4]
   10596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1059a:	f003 0301 	and.w	r3, r3, #1
   1059e:	2b00      	cmp	r3, #0
   105a0:	d106      	bne.n	105b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   105a2:	4a05      	ldr	r2, [pc, #20]	; (105b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   105a4:	9b01      	ldr	r3, [sp, #4]
   105a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105aa:	2b00      	cmp	r3, #0
   105ac:	d100      	bne.n	105b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   105ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   105b0:	bf00      	nop
   105b2:	b003      	add	sp, #12
   105b4:	f85d fb04 	ldr.w	pc, [sp], #4
   105b8:	1fff9390 	.word	0x1fff9390
   105bc:	1fff938c 	.word	0x1fff938c

000105c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   105c0:	b500      	push	{lr}
   105c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105c4:	f7f0 fb28 	bl	c18 <Sys_GetCoreID>
   105c8:	4603      	mov	r3, r0
   105ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   105cc:	4a10      	ldr	r2, [pc, #64]	; (10610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   105ce:	9b01      	ldr	r3, [sp, #4]
   105d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105d4:	2b00      	cmp	r3, #0
   105d6:	d10d      	bne.n	105f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105d8:	f7f0 fa34 	bl	a44 <Adc_schm_read_msr>
   105dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105de:	9b00      	ldr	r3, [sp, #0]
   105e0:	f003 0301 	and.w	r3, r3, #1
   105e4:	2b00      	cmp	r3, #0
   105e6:	d100      	bne.n	105ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   105ea:	490a      	ldr	r1, [pc, #40]	; (10614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   105ec:	9b01      	ldr	r3, [sp, #4]
   105ee:	9a00      	ldr	r2, [sp, #0]
   105f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   105f4:	4a06      	ldr	r2, [pc, #24]	; (10610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   105f6:	9b01      	ldr	r3, [sp, #4]
   105f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105fc:	1c5a      	adds	r2, r3, #1
   105fe:	4904      	ldr	r1, [pc, #16]	; (10610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   10600:	9b01      	ldr	r3, [sp, #4]
   10602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10606:	bf00      	nop
   10608:	b003      	add	sp, #12
   1060a:	f85d fb04 	ldr.w	pc, [sp], #4
   1060e:	bf00      	nop
   10610:	1fff9398 	.word	0x1fff9398
   10614:	1fff9394 	.word	0x1fff9394

00010618 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   10618:	b500      	push	{lr}
   1061a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1061c:	f7f0 fafc 	bl	c18 <Sys_GetCoreID>
   10620:	4603      	mov	r3, r0
   10622:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   10624:	4a0d      	ldr	r2, [pc, #52]	; (1065c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   10626:	9b01      	ldr	r3, [sp, #4]
   10628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1062c:	1e5a      	subs	r2, r3, #1
   1062e:	490b      	ldr	r1, [pc, #44]	; (1065c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   10630:	9b01      	ldr	r3, [sp, #4]
   10632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   10636:	4a0a      	ldr	r2, [pc, #40]	; (10660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   10638:	9b01      	ldr	r3, [sp, #4]
   1063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1063e:	f003 0301 	and.w	r3, r3, #1
   10642:	2b00      	cmp	r3, #0
   10644:	d106      	bne.n	10654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   10646:	4a05      	ldr	r2, [pc, #20]	; (1065c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   10648:	9b01      	ldr	r3, [sp, #4]
   1064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1064e:	2b00      	cmp	r3, #0
   10650:	d100      	bne.n	10654 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10652:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10654:	bf00      	nop
   10656:	b003      	add	sp, #12
   10658:	f85d fb04 	ldr.w	pc, [sp], #4
   1065c:	1fff9398 	.word	0x1fff9398
   10660:	1fff9394 	.word	0x1fff9394

00010664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   10664:	b500      	push	{lr}
   10666:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10668:	f7f0 fad6 	bl	c18 <Sys_GetCoreID>
   1066c:	4603      	mov	r3, r0
   1066e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   10670:	4a10      	ldr	r2, [pc, #64]	; (106b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   10672:	9b01      	ldr	r3, [sp, #4]
   10674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10678:	2b00      	cmp	r3, #0
   1067a:	d10d      	bne.n	10698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1067c:	f7f0 f9e2 	bl	a44 <Adc_schm_read_msr>
   10680:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10682:	9b00      	ldr	r3, [sp, #0]
   10684:	f003 0301 	and.w	r3, r3, #1
   10688:	2b00      	cmp	r3, #0
   1068a:	d100      	bne.n	1068e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1068c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   1068e:	490a      	ldr	r1, [pc, #40]	; (106b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   10690:	9b01      	ldr	r3, [sp, #4]
   10692:	9a00      	ldr	r2, [sp, #0]
   10694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   10698:	4a06      	ldr	r2, [pc, #24]	; (106b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1069a:	9b01      	ldr	r3, [sp, #4]
   1069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106a0:	1c5a      	adds	r2, r3, #1
   106a2:	4904      	ldr	r1, [pc, #16]	; (106b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   106a4:	9b01      	ldr	r3, [sp, #4]
   106a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   106aa:	bf00      	nop
   106ac:	b003      	add	sp, #12
   106ae:	f85d fb04 	ldr.w	pc, [sp], #4
   106b2:	bf00      	nop
   106b4:	1fff93a0 	.word	0x1fff93a0
   106b8:	1fff939c 	.word	0x1fff939c

000106bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   106bc:	b500      	push	{lr}
   106be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106c0:	f7f0 faaa 	bl	c18 <Sys_GetCoreID>
   106c4:	4603      	mov	r3, r0
   106c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   106c8:	4a0d      	ldr	r2, [pc, #52]	; (10700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   106ca:	9b01      	ldr	r3, [sp, #4]
   106cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106d0:	1e5a      	subs	r2, r3, #1
   106d2:	490b      	ldr	r1, [pc, #44]	; (10700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   106d4:	9b01      	ldr	r3, [sp, #4]
   106d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   106da:	4a0a      	ldr	r2, [pc, #40]	; (10704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   106dc:	9b01      	ldr	r3, [sp, #4]
   106de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106e2:	f003 0301 	and.w	r3, r3, #1
   106e6:	2b00      	cmp	r3, #0
   106e8:	d106      	bne.n	106f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   106ea:	4a05      	ldr	r2, [pc, #20]	; (10700 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   106ec:	9b01      	ldr	r3, [sp, #4]
   106ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106f2:	2b00      	cmp	r3, #0
   106f4:	d100      	bne.n	106f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106f8:	bf00      	nop
   106fa:	b003      	add	sp, #12
   106fc:	f85d fb04 	ldr.w	pc, [sp], #4
   10700:	1fff93a0 	.word	0x1fff93a0
   10704:	1fff939c 	.word	0x1fff939c

00010708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   10708:	b500      	push	{lr}
   1070a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1070c:	f7f0 fa84 	bl	c18 <Sys_GetCoreID>
   10710:	4603      	mov	r3, r0
   10712:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   10714:	4a10      	ldr	r2, [pc, #64]	; (10758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   10716:	9b01      	ldr	r3, [sp, #4]
   10718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1071c:	2b00      	cmp	r3, #0
   1071e:	d10d      	bne.n	1073c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10720:	f7f0 f990 	bl	a44 <Adc_schm_read_msr>
   10724:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10726:	9b00      	ldr	r3, [sp, #0]
   10728:	f003 0301 	and.w	r3, r3, #1
   1072c:	2b00      	cmp	r3, #0
   1072e:	d100      	bne.n	10732 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10730:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   10732:	490a      	ldr	r1, [pc, #40]	; (1075c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   10734:	9b01      	ldr	r3, [sp, #4]
   10736:	9a00      	ldr	r2, [sp, #0]
   10738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   1073c:	4a06      	ldr	r2, [pc, #24]	; (10758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1073e:	9b01      	ldr	r3, [sp, #4]
   10740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10744:	1c5a      	adds	r2, r3, #1
   10746:	4904      	ldr	r1, [pc, #16]	; (10758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   10748:	9b01      	ldr	r3, [sp, #4]
   1074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1074e:	bf00      	nop
   10750:	b003      	add	sp, #12
   10752:	f85d fb04 	ldr.w	pc, [sp], #4
   10756:	bf00      	nop
   10758:	1fff93a8 	.word	0x1fff93a8
   1075c:	1fff93a4 	.word	0x1fff93a4

00010760 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   10760:	b500      	push	{lr}
   10762:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10764:	f7f0 fa58 	bl	c18 <Sys_GetCoreID>
   10768:	4603      	mov	r3, r0
   1076a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   1076c:	4a0d      	ldr	r2, [pc, #52]	; (107a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1076e:	9b01      	ldr	r3, [sp, #4]
   10770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10774:	1e5a      	subs	r2, r3, #1
   10776:	490b      	ldr	r1, [pc, #44]	; (107a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   10778:	9b01      	ldr	r3, [sp, #4]
   1077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   1077e:	4a0a      	ldr	r2, [pc, #40]	; (107a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   10780:	9b01      	ldr	r3, [sp, #4]
   10782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10786:	f003 0301 	and.w	r3, r3, #1
   1078a:	2b00      	cmp	r3, #0
   1078c:	d106      	bne.n	1079c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   1078e:	4a05      	ldr	r2, [pc, #20]	; (107a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   10790:	9b01      	ldr	r3, [sp, #4]
   10792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10796:	2b00      	cmp	r3, #0
   10798:	d100      	bne.n	1079c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1079a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1079c:	bf00      	nop
   1079e:	b003      	add	sp, #12
   107a0:	f85d fb04 	ldr.w	pc, [sp], #4
   107a4:	1fff93a8 	.word	0x1fff93a8
   107a8:	1fff93a4 	.word	0x1fff93a4

000107ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   107ac:	b500      	push	{lr}
   107ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107b0:	f7f0 fa32 	bl	c18 <Sys_GetCoreID>
   107b4:	4603      	mov	r3, r0
   107b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   107b8:	4a10      	ldr	r2, [pc, #64]	; (107fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   107ba:	9b01      	ldr	r3, [sp, #4]
   107bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107c0:	2b00      	cmp	r3, #0
   107c2:	d10d      	bne.n	107e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   107c4:	f7f0 f93e 	bl	a44 <Adc_schm_read_msr>
   107c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107ca:	9b00      	ldr	r3, [sp, #0]
   107cc:	f003 0301 	and.w	r3, r3, #1
   107d0:	2b00      	cmp	r3, #0
   107d2:	d100      	bne.n	107d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   107d6:	490a      	ldr	r1, [pc, #40]	; (10800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   107d8:	9b01      	ldr	r3, [sp, #4]
   107da:	9a00      	ldr	r2, [sp, #0]
   107dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   107e0:	4a06      	ldr	r2, [pc, #24]	; (107fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   107e2:	9b01      	ldr	r3, [sp, #4]
   107e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107e8:	1c5a      	adds	r2, r3, #1
   107ea:	4904      	ldr	r1, [pc, #16]	; (107fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   107ec:	9b01      	ldr	r3, [sp, #4]
   107ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107f2:	bf00      	nop
   107f4:	b003      	add	sp, #12
   107f6:	f85d fb04 	ldr.w	pc, [sp], #4
   107fa:	bf00      	nop
   107fc:	1fff93b0 	.word	0x1fff93b0
   10800:	1fff93ac 	.word	0x1fff93ac

00010804 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   10804:	b500      	push	{lr}
   10806:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10808:	f7f0 fa06 	bl	c18 <Sys_GetCoreID>
   1080c:	4603      	mov	r3, r0
   1080e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   10810:	4a0d      	ldr	r2, [pc, #52]	; (10848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   10812:	9b01      	ldr	r3, [sp, #4]
   10814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10818:	1e5a      	subs	r2, r3, #1
   1081a:	490b      	ldr	r1, [pc, #44]	; (10848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1081c:	9b01      	ldr	r3, [sp, #4]
   1081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   10822:	4a0a      	ldr	r2, [pc, #40]	; (1084c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   10824:	9b01      	ldr	r3, [sp, #4]
   10826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1082a:	f003 0301 	and.w	r3, r3, #1
   1082e:	2b00      	cmp	r3, #0
   10830:	d106      	bne.n	10840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   10832:	4a05      	ldr	r2, [pc, #20]	; (10848 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   10834:	9b01      	ldr	r3, [sp, #4]
   10836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1083a:	2b00      	cmp	r3, #0
   1083c:	d100      	bne.n	10840 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1083e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10840:	bf00      	nop
   10842:	b003      	add	sp, #12
   10844:	f85d fb04 	ldr.w	pc, [sp], #4
   10848:	1fff93b0 	.word	0x1fff93b0
   1084c:	1fff93ac 	.word	0x1fff93ac

00010850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   10850:	b500      	push	{lr}
   10852:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10854:	f7f0 f9e0 	bl	c18 <Sys_GetCoreID>
   10858:	4603      	mov	r3, r0
   1085a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   1085c:	4a10      	ldr	r2, [pc, #64]	; (108a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1085e:	9b01      	ldr	r3, [sp, #4]
   10860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10864:	2b00      	cmp	r3, #0
   10866:	d10d      	bne.n	10884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10868:	f7f0 f8ec 	bl	a44 <Adc_schm_read_msr>
   1086c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1086e:	9b00      	ldr	r3, [sp, #0]
   10870:	f003 0301 	and.w	r3, r3, #1
   10874:	2b00      	cmp	r3, #0
   10876:	d100      	bne.n	1087a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10878:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   1087a:	490a      	ldr	r1, [pc, #40]	; (108a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   1087c:	9b01      	ldr	r3, [sp, #4]
   1087e:	9a00      	ldr	r2, [sp, #0]
   10880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   10884:	4a06      	ldr	r2, [pc, #24]	; (108a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   10886:	9b01      	ldr	r3, [sp, #4]
   10888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1088c:	1c5a      	adds	r2, r3, #1
   1088e:	4904      	ldr	r1, [pc, #16]	; (108a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   10890:	9b01      	ldr	r3, [sp, #4]
   10892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10896:	bf00      	nop
   10898:	b003      	add	sp, #12
   1089a:	f85d fb04 	ldr.w	pc, [sp], #4
   1089e:	bf00      	nop
   108a0:	1fff93b8 	.word	0x1fff93b8
   108a4:	1fff93b4 	.word	0x1fff93b4

000108a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   108a8:	b500      	push	{lr}
   108aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108ac:	f7f0 f9b4 	bl	c18 <Sys_GetCoreID>
   108b0:	4603      	mov	r3, r0
   108b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   108b4:	4a0d      	ldr	r2, [pc, #52]	; (108ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   108b6:	9b01      	ldr	r3, [sp, #4]
   108b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108bc:	1e5a      	subs	r2, r3, #1
   108be:	490b      	ldr	r1, [pc, #44]	; (108ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   108c0:	9b01      	ldr	r3, [sp, #4]
   108c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   108c6:	4a0a      	ldr	r2, [pc, #40]	; (108f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   108c8:	9b01      	ldr	r3, [sp, #4]
   108ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ce:	f003 0301 	and.w	r3, r3, #1
   108d2:	2b00      	cmp	r3, #0
   108d4:	d106      	bne.n	108e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   108d6:	4a05      	ldr	r2, [pc, #20]	; (108ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   108d8:	9b01      	ldr	r3, [sp, #4]
   108da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108de:	2b00      	cmp	r3, #0
   108e0:	d100      	bne.n	108e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108e4:	bf00      	nop
   108e6:	b003      	add	sp, #12
   108e8:	f85d fb04 	ldr.w	pc, [sp], #4
   108ec:	1fff93b8 	.word	0x1fff93b8
   108f0:	1fff93b4 	.word	0x1fff93b4

000108f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   108f4:	b500      	push	{lr}
   108f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108f8:	f7f0 f98e 	bl	c18 <Sys_GetCoreID>
   108fc:	4603      	mov	r3, r0
   108fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   10900:	4a10      	ldr	r2, [pc, #64]	; (10944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   10902:	9b01      	ldr	r3, [sp, #4]
   10904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10908:	2b00      	cmp	r3, #0
   1090a:	d10d      	bne.n	10928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1090c:	f7f0 f89a 	bl	a44 <Adc_schm_read_msr>
   10910:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10912:	9b00      	ldr	r3, [sp, #0]
   10914:	f003 0301 	and.w	r3, r3, #1
   10918:	2b00      	cmp	r3, #0
   1091a:	d100      	bne.n	1091e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1091c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   1091e:	490a      	ldr	r1, [pc, #40]	; (10948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   10920:	9b01      	ldr	r3, [sp, #4]
   10922:	9a00      	ldr	r2, [sp, #0]
   10924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   10928:	4a06      	ldr	r2, [pc, #24]	; (10944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1092a:	9b01      	ldr	r3, [sp, #4]
   1092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10930:	1c5a      	adds	r2, r3, #1
   10932:	4904      	ldr	r1, [pc, #16]	; (10944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   10934:	9b01      	ldr	r3, [sp, #4]
   10936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1093a:	bf00      	nop
   1093c:	b003      	add	sp, #12
   1093e:	f85d fb04 	ldr.w	pc, [sp], #4
   10942:	bf00      	nop
   10944:	1fff93c0 	.word	0x1fff93c0
   10948:	1fff93bc 	.word	0x1fff93bc

0001094c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   1094c:	b500      	push	{lr}
   1094e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10950:	f7f0 f962 	bl	c18 <Sys_GetCoreID>
   10954:	4603      	mov	r3, r0
   10956:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   10958:	4a0d      	ldr	r2, [pc, #52]	; (10990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1095a:	9b01      	ldr	r3, [sp, #4]
   1095c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10960:	1e5a      	subs	r2, r3, #1
   10962:	490b      	ldr	r1, [pc, #44]	; (10990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   10964:	9b01      	ldr	r3, [sp, #4]
   10966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   1096a:	4a0a      	ldr	r2, [pc, #40]	; (10994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   1096c:	9b01      	ldr	r3, [sp, #4]
   1096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10972:	f003 0301 	and.w	r3, r3, #1
   10976:	2b00      	cmp	r3, #0
   10978:	d106      	bne.n	10988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   1097a:	4a05      	ldr	r2, [pc, #20]	; (10990 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1097c:	9b01      	ldr	r3, [sp, #4]
   1097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10982:	2b00      	cmp	r3, #0
   10984:	d100      	bne.n	10988 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10986:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10988:	bf00      	nop
   1098a:	b003      	add	sp, #12
   1098c:	f85d fb04 	ldr.w	pc, [sp], #4
   10990:	1fff93c0 	.word	0x1fff93c0
   10994:	1fff93bc 	.word	0x1fff93bc

00010998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   10998:	b500      	push	{lr}
   1099a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1099c:	f7f0 f93c 	bl	c18 <Sys_GetCoreID>
   109a0:	4603      	mov	r3, r0
   109a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   109a4:	4a10      	ldr	r2, [pc, #64]	; (109e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   109a6:	9b01      	ldr	r3, [sp, #4]
   109a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ac:	2b00      	cmp	r3, #0
   109ae:	d10d      	bne.n	109cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   109b0:	f7f0 f848 	bl	a44 <Adc_schm_read_msr>
   109b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   109b6:	9b00      	ldr	r3, [sp, #0]
   109b8:	f003 0301 	and.w	r3, r3, #1
   109bc:	2b00      	cmp	r3, #0
   109be:	d100      	bne.n	109c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   109c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   109c2:	490a      	ldr	r1, [pc, #40]	; (109ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   109c4:	9b01      	ldr	r3, [sp, #4]
   109c6:	9a00      	ldr	r2, [sp, #0]
   109c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   109cc:	4a06      	ldr	r2, [pc, #24]	; (109e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   109ce:	9b01      	ldr	r3, [sp, #4]
   109d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109d4:	1c5a      	adds	r2, r3, #1
   109d6:	4904      	ldr	r1, [pc, #16]	; (109e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   109d8:	9b01      	ldr	r3, [sp, #4]
   109da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109de:	bf00      	nop
   109e0:	b003      	add	sp, #12
   109e2:	f85d fb04 	ldr.w	pc, [sp], #4
   109e6:	bf00      	nop
   109e8:	1fff93c8 	.word	0x1fff93c8
   109ec:	1fff93c4 	.word	0x1fff93c4

000109f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   109f0:	b500      	push	{lr}
   109f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109f4:	f7f0 f910 	bl	c18 <Sys_GetCoreID>
   109f8:	4603      	mov	r3, r0
   109fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   109fc:	4a0d      	ldr	r2, [pc, #52]	; (10a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   109fe:	9b01      	ldr	r3, [sp, #4]
   10a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a04:	1e5a      	subs	r2, r3, #1
   10a06:	490b      	ldr	r1, [pc, #44]	; (10a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   10a08:	9b01      	ldr	r3, [sp, #4]
   10a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   10a0e:	4a0a      	ldr	r2, [pc, #40]	; (10a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   10a10:	9b01      	ldr	r3, [sp, #4]
   10a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a16:	f003 0301 	and.w	r3, r3, #1
   10a1a:	2b00      	cmp	r3, #0
   10a1c:	d106      	bne.n	10a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   10a1e:	4a05      	ldr	r2, [pc, #20]	; (10a34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   10a20:	9b01      	ldr	r3, [sp, #4]
   10a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a26:	2b00      	cmp	r3, #0
   10a28:	d100      	bne.n	10a2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a2c:	bf00      	nop
   10a2e:	b003      	add	sp, #12
   10a30:	f85d fb04 	ldr.w	pc, [sp], #4
   10a34:	1fff93c8 	.word	0x1fff93c8
   10a38:	1fff93c4 	.word	0x1fff93c4

00010a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   10a3c:	b500      	push	{lr}
   10a3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a40:	f7f0 f8ea 	bl	c18 <Sys_GetCoreID>
   10a44:	4603      	mov	r3, r0
   10a46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   10a48:	4a10      	ldr	r2, [pc, #64]	; (10a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   10a4a:	9b01      	ldr	r3, [sp, #4]
   10a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a50:	2b00      	cmp	r3, #0
   10a52:	d10d      	bne.n	10a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a54:	f7ef fff6 	bl	a44 <Adc_schm_read_msr>
   10a58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a5a:	9b00      	ldr	r3, [sp, #0]
   10a5c:	f003 0301 	and.w	r3, r3, #1
   10a60:	2b00      	cmp	r3, #0
   10a62:	d100      	bne.n	10a66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   10a66:	490a      	ldr	r1, [pc, #40]	; (10a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   10a68:	9b01      	ldr	r3, [sp, #4]
   10a6a:	9a00      	ldr	r2, [sp, #0]
   10a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   10a70:	4a06      	ldr	r2, [pc, #24]	; (10a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   10a72:	9b01      	ldr	r3, [sp, #4]
   10a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a78:	1c5a      	adds	r2, r3, #1
   10a7a:	4904      	ldr	r1, [pc, #16]	; (10a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   10a7c:	9b01      	ldr	r3, [sp, #4]
   10a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a82:	bf00      	nop
   10a84:	b003      	add	sp, #12
   10a86:	f85d fb04 	ldr.w	pc, [sp], #4
   10a8a:	bf00      	nop
   10a8c:	1fff93d0 	.word	0x1fff93d0
   10a90:	1fff93cc 	.word	0x1fff93cc

00010a94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   10a94:	b500      	push	{lr}
   10a96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a98:	f7f0 f8be 	bl	c18 <Sys_GetCoreID>
   10a9c:	4603      	mov	r3, r0
   10a9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   10aa0:	4a0d      	ldr	r2, [pc, #52]	; (10ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   10aa2:	9b01      	ldr	r3, [sp, #4]
   10aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aa8:	1e5a      	subs	r2, r3, #1
   10aaa:	490b      	ldr	r1, [pc, #44]	; (10ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   10aac:	9b01      	ldr	r3, [sp, #4]
   10aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   10ab2:	4a0a      	ldr	r2, [pc, #40]	; (10adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   10ab4:	9b01      	ldr	r3, [sp, #4]
   10ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aba:	f003 0301 	and.w	r3, r3, #1
   10abe:	2b00      	cmp	r3, #0
   10ac0:	d106      	bne.n	10ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   10ac2:	4a05      	ldr	r2, [pc, #20]	; (10ad8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   10ac4:	9b01      	ldr	r3, [sp, #4]
   10ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aca:	2b00      	cmp	r3, #0
   10acc:	d100      	bne.n	10ad0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ace:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ad0:	bf00      	nop
   10ad2:	b003      	add	sp, #12
   10ad4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ad8:	1fff93d0 	.word	0x1fff93d0
   10adc:	1fff93cc 	.word	0x1fff93cc

00010ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   10ae0:	b500      	push	{lr}
   10ae2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ae4:	f7f0 f898 	bl	c18 <Sys_GetCoreID>
   10ae8:	4603      	mov	r3, r0
   10aea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   10aec:	4a10      	ldr	r2, [pc, #64]	; (10b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   10aee:	9b01      	ldr	r3, [sp, #4]
   10af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10af4:	2b00      	cmp	r3, #0
   10af6:	d10d      	bne.n	10b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10af8:	f7ef ffa4 	bl	a44 <Adc_schm_read_msr>
   10afc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10afe:	9b00      	ldr	r3, [sp, #0]
   10b00:	f003 0301 	and.w	r3, r3, #1
   10b04:	2b00      	cmp	r3, #0
   10b06:	d100      	bne.n	10b0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   10b0a:	490a      	ldr	r1, [pc, #40]	; (10b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   10b0c:	9b01      	ldr	r3, [sp, #4]
   10b0e:	9a00      	ldr	r2, [sp, #0]
   10b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   10b14:	4a06      	ldr	r2, [pc, #24]	; (10b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   10b16:	9b01      	ldr	r3, [sp, #4]
   10b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b1c:	1c5a      	adds	r2, r3, #1
   10b1e:	4904      	ldr	r1, [pc, #16]	; (10b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   10b20:	9b01      	ldr	r3, [sp, #4]
   10b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b26:	bf00      	nop
   10b28:	b003      	add	sp, #12
   10b2a:	f85d fb04 	ldr.w	pc, [sp], #4
   10b2e:	bf00      	nop
   10b30:	1fff93d8 	.word	0x1fff93d8
   10b34:	1fff93d4 	.word	0x1fff93d4

00010b38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   10b38:	b500      	push	{lr}
   10b3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b3c:	f7f0 f86c 	bl	c18 <Sys_GetCoreID>
   10b40:	4603      	mov	r3, r0
   10b42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   10b44:	4a0d      	ldr	r2, [pc, #52]	; (10b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   10b46:	9b01      	ldr	r3, [sp, #4]
   10b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b4c:	1e5a      	subs	r2, r3, #1
   10b4e:	490b      	ldr	r1, [pc, #44]	; (10b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   10b50:	9b01      	ldr	r3, [sp, #4]
   10b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   10b56:	4a0a      	ldr	r2, [pc, #40]	; (10b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   10b58:	9b01      	ldr	r3, [sp, #4]
   10b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b5e:	f003 0301 	and.w	r3, r3, #1
   10b62:	2b00      	cmp	r3, #0
   10b64:	d106      	bne.n	10b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   10b66:	4a05      	ldr	r2, [pc, #20]	; (10b7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   10b68:	9b01      	ldr	r3, [sp, #4]
   10b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b6e:	2b00      	cmp	r3, #0
   10b70:	d100      	bne.n	10b74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b74:	bf00      	nop
   10b76:	b003      	add	sp, #12
   10b78:	f85d fb04 	ldr.w	pc, [sp], #4
   10b7c:	1fff93d8 	.word	0x1fff93d8
   10b80:	1fff93d4 	.word	0x1fff93d4

00010b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   10b84:	b500      	push	{lr}
   10b86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b88:	f7f0 f846 	bl	c18 <Sys_GetCoreID>
   10b8c:	4603      	mov	r3, r0
   10b8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   10b90:	4a10      	ldr	r2, [pc, #64]	; (10bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   10b92:	9b01      	ldr	r3, [sp, #4]
   10b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b98:	2b00      	cmp	r3, #0
   10b9a:	d10d      	bne.n	10bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b9c:	f7ef ff52 	bl	a44 <Adc_schm_read_msr>
   10ba0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ba2:	9b00      	ldr	r3, [sp, #0]
   10ba4:	f003 0301 	and.w	r3, r3, #1
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d100      	bne.n	10bae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10bac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   10bae:	490a      	ldr	r1, [pc, #40]	; (10bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   10bb0:	9b01      	ldr	r3, [sp, #4]
   10bb2:	9a00      	ldr	r2, [sp, #0]
   10bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   10bb8:	4a06      	ldr	r2, [pc, #24]	; (10bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   10bba:	9b01      	ldr	r3, [sp, #4]
   10bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bc0:	1c5a      	adds	r2, r3, #1
   10bc2:	4904      	ldr	r1, [pc, #16]	; (10bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   10bc4:	9b01      	ldr	r3, [sp, #4]
   10bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10bca:	bf00      	nop
   10bcc:	b003      	add	sp, #12
   10bce:	f85d fb04 	ldr.w	pc, [sp], #4
   10bd2:	bf00      	nop
   10bd4:	1fff93e0 	.word	0x1fff93e0
   10bd8:	1fff93dc 	.word	0x1fff93dc

00010bdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   10bdc:	b500      	push	{lr}
   10bde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10be0:	f7f0 f81a 	bl	c18 <Sys_GetCoreID>
   10be4:	4603      	mov	r3, r0
   10be6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   10be8:	4a0d      	ldr	r2, [pc, #52]	; (10c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   10bea:	9b01      	ldr	r3, [sp, #4]
   10bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bf0:	1e5a      	subs	r2, r3, #1
   10bf2:	490b      	ldr	r1, [pc, #44]	; (10c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   10bf4:	9b01      	ldr	r3, [sp, #4]
   10bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   10bfa:	4a0a      	ldr	r2, [pc, #40]	; (10c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   10bfc:	9b01      	ldr	r3, [sp, #4]
   10bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c02:	f003 0301 	and.w	r3, r3, #1
   10c06:	2b00      	cmp	r3, #0
   10c08:	d106      	bne.n	10c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   10c0a:	4a05      	ldr	r2, [pc, #20]	; (10c20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   10c0c:	9b01      	ldr	r3, [sp, #4]
   10c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c12:	2b00      	cmp	r3, #0
   10c14:	d100      	bne.n	10c18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c18:	bf00      	nop
   10c1a:	b003      	add	sp, #12
   10c1c:	f85d fb04 	ldr.w	pc, [sp], #4
   10c20:	1fff93e0 	.word	0x1fff93e0
   10c24:	1fff93dc 	.word	0x1fff93dc

00010c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   10c28:	b500      	push	{lr}
   10c2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c2c:	f7ef fff4 	bl	c18 <Sys_GetCoreID>
   10c30:	4603      	mov	r3, r0
   10c32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   10c34:	4a10      	ldr	r2, [pc, #64]	; (10c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   10c36:	9b01      	ldr	r3, [sp, #4]
   10c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c3c:	2b00      	cmp	r3, #0
   10c3e:	d10d      	bne.n	10c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c40:	f7ef ff00 	bl	a44 <Adc_schm_read_msr>
   10c44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c46:	9b00      	ldr	r3, [sp, #0]
   10c48:	f003 0301 	and.w	r3, r3, #1
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d100      	bne.n	10c52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   10c52:	490a      	ldr	r1, [pc, #40]	; (10c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   10c54:	9b01      	ldr	r3, [sp, #4]
   10c56:	9a00      	ldr	r2, [sp, #0]
   10c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   10c5c:	4a06      	ldr	r2, [pc, #24]	; (10c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   10c5e:	9b01      	ldr	r3, [sp, #4]
   10c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c64:	1c5a      	adds	r2, r3, #1
   10c66:	4904      	ldr	r1, [pc, #16]	; (10c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   10c68:	9b01      	ldr	r3, [sp, #4]
   10c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c6e:	bf00      	nop
   10c70:	b003      	add	sp, #12
   10c72:	f85d fb04 	ldr.w	pc, [sp], #4
   10c76:	bf00      	nop
   10c78:	1fff93e8 	.word	0x1fff93e8
   10c7c:	1fff93e4 	.word	0x1fff93e4

00010c80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   10c80:	b500      	push	{lr}
   10c82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c84:	f7ef ffc8 	bl	c18 <Sys_GetCoreID>
   10c88:	4603      	mov	r3, r0
   10c8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   10c8c:	4a0d      	ldr	r2, [pc, #52]	; (10cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   10c8e:	9b01      	ldr	r3, [sp, #4]
   10c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c94:	1e5a      	subs	r2, r3, #1
   10c96:	490b      	ldr	r1, [pc, #44]	; (10cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   10c98:	9b01      	ldr	r3, [sp, #4]
   10c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   10c9e:	4a0a      	ldr	r2, [pc, #40]	; (10cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   10ca0:	9b01      	ldr	r3, [sp, #4]
   10ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ca6:	f003 0301 	and.w	r3, r3, #1
   10caa:	2b00      	cmp	r3, #0
   10cac:	d106      	bne.n	10cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   10cae:	4a05      	ldr	r2, [pc, #20]	; (10cc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   10cb0:	9b01      	ldr	r3, [sp, #4]
   10cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb6:	2b00      	cmp	r3, #0
   10cb8:	d100      	bne.n	10cbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10cba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10cbc:	bf00      	nop
   10cbe:	b003      	add	sp, #12
   10cc0:	f85d fb04 	ldr.w	pc, [sp], #4
   10cc4:	1fff93e8 	.word	0x1fff93e8
   10cc8:	1fff93e4 	.word	0x1fff93e4

00010ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   10ccc:	b500      	push	{lr}
   10cce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cd0:	f7ef ffa2 	bl	c18 <Sys_GetCoreID>
   10cd4:	4603      	mov	r3, r0
   10cd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   10cd8:	4a10      	ldr	r2, [pc, #64]	; (10d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   10cda:	9b01      	ldr	r3, [sp, #4]
   10cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ce0:	2b00      	cmp	r3, #0
   10ce2:	d10d      	bne.n	10d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ce4:	f7ef feae 	bl	a44 <Adc_schm_read_msr>
   10ce8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cea:	9b00      	ldr	r3, [sp, #0]
   10cec:	f003 0301 	and.w	r3, r3, #1
   10cf0:	2b00      	cmp	r3, #0
   10cf2:	d100      	bne.n	10cf6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10cf4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   10cf6:	490a      	ldr	r1, [pc, #40]	; (10d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   10cf8:	9b01      	ldr	r3, [sp, #4]
   10cfa:	9a00      	ldr	r2, [sp, #0]
   10cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   10d00:	4a06      	ldr	r2, [pc, #24]	; (10d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   10d02:	9b01      	ldr	r3, [sp, #4]
   10d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d08:	1c5a      	adds	r2, r3, #1
   10d0a:	4904      	ldr	r1, [pc, #16]	; (10d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   10d0c:	9b01      	ldr	r3, [sp, #4]
   10d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d12:	bf00      	nop
   10d14:	b003      	add	sp, #12
   10d16:	f85d fb04 	ldr.w	pc, [sp], #4
   10d1a:	bf00      	nop
   10d1c:	1fff93f0 	.word	0x1fff93f0
   10d20:	1fff93ec 	.word	0x1fff93ec

00010d24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   10d24:	b500      	push	{lr}
   10d26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d28:	f7ef ff76 	bl	c18 <Sys_GetCoreID>
   10d2c:	4603      	mov	r3, r0
   10d2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   10d30:	4a0d      	ldr	r2, [pc, #52]	; (10d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   10d32:	9b01      	ldr	r3, [sp, #4]
   10d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d38:	1e5a      	subs	r2, r3, #1
   10d3a:	490b      	ldr	r1, [pc, #44]	; (10d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   10d3c:	9b01      	ldr	r3, [sp, #4]
   10d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   10d42:	4a0a      	ldr	r2, [pc, #40]	; (10d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   10d44:	9b01      	ldr	r3, [sp, #4]
   10d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d4a:	f003 0301 	and.w	r3, r3, #1
   10d4e:	2b00      	cmp	r3, #0
   10d50:	d106      	bne.n	10d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   10d52:	4a05      	ldr	r2, [pc, #20]	; (10d68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   10d54:	9b01      	ldr	r3, [sp, #4]
   10d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d5a:	2b00      	cmp	r3, #0
   10d5c:	d100      	bne.n	10d60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d60:	bf00      	nop
   10d62:	b003      	add	sp, #12
   10d64:	f85d fb04 	ldr.w	pc, [sp], #4
   10d68:	1fff93f0 	.word	0x1fff93f0
   10d6c:	1fff93ec 	.word	0x1fff93ec

00010d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   10d70:	b500      	push	{lr}
   10d72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d74:	f7ef ff50 	bl	c18 <Sys_GetCoreID>
   10d78:	4603      	mov	r3, r0
   10d7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   10d7c:	4a10      	ldr	r2, [pc, #64]	; (10dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   10d7e:	9b01      	ldr	r3, [sp, #4]
   10d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d84:	2b00      	cmp	r3, #0
   10d86:	d10d      	bne.n	10da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d88:	f7ef fe5c 	bl	a44 <Adc_schm_read_msr>
   10d8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d8e:	9b00      	ldr	r3, [sp, #0]
   10d90:	f003 0301 	and.w	r3, r3, #1
   10d94:	2b00      	cmp	r3, #0
   10d96:	d100      	bne.n	10d9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   10d9a:	490a      	ldr	r1, [pc, #40]	; (10dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   10d9c:	9b01      	ldr	r3, [sp, #4]
   10d9e:	9a00      	ldr	r2, [sp, #0]
   10da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   10da4:	4a06      	ldr	r2, [pc, #24]	; (10dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   10da6:	9b01      	ldr	r3, [sp, #4]
   10da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dac:	1c5a      	adds	r2, r3, #1
   10dae:	4904      	ldr	r1, [pc, #16]	; (10dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   10db0:	9b01      	ldr	r3, [sp, #4]
   10db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10db6:	bf00      	nop
   10db8:	b003      	add	sp, #12
   10dba:	f85d fb04 	ldr.w	pc, [sp], #4
   10dbe:	bf00      	nop
   10dc0:	1fff93f8 	.word	0x1fff93f8
   10dc4:	1fff93f4 	.word	0x1fff93f4

00010dc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   10dc8:	b500      	push	{lr}
   10dca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10dcc:	f7ef ff24 	bl	c18 <Sys_GetCoreID>
   10dd0:	4603      	mov	r3, r0
   10dd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   10dd4:	4a0d      	ldr	r2, [pc, #52]	; (10e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   10dd6:	9b01      	ldr	r3, [sp, #4]
   10dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ddc:	1e5a      	subs	r2, r3, #1
   10dde:	490b      	ldr	r1, [pc, #44]	; (10e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   10de0:	9b01      	ldr	r3, [sp, #4]
   10de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   10de6:	4a0a      	ldr	r2, [pc, #40]	; (10e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   10de8:	9b01      	ldr	r3, [sp, #4]
   10dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dee:	f003 0301 	and.w	r3, r3, #1
   10df2:	2b00      	cmp	r3, #0
   10df4:	d106      	bne.n	10e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   10df6:	4a05      	ldr	r2, [pc, #20]	; (10e0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   10df8:	9b01      	ldr	r3, [sp, #4]
   10dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dfe:	2b00      	cmp	r3, #0
   10e00:	d100      	bne.n	10e04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e04:	bf00      	nop
   10e06:	b003      	add	sp, #12
   10e08:	f85d fb04 	ldr.w	pc, [sp], #4
   10e0c:	1fff93f8 	.word	0x1fff93f8
   10e10:	1fff93f4 	.word	0x1fff93f4

00010e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   10e14:	b500      	push	{lr}
   10e16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e18:	f7ef fefe 	bl	c18 <Sys_GetCoreID>
   10e1c:	4603      	mov	r3, r0
   10e1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   10e20:	4a10      	ldr	r2, [pc, #64]	; (10e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   10e22:	9b01      	ldr	r3, [sp, #4]
   10e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e28:	2b00      	cmp	r3, #0
   10e2a:	d10d      	bne.n	10e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e2c:	f7ef fe0a 	bl	a44 <Adc_schm_read_msr>
   10e30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e32:	9b00      	ldr	r3, [sp, #0]
   10e34:	f003 0301 	and.w	r3, r3, #1
   10e38:	2b00      	cmp	r3, #0
   10e3a:	d100      	bne.n	10e3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   10e3e:	490a      	ldr	r1, [pc, #40]	; (10e68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   10e40:	9b01      	ldr	r3, [sp, #4]
   10e42:	9a00      	ldr	r2, [sp, #0]
   10e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   10e48:	4a06      	ldr	r2, [pc, #24]	; (10e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   10e4a:	9b01      	ldr	r3, [sp, #4]
   10e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e50:	1c5a      	adds	r2, r3, #1
   10e52:	4904      	ldr	r1, [pc, #16]	; (10e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   10e54:	9b01      	ldr	r3, [sp, #4]
   10e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e5a:	bf00      	nop
   10e5c:	b003      	add	sp, #12
   10e5e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e62:	bf00      	nop
   10e64:	1fff9400 	.word	0x1fff9400
   10e68:	1fff93fc 	.word	0x1fff93fc

00010e6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   10e6c:	b500      	push	{lr}
   10e6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e70:	f7ef fed2 	bl	c18 <Sys_GetCoreID>
   10e74:	4603      	mov	r3, r0
   10e76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   10e78:	4a0d      	ldr	r2, [pc, #52]	; (10eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   10e7a:	9b01      	ldr	r3, [sp, #4]
   10e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e80:	1e5a      	subs	r2, r3, #1
   10e82:	490b      	ldr	r1, [pc, #44]	; (10eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   10e84:	9b01      	ldr	r3, [sp, #4]
   10e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   10e8a:	4a0a      	ldr	r2, [pc, #40]	; (10eb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   10e8c:	9b01      	ldr	r3, [sp, #4]
   10e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e92:	f003 0301 	and.w	r3, r3, #1
   10e96:	2b00      	cmp	r3, #0
   10e98:	d106      	bne.n	10ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   10e9a:	4a05      	ldr	r2, [pc, #20]	; (10eb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   10e9c:	9b01      	ldr	r3, [sp, #4]
   10e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ea2:	2b00      	cmp	r3, #0
   10ea4:	d100      	bne.n	10ea8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10ea6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ea8:	bf00      	nop
   10eaa:	b003      	add	sp, #12
   10eac:	f85d fb04 	ldr.w	pc, [sp], #4
   10eb0:	1fff9400 	.word	0x1fff9400
   10eb4:	1fff93fc 	.word	0x1fff93fc

00010eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   10eb8:	b500      	push	{lr}
   10eba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ebc:	f7ef feac 	bl	c18 <Sys_GetCoreID>
   10ec0:	4603      	mov	r3, r0
   10ec2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   10ec4:	4a10      	ldr	r2, [pc, #64]	; (10f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   10ec6:	9b01      	ldr	r3, [sp, #4]
   10ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d10d      	bne.n	10eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ed0:	f7ef fdb8 	bl	a44 <Adc_schm_read_msr>
   10ed4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ed6:	9b00      	ldr	r3, [sp, #0]
   10ed8:	f003 0301 	and.w	r3, r3, #1
   10edc:	2b00      	cmp	r3, #0
   10ede:	d100      	bne.n	10ee2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ee0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   10ee2:	490a      	ldr	r1, [pc, #40]	; (10f0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   10ee4:	9b01      	ldr	r3, [sp, #4]
   10ee6:	9a00      	ldr	r2, [sp, #0]
   10ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   10eec:	4a06      	ldr	r2, [pc, #24]	; (10f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   10eee:	9b01      	ldr	r3, [sp, #4]
   10ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ef4:	1c5a      	adds	r2, r3, #1
   10ef6:	4904      	ldr	r1, [pc, #16]	; (10f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   10ef8:	9b01      	ldr	r3, [sp, #4]
   10efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10efe:	bf00      	nop
   10f00:	b003      	add	sp, #12
   10f02:	f85d fb04 	ldr.w	pc, [sp], #4
   10f06:	bf00      	nop
   10f08:	1fff9408 	.word	0x1fff9408
   10f0c:	1fff9404 	.word	0x1fff9404

00010f10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   10f10:	b500      	push	{lr}
   10f12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f14:	f7ef fe80 	bl	c18 <Sys_GetCoreID>
   10f18:	4603      	mov	r3, r0
   10f1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   10f1c:	4a0d      	ldr	r2, [pc, #52]	; (10f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   10f1e:	9b01      	ldr	r3, [sp, #4]
   10f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f24:	1e5a      	subs	r2, r3, #1
   10f26:	490b      	ldr	r1, [pc, #44]	; (10f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   10f28:	9b01      	ldr	r3, [sp, #4]
   10f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   10f2e:	4a0a      	ldr	r2, [pc, #40]	; (10f58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   10f30:	9b01      	ldr	r3, [sp, #4]
   10f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f36:	f003 0301 	and.w	r3, r3, #1
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	d106      	bne.n	10f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   10f3e:	4a05      	ldr	r2, [pc, #20]	; (10f54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   10f40:	9b01      	ldr	r3, [sp, #4]
   10f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f46:	2b00      	cmp	r3, #0
   10f48:	d100      	bne.n	10f4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f4c:	bf00      	nop
   10f4e:	b003      	add	sp, #12
   10f50:	f85d fb04 	ldr.w	pc, [sp], #4
   10f54:	1fff9408 	.word	0x1fff9408
   10f58:	1fff9404 	.word	0x1fff9404

00010f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   10f5c:	b500      	push	{lr}
   10f5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f60:	f7ef fe5a 	bl	c18 <Sys_GetCoreID>
   10f64:	4603      	mov	r3, r0
   10f66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   10f68:	4a10      	ldr	r2, [pc, #64]	; (10fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   10f6a:	9b01      	ldr	r3, [sp, #4]
   10f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f70:	2b00      	cmp	r3, #0
   10f72:	d10d      	bne.n	10f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f74:	f7ef fd66 	bl	a44 <Adc_schm_read_msr>
   10f78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f7a:	9b00      	ldr	r3, [sp, #0]
   10f7c:	f003 0301 	and.w	r3, r3, #1
   10f80:	2b00      	cmp	r3, #0
   10f82:	d100      	bne.n	10f86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   10f86:	490a      	ldr	r1, [pc, #40]	; (10fb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   10f88:	9b01      	ldr	r3, [sp, #4]
   10f8a:	9a00      	ldr	r2, [sp, #0]
   10f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   10f90:	4a06      	ldr	r2, [pc, #24]	; (10fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   10f92:	9b01      	ldr	r3, [sp, #4]
   10f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f98:	1c5a      	adds	r2, r3, #1
   10f9a:	4904      	ldr	r1, [pc, #16]	; (10fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   10f9c:	9b01      	ldr	r3, [sp, #4]
   10f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10fa2:	bf00      	nop
   10fa4:	b003      	add	sp, #12
   10fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   10faa:	bf00      	nop
   10fac:	1fff9410 	.word	0x1fff9410
   10fb0:	1fff940c 	.word	0x1fff940c

00010fb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   10fb4:	b500      	push	{lr}
   10fb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fb8:	f7ef fe2e 	bl	c18 <Sys_GetCoreID>
   10fbc:	4603      	mov	r3, r0
   10fbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   10fc0:	4a0d      	ldr	r2, [pc, #52]	; (10ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   10fc2:	9b01      	ldr	r3, [sp, #4]
   10fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fc8:	1e5a      	subs	r2, r3, #1
   10fca:	490b      	ldr	r1, [pc, #44]	; (10ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   10fcc:	9b01      	ldr	r3, [sp, #4]
   10fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   10fd2:	4a0a      	ldr	r2, [pc, #40]	; (10ffc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   10fd4:	9b01      	ldr	r3, [sp, #4]
   10fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fda:	f003 0301 	and.w	r3, r3, #1
   10fde:	2b00      	cmp	r3, #0
   10fe0:	d106      	bne.n	10ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   10fe2:	4a05      	ldr	r2, [pc, #20]	; (10ff8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   10fe4:	9b01      	ldr	r3, [sp, #4]
   10fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fea:	2b00      	cmp	r3, #0
   10fec:	d100      	bne.n	10ff0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ff0:	bf00      	nop
   10ff2:	b003      	add	sp, #12
   10ff4:	f85d fb04 	ldr.w	pc, [sp], #4
   10ff8:	1fff9410 	.word	0x1fff9410
   10ffc:	1fff940c 	.word	0x1fff940c

00011000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   11000:	b500      	push	{lr}
   11002:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11004:	f7ef fe08 	bl	c18 <Sys_GetCoreID>
   11008:	4603      	mov	r3, r0
   1100a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   1100c:	4a10      	ldr	r2, [pc, #64]	; (11050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11014:	2b00      	cmp	r3, #0
   11016:	d10d      	bne.n	11034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11018:	f7ef fd14 	bl	a44 <Adc_schm_read_msr>
   1101c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1101e:	9b00      	ldr	r3, [sp, #0]
   11020:	f003 0301 	and.w	r3, r3, #1
   11024:	2b00      	cmp	r3, #0
   11026:	d100      	bne.n	1102a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11028:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   1102a:	490a      	ldr	r1, [pc, #40]	; (11054 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   1102c:	9b01      	ldr	r3, [sp, #4]
   1102e:	9a00      	ldr	r2, [sp, #0]
   11030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   11034:	4a06      	ldr	r2, [pc, #24]	; (11050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   11036:	9b01      	ldr	r3, [sp, #4]
   11038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1103c:	1c5a      	adds	r2, r3, #1
   1103e:	4904      	ldr	r1, [pc, #16]	; (11050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   11040:	9b01      	ldr	r3, [sp, #4]
   11042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11046:	bf00      	nop
   11048:	b003      	add	sp, #12
   1104a:	f85d fb04 	ldr.w	pc, [sp], #4
   1104e:	bf00      	nop
   11050:	1fff9418 	.word	0x1fff9418
   11054:	1fff9414 	.word	0x1fff9414

00011058 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   11058:	b500      	push	{lr}
   1105a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1105c:	f7ef fddc 	bl	c18 <Sys_GetCoreID>
   11060:	4603      	mov	r3, r0
   11062:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   11064:	4a0d      	ldr	r2, [pc, #52]	; (1109c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11066:	9b01      	ldr	r3, [sp, #4]
   11068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1106c:	1e5a      	subs	r2, r3, #1
   1106e:	490b      	ldr	r1, [pc, #44]	; (1109c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11070:	9b01      	ldr	r3, [sp, #4]
   11072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   11076:	4a0a      	ldr	r2, [pc, #40]	; (110a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   11078:	9b01      	ldr	r3, [sp, #4]
   1107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1107e:	f003 0301 	and.w	r3, r3, #1
   11082:	2b00      	cmp	r3, #0
   11084:	d106      	bne.n	11094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   11086:	4a05      	ldr	r2, [pc, #20]	; (1109c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   11088:	9b01      	ldr	r3, [sp, #4]
   1108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1108e:	2b00      	cmp	r3, #0
   11090:	d100      	bne.n	11094 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11092:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11094:	bf00      	nop
   11096:	b003      	add	sp, #12
   11098:	f85d fb04 	ldr.w	pc, [sp], #4
   1109c:	1fff9418 	.word	0x1fff9418
   110a0:	1fff9414 	.word	0x1fff9414

000110a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   110a4:	b500      	push	{lr}
   110a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110a8:	f7ef fdb6 	bl	c18 <Sys_GetCoreID>
   110ac:	4603      	mov	r3, r0
   110ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   110b0:	4a10      	ldr	r2, [pc, #64]	; (110f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   110b2:	9b01      	ldr	r3, [sp, #4]
   110b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b8:	2b00      	cmp	r3, #0
   110ba:	d10d      	bne.n	110d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   110bc:	f7ef fcc2 	bl	a44 <Adc_schm_read_msr>
   110c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   110c2:	9b00      	ldr	r3, [sp, #0]
   110c4:	f003 0301 	and.w	r3, r3, #1
   110c8:	2b00      	cmp	r3, #0
   110ca:	d100      	bne.n	110ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   110ce:	490a      	ldr	r1, [pc, #40]	; (110f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   110d0:	9b01      	ldr	r3, [sp, #4]
   110d2:	9a00      	ldr	r2, [sp, #0]
   110d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   110d8:	4a06      	ldr	r2, [pc, #24]	; (110f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   110da:	9b01      	ldr	r3, [sp, #4]
   110dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110e0:	1c5a      	adds	r2, r3, #1
   110e2:	4904      	ldr	r1, [pc, #16]	; (110f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   110e4:	9b01      	ldr	r3, [sp, #4]
   110e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110ea:	bf00      	nop
   110ec:	b003      	add	sp, #12
   110ee:	f85d fb04 	ldr.w	pc, [sp], #4
   110f2:	bf00      	nop
   110f4:	1fff9420 	.word	0x1fff9420
   110f8:	1fff941c 	.word	0x1fff941c

000110fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   110fc:	b500      	push	{lr}
   110fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11100:	f7ef fd8a 	bl	c18 <Sys_GetCoreID>
   11104:	4603      	mov	r3, r0
   11106:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   11108:	4a0d      	ldr	r2, [pc, #52]	; (11140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1110a:	9b01      	ldr	r3, [sp, #4]
   1110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11110:	1e5a      	subs	r2, r3, #1
   11112:	490b      	ldr	r1, [pc, #44]	; (11140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   11114:	9b01      	ldr	r3, [sp, #4]
   11116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1111a:	4a0a      	ldr	r2, [pc, #40]	; (11144 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   1111c:	9b01      	ldr	r3, [sp, #4]
   1111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11122:	f003 0301 	and.w	r3, r3, #1
   11126:	2b00      	cmp	r3, #0
   11128:	d106      	bne.n	11138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1112a:	4a05      	ldr	r2, [pc, #20]	; (11140 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1112c:	9b01      	ldr	r3, [sp, #4]
   1112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11132:	2b00      	cmp	r3, #0
   11134:	d100      	bne.n	11138 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11136:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11138:	bf00      	nop
   1113a:	b003      	add	sp, #12
   1113c:	f85d fb04 	ldr.w	pc, [sp], #4
   11140:	1fff9420 	.word	0x1fff9420
   11144:	1fff941c 	.word	0x1fff941c

00011148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   11148:	b500      	push	{lr}
   1114a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1114c:	f7ef fd64 	bl	c18 <Sys_GetCoreID>
   11150:	4603      	mov	r3, r0
   11152:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   11154:	4a10      	ldr	r2, [pc, #64]	; (11198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   11156:	9b01      	ldr	r3, [sp, #4]
   11158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1115c:	2b00      	cmp	r3, #0
   1115e:	d10d      	bne.n	1117c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11160:	f7ef fc70 	bl	a44 <Adc_schm_read_msr>
   11164:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11166:	9b00      	ldr	r3, [sp, #0]
   11168:	f003 0301 	and.w	r3, r3, #1
   1116c:	2b00      	cmp	r3, #0
   1116e:	d100      	bne.n	11172 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11170:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   11172:	490a      	ldr	r1, [pc, #40]	; (1119c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   11174:	9b01      	ldr	r3, [sp, #4]
   11176:	9a00      	ldr	r2, [sp, #0]
   11178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   1117c:	4a06      	ldr	r2, [pc, #24]	; (11198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1117e:	9b01      	ldr	r3, [sp, #4]
   11180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11184:	1c5a      	adds	r2, r3, #1
   11186:	4904      	ldr	r1, [pc, #16]	; (11198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   11188:	9b01      	ldr	r3, [sp, #4]
   1118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1118e:	bf00      	nop
   11190:	b003      	add	sp, #12
   11192:	f85d fb04 	ldr.w	pc, [sp], #4
   11196:	bf00      	nop
   11198:	1fff9428 	.word	0x1fff9428
   1119c:	1fff9424 	.word	0x1fff9424

000111a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   111a0:	b500      	push	{lr}
   111a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111a4:	f7ef fd38 	bl	c18 <Sys_GetCoreID>
   111a8:	4603      	mov	r3, r0
   111aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   111ac:	4a0d      	ldr	r2, [pc, #52]	; (111e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   111ae:	9b01      	ldr	r3, [sp, #4]
   111b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111b4:	1e5a      	subs	r2, r3, #1
   111b6:	490b      	ldr	r1, [pc, #44]	; (111e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   111b8:	9b01      	ldr	r3, [sp, #4]
   111ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   111be:	4a0a      	ldr	r2, [pc, #40]	; (111e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   111c0:	9b01      	ldr	r3, [sp, #4]
   111c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111c6:	f003 0301 	and.w	r3, r3, #1
   111ca:	2b00      	cmp	r3, #0
   111cc:	d106      	bne.n	111dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   111ce:	4a05      	ldr	r2, [pc, #20]	; (111e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   111d0:	9b01      	ldr	r3, [sp, #4]
   111d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d6:	2b00      	cmp	r3, #0
   111d8:	d100      	bne.n	111dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111dc:	bf00      	nop
   111de:	b003      	add	sp, #12
   111e0:	f85d fb04 	ldr.w	pc, [sp], #4
   111e4:	1fff9428 	.word	0x1fff9428
   111e8:	1fff9424 	.word	0x1fff9424

000111ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   111ec:	b500      	push	{lr}
   111ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111f0:	f7ef fd12 	bl	c18 <Sys_GetCoreID>
   111f4:	4603      	mov	r3, r0
   111f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   111f8:	4a10      	ldr	r2, [pc, #64]	; (1123c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   111fa:	9b01      	ldr	r3, [sp, #4]
   111fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11200:	2b00      	cmp	r3, #0
   11202:	d10d      	bne.n	11220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11204:	f7ef fc1e 	bl	a44 <Adc_schm_read_msr>
   11208:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1120a:	9b00      	ldr	r3, [sp, #0]
   1120c:	f003 0301 	and.w	r3, r3, #1
   11210:	2b00      	cmp	r3, #0
   11212:	d100      	bne.n	11216 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11214:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   11216:	490a      	ldr	r1, [pc, #40]	; (11240 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   11218:	9b01      	ldr	r3, [sp, #4]
   1121a:	9a00      	ldr	r2, [sp, #0]
   1121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   11220:	4a06      	ldr	r2, [pc, #24]	; (1123c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   11222:	9b01      	ldr	r3, [sp, #4]
   11224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11228:	1c5a      	adds	r2, r3, #1
   1122a:	4904      	ldr	r1, [pc, #16]	; (1123c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1122c:	9b01      	ldr	r3, [sp, #4]
   1122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11232:	bf00      	nop
   11234:	b003      	add	sp, #12
   11236:	f85d fb04 	ldr.w	pc, [sp], #4
   1123a:	bf00      	nop
   1123c:	1fff9430 	.word	0x1fff9430
   11240:	1fff942c 	.word	0x1fff942c

00011244 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   11244:	b500      	push	{lr}
   11246:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11248:	f7ef fce6 	bl	c18 <Sys_GetCoreID>
   1124c:	4603      	mov	r3, r0
   1124e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   11250:	4a0d      	ldr	r2, [pc, #52]	; (11288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   11252:	9b01      	ldr	r3, [sp, #4]
   11254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11258:	1e5a      	subs	r2, r3, #1
   1125a:	490b      	ldr	r1, [pc, #44]	; (11288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1125c:	9b01      	ldr	r3, [sp, #4]
   1125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   11262:	4a0a      	ldr	r2, [pc, #40]	; (1128c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   11264:	9b01      	ldr	r3, [sp, #4]
   11266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1126a:	f003 0301 	and.w	r3, r3, #1
   1126e:	2b00      	cmp	r3, #0
   11270:	d106      	bne.n	11280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   11272:	4a05      	ldr	r2, [pc, #20]	; (11288 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   11274:	9b01      	ldr	r3, [sp, #4]
   11276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1127a:	2b00      	cmp	r3, #0
   1127c:	d100      	bne.n	11280 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1127e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11280:	bf00      	nop
   11282:	b003      	add	sp, #12
   11284:	f85d fb04 	ldr.w	pc, [sp], #4
   11288:	1fff9430 	.word	0x1fff9430
   1128c:	1fff942c 	.word	0x1fff942c

00011290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   11290:	b500      	push	{lr}
   11292:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11294:	f7ef fcc0 	bl	c18 <Sys_GetCoreID>
   11298:	4603      	mov	r3, r0
   1129a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   1129c:	4a10      	ldr	r2, [pc, #64]	; (112e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1129e:	9b01      	ldr	r3, [sp, #4]
   112a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112a4:	2b00      	cmp	r3, #0
   112a6:	d10d      	bne.n	112c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   112a8:	f7ef fbcc 	bl	a44 <Adc_schm_read_msr>
   112ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   112ae:	9b00      	ldr	r3, [sp, #0]
   112b0:	f003 0301 	and.w	r3, r3, #1
   112b4:	2b00      	cmp	r3, #0
   112b6:	d100      	bne.n	112ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   112b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   112ba:	490a      	ldr	r1, [pc, #40]	; (112e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   112bc:	9b01      	ldr	r3, [sp, #4]
   112be:	9a00      	ldr	r2, [sp, #0]
   112c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   112c4:	4a06      	ldr	r2, [pc, #24]	; (112e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   112c6:	9b01      	ldr	r3, [sp, #4]
   112c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112cc:	1c5a      	adds	r2, r3, #1
   112ce:	4904      	ldr	r1, [pc, #16]	; (112e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   112d0:	9b01      	ldr	r3, [sp, #4]
   112d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112d6:	bf00      	nop
   112d8:	b003      	add	sp, #12
   112da:	f85d fb04 	ldr.w	pc, [sp], #4
   112de:	bf00      	nop
   112e0:	1fff9438 	.word	0x1fff9438
   112e4:	1fff9434 	.word	0x1fff9434

000112e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   112e8:	b500      	push	{lr}
   112ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112ec:	f7ef fc94 	bl	c18 <Sys_GetCoreID>
   112f0:	4603      	mov	r3, r0
   112f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   112f4:	4a0d      	ldr	r2, [pc, #52]	; (1132c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   112f6:	9b01      	ldr	r3, [sp, #4]
   112f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112fc:	1e5a      	subs	r2, r3, #1
   112fe:	490b      	ldr	r1, [pc, #44]	; (1132c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   11300:	9b01      	ldr	r3, [sp, #4]
   11302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   11306:	4a0a      	ldr	r2, [pc, #40]	; (11330 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   11308:	9b01      	ldr	r3, [sp, #4]
   1130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1130e:	f003 0301 	and.w	r3, r3, #1
   11312:	2b00      	cmp	r3, #0
   11314:	d106      	bne.n	11324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   11316:	4a05      	ldr	r2, [pc, #20]	; (1132c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   11318:	9b01      	ldr	r3, [sp, #4]
   1131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1131e:	2b00      	cmp	r3, #0
   11320:	d100      	bne.n	11324 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11322:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11324:	bf00      	nop
   11326:	b003      	add	sp, #12
   11328:	f85d fb04 	ldr.w	pc, [sp], #4
   1132c:	1fff9438 	.word	0x1fff9438
   11330:	1fff9434 	.word	0x1fff9434

00011334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   11334:	b500      	push	{lr}
   11336:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11338:	f7ef fc6e 	bl	c18 <Sys_GetCoreID>
   1133c:	4603      	mov	r3, r0
   1133e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   11340:	4a10      	ldr	r2, [pc, #64]	; (11384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   11342:	9b01      	ldr	r3, [sp, #4]
   11344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11348:	2b00      	cmp	r3, #0
   1134a:	d10d      	bne.n	11368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1134c:	f7ef fb7a 	bl	a44 <Adc_schm_read_msr>
   11350:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11352:	9b00      	ldr	r3, [sp, #0]
   11354:	f003 0301 	and.w	r3, r3, #1
   11358:	2b00      	cmp	r3, #0
   1135a:	d100      	bne.n	1135e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1135c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   1135e:	490a      	ldr	r1, [pc, #40]	; (11388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   11360:	9b01      	ldr	r3, [sp, #4]
   11362:	9a00      	ldr	r2, [sp, #0]
   11364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   11368:	4a06      	ldr	r2, [pc, #24]	; (11384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1136a:	9b01      	ldr	r3, [sp, #4]
   1136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11370:	1c5a      	adds	r2, r3, #1
   11372:	4904      	ldr	r1, [pc, #16]	; (11384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   11374:	9b01      	ldr	r3, [sp, #4]
   11376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1137a:	bf00      	nop
   1137c:	b003      	add	sp, #12
   1137e:	f85d fb04 	ldr.w	pc, [sp], #4
   11382:	bf00      	nop
   11384:	1fff9440 	.word	0x1fff9440
   11388:	1fff943c 	.word	0x1fff943c

0001138c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   1138c:	b500      	push	{lr}
   1138e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11390:	f7ef fc42 	bl	c18 <Sys_GetCoreID>
   11394:	4603      	mov	r3, r0
   11396:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   11398:	4a0d      	ldr	r2, [pc, #52]	; (113d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1139a:	9b01      	ldr	r3, [sp, #4]
   1139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113a0:	1e5a      	subs	r2, r3, #1
   113a2:	490b      	ldr	r1, [pc, #44]	; (113d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   113a4:	9b01      	ldr	r3, [sp, #4]
   113a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   113aa:	4a0a      	ldr	r2, [pc, #40]	; (113d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   113ac:	9b01      	ldr	r3, [sp, #4]
   113ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113b2:	f003 0301 	and.w	r3, r3, #1
   113b6:	2b00      	cmp	r3, #0
   113b8:	d106      	bne.n	113c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   113ba:	4a05      	ldr	r2, [pc, #20]	; (113d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   113bc:	9b01      	ldr	r3, [sp, #4]
   113be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113c2:	2b00      	cmp	r3, #0
   113c4:	d100      	bne.n	113c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   113c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113c8:	bf00      	nop
   113ca:	b003      	add	sp, #12
   113cc:	f85d fb04 	ldr.w	pc, [sp], #4
   113d0:	1fff9440 	.word	0x1fff9440
   113d4:	1fff943c 	.word	0x1fff943c

000113d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   113d8:	b500      	push	{lr}
   113da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113dc:	f7ef fc1c 	bl	c18 <Sys_GetCoreID>
   113e0:	4603      	mov	r3, r0
   113e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   113e4:	4a10      	ldr	r2, [pc, #64]	; (11428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   113e6:	9b01      	ldr	r3, [sp, #4]
   113e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113ec:	2b00      	cmp	r3, #0
   113ee:	d10d      	bne.n	1140c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   113f0:	f7ef fb28 	bl	a44 <Adc_schm_read_msr>
   113f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   113f6:	9b00      	ldr	r3, [sp, #0]
   113f8:	f003 0301 	and.w	r3, r3, #1
   113fc:	2b00      	cmp	r3, #0
   113fe:	d100      	bne.n	11402 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11400:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   11402:	490a      	ldr	r1, [pc, #40]	; (1142c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   11404:	9b01      	ldr	r3, [sp, #4]
   11406:	9a00      	ldr	r2, [sp, #0]
   11408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   1140c:	4a06      	ldr	r2, [pc, #24]	; (11428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1140e:	9b01      	ldr	r3, [sp, #4]
   11410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11414:	1c5a      	adds	r2, r3, #1
   11416:	4904      	ldr	r1, [pc, #16]	; (11428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   11418:	9b01      	ldr	r3, [sp, #4]
   1141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1141e:	bf00      	nop
   11420:	b003      	add	sp, #12
   11422:	f85d fb04 	ldr.w	pc, [sp], #4
   11426:	bf00      	nop
   11428:	1fff9448 	.word	0x1fff9448
   1142c:	1fff9444 	.word	0x1fff9444

00011430 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   11430:	b500      	push	{lr}
   11432:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11434:	f7ef fbf0 	bl	c18 <Sys_GetCoreID>
   11438:	4603      	mov	r3, r0
   1143a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   1143c:	4a0d      	ldr	r2, [pc, #52]	; (11474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1143e:	9b01      	ldr	r3, [sp, #4]
   11440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11444:	1e5a      	subs	r2, r3, #1
   11446:	490b      	ldr	r1, [pc, #44]	; (11474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   11448:	9b01      	ldr	r3, [sp, #4]
   1144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   1144e:	4a0a      	ldr	r2, [pc, #40]	; (11478 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   11450:	9b01      	ldr	r3, [sp, #4]
   11452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11456:	f003 0301 	and.w	r3, r3, #1
   1145a:	2b00      	cmp	r3, #0
   1145c:	d106      	bne.n	1146c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   1145e:	4a05      	ldr	r2, [pc, #20]	; (11474 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   11460:	9b01      	ldr	r3, [sp, #4]
   11462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11466:	2b00      	cmp	r3, #0
   11468:	d100      	bne.n	1146c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1146a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1146c:	bf00      	nop
   1146e:	b003      	add	sp, #12
   11470:	f85d fb04 	ldr.w	pc, [sp], #4
   11474:	1fff9448 	.word	0x1fff9448
   11478:	1fff9444 	.word	0x1fff9444

0001147c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   1147c:	b500      	push	{lr}
   1147e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11480:	f7ef fbca 	bl	c18 <Sys_GetCoreID>
   11484:	4603      	mov	r3, r0
   11486:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   11488:	4a10      	ldr	r2, [pc, #64]	; (114cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   1148a:	9b01      	ldr	r3, [sp, #4]
   1148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11490:	2b00      	cmp	r3, #0
   11492:	d10d      	bne.n	114b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11494:	f7ef fad6 	bl	a44 <Adc_schm_read_msr>
   11498:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1149a:	9b00      	ldr	r3, [sp, #0]
   1149c:	f003 0301 	and.w	r3, r3, #1
   114a0:	2b00      	cmp	r3, #0
   114a2:	d100      	bne.n	114a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   114a6:	490a      	ldr	r1, [pc, #40]	; (114d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   114a8:	9b01      	ldr	r3, [sp, #4]
   114aa:	9a00      	ldr	r2, [sp, #0]
   114ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   114b0:	4a06      	ldr	r2, [pc, #24]	; (114cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   114b2:	9b01      	ldr	r3, [sp, #4]
   114b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114b8:	1c5a      	adds	r2, r3, #1
   114ba:	4904      	ldr	r1, [pc, #16]	; (114cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   114bc:	9b01      	ldr	r3, [sp, #4]
   114be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   114c2:	bf00      	nop
   114c4:	b003      	add	sp, #12
   114c6:	f85d fb04 	ldr.w	pc, [sp], #4
   114ca:	bf00      	nop
   114cc:	1fff9450 	.word	0x1fff9450
   114d0:	1fff944c 	.word	0x1fff944c

000114d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   114d4:	b500      	push	{lr}
   114d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114d8:	f7ef fb9e 	bl	c18 <Sys_GetCoreID>
   114dc:	4603      	mov	r3, r0
   114de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   114e0:	4a0d      	ldr	r2, [pc, #52]	; (11518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   114e2:	9b01      	ldr	r3, [sp, #4]
   114e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114e8:	1e5a      	subs	r2, r3, #1
   114ea:	490b      	ldr	r1, [pc, #44]	; (11518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   114ec:	9b01      	ldr	r3, [sp, #4]
   114ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   114f2:	4a0a      	ldr	r2, [pc, #40]	; (1151c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   114f4:	9b01      	ldr	r3, [sp, #4]
   114f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114fa:	f003 0301 	and.w	r3, r3, #1
   114fe:	2b00      	cmp	r3, #0
   11500:	d106      	bne.n	11510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   11502:	4a05      	ldr	r2, [pc, #20]	; (11518 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   11504:	9b01      	ldr	r3, [sp, #4]
   11506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1150a:	2b00      	cmp	r3, #0
   1150c:	d100      	bne.n	11510 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1150e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11510:	bf00      	nop
   11512:	b003      	add	sp, #12
   11514:	f85d fb04 	ldr.w	pc, [sp], #4
   11518:	1fff9450 	.word	0x1fff9450
   1151c:	1fff944c 	.word	0x1fff944c

00011520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   11520:	b500      	push	{lr}
   11522:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11524:	f7ef fb78 	bl	c18 <Sys_GetCoreID>
   11528:	4603      	mov	r3, r0
   1152a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   1152c:	4a10      	ldr	r2, [pc, #64]	; (11570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1152e:	9b01      	ldr	r3, [sp, #4]
   11530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11534:	2b00      	cmp	r3, #0
   11536:	d10d      	bne.n	11554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11538:	f7ef fa84 	bl	a44 <Adc_schm_read_msr>
   1153c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1153e:	9b00      	ldr	r3, [sp, #0]
   11540:	f003 0301 	and.w	r3, r3, #1
   11544:	2b00      	cmp	r3, #0
   11546:	d100      	bne.n	1154a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11548:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   1154a:	490a      	ldr	r1, [pc, #40]	; (11574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   1154c:	9b01      	ldr	r3, [sp, #4]
   1154e:	9a00      	ldr	r2, [sp, #0]
   11550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   11554:	4a06      	ldr	r2, [pc, #24]	; (11570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   11556:	9b01      	ldr	r3, [sp, #4]
   11558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1155c:	1c5a      	adds	r2, r3, #1
   1155e:	4904      	ldr	r1, [pc, #16]	; (11570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   11560:	9b01      	ldr	r3, [sp, #4]
   11562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11566:	bf00      	nop
   11568:	b003      	add	sp, #12
   1156a:	f85d fb04 	ldr.w	pc, [sp], #4
   1156e:	bf00      	nop
   11570:	1fff9458 	.word	0x1fff9458
   11574:	1fff9454 	.word	0x1fff9454

00011578 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   11578:	b500      	push	{lr}
   1157a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1157c:	f7ef fb4c 	bl	c18 <Sys_GetCoreID>
   11580:	4603      	mov	r3, r0
   11582:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   11584:	4a0d      	ldr	r2, [pc, #52]	; (115bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   11586:	9b01      	ldr	r3, [sp, #4]
   11588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1158c:	1e5a      	subs	r2, r3, #1
   1158e:	490b      	ldr	r1, [pc, #44]	; (115bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   11590:	9b01      	ldr	r3, [sp, #4]
   11592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   11596:	4a0a      	ldr	r2, [pc, #40]	; (115c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   11598:	9b01      	ldr	r3, [sp, #4]
   1159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1159e:	f003 0301 	and.w	r3, r3, #1
   115a2:	2b00      	cmp	r3, #0
   115a4:	d106      	bne.n	115b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   115a6:	4a05      	ldr	r2, [pc, #20]	; (115bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   115a8:	9b01      	ldr	r3, [sp, #4]
   115aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115ae:	2b00      	cmp	r3, #0
   115b0:	d100      	bne.n	115b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115b4:	bf00      	nop
   115b6:	b003      	add	sp, #12
   115b8:	f85d fb04 	ldr.w	pc, [sp], #4
   115bc:	1fff9458 	.word	0x1fff9458
   115c0:	1fff9454 	.word	0x1fff9454

000115c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   115c4:	b500      	push	{lr}
   115c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115c8:	f7ef fb26 	bl	c18 <Sys_GetCoreID>
   115cc:	4603      	mov	r3, r0
   115ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   115d0:	4a10      	ldr	r2, [pc, #64]	; (11614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   115d2:	9b01      	ldr	r3, [sp, #4]
   115d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d8:	2b00      	cmp	r3, #0
   115da:	d10d      	bne.n	115f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115dc:	f7ef fa32 	bl	a44 <Adc_schm_read_msr>
   115e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115e2:	9b00      	ldr	r3, [sp, #0]
   115e4:	f003 0301 	and.w	r3, r3, #1
   115e8:	2b00      	cmp	r3, #0
   115ea:	d100      	bne.n	115ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   115ee:	490a      	ldr	r1, [pc, #40]	; (11618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   115f0:	9b01      	ldr	r3, [sp, #4]
   115f2:	9a00      	ldr	r2, [sp, #0]
   115f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   115f8:	4a06      	ldr	r2, [pc, #24]	; (11614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   115fa:	9b01      	ldr	r3, [sp, #4]
   115fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11600:	1c5a      	adds	r2, r3, #1
   11602:	4904      	ldr	r1, [pc, #16]	; (11614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   11604:	9b01      	ldr	r3, [sp, #4]
   11606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1160a:	bf00      	nop
   1160c:	b003      	add	sp, #12
   1160e:	f85d fb04 	ldr.w	pc, [sp], #4
   11612:	bf00      	nop
   11614:	1fff9460 	.word	0x1fff9460
   11618:	1fff945c 	.word	0x1fff945c

0001161c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   1161c:	b500      	push	{lr}
   1161e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11620:	f7ef fafa 	bl	c18 <Sys_GetCoreID>
   11624:	4603      	mov	r3, r0
   11626:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   11628:	4a0d      	ldr	r2, [pc, #52]	; (11660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1162a:	9b01      	ldr	r3, [sp, #4]
   1162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11630:	1e5a      	subs	r2, r3, #1
   11632:	490b      	ldr	r1, [pc, #44]	; (11660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   11634:	9b01      	ldr	r3, [sp, #4]
   11636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   1163a:	4a0a      	ldr	r2, [pc, #40]	; (11664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   1163c:	9b01      	ldr	r3, [sp, #4]
   1163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11642:	f003 0301 	and.w	r3, r3, #1
   11646:	2b00      	cmp	r3, #0
   11648:	d106      	bne.n	11658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   1164a:	4a05      	ldr	r2, [pc, #20]	; (11660 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1164c:	9b01      	ldr	r3, [sp, #4]
   1164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11652:	2b00      	cmp	r3, #0
   11654:	d100      	bne.n	11658 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11656:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11658:	bf00      	nop
   1165a:	b003      	add	sp, #12
   1165c:	f85d fb04 	ldr.w	pc, [sp], #4
   11660:	1fff9460 	.word	0x1fff9460
   11664:	1fff945c 	.word	0x1fff945c

00011668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   11668:	b500      	push	{lr}
   1166a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1166c:	f7ef fad4 	bl	c18 <Sys_GetCoreID>
   11670:	4603      	mov	r3, r0
   11672:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   11674:	4a10      	ldr	r2, [pc, #64]	; (116b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   11676:	9b01      	ldr	r3, [sp, #4]
   11678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1167c:	2b00      	cmp	r3, #0
   1167e:	d10d      	bne.n	1169c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11680:	f7ef f9e0 	bl	a44 <Adc_schm_read_msr>
   11684:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11686:	9b00      	ldr	r3, [sp, #0]
   11688:	f003 0301 	and.w	r3, r3, #1
   1168c:	2b00      	cmp	r3, #0
   1168e:	d100      	bne.n	11692 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11690:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   11692:	490a      	ldr	r1, [pc, #40]	; (116bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   11694:	9b01      	ldr	r3, [sp, #4]
   11696:	9a00      	ldr	r2, [sp, #0]
   11698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   1169c:	4a06      	ldr	r2, [pc, #24]	; (116b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   1169e:	9b01      	ldr	r3, [sp, #4]
   116a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116a4:	1c5a      	adds	r2, r3, #1
   116a6:	4904      	ldr	r1, [pc, #16]	; (116b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   116a8:	9b01      	ldr	r3, [sp, #4]
   116aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116ae:	bf00      	nop
   116b0:	b003      	add	sp, #12
   116b2:	f85d fb04 	ldr.w	pc, [sp], #4
   116b6:	bf00      	nop
   116b8:	1fff9468 	.word	0x1fff9468
   116bc:	1fff9464 	.word	0x1fff9464

000116c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   116c0:	b500      	push	{lr}
   116c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116c4:	f7ef faa8 	bl	c18 <Sys_GetCoreID>
   116c8:	4603      	mov	r3, r0
   116ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   116cc:	4a0d      	ldr	r2, [pc, #52]	; (11704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   116ce:	9b01      	ldr	r3, [sp, #4]
   116d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116d4:	1e5a      	subs	r2, r3, #1
   116d6:	490b      	ldr	r1, [pc, #44]	; (11704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   116d8:	9b01      	ldr	r3, [sp, #4]
   116da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   116de:	4a0a      	ldr	r2, [pc, #40]	; (11708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   116e0:	9b01      	ldr	r3, [sp, #4]
   116e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116e6:	f003 0301 	and.w	r3, r3, #1
   116ea:	2b00      	cmp	r3, #0
   116ec:	d106      	bne.n	116fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   116ee:	4a05      	ldr	r2, [pc, #20]	; (11704 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f6:	2b00      	cmp	r3, #0
   116f8:	d100      	bne.n	116fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116fc:	bf00      	nop
   116fe:	b003      	add	sp, #12
   11700:	f85d fb04 	ldr.w	pc, [sp], #4
   11704:	1fff9468 	.word	0x1fff9468
   11708:	1fff9464 	.word	0x1fff9464

0001170c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   1170c:	b500      	push	{lr}
   1170e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11710:	f7ef fa82 	bl	c18 <Sys_GetCoreID>
   11714:	4603      	mov	r3, r0
   11716:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   11718:	4a10      	ldr	r2, [pc, #64]	; (1175c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1171a:	9b01      	ldr	r3, [sp, #4]
   1171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11720:	2b00      	cmp	r3, #0
   11722:	d10d      	bne.n	11740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11724:	f7ef f98e 	bl	a44 <Adc_schm_read_msr>
   11728:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1172a:	9b00      	ldr	r3, [sp, #0]
   1172c:	f003 0301 	and.w	r3, r3, #1
   11730:	2b00      	cmp	r3, #0
   11732:	d100      	bne.n	11736 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11734:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   11736:	490a      	ldr	r1, [pc, #40]	; (11760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   11738:	9b01      	ldr	r3, [sp, #4]
   1173a:	9a00      	ldr	r2, [sp, #0]
   1173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   11740:	4a06      	ldr	r2, [pc, #24]	; (1175c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   11742:	9b01      	ldr	r3, [sp, #4]
   11744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11748:	1c5a      	adds	r2, r3, #1
   1174a:	4904      	ldr	r1, [pc, #16]	; (1175c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1174c:	9b01      	ldr	r3, [sp, #4]
   1174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11752:	bf00      	nop
   11754:	b003      	add	sp, #12
   11756:	f85d fb04 	ldr.w	pc, [sp], #4
   1175a:	bf00      	nop
   1175c:	1fff9470 	.word	0x1fff9470
   11760:	1fff946c 	.word	0x1fff946c

00011764 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   11764:	b500      	push	{lr}
   11766:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11768:	f7ef fa56 	bl	c18 <Sys_GetCoreID>
   1176c:	4603      	mov	r3, r0
   1176e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   11770:	4a0d      	ldr	r2, [pc, #52]	; (117a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   11772:	9b01      	ldr	r3, [sp, #4]
   11774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11778:	1e5a      	subs	r2, r3, #1
   1177a:	490b      	ldr	r1, [pc, #44]	; (117a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   1177c:	9b01      	ldr	r3, [sp, #4]
   1177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   11782:	4a0a      	ldr	r2, [pc, #40]	; (117ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   11784:	9b01      	ldr	r3, [sp, #4]
   11786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1178a:	f003 0301 	and.w	r3, r3, #1
   1178e:	2b00      	cmp	r3, #0
   11790:	d106      	bne.n	117a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   11792:	4a05      	ldr	r2, [pc, #20]	; (117a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   11794:	9b01      	ldr	r3, [sp, #4]
   11796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1179a:	2b00      	cmp	r3, #0
   1179c:	d100      	bne.n	117a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1179e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117a0:	bf00      	nop
   117a2:	b003      	add	sp, #12
   117a4:	f85d fb04 	ldr.w	pc, [sp], #4
   117a8:	1fff9470 	.word	0x1fff9470
   117ac:	1fff946c 	.word	0x1fff946c

000117b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   117b0:	b500      	push	{lr}
   117b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117b4:	f7ef fa30 	bl	c18 <Sys_GetCoreID>
   117b8:	4603      	mov	r3, r0
   117ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   117bc:	4a10      	ldr	r2, [pc, #64]	; (11800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   117be:	9b01      	ldr	r3, [sp, #4]
   117c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c4:	2b00      	cmp	r3, #0
   117c6:	d10d      	bne.n	117e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117c8:	f7ef f93c 	bl	a44 <Adc_schm_read_msr>
   117cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117ce:	9b00      	ldr	r3, [sp, #0]
   117d0:	f003 0301 	and.w	r3, r3, #1
   117d4:	2b00      	cmp	r3, #0
   117d6:	d100      	bne.n	117da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   117da:	490a      	ldr	r1, [pc, #40]	; (11804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   117dc:	9b01      	ldr	r3, [sp, #4]
   117de:	9a00      	ldr	r2, [sp, #0]
   117e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   117e4:	4a06      	ldr	r2, [pc, #24]	; (11800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   117e6:	9b01      	ldr	r3, [sp, #4]
   117e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117ec:	1c5a      	adds	r2, r3, #1
   117ee:	4904      	ldr	r1, [pc, #16]	; (11800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   117f0:	9b01      	ldr	r3, [sp, #4]
   117f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117f6:	bf00      	nop
   117f8:	b003      	add	sp, #12
   117fa:	f85d fb04 	ldr.w	pc, [sp], #4
   117fe:	bf00      	nop
   11800:	1fff9478 	.word	0x1fff9478
   11804:	1fff9474 	.word	0x1fff9474

00011808 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   11808:	b500      	push	{lr}
   1180a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1180c:	f7ef fa04 	bl	c18 <Sys_GetCoreID>
   11810:	4603      	mov	r3, r0
   11812:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   11814:	4a0d      	ldr	r2, [pc, #52]	; (1184c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   11816:	9b01      	ldr	r3, [sp, #4]
   11818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1181c:	1e5a      	subs	r2, r3, #1
   1181e:	490b      	ldr	r1, [pc, #44]	; (1184c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   11820:	9b01      	ldr	r3, [sp, #4]
   11822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   11826:	4a0a      	ldr	r2, [pc, #40]	; (11850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   11828:	9b01      	ldr	r3, [sp, #4]
   1182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1182e:	f003 0301 	and.w	r3, r3, #1
   11832:	2b00      	cmp	r3, #0
   11834:	d106      	bne.n	11844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   11836:	4a05      	ldr	r2, [pc, #20]	; (1184c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   11838:	9b01      	ldr	r3, [sp, #4]
   1183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1183e:	2b00      	cmp	r3, #0
   11840:	d100      	bne.n	11844 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11842:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11844:	bf00      	nop
   11846:	b003      	add	sp, #12
   11848:	f85d fb04 	ldr.w	pc, [sp], #4
   1184c:	1fff9478 	.word	0x1fff9478
   11850:	1fff9474 	.word	0x1fff9474

00011854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   11854:	b500      	push	{lr}
   11856:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11858:	f7ef f9de 	bl	c18 <Sys_GetCoreID>
   1185c:	4603      	mov	r3, r0
   1185e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   11860:	4a10      	ldr	r2, [pc, #64]	; (118a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   11862:	9b01      	ldr	r3, [sp, #4]
   11864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11868:	2b00      	cmp	r3, #0
   1186a:	d10d      	bne.n	11888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1186c:	f7ef f8ea 	bl	a44 <Adc_schm_read_msr>
   11870:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11872:	9b00      	ldr	r3, [sp, #0]
   11874:	f003 0301 	and.w	r3, r3, #1
   11878:	2b00      	cmp	r3, #0
   1187a:	d100      	bne.n	1187e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1187c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   1187e:	490a      	ldr	r1, [pc, #40]	; (118a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   11880:	9b01      	ldr	r3, [sp, #4]
   11882:	9a00      	ldr	r2, [sp, #0]
   11884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   11888:	4a06      	ldr	r2, [pc, #24]	; (118a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1188a:	9b01      	ldr	r3, [sp, #4]
   1188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11890:	1c5a      	adds	r2, r3, #1
   11892:	4904      	ldr	r1, [pc, #16]	; (118a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   11894:	9b01      	ldr	r3, [sp, #4]
   11896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1189a:	bf00      	nop
   1189c:	b003      	add	sp, #12
   1189e:	f85d fb04 	ldr.w	pc, [sp], #4
   118a2:	bf00      	nop
   118a4:	1fff9480 	.word	0x1fff9480
   118a8:	1fff947c 	.word	0x1fff947c

000118ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   118ac:	b500      	push	{lr}
   118ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118b0:	f7ef f9b2 	bl	c18 <Sys_GetCoreID>
   118b4:	4603      	mov	r3, r0
   118b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   118b8:	4a0d      	ldr	r2, [pc, #52]	; (118f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   118ba:	9b01      	ldr	r3, [sp, #4]
   118bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118c0:	1e5a      	subs	r2, r3, #1
   118c2:	490b      	ldr	r1, [pc, #44]	; (118f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   118c4:	9b01      	ldr	r3, [sp, #4]
   118c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   118ca:	4a0a      	ldr	r2, [pc, #40]	; (118f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   118cc:	9b01      	ldr	r3, [sp, #4]
   118ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118d2:	f003 0301 	and.w	r3, r3, #1
   118d6:	2b00      	cmp	r3, #0
   118d8:	d106      	bne.n	118e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   118da:	4a05      	ldr	r2, [pc, #20]	; (118f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   118dc:	9b01      	ldr	r3, [sp, #4]
   118de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118e2:	2b00      	cmp	r3, #0
   118e4:	d100      	bne.n	118e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118e8:	bf00      	nop
   118ea:	b003      	add	sp, #12
   118ec:	f85d fb04 	ldr.w	pc, [sp], #4
   118f0:	1fff9480 	.word	0x1fff9480
   118f4:	1fff947c 	.word	0x1fff947c

000118f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   118f8:	b500      	push	{lr}
   118fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118fc:	f7ef f98c 	bl	c18 <Sys_GetCoreID>
   11900:	4603      	mov	r3, r0
   11902:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   11904:	4a10      	ldr	r2, [pc, #64]	; (11948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   11906:	9b01      	ldr	r3, [sp, #4]
   11908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1190c:	2b00      	cmp	r3, #0
   1190e:	d10d      	bne.n	1192c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11910:	f7ef f898 	bl	a44 <Adc_schm_read_msr>
   11914:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11916:	9b00      	ldr	r3, [sp, #0]
   11918:	f003 0301 	and.w	r3, r3, #1
   1191c:	2b00      	cmp	r3, #0
   1191e:	d100      	bne.n	11922 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11920:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   11922:	490a      	ldr	r1, [pc, #40]	; (1194c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   11924:	9b01      	ldr	r3, [sp, #4]
   11926:	9a00      	ldr	r2, [sp, #0]
   11928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   1192c:	4a06      	ldr	r2, [pc, #24]	; (11948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1192e:	9b01      	ldr	r3, [sp, #4]
   11930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11934:	1c5a      	adds	r2, r3, #1
   11936:	4904      	ldr	r1, [pc, #16]	; (11948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   11938:	9b01      	ldr	r3, [sp, #4]
   1193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1193e:	bf00      	nop
   11940:	b003      	add	sp, #12
   11942:	f85d fb04 	ldr.w	pc, [sp], #4
   11946:	bf00      	nop
   11948:	1fff9488 	.word	0x1fff9488
   1194c:	1fff9484 	.word	0x1fff9484

00011950 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   11950:	b500      	push	{lr}
   11952:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11954:	f7ef f960 	bl	c18 <Sys_GetCoreID>
   11958:	4603      	mov	r3, r0
   1195a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   1195c:	4a0d      	ldr	r2, [pc, #52]	; (11994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1195e:	9b01      	ldr	r3, [sp, #4]
   11960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11964:	1e5a      	subs	r2, r3, #1
   11966:	490b      	ldr	r1, [pc, #44]	; (11994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   11968:	9b01      	ldr	r3, [sp, #4]
   1196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   1196e:	4a0a      	ldr	r2, [pc, #40]	; (11998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   11970:	9b01      	ldr	r3, [sp, #4]
   11972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11976:	f003 0301 	and.w	r3, r3, #1
   1197a:	2b00      	cmp	r3, #0
   1197c:	d106      	bne.n	1198c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   1197e:	4a05      	ldr	r2, [pc, #20]	; (11994 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   11980:	9b01      	ldr	r3, [sp, #4]
   11982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11986:	2b00      	cmp	r3, #0
   11988:	d100      	bne.n	1198c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1198a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1198c:	bf00      	nop
   1198e:	b003      	add	sp, #12
   11990:	f85d fb04 	ldr.w	pc, [sp], #4
   11994:	1fff9488 	.word	0x1fff9488
   11998:	1fff9484 	.word	0x1fff9484

0001199c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   1199c:	b500      	push	{lr}
   1199e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119a0:	f7ef f93a 	bl	c18 <Sys_GetCoreID>
   119a4:	4603      	mov	r3, r0
   119a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   119a8:	4a10      	ldr	r2, [pc, #64]	; (119ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   119aa:	9b01      	ldr	r3, [sp, #4]
   119ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b0:	2b00      	cmp	r3, #0
   119b2:	d10d      	bne.n	119d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119b4:	f7ef f846 	bl	a44 <Adc_schm_read_msr>
   119b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119ba:	9b00      	ldr	r3, [sp, #0]
   119bc:	f003 0301 	and.w	r3, r3, #1
   119c0:	2b00      	cmp	r3, #0
   119c2:	d100      	bne.n	119c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   119c6:	490a      	ldr	r1, [pc, #40]	; (119f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   119c8:	9b01      	ldr	r3, [sp, #4]
   119ca:	9a00      	ldr	r2, [sp, #0]
   119cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   119d0:	4a06      	ldr	r2, [pc, #24]	; (119ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   119d2:	9b01      	ldr	r3, [sp, #4]
   119d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119d8:	1c5a      	adds	r2, r3, #1
   119da:	4904      	ldr	r1, [pc, #16]	; (119ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   119dc:	9b01      	ldr	r3, [sp, #4]
   119de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119e2:	bf00      	nop
   119e4:	b003      	add	sp, #12
   119e6:	f85d fb04 	ldr.w	pc, [sp], #4
   119ea:	bf00      	nop
   119ec:	1fff9490 	.word	0x1fff9490
   119f0:	1fff948c 	.word	0x1fff948c

000119f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   119f4:	b500      	push	{lr}
   119f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119f8:	f7ef f90e 	bl	c18 <Sys_GetCoreID>
   119fc:	4603      	mov	r3, r0
   119fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   11a00:	4a0d      	ldr	r2, [pc, #52]	; (11a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   11a02:	9b01      	ldr	r3, [sp, #4]
   11a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a08:	1e5a      	subs	r2, r3, #1
   11a0a:	490b      	ldr	r1, [pc, #44]	; (11a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   11a0c:	9b01      	ldr	r3, [sp, #4]
   11a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   11a12:	4a0a      	ldr	r2, [pc, #40]	; (11a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   11a14:	9b01      	ldr	r3, [sp, #4]
   11a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a1a:	f003 0301 	and.w	r3, r3, #1
   11a1e:	2b00      	cmp	r3, #0
   11a20:	d106      	bne.n	11a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   11a22:	4a05      	ldr	r2, [pc, #20]	; (11a38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   11a24:	9b01      	ldr	r3, [sp, #4]
   11a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a2a:	2b00      	cmp	r3, #0
   11a2c:	d100      	bne.n	11a30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a30:	bf00      	nop
   11a32:	b003      	add	sp, #12
   11a34:	f85d fb04 	ldr.w	pc, [sp], #4
   11a38:	1fff9490 	.word	0x1fff9490
   11a3c:	1fff948c 	.word	0x1fff948c

00011a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   11a40:	b500      	push	{lr}
   11a42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a44:	f7ef f8e8 	bl	c18 <Sys_GetCoreID>
   11a48:	4603      	mov	r3, r0
   11a4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   11a4c:	4a10      	ldr	r2, [pc, #64]	; (11a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   11a4e:	9b01      	ldr	r3, [sp, #4]
   11a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a54:	2b00      	cmp	r3, #0
   11a56:	d10d      	bne.n	11a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a58:	f7ee fff4 	bl	a44 <Adc_schm_read_msr>
   11a5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a5e:	9b00      	ldr	r3, [sp, #0]
   11a60:	f003 0301 	and.w	r3, r3, #1
   11a64:	2b00      	cmp	r3, #0
   11a66:	d100      	bne.n	11a6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   11a6a:	490a      	ldr	r1, [pc, #40]	; (11a94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   11a6c:	9b01      	ldr	r3, [sp, #4]
   11a6e:	9a00      	ldr	r2, [sp, #0]
   11a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   11a74:	4a06      	ldr	r2, [pc, #24]	; (11a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   11a76:	9b01      	ldr	r3, [sp, #4]
   11a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a7c:	1c5a      	adds	r2, r3, #1
   11a7e:	4904      	ldr	r1, [pc, #16]	; (11a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   11a80:	9b01      	ldr	r3, [sp, #4]
   11a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a86:	bf00      	nop
   11a88:	b003      	add	sp, #12
   11a8a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a8e:	bf00      	nop
   11a90:	1fff9498 	.word	0x1fff9498
   11a94:	1fff9494 	.word	0x1fff9494

00011a98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   11a98:	b500      	push	{lr}
   11a9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a9c:	f7ef f8bc 	bl	c18 <Sys_GetCoreID>
   11aa0:	4603      	mov	r3, r0
   11aa2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   11aa4:	4a0d      	ldr	r2, [pc, #52]	; (11adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   11aa6:	9b01      	ldr	r3, [sp, #4]
   11aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aac:	1e5a      	subs	r2, r3, #1
   11aae:	490b      	ldr	r1, [pc, #44]	; (11adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   11ab6:	4a0a      	ldr	r2, [pc, #40]	; (11ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   11ab8:	9b01      	ldr	r3, [sp, #4]
   11aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11abe:	f003 0301 	and.w	r3, r3, #1
   11ac2:	2b00      	cmp	r3, #0
   11ac4:	d106      	bne.n	11ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   11ac6:	4a05      	ldr	r2, [pc, #20]	; (11adc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   11ac8:	9b01      	ldr	r3, [sp, #4]
   11aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ace:	2b00      	cmp	r3, #0
   11ad0:	d100      	bne.n	11ad4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ad2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ad4:	bf00      	nop
   11ad6:	b003      	add	sp, #12
   11ad8:	f85d fb04 	ldr.w	pc, [sp], #4
   11adc:	1fff9498 	.word	0x1fff9498
   11ae0:	1fff9494 	.word	0x1fff9494

00011ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   11ae4:	b500      	push	{lr}
   11ae6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ae8:	f7ef f896 	bl	c18 <Sys_GetCoreID>
   11aec:	4603      	mov	r3, r0
   11aee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   11af0:	4a10      	ldr	r2, [pc, #64]	; (11b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   11af2:	9b01      	ldr	r3, [sp, #4]
   11af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af8:	2b00      	cmp	r3, #0
   11afa:	d10d      	bne.n	11b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11afc:	f7ee ffa2 	bl	a44 <Adc_schm_read_msr>
   11b00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b02:	9b00      	ldr	r3, [sp, #0]
   11b04:	f003 0301 	and.w	r3, r3, #1
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d100      	bne.n	11b0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   11b0e:	490a      	ldr	r1, [pc, #40]	; (11b38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   11b10:	9b01      	ldr	r3, [sp, #4]
   11b12:	9a00      	ldr	r2, [sp, #0]
   11b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   11b18:	4a06      	ldr	r2, [pc, #24]	; (11b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   11b1a:	9b01      	ldr	r3, [sp, #4]
   11b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b20:	1c5a      	adds	r2, r3, #1
   11b22:	4904      	ldr	r1, [pc, #16]	; (11b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   11b24:	9b01      	ldr	r3, [sp, #4]
   11b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b2a:	bf00      	nop
   11b2c:	b003      	add	sp, #12
   11b2e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b32:	bf00      	nop
   11b34:	1fff94a0 	.word	0x1fff94a0
   11b38:	1fff949c 	.word	0x1fff949c

00011b3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   11b3c:	b500      	push	{lr}
   11b3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b40:	f7ef f86a 	bl	c18 <Sys_GetCoreID>
   11b44:	4603      	mov	r3, r0
   11b46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   11b48:	4a0d      	ldr	r2, [pc, #52]	; (11b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   11b4a:	9b01      	ldr	r3, [sp, #4]
   11b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b50:	1e5a      	subs	r2, r3, #1
   11b52:	490b      	ldr	r1, [pc, #44]	; (11b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   11b54:	9b01      	ldr	r3, [sp, #4]
   11b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   11b5a:	4a0a      	ldr	r2, [pc, #40]	; (11b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   11b5c:	9b01      	ldr	r3, [sp, #4]
   11b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b62:	f003 0301 	and.w	r3, r3, #1
   11b66:	2b00      	cmp	r3, #0
   11b68:	d106      	bne.n	11b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   11b6a:	4a05      	ldr	r2, [pc, #20]	; (11b80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   11b6c:	9b01      	ldr	r3, [sp, #4]
   11b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b72:	2b00      	cmp	r3, #0
   11b74:	d100      	bne.n	11b78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b78:	bf00      	nop
   11b7a:	b003      	add	sp, #12
   11b7c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b80:	1fff94a0 	.word	0x1fff94a0
   11b84:	1fff949c 	.word	0x1fff949c

00011b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   11b88:	b500      	push	{lr}
   11b8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b8c:	f7ef f844 	bl	c18 <Sys_GetCoreID>
   11b90:	4603      	mov	r3, r0
   11b92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   11b94:	4a10      	ldr	r2, [pc, #64]	; (11bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   11b96:	9b01      	ldr	r3, [sp, #4]
   11b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b9c:	2b00      	cmp	r3, #0
   11b9e:	d10d      	bne.n	11bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ba0:	f7ee ff50 	bl	a44 <Adc_schm_read_msr>
   11ba4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ba6:	9b00      	ldr	r3, [sp, #0]
   11ba8:	f003 0301 	and.w	r3, r3, #1
   11bac:	2b00      	cmp	r3, #0
   11bae:	d100      	bne.n	11bb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   11bb2:	490a      	ldr	r1, [pc, #40]	; (11bdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   11bb4:	9b01      	ldr	r3, [sp, #4]
   11bb6:	9a00      	ldr	r2, [sp, #0]
   11bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   11bbc:	4a06      	ldr	r2, [pc, #24]	; (11bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   11bbe:	9b01      	ldr	r3, [sp, #4]
   11bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bc4:	1c5a      	adds	r2, r3, #1
   11bc6:	4904      	ldr	r1, [pc, #16]	; (11bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   11bc8:	9b01      	ldr	r3, [sp, #4]
   11bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bce:	bf00      	nop
   11bd0:	b003      	add	sp, #12
   11bd2:	f85d fb04 	ldr.w	pc, [sp], #4
   11bd6:	bf00      	nop
   11bd8:	1fff94a8 	.word	0x1fff94a8
   11bdc:	1fff94a4 	.word	0x1fff94a4

00011be0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   11be0:	b500      	push	{lr}
   11be2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11be4:	f7ef f818 	bl	c18 <Sys_GetCoreID>
   11be8:	4603      	mov	r3, r0
   11bea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   11bec:	4a0d      	ldr	r2, [pc, #52]	; (11c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   11bee:	9b01      	ldr	r3, [sp, #4]
   11bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bf4:	1e5a      	subs	r2, r3, #1
   11bf6:	490b      	ldr	r1, [pc, #44]	; (11c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   11bf8:	9b01      	ldr	r3, [sp, #4]
   11bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   11bfe:	4a0a      	ldr	r2, [pc, #40]	; (11c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   11c00:	9b01      	ldr	r3, [sp, #4]
   11c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c06:	f003 0301 	and.w	r3, r3, #1
   11c0a:	2b00      	cmp	r3, #0
   11c0c:	d106      	bne.n	11c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   11c0e:	4a05      	ldr	r2, [pc, #20]	; (11c24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   11c10:	9b01      	ldr	r3, [sp, #4]
   11c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c16:	2b00      	cmp	r3, #0
   11c18:	d100      	bne.n	11c1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c1c:	bf00      	nop
   11c1e:	b003      	add	sp, #12
   11c20:	f85d fb04 	ldr.w	pc, [sp], #4
   11c24:	1fff94a8 	.word	0x1fff94a8
   11c28:	1fff94a4 	.word	0x1fff94a4

00011c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   11c2c:	b500      	push	{lr}
   11c2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c30:	f7ee fff2 	bl	c18 <Sys_GetCoreID>
   11c34:	4603      	mov	r3, r0
   11c36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   11c38:	4a10      	ldr	r2, [pc, #64]	; (11c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   11c3a:	9b01      	ldr	r3, [sp, #4]
   11c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c40:	2b00      	cmp	r3, #0
   11c42:	d10d      	bne.n	11c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c44:	f7ee fefe 	bl	a44 <Adc_schm_read_msr>
   11c48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c4a:	9b00      	ldr	r3, [sp, #0]
   11c4c:	f003 0301 	and.w	r3, r3, #1
   11c50:	2b00      	cmp	r3, #0
   11c52:	d100      	bne.n	11c56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   11c56:	490a      	ldr	r1, [pc, #40]	; (11c80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   11c58:	9b01      	ldr	r3, [sp, #4]
   11c5a:	9a00      	ldr	r2, [sp, #0]
   11c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   11c60:	4a06      	ldr	r2, [pc, #24]	; (11c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   11c62:	9b01      	ldr	r3, [sp, #4]
   11c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c68:	1c5a      	adds	r2, r3, #1
   11c6a:	4904      	ldr	r1, [pc, #16]	; (11c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   11c6c:	9b01      	ldr	r3, [sp, #4]
   11c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c72:	bf00      	nop
   11c74:	b003      	add	sp, #12
   11c76:	f85d fb04 	ldr.w	pc, [sp], #4
   11c7a:	bf00      	nop
   11c7c:	1fff94b0 	.word	0x1fff94b0
   11c80:	1fff94ac 	.word	0x1fff94ac

00011c84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   11c84:	b500      	push	{lr}
   11c86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c88:	f7ee ffc6 	bl	c18 <Sys_GetCoreID>
   11c8c:	4603      	mov	r3, r0
   11c8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   11c90:	4a0d      	ldr	r2, [pc, #52]	; (11cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   11c92:	9b01      	ldr	r3, [sp, #4]
   11c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c98:	1e5a      	subs	r2, r3, #1
   11c9a:	490b      	ldr	r1, [pc, #44]	; (11cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   11c9c:	9b01      	ldr	r3, [sp, #4]
   11c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   11ca2:	4a0a      	ldr	r2, [pc, #40]	; (11ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   11ca4:	9b01      	ldr	r3, [sp, #4]
   11ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11caa:	f003 0301 	and.w	r3, r3, #1
   11cae:	2b00      	cmp	r3, #0
   11cb0:	d106      	bne.n	11cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   11cb2:	4a05      	ldr	r2, [pc, #20]	; (11cc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   11cb4:	9b01      	ldr	r3, [sp, #4]
   11cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cba:	2b00      	cmp	r3, #0
   11cbc:	d100      	bne.n	11cc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11cbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11cc0:	bf00      	nop
   11cc2:	b003      	add	sp, #12
   11cc4:	f85d fb04 	ldr.w	pc, [sp], #4
   11cc8:	1fff94b0 	.word	0x1fff94b0
   11ccc:	1fff94ac 	.word	0x1fff94ac

00011cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   11cd0:	b500      	push	{lr}
   11cd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cd4:	f7ee ffa0 	bl	c18 <Sys_GetCoreID>
   11cd8:	4603      	mov	r3, r0
   11cda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   11cdc:	4a10      	ldr	r2, [pc, #64]	; (11d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   11cde:	9b01      	ldr	r3, [sp, #4]
   11ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce4:	2b00      	cmp	r3, #0
   11ce6:	d10d      	bne.n	11d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ce8:	f7ee feac 	bl	a44 <Adc_schm_read_msr>
   11cec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cee:	9b00      	ldr	r3, [sp, #0]
   11cf0:	f003 0301 	and.w	r3, r3, #1
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d100      	bne.n	11cfa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   11cfa:	490a      	ldr	r1, [pc, #40]	; (11d24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   11cfc:	9b01      	ldr	r3, [sp, #4]
   11cfe:	9a00      	ldr	r2, [sp, #0]
   11d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   11d04:	4a06      	ldr	r2, [pc, #24]	; (11d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d0c:	1c5a      	adds	r2, r3, #1
   11d0e:	4904      	ldr	r1, [pc, #16]	; (11d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   11d10:	9b01      	ldr	r3, [sp, #4]
   11d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d16:	bf00      	nop
   11d18:	b003      	add	sp, #12
   11d1a:	f85d fb04 	ldr.w	pc, [sp], #4
   11d1e:	bf00      	nop
   11d20:	1fff94b8 	.word	0x1fff94b8
   11d24:	1fff94b4 	.word	0x1fff94b4

00011d28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   11d28:	b500      	push	{lr}
   11d2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d2c:	f7ee ff74 	bl	c18 <Sys_GetCoreID>
   11d30:	4603      	mov	r3, r0
   11d32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   11d34:	4a0d      	ldr	r2, [pc, #52]	; (11d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   11d36:	9b01      	ldr	r3, [sp, #4]
   11d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d3c:	1e5a      	subs	r2, r3, #1
   11d3e:	490b      	ldr	r1, [pc, #44]	; (11d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   11d40:	9b01      	ldr	r3, [sp, #4]
   11d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   11d46:	4a0a      	ldr	r2, [pc, #40]	; (11d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   11d48:	9b01      	ldr	r3, [sp, #4]
   11d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d4e:	f003 0301 	and.w	r3, r3, #1
   11d52:	2b00      	cmp	r3, #0
   11d54:	d106      	bne.n	11d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   11d56:	4a05      	ldr	r2, [pc, #20]	; (11d6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   11d58:	9b01      	ldr	r3, [sp, #4]
   11d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d5e:	2b00      	cmp	r3, #0
   11d60:	d100      	bne.n	11d64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d64:	bf00      	nop
   11d66:	b003      	add	sp, #12
   11d68:	f85d fb04 	ldr.w	pc, [sp], #4
   11d6c:	1fff94b8 	.word	0x1fff94b8
   11d70:	1fff94b4 	.word	0x1fff94b4

00011d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   11d74:	b500      	push	{lr}
   11d76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d78:	f7ee ff4e 	bl	c18 <Sys_GetCoreID>
   11d7c:	4603      	mov	r3, r0
   11d7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   11d80:	4a10      	ldr	r2, [pc, #64]	; (11dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   11d82:	9b01      	ldr	r3, [sp, #4]
   11d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d88:	2b00      	cmp	r3, #0
   11d8a:	d10d      	bne.n	11da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d8c:	f7ee fe5a 	bl	a44 <Adc_schm_read_msr>
   11d90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d92:	9b00      	ldr	r3, [sp, #0]
   11d94:	f003 0301 	and.w	r3, r3, #1
   11d98:	2b00      	cmp	r3, #0
   11d9a:	d100      	bne.n	11d9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   11d9e:	490a      	ldr	r1, [pc, #40]	; (11dc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   11da0:	9b01      	ldr	r3, [sp, #4]
   11da2:	9a00      	ldr	r2, [sp, #0]
   11da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   11da8:	4a06      	ldr	r2, [pc, #24]	; (11dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   11daa:	9b01      	ldr	r3, [sp, #4]
   11dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11db0:	1c5a      	adds	r2, r3, #1
   11db2:	4904      	ldr	r1, [pc, #16]	; (11dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   11db4:	9b01      	ldr	r3, [sp, #4]
   11db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11dba:	bf00      	nop
   11dbc:	b003      	add	sp, #12
   11dbe:	f85d fb04 	ldr.w	pc, [sp], #4
   11dc2:	bf00      	nop
   11dc4:	1fff94c0 	.word	0x1fff94c0
   11dc8:	1fff94bc 	.word	0x1fff94bc

00011dcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   11dcc:	b500      	push	{lr}
   11dce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dd0:	f7ee ff22 	bl	c18 <Sys_GetCoreID>
   11dd4:	4603      	mov	r3, r0
   11dd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   11dd8:	4a0d      	ldr	r2, [pc, #52]	; (11e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   11dda:	9b01      	ldr	r3, [sp, #4]
   11ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11de0:	1e5a      	subs	r2, r3, #1
   11de2:	490b      	ldr	r1, [pc, #44]	; (11e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   11de4:	9b01      	ldr	r3, [sp, #4]
   11de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   11dea:	4a0a      	ldr	r2, [pc, #40]	; (11e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   11dec:	9b01      	ldr	r3, [sp, #4]
   11dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11df2:	f003 0301 	and.w	r3, r3, #1
   11df6:	2b00      	cmp	r3, #0
   11df8:	d106      	bne.n	11e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   11dfa:	4a05      	ldr	r2, [pc, #20]	; (11e10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   11dfc:	9b01      	ldr	r3, [sp, #4]
   11dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e02:	2b00      	cmp	r3, #0
   11e04:	d100      	bne.n	11e08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e08:	bf00      	nop
   11e0a:	b003      	add	sp, #12
   11e0c:	f85d fb04 	ldr.w	pc, [sp], #4
   11e10:	1fff94c0 	.word	0x1fff94c0
   11e14:	1fff94bc 	.word	0x1fff94bc

00011e18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   11e18:	b500      	push	{lr}
   11e1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e1c:	f7ee fefc 	bl	c18 <Sys_GetCoreID>
   11e20:	4603      	mov	r3, r0
   11e22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   11e24:	4a10      	ldr	r2, [pc, #64]	; (11e68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   11e26:	9b01      	ldr	r3, [sp, #4]
   11e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e2c:	2b00      	cmp	r3, #0
   11e2e:	d10d      	bne.n	11e4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e30:	f7ee fe11 	bl	a56 <Mcu_schm_read_msr>
   11e34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e36:	9b00      	ldr	r3, [sp, #0]
   11e38:	f003 0301 	and.w	r3, r3, #1
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	d100      	bne.n	11e42 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   11e42:	490a      	ldr	r1, [pc, #40]	; (11e6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   11e44:	9b01      	ldr	r3, [sp, #4]
   11e46:	9a00      	ldr	r2, [sp, #0]
   11e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   11e4c:	4a06      	ldr	r2, [pc, #24]	; (11e68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   11e4e:	9b01      	ldr	r3, [sp, #4]
   11e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e54:	1c5a      	adds	r2, r3, #1
   11e56:	4904      	ldr	r1, [pc, #16]	; (11e68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   11e58:	9b01      	ldr	r3, [sp, #4]
   11e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e5e:	bf00      	nop
   11e60:	b003      	add	sp, #12
   11e62:	f85d fb04 	ldr.w	pc, [sp], #4
   11e66:	bf00      	nop
   11e68:	1fff94c8 	.word	0x1fff94c8
   11e6c:	1fff94c4 	.word	0x1fff94c4

00011e70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   11e70:	b500      	push	{lr}
   11e72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e74:	f7ee fed0 	bl	c18 <Sys_GetCoreID>
   11e78:	4603      	mov	r3, r0
   11e7a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   11e7c:	4a0d      	ldr	r2, [pc, #52]	; (11eb4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   11e7e:	9b01      	ldr	r3, [sp, #4]
   11e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e84:	1e5a      	subs	r2, r3, #1
   11e86:	490b      	ldr	r1, [pc, #44]	; (11eb4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   11e88:	9b01      	ldr	r3, [sp, #4]
   11e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   11e8e:	4a0a      	ldr	r2, [pc, #40]	; (11eb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   11e90:	9b01      	ldr	r3, [sp, #4]
   11e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e96:	f003 0301 	and.w	r3, r3, #1
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	d106      	bne.n	11eac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   11e9e:	4a05      	ldr	r2, [pc, #20]	; (11eb4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea6:	2b00      	cmp	r3, #0
   11ea8:	d100      	bne.n	11eac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11eaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11eac:	bf00      	nop
   11eae:	b003      	add	sp, #12
   11eb0:	f85d fb04 	ldr.w	pc, [sp], #4
   11eb4:	1fff94c8 	.word	0x1fff94c8
   11eb8:	1fff94c4 	.word	0x1fff94c4

00011ebc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   11ebc:	b500      	push	{lr}
   11ebe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ec0:	f7ee feaa 	bl	c18 <Sys_GetCoreID>
   11ec4:	4603      	mov	r3, r0
   11ec6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   11ec8:	4a10      	ldr	r2, [pc, #64]	; (11f0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   11eca:	9b01      	ldr	r3, [sp, #4]
   11ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d10d      	bne.n	11ef0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ed4:	f7ee fdbf 	bl	a56 <Mcu_schm_read_msr>
   11ed8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eda:	9b00      	ldr	r3, [sp, #0]
   11edc:	f003 0301 	and.w	r3, r3, #1
   11ee0:	2b00      	cmp	r3, #0
   11ee2:	d100      	bne.n	11ee6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ee4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   11ee6:	490a      	ldr	r1, [pc, #40]	; (11f10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   11ee8:	9b01      	ldr	r3, [sp, #4]
   11eea:	9a00      	ldr	r2, [sp, #0]
   11eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   11ef0:	4a06      	ldr	r2, [pc, #24]	; (11f0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   11ef2:	9b01      	ldr	r3, [sp, #4]
   11ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ef8:	1c5a      	adds	r2, r3, #1
   11efa:	4904      	ldr	r1, [pc, #16]	; (11f0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   11efc:	9b01      	ldr	r3, [sp, #4]
   11efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f02:	bf00      	nop
   11f04:	b003      	add	sp, #12
   11f06:	f85d fb04 	ldr.w	pc, [sp], #4
   11f0a:	bf00      	nop
   11f0c:	1fff94d0 	.word	0x1fff94d0
   11f10:	1fff94cc 	.word	0x1fff94cc

00011f14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   11f14:	b500      	push	{lr}
   11f16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f18:	f7ee fe7e 	bl	c18 <Sys_GetCoreID>
   11f1c:	4603      	mov	r3, r0
   11f1e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   11f20:	4a0d      	ldr	r2, [pc, #52]	; (11f58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   11f22:	9b01      	ldr	r3, [sp, #4]
   11f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f28:	1e5a      	subs	r2, r3, #1
   11f2a:	490b      	ldr	r1, [pc, #44]	; (11f58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   11f2c:	9b01      	ldr	r3, [sp, #4]
   11f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   11f32:	4a0a      	ldr	r2, [pc, #40]	; (11f5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   11f34:	9b01      	ldr	r3, [sp, #4]
   11f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f3a:	f003 0301 	and.w	r3, r3, #1
   11f3e:	2b00      	cmp	r3, #0
   11f40:	d106      	bne.n	11f50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   11f42:	4a05      	ldr	r2, [pc, #20]	; (11f58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f4a:	2b00      	cmp	r3, #0
   11f4c:	d100      	bne.n	11f50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f50:	bf00      	nop
   11f52:	b003      	add	sp, #12
   11f54:	f85d fb04 	ldr.w	pc, [sp], #4
   11f58:	1fff94d0 	.word	0x1fff94d0
   11f5c:	1fff94cc 	.word	0x1fff94cc

00011f60 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   11f60:	b500      	push	{lr}
   11f62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f64:	f7ee fe58 	bl	c18 <Sys_GetCoreID>
   11f68:	4603      	mov	r3, r0
   11f6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   11f6c:	4a10      	ldr	r2, [pc, #64]	; (11fb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   11f6e:	9b01      	ldr	r3, [sp, #4]
   11f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f74:	2b00      	cmp	r3, #0
   11f76:	d10d      	bne.n	11f94 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f78:	f7ee fd6d 	bl	a56 <Mcu_schm_read_msr>
   11f7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f7e:	9b00      	ldr	r3, [sp, #0]
   11f80:	f003 0301 	and.w	r3, r3, #1
   11f84:	2b00      	cmp	r3, #0
   11f86:	d100      	bne.n	11f8a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   11f8a:	490a      	ldr	r1, [pc, #40]	; (11fb4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   11f8c:	9b01      	ldr	r3, [sp, #4]
   11f8e:	9a00      	ldr	r2, [sp, #0]
   11f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   11f94:	4a06      	ldr	r2, [pc, #24]	; (11fb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   11f96:	9b01      	ldr	r3, [sp, #4]
   11f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f9c:	1c5a      	adds	r2, r3, #1
   11f9e:	4904      	ldr	r1, [pc, #16]	; (11fb0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   11fa0:	9b01      	ldr	r3, [sp, #4]
   11fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fa6:	bf00      	nop
   11fa8:	b003      	add	sp, #12
   11faa:	f85d fb04 	ldr.w	pc, [sp], #4
   11fae:	bf00      	nop
   11fb0:	1fff94d8 	.word	0x1fff94d8
   11fb4:	1fff94d4 	.word	0x1fff94d4

00011fb8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   11fb8:	b500      	push	{lr}
   11fba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fbc:	f7ee fe2c 	bl	c18 <Sys_GetCoreID>
   11fc0:	4603      	mov	r3, r0
   11fc2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   11fc4:	4a0d      	ldr	r2, [pc, #52]	; (11ffc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   11fc6:	9b01      	ldr	r3, [sp, #4]
   11fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fcc:	1e5a      	subs	r2, r3, #1
   11fce:	490b      	ldr	r1, [pc, #44]	; (11ffc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   11fd0:	9b01      	ldr	r3, [sp, #4]
   11fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   11fd6:	4a0a      	ldr	r2, [pc, #40]	; (12000 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   11fd8:	9b01      	ldr	r3, [sp, #4]
   11fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fde:	f003 0301 	and.w	r3, r3, #1
   11fe2:	2b00      	cmp	r3, #0
   11fe4:	d106      	bne.n	11ff4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   11fe6:	4a05      	ldr	r2, [pc, #20]	; (11ffc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   11fe8:	9b01      	ldr	r3, [sp, #4]
   11fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fee:	2b00      	cmp	r3, #0
   11ff0:	d100      	bne.n	11ff4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ff2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ff4:	bf00      	nop
   11ff6:	b003      	add	sp, #12
   11ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   11ffc:	1fff94d8 	.word	0x1fff94d8
   12000:	1fff94d4 	.word	0x1fff94d4

00012004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   12004:	b500      	push	{lr}
   12006:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12008:	f7ee fe06 	bl	c18 <Sys_GetCoreID>
   1200c:	4603      	mov	r3, r0
   1200e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   12010:	4a10      	ldr	r2, [pc, #64]	; (12054 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   12012:	9b01      	ldr	r3, [sp, #4]
   12014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12018:	2b00      	cmp	r3, #0
   1201a:	d10d      	bne.n	12038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1201c:	f7ee fd24 	bl	a68 <Port_schm_read_msr>
   12020:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12022:	9b00      	ldr	r3, [sp, #0]
   12024:	f003 0301 	and.w	r3, r3, #1
   12028:	2b00      	cmp	r3, #0
   1202a:	d100      	bne.n	1202e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1202c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1202e:	490a      	ldr	r1, [pc, #40]	; (12058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   12030:	9b01      	ldr	r3, [sp, #4]
   12032:	9a00      	ldr	r2, [sp, #0]
   12034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   12038:	4a06      	ldr	r2, [pc, #24]	; (12054 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1203a:	9b01      	ldr	r3, [sp, #4]
   1203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12040:	1c5a      	adds	r2, r3, #1
   12042:	4904      	ldr	r1, [pc, #16]	; (12054 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   12044:	9b01      	ldr	r3, [sp, #4]
   12046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1204a:	bf00      	nop
   1204c:	b003      	add	sp, #12
   1204e:	f85d fb04 	ldr.w	pc, [sp], #4
   12052:	bf00      	nop
   12054:	1fff94e0 	.word	0x1fff94e0
   12058:	1fff94dc 	.word	0x1fff94dc

0001205c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   1205c:	b500      	push	{lr}
   1205e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12060:	f7ee fdda 	bl	c18 <Sys_GetCoreID>
   12064:	4603      	mov	r3, r0
   12066:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   12068:	4a0d      	ldr	r2, [pc, #52]	; (120a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   1206a:	9b01      	ldr	r3, [sp, #4]
   1206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12070:	1e5a      	subs	r2, r3, #1
   12072:	490b      	ldr	r1, [pc, #44]	; (120a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   12074:	9b01      	ldr	r3, [sp, #4]
   12076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1207a:	4a0a      	ldr	r2, [pc, #40]	; (120a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   1207c:	9b01      	ldr	r3, [sp, #4]
   1207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12082:	f003 0301 	and.w	r3, r3, #1
   12086:	2b00      	cmp	r3, #0
   12088:	d106      	bne.n	12098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   1208a:	4a05      	ldr	r2, [pc, #20]	; (120a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   1208c:	9b01      	ldr	r3, [sp, #4]
   1208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12092:	2b00      	cmp	r3, #0
   12094:	d100      	bne.n	12098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12096:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12098:	bf00      	nop
   1209a:	b003      	add	sp, #12
   1209c:	f85d fb04 	ldr.w	pc, [sp], #4
   120a0:	1fff94e0 	.word	0x1fff94e0
   120a4:	1fff94dc 	.word	0x1fff94dc

000120a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   120a8:	b500      	push	{lr}
   120aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120ac:	f7ee fdb4 	bl	c18 <Sys_GetCoreID>
   120b0:	4603      	mov	r3, r0
   120b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   120b4:	4a10      	ldr	r2, [pc, #64]	; (120f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   120b6:	9b01      	ldr	r3, [sp, #4]
   120b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120bc:	2b00      	cmp	r3, #0
   120be:	d10d      	bne.n	120dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120c0:	f7ee fcd2 	bl	a68 <Port_schm_read_msr>
   120c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120c6:	9b00      	ldr	r3, [sp, #0]
   120c8:	f003 0301 	and.w	r3, r3, #1
   120cc:	2b00      	cmp	r3, #0
   120ce:	d100      	bne.n	120d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   120d2:	490a      	ldr	r1, [pc, #40]	; (120fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   120d4:	9b01      	ldr	r3, [sp, #4]
   120d6:	9a00      	ldr	r2, [sp, #0]
   120d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   120dc:	4a06      	ldr	r2, [pc, #24]	; (120f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   120de:	9b01      	ldr	r3, [sp, #4]
   120e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120e4:	1c5a      	adds	r2, r3, #1
   120e6:	4904      	ldr	r1, [pc, #16]	; (120f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   120e8:	9b01      	ldr	r3, [sp, #4]
   120ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120ee:	bf00      	nop
   120f0:	b003      	add	sp, #12
   120f2:	f85d fb04 	ldr.w	pc, [sp], #4
   120f6:	bf00      	nop
   120f8:	1fff94e8 	.word	0x1fff94e8
   120fc:	1fff94e4 	.word	0x1fff94e4

00012100 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   12100:	b500      	push	{lr}
   12102:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12104:	f7ee fd88 	bl	c18 <Sys_GetCoreID>
   12108:	4603      	mov	r3, r0
   1210a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   1210c:	4a0d      	ldr	r2, [pc, #52]	; (12144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1210e:	9b01      	ldr	r3, [sp, #4]
   12110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12114:	1e5a      	subs	r2, r3, #1
   12116:	490b      	ldr	r1, [pc, #44]	; (12144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   12118:	9b01      	ldr	r3, [sp, #4]
   1211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1211e:	4a0a      	ldr	r2, [pc, #40]	; (12148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   12120:	9b01      	ldr	r3, [sp, #4]
   12122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12126:	f003 0301 	and.w	r3, r3, #1
   1212a:	2b00      	cmp	r3, #0
   1212c:	d106      	bne.n	1213c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   1212e:	4a05      	ldr	r2, [pc, #20]	; (12144 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   12130:	9b01      	ldr	r3, [sp, #4]
   12132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12136:	2b00      	cmp	r3, #0
   12138:	d100      	bne.n	1213c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1213a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1213c:	bf00      	nop
   1213e:	b003      	add	sp, #12
   12140:	f85d fb04 	ldr.w	pc, [sp], #4
   12144:	1fff94e8 	.word	0x1fff94e8
   12148:	1fff94e4 	.word	0x1fff94e4

0001214c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   1214c:	b500      	push	{lr}
   1214e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12150:	f7ee fd62 	bl	c18 <Sys_GetCoreID>
   12154:	4603      	mov	r3, r0
   12156:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   12158:	4a10      	ldr	r2, [pc, #64]	; (1219c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1215a:	9b01      	ldr	r3, [sp, #4]
   1215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12160:	2b00      	cmp	r3, #0
   12162:	d10d      	bne.n	12180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12164:	f7ee fc80 	bl	a68 <Port_schm_read_msr>
   12168:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1216a:	9b00      	ldr	r3, [sp, #0]
   1216c:	f003 0301 	and.w	r3, r3, #1
   12170:	2b00      	cmp	r3, #0
   12172:	d100      	bne.n	12176 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12174:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   12176:	490a      	ldr	r1, [pc, #40]	; (121a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   12178:	9b01      	ldr	r3, [sp, #4]
   1217a:	9a00      	ldr	r2, [sp, #0]
   1217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   12180:	4a06      	ldr	r2, [pc, #24]	; (1219c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   12182:	9b01      	ldr	r3, [sp, #4]
   12184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12188:	1c5a      	adds	r2, r3, #1
   1218a:	4904      	ldr	r1, [pc, #16]	; (1219c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1218c:	9b01      	ldr	r3, [sp, #4]
   1218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12192:	bf00      	nop
   12194:	b003      	add	sp, #12
   12196:	f85d fb04 	ldr.w	pc, [sp], #4
   1219a:	bf00      	nop
   1219c:	1fff94f0 	.word	0x1fff94f0
   121a0:	1fff94ec 	.word	0x1fff94ec

000121a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   121a4:	b500      	push	{lr}
   121a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121a8:	f7ee fd36 	bl	c18 <Sys_GetCoreID>
   121ac:	4603      	mov	r3, r0
   121ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   121b0:	4a0d      	ldr	r2, [pc, #52]	; (121e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   121b2:	9b01      	ldr	r3, [sp, #4]
   121b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121b8:	1e5a      	subs	r2, r3, #1
   121ba:	490b      	ldr	r1, [pc, #44]	; (121e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   121bc:	9b01      	ldr	r3, [sp, #4]
   121be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   121c2:	4a0a      	ldr	r2, [pc, #40]	; (121ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   121c4:	9b01      	ldr	r3, [sp, #4]
   121c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ca:	f003 0301 	and.w	r3, r3, #1
   121ce:	2b00      	cmp	r3, #0
   121d0:	d106      	bne.n	121e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   121d2:	4a05      	ldr	r2, [pc, #20]	; (121e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   121d4:	9b01      	ldr	r3, [sp, #4]
   121d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121da:	2b00      	cmp	r3, #0
   121dc:	d100      	bne.n	121e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121e0:	bf00      	nop
   121e2:	b003      	add	sp, #12
   121e4:	f85d fb04 	ldr.w	pc, [sp], #4
   121e8:	1fff94f0 	.word	0x1fff94f0
   121ec:	1fff94ec 	.word	0x1fff94ec

000121f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   121f0:	b500      	push	{lr}
   121f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121f4:	f7ee fd10 	bl	c18 <Sys_GetCoreID>
   121f8:	4603      	mov	r3, r0
   121fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   121fc:	4a10      	ldr	r2, [pc, #64]	; (12240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   121fe:	9b01      	ldr	r3, [sp, #4]
   12200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12204:	2b00      	cmp	r3, #0
   12206:	d10d      	bne.n	12224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12208:	f7ee fc2e 	bl	a68 <Port_schm_read_msr>
   1220c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1220e:	9b00      	ldr	r3, [sp, #0]
   12210:	f003 0301 	and.w	r3, r3, #1
   12214:	2b00      	cmp	r3, #0
   12216:	d100      	bne.n	1221a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12218:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1221a:	490a      	ldr	r1, [pc, #40]	; (12244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   1221c:	9b01      	ldr	r3, [sp, #4]
   1221e:	9a00      	ldr	r2, [sp, #0]
   12220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   12224:	4a06      	ldr	r2, [pc, #24]	; (12240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   12226:	9b01      	ldr	r3, [sp, #4]
   12228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1222c:	1c5a      	adds	r2, r3, #1
   1222e:	4904      	ldr	r1, [pc, #16]	; (12240 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   12230:	9b01      	ldr	r3, [sp, #4]
   12232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12236:	bf00      	nop
   12238:	b003      	add	sp, #12
   1223a:	f85d fb04 	ldr.w	pc, [sp], #4
   1223e:	bf00      	nop
   12240:	1fff94f8 	.word	0x1fff94f8
   12244:	1fff94f4 	.word	0x1fff94f4

00012248 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   12248:	b500      	push	{lr}
   1224a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1224c:	f7ee fce4 	bl	c18 <Sys_GetCoreID>
   12250:	4603      	mov	r3, r0
   12252:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   12254:	4a0d      	ldr	r2, [pc, #52]	; (1228c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   12256:	9b01      	ldr	r3, [sp, #4]
   12258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1225c:	1e5a      	subs	r2, r3, #1
   1225e:	490b      	ldr	r1, [pc, #44]	; (1228c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   12260:	9b01      	ldr	r3, [sp, #4]
   12262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   12266:	4a0a      	ldr	r2, [pc, #40]	; (12290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   12268:	9b01      	ldr	r3, [sp, #4]
   1226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1226e:	f003 0301 	and.w	r3, r3, #1
   12272:	2b00      	cmp	r3, #0
   12274:	d106      	bne.n	12284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   12276:	4a05      	ldr	r2, [pc, #20]	; (1228c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   12278:	9b01      	ldr	r3, [sp, #4]
   1227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1227e:	2b00      	cmp	r3, #0
   12280:	d100      	bne.n	12284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12282:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12284:	bf00      	nop
   12286:	b003      	add	sp, #12
   12288:	f85d fb04 	ldr.w	pc, [sp], #4
   1228c:	1fff94f8 	.word	0x1fff94f8
   12290:	1fff94f4 	.word	0x1fff94f4

00012294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   12294:	b500      	push	{lr}
   12296:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12298:	f7ee fcbe 	bl	c18 <Sys_GetCoreID>
   1229c:	4603      	mov	r3, r0
   1229e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   122a0:	4a10      	ldr	r2, [pc, #64]	; (122e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   122a2:	9b01      	ldr	r3, [sp, #4]
   122a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a8:	2b00      	cmp	r3, #0
   122aa:	d10d      	bne.n	122c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122ac:	f7ee fbdc 	bl	a68 <Port_schm_read_msr>
   122b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122b2:	9b00      	ldr	r3, [sp, #0]
   122b4:	f003 0301 	and.w	r3, r3, #1
   122b8:	2b00      	cmp	r3, #0
   122ba:	d100      	bne.n	122be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   122be:	490a      	ldr	r1, [pc, #40]	; (122e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   122c0:	9b01      	ldr	r3, [sp, #4]
   122c2:	9a00      	ldr	r2, [sp, #0]
   122c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   122c8:	4a06      	ldr	r2, [pc, #24]	; (122e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   122ca:	9b01      	ldr	r3, [sp, #4]
   122cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122d0:	1c5a      	adds	r2, r3, #1
   122d2:	4904      	ldr	r1, [pc, #16]	; (122e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   122d4:	9b01      	ldr	r3, [sp, #4]
   122d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122da:	bf00      	nop
   122dc:	b003      	add	sp, #12
   122de:	f85d fb04 	ldr.w	pc, [sp], #4
   122e2:	bf00      	nop
   122e4:	1fff9500 	.word	0x1fff9500
   122e8:	1fff94fc 	.word	0x1fff94fc

000122ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   122ec:	b500      	push	{lr}
   122ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122f0:	f7ee fc92 	bl	c18 <Sys_GetCoreID>
   122f4:	4603      	mov	r3, r0
   122f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   122f8:	4a0d      	ldr	r2, [pc, #52]	; (12330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   122fa:	9b01      	ldr	r3, [sp, #4]
   122fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12300:	1e5a      	subs	r2, r3, #1
   12302:	490b      	ldr	r1, [pc, #44]	; (12330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   12304:	9b01      	ldr	r3, [sp, #4]
   12306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1230a:	4a0a      	ldr	r2, [pc, #40]	; (12334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   1230c:	9b01      	ldr	r3, [sp, #4]
   1230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12312:	f003 0301 	and.w	r3, r3, #1
   12316:	2b00      	cmp	r3, #0
   12318:	d106      	bne.n	12328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   1231a:	4a05      	ldr	r2, [pc, #20]	; (12330 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12322:	2b00      	cmp	r3, #0
   12324:	d100      	bne.n	12328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12326:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12328:	bf00      	nop
   1232a:	b003      	add	sp, #12
   1232c:	f85d fb04 	ldr.w	pc, [sp], #4
   12330:	1fff9500 	.word	0x1fff9500
   12334:	1fff94fc 	.word	0x1fff94fc

00012338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   12338:	b500      	push	{lr}
   1233a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1233c:	f7ee fc6c 	bl	c18 <Sys_GetCoreID>
   12340:	4603      	mov	r3, r0
   12342:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   12344:	4a10      	ldr	r2, [pc, #64]	; (12388 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   12346:	9b01      	ldr	r3, [sp, #4]
   12348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1234c:	2b00      	cmp	r3, #0
   1234e:	d10d      	bne.n	1236c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12350:	f7ee fb8a 	bl	a68 <Port_schm_read_msr>
   12354:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12356:	9b00      	ldr	r3, [sp, #0]
   12358:	f003 0301 	and.w	r3, r3, #1
   1235c:	2b00      	cmp	r3, #0
   1235e:	d100      	bne.n	12362 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12360:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   12362:	490a      	ldr	r1, [pc, #40]	; (1238c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   12364:	9b01      	ldr	r3, [sp, #4]
   12366:	9a00      	ldr	r2, [sp, #0]
   12368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   1236c:	4a06      	ldr	r2, [pc, #24]	; (12388 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   1236e:	9b01      	ldr	r3, [sp, #4]
   12370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12374:	1c5a      	adds	r2, r3, #1
   12376:	4904      	ldr	r1, [pc, #16]	; (12388 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   12378:	9b01      	ldr	r3, [sp, #4]
   1237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1237e:	bf00      	nop
   12380:	b003      	add	sp, #12
   12382:	f85d fb04 	ldr.w	pc, [sp], #4
   12386:	bf00      	nop
   12388:	1fff9508 	.word	0x1fff9508
   1238c:	1fff9504 	.word	0x1fff9504

00012390 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   12390:	b500      	push	{lr}
   12392:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12394:	f7ee fc40 	bl	c18 <Sys_GetCoreID>
   12398:	4603      	mov	r3, r0
   1239a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   1239c:	4a0d      	ldr	r2, [pc, #52]	; (123d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1239e:	9b01      	ldr	r3, [sp, #4]
   123a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123a4:	1e5a      	subs	r2, r3, #1
   123a6:	490b      	ldr	r1, [pc, #44]	; (123d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   123a8:	9b01      	ldr	r3, [sp, #4]
   123aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   123ae:	4a0a      	ldr	r2, [pc, #40]	; (123d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   123b0:	9b01      	ldr	r3, [sp, #4]
   123b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123b6:	f003 0301 	and.w	r3, r3, #1
   123ba:	2b00      	cmp	r3, #0
   123bc:	d106      	bne.n	123cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   123be:	4a05      	ldr	r2, [pc, #20]	; (123d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c6:	2b00      	cmp	r3, #0
   123c8:	d100      	bne.n	123cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123cc:	bf00      	nop
   123ce:	b003      	add	sp, #12
   123d0:	f85d fb04 	ldr.w	pc, [sp], #4
   123d4:	1fff9508 	.word	0x1fff9508
   123d8:	1fff9504 	.word	0x1fff9504

000123dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   123dc:	b500      	push	{lr}
   123de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123e0:	f7ee fc1a 	bl	c18 <Sys_GetCoreID>
   123e4:	4603      	mov	r3, r0
   123e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   123e8:	4a10      	ldr	r2, [pc, #64]	; (1242c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   123ea:	9b01      	ldr	r3, [sp, #4]
   123ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f0:	2b00      	cmp	r3, #0
   123f2:	d10d      	bne.n	12410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123f4:	f7ee fb38 	bl	a68 <Port_schm_read_msr>
   123f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123fa:	9b00      	ldr	r3, [sp, #0]
   123fc:	f003 0301 	and.w	r3, r3, #1
   12400:	2b00      	cmp	r3, #0
   12402:	d100      	bne.n	12406 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12404:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   12406:	490a      	ldr	r1, [pc, #40]	; (12430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   12408:	9b01      	ldr	r3, [sp, #4]
   1240a:	9a00      	ldr	r2, [sp, #0]
   1240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   12410:	4a06      	ldr	r2, [pc, #24]	; (1242c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   12412:	9b01      	ldr	r3, [sp, #4]
   12414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12418:	1c5a      	adds	r2, r3, #1
   1241a:	4904      	ldr	r1, [pc, #16]	; (1242c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1241c:	9b01      	ldr	r3, [sp, #4]
   1241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12422:	bf00      	nop
   12424:	b003      	add	sp, #12
   12426:	f85d fb04 	ldr.w	pc, [sp], #4
   1242a:	bf00      	nop
   1242c:	1fff9510 	.word	0x1fff9510
   12430:	1fff950c 	.word	0x1fff950c

00012434 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   12434:	b500      	push	{lr}
   12436:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12438:	f7ee fbee 	bl	c18 <Sys_GetCoreID>
   1243c:	4603      	mov	r3, r0
   1243e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   12440:	4a0d      	ldr	r2, [pc, #52]	; (12478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   12442:	9b01      	ldr	r3, [sp, #4]
   12444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12448:	1e5a      	subs	r2, r3, #1
   1244a:	490b      	ldr	r1, [pc, #44]	; (12478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   1244c:	9b01      	ldr	r3, [sp, #4]
   1244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   12452:	4a0a      	ldr	r2, [pc, #40]	; (1247c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   12454:	9b01      	ldr	r3, [sp, #4]
   12456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1245a:	f003 0301 	and.w	r3, r3, #1
   1245e:	2b00      	cmp	r3, #0
   12460:	d106      	bne.n	12470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   12462:	4a05      	ldr	r2, [pc, #20]	; (12478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1246a:	2b00      	cmp	r3, #0
   1246c:	d100      	bne.n	12470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1246e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12470:	bf00      	nop
   12472:	b003      	add	sp, #12
   12474:	f85d fb04 	ldr.w	pc, [sp], #4
   12478:	1fff9510 	.word	0x1fff9510
   1247c:	1fff950c 	.word	0x1fff950c

00012480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   12480:	b500      	push	{lr}
   12482:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12484:	f7ee fbc8 	bl	c18 <Sys_GetCoreID>
   12488:	4603      	mov	r3, r0
   1248a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   1248c:	4a10      	ldr	r2, [pc, #64]	; (124d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1248e:	9b01      	ldr	r3, [sp, #4]
   12490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12494:	2b00      	cmp	r3, #0
   12496:	d10d      	bne.n	124b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12498:	f7ee fae6 	bl	a68 <Port_schm_read_msr>
   1249c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1249e:	9b00      	ldr	r3, [sp, #0]
   124a0:	f003 0301 	and.w	r3, r3, #1
   124a4:	2b00      	cmp	r3, #0
   124a6:	d100      	bne.n	124aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   124aa:	490a      	ldr	r1, [pc, #40]	; (124d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   124ac:	9b01      	ldr	r3, [sp, #4]
   124ae:	9a00      	ldr	r2, [sp, #0]
   124b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   124b4:	4a06      	ldr	r2, [pc, #24]	; (124d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   124b6:	9b01      	ldr	r3, [sp, #4]
   124b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124bc:	1c5a      	adds	r2, r3, #1
   124be:	4904      	ldr	r1, [pc, #16]	; (124d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   124c0:	9b01      	ldr	r3, [sp, #4]
   124c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124c6:	bf00      	nop
   124c8:	b003      	add	sp, #12
   124ca:	f85d fb04 	ldr.w	pc, [sp], #4
   124ce:	bf00      	nop
   124d0:	1fff9518 	.word	0x1fff9518
   124d4:	1fff9514 	.word	0x1fff9514

000124d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   124d8:	b500      	push	{lr}
   124da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124dc:	f7ee fb9c 	bl	c18 <Sys_GetCoreID>
   124e0:	4603      	mov	r3, r0
   124e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   124e4:	4a0d      	ldr	r2, [pc, #52]	; (1251c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   124e6:	9b01      	ldr	r3, [sp, #4]
   124e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124ec:	1e5a      	subs	r2, r3, #1
   124ee:	490b      	ldr	r1, [pc, #44]	; (1251c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   124f0:	9b01      	ldr	r3, [sp, #4]
   124f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   124f6:	4a0a      	ldr	r2, [pc, #40]	; (12520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   124f8:	9b01      	ldr	r3, [sp, #4]
   124fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124fe:	f003 0301 	and.w	r3, r3, #1
   12502:	2b00      	cmp	r3, #0
   12504:	d106      	bne.n	12514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   12506:	4a05      	ldr	r2, [pc, #20]	; (1251c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   12508:	9b01      	ldr	r3, [sp, #4]
   1250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1250e:	2b00      	cmp	r3, #0
   12510:	d100      	bne.n	12514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12512:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12514:	bf00      	nop
   12516:	b003      	add	sp, #12
   12518:	f85d fb04 	ldr.w	pc, [sp], #4
   1251c:	1fff9518 	.word	0x1fff9518
   12520:	1fff9514 	.word	0x1fff9514

00012524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   12524:	b500      	push	{lr}
   12526:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12528:	f7ee fb76 	bl	c18 <Sys_GetCoreID>
   1252c:	4603      	mov	r3, r0
   1252e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   12530:	4a10      	ldr	r2, [pc, #64]	; (12574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   12532:	9b01      	ldr	r3, [sp, #4]
   12534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12538:	2b00      	cmp	r3, #0
   1253a:	d10d      	bne.n	12558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1253c:	f7ee fa94 	bl	a68 <Port_schm_read_msr>
   12540:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12542:	9b00      	ldr	r3, [sp, #0]
   12544:	f003 0301 	and.w	r3, r3, #1
   12548:	2b00      	cmp	r3, #0
   1254a:	d100      	bne.n	1254e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1254c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1254e:	490a      	ldr	r1, [pc, #40]	; (12578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   12550:	9b01      	ldr	r3, [sp, #4]
   12552:	9a00      	ldr	r2, [sp, #0]
   12554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   12558:	4a06      	ldr	r2, [pc, #24]	; (12574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   1255a:	9b01      	ldr	r3, [sp, #4]
   1255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12560:	1c5a      	adds	r2, r3, #1
   12562:	4904      	ldr	r1, [pc, #16]	; (12574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   12564:	9b01      	ldr	r3, [sp, #4]
   12566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1256a:	bf00      	nop
   1256c:	b003      	add	sp, #12
   1256e:	f85d fb04 	ldr.w	pc, [sp], #4
   12572:	bf00      	nop
   12574:	1fff9520 	.word	0x1fff9520
   12578:	1fff951c 	.word	0x1fff951c

0001257c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   1257c:	b500      	push	{lr}
   1257e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12580:	f7ee fb4a 	bl	c18 <Sys_GetCoreID>
   12584:	4603      	mov	r3, r0
   12586:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   12588:	4a0d      	ldr	r2, [pc, #52]	; (125c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   1258a:	9b01      	ldr	r3, [sp, #4]
   1258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12590:	1e5a      	subs	r2, r3, #1
   12592:	490b      	ldr	r1, [pc, #44]	; (125c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   12594:	9b01      	ldr	r3, [sp, #4]
   12596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   1259a:	4a0a      	ldr	r2, [pc, #40]	; (125c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   1259c:	9b01      	ldr	r3, [sp, #4]
   1259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a2:	f003 0301 	and.w	r3, r3, #1
   125a6:	2b00      	cmp	r3, #0
   125a8:	d106      	bne.n	125b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   125aa:	4a05      	ldr	r2, [pc, #20]	; (125c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   125ac:	9b01      	ldr	r3, [sp, #4]
   125ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125b2:	2b00      	cmp	r3, #0
   125b4:	d100      	bne.n	125b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125b8:	bf00      	nop
   125ba:	b003      	add	sp, #12
   125bc:	f85d fb04 	ldr.w	pc, [sp], #4
   125c0:	1fff9520 	.word	0x1fff9520
   125c4:	1fff951c 	.word	0x1fff951c

000125c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   125c8:	b500      	push	{lr}
   125ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125cc:	f7ee fb24 	bl	c18 <Sys_GetCoreID>
   125d0:	4603      	mov	r3, r0
   125d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   125d4:	4a10      	ldr	r2, [pc, #64]	; (12618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   125d6:	9b01      	ldr	r3, [sp, #4]
   125d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125dc:	2b00      	cmp	r3, #0
   125de:	d10d      	bne.n	125fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125e0:	f7ee fa42 	bl	a68 <Port_schm_read_msr>
   125e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125e6:	9b00      	ldr	r3, [sp, #0]
   125e8:	f003 0301 	and.w	r3, r3, #1
   125ec:	2b00      	cmp	r3, #0
   125ee:	d100      	bne.n	125f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   125f2:	490a      	ldr	r1, [pc, #40]	; (1261c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   125f4:	9b01      	ldr	r3, [sp, #4]
   125f6:	9a00      	ldr	r2, [sp, #0]
   125f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   125fc:	4a06      	ldr	r2, [pc, #24]	; (12618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   125fe:	9b01      	ldr	r3, [sp, #4]
   12600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12604:	1c5a      	adds	r2, r3, #1
   12606:	4904      	ldr	r1, [pc, #16]	; (12618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   12608:	9b01      	ldr	r3, [sp, #4]
   1260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1260e:	bf00      	nop
   12610:	b003      	add	sp, #12
   12612:	f85d fb04 	ldr.w	pc, [sp], #4
   12616:	bf00      	nop
   12618:	1fff9528 	.word	0x1fff9528
   1261c:	1fff9524 	.word	0x1fff9524

00012620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   12620:	b500      	push	{lr}
   12622:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12624:	f7ee faf8 	bl	c18 <Sys_GetCoreID>
   12628:	4603      	mov	r3, r0
   1262a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1262e:	9b01      	ldr	r3, [sp, #4]
   12630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12634:	1e5a      	subs	r2, r3, #1
   12636:	490b      	ldr	r1, [pc, #44]	; (12664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   12638:	9b01      	ldr	r3, [sp, #4]
   1263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1263e:	4a0a      	ldr	r2, [pc, #40]	; (12668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   12640:	9b01      	ldr	r3, [sp, #4]
   12642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12646:	f003 0301 	and.w	r3, r3, #1
   1264a:	2b00      	cmp	r3, #0
   1264c:	d106      	bne.n	1265c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   1264e:	4a05      	ldr	r2, [pc, #20]	; (12664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   12650:	9b01      	ldr	r3, [sp, #4]
   12652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12656:	2b00      	cmp	r3, #0
   12658:	d100      	bne.n	1265c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1265a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1265c:	bf00      	nop
   1265e:	b003      	add	sp, #12
   12660:	f85d fb04 	ldr.w	pc, [sp], #4
   12664:	1fff9528 	.word	0x1fff9528
   12668:	1fff9524 	.word	0x1fff9524

0001266c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   1266c:	b500      	push	{lr}
   1266e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12670:	f7ee fad2 	bl	c18 <Sys_GetCoreID>
   12674:	4603      	mov	r3, r0
   12676:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   12678:	4a10      	ldr	r2, [pc, #64]	; (126bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1267a:	9b01      	ldr	r3, [sp, #4]
   1267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12680:	2b00      	cmp	r3, #0
   12682:	d10d      	bne.n	126a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12684:	f7ee f9f0 	bl	a68 <Port_schm_read_msr>
   12688:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1268a:	9b00      	ldr	r3, [sp, #0]
   1268c:	f003 0301 	and.w	r3, r3, #1
   12690:	2b00      	cmp	r3, #0
   12692:	d100      	bne.n	12696 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12694:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   12696:	490a      	ldr	r1, [pc, #40]	; (126c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   12698:	9b01      	ldr	r3, [sp, #4]
   1269a:	9a00      	ldr	r2, [sp, #0]
   1269c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   126a0:	4a06      	ldr	r2, [pc, #24]	; (126bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   126a2:	9b01      	ldr	r3, [sp, #4]
   126a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126a8:	1c5a      	adds	r2, r3, #1
   126aa:	4904      	ldr	r1, [pc, #16]	; (126bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   126ac:	9b01      	ldr	r3, [sp, #4]
   126ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126b2:	bf00      	nop
   126b4:	b003      	add	sp, #12
   126b6:	f85d fb04 	ldr.w	pc, [sp], #4
   126ba:	bf00      	nop
   126bc:	1fff9530 	.word	0x1fff9530
   126c0:	1fff952c 	.word	0x1fff952c

000126c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   126c4:	b500      	push	{lr}
   126c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126c8:	f7ee faa6 	bl	c18 <Sys_GetCoreID>
   126cc:	4603      	mov	r3, r0
   126ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   126d0:	4a0d      	ldr	r2, [pc, #52]	; (12708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   126d2:	9b01      	ldr	r3, [sp, #4]
   126d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d8:	1e5a      	subs	r2, r3, #1
   126da:	490b      	ldr	r1, [pc, #44]	; (12708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   126dc:	9b01      	ldr	r3, [sp, #4]
   126de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   126e2:	4a0a      	ldr	r2, [pc, #40]	; (1270c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   126e4:	9b01      	ldr	r3, [sp, #4]
   126e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ea:	f003 0301 	and.w	r3, r3, #1
   126ee:	2b00      	cmp	r3, #0
   126f0:	d106      	bne.n	12700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   126f2:	4a05      	ldr	r2, [pc, #20]	; (12708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126fa:	2b00      	cmp	r3, #0
   126fc:	d100      	bne.n	12700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12700:	bf00      	nop
   12702:	b003      	add	sp, #12
   12704:	f85d fb04 	ldr.w	pc, [sp], #4
   12708:	1fff9530 	.word	0x1fff9530
   1270c:	1fff952c 	.word	0x1fff952c

00012710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   12710:	b500      	push	{lr}
   12712:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12714:	f7ee fa80 	bl	c18 <Sys_GetCoreID>
   12718:	4603      	mov	r3, r0
   1271a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   1271c:	4a10      	ldr	r2, [pc, #64]	; (12760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1271e:	9b01      	ldr	r3, [sp, #4]
   12720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12724:	2b00      	cmp	r3, #0
   12726:	d10d      	bne.n	12744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12728:	f7ee f99e 	bl	a68 <Port_schm_read_msr>
   1272c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1272e:	9b00      	ldr	r3, [sp, #0]
   12730:	f003 0301 	and.w	r3, r3, #1
   12734:	2b00      	cmp	r3, #0
   12736:	d100      	bne.n	1273a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12738:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1273a:	490a      	ldr	r1, [pc, #40]	; (12764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   1273c:	9b01      	ldr	r3, [sp, #4]
   1273e:	9a00      	ldr	r2, [sp, #0]
   12740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   12744:	4a06      	ldr	r2, [pc, #24]	; (12760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   12746:	9b01      	ldr	r3, [sp, #4]
   12748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1274c:	1c5a      	adds	r2, r3, #1
   1274e:	4904      	ldr	r1, [pc, #16]	; (12760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   12750:	9b01      	ldr	r3, [sp, #4]
   12752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12756:	bf00      	nop
   12758:	b003      	add	sp, #12
   1275a:	f85d fb04 	ldr.w	pc, [sp], #4
   1275e:	bf00      	nop
   12760:	1fff9538 	.word	0x1fff9538
   12764:	1fff9534 	.word	0x1fff9534

00012768 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   12768:	b500      	push	{lr}
   1276a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1276c:	f7ee fa54 	bl	c18 <Sys_GetCoreID>
   12770:	4603      	mov	r3, r0
   12772:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   12774:	4a0d      	ldr	r2, [pc, #52]	; (127ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   12776:	9b01      	ldr	r3, [sp, #4]
   12778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1277c:	1e5a      	subs	r2, r3, #1
   1277e:	490b      	ldr	r1, [pc, #44]	; (127ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   12780:	9b01      	ldr	r3, [sp, #4]
   12782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   12786:	4a0a      	ldr	r2, [pc, #40]	; (127b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   12788:	9b01      	ldr	r3, [sp, #4]
   1278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1278e:	f003 0301 	and.w	r3, r3, #1
   12792:	2b00      	cmp	r3, #0
   12794:	d106      	bne.n	127a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   12796:	4a05      	ldr	r2, [pc, #20]	; (127ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   12798:	9b01      	ldr	r3, [sp, #4]
   1279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1279e:	2b00      	cmp	r3, #0
   127a0:	d100      	bne.n	127a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127a4:	bf00      	nop
   127a6:	b003      	add	sp, #12
   127a8:	f85d fb04 	ldr.w	pc, [sp], #4
   127ac:	1fff9538 	.word	0x1fff9538
   127b0:	1fff9534 	.word	0x1fff9534

000127b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   127b4:	b500      	push	{lr}
   127b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127b8:	f7ee fa2e 	bl	c18 <Sys_GetCoreID>
   127bc:	4603      	mov	r3, r0
   127be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   127c0:	4a10      	ldr	r2, [pc, #64]	; (12804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   127c2:	9b01      	ldr	r3, [sp, #4]
   127c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c8:	2b00      	cmp	r3, #0
   127ca:	d10d      	bne.n	127e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127cc:	f7ee f94c 	bl	a68 <Port_schm_read_msr>
   127d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127d2:	9b00      	ldr	r3, [sp, #0]
   127d4:	f003 0301 	and.w	r3, r3, #1
   127d8:	2b00      	cmp	r3, #0
   127da:	d100      	bne.n	127de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   127de:	490a      	ldr	r1, [pc, #40]	; (12808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   127e0:	9b01      	ldr	r3, [sp, #4]
   127e2:	9a00      	ldr	r2, [sp, #0]
   127e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   127e8:	4a06      	ldr	r2, [pc, #24]	; (12804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   127ea:	9b01      	ldr	r3, [sp, #4]
   127ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f0:	1c5a      	adds	r2, r3, #1
   127f2:	4904      	ldr	r1, [pc, #16]	; (12804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   127f4:	9b01      	ldr	r3, [sp, #4]
   127f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127fa:	bf00      	nop
   127fc:	b003      	add	sp, #12
   127fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12802:	bf00      	nop
   12804:	1fff9540 	.word	0x1fff9540
   12808:	1fff953c 	.word	0x1fff953c

0001280c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   1280c:	b500      	push	{lr}
   1280e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12810:	f7ee fa02 	bl	c18 <Sys_GetCoreID>
   12814:	4603      	mov	r3, r0
   12816:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   12818:	4a0d      	ldr	r2, [pc, #52]	; (12850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   1281a:	9b01      	ldr	r3, [sp, #4]
   1281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12820:	1e5a      	subs	r2, r3, #1
   12822:	490b      	ldr	r1, [pc, #44]	; (12850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   12824:	9b01      	ldr	r3, [sp, #4]
   12826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   1282a:	4a0a      	ldr	r2, [pc, #40]	; (12854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   1282c:	9b01      	ldr	r3, [sp, #4]
   1282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12832:	f003 0301 	and.w	r3, r3, #1
   12836:	2b00      	cmp	r3, #0
   12838:	d106      	bne.n	12848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   1283a:	4a05      	ldr	r2, [pc, #20]	; (12850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   1283c:	9b01      	ldr	r3, [sp, #4]
   1283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12842:	2b00      	cmp	r3, #0
   12844:	d100      	bne.n	12848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12846:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12848:	bf00      	nop
   1284a:	b003      	add	sp, #12
   1284c:	f85d fb04 	ldr.w	pc, [sp], #4
   12850:	1fff9540 	.word	0x1fff9540
   12854:	1fff953c 	.word	0x1fff953c

00012858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   12858:	b500      	push	{lr}
   1285a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1285c:	f7ee f9dc 	bl	c18 <Sys_GetCoreID>
   12860:	4603      	mov	r3, r0
   12862:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   12864:	4a10      	ldr	r2, [pc, #64]	; (128a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   12866:	9b01      	ldr	r3, [sp, #4]
   12868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1286c:	2b00      	cmp	r3, #0
   1286e:	d10d      	bne.n	1288c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12870:	f7ee f8fa 	bl	a68 <Port_schm_read_msr>
   12874:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12876:	9b00      	ldr	r3, [sp, #0]
   12878:	f003 0301 	and.w	r3, r3, #1
   1287c:	2b00      	cmp	r3, #0
   1287e:	d100      	bne.n	12882 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12880:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   12882:	490a      	ldr	r1, [pc, #40]	; (128ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   12884:	9b01      	ldr	r3, [sp, #4]
   12886:	9a00      	ldr	r2, [sp, #0]
   12888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   1288c:	4a06      	ldr	r2, [pc, #24]	; (128a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1288e:	9b01      	ldr	r3, [sp, #4]
   12890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12894:	1c5a      	adds	r2, r3, #1
   12896:	4904      	ldr	r1, [pc, #16]	; (128a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   12898:	9b01      	ldr	r3, [sp, #4]
   1289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1289e:	bf00      	nop
   128a0:	b003      	add	sp, #12
   128a2:	f85d fb04 	ldr.w	pc, [sp], #4
   128a6:	bf00      	nop
   128a8:	1fff9548 	.word	0x1fff9548
   128ac:	1fff9544 	.word	0x1fff9544

000128b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   128b0:	b500      	push	{lr}
   128b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128b4:	f7ee f9b0 	bl	c18 <Sys_GetCoreID>
   128b8:	4603      	mov	r3, r0
   128ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   128bc:	4a0d      	ldr	r2, [pc, #52]	; (128f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   128be:	9b01      	ldr	r3, [sp, #4]
   128c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128c4:	1e5a      	subs	r2, r3, #1
   128c6:	490b      	ldr	r1, [pc, #44]	; (128f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   128c8:	9b01      	ldr	r3, [sp, #4]
   128ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   128ce:	4a0a      	ldr	r2, [pc, #40]	; (128f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   128d0:	9b01      	ldr	r3, [sp, #4]
   128d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128d6:	f003 0301 	and.w	r3, r3, #1
   128da:	2b00      	cmp	r3, #0
   128dc:	d106      	bne.n	128ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   128de:	4a05      	ldr	r2, [pc, #20]	; (128f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   128e0:	9b01      	ldr	r3, [sp, #4]
   128e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e6:	2b00      	cmp	r3, #0
   128e8:	d100      	bne.n	128ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128ec:	bf00      	nop
   128ee:	b003      	add	sp, #12
   128f0:	f85d fb04 	ldr.w	pc, [sp], #4
   128f4:	1fff9548 	.word	0x1fff9548
   128f8:	1fff9544 	.word	0x1fff9544

000128fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   128fc:	b500      	push	{lr}
   128fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12900:	f7ee f98a 	bl	c18 <Sys_GetCoreID>
   12904:	4603      	mov	r3, r0
   12906:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   12908:	4a10      	ldr	r2, [pc, #64]	; (1294c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1290a:	9b01      	ldr	r3, [sp, #4]
   1290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12910:	2b00      	cmp	r3, #0
   12912:	d10d      	bne.n	12930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12914:	f7ee f8a8 	bl	a68 <Port_schm_read_msr>
   12918:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1291a:	9b00      	ldr	r3, [sp, #0]
   1291c:	f003 0301 	and.w	r3, r3, #1
   12920:	2b00      	cmp	r3, #0
   12922:	d100      	bne.n	12926 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12924:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   12926:	490a      	ldr	r1, [pc, #40]	; (12950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   12928:	9b01      	ldr	r3, [sp, #4]
   1292a:	9a00      	ldr	r2, [sp, #0]
   1292c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   12930:	4a06      	ldr	r2, [pc, #24]	; (1294c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   12932:	9b01      	ldr	r3, [sp, #4]
   12934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12938:	1c5a      	adds	r2, r3, #1
   1293a:	4904      	ldr	r1, [pc, #16]	; (1294c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1293c:	9b01      	ldr	r3, [sp, #4]
   1293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12942:	bf00      	nop
   12944:	b003      	add	sp, #12
   12946:	f85d fb04 	ldr.w	pc, [sp], #4
   1294a:	bf00      	nop
   1294c:	1fff9550 	.word	0x1fff9550
   12950:	1fff954c 	.word	0x1fff954c

00012954 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   12954:	b500      	push	{lr}
   12956:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12958:	f7ee f95e 	bl	c18 <Sys_GetCoreID>
   1295c:	4603      	mov	r3, r0
   1295e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   12960:	4a0d      	ldr	r2, [pc, #52]	; (12998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   12962:	9b01      	ldr	r3, [sp, #4]
   12964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12968:	1e5a      	subs	r2, r3, #1
   1296a:	490b      	ldr	r1, [pc, #44]	; (12998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1296c:	9b01      	ldr	r3, [sp, #4]
   1296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   12972:	4a0a      	ldr	r2, [pc, #40]	; (1299c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   12974:	9b01      	ldr	r3, [sp, #4]
   12976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1297a:	f003 0301 	and.w	r3, r3, #1
   1297e:	2b00      	cmp	r3, #0
   12980:	d106      	bne.n	12990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   12982:	4a05      	ldr	r2, [pc, #20]	; (12998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   12984:	9b01      	ldr	r3, [sp, #4]
   12986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1298a:	2b00      	cmp	r3, #0
   1298c:	d100      	bne.n	12990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1298e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12990:	bf00      	nop
   12992:	b003      	add	sp, #12
   12994:	f85d fb04 	ldr.w	pc, [sp], #4
   12998:	1fff9550 	.word	0x1fff9550
   1299c:	1fff954c 	.word	0x1fff954c

000129a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   129a0:	b500      	push	{lr}
   129a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129a4:	f7ee f938 	bl	c18 <Sys_GetCoreID>
   129a8:	4603      	mov	r3, r0
   129aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   129ac:	4a10      	ldr	r2, [pc, #64]	; (129f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   129ae:	9b01      	ldr	r3, [sp, #4]
   129b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b4:	2b00      	cmp	r3, #0
   129b6:	d10d      	bne.n	129d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129b8:	f7ee f856 	bl	a68 <Port_schm_read_msr>
   129bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129be:	9b00      	ldr	r3, [sp, #0]
   129c0:	f003 0301 	and.w	r3, r3, #1
   129c4:	2b00      	cmp	r3, #0
   129c6:	d100      	bne.n	129ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   129ca:	490a      	ldr	r1, [pc, #40]	; (129f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   129cc:	9b01      	ldr	r3, [sp, #4]
   129ce:	9a00      	ldr	r2, [sp, #0]
   129d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   129d4:	4a06      	ldr	r2, [pc, #24]	; (129f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   129d6:	9b01      	ldr	r3, [sp, #4]
   129d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129dc:	1c5a      	adds	r2, r3, #1
   129de:	4904      	ldr	r1, [pc, #16]	; (129f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   129e0:	9b01      	ldr	r3, [sp, #4]
   129e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129e6:	bf00      	nop
   129e8:	b003      	add	sp, #12
   129ea:	f85d fb04 	ldr.w	pc, [sp], #4
   129ee:	bf00      	nop
   129f0:	1fff9558 	.word	0x1fff9558
   129f4:	1fff9554 	.word	0x1fff9554

000129f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   129f8:	b500      	push	{lr}
   129fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129fc:	f7ee f90c 	bl	c18 <Sys_GetCoreID>
   12a00:	4603      	mov	r3, r0
   12a02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   12a04:	4a0d      	ldr	r2, [pc, #52]	; (12a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   12a06:	9b01      	ldr	r3, [sp, #4]
   12a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a0c:	1e5a      	subs	r2, r3, #1
   12a0e:	490b      	ldr	r1, [pc, #44]	; (12a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   12a10:	9b01      	ldr	r3, [sp, #4]
   12a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   12a16:	4a0a      	ldr	r2, [pc, #40]	; (12a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   12a18:	9b01      	ldr	r3, [sp, #4]
   12a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a1e:	f003 0301 	and.w	r3, r3, #1
   12a22:	2b00      	cmp	r3, #0
   12a24:	d106      	bne.n	12a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   12a26:	4a05      	ldr	r2, [pc, #20]	; (12a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   12a28:	9b01      	ldr	r3, [sp, #4]
   12a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a2e:	2b00      	cmp	r3, #0
   12a30:	d100      	bne.n	12a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a34:	bf00      	nop
   12a36:	b003      	add	sp, #12
   12a38:	f85d fb04 	ldr.w	pc, [sp], #4
   12a3c:	1fff9558 	.word	0x1fff9558
   12a40:	1fff9554 	.word	0x1fff9554

00012a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   12a44:	b500      	push	{lr}
   12a46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a48:	f7ee f8e6 	bl	c18 <Sys_GetCoreID>
   12a4c:	4603      	mov	r3, r0
   12a4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   12a50:	4a10      	ldr	r2, [pc, #64]	; (12a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   12a52:	9b01      	ldr	r3, [sp, #4]
   12a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a58:	2b00      	cmp	r3, #0
   12a5a:	d10d      	bne.n	12a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a5c:	f7ee f804 	bl	a68 <Port_schm_read_msr>
   12a60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a62:	9b00      	ldr	r3, [sp, #0]
   12a64:	f003 0301 	and.w	r3, r3, #1
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d100      	bne.n	12a6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   12a6e:	490a      	ldr	r1, [pc, #40]	; (12a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   12a70:	9b01      	ldr	r3, [sp, #4]
   12a72:	9a00      	ldr	r2, [sp, #0]
   12a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   12a78:	4a06      	ldr	r2, [pc, #24]	; (12a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   12a7a:	9b01      	ldr	r3, [sp, #4]
   12a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a80:	1c5a      	adds	r2, r3, #1
   12a82:	4904      	ldr	r1, [pc, #16]	; (12a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   12a84:	9b01      	ldr	r3, [sp, #4]
   12a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a8a:	bf00      	nop
   12a8c:	b003      	add	sp, #12
   12a8e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a92:	bf00      	nop
   12a94:	1fff9560 	.word	0x1fff9560
   12a98:	1fff955c 	.word	0x1fff955c

00012a9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   12a9c:	b500      	push	{lr}
   12a9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12aa0:	f7ee f8ba 	bl	c18 <Sys_GetCoreID>
   12aa4:	4603      	mov	r3, r0
   12aa6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   12aa8:	4a0d      	ldr	r2, [pc, #52]	; (12ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   12aaa:	9b01      	ldr	r3, [sp, #4]
   12aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ab0:	1e5a      	subs	r2, r3, #1
   12ab2:	490b      	ldr	r1, [pc, #44]	; (12ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   12ab4:	9b01      	ldr	r3, [sp, #4]
   12ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   12aba:	4a0a      	ldr	r2, [pc, #40]	; (12ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   12abc:	9b01      	ldr	r3, [sp, #4]
   12abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac2:	f003 0301 	and.w	r3, r3, #1
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	d106      	bne.n	12ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   12aca:	4a05      	ldr	r2, [pc, #20]	; (12ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   12acc:	9b01      	ldr	r3, [sp, #4]
   12ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	d100      	bne.n	12ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ad6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ad8:	bf00      	nop
   12ada:	b003      	add	sp, #12
   12adc:	f85d fb04 	ldr.w	pc, [sp], #4
   12ae0:	1fff9560 	.word	0x1fff9560
   12ae4:	1fff955c 	.word	0x1fff955c

00012ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   12ae8:	b500      	push	{lr}
   12aea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12aec:	f7ee f894 	bl	c18 <Sys_GetCoreID>
   12af0:	4603      	mov	r3, r0
   12af2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   12af4:	4a10      	ldr	r2, [pc, #64]	; (12b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   12af6:	9b01      	ldr	r3, [sp, #4]
   12af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d10d      	bne.n	12b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b00:	f7ed ffb2 	bl	a68 <Port_schm_read_msr>
   12b04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b06:	9b00      	ldr	r3, [sp, #0]
   12b08:	f003 0301 	and.w	r3, r3, #1
   12b0c:	2b00      	cmp	r3, #0
   12b0e:	d100      	bne.n	12b12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   12b12:	490a      	ldr	r1, [pc, #40]	; (12b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   12b14:	9b01      	ldr	r3, [sp, #4]
   12b16:	9a00      	ldr	r2, [sp, #0]
   12b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   12b1c:	4a06      	ldr	r2, [pc, #24]	; (12b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   12b1e:	9b01      	ldr	r3, [sp, #4]
   12b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b24:	1c5a      	adds	r2, r3, #1
   12b26:	4904      	ldr	r1, [pc, #16]	; (12b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   12b28:	9b01      	ldr	r3, [sp, #4]
   12b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b2e:	bf00      	nop
   12b30:	b003      	add	sp, #12
   12b32:	f85d fb04 	ldr.w	pc, [sp], #4
   12b36:	bf00      	nop
   12b38:	1fff9568 	.word	0x1fff9568
   12b3c:	1fff9564 	.word	0x1fff9564

00012b40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   12b40:	b500      	push	{lr}
   12b42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b44:	f7ee f868 	bl	c18 <Sys_GetCoreID>
   12b48:	4603      	mov	r3, r0
   12b4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   12b4c:	4a0d      	ldr	r2, [pc, #52]	; (12b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   12b4e:	9b01      	ldr	r3, [sp, #4]
   12b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b54:	1e5a      	subs	r2, r3, #1
   12b56:	490b      	ldr	r1, [pc, #44]	; (12b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   12b58:	9b01      	ldr	r3, [sp, #4]
   12b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   12b5e:	4a0a      	ldr	r2, [pc, #40]	; (12b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   12b60:	9b01      	ldr	r3, [sp, #4]
   12b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b66:	f003 0301 	and.w	r3, r3, #1
   12b6a:	2b00      	cmp	r3, #0
   12b6c:	d106      	bne.n	12b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   12b6e:	4a05      	ldr	r2, [pc, #20]	; (12b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   12b70:	9b01      	ldr	r3, [sp, #4]
   12b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b76:	2b00      	cmp	r3, #0
   12b78:	d100      	bne.n	12b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b7c:	bf00      	nop
   12b7e:	b003      	add	sp, #12
   12b80:	f85d fb04 	ldr.w	pc, [sp], #4
   12b84:	1fff9568 	.word	0x1fff9568
   12b88:	1fff9564 	.word	0x1fff9564

00012b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   12b8c:	b500      	push	{lr}
   12b8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b90:	f7ee f842 	bl	c18 <Sys_GetCoreID>
   12b94:	4603      	mov	r3, r0
   12b96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   12b98:	4a10      	ldr	r2, [pc, #64]	; (12bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   12b9a:	9b01      	ldr	r3, [sp, #4]
   12b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	d10d      	bne.n	12bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ba4:	f7ed ff60 	bl	a68 <Port_schm_read_msr>
   12ba8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12baa:	9b00      	ldr	r3, [sp, #0]
   12bac:	f003 0301 	and.w	r3, r3, #1
   12bb0:	2b00      	cmp	r3, #0
   12bb2:	d100      	bne.n	12bb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   12bb6:	490a      	ldr	r1, [pc, #40]	; (12be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   12bb8:	9b01      	ldr	r3, [sp, #4]
   12bba:	9a00      	ldr	r2, [sp, #0]
   12bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   12bc0:	4a06      	ldr	r2, [pc, #24]	; (12bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   12bc2:	9b01      	ldr	r3, [sp, #4]
   12bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bc8:	1c5a      	adds	r2, r3, #1
   12bca:	4904      	ldr	r1, [pc, #16]	; (12bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   12bcc:	9b01      	ldr	r3, [sp, #4]
   12bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bd2:	bf00      	nop
   12bd4:	b003      	add	sp, #12
   12bd6:	f85d fb04 	ldr.w	pc, [sp], #4
   12bda:	bf00      	nop
   12bdc:	1fff9570 	.word	0x1fff9570
   12be0:	1fff956c 	.word	0x1fff956c

00012be4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   12be4:	b500      	push	{lr}
   12be6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12be8:	f7ee f816 	bl	c18 <Sys_GetCoreID>
   12bec:	4603      	mov	r3, r0
   12bee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   12bf0:	4a0d      	ldr	r2, [pc, #52]	; (12c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   12bf2:	9b01      	ldr	r3, [sp, #4]
   12bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf8:	1e5a      	subs	r2, r3, #1
   12bfa:	490b      	ldr	r1, [pc, #44]	; (12c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   12bfc:	9b01      	ldr	r3, [sp, #4]
   12bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   12c02:	4a0a      	ldr	r2, [pc, #40]	; (12c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   12c04:	9b01      	ldr	r3, [sp, #4]
   12c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c0a:	f003 0301 	and.w	r3, r3, #1
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d106      	bne.n	12c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   12c12:	4a05      	ldr	r2, [pc, #20]	; (12c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   12c14:	9b01      	ldr	r3, [sp, #4]
   12c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c1a:	2b00      	cmp	r3, #0
   12c1c:	d100      	bne.n	12c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c20:	bf00      	nop
   12c22:	b003      	add	sp, #12
   12c24:	f85d fb04 	ldr.w	pc, [sp], #4
   12c28:	1fff9570 	.word	0x1fff9570
   12c2c:	1fff956c 	.word	0x1fff956c

00012c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   12c30:	b500      	push	{lr}
   12c32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c34:	f7ed fff0 	bl	c18 <Sys_GetCoreID>
   12c38:	4603      	mov	r3, r0
   12c3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   12c3c:	4a10      	ldr	r2, [pc, #64]	; (12c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   12c3e:	9b01      	ldr	r3, [sp, #4]
   12c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c44:	2b00      	cmp	r3, #0
   12c46:	d10d      	bne.n	12c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c48:	f7ed ff0e 	bl	a68 <Port_schm_read_msr>
   12c4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c4e:	9b00      	ldr	r3, [sp, #0]
   12c50:	f003 0301 	and.w	r3, r3, #1
   12c54:	2b00      	cmp	r3, #0
   12c56:	d100      	bne.n	12c5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   12c5a:	490a      	ldr	r1, [pc, #40]	; (12c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   12c5c:	9b01      	ldr	r3, [sp, #4]
   12c5e:	9a00      	ldr	r2, [sp, #0]
   12c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   12c64:	4a06      	ldr	r2, [pc, #24]	; (12c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   12c66:	9b01      	ldr	r3, [sp, #4]
   12c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c6c:	1c5a      	adds	r2, r3, #1
   12c6e:	4904      	ldr	r1, [pc, #16]	; (12c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   12c70:	9b01      	ldr	r3, [sp, #4]
   12c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c76:	bf00      	nop
   12c78:	b003      	add	sp, #12
   12c7a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c7e:	bf00      	nop
   12c80:	1fff9578 	.word	0x1fff9578
   12c84:	1fff9574 	.word	0x1fff9574

00012c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   12c88:	b500      	push	{lr}
   12c8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c8c:	f7ed ffc4 	bl	c18 <Sys_GetCoreID>
   12c90:	4603      	mov	r3, r0
   12c92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   12c94:	4a0d      	ldr	r2, [pc, #52]	; (12ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   12c96:	9b01      	ldr	r3, [sp, #4]
   12c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c9c:	1e5a      	subs	r2, r3, #1
   12c9e:	490b      	ldr	r1, [pc, #44]	; (12ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   12ca0:	9b01      	ldr	r3, [sp, #4]
   12ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   12ca6:	4a0a      	ldr	r2, [pc, #40]	; (12cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   12ca8:	9b01      	ldr	r3, [sp, #4]
   12caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cae:	f003 0301 	and.w	r3, r3, #1
   12cb2:	2b00      	cmp	r3, #0
   12cb4:	d106      	bne.n	12cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   12cb6:	4a05      	ldr	r2, [pc, #20]	; (12ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   12cb8:	9b01      	ldr	r3, [sp, #4]
   12cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	d100      	bne.n	12cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12cc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cc4:	bf00      	nop
   12cc6:	b003      	add	sp, #12
   12cc8:	f85d fb04 	ldr.w	pc, [sp], #4
   12ccc:	1fff9578 	.word	0x1fff9578
   12cd0:	1fff9574 	.word	0x1fff9574

00012cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   12cd4:	b500      	push	{lr}
   12cd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cd8:	f7ed ff9e 	bl	c18 <Sys_GetCoreID>
   12cdc:	4603      	mov	r3, r0
   12cde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   12ce0:	4a10      	ldr	r2, [pc, #64]	; (12d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   12ce2:	9b01      	ldr	r3, [sp, #4]
   12ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d10d      	bne.n	12d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cec:	f7ed febc 	bl	a68 <Port_schm_read_msr>
   12cf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cf2:	9b00      	ldr	r3, [sp, #0]
   12cf4:	f003 0301 	and.w	r3, r3, #1
   12cf8:	2b00      	cmp	r3, #0
   12cfa:	d100      	bne.n	12cfe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12cfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   12cfe:	490a      	ldr	r1, [pc, #40]	; (12d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   12d00:	9b01      	ldr	r3, [sp, #4]
   12d02:	9a00      	ldr	r2, [sp, #0]
   12d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   12d08:	4a06      	ldr	r2, [pc, #24]	; (12d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   12d0a:	9b01      	ldr	r3, [sp, #4]
   12d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d10:	1c5a      	adds	r2, r3, #1
   12d12:	4904      	ldr	r1, [pc, #16]	; (12d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   12d14:	9b01      	ldr	r3, [sp, #4]
   12d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d1a:	bf00      	nop
   12d1c:	b003      	add	sp, #12
   12d1e:	f85d fb04 	ldr.w	pc, [sp], #4
   12d22:	bf00      	nop
   12d24:	1fff9580 	.word	0x1fff9580
   12d28:	1fff957c 	.word	0x1fff957c

00012d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   12d2c:	b500      	push	{lr}
   12d2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d30:	f7ed ff72 	bl	c18 <Sys_GetCoreID>
   12d34:	4603      	mov	r3, r0
   12d36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   12d38:	4a0d      	ldr	r2, [pc, #52]	; (12d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   12d3a:	9b01      	ldr	r3, [sp, #4]
   12d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d40:	1e5a      	subs	r2, r3, #1
   12d42:	490b      	ldr	r1, [pc, #44]	; (12d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   12d44:	9b01      	ldr	r3, [sp, #4]
   12d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   12d4a:	4a0a      	ldr	r2, [pc, #40]	; (12d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   12d4c:	9b01      	ldr	r3, [sp, #4]
   12d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d52:	f003 0301 	and.w	r3, r3, #1
   12d56:	2b00      	cmp	r3, #0
   12d58:	d106      	bne.n	12d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   12d5a:	4a05      	ldr	r2, [pc, #20]	; (12d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   12d5c:	9b01      	ldr	r3, [sp, #4]
   12d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d62:	2b00      	cmp	r3, #0
   12d64:	d100      	bne.n	12d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d68:	bf00      	nop
   12d6a:	b003      	add	sp, #12
   12d6c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d70:	1fff9580 	.word	0x1fff9580
   12d74:	1fff957c 	.word	0x1fff957c

00012d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   12d78:	b500      	push	{lr}
   12d7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d7c:	f7ed ff4c 	bl	c18 <Sys_GetCoreID>
   12d80:	4603      	mov	r3, r0
   12d82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   12d84:	4a10      	ldr	r2, [pc, #64]	; (12dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   12d86:	9b01      	ldr	r3, [sp, #4]
   12d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d8c:	2b00      	cmp	r3, #0
   12d8e:	d10d      	bne.n	12dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d90:	f7ed fe6a 	bl	a68 <Port_schm_read_msr>
   12d94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d96:	9b00      	ldr	r3, [sp, #0]
   12d98:	f003 0301 	and.w	r3, r3, #1
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	d100      	bne.n	12da2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12da0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   12da2:	490a      	ldr	r1, [pc, #40]	; (12dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   12da4:	9b01      	ldr	r3, [sp, #4]
   12da6:	9a00      	ldr	r2, [sp, #0]
   12da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   12dac:	4a06      	ldr	r2, [pc, #24]	; (12dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   12dae:	9b01      	ldr	r3, [sp, #4]
   12db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12db4:	1c5a      	adds	r2, r3, #1
   12db6:	4904      	ldr	r1, [pc, #16]	; (12dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   12db8:	9b01      	ldr	r3, [sp, #4]
   12dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12dbe:	bf00      	nop
   12dc0:	b003      	add	sp, #12
   12dc2:	f85d fb04 	ldr.w	pc, [sp], #4
   12dc6:	bf00      	nop
   12dc8:	1fff9588 	.word	0x1fff9588
   12dcc:	1fff9584 	.word	0x1fff9584

00012dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   12dd0:	b500      	push	{lr}
   12dd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dd4:	f7ed ff20 	bl	c18 <Sys_GetCoreID>
   12dd8:	4603      	mov	r3, r0
   12dda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   12ddc:	4a0d      	ldr	r2, [pc, #52]	; (12e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   12dde:	9b01      	ldr	r3, [sp, #4]
   12de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12de4:	1e5a      	subs	r2, r3, #1
   12de6:	490b      	ldr	r1, [pc, #44]	; (12e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   12de8:	9b01      	ldr	r3, [sp, #4]
   12dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   12dee:	4a0a      	ldr	r2, [pc, #40]	; (12e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   12df0:	9b01      	ldr	r3, [sp, #4]
   12df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12df6:	f003 0301 	and.w	r3, r3, #1
   12dfa:	2b00      	cmp	r3, #0
   12dfc:	d106      	bne.n	12e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   12dfe:	4a05      	ldr	r2, [pc, #20]	; (12e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   12e00:	9b01      	ldr	r3, [sp, #4]
   12e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e06:	2b00      	cmp	r3, #0
   12e08:	d100      	bne.n	12e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e0c:	bf00      	nop
   12e0e:	b003      	add	sp, #12
   12e10:	f85d fb04 	ldr.w	pc, [sp], #4
   12e14:	1fff9588 	.word	0x1fff9588
   12e18:	1fff9584 	.word	0x1fff9584

00012e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   12e1c:	b500      	push	{lr}
   12e1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e20:	f7ed fefa 	bl	c18 <Sys_GetCoreID>
   12e24:	4603      	mov	r3, r0
   12e26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   12e28:	4a10      	ldr	r2, [pc, #64]	; (12e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   12e2a:	9b01      	ldr	r3, [sp, #4]
   12e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e30:	2b00      	cmp	r3, #0
   12e32:	d10d      	bne.n	12e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e34:	f7ed fe18 	bl	a68 <Port_schm_read_msr>
   12e38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e3a:	9b00      	ldr	r3, [sp, #0]
   12e3c:	f003 0301 	and.w	r3, r3, #1
   12e40:	2b00      	cmp	r3, #0
   12e42:	d100      	bne.n	12e46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   12e46:	490a      	ldr	r1, [pc, #40]	; (12e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   12e48:	9b01      	ldr	r3, [sp, #4]
   12e4a:	9a00      	ldr	r2, [sp, #0]
   12e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   12e50:	4a06      	ldr	r2, [pc, #24]	; (12e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   12e52:	9b01      	ldr	r3, [sp, #4]
   12e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e58:	1c5a      	adds	r2, r3, #1
   12e5a:	4904      	ldr	r1, [pc, #16]	; (12e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   12e5c:	9b01      	ldr	r3, [sp, #4]
   12e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e62:	bf00      	nop
   12e64:	b003      	add	sp, #12
   12e66:	f85d fb04 	ldr.w	pc, [sp], #4
   12e6a:	bf00      	nop
   12e6c:	1fff9590 	.word	0x1fff9590
   12e70:	1fff958c 	.word	0x1fff958c

00012e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   12e74:	b500      	push	{lr}
   12e76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e78:	f7ed fece 	bl	c18 <Sys_GetCoreID>
   12e7c:	4603      	mov	r3, r0
   12e7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   12e80:	4a0d      	ldr	r2, [pc, #52]	; (12eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   12e82:	9b01      	ldr	r3, [sp, #4]
   12e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e88:	1e5a      	subs	r2, r3, #1
   12e8a:	490b      	ldr	r1, [pc, #44]	; (12eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   12e8c:	9b01      	ldr	r3, [sp, #4]
   12e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   12e92:	4a0a      	ldr	r2, [pc, #40]	; (12ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   12e94:	9b01      	ldr	r3, [sp, #4]
   12e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e9a:	f003 0301 	and.w	r3, r3, #1
   12e9e:	2b00      	cmp	r3, #0
   12ea0:	d106      	bne.n	12eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   12ea2:	4a05      	ldr	r2, [pc, #20]	; (12eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eaa:	2b00      	cmp	r3, #0
   12eac:	d100      	bne.n	12eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12eae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12eb0:	bf00      	nop
   12eb2:	b003      	add	sp, #12
   12eb4:	f85d fb04 	ldr.w	pc, [sp], #4
   12eb8:	1fff9590 	.word	0x1fff9590
   12ebc:	1fff958c 	.word	0x1fff958c

00012ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   12ec0:	b500      	push	{lr}
   12ec2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ec4:	f7ed fea8 	bl	c18 <Sys_GetCoreID>
   12ec8:	4603      	mov	r3, r0
   12eca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   12ecc:	4a10      	ldr	r2, [pc, #64]	; (12f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   12ece:	9b01      	ldr	r3, [sp, #4]
   12ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed4:	2b00      	cmp	r3, #0
   12ed6:	d10d      	bne.n	12ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ed8:	f7ed fdc6 	bl	a68 <Port_schm_read_msr>
   12edc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ede:	9b00      	ldr	r3, [sp, #0]
   12ee0:	f003 0301 	and.w	r3, r3, #1
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d100      	bne.n	12eea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ee8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   12eea:	490a      	ldr	r1, [pc, #40]	; (12f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   12eec:	9b01      	ldr	r3, [sp, #4]
   12eee:	9a00      	ldr	r2, [sp, #0]
   12ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   12ef4:	4a06      	ldr	r2, [pc, #24]	; (12f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   12ef6:	9b01      	ldr	r3, [sp, #4]
   12ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12efc:	1c5a      	adds	r2, r3, #1
   12efe:	4904      	ldr	r1, [pc, #16]	; (12f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   12f00:	9b01      	ldr	r3, [sp, #4]
   12f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f06:	bf00      	nop
   12f08:	b003      	add	sp, #12
   12f0a:	f85d fb04 	ldr.w	pc, [sp], #4
   12f0e:	bf00      	nop
   12f10:	1fff9598 	.word	0x1fff9598
   12f14:	1fff9594 	.word	0x1fff9594

00012f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   12f18:	b500      	push	{lr}
   12f1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f1c:	f7ed fe7c 	bl	c18 <Sys_GetCoreID>
   12f20:	4603      	mov	r3, r0
   12f22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   12f24:	4a0d      	ldr	r2, [pc, #52]	; (12f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   12f26:	9b01      	ldr	r3, [sp, #4]
   12f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f2c:	1e5a      	subs	r2, r3, #1
   12f2e:	490b      	ldr	r1, [pc, #44]	; (12f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   12f30:	9b01      	ldr	r3, [sp, #4]
   12f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   12f36:	4a0a      	ldr	r2, [pc, #40]	; (12f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   12f38:	9b01      	ldr	r3, [sp, #4]
   12f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f3e:	f003 0301 	and.w	r3, r3, #1
   12f42:	2b00      	cmp	r3, #0
   12f44:	d106      	bne.n	12f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   12f46:	4a05      	ldr	r2, [pc, #20]	; (12f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   12f48:	9b01      	ldr	r3, [sp, #4]
   12f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f4e:	2b00      	cmp	r3, #0
   12f50:	d100      	bne.n	12f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f54:	bf00      	nop
   12f56:	b003      	add	sp, #12
   12f58:	f85d fb04 	ldr.w	pc, [sp], #4
   12f5c:	1fff9598 	.word	0x1fff9598
   12f60:	1fff9594 	.word	0x1fff9594

00012f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   12f64:	b500      	push	{lr}
   12f66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f68:	f7ed fe56 	bl	c18 <Sys_GetCoreID>
   12f6c:	4603      	mov	r3, r0
   12f6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   12f70:	4a10      	ldr	r2, [pc, #64]	; (12fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   12f72:	9b01      	ldr	r3, [sp, #4]
   12f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f78:	2b00      	cmp	r3, #0
   12f7a:	d10d      	bne.n	12f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f7c:	f7ed fd74 	bl	a68 <Port_schm_read_msr>
   12f80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f82:	9b00      	ldr	r3, [sp, #0]
   12f84:	f003 0301 	and.w	r3, r3, #1
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d100      	bne.n	12f8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   12f8e:	490a      	ldr	r1, [pc, #40]	; (12fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   12f90:	9b01      	ldr	r3, [sp, #4]
   12f92:	9a00      	ldr	r2, [sp, #0]
   12f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   12f98:	4a06      	ldr	r2, [pc, #24]	; (12fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   12f9a:	9b01      	ldr	r3, [sp, #4]
   12f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fa0:	1c5a      	adds	r2, r3, #1
   12fa2:	4904      	ldr	r1, [pc, #16]	; (12fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   12fa4:	9b01      	ldr	r3, [sp, #4]
   12fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12faa:	bf00      	nop
   12fac:	b003      	add	sp, #12
   12fae:	f85d fb04 	ldr.w	pc, [sp], #4
   12fb2:	bf00      	nop
   12fb4:	1fff95a0 	.word	0x1fff95a0
   12fb8:	1fff959c 	.word	0x1fff959c

00012fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   12fbc:	b500      	push	{lr}
   12fbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fc0:	f7ed fe2a 	bl	c18 <Sys_GetCoreID>
   12fc4:	4603      	mov	r3, r0
   12fc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   12fc8:	4a0d      	ldr	r2, [pc, #52]	; (13000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   12fca:	9b01      	ldr	r3, [sp, #4]
   12fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fd0:	1e5a      	subs	r2, r3, #1
   12fd2:	490b      	ldr	r1, [pc, #44]	; (13000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   12fd4:	9b01      	ldr	r3, [sp, #4]
   12fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   12fda:	4a0a      	ldr	r2, [pc, #40]	; (13004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   12fdc:	9b01      	ldr	r3, [sp, #4]
   12fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fe2:	f003 0301 	and.w	r3, r3, #1
   12fe6:	2b00      	cmp	r3, #0
   12fe8:	d106      	bne.n	12ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   12fea:	4a05      	ldr	r2, [pc, #20]	; (13000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   12fec:	9b01      	ldr	r3, [sp, #4]
   12fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ff2:	2b00      	cmp	r3, #0
   12ff4:	d100      	bne.n	12ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ff6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ff8:	bf00      	nop
   12ffa:	b003      	add	sp, #12
   12ffc:	f85d fb04 	ldr.w	pc, [sp], #4
   13000:	1fff95a0 	.word	0x1fff95a0
   13004:	1fff959c 	.word	0x1fff959c

00013008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   13008:	b500      	push	{lr}
   1300a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1300c:	f7ed fe04 	bl	c18 <Sys_GetCoreID>
   13010:	4603      	mov	r3, r0
   13012:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   13014:	4a10      	ldr	r2, [pc, #64]	; (13058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   13016:	9b01      	ldr	r3, [sp, #4]
   13018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1301c:	2b00      	cmp	r3, #0
   1301e:	d10d      	bne.n	1303c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13020:	f7ed fd22 	bl	a68 <Port_schm_read_msr>
   13024:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13026:	9b00      	ldr	r3, [sp, #0]
   13028:	f003 0301 	and.w	r3, r3, #1
   1302c:	2b00      	cmp	r3, #0
   1302e:	d100      	bne.n	13032 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13030:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   13032:	490a      	ldr	r1, [pc, #40]	; (1305c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   13034:	9b01      	ldr	r3, [sp, #4]
   13036:	9a00      	ldr	r2, [sp, #0]
   13038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   1303c:	4a06      	ldr	r2, [pc, #24]	; (13058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1303e:	9b01      	ldr	r3, [sp, #4]
   13040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13044:	1c5a      	adds	r2, r3, #1
   13046:	4904      	ldr	r1, [pc, #16]	; (13058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   13048:	9b01      	ldr	r3, [sp, #4]
   1304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1304e:	bf00      	nop
   13050:	b003      	add	sp, #12
   13052:	f85d fb04 	ldr.w	pc, [sp], #4
   13056:	bf00      	nop
   13058:	1fff95a8 	.word	0x1fff95a8
   1305c:	1fff95a4 	.word	0x1fff95a4

00013060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   13060:	b500      	push	{lr}
   13062:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13064:	f7ed fdd8 	bl	c18 <Sys_GetCoreID>
   13068:	4603      	mov	r3, r0
   1306a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   1306c:	4a0d      	ldr	r2, [pc, #52]	; (130a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1306e:	9b01      	ldr	r3, [sp, #4]
   13070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13074:	1e5a      	subs	r2, r3, #1
   13076:	490b      	ldr	r1, [pc, #44]	; (130a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   13078:	9b01      	ldr	r3, [sp, #4]
   1307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1307e:	4a0a      	ldr	r2, [pc, #40]	; (130a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   13080:	9b01      	ldr	r3, [sp, #4]
   13082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13086:	f003 0301 	and.w	r3, r3, #1
   1308a:	2b00      	cmp	r3, #0
   1308c:	d106      	bne.n	1309c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   1308e:	4a05      	ldr	r2, [pc, #20]	; (130a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   13090:	9b01      	ldr	r3, [sp, #4]
   13092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13096:	2b00      	cmp	r3, #0
   13098:	d100      	bne.n	1309c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1309a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1309c:	bf00      	nop
   1309e:	b003      	add	sp, #12
   130a0:	f85d fb04 	ldr.w	pc, [sp], #4
   130a4:	1fff95a8 	.word	0x1fff95a8
   130a8:	1fff95a4 	.word	0x1fff95a4

000130ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   130ac:	b500      	push	{lr}
   130ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130b0:	f7ed fdb2 	bl	c18 <Sys_GetCoreID>
   130b4:	4603      	mov	r3, r0
   130b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   130b8:	4a10      	ldr	r2, [pc, #64]	; (130fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   130ba:	9b01      	ldr	r3, [sp, #4]
   130bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c0:	2b00      	cmp	r3, #0
   130c2:	d10d      	bne.n	130e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130c4:	f7ed fcd0 	bl	a68 <Port_schm_read_msr>
   130c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130ca:	9b00      	ldr	r3, [sp, #0]
   130cc:	f003 0301 	and.w	r3, r3, #1
   130d0:	2b00      	cmp	r3, #0
   130d2:	d100      	bne.n	130d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   130d6:	490a      	ldr	r1, [pc, #40]	; (13100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   130d8:	9b01      	ldr	r3, [sp, #4]
   130da:	9a00      	ldr	r2, [sp, #0]
   130dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   130e0:	4a06      	ldr	r2, [pc, #24]	; (130fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   130e2:	9b01      	ldr	r3, [sp, #4]
   130e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130e8:	1c5a      	adds	r2, r3, #1
   130ea:	4904      	ldr	r1, [pc, #16]	; (130fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   130ec:	9b01      	ldr	r3, [sp, #4]
   130ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130f2:	bf00      	nop
   130f4:	b003      	add	sp, #12
   130f6:	f85d fb04 	ldr.w	pc, [sp], #4
   130fa:	bf00      	nop
   130fc:	1fff95b0 	.word	0x1fff95b0
   13100:	1fff95ac 	.word	0x1fff95ac

00013104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   13104:	b500      	push	{lr}
   13106:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13108:	f7ed fd86 	bl	c18 <Sys_GetCoreID>
   1310c:	4603      	mov	r3, r0
   1310e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   13110:	4a0d      	ldr	r2, [pc, #52]	; (13148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   13112:	9b01      	ldr	r3, [sp, #4]
   13114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13118:	1e5a      	subs	r2, r3, #1
   1311a:	490b      	ldr	r1, [pc, #44]	; (13148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1311c:	9b01      	ldr	r3, [sp, #4]
   1311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   13122:	4a0a      	ldr	r2, [pc, #40]	; (1314c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   13124:	9b01      	ldr	r3, [sp, #4]
   13126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1312a:	f003 0301 	and.w	r3, r3, #1
   1312e:	2b00      	cmp	r3, #0
   13130:	d106      	bne.n	13140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   13132:	4a05      	ldr	r2, [pc, #20]	; (13148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   13134:	9b01      	ldr	r3, [sp, #4]
   13136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1313a:	2b00      	cmp	r3, #0
   1313c:	d100      	bne.n	13140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1313e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13140:	bf00      	nop
   13142:	b003      	add	sp, #12
   13144:	f85d fb04 	ldr.w	pc, [sp], #4
   13148:	1fff95b0 	.word	0x1fff95b0
   1314c:	1fff95ac 	.word	0x1fff95ac

00013150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   13150:	b500      	push	{lr}
   13152:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13154:	f7ed fd60 	bl	c18 <Sys_GetCoreID>
   13158:	4603      	mov	r3, r0
   1315a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   1315c:	4a10      	ldr	r2, [pc, #64]	; (131a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1315e:	9b01      	ldr	r3, [sp, #4]
   13160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13164:	2b00      	cmp	r3, #0
   13166:	d10d      	bne.n	13184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13168:	f7ed fc7e 	bl	a68 <Port_schm_read_msr>
   1316c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1316e:	9b00      	ldr	r3, [sp, #0]
   13170:	f003 0301 	and.w	r3, r3, #1
   13174:	2b00      	cmp	r3, #0
   13176:	d100      	bne.n	1317a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13178:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1317a:	490a      	ldr	r1, [pc, #40]	; (131a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   1317c:	9b01      	ldr	r3, [sp, #4]
   1317e:	9a00      	ldr	r2, [sp, #0]
   13180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   13184:	4a06      	ldr	r2, [pc, #24]	; (131a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   13186:	9b01      	ldr	r3, [sp, #4]
   13188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1318c:	1c5a      	adds	r2, r3, #1
   1318e:	4904      	ldr	r1, [pc, #16]	; (131a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   13190:	9b01      	ldr	r3, [sp, #4]
   13192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13196:	bf00      	nop
   13198:	b003      	add	sp, #12
   1319a:	f85d fb04 	ldr.w	pc, [sp], #4
   1319e:	bf00      	nop
   131a0:	1fff95b8 	.word	0x1fff95b8
   131a4:	1fff95b4 	.word	0x1fff95b4

000131a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   131a8:	b500      	push	{lr}
   131aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131ac:	f7ed fd34 	bl	c18 <Sys_GetCoreID>
   131b0:	4603      	mov	r3, r0
   131b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   131b4:	4a0d      	ldr	r2, [pc, #52]	; (131ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   131b6:	9b01      	ldr	r3, [sp, #4]
   131b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131bc:	1e5a      	subs	r2, r3, #1
   131be:	490b      	ldr	r1, [pc, #44]	; (131ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   131c0:	9b01      	ldr	r3, [sp, #4]
   131c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   131c6:	4a0a      	ldr	r2, [pc, #40]	; (131f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   131c8:	9b01      	ldr	r3, [sp, #4]
   131ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ce:	f003 0301 	and.w	r3, r3, #1
   131d2:	2b00      	cmp	r3, #0
   131d4:	d106      	bne.n	131e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   131d6:	4a05      	ldr	r2, [pc, #20]	; (131ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   131d8:	9b01      	ldr	r3, [sp, #4]
   131da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131de:	2b00      	cmp	r3, #0
   131e0:	d100      	bne.n	131e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131e4:	bf00      	nop
   131e6:	b003      	add	sp, #12
   131e8:	f85d fb04 	ldr.w	pc, [sp], #4
   131ec:	1fff95b8 	.word	0x1fff95b8
   131f0:	1fff95b4 	.word	0x1fff95b4

000131f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   131f4:	b500      	push	{lr}
   131f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131f8:	f7ed fd0e 	bl	c18 <Sys_GetCoreID>
   131fc:	4603      	mov	r3, r0
   131fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   13200:	4a10      	ldr	r2, [pc, #64]	; (13244 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   13202:	9b01      	ldr	r3, [sp, #4]
   13204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13208:	2b00      	cmp	r3, #0
   1320a:	d10d      	bne.n	13228 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1320c:	f7ed fc35 	bl	a7a <Pwm_schm_read_msr>
   13210:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13212:	9b00      	ldr	r3, [sp, #0]
   13214:	f003 0301 	and.w	r3, r3, #1
   13218:	2b00      	cmp	r3, #0
   1321a:	d100      	bne.n	1321e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1321c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1321e:	490a      	ldr	r1, [pc, #40]	; (13248 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   13220:	9b01      	ldr	r3, [sp, #4]
   13222:	9a00      	ldr	r2, [sp, #0]
   13224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   13228:	4a06      	ldr	r2, [pc, #24]	; (13244 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1322a:	9b01      	ldr	r3, [sp, #4]
   1322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13230:	1c5a      	adds	r2, r3, #1
   13232:	4904      	ldr	r1, [pc, #16]	; (13244 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   13234:	9b01      	ldr	r3, [sp, #4]
   13236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1323a:	bf00      	nop
   1323c:	b003      	add	sp, #12
   1323e:	f85d fb04 	ldr.w	pc, [sp], #4
   13242:	bf00      	nop
   13244:	1fff95c0 	.word	0x1fff95c0
   13248:	1fff95bc 	.word	0x1fff95bc

0001324c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   1324c:	b500      	push	{lr}
   1324e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13250:	f7ed fce2 	bl	c18 <Sys_GetCoreID>
   13254:	4603      	mov	r3, r0
   13256:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   13258:	4a0d      	ldr	r2, [pc, #52]	; (13290 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   1325a:	9b01      	ldr	r3, [sp, #4]
   1325c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13260:	1e5a      	subs	r2, r3, #1
   13262:	490b      	ldr	r1, [pc, #44]	; (13290 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   13264:	9b01      	ldr	r3, [sp, #4]
   13266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1326a:	4a0a      	ldr	r2, [pc, #40]	; (13294 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   1326c:	9b01      	ldr	r3, [sp, #4]
   1326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13272:	f003 0301 	and.w	r3, r3, #1
   13276:	2b00      	cmp	r3, #0
   13278:	d106      	bne.n	13288 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   1327a:	4a05      	ldr	r2, [pc, #20]	; (13290 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   1327c:	9b01      	ldr	r3, [sp, #4]
   1327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13282:	2b00      	cmp	r3, #0
   13284:	d100      	bne.n	13288 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13286:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13288:	bf00      	nop
   1328a:	b003      	add	sp, #12
   1328c:	f85d fb04 	ldr.w	pc, [sp], #4
   13290:	1fff95c0 	.word	0x1fff95c0
   13294:	1fff95bc 	.word	0x1fff95bc

00013298 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   13298:	b500      	push	{lr}
   1329a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1329c:	f7ed fcbc 	bl	c18 <Sys_GetCoreID>
   132a0:	4603      	mov	r3, r0
   132a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   132a4:	4a10      	ldr	r2, [pc, #64]	; (132e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   132a6:	9b01      	ldr	r3, [sp, #4]
   132a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ac:	2b00      	cmp	r3, #0
   132ae:	d10d      	bne.n	132cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132b0:	f7ed fbe3 	bl	a7a <Pwm_schm_read_msr>
   132b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132b6:	9b00      	ldr	r3, [sp, #0]
   132b8:	f003 0301 	and.w	r3, r3, #1
   132bc:	2b00      	cmp	r3, #0
   132be:	d100      	bne.n	132c2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   132c2:	490a      	ldr	r1, [pc, #40]	; (132ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   132c4:	9b01      	ldr	r3, [sp, #4]
   132c6:	9a00      	ldr	r2, [sp, #0]
   132c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   132cc:	4a06      	ldr	r2, [pc, #24]	; (132e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   132ce:	9b01      	ldr	r3, [sp, #4]
   132d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132d4:	1c5a      	adds	r2, r3, #1
   132d6:	4904      	ldr	r1, [pc, #16]	; (132e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   132d8:	9b01      	ldr	r3, [sp, #4]
   132da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132de:	bf00      	nop
   132e0:	b003      	add	sp, #12
   132e2:	f85d fb04 	ldr.w	pc, [sp], #4
   132e6:	bf00      	nop
   132e8:	1fff95c8 	.word	0x1fff95c8
   132ec:	1fff95c4 	.word	0x1fff95c4

000132f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   132f0:	b500      	push	{lr}
   132f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132f4:	f7ed fc90 	bl	c18 <Sys_GetCoreID>
   132f8:	4603      	mov	r3, r0
   132fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   132fc:	4a0d      	ldr	r2, [pc, #52]	; (13334 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   132fe:	9b01      	ldr	r3, [sp, #4]
   13300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13304:	1e5a      	subs	r2, r3, #1
   13306:	490b      	ldr	r1, [pc, #44]	; (13334 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   13308:	9b01      	ldr	r3, [sp, #4]
   1330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1330e:	4a0a      	ldr	r2, [pc, #40]	; (13338 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   13310:	9b01      	ldr	r3, [sp, #4]
   13312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13316:	f003 0301 	and.w	r3, r3, #1
   1331a:	2b00      	cmp	r3, #0
   1331c:	d106      	bne.n	1332c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   1331e:	4a05      	ldr	r2, [pc, #20]	; (13334 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   13320:	9b01      	ldr	r3, [sp, #4]
   13322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13326:	2b00      	cmp	r3, #0
   13328:	d100      	bne.n	1332c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1332a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1332c:	bf00      	nop
   1332e:	b003      	add	sp, #12
   13330:	f85d fb04 	ldr.w	pc, [sp], #4
   13334:	1fff95c8 	.word	0x1fff95c8
   13338:	1fff95c4 	.word	0x1fff95c4

0001333c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   1333c:	b500      	push	{lr}
   1333e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13340:	f7ed fc6a 	bl	c18 <Sys_GetCoreID>
   13344:	4603      	mov	r3, r0
   13346:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   13348:	4a10      	ldr	r2, [pc, #64]	; (1338c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   1334a:	9b01      	ldr	r3, [sp, #4]
   1334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13350:	2b00      	cmp	r3, #0
   13352:	d10d      	bne.n	13370 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13354:	f7ed fb91 	bl	a7a <Pwm_schm_read_msr>
   13358:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1335a:	9b00      	ldr	r3, [sp, #0]
   1335c:	f003 0301 	and.w	r3, r3, #1
   13360:	2b00      	cmp	r3, #0
   13362:	d100      	bne.n	13366 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13364:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   13366:	490a      	ldr	r1, [pc, #40]	; (13390 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   13368:	9b01      	ldr	r3, [sp, #4]
   1336a:	9a00      	ldr	r2, [sp, #0]
   1336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   13370:	4a06      	ldr	r2, [pc, #24]	; (1338c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   13372:	9b01      	ldr	r3, [sp, #4]
   13374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13378:	1c5a      	adds	r2, r3, #1
   1337a:	4904      	ldr	r1, [pc, #16]	; (1338c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   1337c:	9b01      	ldr	r3, [sp, #4]
   1337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13382:	bf00      	nop
   13384:	b003      	add	sp, #12
   13386:	f85d fb04 	ldr.w	pc, [sp], #4
   1338a:	bf00      	nop
   1338c:	1fff95d0 	.word	0x1fff95d0
   13390:	1fff95cc 	.word	0x1fff95cc

00013394 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   13394:	b500      	push	{lr}
   13396:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13398:	f7ed fc3e 	bl	c18 <Sys_GetCoreID>
   1339c:	4603      	mov	r3, r0
   1339e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   133a0:	4a0d      	ldr	r2, [pc, #52]	; (133d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   133a2:	9b01      	ldr	r3, [sp, #4]
   133a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133a8:	1e5a      	subs	r2, r3, #1
   133aa:	490b      	ldr	r1, [pc, #44]	; (133d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   133ac:	9b01      	ldr	r3, [sp, #4]
   133ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   133b2:	4a0a      	ldr	r2, [pc, #40]	; (133dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   133b4:	9b01      	ldr	r3, [sp, #4]
   133b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ba:	f003 0301 	and.w	r3, r3, #1
   133be:	2b00      	cmp	r3, #0
   133c0:	d106      	bne.n	133d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   133c2:	4a05      	ldr	r2, [pc, #20]	; (133d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ca:	2b00      	cmp	r3, #0
   133cc:	d100      	bne.n	133d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133d0:	bf00      	nop
   133d2:	b003      	add	sp, #12
   133d4:	f85d fb04 	ldr.w	pc, [sp], #4
   133d8:	1fff95d0 	.word	0x1fff95d0
   133dc:	1fff95cc 	.word	0x1fff95cc

000133e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   133e0:	b500      	push	{lr}
   133e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133e4:	f7ed fc18 	bl	c18 <Sys_GetCoreID>
   133e8:	4603      	mov	r3, r0
   133ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   133ec:	4a10      	ldr	r2, [pc, #64]	; (13430 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   133ee:	9b01      	ldr	r3, [sp, #4]
   133f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f4:	2b00      	cmp	r3, #0
   133f6:	d10d      	bne.n	13414 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133f8:	f7ed fb3f 	bl	a7a <Pwm_schm_read_msr>
   133fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133fe:	9b00      	ldr	r3, [sp, #0]
   13400:	f003 0301 	and.w	r3, r3, #1
   13404:	2b00      	cmp	r3, #0
   13406:	d100      	bne.n	1340a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13408:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1340a:	490a      	ldr	r1, [pc, #40]	; (13434 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   1340c:	9b01      	ldr	r3, [sp, #4]
   1340e:	9a00      	ldr	r2, [sp, #0]
   13410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   13414:	4a06      	ldr	r2, [pc, #24]	; (13430 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   13416:	9b01      	ldr	r3, [sp, #4]
   13418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1341c:	1c5a      	adds	r2, r3, #1
   1341e:	4904      	ldr	r1, [pc, #16]	; (13430 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   13420:	9b01      	ldr	r3, [sp, #4]
   13422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13426:	bf00      	nop
   13428:	b003      	add	sp, #12
   1342a:	f85d fb04 	ldr.w	pc, [sp], #4
   1342e:	bf00      	nop
   13430:	1fff95d8 	.word	0x1fff95d8
   13434:	1fff95d4 	.word	0x1fff95d4

00013438 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   13438:	b500      	push	{lr}
   1343a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1343c:	f7ed fbec 	bl	c18 <Sys_GetCoreID>
   13440:	4603      	mov	r3, r0
   13442:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   13444:	4a0d      	ldr	r2, [pc, #52]	; (1347c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   13446:	9b01      	ldr	r3, [sp, #4]
   13448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1344c:	1e5a      	subs	r2, r3, #1
   1344e:	490b      	ldr	r1, [pc, #44]	; (1347c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   13450:	9b01      	ldr	r3, [sp, #4]
   13452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   13456:	4a0a      	ldr	r2, [pc, #40]	; (13480 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   13458:	9b01      	ldr	r3, [sp, #4]
   1345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1345e:	f003 0301 	and.w	r3, r3, #1
   13462:	2b00      	cmp	r3, #0
   13464:	d106      	bne.n	13474 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   13466:	4a05      	ldr	r2, [pc, #20]	; (1347c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   13468:	9b01      	ldr	r3, [sp, #4]
   1346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1346e:	2b00      	cmp	r3, #0
   13470:	d100      	bne.n	13474 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13472:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13474:	bf00      	nop
   13476:	b003      	add	sp, #12
   13478:	f85d fb04 	ldr.w	pc, [sp], #4
   1347c:	1fff95d8 	.word	0x1fff95d8
   13480:	1fff95d4 	.word	0x1fff95d4

00013484 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   13484:	b500      	push	{lr}
   13486:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13488:	f7ed fbc6 	bl	c18 <Sys_GetCoreID>
   1348c:	4603      	mov	r3, r0
   1348e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   13490:	4a10      	ldr	r2, [pc, #64]	; (134d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   13492:	9b01      	ldr	r3, [sp, #4]
   13494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13498:	2b00      	cmp	r3, #0
   1349a:	d10d      	bne.n	134b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1349c:	f7ed faed 	bl	a7a <Pwm_schm_read_msr>
   134a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134a2:	9b00      	ldr	r3, [sp, #0]
   134a4:	f003 0301 	and.w	r3, r3, #1
   134a8:	2b00      	cmp	r3, #0
   134aa:	d100      	bne.n	134ae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   134ae:	490a      	ldr	r1, [pc, #40]	; (134d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   134b0:	9b01      	ldr	r3, [sp, #4]
   134b2:	9a00      	ldr	r2, [sp, #0]
   134b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   134b8:	4a06      	ldr	r2, [pc, #24]	; (134d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134c0:	1c5a      	adds	r2, r3, #1
   134c2:	4904      	ldr	r1, [pc, #16]	; (134d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   134c4:	9b01      	ldr	r3, [sp, #4]
   134c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134ca:	bf00      	nop
   134cc:	b003      	add	sp, #12
   134ce:	f85d fb04 	ldr.w	pc, [sp], #4
   134d2:	bf00      	nop
   134d4:	1fff95e0 	.word	0x1fff95e0
   134d8:	1fff95dc 	.word	0x1fff95dc

000134dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   134dc:	b500      	push	{lr}
   134de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134e0:	f7ed fb9a 	bl	c18 <Sys_GetCoreID>
   134e4:	4603      	mov	r3, r0
   134e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   134e8:	4a0d      	ldr	r2, [pc, #52]	; (13520 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   134ea:	9b01      	ldr	r3, [sp, #4]
   134ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134f0:	1e5a      	subs	r2, r3, #1
   134f2:	490b      	ldr	r1, [pc, #44]	; (13520 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   134f4:	9b01      	ldr	r3, [sp, #4]
   134f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   134fa:	4a0a      	ldr	r2, [pc, #40]	; (13524 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   134fc:	9b01      	ldr	r3, [sp, #4]
   134fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13502:	f003 0301 	and.w	r3, r3, #1
   13506:	2b00      	cmp	r3, #0
   13508:	d106      	bne.n	13518 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   1350a:	4a05      	ldr	r2, [pc, #20]	; (13520 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   1350c:	9b01      	ldr	r3, [sp, #4]
   1350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13512:	2b00      	cmp	r3, #0
   13514:	d100      	bne.n	13518 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13516:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13518:	bf00      	nop
   1351a:	b003      	add	sp, #12
   1351c:	f85d fb04 	ldr.w	pc, [sp], #4
   13520:	1fff95e0 	.word	0x1fff95e0
   13524:	1fff95dc 	.word	0x1fff95dc

00013528 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   13528:	b500      	push	{lr}
   1352a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1352c:	f7ed fb74 	bl	c18 <Sys_GetCoreID>
   13530:	4603      	mov	r3, r0
   13532:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   13534:	4a10      	ldr	r2, [pc, #64]	; (13578 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   13536:	9b01      	ldr	r3, [sp, #4]
   13538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1353c:	2b00      	cmp	r3, #0
   1353e:	d10d      	bne.n	1355c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13540:	f7ed fa9b 	bl	a7a <Pwm_schm_read_msr>
   13544:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13546:	9b00      	ldr	r3, [sp, #0]
   13548:	f003 0301 	and.w	r3, r3, #1
   1354c:	2b00      	cmp	r3, #0
   1354e:	d100      	bne.n	13552 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13550:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   13552:	490a      	ldr	r1, [pc, #40]	; (1357c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   13554:	9b01      	ldr	r3, [sp, #4]
   13556:	9a00      	ldr	r2, [sp, #0]
   13558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   1355c:	4a06      	ldr	r2, [pc, #24]	; (13578 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   1355e:	9b01      	ldr	r3, [sp, #4]
   13560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13564:	1c5a      	adds	r2, r3, #1
   13566:	4904      	ldr	r1, [pc, #16]	; (13578 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   13568:	9b01      	ldr	r3, [sp, #4]
   1356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1356e:	bf00      	nop
   13570:	b003      	add	sp, #12
   13572:	f85d fb04 	ldr.w	pc, [sp], #4
   13576:	bf00      	nop
   13578:	1fff95e8 	.word	0x1fff95e8
   1357c:	1fff95e4 	.word	0x1fff95e4

00013580 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   13580:	b500      	push	{lr}
   13582:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13584:	f7ed fb48 	bl	c18 <Sys_GetCoreID>
   13588:	4603      	mov	r3, r0
   1358a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   1358c:	4a0d      	ldr	r2, [pc, #52]	; (135c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   1358e:	9b01      	ldr	r3, [sp, #4]
   13590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13594:	1e5a      	subs	r2, r3, #1
   13596:	490b      	ldr	r1, [pc, #44]	; (135c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   13598:	9b01      	ldr	r3, [sp, #4]
   1359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1359e:	4a0a      	ldr	r2, [pc, #40]	; (135c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   135a0:	9b01      	ldr	r3, [sp, #4]
   135a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135a6:	f003 0301 	and.w	r3, r3, #1
   135aa:	2b00      	cmp	r3, #0
   135ac:	d106      	bne.n	135bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   135ae:	4a05      	ldr	r2, [pc, #20]	; (135c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   135b0:	9b01      	ldr	r3, [sp, #4]
   135b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b6:	2b00      	cmp	r3, #0
   135b8:	d100      	bne.n	135bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135bc:	bf00      	nop
   135be:	b003      	add	sp, #12
   135c0:	f85d fb04 	ldr.w	pc, [sp], #4
   135c4:	1fff95e8 	.word	0x1fff95e8
   135c8:	1fff95e4 	.word	0x1fff95e4

000135cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   135cc:	b500      	push	{lr}
   135ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135d0:	f7ed fb22 	bl	c18 <Sys_GetCoreID>
   135d4:	4603      	mov	r3, r0
   135d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   135d8:	4a10      	ldr	r2, [pc, #64]	; (1361c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   135da:	9b01      	ldr	r3, [sp, #4]
   135dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e0:	2b00      	cmp	r3, #0
   135e2:	d10d      	bne.n	13600 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135e4:	f7ed fa49 	bl	a7a <Pwm_schm_read_msr>
   135e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135ea:	9b00      	ldr	r3, [sp, #0]
   135ec:	f003 0301 	and.w	r3, r3, #1
   135f0:	2b00      	cmp	r3, #0
   135f2:	d100      	bne.n	135f6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   135f6:	490a      	ldr	r1, [pc, #40]	; (13620 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   135f8:	9b01      	ldr	r3, [sp, #4]
   135fa:	9a00      	ldr	r2, [sp, #0]
   135fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   13600:	4a06      	ldr	r2, [pc, #24]	; (1361c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   13602:	9b01      	ldr	r3, [sp, #4]
   13604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13608:	1c5a      	adds	r2, r3, #1
   1360a:	4904      	ldr	r1, [pc, #16]	; (1361c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   1360c:	9b01      	ldr	r3, [sp, #4]
   1360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13612:	bf00      	nop
   13614:	b003      	add	sp, #12
   13616:	f85d fb04 	ldr.w	pc, [sp], #4
   1361a:	bf00      	nop
   1361c:	1fff95f0 	.word	0x1fff95f0
   13620:	1fff95ec 	.word	0x1fff95ec

00013624 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   13624:	b500      	push	{lr}
   13626:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13628:	f7ed faf6 	bl	c18 <Sys_GetCoreID>
   1362c:	4603      	mov	r3, r0
   1362e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   13630:	4a0d      	ldr	r2, [pc, #52]	; (13668 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   13632:	9b01      	ldr	r3, [sp, #4]
   13634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13638:	1e5a      	subs	r2, r3, #1
   1363a:	490b      	ldr	r1, [pc, #44]	; (13668 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   1363c:	9b01      	ldr	r3, [sp, #4]
   1363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   13642:	4a0a      	ldr	r2, [pc, #40]	; (1366c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   13644:	9b01      	ldr	r3, [sp, #4]
   13646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1364a:	f003 0301 	and.w	r3, r3, #1
   1364e:	2b00      	cmp	r3, #0
   13650:	d106      	bne.n	13660 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   13652:	4a05      	ldr	r2, [pc, #20]	; (13668 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   13654:	9b01      	ldr	r3, [sp, #4]
   13656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1365a:	2b00      	cmp	r3, #0
   1365c:	d100      	bne.n	13660 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1365e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13660:	bf00      	nop
   13662:	b003      	add	sp, #12
   13664:	f85d fb04 	ldr.w	pc, [sp], #4
   13668:	1fff95f0 	.word	0x1fff95f0
   1366c:	1fff95ec 	.word	0x1fff95ec

00013670 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   13670:	b500      	push	{lr}
   13672:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13674:	f7ed fad0 	bl	c18 <Sys_GetCoreID>
   13678:	4603      	mov	r3, r0
   1367a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   1367c:	4a10      	ldr	r2, [pc, #64]	; (136c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   1367e:	9b01      	ldr	r3, [sp, #4]
   13680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13684:	2b00      	cmp	r3, #0
   13686:	d10d      	bne.n	136a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13688:	f7ed f9f7 	bl	a7a <Pwm_schm_read_msr>
   1368c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1368e:	9b00      	ldr	r3, [sp, #0]
   13690:	f003 0301 	and.w	r3, r3, #1
   13694:	2b00      	cmp	r3, #0
   13696:	d100      	bne.n	1369a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13698:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1369a:	490a      	ldr	r1, [pc, #40]	; (136c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   1369c:	9b01      	ldr	r3, [sp, #4]
   1369e:	9a00      	ldr	r2, [sp, #0]
   136a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   136a4:	4a06      	ldr	r2, [pc, #24]	; (136c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   136a6:	9b01      	ldr	r3, [sp, #4]
   136a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ac:	1c5a      	adds	r2, r3, #1
   136ae:	4904      	ldr	r1, [pc, #16]	; (136c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   136b0:	9b01      	ldr	r3, [sp, #4]
   136b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136b6:	bf00      	nop
   136b8:	b003      	add	sp, #12
   136ba:	f85d fb04 	ldr.w	pc, [sp], #4
   136be:	bf00      	nop
   136c0:	1fff95f8 	.word	0x1fff95f8
   136c4:	1fff95f4 	.word	0x1fff95f4

000136c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   136c8:	b500      	push	{lr}
   136ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136cc:	f7ed faa4 	bl	c18 <Sys_GetCoreID>
   136d0:	4603      	mov	r3, r0
   136d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   136d4:	4a0d      	ldr	r2, [pc, #52]	; (1370c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   136d6:	9b01      	ldr	r3, [sp, #4]
   136d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136dc:	1e5a      	subs	r2, r3, #1
   136de:	490b      	ldr	r1, [pc, #44]	; (1370c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   136e0:	9b01      	ldr	r3, [sp, #4]
   136e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   136e6:	4a0a      	ldr	r2, [pc, #40]	; (13710 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   136e8:	9b01      	ldr	r3, [sp, #4]
   136ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ee:	f003 0301 	and.w	r3, r3, #1
   136f2:	2b00      	cmp	r3, #0
   136f4:	d106      	bne.n	13704 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   136f6:	4a05      	ldr	r2, [pc, #20]	; (1370c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   136f8:	9b01      	ldr	r3, [sp, #4]
   136fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136fe:	2b00      	cmp	r3, #0
   13700:	d100      	bne.n	13704 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13702:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13704:	bf00      	nop
   13706:	b003      	add	sp, #12
   13708:	f85d fb04 	ldr.w	pc, [sp], #4
   1370c:	1fff95f8 	.word	0x1fff95f8
   13710:	1fff95f4 	.word	0x1fff95f4

00013714 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   13714:	b500      	push	{lr}
   13716:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13718:	f7ed fa7e 	bl	c18 <Sys_GetCoreID>
   1371c:	4603      	mov	r3, r0
   1371e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   13720:	4a10      	ldr	r2, [pc, #64]	; (13764 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   13722:	9b01      	ldr	r3, [sp, #4]
   13724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13728:	2b00      	cmp	r3, #0
   1372a:	d10d      	bne.n	13748 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1372c:	f7ed f9a5 	bl	a7a <Pwm_schm_read_msr>
   13730:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13732:	9b00      	ldr	r3, [sp, #0]
   13734:	f003 0301 	and.w	r3, r3, #1
   13738:	2b00      	cmp	r3, #0
   1373a:	d100      	bne.n	1373e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1373c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1373e:	490a      	ldr	r1, [pc, #40]	; (13768 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   13740:	9b01      	ldr	r3, [sp, #4]
   13742:	9a00      	ldr	r2, [sp, #0]
   13744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   13748:	4a06      	ldr	r2, [pc, #24]	; (13764 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   1374a:	9b01      	ldr	r3, [sp, #4]
   1374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13750:	1c5a      	adds	r2, r3, #1
   13752:	4904      	ldr	r1, [pc, #16]	; (13764 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   13754:	9b01      	ldr	r3, [sp, #4]
   13756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1375a:	bf00      	nop
   1375c:	b003      	add	sp, #12
   1375e:	f85d fb04 	ldr.w	pc, [sp], #4
   13762:	bf00      	nop
   13764:	1fff9600 	.word	0x1fff9600
   13768:	1fff95fc 	.word	0x1fff95fc

0001376c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   1376c:	b500      	push	{lr}
   1376e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13770:	f7ed fa52 	bl	c18 <Sys_GetCoreID>
   13774:	4603      	mov	r3, r0
   13776:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   13778:	4a0d      	ldr	r2, [pc, #52]	; (137b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   1377a:	9b01      	ldr	r3, [sp, #4]
   1377c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13780:	1e5a      	subs	r2, r3, #1
   13782:	490b      	ldr	r1, [pc, #44]	; (137b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   13784:	9b01      	ldr	r3, [sp, #4]
   13786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   1378a:	4a0a      	ldr	r2, [pc, #40]	; (137b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   1378c:	9b01      	ldr	r3, [sp, #4]
   1378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13792:	f003 0301 	and.w	r3, r3, #1
   13796:	2b00      	cmp	r3, #0
   13798:	d106      	bne.n	137a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   1379a:	4a05      	ldr	r2, [pc, #20]	; (137b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   1379c:	9b01      	ldr	r3, [sp, #4]
   1379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137a2:	2b00      	cmp	r3, #0
   137a4:	d100      	bne.n	137a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137a8:	bf00      	nop
   137aa:	b003      	add	sp, #12
   137ac:	f85d fb04 	ldr.w	pc, [sp], #4
   137b0:	1fff9600 	.word	0x1fff9600
   137b4:	1fff95fc 	.word	0x1fff95fc

000137b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   137b8:	b500      	push	{lr}
   137ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137bc:	f7ed fa2c 	bl	c18 <Sys_GetCoreID>
   137c0:	4603      	mov	r3, r0
   137c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   137c4:	4a10      	ldr	r2, [pc, #64]	; (13808 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   137c6:	9b01      	ldr	r3, [sp, #4]
   137c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137cc:	2b00      	cmp	r3, #0
   137ce:	d10d      	bne.n	137ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137d0:	f7ed f953 	bl	a7a <Pwm_schm_read_msr>
   137d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137d6:	9b00      	ldr	r3, [sp, #0]
   137d8:	f003 0301 	and.w	r3, r3, #1
   137dc:	2b00      	cmp	r3, #0
   137de:	d100      	bne.n	137e2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   137e2:	490a      	ldr	r1, [pc, #40]	; (1380c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   137e4:	9b01      	ldr	r3, [sp, #4]
   137e6:	9a00      	ldr	r2, [sp, #0]
   137e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   137ec:	4a06      	ldr	r2, [pc, #24]	; (13808 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   137ee:	9b01      	ldr	r3, [sp, #4]
   137f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137f4:	1c5a      	adds	r2, r3, #1
   137f6:	4904      	ldr	r1, [pc, #16]	; (13808 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   137f8:	9b01      	ldr	r3, [sp, #4]
   137fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137fe:	bf00      	nop
   13800:	b003      	add	sp, #12
   13802:	f85d fb04 	ldr.w	pc, [sp], #4
   13806:	bf00      	nop
   13808:	1fff9608 	.word	0x1fff9608
   1380c:	1fff9604 	.word	0x1fff9604

00013810 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   13810:	b500      	push	{lr}
   13812:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13814:	f7ed fa00 	bl	c18 <Sys_GetCoreID>
   13818:	4603      	mov	r3, r0
   1381a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   1381c:	4a0d      	ldr	r2, [pc, #52]	; (13854 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   1381e:	9b01      	ldr	r3, [sp, #4]
   13820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13824:	1e5a      	subs	r2, r3, #1
   13826:	490b      	ldr	r1, [pc, #44]	; (13854 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   13828:	9b01      	ldr	r3, [sp, #4]
   1382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1382e:	4a0a      	ldr	r2, [pc, #40]	; (13858 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   13830:	9b01      	ldr	r3, [sp, #4]
   13832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13836:	f003 0301 	and.w	r3, r3, #1
   1383a:	2b00      	cmp	r3, #0
   1383c:	d106      	bne.n	1384c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   1383e:	4a05      	ldr	r2, [pc, #20]	; (13854 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   13840:	9b01      	ldr	r3, [sp, #4]
   13842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13846:	2b00      	cmp	r3, #0
   13848:	d100      	bne.n	1384c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1384a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1384c:	bf00      	nop
   1384e:	b003      	add	sp, #12
   13850:	f85d fb04 	ldr.w	pc, [sp], #4
   13854:	1fff9608 	.word	0x1fff9608
   13858:	1fff9604 	.word	0x1fff9604

0001385c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   1385c:	b500      	push	{lr}
   1385e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13860:	f7ed f9da 	bl	c18 <Sys_GetCoreID>
   13864:	4603      	mov	r3, r0
   13866:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   13868:	4a10      	ldr	r2, [pc, #64]	; (138ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   1386a:	9b01      	ldr	r3, [sp, #4]
   1386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13870:	2b00      	cmp	r3, #0
   13872:	d10d      	bne.n	13890 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13874:	f7ed f901 	bl	a7a <Pwm_schm_read_msr>
   13878:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1387a:	9b00      	ldr	r3, [sp, #0]
   1387c:	f003 0301 	and.w	r3, r3, #1
   13880:	2b00      	cmp	r3, #0
   13882:	d100      	bne.n	13886 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13884:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   13886:	490a      	ldr	r1, [pc, #40]	; (138b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   13888:	9b01      	ldr	r3, [sp, #4]
   1388a:	9a00      	ldr	r2, [sp, #0]
   1388c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   13890:	4a06      	ldr	r2, [pc, #24]	; (138ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   13892:	9b01      	ldr	r3, [sp, #4]
   13894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13898:	1c5a      	adds	r2, r3, #1
   1389a:	4904      	ldr	r1, [pc, #16]	; (138ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   1389c:	9b01      	ldr	r3, [sp, #4]
   1389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138a2:	bf00      	nop
   138a4:	b003      	add	sp, #12
   138a6:	f85d fb04 	ldr.w	pc, [sp], #4
   138aa:	bf00      	nop
   138ac:	1fff9610 	.word	0x1fff9610
   138b0:	1fff960c 	.word	0x1fff960c

000138b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   138b4:	b500      	push	{lr}
   138b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138b8:	f7ed f9ae 	bl	c18 <Sys_GetCoreID>
   138bc:	4603      	mov	r3, r0
   138be:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   138c0:	4a0d      	ldr	r2, [pc, #52]	; (138f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   138c2:	9b01      	ldr	r3, [sp, #4]
   138c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138c8:	1e5a      	subs	r2, r3, #1
   138ca:	490b      	ldr	r1, [pc, #44]	; (138f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   138cc:	9b01      	ldr	r3, [sp, #4]
   138ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   138d2:	4a0a      	ldr	r2, [pc, #40]	; (138fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   138d4:	9b01      	ldr	r3, [sp, #4]
   138d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138da:	f003 0301 	and.w	r3, r3, #1
   138de:	2b00      	cmp	r3, #0
   138e0:	d106      	bne.n	138f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   138e2:	4a05      	ldr	r2, [pc, #20]	; (138f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   138e4:	9b01      	ldr	r3, [sp, #4]
   138e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ea:	2b00      	cmp	r3, #0
   138ec:	d100      	bne.n	138f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138f0:	bf00      	nop
   138f2:	b003      	add	sp, #12
   138f4:	f85d fb04 	ldr.w	pc, [sp], #4
   138f8:	1fff9610 	.word	0x1fff9610
   138fc:	1fff960c 	.word	0x1fff960c

00013900 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   13900:	b500      	push	{lr}
   13902:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13904:	f7ed f988 	bl	c18 <Sys_GetCoreID>
   13908:	4603      	mov	r3, r0
   1390a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   1390c:	4a10      	ldr	r2, [pc, #64]	; (13950 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   1390e:	9b01      	ldr	r3, [sp, #4]
   13910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13914:	2b00      	cmp	r3, #0
   13916:	d10d      	bne.n	13934 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13918:	f7ed f8af 	bl	a7a <Pwm_schm_read_msr>
   1391c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1391e:	9b00      	ldr	r3, [sp, #0]
   13920:	f003 0301 	and.w	r3, r3, #1
   13924:	2b00      	cmp	r3, #0
   13926:	d100      	bne.n	1392a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13928:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1392a:	490a      	ldr	r1, [pc, #40]	; (13954 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   1392c:	9b01      	ldr	r3, [sp, #4]
   1392e:	9a00      	ldr	r2, [sp, #0]
   13930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   13934:	4a06      	ldr	r2, [pc, #24]	; (13950 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   13936:	9b01      	ldr	r3, [sp, #4]
   13938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1393c:	1c5a      	adds	r2, r3, #1
   1393e:	4904      	ldr	r1, [pc, #16]	; (13950 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   13940:	9b01      	ldr	r3, [sp, #4]
   13942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13946:	bf00      	nop
   13948:	b003      	add	sp, #12
   1394a:	f85d fb04 	ldr.w	pc, [sp], #4
   1394e:	bf00      	nop
   13950:	1fff9618 	.word	0x1fff9618
   13954:	1fff9614 	.word	0x1fff9614

00013958 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   13958:	b500      	push	{lr}
   1395a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1395c:	f7ed f95c 	bl	c18 <Sys_GetCoreID>
   13960:	4603      	mov	r3, r0
   13962:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   13964:	4a0d      	ldr	r2, [pc, #52]	; (1399c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   13966:	9b01      	ldr	r3, [sp, #4]
   13968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1396c:	1e5a      	subs	r2, r3, #1
   1396e:	490b      	ldr	r1, [pc, #44]	; (1399c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   13970:	9b01      	ldr	r3, [sp, #4]
   13972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   13976:	4a0a      	ldr	r2, [pc, #40]	; (139a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   13978:	9b01      	ldr	r3, [sp, #4]
   1397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1397e:	f003 0301 	and.w	r3, r3, #1
   13982:	2b00      	cmp	r3, #0
   13984:	d106      	bne.n	13994 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   13986:	4a05      	ldr	r2, [pc, #20]	; (1399c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   13988:	9b01      	ldr	r3, [sp, #4]
   1398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1398e:	2b00      	cmp	r3, #0
   13990:	d100      	bne.n	13994 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13992:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13994:	bf00      	nop
   13996:	b003      	add	sp, #12
   13998:	f85d fb04 	ldr.w	pc, [sp], #4
   1399c:	1fff9618 	.word	0x1fff9618
   139a0:	1fff9614 	.word	0x1fff9614

000139a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   139a4:	b500      	push	{lr}
   139a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139a8:	f7ed f936 	bl	c18 <Sys_GetCoreID>
   139ac:	4603      	mov	r3, r0
   139ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   139b0:	4a10      	ldr	r2, [pc, #64]	; (139f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   139b2:	9b01      	ldr	r3, [sp, #4]
   139b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b8:	2b00      	cmp	r3, #0
   139ba:	d10d      	bne.n	139d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139bc:	f7ed f85d 	bl	a7a <Pwm_schm_read_msr>
   139c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139c2:	9b00      	ldr	r3, [sp, #0]
   139c4:	f003 0301 	and.w	r3, r3, #1
   139c8:	2b00      	cmp	r3, #0
   139ca:	d100      	bne.n	139ce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   139ce:	490a      	ldr	r1, [pc, #40]	; (139f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   139d0:	9b01      	ldr	r3, [sp, #4]
   139d2:	9a00      	ldr	r2, [sp, #0]
   139d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   139d8:	4a06      	ldr	r2, [pc, #24]	; (139f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   139da:	9b01      	ldr	r3, [sp, #4]
   139dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139e0:	1c5a      	adds	r2, r3, #1
   139e2:	4904      	ldr	r1, [pc, #16]	; (139f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   139e4:	9b01      	ldr	r3, [sp, #4]
   139e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139ea:	bf00      	nop
   139ec:	b003      	add	sp, #12
   139ee:	f85d fb04 	ldr.w	pc, [sp], #4
   139f2:	bf00      	nop
   139f4:	1fff9620 	.word	0x1fff9620
   139f8:	1fff961c 	.word	0x1fff961c

000139fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   139fc:	b500      	push	{lr}
   139fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a00:	f7ed f90a 	bl	c18 <Sys_GetCoreID>
   13a04:	4603      	mov	r3, r0
   13a06:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   13a08:	4a0d      	ldr	r2, [pc, #52]	; (13a40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   13a0a:	9b01      	ldr	r3, [sp, #4]
   13a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a10:	1e5a      	subs	r2, r3, #1
   13a12:	490b      	ldr	r1, [pc, #44]	; (13a40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   13a14:	9b01      	ldr	r3, [sp, #4]
   13a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   13a1a:	4a0a      	ldr	r2, [pc, #40]	; (13a44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   13a1c:	9b01      	ldr	r3, [sp, #4]
   13a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a22:	f003 0301 	and.w	r3, r3, #1
   13a26:	2b00      	cmp	r3, #0
   13a28:	d106      	bne.n	13a38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   13a2a:	4a05      	ldr	r2, [pc, #20]	; (13a40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   13a2c:	9b01      	ldr	r3, [sp, #4]
   13a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a32:	2b00      	cmp	r3, #0
   13a34:	d100      	bne.n	13a38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a38:	bf00      	nop
   13a3a:	b003      	add	sp, #12
   13a3c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a40:	1fff9620 	.word	0x1fff9620
   13a44:	1fff961c 	.word	0x1fff961c

00013a48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   13a48:	b500      	push	{lr}
   13a4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a4c:	f7ed f8e4 	bl	c18 <Sys_GetCoreID>
   13a50:	4603      	mov	r3, r0
   13a52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   13a54:	4a10      	ldr	r2, [pc, #64]	; (13a98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   13a56:	9b01      	ldr	r3, [sp, #4]
   13a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d10d      	bne.n	13a7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a60:	f7ed f80b 	bl	a7a <Pwm_schm_read_msr>
   13a64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a66:	9b00      	ldr	r3, [sp, #0]
   13a68:	f003 0301 	and.w	r3, r3, #1
   13a6c:	2b00      	cmp	r3, #0
   13a6e:	d100      	bne.n	13a72 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   13a72:	490a      	ldr	r1, [pc, #40]	; (13a9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   13a74:	9b01      	ldr	r3, [sp, #4]
   13a76:	9a00      	ldr	r2, [sp, #0]
   13a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   13a7c:	4a06      	ldr	r2, [pc, #24]	; (13a98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   13a7e:	9b01      	ldr	r3, [sp, #4]
   13a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a84:	1c5a      	adds	r2, r3, #1
   13a86:	4904      	ldr	r1, [pc, #16]	; (13a98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   13a88:	9b01      	ldr	r3, [sp, #4]
   13a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a8e:	bf00      	nop
   13a90:	b003      	add	sp, #12
   13a92:	f85d fb04 	ldr.w	pc, [sp], #4
   13a96:	bf00      	nop
   13a98:	1fff9628 	.word	0x1fff9628
   13a9c:	1fff9624 	.word	0x1fff9624

00013aa0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   13aa0:	b500      	push	{lr}
   13aa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13aa4:	f7ed f8b8 	bl	c18 <Sys_GetCoreID>
   13aa8:	4603      	mov	r3, r0
   13aaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   13aac:	4a0d      	ldr	r2, [pc, #52]	; (13ae4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   13aae:	9b01      	ldr	r3, [sp, #4]
   13ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ab4:	1e5a      	subs	r2, r3, #1
   13ab6:	490b      	ldr	r1, [pc, #44]	; (13ae4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   13ab8:	9b01      	ldr	r3, [sp, #4]
   13aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   13abe:	4a0a      	ldr	r2, [pc, #40]	; (13ae8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   13ac0:	9b01      	ldr	r3, [sp, #4]
   13ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ac6:	f003 0301 	and.w	r3, r3, #1
   13aca:	2b00      	cmp	r3, #0
   13acc:	d106      	bne.n	13adc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   13ace:	4a05      	ldr	r2, [pc, #20]	; (13ae4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   13ad0:	9b01      	ldr	r3, [sp, #4]
   13ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	d100      	bne.n	13adc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ada:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13adc:	bf00      	nop
   13ade:	b003      	add	sp, #12
   13ae0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ae4:	1fff9628 	.word	0x1fff9628
   13ae8:	1fff9624 	.word	0x1fff9624

00013aec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   13aec:	b500      	push	{lr}
   13aee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13af0:	f7ed f892 	bl	c18 <Sys_GetCoreID>
   13af4:	4603      	mov	r3, r0
   13af6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   13af8:	4a10      	ldr	r2, [pc, #64]	; (13b3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   13afa:	9b01      	ldr	r3, [sp, #4]
   13afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b00:	2b00      	cmp	r3, #0
   13b02:	d10d      	bne.n	13b20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b04:	f7ec ffb9 	bl	a7a <Pwm_schm_read_msr>
   13b08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b0a:	9b00      	ldr	r3, [sp, #0]
   13b0c:	f003 0301 	and.w	r3, r3, #1
   13b10:	2b00      	cmp	r3, #0
   13b12:	d100      	bne.n	13b16 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   13b16:	490a      	ldr	r1, [pc, #40]	; (13b40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   13b18:	9b01      	ldr	r3, [sp, #4]
   13b1a:	9a00      	ldr	r2, [sp, #0]
   13b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   13b20:	4a06      	ldr	r2, [pc, #24]	; (13b3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   13b22:	9b01      	ldr	r3, [sp, #4]
   13b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b28:	1c5a      	adds	r2, r3, #1
   13b2a:	4904      	ldr	r1, [pc, #16]	; (13b3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   13b2c:	9b01      	ldr	r3, [sp, #4]
   13b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b32:	bf00      	nop
   13b34:	b003      	add	sp, #12
   13b36:	f85d fb04 	ldr.w	pc, [sp], #4
   13b3a:	bf00      	nop
   13b3c:	1fff9630 	.word	0x1fff9630
   13b40:	1fff962c 	.word	0x1fff962c

00013b44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   13b44:	b500      	push	{lr}
   13b46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b48:	f7ed f866 	bl	c18 <Sys_GetCoreID>
   13b4c:	4603      	mov	r3, r0
   13b4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   13b50:	4a0d      	ldr	r2, [pc, #52]	; (13b88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   13b52:	9b01      	ldr	r3, [sp, #4]
   13b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b58:	1e5a      	subs	r2, r3, #1
   13b5a:	490b      	ldr	r1, [pc, #44]	; (13b88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   13b5c:	9b01      	ldr	r3, [sp, #4]
   13b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   13b62:	4a0a      	ldr	r2, [pc, #40]	; (13b8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   13b64:	9b01      	ldr	r3, [sp, #4]
   13b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b6a:	f003 0301 	and.w	r3, r3, #1
   13b6e:	2b00      	cmp	r3, #0
   13b70:	d106      	bne.n	13b80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   13b72:	4a05      	ldr	r2, [pc, #20]	; (13b88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   13b74:	9b01      	ldr	r3, [sp, #4]
   13b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	d100      	bne.n	13b80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b80:	bf00      	nop
   13b82:	b003      	add	sp, #12
   13b84:	f85d fb04 	ldr.w	pc, [sp], #4
   13b88:	1fff9630 	.word	0x1fff9630
   13b8c:	1fff962c 	.word	0x1fff962c

00013b90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   13b90:	b500      	push	{lr}
   13b92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b94:	f7ed f840 	bl	c18 <Sys_GetCoreID>
   13b98:	4603      	mov	r3, r0
   13b9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   13b9c:	4a10      	ldr	r2, [pc, #64]	; (13be0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   13b9e:	9b01      	ldr	r3, [sp, #4]
   13ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba4:	2b00      	cmp	r3, #0
   13ba6:	d10d      	bne.n	13bc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ba8:	f7ec ff67 	bl	a7a <Pwm_schm_read_msr>
   13bac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bae:	9b00      	ldr	r3, [sp, #0]
   13bb0:	f003 0301 	and.w	r3, r3, #1
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d100      	bne.n	13bba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13bb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   13bba:	490a      	ldr	r1, [pc, #40]	; (13be4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   13bbc:	9b01      	ldr	r3, [sp, #4]
   13bbe:	9a00      	ldr	r2, [sp, #0]
   13bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   13bc4:	4a06      	ldr	r2, [pc, #24]	; (13be0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   13bc6:	9b01      	ldr	r3, [sp, #4]
   13bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bcc:	1c5a      	adds	r2, r3, #1
   13bce:	4904      	ldr	r1, [pc, #16]	; (13be0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   13bd0:	9b01      	ldr	r3, [sp, #4]
   13bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bd6:	bf00      	nop
   13bd8:	b003      	add	sp, #12
   13bda:	f85d fb04 	ldr.w	pc, [sp], #4
   13bde:	bf00      	nop
   13be0:	1fff9638 	.word	0x1fff9638
   13be4:	1fff9634 	.word	0x1fff9634

00013be8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   13be8:	b500      	push	{lr}
   13bea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bec:	f7ed f814 	bl	c18 <Sys_GetCoreID>
   13bf0:	4603      	mov	r3, r0
   13bf2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   13bf4:	4a0d      	ldr	r2, [pc, #52]	; (13c2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   13bf6:	9b01      	ldr	r3, [sp, #4]
   13bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bfc:	1e5a      	subs	r2, r3, #1
   13bfe:	490b      	ldr	r1, [pc, #44]	; (13c2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   13c00:	9b01      	ldr	r3, [sp, #4]
   13c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   13c06:	4a0a      	ldr	r2, [pc, #40]	; (13c30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   13c08:	9b01      	ldr	r3, [sp, #4]
   13c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c0e:	f003 0301 	and.w	r3, r3, #1
   13c12:	2b00      	cmp	r3, #0
   13c14:	d106      	bne.n	13c24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   13c16:	4a05      	ldr	r2, [pc, #20]	; (13c2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   13c18:	9b01      	ldr	r3, [sp, #4]
   13c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c1e:	2b00      	cmp	r3, #0
   13c20:	d100      	bne.n	13c24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c24:	bf00      	nop
   13c26:	b003      	add	sp, #12
   13c28:	f85d fb04 	ldr.w	pc, [sp], #4
   13c2c:	1fff9638 	.word	0x1fff9638
   13c30:	1fff9634 	.word	0x1fff9634

00013c34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   13c34:	b500      	push	{lr}
   13c36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c38:	f7ec ffee 	bl	c18 <Sys_GetCoreID>
   13c3c:	4603      	mov	r3, r0
   13c3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   13c40:	4a10      	ldr	r2, [pc, #64]	; (13c84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   13c42:	9b01      	ldr	r3, [sp, #4]
   13c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c48:	2b00      	cmp	r3, #0
   13c4a:	d10d      	bne.n	13c68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c4c:	f7ec ff15 	bl	a7a <Pwm_schm_read_msr>
   13c50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c52:	9b00      	ldr	r3, [sp, #0]
   13c54:	f003 0301 	and.w	r3, r3, #1
   13c58:	2b00      	cmp	r3, #0
   13c5a:	d100      	bne.n	13c5e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   13c5e:	490a      	ldr	r1, [pc, #40]	; (13c88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   13c60:	9b01      	ldr	r3, [sp, #4]
   13c62:	9a00      	ldr	r2, [sp, #0]
   13c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   13c68:	4a06      	ldr	r2, [pc, #24]	; (13c84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   13c6a:	9b01      	ldr	r3, [sp, #4]
   13c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c70:	1c5a      	adds	r2, r3, #1
   13c72:	4904      	ldr	r1, [pc, #16]	; (13c84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   13c74:	9b01      	ldr	r3, [sp, #4]
   13c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c7a:	bf00      	nop
   13c7c:	b003      	add	sp, #12
   13c7e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c82:	bf00      	nop
   13c84:	1fff9640 	.word	0x1fff9640
   13c88:	1fff963c 	.word	0x1fff963c

00013c8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   13c8c:	b500      	push	{lr}
   13c8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c90:	f7ec ffc2 	bl	c18 <Sys_GetCoreID>
   13c94:	4603      	mov	r3, r0
   13c96:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   13c98:	4a0d      	ldr	r2, [pc, #52]	; (13cd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   13c9a:	9b01      	ldr	r3, [sp, #4]
   13c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ca0:	1e5a      	subs	r2, r3, #1
   13ca2:	490b      	ldr	r1, [pc, #44]	; (13cd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   13ca4:	9b01      	ldr	r3, [sp, #4]
   13ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   13caa:	4a0a      	ldr	r2, [pc, #40]	; (13cd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   13cac:	9b01      	ldr	r3, [sp, #4]
   13cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cb2:	f003 0301 	and.w	r3, r3, #1
   13cb6:	2b00      	cmp	r3, #0
   13cb8:	d106      	bne.n	13cc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   13cba:	4a05      	ldr	r2, [pc, #20]	; (13cd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   13cbc:	9b01      	ldr	r3, [sp, #4]
   13cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cc2:	2b00      	cmp	r3, #0
   13cc4:	d100      	bne.n	13cc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cc8:	bf00      	nop
   13cca:	b003      	add	sp, #12
   13ccc:	f85d fb04 	ldr.w	pc, [sp], #4
   13cd0:	1fff9640 	.word	0x1fff9640
   13cd4:	1fff963c 	.word	0x1fff963c

00013cd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   13cd8:	b500      	push	{lr}
   13cda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cdc:	f7ec ff9c 	bl	c18 <Sys_GetCoreID>
   13ce0:	4603      	mov	r3, r0
   13ce2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   13ce4:	4a10      	ldr	r2, [pc, #64]	; (13d28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   13ce6:	9b01      	ldr	r3, [sp, #4]
   13ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cec:	2b00      	cmp	r3, #0
   13cee:	d10d      	bne.n	13d0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cf0:	f7ec fec3 	bl	a7a <Pwm_schm_read_msr>
   13cf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cf6:	9b00      	ldr	r3, [sp, #0]
   13cf8:	f003 0301 	and.w	r3, r3, #1
   13cfc:	2b00      	cmp	r3, #0
   13cfe:	d100      	bne.n	13d02 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   13d02:	490a      	ldr	r1, [pc, #40]	; (13d2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   13d04:	9b01      	ldr	r3, [sp, #4]
   13d06:	9a00      	ldr	r2, [sp, #0]
   13d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   13d0c:	4a06      	ldr	r2, [pc, #24]	; (13d28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   13d0e:	9b01      	ldr	r3, [sp, #4]
   13d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d14:	1c5a      	adds	r2, r3, #1
   13d16:	4904      	ldr	r1, [pc, #16]	; (13d28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   13d18:	9b01      	ldr	r3, [sp, #4]
   13d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d1e:	bf00      	nop
   13d20:	b003      	add	sp, #12
   13d22:	f85d fb04 	ldr.w	pc, [sp], #4
   13d26:	bf00      	nop
   13d28:	1fff9648 	.word	0x1fff9648
   13d2c:	1fff9644 	.word	0x1fff9644

00013d30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   13d30:	b500      	push	{lr}
   13d32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d34:	f7ec ff70 	bl	c18 <Sys_GetCoreID>
   13d38:	4603      	mov	r3, r0
   13d3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   13d3c:	4a0d      	ldr	r2, [pc, #52]	; (13d74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   13d3e:	9b01      	ldr	r3, [sp, #4]
   13d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d44:	1e5a      	subs	r2, r3, #1
   13d46:	490b      	ldr	r1, [pc, #44]	; (13d74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   13d48:	9b01      	ldr	r3, [sp, #4]
   13d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   13d4e:	4a0a      	ldr	r2, [pc, #40]	; (13d78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   13d50:	9b01      	ldr	r3, [sp, #4]
   13d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d56:	f003 0301 	and.w	r3, r3, #1
   13d5a:	2b00      	cmp	r3, #0
   13d5c:	d106      	bne.n	13d6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   13d5e:	4a05      	ldr	r2, [pc, #20]	; (13d74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   13d60:	9b01      	ldr	r3, [sp, #4]
   13d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d66:	2b00      	cmp	r3, #0
   13d68:	d100      	bne.n	13d6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d6c:	bf00      	nop
   13d6e:	b003      	add	sp, #12
   13d70:	f85d fb04 	ldr.w	pc, [sp], #4
   13d74:	1fff9648 	.word	0x1fff9648
   13d78:	1fff9644 	.word	0x1fff9644

00013d7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   13d7c:	b500      	push	{lr}
   13d7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d80:	f7ec ff4a 	bl	c18 <Sys_GetCoreID>
   13d84:	4603      	mov	r3, r0
   13d86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   13d88:	4a10      	ldr	r2, [pc, #64]	; (13dcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   13d8a:	9b01      	ldr	r3, [sp, #4]
   13d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d90:	2b00      	cmp	r3, #0
   13d92:	d10d      	bne.n	13db0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d94:	f7ec fe71 	bl	a7a <Pwm_schm_read_msr>
   13d98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d9a:	9b00      	ldr	r3, [sp, #0]
   13d9c:	f003 0301 	and.w	r3, r3, #1
   13da0:	2b00      	cmp	r3, #0
   13da2:	d100      	bne.n	13da6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13da4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   13da6:	490a      	ldr	r1, [pc, #40]	; (13dd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   13da8:	9b01      	ldr	r3, [sp, #4]
   13daa:	9a00      	ldr	r2, [sp, #0]
   13dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   13db0:	4a06      	ldr	r2, [pc, #24]	; (13dcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   13db2:	9b01      	ldr	r3, [sp, #4]
   13db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13db8:	1c5a      	adds	r2, r3, #1
   13dba:	4904      	ldr	r1, [pc, #16]	; (13dcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   13dbc:	9b01      	ldr	r3, [sp, #4]
   13dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13dc2:	bf00      	nop
   13dc4:	b003      	add	sp, #12
   13dc6:	f85d fb04 	ldr.w	pc, [sp], #4
   13dca:	bf00      	nop
   13dcc:	1fff9650 	.word	0x1fff9650
   13dd0:	1fff964c 	.word	0x1fff964c

00013dd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   13dd4:	b500      	push	{lr}
   13dd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dd8:	f7ec ff1e 	bl	c18 <Sys_GetCoreID>
   13ddc:	4603      	mov	r3, r0
   13dde:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   13de0:	4a0d      	ldr	r2, [pc, #52]	; (13e18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   13de2:	9b01      	ldr	r3, [sp, #4]
   13de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13de8:	1e5a      	subs	r2, r3, #1
   13dea:	490b      	ldr	r1, [pc, #44]	; (13e18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   13dec:	9b01      	ldr	r3, [sp, #4]
   13dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   13df2:	4a0a      	ldr	r2, [pc, #40]	; (13e1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   13df4:	9b01      	ldr	r3, [sp, #4]
   13df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dfa:	f003 0301 	and.w	r3, r3, #1
   13dfe:	2b00      	cmp	r3, #0
   13e00:	d106      	bne.n	13e10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   13e02:	4a05      	ldr	r2, [pc, #20]	; (13e18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   13e04:	9b01      	ldr	r3, [sp, #4]
   13e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e0a:	2b00      	cmp	r3, #0
   13e0c:	d100      	bne.n	13e10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e10:	bf00      	nop
   13e12:	b003      	add	sp, #12
   13e14:	f85d fb04 	ldr.w	pc, [sp], #4
   13e18:	1fff9650 	.word	0x1fff9650
   13e1c:	1fff964c 	.word	0x1fff964c

00013e20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   13e20:	b500      	push	{lr}
   13e22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e24:	f7ec fef8 	bl	c18 <Sys_GetCoreID>
   13e28:	4603      	mov	r3, r0
   13e2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   13e2c:	4a10      	ldr	r2, [pc, #64]	; (13e70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   13e2e:	9b01      	ldr	r3, [sp, #4]
   13e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e34:	2b00      	cmp	r3, #0
   13e36:	d10d      	bne.n	13e54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e38:	f7ec fe1f 	bl	a7a <Pwm_schm_read_msr>
   13e3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e3e:	9b00      	ldr	r3, [sp, #0]
   13e40:	f003 0301 	and.w	r3, r3, #1
   13e44:	2b00      	cmp	r3, #0
   13e46:	d100      	bne.n	13e4a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   13e4a:	490a      	ldr	r1, [pc, #40]	; (13e74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   13e4c:	9b01      	ldr	r3, [sp, #4]
   13e4e:	9a00      	ldr	r2, [sp, #0]
   13e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   13e54:	4a06      	ldr	r2, [pc, #24]	; (13e70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   13e56:	9b01      	ldr	r3, [sp, #4]
   13e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e5c:	1c5a      	adds	r2, r3, #1
   13e5e:	4904      	ldr	r1, [pc, #16]	; (13e70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   13e60:	9b01      	ldr	r3, [sp, #4]
   13e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e66:	bf00      	nop
   13e68:	b003      	add	sp, #12
   13e6a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e6e:	bf00      	nop
   13e70:	1fff9658 	.word	0x1fff9658
   13e74:	1fff9654 	.word	0x1fff9654

00013e78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   13e78:	b500      	push	{lr}
   13e7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e7c:	f7ec fecc 	bl	c18 <Sys_GetCoreID>
   13e80:	4603      	mov	r3, r0
   13e82:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   13e84:	4a0d      	ldr	r2, [pc, #52]	; (13ebc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   13e86:	9b01      	ldr	r3, [sp, #4]
   13e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e8c:	1e5a      	subs	r2, r3, #1
   13e8e:	490b      	ldr	r1, [pc, #44]	; (13ebc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   13e90:	9b01      	ldr	r3, [sp, #4]
   13e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   13e96:	4a0a      	ldr	r2, [pc, #40]	; (13ec0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   13e98:	9b01      	ldr	r3, [sp, #4]
   13e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e9e:	f003 0301 	and.w	r3, r3, #1
   13ea2:	2b00      	cmp	r3, #0
   13ea4:	d106      	bne.n	13eb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   13ea6:	4a05      	ldr	r2, [pc, #20]	; (13ebc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   13ea8:	9b01      	ldr	r3, [sp, #4]
   13eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eae:	2b00      	cmp	r3, #0
   13eb0:	d100      	bne.n	13eb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13eb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13eb4:	bf00      	nop
   13eb6:	b003      	add	sp, #12
   13eb8:	f85d fb04 	ldr.w	pc, [sp], #4
   13ebc:	1fff9658 	.word	0x1fff9658
   13ec0:	1fff9654 	.word	0x1fff9654

00013ec4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   13ec4:	b500      	push	{lr}
   13ec6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ec8:	f7ec fea6 	bl	c18 <Sys_GetCoreID>
   13ecc:	4603      	mov	r3, r0
   13ece:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   13ed0:	4a10      	ldr	r2, [pc, #64]	; (13f14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   13ed2:	9b01      	ldr	r3, [sp, #4]
   13ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed8:	2b00      	cmp	r3, #0
   13eda:	d10d      	bne.n	13ef8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13edc:	f7ec fdcd 	bl	a7a <Pwm_schm_read_msr>
   13ee0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ee2:	9b00      	ldr	r3, [sp, #0]
   13ee4:	f003 0301 	and.w	r3, r3, #1
   13ee8:	2b00      	cmp	r3, #0
   13eea:	d100      	bne.n	13eee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13eec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   13eee:	490a      	ldr	r1, [pc, #40]	; (13f18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   13ef0:	9b01      	ldr	r3, [sp, #4]
   13ef2:	9a00      	ldr	r2, [sp, #0]
   13ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   13ef8:	4a06      	ldr	r2, [pc, #24]	; (13f14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   13efa:	9b01      	ldr	r3, [sp, #4]
   13efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f00:	1c5a      	adds	r2, r3, #1
   13f02:	4904      	ldr	r1, [pc, #16]	; (13f14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   13f04:	9b01      	ldr	r3, [sp, #4]
   13f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f0a:	bf00      	nop
   13f0c:	b003      	add	sp, #12
   13f0e:	f85d fb04 	ldr.w	pc, [sp], #4
   13f12:	bf00      	nop
   13f14:	1fff9660 	.word	0x1fff9660
   13f18:	1fff965c 	.word	0x1fff965c

00013f1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   13f1c:	b500      	push	{lr}
   13f1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f20:	f7ec fe7a 	bl	c18 <Sys_GetCoreID>
   13f24:	4603      	mov	r3, r0
   13f26:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   13f28:	4a0d      	ldr	r2, [pc, #52]	; (13f60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   13f2a:	9b01      	ldr	r3, [sp, #4]
   13f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f30:	1e5a      	subs	r2, r3, #1
   13f32:	490b      	ldr	r1, [pc, #44]	; (13f60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   13f34:	9b01      	ldr	r3, [sp, #4]
   13f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   13f3a:	4a0a      	ldr	r2, [pc, #40]	; (13f64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   13f3c:	9b01      	ldr	r3, [sp, #4]
   13f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f42:	f003 0301 	and.w	r3, r3, #1
   13f46:	2b00      	cmp	r3, #0
   13f48:	d106      	bne.n	13f58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   13f4a:	4a05      	ldr	r2, [pc, #20]	; (13f60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   13f4c:	9b01      	ldr	r3, [sp, #4]
   13f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f52:	2b00      	cmp	r3, #0
   13f54:	d100      	bne.n	13f58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f58:	bf00      	nop
   13f5a:	b003      	add	sp, #12
   13f5c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f60:	1fff9660 	.word	0x1fff9660
   13f64:	1fff965c 	.word	0x1fff965c

00013f68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   13f68:	b500      	push	{lr}
   13f6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f6c:	f7ec fe54 	bl	c18 <Sys_GetCoreID>
   13f70:	4603      	mov	r3, r0
   13f72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   13f74:	4a10      	ldr	r2, [pc, #64]	; (13fb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   13f76:	9b01      	ldr	r3, [sp, #4]
   13f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d10d      	bne.n	13f9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f80:	f7ec fd7b 	bl	a7a <Pwm_schm_read_msr>
   13f84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f86:	9b00      	ldr	r3, [sp, #0]
   13f88:	f003 0301 	and.w	r3, r3, #1
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d100      	bne.n	13f92 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   13f92:	490a      	ldr	r1, [pc, #40]	; (13fbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   13f94:	9b01      	ldr	r3, [sp, #4]
   13f96:	9a00      	ldr	r2, [sp, #0]
   13f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   13f9c:	4a06      	ldr	r2, [pc, #24]	; (13fb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   13f9e:	9b01      	ldr	r3, [sp, #4]
   13fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fa4:	1c5a      	adds	r2, r3, #1
   13fa6:	4904      	ldr	r1, [pc, #16]	; (13fb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   13fa8:	9b01      	ldr	r3, [sp, #4]
   13faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fae:	bf00      	nop
   13fb0:	b003      	add	sp, #12
   13fb2:	f85d fb04 	ldr.w	pc, [sp], #4
   13fb6:	bf00      	nop
   13fb8:	1fff9668 	.word	0x1fff9668
   13fbc:	1fff9664 	.word	0x1fff9664

00013fc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   13fc0:	b500      	push	{lr}
   13fc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fc4:	f7ec fe28 	bl	c18 <Sys_GetCoreID>
   13fc8:	4603      	mov	r3, r0
   13fca:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   13fcc:	4a0d      	ldr	r2, [pc, #52]	; (14004 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   13fce:	9b01      	ldr	r3, [sp, #4]
   13fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fd4:	1e5a      	subs	r2, r3, #1
   13fd6:	490b      	ldr	r1, [pc, #44]	; (14004 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   13fd8:	9b01      	ldr	r3, [sp, #4]
   13fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   13fde:	4a0a      	ldr	r2, [pc, #40]	; (14008 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   13fe0:	9b01      	ldr	r3, [sp, #4]
   13fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fe6:	f003 0301 	and.w	r3, r3, #1
   13fea:	2b00      	cmp	r3, #0
   13fec:	d106      	bne.n	13ffc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   13fee:	4a05      	ldr	r2, [pc, #20]	; (14004 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   13ff0:	9b01      	ldr	r3, [sp, #4]
   13ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff6:	2b00      	cmp	r3, #0
   13ff8:	d100      	bne.n	13ffc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ffa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ffc:	bf00      	nop
   13ffe:	b003      	add	sp, #12
   14000:	f85d fb04 	ldr.w	pc, [sp], #4
   14004:	1fff9668 	.word	0x1fff9668
   14008:	1fff9664 	.word	0x1fff9664

0001400c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   1400c:	b500      	push	{lr}
   1400e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14010:	f7ec fe02 	bl	c18 <Sys_GetCoreID>
   14014:	4603      	mov	r3, r0
   14016:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   14018:	4a10      	ldr	r2, [pc, #64]	; (1405c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1401a:	9b01      	ldr	r3, [sp, #4]
   1401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14020:	2b00      	cmp	r3, #0
   14022:	d10d      	bne.n	14040 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14024:	f7ec fd29 	bl	a7a <Pwm_schm_read_msr>
   14028:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1402a:	9b00      	ldr	r3, [sp, #0]
   1402c:	f003 0301 	and.w	r3, r3, #1
   14030:	2b00      	cmp	r3, #0
   14032:	d100      	bne.n	14036 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14034:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   14036:	490a      	ldr	r1, [pc, #40]	; (14060 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   14038:	9b01      	ldr	r3, [sp, #4]
   1403a:	9a00      	ldr	r2, [sp, #0]
   1403c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   14040:	4a06      	ldr	r2, [pc, #24]	; (1405c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   14042:	9b01      	ldr	r3, [sp, #4]
   14044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14048:	1c5a      	adds	r2, r3, #1
   1404a:	4904      	ldr	r1, [pc, #16]	; (1405c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1404c:	9b01      	ldr	r3, [sp, #4]
   1404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14052:	bf00      	nop
   14054:	b003      	add	sp, #12
   14056:	f85d fb04 	ldr.w	pc, [sp], #4
   1405a:	bf00      	nop
   1405c:	1fff9670 	.word	0x1fff9670
   14060:	1fff966c 	.word	0x1fff966c

00014064 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   14064:	b500      	push	{lr}
   14066:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14068:	f7ec fdd6 	bl	c18 <Sys_GetCoreID>
   1406c:	4603      	mov	r3, r0
   1406e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   14070:	4a0d      	ldr	r2, [pc, #52]	; (140a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   14072:	9b01      	ldr	r3, [sp, #4]
   14074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14078:	1e5a      	subs	r2, r3, #1
   1407a:	490b      	ldr	r1, [pc, #44]	; (140a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   1407c:	9b01      	ldr	r3, [sp, #4]
   1407e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   14082:	4a0a      	ldr	r2, [pc, #40]	; (140ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   14084:	9b01      	ldr	r3, [sp, #4]
   14086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1408a:	f003 0301 	and.w	r3, r3, #1
   1408e:	2b00      	cmp	r3, #0
   14090:	d106      	bne.n	140a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   14092:	4a05      	ldr	r2, [pc, #20]	; (140a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   14094:	9b01      	ldr	r3, [sp, #4]
   14096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1409a:	2b00      	cmp	r3, #0
   1409c:	d100      	bne.n	140a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1409e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140a0:	bf00      	nop
   140a2:	b003      	add	sp, #12
   140a4:	f85d fb04 	ldr.w	pc, [sp], #4
   140a8:	1fff9670 	.word	0x1fff9670
   140ac:	1fff966c 	.word	0x1fff966c

000140b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   140b0:	b500      	push	{lr}
   140b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140b4:	f7ec fdb0 	bl	c18 <Sys_GetCoreID>
   140b8:	4603      	mov	r3, r0
   140ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   140bc:	4a10      	ldr	r2, [pc, #64]	; (14100 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   140be:	9b01      	ldr	r3, [sp, #4]
   140c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c4:	2b00      	cmp	r3, #0
   140c6:	d10d      	bne.n	140e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140c8:	f7ec fcd7 	bl	a7a <Pwm_schm_read_msr>
   140cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140ce:	9b00      	ldr	r3, [sp, #0]
   140d0:	f003 0301 	and.w	r3, r3, #1
   140d4:	2b00      	cmp	r3, #0
   140d6:	d100      	bne.n	140da <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   140da:	490a      	ldr	r1, [pc, #40]	; (14104 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   140dc:	9b01      	ldr	r3, [sp, #4]
   140de:	9a00      	ldr	r2, [sp, #0]
   140e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   140e4:	4a06      	ldr	r2, [pc, #24]	; (14100 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   140e6:	9b01      	ldr	r3, [sp, #4]
   140e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140ec:	1c5a      	adds	r2, r3, #1
   140ee:	4904      	ldr	r1, [pc, #16]	; (14100 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   140f0:	9b01      	ldr	r3, [sp, #4]
   140f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140f6:	bf00      	nop
   140f8:	b003      	add	sp, #12
   140fa:	f85d fb04 	ldr.w	pc, [sp], #4
   140fe:	bf00      	nop
   14100:	1fff9678 	.word	0x1fff9678
   14104:	1fff9674 	.word	0x1fff9674

00014108 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   14108:	b500      	push	{lr}
   1410a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1410c:	f7ec fd84 	bl	c18 <Sys_GetCoreID>
   14110:	4603      	mov	r3, r0
   14112:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   14114:	4a0d      	ldr	r2, [pc, #52]	; (1414c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   14116:	9b01      	ldr	r3, [sp, #4]
   14118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1411c:	1e5a      	subs	r2, r3, #1
   1411e:	490b      	ldr	r1, [pc, #44]	; (1414c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   14120:	9b01      	ldr	r3, [sp, #4]
   14122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   14126:	4a0a      	ldr	r2, [pc, #40]	; (14150 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   14128:	9b01      	ldr	r3, [sp, #4]
   1412a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1412e:	f003 0301 	and.w	r3, r3, #1
   14132:	2b00      	cmp	r3, #0
   14134:	d106      	bne.n	14144 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   14136:	4a05      	ldr	r2, [pc, #20]	; (1414c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   14138:	9b01      	ldr	r3, [sp, #4]
   1413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1413e:	2b00      	cmp	r3, #0
   14140:	d100      	bne.n	14144 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14142:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14144:	bf00      	nop
   14146:	b003      	add	sp, #12
   14148:	f85d fb04 	ldr.w	pc, [sp], #4
   1414c:	1fff9678 	.word	0x1fff9678
   14150:	1fff9674 	.word	0x1fff9674

00014154 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   14154:	b500      	push	{lr}
   14156:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14158:	f7ec fd5e 	bl	c18 <Sys_GetCoreID>
   1415c:	4603      	mov	r3, r0
   1415e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   14160:	4a10      	ldr	r2, [pc, #64]	; (141a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   14162:	9b01      	ldr	r3, [sp, #4]
   14164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14168:	2b00      	cmp	r3, #0
   1416a:	d10d      	bne.n	14188 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1416c:	f7ec fc85 	bl	a7a <Pwm_schm_read_msr>
   14170:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14172:	9b00      	ldr	r3, [sp, #0]
   14174:	f003 0301 	and.w	r3, r3, #1
   14178:	2b00      	cmp	r3, #0
   1417a:	d100      	bne.n	1417e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1417c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1417e:	490a      	ldr	r1, [pc, #40]	; (141a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   14180:	9b01      	ldr	r3, [sp, #4]
   14182:	9a00      	ldr	r2, [sp, #0]
   14184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   14188:	4a06      	ldr	r2, [pc, #24]	; (141a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   1418a:	9b01      	ldr	r3, [sp, #4]
   1418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14190:	1c5a      	adds	r2, r3, #1
   14192:	4904      	ldr	r1, [pc, #16]	; (141a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   14194:	9b01      	ldr	r3, [sp, #4]
   14196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1419a:	bf00      	nop
   1419c:	b003      	add	sp, #12
   1419e:	f85d fb04 	ldr.w	pc, [sp], #4
   141a2:	bf00      	nop
   141a4:	1fff9680 	.word	0x1fff9680
   141a8:	1fff967c 	.word	0x1fff967c

000141ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   141ac:	b500      	push	{lr}
   141ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141b0:	f7ec fd32 	bl	c18 <Sys_GetCoreID>
   141b4:	4603      	mov	r3, r0
   141b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   141b8:	4a0d      	ldr	r2, [pc, #52]	; (141f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   141ba:	9b01      	ldr	r3, [sp, #4]
   141bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141c0:	1e5a      	subs	r2, r3, #1
   141c2:	490b      	ldr	r1, [pc, #44]	; (141f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   141c4:	9b01      	ldr	r3, [sp, #4]
   141c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   141ca:	4a0a      	ldr	r2, [pc, #40]	; (141f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   141cc:	9b01      	ldr	r3, [sp, #4]
   141ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141d2:	f003 0301 	and.w	r3, r3, #1
   141d6:	2b00      	cmp	r3, #0
   141d8:	d106      	bne.n	141e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   141da:	4a05      	ldr	r2, [pc, #20]	; (141f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   141dc:	9b01      	ldr	r3, [sp, #4]
   141de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141e2:	2b00      	cmp	r3, #0
   141e4:	d100      	bne.n	141e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141e8:	bf00      	nop
   141ea:	b003      	add	sp, #12
   141ec:	f85d fb04 	ldr.w	pc, [sp], #4
   141f0:	1fff9680 	.word	0x1fff9680
   141f4:	1fff967c 	.word	0x1fff967c

000141f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   141f8:	b500      	push	{lr}
   141fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141fc:	f7ec fd0c 	bl	c18 <Sys_GetCoreID>
   14200:	4603      	mov	r3, r0
   14202:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   14204:	4a10      	ldr	r2, [pc, #64]	; (14248 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   14206:	9b01      	ldr	r3, [sp, #4]
   14208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1420c:	2b00      	cmp	r3, #0
   1420e:	d10d      	bne.n	1422c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14210:	f7ec fc33 	bl	a7a <Pwm_schm_read_msr>
   14214:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14216:	9b00      	ldr	r3, [sp, #0]
   14218:	f003 0301 	and.w	r3, r3, #1
   1421c:	2b00      	cmp	r3, #0
   1421e:	d100      	bne.n	14222 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14220:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   14222:	490a      	ldr	r1, [pc, #40]	; (1424c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   14224:	9b01      	ldr	r3, [sp, #4]
   14226:	9a00      	ldr	r2, [sp, #0]
   14228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   1422c:	4a06      	ldr	r2, [pc, #24]	; (14248 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1422e:	9b01      	ldr	r3, [sp, #4]
   14230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14234:	1c5a      	adds	r2, r3, #1
   14236:	4904      	ldr	r1, [pc, #16]	; (14248 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   14238:	9b01      	ldr	r3, [sp, #4]
   1423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1423e:	bf00      	nop
   14240:	b003      	add	sp, #12
   14242:	f85d fb04 	ldr.w	pc, [sp], #4
   14246:	bf00      	nop
   14248:	1fff9688 	.word	0x1fff9688
   1424c:	1fff9684 	.word	0x1fff9684

00014250 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   14250:	b500      	push	{lr}
   14252:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14254:	f7ec fce0 	bl	c18 <Sys_GetCoreID>
   14258:	4603      	mov	r3, r0
   1425a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   1425c:	4a0d      	ldr	r2, [pc, #52]	; (14294 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   1425e:	9b01      	ldr	r3, [sp, #4]
   14260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14264:	1e5a      	subs	r2, r3, #1
   14266:	490b      	ldr	r1, [pc, #44]	; (14294 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   14268:	9b01      	ldr	r3, [sp, #4]
   1426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1426e:	4a0a      	ldr	r2, [pc, #40]	; (14298 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   14270:	9b01      	ldr	r3, [sp, #4]
   14272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14276:	f003 0301 	and.w	r3, r3, #1
   1427a:	2b00      	cmp	r3, #0
   1427c:	d106      	bne.n	1428c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   1427e:	4a05      	ldr	r2, [pc, #20]	; (14294 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   14280:	9b01      	ldr	r3, [sp, #4]
   14282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14286:	2b00      	cmp	r3, #0
   14288:	d100      	bne.n	1428c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1428a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1428c:	bf00      	nop
   1428e:	b003      	add	sp, #12
   14290:	f85d fb04 	ldr.w	pc, [sp], #4
   14294:	1fff9688 	.word	0x1fff9688
   14298:	1fff9684 	.word	0x1fff9684

0001429c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   1429c:	b500      	push	{lr}
   1429e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142a0:	f7ec fcba 	bl	c18 <Sys_GetCoreID>
   142a4:	4603      	mov	r3, r0
   142a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   142a8:	4a10      	ldr	r2, [pc, #64]	; (142ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   142aa:	9b01      	ldr	r3, [sp, #4]
   142ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b0:	2b00      	cmp	r3, #0
   142b2:	d10d      	bne.n	142d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142b4:	f7ec fbe1 	bl	a7a <Pwm_schm_read_msr>
   142b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142ba:	9b00      	ldr	r3, [sp, #0]
   142bc:	f003 0301 	and.w	r3, r3, #1
   142c0:	2b00      	cmp	r3, #0
   142c2:	d100      	bne.n	142c6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   142c6:	490a      	ldr	r1, [pc, #40]	; (142f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   142c8:	9b01      	ldr	r3, [sp, #4]
   142ca:	9a00      	ldr	r2, [sp, #0]
   142cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   142d0:	4a06      	ldr	r2, [pc, #24]	; (142ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   142d2:	9b01      	ldr	r3, [sp, #4]
   142d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d8:	1c5a      	adds	r2, r3, #1
   142da:	4904      	ldr	r1, [pc, #16]	; (142ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   142dc:	9b01      	ldr	r3, [sp, #4]
   142de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142e2:	bf00      	nop
   142e4:	b003      	add	sp, #12
   142e6:	f85d fb04 	ldr.w	pc, [sp], #4
   142ea:	bf00      	nop
   142ec:	1fff9690 	.word	0x1fff9690
   142f0:	1fff968c 	.word	0x1fff968c

000142f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   142f4:	b500      	push	{lr}
   142f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142f8:	f7ec fc8e 	bl	c18 <Sys_GetCoreID>
   142fc:	4603      	mov	r3, r0
   142fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   14300:	4a0d      	ldr	r2, [pc, #52]	; (14338 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   14302:	9b01      	ldr	r3, [sp, #4]
   14304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14308:	1e5a      	subs	r2, r3, #1
   1430a:	490b      	ldr	r1, [pc, #44]	; (14338 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   1430c:	9b01      	ldr	r3, [sp, #4]
   1430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   14312:	4a0a      	ldr	r2, [pc, #40]	; (1433c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   14314:	9b01      	ldr	r3, [sp, #4]
   14316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1431a:	f003 0301 	and.w	r3, r3, #1
   1431e:	2b00      	cmp	r3, #0
   14320:	d106      	bne.n	14330 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   14322:	4a05      	ldr	r2, [pc, #20]	; (14338 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1432a:	2b00      	cmp	r3, #0
   1432c:	d100      	bne.n	14330 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1432e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14330:	bf00      	nop
   14332:	b003      	add	sp, #12
   14334:	f85d fb04 	ldr.w	pc, [sp], #4
   14338:	1fff9690 	.word	0x1fff9690
   1433c:	1fff968c 	.word	0x1fff968c

00014340 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   14340:	b500      	push	{lr}
   14342:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14344:	f7ec fc68 	bl	c18 <Sys_GetCoreID>
   14348:	4603      	mov	r3, r0
   1434a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   1434c:	4a10      	ldr	r2, [pc, #64]	; (14390 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   1434e:	9b01      	ldr	r3, [sp, #4]
   14350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14354:	2b00      	cmp	r3, #0
   14356:	d10d      	bne.n	14374 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14358:	f7ec fb8f 	bl	a7a <Pwm_schm_read_msr>
   1435c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1435e:	9b00      	ldr	r3, [sp, #0]
   14360:	f003 0301 	and.w	r3, r3, #1
   14364:	2b00      	cmp	r3, #0
   14366:	d100      	bne.n	1436a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14368:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1436a:	490a      	ldr	r1, [pc, #40]	; (14394 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   1436c:	9b01      	ldr	r3, [sp, #4]
   1436e:	9a00      	ldr	r2, [sp, #0]
   14370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   14374:	4a06      	ldr	r2, [pc, #24]	; (14390 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   14376:	9b01      	ldr	r3, [sp, #4]
   14378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1437c:	1c5a      	adds	r2, r3, #1
   1437e:	4904      	ldr	r1, [pc, #16]	; (14390 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   14380:	9b01      	ldr	r3, [sp, #4]
   14382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14386:	bf00      	nop
   14388:	b003      	add	sp, #12
   1438a:	f85d fb04 	ldr.w	pc, [sp], #4
   1438e:	bf00      	nop
   14390:	1fff9698 	.word	0x1fff9698
   14394:	1fff9694 	.word	0x1fff9694

00014398 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   14398:	b500      	push	{lr}
   1439a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1439c:	f7ec fc3c 	bl	c18 <Sys_GetCoreID>
   143a0:	4603      	mov	r3, r0
   143a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   143a4:	4a0d      	ldr	r2, [pc, #52]	; (143dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   143a6:	9b01      	ldr	r3, [sp, #4]
   143a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ac:	1e5a      	subs	r2, r3, #1
   143ae:	490b      	ldr	r1, [pc, #44]	; (143dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   143b0:	9b01      	ldr	r3, [sp, #4]
   143b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   143b6:	4a0a      	ldr	r2, [pc, #40]	; (143e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   143b8:	9b01      	ldr	r3, [sp, #4]
   143ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143be:	f003 0301 	and.w	r3, r3, #1
   143c2:	2b00      	cmp	r3, #0
   143c4:	d106      	bne.n	143d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   143c6:	4a05      	ldr	r2, [pc, #20]	; (143dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   143c8:	9b01      	ldr	r3, [sp, #4]
   143ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ce:	2b00      	cmp	r3, #0
   143d0:	d100      	bne.n	143d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143d4:	bf00      	nop
   143d6:	b003      	add	sp, #12
   143d8:	f85d fb04 	ldr.w	pc, [sp], #4
   143dc:	1fff9698 	.word	0x1fff9698
   143e0:	1fff9694 	.word	0x1fff9694

000143e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   143e4:	b500      	push	{lr}
   143e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143e8:	f7ec fc16 	bl	c18 <Sys_GetCoreID>
   143ec:	4603      	mov	r3, r0
   143ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   143f0:	4a10      	ldr	r2, [pc, #64]	; (14434 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   143f2:	9b01      	ldr	r3, [sp, #4]
   143f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f8:	2b00      	cmp	r3, #0
   143fa:	d10d      	bne.n	14418 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143fc:	f7ec fb3d 	bl	a7a <Pwm_schm_read_msr>
   14400:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14402:	9b00      	ldr	r3, [sp, #0]
   14404:	f003 0301 	and.w	r3, r3, #1
   14408:	2b00      	cmp	r3, #0
   1440a:	d100      	bne.n	1440e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1440c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1440e:	490a      	ldr	r1, [pc, #40]	; (14438 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   14410:	9b01      	ldr	r3, [sp, #4]
   14412:	9a00      	ldr	r2, [sp, #0]
   14414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   14418:	4a06      	ldr	r2, [pc, #24]	; (14434 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   1441a:	9b01      	ldr	r3, [sp, #4]
   1441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14420:	1c5a      	adds	r2, r3, #1
   14422:	4904      	ldr	r1, [pc, #16]	; (14434 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1442a:	bf00      	nop
   1442c:	b003      	add	sp, #12
   1442e:	f85d fb04 	ldr.w	pc, [sp], #4
   14432:	bf00      	nop
   14434:	1fff96a0 	.word	0x1fff96a0
   14438:	1fff969c 	.word	0x1fff969c

0001443c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   1443c:	b500      	push	{lr}
   1443e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14440:	f7ec fbea 	bl	c18 <Sys_GetCoreID>
   14444:	4603      	mov	r3, r0
   14446:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   14448:	4a0d      	ldr	r2, [pc, #52]	; (14480 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   1444a:	9b01      	ldr	r3, [sp, #4]
   1444c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14450:	1e5a      	subs	r2, r3, #1
   14452:	490b      	ldr	r1, [pc, #44]	; (14480 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   14454:	9b01      	ldr	r3, [sp, #4]
   14456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1445a:	4a0a      	ldr	r2, [pc, #40]	; (14484 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   1445c:	9b01      	ldr	r3, [sp, #4]
   1445e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14462:	f003 0301 	and.w	r3, r3, #1
   14466:	2b00      	cmp	r3, #0
   14468:	d106      	bne.n	14478 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   1446a:	4a05      	ldr	r2, [pc, #20]	; (14480 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14472:	2b00      	cmp	r3, #0
   14474:	d100      	bne.n	14478 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14476:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14478:	bf00      	nop
   1447a:	b003      	add	sp, #12
   1447c:	f85d fb04 	ldr.w	pc, [sp], #4
   14480:	1fff96a0 	.word	0x1fff96a0
   14484:	1fff969c 	.word	0x1fff969c

00014488 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   14488:	b500      	push	{lr}
   1448a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1448c:	f7ec fbc4 	bl	c18 <Sys_GetCoreID>
   14490:	4603      	mov	r3, r0
   14492:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   14494:	4a10      	ldr	r2, [pc, #64]	; (144d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   14496:	9b01      	ldr	r3, [sp, #4]
   14498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1449c:	2b00      	cmp	r3, #0
   1449e:	d10d      	bne.n	144bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144a0:	f7ec faeb 	bl	a7a <Pwm_schm_read_msr>
   144a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144a6:	9b00      	ldr	r3, [sp, #0]
   144a8:	f003 0301 	and.w	r3, r3, #1
   144ac:	2b00      	cmp	r3, #0
   144ae:	d100      	bne.n	144b2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   144b2:	490a      	ldr	r1, [pc, #40]	; (144dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   144b4:	9b01      	ldr	r3, [sp, #4]
   144b6:	9a00      	ldr	r2, [sp, #0]
   144b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   144bc:	4a06      	ldr	r2, [pc, #24]	; (144d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   144be:	9b01      	ldr	r3, [sp, #4]
   144c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144c4:	1c5a      	adds	r2, r3, #1
   144c6:	4904      	ldr	r1, [pc, #16]	; (144d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   144c8:	9b01      	ldr	r3, [sp, #4]
   144ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144ce:	bf00      	nop
   144d0:	b003      	add	sp, #12
   144d2:	f85d fb04 	ldr.w	pc, [sp], #4
   144d6:	bf00      	nop
   144d8:	1fff96a8 	.word	0x1fff96a8
   144dc:	1fff96a4 	.word	0x1fff96a4

000144e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   144e0:	b500      	push	{lr}
   144e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144e4:	f7ec fb98 	bl	c18 <Sys_GetCoreID>
   144e8:	4603      	mov	r3, r0
   144ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   144ec:	4a0d      	ldr	r2, [pc, #52]	; (14524 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   144ee:	9b01      	ldr	r3, [sp, #4]
   144f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144f4:	1e5a      	subs	r2, r3, #1
   144f6:	490b      	ldr	r1, [pc, #44]	; (14524 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   144f8:	9b01      	ldr	r3, [sp, #4]
   144fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   144fe:	4a0a      	ldr	r2, [pc, #40]	; (14528 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   14500:	9b01      	ldr	r3, [sp, #4]
   14502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14506:	f003 0301 	and.w	r3, r3, #1
   1450a:	2b00      	cmp	r3, #0
   1450c:	d106      	bne.n	1451c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   1450e:	4a05      	ldr	r2, [pc, #20]	; (14524 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   14510:	9b01      	ldr	r3, [sp, #4]
   14512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14516:	2b00      	cmp	r3, #0
   14518:	d100      	bne.n	1451c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1451a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1451c:	bf00      	nop
   1451e:	b003      	add	sp, #12
   14520:	f85d fb04 	ldr.w	pc, [sp], #4
   14524:	1fff96a8 	.word	0x1fff96a8
   14528:	1fff96a4 	.word	0x1fff96a4

0001452c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   1452c:	b500      	push	{lr}
   1452e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14530:	f7ec fb72 	bl	c18 <Sys_GetCoreID>
   14534:	4603      	mov	r3, r0
   14536:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   14538:	4a10      	ldr	r2, [pc, #64]	; (1457c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   1453a:	9b01      	ldr	r3, [sp, #4]
   1453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14540:	2b00      	cmp	r3, #0
   14542:	d10d      	bne.n	14560 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14544:	f7ec fa99 	bl	a7a <Pwm_schm_read_msr>
   14548:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1454a:	9b00      	ldr	r3, [sp, #0]
   1454c:	f003 0301 	and.w	r3, r3, #1
   14550:	2b00      	cmp	r3, #0
   14552:	d100      	bne.n	14556 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14554:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   14556:	490a      	ldr	r1, [pc, #40]	; (14580 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   14558:	9b01      	ldr	r3, [sp, #4]
   1455a:	9a00      	ldr	r2, [sp, #0]
   1455c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   14560:	4a06      	ldr	r2, [pc, #24]	; (1457c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14568:	1c5a      	adds	r2, r3, #1
   1456a:	4904      	ldr	r1, [pc, #16]	; (1457c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   1456c:	9b01      	ldr	r3, [sp, #4]
   1456e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14572:	bf00      	nop
   14574:	b003      	add	sp, #12
   14576:	f85d fb04 	ldr.w	pc, [sp], #4
   1457a:	bf00      	nop
   1457c:	1fff96b0 	.word	0x1fff96b0
   14580:	1fff96ac 	.word	0x1fff96ac

00014584 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   14584:	b500      	push	{lr}
   14586:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14588:	f7ec fb46 	bl	c18 <Sys_GetCoreID>
   1458c:	4603      	mov	r3, r0
   1458e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   14590:	4a0d      	ldr	r2, [pc, #52]	; (145c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   14592:	9b01      	ldr	r3, [sp, #4]
   14594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14598:	1e5a      	subs	r2, r3, #1
   1459a:	490b      	ldr	r1, [pc, #44]	; (145c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   1459c:	9b01      	ldr	r3, [sp, #4]
   1459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   145a2:	4a0a      	ldr	r2, [pc, #40]	; (145cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   145a4:	9b01      	ldr	r3, [sp, #4]
   145a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145aa:	f003 0301 	and.w	r3, r3, #1
   145ae:	2b00      	cmp	r3, #0
   145b0:	d106      	bne.n	145c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   145b2:	4a05      	ldr	r2, [pc, #20]	; (145c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ba:	2b00      	cmp	r3, #0
   145bc:	d100      	bne.n	145c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145c0:	bf00      	nop
   145c2:	b003      	add	sp, #12
   145c4:	f85d fb04 	ldr.w	pc, [sp], #4
   145c8:	1fff96b0 	.word	0x1fff96b0
   145cc:	1fff96ac 	.word	0x1fff96ac

000145d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   145d0:	b500      	push	{lr}
   145d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145d4:	f7ec fb20 	bl	c18 <Sys_GetCoreID>
   145d8:	4603      	mov	r3, r0
   145da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   145dc:	4a10      	ldr	r2, [pc, #64]	; (14620 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   145de:	9b01      	ldr	r3, [sp, #4]
   145e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e4:	2b00      	cmp	r3, #0
   145e6:	d10d      	bne.n	14604 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145e8:	f7ec fa47 	bl	a7a <Pwm_schm_read_msr>
   145ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145ee:	9b00      	ldr	r3, [sp, #0]
   145f0:	f003 0301 	and.w	r3, r3, #1
   145f4:	2b00      	cmp	r3, #0
   145f6:	d100      	bne.n	145fa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   145fa:	490a      	ldr	r1, [pc, #40]	; (14624 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   145fc:	9b01      	ldr	r3, [sp, #4]
   145fe:	9a00      	ldr	r2, [sp, #0]
   14600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   14604:	4a06      	ldr	r2, [pc, #24]	; (14620 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   14606:	9b01      	ldr	r3, [sp, #4]
   14608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1460c:	1c5a      	adds	r2, r3, #1
   1460e:	4904      	ldr	r1, [pc, #16]	; (14620 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   14610:	9b01      	ldr	r3, [sp, #4]
   14612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14616:	bf00      	nop
   14618:	b003      	add	sp, #12
   1461a:	f85d fb04 	ldr.w	pc, [sp], #4
   1461e:	bf00      	nop
   14620:	1fff96b8 	.word	0x1fff96b8
   14624:	1fff96b4 	.word	0x1fff96b4

00014628 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   14628:	b500      	push	{lr}
   1462a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1462c:	f7ec faf4 	bl	c18 <Sys_GetCoreID>
   14630:	4603      	mov	r3, r0
   14632:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   14634:	4a0d      	ldr	r2, [pc, #52]	; (1466c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   14636:	9b01      	ldr	r3, [sp, #4]
   14638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1463c:	1e5a      	subs	r2, r3, #1
   1463e:	490b      	ldr	r1, [pc, #44]	; (1466c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   14640:	9b01      	ldr	r3, [sp, #4]
   14642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   14646:	4a0a      	ldr	r2, [pc, #40]	; (14670 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   14648:	9b01      	ldr	r3, [sp, #4]
   1464a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1464e:	f003 0301 	and.w	r3, r3, #1
   14652:	2b00      	cmp	r3, #0
   14654:	d106      	bne.n	14664 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   14656:	4a05      	ldr	r2, [pc, #20]	; (1466c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1465e:	2b00      	cmp	r3, #0
   14660:	d100      	bne.n	14664 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14662:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14664:	bf00      	nop
   14666:	b003      	add	sp, #12
   14668:	f85d fb04 	ldr.w	pc, [sp], #4
   1466c:	1fff96b8 	.word	0x1fff96b8
   14670:	1fff96b4 	.word	0x1fff96b4

00014674 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   14674:	b500      	push	{lr}
   14676:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14678:	f7ec face 	bl	c18 <Sys_GetCoreID>
   1467c:	4603      	mov	r3, r0
   1467e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   14680:	4a10      	ldr	r2, [pc, #64]	; (146c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   14682:	9b01      	ldr	r3, [sp, #4]
   14684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14688:	2b00      	cmp	r3, #0
   1468a:	d10d      	bne.n	146a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1468c:	f7ec f9f5 	bl	a7a <Pwm_schm_read_msr>
   14690:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14692:	9b00      	ldr	r3, [sp, #0]
   14694:	f003 0301 	and.w	r3, r3, #1
   14698:	2b00      	cmp	r3, #0
   1469a:	d100      	bne.n	1469e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1469c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   1469e:	490a      	ldr	r1, [pc, #40]	; (146c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   146a0:	9b01      	ldr	r3, [sp, #4]
   146a2:	9a00      	ldr	r2, [sp, #0]
   146a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   146a8:	4a06      	ldr	r2, [pc, #24]	; (146c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   146aa:	9b01      	ldr	r3, [sp, #4]
   146ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146b0:	1c5a      	adds	r2, r3, #1
   146b2:	4904      	ldr	r1, [pc, #16]	; (146c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   146b4:	9b01      	ldr	r3, [sp, #4]
   146b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146ba:	bf00      	nop
   146bc:	b003      	add	sp, #12
   146be:	f85d fb04 	ldr.w	pc, [sp], #4
   146c2:	bf00      	nop
   146c4:	1fff96c0 	.word	0x1fff96c0
   146c8:	1fff96bc 	.word	0x1fff96bc

000146cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   146cc:	b500      	push	{lr}
   146ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146d0:	f7ec faa2 	bl	c18 <Sys_GetCoreID>
   146d4:	4603      	mov	r3, r0
   146d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   146d8:	4a0d      	ldr	r2, [pc, #52]	; (14710 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   146da:	9b01      	ldr	r3, [sp, #4]
   146dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146e0:	1e5a      	subs	r2, r3, #1
   146e2:	490b      	ldr	r1, [pc, #44]	; (14710 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   146e4:	9b01      	ldr	r3, [sp, #4]
   146e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   146ea:	4a0a      	ldr	r2, [pc, #40]	; (14714 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   146ec:	9b01      	ldr	r3, [sp, #4]
   146ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146f2:	f003 0301 	and.w	r3, r3, #1
   146f6:	2b00      	cmp	r3, #0
   146f8:	d106      	bne.n	14708 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   146fa:	4a05      	ldr	r2, [pc, #20]	; (14710 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14702:	2b00      	cmp	r3, #0
   14704:	d100      	bne.n	14708 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14706:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14708:	bf00      	nop
   1470a:	b003      	add	sp, #12
   1470c:	f85d fb04 	ldr.w	pc, [sp], #4
   14710:	1fff96c0 	.word	0x1fff96c0
   14714:	1fff96bc 	.word	0x1fff96bc

00014718 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   14718:	b500      	push	{lr}
   1471a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1471c:	f7ec fa7c 	bl	c18 <Sys_GetCoreID>
   14720:	4603      	mov	r3, r0
   14722:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   14724:	4a10      	ldr	r2, [pc, #64]	; (14768 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   14726:	9b01      	ldr	r3, [sp, #4]
   14728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1472c:	2b00      	cmp	r3, #0
   1472e:	d10d      	bne.n	1474c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14730:	f7ec f9a3 	bl	a7a <Pwm_schm_read_msr>
   14734:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14736:	9b00      	ldr	r3, [sp, #0]
   14738:	f003 0301 	and.w	r3, r3, #1
   1473c:	2b00      	cmp	r3, #0
   1473e:	d100      	bne.n	14742 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14740:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   14742:	490a      	ldr	r1, [pc, #40]	; (1476c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   14744:	9b01      	ldr	r3, [sp, #4]
   14746:	9a00      	ldr	r2, [sp, #0]
   14748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   1474c:	4a06      	ldr	r2, [pc, #24]	; (14768 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14754:	1c5a      	adds	r2, r3, #1
   14756:	4904      	ldr	r1, [pc, #16]	; (14768 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   14758:	9b01      	ldr	r3, [sp, #4]
   1475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1475e:	bf00      	nop
   14760:	b003      	add	sp, #12
   14762:	f85d fb04 	ldr.w	pc, [sp], #4
   14766:	bf00      	nop
   14768:	1fff96c8 	.word	0x1fff96c8
   1476c:	1fff96c4 	.word	0x1fff96c4

00014770 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   14770:	b500      	push	{lr}
   14772:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14774:	f7ec fa50 	bl	c18 <Sys_GetCoreID>
   14778:	4603      	mov	r3, r0
   1477a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   1477c:	4a0d      	ldr	r2, [pc, #52]	; (147b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   1477e:	9b01      	ldr	r3, [sp, #4]
   14780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14784:	1e5a      	subs	r2, r3, #1
   14786:	490b      	ldr	r1, [pc, #44]	; (147b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   14788:	9b01      	ldr	r3, [sp, #4]
   1478a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   1478e:	4a0a      	ldr	r2, [pc, #40]	; (147b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   14790:	9b01      	ldr	r3, [sp, #4]
   14792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14796:	f003 0301 	and.w	r3, r3, #1
   1479a:	2b00      	cmp	r3, #0
   1479c:	d106      	bne.n	147ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   1479e:	4a05      	ldr	r2, [pc, #20]	; (147b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a6:	2b00      	cmp	r3, #0
   147a8:	d100      	bne.n	147ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147ac:	bf00      	nop
   147ae:	b003      	add	sp, #12
   147b0:	f85d fb04 	ldr.w	pc, [sp], #4
   147b4:	1fff96c8 	.word	0x1fff96c8
   147b8:	1fff96c4 	.word	0x1fff96c4

000147bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   147bc:	b500      	push	{lr}
   147be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147c0:	f7ec fa2a 	bl	c18 <Sys_GetCoreID>
   147c4:	4603      	mov	r3, r0
   147c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   147c8:	4a10      	ldr	r2, [pc, #64]	; (1480c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   147ca:	9b01      	ldr	r3, [sp, #4]
   147cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d0:	2b00      	cmp	r3, #0
   147d2:	d10d      	bne.n	147f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147d4:	f7ec f951 	bl	a7a <Pwm_schm_read_msr>
   147d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147da:	9b00      	ldr	r3, [sp, #0]
   147dc:	f003 0301 	and.w	r3, r3, #1
   147e0:	2b00      	cmp	r3, #0
   147e2:	d100      	bne.n	147e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   147e6:	490a      	ldr	r1, [pc, #40]	; (14810 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   147e8:	9b01      	ldr	r3, [sp, #4]
   147ea:	9a00      	ldr	r2, [sp, #0]
   147ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   147f0:	4a06      	ldr	r2, [pc, #24]	; (1480c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   147f2:	9b01      	ldr	r3, [sp, #4]
   147f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147f8:	1c5a      	adds	r2, r3, #1
   147fa:	4904      	ldr	r1, [pc, #16]	; (1480c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   147fc:	9b01      	ldr	r3, [sp, #4]
   147fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14802:	bf00      	nop
   14804:	b003      	add	sp, #12
   14806:	f85d fb04 	ldr.w	pc, [sp], #4
   1480a:	bf00      	nop
   1480c:	1fff96d0 	.word	0x1fff96d0
   14810:	1fff96cc 	.word	0x1fff96cc

00014814 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   14814:	b500      	push	{lr}
   14816:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14818:	f7ec f9fe 	bl	c18 <Sys_GetCoreID>
   1481c:	4603      	mov	r3, r0
   1481e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   14820:	4a0d      	ldr	r2, [pc, #52]	; (14858 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   14822:	9b01      	ldr	r3, [sp, #4]
   14824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14828:	1e5a      	subs	r2, r3, #1
   1482a:	490b      	ldr	r1, [pc, #44]	; (14858 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   1482c:	9b01      	ldr	r3, [sp, #4]
   1482e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   14832:	4a0a      	ldr	r2, [pc, #40]	; (1485c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   14834:	9b01      	ldr	r3, [sp, #4]
   14836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1483a:	f003 0301 	and.w	r3, r3, #1
   1483e:	2b00      	cmp	r3, #0
   14840:	d106      	bne.n	14850 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   14842:	4a05      	ldr	r2, [pc, #20]	; (14858 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1484a:	2b00      	cmp	r3, #0
   1484c:	d100      	bne.n	14850 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1484e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14850:	bf00      	nop
   14852:	b003      	add	sp, #12
   14854:	f85d fb04 	ldr.w	pc, [sp], #4
   14858:	1fff96d0 	.word	0x1fff96d0
   1485c:	1fff96cc 	.word	0x1fff96cc

00014860 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   14860:	bf00      	nop
   14862:	4770      	bx	lr

00014864 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   14864:	b510      	push	{r4, lr}
   14866:	b084      	sub	sp, #16
   14868:	4604      	mov	r4, r0
   1486a:	4608      	mov	r0, r1
   1486c:	4611      	mov	r1, r2
   1486e:	461a      	mov	r2, r3
   14870:	4623      	mov	r3, r4
   14872:	f8ad 3006 	strh.w	r3, [sp, #6]
   14876:	4603      	mov	r3, r0
   14878:	f88d 3005 	strb.w	r3, [sp, #5]
   1487c:	460b      	mov	r3, r1
   1487e:	f88d 3004 	strb.w	r3, [sp, #4]
   14882:	4613      	mov	r3, r2
   14884:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14888:	f7ec f9c6 	bl	c18 <Sys_GetCoreID>
   1488c:	4603      	mov	r3, r0
   1488e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   14890:	490d      	ldr	r1, [pc, #52]	; (148c8 <Det_ReportError+0x64>)
   14892:	9b03      	ldr	r3, [sp, #12]
   14894:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14898:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   1489c:	4a0b      	ldr	r2, [pc, #44]	; (148cc <Det_ReportError+0x68>)
   1489e:	9b03      	ldr	r3, [sp, #12]
   148a0:	4413      	add	r3, r2
   148a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   148a6:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   148a8:	4a09      	ldr	r2, [pc, #36]	; (148d0 <Det_ReportError+0x6c>)
   148aa:	9b03      	ldr	r3, [sp, #12]
   148ac:	4413      	add	r3, r2
   148ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
   148b2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   148b4:	4a07      	ldr	r2, [pc, #28]	; (148d4 <Det_ReportError+0x70>)
   148b6:	9b03      	ldr	r3, [sp, #12]
   148b8:	4413      	add	r3, r2
   148ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
   148be:	701a      	strb	r2, [r3, #0]

    return E_OK;
   148c0:	2300      	movs	r3, #0
}
   148c2:	4618      	mov	r0, r3
   148c4:	b004      	add	sp, #16
   148c6:	bd10      	pop	{r4, pc}
   148c8:	1fff96fc 	.word	0x1fff96fc
   148cc:	1fff96d4 	.word	0x1fff96d4
   148d0:	1fff96d8 	.word	0x1fff96d8
   148d4:	1fff96dc 	.word	0x1fff96dc

000148d8 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   148d8:	b510      	push	{r4, lr}
   148da:	b084      	sub	sp, #16
   148dc:	4604      	mov	r4, r0
   148de:	4608      	mov	r0, r1
   148e0:	4611      	mov	r1, r2
   148e2:	461a      	mov	r2, r3
   148e4:	4623      	mov	r3, r4
   148e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   148ea:	4603      	mov	r3, r0
   148ec:	f88d 3005 	strb.w	r3, [sp, #5]
   148f0:	460b      	mov	r3, r1
   148f2:	f88d 3004 	strb.w	r3, [sp, #4]
   148f6:	4613      	mov	r3, r2
   148f8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148fc:	f7ec f98c 	bl	c18 <Sys_GetCoreID>
   14900:	4603      	mov	r3, r0
   14902:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   14904:	490d      	ldr	r1, [pc, #52]	; (1493c <Det_ReportRuntimeError+0x64>)
   14906:	9b03      	ldr	r3, [sp, #12]
   14908:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1490c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   14910:	4a0b      	ldr	r2, [pc, #44]	; (14940 <Det_ReportRuntimeError+0x68>)
   14912:	9b03      	ldr	r3, [sp, #12]
   14914:	4413      	add	r3, r2
   14916:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1491a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   1491c:	4a09      	ldr	r2, [pc, #36]	; (14944 <Det_ReportRuntimeError+0x6c>)
   1491e:	9b03      	ldr	r3, [sp, #12]
   14920:	4413      	add	r3, r2
   14922:	f89d 2004 	ldrb.w	r2, [sp, #4]
   14926:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   14928:	4a07      	ldr	r2, [pc, #28]	; (14948 <Det_ReportRuntimeError+0x70>)
   1492a:	9b03      	ldr	r3, [sp, #12]
   1492c:	4413      	add	r3, r2
   1492e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   14932:	701a      	strb	r2, [r3, #0]

    return E_OK;
   14934:	2300      	movs	r3, #0
}
   14936:	4618      	mov	r0, r3
   14938:	b004      	add	sp, #16
   1493a:	bd10      	pop	{r4, pc}
   1493c:	1fff9700 	.word	0x1fff9700
   14940:	1fff96e0 	.word	0x1fff96e0
   14944:	1fff96e4 	.word	0x1fff96e4
   14948:	1fff96e8 	.word	0x1fff96e8

0001494c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   1494c:	b510      	push	{r4, lr}
   1494e:	b084      	sub	sp, #16
   14950:	4604      	mov	r4, r0
   14952:	4608      	mov	r0, r1
   14954:	4611      	mov	r1, r2
   14956:	461a      	mov	r2, r3
   14958:	4623      	mov	r3, r4
   1495a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1495e:	4603      	mov	r3, r0
   14960:	f88d 3005 	strb.w	r3, [sp, #5]
   14964:	460b      	mov	r3, r1
   14966:	f88d 3004 	strb.w	r3, [sp, #4]
   1496a:	4613      	mov	r3, r2
   1496c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14970:	f7ec f952 	bl	c18 <Sys_GetCoreID>
   14974:	4603      	mov	r3, r0
   14976:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   14978:	490d      	ldr	r1, [pc, #52]	; (149b0 <Det_ReportTransientFault+0x64>)
   1497a:	9b03      	ldr	r3, [sp, #12]
   1497c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14980:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   14984:	4a0b      	ldr	r2, [pc, #44]	; (149b4 <Det_ReportTransientFault+0x68>)
   14986:	9b03      	ldr	r3, [sp, #12]
   14988:	4413      	add	r3, r2
   1498a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1498e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   14990:	4a09      	ldr	r2, [pc, #36]	; (149b8 <Det_ReportTransientFault+0x6c>)
   14992:	9b03      	ldr	r3, [sp, #12]
   14994:	4413      	add	r3, r2
   14996:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1499a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   1499c:	4a07      	ldr	r2, [pc, #28]	; (149bc <Det_ReportTransientFault+0x70>)
   1499e:	9b03      	ldr	r3, [sp, #12]
   149a0:	4413      	add	r3, r2
   149a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   149a6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   149a8:	2300      	movs	r3, #0
}
   149aa:	4618      	mov	r0, r3
   149ac:	b004      	add	sp, #16
   149ae:	bd10      	pop	{r4, pc}
   149b0:	1fff96f8 	.word	0x1fff96f8
   149b4:	1fff96ec 	.word	0x1fff96ec
   149b8:	1fff96f0 	.word	0x1fff96f0
   149bc:	1fff96f4 	.word	0x1fff96f4

000149c0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   149c0:	bf00      	nop
   149c2:	4770      	bx	lr

000149c4 <Fls_ACEraseRomEnd>:
   149c4:	70657453 	.word	0x70657453
   149c8:	72657020 	.word	0x72657020
   149cc:	746e6563 	.word	0x746e6563
   149d0:	3a656a61 	.word	0x3a656a61
   149d4:	2c642520 	.word	0x2c642520
   149d8:	42475220 	.word	0x42475220
   149dc:	77615220 	.word	0x77615220
   149e0:	74754420 	.word	0x74754420
   149e4:	79432079 	.word	0x79432079
   149e8:	3a656c63 	.word	0x3a656c63
   149ec:	0a642520 	.word	0x0a642520
   149f0:	00000000 	.word	0x00000000
   149f4:	6d726554 	.word	0x6d726554
   149f8:	6c616e69 	.word	0x6c616e69
   149fc:	00000000 	.word	0x00000000
   14a00:	4c554e28 	.word	0x4c554e28
   14a04:	0000294c 	.word	0x0000294c

00014a08 <Clock_Ip_au8DividerCallbackIndex>:
   14a08:	0e0d0c00 06030201 0a070409 000b0805     ................

00014a18 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00014a28 <Clock_Ip_au8XoscCallbackIndex>:
   14a28:	00000100 00000000 00000000 00000000     ................

00014a38 <Clock_Ip_au8IrcoscCallbackIndex>:
   14a38:	03020100 00000004 00000000 00000000     ................

00014a48 <Clock_Ip_au8GateCallbackIndex>:
   14a48:	06010200 01040301 00000500 00000000     ................

00014a58 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00014a68 <Clock_Ip_au8PllCallbackIndex>:
   14a68:	00000100 00000000 00000000 00000000     ................

00014a78 <Clock_Ip_au8SelectorCallbackIndex>:
   14a78:	0a090800 03020109 07060504 00000000     ................

00014a88 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00014a98 <Clock_Ip_au8CmuCallbackIndex>:
	...

00014aa8 <Clock_Ip_au8ClockFeatures>:
	...
   14ab8:	01000000 00000000 00000000 00000002     ................
   14ac8:	00000000 00000300 00000000 00040000     ................
   14ad8:	00000000 05000000 00000000 00000000     ................
   14ae8:	00000006 00000000 00000100 00000000     ................
   14af8:	00010000 00000000 04000000 00000000     ................
   14b08:	00000000 00000005 00000001 00000401     ................
   14b18:	00000200 00050100 00030000 04020000     ................
   14b28:	04000000 02000000 00000005 00000005     ................
   14b38:	00000403 00000600 00050300 00070000     ................
   14b48:	05000000 00000000 00000000 00000006     ................
	...
   14b88:	00050000 00000000 06000000 00000100     ................
   14b98:	00000000 00030007 00000000 00000000     ................
   14ba8:	00000000 00060000 00000000 07000000     ................
   14bb8:	00000100 00000000 00030008 00000000     ................
	...
   14bd0:	00090000 00000000 0a000000 00000100     ................
   14be0:	00000000 0003000b 00000000 00000000     ................
   14bf0:	00000000 000c0000 00000000 0d000000     ................
   14c00:	00000100 00000000 0003000e 00000000     ................
   14c10:	00000800 00000000 00090000 00000000     ................
   14c20:	0a000000 00000000 00000000 0000000b     ................
   14c30:	00000000 00000b01 00000000 000b0200     ................
   14c40:	00000000 0b030000 00000000 00000000     ................
	...
   14c58:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   14c68:	01000000 00000000 00000000 00000007     ................
   14c78:	00007300 00000700 00320000 00090000     .s........2.....
   14c88:	02000000 07000000 00000000 00000021     ............!...
   14c98:	00000009 00000400 00000900 00030000     ................
   14ca8:	00070000 61000000 07000000 00000000     .......a........
   14cb8:	00000024 00000007 00002500 00000700     $........%......
   14cc8:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   14cd8:	00000000 00000020 38000004 00003800     .... ......8.8..
   14ce8:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   14cf8:	04000000 00260000 00000026 66000004     ......&.&......f
   14d08:	00006600 00000400 00370037 00040000     .f......7.7.....
   14d18:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   14d28:	2e000004 00002e00 00000200 00404040     ............@@@.
   14d38:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   14d48:	0000006b 6c000004 00006c00 00000900     k......l.l......
   14d58:	00010000 00090000 00000000 07000000     ................
   14d68:	00000000 00000036 00000007 00003100     ....6........1..
   14d78:	00000700 00490000 00070000 4a000000     ......I........J
   14d88:	07000000 00000000 0000004b 00000007     ........K.......
   14d98:	00004c00 00000700 004d0000 00070000     .L........M.....
   14da8:	3d000000 03000000 00000000 00000000     ...=............

00014db8 <Clock_Ip_au16SelectorEntryHardwareValue>:
   14db8:	01010a03 01010001 04040002 02000603     ................
   14dc8:	00010810 02020100 00000000 00000007     ................
   14dd8:	00000009 00000000 00000c0e 00000000     ................
	...

00014e10 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   14e10:	00020000 00000300 00000601 00000000     ................
	...

00014e40 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   14e40:	00000700 00000000 02020000 01010303     ................
   14e50:	03020606 00000000 00000000 00000000     ................
	...

00014e70 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   14e70:	00000001 00000000 02020000 01010303     ................
   14e80:	03020606 00000000 00000000 00000000     ................
	...

00014ea0 <Clock_Ip_au8DividerValueHardwareValue>:
   14ea0:	00020100 00000003 00000004 00000000     ................
   14eb0:	00000005 00000000 00000000 00000000     ................
   14ec0:	00000006 00000000 00000000 00000000     ................
	...
   14ee0:	00000007                                ....

00014ee4 <Clock_Ip_apxScgPeriphAsyncDivs>:
   14ee4:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00014ef4 <Clock_Ip_aeSourceTypeClockName>:
   14ef4:	00000000 00000001 00000001 00000001     ................
   14f04:	00000001 00000001 00000001 00000001     ................
   14f14:	00000002 00000003 00000001 00000001     ................
   14f24:	00000001 00000001 00000002 00000002     ................
   14f34:	00000003 00000003 00000001 00000001     ................
   14f44:	00000004 00000004 00000004 00000004     ................
	...

00014fb0 <Clock_Ip_aeHwPllName>:
   14fb0:	00000009                                ....

00014fb4 <Clock_Ip_aeHwDfsName>:
   14fb4:	00000057                                W...

00014fb8 <Clock_Ip_axDividerCallbacks>:
   14fb8:	00002c59 00002c63 00002c7d 00002c97     Y,..c,..},...,..
   14fc8:	00002cb1 00002ccb 00002ce5 00002cff     .,...,...,...,..
   14fd8:	00002d19 00002d33 00002d4d 00002d67     .-..3-..M-..g-..
   14fe8:	00002d81 00002d9b 00002db5              .-...-...-..

00014ff4 <Clock_Ip_axDividerTriggerCallbacks>:
   14ff4:	00003129 00003129                       )1..)1..

00014ffc <Clock_Ip_axExtOscCallbacks>:
   14ffc:	00003135 00003135 00003135 0000313f     51..51..51..?1..
   1500c:	00003135 00003149 00003163 0000317d     51..I1..c1..}1..
   1501c:	00003201 00003215                       .2...2..

00015024 <Clock_Ip_axFracDivCallbacks>:
   15024:	000033d5 000033d5 000033df              .3...3...3..

00015030 <Clock_Ip_axGateCallbacks>:
   15030:	000033f9 00003403 00003503 0000351d     .3...4...5...5..
   15040:	000034b3 000034cd 00003463 0000347d     .4...4..c4..}4..
   15050:	00003413 0000342d 00003553 0000356d     .4..-4..S5..m5..
   15060:	000035a3 000035bd                       .5...5..

00015068 <Clock_Ip_axIntOscCallbacks>:
   15068:	00003769 00003769 00003773 0000377d     i7..i7..s7..}7..
   15078:	00003797 000037b1 000037c5 000037df     .7...7...7...7..
   15088:	000037f9 0000380d 00003827 00003841     .7...8..'8..A8..
   15098:	000038e9 00003903 0000391d              .8...9...9..

000150a4 <Clock_Ip_axCmuCallbacks>:
   150a4:	00003eb9 00003ec3 00003ecf 00003eb9     .>...>...>...>..

000150b4 <Clock_Ip_axPllCallbacks>:
   150b4:	00003ed9 00003ed9 00003ee3 00003ed9     .>...>...>...>..
   150c4:	00003eef 00003ef9 00003f13 00003f2d     .>...>...?..-?..
   150d4:	00003fd1 00003fbd                       .?...?..

000150dc <Clock_Ip_axPcfsCallbacks>:
   150dc:	0000412d                                -A..

000150e0 <Clock_Ip_axSelectorCallbacks>:
   150e0:	00004139 00004139 00004143 0000415d     9A..9A..CA..]A..
   150f0:	00004139 00004177 00004191 000041ab     9A..wA...A...A..
   15100:	000041c5 000041df 000041f9 00004213     .A...A...A...B..
   15110:	0000422d 00004247 00004261 0000427b     -B..GB..aB..{B..
   15120:	00004295 000042af 000042c9 000042e3     .B...B...B...B..
   15130:	000042fd 00004317                       .B...C..

00015138 <ClockSource>:
   15138:	00000000 00000008 00000002 00000005     ................
	...
   15150:	00000009                                ....

00015154 <ResetReasonArray>:
   15154:	00000000 00000001 00000002 00000003     ................
   15164:	00000004 00000005 00000006 00000007     ................
   15174:	00000008 00000009 0000000a 0000000b     ................
   15184:	0000000c 0000000d 0000000e              ............

00015190 <Port_au32PortCiPortBaseAddr>:
   15190:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   151a0:	4004d000                                ...@

000151a4 <Port_au32PortCiGpioBaseAddr>:
   151a4:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   151b4:	400ff100                                ...@

000151b8 <Adc_Ip_apxBase>:
   151b8:	4003b000 40027000                       ...@.p.@

000151c0 <Pdb_Adc_Ip_apxBase>:
   151c0:	40036000 40031000                       .`.@...@

000151c8 <Ftm_Pwm_Ip_aFtmBase>:
   151c8:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

000151d8 <AdcIpChansConfig_0>:
   151d8:	00000000 00000005 00000000 00000001     ................
   151e8:	00000008 00000000                       ........

000151f0 <AdcIpConfig_0>:
   151f0:	00000000 00000003 00000000 0000000c     ................
   15200:	00000000 00000001 00000001 00000000     ................
	...
   15218:	00ff0000 00000000 00000000 000151d8     .............Q..
   15228:	0000a289                                ....

0001522c <AdcIpwCfg>:
   1522c:	000151f0 00000000 000157fc 00000000     .Q.......W......
   1523c:	ff01ff00 00000001 00000002 0001ffff     ................
   1524c:	0000ff00                                ....

00015250 <AdcIpwGroupConfig_0>:
	...
   15258:	000000c8 00010000 00000000              ............

00015264 <Adc_Group0_Assignment_0>:
   15264:	00010000                                ....

00015268 <Adc_GroupsCfg>:
	...
   15284:	00000001 00015264 00080002 00000005     ....dR..........
   15294:	00000000 00015250                       ....PR..

0001529c <Adc_au16GroupIdToIndexMap>:
   1529c:	00000000                                ....

000152a0 <Adc_Partition_Assignment>:
   152a0:	00000000                                ....

000152a4 <Adc_Config>:
   152a4:	0001522c 00015268 00000001 0001529c     ,R..hR.......R..
   152b4:	00000000 000152a0 00000001              .....R......

000152c0 <Mcu_aClockConfigPB>:
	...
   152c8:	1c000101 04000010 01000029 00000005     ........).......
   152d8:	00000001 00000000 00000057 00000000     ........W.......
   152e8:	00000000 00000008 007a1200 00000001     ..........z.....
   152f8:	00000001 00000000 00000057 00000000     ........W.......
   15308:	00000057 00000000 00000000 00000000     W...............
	...
   15328:	00000019 00000005 0000001a 00000002     ................
   15338:	0000001b 00000005 0000002a 00000005     ........*.......
   15348:	00000028 0000000e 00000029 00000001     (.......).......
   15358:	00000056 0000001c 00000032 0000002a     V.......2...*...
   15368:	0000002b 00000014 0000002c 00000014     +.......,.......
   15378:	0000002d 00000014 0000002e 00000014     -...............
   15388:	0000003f 00000000 00000040 00000000     ?.......@.......
   15398:	00000041 00000000 00000042 00000000     A.......B.......
   153a8:	00000031 00000000 00000045 00000000     1.......E.......
   153b8:	00000046 00000000 00000047 00000000     F.......G.......
   153c8:	00000044 00000000 00000030 0000000d     D.......0.......
   153d8:	0000003d 00000000 00000043 00000000     =.......C.......
   153e8:	00000049 00000000 0000004a 00000000     I.......J.......
   153f8:	0000004b 00000000 00000048 00000000     K.......H.......
   15408:	0000000c 00000001 00000000 0000000d     ................
   15418:	00000002 00000000 0000000e 00000001     ................
   15428:	00000000 0000000f 00000001 00000000     ................
   15438:	0000001d 00000001 00000000 0000001e     ................
   15448:	00000008 00000000 0000001f 00000001     ................
   15458:	00000000 00000021 00000001 00000000     ....!...........
   15468:	00000022 00000002 00000000 00000023     "...........#...
   15478:	00000001 00000000 00000025 00000003     ........%.......
   15488:	00000000 00000026 00000004 00000000     ....&...........
   15498:	00000027 00000002 00000000 00000032     '...........2...
   154a8:	00000001 00000000 00000048 00000001     ........H.......
   154b8:	00000001 00000056 00000001 00000001     ....V...........
   154c8:	00000057 00000000 00000000 00000057     W...........W...
	...
   154e0:	00000057 00000000 00000000 00000057     W...........W...
	...
   154f8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   15514:	00000014 00007d00 00000015 00007d00     .....}.......}..
   15524:	00000016 00007d00 00000017 00008000     .....}..........
   15534:	00000012 00000001 00000013 00000001     ................
   15544:	00000030 00000001 00000031 00000000     0.......1.......
   15554:	00000032 00000000 00000033 00000000     2.......3.......
   15564:	00000034 00000000 00000035 00000001     4.......5.......
   15574:	00000036 00000000 00000037 00000001     6.......7.......
   15584:	00000038 00000001 00000039 00000000     8.......9.......
   15594:	0000003a 00000000 0000003b 00000000     :.......;.......
   155a4:	0000003c 00000000 0000003d 00000000     <.......=.......
   155b4:	0000003e 00000000 0000003f 00000001     >.......?.......
   155c4:	00000040 00000000 00000041 00000000     @.......A.......
   155d4:	00000042 00000000 00000043 00000000     B.......C.......
   155e4:	00000044 00000000 00000045 00000000     D.......E.......
   155f4:	00000046 00000000 00000047 00000000     F.......G.......
   15604:	00000048 00000000 00000049 00000000     H.......I.......
   15614:	0000004a 00000000 0000004b 00000000     J.......K.......
   15624:	0000004c 00000001 0000004d 00000001     L.......M.......
   15634:	0000004e 00000001 0000004f 00000000     N.......O.......
   15644:	00000050 00000001 00000051 00000001     P.......Q.......
   15654:	00000052 00000001 00000053 00000001     R.......S.......
   15664:	00000054 00000001 00000055 00000000     T.......U.......
   15674:	00000056 00000001 00000057 00000000     V.......W.......
   15684:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000156b8 <Ftm_Pwm_Ip_SyncCfg0>:
	...
   156d4:	00000003 00000003                       ........

000156dc <Ftm_Pwm_Ip_InstCfg0>:
   156dc:	00000001 00000007 00000000 00000000     ................
	...
   15710:	0000927c 00000001 00000000 00000000     |...............
   15720:	00000000 000156b8                       .....V..

00015728 <Ftm_Pwm_Ip_I0_Ch2>:
   15728:	00000002 0000000a 00000000 00000000     ................
   15738:	00000000 00000001 00000000 00000000     ................
	...

00015750 <Ftm_Pwm_Ip_I0_Ch0>:
   15750:	00000000 0000000a 00000000 00000000     ................
   15760:	00000000 00000001 00000000 00000000     ................
	...

00015778 <Ftm_Pwm_Ip_I0_Ch1>:
   15778:	00000001 0000000a 00000000 00000000     ................
   15788:	00000000 00000001 00000000 00000000     ................
	...

000157a0 <Ftm_Pwm_Ip_I0_ChArray>:
   157a0:	00015728 00015750 00015778              (W..PW..xW..

000157ac <Ftm_Pwm_Ip_UserCfg0>:
   157ac:	000156dc 000157a0 00000003 00000000     .V...W..........
   157bc:	00000000                                ....

000157c0 <aIrqConfiguration>:
   157c0:	00000027 00000f01 00008bcd              '...........

000157cc <intCtrlConfig>:
   157cc:	00000001 000157c0                       .....W..

000157d4 <Mcu_Config>:
   157d4:	0000005a 00000000 00000001 00000001     Z...............
   157e4:	00015a50 000152c0 00015a5c              PZ...R..\Z..

000157f0 <OsIf_xPredefinedConfig>:
   157f0:	00000000 02dc6c00                       .....l..

000157f8 <OsIf_apxPredefinedConfig>:
   157f8:	000157f0                                .W..

000157fc <PdbAdcIpConfig_0>:
	...
   15808:	0000000f ffff0000 00000000 00000000     ................
   15818:	00000000                                ....

0001581c <Platform_uConfiguration>:
   1581c:	00015824                                $X..

00015820 <Platform_Config>:
   15820:	0001581c                                .X..

00015824 <ipwConfig>:
   15824:	000157cc 00000000                       .W......

0001582c <g_pin_mux_InitConfigArr>:
   1582c:	4004a000 00000000 00000001 00000002     ...@............
   1583c:	00000000 00000002 00000000 00000000     ................
	...
   15854:	4004a000 00000000 0000000d 00000002     ...@............
   15864:	00000000 00000002 00000000 00000000     ................
	...
   1587c:	4004c000 00000000 00000000 00000002     ...@............
   1588c:	00000002 00000002 00000000 00000000     ................
	...
   158a4:	4004c000 00000000 0000000f 00000002     ...@............
   158b4:	00000002 00000002 00000000 00000000     ................
	...
   158cc:	4004c000 00000000 00000010 00000002     ...@............
   158dc:	00000002 00000002 00000000 00000000     ................
	...

000158f4 <au8Port_PartitionList>:
   158f4:	00000001                                ....

000158f8 <au32Port_PinToPartitionMap>:
   158f8:	00000001 00000001 00000001 00000001     ................
   15908:	00000001                                ....

0001590c <Port_au16NoUnUsedPadsArrayDefault>:
   1590c:	00010000 00030002 00070006 00090008     ................
   1591c:	000c000b 000e000d 0010000f 00200011     .............. .
   1592c:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   1593c:	002b002a 002e002c 0030002f 00400031     *.+.,.../.0.1.@.
   1594c:	00420041 00460043 00480047 004a0049     A.B.C.F.G.H.I.J.
   1595c:	004c004b 004e004d 0050004f 00610051     K.L.M.N.O.P.Q.a.
   1596c:	00630062 00650064 00670066 00690068     b.c.d.e.f.g.h.i.
   1597c:	006b006a 006d006c 0071006e 00810080     j.k.l.m.n.q.....
   1598c:	00830082 00850084 00870086 00890088     ................
   1599c:	008b008a 008d008c 008f008e 00000090     ................

000159ac <Port_UnUsedPin>:
   159ac:	00000100 00000001 00000000              ............

000159b8 <Port_aPinConfigDefault>:
   159b8:	00000021 00000000 00000002 00000000     !...............
   159c8:	00010000 0000002d 00000000 00000002     ....-...........
   159d8:	00000000 00010000 00000060 00000200     ........`.......
   159e8:	00000000 00000002 00010000 0000006f     ............o...
   159f8:	00000200 00000000 00000002 00010000     ................
   15a08:	00000070 00000200 00000000 00000002     p...............
   15a18:	00010000                                ....

00015a1c <Port_Config>:
   15a1c:	004f0005 0001590c 000159ac 000159b8     ..O..Y...Y...Y..
	...
   15a34:	000158f8 000158f4 0001582c              .X...X..,X..

00015a40 <Power_Ip_RCM_ConfigPB>:
	...

00015a48 <Power_Ip_PMC_ConfigPB>:
   15a48:	00000000                                ....

00015a4c <Power_Ip_SMC_ConfigPB>:
   15a4c:	00000000                                ....

00015a50 <Power_Ip_aModeConfigPB>:
	...

00015a5c <Power_Ip_HwIPsConfigPB>:
   15a5c:	00015a40 00015a48 00015a4c              @Z..HZ..LZ..

00015a68 <Pwm_Channels_PB>:
	...
   15a70:	00000001 00015728 00000000 00000001     ....(W..........
   15a80:	00000001 00000000 00000001 00015750     ............PW..
   15a90:	00000000 00000001 00000002 00000000     ................
   15aa0:	00000001 00015778 00000000 00000001     ....xW..........

00015ab0 <Pwm_Instances_PB>:
   15ab0:	00000000 00000001 000157ac              .........W..

00015abc <Pwm_Config>:
   15abc:	00000003 00015a68 00000001 00015ab0     ....hZ.......Z..

00015acc <_aInitStr.0>:
   15acc:	00000000 54540000 45522052 53454747     ......TTR REGGES
   15adc:	00000000                                ....

00015ae0 <_aV2C.0>:
   15ae0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00015af0 <__INIT_TABLE>:
   15af0:	00000002 	.word	0x00000002
   15af4:	1fff8b10 	.word	0x1fff8b10
   15af8:	00015b18 	.word	0x00015b18
   15afc:	00015b48 	.word	0x00015b48
   15b00:	1fff8800 	.word	0x1fff8800
   15b04:	00000000 	.word	0x00000000
   15b08:	00000310 	.word	0x00000310

00015b0c <__ZERO_TABLE>:
   15b0c:	00000001 	.word	0x00000001
   15b10:	1fff8b40 	.word	0x1fff8b40
   15b14:	1fff9bc0 	.word	0x1fff9bc0
